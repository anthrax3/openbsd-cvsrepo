head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.4
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.03.27.19.14.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.32;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.32;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from glx.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "glx.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"

xcb_extension_t xcb_glx_id = { "GLX", 0 };

void
xcb_glx_pixmap_next (xcb_glx_pixmap_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_glx_pixmap_t);
}

xcb_generic_iterator_t
xcb_glx_pixmap_end (xcb_glx_pixmap_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_glx_context_next (xcb_glx_context_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_glx_context_t);
}

xcb_generic_iterator_t
xcb_glx_context_end (xcb_glx_context_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_glx_pbuffer_next (xcb_glx_pbuffer_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_glx_pbuffer_t);
}

xcb_generic_iterator_t
xcb_glx_pbuffer_end (xcb_glx_pbuffer_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_glx_window_next (xcb_glx_window_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_glx_window_t);
}

xcb_generic_iterator_t
xcb_glx_window_end (xcb_glx_window_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_glx_fbconfig_next (xcb_glx_fbconfig_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_glx_fbconfig_t);
}

xcb_generic_iterator_t
xcb_glx_fbconfig_end (xcb_glx_fbconfig_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_glx_drawable_next (xcb_glx_drawable_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_glx_drawable_t);
}

xcb_generic_iterator_t
xcb_glx_drawable_end (xcb_glx_drawable_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_glx_float32_next (xcb_glx_float32_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_glx_float32_t);
}

xcb_generic_iterator_t
xcb_glx_float32_end (xcb_glx_float32_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_glx_float64_next (xcb_glx_float64_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_glx_float64_t);
}

xcb_generic_iterator_t
xcb_glx_float64_end (xcb_glx_float64_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_glx_bool32_next (xcb_glx_bool32_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_glx_bool32_t);
}

xcb_generic_iterator_t
xcb_glx_bool32_end (xcb_glx_bool32_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_glx_context_tag_next (xcb_glx_context_tag_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_glx_context_tag_t);
}

xcb_generic_iterator_t
xcb_glx_context_tag_end (xcb_glx_context_tag_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_glx_render_sizeof (const void  *_buffer,
                       uint32_t     data_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_render_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += data_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_glx_render_checked (xcb_connection_t      *c,
                        xcb_glx_context_tag_t  context_tag,
                        uint32_t               data_len,
                        const uint8_t         *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_RENDER,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_render_request_t xcb_out;

    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_render (xcb_connection_t      *c,
                xcb_glx_context_tag_t  context_tag,
                uint32_t               data_len,
                const uint8_t         *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_RENDER,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_render_request_t xcb_out;

    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_render_data (const xcb_glx_render_request_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_render_data_length (const xcb_glx_render_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_glx_render_request_t))/sizeof(uint8_t));
}

xcb_generic_iterator_t
xcb_glx_render_data_end (const xcb_glx_render_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_glx_render_request_t))/sizeof(uint8_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_glx_render_large_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_render_large_request_t *_aux = (xcb_glx_render_large_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_render_large_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->data_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_glx_render_large_checked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint16_t               request_num,
                              uint16_t               request_total,
                              uint32_t               data_len,
                              const uint8_t         *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_RENDER_LARGE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_render_large_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.request_num = request_num;
    xcb_out.request_total = request_total;
    xcb_out.data_len = data_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_render_large (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      uint16_t               request_num,
                      uint16_t               request_total,
                      uint32_t               data_len,
                      const uint8_t         *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_RENDER_LARGE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_render_large_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.request_num = request_num;
    xcb_out.request_total = request_total;
    xcb_out.data_len = data_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_render_large_data (const xcb_glx_render_large_request_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_render_large_data_length (const xcb_glx_render_large_request_t *R)
{
    return R->data_len;
}

xcb_generic_iterator_t
xcb_glx_render_large_data_end (const xcb_glx_render_large_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + (R->data_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_glx_create_context_checked (xcb_connection_t  *c,
                                xcb_glx_context_t  context,
                                xcb_visualid_t     visual,
                                uint32_t           screen,
                                xcb_glx_context_t  share_list,
                                uint8_t            is_direct)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CREATE_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_create_context_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.visual = visual;
    xcb_out.screen = screen;
    xcb_out.share_list = share_list;
    xcb_out.is_direct = is_direct;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_create_context (xcb_connection_t  *c,
                        xcb_glx_context_t  context,
                        xcb_visualid_t     visual,
                        uint32_t           screen,
                        xcb_glx_context_t  share_list,
                        uint8_t            is_direct)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CREATE_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_create_context_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.visual = visual;
    xcb_out.screen = screen;
    xcb_out.share_list = share_list;
    xcb_out.is_direct = is_direct;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_destroy_context_checked (xcb_connection_t  *c,
                                 xcb_glx_context_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DESTROY_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_destroy_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_destroy_context (xcb_connection_t  *c,
                         xcb_glx_context_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DESTROY_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_destroy_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_make_current_cookie_t
xcb_glx_make_current (xcb_connection_t      *c,
                      xcb_glx_drawable_t     drawable,
                      xcb_glx_context_t      context,
                      xcb_glx_context_tag_t  old_context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_MAKE_CURRENT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_make_current_cookie_t xcb_ret;
    xcb_glx_make_current_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.context = context;
    xcb_out.old_context_tag = old_context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_make_current_cookie_t
xcb_glx_make_current_unchecked (xcb_connection_t      *c,
                                xcb_glx_drawable_t     drawable,
                                xcb_glx_context_t      context,
                                xcb_glx_context_tag_t  old_context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_MAKE_CURRENT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_make_current_cookie_t xcb_ret;
    xcb_glx_make_current_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.context = context;
    xcb_out.old_context_tag = old_context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_make_current_reply_t *
xcb_glx_make_current_reply (xcb_connection_t               *c,
                            xcb_glx_make_current_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e)
{
    return (xcb_glx_make_current_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_glx_is_direct_cookie_t
xcb_glx_is_direct (xcb_connection_t  *c,
                   xcb_glx_context_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_IS_DIRECT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_is_direct_cookie_t xcb_ret;
    xcb_glx_is_direct_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_is_direct_cookie_t
xcb_glx_is_direct_unchecked (xcb_connection_t  *c,
                             xcb_glx_context_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_IS_DIRECT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_is_direct_cookie_t xcb_ret;
    xcb_glx_is_direct_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_is_direct_reply_t *
xcb_glx_is_direct_reply (xcb_connection_t            *c,
                         xcb_glx_is_direct_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e)
{
    return (xcb_glx_is_direct_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_glx_query_version_cookie_t
xcb_glx_query_version (xcb_connection_t *c,
                       uint32_t          major_version,
                       uint32_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_query_version_cookie_t xcb_ret;
    xcb_glx_query_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_query_version_cookie_t
xcb_glx_query_version_unchecked (xcb_connection_t *c,
                                 uint32_t          major_version,
                                 uint32_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_query_version_cookie_t xcb_ret;
    xcb_glx_query_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_query_version_reply_t *
xcb_glx_query_version_reply (xcb_connection_t                *c,
                             xcb_glx_query_version_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_glx_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_glx_wait_gl_checked (xcb_connection_t      *c,
                         xcb_glx_context_tag_t  context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_WAIT_GL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_wait_gl_request_t xcb_out;

    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_wait_gl (xcb_connection_t      *c,
                 xcb_glx_context_tag_t  context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_WAIT_GL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_wait_gl_request_t xcb_out;

    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_wait_x_checked (xcb_connection_t      *c,
                        xcb_glx_context_tag_t  context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_WAIT_X,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_wait_x_request_t xcb_out;

    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_wait_x (xcb_connection_t      *c,
                xcb_glx_context_tag_t  context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_WAIT_X,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_wait_x_request_t xcb_out;

    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_copy_context_checked (xcb_connection_t      *c,
                              xcb_glx_context_t      src,
                              xcb_glx_context_t      dest,
                              uint32_t               mask,
                              xcb_glx_context_tag_t  src_context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_COPY_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_copy_context_request_t xcb_out;

    xcb_out.src = src;
    xcb_out.dest = dest;
    xcb_out.mask = mask;
    xcb_out.src_context_tag = src_context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_copy_context (xcb_connection_t      *c,
                      xcb_glx_context_t      src,
                      xcb_glx_context_t      dest,
                      uint32_t               mask,
                      xcb_glx_context_tag_t  src_context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_COPY_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_copy_context_request_t xcb_out;

    xcb_out.src = src;
    xcb_out.dest = dest;
    xcb_out.mask = mask;
    xcb_out.src_context_tag = src_context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_swap_buffers_checked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              xcb_glx_drawable_t     drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_SWAP_BUFFERS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_swap_buffers_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_swap_buffers (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      xcb_glx_drawable_t     drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_SWAP_BUFFERS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_swap_buffers_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_use_x_font_checked (xcb_connection_t      *c,
                            xcb_glx_context_tag_t  context_tag,
                            xcb_font_t             font,
                            uint32_t               first,
                            uint32_t               count,
                            uint32_t               list_base)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_USE_X_FONT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_use_x_font_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.font = font;
    xcb_out.first = first;
    xcb_out.count = count;
    xcb_out.list_base = list_base;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_use_x_font (xcb_connection_t      *c,
                    xcb_glx_context_tag_t  context_tag,
                    xcb_font_t             font,
                    uint32_t               first,
                    uint32_t               count,
                    uint32_t               list_base)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_USE_X_FONT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_use_x_font_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.font = font;
    xcb_out.first = first;
    xcb_out.count = count;
    xcb_out.list_base = list_base;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_create_glx_pixmap_checked (xcb_connection_t *c,
                                   uint32_t          screen,
                                   xcb_visualid_t    visual,
                                   xcb_pixmap_t      pixmap,
                                   xcb_glx_pixmap_t  glx_pixmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CREATE_GLX_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_create_glx_pixmap_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.visual = visual;
    xcb_out.pixmap = pixmap;
    xcb_out.glx_pixmap = glx_pixmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_create_glx_pixmap (xcb_connection_t *c,
                           uint32_t          screen,
                           xcb_visualid_t    visual,
                           xcb_pixmap_t      pixmap,
                           xcb_glx_pixmap_t  glx_pixmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CREATE_GLX_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_create_glx_pixmap_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.visual = visual;
    xcb_out.pixmap = pixmap;
    xcb_out.glx_pixmap = glx_pixmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_glx_get_visual_configs_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_visual_configs_reply_t *_aux = (xcb_glx_get_visual_configs_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_visual_configs_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* property_list */
    xcb_block_len += _aux->length * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_visual_configs_cookie_t
xcb_glx_get_visual_configs (xcb_connection_t *c,
                            uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_VISUAL_CONFIGS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_visual_configs_cookie_t xcb_ret;
    xcb_glx_get_visual_configs_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_visual_configs_cookie_t
xcb_glx_get_visual_configs_unchecked (xcb_connection_t *c,
                                      uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_VISUAL_CONFIGS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_visual_configs_cookie_t xcb_ret;
    xcb_glx_get_visual_configs_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_get_visual_configs_property_list (const xcb_glx_get_visual_configs_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_get_visual_configs_property_list_length (const xcb_glx_get_visual_configs_reply_t *R)
{
    return R->length;
}

xcb_generic_iterator_t
xcb_glx_get_visual_configs_property_list_end (const xcb_glx_get_visual_configs_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_visual_configs_reply_t *
xcb_glx_get_visual_configs_reply (xcb_connection_t                     *c,
                                  xcb_glx_get_visual_configs_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e)
{
    return (xcb_glx_get_visual_configs_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_glx_destroy_glx_pixmap_checked (xcb_connection_t *c,
                                    xcb_glx_pixmap_t  glx_pixmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DESTROY_GLX_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_destroy_glx_pixmap_request_t xcb_out;

    xcb_out.glx_pixmap = glx_pixmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_destroy_glx_pixmap (xcb_connection_t *c,
                            xcb_glx_pixmap_t  glx_pixmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DESTROY_GLX_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_destroy_glx_pixmap_request_t xcb_out;

    xcb_out.glx_pixmap = glx_pixmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_glx_vendor_private_sizeof (const void  *_buffer,
                               uint32_t     data_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_vendor_private_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += data_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_glx_vendor_private_checked (xcb_connection_t      *c,
                                uint32_t               vendor_code,
                                xcb_glx_context_tag_t  context_tag,
                                uint32_t               data_len,
                                const uint8_t         *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_VENDOR_PRIVATE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_vendor_private_request_t xcb_out;

    xcb_out.vendor_code = vendor_code;
    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_vendor_private (xcb_connection_t      *c,
                        uint32_t               vendor_code,
                        xcb_glx_context_tag_t  context_tag,
                        uint32_t               data_len,
                        const uint8_t         *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_VENDOR_PRIVATE,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_vendor_private_request_t xcb_out;

    xcb_out.vendor_code = vendor_code;
    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_vendor_private_data (const xcb_glx_vendor_private_request_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_vendor_private_data_length (const xcb_glx_vendor_private_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_glx_vendor_private_request_t))/sizeof(uint8_t));
}

xcb_generic_iterator_t
xcb_glx_vendor_private_data_end (const xcb_glx_vendor_private_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_glx_vendor_private_request_t))/sizeof(uint8_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_glx_vendor_private_with_reply_sizeof (const void  *_buffer,
                                          uint32_t     data_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_vendor_private_with_reply_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += data_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_vendor_private_with_reply_cookie_t
xcb_glx_vendor_private_with_reply (xcb_connection_t      *c,
                                   uint32_t               vendor_code,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               data_len,
                                   const uint8_t         *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_VENDOR_PRIVATE_WITH_REPLY,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_glx_vendor_private_with_reply_cookie_t xcb_ret;
    xcb_glx_vendor_private_with_reply_request_t xcb_out;

    xcb_out.vendor_code = vendor_code;
    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_vendor_private_with_reply_cookie_t
xcb_glx_vendor_private_with_reply_unchecked (xcb_connection_t      *c,
                                             uint32_t               vendor_code,
                                             xcb_glx_context_tag_t  context_tag,
                                             uint32_t               data_len,
                                             const uint8_t         *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_VENDOR_PRIVATE_WITH_REPLY,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_glx_vendor_private_with_reply_cookie_t xcb_ret;
    xcb_glx_vendor_private_with_reply_request_t xcb_out;

    xcb_out.vendor_code = vendor_code;
    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_vendor_private_with_reply_data_2 (const xcb_glx_vendor_private_with_reply_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_vendor_private_with_reply_data_2_length (const xcb_glx_vendor_private_with_reply_reply_t *R)
{
    return (R->length * 4);
}

xcb_generic_iterator_t
xcb_glx_vendor_private_with_reply_data_2_end (const xcb_glx_vendor_private_with_reply_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->length * 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_vendor_private_with_reply_reply_t *
xcb_glx_vendor_private_with_reply_reply (xcb_connection_t                            *c,
                                         xcb_glx_vendor_private_with_reply_cookie_t   cookie  /**< */,
                                         xcb_generic_error_t                        **e)
{
    return (xcb_glx_vendor_private_with_reply_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_glx_query_extensions_string_cookie_t
xcb_glx_query_extensions_string (xcb_connection_t *c,
                                 uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_QUERY_EXTENSIONS_STRING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_query_extensions_string_cookie_t xcb_ret;
    xcb_glx_query_extensions_string_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_query_extensions_string_cookie_t
xcb_glx_query_extensions_string_unchecked (xcb_connection_t *c,
                                           uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_QUERY_EXTENSIONS_STRING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_query_extensions_string_cookie_t xcb_ret;
    xcb_glx_query_extensions_string_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_query_extensions_string_reply_t *
xcb_glx_query_extensions_string_reply (xcb_connection_t                          *c,
                                       xcb_glx_query_extensions_string_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e)
{
    return (xcb_glx_query_extensions_string_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_query_server_string_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_query_server_string_reply_t *_aux = (xcb_glx_query_server_string_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_query_server_string_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* string */
    xcb_block_len += _aux->str_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_query_server_string_cookie_t
xcb_glx_query_server_string (xcb_connection_t *c,
                             uint32_t          screen,
                             uint32_t          name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_QUERY_SERVER_STRING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_query_server_string_cookie_t xcb_ret;
    xcb_glx_query_server_string_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.name = name;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_query_server_string_cookie_t
xcb_glx_query_server_string_unchecked (xcb_connection_t *c,
                                       uint32_t          screen,
                                       uint32_t          name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_QUERY_SERVER_STRING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_query_server_string_cookie_t xcb_ret;
    xcb_glx_query_server_string_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.name = name;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_glx_query_server_string_string (const xcb_glx_query_server_string_reply_t *R)
{
    return (char *) (R + 1);
}

int
xcb_glx_query_server_string_string_length (const xcb_glx_query_server_string_reply_t *R)
{
    return R->str_len;
}

xcb_generic_iterator_t
xcb_glx_query_server_string_string_end (const xcb_glx_query_server_string_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->str_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_query_server_string_reply_t *
xcb_glx_query_server_string_reply (xcb_connection_t                      *c,
                                   xcb_glx_query_server_string_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_glx_query_server_string_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_client_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_client_info_request_t *_aux = (xcb_glx_client_info_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_client_info_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* string */
    xcb_block_len += _aux->str_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_glx_client_info_checked (xcb_connection_t *c,
                             uint32_t          major_version,
                             uint32_t          minor_version,
                             uint32_t          str_len,
                             const char       *string)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CLIENT_INFO,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_client_info_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;
    xcb_out.str_len = str_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char string */
    xcb_parts[4].iov_base = (char *) string;
    xcb_parts[4].iov_len = str_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_client_info (xcb_connection_t *c,
                     uint32_t          major_version,
                     uint32_t          minor_version,
                     uint32_t          str_len,
                     const char       *string)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CLIENT_INFO,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_client_info_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;
    xcb_out.str_len = str_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char string */
    xcb_parts[4].iov_base = (char *) string;
    xcb_parts[4].iov_len = str_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_glx_client_info_string (const xcb_glx_client_info_request_t *R)
{
    return (char *) (R + 1);
}

int
xcb_glx_client_info_string_length (const xcb_glx_client_info_request_t *R)
{
    return R->str_len;
}

xcb_generic_iterator_t
xcb_glx_client_info_string_end (const xcb_glx_client_info_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->str_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_glx_get_fb_configs_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_fb_configs_reply_t *_aux = (xcb_glx_get_fb_configs_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_fb_configs_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* property_list */
    xcb_block_len += _aux->length * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_fb_configs_cookie_t
xcb_glx_get_fb_configs (xcb_connection_t *c,
                        uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_FB_CONFIGS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_fb_configs_cookie_t xcb_ret;
    xcb_glx_get_fb_configs_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_fb_configs_cookie_t
xcb_glx_get_fb_configs_unchecked (xcb_connection_t *c,
                                  uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_FB_CONFIGS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_fb_configs_cookie_t xcb_ret;
    xcb_glx_get_fb_configs_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_get_fb_configs_property_list (const xcb_glx_get_fb_configs_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_get_fb_configs_property_list_length (const xcb_glx_get_fb_configs_reply_t *R)
{
    return R->length;
}

xcb_generic_iterator_t
xcb_glx_get_fb_configs_property_list_end (const xcb_glx_get_fb_configs_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_fb_configs_reply_t *
xcb_glx_get_fb_configs_reply (xcb_connection_t                 *c,
                              xcb_glx_get_fb_configs_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_glx_get_fb_configs_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_create_pixmap_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_create_pixmap_request_t *_aux = (xcb_glx_create_pixmap_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_create_pixmap_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* attribs */
    xcb_block_len += (_aux->num_attribs * 2) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_glx_create_pixmap_checked (xcb_connection_t   *c,
                               uint32_t            screen,
                               xcb_glx_fbconfig_t  fbconfig,
                               xcb_pixmap_t        pixmap,
                               xcb_glx_pixmap_t    glx_pixmap,
                               uint32_t            num_attribs,
                               const uint32_t     *attribs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CREATE_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_create_pixmap_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.fbconfig = fbconfig;
    xcb_out.pixmap = pixmap;
    xcb_out.glx_pixmap = glx_pixmap;
    xcb_out.num_attribs = num_attribs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t attribs */
    xcb_parts[4].iov_base = (char *) attribs;
    xcb_parts[4].iov_len = (num_attribs * 2) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_create_pixmap (xcb_connection_t   *c,
                       uint32_t            screen,
                       xcb_glx_fbconfig_t  fbconfig,
                       xcb_pixmap_t        pixmap,
                       xcb_glx_pixmap_t    glx_pixmap,
                       uint32_t            num_attribs,
                       const uint32_t     *attribs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CREATE_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_create_pixmap_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.fbconfig = fbconfig;
    xcb_out.pixmap = pixmap;
    xcb_out.glx_pixmap = glx_pixmap;
    xcb_out.num_attribs = num_attribs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t attribs */
    xcb_parts[4].iov_base = (char *) attribs;
    xcb_parts[4].iov_len = (num_attribs * 2) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_create_pixmap_attribs (const xcb_glx_create_pixmap_request_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_create_pixmap_attribs_length (const xcb_glx_create_pixmap_request_t *R)
{
    return (R->num_attribs * 2);
}

xcb_generic_iterator_t
xcb_glx_create_pixmap_attribs_end (const xcb_glx_create_pixmap_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + ((R->num_attribs * 2));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_glx_destroy_pixmap_checked (xcb_connection_t *c,
                                xcb_glx_pixmap_t  glx_pixmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DESTROY_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_destroy_pixmap_request_t xcb_out;

    xcb_out.glx_pixmap = glx_pixmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_destroy_pixmap (xcb_connection_t *c,
                        xcb_glx_pixmap_t  glx_pixmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DESTROY_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_destroy_pixmap_request_t xcb_out;

    xcb_out.glx_pixmap = glx_pixmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_create_new_context_checked (xcb_connection_t   *c,
                                    xcb_glx_context_t   context,
                                    xcb_glx_fbconfig_t  fbconfig,
                                    uint32_t            screen,
                                    uint32_t            render_type,
                                    xcb_glx_context_t   share_list,
                                    uint8_t             is_direct)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CREATE_NEW_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_create_new_context_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.fbconfig = fbconfig;
    xcb_out.screen = screen;
    xcb_out.render_type = render_type;
    xcb_out.share_list = share_list;
    xcb_out.is_direct = is_direct;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_create_new_context (xcb_connection_t   *c,
                            xcb_glx_context_t   context,
                            xcb_glx_fbconfig_t  fbconfig,
                            uint32_t            screen,
                            uint32_t            render_type,
                            xcb_glx_context_t   share_list,
                            uint8_t             is_direct)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CREATE_NEW_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_create_new_context_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.fbconfig = fbconfig;
    xcb_out.screen = screen;
    xcb_out.render_type = render_type;
    xcb_out.share_list = share_list;
    xcb_out.is_direct = is_direct;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_glx_query_context_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_query_context_reply_t *_aux = (xcb_glx_query_context_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_query_context_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* attribs */
    xcb_block_len += (_aux->num_attribs * 2) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_query_context_cookie_t
xcb_glx_query_context (xcb_connection_t  *c,
                       xcb_glx_context_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_QUERY_CONTEXT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_query_context_cookie_t xcb_ret;
    xcb_glx_query_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_query_context_cookie_t
xcb_glx_query_context_unchecked (xcb_connection_t  *c,
                                 xcb_glx_context_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_QUERY_CONTEXT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_query_context_cookie_t xcb_ret;
    xcb_glx_query_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_query_context_attribs (const xcb_glx_query_context_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_query_context_attribs_length (const xcb_glx_query_context_reply_t *R)
{
    return (R->num_attribs * 2);
}

xcb_generic_iterator_t
xcb_glx_query_context_attribs_end (const xcb_glx_query_context_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + ((R->num_attribs * 2));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_query_context_reply_t *
xcb_glx_query_context_reply (xcb_connection_t                *c,
                             xcb_glx_query_context_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_glx_query_context_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_glx_make_context_current_cookie_t
xcb_glx_make_context_current (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  old_context_tag,
                              xcb_glx_drawable_t     drawable,
                              xcb_glx_drawable_t     read_drawable,
                              xcb_glx_context_t      context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_MAKE_CONTEXT_CURRENT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_make_context_current_cookie_t xcb_ret;
    xcb_glx_make_context_current_request_t xcb_out;

    xcb_out.old_context_tag = old_context_tag;
    xcb_out.drawable = drawable;
    xcb_out.read_drawable = read_drawable;
    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_make_context_current_cookie_t
xcb_glx_make_context_current_unchecked (xcb_connection_t      *c,
                                        xcb_glx_context_tag_t  old_context_tag,
                                        xcb_glx_drawable_t     drawable,
                                        xcb_glx_drawable_t     read_drawable,
                                        xcb_glx_context_t      context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_MAKE_CONTEXT_CURRENT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_make_context_current_cookie_t xcb_ret;
    xcb_glx_make_context_current_request_t xcb_out;

    xcb_out.old_context_tag = old_context_tag;
    xcb_out.drawable = drawable;
    xcb_out.read_drawable = read_drawable;
    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_make_context_current_reply_t *
xcb_glx_make_context_current_reply (xcb_connection_t                       *c,
                                    xcb_glx_make_context_current_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e)
{
    return (xcb_glx_make_context_current_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_create_pbuffer_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_create_pbuffer_request_t *_aux = (xcb_glx_create_pbuffer_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_create_pbuffer_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* attribs */
    xcb_block_len += (_aux->num_attribs * 2) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_glx_create_pbuffer_checked (xcb_connection_t   *c,
                                uint32_t            screen,
                                xcb_glx_fbconfig_t  fbconfig,
                                xcb_glx_pbuffer_t   pbuffer,
                                uint32_t            num_attribs,
                                const uint32_t     *attribs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CREATE_PBUFFER,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_create_pbuffer_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.fbconfig = fbconfig;
    xcb_out.pbuffer = pbuffer;
    xcb_out.num_attribs = num_attribs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t attribs */
    xcb_parts[4].iov_base = (char *) attribs;
    xcb_parts[4].iov_len = (num_attribs * 2) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_create_pbuffer (xcb_connection_t   *c,
                        uint32_t            screen,
                        xcb_glx_fbconfig_t  fbconfig,
                        xcb_glx_pbuffer_t   pbuffer,
                        uint32_t            num_attribs,
                        const uint32_t     *attribs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CREATE_PBUFFER,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_create_pbuffer_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.fbconfig = fbconfig;
    xcb_out.pbuffer = pbuffer;
    xcb_out.num_attribs = num_attribs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t attribs */
    xcb_parts[4].iov_base = (char *) attribs;
    xcb_parts[4].iov_len = (num_attribs * 2) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_create_pbuffer_attribs (const xcb_glx_create_pbuffer_request_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_create_pbuffer_attribs_length (const xcb_glx_create_pbuffer_request_t *R)
{
    return (R->num_attribs * 2);
}

xcb_generic_iterator_t
xcb_glx_create_pbuffer_attribs_end (const xcb_glx_create_pbuffer_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + ((R->num_attribs * 2));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_glx_destroy_pbuffer_checked (xcb_connection_t  *c,
                                 xcb_glx_pbuffer_t  pbuffer)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DESTROY_PBUFFER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_destroy_pbuffer_request_t xcb_out;

    xcb_out.pbuffer = pbuffer;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_destroy_pbuffer (xcb_connection_t  *c,
                         xcb_glx_pbuffer_t  pbuffer)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DESTROY_PBUFFER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_destroy_pbuffer_request_t xcb_out;

    xcb_out.pbuffer = pbuffer;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_glx_get_drawable_attributes_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_drawable_attributes_reply_t *_aux = (xcb_glx_get_drawable_attributes_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_drawable_attributes_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* attribs */
    xcb_block_len += (_aux->num_attribs * 2) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_drawable_attributes_cookie_t
xcb_glx_get_drawable_attributes (xcb_connection_t   *c,
                                 xcb_glx_drawable_t  drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_DRAWABLE_ATTRIBUTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_drawable_attributes_cookie_t xcb_ret;
    xcb_glx_get_drawable_attributes_request_t xcb_out;

    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_drawable_attributes_cookie_t
xcb_glx_get_drawable_attributes_unchecked (xcb_connection_t   *c,
                                           xcb_glx_drawable_t  drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_DRAWABLE_ATTRIBUTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_drawable_attributes_cookie_t xcb_ret;
    xcb_glx_get_drawable_attributes_request_t xcb_out;

    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_get_drawable_attributes_attribs (const xcb_glx_get_drawable_attributes_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_get_drawable_attributes_attribs_length (const xcb_glx_get_drawable_attributes_reply_t *R)
{
    return (R->num_attribs * 2);
}

xcb_generic_iterator_t
xcb_glx_get_drawable_attributes_attribs_end (const xcb_glx_get_drawable_attributes_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + ((R->num_attribs * 2));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_drawable_attributes_reply_t *
xcb_glx_get_drawable_attributes_reply (xcb_connection_t                          *c,
                                       xcb_glx_get_drawable_attributes_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e)
{
    return (xcb_glx_get_drawable_attributes_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_change_drawable_attributes_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_change_drawable_attributes_request_t *_aux = (xcb_glx_change_drawable_attributes_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_change_drawable_attributes_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* attribs */
    xcb_block_len += (_aux->num_attribs * 2) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_glx_change_drawable_attributes_checked (xcb_connection_t   *c,
                                            xcb_glx_drawable_t  drawable,
                                            uint32_t            num_attribs,
                                            const uint32_t     *attribs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CHANGE_DRAWABLE_ATTRIBUTES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_change_drawable_attributes_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.num_attribs = num_attribs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t attribs */
    xcb_parts[4].iov_base = (char *) attribs;
    xcb_parts[4].iov_len = (num_attribs * 2) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_change_drawable_attributes (xcb_connection_t   *c,
                                    xcb_glx_drawable_t  drawable,
                                    uint32_t            num_attribs,
                                    const uint32_t     *attribs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CHANGE_DRAWABLE_ATTRIBUTES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_change_drawable_attributes_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.num_attribs = num_attribs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t attribs */
    xcb_parts[4].iov_base = (char *) attribs;
    xcb_parts[4].iov_len = (num_attribs * 2) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_change_drawable_attributes_attribs (const xcb_glx_change_drawable_attributes_request_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_change_drawable_attributes_attribs_length (const xcb_glx_change_drawable_attributes_request_t *R)
{
    return (R->num_attribs * 2);
}

xcb_generic_iterator_t
xcb_glx_change_drawable_attributes_attribs_end (const xcb_glx_change_drawable_attributes_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + ((R->num_attribs * 2));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_glx_create_window_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_create_window_request_t *_aux = (xcb_glx_create_window_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_create_window_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* attribs */
    xcb_block_len += (_aux->num_attribs * 2) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_glx_create_window_checked (xcb_connection_t   *c,
                               uint32_t            screen,
                               xcb_glx_fbconfig_t  fbconfig,
                               xcb_window_t        window,
                               xcb_glx_window_t    glx_window,
                               uint32_t            num_attribs,
                               const uint32_t     *attribs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CREATE_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_create_window_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.fbconfig = fbconfig;
    xcb_out.window = window;
    xcb_out.glx_window = glx_window;
    xcb_out.num_attribs = num_attribs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t attribs */
    xcb_parts[4].iov_base = (char *) attribs;
    xcb_parts[4].iov_len = (num_attribs * 2) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_create_window (xcb_connection_t   *c,
                       uint32_t            screen,
                       xcb_glx_fbconfig_t  fbconfig,
                       xcb_window_t        window,
                       xcb_glx_window_t    glx_window,
                       uint32_t            num_attribs,
                       const uint32_t     *attribs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CREATE_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_create_window_request_t xcb_out;

    xcb_out.screen = screen;
    xcb_out.fbconfig = fbconfig;
    xcb_out.window = window;
    xcb_out.glx_window = glx_window;
    xcb_out.num_attribs = num_attribs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t attribs */
    xcb_parts[4].iov_base = (char *) attribs;
    xcb_parts[4].iov_len = (num_attribs * 2) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_create_window_attribs (const xcb_glx_create_window_request_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_create_window_attribs_length (const xcb_glx_create_window_request_t *R)
{
    return (R->num_attribs * 2);
}

xcb_generic_iterator_t
xcb_glx_create_window_attribs_end (const xcb_glx_create_window_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + ((R->num_attribs * 2));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_glx_delete_window_checked (xcb_connection_t *c,
                               xcb_glx_window_t  glxwindow)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DELETE_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_delete_window_request_t xcb_out;

    xcb_out.glxwindow = glxwindow;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_delete_window (xcb_connection_t *c,
                       xcb_glx_window_t  glxwindow)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DELETE_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_delete_window_request_t xcb_out;

    xcb_out.glxwindow = glxwindow;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_glx_set_client_info_arb_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_set_client_info_arb_request_t *_aux = (xcb_glx_set_client_info_arb_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_set_client_info_arb_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* gl_versions */
    xcb_block_len += (_aux->num_versions * 2) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* gl_extension_string */
    xcb_block_len += _aux->gl_str_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* glx_extension_string */
    xcb_block_len += _aux->glx_str_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_glx_set_client_info_arb_checked (xcb_connection_t *c,
                                     uint32_t          major_version,
                                     uint32_t          minor_version,
                                     uint32_t          num_versions,
                                     uint32_t          gl_str_len,
                                     uint32_t          glx_str_len,
                                     const uint32_t   *gl_versions,
                                     const char       *gl_extension_string,
                                     const char       *glx_extension_string)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 8,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_SET_CLIENT_INFO_ARB,
        .isvoid = 1
    };

    struct iovec xcb_parts[10];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_set_client_info_arb_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;
    xcb_out.num_versions = num_versions;
    xcb_out.gl_str_len = gl_str_len;
    xcb_out.glx_str_len = glx_str_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t gl_versions */
    xcb_parts[4].iov_base = (char *) gl_versions;
    xcb_parts[4].iov_len = (num_versions * 2) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* char gl_extension_string */
    xcb_parts[6].iov_base = (char *) gl_extension_string;
    xcb_parts[6].iov_len = gl_str_len * sizeof(char);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;
    /* char glx_extension_string */
    xcb_parts[8].iov_base = (char *) glx_extension_string;
    xcb_parts[8].iov_len = glx_str_len * sizeof(char);
    xcb_parts[9].iov_base = 0;
    xcb_parts[9].iov_len = -xcb_parts[8].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_set_client_info_arb (xcb_connection_t *c,
                             uint32_t          major_version,
                             uint32_t          minor_version,
                             uint32_t          num_versions,
                             uint32_t          gl_str_len,
                             uint32_t          glx_str_len,
                             const uint32_t   *gl_versions,
                             const char       *gl_extension_string,
                             const char       *glx_extension_string)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 8,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_SET_CLIENT_INFO_ARB,
        .isvoid = 1
    };

    struct iovec xcb_parts[10];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_set_client_info_arb_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;
    xcb_out.num_versions = num_versions;
    xcb_out.gl_str_len = gl_str_len;
    xcb_out.glx_str_len = glx_str_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t gl_versions */
    xcb_parts[4].iov_base = (char *) gl_versions;
    xcb_parts[4].iov_len = (num_versions * 2) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* char gl_extension_string */
    xcb_parts[6].iov_base = (char *) gl_extension_string;
    xcb_parts[6].iov_len = gl_str_len * sizeof(char);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;
    /* char glx_extension_string */
    xcb_parts[8].iov_base = (char *) glx_extension_string;
    xcb_parts[8].iov_len = glx_str_len * sizeof(char);
    xcb_parts[9].iov_base = 0;
    xcb_parts[9].iov_len = -xcb_parts[8].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_set_client_info_arb_gl_versions (const xcb_glx_set_client_info_arb_request_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_set_client_info_arb_gl_versions_length (const xcb_glx_set_client_info_arb_request_t *R)
{
    return (R->num_versions * 2);
}

xcb_generic_iterator_t
xcb_glx_set_client_info_arb_gl_versions_end (const xcb_glx_set_client_info_arb_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + ((R->num_versions * 2));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

char *
xcb_glx_set_client_info_arb_gl_extension_string (const xcb_glx_set_client_info_arb_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_glx_set_client_info_arb_gl_versions_end(R);
    return (char *) ((char *) prev.data + XCB_TYPE_PAD(char, prev.index) + 0);
}

int
xcb_glx_set_client_info_arb_gl_extension_string_length (const xcb_glx_set_client_info_arb_request_t *R)
{
    return R->gl_str_len;
}

xcb_generic_iterator_t
xcb_glx_set_client_info_arb_gl_extension_string_end (const xcb_glx_set_client_info_arb_request_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_glx_set_client_info_arb_gl_versions_end(R);
    i.data = ((char *) ((char*) prev.data + XCB_TYPE_PAD(char, prev.index))) + (R->gl_str_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

char *
xcb_glx_set_client_info_arb_glx_extension_string (const xcb_glx_set_client_info_arb_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_glx_set_client_info_arb_gl_extension_string_end(R);
    return (char *) ((char *) prev.data + XCB_TYPE_PAD(char, prev.index) + 0);
}

int
xcb_glx_set_client_info_arb_glx_extension_string_length (const xcb_glx_set_client_info_arb_request_t *R)
{
    return R->glx_str_len;
}

xcb_generic_iterator_t
xcb_glx_set_client_info_arb_glx_extension_string_end (const xcb_glx_set_client_info_arb_request_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_glx_set_client_info_arb_gl_extension_string_end(R);
    i.data = ((char *) ((char*) prev.data + XCB_TYPE_PAD(char, prev.index))) + (R->glx_str_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_glx_create_context_attribs_arb_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_create_context_attribs_arb_request_t *_aux = (xcb_glx_create_context_attribs_arb_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_create_context_attribs_arb_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* attribs */
    xcb_block_len += (_aux->num_attribs * 2) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_glx_create_context_attribs_arb_checked (xcb_connection_t   *c,
                                            xcb_glx_context_t   context,
                                            xcb_glx_fbconfig_t  fbconfig,
                                            uint32_t            screen,
                                            xcb_glx_context_t   share_list,
                                            uint8_t             is_direct,
                                            uint32_t            num_attribs,
                                            const uint32_t     *attribs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CREATE_CONTEXT_ATTRIBS_ARB,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_create_context_attribs_arb_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.fbconfig = fbconfig;
    xcb_out.screen = screen;
    xcb_out.share_list = share_list;
    xcb_out.is_direct = is_direct;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.num_attribs = num_attribs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t attribs */
    xcb_parts[4].iov_base = (char *) attribs;
    xcb_parts[4].iov_len = (num_attribs * 2) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_create_context_attribs_arb (xcb_connection_t   *c,
                                    xcb_glx_context_t   context,
                                    xcb_glx_fbconfig_t  fbconfig,
                                    uint32_t            screen,
                                    xcb_glx_context_t   share_list,
                                    uint8_t             is_direct,
                                    uint32_t            num_attribs,
                                    const uint32_t     *attribs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_CREATE_CONTEXT_ATTRIBS_ARB,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_create_context_attribs_arb_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.fbconfig = fbconfig;
    xcb_out.screen = screen;
    xcb_out.share_list = share_list;
    xcb_out.is_direct = is_direct;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.num_attribs = num_attribs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t attribs */
    xcb_parts[4].iov_base = (char *) attribs;
    xcb_parts[4].iov_len = (num_attribs * 2) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_create_context_attribs_arb_attribs (const xcb_glx_create_context_attribs_arb_request_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_create_context_attribs_arb_attribs_length (const xcb_glx_create_context_attribs_arb_request_t *R)
{
    return (R->num_attribs * 2);
}

xcb_generic_iterator_t
xcb_glx_create_context_attribs_arb_attribs_end (const xcb_glx_create_context_attribs_arb_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + ((R->num_attribs * 2));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_glx_set_client_info_2arb_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_set_client_info_2arb_request_t *_aux = (xcb_glx_set_client_info_2arb_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_set_client_info_2arb_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* gl_versions */
    xcb_block_len += (_aux->num_versions * 3) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* gl_extension_string */
    xcb_block_len += _aux->gl_str_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* glx_extension_string */
    xcb_block_len += _aux->glx_str_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_glx_set_client_info_2arb_checked (xcb_connection_t *c,
                                      uint32_t          major_version,
                                      uint32_t          minor_version,
                                      uint32_t          num_versions,
                                      uint32_t          gl_str_len,
                                      uint32_t          glx_str_len,
                                      const uint32_t   *gl_versions,
                                      const char       *gl_extension_string,
                                      const char       *glx_extension_string)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 8,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_SET_CLIENT_INFO_2ARB,
        .isvoid = 1
    };

    struct iovec xcb_parts[10];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_set_client_info_2arb_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;
    xcb_out.num_versions = num_versions;
    xcb_out.gl_str_len = gl_str_len;
    xcb_out.glx_str_len = glx_str_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t gl_versions */
    xcb_parts[4].iov_base = (char *) gl_versions;
    xcb_parts[4].iov_len = (num_versions * 3) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* char gl_extension_string */
    xcb_parts[6].iov_base = (char *) gl_extension_string;
    xcb_parts[6].iov_len = gl_str_len * sizeof(char);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;
    /* char glx_extension_string */
    xcb_parts[8].iov_base = (char *) glx_extension_string;
    xcb_parts[8].iov_len = glx_str_len * sizeof(char);
    xcb_parts[9].iov_base = 0;
    xcb_parts[9].iov_len = -xcb_parts[8].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_set_client_info_2arb (xcb_connection_t *c,
                              uint32_t          major_version,
                              uint32_t          minor_version,
                              uint32_t          num_versions,
                              uint32_t          gl_str_len,
                              uint32_t          glx_str_len,
                              const uint32_t   *gl_versions,
                              const char       *gl_extension_string,
                              const char       *glx_extension_string)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 8,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_SET_CLIENT_INFO_2ARB,
        .isvoid = 1
    };

    struct iovec xcb_parts[10];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_set_client_info_2arb_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;
    xcb_out.num_versions = num_versions;
    xcb_out.gl_str_len = gl_str_len;
    xcb_out.glx_str_len = glx_str_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t gl_versions */
    xcb_parts[4].iov_base = (char *) gl_versions;
    xcb_parts[4].iov_len = (num_versions * 3) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* char gl_extension_string */
    xcb_parts[6].iov_base = (char *) gl_extension_string;
    xcb_parts[6].iov_len = gl_str_len * sizeof(char);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;
    /* char glx_extension_string */
    xcb_parts[8].iov_base = (char *) glx_extension_string;
    xcb_parts[8].iov_len = glx_str_len * sizeof(char);
    xcb_parts[9].iov_base = 0;
    xcb_parts[9].iov_len = -xcb_parts[8].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_set_client_info_2arb_gl_versions (const xcb_glx_set_client_info_2arb_request_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_set_client_info_2arb_gl_versions_length (const xcb_glx_set_client_info_2arb_request_t *R)
{
    return (R->num_versions * 3);
}

xcb_generic_iterator_t
xcb_glx_set_client_info_2arb_gl_versions_end (const xcb_glx_set_client_info_2arb_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + ((R->num_versions * 3));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

char *
xcb_glx_set_client_info_2arb_gl_extension_string (const xcb_glx_set_client_info_2arb_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_glx_set_client_info_2arb_gl_versions_end(R);
    return (char *) ((char *) prev.data + XCB_TYPE_PAD(char, prev.index) + 0);
}

int
xcb_glx_set_client_info_2arb_gl_extension_string_length (const xcb_glx_set_client_info_2arb_request_t *R)
{
    return R->gl_str_len;
}

xcb_generic_iterator_t
xcb_glx_set_client_info_2arb_gl_extension_string_end (const xcb_glx_set_client_info_2arb_request_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_glx_set_client_info_2arb_gl_versions_end(R);
    i.data = ((char *) ((char*) prev.data + XCB_TYPE_PAD(char, prev.index))) + (R->gl_str_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

char *
xcb_glx_set_client_info_2arb_glx_extension_string (const xcb_glx_set_client_info_2arb_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_glx_set_client_info_2arb_gl_extension_string_end(R);
    return (char *) ((char *) prev.data + XCB_TYPE_PAD(char, prev.index) + 0);
}

int
xcb_glx_set_client_info_2arb_glx_extension_string_length (const xcb_glx_set_client_info_2arb_request_t *R)
{
    return R->glx_str_len;
}

xcb_generic_iterator_t
xcb_glx_set_client_info_2arb_glx_extension_string_end (const xcb_glx_set_client_info_2arb_request_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_glx_set_client_info_2arb_gl_extension_string_end(R);
    i.data = ((char *) ((char*) prev.data + XCB_TYPE_PAD(char, prev.index))) + (R->glx_str_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_glx_new_list_checked (xcb_connection_t      *c,
                          xcb_glx_context_tag_t  context_tag,
                          uint32_t               list,
                          uint32_t               mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_NEW_LIST,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_new_list_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.list = list;
    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_new_list (xcb_connection_t      *c,
                  xcb_glx_context_tag_t  context_tag,
                  uint32_t               list,
                  uint32_t               mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_NEW_LIST,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_new_list_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.list = list;
    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_end_list_checked (xcb_connection_t      *c,
                          xcb_glx_context_tag_t  context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_END_LIST,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_end_list_request_t xcb_out;

    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_end_list (xcb_connection_t      *c,
                  xcb_glx_context_tag_t  context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_END_LIST,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_end_list_request_t xcb_out;

    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_delete_lists_checked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               list,
                              int32_t                range)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DELETE_LISTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_delete_lists_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.list = list;
    xcb_out.range = range;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_delete_lists (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      uint32_t               list,
                      int32_t                range)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DELETE_LISTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_delete_lists_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.list = list;
    xcb_out.range = range;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_gen_lists_cookie_t
xcb_glx_gen_lists (xcb_connection_t      *c,
                   xcb_glx_context_tag_t  context_tag,
                   int32_t                range)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GEN_LISTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_gen_lists_cookie_t xcb_ret;
    xcb_glx_gen_lists_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.range = range;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_gen_lists_cookie_t
xcb_glx_gen_lists_unchecked (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag,
                             int32_t                range)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GEN_LISTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_gen_lists_cookie_t xcb_ret;
    xcb_glx_gen_lists_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.range = range;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_gen_lists_reply_t *
xcb_glx_gen_lists_reply (xcb_connection_t            *c,
                         xcb_glx_gen_lists_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e)
{
    return (xcb_glx_gen_lists_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_glx_feedback_buffer_checked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 int32_t                size,
                                 int32_t                type)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_FEEDBACK_BUFFER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_feedback_buffer_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.size = size;
    xcb_out.type = type;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_feedback_buffer (xcb_connection_t      *c,
                         xcb_glx_context_tag_t  context_tag,
                         int32_t                size,
                         int32_t                type)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_FEEDBACK_BUFFER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_feedback_buffer_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.size = size;
    xcb_out.type = type;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_select_buffer_checked (xcb_connection_t      *c,
                               xcb_glx_context_tag_t  context_tag,
                               int32_t                size)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_SELECT_BUFFER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_select_buffer_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.size = size;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_select_buffer (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       int32_t                size)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_SELECT_BUFFER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_select_buffer_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.size = size;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_glx_render_mode_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_render_mode_reply_t *_aux = (xcb_glx_render_mode_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_render_mode_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_render_mode_cookie_t
xcb_glx_render_mode (xcb_connection_t      *c,
                     xcb_glx_context_tag_t  context_tag,
                     uint32_t               mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_RENDER_MODE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_render_mode_cookie_t xcb_ret;
    xcb_glx_render_mode_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_render_mode_cookie_t
xcb_glx_render_mode_unchecked (xcb_connection_t      *c,
                               xcb_glx_context_tag_t  context_tag,
                               uint32_t               mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_RENDER_MODE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_render_mode_cookie_t xcb_ret;
    xcb_glx_render_mode_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_render_mode_data (const xcb_glx_render_mode_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_render_mode_data_length (const xcb_glx_render_mode_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_render_mode_data_end (const xcb_glx_render_mode_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_render_mode_reply_t *
xcb_glx_render_mode_reply (xcb_connection_t              *c,
                           xcb_glx_render_mode_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e)
{
    return (xcb_glx_render_mode_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_glx_finish_cookie_t
xcb_glx_finish (xcb_connection_t      *c,
                xcb_glx_context_tag_t  context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_FINISH,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_finish_cookie_t xcb_ret;
    xcb_glx_finish_request_t xcb_out;

    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_finish_cookie_t
xcb_glx_finish_unchecked (xcb_connection_t      *c,
                          xcb_glx_context_tag_t  context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_FINISH,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_finish_cookie_t xcb_ret;
    xcb_glx_finish_request_t xcb_out;

    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_finish_reply_t *
xcb_glx_finish_reply (xcb_connection_t         *c,
                      xcb_glx_finish_cookie_t   cookie  /**< */,
                      xcb_generic_error_t     **e)
{
    return (xcb_glx_finish_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_glx_pixel_storef_checked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               pname,
                              xcb_glx_float32_t      datum)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_PIXEL_STOREF,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_pixel_storef_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.pname = pname;
    xcb_out.datum = datum;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_pixel_storef (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      uint32_t               pname,
                      xcb_glx_float32_t      datum)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_PIXEL_STOREF,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_pixel_storef_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.pname = pname;
    xcb_out.datum = datum;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_pixel_storei_checked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               pname,
                              int32_t                datum)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_PIXEL_STOREI,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_pixel_storei_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.pname = pname;
    xcb_out.datum = datum;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_pixel_storei (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      uint32_t               pname,
                      int32_t                datum)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_PIXEL_STOREI,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_pixel_storei_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.pname = pname;
    xcb_out.datum = datum;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_glx_read_pixels_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_read_pixels_reply_t *_aux = (xcb_glx_read_pixels_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_read_pixels_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += (_aux->length * 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_read_pixels_cookie_t
xcb_glx_read_pixels (xcb_connection_t      *c,
                     xcb_glx_context_tag_t  context_tag,
                     int32_t                x,
                     int32_t                y,
                     int32_t                width,
                     int32_t                height,
                     uint32_t               format,
                     uint32_t               type,
                     uint8_t                swap_bytes,
                     uint8_t                lsb_first)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_READ_PIXELS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_read_pixels_cookie_t xcb_ret;
    xcb_glx_read_pixels_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.x = x;
    xcb_out.y = y;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.format = format;
    xcb_out.type = type;
    xcb_out.swap_bytes = swap_bytes;
    xcb_out.lsb_first = lsb_first;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_read_pixels_cookie_t
xcb_glx_read_pixels_unchecked (xcb_connection_t      *c,
                               xcb_glx_context_tag_t  context_tag,
                               int32_t                x,
                               int32_t                y,
                               int32_t                width,
                               int32_t                height,
                               uint32_t               format,
                               uint32_t               type,
                               uint8_t                swap_bytes,
                               uint8_t                lsb_first)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_READ_PIXELS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_read_pixels_cookie_t xcb_ret;
    xcb_glx_read_pixels_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.x = x;
    xcb_out.y = y;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.format = format;
    xcb_out.type = type;
    xcb_out.swap_bytes = swap_bytes;
    xcb_out.lsb_first = lsb_first;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_read_pixels_data (const xcb_glx_read_pixels_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_read_pixels_data_length (const xcb_glx_read_pixels_reply_t *R)
{
    return (R->length * 4);
}

xcb_generic_iterator_t
xcb_glx_read_pixels_data_end (const xcb_glx_read_pixels_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->length * 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_read_pixels_reply_t *
xcb_glx_read_pixels_reply (xcb_connection_t              *c,
                           xcb_glx_read_pixels_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e)
{
    return (xcb_glx_read_pixels_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_booleanv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_booleanv_reply_t *_aux = (xcb_glx_get_booleanv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_booleanv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_booleanv_cookie_t
xcb_glx_get_booleanv (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      int32_t                pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_BOOLEANV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_booleanv_cookie_t xcb_ret;
    xcb_glx_get_booleanv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_booleanv_cookie_t
xcb_glx_get_booleanv_unchecked (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                int32_t                pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_BOOLEANV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_booleanv_cookie_t xcb_ret;
    xcb_glx_get_booleanv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_get_booleanv_data (const xcb_glx_get_booleanv_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_get_booleanv_data_length (const xcb_glx_get_booleanv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_booleanv_data_end (const xcb_glx_get_booleanv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_booleanv_reply_t *
xcb_glx_get_booleanv_reply (xcb_connection_t               *c,
                            xcb_glx_get_booleanv_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e)
{
    return (xcb_glx_get_booleanv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_clip_plane_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_clip_plane_reply_t *_aux = (xcb_glx_get_clip_plane_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_clip_plane_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += (_aux->length / 2) * sizeof(xcb_glx_float64_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float64_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_clip_plane_cookie_t
xcb_glx_get_clip_plane (xcb_connection_t      *c,
                        xcb_glx_context_tag_t  context_tag,
                        int32_t                plane)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_CLIP_PLANE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_clip_plane_cookie_t xcb_ret;
    xcb_glx_get_clip_plane_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.plane = plane;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_clip_plane_cookie_t
xcb_glx_get_clip_plane_unchecked (xcb_connection_t      *c,
                                  xcb_glx_context_tag_t  context_tag,
                                  int32_t                plane)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_CLIP_PLANE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_clip_plane_cookie_t xcb_ret;
    xcb_glx_get_clip_plane_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.plane = plane;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float64_t *
xcb_glx_get_clip_plane_data (const xcb_glx_get_clip_plane_reply_t *R)
{
    return (xcb_glx_float64_t *) (R + 1);
}

int
xcb_glx_get_clip_plane_data_length (const xcb_glx_get_clip_plane_reply_t *R)
{
    return (R->length / 2);
}

xcb_generic_iterator_t
xcb_glx_get_clip_plane_data_end (const xcb_glx_get_clip_plane_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float64_t *) (R + 1)) + ((R->length / 2));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_clip_plane_reply_t *
xcb_glx_get_clip_plane_reply (xcb_connection_t                 *c,
                              xcb_glx_get_clip_plane_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_glx_get_clip_plane_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_doublev_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_doublev_reply_t *_aux = (xcb_glx_get_doublev_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_doublev_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float64_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float64_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_doublev_cookie_t
xcb_glx_get_doublev (xcb_connection_t      *c,
                     xcb_glx_context_tag_t  context_tag,
                     uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_DOUBLEV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_doublev_cookie_t xcb_ret;
    xcb_glx_get_doublev_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_doublev_cookie_t
xcb_glx_get_doublev_unchecked (xcb_connection_t      *c,
                               xcb_glx_context_tag_t  context_tag,
                               uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_DOUBLEV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_doublev_cookie_t xcb_ret;
    xcb_glx_get_doublev_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float64_t *
xcb_glx_get_doublev_data (const xcb_glx_get_doublev_reply_t *R)
{
    return (xcb_glx_float64_t *) (R + 1);
}

int
xcb_glx_get_doublev_data_length (const xcb_glx_get_doublev_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_doublev_data_end (const xcb_glx_get_doublev_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float64_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_doublev_reply_t *
xcb_glx_get_doublev_reply (xcb_connection_t              *c,
                           xcb_glx_get_doublev_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e)
{
    return (xcb_glx_get_doublev_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_glx_get_error_cookie_t
xcb_glx_get_error (xcb_connection_t      *c,
                   xcb_glx_context_tag_t  context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_ERROR,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_error_cookie_t xcb_ret;
    xcb_glx_get_error_request_t xcb_out;

    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_error_cookie_t
xcb_glx_get_error_unchecked (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_ERROR,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_error_cookie_t xcb_ret;
    xcb_glx_get_error_request_t xcb_out;

    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_error_reply_t *
xcb_glx_get_error_reply (xcb_connection_t            *c,
                         xcb_glx_get_error_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e)
{
    return (xcb_glx_get_error_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_floatv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_floatv_reply_t *_aux = (xcb_glx_get_floatv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_floatv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_floatv_cookie_t
xcb_glx_get_floatv (xcb_connection_t      *c,
                    xcb_glx_context_tag_t  context_tag,
                    uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_FLOATV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_floatv_cookie_t xcb_ret;
    xcb_glx_get_floatv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_floatv_cookie_t
xcb_glx_get_floatv_unchecked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_FLOATV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_floatv_cookie_t xcb_ret;
    xcb_glx_get_floatv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float32_t *
xcb_glx_get_floatv_data (const xcb_glx_get_floatv_reply_t *R)
{
    return (xcb_glx_float32_t *) (R + 1);
}

int
xcb_glx_get_floatv_data_length (const xcb_glx_get_floatv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_floatv_data_end (const xcb_glx_get_floatv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_floatv_reply_t *
xcb_glx_get_floatv_reply (xcb_connection_t             *c,
                          xcb_glx_get_floatv_cookie_t   cookie  /**< */,
                          xcb_generic_error_t         **e)
{
    return (xcb_glx_get_floatv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_integerv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_integerv_reply_t *_aux = (xcb_glx_get_integerv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_integerv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_integerv_cookie_t
xcb_glx_get_integerv (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_INTEGERV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_integerv_cookie_t xcb_ret;
    xcb_glx_get_integerv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_integerv_cookie_t
xcb_glx_get_integerv_unchecked (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_INTEGERV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_integerv_cookie_t xcb_ret;
    xcb_glx_get_integerv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_glx_get_integerv_data (const xcb_glx_get_integerv_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_glx_get_integerv_data_length (const xcb_glx_get_integerv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_integerv_data_end (const xcb_glx_get_integerv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_integerv_reply_t *
xcb_glx_get_integerv_reply (xcb_connection_t               *c,
                            xcb_glx_get_integerv_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e)
{
    return (xcb_glx_get_integerv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_lightfv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_lightfv_reply_t *_aux = (xcb_glx_get_lightfv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_lightfv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_lightfv_cookie_t
xcb_glx_get_lightfv (xcb_connection_t      *c,
                     xcb_glx_context_tag_t  context_tag,
                     uint32_t               light,
                     uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_LIGHTFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_lightfv_cookie_t xcb_ret;
    xcb_glx_get_lightfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.light = light;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_lightfv_cookie_t
xcb_glx_get_lightfv_unchecked (xcb_connection_t      *c,
                               xcb_glx_context_tag_t  context_tag,
                               uint32_t               light,
                               uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_LIGHTFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_lightfv_cookie_t xcb_ret;
    xcb_glx_get_lightfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.light = light;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float32_t *
xcb_glx_get_lightfv_data (const xcb_glx_get_lightfv_reply_t *R)
{
    return (xcb_glx_float32_t *) (R + 1);
}

int
xcb_glx_get_lightfv_data_length (const xcb_glx_get_lightfv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_lightfv_data_end (const xcb_glx_get_lightfv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_lightfv_reply_t *
xcb_glx_get_lightfv_reply (xcb_connection_t              *c,
                           xcb_glx_get_lightfv_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e)
{
    return (xcb_glx_get_lightfv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_lightiv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_lightiv_reply_t *_aux = (xcb_glx_get_lightiv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_lightiv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_lightiv_cookie_t
xcb_glx_get_lightiv (xcb_connection_t      *c,
                     xcb_glx_context_tag_t  context_tag,
                     uint32_t               light,
                     uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_LIGHTIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_lightiv_cookie_t xcb_ret;
    xcb_glx_get_lightiv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.light = light;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_lightiv_cookie_t
xcb_glx_get_lightiv_unchecked (xcb_connection_t      *c,
                               xcb_glx_context_tag_t  context_tag,
                               uint32_t               light,
                               uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_LIGHTIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_lightiv_cookie_t xcb_ret;
    xcb_glx_get_lightiv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.light = light;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_glx_get_lightiv_data (const xcb_glx_get_lightiv_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_glx_get_lightiv_data_length (const xcb_glx_get_lightiv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_lightiv_data_end (const xcb_glx_get_lightiv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_lightiv_reply_t *
xcb_glx_get_lightiv_reply (xcb_connection_t              *c,
                           xcb_glx_get_lightiv_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e)
{
    return (xcb_glx_get_lightiv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_mapdv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_mapdv_reply_t *_aux = (xcb_glx_get_mapdv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_mapdv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float64_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float64_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_mapdv_cookie_t
xcb_glx_get_mapdv (xcb_connection_t      *c,
                   xcb_glx_context_tag_t  context_tag,
                   uint32_t               target,
                   uint32_t               query)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MAPDV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_mapdv_cookie_t xcb_ret;
    xcb_glx_get_mapdv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.query = query;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_mapdv_cookie_t
xcb_glx_get_mapdv_unchecked (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag,
                             uint32_t               target,
                             uint32_t               query)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MAPDV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_mapdv_cookie_t xcb_ret;
    xcb_glx_get_mapdv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.query = query;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float64_t *
xcb_glx_get_mapdv_data (const xcb_glx_get_mapdv_reply_t *R)
{
    return (xcb_glx_float64_t *) (R + 1);
}

int
xcb_glx_get_mapdv_data_length (const xcb_glx_get_mapdv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_mapdv_data_end (const xcb_glx_get_mapdv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float64_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_mapdv_reply_t *
xcb_glx_get_mapdv_reply (xcb_connection_t            *c,
                         xcb_glx_get_mapdv_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e)
{
    return (xcb_glx_get_mapdv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_mapfv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_mapfv_reply_t *_aux = (xcb_glx_get_mapfv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_mapfv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_mapfv_cookie_t
xcb_glx_get_mapfv (xcb_connection_t      *c,
                   xcb_glx_context_tag_t  context_tag,
                   uint32_t               target,
                   uint32_t               query)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MAPFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_mapfv_cookie_t xcb_ret;
    xcb_glx_get_mapfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.query = query;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_mapfv_cookie_t
xcb_glx_get_mapfv_unchecked (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag,
                             uint32_t               target,
                             uint32_t               query)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MAPFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_mapfv_cookie_t xcb_ret;
    xcb_glx_get_mapfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.query = query;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float32_t *
xcb_glx_get_mapfv_data (const xcb_glx_get_mapfv_reply_t *R)
{
    return (xcb_glx_float32_t *) (R + 1);
}

int
xcb_glx_get_mapfv_data_length (const xcb_glx_get_mapfv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_mapfv_data_end (const xcb_glx_get_mapfv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_mapfv_reply_t *
xcb_glx_get_mapfv_reply (xcb_connection_t            *c,
                         xcb_glx_get_mapfv_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e)
{
    return (xcb_glx_get_mapfv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_mapiv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_mapiv_reply_t *_aux = (xcb_glx_get_mapiv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_mapiv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_mapiv_cookie_t
xcb_glx_get_mapiv (xcb_connection_t      *c,
                   xcb_glx_context_tag_t  context_tag,
                   uint32_t               target,
                   uint32_t               query)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MAPIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_mapiv_cookie_t xcb_ret;
    xcb_glx_get_mapiv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.query = query;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_mapiv_cookie_t
xcb_glx_get_mapiv_unchecked (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag,
                             uint32_t               target,
                             uint32_t               query)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MAPIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_mapiv_cookie_t xcb_ret;
    xcb_glx_get_mapiv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.query = query;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_glx_get_mapiv_data (const xcb_glx_get_mapiv_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_glx_get_mapiv_data_length (const xcb_glx_get_mapiv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_mapiv_data_end (const xcb_glx_get_mapiv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_mapiv_reply_t *
xcb_glx_get_mapiv_reply (xcb_connection_t            *c,
                         xcb_glx_get_mapiv_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e)
{
    return (xcb_glx_get_mapiv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_materialfv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_materialfv_reply_t *_aux = (xcb_glx_get_materialfv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_materialfv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_materialfv_cookie_t
xcb_glx_get_materialfv (xcb_connection_t      *c,
                        xcb_glx_context_tag_t  context_tag,
                        uint32_t               face,
                        uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MATERIALFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_materialfv_cookie_t xcb_ret;
    xcb_glx_get_materialfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.face = face;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_materialfv_cookie_t
xcb_glx_get_materialfv_unchecked (xcb_connection_t      *c,
                                  xcb_glx_context_tag_t  context_tag,
                                  uint32_t               face,
                                  uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MATERIALFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_materialfv_cookie_t xcb_ret;
    xcb_glx_get_materialfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.face = face;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float32_t *
xcb_glx_get_materialfv_data (const xcb_glx_get_materialfv_reply_t *R)
{
    return (xcb_glx_float32_t *) (R + 1);
}

int
xcb_glx_get_materialfv_data_length (const xcb_glx_get_materialfv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_materialfv_data_end (const xcb_glx_get_materialfv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_materialfv_reply_t *
xcb_glx_get_materialfv_reply (xcb_connection_t                 *c,
                              xcb_glx_get_materialfv_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_glx_get_materialfv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_materialiv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_materialiv_reply_t *_aux = (xcb_glx_get_materialiv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_materialiv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_materialiv_cookie_t
xcb_glx_get_materialiv (xcb_connection_t      *c,
                        xcb_glx_context_tag_t  context_tag,
                        uint32_t               face,
                        uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MATERIALIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_materialiv_cookie_t xcb_ret;
    xcb_glx_get_materialiv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.face = face;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_materialiv_cookie_t
xcb_glx_get_materialiv_unchecked (xcb_connection_t      *c,
                                  xcb_glx_context_tag_t  context_tag,
                                  uint32_t               face,
                                  uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MATERIALIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_materialiv_cookie_t xcb_ret;
    xcb_glx_get_materialiv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.face = face;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_glx_get_materialiv_data (const xcb_glx_get_materialiv_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_glx_get_materialiv_data_length (const xcb_glx_get_materialiv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_materialiv_data_end (const xcb_glx_get_materialiv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_materialiv_reply_t *
xcb_glx_get_materialiv_reply (xcb_connection_t                 *c,
                              xcb_glx_get_materialiv_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_glx_get_materialiv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_pixel_mapfv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_pixel_mapfv_reply_t *_aux = (xcb_glx_get_pixel_mapfv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_pixel_mapfv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_pixel_mapfv_cookie_t
xcb_glx_get_pixel_mapfv (xcb_connection_t      *c,
                         xcb_glx_context_tag_t  context_tag,
                         uint32_t               map)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_PIXEL_MAPFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_pixel_mapfv_cookie_t xcb_ret;
    xcb_glx_get_pixel_mapfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.map = map;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_pixel_mapfv_cookie_t
xcb_glx_get_pixel_mapfv_unchecked (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               map)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_PIXEL_MAPFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_pixel_mapfv_cookie_t xcb_ret;
    xcb_glx_get_pixel_mapfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.map = map;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float32_t *
xcb_glx_get_pixel_mapfv_data (const xcb_glx_get_pixel_mapfv_reply_t *R)
{
    return (xcb_glx_float32_t *) (R + 1);
}

int
xcb_glx_get_pixel_mapfv_data_length (const xcb_glx_get_pixel_mapfv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_pixel_mapfv_data_end (const xcb_glx_get_pixel_mapfv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_pixel_mapfv_reply_t *
xcb_glx_get_pixel_mapfv_reply (xcb_connection_t                  *c,
                               xcb_glx_get_pixel_mapfv_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_glx_get_pixel_mapfv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_pixel_mapuiv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_pixel_mapuiv_reply_t *_aux = (xcb_glx_get_pixel_mapuiv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_pixel_mapuiv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_pixel_mapuiv_cookie_t
xcb_glx_get_pixel_mapuiv (xcb_connection_t      *c,
                          xcb_glx_context_tag_t  context_tag,
                          uint32_t               map)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_PIXEL_MAPUIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_pixel_mapuiv_cookie_t xcb_ret;
    xcb_glx_get_pixel_mapuiv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.map = map;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_pixel_mapuiv_cookie_t
xcb_glx_get_pixel_mapuiv_unchecked (xcb_connection_t      *c,
                                    xcb_glx_context_tag_t  context_tag,
                                    uint32_t               map)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_PIXEL_MAPUIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_pixel_mapuiv_cookie_t xcb_ret;
    xcb_glx_get_pixel_mapuiv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.map = map;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_get_pixel_mapuiv_data (const xcb_glx_get_pixel_mapuiv_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_get_pixel_mapuiv_data_length (const xcb_glx_get_pixel_mapuiv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_pixel_mapuiv_data_end (const xcb_glx_get_pixel_mapuiv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_pixel_mapuiv_reply_t *
xcb_glx_get_pixel_mapuiv_reply (xcb_connection_t                   *c,
                                xcb_glx_get_pixel_mapuiv_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_glx_get_pixel_mapuiv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_pixel_mapusv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_pixel_mapusv_reply_t *_aux = (xcb_glx_get_pixel_mapusv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_pixel_mapusv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(uint16_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint16_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_pixel_mapusv_cookie_t
xcb_glx_get_pixel_mapusv (xcb_connection_t      *c,
                          xcb_glx_context_tag_t  context_tag,
                          uint32_t               map)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_PIXEL_MAPUSV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_pixel_mapusv_cookie_t xcb_ret;
    xcb_glx_get_pixel_mapusv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.map = map;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_pixel_mapusv_cookie_t
xcb_glx_get_pixel_mapusv_unchecked (xcb_connection_t      *c,
                                    xcb_glx_context_tag_t  context_tag,
                                    uint32_t               map)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_PIXEL_MAPUSV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_pixel_mapusv_cookie_t xcb_ret;
    xcb_glx_get_pixel_mapusv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.map = map;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint16_t *
xcb_glx_get_pixel_mapusv_data (const xcb_glx_get_pixel_mapusv_reply_t *R)
{
    return (uint16_t *) (R + 1);
}

int
xcb_glx_get_pixel_mapusv_data_length (const xcb_glx_get_pixel_mapusv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_pixel_mapusv_data_end (const xcb_glx_get_pixel_mapusv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint16_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_pixel_mapusv_reply_t *
xcb_glx_get_pixel_mapusv_reply (xcb_connection_t                   *c,
                                xcb_glx_get_pixel_mapusv_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_glx_get_pixel_mapusv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_polygon_stipple_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_polygon_stipple_reply_t *_aux = (xcb_glx_get_polygon_stipple_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_polygon_stipple_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += (_aux->length * 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_polygon_stipple_cookie_t
xcb_glx_get_polygon_stipple (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag,
                             uint8_t                lsb_first)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_POLYGON_STIPPLE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_polygon_stipple_cookie_t xcb_ret;
    xcb_glx_get_polygon_stipple_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.lsb_first = lsb_first;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_polygon_stipple_cookie_t
xcb_glx_get_polygon_stipple_unchecked (xcb_connection_t      *c,
                                       xcb_glx_context_tag_t  context_tag,
                                       uint8_t                lsb_first)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_POLYGON_STIPPLE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_polygon_stipple_cookie_t xcb_ret;
    xcb_glx_get_polygon_stipple_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.lsb_first = lsb_first;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_get_polygon_stipple_data (const xcb_glx_get_polygon_stipple_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_get_polygon_stipple_data_length (const xcb_glx_get_polygon_stipple_reply_t *R)
{
    return (R->length * 4);
}

xcb_generic_iterator_t
xcb_glx_get_polygon_stipple_data_end (const xcb_glx_get_polygon_stipple_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->length * 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_polygon_stipple_reply_t *
xcb_glx_get_polygon_stipple_reply (xcb_connection_t                      *c,
                                   xcb_glx_get_polygon_stipple_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_glx_get_polygon_stipple_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_string_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_string_reply_t *_aux = (xcb_glx_get_string_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_string_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* string */
    xcb_block_len += _aux->n * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_string_cookie_t
xcb_glx_get_string (xcb_connection_t      *c,
                    xcb_glx_context_tag_t  context_tag,
                    uint32_t               name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_STRING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_string_cookie_t xcb_ret;
    xcb_glx_get_string_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.name = name;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_string_cookie_t
xcb_glx_get_string_unchecked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_STRING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_string_cookie_t xcb_ret;
    xcb_glx_get_string_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.name = name;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_glx_get_string_string (const xcb_glx_get_string_reply_t *R)
{
    return (char *) (R + 1);
}

int
xcb_glx_get_string_string_length (const xcb_glx_get_string_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_string_string_end (const xcb_glx_get_string_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_string_reply_t *
xcb_glx_get_string_reply (xcb_connection_t             *c,
                          xcb_glx_get_string_cookie_t   cookie  /**< */,
                          xcb_generic_error_t         **e)
{
    return (xcb_glx_get_string_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_tex_envfv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_tex_envfv_reply_t *_aux = (xcb_glx_get_tex_envfv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_tex_envfv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_tex_envfv_cookie_t
xcb_glx_get_tex_envfv (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       uint32_t               target,
                       uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_ENVFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_envfv_cookie_t xcb_ret;
    xcb_glx_get_tex_envfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_tex_envfv_cookie_t
xcb_glx_get_tex_envfv_unchecked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               target,
                                 uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_ENVFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_envfv_cookie_t xcb_ret;
    xcb_glx_get_tex_envfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float32_t *
xcb_glx_get_tex_envfv_data (const xcb_glx_get_tex_envfv_reply_t *R)
{
    return (xcb_glx_float32_t *) (R + 1);
}

int
xcb_glx_get_tex_envfv_data_length (const xcb_glx_get_tex_envfv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_tex_envfv_data_end (const xcb_glx_get_tex_envfv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_tex_envfv_reply_t *
xcb_glx_get_tex_envfv_reply (xcb_connection_t                *c,
                             xcb_glx_get_tex_envfv_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_glx_get_tex_envfv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_tex_enviv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_tex_enviv_reply_t *_aux = (xcb_glx_get_tex_enviv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_tex_enviv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_tex_enviv_cookie_t
xcb_glx_get_tex_enviv (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       uint32_t               target,
                       uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_ENVIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_enviv_cookie_t xcb_ret;
    xcb_glx_get_tex_enviv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_tex_enviv_cookie_t
xcb_glx_get_tex_enviv_unchecked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               target,
                                 uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_ENVIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_enviv_cookie_t xcb_ret;
    xcb_glx_get_tex_enviv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_glx_get_tex_enviv_data (const xcb_glx_get_tex_enviv_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_glx_get_tex_enviv_data_length (const xcb_glx_get_tex_enviv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_tex_enviv_data_end (const xcb_glx_get_tex_enviv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_tex_enviv_reply_t *
xcb_glx_get_tex_enviv_reply (xcb_connection_t                *c,
                             xcb_glx_get_tex_enviv_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_glx_get_tex_enviv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_tex_gendv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_tex_gendv_reply_t *_aux = (xcb_glx_get_tex_gendv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_tex_gendv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float64_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float64_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_tex_gendv_cookie_t
xcb_glx_get_tex_gendv (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       uint32_t               coord,
                       uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_GENDV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_gendv_cookie_t xcb_ret;
    xcb_glx_get_tex_gendv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.coord = coord;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_tex_gendv_cookie_t
xcb_glx_get_tex_gendv_unchecked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               coord,
                                 uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_GENDV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_gendv_cookie_t xcb_ret;
    xcb_glx_get_tex_gendv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.coord = coord;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float64_t *
xcb_glx_get_tex_gendv_data (const xcb_glx_get_tex_gendv_reply_t *R)
{
    return (xcb_glx_float64_t *) (R + 1);
}

int
xcb_glx_get_tex_gendv_data_length (const xcb_glx_get_tex_gendv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_tex_gendv_data_end (const xcb_glx_get_tex_gendv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float64_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_tex_gendv_reply_t *
xcb_glx_get_tex_gendv_reply (xcb_connection_t                *c,
                             xcb_glx_get_tex_gendv_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_glx_get_tex_gendv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_tex_genfv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_tex_genfv_reply_t *_aux = (xcb_glx_get_tex_genfv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_tex_genfv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_tex_genfv_cookie_t
xcb_glx_get_tex_genfv (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       uint32_t               coord,
                       uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_GENFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_genfv_cookie_t xcb_ret;
    xcb_glx_get_tex_genfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.coord = coord;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_tex_genfv_cookie_t
xcb_glx_get_tex_genfv_unchecked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               coord,
                                 uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_GENFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_genfv_cookie_t xcb_ret;
    xcb_glx_get_tex_genfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.coord = coord;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float32_t *
xcb_glx_get_tex_genfv_data (const xcb_glx_get_tex_genfv_reply_t *R)
{
    return (xcb_glx_float32_t *) (R + 1);
}

int
xcb_glx_get_tex_genfv_data_length (const xcb_glx_get_tex_genfv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_tex_genfv_data_end (const xcb_glx_get_tex_genfv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_tex_genfv_reply_t *
xcb_glx_get_tex_genfv_reply (xcb_connection_t                *c,
                             xcb_glx_get_tex_genfv_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_glx_get_tex_genfv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_tex_geniv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_tex_geniv_reply_t *_aux = (xcb_glx_get_tex_geniv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_tex_geniv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_tex_geniv_cookie_t
xcb_glx_get_tex_geniv (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       uint32_t               coord,
                       uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_GENIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_geniv_cookie_t xcb_ret;
    xcb_glx_get_tex_geniv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.coord = coord;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_tex_geniv_cookie_t
xcb_glx_get_tex_geniv_unchecked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               coord,
                                 uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_GENIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_geniv_cookie_t xcb_ret;
    xcb_glx_get_tex_geniv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.coord = coord;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_glx_get_tex_geniv_data (const xcb_glx_get_tex_geniv_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_glx_get_tex_geniv_data_length (const xcb_glx_get_tex_geniv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_tex_geniv_data_end (const xcb_glx_get_tex_geniv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_tex_geniv_reply_t *
xcb_glx_get_tex_geniv_reply (xcb_connection_t                *c,
                             xcb_glx_get_tex_geniv_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_glx_get_tex_geniv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_tex_image_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_tex_image_reply_t *_aux = (xcb_glx_get_tex_image_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_tex_image_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += (_aux->length * 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_tex_image_cookie_t
xcb_glx_get_tex_image (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       uint32_t               target,
                       int32_t                level,
                       uint32_t               format,
                       uint32_t               type,
                       uint8_t                swap_bytes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_IMAGE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_image_cookie_t xcb_ret;
    xcb_glx_get_tex_image_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.level = level;
    xcb_out.format = format;
    xcb_out.type = type;
    xcb_out.swap_bytes = swap_bytes;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_tex_image_cookie_t
xcb_glx_get_tex_image_unchecked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               target,
                                 int32_t                level,
                                 uint32_t               format,
                                 uint32_t               type,
                                 uint8_t                swap_bytes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_IMAGE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_image_cookie_t xcb_ret;
    xcb_glx_get_tex_image_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.level = level;
    xcb_out.format = format;
    xcb_out.type = type;
    xcb_out.swap_bytes = swap_bytes;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_get_tex_image_data (const xcb_glx_get_tex_image_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_get_tex_image_data_length (const xcb_glx_get_tex_image_reply_t *R)
{
    return (R->length * 4);
}

xcb_generic_iterator_t
xcb_glx_get_tex_image_data_end (const xcb_glx_get_tex_image_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->length * 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_tex_image_reply_t *
xcb_glx_get_tex_image_reply (xcb_connection_t                *c,
                             xcb_glx_get_tex_image_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_glx_get_tex_image_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_tex_parameterfv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_tex_parameterfv_reply_t *_aux = (xcb_glx_get_tex_parameterfv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_tex_parameterfv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_tex_parameterfv_cookie_t
xcb_glx_get_tex_parameterfv (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag,
                             uint32_t               target,
                             uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_PARAMETERFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_parameterfv_cookie_t xcb_ret;
    xcb_glx_get_tex_parameterfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_tex_parameterfv_cookie_t
xcb_glx_get_tex_parameterfv_unchecked (xcb_connection_t      *c,
                                       xcb_glx_context_tag_t  context_tag,
                                       uint32_t               target,
                                       uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_PARAMETERFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_parameterfv_cookie_t xcb_ret;
    xcb_glx_get_tex_parameterfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float32_t *
xcb_glx_get_tex_parameterfv_data (const xcb_glx_get_tex_parameterfv_reply_t *R)
{
    return (xcb_glx_float32_t *) (R + 1);
}

int
xcb_glx_get_tex_parameterfv_data_length (const xcb_glx_get_tex_parameterfv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_tex_parameterfv_data_end (const xcb_glx_get_tex_parameterfv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_tex_parameterfv_reply_t *
xcb_glx_get_tex_parameterfv_reply (xcb_connection_t                      *c,
                                   xcb_glx_get_tex_parameterfv_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_glx_get_tex_parameterfv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_tex_parameteriv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_tex_parameteriv_reply_t *_aux = (xcb_glx_get_tex_parameteriv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_tex_parameteriv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_tex_parameteriv_cookie_t
xcb_glx_get_tex_parameteriv (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag,
                             uint32_t               target,
                             uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_PARAMETERIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_parameteriv_cookie_t xcb_ret;
    xcb_glx_get_tex_parameteriv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_tex_parameteriv_cookie_t
xcb_glx_get_tex_parameteriv_unchecked (xcb_connection_t      *c,
                                       xcb_glx_context_tag_t  context_tag,
                                       uint32_t               target,
                                       uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_PARAMETERIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_parameteriv_cookie_t xcb_ret;
    xcb_glx_get_tex_parameteriv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_glx_get_tex_parameteriv_data (const xcb_glx_get_tex_parameteriv_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_glx_get_tex_parameteriv_data_length (const xcb_glx_get_tex_parameteriv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_tex_parameteriv_data_end (const xcb_glx_get_tex_parameteriv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_tex_parameteriv_reply_t *
xcb_glx_get_tex_parameteriv_reply (xcb_connection_t                      *c,
                                   xcb_glx_get_tex_parameteriv_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_glx_get_tex_parameteriv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_tex_level_parameterfv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_tex_level_parameterfv_reply_t *_aux = (xcb_glx_get_tex_level_parameterfv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_tex_level_parameterfv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_tex_level_parameterfv_cookie_t
xcb_glx_get_tex_level_parameterfv (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               target,
                                   int32_t                level,
                                   uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_LEVEL_PARAMETERFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_level_parameterfv_cookie_t xcb_ret;
    xcb_glx_get_tex_level_parameterfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.level = level;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_tex_level_parameterfv_cookie_t
xcb_glx_get_tex_level_parameterfv_unchecked (xcb_connection_t      *c,
                                             xcb_glx_context_tag_t  context_tag,
                                             uint32_t               target,
                                             int32_t                level,
                                             uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_LEVEL_PARAMETERFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_level_parameterfv_cookie_t xcb_ret;
    xcb_glx_get_tex_level_parameterfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.level = level;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float32_t *
xcb_glx_get_tex_level_parameterfv_data (const xcb_glx_get_tex_level_parameterfv_reply_t *R)
{
    return (xcb_glx_float32_t *) (R + 1);
}

int
xcb_glx_get_tex_level_parameterfv_data_length (const xcb_glx_get_tex_level_parameterfv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_tex_level_parameterfv_data_end (const xcb_glx_get_tex_level_parameterfv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_tex_level_parameterfv_reply_t *
xcb_glx_get_tex_level_parameterfv_reply (xcb_connection_t                            *c,
                                         xcb_glx_get_tex_level_parameterfv_cookie_t   cookie  /**< */,
                                         xcb_generic_error_t                        **e)
{
    return (xcb_glx_get_tex_level_parameterfv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_tex_level_parameteriv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_tex_level_parameteriv_reply_t *_aux = (xcb_glx_get_tex_level_parameteriv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_tex_level_parameteriv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_tex_level_parameteriv_cookie_t
xcb_glx_get_tex_level_parameteriv (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               target,
                                   int32_t                level,
                                   uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_LEVEL_PARAMETERIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_level_parameteriv_cookie_t xcb_ret;
    xcb_glx_get_tex_level_parameteriv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.level = level;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_tex_level_parameteriv_cookie_t
xcb_glx_get_tex_level_parameteriv_unchecked (xcb_connection_t      *c,
                                             xcb_glx_context_tag_t  context_tag,
                                             uint32_t               target,
                                             int32_t                level,
                                             uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_TEX_LEVEL_PARAMETERIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_tex_level_parameteriv_cookie_t xcb_ret;
    xcb_glx_get_tex_level_parameteriv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.level = level;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_glx_get_tex_level_parameteriv_data (const xcb_glx_get_tex_level_parameteriv_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_glx_get_tex_level_parameteriv_data_length (const xcb_glx_get_tex_level_parameteriv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_tex_level_parameteriv_data_end (const xcb_glx_get_tex_level_parameteriv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_tex_level_parameteriv_reply_t *
xcb_glx_get_tex_level_parameteriv_reply (xcb_connection_t                            *c,
                                         xcb_glx_get_tex_level_parameteriv_cookie_t   cookie  /**< */,
                                         xcb_generic_error_t                        **e)
{
    return (xcb_glx_get_tex_level_parameteriv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_glx_is_enabled_cookie_t
xcb_glx_is_enabled (xcb_connection_t      *c,
                    xcb_glx_context_tag_t  context_tag,
                    uint32_t               capability)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_IS_ENABLED,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_is_enabled_cookie_t xcb_ret;
    xcb_glx_is_enabled_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.capability = capability;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_is_enabled_cookie_t
xcb_glx_is_enabled_unchecked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               capability)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_IS_ENABLED,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_is_enabled_cookie_t xcb_ret;
    xcb_glx_is_enabled_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.capability = capability;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_is_enabled_reply_t *
xcb_glx_is_enabled_reply (xcb_connection_t             *c,
                          xcb_glx_is_enabled_cookie_t   cookie  /**< */,
                          xcb_generic_error_t         **e)
{
    return (xcb_glx_is_enabled_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_glx_is_list_cookie_t
xcb_glx_is_list (xcb_connection_t      *c,
                 xcb_glx_context_tag_t  context_tag,
                 uint32_t               list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_IS_LIST,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_is_list_cookie_t xcb_ret;
    xcb_glx_is_list_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.list = list;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_is_list_cookie_t
xcb_glx_is_list_unchecked (xcb_connection_t      *c,
                           xcb_glx_context_tag_t  context_tag,
                           uint32_t               list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_IS_LIST,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_is_list_cookie_t xcb_ret;
    xcb_glx_is_list_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.list = list;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_is_list_reply_t *
xcb_glx_is_list_reply (xcb_connection_t          *c,
                       xcb_glx_is_list_cookie_t   cookie  /**< */,
                       xcb_generic_error_t      **e)
{
    return (xcb_glx_is_list_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_glx_flush_checked (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_FLUSH,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_flush_request_t xcb_out;

    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_flush (xcb_connection_t      *c,
               xcb_glx_context_tag_t  context_tag)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_FLUSH,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_flush_request_t xcb_out;

    xcb_out.context_tag = context_tag;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_glx_are_textures_resident_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_are_textures_resident_request_t *_aux = (xcb_glx_are_textures_resident_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_are_textures_resident_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* textures */
    xcb_block_len += _aux->n * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_are_textures_resident_cookie_t
xcb_glx_are_textures_resident (xcb_connection_t      *c,
                               xcb_glx_context_tag_t  context_tag,
                               int32_t                n,
                               const uint32_t        *textures)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_ARE_TEXTURES_RESIDENT,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_glx_are_textures_resident_cookie_t xcb_ret;
    xcb_glx_are_textures_resident_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.n = n;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t textures */
    xcb_parts[4].iov_base = (char *) textures;
    xcb_parts[4].iov_len = n * sizeof(xcb_glx_bool32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_are_textures_resident_cookie_t
xcb_glx_are_textures_resident_unchecked (xcb_connection_t      *c,
                                         xcb_glx_context_tag_t  context_tag,
                                         int32_t                n,
                                         const uint32_t        *textures)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_ARE_TEXTURES_RESIDENT,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_glx_are_textures_resident_cookie_t xcb_ret;
    xcb_glx_are_textures_resident_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.n = n;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t textures */
    xcb_parts[4].iov_base = (char *) textures;
    xcb_parts[4].iov_len = n * sizeof(xcb_glx_bool32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_are_textures_resident_data (const xcb_glx_are_textures_resident_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_are_textures_resident_data_length (const xcb_glx_are_textures_resident_reply_t *R)
{
    return (R->length * 4);
}

xcb_generic_iterator_t
xcb_glx_are_textures_resident_data_end (const xcb_glx_are_textures_resident_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->length * 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_are_textures_resident_reply_t *
xcb_glx_are_textures_resident_reply (xcb_connection_t                        *c,
                                     xcb_glx_are_textures_resident_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e)
{
    return (xcb_glx_are_textures_resident_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_delete_textures_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_delete_textures_request_t *_aux = (xcb_glx_delete_textures_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_delete_textures_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* textures */
    xcb_block_len += _aux->n * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_glx_delete_textures_checked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 int32_t                n,
                                 const uint32_t        *textures)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DELETE_TEXTURES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_delete_textures_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.n = n;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t textures */
    xcb_parts[4].iov_base = (char *) textures;
    xcb_parts[4].iov_len = n * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_delete_textures (xcb_connection_t      *c,
                         xcb_glx_context_tag_t  context_tag,
                         int32_t                n,
                         const uint32_t        *textures)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DELETE_TEXTURES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_delete_textures_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.n = n;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t textures */
    xcb_parts[4].iov_base = (char *) textures;
    xcb_parts[4].iov_len = n * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_delete_textures_textures (const xcb_glx_delete_textures_request_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_delete_textures_textures_length (const xcb_glx_delete_textures_request_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_delete_textures_textures_end (const xcb_glx_delete_textures_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_glx_gen_textures_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_gen_textures_reply_t *_aux = (xcb_glx_gen_textures_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_gen_textures_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->length * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_gen_textures_cookie_t
xcb_glx_gen_textures (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      int32_t                n)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GEN_TEXTURES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_gen_textures_cookie_t xcb_ret;
    xcb_glx_gen_textures_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.n = n;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_gen_textures_cookie_t
xcb_glx_gen_textures_unchecked (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                int32_t                n)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GEN_TEXTURES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_gen_textures_cookie_t xcb_ret;
    xcb_glx_gen_textures_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.n = n;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_gen_textures_data (const xcb_glx_gen_textures_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_gen_textures_data_length (const xcb_glx_gen_textures_reply_t *R)
{
    return R->length;
}

xcb_generic_iterator_t
xcb_glx_gen_textures_data_end (const xcb_glx_gen_textures_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_gen_textures_reply_t *
xcb_glx_gen_textures_reply (xcb_connection_t               *c,
                            xcb_glx_gen_textures_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e)
{
    return (xcb_glx_gen_textures_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_glx_is_texture_cookie_t
xcb_glx_is_texture (xcb_connection_t      *c,
                    xcb_glx_context_tag_t  context_tag,
                    uint32_t               texture)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_IS_TEXTURE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_is_texture_cookie_t xcb_ret;
    xcb_glx_is_texture_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.texture = texture;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_is_texture_cookie_t
xcb_glx_is_texture_unchecked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               texture)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_IS_TEXTURE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_is_texture_cookie_t xcb_ret;
    xcb_glx_is_texture_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.texture = texture;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_is_texture_reply_t *
xcb_glx_is_texture_reply (xcb_connection_t             *c,
                          xcb_glx_is_texture_cookie_t   cookie  /**< */,
                          xcb_generic_error_t         **e)
{
    return (xcb_glx_is_texture_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_color_table_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_color_table_reply_t *_aux = (xcb_glx_get_color_table_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_color_table_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += (_aux->length * 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_color_table_cookie_t
xcb_glx_get_color_table (xcb_connection_t      *c,
                         xcb_glx_context_tag_t  context_tag,
                         uint32_t               target,
                         uint32_t               format,
                         uint32_t               type,
                         uint8_t                swap_bytes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_COLOR_TABLE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_color_table_cookie_t xcb_ret;
    xcb_glx_get_color_table_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.format = format;
    xcb_out.type = type;
    xcb_out.swap_bytes = swap_bytes;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_color_table_cookie_t
xcb_glx_get_color_table_unchecked (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               target,
                                   uint32_t               format,
                                   uint32_t               type,
                                   uint8_t                swap_bytes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_COLOR_TABLE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_color_table_cookie_t xcb_ret;
    xcb_glx_get_color_table_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.format = format;
    xcb_out.type = type;
    xcb_out.swap_bytes = swap_bytes;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_get_color_table_data (const xcb_glx_get_color_table_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_get_color_table_data_length (const xcb_glx_get_color_table_reply_t *R)
{
    return (R->length * 4);
}

xcb_generic_iterator_t
xcb_glx_get_color_table_data_end (const xcb_glx_get_color_table_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->length * 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_color_table_reply_t *
xcb_glx_get_color_table_reply (xcb_connection_t                  *c,
                               xcb_glx_get_color_table_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_glx_get_color_table_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_color_table_parameterfv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_color_table_parameterfv_reply_t *_aux = (xcb_glx_get_color_table_parameterfv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_color_table_parameterfv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_color_table_parameterfv_cookie_t
xcb_glx_get_color_table_parameterfv (xcb_connection_t      *c,
                                     xcb_glx_context_tag_t  context_tag,
                                     uint32_t               target,
                                     uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_COLOR_TABLE_PARAMETERFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_color_table_parameterfv_cookie_t xcb_ret;
    xcb_glx_get_color_table_parameterfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_color_table_parameterfv_cookie_t
xcb_glx_get_color_table_parameterfv_unchecked (xcb_connection_t      *c,
                                               xcb_glx_context_tag_t  context_tag,
                                               uint32_t               target,
                                               uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_COLOR_TABLE_PARAMETERFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_color_table_parameterfv_cookie_t xcb_ret;
    xcb_glx_get_color_table_parameterfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float32_t *
xcb_glx_get_color_table_parameterfv_data (const xcb_glx_get_color_table_parameterfv_reply_t *R)
{
    return (xcb_glx_float32_t *) (R + 1);
}

int
xcb_glx_get_color_table_parameterfv_data_length (const xcb_glx_get_color_table_parameterfv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_color_table_parameterfv_data_end (const xcb_glx_get_color_table_parameterfv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_color_table_parameterfv_reply_t *
xcb_glx_get_color_table_parameterfv_reply (xcb_connection_t                              *c,
                                           xcb_glx_get_color_table_parameterfv_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e)
{
    return (xcb_glx_get_color_table_parameterfv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_color_table_parameteriv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_color_table_parameteriv_reply_t *_aux = (xcb_glx_get_color_table_parameteriv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_color_table_parameteriv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_color_table_parameteriv_cookie_t
xcb_glx_get_color_table_parameteriv (xcb_connection_t      *c,
                                     xcb_glx_context_tag_t  context_tag,
                                     uint32_t               target,
                                     uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_COLOR_TABLE_PARAMETERIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_color_table_parameteriv_cookie_t xcb_ret;
    xcb_glx_get_color_table_parameteriv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_color_table_parameteriv_cookie_t
xcb_glx_get_color_table_parameteriv_unchecked (xcb_connection_t      *c,
                                               xcb_glx_context_tag_t  context_tag,
                                               uint32_t               target,
                                               uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_COLOR_TABLE_PARAMETERIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_color_table_parameteriv_cookie_t xcb_ret;
    xcb_glx_get_color_table_parameteriv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_glx_get_color_table_parameteriv_data (const xcb_glx_get_color_table_parameteriv_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_glx_get_color_table_parameteriv_data_length (const xcb_glx_get_color_table_parameteriv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_color_table_parameteriv_data_end (const xcb_glx_get_color_table_parameteriv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_color_table_parameteriv_reply_t *
xcb_glx_get_color_table_parameteriv_reply (xcb_connection_t                              *c,
                                           xcb_glx_get_color_table_parameteriv_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e)
{
    return (xcb_glx_get_color_table_parameteriv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_convolution_filter_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_convolution_filter_reply_t *_aux = (xcb_glx_get_convolution_filter_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_convolution_filter_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += (_aux->length * 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_convolution_filter_cookie_t
xcb_glx_get_convolution_filter (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                uint32_t               target,
                                uint32_t               format,
                                uint32_t               type,
                                uint8_t                swap_bytes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_CONVOLUTION_FILTER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_convolution_filter_cookie_t xcb_ret;
    xcb_glx_get_convolution_filter_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.format = format;
    xcb_out.type = type;
    xcb_out.swap_bytes = swap_bytes;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_convolution_filter_cookie_t
xcb_glx_get_convolution_filter_unchecked (xcb_connection_t      *c,
                                          xcb_glx_context_tag_t  context_tag,
                                          uint32_t               target,
                                          uint32_t               format,
                                          uint32_t               type,
                                          uint8_t                swap_bytes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_CONVOLUTION_FILTER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_convolution_filter_cookie_t xcb_ret;
    xcb_glx_get_convolution_filter_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.format = format;
    xcb_out.type = type;
    xcb_out.swap_bytes = swap_bytes;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_get_convolution_filter_data (const xcb_glx_get_convolution_filter_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_get_convolution_filter_data_length (const xcb_glx_get_convolution_filter_reply_t *R)
{
    return (R->length * 4);
}

xcb_generic_iterator_t
xcb_glx_get_convolution_filter_data_end (const xcb_glx_get_convolution_filter_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->length * 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_convolution_filter_reply_t *
xcb_glx_get_convolution_filter_reply (xcb_connection_t                         *c,
                                      xcb_glx_get_convolution_filter_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e)
{
    return (xcb_glx_get_convolution_filter_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_convolution_parameterfv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_convolution_parameterfv_reply_t *_aux = (xcb_glx_get_convolution_parameterfv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_convolution_parameterfv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_convolution_parameterfv_cookie_t
xcb_glx_get_convolution_parameterfv (xcb_connection_t      *c,
                                     xcb_glx_context_tag_t  context_tag,
                                     uint32_t               target,
                                     uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_CONVOLUTION_PARAMETERFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_convolution_parameterfv_cookie_t xcb_ret;
    xcb_glx_get_convolution_parameterfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_convolution_parameterfv_cookie_t
xcb_glx_get_convolution_parameterfv_unchecked (xcb_connection_t      *c,
                                               xcb_glx_context_tag_t  context_tag,
                                               uint32_t               target,
                                               uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_CONVOLUTION_PARAMETERFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_convolution_parameterfv_cookie_t xcb_ret;
    xcb_glx_get_convolution_parameterfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float32_t *
xcb_glx_get_convolution_parameterfv_data (const xcb_glx_get_convolution_parameterfv_reply_t *R)
{
    return (xcb_glx_float32_t *) (R + 1);
}

int
xcb_glx_get_convolution_parameterfv_data_length (const xcb_glx_get_convolution_parameterfv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_convolution_parameterfv_data_end (const xcb_glx_get_convolution_parameterfv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_convolution_parameterfv_reply_t *
xcb_glx_get_convolution_parameterfv_reply (xcb_connection_t                              *c,
                                           xcb_glx_get_convolution_parameterfv_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e)
{
    return (xcb_glx_get_convolution_parameterfv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_convolution_parameteriv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_convolution_parameteriv_reply_t *_aux = (xcb_glx_get_convolution_parameteriv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_convolution_parameteriv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_convolution_parameteriv_cookie_t
xcb_glx_get_convolution_parameteriv (xcb_connection_t      *c,
                                     xcb_glx_context_tag_t  context_tag,
                                     uint32_t               target,
                                     uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_CONVOLUTION_PARAMETERIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_convolution_parameteriv_cookie_t xcb_ret;
    xcb_glx_get_convolution_parameteriv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_convolution_parameteriv_cookie_t
xcb_glx_get_convolution_parameteriv_unchecked (xcb_connection_t      *c,
                                               xcb_glx_context_tag_t  context_tag,
                                               uint32_t               target,
                                               uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_CONVOLUTION_PARAMETERIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_convolution_parameteriv_cookie_t xcb_ret;
    xcb_glx_get_convolution_parameteriv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_glx_get_convolution_parameteriv_data (const xcb_glx_get_convolution_parameteriv_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_glx_get_convolution_parameteriv_data_length (const xcb_glx_get_convolution_parameteriv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_convolution_parameteriv_data_end (const xcb_glx_get_convolution_parameteriv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_convolution_parameteriv_reply_t *
xcb_glx_get_convolution_parameteriv_reply (xcb_connection_t                              *c,
                                           xcb_glx_get_convolution_parameteriv_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e)
{
    return (xcb_glx_get_convolution_parameteriv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_separable_filter_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_separable_filter_reply_t *_aux = (xcb_glx_get_separable_filter_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_separable_filter_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* rows_and_cols */
    xcb_block_len += (_aux->length * 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_separable_filter_cookie_t
xcb_glx_get_separable_filter (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               target,
                              uint32_t               format,
                              uint32_t               type,
                              uint8_t                swap_bytes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_SEPARABLE_FILTER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_separable_filter_cookie_t xcb_ret;
    xcb_glx_get_separable_filter_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.format = format;
    xcb_out.type = type;
    xcb_out.swap_bytes = swap_bytes;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_separable_filter_cookie_t
xcb_glx_get_separable_filter_unchecked (xcb_connection_t      *c,
                                        xcb_glx_context_tag_t  context_tag,
                                        uint32_t               target,
                                        uint32_t               format,
                                        uint32_t               type,
                                        uint8_t                swap_bytes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_SEPARABLE_FILTER,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_separable_filter_cookie_t xcb_ret;
    xcb_glx_get_separable_filter_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.format = format;
    xcb_out.type = type;
    xcb_out.swap_bytes = swap_bytes;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_get_separable_filter_rows_and_cols (const xcb_glx_get_separable_filter_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_get_separable_filter_rows_and_cols_length (const xcb_glx_get_separable_filter_reply_t *R)
{
    return (R->length * 4);
}

xcb_generic_iterator_t
xcb_glx_get_separable_filter_rows_and_cols_end (const xcb_glx_get_separable_filter_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->length * 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_separable_filter_reply_t *
xcb_glx_get_separable_filter_reply (xcb_connection_t                       *c,
                                    xcb_glx_get_separable_filter_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e)
{
    return (xcb_glx_get_separable_filter_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_histogram_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_histogram_reply_t *_aux = (xcb_glx_get_histogram_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_histogram_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += (_aux->length * 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_histogram_cookie_t
xcb_glx_get_histogram (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       uint32_t               target,
                       uint32_t               format,
                       uint32_t               type,
                       uint8_t                swap_bytes,
                       uint8_t                reset)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_HISTOGRAM,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_histogram_cookie_t xcb_ret;
    xcb_glx_get_histogram_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.format = format;
    xcb_out.type = type;
    xcb_out.swap_bytes = swap_bytes;
    xcb_out.reset = reset;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_histogram_cookie_t
xcb_glx_get_histogram_unchecked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               target,
                                 uint32_t               format,
                                 uint32_t               type,
                                 uint8_t                swap_bytes,
                                 uint8_t                reset)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_HISTOGRAM,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_histogram_cookie_t xcb_ret;
    xcb_glx_get_histogram_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.format = format;
    xcb_out.type = type;
    xcb_out.swap_bytes = swap_bytes;
    xcb_out.reset = reset;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_get_histogram_data (const xcb_glx_get_histogram_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_get_histogram_data_length (const xcb_glx_get_histogram_reply_t *R)
{
    return (R->length * 4);
}

xcb_generic_iterator_t
xcb_glx_get_histogram_data_end (const xcb_glx_get_histogram_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->length * 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_histogram_reply_t *
xcb_glx_get_histogram_reply (xcb_connection_t                *c,
                             xcb_glx_get_histogram_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_glx_get_histogram_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_histogram_parameterfv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_histogram_parameterfv_reply_t *_aux = (xcb_glx_get_histogram_parameterfv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_histogram_parameterfv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_histogram_parameterfv_cookie_t
xcb_glx_get_histogram_parameterfv (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               target,
                                   uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_HISTOGRAM_PARAMETERFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_histogram_parameterfv_cookie_t xcb_ret;
    xcb_glx_get_histogram_parameterfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_histogram_parameterfv_cookie_t
xcb_glx_get_histogram_parameterfv_unchecked (xcb_connection_t      *c,
                                             xcb_glx_context_tag_t  context_tag,
                                             uint32_t               target,
                                             uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_HISTOGRAM_PARAMETERFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_histogram_parameterfv_cookie_t xcb_ret;
    xcb_glx_get_histogram_parameterfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float32_t *
xcb_glx_get_histogram_parameterfv_data (const xcb_glx_get_histogram_parameterfv_reply_t *R)
{
    return (xcb_glx_float32_t *) (R + 1);
}

int
xcb_glx_get_histogram_parameterfv_data_length (const xcb_glx_get_histogram_parameterfv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_histogram_parameterfv_data_end (const xcb_glx_get_histogram_parameterfv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_histogram_parameterfv_reply_t *
xcb_glx_get_histogram_parameterfv_reply (xcb_connection_t                            *c,
                                         xcb_glx_get_histogram_parameterfv_cookie_t   cookie  /**< */,
                                         xcb_generic_error_t                        **e)
{
    return (xcb_glx_get_histogram_parameterfv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_histogram_parameteriv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_histogram_parameteriv_reply_t *_aux = (xcb_glx_get_histogram_parameteriv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_histogram_parameteriv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_histogram_parameteriv_cookie_t
xcb_glx_get_histogram_parameteriv (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               target,
                                   uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_HISTOGRAM_PARAMETERIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_histogram_parameteriv_cookie_t xcb_ret;
    xcb_glx_get_histogram_parameteriv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_histogram_parameteriv_cookie_t
xcb_glx_get_histogram_parameteriv_unchecked (xcb_connection_t      *c,
                                             xcb_glx_context_tag_t  context_tag,
                                             uint32_t               target,
                                             uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_HISTOGRAM_PARAMETERIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_histogram_parameteriv_cookie_t xcb_ret;
    xcb_glx_get_histogram_parameteriv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_glx_get_histogram_parameteriv_data (const xcb_glx_get_histogram_parameteriv_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_glx_get_histogram_parameteriv_data_length (const xcb_glx_get_histogram_parameteriv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_histogram_parameteriv_data_end (const xcb_glx_get_histogram_parameteriv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_histogram_parameteriv_reply_t *
xcb_glx_get_histogram_parameteriv_reply (xcb_connection_t                            *c,
                                         xcb_glx_get_histogram_parameteriv_cookie_t   cookie  /**< */,
                                         xcb_generic_error_t                        **e)
{
    return (xcb_glx_get_histogram_parameteriv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_minmax_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_minmax_reply_t *_aux = (xcb_glx_get_minmax_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_minmax_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += (_aux->length * 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_minmax_cookie_t
xcb_glx_get_minmax (xcb_connection_t      *c,
                    xcb_glx_context_tag_t  context_tag,
                    uint32_t               target,
                    uint32_t               format,
                    uint32_t               type,
                    uint8_t                swap_bytes,
                    uint8_t                reset)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MINMAX,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_minmax_cookie_t xcb_ret;
    xcb_glx_get_minmax_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.format = format;
    xcb_out.type = type;
    xcb_out.swap_bytes = swap_bytes;
    xcb_out.reset = reset;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_minmax_cookie_t
xcb_glx_get_minmax_unchecked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               target,
                              uint32_t               format,
                              uint32_t               type,
                              uint8_t                swap_bytes,
                              uint8_t                reset)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MINMAX,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_minmax_cookie_t xcb_ret;
    xcb_glx_get_minmax_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.format = format;
    xcb_out.type = type;
    xcb_out.swap_bytes = swap_bytes;
    xcb_out.reset = reset;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_get_minmax_data (const xcb_glx_get_minmax_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_get_minmax_data_length (const xcb_glx_get_minmax_reply_t *R)
{
    return (R->length * 4);
}

xcb_generic_iterator_t
xcb_glx_get_minmax_data_end (const xcb_glx_get_minmax_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->length * 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_minmax_reply_t *
xcb_glx_get_minmax_reply (xcb_connection_t             *c,
                          xcb_glx_get_minmax_cookie_t   cookie  /**< */,
                          xcb_generic_error_t         **e)
{
    return (xcb_glx_get_minmax_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_minmax_parameterfv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_minmax_parameterfv_reply_t *_aux = (xcb_glx_get_minmax_parameterfv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_minmax_parameterfv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(xcb_glx_float32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_glx_float32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_minmax_parameterfv_cookie_t
xcb_glx_get_minmax_parameterfv (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                uint32_t               target,
                                uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MINMAX_PARAMETERFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_minmax_parameterfv_cookie_t xcb_ret;
    xcb_glx_get_minmax_parameterfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_minmax_parameterfv_cookie_t
xcb_glx_get_minmax_parameterfv_unchecked (xcb_connection_t      *c,
                                          xcb_glx_context_tag_t  context_tag,
                                          uint32_t               target,
                                          uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MINMAX_PARAMETERFV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_minmax_parameterfv_cookie_t xcb_ret;
    xcb_glx_get_minmax_parameterfv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_float32_t *
xcb_glx_get_minmax_parameterfv_data (const xcb_glx_get_minmax_parameterfv_reply_t *R)
{
    return (xcb_glx_float32_t *) (R + 1);
}

int
xcb_glx_get_minmax_parameterfv_data_length (const xcb_glx_get_minmax_parameterfv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_minmax_parameterfv_data_end (const xcb_glx_get_minmax_parameterfv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_glx_float32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_minmax_parameterfv_reply_t *
xcb_glx_get_minmax_parameterfv_reply (xcb_connection_t                         *c,
                                      xcb_glx_get_minmax_parameterfv_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e)
{
    return (xcb_glx_get_minmax_parameterfv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_minmax_parameteriv_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_minmax_parameteriv_reply_t *_aux = (xcb_glx_get_minmax_parameteriv_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_minmax_parameteriv_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_minmax_parameteriv_cookie_t
xcb_glx_get_minmax_parameteriv (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                uint32_t               target,
                                uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MINMAX_PARAMETERIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_minmax_parameteriv_cookie_t xcb_ret;
    xcb_glx_get_minmax_parameteriv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_minmax_parameteriv_cookie_t
xcb_glx_get_minmax_parameteriv_unchecked (xcb_connection_t      *c,
                                          xcb_glx_context_tag_t  context_tag,
                                          uint32_t               target,
                                          uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_MINMAX_PARAMETERIV,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_minmax_parameteriv_cookie_t xcb_ret;
    xcb_glx_get_minmax_parameteriv_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_glx_get_minmax_parameteriv_data (const xcb_glx_get_minmax_parameteriv_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_glx_get_minmax_parameteriv_data_length (const xcb_glx_get_minmax_parameteriv_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_minmax_parameteriv_data_end (const xcb_glx_get_minmax_parameteriv_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_minmax_parameteriv_reply_t *
xcb_glx_get_minmax_parameteriv_reply (xcb_connection_t                         *c,
                                      xcb_glx_get_minmax_parameteriv_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e)
{
    return (xcb_glx_get_minmax_parameteriv_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_compressed_tex_image_arb_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_compressed_tex_image_arb_reply_t *_aux = (xcb_glx_get_compressed_tex_image_arb_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_compressed_tex_image_arb_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += (_aux->length * 4) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_compressed_tex_image_arb_cookie_t
xcb_glx_get_compressed_tex_image_arb (xcb_connection_t      *c,
                                      xcb_glx_context_tag_t  context_tag,
                                      uint32_t               target,
                                      int32_t                level)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_COMPRESSED_TEX_IMAGE_ARB,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_compressed_tex_image_arb_cookie_t xcb_ret;
    xcb_glx_get_compressed_tex_image_arb_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.level = level;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_compressed_tex_image_arb_cookie_t
xcb_glx_get_compressed_tex_image_arb_unchecked (xcb_connection_t      *c,
                                                xcb_glx_context_tag_t  context_tag,
                                                uint32_t               target,
                                                int32_t                level)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_COMPRESSED_TEX_IMAGE_ARB,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_compressed_tex_image_arb_cookie_t xcb_ret;
    xcb_glx_get_compressed_tex_image_arb_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.level = level;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_glx_get_compressed_tex_image_arb_data (const xcb_glx_get_compressed_tex_image_arb_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_glx_get_compressed_tex_image_arb_data_length (const xcb_glx_get_compressed_tex_image_arb_reply_t *R)
{
    return (R->length * 4);
}

xcb_generic_iterator_t
xcb_glx_get_compressed_tex_image_arb_data_end (const xcb_glx_get_compressed_tex_image_arb_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->length * 4));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_compressed_tex_image_arb_reply_t *
xcb_glx_get_compressed_tex_image_arb_reply (xcb_connection_t                               *c,
                                            xcb_glx_get_compressed_tex_image_arb_cookie_t   cookie  /**< */,
                                            xcb_generic_error_t                           **e)
{
    return (xcb_glx_get_compressed_tex_image_arb_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_delete_queries_arb_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_delete_queries_arb_request_t *_aux = (xcb_glx_delete_queries_arb_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_delete_queries_arb_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* ids */
    xcb_block_len += _aux->n * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_glx_delete_queries_arb_checked (xcb_connection_t      *c,
                                    xcb_glx_context_tag_t  context_tag,
                                    int32_t                n,
                                    const uint32_t        *ids)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DELETE_QUERIES_ARB,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_delete_queries_arb_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.n = n;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t ids */
    xcb_parts[4].iov_base = (char *) ids;
    xcb_parts[4].iov_len = n * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_glx_delete_queries_arb (xcb_connection_t      *c,
                            xcb_glx_context_tag_t  context_tag,
                            int32_t                n,
                            const uint32_t        *ids)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_DELETE_QUERIES_ARB,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_glx_delete_queries_arb_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.n = n;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t ids */
    xcb_parts[4].iov_base = (char *) ids;
    xcb_parts[4].iov_len = n * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_delete_queries_arb_ids (const xcb_glx_delete_queries_arb_request_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_delete_queries_arb_ids_length (const xcb_glx_delete_queries_arb_request_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_delete_queries_arb_ids_end (const xcb_glx_delete_queries_arb_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_glx_gen_queries_arb_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_gen_queries_arb_reply_t *_aux = (xcb_glx_gen_queries_arb_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_gen_queries_arb_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->length * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_gen_queries_arb_cookie_t
xcb_glx_gen_queries_arb (xcb_connection_t      *c,
                         xcb_glx_context_tag_t  context_tag,
                         int32_t                n)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GEN_QUERIES_ARB,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_gen_queries_arb_cookie_t xcb_ret;
    xcb_glx_gen_queries_arb_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.n = n;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_gen_queries_arb_cookie_t
xcb_glx_gen_queries_arb_unchecked (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   int32_t                n)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GEN_QUERIES_ARB,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_gen_queries_arb_cookie_t xcb_ret;
    xcb_glx_gen_queries_arb_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.n = n;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_gen_queries_arb_data (const xcb_glx_gen_queries_arb_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_gen_queries_arb_data_length (const xcb_glx_gen_queries_arb_reply_t *R)
{
    return R->length;
}

xcb_generic_iterator_t
xcb_glx_gen_queries_arb_data_end (const xcb_glx_gen_queries_arb_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_gen_queries_arb_reply_t *
xcb_glx_gen_queries_arb_reply (xcb_connection_t                  *c,
                               xcb_glx_gen_queries_arb_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_glx_gen_queries_arb_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_glx_is_query_arb_cookie_t
xcb_glx_is_query_arb (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      uint32_t               id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_IS_QUERY_ARB,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_is_query_arb_cookie_t xcb_ret;
    xcb_glx_is_query_arb_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.id = id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_is_query_arb_cookie_t
xcb_glx_is_query_arb_unchecked (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                uint32_t               id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_IS_QUERY_ARB,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_is_query_arb_cookie_t xcb_ret;
    xcb_glx_is_query_arb_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.id = id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_is_query_arb_reply_t *
xcb_glx_is_query_arb_reply (xcb_connection_t               *c,
                            xcb_glx_is_query_arb_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e)
{
    return (xcb_glx_is_query_arb_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_queryiv_arb_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_queryiv_arb_reply_t *_aux = (xcb_glx_get_queryiv_arb_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_queryiv_arb_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_queryiv_arb_cookie_t
xcb_glx_get_queryiv_arb (xcb_connection_t      *c,
                         xcb_glx_context_tag_t  context_tag,
                         uint32_t               target,
                         uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_QUERYIV_ARB,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_queryiv_arb_cookie_t xcb_ret;
    xcb_glx_get_queryiv_arb_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_queryiv_arb_cookie_t
xcb_glx_get_queryiv_arb_unchecked (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               target,
                                   uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_QUERYIV_ARB,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_queryiv_arb_cookie_t xcb_ret;
    xcb_glx_get_queryiv_arb_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.target = target;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_glx_get_queryiv_arb_data (const xcb_glx_get_queryiv_arb_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_glx_get_queryiv_arb_data_length (const xcb_glx_get_queryiv_arb_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_queryiv_arb_data_end (const xcb_glx_get_queryiv_arb_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_queryiv_arb_reply_t *
xcb_glx_get_queryiv_arb_reply (xcb_connection_t                  *c,
                               xcb_glx_get_queryiv_arb_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_glx_get_queryiv_arb_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_query_objectiv_arb_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_query_objectiv_arb_reply_t *_aux = (xcb_glx_get_query_objectiv_arb_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_query_objectiv_arb_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_query_objectiv_arb_cookie_t
xcb_glx_get_query_objectiv_arb (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                uint32_t               id,
                                uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_QUERY_OBJECTIV_ARB,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_query_objectiv_arb_cookie_t xcb_ret;
    xcb_glx_get_query_objectiv_arb_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.id = id;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_query_objectiv_arb_cookie_t
xcb_glx_get_query_objectiv_arb_unchecked (xcb_connection_t      *c,
                                          xcb_glx_context_tag_t  context_tag,
                                          uint32_t               id,
                                          uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_QUERY_OBJECTIV_ARB,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_query_objectiv_arb_cookie_t xcb_ret;
    xcb_glx_get_query_objectiv_arb_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.id = id;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_glx_get_query_objectiv_arb_data (const xcb_glx_get_query_objectiv_arb_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_glx_get_query_objectiv_arb_data_length (const xcb_glx_get_query_objectiv_arb_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_query_objectiv_arb_data_end (const xcb_glx_get_query_objectiv_arb_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_query_objectiv_arb_reply_t *
xcb_glx_get_query_objectiv_arb_reply (xcb_connection_t                         *c,
                                      xcb_glx_get_query_objectiv_arb_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e)
{
    return (xcb_glx_get_query_objectiv_arb_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_glx_get_query_objectuiv_arb_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_glx_get_query_objectuiv_arb_reply_t *_aux = (xcb_glx_get_query_objectuiv_arb_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_glx_get_query_objectuiv_arb_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->n * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_glx_get_query_objectuiv_arb_cookie_t
xcb_glx_get_query_objectuiv_arb (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               id,
                                 uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_QUERY_OBJECTUIV_ARB,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_query_objectuiv_arb_cookie_t xcb_ret;
    xcb_glx_get_query_objectuiv_arb_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.id = id;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_glx_get_query_objectuiv_arb_cookie_t
xcb_glx_get_query_objectuiv_arb_unchecked (xcb_connection_t      *c,
                                           xcb_glx_context_tag_t  context_tag,
                                           uint32_t               id,
                                           uint32_t               pname)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_glx_id,
        .opcode = XCB_GLX_GET_QUERY_OBJECTUIV_ARB,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_glx_get_query_objectuiv_arb_cookie_t xcb_ret;
    xcb_glx_get_query_objectuiv_arb_request_t xcb_out;

    xcb_out.context_tag = context_tag;
    xcb_out.id = id;
    xcb_out.pname = pname;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_glx_get_query_objectuiv_arb_data (const xcb_glx_get_query_objectuiv_arb_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_glx_get_query_objectuiv_arb_data_length (const xcb_glx_get_query_objectuiv_arb_reply_t *R)
{
    return R->n;
}

xcb_generic_iterator_t
xcb_glx_get_query_objectuiv_arb_data_end (const xcb_glx_get_query_objectuiv_arb_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->n);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_glx_get_query_objectuiv_arb_reply_t *
xcb_glx_get_query_objectuiv_arb_reply (xcb_connection_t                          *c,
                                       xcb_glx_get_query_objectuiv_arb_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e)
{
    return (xcb_glx_get_query_objectuiv_arb_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d22 1
a22 1
xcb_glx_pixmap_next (xcb_glx_pixmap_iterator_t *i  /**< */)
d30 1
a30 1
xcb_glx_pixmap_end (xcb_glx_pixmap_iterator_t i  /**< */)
d40 1
a40 1
xcb_glx_context_next (xcb_glx_context_iterator_t *i  /**< */)
d48 1
a48 1
xcb_glx_context_end (xcb_glx_context_iterator_t i  /**< */)
d58 1
a58 1
xcb_glx_pbuffer_next (xcb_glx_pbuffer_iterator_t *i  /**< */)
d66 1
a66 1
xcb_glx_pbuffer_end (xcb_glx_pbuffer_iterator_t i  /**< */)
d76 1
a76 1
xcb_glx_window_next (xcb_glx_window_iterator_t *i  /**< */)
d84 1
a84 1
xcb_glx_window_end (xcb_glx_window_iterator_t i  /**< */)
d94 1
a94 1
xcb_glx_fbconfig_next (xcb_glx_fbconfig_iterator_t *i  /**< */)
d102 1
a102 1
xcb_glx_fbconfig_end (xcb_glx_fbconfig_iterator_t i  /**< */)
d112 1
a112 1
xcb_glx_drawable_next (xcb_glx_drawable_iterator_t *i  /**< */)
d120 1
a120 1
xcb_glx_drawable_end (xcb_glx_drawable_iterator_t i  /**< */)
d130 1
a130 1
xcb_glx_float32_next (xcb_glx_float32_iterator_t *i  /**< */)
d138 1
a138 1
xcb_glx_float32_end (xcb_glx_float32_iterator_t i  /**< */)
d148 1
a148 1
xcb_glx_float64_next (xcb_glx_float64_iterator_t *i  /**< */)
d156 1
a156 1
xcb_glx_float64_end (xcb_glx_float64_iterator_t i  /**< */)
d166 1
a166 1
xcb_glx_bool32_next (xcb_glx_bool32_iterator_t *i  /**< */)
d174 1
a174 1
xcb_glx_bool32_end (xcb_glx_bool32_iterator_t i  /**< */)
d184 1
a184 1
xcb_glx_context_tag_next (xcb_glx_context_tag_iterator_t *i  /**< */)
d192 1
a192 1
xcb_glx_context_tag_end (xcb_glx_context_tag_iterator_t i  /**< */)
d202 2
a203 2
xcb_glx_render_sizeof (const void  *_buffer  /**< */,
                       uint32_t     data_len  /**< */)
d233 4
a236 4
xcb_glx_render_checked (xcb_connection_t      *c  /**< */,
                        xcb_glx_context_tag_t  context_tag  /**< */,
                        uint32_t               data_len  /**< */,
                        const uint8_t         *data  /**< */)
d239 4
a242 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_RENDER,
        /* isvoid */ 1
d266 4
a269 4
xcb_glx_render (xcb_connection_t      *c  /**< */,
                xcb_glx_context_tag_t  context_tag  /**< */,
                uint32_t               data_len  /**< */,
                const uint8_t         *data  /**< */)
d272 4
a275 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_RENDER,
        /* isvoid */ 1
d298 22
d321 1
a321 1
xcb_glx_render_large_sizeof (const void  *_buffer  /**< */)
d352 6
a357 6
xcb_glx_render_large_checked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint16_t               request_num  /**< */,
                              uint16_t               request_total  /**< */,
                              uint32_t               data_len  /**< */,
                              const uint8_t         *data  /**< */)
d360 4
a363 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_RENDER_LARGE,
        /* isvoid */ 1
d390 6
a395 6
xcb_glx_render_large (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      uint16_t               request_num  /**< */,
                      uint16_t               request_total  /**< */,
                      uint32_t               data_len  /**< */,
                      const uint8_t         *data  /**< */)
d398 4
a401 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_RENDER_LARGE,
        /* isvoid */ 1
d427 22
d450 6
a455 6
xcb_glx_create_context_checked (xcb_connection_t  *c  /**< */,
                                xcb_glx_context_t  context  /**< */,
                                xcb_visualid_t     visual  /**< */,
                                uint32_t           screen  /**< */,
                                xcb_glx_context_t  share_list  /**< */,
                                uint8_t            is_direct  /**< */)
d458 4
a461 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CREATE_CONTEXT,
        /* isvoid */ 1
d485 6
a490 6
xcb_glx_create_context (xcb_connection_t  *c  /**< */,
                        xcb_glx_context_t  context  /**< */,
                        xcb_visualid_t     visual  /**< */,
                        uint32_t           screen  /**< */,
                        xcb_glx_context_t  share_list  /**< */,
                        uint8_t            is_direct  /**< */)
d493 4
a496 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CREATE_CONTEXT,
        /* isvoid */ 1
d520 2
a521 2
xcb_glx_destroy_context_checked (xcb_connection_t  *c  /**< */,
                                 xcb_glx_context_t  context  /**< */)
d524 4
a527 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DESTROY_CONTEXT,
        /* isvoid */ 1
d546 2
a547 2
xcb_glx_destroy_context (xcb_connection_t  *c  /**< */,
                         xcb_glx_context_t  context  /**< */)
d550 4
a553 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DESTROY_CONTEXT,
        /* isvoid */ 1
d572 4
a575 4
xcb_glx_make_current (xcb_connection_t      *c  /**< */,
                      xcb_glx_drawable_t     drawable  /**< */,
                      xcb_glx_context_t      context  /**< */,
                      xcb_glx_context_tag_t  old_context_tag  /**< */)
d578 4
a581 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_MAKE_CURRENT,
        /* isvoid */ 0
d602 4
a605 4
xcb_glx_make_current_unchecked (xcb_connection_t      *c  /**< */,
                                xcb_glx_drawable_t     drawable  /**< */,
                                xcb_glx_context_t      context  /**< */,
                                xcb_glx_context_tag_t  old_context_tag  /**< */)
d608 4
a611 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_MAKE_CURRENT,
        /* isvoid */ 0
d632 1
a632 1
xcb_glx_make_current_reply (xcb_connection_t               *c  /**< */,
d634 1
a634 1
                            xcb_generic_error_t           **e  /**< */)
d640 2
a641 2
xcb_glx_is_direct (xcb_connection_t  *c  /**< */,
                   xcb_glx_context_t  context  /**< */)
d644 4
a647 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_IS_DIRECT,
        /* isvoid */ 0
d666 2
a667 2
xcb_glx_is_direct_unchecked (xcb_connection_t  *c  /**< */,
                             xcb_glx_context_t  context  /**< */)
d670 4
a673 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_IS_DIRECT,
        /* isvoid */ 0
d692 1
a692 1
xcb_glx_is_direct_reply (xcb_connection_t            *c  /**< */,
d694 1
a694 1
                         xcb_generic_error_t        **e  /**< */)
d700 3
a702 3
xcb_glx_query_version (xcb_connection_t *c  /**< */,
                       uint32_t          major_version  /**< */,
                       uint32_t          minor_version  /**< */)
d705 4
a708 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_QUERY_VERSION,
        /* isvoid */ 0
d728 3
a730 3
xcb_glx_query_version_unchecked (xcb_connection_t *c  /**< */,
                                 uint32_t          major_version  /**< */,
                                 uint32_t          minor_version  /**< */)
d733 4
a736 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_QUERY_VERSION,
        /* isvoid */ 0
d756 1
a756 1
xcb_glx_query_version_reply (xcb_connection_t                *c  /**< */,
d758 1
a758 1
                             xcb_generic_error_t            **e  /**< */)
d764 2
a765 2
xcb_glx_wait_gl_checked (xcb_connection_t      *c  /**< */,
                         xcb_glx_context_tag_t  context_tag  /**< */)
d768 4
a771 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_WAIT_GL,
        /* isvoid */ 1
d790 2
a791 2
xcb_glx_wait_gl (xcb_connection_t      *c  /**< */,
                 xcb_glx_context_tag_t  context_tag  /**< */)
d794 4
a797 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_WAIT_GL,
        /* isvoid */ 1
d816 2
a817 2
xcb_glx_wait_x_checked (xcb_connection_t      *c  /**< */,
                        xcb_glx_context_tag_t  context_tag  /**< */)
d820 4
a823 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_WAIT_X,
        /* isvoid */ 1
d842 2
a843 2
xcb_glx_wait_x (xcb_connection_t      *c  /**< */,
                xcb_glx_context_tag_t  context_tag  /**< */)
d846 4
a849 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_WAIT_X,
        /* isvoid */ 1
d868 5
a872 5
xcb_glx_copy_context_checked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_t      src  /**< */,
                              xcb_glx_context_t      dest  /**< */,
                              uint32_t               mask  /**< */,
                              xcb_glx_context_tag_t  src_context_tag  /**< */)
d875 4
a878 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_COPY_CONTEXT,
        /* isvoid */ 1
d900 5
a904 5
xcb_glx_copy_context (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_t      src  /**< */,
                      xcb_glx_context_t      dest  /**< */,
                      uint32_t               mask  /**< */,
                      xcb_glx_context_tag_t  src_context_tag  /**< */)
d907 4
a910 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_COPY_CONTEXT,
        /* isvoid */ 1
d932 3
a934 3
xcb_glx_swap_buffers_checked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              xcb_glx_drawable_t     drawable  /**< */)
d937 4
a940 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_SWAP_BUFFERS,
        /* isvoid */ 1
d960 3
a962 3
xcb_glx_swap_buffers (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      xcb_glx_drawable_t     drawable  /**< */)
d965 4
a968 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_SWAP_BUFFERS,
        /* isvoid */ 1
d988 6
a993 6
xcb_glx_use_x_font_checked (xcb_connection_t      *c  /**< */,
                            xcb_glx_context_tag_t  context_tag  /**< */,
                            xcb_font_t             font  /**< */,
                            uint32_t               first  /**< */,
                            uint32_t               count  /**< */,
                            uint32_t               list_base  /**< */)
d996 4
a999 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_USE_X_FONT,
        /* isvoid */ 1
d1022 6
a1027 6
xcb_glx_use_x_font (xcb_connection_t      *c  /**< */,
                    xcb_glx_context_tag_t  context_tag  /**< */,
                    xcb_font_t             font  /**< */,
                    uint32_t               first  /**< */,
                    uint32_t               count  /**< */,
                    uint32_t               list_base  /**< */)
d1030 4
a1033 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_USE_X_FONT,
        /* isvoid */ 1
d1056 5
a1060 5
xcb_glx_create_glx_pixmap_checked (xcb_connection_t *c  /**< */,
                                   uint32_t          screen  /**< */,
                                   xcb_visualid_t    visual  /**< */,
                                   xcb_pixmap_t      pixmap  /**< */,
                                   xcb_glx_pixmap_t  glx_pixmap  /**< */)
d1063 4
a1066 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CREATE_GLX_PIXMAP,
        /* isvoid */ 1
d1088 5
a1092 5
xcb_glx_create_glx_pixmap (xcb_connection_t *c  /**< */,
                           uint32_t          screen  /**< */,
                           xcb_visualid_t    visual  /**< */,
                           xcb_pixmap_t      pixmap  /**< */,
                           xcb_glx_pixmap_t  glx_pixmap  /**< */)
d1095 4
a1098 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CREATE_GLX_PIXMAP,
        /* isvoid */ 1
d1120 1
a1120 1
xcb_glx_get_visual_configs_sizeof (const void  *_buffer  /**< */)
d1151 2
a1152 2
xcb_glx_get_visual_configs (xcb_connection_t *c  /**< */,
                            uint32_t          screen  /**< */)
d1155 4
a1158 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_VISUAL_CONFIGS,
        /* isvoid */ 0
d1177 2
a1178 2
xcb_glx_get_visual_configs_unchecked (xcb_connection_t *c  /**< */,
                                      uint32_t          screen  /**< */)
d1181 4
a1184 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_VISUAL_CONFIGS,
        /* isvoid */ 0
d1203 1
a1203 1
xcb_glx_get_visual_configs_property_list (const xcb_glx_get_visual_configs_reply_t *R  /**< */)
d1209 1
a1209 1
xcb_glx_get_visual_configs_property_list_length (const xcb_glx_get_visual_configs_reply_t *R  /**< */)
d1215 1
a1215 1
xcb_glx_get_visual_configs_property_list_end (const xcb_glx_get_visual_configs_reply_t *R  /**< */)
d1225 1
a1225 1
xcb_glx_get_visual_configs_reply (xcb_connection_t                     *c  /**< */,
d1227 1
a1227 1
                                  xcb_generic_error_t                 **e  /**< */)
d1233 2
a1234 2
xcb_glx_destroy_glx_pixmap_checked (xcb_connection_t *c  /**< */,
                                    xcb_glx_pixmap_t  glx_pixmap  /**< */)
d1237 4
a1240 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DESTROY_GLX_PIXMAP,
        /* isvoid */ 1
d1259 2
a1260 2
xcb_glx_destroy_glx_pixmap (xcb_connection_t *c  /**< */,
                            xcb_glx_pixmap_t  glx_pixmap  /**< */)
d1263 4
a1266 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DESTROY_GLX_PIXMAP,
        /* isvoid */ 1
d1285 2
a1286 2
xcb_glx_vendor_private_sizeof (const void  *_buffer  /**< */,
                               uint32_t     data_len  /**< */)
d1316 5
a1320 5
xcb_glx_vendor_private_checked (xcb_connection_t      *c  /**< */,
                                uint32_t               vendor_code  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                uint32_t               data_len  /**< */,
                                const uint8_t         *data  /**< */)
d1323 4
a1326 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_VENDOR_PRIVATE,
        /* isvoid */ 1
d1351 5
a1355 5
xcb_glx_vendor_private (xcb_connection_t      *c  /**< */,
                        uint32_t               vendor_code  /**< */,
                        xcb_glx_context_tag_t  context_tag  /**< */,
                        uint32_t               data_len  /**< */,
                        const uint8_t         *data  /**< */)
d1358 4
a1361 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_VENDOR_PRIVATE,
        /* isvoid */ 1
d1385 6
d1392 18
a1409 2
xcb_glx_vendor_private_with_reply_sizeof (const void  *_buffer  /**< */,
                                          uint32_t     data_len  /**< */)
d1439 5
a1443 5
xcb_glx_vendor_private_with_reply (xcb_connection_t      *c  /**< */,
                                   uint32_t               vendor_code  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               data_len  /**< */,
                                   const uint8_t         *data  /**< */)
d1446 4
a1449 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_VENDOR_PRIVATE_WITH_REPLY,
        /* isvoid */ 0
d1474 5
a1478 5
xcb_glx_vendor_private_with_reply_unchecked (xcb_connection_t      *c  /**< */,
                                             uint32_t               vendor_code  /**< */,
                                             xcb_glx_context_tag_t  context_tag  /**< */,
                                             uint32_t               data_len  /**< */,
                                             const uint8_t         *data  /**< */)
d1481 4
a1484 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_VENDOR_PRIVATE_WITH_REPLY,
        /* isvoid */ 0
d1509 1
a1509 1
xcb_glx_vendor_private_with_reply_data_2 (const xcb_glx_vendor_private_with_reply_reply_t *R  /**< */)
d1515 1
a1515 1
xcb_glx_vendor_private_with_reply_data_2_length (const xcb_glx_vendor_private_with_reply_reply_t *R  /**< */)
d1521 1
a1521 1
xcb_glx_vendor_private_with_reply_data_2_end (const xcb_glx_vendor_private_with_reply_reply_t *R  /**< */)
d1531 1
a1531 1
xcb_glx_vendor_private_with_reply_reply (xcb_connection_t                            *c  /**< */,
d1533 1
a1533 1
                                         xcb_generic_error_t                        **e  /**< */)
d1539 2
a1540 2
xcb_glx_query_extensions_string (xcb_connection_t *c  /**< */,
                                 uint32_t          screen  /**< */)
d1543 4
a1546 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_QUERY_EXTENSIONS_STRING,
        /* isvoid */ 0
d1565 2
a1566 2
xcb_glx_query_extensions_string_unchecked (xcb_connection_t *c  /**< */,
                                           uint32_t          screen  /**< */)
d1569 4
a1572 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_QUERY_EXTENSIONS_STRING,
        /* isvoid */ 0
d1591 1
a1591 1
xcb_glx_query_extensions_string_reply (xcb_connection_t                          *c  /**< */,
d1593 1
a1593 1
                                       xcb_generic_error_t                      **e  /**< */)
d1599 1
a1599 1
xcb_glx_query_server_string_sizeof (const void  *_buffer  /**< */)
d1630 3
a1632 3
xcb_glx_query_server_string (xcb_connection_t *c  /**< */,
                             uint32_t          screen  /**< */,
                             uint32_t          name  /**< */)
d1635 4
a1638 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_QUERY_SERVER_STRING,
        /* isvoid */ 0
d1658 3
a1660 3
xcb_glx_query_server_string_unchecked (xcb_connection_t *c  /**< */,
                                       uint32_t          screen  /**< */,
                                       uint32_t          name  /**< */)
d1663 4
a1666 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_QUERY_SERVER_STRING,
        /* isvoid */ 0
d1686 1
a1686 1
xcb_glx_query_server_string_string (const xcb_glx_query_server_string_reply_t *R  /**< */)
d1692 1
a1692 1
xcb_glx_query_server_string_string_length (const xcb_glx_query_server_string_reply_t *R  /**< */)
d1698 1
a1698 1
xcb_glx_query_server_string_string_end (const xcb_glx_query_server_string_reply_t *R  /**< */)
d1708 1
a1708 1
xcb_glx_query_server_string_reply (xcb_connection_t                      *c  /**< */,
d1710 1
a1710 1
                                   xcb_generic_error_t                  **e  /**< */)
d1716 1
a1716 1
xcb_glx_client_info_sizeof (const void  *_buffer  /**< */)
d1747 5
a1751 5
xcb_glx_client_info_checked (xcb_connection_t *c  /**< */,
                             uint32_t          major_version  /**< */,
                             uint32_t          minor_version  /**< */,
                             uint32_t          str_len  /**< */,
                             const char       *string  /**< */)
d1754 4
a1757 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CLIENT_INFO,
        /* isvoid */ 1
d1783 5
a1787 5
xcb_glx_client_info (xcb_connection_t *c  /**< */,
                     uint32_t          major_version  /**< */,
                     uint32_t          minor_version  /**< */,
                     uint32_t          str_len  /**< */,
                     const char       *string  /**< */)
d1790 4
a1793 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CLIENT_INFO,
        /* isvoid */ 1
d1818 22
d1841 1
a1841 1
xcb_glx_get_fb_configs_sizeof (const void  *_buffer  /**< */)
d1872 2
a1873 2
xcb_glx_get_fb_configs (xcb_connection_t *c  /**< */,
                        uint32_t          screen  /**< */)
d1876 4
a1879 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_FB_CONFIGS,
        /* isvoid */ 0
d1898 2
a1899 2
xcb_glx_get_fb_configs_unchecked (xcb_connection_t *c  /**< */,
                                  uint32_t          screen  /**< */)
d1902 4
a1905 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_FB_CONFIGS,
        /* isvoid */ 0
d1924 1
a1924 1
xcb_glx_get_fb_configs_property_list (const xcb_glx_get_fb_configs_reply_t *R  /**< */)
d1930 1
a1930 1
xcb_glx_get_fb_configs_property_list_length (const xcb_glx_get_fb_configs_reply_t *R  /**< */)
d1936 1
a1936 1
xcb_glx_get_fb_configs_property_list_end (const xcb_glx_get_fb_configs_reply_t *R  /**< */)
d1946 1
a1946 1
xcb_glx_get_fb_configs_reply (xcb_connection_t                 *c  /**< */,
d1948 1
a1948 1
                              xcb_generic_error_t             **e  /**< */)
d1954 1
a1954 1
xcb_glx_create_pixmap_sizeof (const void  *_buffer  /**< */)
d1985 7
a1991 7
xcb_glx_create_pixmap_checked (xcb_connection_t   *c  /**< */,
                               uint32_t            screen  /**< */,
                               xcb_glx_fbconfig_t  fbconfig  /**< */,
                               xcb_pixmap_t        pixmap  /**< */,
                               xcb_glx_pixmap_t    glx_pixmap  /**< */,
                               uint32_t            num_attribs  /**< */,
                               const uint32_t     *attribs  /**< */)
d1994 4
a1997 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CREATE_PIXMAP,
        /* isvoid */ 1
d2025 7
a2031 7
xcb_glx_create_pixmap (xcb_connection_t   *c  /**< */,
                       uint32_t            screen  /**< */,
                       xcb_glx_fbconfig_t  fbconfig  /**< */,
                       xcb_pixmap_t        pixmap  /**< */,
                       xcb_glx_pixmap_t    glx_pixmap  /**< */,
                       uint32_t            num_attribs  /**< */,
                       const uint32_t     *attribs  /**< */)
d2034 4
a2037 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CREATE_PIXMAP,
        /* isvoid */ 1
d2064 22
d2087 2
a2088 2
xcb_glx_destroy_pixmap_checked (xcb_connection_t *c  /**< */,
                                xcb_glx_pixmap_t  glx_pixmap  /**< */)
d2091 4
a2094 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DESTROY_PIXMAP,
        /* isvoid */ 1
d2113 2
a2114 2
xcb_glx_destroy_pixmap (xcb_connection_t *c  /**< */,
                        xcb_glx_pixmap_t  glx_pixmap  /**< */)
d2117 4
a2120 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DESTROY_PIXMAP,
        /* isvoid */ 1
d2139 7
a2145 7
xcb_glx_create_new_context_checked (xcb_connection_t   *c  /**< */,
                                    xcb_glx_context_t   context  /**< */,
                                    xcb_glx_fbconfig_t  fbconfig  /**< */,
                                    uint32_t            screen  /**< */,
                                    uint32_t            render_type  /**< */,
                                    xcb_glx_context_t   share_list  /**< */,
                                    uint8_t             is_direct  /**< */)
d2148 4
a2151 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CREATE_NEW_CONTEXT,
        /* isvoid */ 1
d2176 7
a2182 7
xcb_glx_create_new_context (xcb_connection_t   *c  /**< */,
                            xcb_glx_context_t   context  /**< */,
                            xcb_glx_fbconfig_t  fbconfig  /**< */,
                            uint32_t            screen  /**< */,
                            uint32_t            render_type  /**< */,
                            xcb_glx_context_t   share_list  /**< */,
                            uint8_t             is_direct  /**< */)
d2185 4
a2188 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CREATE_NEW_CONTEXT,
        /* isvoid */ 1
d2213 1
a2213 1
xcb_glx_query_context_sizeof (const void  *_buffer  /**< */)
d2244 2
a2245 2
xcb_glx_query_context (xcb_connection_t  *c  /**< */,
                       xcb_glx_context_t  context  /**< */)
d2248 4
a2251 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_QUERY_CONTEXT,
        /* isvoid */ 0
d2270 2
a2271 2
xcb_glx_query_context_unchecked (xcb_connection_t  *c  /**< */,
                                 xcb_glx_context_t  context  /**< */)
d2274 4
a2277 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_QUERY_CONTEXT,
        /* isvoid */ 0
d2296 1
a2296 1
xcb_glx_query_context_attribs (const xcb_glx_query_context_reply_t *R  /**< */)
d2302 1
a2302 1
xcb_glx_query_context_attribs_length (const xcb_glx_query_context_reply_t *R  /**< */)
d2308 1
a2308 1
xcb_glx_query_context_attribs_end (const xcb_glx_query_context_reply_t *R  /**< */)
d2318 1
a2318 1
xcb_glx_query_context_reply (xcb_connection_t                *c  /**< */,
d2320 1
a2320 1
                             xcb_generic_error_t            **e  /**< */)
d2326 5
a2330 5
xcb_glx_make_context_current (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  old_context_tag  /**< */,
                              xcb_glx_drawable_t     drawable  /**< */,
                              xcb_glx_drawable_t     read_drawable  /**< */,
                              xcb_glx_context_t      context  /**< */)
d2333 4
a2336 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_MAKE_CONTEXT_CURRENT,
        /* isvoid */ 0
d2358 5
a2362 5
xcb_glx_make_context_current_unchecked (xcb_connection_t      *c  /**< */,
                                        xcb_glx_context_tag_t  old_context_tag  /**< */,
                                        xcb_glx_drawable_t     drawable  /**< */,
                                        xcb_glx_drawable_t     read_drawable  /**< */,
                                        xcb_glx_context_t      context  /**< */)
d2365 4
a2368 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_MAKE_CONTEXT_CURRENT,
        /* isvoid */ 0
d2390 1
a2390 1
xcb_glx_make_context_current_reply (xcb_connection_t                       *c  /**< */,
d2392 1
a2392 1
                                    xcb_generic_error_t                   **e  /**< */)
d2398 1
a2398 1
xcb_glx_create_pbuffer_sizeof (const void  *_buffer  /**< */)
d2429 6
a2434 6
xcb_glx_create_pbuffer_checked (xcb_connection_t   *c  /**< */,
                                uint32_t            screen  /**< */,
                                xcb_glx_fbconfig_t  fbconfig  /**< */,
                                xcb_glx_pbuffer_t   pbuffer  /**< */,
                                uint32_t            num_attribs  /**< */,
                                const uint32_t     *attribs  /**< */)
d2437 4
a2440 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CREATE_PBUFFER,
        /* isvoid */ 1
d2467 6
a2472 6
xcb_glx_create_pbuffer (xcb_connection_t   *c  /**< */,
                        uint32_t            screen  /**< */,
                        xcb_glx_fbconfig_t  fbconfig  /**< */,
                        xcb_glx_pbuffer_t   pbuffer  /**< */,
                        uint32_t            num_attribs  /**< */,
                        const uint32_t     *attribs  /**< */)
d2475 4
a2478 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CREATE_PBUFFER,
        /* isvoid */ 1
d2504 22
d2527 2
a2528 2
xcb_glx_destroy_pbuffer_checked (xcb_connection_t  *c  /**< */,
                                 xcb_glx_pbuffer_t  pbuffer  /**< */)
d2531 4
a2534 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DESTROY_PBUFFER,
        /* isvoid */ 1
d2553 2
a2554 2
xcb_glx_destroy_pbuffer (xcb_connection_t  *c  /**< */,
                         xcb_glx_pbuffer_t  pbuffer  /**< */)
d2557 4
a2560 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DESTROY_PBUFFER,
        /* isvoid */ 1
d2579 1
a2579 1
xcb_glx_get_drawable_attributes_sizeof (const void  *_buffer  /**< */)
d2610 2
a2611 2
xcb_glx_get_drawable_attributes (xcb_connection_t   *c  /**< */,
                                 xcb_glx_drawable_t  drawable  /**< */)
d2614 4
a2617 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_DRAWABLE_ATTRIBUTES,
        /* isvoid */ 0
d2636 2
a2637 2
xcb_glx_get_drawable_attributes_unchecked (xcb_connection_t   *c  /**< */,
                                           xcb_glx_drawable_t  drawable  /**< */)
d2640 4
a2643 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_DRAWABLE_ATTRIBUTES,
        /* isvoid */ 0
d2662 1
a2662 1
xcb_glx_get_drawable_attributes_attribs (const xcb_glx_get_drawable_attributes_reply_t *R  /**< */)
d2668 1
a2668 1
xcb_glx_get_drawable_attributes_attribs_length (const xcb_glx_get_drawable_attributes_reply_t *R  /**< */)
d2674 1
a2674 1
xcb_glx_get_drawable_attributes_attribs_end (const xcb_glx_get_drawable_attributes_reply_t *R  /**< */)
d2684 1
a2684 1
xcb_glx_get_drawable_attributes_reply (xcb_connection_t                          *c  /**< */,
d2686 1
a2686 1
                                       xcb_generic_error_t                      **e  /**< */)
d2692 1
a2692 1
xcb_glx_change_drawable_attributes_sizeof (const void  *_buffer  /**< */)
d2723 4
a2726 4
xcb_glx_change_drawable_attributes_checked (xcb_connection_t   *c  /**< */,
                                            xcb_glx_drawable_t  drawable  /**< */,
                                            uint32_t            num_attribs  /**< */,
                                            const uint32_t     *attribs  /**< */)
d2729 4
a2732 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CHANGE_DRAWABLE_ATTRIBUTES,
        /* isvoid */ 1
d2757 4
a2760 4
xcb_glx_change_drawable_attributes (xcb_connection_t   *c  /**< */,
                                    xcb_glx_drawable_t  drawable  /**< */,
                                    uint32_t            num_attribs  /**< */,
                                    const uint32_t     *attribs  /**< */)
d2763 4
a2766 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CHANGE_DRAWABLE_ATTRIBUTES,
        /* isvoid */ 1
d2790 22
d2813 1
a2813 1
xcb_glx_create_window_sizeof (const void  *_buffer  /**< */)
d2844 7
a2850 7
xcb_glx_create_window_checked (xcb_connection_t   *c  /**< */,
                               uint32_t            screen  /**< */,
                               xcb_glx_fbconfig_t  fbconfig  /**< */,
                               xcb_window_t        window  /**< */,
                               xcb_glx_window_t    glx_window  /**< */,
                               uint32_t            num_attribs  /**< */,
                               const uint32_t     *attribs  /**< */)
d2853 4
a2856 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CREATE_WINDOW,
        /* isvoid */ 1
d2884 7
a2890 7
xcb_glx_create_window (xcb_connection_t   *c  /**< */,
                       uint32_t            screen  /**< */,
                       xcb_glx_fbconfig_t  fbconfig  /**< */,
                       xcb_window_t        window  /**< */,
                       xcb_glx_window_t    glx_window  /**< */,
                       uint32_t            num_attribs  /**< */,
                       const uint32_t     *attribs  /**< */)
d2893 4
a2896 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CREATE_WINDOW,
        /* isvoid */ 1
d2923 22
d2946 2
a2947 2
xcb_glx_delete_window_checked (xcb_connection_t *c  /**< */,
                               xcb_glx_window_t  glxwindow  /**< */)
d2950 4
a2953 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DELETE_WINDOW,
        /* isvoid */ 1
d2972 2
a2973 2
xcb_glx_delete_window (xcb_connection_t *c  /**< */,
                       xcb_glx_window_t  glxwindow  /**< */)
d2976 4
a2979 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DELETE_WINDOW,
        /* isvoid */ 1
d2998 1
a2998 1
xcb_glx_set_client_info_arb_sizeof (const void  *_buffer  /**< */)
d3053 9
a3061 9
xcb_glx_set_client_info_arb_checked (xcb_connection_t *c  /**< */,
                                     uint32_t          major_version  /**< */,
                                     uint32_t          minor_version  /**< */,
                                     uint32_t          num_versions  /**< */,
                                     uint32_t          gl_str_len  /**< */,
                                     uint32_t          glx_str_len  /**< */,
                                     const uint32_t   *gl_versions  /**< */,
                                     const char       *gl_extension_string  /**< */,
                                     const char       *glx_extension_string  /**< */)
d3064 4
a3067 4
        /* count */ 8,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_SET_CLIENT_INFO_ARB,
        /* isvoid */ 1
d3105 9
a3113 9
xcb_glx_set_client_info_arb (xcb_connection_t *c  /**< */,
                             uint32_t          major_version  /**< */,
                             uint32_t          minor_version  /**< */,
                             uint32_t          num_versions  /**< */,
                             uint32_t          gl_str_len  /**< */,
                             uint32_t          glx_str_len  /**< */,
                             const uint32_t   *gl_versions  /**< */,
                             const char       *gl_extension_string  /**< */,
                             const char       *glx_extension_string  /**< */)
d3116 4
a3119 4
        /* count */ 8,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_SET_CLIENT_INFO_ARB,
        /* isvoid */ 1
d3156 53
d3210 18
a3227 1
xcb_glx_create_context_attribs_arb_sizeof (const void  *_buffer  /**< */)
d3258 8
a3265 8
xcb_glx_create_context_attribs_arb_checked (xcb_connection_t   *c  /**< */,
                                            xcb_glx_context_t   context  /**< */,
                                            xcb_glx_fbconfig_t  fbconfig  /**< */,
                                            uint32_t            screen  /**< */,
                                            xcb_glx_context_t   share_list  /**< */,
                                            uint8_t             is_direct  /**< */,
                                            uint32_t            num_attribs  /**< */,
                                            const uint32_t     *attribs  /**< */)
d3268 4
a3271 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CREATE_CONTEXT_ATTRIBS_ARB,
        /* isvoid */ 1
d3301 8
a3308 8
xcb_glx_create_context_attribs_arb (xcb_connection_t   *c  /**< */,
                                    xcb_glx_context_t   context  /**< */,
                                    xcb_glx_fbconfig_t  fbconfig  /**< */,
                                    uint32_t            screen  /**< */,
                                    xcb_glx_context_t   share_list  /**< */,
                                    uint8_t             is_direct  /**< */,
                                    uint32_t            num_attribs  /**< */,
                                    const uint32_t     *attribs  /**< */)
d3311 4
a3314 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_CREATE_CONTEXT_ATTRIBS_ARB,
        /* isvoid */ 1
d3343 6
d3350 17
a3366 1
xcb_glx_set_client_info_2arb_sizeof (const void  *_buffer  /**< */)
d3421 9
a3429 9
xcb_glx_set_client_info_2arb_checked (xcb_connection_t *c  /**< */,
                                      uint32_t          major_version  /**< */,
                                      uint32_t          minor_version  /**< */,
                                      uint32_t          num_versions  /**< */,
                                      uint32_t          gl_str_len  /**< */,
                                      uint32_t          glx_str_len  /**< */,
                                      const uint32_t   *gl_versions  /**< */,
                                      const char       *gl_extension_string  /**< */,
                                      const char       *glx_extension_string  /**< */)
d3432 4
a3435 4
        /* count */ 8,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_SET_CLIENT_INFO_2ARB,
        /* isvoid */ 1
d3473 9
a3481 9
xcb_glx_set_client_info_2arb (xcb_connection_t *c  /**< */,
                              uint32_t          major_version  /**< */,
                              uint32_t          minor_version  /**< */,
                              uint32_t          num_versions  /**< */,
                              uint32_t          gl_str_len  /**< */,
                              uint32_t          glx_str_len  /**< */,
                              const uint32_t   *gl_versions  /**< */,
                              const char       *gl_extension_string  /**< */,
                              const char       *glx_extension_string  /**< */)
d3484 4
a3487 4
        /* count */ 8,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_SET_CLIENT_INFO_2ARB,
        /* isvoid */ 1
d3524 70
d3595 4
a3598 4
xcb_glx_new_list_checked (xcb_connection_t      *c  /**< */,
                          xcb_glx_context_tag_t  context_tag  /**< */,
                          uint32_t               list  /**< */,
                          uint32_t               mode  /**< */)
d3601 4
a3604 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_NEW_LIST,
        /* isvoid */ 1
d3625 4
a3628 4
xcb_glx_new_list (xcb_connection_t      *c  /**< */,
                  xcb_glx_context_tag_t  context_tag  /**< */,
                  uint32_t               list  /**< */,
                  uint32_t               mode  /**< */)
d3631 4
a3634 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_NEW_LIST,
        /* isvoid */ 1
d3655 2
a3656 2
xcb_glx_end_list_checked (xcb_connection_t      *c  /**< */,
                          xcb_glx_context_tag_t  context_tag  /**< */)
d3659 4
a3662 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_END_LIST,
        /* isvoid */ 1
d3681 2
a3682 2
xcb_glx_end_list (xcb_connection_t      *c  /**< */,
                  xcb_glx_context_tag_t  context_tag  /**< */)
d3685 4
a3688 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_END_LIST,
        /* isvoid */ 1
d3707 4
a3710 4
xcb_glx_delete_lists_checked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               list  /**< */,
                              int32_t                range  /**< */)
d3713 4
a3716 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DELETE_LISTS,
        /* isvoid */ 1
d3737 4
a3740 4
xcb_glx_delete_lists (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      uint32_t               list  /**< */,
                      int32_t                range  /**< */)
d3743 4
a3746 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DELETE_LISTS,
        /* isvoid */ 1
d3767 3
a3769 3
xcb_glx_gen_lists (xcb_connection_t      *c  /**< */,
                   xcb_glx_context_tag_t  context_tag  /**< */,
                   int32_t                range  /**< */)
d3772 4
a3775 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GEN_LISTS,
        /* isvoid */ 0
d3795 3
a3797 3
xcb_glx_gen_lists_unchecked (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */,
                             int32_t                range  /**< */)
d3800 4
a3803 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GEN_LISTS,
        /* isvoid */ 0
d3823 1
a3823 1
xcb_glx_gen_lists_reply (xcb_connection_t            *c  /**< */,
d3825 1
a3825 1
                         xcb_generic_error_t        **e  /**< */)
d3831 4
a3834 4
xcb_glx_feedback_buffer_checked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 int32_t                size  /**< */,
                                 int32_t                type  /**< */)
d3837 4
a3840 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_FEEDBACK_BUFFER,
        /* isvoid */ 1
d3861 4
a3864 4
xcb_glx_feedback_buffer (xcb_connection_t      *c  /**< */,
                         xcb_glx_context_tag_t  context_tag  /**< */,
                         int32_t                size  /**< */,
                         int32_t                type  /**< */)
d3867 4
a3870 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_FEEDBACK_BUFFER,
        /* isvoid */ 1
d3891 3
a3893 3
xcb_glx_select_buffer_checked (xcb_connection_t      *c  /**< */,
                               xcb_glx_context_tag_t  context_tag  /**< */,
                               int32_t                size  /**< */)
d3896 4
a3899 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_SELECT_BUFFER,
        /* isvoid */ 1
d3919 3
a3921 3
xcb_glx_select_buffer (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       int32_t                size  /**< */)
d3924 4
a3927 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_SELECT_BUFFER,
        /* isvoid */ 1
d3947 1
a3947 1
xcb_glx_render_mode_sizeof (const void  *_buffer  /**< */)
d3978 3
a3980 3
xcb_glx_render_mode (xcb_connection_t      *c  /**< */,
                     xcb_glx_context_tag_t  context_tag  /**< */,
                     uint32_t               mode  /**< */)
d3983 4
a3986 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_RENDER_MODE,
        /* isvoid */ 0
d4006 3
a4008 3
xcb_glx_render_mode_unchecked (xcb_connection_t      *c  /**< */,
                               xcb_glx_context_tag_t  context_tag  /**< */,
                               uint32_t               mode  /**< */)
d4011 4
a4014 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_RENDER_MODE,
        /* isvoid */ 0
d4034 1
a4034 1
xcb_glx_render_mode_data (const xcb_glx_render_mode_reply_t *R  /**< */)
d4040 1
a4040 1
xcb_glx_render_mode_data_length (const xcb_glx_render_mode_reply_t *R  /**< */)
d4046 1
a4046 1
xcb_glx_render_mode_data_end (const xcb_glx_render_mode_reply_t *R  /**< */)
d4056 1
a4056 1
xcb_glx_render_mode_reply (xcb_connection_t              *c  /**< */,
d4058 1
a4058 1
                           xcb_generic_error_t          **e  /**< */)
d4064 2
a4065 2
xcb_glx_finish (xcb_connection_t      *c  /**< */,
                xcb_glx_context_tag_t  context_tag  /**< */)
d4068 4
a4071 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_FINISH,
        /* isvoid */ 0
d4090 2
a4091 2
xcb_glx_finish_unchecked (xcb_connection_t      *c  /**< */,
                          xcb_glx_context_tag_t  context_tag  /**< */)
d4094 4
a4097 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_FINISH,
        /* isvoid */ 0
d4116 1
a4116 1
xcb_glx_finish_reply (xcb_connection_t         *c  /**< */,
d4118 1
a4118 1
                      xcb_generic_error_t     **e  /**< */)
d4124 4
a4127 4
xcb_glx_pixel_storef_checked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               pname  /**< */,
                              xcb_glx_float32_t      datum  /**< */)
d4130 4
a4133 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_PIXEL_STOREF,
        /* isvoid */ 1
d4154 4
a4157 4
xcb_glx_pixel_storef (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      uint32_t               pname  /**< */,
                      xcb_glx_float32_t      datum  /**< */)
d4160 4
a4163 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_PIXEL_STOREF,
        /* isvoid */ 1
d4184 4
a4187 4
xcb_glx_pixel_storei_checked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               pname  /**< */,
                              int32_t                datum  /**< */)
d4190 4
a4193 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_PIXEL_STOREI,
        /* isvoid */ 1
d4214 4
a4217 4
xcb_glx_pixel_storei (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      uint32_t               pname  /**< */,
                      int32_t                datum  /**< */)
d4220 4
a4223 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_PIXEL_STOREI,
        /* isvoid */ 1
d4244 1
a4244 1
xcb_glx_read_pixels_sizeof (const void  *_buffer  /**< */)
d4275 16
a4290 16
xcb_glx_read_pixels (xcb_connection_t      *c  /**< */,
                     xcb_glx_context_tag_t  context_tag  /**< */,
                     int32_t                x  /**< */,
                     int32_t                y  /**< */,
                     int32_t                width  /**< */,
                     int32_t                height  /**< */,
                     uint32_t               format  /**< */,
                     uint32_t               type  /**< */,
                     uint8_t                swap_bytes  /**< */,
                     uint8_t                lsb_first  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_READ_PIXELS,
        /* isvoid */ 0
d4317 16
a4332 16
xcb_glx_read_pixels_unchecked (xcb_connection_t      *c  /**< */,
                               xcb_glx_context_tag_t  context_tag  /**< */,
                               int32_t                x  /**< */,
                               int32_t                y  /**< */,
                               int32_t                width  /**< */,
                               int32_t                height  /**< */,
                               uint32_t               format  /**< */,
                               uint32_t               type  /**< */,
                               uint8_t                swap_bytes  /**< */,
                               uint8_t                lsb_first  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_READ_PIXELS,
        /* isvoid */ 0
d4359 1
a4359 1
xcb_glx_read_pixels_data (const xcb_glx_read_pixels_reply_t *R  /**< */)
d4365 1
a4365 1
xcb_glx_read_pixels_data_length (const xcb_glx_read_pixels_reply_t *R  /**< */)
d4371 1
a4371 1
xcb_glx_read_pixels_data_end (const xcb_glx_read_pixels_reply_t *R  /**< */)
d4381 1
a4381 1
xcb_glx_read_pixels_reply (xcb_connection_t              *c  /**< */,
d4383 1
a4383 1
                           xcb_generic_error_t          **e  /**< */)
d4389 1
a4389 1
xcb_glx_get_booleanv_sizeof (const void  *_buffer  /**< */)
d4420 3
a4422 3
xcb_glx_get_booleanv (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      int32_t                pname  /**< */)
d4425 4
a4428 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_BOOLEANV,
        /* isvoid */ 0
d4448 3
a4450 3
xcb_glx_get_booleanv_unchecked (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                int32_t                pname  /**< */)
d4453 4
a4456 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_BOOLEANV,
        /* isvoid */ 0
d4476 1
a4476 1
xcb_glx_get_booleanv_data (const xcb_glx_get_booleanv_reply_t *R  /**< */)
d4482 1
a4482 1
xcb_glx_get_booleanv_data_length (const xcb_glx_get_booleanv_reply_t *R  /**< */)
d4488 1
a4488 1
xcb_glx_get_booleanv_data_end (const xcb_glx_get_booleanv_reply_t *R  /**< */)
d4498 1
a4498 1
xcb_glx_get_booleanv_reply (xcb_connection_t               *c  /**< */,
d4500 1
a4500 1
                            xcb_generic_error_t           **e  /**< */)
d4506 1
a4506 1
xcb_glx_get_clip_plane_sizeof (const void  *_buffer  /**< */)
d4537 3
a4539 3
xcb_glx_get_clip_plane (xcb_connection_t      *c  /**< */,
                        xcb_glx_context_tag_t  context_tag  /**< */,
                        int32_t                plane  /**< */)
d4542 4
a4545 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_CLIP_PLANE,
        /* isvoid */ 0
d4565 3
a4567 3
xcb_glx_get_clip_plane_unchecked (xcb_connection_t      *c  /**< */,
                                  xcb_glx_context_tag_t  context_tag  /**< */,
                                  int32_t                plane  /**< */)
d4570 4
a4573 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_CLIP_PLANE,
        /* isvoid */ 0
d4593 1
a4593 1
xcb_glx_get_clip_plane_data (const xcb_glx_get_clip_plane_reply_t *R  /**< */)
d4599 1
a4599 1
xcb_glx_get_clip_plane_data_length (const xcb_glx_get_clip_plane_reply_t *R  /**< */)
d4605 1
a4605 1
xcb_glx_get_clip_plane_data_end (const xcb_glx_get_clip_plane_reply_t *R  /**< */)
d4615 1
a4615 1
xcb_glx_get_clip_plane_reply (xcb_connection_t                 *c  /**< */,
d4617 1
a4617 1
                              xcb_generic_error_t             **e  /**< */)
d4623 1
a4623 1
xcb_glx_get_doublev_sizeof (const void  *_buffer  /**< */)
d4654 3
a4656 3
xcb_glx_get_doublev (xcb_connection_t      *c  /**< */,
                     xcb_glx_context_tag_t  context_tag  /**< */,
                     uint32_t               pname  /**< */)
d4659 4
a4662 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_DOUBLEV,
        /* isvoid */ 0
d4682 3
a4684 3
xcb_glx_get_doublev_unchecked (xcb_connection_t      *c  /**< */,
                               xcb_glx_context_tag_t  context_tag  /**< */,
                               uint32_t               pname  /**< */)
d4687 4
a4690 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_DOUBLEV,
        /* isvoid */ 0
d4710 1
a4710 1
xcb_glx_get_doublev_data (const xcb_glx_get_doublev_reply_t *R  /**< */)
d4716 1
a4716 1
xcb_glx_get_doublev_data_length (const xcb_glx_get_doublev_reply_t *R  /**< */)
d4722 1
a4722 1
xcb_glx_get_doublev_data_end (const xcb_glx_get_doublev_reply_t *R  /**< */)
d4732 1
a4732 1
xcb_glx_get_doublev_reply (xcb_connection_t              *c  /**< */,
d4734 1
a4734 1
                           xcb_generic_error_t          **e  /**< */)
d4740 2
a4741 2
xcb_glx_get_error (xcb_connection_t      *c  /**< */,
                   xcb_glx_context_tag_t  context_tag  /**< */)
d4744 4
a4747 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_ERROR,
        /* isvoid */ 0
d4766 2
a4767 2
xcb_glx_get_error_unchecked (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */)
d4770 4
a4773 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_ERROR,
        /* isvoid */ 0
d4792 1
a4792 1
xcb_glx_get_error_reply (xcb_connection_t            *c  /**< */,
d4794 1
a4794 1
                         xcb_generic_error_t        **e  /**< */)
d4800 1
a4800 1
xcb_glx_get_floatv_sizeof (const void  *_buffer  /**< */)
d4831 3
a4833 3
xcb_glx_get_floatv (xcb_connection_t      *c  /**< */,
                    xcb_glx_context_tag_t  context_tag  /**< */,
                    uint32_t               pname  /**< */)
d4836 4
a4839 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_FLOATV,
        /* isvoid */ 0
d4859 3
a4861 3
xcb_glx_get_floatv_unchecked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               pname  /**< */)
d4864 4
a4867 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_FLOATV,
        /* isvoid */ 0
d4887 1
a4887 1
xcb_glx_get_floatv_data (const xcb_glx_get_floatv_reply_t *R  /**< */)
d4893 1
a4893 1
xcb_glx_get_floatv_data_length (const xcb_glx_get_floatv_reply_t *R  /**< */)
d4899 1
a4899 1
xcb_glx_get_floatv_data_end (const xcb_glx_get_floatv_reply_t *R  /**< */)
d4909 1
a4909 1
xcb_glx_get_floatv_reply (xcb_connection_t             *c  /**< */,
d4911 1
a4911 1
                          xcb_generic_error_t         **e  /**< */)
d4917 1
a4917 1
xcb_glx_get_integerv_sizeof (const void  *_buffer  /**< */)
d4948 3
a4950 3
xcb_glx_get_integerv (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      uint32_t               pname  /**< */)
d4953 4
a4956 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_INTEGERV,
        /* isvoid */ 0
d4976 3
a4978 3
xcb_glx_get_integerv_unchecked (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                uint32_t               pname  /**< */)
d4981 4
a4984 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_INTEGERV,
        /* isvoid */ 0
d5004 1
a5004 1
xcb_glx_get_integerv_data (const xcb_glx_get_integerv_reply_t *R  /**< */)
d5010 1
a5010 1
xcb_glx_get_integerv_data_length (const xcb_glx_get_integerv_reply_t *R  /**< */)
d5016 1
a5016 1
xcb_glx_get_integerv_data_end (const xcb_glx_get_integerv_reply_t *R  /**< */)
d5026 1
a5026 1
xcb_glx_get_integerv_reply (xcb_connection_t               *c  /**< */,
d5028 1
a5028 1
                            xcb_generic_error_t           **e  /**< */)
d5034 1
a5034 1
xcb_glx_get_lightfv_sizeof (const void  *_buffer  /**< */)
d5065 4
a5068 4
xcb_glx_get_lightfv (xcb_connection_t      *c  /**< */,
                     xcb_glx_context_tag_t  context_tag  /**< */,
                     uint32_t               light  /**< */,
                     uint32_t               pname  /**< */)
d5071 4
a5074 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_LIGHTFV,
        /* isvoid */ 0
d5095 4
a5098 4
xcb_glx_get_lightfv_unchecked (xcb_connection_t      *c  /**< */,
                               xcb_glx_context_tag_t  context_tag  /**< */,
                               uint32_t               light  /**< */,
                               uint32_t               pname  /**< */)
d5101 4
a5104 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_LIGHTFV,
        /* isvoid */ 0
d5125 1
a5125 1
xcb_glx_get_lightfv_data (const xcb_glx_get_lightfv_reply_t *R  /**< */)
d5131 1
a5131 1
xcb_glx_get_lightfv_data_length (const xcb_glx_get_lightfv_reply_t *R  /**< */)
d5137 1
a5137 1
xcb_glx_get_lightfv_data_end (const xcb_glx_get_lightfv_reply_t *R  /**< */)
d5147 1
a5147 1
xcb_glx_get_lightfv_reply (xcb_connection_t              *c  /**< */,
d5149 1
a5149 1
                           xcb_generic_error_t          **e  /**< */)
d5155 1
a5155 1
xcb_glx_get_lightiv_sizeof (const void  *_buffer  /**< */)
d5186 4
a5189 4
xcb_glx_get_lightiv (xcb_connection_t      *c  /**< */,
                     xcb_glx_context_tag_t  context_tag  /**< */,
                     uint32_t               light  /**< */,
                     uint32_t               pname  /**< */)
d5192 4
a5195 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_LIGHTIV,
        /* isvoid */ 0
d5216 4
a5219 4
xcb_glx_get_lightiv_unchecked (xcb_connection_t      *c  /**< */,
                               xcb_glx_context_tag_t  context_tag  /**< */,
                               uint32_t               light  /**< */,
                               uint32_t               pname  /**< */)
d5222 4
a5225 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_LIGHTIV,
        /* isvoid */ 0
d5246 1
a5246 1
xcb_glx_get_lightiv_data (const xcb_glx_get_lightiv_reply_t *R  /**< */)
d5252 1
a5252 1
xcb_glx_get_lightiv_data_length (const xcb_glx_get_lightiv_reply_t *R  /**< */)
d5258 1
a5258 1
xcb_glx_get_lightiv_data_end (const xcb_glx_get_lightiv_reply_t *R  /**< */)
d5268 1
a5268 1
xcb_glx_get_lightiv_reply (xcb_connection_t              *c  /**< */,
d5270 1
a5270 1
                           xcb_generic_error_t          **e  /**< */)
d5276 1
a5276 1
xcb_glx_get_mapdv_sizeof (const void  *_buffer  /**< */)
d5307 4
a5310 4
xcb_glx_get_mapdv (xcb_connection_t      *c  /**< */,
                   xcb_glx_context_tag_t  context_tag  /**< */,
                   uint32_t               target  /**< */,
                   uint32_t               query  /**< */)
d5313 4
a5316 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MAPDV,
        /* isvoid */ 0
d5337 4
a5340 4
xcb_glx_get_mapdv_unchecked (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */,
                             uint32_t               target  /**< */,
                             uint32_t               query  /**< */)
d5343 4
a5346 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MAPDV,
        /* isvoid */ 0
d5367 1
a5367 1
xcb_glx_get_mapdv_data (const xcb_glx_get_mapdv_reply_t *R  /**< */)
d5373 1
a5373 1
xcb_glx_get_mapdv_data_length (const xcb_glx_get_mapdv_reply_t *R  /**< */)
d5379 1
a5379 1
xcb_glx_get_mapdv_data_end (const xcb_glx_get_mapdv_reply_t *R  /**< */)
d5389 1
a5389 1
xcb_glx_get_mapdv_reply (xcb_connection_t            *c  /**< */,
d5391 1
a5391 1
                         xcb_generic_error_t        **e  /**< */)
d5397 1
a5397 1
xcb_glx_get_mapfv_sizeof (const void  *_buffer  /**< */)
d5428 4
a5431 4
xcb_glx_get_mapfv (xcb_connection_t      *c  /**< */,
                   xcb_glx_context_tag_t  context_tag  /**< */,
                   uint32_t               target  /**< */,
                   uint32_t               query  /**< */)
d5434 4
a5437 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MAPFV,
        /* isvoid */ 0
d5458 4
a5461 4
xcb_glx_get_mapfv_unchecked (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */,
                             uint32_t               target  /**< */,
                             uint32_t               query  /**< */)
d5464 4
a5467 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MAPFV,
        /* isvoid */ 0
d5488 1
a5488 1
xcb_glx_get_mapfv_data (const xcb_glx_get_mapfv_reply_t *R  /**< */)
d5494 1
a5494 1
xcb_glx_get_mapfv_data_length (const xcb_glx_get_mapfv_reply_t *R  /**< */)
d5500 1
a5500 1
xcb_glx_get_mapfv_data_end (const xcb_glx_get_mapfv_reply_t *R  /**< */)
d5510 1
a5510 1
xcb_glx_get_mapfv_reply (xcb_connection_t            *c  /**< */,
d5512 1
a5512 1
                         xcb_generic_error_t        **e  /**< */)
d5518 1
a5518 1
xcb_glx_get_mapiv_sizeof (const void  *_buffer  /**< */)
d5549 4
a5552 4
xcb_glx_get_mapiv (xcb_connection_t      *c  /**< */,
                   xcb_glx_context_tag_t  context_tag  /**< */,
                   uint32_t               target  /**< */,
                   uint32_t               query  /**< */)
d5555 4
a5558 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MAPIV,
        /* isvoid */ 0
d5579 4
a5582 4
xcb_glx_get_mapiv_unchecked (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */,
                             uint32_t               target  /**< */,
                             uint32_t               query  /**< */)
d5585 4
a5588 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MAPIV,
        /* isvoid */ 0
d5609 1
a5609 1
xcb_glx_get_mapiv_data (const xcb_glx_get_mapiv_reply_t *R  /**< */)
d5615 1
a5615 1
xcb_glx_get_mapiv_data_length (const xcb_glx_get_mapiv_reply_t *R  /**< */)
d5621 1
a5621 1
xcb_glx_get_mapiv_data_end (const xcb_glx_get_mapiv_reply_t *R  /**< */)
d5631 1
a5631 1
xcb_glx_get_mapiv_reply (xcb_connection_t            *c  /**< */,
d5633 1
a5633 1
                         xcb_generic_error_t        **e  /**< */)
d5639 1
a5639 1
xcb_glx_get_materialfv_sizeof (const void  *_buffer  /**< */)
d5670 4
a5673 4
xcb_glx_get_materialfv (xcb_connection_t      *c  /**< */,
                        xcb_glx_context_tag_t  context_tag  /**< */,
                        uint32_t               face  /**< */,
                        uint32_t               pname  /**< */)
d5676 4
a5679 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MATERIALFV,
        /* isvoid */ 0
d5700 4
a5703 4
xcb_glx_get_materialfv_unchecked (xcb_connection_t      *c  /**< */,
                                  xcb_glx_context_tag_t  context_tag  /**< */,
                                  uint32_t               face  /**< */,
                                  uint32_t               pname  /**< */)
d5706 4
a5709 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MATERIALFV,
        /* isvoid */ 0
d5730 1
a5730 1
xcb_glx_get_materialfv_data (const xcb_glx_get_materialfv_reply_t *R  /**< */)
d5736 1
a5736 1
xcb_glx_get_materialfv_data_length (const xcb_glx_get_materialfv_reply_t *R  /**< */)
d5742 1
a5742 1
xcb_glx_get_materialfv_data_end (const xcb_glx_get_materialfv_reply_t *R  /**< */)
d5752 1
a5752 1
xcb_glx_get_materialfv_reply (xcb_connection_t                 *c  /**< */,
d5754 1
a5754 1
                              xcb_generic_error_t             **e  /**< */)
d5760 1
a5760 1
xcb_glx_get_materialiv_sizeof (const void  *_buffer  /**< */)
d5791 4
a5794 4
xcb_glx_get_materialiv (xcb_connection_t      *c  /**< */,
                        xcb_glx_context_tag_t  context_tag  /**< */,
                        uint32_t               face  /**< */,
                        uint32_t               pname  /**< */)
d5797 4
a5800 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MATERIALIV,
        /* isvoid */ 0
d5821 4
a5824 4
xcb_glx_get_materialiv_unchecked (xcb_connection_t      *c  /**< */,
                                  xcb_glx_context_tag_t  context_tag  /**< */,
                                  uint32_t               face  /**< */,
                                  uint32_t               pname  /**< */)
d5827 4
a5830 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MATERIALIV,
        /* isvoid */ 0
d5851 1
a5851 1
xcb_glx_get_materialiv_data (const xcb_glx_get_materialiv_reply_t *R  /**< */)
d5857 1
a5857 1
xcb_glx_get_materialiv_data_length (const xcb_glx_get_materialiv_reply_t *R  /**< */)
d5863 1
a5863 1
xcb_glx_get_materialiv_data_end (const xcb_glx_get_materialiv_reply_t *R  /**< */)
d5873 1
a5873 1
xcb_glx_get_materialiv_reply (xcb_connection_t                 *c  /**< */,
d5875 1
a5875 1
                              xcb_generic_error_t             **e  /**< */)
d5881 1
a5881 1
xcb_glx_get_pixel_mapfv_sizeof (const void  *_buffer  /**< */)
d5912 3
a5914 3
xcb_glx_get_pixel_mapfv (xcb_connection_t      *c  /**< */,
                         xcb_glx_context_tag_t  context_tag  /**< */,
                         uint32_t               map  /**< */)
d5917 4
a5920 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_PIXEL_MAPFV,
        /* isvoid */ 0
d5940 3
a5942 3
xcb_glx_get_pixel_mapfv_unchecked (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               map  /**< */)
d5945 4
a5948 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_PIXEL_MAPFV,
        /* isvoid */ 0
d5968 1
a5968 1
xcb_glx_get_pixel_mapfv_data (const xcb_glx_get_pixel_mapfv_reply_t *R  /**< */)
d5974 1
a5974 1
xcb_glx_get_pixel_mapfv_data_length (const xcb_glx_get_pixel_mapfv_reply_t *R  /**< */)
d5980 1
a5980 1
xcb_glx_get_pixel_mapfv_data_end (const xcb_glx_get_pixel_mapfv_reply_t *R  /**< */)
d5990 1
a5990 1
xcb_glx_get_pixel_mapfv_reply (xcb_connection_t                  *c  /**< */,
d5992 1
a5992 1
                               xcb_generic_error_t              **e  /**< */)
d5998 1
a5998 1
xcb_glx_get_pixel_mapuiv_sizeof (const void  *_buffer  /**< */)
d6029 3
a6031 3
xcb_glx_get_pixel_mapuiv (xcb_connection_t      *c  /**< */,
                          xcb_glx_context_tag_t  context_tag  /**< */,
                          uint32_t               map  /**< */)
d6034 4
a6037 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_PIXEL_MAPUIV,
        /* isvoid */ 0
d6057 3
a6059 3
xcb_glx_get_pixel_mapuiv_unchecked (xcb_connection_t      *c  /**< */,
                                    xcb_glx_context_tag_t  context_tag  /**< */,
                                    uint32_t               map  /**< */)
d6062 4
a6065 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_PIXEL_MAPUIV,
        /* isvoid */ 0
d6085 1
a6085 1
xcb_glx_get_pixel_mapuiv_data (const xcb_glx_get_pixel_mapuiv_reply_t *R  /**< */)
d6091 1
a6091 1
xcb_glx_get_pixel_mapuiv_data_length (const xcb_glx_get_pixel_mapuiv_reply_t *R  /**< */)
d6097 1
a6097 1
xcb_glx_get_pixel_mapuiv_data_end (const xcb_glx_get_pixel_mapuiv_reply_t *R  /**< */)
d6107 1
a6107 1
xcb_glx_get_pixel_mapuiv_reply (xcb_connection_t                   *c  /**< */,
d6109 1
a6109 1
                                xcb_generic_error_t               **e  /**< */)
d6115 1
a6115 1
xcb_glx_get_pixel_mapusv_sizeof (const void  *_buffer  /**< */)
d6146 3
a6148 3
xcb_glx_get_pixel_mapusv (xcb_connection_t      *c  /**< */,
                          xcb_glx_context_tag_t  context_tag  /**< */,
                          uint32_t               map  /**< */)
d6151 4
a6154 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_PIXEL_MAPUSV,
        /* isvoid */ 0
d6174 3
a6176 3
xcb_glx_get_pixel_mapusv_unchecked (xcb_connection_t      *c  /**< */,
                                    xcb_glx_context_tag_t  context_tag  /**< */,
                                    uint32_t               map  /**< */)
d6179 4
a6182 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_PIXEL_MAPUSV,
        /* isvoid */ 0
d6202 1
a6202 1
xcb_glx_get_pixel_mapusv_data (const xcb_glx_get_pixel_mapusv_reply_t *R  /**< */)
d6208 1
a6208 1
xcb_glx_get_pixel_mapusv_data_length (const xcb_glx_get_pixel_mapusv_reply_t *R  /**< */)
d6214 1
a6214 1
xcb_glx_get_pixel_mapusv_data_end (const xcb_glx_get_pixel_mapusv_reply_t *R  /**< */)
d6224 1
a6224 1
xcb_glx_get_pixel_mapusv_reply (xcb_connection_t                   *c  /**< */,
d6226 1
a6226 1
                                xcb_generic_error_t               **e  /**< */)
d6232 1
a6232 1
xcb_glx_get_polygon_stipple_sizeof (const void  *_buffer  /**< */)
d6263 3
a6265 3
xcb_glx_get_polygon_stipple (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */,
                             uint8_t                lsb_first  /**< */)
d6268 4
a6271 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_POLYGON_STIPPLE,
        /* isvoid */ 0
d6291 3
a6293 3
xcb_glx_get_polygon_stipple_unchecked (xcb_connection_t      *c  /**< */,
                                       xcb_glx_context_tag_t  context_tag  /**< */,
                                       uint8_t                lsb_first  /**< */)
d6296 4
a6299 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_POLYGON_STIPPLE,
        /* isvoid */ 0
d6319 1
a6319 1
xcb_glx_get_polygon_stipple_data (const xcb_glx_get_polygon_stipple_reply_t *R  /**< */)
d6325 1
a6325 1
xcb_glx_get_polygon_stipple_data_length (const xcb_glx_get_polygon_stipple_reply_t *R  /**< */)
d6331 1
a6331 1
xcb_glx_get_polygon_stipple_data_end (const xcb_glx_get_polygon_stipple_reply_t *R  /**< */)
d6341 1
a6341 1
xcb_glx_get_polygon_stipple_reply (xcb_connection_t                      *c  /**< */,
d6343 1
a6343 1
                                   xcb_generic_error_t                  **e  /**< */)
d6349 1
a6349 1
xcb_glx_get_string_sizeof (const void  *_buffer  /**< */)
d6380 3
a6382 3
xcb_glx_get_string (xcb_connection_t      *c  /**< */,
                    xcb_glx_context_tag_t  context_tag  /**< */,
                    uint32_t               name  /**< */)
d6385 4
a6388 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_STRING,
        /* isvoid */ 0
d6408 3
a6410 3
xcb_glx_get_string_unchecked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               name  /**< */)
d6413 4
a6416 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_STRING,
        /* isvoid */ 0
d6436 1
a6436 1
xcb_glx_get_string_string (const xcb_glx_get_string_reply_t *R  /**< */)
d6442 1
a6442 1
xcb_glx_get_string_string_length (const xcb_glx_get_string_reply_t *R  /**< */)
d6448 1
a6448 1
xcb_glx_get_string_string_end (const xcb_glx_get_string_reply_t *R  /**< */)
d6458 1
a6458 1
xcb_glx_get_string_reply (xcb_connection_t             *c  /**< */,
d6460 1
a6460 1
                          xcb_generic_error_t         **e  /**< */)
d6466 1
a6466 1
xcb_glx_get_tex_envfv_sizeof (const void  *_buffer  /**< */)
d6497 4
a6500 4
xcb_glx_get_tex_envfv (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       uint32_t               target  /**< */,
                       uint32_t               pname  /**< */)
d6503 4
a6506 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_ENVFV,
        /* isvoid */ 0
d6527 4
a6530 4
xcb_glx_get_tex_envfv_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               target  /**< */,
                                 uint32_t               pname  /**< */)
d6533 4
a6536 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_ENVFV,
        /* isvoid */ 0
d6557 1
a6557 1
xcb_glx_get_tex_envfv_data (const xcb_glx_get_tex_envfv_reply_t *R  /**< */)
d6563 1
a6563 1
xcb_glx_get_tex_envfv_data_length (const xcb_glx_get_tex_envfv_reply_t *R  /**< */)
d6569 1
a6569 1
xcb_glx_get_tex_envfv_data_end (const xcb_glx_get_tex_envfv_reply_t *R  /**< */)
d6579 1
a6579 1
xcb_glx_get_tex_envfv_reply (xcb_connection_t                *c  /**< */,
d6581 1
a6581 1
                             xcb_generic_error_t            **e  /**< */)
d6587 1
a6587 1
xcb_glx_get_tex_enviv_sizeof (const void  *_buffer  /**< */)
d6618 4
a6621 4
xcb_glx_get_tex_enviv (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       uint32_t               target  /**< */,
                       uint32_t               pname  /**< */)
d6624 4
a6627 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_ENVIV,
        /* isvoid */ 0
d6648 4
a6651 4
xcb_glx_get_tex_enviv_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               target  /**< */,
                                 uint32_t               pname  /**< */)
d6654 4
a6657 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_ENVIV,
        /* isvoid */ 0
d6678 1
a6678 1
xcb_glx_get_tex_enviv_data (const xcb_glx_get_tex_enviv_reply_t *R  /**< */)
d6684 1
a6684 1
xcb_glx_get_tex_enviv_data_length (const xcb_glx_get_tex_enviv_reply_t *R  /**< */)
d6690 1
a6690 1
xcb_glx_get_tex_enviv_data_end (const xcb_glx_get_tex_enviv_reply_t *R  /**< */)
d6700 1
a6700 1
xcb_glx_get_tex_enviv_reply (xcb_connection_t                *c  /**< */,
d6702 1
a6702 1
                             xcb_generic_error_t            **e  /**< */)
d6708 1
a6708 1
xcb_glx_get_tex_gendv_sizeof (const void  *_buffer  /**< */)
d6739 4
a6742 4
xcb_glx_get_tex_gendv (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       uint32_t               coord  /**< */,
                       uint32_t               pname  /**< */)
d6745 4
a6748 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_GENDV,
        /* isvoid */ 0
d6769 4
a6772 4
xcb_glx_get_tex_gendv_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               coord  /**< */,
                                 uint32_t               pname  /**< */)
d6775 4
a6778 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_GENDV,
        /* isvoid */ 0
d6799 1
a6799 1
xcb_glx_get_tex_gendv_data (const xcb_glx_get_tex_gendv_reply_t *R  /**< */)
d6805 1
a6805 1
xcb_glx_get_tex_gendv_data_length (const xcb_glx_get_tex_gendv_reply_t *R  /**< */)
d6811 1
a6811 1
xcb_glx_get_tex_gendv_data_end (const xcb_glx_get_tex_gendv_reply_t *R  /**< */)
d6821 1
a6821 1
xcb_glx_get_tex_gendv_reply (xcb_connection_t                *c  /**< */,
d6823 1
a6823 1
                             xcb_generic_error_t            **e  /**< */)
d6829 1
a6829 1
xcb_glx_get_tex_genfv_sizeof (const void  *_buffer  /**< */)
d6860 4
a6863 4
xcb_glx_get_tex_genfv (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       uint32_t               coord  /**< */,
                       uint32_t               pname  /**< */)
d6866 4
a6869 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_GENFV,
        /* isvoid */ 0
d6890 4
a6893 4
xcb_glx_get_tex_genfv_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               coord  /**< */,
                                 uint32_t               pname  /**< */)
d6896 4
a6899 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_GENFV,
        /* isvoid */ 0
d6920 1
a6920 1
xcb_glx_get_tex_genfv_data (const xcb_glx_get_tex_genfv_reply_t *R  /**< */)
d6926 1
a6926 1
xcb_glx_get_tex_genfv_data_length (const xcb_glx_get_tex_genfv_reply_t *R  /**< */)
d6932 1
a6932 1
xcb_glx_get_tex_genfv_data_end (const xcb_glx_get_tex_genfv_reply_t *R  /**< */)
d6942 1
a6942 1
xcb_glx_get_tex_genfv_reply (xcb_connection_t                *c  /**< */,
d6944 1
a6944 1
                             xcb_generic_error_t            **e  /**< */)
d6950 1
a6950 1
xcb_glx_get_tex_geniv_sizeof (const void  *_buffer  /**< */)
d6981 4
a6984 4
xcb_glx_get_tex_geniv (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       uint32_t               coord  /**< */,
                       uint32_t               pname  /**< */)
d6987 4
a6990 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_GENIV,
        /* isvoid */ 0
d7011 4
a7014 4
xcb_glx_get_tex_geniv_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               coord  /**< */,
                                 uint32_t               pname  /**< */)
d7017 4
a7020 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_GENIV,
        /* isvoid */ 0
d7041 1
a7041 1
xcb_glx_get_tex_geniv_data (const xcb_glx_get_tex_geniv_reply_t *R  /**< */)
d7047 1
a7047 1
xcb_glx_get_tex_geniv_data_length (const xcb_glx_get_tex_geniv_reply_t *R  /**< */)
d7053 1
a7053 1
xcb_glx_get_tex_geniv_data_end (const xcb_glx_get_tex_geniv_reply_t *R  /**< */)
d7063 1
a7063 1
xcb_glx_get_tex_geniv_reply (xcb_connection_t                *c  /**< */,
d7065 1
a7065 1
                             xcb_generic_error_t            **e  /**< */)
d7071 1
a7071 1
xcb_glx_get_tex_image_sizeof (const void  *_buffer  /**< */)
d7102 7
a7108 7
xcb_glx_get_tex_image (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       uint32_t               target  /**< */,
                       int32_t                level  /**< */,
                       uint32_t               format  /**< */,
                       uint32_t               type  /**< */,
                       uint8_t                swap_bytes  /**< */)
d7111 4
a7114 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_IMAGE,
        /* isvoid */ 0
d7138 7
a7144 7
xcb_glx_get_tex_image_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               target  /**< */,
                                 int32_t                level  /**< */,
                                 uint32_t               format  /**< */,
                                 uint32_t               type  /**< */,
                                 uint8_t                swap_bytes  /**< */)
d7147 4
a7150 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_IMAGE,
        /* isvoid */ 0
d7174 1
a7174 1
xcb_glx_get_tex_image_data (const xcb_glx_get_tex_image_reply_t *R  /**< */)
d7180 1
a7180 1
xcb_glx_get_tex_image_data_length (const xcb_glx_get_tex_image_reply_t *R  /**< */)
d7186 1
a7186 1
xcb_glx_get_tex_image_data_end (const xcb_glx_get_tex_image_reply_t *R  /**< */)
d7196 1
a7196 1
xcb_glx_get_tex_image_reply (xcb_connection_t                *c  /**< */,
d7198 1
a7198 1
                             xcb_generic_error_t            **e  /**< */)
d7204 1
a7204 1
xcb_glx_get_tex_parameterfv_sizeof (const void  *_buffer  /**< */)
d7235 4
a7238 4
xcb_glx_get_tex_parameterfv (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */,
                             uint32_t               target  /**< */,
                             uint32_t               pname  /**< */)
d7241 4
a7244 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_PARAMETERFV,
        /* isvoid */ 0
d7265 4
a7268 4
xcb_glx_get_tex_parameterfv_unchecked (xcb_connection_t      *c  /**< */,
                                       xcb_glx_context_tag_t  context_tag  /**< */,
                                       uint32_t               target  /**< */,
                                       uint32_t               pname  /**< */)
d7271 4
a7274 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_PARAMETERFV,
        /* isvoid */ 0
d7295 1
a7295 1
xcb_glx_get_tex_parameterfv_data (const xcb_glx_get_tex_parameterfv_reply_t *R  /**< */)
d7301 1
a7301 1
xcb_glx_get_tex_parameterfv_data_length (const xcb_glx_get_tex_parameterfv_reply_t *R  /**< */)
d7307 1
a7307 1
xcb_glx_get_tex_parameterfv_data_end (const xcb_glx_get_tex_parameterfv_reply_t *R  /**< */)
d7317 1
a7317 1
xcb_glx_get_tex_parameterfv_reply (xcb_connection_t                      *c  /**< */,
d7319 1
a7319 1
                                   xcb_generic_error_t                  **e  /**< */)
d7325 1
a7325 1
xcb_glx_get_tex_parameteriv_sizeof (const void  *_buffer  /**< */)
d7356 4
a7359 4
xcb_glx_get_tex_parameteriv (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */,
                             uint32_t               target  /**< */,
                             uint32_t               pname  /**< */)
d7362 4
a7365 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_PARAMETERIV,
        /* isvoid */ 0
d7386 4
a7389 4
xcb_glx_get_tex_parameteriv_unchecked (xcb_connection_t      *c  /**< */,
                                       xcb_glx_context_tag_t  context_tag  /**< */,
                                       uint32_t               target  /**< */,
                                       uint32_t               pname  /**< */)
d7392 4
a7395 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_PARAMETERIV,
        /* isvoid */ 0
d7416 1
a7416 1
xcb_glx_get_tex_parameteriv_data (const xcb_glx_get_tex_parameteriv_reply_t *R  /**< */)
d7422 1
a7422 1
xcb_glx_get_tex_parameteriv_data_length (const xcb_glx_get_tex_parameteriv_reply_t *R  /**< */)
d7428 1
a7428 1
xcb_glx_get_tex_parameteriv_data_end (const xcb_glx_get_tex_parameteriv_reply_t *R  /**< */)
d7438 1
a7438 1
xcb_glx_get_tex_parameteriv_reply (xcb_connection_t                      *c  /**< */,
d7440 1
a7440 1
                                   xcb_generic_error_t                  **e  /**< */)
d7446 1
a7446 1
xcb_glx_get_tex_level_parameterfv_sizeof (const void  *_buffer  /**< */)
d7477 5
a7481 5
xcb_glx_get_tex_level_parameterfv (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               target  /**< */,
                                   int32_t                level  /**< */,
                                   uint32_t               pname  /**< */)
d7484 4
a7487 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_LEVEL_PARAMETERFV,
        /* isvoid */ 0
d7509 5
a7513 5
xcb_glx_get_tex_level_parameterfv_unchecked (xcb_connection_t      *c  /**< */,
                                             xcb_glx_context_tag_t  context_tag  /**< */,
                                             uint32_t               target  /**< */,
                                             int32_t                level  /**< */,
                                             uint32_t               pname  /**< */)
d7516 4
a7519 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_LEVEL_PARAMETERFV,
        /* isvoid */ 0
d7541 1
a7541 1
xcb_glx_get_tex_level_parameterfv_data (const xcb_glx_get_tex_level_parameterfv_reply_t *R  /**< */)
d7547 1
a7547 1
xcb_glx_get_tex_level_parameterfv_data_length (const xcb_glx_get_tex_level_parameterfv_reply_t *R  /**< */)
d7553 1
a7553 1
xcb_glx_get_tex_level_parameterfv_data_end (const xcb_glx_get_tex_level_parameterfv_reply_t *R  /**< */)
d7563 1
a7563 1
xcb_glx_get_tex_level_parameterfv_reply (xcb_connection_t                            *c  /**< */,
d7565 1
a7565 1
                                         xcb_generic_error_t                        **e  /**< */)
d7571 1
a7571 1
xcb_glx_get_tex_level_parameteriv_sizeof (const void  *_buffer  /**< */)
d7602 5
a7606 5
xcb_glx_get_tex_level_parameteriv (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               target  /**< */,
                                   int32_t                level  /**< */,
                                   uint32_t               pname  /**< */)
d7609 4
a7612 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_LEVEL_PARAMETERIV,
        /* isvoid */ 0
d7634 5
a7638 5
xcb_glx_get_tex_level_parameteriv_unchecked (xcb_connection_t      *c  /**< */,
                                             xcb_glx_context_tag_t  context_tag  /**< */,
                                             uint32_t               target  /**< */,
                                             int32_t                level  /**< */,
                                             uint32_t               pname  /**< */)
d7641 4
a7644 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_TEX_LEVEL_PARAMETERIV,
        /* isvoid */ 0
d7666 1
a7666 1
xcb_glx_get_tex_level_parameteriv_data (const xcb_glx_get_tex_level_parameteriv_reply_t *R  /**< */)
d7672 1
a7672 1
xcb_glx_get_tex_level_parameteriv_data_length (const xcb_glx_get_tex_level_parameteriv_reply_t *R  /**< */)
d7678 1
a7678 1
xcb_glx_get_tex_level_parameteriv_data_end (const xcb_glx_get_tex_level_parameteriv_reply_t *R  /**< */)
d7688 1
a7688 1
xcb_glx_get_tex_level_parameteriv_reply (xcb_connection_t                            *c  /**< */,
d7690 1
a7690 1
                                         xcb_generic_error_t                        **e  /**< */)
d7695 64
d7760 3
a7762 3
xcb_glx_is_list (xcb_connection_t      *c  /**< */,
                 xcb_glx_context_tag_t  context_tag  /**< */,
                 uint32_t               list  /**< */)
d7765 4
a7768 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_IS_LIST,
        /* isvoid */ 0
d7788 3
a7790 3
xcb_glx_is_list_unchecked (xcb_connection_t      *c  /**< */,
                           xcb_glx_context_tag_t  context_tag  /**< */,
                           uint32_t               list  /**< */)
d7793 4
a7796 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_IS_LIST,
        /* isvoid */ 0
d7816 1
a7816 1
xcb_glx_is_list_reply (xcb_connection_t          *c  /**< */,
d7818 1
a7818 1
                       xcb_generic_error_t      **e  /**< */)
d7824 2
a7825 2
xcb_glx_flush_checked (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */)
d7828 4
a7831 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_FLUSH,
        /* isvoid */ 1
d7850 2
a7851 2
xcb_glx_flush (xcb_connection_t      *c  /**< */,
               xcb_glx_context_tag_t  context_tag  /**< */)
d7854 4
a7857 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_FLUSH,
        /* isvoid */ 1
d7876 1
a7876 1
xcb_glx_are_textures_resident_sizeof (const void  *_buffer  /**< */)
d7907 4
a7910 4
xcb_glx_are_textures_resident (xcb_connection_t      *c  /**< */,
                               xcb_glx_context_tag_t  context_tag  /**< */,
                               int32_t                n  /**< */,
                               const uint32_t        *textures  /**< */)
d7913 4
a7916 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_ARE_TEXTURES_RESIDENT,
        /* isvoid */ 0
d7941 4
a7944 4
xcb_glx_are_textures_resident_unchecked (xcb_connection_t      *c  /**< */,
                                         xcb_glx_context_tag_t  context_tag  /**< */,
                                         int32_t                n  /**< */,
                                         const uint32_t        *textures  /**< */)
d7947 4
a7950 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_ARE_TEXTURES_RESIDENT,
        /* isvoid */ 0
d7975 1
a7975 1
xcb_glx_are_textures_resident_data (const xcb_glx_are_textures_resident_reply_t *R  /**< */)
d7981 1
a7981 1
xcb_glx_are_textures_resident_data_length (const xcb_glx_are_textures_resident_reply_t *R  /**< */)
d7987 1
a7987 1
xcb_glx_are_textures_resident_data_end (const xcb_glx_are_textures_resident_reply_t *R  /**< */)
d7997 1
a7997 1
xcb_glx_are_textures_resident_reply (xcb_connection_t                        *c  /**< */,
d7999 1
a7999 1
                                     xcb_generic_error_t                    **e  /**< */)
d8005 1
a8005 1
xcb_glx_delete_textures_sizeof (const void  *_buffer  /**< */)
d8036 4
a8039 4
xcb_glx_delete_textures_checked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 int32_t                n  /**< */,
                                 const uint32_t        *textures  /**< */)
d8042 4
a8045 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DELETE_TEXTURES,
        /* isvoid */ 1
d8070 4
a8073 4
xcb_glx_delete_textures (xcb_connection_t      *c  /**< */,
                         xcb_glx_context_tag_t  context_tag  /**< */,
                         int32_t                n  /**< */,
                         const uint32_t        *textures  /**< */)
d8076 4
a8079 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DELETE_TEXTURES,
        /* isvoid */ 1
d8103 22
d8126 1
a8126 1
xcb_glx_gen_textures_sizeof (const void  *_buffer  /**< */)
d8157 3
a8159 3
xcb_glx_gen_textures (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      int32_t                n  /**< */)
d8162 4
a8165 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GEN_TEXTURES,
        /* isvoid */ 0
d8185 3
a8187 3
xcb_glx_gen_textures_unchecked (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                int32_t                n  /**< */)
d8190 4
a8193 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GEN_TEXTURES,
        /* isvoid */ 0
d8213 1
a8213 1
xcb_glx_gen_textures_data (const xcb_glx_gen_textures_reply_t *R  /**< */)
d8219 1
a8219 1
xcb_glx_gen_textures_data_length (const xcb_glx_gen_textures_reply_t *R  /**< */)
d8225 1
a8225 1
xcb_glx_gen_textures_data_end (const xcb_glx_gen_textures_reply_t *R  /**< */)
d8235 1
a8235 1
xcb_glx_gen_textures_reply (xcb_connection_t               *c  /**< */,
d8237 1
a8237 1
                            xcb_generic_error_t           **e  /**< */)
d8243 3
a8245 3
xcb_glx_is_texture (xcb_connection_t      *c  /**< */,
                    xcb_glx_context_tag_t  context_tag  /**< */,
                    uint32_t               texture  /**< */)
d8248 4
a8251 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_IS_TEXTURE,
        /* isvoid */ 0
d8271 3
a8273 3
xcb_glx_is_texture_unchecked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               texture  /**< */)
d8276 4
a8279 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_IS_TEXTURE,
        /* isvoid */ 0
d8299 1
a8299 1
xcb_glx_is_texture_reply (xcb_connection_t             *c  /**< */,
d8301 1
a8301 1
                          xcb_generic_error_t         **e  /**< */)
d8307 1
a8307 1
xcb_glx_get_color_table_sizeof (const void  *_buffer  /**< */)
d8338 6
a8343 6
xcb_glx_get_color_table (xcb_connection_t      *c  /**< */,
                         xcb_glx_context_tag_t  context_tag  /**< */,
                         uint32_t               target  /**< */,
                         uint32_t               format  /**< */,
                         uint32_t               type  /**< */,
                         uint8_t                swap_bytes  /**< */)
d8346 4
a8349 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_COLOR_TABLE,
        /* isvoid */ 0
d8372 6
a8377 6
xcb_glx_get_color_table_unchecked (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               target  /**< */,
                                   uint32_t               format  /**< */,
                                   uint32_t               type  /**< */,
                                   uint8_t                swap_bytes  /**< */)
d8380 4
a8383 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_COLOR_TABLE,
        /* isvoid */ 0
d8406 1
a8406 1
xcb_glx_get_color_table_data (const xcb_glx_get_color_table_reply_t *R  /**< */)
d8412 1
a8412 1
xcb_glx_get_color_table_data_length (const xcb_glx_get_color_table_reply_t *R  /**< */)
d8418 1
a8418 1
xcb_glx_get_color_table_data_end (const xcb_glx_get_color_table_reply_t *R  /**< */)
d8428 1
a8428 1
xcb_glx_get_color_table_reply (xcb_connection_t                  *c  /**< */,
d8430 1
a8430 1
                               xcb_generic_error_t              **e  /**< */)
d8436 1
a8436 1
xcb_glx_get_color_table_parameterfv_sizeof (const void  *_buffer  /**< */)
d8467 4
a8470 4
xcb_glx_get_color_table_parameterfv (xcb_connection_t      *c  /**< */,
                                     xcb_glx_context_tag_t  context_tag  /**< */,
                                     uint32_t               target  /**< */,
                                     uint32_t               pname  /**< */)
d8473 4
a8476 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_COLOR_TABLE_PARAMETERFV,
        /* isvoid */ 0
d8497 4
a8500 4
xcb_glx_get_color_table_parameterfv_unchecked (xcb_connection_t      *c  /**< */,
                                               xcb_glx_context_tag_t  context_tag  /**< */,
                                               uint32_t               target  /**< */,
                                               uint32_t               pname  /**< */)
d8503 4
a8506 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_COLOR_TABLE_PARAMETERFV,
        /* isvoid */ 0
d8527 1
a8527 1
xcb_glx_get_color_table_parameterfv_data (const xcb_glx_get_color_table_parameterfv_reply_t *R  /**< */)
d8533 1
a8533 1
xcb_glx_get_color_table_parameterfv_data_length (const xcb_glx_get_color_table_parameterfv_reply_t *R  /**< */)
d8539 1
a8539 1
xcb_glx_get_color_table_parameterfv_data_end (const xcb_glx_get_color_table_parameterfv_reply_t *R  /**< */)
d8549 1
a8549 1
xcb_glx_get_color_table_parameterfv_reply (xcb_connection_t                              *c  /**< */,
d8551 1
a8551 1
                                           xcb_generic_error_t                          **e  /**< */)
d8557 1
a8557 1
xcb_glx_get_color_table_parameteriv_sizeof (const void  *_buffer  /**< */)
d8588 4
a8591 4
xcb_glx_get_color_table_parameteriv (xcb_connection_t      *c  /**< */,
                                     xcb_glx_context_tag_t  context_tag  /**< */,
                                     uint32_t               target  /**< */,
                                     uint32_t               pname  /**< */)
d8594 4
a8597 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_COLOR_TABLE_PARAMETERIV,
        /* isvoid */ 0
d8618 4
a8621 4
xcb_glx_get_color_table_parameteriv_unchecked (xcb_connection_t      *c  /**< */,
                                               xcb_glx_context_tag_t  context_tag  /**< */,
                                               uint32_t               target  /**< */,
                                               uint32_t               pname  /**< */)
d8624 4
a8627 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_COLOR_TABLE_PARAMETERIV,
        /* isvoid */ 0
d8648 1
a8648 1
xcb_glx_get_color_table_parameteriv_data (const xcb_glx_get_color_table_parameteriv_reply_t *R  /**< */)
d8654 1
a8654 1
xcb_glx_get_color_table_parameteriv_data_length (const xcb_glx_get_color_table_parameteriv_reply_t *R  /**< */)
d8660 1
a8660 1
xcb_glx_get_color_table_parameteriv_data_end (const xcb_glx_get_color_table_parameteriv_reply_t *R  /**< */)
d8670 1
a8670 1
xcb_glx_get_color_table_parameteriv_reply (xcb_connection_t                              *c  /**< */,
d8672 1
a8672 1
                                           xcb_generic_error_t                          **e  /**< */)
d8678 1
a8678 1
xcb_glx_get_convolution_filter_sizeof (const void  *_buffer  /**< */)
d8709 6
a8714 6
xcb_glx_get_convolution_filter (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                uint32_t               target  /**< */,
                                uint32_t               format  /**< */,
                                uint32_t               type  /**< */,
                                uint8_t                swap_bytes  /**< */)
d8717 4
a8720 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_CONVOLUTION_FILTER,
        /* isvoid */ 0
d8743 6
a8748 6
xcb_glx_get_convolution_filter_unchecked (xcb_connection_t      *c  /**< */,
                                          xcb_glx_context_tag_t  context_tag  /**< */,
                                          uint32_t               target  /**< */,
                                          uint32_t               format  /**< */,
                                          uint32_t               type  /**< */,
                                          uint8_t                swap_bytes  /**< */)
d8751 4
a8754 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_CONVOLUTION_FILTER,
        /* isvoid */ 0
d8777 1
a8777 1
xcb_glx_get_convolution_filter_data (const xcb_glx_get_convolution_filter_reply_t *R  /**< */)
d8783 1
a8783 1
xcb_glx_get_convolution_filter_data_length (const xcb_glx_get_convolution_filter_reply_t *R  /**< */)
d8789 1
a8789 1
xcb_glx_get_convolution_filter_data_end (const xcb_glx_get_convolution_filter_reply_t *R  /**< */)
d8799 1
a8799 1
xcb_glx_get_convolution_filter_reply (xcb_connection_t                         *c  /**< */,
d8801 1
a8801 1
                                      xcb_generic_error_t                     **e  /**< */)
d8807 1
a8807 1
xcb_glx_get_convolution_parameterfv_sizeof (const void  *_buffer  /**< */)
d8838 4
a8841 4
xcb_glx_get_convolution_parameterfv (xcb_connection_t      *c  /**< */,
                                     xcb_glx_context_tag_t  context_tag  /**< */,
                                     uint32_t               target  /**< */,
                                     uint32_t               pname  /**< */)
d8844 4
a8847 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_CONVOLUTION_PARAMETERFV,
        /* isvoid */ 0
d8868 4
a8871 4
xcb_glx_get_convolution_parameterfv_unchecked (xcb_connection_t      *c  /**< */,
                                               xcb_glx_context_tag_t  context_tag  /**< */,
                                               uint32_t               target  /**< */,
                                               uint32_t               pname  /**< */)
d8874 4
a8877 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_CONVOLUTION_PARAMETERFV,
        /* isvoid */ 0
d8898 1
a8898 1
xcb_glx_get_convolution_parameterfv_data (const xcb_glx_get_convolution_parameterfv_reply_t *R  /**< */)
d8904 1
a8904 1
xcb_glx_get_convolution_parameterfv_data_length (const xcb_glx_get_convolution_parameterfv_reply_t *R  /**< */)
d8910 1
a8910 1
xcb_glx_get_convolution_parameterfv_data_end (const xcb_glx_get_convolution_parameterfv_reply_t *R  /**< */)
d8920 1
a8920 1
xcb_glx_get_convolution_parameterfv_reply (xcb_connection_t                              *c  /**< */,
d8922 1
a8922 1
                                           xcb_generic_error_t                          **e  /**< */)
d8928 1
a8928 1
xcb_glx_get_convolution_parameteriv_sizeof (const void  *_buffer  /**< */)
d8959 4
a8962 4
xcb_glx_get_convolution_parameteriv (xcb_connection_t      *c  /**< */,
                                     xcb_glx_context_tag_t  context_tag  /**< */,
                                     uint32_t               target  /**< */,
                                     uint32_t               pname  /**< */)
d8965 4
a8968 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_CONVOLUTION_PARAMETERIV,
        /* isvoid */ 0
d8989 4
a8992 4
xcb_glx_get_convolution_parameteriv_unchecked (xcb_connection_t      *c  /**< */,
                                               xcb_glx_context_tag_t  context_tag  /**< */,
                                               uint32_t               target  /**< */,
                                               uint32_t               pname  /**< */)
d8995 4
a8998 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_CONVOLUTION_PARAMETERIV,
        /* isvoid */ 0
d9019 1
a9019 1
xcb_glx_get_convolution_parameteriv_data (const xcb_glx_get_convolution_parameteriv_reply_t *R  /**< */)
d9025 1
a9025 1
xcb_glx_get_convolution_parameteriv_data_length (const xcb_glx_get_convolution_parameteriv_reply_t *R  /**< */)
d9031 1
a9031 1
xcb_glx_get_convolution_parameteriv_data_end (const xcb_glx_get_convolution_parameteriv_reply_t *R  /**< */)
d9041 1
a9041 1
xcb_glx_get_convolution_parameteriv_reply (xcb_connection_t                              *c  /**< */,
d9043 1
a9043 1
                                           xcb_generic_error_t                          **e  /**< */)
d9049 1
a9049 1
xcb_glx_get_separable_filter_sizeof (const void  *_buffer  /**< */)
d9080 6
a9085 6
xcb_glx_get_separable_filter (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               target  /**< */,
                              uint32_t               format  /**< */,
                              uint32_t               type  /**< */,
                              uint8_t                swap_bytes  /**< */)
d9088 4
a9091 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_SEPARABLE_FILTER,
        /* isvoid */ 0
d9114 6
a9119 6
xcb_glx_get_separable_filter_unchecked (xcb_connection_t      *c  /**< */,
                                        xcb_glx_context_tag_t  context_tag  /**< */,
                                        uint32_t               target  /**< */,
                                        uint32_t               format  /**< */,
                                        uint32_t               type  /**< */,
                                        uint8_t                swap_bytes  /**< */)
d9122 4
a9125 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_SEPARABLE_FILTER,
        /* isvoid */ 0
d9148 1
a9148 1
xcb_glx_get_separable_filter_rows_and_cols (const xcb_glx_get_separable_filter_reply_t *R  /**< */)
d9154 1
a9154 1
xcb_glx_get_separable_filter_rows_and_cols_length (const xcb_glx_get_separable_filter_reply_t *R  /**< */)
d9160 1
a9160 1
xcb_glx_get_separable_filter_rows_and_cols_end (const xcb_glx_get_separable_filter_reply_t *R  /**< */)
d9170 1
a9170 1
xcb_glx_get_separable_filter_reply (xcb_connection_t                       *c  /**< */,
d9172 1
a9172 1
                                    xcb_generic_error_t                   **e  /**< */)
d9178 1
a9178 1
xcb_glx_get_histogram_sizeof (const void  *_buffer  /**< */)
d9209 7
a9215 7
xcb_glx_get_histogram (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       uint32_t               target  /**< */,
                       uint32_t               format  /**< */,
                       uint32_t               type  /**< */,
                       uint8_t                swap_bytes  /**< */,
                       uint8_t                reset  /**< */)
d9218 4
a9221 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_HISTOGRAM,
        /* isvoid */ 0
d9245 7
a9251 7
xcb_glx_get_histogram_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               target  /**< */,
                                 uint32_t               format  /**< */,
                                 uint32_t               type  /**< */,
                                 uint8_t                swap_bytes  /**< */,
                                 uint8_t                reset  /**< */)
d9254 4
a9257 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_HISTOGRAM,
        /* isvoid */ 0
d9281 1
a9281 1
xcb_glx_get_histogram_data (const xcb_glx_get_histogram_reply_t *R  /**< */)
d9287 1
a9287 1
xcb_glx_get_histogram_data_length (const xcb_glx_get_histogram_reply_t *R  /**< */)
d9293 1
a9293 1
xcb_glx_get_histogram_data_end (const xcb_glx_get_histogram_reply_t *R  /**< */)
d9303 1
a9303 1
xcb_glx_get_histogram_reply (xcb_connection_t                *c  /**< */,
d9305 1
a9305 1
                             xcb_generic_error_t            **e  /**< */)
d9311 1
a9311 1
xcb_glx_get_histogram_parameterfv_sizeof (const void  *_buffer  /**< */)
d9342 4
a9345 4
xcb_glx_get_histogram_parameterfv (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               target  /**< */,
                                   uint32_t               pname  /**< */)
d9348 4
a9351 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_HISTOGRAM_PARAMETERFV,
        /* isvoid */ 0
d9372 4
a9375 4
xcb_glx_get_histogram_parameterfv_unchecked (xcb_connection_t      *c  /**< */,
                                             xcb_glx_context_tag_t  context_tag  /**< */,
                                             uint32_t               target  /**< */,
                                             uint32_t               pname  /**< */)
d9378 4
a9381 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_HISTOGRAM_PARAMETERFV,
        /* isvoid */ 0
d9402 1
a9402 1
xcb_glx_get_histogram_parameterfv_data (const xcb_glx_get_histogram_parameterfv_reply_t *R  /**< */)
d9408 1
a9408 1
xcb_glx_get_histogram_parameterfv_data_length (const xcb_glx_get_histogram_parameterfv_reply_t *R  /**< */)
d9414 1
a9414 1
xcb_glx_get_histogram_parameterfv_data_end (const xcb_glx_get_histogram_parameterfv_reply_t *R  /**< */)
d9424 1
a9424 1
xcb_glx_get_histogram_parameterfv_reply (xcb_connection_t                            *c  /**< */,
d9426 1
a9426 1
                                         xcb_generic_error_t                        **e  /**< */)
d9432 1
a9432 1
xcb_glx_get_histogram_parameteriv_sizeof (const void  *_buffer  /**< */)
d9463 4
a9466 4
xcb_glx_get_histogram_parameteriv (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               target  /**< */,
                                   uint32_t               pname  /**< */)
d9469 4
a9472 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_HISTOGRAM_PARAMETERIV,
        /* isvoid */ 0
d9493 4
a9496 4
xcb_glx_get_histogram_parameteriv_unchecked (xcb_connection_t      *c  /**< */,
                                             xcb_glx_context_tag_t  context_tag  /**< */,
                                             uint32_t               target  /**< */,
                                             uint32_t               pname  /**< */)
d9499 4
a9502 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_HISTOGRAM_PARAMETERIV,
        /* isvoid */ 0
d9523 1
a9523 1
xcb_glx_get_histogram_parameteriv_data (const xcb_glx_get_histogram_parameteriv_reply_t *R  /**< */)
d9529 1
a9529 1
xcb_glx_get_histogram_parameteriv_data_length (const xcb_glx_get_histogram_parameteriv_reply_t *R  /**< */)
d9535 1
a9535 1
xcb_glx_get_histogram_parameteriv_data_end (const xcb_glx_get_histogram_parameteriv_reply_t *R  /**< */)
d9545 1
a9545 1
xcb_glx_get_histogram_parameteriv_reply (xcb_connection_t                            *c  /**< */,
d9547 1
a9547 1
                                         xcb_generic_error_t                        **e  /**< */)
d9553 1
a9553 1
xcb_glx_get_minmax_sizeof (const void  *_buffer  /**< */)
d9584 7
a9590 7
xcb_glx_get_minmax (xcb_connection_t      *c  /**< */,
                    xcb_glx_context_tag_t  context_tag  /**< */,
                    uint32_t               target  /**< */,
                    uint32_t               format  /**< */,
                    uint32_t               type  /**< */,
                    uint8_t                swap_bytes  /**< */,
                    uint8_t                reset  /**< */)
d9593 4
a9596 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MINMAX,
        /* isvoid */ 0
d9620 7
a9626 7
xcb_glx_get_minmax_unchecked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               target  /**< */,
                              uint32_t               format  /**< */,
                              uint32_t               type  /**< */,
                              uint8_t                swap_bytes  /**< */,
                              uint8_t                reset  /**< */)
d9629 4
a9632 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MINMAX,
        /* isvoid */ 0
d9656 1
a9656 1
xcb_glx_get_minmax_data (const xcb_glx_get_minmax_reply_t *R  /**< */)
d9662 1
a9662 1
xcb_glx_get_minmax_data_length (const xcb_glx_get_minmax_reply_t *R  /**< */)
d9668 1
a9668 1
xcb_glx_get_minmax_data_end (const xcb_glx_get_minmax_reply_t *R  /**< */)
d9678 1
a9678 1
xcb_glx_get_minmax_reply (xcb_connection_t             *c  /**< */,
d9680 1
a9680 1
                          xcb_generic_error_t         **e  /**< */)
d9686 1
a9686 1
xcb_glx_get_minmax_parameterfv_sizeof (const void  *_buffer  /**< */)
d9717 4
a9720 4
xcb_glx_get_minmax_parameterfv (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                uint32_t               target  /**< */,
                                uint32_t               pname  /**< */)
d9723 4
a9726 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MINMAX_PARAMETERFV,
        /* isvoid */ 0
d9747 4
a9750 4
xcb_glx_get_minmax_parameterfv_unchecked (xcb_connection_t      *c  /**< */,
                                          xcb_glx_context_tag_t  context_tag  /**< */,
                                          uint32_t               target  /**< */,
                                          uint32_t               pname  /**< */)
d9753 4
a9756 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MINMAX_PARAMETERFV,
        /* isvoid */ 0
d9777 1
a9777 1
xcb_glx_get_minmax_parameterfv_data (const xcb_glx_get_minmax_parameterfv_reply_t *R  /**< */)
d9783 1
a9783 1
xcb_glx_get_minmax_parameterfv_data_length (const xcb_glx_get_minmax_parameterfv_reply_t *R  /**< */)
d9789 1
a9789 1
xcb_glx_get_minmax_parameterfv_data_end (const xcb_glx_get_minmax_parameterfv_reply_t *R  /**< */)
d9799 1
a9799 1
xcb_glx_get_minmax_parameterfv_reply (xcb_connection_t                         *c  /**< */,
d9801 1
a9801 1
                                      xcb_generic_error_t                     **e  /**< */)
d9807 1
a9807 1
xcb_glx_get_minmax_parameteriv_sizeof (const void  *_buffer  /**< */)
d9838 4
a9841 4
xcb_glx_get_minmax_parameteriv (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                uint32_t               target  /**< */,
                                uint32_t               pname  /**< */)
d9844 4
a9847 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MINMAX_PARAMETERIV,
        /* isvoid */ 0
d9868 4
a9871 4
xcb_glx_get_minmax_parameteriv_unchecked (xcb_connection_t      *c  /**< */,
                                          xcb_glx_context_tag_t  context_tag  /**< */,
                                          uint32_t               target  /**< */,
                                          uint32_t               pname  /**< */)
d9874 4
a9877 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_MINMAX_PARAMETERIV,
        /* isvoid */ 0
d9898 1
a9898 1
xcb_glx_get_minmax_parameteriv_data (const xcb_glx_get_minmax_parameteriv_reply_t *R  /**< */)
d9904 1
a9904 1
xcb_glx_get_minmax_parameteriv_data_length (const xcb_glx_get_minmax_parameteriv_reply_t *R  /**< */)
d9910 1
a9910 1
xcb_glx_get_minmax_parameteriv_data_end (const xcb_glx_get_minmax_parameteriv_reply_t *R  /**< */)
d9920 1
a9920 1
xcb_glx_get_minmax_parameteriv_reply (xcb_connection_t                         *c  /**< */,
d9922 1
a9922 1
                                      xcb_generic_error_t                     **e  /**< */)
d9928 1
a9928 1
xcb_glx_get_compressed_tex_image_arb_sizeof (const void  *_buffer  /**< */)
d9959 4
a9962 4
xcb_glx_get_compressed_tex_image_arb (xcb_connection_t      *c  /**< */,
                                      xcb_glx_context_tag_t  context_tag  /**< */,
                                      uint32_t               target  /**< */,
                                      int32_t                level  /**< */)
d9965 4
a9968 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_COMPRESSED_TEX_IMAGE_ARB,
        /* isvoid */ 0
d9989 4
a9992 4
xcb_glx_get_compressed_tex_image_arb_unchecked (xcb_connection_t      *c  /**< */,
                                                xcb_glx_context_tag_t  context_tag  /**< */,
                                                uint32_t               target  /**< */,
                                                int32_t                level  /**< */)
d9995 4
a9998 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_COMPRESSED_TEX_IMAGE_ARB,
        /* isvoid */ 0
d10019 1
a10019 1
xcb_glx_get_compressed_tex_image_arb_data (const xcb_glx_get_compressed_tex_image_arb_reply_t *R  /**< */)
d10025 1
a10025 1
xcb_glx_get_compressed_tex_image_arb_data_length (const xcb_glx_get_compressed_tex_image_arb_reply_t *R  /**< */)
d10031 1
a10031 1
xcb_glx_get_compressed_tex_image_arb_data_end (const xcb_glx_get_compressed_tex_image_arb_reply_t *R  /**< */)
d10041 1
a10041 1
xcb_glx_get_compressed_tex_image_arb_reply (xcb_connection_t                               *c  /**< */,
d10043 1
a10043 1
                                            xcb_generic_error_t                           **e  /**< */)
d10049 1
a10049 1
xcb_glx_delete_queries_arb_sizeof (const void  *_buffer  /**< */)
d10080 4
a10083 4
xcb_glx_delete_queries_arb_checked (xcb_connection_t      *c  /**< */,
                                    xcb_glx_context_tag_t  context_tag  /**< */,
                                    int32_t                n  /**< */,
                                    const uint32_t        *ids  /**< */)
d10086 4
a10089 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DELETE_QUERIES_ARB,
        /* isvoid */ 1
d10114 4
a10117 4
xcb_glx_delete_queries_arb (xcb_connection_t      *c  /**< */,
                            xcb_glx_context_tag_t  context_tag  /**< */,
                            int32_t                n  /**< */,
                            const uint32_t        *ids  /**< */)
d10120 4
a10123 4
        /* count */ 4,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_DELETE_QUERIES_ARB,
        /* isvoid */ 1
d10147 22
d10170 1
a10170 1
xcb_glx_gen_queries_arb_sizeof (const void  *_buffer  /**< */)
d10201 3
a10203 3
xcb_glx_gen_queries_arb (xcb_connection_t      *c  /**< */,
                         xcb_glx_context_tag_t  context_tag  /**< */,
                         int32_t                n  /**< */)
d10206 4
a10209 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GEN_QUERIES_ARB,
        /* isvoid */ 0
d10229 3
a10231 3
xcb_glx_gen_queries_arb_unchecked (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   int32_t                n  /**< */)
d10234 4
a10237 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GEN_QUERIES_ARB,
        /* isvoid */ 0
d10257 1
a10257 1
xcb_glx_gen_queries_arb_data (const xcb_glx_gen_queries_arb_reply_t *R  /**< */)
d10263 1
a10263 1
xcb_glx_gen_queries_arb_data_length (const xcb_glx_gen_queries_arb_reply_t *R  /**< */)
d10269 1
a10269 1
xcb_glx_gen_queries_arb_data_end (const xcb_glx_gen_queries_arb_reply_t *R  /**< */)
d10279 1
a10279 1
xcb_glx_gen_queries_arb_reply (xcb_connection_t                  *c  /**< */,
d10281 1
a10281 1
                               xcb_generic_error_t              **e  /**< */)
d10287 3
a10289 3
xcb_glx_is_query_arb (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      uint32_t               id  /**< */)
d10292 4
a10295 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_IS_QUERY_ARB,
        /* isvoid */ 0
d10315 3
a10317 3
xcb_glx_is_query_arb_unchecked (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                uint32_t               id  /**< */)
d10320 4
a10323 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_IS_QUERY_ARB,
        /* isvoid */ 0
d10343 1
a10343 1
xcb_glx_is_query_arb_reply (xcb_connection_t               *c  /**< */,
d10345 1
a10345 1
                            xcb_generic_error_t           **e  /**< */)
d10351 1
a10351 1
xcb_glx_get_queryiv_arb_sizeof (const void  *_buffer  /**< */)
d10382 4
a10385 4
xcb_glx_get_queryiv_arb (xcb_connection_t      *c  /**< */,
                         xcb_glx_context_tag_t  context_tag  /**< */,
                         uint32_t               target  /**< */,
                         uint32_t               pname  /**< */)
d10388 4
a10391 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_QUERYIV_ARB,
        /* isvoid */ 0
d10412 4
a10415 4
xcb_glx_get_queryiv_arb_unchecked (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               target  /**< */,
                                   uint32_t               pname  /**< */)
d10418 4
a10421 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_QUERYIV_ARB,
        /* isvoid */ 0
d10442 1
a10442 1
xcb_glx_get_queryiv_arb_data (const xcb_glx_get_queryiv_arb_reply_t *R  /**< */)
d10448 1
a10448 1
xcb_glx_get_queryiv_arb_data_length (const xcb_glx_get_queryiv_arb_reply_t *R  /**< */)
d10454 1
a10454 1
xcb_glx_get_queryiv_arb_data_end (const xcb_glx_get_queryiv_arb_reply_t *R  /**< */)
d10464 1
a10464 1
xcb_glx_get_queryiv_arb_reply (xcb_connection_t                  *c  /**< */,
d10466 1
a10466 1
                               xcb_generic_error_t              **e  /**< */)
d10472 1
a10472 1
xcb_glx_get_query_objectiv_arb_sizeof (const void  *_buffer  /**< */)
d10503 4
a10506 4
xcb_glx_get_query_objectiv_arb (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                uint32_t               id  /**< */,
                                uint32_t               pname  /**< */)
d10509 4
a10512 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_QUERY_OBJECTIV_ARB,
        /* isvoid */ 0
d10533 4
a10536 4
xcb_glx_get_query_objectiv_arb_unchecked (xcb_connection_t      *c  /**< */,
                                          xcb_glx_context_tag_t  context_tag  /**< */,
                                          uint32_t               id  /**< */,
                                          uint32_t               pname  /**< */)
d10539 4
a10542 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_QUERY_OBJECTIV_ARB,
        /* isvoid */ 0
d10563 1
a10563 1
xcb_glx_get_query_objectiv_arb_data (const xcb_glx_get_query_objectiv_arb_reply_t *R  /**< */)
d10569 1
a10569 1
xcb_glx_get_query_objectiv_arb_data_length (const xcb_glx_get_query_objectiv_arb_reply_t *R  /**< */)
d10575 1
a10575 1
xcb_glx_get_query_objectiv_arb_data_end (const xcb_glx_get_query_objectiv_arb_reply_t *R  /**< */)
d10585 1
a10585 1
xcb_glx_get_query_objectiv_arb_reply (xcb_connection_t                         *c  /**< */,
d10587 1
a10587 1
                                      xcb_generic_error_t                     **e  /**< */)
d10593 1
a10593 1
xcb_glx_get_query_objectuiv_arb_sizeof (const void  *_buffer  /**< */)
d10624 4
a10627 4
xcb_glx_get_query_objectuiv_arb (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               id  /**< */,
                                 uint32_t               pname  /**< */)
d10630 4
a10633 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_QUERY_OBJECTUIV_ARB,
        /* isvoid */ 0
d10654 4
a10657 4
xcb_glx_get_query_objectuiv_arb_unchecked (xcb_connection_t      *c  /**< */,
                                           xcb_glx_context_tag_t  context_tag  /**< */,
                                           uint32_t               id  /**< */,
                                           uint32_t               pname  /**< */)
d10660 4
a10663 4
        /* count */ 2,
        /* ext */ &xcb_glx_id,
        /* opcode */ XCB_GLX_GET_QUERY_OBJECTUIV_ARB,
        /* isvoid */ 0
d10684 1
a10684 1
xcb_glx_get_query_objectuiv_arb_data (const xcb_glx_get_query_objectuiv_arb_reply_t *R  /**< */)
d10690 1
a10690 1
xcb_glx_get_query_objectuiv_arb_data_length (const xcb_glx_get_query_objectuiv_arb_reply_t *R  /**< */)
d10696 1
a10696 1
xcb_glx_get_query_objectuiv_arb_data_end (const xcb_glx_get_query_objectuiv_arb_reply_t *R  /**< */)
d10706 1
a10706 1
xcb_glx_get_query_objectuiv_arb_reply (xcb_connection_t                          *c  /**< */,
d10708 1
a10708 1
                                       xcb_generic_error_t                      **e  /**< */)
@


1.4
log
@Update build system and generated files for libxcb 1.10.
@
text
@a20 10

/*****************************************************************************
 **
 ** void xcb_glx_pixmap_next
 ** 
 ** @@param xcb_glx_pixmap_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a28 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_pixmap_end
 ** 
 ** @@param xcb_glx_pixmap_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a38 10

/*****************************************************************************
 **
 ** void xcb_glx_context_next
 ** 
 ** @@param xcb_glx_context_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a46 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_context_end
 ** 
 ** @@param xcb_glx_context_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a56 10

/*****************************************************************************
 **
 ** void xcb_glx_pbuffer_next
 ** 
 ** @@param xcb_glx_pbuffer_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a64 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_pbuffer_end
 ** 
 ** @@param xcb_glx_pbuffer_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a74 10

/*****************************************************************************
 **
 ** void xcb_glx_window_next
 ** 
 ** @@param xcb_glx_window_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a82 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_window_end
 ** 
 ** @@param xcb_glx_window_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a92 10

/*****************************************************************************
 **
 ** void xcb_glx_fbconfig_next
 ** 
 ** @@param xcb_glx_fbconfig_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a100 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_fbconfig_end
 ** 
 ** @@param xcb_glx_fbconfig_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a110 10

/*****************************************************************************
 **
 ** void xcb_glx_drawable_next
 ** 
 ** @@param xcb_glx_drawable_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a118 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_drawable_end
 ** 
 ** @@param xcb_glx_drawable_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a128 10

/*****************************************************************************
 **
 ** void xcb_glx_float32_next
 ** 
 ** @@param xcb_glx_float32_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a136 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_float32_end
 ** 
 ** @@param xcb_glx_float32_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a146 10

/*****************************************************************************
 **
 ** void xcb_glx_float64_next
 ** 
 ** @@param xcb_glx_float64_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a154 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_float64_end
 ** 
 ** @@param xcb_glx_float64_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a164 10

/*****************************************************************************
 **
 ** void xcb_glx_bool32_next
 ** 
 ** @@param xcb_glx_bool32_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a172 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_bool32_end
 ** 
 ** @@param xcb_glx_bool32_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a182 10

/*****************************************************************************
 **
 ** void xcb_glx_context_tag_next
 ** 
 ** @@param xcb_glx_context_tag_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a190 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_context_tag_end
 ** 
 ** @@param xcb_glx_context_tag_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a231 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_render_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d244 1
a244 1
    
d248 1
a248 1
    
d250 1
a250 1
    
d260 1
a260 1
    
a264 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_render
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d277 1
a277 1
    
d281 1
a281 1
    
d283 1
a283 1
    
d293 1
a293 1
    
a328 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_render_large_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint16_t               request_num
 ** @@param uint16_t               request_total
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d343 1
a343 1
    
d347 1
a347 1
    
d352 1
a352 1
    
d362 1
a362 1
    
a366 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_render_large
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint16_t               request_num
 ** @@param uint16_t               request_total
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d381 1
a381 1
    
d385 1
a385 1
    
d390 1
a390 1
    
d400 1
a400 1
    
a404 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_context_checked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@param xcb_visualid_t     visual
 ** @@param uint32_t           screen
 ** @@param xcb_glx_context_t  share_list
 ** @@param uint8_t            is_direct
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d419 1
a419 1
    
d423 1
a423 1
    
d430 1
a430 1
    
d435 1
a435 1
    
a439 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_context
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@param xcb_visualid_t     visual
 ** @@param uint32_t           screen
 ** @@param xcb_glx_context_t  share_list
 ** @@param uint8_t            is_direct
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d454 1
a454 1
    
d458 1
a458 1
    
d465 1
a465 1
    
d470 1
a470 1
    
a474 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_context_checked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d485 1
a485 1
    
d489 1
a489 1
    
d491 1
a491 1
    
d496 1
a496 1
    
a500 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_context
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d511 1
a511 1
    
d515 1
a515 1
    
d517 1
a517 1
    
d522 1
a522 1
    
a526 13

/*****************************************************************************
 **
 ** xcb_glx_make_current_cookie_t xcb_glx_make_current
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_drawable_t     drawable
 ** @@param xcb_glx_context_t      context
 ** @@param xcb_glx_context_tag_t  old_context_tag
 ** @@returns xcb_glx_make_current_cookie_t
 **
 *****************************************************************************/
 
d539 1
a539 1
    
d543 1
a543 1
    
d547 1
a547 1
    
d552 1
a552 1
    
a556 13

/*****************************************************************************
 **
 ** xcb_glx_make_current_cookie_t xcb_glx_make_current_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_drawable_t     drawable
 ** @@param xcb_glx_context_t      context
 ** @@param xcb_glx_context_tag_t  old_context_tag
 ** @@returns xcb_glx_make_current_cookie_t
 **
 *****************************************************************************/
 
d569 1
a569 1
    
d573 1
a573 1
    
d577 1
a577 1
    
d582 1
a582 1
    
a586 12

/*****************************************************************************
 **
 ** xcb_glx_make_current_reply_t * xcb_glx_make_current_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_glx_make_current_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_glx_make_current_reply_t *
 **
 *****************************************************************************/
 
a594 11

/*****************************************************************************
 **
 ** xcb_glx_is_direct_cookie_t xcb_glx_is_direct
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@returns xcb_glx_is_direct_cookie_t
 **
 *****************************************************************************/
 
d605 1
a605 1
    
d609 1
a609 1
    
d611 1
a611 1
    
d616 1
a616 1
    
a620 11

/*****************************************************************************
 **
 ** xcb_glx_is_direct_cookie_t xcb_glx_is_direct_unchecked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@returns xcb_glx_is_direct_cookie_t
 **
 *****************************************************************************/
 
d631 1
a631 1
    
d635 1
a635 1
    
d637 1
a637 1
    
d642 1
a642 1
    
a646 12

/*****************************************************************************
 **
 ** xcb_glx_is_direct_reply_t * xcb_glx_is_direct_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_glx_is_direct_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_glx_is_direct_reply_t *
 **
 *****************************************************************************/
 
a654 12

/*****************************************************************************
 **
 ** xcb_glx_query_version_cookie_t xcb_glx_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_glx_query_version_cookie_t
 **
 *****************************************************************************/
 
d666 1
a666 1
    
d670 1
a670 1
    
d673 1
a673 1
    
d678 1
a678 1
    
a682 12

/*****************************************************************************
 **
 ** xcb_glx_query_version_cookie_t xcb_glx_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_glx_query_version_cookie_t
 **
 *****************************************************************************/
 
d694 1
a694 1
    
d698 1
a698 1
    
d701 1
a701 1
    
d706 1
a706 1
    
a710 12

/*****************************************************************************
 **
 ** xcb_glx_query_version_reply_t * xcb_glx_query_version_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_query_version_reply_t *
 **
 *****************************************************************************/
 
a718 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_wait_gl_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d729 1
a729 1
    
d733 1
a733 1
    
d735 1
a735 1
    
d740 1
a740 1
    
a744 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_wait_gl
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d755 1
a755 1
    
d759 1
a759 1
    
d761 1
a761 1
    
d766 1
a766 1
    
a770 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_wait_x_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d781 1
a781 1
    
d785 1
a785 1
    
d787 1
a787 1
    
d792 1
a792 1
    
a796 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_wait_x
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d807 1
a807 1
    
d811 1
a811 1
    
d813 1
a813 1
    
d818 1
a818 1
    
a822 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_copy_context_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_t      src
 ** @@param xcb_glx_context_t      dest
 ** @@param uint32_t               mask
 ** @@param xcb_glx_context_tag_t  src_context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d836 1
a836 1
    
d840 1
a840 1
    
d845 1
a845 1
    
d850 1
a850 1
    
a854 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_copy_context
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_t      src
 ** @@param xcb_glx_context_t      dest
 ** @@param uint32_t               mask
 ** @@param xcb_glx_context_tag_t  src_context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d868 1
a868 1
    
d872 1
a872 1
    
d877 1
a877 1
    
d882 1
a882 1
    
a886 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_swap_buffers_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param xcb_glx_drawable_t     drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d898 1
a898 1
    
d902 1
a902 1
    
d905 1
a905 1
    
d910 1
a910 1
    
a914 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_swap_buffers
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param xcb_glx_drawable_t     drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d926 1
a926 1
    
d930 1
a930 1
    
d933 1
a933 1
    
d938 1
a938 1
    
a942 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_use_x_font_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param xcb_font_t             font
 ** @@param uint32_t               first
 ** @@param uint32_t               count
 ** @@param uint32_t               list_base
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d957 1
a957 1
    
d961 1
a961 1
    
d967 1
a967 1
    
d972 1
a972 1
    
a976 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_use_x_font
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param xcb_font_t             font
 ** @@param uint32_t               first
 ** @@param uint32_t               count
 ** @@param uint32_t               list_base
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d991 1
a991 1
    
d995 1
a995 1
    
d1001 1
a1001 1
    
d1006 1
a1006 1
    
a1010 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_glx_pixmap_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param xcb_visualid_t    visual
 ** @@param xcb_pixmap_t      pixmap
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1024 1
a1024 1
    
d1028 1
a1028 1
    
d1033 1
a1033 1
    
d1038 1
a1038 1
    
a1042 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_glx_pixmap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param xcb_visualid_t    visual
 ** @@param xcb_pixmap_t      pixmap
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1056 1
a1056 1
    
d1060 1
a1060 1
    
d1065 1
a1065 1
    
d1070 1
a1070 1
    
a1105 11

/*****************************************************************************
 **
 ** xcb_glx_get_visual_configs_cookie_t xcb_glx_get_visual_configs
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_glx_get_visual_configs_cookie_t
 **
 *****************************************************************************/
 
d1116 1
a1116 1
    
d1120 1
a1120 1
    
d1122 1
a1122 1
    
d1127 1
a1127 1
    
a1131 11

/*****************************************************************************
 **
 ** xcb_glx_get_visual_configs_cookie_t xcb_glx_get_visual_configs_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_glx_get_visual_configs_cookie_t
 **
 *****************************************************************************/
 
d1142 1
a1142 1
    
d1146 1
a1146 1
    
d1148 1
a1148 1
    
d1153 1
a1153 1
    
a1157 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_get_visual_configs_property_list
 ** 
 ** @@param const xcb_glx_get_visual_configs_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a1163 10

/*****************************************************************************
 **
 ** int xcb_glx_get_visual_configs_property_list_length
 ** 
 ** @@param const xcb_glx_get_visual_configs_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1169 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_visual_configs_property_list_end
 ** 
 ** @@param const xcb_glx_get_visual_configs_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1179 12

/*****************************************************************************
 **
 ** xcb_glx_get_visual_configs_reply_t * xcb_glx_get_visual_configs_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_glx_get_visual_configs_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_glx_get_visual_configs_reply_t *
 **
 *****************************************************************************/
 
a1187 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_glx_pixmap_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1198 1
a1198 1
    
d1202 1
a1202 1
    
d1204 1
a1204 1
    
d1209 1
a1209 1
    
a1213 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_glx_pixmap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1224 1
a1224 1
    
d1228 1
a1228 1
    
d1230 1
a1230 1
    
d1235 1
a1235 1
    
a1270 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_vendor_private_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param uint32_t               vendor_code
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1284 1
a1284 1
    
d1288 1
a1288 1
    
d1291 1
a1291 1
    
d1301 1
a1301 1
    
a1305 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_vendor_private
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param uint32_t               vendor_code
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1319 1
a1319 1
    
d1323 1
a1323 1
    
d1326 1
a1326 1
    
d1336 1
a1336 1
    
a1371 14

/*****************************************************************************
 **
 ** xcb_glx_vendor_private_with_reply_cookie_t xcb_glx_vendor_private_with_reply
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param uint32_t               vendor_code
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_glx_vendor_private_with_reply_cookie_t
 **
 *****************************************************************************/
 
d1385 1
a1385 1
    
d1389 1
a1389 1
    
d1392 1
a1392 1
    
d1402 1
a1402 1
    
a1406 14

/*****************************************************************************
 **
 ** xcb_glx_vendor_private_with_reply_cookie_t xcb_glx_vendor_private_with_reply_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param uint32_t               vendor_code
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_glx_vendor_private_with_reply_cookie_t
 **
 *****************************************************************************/
 
d1420 1
a1420 1
    
d1424 1
a1424 1
    
d1427 1
a1427 1
    
d1437 1
a1437 1
    
a1441 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_vendor_private_with_reply_data_2
 ** 
 ** @@param const xcb_glx_vendor_private_with_reply_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a1447 10

/*****************************************************************************
 **
 ** int xcb_glx_vendor_private_with_reply_data_2_length
 ** 
 ** @@param const xcb_glx_vendor_private_with_reply_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1453 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_vendor_private_with_reply_data_2_end
 ** 
 ** @@param const xcb_glx_vendor_private_with_reply_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1463 12

/*****************************************************************************
 **
 ** xcb_glx_vendor_private_with_reply_reply_t * xcb_glx_vendor_private_with_reply_reply
 ** 
 ** @@param xcb_connection_t                            *c
 ** @@param xcb_glx_vendor_private_with_reply_cookie_t   cookie
 ** @@param xcb_generic_error_t                        **e
 ** @@returns xcb_glx_vendor_private_with_reply_reply_t *
 **
 *****************************************************************************/
 
a1471 11

/*****************************************************************************
 **
 ** xcb_glx_query_extensions_string_cookie_t xcb_glx_query_extensions_string
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_glx_query_extensions_string_cookie_t
 **
 *****************************************************************************/
 
d1482 1
a1482 1
    
d1486 1
a1486 1
    
d1488 1
a1488 1
    
d1493 1
a1493 1
    
a1497 11

/*****************************************************************************
 **
 ** xcb_glx_query_extensions_string_cookie_t xcb_glx_query_extensions_string_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_glx_query_extensions_string_cookie_t
 **
 *****************************************************************************/
 
d1508 1
a1508 1
    
d1512 1
a1512 1
    
d1514 1
a1514 1
    
d1519 1
a1519 1
    
a1523 12

/*****************************************************************************
 **
 ** xcb_glx_query_extensions_string_reply_t * xcb_glx_query_extensions_string_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_glx_query_extensions_string_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_glx_query_extensions_string_reply_t *
 **
 *****************************************************************************/
 
a1562 12

/*****************************************************************************
 **
 ** xcb_glx_query_server_string_cookie_t xcb_glx_query_server_string
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          name
 ** @@returns xcb_glx_query_server_string_cookie_t
 **
 *****************************************************************************/
 
d1574 1
a1574 1
    
d1578 1
a1578 1
    
d1581 1
a1581 1
    
d1586 1
a1586 1
    
a1590 12

/*****************************************************************************
 **
 ** xcb_glx_query_server_string_cookie_t xcb_glx_query_server_string_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          name
 ** @@returns xcb_glx_query_server_string_cookie_t
 **
 *****************************************************************************/
 
d1602 1
a1602 1
    
d1606 1
a1606 1
    
d1609 1
a1609 1
    
d1614 1
a1614 1
    
a1618 10

/*****************************************************************************
 **
 ** char * xcb_glx_query_server_string_string
 ** 
 ** @@param const xcb_glx_query_server_string_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a1624 10

/*****************************************************************************
 **
 ** int xcb_glx_query_server_string_string_length
 ** 
 ** @@param const xcb_glx_query_server_string_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1630 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_query_server_string_string_end
 ** 
 ** @@param const xcb_glx_query_server_string_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1640 12

/*****************************************************************************
 **
 ** xcb_glx_query_server_string_reply_t * xcb_glx_query_server_string_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_glx_query_server_string_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_glx_query_server_string_reply_t *
 **
 *****************************************************************************/
 
a1679 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_client_info_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@param uint32_t          str_len
 ** @@param const char       *string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1693 1
a1693 1
    
d1697 1
a1697 1
    
d1701 1
a1701 1
    
d1711 1
a1711 1
    
a1715 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_client_info
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@param uint32_t          str_len
 ** @@param const char       *string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1729 1
a1729 1
    
d1733 1
a1733 1
    
d1737 1
a1737 1
    
d1747 1
a1747 1
    
a1782 11

/*****************************************************************************
 **
 ** xcb_glx_get_fb_configs_cookie_t xcb_glx_get_fb_configs
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_glx_get_fb_configs_cookie_t
 **
 *****************************************************************************/
 
d1793 1
a1793 1
    
d1797 1
a1797 1
    
d1799 1
a1799 1
    
d1804 1
a1804 1
    
a1808 11

/*****************************************************************************
 **
 ** xcb_glx_get_fb_configs_cookie_t xcb_glx_get_fb_configs_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_glx_get_fb_configs_cookie_t
 **
 *****************************************************************************/
 
d1819 1
a1819 1
    
d1823 1
a1823 1
    
d1825 1
a1825 1
    
d1830 1
a1830 1
    
a1834 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_get_fb_configs_property_list
 ** 
 ** @@param const xcb_glx_get_fb_configs_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a1840 10

/*****************************************************************************
 **
 ** int xcb_glx_get_fb_configs_property_list_length
 ** 
 ** @@param const xcb_glx_get_fb_configs_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1846 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_fb_configs_property_list_end
 ** 
 ** @@param const xcb_glx_get_fb_configs_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1856 12

/*****************************************************************************
 **
 ** xcb_glx_get_fb_configs_reply_t * xcb_glx_get_fb_configs_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_glx_get_fb_configs_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_glx_get_fb_configs_reply_t *
 **
 *****************************************************************************/
 
a1895 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_pixmap_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint32_t            screen
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param xcb_pixmap_t        pixmap
 ** @@param xcb_glx_pixmap_t    glx_pixmap
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1911 1
a1911 1
    
d1915 1
a1915 1
    
d1921 1
a1921 1
    
d1931 1
a1931 1
    
a1935 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_pixmap
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint32_t            screen
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param xcb_pixmap_t        pixmap
 ** @@param xcb_glx_pixmap_t    glx_pixmap
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1951 1
a1951 1
    
d1955 1
a1955 1
    
d1961 1
a1961 1
    
d1971 1
a1971 1
    
a1975 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_pixmap_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1986 1
a1986 1
    
d1990 1
a1990 1
    
d1992 1
a1992 1
    
d1997 1
a1997 1
    
a2001 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_pixmap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2012 1
a2012 1
    
d2016 1
a2016 1
    
d2018 1
a2018 1
    
d2023 1
a2023 1
    
a2027 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_new_context_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_context_t   context
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param uint32_t            screen
 ** @@param uint32_t            render_type
 ** @@param xcb_glx_context_t   share_list
 ** @@param uint8_t             is_direct
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2043 1
a2043 1
    
d2047 1
a2047 1
    
d2055 1
a2055 1
    
d2060 1
a2060 1
    
a2064 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_new_context
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_context_t   context
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param uint32_t            screen
 ** @@param uint32_t            render_type
 ** @@param xcb_glx_context_t   share_list
 ** @@param uint8_t             is_direct
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2080 1
a2080 1
    
d2084 1
a2084 1
    
d2092 1
a2092 1
    
d2097 1
a2097 1
    
a2132 11

/*****************************************************************************
 **
 ** xcb_glx_query_context_cookie_t xcb_glx_query_context
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@returns xcb_glx_query_context_cookie_t
 **
 *****************************************************************************/
 
d2143 1
a2143 1
    
d2147 1
a2147 1
    
d2149 1
a2149 1
    
d2154 1
a2154 1
    
a2158 11

/*****************************************************************************
 **
 ** xcb_glx_query_context_cookie_t xcb_glx_query_context_unchecked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@returns xcb_glx_query_context_cookie_t
 **
 *****************************************************************************/
 
d2169 1
a2169 1
    
d2173 1
a2173 1
    
d2175 1
a2175 1
    
d2180 1
a2180 1
    
a2184 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_query_context_attribs
 ** 
 ** @@param const xcb_glx_query_context_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a2190 10

/*****************************************************************************
 **
 ** int xcb_glx_query_context_attribs_length
 ** 
 ** @@param const xcb_glx_query_context_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2196 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_query_context_attribs_end
 ** 
 ** @@param const xcb_glx_query_context_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2206 12

/*****************************************************************************
 **
 ** xcb_glx_query_context_reply_t * xcb_glx_query_context_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_query_context_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_query_context_reply_t *
 **
 *****************************************************************************/
 
a2214 14

/*****************************************************************************
 **
 ** xcb_glx_make_context_current_cookie_t xcb_glx_make_context_current
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  old_context_tag
 ** @@param xcb_glx_drawable_t     drawable
 ** @@param xcb_glx_drawable_t     read_drawable
 ** @@param xcb_glx_context_t      context
 ** @@returns xcb_glx_make_context_current_cookie_t
 **
 *****************************************************************************/
 
d2228 1
a2228 1
    
d2232 1
a2232 1
    
d2237 1
a2237 1
    
d2242 1
a2242 1
    
a2246 14

/*****************************************************************************
 **
 ** xcb_glx_make_context_current_cookie_t xcb_glx_make_context_current_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  old_context_tag
 ** @@param xcb_glx_drawable_t     drawable
 ** @@param xcb_glx_drawable_t     read_drawable
 ** @@param xcb_glx_context_t      context
 ** @@returns xcb_glx_make_context_current_cookie_t
 **
 *****************************************************************************/
 
d2260 1
a2260 1
    
d2264 1
a2264 1
    
d2269 1
a2269 1
    
d2274 1
a2274 1
    
a2278 12

/*****************************************************************************
 **
 ** xcb_glx_make_context_current_reply_t * xcb_glx_make_context_current_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_glx_make_context_current_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_glx_make_context_current_reply_t *
 **
 *****************************************************************************/
 
a2317 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_pbuffer_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint32_t            screen
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param xcb_glx_pbuffer_t   pbuffer
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2332 1
a2332 1
    
d2336 1
a2336 1
    
d2341 1
a2341 1
    
d2351 1
a2351 1
    
a2355 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_pbuffer
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint32_t            screen
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param xcb_glx_pbuffer_t   pbuffer
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2370 1
a2370 1
    
d2374 1
a2374 1
    
d2379 1
a2379 1
    
d2389 1
a2389 1
    
a2393 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_pbuffer_checked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_pbuffer_t  pbuffer
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2404 1
a2404 1
    
d2408 1
a2408 1
    
d2410 1
a2410 1
    
d2415 1
a2415 1
    
a2419 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_pbuffer
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_pbuffer_t  pbuffer
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2430 1
a2430 1
    
d2434 1
a2434 1
    
d2436 1
a2436 1
    
d2441 1
a2441 1
    
a2476 11

/*****************************************************************************
 **
 ** xcb_glx_get_drawable_attributes_cookie_t xcb_glx_get_drawable_attributes
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_drawable_t  drawable
 ** @@returns xcb_glx_get_drawable_attributes_cookie_t
 **
 *****************************************************************************/
 
d2487 1
a2487 1
    
d2491 1
a2491 1
    
d2493 1
a2493 1
    
d2498 1
a2498 1
    
a2502 11

/*****************************************************************************
 **
 ** xcb_glx_get_drawable_attributes_cookie_t xcb_glx_get_drawable_attributes_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_drawable_t  drawable
 ** @@returns xcb_glx_get_drawable_attributes_cookie_t
 **
 *****************************************************************************/
 
d2513 1
a2513 1
    
d2517 1
a2517 1
    
d2519 1
a2519 1
    
d2524 1
a2524 1
    
a2528 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_get_drawable_attributes_attribs
 ** 
 ** @@param const xcb_glx_get_drawable_attributes_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a2534 10

/*****************************************************************************
 **
 ** int xcb_glx_get_drawable_attributes_attribs_length
 ** 
 ** @@param const xcb_glx_get_drawable_attributes_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2540 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_drawable_attributes_attribs_end
 ** 
 ** @@param const xcb_glx_get_drawable_attributes_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2550 12

/*****************************************************************************
 **
 ** xcb_glx_get_drawable_attributes_reply_t * xcb_glx_get_drawable_attributes_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_glx_get_drawable_attributes_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_glx_get_drawable_attributes_reply_t *
 **
 *****************************************************************************/
 
a2589 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_change_drawable_attributes_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_drawable_t  drawable
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2602 1
a2602 1
    
d2606 1
a2606 1
    
d2609 1
a2609 1
    
d2619 1
a2619 1
    
a2623 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_change_drawable_attributes
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_drawable_t  drawable
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2636 1
a2636 1
    
d2640 1
a2640 1
    
d2643 1
a2643 1
    
d2653 1
a2653 1
    
a2688 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_window_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint32_t            screen
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param xcb_window_t        window
 ** @@param xcb_glx_window_t    glx_window
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2704 1
a2704 1
    
d2708 1
a2708 1
    
d2714 1
a2714 1
    
d2724 1
a2724 1
    
a2728 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_window
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint32_t            screen
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param xcb_window_t        window
 ** @@param xcb_glx_window_t    glx_window
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2744 1
a2744 1
    
d2748 1
a2748 1
    
d2754 1
a2754 1
    
d2764 1
a2764 1
    
a2768 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_window_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_glx_window_t  glxwindow
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2779 1
a2779 1
    
d2783 1
a2783 1
    
d2785 1
a2785 1
    
d2790 1
a2790 1
    
a2794 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_window
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_glx_window_t  glxwindow
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2805 1
a2805 1
    
d2809 1
a2809 1
    
d2811 1
a2811 1
    
d2816 1
a2816 1
    
a2875 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_set_client_info_arb_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@param uint32_t          num_versions
 ** @@param uint32_t          gl_str_len
 ** @@param uint32_t          glx_str_len
 ** @@param const uint32_t   *gl_versions
 ** @@param const char       *gl_extension_string
 ** @@param const char       *glx_extension_string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2893 1
a2893 1
    
d2897 1
a2897 1
    
d2903 1
a2903 1
    
d2923 1
a2923 1
    
a2927 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_set_client_info_arb
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@param uint32_t          num_versions
 ** @@param uint32_t          gl_str_len
 ** @@param uint32_t          glx_str_len
 ** @@param const uint32_t   *gl_versions
 ** @@param const char       *gl_extension_string
 ** @@param const char       *glx_extension_string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2945 1
a2945 1
    
d2949 1
a2949 1
    
d2955 1
a2955 1
    
d2975 1
a2975 1
    
a3010 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_context_attribs_arb_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_context_t   context
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param uint32_t            screen
 ** @@param xcb_glx_context_t   share_list
 ** @@param uint8_t             is_direct
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3027 1
a3027 1
    
d3031 1
a3031 1
    
d3039 1
a3039 1
    
d3049 1
a3049 1
    
a3053 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_context_attribs_arb
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_context_t   context
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param uint32_t            screen
 ** @@param xcb_glx_context_t   share_list
 ** @@param uint8_t             is_direct
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3070 1
a3070 1
    
d3074 1
a3074 1
    
d3082 1
a3082 1
    
d3092 1
a3092 1
    
a3151 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_set_client_info_2arb_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@param uint32_t          num_versions
 ** @@param uint32_t          gl_str_len
 ** @@param uint32_t          glx_str_len
 ** @@param const uint32_t   *gl_versions
 ** @@param const char       *gl_extension_string
 ** @@param const char       *glx_extension_string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3169 1
a3169 1
    
d3173 1
a3173 1
    
d3179 1
a3179 1
    
d3199 1
a3199 1
    
a3203 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_set_client_info_2arb
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@param uint32_t          num_versions
 ** @@param uint32_t          gl_str_len
 ** @@param uint32_t          glx_str_len
 ** @@param const uint32_t   *gl_versions
 ** @@param const char       *gl_extension_string
 ** @@param const char       *glx_extension_string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3221 1
a3221 1
    
d3225 1
a3225 1
    
d3231 1
a3231 1
    
d3251 1
a3251 1
    
a3255 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_new_list_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               list
 ** @@param uint32_t               mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3268 1
a3268 1
    
d3272 1
a3272 1
    
d3276 1
a3276 1
    
d3281 1
a3281 1
    
a3285 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_new_list
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               list
 ** @@param uint32_t               mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3298 1
a3298 1
    
d3302 1
a3302 1
    
d3306 1
a3306 1
    
d3311 1
a3311 1
    
a3315 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_end_list_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3326 1
a3326 1
    
d3330 1
a3330 1
    
d3332 1
a3332 1
    
d3337 1
a3337 1
    
a3341 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_end_list
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3352 1
a3352 1
    
d3356 1
a3356 1
    
d3358 1
a3358 1
    
d3363 1
a3363 1
    
a3367 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_lists_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               list
 ** @@param int32_t                range
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3380 1
a3380 1
    
d3384 1
a3384 1
    
d3388 1
a3388 1
    
d3393 1
a3393 1
    
a3397 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_lists
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               list
 ** @@param int32_t                range
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3410 1
a3410 1
    
d3414 1
a3414 1
    
d3418 1
a3418 1
    
d3423 1
a3423 1
    
a3427 12

/*****************************************************************************
 **
 ** xcb_glx_gen_lists_cookie_t xcb_glx_gen_lists
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                range
 ** @@returns xcb_glx_gen_lists_cookie_t
 **
 *****************************************************************************/
 
d3439 1
a3439 1
    
d3443 1
a3443 1
    
d3446 1
a3446 1
    
d3451 1
a3451 1
    
a3455 12

/*****************************************************************************
 **
 ** xcb_glx_gen_lists_cookie_t xcb_glx_gen_lists_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                range
 ** @@returns xcb_glx_gen_lists_cookie_t
 **
 *****************************************************************************/
 
d3467 1
a3467 1
    
d3471 1
a3471 1
    
d3474 1
a3474 1
    
d3479 1
a3479 1
    
a3483 12

/*****************************************************************************
 **
 ** xcb_glx_gen_lists_reply_t * xcb_glx_gen_lists_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_glx_gen_lists_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_glx_gen_lists_reply_t *
 **
 *****************************************************************************/
 
a3491 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_feedback_buffer_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                size
 ** @@param int32_t                type
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3504 1
a3504 1
    
d3508 1
a3508 1
    
d3512 1
a3512 1
    
d3517 1
a3517 1
    
a3521 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_feedback_buffer
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                size
 ** @@param int32_t                type
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3534 1
a3534 1
    
d3538 1
a3538 1
    
d3542 1
a3542 1
    
d3547 1
a3547 1
    
a3551 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_select_buffer_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                size
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3563 1
a3563 1
    
d3567 1
a3567 1
    
d3570 1
a3570 1
    
d3575 1
a3575 1
    
a3579 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_select_buffer
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                size
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3591 1
a3591 1
    
d3595 1
a3595 1
    
d3598 1
a3598 1
    
d3603 1
a3603 1
    
a3638 12

/*****************************************************************************
 **
 ** xcb_glx_render_mode_cookie_t xcb_glx_render_mode
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               mode
 ** @@returns xcb_glx_render_mode_cookie_t
 **
 *****************************************************************************/
 
d3650 1
a3650 1
    
d3654 1
a3654 1
    
d3657 1
a3657 1
    
d3662 1
a3662 1
    
a3666 12

/*****************************************************************************
 **
 ** xcb_glx_render_mode_cookie_t xcb_glx_render_mode_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               mode
 ** @@returns xcb_glx_render_mode_cookie_t
 **
 *****************************************************************************/
 
d3678 1
a3678 1
    
d3682 1
a3682 1
    
d3685 1
a3685 1
    
d3690 1
a3690 1
    
a3694 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_render_mode_data
 ** 
 ** @@param const xcb_glx_render_mode_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a3700 10

/*****************************************************************************
 **
 ** int xcb_glx_render_mode_data_length
 ** 
 ** @@param const xcb_glx_render_mode_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3706 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_render_mode_data_end
 ** 
 ** @@param const xcb_glx_render_mode_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3716 12

/*****************************************************************************
 **
 ** xcb_glx_render_mode_reply_t * xcb_glx_render_mode_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_glx_render_mode_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_glx_render_mode_reply_t *
 **
 *****************************************************************************/
 
a3724 11

/*****************************************************************************
 **
 ** xcb_glx_finish_cookie_t xcb_glx_finish
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_glx_finish_cookie_t
 **
 *****************************************************************************/
 
d3735 1
a3735 1
    
d3739 1
a3739 1
    
d3741 1
a3741 1
    
d3746 1
a3746 1
    
a3750 11

/*****************************************************************************
 **
 ** xcb_glx_finish_cookie_t xcb_glx_finish_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_glx_finish_cookie_t
 **
 *****************************************************************************/
 
d3761 1
a3761 1
    
d3765 1
a3765 1
    
d3767 1
a3767 1
    
d3772 1
a3772 1
    
a3776 12

/*****************************************************************************
 **
 ** xcb_glx_finish_reply_t * xcb_glx_finish_reply
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_glx_finish_cookie_t   cookie
 ** @@param xcb_generic_error_t     **e
 ** @@returns xcb_glx_finish_reply_t *
 **
 *****************************************************************************/
 
a3784 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_pixel_storef_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@param xcb_glx_float32_t      datum
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3797 1
a3797 1
    
d3801 1
a3801 1
    
d3805 1
a3805 1
    
d3810 1
a3810 1
    
a3814 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_pixel_storef
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@param xcb_glx_float32_t      datum
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3827 1
a3827 1
    
d3831 1
a3831 1
    
d3835 1
a3835 1
    
d3840 1
a3840 1
    
a3844 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_pixel_storei_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@param int32_t                datum
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3857 1
a3857 1
    
d3861 1
a3861 1
    
d3865 1
a3865 1
    
d3870 1
a3870 1
    
a3874 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_pixel_storei
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@param int32_t                datum
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3887 1
a3887 1
    
d3891 1
a3891 1
    
d3895 1
a3895 1
    
d3900 1
a3900 1
    
a3935 19

/*****************************************************************************
 **
 ** xcb_glx_read_pixels_cookie_t xcb_glx_read_pixels
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                x
 ** @@param int32_t                y
 ** @@param int32_t                width
 ** @@param int32_t                height
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@param uint8_t                lsb_first
 ** @@returns xcb_glx_read_pixels_cookie_t
 **
 *****************************************************************************/
 
d3954 1
a3954 1
    
d3958 1
a3958 1
    
d3968 1
a3968 1
    
d3973 1
a3973 1
    
a3977 19

/*****************************************************************************
 **
 ** xcb_glx_read_pixels_cookie_t xcb_glx_read_pixels_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                x
 ** @@param int32_t                y
 ** @@param int32_t                width
 ** @@param int32_t                height
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@param uint8_t                lsb_first
 ** @@returns xcb_glx_read_pixels_cookie_t
 **
 *****************************************************************************/
 
d3996 1
a3996 1
    
d4000 1
a4000 1
    
d4010 1
a4010 1
    
d4015 1
a4015 1
    
a4019 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_read_pixels_data
 ** 
 ** @@param const xcb_glx_read_pixels_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a4025 10

/*****************************************************************************
 **
 ** int xcb_glx_read_pixels_data_length
 ** 
 ** @@param const xcb_glx_read_pixels_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4031 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_read_pixels_data_end
 ** 
 ** @@param const xcb_glx_read_pixels_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4041 12

/*****************************************************************************
 **
 ** xcb_glx_read_pixels_reply_t * xcb_glx_read_pixels_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_glx_read_pixels_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_glx_read_pixels_reply_t *
 **
 *****************************************************************************/
 
a4080 12

/*****************************************************************************
 **
 ** xcb_glx_get_booleanv_cookie_t xcb_glx_get_booleanv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                pname
 ** @@returns xcb_glx_get_booleanv_cookie_t
 **
 *****************************************************************************/
 
d4092 1
a4092 1
    
d4096 1
a4096 1
    
d4099 1
a4099 1
    
d4104 1
a4104 1
    
a4108 12

/*****************************************************************************
 **
 ** xcb_glx_get_booleanv_cookie_t xcb_glx_get_booleanv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                pname
 ** @@returns xcb_glx_get_booleanv_cookie_t
 **
 *****************************************************************************/
 
d4120 1
a4120 1
    
d4124 1
a4124 1
    
d4127 1
a4127 1
    
d4132 1
a4132 1
    
a4136 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_booleanv_data
 ** 
 ** @@param const xcb_glx_get_booleanv_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a4142 10

/*****************************************************************************
 **
 ** int xcb_glx_get_booleanv_data_length
 ** 
 ** @@param const xcb_glx_get_booleanv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4148 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_booleanv_data_end
 ** 
 ** @@param const xcb_glx_get_booleanv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4158 12

/*****************************************************************************
 **
 ** xcb_glx_get_booleanv_reply_t * xcb_glx_get_booleanv_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_glx_get_booleanv_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_glx_get_booleanv_reply_t *
 **
 *****************************************************************************/
 
a4197 12

/*****************************************************************************
 **
 ** xcb_glx_get_clip_plane_cookie_t xcb_glx_get_clip_plane
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                plane
 ** @@returns xcb_glx_get_clip_plane_cookie_t
 **
 *****************************************************************************/
 
d4209 1
a4209 1
    
d4213 1
a4213 1
    
d4216 1
a4216 1
    
d4221 1
a4221 1
    
a4225 12

/*****************************************************************************
 **
 ** xcb_glx_get_clip_plane_cookie_t xcb_glx_get_clip_plane_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                plane
 ** @@returns xcb_glx_get_clip_plane_cookie_t
 **
 *****************************************************************************/
 
d4237 1
a4237 1
    
d4241 1
a4241 1
    
d4244 1
a4244 1
    
d4249 1
a4249 1
    
a4253 10

/*****************************************************************************
 **
 ** xcb_glx_float64_t * xcb_glx_get_clip_plane_data
 ** 
 ** @@param const xcb_glx_get_clip_plane_reply_t *R
 ** @@returns xcb_glx_float64_t *
 **
 *****************************************************************************/
 
a4259 10

/*****************************************************************************
 **
 ** int xcb_glx_get_clip_plane_data_length
 ** 
 ** @@param const xcb_glx_get_clip_plane_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4265 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_clip_plane_data_end
 ** 
 ** @@param const xcb_glx_get_clip_plane_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4275 12

/*****************************************************************************
 **
 ** xcb_glx_get_clip_plane_reply_t * xcb_glx_get_clip_plane_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_glx_get_clip_plane_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_glx_get_clip_plane_reply_t *
 **
 *****************************************************************************/
 
a4314 12

/*****************************************************************************
 **
 ** xcb_glx_get_doublev_cookie_t xcb_glx_get_doublev
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_doublev_cookie_t
 **
 *****************************************************************************/
 
d4326 1
a4326 1
    
d4330 1
a4330 1
    
d4333 1
a4333 1
    
d4338 1
a4338 1
    
a4342 12

/*****************************************************************************
 **
 ** xcb_glx_get_doublev_cookie_t xcb_glx_get_doublev_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_doublev_cookie_t
 **
 *****************************************************************************/
 
d4354 1
a4354 1
    
d4358 1
a4358 1
    
d4361 1
a4361 1
    
d4366 1
a4366 1
    
a4370 10

/*****************************************************************************
 **
 ** xcb_glx_float64_t * xcb_glx_get_doublev_data
 ** 
 ** @@param const xcb_glx_get_doublev_reply_t *R
 ** @@returns xcb_glx_float64_t *
 **
 *****************************************************************************/
 
a4376 10

/*****************************************************************************
 **
 ** int xcb_glx_get_doublev_data_length
 ** 
 ** @@param const xcb_glx_get_doublev_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4382 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_doublev_data_end
 ** 
 ** @@param const xcb_glx_get_doublev_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4392 12

/*****************************************************************************
 **
 ** xcb_glx_get_doublev_reply_t * xcb_glx_get_doublev_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_glx_get_doublev_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_glx_get_doublev_reply_t *
 **
 *****************************************************************************/
 
a4400 11

/*****************************************************************************
 **
 ** xcb_glx_get_error_cookie_t xcb_glx_get_error
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_glx_get_error_cookie_t
 **
 *****************************************************************************/
 
d4411 1
a4411 1
    
d4415 1
a4415 1
    
d4417 1
a4417 1
    
d4422 1
a4422 1
    
a4426 11

/*****************************************************************************
 **
 ** xcb_glx_get_error_cookie_t xcb_glx_get_error_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_glx_get_error_cookie_t
 **
 *****************************************************************************/
 
d4437 1
a4437 1
    
d4441 1
a4441 1
    
d4443 1
a4443 1
    
d4448 1
a4448 1
    
a4452 12

/*****************************************************************************
 **
 ** xcb_glx_get_error_reply_t * xcb_glx_get_error_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_glx_get_error_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_glx_get_error_reply_t *
 **
 *****************************************************************************/
 
a4491 12

/*****************************************************************************
 **
 ** xcb_glx_get_floatv_cookie_t xcb_glx_get_floatv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_floatv_cookie_t
 **
 *****************************************************************************/
 
d4503 1
a4503 1
    
d4507 1
a4507 1
    
d4510 1
a4510 1
    
d4515 1
a4515 1
    
a4519 12

/*****************************************************************************
 **
 ** xcb_glx_get_floatv_cookie_t xcb_glx_get_floatv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_floatv_cookie_t
 **
 *****************************************************************************/
 
d4531 1
a4531 1
    
d4535 1
a4535 1
    
d4538 1
a4538 1
    
d4543 1
a4543 1
    
a4547 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_floatv_data
 ** 
 ** @@param const xcb_glx_get_floatv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a4553 10

/*****************************************************************************
 **
 ** int xcb_glx_get_floatv_data_length
 ** 
 ** @@param const xcb_glx_get_floatv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4559 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_floatv_data_end
 ** 
 ** @@param const xcb_glx_get_floatv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4569 12

/*****************************************************************************
 **
 ** xcb_glx_get_floatv_reply_t * xcb_glx_get_floatv_reply
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_glx_get_floatv_cookie_t   cookie
 ** @@param xcb_generic_error_t         **e
 ** @@returns xcb_glx_get_floatv_reply_t *
 **
 *****************************************************************************/
 
a4608 12

/*****************************************************************************
 **
 ** xcb_glx_get_integerv_cookie_t xcb_glx_get_integerv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_integerv_cookie_t
 **
 *****************************************************************************/
 
d4620 1
a4620 1
    
d4624 1
a4624 1
    
d4627 1
a4627 1
    
d4632 1
a4632 1
    
a4636 12

/*****************************************************************************
 **
 ** xcb_glx_get_integerv_cookie_t xcb_glx_get_integerv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_integerv_cookie_t
 **
 *****************************************************************************/
 
d4648 1
a4648 1
    
d4652 1
a4652 1
    
d4655 1
a4655 1
    
d4660 1
a4660 1
    
a4664 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_integerv_data
 ** 
 ** @@param const xcb_glx_get_integerv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a4670 10

/*****************************************************************************
 **
 ** int xcb_glx_get_integerv_data_length
 ** 
 ** @@param const xcb_glx_get_integerv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4676 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_integerv_data_end
 ** 
 ** @@param const xcb_glx_get_integerv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4686 12

/*****************************************************************************
 **
 ** xcb_glx_get_integerv_reply_t * xcb_glx_get_integerv_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_glx_get_integerv_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_glx_get_integerv_reply_t *
 **
 *****************************************************************************/
 
a4725 13

/*****************************************************************************
 **
 ** xcb_glx_get_lightfv_cookie_t xcb_glx_get_lightfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               light
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_lightfv_cookie_t
 **
 *****************************************************************************/
 
d4738 1
a4738 1
    
d4742 1
a4742 1
    
d4746 1
a4746 1
    
d4751 1
a4751 1
    
a4755 13

/*****************************************************************************
 **
 ** xcb_glx_get_lightfv_cookie_t xcb_glx_get_lightfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               light
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_lightfv_cookie_t
 **
 *****************************************************************************/
 
d4768 1
a4768 1
    
d4772 1
a4772 1
    
d4776 1
a4776 1
    
d4781 1
a4781 1
    
a4785 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_lightfv_data
 ** 
 ** @@param const xcb_glx_get_lightfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a4791 10

/*****************************************************************************
 **
 ** int xcb_glx_get_lightfv_data_length
 ** 
 ** @@param const xcb_glx_get_lightfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4797 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_lightfv_data_end
 ** 
 ** @@param const xcb_glx_get_lightfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4807 12

/*****************************************************************************
 **
 ** xcb_glx_get_lightfv_reply_t * xcb_glx_get_lightfv_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_glx_get_lightfv_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_glx_get_lightfv_reply_t *
 **
 *****************************************************************************/
 
a4846 13

/*****************************************************************************
 **
 ** xcb_glx_get_lightiv_cookie_t xcb_glx_get_lightiv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               light
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_lightiv_cookie_t
 **
 *****************************************************************************/
 
d4859 1
a4859 1
    
d4863 1
a4863 1
    
d4867 1
a4867 1
    
d4872 1
a4872 1
    
a4876 13

/*****************************************************************************
 **
 ** xcb_glx_get_lightiv_cookie_t xcb_glx_get_lightiv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               light
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_lightiv_cookie_t
 **
 *****************************************************************************/
 
d4889 1
a4889 1
    
d4893 1
a4893 1
    
d4897 1
a4897 1
    
d4902 1
a4902 1
    
a4906 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_lightiv_data
 ** 
 ** @@param const xcb_glx_get_lightiv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a4912 10

/*****************************************************************************
 **
 ** int xcb_glx_get_lightiv_data_length
 ** 
 ** @@param const xcb_glx_get_lightiv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4918 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_lightiv_data_end
 ** 
 ** @@param const xcb_glx_get_lightiv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4928 12

/*****************************************************************************
 **
 ** xcb_glx_get_lightiv_reply_t * xcb_glx_get_lightiv_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_glx_get_lightiv_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_glx_get_lightiv_reply_t *
 **
 *****************************************************************************/
 
a4967 13

/*****************************************************************************
 **
 ** xcb_glx_get_mapdv_cookie_t xcb_glx_get_mapdv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               query
 ** @@returns xcb_glx_get_mapdv_cookie_t
 **
 *****************************************************************************/
 
d4980 1
a4980 1
    
d4984 1
a4984 1
    
d4988 1
a4988 1
    
d4993 1
a4993 1
    
a4997 13

/*****************************************************************************
 **
 ** xcb_glx_get_mapdv_cookie_t xcb_glx_get_mapdv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               query
 ** @@returns xcb_glx_get_mapdv_cookie_t
 **
 *****************************************************************************/
 
d5010 1
a5010 1
    
d5014 1
a5014 1
    
d5018 1
a5018 1
    
d5023 1
a5023 1
    
a5027 10

/*****************************************************************************
 **
 ** xcb_glx_float64_t * xcb_glx_get_mapdv_data
 ** 
 ** @@param const xcb_glx_get_mapdv_reply_t *R
 ** @@returns xcb_glx_float64_t *
 **
 *****************************************************************************/
 
a5033 10

/*****************************************************************************
 **
 ** int xcb_glx_get_mapdv_data_length
 ** 
 ** @@param const xcb_glx_get_mapdv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5039 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_mapdv_data_end
 ** 
 ** @@param const xcb_glx_get_mapdv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5049 12

/*****************************************************************************
 **
 ** xcb_glx_get_mapdv_reply_t * xcb_glx_get_mapdv_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_glx_get_mapdv_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_glx_get_mapdv_reply_t *
 **
 *****************************************************************************/
 
a5088 13

/*****************************************************************************
 **
 ** xcb_glx_get_mapfv_cookie_t xcb_glx_get_mapfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               query
 ** @@returns xcb_glx_get_mapfv_cookie_t
 **
 *****************************************************************************/
 
d5101 1
a5101 1
    
d5105 1
a5105 1
    
d5109 1
a5109 1
    
d5114 1
a5114 1
    
a5118 13

/*****************************************************************************
 **
 ** xcb_glx_get_mapfv_cookie_t xcb_glx_get_mapfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               query
 ** @@returns xcb_glx_get_mapfv_cookie_t
 **
 *****************************************************************************/
 
d5131 1
a5131 1
    
d5135 1
a5135 1
    
d5139 1
a5139 1
    
d5144 1
a5144 1
    
a5148 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_mapfv_data
 ** 
 ** @@param const xcb_glx_get_mapfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a5154 10

/*****************************************************************************
 **
 ** int xcb_glx_get_mapfv_data_length
 ** 
 ** @@param const xcb_glx_get_mapfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5160 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_mapfv_data_end
 ** 
 ** @@param const xcb_glx_get_mapfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5170 12

/*****************************************************************************
 **
 ** xcb_glx_get_mapfv_reply_t * xcb_glx_get_mapfv_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_glx_get_mapfv_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_glx_get_mapfv_reply_t *
 **
 *****************************************************************************/
 
a5209 13

/*****************************************************************************
 **
 ** xcb_glx_get_mapiv_cookie_t xcb_glx_get_mapiv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               query
 ** @@returns xcb_glx_get_mapiv_cookie_t
 **
 *****************************************************************************/
 
d5222 1
a5222 1
    
d5226 1
a5226 1
    
d5230 1
a5230 1
    
d5235 1
a5235 1
    
a5239 13

/*****************************************************************************
 **
 ** xcb_glx_get_mapiv_cookie_t xcb_glx_get_mapiv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               query
 ** @@returns xcb_glx_get_mapiv_cookie_t
 **
 *****************************************************************************/
 
d5252 1
a5252 1
    
d5256 1
a5256 1
    
d5260 1
a5260 1
    
d5265 1
a5265 1
    
a5269 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_mapiv_data
 ** 
 ** @@param const xcb_glx_get_mapiv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a5275 10

/*****************************************************************************
 **
 ** int xcb_glx_get_mapiv_data_length
 ** 
 ** @@param const xcb_glx_get_mapiv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5281 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_mapiv_data_end
 ** 
 ** @@param const xcb_glx_get_mapiv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5291 12

/*****************************************************************************
 **
 ** xcb_glx_get_mapiv_reply_t * xcb_glx_get_mapiv_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_glx_get_mapiv_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_glx_get_mapiv_reply_t *
 **
 *****************************************************************************/
 
a5330 13

/*****************************************************************************
 **
 ** xcb_glx_get_materialfv_cookie_t xcb_glx_get_materialfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               face
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_materialfv_cookie_t
 **
 *****************************************************************************/
 
d5343 1
a5343 1
    
d5347 1
a5347 1
    
d5351 1
a5351 1
    
d5356 1
a5356 1
    
a5360 13

/*****************************************************************************
 **
 ** xcb_glx_get_materialfv_cookie_t xcb_glx_get_materialfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               face
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_materialfv_cookie_t
 **
 *****************************************************************************/
 
d5373 1
a5373 1
    
d5377 1
a5377 1
    
d5381 1
a5381 1
    
d5386 1
a5386 1
    
a5390 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_materialfv_data
 ** 
 ** @@param const xcb_glx_get_materialfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a5396 10

/*****************************************************************************
 **
 ** int xcb_glx_get_materialfv_data_length
 ** 
 ** @@param const xcb_glx_get_materialfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5402 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_materialfv_data_end
 ** 
 ** @@param const xcb_glx_get_materialfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5412 12

/*****************************************************************************
 **
 ** xcb_glx_get_materialfv_reply_t * xcb_glx_get_materialfv_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_glx_get_materialfv_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_glx_get_materialfv_reply_t *
 **
 *****************************************************************************/
 
a5451 13

/*****************************************************************************
 **
 ** xcb_glx_get_materialiv_cookie_t xcb_glx_get_materialiv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               face
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_materialiv_cookie_t
 **
 *****************************************************************************/
 
d5464 1
a5464 1
    
d5468 1
a5468 1
    
d5472 1
a5472 1
    
d5477 1
a5477 1
    
a5481 13

/*****************************************************************************
 **
 ** xcb_glx_get_materialiv_cookie_t xcb_glx_get_materialiv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               face
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_materialiv_cookie_t
 **
 *****************************************************************************/
 
d5494 1
a5494 1
    
d5498 1
a5498 1
    
d5502 1
a5502 1
    
d5507 1
a5507 1
    
a5511 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_materialiv_data
 ** 
 ** @@param const xcb_glx_get_materialiv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a5517 10

/*****************************************************************************
 **
 ** int xcb_glx_get_materialiv_data_length
 ** 
 ** @@param const xcb_glx_get_materialiv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5523 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_materialiv_data_end
 ** 
 ** @@param const xcb_glx_get_materialiv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5533 12

/*****************************************************************************
 **
 ** xcb_glx_get_materialiv_reply_t * xcb_glx_get_materialiv_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_glx_get_materialiv_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_glx_get_materialiv_reply_t *
 **
 *****************************************************************************/
 
a5572 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapfv_cookie_t xcb_glx_get_pixel_mapfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               map
 ** @@returns xcb_glx_get_pixel_mapfv_cookie_t
 **
 *****************************************************************************/
 
d5584 1
a5584 1
    
d5588 1
a5588 1
    
d5591 1
a5591 1
    
d5596 1
a5596 1
    
a5600 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapfv_cookie_t xcb_glx_get_pixel_mapfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               map
 ** @@returns xcb_glx_get_pixel_mapfv_cookie_t
 **
 *****************************************************************************/
 
d5612 1
a5612 1
    
d5616 1
a5616 1
    
d5619 1
a5619 1
    
d5624 1
a5624 1
    
a5628 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_pixel_mapfv_data
 ** 
 ** @@param const xcb_glx_get_pixel_mapfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a5634 10

/*****************************************************************************
 **
 ** int xcb_glx_get_pixel_mapfv_data_length
 ** 
 ** @@param const xcb_glx_get_pixel_mapfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5640 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_pixel_mapfv_data_end
 ** 
 ** @@param const xcb_glx_get_pixel_mapfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5650 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapfv_reply_t * xcb_glx_get_pixel_mapfv_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_glx_get_pixel_mapfv_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_glx_get_pixel_mapfv_reply_t *
 **
 *****************************************************************************/
 
a5689 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapuiv_cookie_t xcb_glx_get_pixel_mapuiv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               map
 ** @@returns xcb_glx_get_pixel_mapuiv_cookie_t
 **
 *****************************************************************************/
 
d5701 1
a5701 1
    
d5705 1
a5705 1
    
d5708 1
a5708 1
    
d5713 1
a5713 1
    
a5717 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapuiv_cookie_t xcb_glx_get_pixel_mapuiv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               map
 ** @@returns xcb_glx_get_pixel_mapuiv_cookie_t
 **
 *****************************************************************************/
 
d5729 1
a5729 1
    
d5733 1
a5733 1
    
d5736 1
a5736 1
    
d5741 1
a5741 1
    
a5745 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_get_pixel_mapuiv_data
 ** 
 ** @@param const xcb_glx_get_pixel_mapuiv_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a5751 10

/*****************************************************************************
 **
 ** int xcb_glx_get_pixel_mapuiv_data_length
 ** 
 ** @@param const xcb_glx_get_pixel_mapuiv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5757 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_pixel_mapuiv_data_end
 ** 
 ** @@param const xcb_glx_get_pixel_mapuiv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5767 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapuiv_reply_t * xcb_glx_get_pixel_mapuiv_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_glx_get_pixel_mapuiv_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_glx_get_pixel_mapuiv_reply_t *
 **
 *****************************************************************************/
 
a5806 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapusv_cookie_t xcb_glx_get_pixel_mapusv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               map
 ** @@returns xcb_glx_get_pixel_mapusv_cookie_t
 **
 *****************************************************************************/
 
d5818 1
a5818 1
    
d5822 1
a5822 1
    
d5825 1
a5825 1
    
d5830 1
a5830 1
    
a5834 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapusv_cookie_t xcb_glx_get_pixel_mapusv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               map
 ** @@returns xcb_glx_get_pixel_mapusv_cookie_t
 **
 *****************************************************************************/
 
d5846 1
a5846 1
    
d5850 1
a5850 1
    
d5853 1
a5853 1
    
d5858 1
a5858 1
    
a5862 10

/*****************************************************************************
 **
 ** uint16_t * xcb_glx_get_pixel_mapusv_data
 ** 
 ** @@param const xcb_glx_get_pixel_mapusv_reply_t *R
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a5868 10

/*****************************************************************************
 **
 ** int xcb_glx_get_pixel_mapusv_data_length
 ** 
 ** @@param const xcb_glx_get_pixel_mapusv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5874 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_pixel_mapusv_data_end
 ** 
 ** @@param const xcb_glx_get_pixel_mapusv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5884 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapusv_reply_t * xcb_glx_get_pixel_mapusv_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_glx_get_pixel_mapusv_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_glx_get_pixel_mapusv_reply_t *
 **
 *****************************************************************************/
 
a5923 12

/*****************************************************************************
 **
 ** xcb_glx_get_polygon_stipple_cookie_t xcb_glx_get_polygon_stipple
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint8_t                lsb_first
 ** @@returns xcb_glx_get_polygon_stipple_cookie_t
 **
 *****************************************************************************/
 
d5935 1
a5935 1
    
d5939 1
a5939 1
    
d5942 1
a5942 1
    
d5947 1
a5947 1
    
a5951 12

/*****************************************************************************
 **
 ** xcb_glx_get_polygon_stipple_cookie_t xcb_glx_get_polygon_stipple_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint8_t                lsb_first
 ** @@returns xcb_glx_get_polygon_stipple_cookie_t
 **
 *****************************************************************************/
 
d5963 1
a5963 1
    
d5967 1
a5967 1
    
d5970 1
a5970 1
    
d5975 1
a5975 1
    
a5979 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_polygon_stipple_data
 ** 
 ** @@param const xcb_glx_get_polygon_stipple_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a5985 10

/*****************************************************************************
 **
 ** int xcb_glx_get_polygon_stipple_data_length
 ** 
 ** @@param const xcb_glx_get_polygon_stipple_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5991 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_polygon_stipple_data_end
 ** 
 ** @@param const xcb_glx_get_polygon_stipple_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6001 12

/*****************************************************************************
 **
 ** xcb_glx_get_polygon_stipple_reply_t * xcb_glx_get_polygon_stipple_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_glx_get_polygon_stipple_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_glx_get_polygon_stipple_reply_t *
 **
 *****************************************************************************/
 
a6040 12

/*****************************************************************************
 **
 ** xcb_glx_get_string_cookie_t xcb_glx_get_string
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               name
 ** @@returns xcb_glx_get_string_cookie_t
 **
 *****************************************************************************/
 
d6052 1
a6052 1
    
d6056 1
a6056 1
    
d6059 1
a6059 1
    
d6064 1
a6064 1
    
a6068 12

/*****************************************************************************
 **
 ** xcb_glx_get_string_cookie_t xcb_glx_get_string_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               name
 ** @@returns xcb_glx_get_string_cookie_t
 **
 *****************************************************************************/
 
d6080 1
a6080 1
    
d6084 1
a6084 1
    
d6087 1
a6087 1
    
d6092 1
a6092 1
    
a6096 10

/*****************************************************************************
 **
 ** char * xcb_glx_get_string_string
 ** 
 ** @@param const xcb_glx_get_string_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a6102 10

/*****************************************************************************
 **
 ** int xcb_glx_get_string_string_length
 ** 
 ** @@param const xcb_glx_get_string_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6108 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_string_string_end
 ** 
 ** @@param const xcb_glx_get_string_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6118 12

/*****************************************************************************
 **
 ** xcb_glx_get_string_reply_t * xcb_glx_get_string_reply
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_glx_get_string_cookie_t   cookie
 ** @@param xcb_generic_error_t         **e
 ** @@returns xcb_glx_get_string_reply_t *
 **
 *****************************************************************************/
 
a6157 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_envfv_cookie_t xcb_glx_get_tex_envfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_envfv_cookie_t
 **
 *****************************************************************************/
 
d6170 1
a6170 1
    
d6174 1
a6174 1
    
d6178 1
a6178 1
    
d6183 1
a6183 1
    
a6187 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_envfv_cookie_t xcb_glx_get_tex_envfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_envfv_cookie_t
 **
 *****************************************************************************/
 
d6200 1
a6200 1
    
d6204 1
a6204 1
    
d6208 1
a6208 1
    
d6213 1
a6213 1
    
a6217 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_tex_envfv_data
 ** 
 ** @@param const xcb_glx_get_tex_envfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a6223 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_envfv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_envfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6229 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_envfv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_envfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6239 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_envfv_reply_t * xcb_glx_get_tex_envfv_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_get_tex_envfv_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_get_tex_envfv_reply_t *
 **
 *****************************************************************************/
 
a6278 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_enviv_cookie_t xcb_glx_get_tex_enviv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_enviv_cookie_t
 **
 *****************************************************************************/
 
d6291 1
a6291 1
    
d6295 1
a6295 1
    
d6299 1
a6299 1
    
d6304 1
a6304 1
    
a6308 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_enviv_cookie_t xcb_glx_get_tex_enviv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_enviv_cookie_t
 **
 *****************************************************************************/
 
d6321 1
a6321 1
    
d6325 1
a6325 1
    
d6329 1
a6329 1
    
d6334 1
a6334 1
    
a6338 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_tex_enviv_data
 ** 
 ** @@param const xcb_glx_get_tex_enviv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a6344 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_enviv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_enviv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6350 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_enviv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_enviv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6360 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_enviv_reply_t * xcb_glx_get_tex_enviv_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_get_tex_enviv_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_get_tex_enviv_reply_t *
 **
 *****************************************************************************/
 
a6399 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_gendv_cookie_t xcb_glx_get_tex_gendv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               coord
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_gendv_cookie_t
 **
 *****************************************************************************/
 
d6412 1
a6412 1
    
d6416 1
a6416 1
    
d6420 1
a6420 1
    
d6425 1
a6425 1
    
a6429 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_gendv_cookie_t xcb_glx_get_tex_gendv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               coord
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_gendv_cookie_t
 **
 *****************************************************************************/
 
d6442 1
a6442 1
    
d6446 1
a6446 1
    
d6450 1
a6450 1
    
d6455 1
a6455 1
    
a6459 10

/*****************************************************************************
 **
 ** xcb_glx_float64_t * xcb_glx_get_tex_gendv_data
 ** 
 ** @@param const xcb_glx_get_tex_gendv_reply_t *R
 ** @@returns xcb_glx_float64_t *
 **
 *****************************************************************************/
 
a6465 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_gendv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_gendv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6471 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_gendv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_gendv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6481 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_gendv_reply_t * xcb_glx_get_tex_gendv_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_get_tex_gendv_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_get_tex_gendv_reply_t *
 **
 *****************************************************************************/
 
a6520 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_genfv_cookie_t xcb_glx_get_tex_genfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               coord
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_genfv_cookie_t
 **
 *****************************************************************************/
 
d6533 1
a6533 1
    
d6537 1
a6537 1
    
d6541 1
a6541 1
    
d6546 1
a6546 1
    
a6550 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_genfv_cookie_t xcb_glx_get_tex_genfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               coord
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_genfv_cookie_t
 **
 *****************************************************************************/
 
d6563 1
a6563 1
    
d6567 1
a6567 1
    
d6571 1
a6571 1
    
d6576 1
a6576 1
    
a6580 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_tex_genfv_data
 ** 
 ** @@param const xcb_glx_get_tex_genfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a6586 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_genfv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_genfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6592 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_genfv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_genfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6602 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_genfv_reply_t * xcb_glx_get_tex_genfv_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_get_tex_genfv_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_get_tex_genfv_reply_t *
 **
 *****************************************************************************/
 
a6641 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_geniv_cookie_t xcb_glx_get_tex_geniv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               coord
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_geniv_cookie_t
 **
 *****************************************************************************/
 
d6654 1
a6654 1
    
d6658 1
a6658 1
    
d6662 1
a6662 1
    
d6667 1
a6667 1
    
a6671 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_geniv_cookie_t xcb_glx_get_tex_geniv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               coord
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_geniv_cookie_t
 **
 *****************************************************************************/
 
d6684 1
a6684 1
    
d6688 1
a6688 1
    
d6692 1
a6692 1
    
d6697 1
a6697 1
    
a6701 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_tex_geniv_data
 ** 
 ** @@param const xcb_glx_get_tex_geniv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a6707 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_geniv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_geniv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6713 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_geniv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_geniv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6723 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_geniv_reply_t * xcb_glx_get_tex_geniv_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_get_tex_geniv_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_get_tex_geniv_reply_t *
 **
 *****************************************************************************/
 
a6762 16

/*****************************************************************************
 **
 ** xcb_glx_get_tex_image_cookie_t xcb_glx_get_tex_image
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_tex_image_cookie_t
 **
 *****************************************************************************/
 
d6778 1
a6778 1
    
d6782 1
a6782 1
    
d6789 1
a6789 1
    
d6794 1
a6794 1
    
a6798 16

/*****************************************************************************
 **
 ** xcb_glx_get_tex_image_cookie_t xcb_glx_get_tex_image_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_tex_image_cookie_t
 **
 *****************************************************************************/
 
d6814 1
a6814 1
    
d6818 1
a6818 1
    
d6825 1
a6825 1
    
d6830 1
a6830 1
    
a6834 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_tex_image_data
 ** 
 ** @@param const xcb_glx_get_tex_image_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a6840 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_image_data_length
 ** 
 ** @@param const xcb_glx_get_tex_image_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6846 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_image_data_end
 ** 
 ** @@param const xcb_glx_get_tex_image_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6856 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_image_reply_t * xcb_glx_get_tex_image_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_get_tex_image_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_get_tex_image_reply_t *
 **
 *****************************************************************************/
 
a6895 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_parameterfv_cookie_t xcb_glx_get_tex_parameterfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d6908 1
a6908 1
    
d6912 1
a6912 1
    
d6916 1
a6916 1
    
d6921 1
a6921 1
    
a6925 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_parameterfv_cookie_t xcb_glx_get_tex_parameterfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d6938 1
a6938 1
    
d6942 1
a6942 1
    
d6946 1
a6946 1
    
d6951 1
a6951 1
    
a6955 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_tex_parameterfv_data
 ** 
 ** @@param const xcb_glx_get_tex_parameterfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a6961 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_parameterfv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_parameterfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6967 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_parameterfv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_parameterfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6977 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_parameterfv_reply_t * xcb_glx_get_tex_parameterfv_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_glx_get_tex_parameterfv_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_glx_get_tex_parameterfv_reply_t *
 **
 *****************************************************************************/
 
a7016 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_parameteriv_cookie_t xcb_glx_get_tex_parameteriv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d7029 1
a7029 1
    
d7033 1
a7033 1
    
d7037 1
a7037 1
    
d7042 1
a7042 1
    
a7046 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_parameteriv_cookie_t xcb_glx_get_tex_parameteriv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d7059 1
a7059 1
    
d7063 1
a7063 1
    
d7067 1
a7067 1
    
d7072 1
a7072 1
    
a7076 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_tex_parameteriv_data
 ** 
 ** @@param const xcb_glx_get_tex_parameteriv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a7082 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_parameteriv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_parameteriv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7088 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_parameteriv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_parameteriv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7098 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_parameteriv_reply_t * xcb_glx_get_tex_parameteriv_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_glx_get_tex_parameteriv_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_glx_get_tex_parameteriv_reply_t *
 **
 *****************************************************************************/
 
a7137 14

/*****************************************************************************
 **
 ** xcb_glx_get_tex_level_parameterfv_cookie_t xcb_glx_get_tex_level_parameterfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_level_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d7151 1
a7151 1
    
d7155 1
a7155 1
    
d7160 1
a7160 1
    
d7165 1
a7165 1
    
a7169 14

/*****************************************************************************
 **
 ** xcb_glx_get_tex_level_parameterfv_cookie_t xcb_glx_get_tex_level_parameterfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_level_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d7183 1
a7183 1
    
d7187 1
a7187 1
    
d7192 1
a7192 1
    
d7197 1
a7197 1
    
a7201 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_tex_level_parameterfv_data
 ** 
 ** @@param const xcb_glx_get_tex_level_parameterfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a7207 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_level_parameterfv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_level_parameterfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7213 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_level_parameterfv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_level_parameterfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7223 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_level_parameterfv_reply_t * xcb_glx_get_tex_level_parameterfv_reply
 ** 
 ** @@param xcb_connection_t                            *c
 ** @@param xcb_glx_get_tex_level_parameterfv_cookie_t   cookie
 ** @@param xcb_generic_error_t                        **e
 ** @@returns xcb_glx_get_tex_level_parameterfv_reply_t *
 **
 *****************************************************************************/
 
a7262 14

/*****************************************************************************
 **
 ** xcb_glx_get_tex_level_parameteriv_cookie_t xcb_glx_get_tex_level_parameteriv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_level_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d7276 1
a7276 1
    
d7280 1
a7280 1
    
d7285 1
a7285 1
    
d7290 1
a7290 1
    
a7294 14

/*****************************************************************************
 **
 ** xcb_glx_get_tex_level_parameteriv_cookie_t xcb_glx_get_tex_level_parameteriv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_level_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d7308 1
a7308 1
    
d7312 1
a7312 1
    
d7317 1
a7317 1
    
d7322 1
a7322 1
    
a7326 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_tex_level_parameteriv_data
 ** 
 ** @@param const xcb_glx_get_tex_level_parameteriv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a7332 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_level_parameteriv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_level_parameteriv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7338 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_level_parameteriv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_level_parameteriv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7348 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_level_parameteriv_reply_t * xcb_glx_get_tex_level_parameteriv_reply
 ** 
 ** @@param xcb_connection_t                            *c
 ** @@param xcb_glx_get_tex_level_parameteriv_cookie_t   cookie
 ** @@param xcb_generic_error_t                        **e
 ** @@returns xcb_glx_get_tex_level_parameteriv_reply_t *
 **
 *****************************************************************************/
 
a7356 12

/*****************************************************************************
 **
 ** xcb_glx_is_list_cookie_t xcb_glx_is_list
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               list
 ** @@returns xcb_glx_is_list_cookie_t
 **
 *****************************************************************************/
 
d7368 1
a7368 1
    
d7372 1
a7372 1
    
d7375 1
a7375 1
    
d7380 1
a7380 1
    
a7384 12

/*****************************************************************************
 **
 ** xcb_glx_is_list_cookie_t xcb_glx_is_list_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               list
 ** @@returns xcb_glx_is_list_cookie_t
 **
 *****************************************************************************/
 
d7396 1
a7396 1
    
d7400 1
a7400 1
    
d7403 1
a7403 1
    
d7408 1
a7408 1
    
a7412 12

/*****************************************************************************
 **
 ** xcb_glx_is_list_reply_t * xcb_glx_is_list_reply
 ** 
 ** @@param xcb_connection_t          *c
 ** @@param xcb_glx_is_list_cookie_t   cookie
 ** @@param xcb_generic_error_t      **e
 ** @@returns xcb_glx_is_list_reply_t *
 **
 *****************************************************************************/
 
a7420 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_flush_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7431 1
a7431 1
    
d7435 1
a7435 1
    
d7437 1
a7437 1
    
d7442 1
a7442 1
    
a7446 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_flush
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7457 1
a7457 1
    
d7461 1
a7461 1
    
d7463 1
a7463 1
    
d7468 1
a7468 1
    
a7503 13

/*****************************************************************************
 **
 ** xcb_glx_are_textures_resident_cookie_t xcb_glx_are_textures_resident
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@param const uint32_t        *textures
 ** @@returns xcb_glx_are_textures_resident_cookie_t
 **
 *****************************************************************************/
 
d7516 1
a7516 1
    
d7520 1
a7520 1
    
d7523 1
a7523 1
    
d7533 1
a7533 1
    
a7537 13

/*****************************************************************************
 **
 ** xcb_glx_are_textures_resident_cookie_t xcb_glx_are_textures_resident_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@param const uint32_t        *textures
 ** @@returns xcb_glx_are_textures_resident_cookie_t
 **
 *****************************************************************************/
 
d7550 1
a7550 1
    
d7554 1
a7554 1
    
d7557 1
a7557 1
    
d7567 1
a7567 1
    
a7571 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_are_textures_resident_data
 ** 
 ** @@param const xcb_glx_are_textures_resident_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a7577 10

/*****************************************************************************
 **
 ** int xcb_glx_are_textures_resident_data_length
 ** 
 ** @@param const xcb_glx_are_textures_resident_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7583 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_are_textures_resident_data_end
 ** 
 ** @@param const xcb_glx_are_textures_resident_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7593 12

/*****************************************************************************
 **
 ** xcb_glx_are_textures_resident_reply_t * xcb_glx_are_textures_resident_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_glx_are_textures_resident_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_glx_are_textures_resident_reply_t *
 **
 *****************************************************************************/
 
a7632 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_textures_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@param const uint32_t        *textures
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7645 1
a7645 1
    
d7649 1
a7649 1
    
d7652 1
a7652 1
    
d7662 1
a7662 1
    
a7666 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_textures
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@param const uint32_t        *textures
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7679 1
a7679 1
    
d7683 1
a7683 1
    
d7686 1
a7686 1
    
d7696 1
a7696 1
    
a7731 12

/*****************************************************************************
 **
 ** xcb_glx_gen_textures_cookie_t xcb_glx_gen_textures
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@returns xcb_glx_gen_textures_cookie_t
 **
 *****************************************************************************/
 
d7743 1
a7743 1
    
d7747 1
a7747 1
    
d7750 1
a7750 1
    
d7755 1
a7755 1
    
a7759 12

/*****************************************************************************
 **
 ** xcb_glx_gen_textures_cookie_t xcb_glx_gen_textures_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@returns xcb_glx_gen_textures_cookie_t
 **
 *****************************************************************************/
 
d7771 1
a7771 1
    
d7775 1
a7775 1
    
d7778 1
a7778 1
    
d7783 1
a7783 1
    
a7787 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_gen_textures_data
 ** 
 ** @@param const xcb_glx_gen_textures_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a7793 10

/*****************************************************************************
 **
 ** int xcb_glx_gen_textures_data_length
 ** 
 ** @@param const xcb_glx_gen_textures_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7799 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_gen_textures_data_end
 ** 
 ** @@param const xcb_glx_gen_textures_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7809 12

/*****************************************************************************
 **
 ** xcb_glx_gen_textures_reply_t * xcb_glx_gen_textures_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_glx_gen_textures_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_glx_gen_textures_reply_t *
 **
 *****************************************************************************/
 
a7817 12

/*****************************************************************************
 **
 ** xcb_glx_is_texture_cookie_t xcb_glx_is_texture
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               texture
 ** @@returns xcb_glx_is_texture_cookie_t
 **
 *****************************************************************************/
 
d7829 1
a7829 1
    
d7833 1
a7833 1
    
d7836 1
a7836 1
    
d7841 1
a7841 1
    
a7845 12

/*****************************************************************************
 **
 ** xcb_glx_is_texture_cookie_t xcb_glx_is_texture_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               texture
 ** @@returns xcb_glx_is_texture_cookie_t
 **
 *****************************************************************************/
 
d7857 1
a7857 1
    
d7861 1
a7861 1
    
d7864 1
a7864 1
    
d7869 1
a7869 1
    
a7873 12

/*****************************************************************************
 **
 ** xcb_glx_is_texture_reply_t * xcb_glx_is_texture_reply
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_glx_is_texture_cookie_t   cookie
 ** @@param xcb_generic_error_t         **e
 ** @@returns xcb_glx_is_texture_reply_t *
 **
 *****************************************************************************/
 
a7912 15

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_cookie_t xcb_glx_get_color_table
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_color_table_cookie_t
 **
 *****************************************************************************/
 
d7927 1
a7927 1
    
d7931 1
a7931 1
    
d7937 1
a7937 1
    
d7942 1
a7942 1
    
a7946 15

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_cookie_t xcb_glx_get_color_table_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_color_table_cookie_t
 **
 *****************************************************************************/
 
d7961 1
a7961 1
    
d7965 1
a7965 1
    
d7971 1
a7971 1
    
d7976 1
a7976 1
    
a7980 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_color_table_data
 ** 
 ** @@param const xcb_glx_get_color_table_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a7986 10

/*****************************************************************************
 **
 ** int xcb_glx_get_color_table_data_length
 ** 
 ** @@param const xcb_glx_get_color_table_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7992 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_color_table_data_end
 ** 
 ** @@param const xcb_glx_get_color_table_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8002 12

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_reply_t * xcb_glx_get_color_table_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_glx_get_color_table_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_glx_get_color_table_reply_t *
 **
 *****************************************************************************/
 
a8041 13

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_parameterfv_cookie_t xcb_glx_get_color_table_parameterfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_color_table_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d8054 1
a8054 1
    
d8058 1
a8058 1
    
d8062 1
a8062 1
    
d8067 1
a8067 1
    
a8071 13

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_parameterfv_cookie_t xcb_glx_get_color_table_parameterfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_color_table_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d8084 1
a8084 1
    
d8088 1
a8088 1
    
d8092 1
a8092 1
    
d8097 1
a8097 1
    
a8101 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_color_table_parameterfv_data
 ** 
 ** @@param const xcb_glx_get_color_table_parameterfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a8107 10

/*****************************************************************************
 **
 ** int xcb_glx_get_color_table_parameterfv_data_length
 ** 
 ** @@param const xcb_glx_get_color_table_parameterfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8113 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_color_table_parameterfv_data_end
 ** 
 ** @@param const xcb_glx_get_color_table_parameterfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8123 12

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_parameterfv_reply_t * xcb_glx_get_color_table_parameterfv_reply
 ** 
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_glx_get_color_table_parameterfv_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_glx_get_color_table_parameterfv_reply_t *
 **
 *****************************************************************************/
 
a8162 13

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_parameteriv_cookie_t xcb_glx_get_color_table_parameteriv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_color_table_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d8175 1
a8175 1
    
d8179 1
a8179 1
    
d8183 1
a8183 1
    
d8188 1
a8188 1
    
a8192 13

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_parameteriv_cookie_t xcb_glx_get_color_table_parameteriv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_color_table_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d8205 1
a8205 1
    
d8209 1
a8209 1
    
d8213 1
a8213 1
    
d8218 1
a8218 1
    
a8222 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_color_table_parameteriv_data
 ** 
 ** @@param const xcb_glx_get_color_table_parameteriv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a8228 10

/*****************************************************************************
 **
 ** int xcb_glx_get_color_table_parameteriv_data_length
 ** 
 ** @@param const xcb_glx_get_color_table_parameteriv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8234 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_color_table_parameteriv_data_end
 ** 
 ** @@param const xcb_glx_get_color_table_parameteriv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8244 12

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_parameteriv_reply_t * xcb_glx_get_color_table_parameteriv_reply
 ** 
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_glx_get_color_table_parameteriv_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_glx_get_color_table_parameteriv_reply_t *
 **
 *****************************************************************************/
 
a8283 15

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_filter_cookie_t xcb_glx_get_convolution_filter
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_convolution_filter_cookie_t
 **
 *****************************************************************************/
 
d8298 1
a8298 1
    
d8302 1
a8302 1
    
d8308 1
a8308 1
    
d8313 1
a8313 1
    
a8317 15

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_filter_cookie_t xcb_glx_get_convolution_filter_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_convolution_filter_cookie_t
 **
 *****************************************************************************/
 
d8332 1
a8332 1
    
d8336 1
a8336 1
    
d8342 1
a8342 1
    
d8347 1
a8347 1
    
a8351 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_convolution_filter_data
 ** 
 ** @@param const xcb_glx_get_convolution_filter_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a8357 10

/*****************************************************************************
 **
 ** int xcb_glx_get_convolution_filter_data_length
 ** 
 ** @@param const xcb_glx_get_convolution_filter_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8363 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_convolution_filter_data_end
 ** 
 ** @@param const xcb_glx_get_convolution_filter_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8373 12

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_filter_reply_t * xcb_glx_get_convolution_filter_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_glx_get_convolution_filter_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_glx_get_convolution_filter_reply_t *
 **
 *****************************************************************************/
 
a8412 13

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_parameterfv_cookie_t xcb_glx_get_convolution_parameterfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_convolution_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d8425 1
a8425 1
    
d8429 1
a8429 1
    
d8433 1
a8433 1
    
d8438 1
a8438 1
    
a8442 13

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_parameterfv_cookie_t xcb_glx_get_convolution_parameterfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_convolution_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d8455 1
a8455 1
    
d8459 1
a8459 1
    
d8463 1
a8463 1
    
d8468 1
a8468 1
    
a8472 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_convolution_parameterfv_data
 ** 
 ** @@param const xcb_glx_get_convolution_parameterfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a8478 10

/*****************************************************************************
 **
 ** int xcb_glx_get_convolution_parameterfv_data_length
 ** 
 ** @@param const xcb_glx_get_convolution_parameterfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8484 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_convolution_parameterfv_data_end
 ** 
 ** @@param const xcb_glx_get_convolution_parameterfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8494 12

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_parameterfv_reply_t * xcb_glx_get_convolution_parameterfv_reply
 ** 
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_glx_get_convolution_parameterfv_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_glx_get_convolution_parameterfv_reply_t *
 **
 *****************************************************************************/
 
a8533 13

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_parameteriv_cookie_t xcb_glx_get_convolution_parameteriv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_convolution_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d8546 1
a8546 1
    
d8550 1
a8550 1
    
d8554 1
a8554 1
    
d8559 1
a8559 1
    
a8563 13

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_parameteriv_cookie_t xcb_glx_get_convolution_parameteriv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_convolution_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d8576 1
a8576 1
    
d8580 1
a8580 1
    
d8584 1
a8584 1
    
d8589 1
a8589 1
    
a8593 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_convolution_parameteriv_data
 ** 
 ** @@param const xcb_glx_get_convolution_parameteriv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a8599 10

/*****************************************************************************
 **
 ** int xcb_glx_get_convolution_parameteriv_data_length
 ** 
 ** @@param const xcb_glx_get_convolution_parameteriv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8605 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_convolution_parameteriv_data_end
 ** 
 ** @@param const xcb_glx_get_convolution_parameteriv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8615 12

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_parameteriv_reply_t * xcb_glx_get_convolution_parameteriv_reply
 ** 
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_glx_get_convolution_parameteriv_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_glx_get_convolution_parameteriv_reply_t *
 **
 *****************************************************************************/
 
a8654 15

/*****************************************************************************
 **
 ** xcb_glx_get_separable_filter_cookie_t xcb_glx_get_separable_filter
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_separable_filter_cookie_t
 **
 *****************************************************************************/
 
d8669 1
a8669 1
    
d8673 1
a8673 1
    
d8679 1
a8679 1
    
d8684 1
a8684 1
    
a8688 15

/*****************************************************************************
 **
 ** xcb_glx_get_separable_filter_cookie_t xcb_glx_get_separable_filter_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_separable_filter_cookie_t
 **
 *****************************************************************************/
 
d8703 1
a8703 1
    
d8707 1
a8707 1
    
d8713 1
a8713 1
    
d8718 1
a8718 1
    
a8722 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_separable_filter_rows_and_cols
 ** 
 ** @@param const xcb_glx_get_separable_filter_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a8728 10

/*****************************************************************************
 **
 ** int xcb_glx_get_separable_filter_rows_and_cols_length
 ** 
 ** @@param const xcb_glx_get_separable_filter_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8734 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_separable_filter_rows_and_cols_end
 ** 
 ** @@param const xcb_glx_get_separable_filter_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8744 12

/*****************************************************************************
 **
 ** xcb_glx_get_separable_filter_reply_t * xcb_glx_get_separable_filter_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_glx_get_separable_filter_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_glx_get_separable_filter_reply_t *
 **
 *****************************************************************************/
 
a8783 16

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_cookie_t xcb_glx_get_histogram
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@param uint8_t                reset
 ** @@returns xcb_glx_get_histogram_cookie_t
 **
 *****************************************************************************/
 
d8799 1
a8799 1
    
d8803 1
a8803 1
    
d8810 1
a8810 1
    
d8815 1
a8815 1
    
a8819 16

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_cookie_t xcb_glx_get_histogram_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@param uint8_t                reset
 ** @@returns xcb_glx_get_histogram_cookie_t
 **
 *****************************************************************************/
 
d8835 1
a8835 1
    
d8839 1
a8839 1
    
d8846 1
a8846 1
    
d8851 1
a8851 1
    
a8855 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_histogram_data
 ** 
 ** @@param const xcb_glx_get_histogram_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a8861 10

/*****************************************************************************
 **
 ** int xcb_glx_get_histogram_data_length
 ** 
 ** @@param const xcb_glx_get_histogram_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8867 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_histogram_data_end
 ** 
 ** @@param const xcb_glx_get_histogram_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8877 12

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_reply_t * xcb_glx_get_histogram_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_get_histogram_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_get_histogram_reply_t *
 **
 *****************************************************************************/
 
a8916 13

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_parameterfv_cookie_t xcb_glx_get_histogram_parameterfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_histogram_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d8929 1
a8929 1
    
d8933 1
a8933 1
    
d8937 1
a8937 1
    
d8942 1
a8942 1
    
a8946 13

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_parameterfv_cookie_t xcb_glx_get_histogram_parameterfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_histogram_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d8959 1
a8959 1
    
d8963 1
a8963 1
    
d8967 1
a8967 1
    
d8972 1
a8972 1
    
a8976 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_histogram_parameterfv_data
 ** 
 ** @@param const xcb_glx_get_histogram_parameterfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a8982 10

/*****************************************************************************
 **
 ** int xcb_glx_get_histogram_parameterfv_data_length
 ** 
 ** @@param const xcb_glx_get_histogram_parameterfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8988 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_histogram_parameterfv_data_end
 ** 
 ** @@param const xcb_glx_get_histogram_parameterfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8998 12

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_parameterfv_reply_t * xcb_glx_get_histogram_parameterfv_reply
 ** 
 ** @@param xcb_connection_t                            *c
 ** @@param xcb_glx_get_histogram_parameterfv_cookie_t   cookie
 ** @@param xcb_generic_error_t                        **e
 ** @@returns xcb_glx_get_histogram_parameterfv_reply_t *
 **
 *****************************************************************************/
 
a9037 13

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_parameteriv_cookie_t xcb_glx_get_histogram_parameteriv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_histogram_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d9050 1
a9050 1
    
d9054 1
a9054 1
    
d9058 1
a9058 1
    
d9063 1
a9063 1
    
a9067 13

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_parameteriv_cookie_t xcb_glx_get_histogram_parameteriv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_histogram_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d9080 1
a9080 1
    
d9084 1
a9084 1
    
d9088 1
a9088 1
    
d9093 1
a9093 1
    
a9097 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_histogram_parameteriv_data
 ** 
 ** @@param const xcb_glx_get_histogram_parameteriv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a9103 10

/*****************************************************************************
 **
 ** int xcb_glx_get_histogram_parameteriv_data_length
 ** 
 ** @@param const xcb_glx_get_histogram_parameteriv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a9109 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_histogram_parameteriv_data_end
 ** 
 ** @@param const xcb_glx_get_histogram_parameteriv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a9119 12

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_parameteriv_reply_t * xcb_glx_get_histogram_parameteriv_reply
 ** 
 ** @@param xcb_connection_t                            *c
 ** @@param xcb_glx_get_histogram_parameteriv_cookie_t   cookie
 ** @@param xcb_generic_error_t                        **e
 ** @@returns xcb_glx_get_histogram_parameteriv_reply_t *
 **
 *****************************************************************************/
 
a9158 16

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_cookie_t xcb_glx_get_minmax
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@param uint8_t                reset
 ** @@returns xcb_glx_get_minmax_cookie_t
 **
 *****************************************************************************/
 
d9174 1
a9174 1
    
d9178 1
a9178 1
    
d9185 1
a9185 1
    
d9190 1
a9190 1
    
a9194 16

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_cookie_t xcb_glx_get_minmax_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@param uint8_t                reset
 ** @@returns xcb_glx_get_minmax_cookie_t
 **
 *****************************************************************************/
 
d9210 1
a9210 1
    
d9214 1
a9214 1
    
d9221 1
a9221 1
    
d9226 1
a9226 1
    
a9230 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_minmax_data
 ** 
 ** @@param const xcb_glx_get_minmax_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a9236 10

/*****************************************************************************
 **
 ** int xcb_glx_get_minmax_data_length
 ** 
 ** @@param const xcb_glx_get_minmax_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a9242 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_minmax_data_end
 ** 
 ** @@param const xcb_glx_get_minmax_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a9252 12

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_reply_t * xcb_glx_get_minmax_reply
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_glx_get_minmax_cookie_t   cookie
 ** @@param xcb_generic_error_t         **e
 ** @@returns xcb_glx_get_minmax_reply_t *
 **
 *****************************************************************************/
 
a9291 13

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_parameterfv_cookie_t xcb_glx_get_minmax_parameterfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_minmax_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d9304 1
a9304 1
    
d9308 1
a9308 1
    
d9312 1
a9312 1
    
d9317 1
a9317 1
    
a9321 13

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_parameterfv_cookie_t xcb_glx_get_minmax_parameterfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_minmax_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d9334 1
a9334 1
    
d9338 1
a9338 1
    
d9342 1
a9342 1
    
d9347 1
a9347 1
    
a9351 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_minmax_parameterfv_data
 ** 
 ** @@param const xcb_glx_get_minmax_parameterfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a9357 10

/*****************************************************************************
 **
 ** int xcb_glx_get_minmax_parameterfv_data_length
 ** 
 ** @@param const xcb_glx_get_minmax_parameterfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a9363 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_minmax_parameterfv_data_end
 ** 
 ** @@param const xcb_glx_get_minmax_parameterfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a9373 12

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_parameterfv_reply_t * xcb_glx_get_minmax_parameterfv_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_glx_get_minmax_parameterfv_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_glx_get_minmax_parameterfv_reply_t *
 **
 *****************************************************************************/
 
a9412 13

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_parameteriv_cookie_t xcb_glx_get_minmax_parameteriv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_minmax_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d9425 1
a9425 1
    
d9429 1
a9429 1
    
d9433 1
a9433 1
    
d9438 1
a9438 1
    
a9442 13

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_parameteriv_cookie_t xcb_glx_get_minmax_parameteriv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_minmax_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d9455 1
a9455 1
    
d9459 1
a9459 1
    
d9463 1
a9463 1
    
d9468 1
a9468 1
    
a9472 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_minmax_parameteriv_data
 ** 
 ** @@param const xcb_glx_get_minmax_parameteriv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a9478 10

/*****************************************************************************
 **
 ** int xcb_glx_get_minmax_parameteriv_data_length
 ** 
 ** @@param const xcb_glx_get_minmax_parameteriv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a9484 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_minmax_parameteriv_data_end
 ** 
 ** @@param const xcb_glx_get_minmax_parameteriv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a9494 12

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_parameteriv_reply_t * xcb_glx_get_minmax_parameteriv_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_glx_get_minmax_parameteriv_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_glx_get_minmax_parameteriv_reply_t *
 **
 *****************************************************************************/
 
a9533 13

/*****************************************************************************
 **
 ** xcb_glx_get_compressed_tex_image_arb_cookie_t xcb_glx_get_compressed_tex_image_arb
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@returns xcb_glx_get_compressed_tex_image_arb_cookie_t
 **
 *****************************************************************************/
 
d9546 1
a9546 1
    
d9550 1
a9550 1
    
d9554 1
a9554 1
    
d9559 1
a9559 1
    
a9563 13

/*****************************************************************************
 **
 ** xcb_glx_get_compressed_tex_image_arb_cookie_t xcb_glx_get_compressed_tex_image_arb_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@returns xcb_glx_get_compressed_tex_image_arb_cookie_t
 **
 *****************************************************************************/
 
d9576 1
a9576 1
    
d9580 1
a9580 1
    
d9584 1
a9584 1
    
d9589 1
a9589 1
    
a9593 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_compressed_tex_image_arb_data
 ** 
 ** @@param const xcb_glx_get_compressed_tex_image_arb_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a9599 10

/*****************************************************************************
 **
 ** int xcb_glx_get_compressed_tex_image_arb_data_length
 ** 
 ** @@param const xcb_glx_get_compressed_tex_image_arb_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a9605 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_compressed_tex_image_arb_data_end
 ** 
 ** @@param const xcb_glx_get_compressed_tex_image_arb_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a9615 12

/*****************************************************************************
 **
 ** xcb_glx_get_compressed_tex_image_arb_reply_t * xcb_glx_get_compressed_tex_image_arb_reply
 ** 
 ** @@param xcb_connection_t                               *c
 ** @@param xcb_glx_get_compressed_tex_image_arb_cookie_t   cookie
 ** @@param xcb_generic_error_t                           **e
 ** @@returns xcb_glx_get_compressed_tex_image_arb_reply_t *
 **
 *****************************************************************************/
 
a9654 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_queries_arb_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@param const uint32_t        *ids
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d9667 1
a9667 1
    
d9671 1
a9671 1
    
d9674 1
a9674 1
    
d9684 1
a9684 1
    
a9688 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_queries_arb
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@param const uint32_t        *ids
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d9701 1
a9701 1
    
d9705 1
a9705 1
    
d9708 1
a9708 1
    
d9718 1
a9718 1
    
a9753 12

/*****************************************************************************
 **
 ** xcb_glx_gen_queries_arb_cookie_t xcb_glx_gen_queries_arb
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@returns xcb_glx_gen_queries_arb_cookie_t
 **
 *****************************************************************************/
 
d9765 1
a9765 1
    
d9769 1
a9769 1
    
d9772 1
a9772 1
    
d9777 1
a9777 1
    
a9781 12

/*****************************************************************************
 **
 ** xcb_glx_gen_queries_arb_cookie_t xcb_glx_gen_queries_arb_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@returns xcb_glx_gen_queries_arb_cookie_t
 **
 *****************************************************************************/
 
d9793 1
a9793 1
    
d9797 1
a9797 1
    
d9800 1
a9800 1
    
d9805 1
a9805 1
    
a9809 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_gen_queries_arb_data
 ** 
 ** @@param const xcb_glx_gen_queries_arb_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a9815 10

/*****************************************************************************
 **
 ** int xcb_glx_gen_queries_arb_data_length
 ** 
 ** @@param const xcb_glx_gen_queries_arb_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a9821 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_gen_queries_arb_data_end
 ** 
 ** @@param const xcb_glx_gen_queries_arb_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a9831 12

/*****************************************************************************
 **
 ** xcb_glx_gen_queries_arb_reply_t * xcb_glx_gen_queries_arb_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_glx_gen_queries_arb_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_glx_gen_queries_arb_reply_t *
 **
 *****************************************************************************/
 
a9839 12

/*****************************************************************************
 **
 ** xcb_glx_is_query_arb_cookie_t xcb_glx_is_query_arb
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               id
 ** @@returns xcb_glx_is_query_arb_cookie_t
 **
 *****************************************************************************/
 
d9851 1
a9851 1
    
d9855 1
a9855 1
    
d9858 1
a9858 1
    
d9863 1
a9863 1
    
a9867 12

/*****************************************************************************
 **
 ** xcb_glx_is_query_arb_cookie_t xcb_glx_is_query_arb_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               id
 ** @@returns xcb_glx_is_query_arb_cookie_t
 **
 *****************************************************************************/
 
d9879 1
a9879 1
    
d9883 1
a9883 1
    
d9886 1
a9886 1
    
d9891 1
a9891 1
    
a9895 12

/*****************************************************************************
 **
 ** xcb_glx_is_query_arb_reply_t * xcb_glx_is_query_arb_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_glx_is_query_arb_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_glx_is_query_arb_reply_t *
 **
 *****************************************************************************/
 
a9934 13

/*****************************************************************************
 **
 ** xcb_glx_get_queryiv_arb_cookie_t xcb_glx_get_queryiv_arb
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_queryiv_arb_cookie_t
 **
 *****************************************************************************/
 
d9947 1
a9947 1
    
d9951 1
a9951 1
    
d9955 1
a9955 1
    
d9960 1
a9960 1
    
a9964 13

/*****************************************************************************
 **
 ** xcb_glx_get_queryiv_arb_cookie_t xcb_glx_get_queryiv_arb_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_queryiv_arb_cookie_t
 **
 *****************************************************************************/
 
d9977 1
a9977 1
    
d9981 1
a9981 1
    
d9985 1
a9985 1
    
d9990 1
a9990 1
    
a9994 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_queryiv_arb_data
 ** 
 ** @@param const xcb_glx_get_queryiv_arb_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a10000 10

/*****************************************************************************
 **
 ** int xcb_glx_get_queryiv_arb_data_length
 ** 
 ** @@param const xcb_glx_get_queryiv_arb_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a10006 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_queryiv_arb_data_end
 ** 
 ** @@param const xcb_glx_get_queryiv_arb_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a10016 12

/*****************************************************************************
 **
 ** xcb_glx_get_queryiv_arb_reply_t * xcb_glx_get_queryiv_arb_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_glx_get_queryiv_arb_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_glx_get_queryiv_arb_reply_t *
 **
 *****************************************************************************/
 
a10055 13

/*****************************************************************************
 **
 ** xcb_glx_get_query_objectiv_arb_cookie_t xcb_glx_get_query_objectiv_arb
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               id
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_query_objectiv_arb_cookie_t
 **
 *****************************************************************************/
 
d10068 1
a10068 1
    
d10072 1
a10072 1
    
d10076 1
a10076 1
    
d10081 1
a10081 1
    
a10085 13

/*****************************************************************************
 **
 ** xcb_glx_get_query_objectiv_arb_cookie_t xcb_glx_get_query_objectiv_arb_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               id
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_query_objectiv_arb_cookie_t
 **
 *****************************************************************************/
 
d10098 1
a10098 1
    
d10102 1
a10102 1
    
d10106 1
a10106 1
    
d10111 1
a10111 1
    
a10115 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_query_objectiv_arb_data
 ** 
 ** @@param const xcb_glx_get_query_objectiv_arb_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a10121 10

/*****************************************************************************
 **
 ** int xcb_glx_get_query_objectiv_arb_data_length
 ** 
 ** @@param const xcb_glx_get_query_objectiv_arb_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a10127 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_query_objectiv_arb_data_end
 ** 
 ** @@param const xcb_glx_get_query_objectiv_arb_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a10137 12

/*****************************************************************************
 **
 ** xcb_glx_get_query_objectiv_arb_reply_t * xcb_glx_get_query_objectiv_arb_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_glx_get_query_objectiv_arb_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_glx_get_query_objectiv_arb_reply_t *
 **
 *****************************************************************************/
 
a10176 13

/*****************************************************************************
 **
 ** xcb_glx_get_query_objectuiv_arb_cookie_t xcb_glx_get_query_objectuiv_arb
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               id
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_query_objectuiv_arb_cookie_t
 **
 *****************************************************************************/
 
d10189 1
a10189 1
    
d10193 1
a10193 1
    
d10197 1
a10197 1
    
d10202 1
a10202 1
    
a10206 13

/*****************************************************************************
 **
 ** xcb_glx_get_query_objectuiv_arb_cookie_t xcb_glx_get_query_objectuiv_arb_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               id
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_query_objectuiv_arb_cookie_t
 **
 *****************************************************************************/
 
d10219 1
a10219 1
    
d10223 1
a10223 1
    
d10227 1
a10227 1
    
d10232 1
a10232 1
    
a10236 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_get_query_objectuiv_arb_data
 ** 
 ** @@param const xcb_glx_get_query_objectuiv_arb_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a10242 10

/*****************************************************************************
 **
 ** int xcb_glx_get_query_objectuiv_arb_data_length
 ** 
 ** @@param const xcb_glx_get_query_objectuiv_arb_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a10248 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_query_objectuiv_arb_data_end
 ** 
 ** @@param const xcb_glx_get_query_objectuiv_arb_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a10258 12

/*****************************************************************************
 **
 ** xcb_glx_get_query_objectuiv_arb_reply_t * xcb_glx_get_query_objectuiv_arb_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_glx_get_query_objectuiv_arb_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_glx_get_query_objectuiv_arb_reply_t *
 **
 *****************************************************************************/
 
@


1.3
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d409 1
a409 1
    unsigned int xcb_align_to;
d414 2
d532 1
a532 1
    unsigned int xcb_align_to;
d537 2
d1653 1
a1653 1
    unsigned int xcb_align_to;
d1658 2
d1904 1
a1904 1
    unsigned int xcb_align_to;
d1909 2
d2033 1
a2033 1
    unsigned int xcb_align_to;
d2038 2
d2328 1
a2328 1
    unsigned int xcb_align_to;
d2333 2
d2511 1
a2511 1
    unsigned int xcb_align_to;
d2516 2
d2642 1
a2642 1
    unsigned int xcb_align_to;
d2647 2
d2819 1
a2819 1
    unsigned int xcb_align_to;
d2824 2
d3142 1
a3142 1
    unsigned int xcb_align_to;
d3147 2
d3431 1
a3431 1
    unsigned int xcb_align_to;
d3436 2
d3642 1
a3642 1
    unsigned int xcb_align_to;
d3647 2
d3819 1
a3819 1
    unsigned int xcb_align_to;
d3824 2
d3944 1
a3944 1
    unsigned int xcb_align_to;
d3949 2
d4161 1
a4161 1
    unsigned int xcb_align_to;
d4166 2
d4356 1
a4356 1
    unsigned int xcb_align_to;
d4361 2
d4507 1
a4507 1
    unsigned int xcb_align_to;
d4512 2
d5214 1
a5214 1
    unsigned int xcb_align_to;
d5219 2
d5663 1
a5663 1
    unsigned int xcb_align_to;
d5668 2
d5888 1
a5888 1
    unsigned int xcb_align_to;
d5893 2
d6071 1
a6071 1
    unsigned int xcb_align_to;
d6076 2
d6254 1
a6254 1
    unsigned int xcb_align_to;
d6259 2
d6531 1
a6531 1
    unsigned int xcb_align_to;
d6536 2
d6714 1
a6714 1
    unsigned int xcb_align_to;
d6719 2
d6897 1
a6897 1
    unsigned int xcb_align_to;
d6902 2
d7086 1
a7086 1
    unsigned int xcb_align_to;
d7091 2
d7275 1
a7275 1
    unsigned int xcb_align_to;
d7280 2
d7464 1
a7464 1
    unsigned int xcb_align_to;
d7469 2
d7653 1
a7653 1
    unsigned int xcb_align_to;
d7658 2
d7842 1
a7842 1
    unsigned int xcb_align_to;
d7847 2
d8031 1
a8031 1
    unsigned int xcb_align_to;
d8036 2
d8220 1
a8220 1
    unsigned int xcb_align_to;
d8225 2
d8403 1
a8403 1
    unsigned int xcb_align_to;
d8408 2
d8586 1
a8586 1
    unsigned int xcb_align_to;
d8591 2
d8769 1
a8769 1
    unsigned int xcb_align_to;
d8774 2
d8952 1
a8952 1
    unsigned int xcb_align_to;
d8957 2
d9135 1
a9135 1
    unsigned int xcb_align_to;
d9140 2
d9324 1
a9324 1
    unsigned int xcb_align_to;
d9329 2
d9513 1
a9513 1
    unsigned int xcb_align_to;
d9518 2
d9702 1
a9702 1
    unsigned int xcb_align_to;
d9707 2
d9891 1
a9891 1
    unsigned int xcb_align_to;
d9896 2
d10080 1
a10080 1
    unsigned int xcb_align_to;
d10085 2
d10287 1
a10287 1
    unsigned int xcb_align_to;
d10292 2
d10476 1
a10476 1
    unsigned int xcb_align_to;
d10481 2
d10665 1
a10665 1
    unsigned int xcb_align_to;
d10670 2
d10860 1
a10860 1
    unsigned int xcb_align_to;
d10865 2
d11229 1
a11229 1
    unsigned int xcb_align_to;
d11234 2
d11426 1
a11426 1
    unsigned int xcb_align_to;
d11431 2
d11551 1
a11551 1
    unsigned int xcb_align_to;
d11556 2
d11834 1
a11834 1
    unsigned int xcb_align_to;
d11839 2
d12035 1
a12035 1
    unsigned int xcb_align_to;
d12040 2
d12224 1
a12224 1
    unsigned int xcb_align_to;
d12229 2
d12413 1
a12413 1
    unsigned int xcb_align_to;
d12418 2
d12614 1
a12614 1
    unsigned int xcb_align_to;
d12619 2
d12803 1
a12803 1
    unsigned int xcb_align_to;
d12808 2
d12992 1
a12992 1
    unsigned int xcb_align_to;
d12997 2
d13193 1
a13193 1
    unsigned int xcb_align_to;
d13198 2
d13400 1
a13400 1
    unsigned int xcb_align_to;
d13405 2
d13589 1
a13589 1
    unsigned int xcb_align_to;
d13594 2
d13778 1
a13778 1
    unsigned int xcb_align_to;
d13783 2
d13985 1
a13985 1
    unsigned int xcb_align_to;
d13990 2
d14174 1
a14174 1
    unsigned int xcb_align_to;
d14179 2
d14363 1
a14363 1
    unsigned int xcb_align_to;
d14368 2
d14552 1
a14552 1
    unsigned int xcb_align_to;
d14557 2
d14677 1
a14677 1
    unsigned int xcb_align_to;
d14682 2
d14960 1
a14960 1
    unsigned int xcb_align_to;
d14965 2
d15149 1
a15149 1
    unsigned int xcb_align_to;
d15154 2
d15338 1
a15338 1
    unsigned int xcb_align_to;
d15343 2
@


1.2
log
@Update to libxcb 1.8.1. Tested by krw@@, mpi@@, shadchin@@
@
text
@d6 4
d12 1
d15 2
d401 29
d466 1
d471 1
d512 1
d517 1
d522 29
d594 1
d599 1
d647 1
d652 1
d702 1
d752 1
d789 1
d826 1
d869 1
d912 1
d969 1
d1006 1
d1066 1
d1106 1
d1163 1
d1200 1
d1237 1
d1274 1
d1320 1
d1366 1
d1406 1
d1446 1
d1495 1
d1544 1
d1590 1
d1636 1
d1641 29
d1702 1
d1739 1
d1848 1
d1885 1
d1890 29
d1958 1
d1963 1
d2007 1
d2012 1
d2017 29
d2085 1
d2090 1
d2134 1
d2139 1
d2248 1
d2285 1
d2310 29
d2374 1
d2414 1
d2491 29
d2560 1
d2565 1
d2610 1
d2615 1
d2620 29
d2681 1
d2718 1
d2795 29
d2870 1
d2875 1
d2926 1
d2931 1
d2968 1
d3005 1
d3058 1
d3111 1
d3116 29
d3177 1
d3214 1
d3332 1
d3378 1
d3403 29
d3475 1
d3480 1
d3528 1
d3533 1
d3570 1
d3607 1
d3612 29
d3673 1
d3710 1
d3787 29
d3853 1
d3858 1
d3900 1
d3905 1
d3910 29
d3985 1
d3990 1
d4041 1
d4046 1
d4083 1
d4120 1
d4125 53
d4228 1
d4233 1
d4238 1
d4243 1
d4298 1
d4303 1
d4308 1
d4313 1
d4318 29
d4397 1
d4402 1
d4457 1
d4462 1
d4467 53
d4570 1
d4575 1
d4580 1
d4585 1
d4640 1
d4645 1
d4650 1
d4655 1
d4698 1
d4741 1
d4778 1
d4815 1
d4858 1
d4901 1
d4941 1
d4981 1
d5044 1
d5087 1
d5127 1
d5167 1
d5172 29
d5236 1
d5276 1
d5385 1
d5422 1
d5485 1
d5528 1
d5571 1
d5614 1
d5619 29
d5704 1
d5765 1
d5842 29
d5906 1
d5946 1
d6023 29
d6087 1
d6127 1
d6204 29
d6268 1
d6308 1
d6417 1
d6454 1
d6479 29
d6543 1
d6583 1
d6660 29
d6724 1
d6764 1
d6841 29
d6908 1
d6951 1
d7028 29
d7095 1
d7138 1
d7215 29
d7282 1
d7325 1
d7402 29
d7469 1
d7512 1
d7589 29
d7656 1
d7699 1
d7776 29
d7843 1
d7886 1
d7963 29
d8030 1
d8073 1
d8150 29
d8214 1
d8254 1
d8331 29
d8395 1
d8435 1
d8512 29
d8576 1
d8616 1
d8693 29
d8757 1
d8797 1
d8874 29
d8938 1
d8978 1
d9055 29
d9122 1
d9165 1
d9242 29
d9309 1
d9352 1
d9429 29
d9496 1
d9539 1
d9616 29
d9683 1
d9726 1
d9803 29
d9870 1
d9913 1
d9990 29
d10066 1
d10118 1
d10195 29
d10262 1
d10305 1
d10382 29
d10449 1
d10492 1
d10569 29
d10639 1
d10685 1
d10762 29
d10832 1
d10878 1
d10990 1
d11030 1
d11087 1
d11124 1
d11129 29
d11195 1
d11200 1
d11242 1
d11247 1
d11324 29
d11390 1
d11395 1
d11437 1
d11442 1
d11447 29
d11511 1
d11551 1
d11663 1
d11703 1
d11728 29
d11801 1
d11850 1
d11927 29
d11994 1
d12037 1
d12114 29
d12181 1
d12224 1
d12301 29
d12374 1
d12423 1
d12500 29
d12567 1
d12610 1
d12687 29
d12754 1
d12797 1
d12874 29
d12947 1
d12996 1
d13073 29
d13149 1
d13201 1
d13278 29
d13345 1
d13388 1
d13465 29
d13532 1
d13575 1
d13652 29
d13728 1
d13780 1
d13857 29
d13924 1
d13967 1
d14044 29
d14111 1
d14154 1
d14231 29
d14298 1
d14341 1
d14418 29
d14484 1
d14489 1
d14531 1
d14536 1
d14541 29
d14605 1
d14645 1
d14757 1
d14797 1
d14822 29
d14889 1
d14932 1
d15009 29
d15076 1
d15119 1
d15196 29
d15263 1
d15306 1
@


1.1
log
@Initial revision
@
text
@d2509 7
a2515 7
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          fbconfig
 ** @@param xcb_pixmap_t      pixmap
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@param uint32_t          num_attribs
 ** @@param const uint32_t   *attribs
d2521 7
a2527 7
xcb_glx_create_pixmap_checked (xcb_connection_t *c  /**< */,
                               uint32_t          screen  /**< */,
                               uint32_t          fbconfig  /**< */,
                               xcb_pixmap_t      pixmap  /**< */,
                               xcb_glx_pixmap_t  glx_pixmap  /**< */,
                               uint32_t          num_attribs  /**< */,
                               const uint32_t   *attribs  /**< */)
d2563 7
a2569 7
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          fbconfig
 ** @@param xcb_pixmap_t      pixmap
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@param uint32_t          num_attribs
 ** @@param const uint32_t   *attribs
d2575 7
a2581 7
xcb_glx_create_pixmap (xcb_connection_t *c  /**< */,
                       uint32_t          screen  /**< */,
                       uint32_t          fbconfig  /**< */,
                       xcb_pixmap_t      pixmap  /**< */,
                       xcb_glx_pixmap_t  glx_pixmap  /**< */,
                       uint32_t          num_attribs  /**< */,
                       const uint32_t   *attribs  /**< */)
d2689 7
a2695 9
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@param uint32_t           fbconfig
 ** @@param uint32_t           screen
 ** @@param uint32_t           render_type
 ** @@param uint32_t           share_list
 ** @@param uint8_t            is_direct
 ** @@param uint8_t            reserved1
 ** @@param uint16_t           reserved2
d2701 7
a2707 9
xcb_glx_create_new_context_checked (xcb_connection_t  *c  /**< */,
                                    xcb_glx_context_t  context  /**< */,
                                    uint32_t           fbconfig  /**< */,
                                    uint32_t           screen  /**< */,
                                    uint32_t           render_type  /**< */,
                                    uint32_t           share_list  /**< */,
                                    uint8_t            is_direct  /**< */,
                                    uint8_t            reserved1  /**< */,
                                    uint16_t           reserved2  /**< */)
d2726 1
a2726 2
    xcb_out.reserved1 = reserved1;
    xcb_out.reserved2 = reserved2;
d2741 7
a2747 9
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@param uint32_t           fbconfig
 ** @@param uint32_t           screen
 ** @@param uint32_t           render_type
 ** @@param uint32_t           share_list
 ** @@param uint8_t            is_direct
 ** @@param uint8_t            reserved1
 ** @@param uint16_t           reserved2
d2753 7
a2759 9
xcb_glx_create_new_context (xcb_connection_t  *c  /**< */,
                            xcb_glx_context_t  context  /**< */,
                            uint32_t           fbconfig  /**< */,
                            uint32_t           screen  /**< */,
                            uint32_t           render_type  /**< */,
                            uint32_t           share_list  /**< */,
                            uint8_t            is_direct  /**< */,
                            uint8_t            reserved1  /**< */,
                            uint16_t           reserved2  /**< */)
d2778 1
a2778 2
    xcb_out.reserved1 = reserved1;
    xcb_out.reserved2 = reserved2;
d3626 380
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
