head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.2
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.6
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	mKDGsTNpiR2zRHYQ;

1.3
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	01TEvO4uNHLqFv7N;

1.2
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.49;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.49;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xevie.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "xevie.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)

xcb_extension_t xcb_xevie_id = { "XEVIE", 0 };

xcb_xevie_query_version_cookie_t
xcb_xevie_query_version (xcb_connection_t *c,
                         uint16_t          client_major_version,
                         uint16_t          client_minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xevie_id,
        .opcode = XCB_XEVIE_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xevie_query_version_cookie_t xcb_ret;
    xcb_xevie_query_version_request_t xcb_out;

    xcb_out.client_major_version = client_major_version;
    xcb_out.client_minor_version = client_minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xevie_query_version_cookie_t
xcb_xevie_query_version_unchecked (xcb_connection_t *c,
                                   uint16_t          client_major_version,
                                   uint16_t          client_minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xevie_id,
        .opcode = XCB_XEVIE_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xevie_query_version_cookie_t xcb_ret;
    xcb_xevie_query_version_request_t xcb_out;

    xcb_out.client_major_version = client_major_version;
    xcb_out.client_minor_version = client_minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xevie_query_version_reply_t *
xcb_xevie_query_version_reply (xcb_connection_t                  *c,
                               xcb_xevie_query_version_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_xevie_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_xevie_start_cookie_t
xcb_xevie_start (xcb_connection_t *c,
                 uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xevie_id,
        .opcode = XCB_XEVIE_START,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xevie_start_cookie_t xcb_ret;
    xcb_xevie_start_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xevie_start_cookie_t
xcb_xevie_start_unchecked (xcb_connection_t *c,
                           uint32_t          screen)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xevie_id,
        .opcode = XCB_XEVIE_START,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xevie_start_cookie_t xcb_ret;
    xcb_xevie_start_request_t xcb_out;

    xcb_out.screen = screen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xevie_start_reply_t *
xcb_xevie_start_reply (xcb_connection_t          *c,
                       xcb_xevie_start_cookie_t   cookie  /**< */,
                       xcb_generic_error_t      **e)
{
    return (xcb_xevie_start_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_xevie_end_cookie_t
xcb_xevie_end (xcb_connection_t *c,
               uint32_t          cmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xevie_id,
        .opcode = XCB_XEVIE_END,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xevie_end_cookie_t xcb_ret;
    xcb_xevie_end_request_t xcb_out;

    xcb_out.cmap = cmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xevie_end_cookie_t
xcb_xevie_end_unchecked (xcb_connection_t *c,
                         uint32_t          cmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xevie_id,
        .opcode = XCB_XEVIE_END,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xevie_end_cookie_t xcb_ret;
    xcb_xevie_end_request_t xcb_out;

    xcb_out.cmap = cmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xevie_end_reply_t *
xcb_xevie_end_reply (xcb_connection_t        *c,
                     xcb_xevie_end_cookie_t   cookie  /**< */,
                     xcb_generic_error_t    **e)
{
    return (xcb_xevie_end_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

void
xcb_xevie_event_next (xcb_xevie_event_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xevie_event_t);
}

xcb_generic_iterator_t
xcb_xevie_event_end (xcb_xevie_event_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_xevie_send_cookie_t
xcb_xevie_send (xcb_connection_t  *c,
                xcb_xevie_event_t  event,
                uint32_t           data_type)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xevie_id,
        .opcode = XCB_XEVIE_SEND,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xevie_send_cookie_t xcb_ret;
    xcb_xevie_send_request_t xcb_out;

    xcb_out.event = event;
    xcb_out.data_type = data_type;
    memset(xcb_out.pad0, 0, 64);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xevie_send_cookie_t
xcb_xevie_send_unchecked (xcb_connection_t  *c,
                          xcb_xevie_event_t  event,
                          uint32_t           data_type)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xevie_id,
        .opcode = XCB_XEVIE_SEND,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xevie_send_cookie_t xcb_ret;
    xcb_xevie_send_request_t xcb_out;

    xcb_out.event = event;
    xcb_out.data_type = data_type;
    memset(xcb_out.pad0, 0, 64);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xevie_send_reply_t *
xcb_xevie_send_reply (xcb_connection_t         *c,
                      xcb_xevie_send_cookie_t   cookie  /**< */,
                      xcb_generic_error_t     **e)
{
    return (xcb_xevie_send_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_xevie_select_input_cookie_t
xcb_xevie_select_input (xcb_connection_t *c,
                        uint32_t          event_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xevie_id,
        .opcode = XCB_XEVIE_SELECT_INPUT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xevie_select_input_cookie_t xcb_ret;
    xcb_xevie_select_input_request_t xcb_out;

    xcb_out.event_mask = event_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xevie_select_input_cookie_t
xcb_xevie_select_input_unchecked (xcb_connection_t *c,
                                  uint32_t          event_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xevie_id,
        .opcode = XCB_XEVIE_SELECT_INPUT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xevie_select_input_cookie_t xcb_ret;
    xcb_xevie_select_input_request_t xcb_out;

    xcb_out.event_mask = event_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xevie_select_input_reply_t *
xcb_xevie_select_input_reply (xcb_connection_t                 *c,
                              xcb_xevie_select_input_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_xevie_select_input_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

@


1.3
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d21 3
a23 3
xcb_xevie_query_version (xcb_connection_t *c  /**< */,
                         uint16_t          client_major_version  /**< */,
                         uint16_t          client_minor_version  /**< */)
d26 4
a29 4
        /* count */ 2,
        /* ext */ &xcb_xevie_id,
        /* opcode */ XCB_XEVIE_QUERY_VERSION,
        /* isvoid */ 0
d49 3
a51 3
xcb_xevie_query_version_unchecked (xcb_connection_t *c  /**< */,
                                   uint16_t          client_major_version  /**< */,
                                   uint16_t          client_minor_version  /**< */)
d54 4
a57 4
        /* count */ 2,
        /* ext */ &xcb_xevie_id,
        /* opcode */ XCB_XEVIE_QUERY_VERSION,
        /* isvoid */ 0
d77 1
a77 1
xcb_xevie_query_version_reply (xcb_connection_t                  *c  /**< */,
d79 1
a79 1
                               xcb_generic_error_t              **e  /**< */)
d85 2
a86 2
xcb_xevie_start (xcb_connection_t *c  /**< */,
                 uint32_t          screen  /**< */)
d89 4
a92 4
        /* count */ 2,
        /* ext */ &xcb_xevie_id,
        /* opcode */ XCB_XEVIE_START,
        /* isvoid */ 0
d111 2
a112 2
xcb_xevie_start_unchecked (xcb_connection_t *c  /**< */,
                           uint32_t          screen  /**< */)
d115 4
a118 4
        /* count */ 2,
        /* ext */ &xcb_xevie_id,
        /* opcode */ XCB_XEVIE_START,
        /* isvoid */ 0
d137 1
a137 1
xcb_xevie_start_reply (xcb_connection_t          *c  /**< */,
d139 1
a139 1
                       xcb_generic_error_t      **e  /**< */)
d145 2
a146 2
xcb_xevie_end (xcb_connection_t *c  /**< */,
               uint32_t          cmap  /**< */)
d149 4
a152 4
        /* count */ 2,
        /* ext */ &xcb_xevie_id,
        /* opcode */ XCB_XEVIE_END,
        /* isvoid */ 0
d171 2
a172 2
xcb_xevie_end_unchecked (xcb_connection_t *c  /**< */,
                         uint32_t          cmap  /**< */)
d175 4
a178 4
        /* count */ 2,
        /* ext */ &xcb_xevie_id,
        /* opcode */ XCB_XEVIE_END,
        /* isvoid */ 0
d197 1
a197 1
xcb_xevie_end_reply (xcb_connection_t        *c  /**< */,
d199 1
a199 1
                     xcb_generic_error_t    **e  /**< */)
d205 1
a205 1
xcb_xevie_event_next (xcb_xevie_event_iterator_t *i  /**< */)
d213 1
a213 1
xcb_xevie_event_end (xcb_xevie_event_iterator_t i  /**< */)
d223 3
a225 3
xcb_xevie_send (xcb_connection_t  *c  /**< */,
                xcb_xevie_event_t  event  /**< */,
                uint32_t           data_type  /**< */)
d228 4
a231 4
        /* count */ 2,
        /* ext */ &xcb_xevie_id,
        /* opcode */ XCB_XEVIE_SEND,
        /* isvoid */ 0
d252 3
a254 3
xcb_xevie_send_unchecked (xcb_connection_t  *c  /**< */,
                          xcb_xevie_event_t  event  /**< */,
                          uint32_t           data_type  /**< */)
d257 4
a260 4
        /* count */ 2,
        /* ext */ &xcb_xevie_id,
        /* opcode */ XCB_XEVIE_SEND,
        /* isvoid */ 0
d281 1
a281 1
xcb_xevie_send_reply (xcb_connection_t         *c  /**< */,
d283 1
a283 1
                      xcb_generic_error_t     **e  /**< */)
d289 2
a290 2
xcb_xevie_select_input (xcb_connection_t *c  /**< */,
                        uint32_t          event_mask  /**< */)
d293 4
a296 4
        /* count */ 2,
        /* ext */ &xcb_xevie_id,
        /* opcode */ XCB_XEVIE_SELECT_INPUT,
        /* isvoid */ 0
d315 2
a316 2
xcb_xevie_select_input_unchecked (xcb_connection_t *c  /**< */,
                                  uint32_t          event_mask  /**< */)
d319 4
a322 4
        /* count */ 2,
        /* ext */ &xcb_xevie_id,
        /* opcode */ XCB_XEVIE_SELECT_INPUT,
        /* isvoid */ 0
d341 1
a341 1
xcb_xevie_select_input_reply (xcb_connection_t                 *c  /**< */,
d343 1
a343 1
                              xcb_generic_error_t             **e  /**< */)
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@a19 12

/*****************************************************************************
 **
 ** xcb_xevie_query_version_cookie_t xcb_xevie_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          client_major_version
 ** @@param uint16_t          client_minor_version
 ** @@returns xcb_xevie_query_version_cookie_t
 **
 *****************************************************************************/
 
d31 1
a31 1
    
d35 1
a35 1
    
d38 1
a38 1
    
d43 1
a43 1
    
a47 12

/*****************************************************************************
 **
 ** xcb_xevie_query_version_cookie_t xcb_xevie_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          client_major_version
 ** @@param uint16_t          client_minor_version
 ** @@returns xcb_xevie_query_version_cookie_t
 **
 *****************************************************************************/
 
d59 1
a59 1
    
d63 1
a63 1
    
d66 1
a66 1
    
d71 1
a71 1
    
a75 12

/*****************************************************************************
 **
 ** xcb_xevie_query_version_reply_t * xcb_xevie_query_version_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_xevie_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_xevie_query_version_reply_t *
 **
 *****************************************************************************/
 
a83 11

/*****************************************************************************
 **
 ** xcb_xevie_start_cookie_t xcb_xevie_start
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xevie_start_cookie_t
 **
 *****************************************************************************/
 
d94 1
a94 1
    
d98 1
a98 1
    
d100 1
a100 1
    
d105 1
a105 1
    
a109 11

/*****************************************************************************
 **
 ** xcb_xevie_start_cookie_t xcb_xevie_start_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xevie_start_cookie_t
 **
 *****************************************************************************/
 
d120 1
a120 1
    
d124 1
a124 1
    
d126 1
a126 1
    
d131 1
a131 1
    
a135 12

/*****************************************************************************
 **
 ** xcb_xevie_start_reply_t * xcb_xevie_start_reply
 ** 
 ** @@param xcb_connection_t          *c
 ** @@param xcb_xevie_start_cookie_t   cookie
 ** @@param xcb_generic_error_t      **e
 ** @@returns xcb_xevie_start_reply_t *
 **
 *****************************************************************************/
 
a143 11

/*****************************************************************************
 **
 ** xcb_xevie_end_cookie_t xcb_xevie_end
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          cmap
 ** @@returns xcb_xevie_end_cookie_t
 **
 *****************************************************************************/
 
d154 1
a154 1
    
d158 1
a158 1
    
d160 1
a160 1
    
d165 1
a165 1
    
a169 11

/*****************************************************************************
 **
 ** xcb_xevie_end_cookie_t xcb_xevie_end_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          cmap
 ** @@returns xcb_xevie_end_cookie_t
 **
 *****************************************************************************/
 
d180 1
a180 1
    
d184 1
a184 1
    
d186 1
a186 1
    
d191 1
a191 1
    
a195 12

/*****************************************************************************
 **
 ** xcb_xevie_end_reply_t * xcb_xevie_end_reply
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_xevie_end_cookie_t   cookie
 ** @@param xcb_generic_error_t    **e
 ** @@returns xcb_xevie_end_reply_t *
 **
 *****************************************************************************/
 
a203 10

/*****************************************************************************
 **
 ** void xcb_xevie_event_next
 ** 
 ** @@param xcb_xevie_event_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a211 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xevie_event_end
 ** 
 ** @@param xcb_xevie_event_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a221 12

/*****************************************************************************
 **
 ** xcb_xevie_send_cookie_t xcb_xevie_send
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_xevie_event_t  event
 ** @@param uint32_t           data_type
 ** @@returns xcb_xevie_send_cookie_t
 **
 *****************************************************************************/
 
d233 1
a233 1
    
d237 1
a237 1
    
d241 1
a241 1
    
d246 1
a246 1
    
a250 12

/*****************************************************************************
 **
 ** xcb_xevie_send_cookie_t xcb_xevie_send_unchecked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_xevie_event_t  event
 ** @@param uint32_t           data_type
 ** @@returns xcb_xevie_send_cookie_t
 **
 *****************************************************************************/
 
d262 1
a262 1
    
d266 1
a266 1
    
d270 1
a270 1
    
d275 1
a275 1
    
a279 12

/*****************************************************************************
 **
 ** xcb_xevie_send_reply_t * xcb_xevie_send_reply
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_xevie_send_cookie_t   cookie
 ** @@param xcb_generic_error_t     **e
 ** @@returns xcb_xevie_send_reply_t *
 **
 *****************************************************************************/
 
a287 11

/*****************************************************************************
 **
 ** xcb_xevie_select_input_cookie_t xcb_xevie_select_input
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          event_mask
 ** @@returns xcb_xevie_select_input_cookie_t
 **
 *****************************************************************************/
 
d298 1
a298 1
    
d302 1
a302 1
    
d304 1
a304 1
    
d309 1
a309 1
    
a313 11

/*****************************************************************************
 **
 ** xcb_xevie_select_input_cookie_t xcb_xevie_select_input_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          event_mask
 ** @@returns xcb_xevie_select_input_cookie_t
 **
 *****************************************************************************/
 
d324 1
a324 1
    
d328 1
a328 1
    
d330 1
a330 1
    
d335 1
a335 1
    
a339 12

/*****************************************************************************
 **
 ** xcb_xevie_select_input_reply_t * xcb_xevie_select_input_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xevie_select_input_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_xevie_select_input_reply_t *
 **
 *****************************************************************************/
 
@


1.1
log
@Initial revision
@
text
@d6 4
d12 1
d16 2
d55 1
d95 1
d152 1
d189 1
d246 1
d283 1
d382 1
d423 1
d480 1
d517 1
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
