head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	mKDGsTNpiR2zRHYQ;

1.4
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	01TEvO4uNHLqFv7N;

1.3
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.44;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.44;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from render.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "render.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"

xcb_extension_t xcb_render_id = { "RENDER", 0 };

void
xcb_render_glyph_next (xcb_render_glyph_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_glyph_t);
}

xcb_generic_iterator_t
xcb_render_glyph_end (xcb_render_glyph_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_render_glyphset_next (xcb_render_glyphset_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_glyphset_t);
}

xcb_generic_iterator_t
xcb_render_glyphset_end (xcb_render_glyphset_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_render_picture_next (xcb_render_picture_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_picture_t);
}

xcb_generic_iterator_t
xcb_render_picture_end (xcb_render_picture_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_render_pictformat_next (xcb_render_pictformat_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_pictformat_t);
}

xcb_generic_iterator_t
xcb_render_pictformat_end (xcb_render_pictformat_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_render_fixed_next (xcb_render_fixed_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_fixed_t);
}

xcb_generic_iterator_t
xcb_render_fixed_end (xcb_render_fixed_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_render_directformat_next (xcb_render_directformat_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_directformat_t);
}

xcb_generic_iterator_t
xcb_render_directformat_end (xcb_render_directformat_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_render_pictforminfo_next (xcb_render_pictforminfo_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_pictforminfo_t);
}

xcb_generic_iterator_t
xcb_render_pictforminfo_end (xcb_render_pictforminfo_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_render_pictvisual_next (xcb_render_pictvisual_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_pictvisual_t);
}

xcb_generic_iterator_t
xcb_render_pictvisual_end (xcb_render_pictvisual_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_render_pictdepth_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_render_pictdepth_t *_aux = (xcb_render_pictdepth_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_pictdepth_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* visuals */
    xcb_block_len += _aux->num_visuals * sizeof(xcb_render_pictvisual_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_pictvisual_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_render_pictvisual_t *
xcb_render_pictdepth_visuals (const xcb_render_pictdepth_t *R)
{
    return (xcb_render_pictvisual_t *) (R + 1);
}

int
xcb_render_pictdepth_visuals_length (const xcb_render_pictdepth_t *R)
{
    return R->num_visuals;
}

xcb_render_pictvisual_iterator_t
xcb_render_pictdepth_visuals_iterator (const xcb_render_pictdepth_t *R)
{
    xcb_render_pictvisual_iterator_t i;
    i.data = (xcb_render_pictvisual_t *) (R + 1);
    i.rem = R->num_visuals;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_render_pictdepth_next (xcb_render_pictdepth_iterator_t *i)
{
    xcb_render_pictdepth_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_render_pictdepth_t *)(((char *)R) + xcb_render_pictdepth_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_render_pictdepth_t *) child.data;
}

xcb_generic_iterator_t
xcb_render_pictdepth_end (xcb_render_pictdepth_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_render_pictdepth_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_render_pictscreen_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_render_pictscreen_t *_aux = (xcb_render_pictscreen_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_render_pictscreen_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* depths */
    for(i=0; i<_aux->num_depths; i++) {
        xcb_tmp_len = xcb_render_pictdepth_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_render_pictdepth_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

int
xcb_render_pictscreen_depths_length (const xcb_render_pictscreen_t *R)
{
    return R->num_depths;
}

xcb_render_pictdepth_iterator_t
xcb_render_pictscreen_depths_iterator (const xcb_render_pictscreen_t *R)
{
    xcb_render_pictdepth_iterator_t i;
    i.data = (xcb_render_pictdepth_t *) (R + 1);
    i.rem = R->num_depths;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_render_pictscreen_next (xcb_render_pictscreen_iterator_t *i)
{
    xcb_render_pictscreen_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_render_pictscreen_t *)(((char *)R) + xcb_render_pictscreen_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_render_pictscreen_t *) child.data;
}

xcb_generic_iterator_t
xcb_render_pictscreen_end (xcb_render_pictscreen_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_render_pictscreen_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_render_indexvalue_next (xcb_render_indexvalue_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_indexvalue_t);
}

xcb_generic_iterator_t
xcb_render_indexvalue_end (xcb_render_indexvalue_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_render_color_next (xcb_render_color_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_color_t);
}

xcb_generic_iterator_t
xcb_render_color_end (xcb_render_color_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_render_pointfix_next (xcb_render_pointfix_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_pointfix_t);
}

xcb_generic_iterator_t
xcb_render_pointfix_end (xcb_render_pointfix_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_render_linefix_next (xcb_render_linefix_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_linefix_t);
}

xcb_generic_iterator_t
xcb_render_linefix_end (xcb_render_linefix_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_render_triangle_next (xcb_render_triangle_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_triangle_t);
}

xcb_generic_iterator_t
xcb_render_triangle_end (xcb_render_triangle_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_render_trapezoid_next (xcb_render_trapezoid_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_trapezoid_t);
}

xcb_generic_iterator_t
xcb_render_trapezoid_end (xcb_render_trapezoid_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_render_glyphinfo_next (xcb_render_glyphinfo_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_glyphinfo_t);
}

xcb_generic_iterator_t
xcb_render_glyphinfo_end (xcb_render_glyphinfo_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_render_query_version_cookie_t
xcb_render_query_version (xcb_connection_t *c,
                          uint32_t          client_major_version,
                          uint32_t          client_minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_render_query_version_cookie_t xcb_ret;
    xcb_render_query_version_request_t xcb_out;

    xcb_out.client_major_version = client_major_version;
    xcb_out.client_minor_version = client_minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_query_version_cookie_t
xcb_render_query_version_unchecked (xcb_connection_t *c,
                                    uint32_t          client_major_version,
                                    uint32_t          client_minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_render_query_version_cookie_t xcb_ret;
    xcb_render_query_version_request_t xcb_out;

    xcb_out.client_major_version = client_major_version;
    xcb_out.client_minor_version = client_minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_query_version_reply_t *
xcb_render_query_version_reply (xcb_connection_t                   *c,
                                xcb_render_query_version_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_render_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_render_query_pict_formats_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_render_query_pict_formats_reply_t *_aux = (xcb_render_query_pict_formats_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_render_query_pict_formats_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* formats */
    xcb_block_len += _aux->num_formats * sizeof(xcb_render_pictforminfo_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_pictforminfo_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* screens */
    for(i=0; i<_aux->num_screens; i++) {
        xcb_tmp_len = xcb_render_pictscreen_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_render_pictscreen_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* subpixels */
    xcb_block_len += _aux->num_subpixel * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_render_query_pict_formats_cookie_t
xcb_render_query_pict_formats (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_QUERY_PICT_FORMATS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_render_query_pict_formats_cookie_t xcb_ret;
    xcb_render_query_pict_formats_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_query_pict_formats_cookie_t
xcb_render_query_pict_formats_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_QUERY_PICT_FORMATS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_render_query_pict_formats_cookie_t xcb_ret;
    xcb_render_query_pict_formats_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_pictforminfo_t *
xcb_render_query_pict_formats_formats (const xcb_render_query_pict_formats_reply_t *R)
{
    return (xcb_render_pictforminfo_t *) (R + 1);
}

int
xcb_render_query_pict_formats_formats_length (const xcb_render_query_pict_formats_reply_t *R)
{
    return R->num_formats;
}

xcb_render_pictforminfo_iterator_t
xcb_render_query_pict_formats_formats_iterator (const xcb_render_query_pict_formats_reply_t *R)
{
    xcb_render_pictforminfo_iterator_t i;
    i.data = (xcb_render_pictforminfo_t *) (R + 1);
    i.rem = R->num_formats;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_render_query_pict_formats_screens_length (const xcb_render_query_pict_formats_reply_t *R)
{
    return R->num_screens;
}

xcb_render_pictscreen_iterator_t
xcb_render_query_pict_formats_screens_iterator (const xcb_render_query_pict_formats_reply_t *R)
{
    xcb_render_pictscreen_iterator_t i;
    xcb_generic_iterator_t prev = xcb_render_pictforminfo_end(xcb_render_query_pict_formats_formats_iterator(R));
    i.data = (xcb_render_pictscreen_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_render_pictscreen_t, prev.index));
    i.rem = R->num_screens;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint32_t *
xcb_render_query_pict_formats_subpixels (const xcb_render_query_pict_formats_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_render_pictscreen_end(xcb_render_query_pict_formats_screens_iterator(R));
    return (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
}

int
xcb_render_query_pict_formats_subpixels_length (const xcb_render_query_pict_formats_reply_t *R)
{
    return R->num_subpixel;
}

xcb_generic_iterator_t
xcb_render_query_pict_formats_subpixels_end (const xcb_render_query_pict_formats_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_render_pictscreen_end(xcb_render_query_pict_formats_screens_iterator(R));
    i.data = ((uint32_t *) ((char*) prev.data + XCB_TYPE_PAD(uint32_t, prev.index))) + (R->num_subpixel);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_render_query_pict_formats_reply_t *
xcb_render_query_pict_formats_reply (xcb_connection_t                        *c,
                                     xcb_render_query_pict_formats_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e)
{
    return (xcb_render_query_pict_formats_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_render_query_pict_index_values_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_render_query_pict_index_values_reply_t *_aux = (xcb_render_query_pict_index_values_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_query_pict_index_values_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* values */
    xcb_block_len += _aux->num_values * sizeof(xcb_render_indexvalue_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_indexvalue_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_render_query_pict_index_values_cookie_t
xcb_render_query_pict_index_values (xcb_connection_t        *c,
                                    xcb_render_pictformat_t  format)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_QUERY_PICT_INDEX_VALUES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_render_query_pict_index_values_cookie_t xcb_ret;
    xcb_render_query_pict_index_values_request_t xcb_out;

    xcb_out.format = format;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_query_pict_index_values_cookie_t
xcb_render_query_pict_index_values_unchecked (xcb_connection_t        *c,
                                              xcb_render_pictformat_t  format)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_QUERY_PICT_INDEX_VALUES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_render_query_pict_index_values_cookie_t xcb_ret;
    xcb_render_query_pict_index_values_request_t xcb_out;

    xcb_out.format = format;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_indexvalue_t *
xcb_render_query_pict_index_values_values (const xcb_render_query_pict_index_values_reply_t *R)
{
    return (xcb_render_indexvalue_t *) (R + 1);
}

int
xcb_render_query_pict_index_values_values_length (const xcb_render_query_pict_index_values_reply_t *R)
{
    return R->num_values;
}

xcb_render_indexvalue_iterator_t
xcb_render_query_pict_index_values_values_iterator (const xcb_render_query_pict_index_values_reply_t *R)
{
    xcb_render_indexvalue_iterator_t i;
    i.data = (xcb_render_indexvalue_t *) (R + 1);
    i.rem = R->num_values;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_render_query_pict_index_values_reply_t *
xcb_render_query_pict_index_values_reply (xcb_connection_t                             *c,
                                          xcb_render_query_pict_index_values_cookie_t   cookie  /**< */,
                                          xcb_generic_error_t                         **e)
{
    return (xcb_render_query_pict_index_values_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_render_create_picture_value_list_serialize (void                                         **_buffer,
                                                uint32_t                                       value_mask,
                                                const xcb_render_create_picture_value_list_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[14];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(value_mask & XCB_RENDER_CP_REPEAT) {
        /* xcb_render_create_picture_value_list_t.repeat */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->repeat;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_ALPHA_MAP) {
        /* xcb_render_create_picture_value_list_t.alphamap */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->alphamap;
        xcb_block_len += sizeof(xcb_render_picture_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_render_picture_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_render_picture_t);
    }
    if(value_mask & XCB_RENDER_CP_ALPHA_X_ORIGIN) {
        /* xcb_render_create_picture_value_list_t.alphaxorigin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->alphaxorigin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_ALPHA_Y_ORIGIN) {
        /* xcb_render_create_picture_value_list_t.alphayorigin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->alphayorigin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_CLIP_X_ORIGIN) {
        /* xcb_render_create_picture_value_list_t.clipxorigin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->clipxorigin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_CLIP_Y_ORIGIN) {
        /* xcb_render_create_picture_value_list_t.clipyorigin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->clipyorigin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_CLIP_MASK) {
        /* xcb_render_create_picture_value_list_t.clipmask */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->clipmask;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_pixmap_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_RENDER_CP_GRAPHICS_EXPOSURE) {
        /* xcb_render_create_picture_value_list_t.graphicsexposure */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->graphicsexposure;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_SUBWINDOW_MODE) {
        /* xcb_render_create_picture_value_list_t.subwindowmode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->subwindowmode;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_POLY_EDGE) {
        /* xcb_render_create_picture_value_list_t.polyedge */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->polyedge;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_POLY_MODE) {
        /* xcb_render_create_picture_value_list_t.polymode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->polymode;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_DITHER) {
        /* xcb_render_create_picture_value_list_t.dither */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->dither;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(value_mask & XCB_RENDER_CP_COMPONENT_ALPHA) {
        /* xcb_render_create_picture_value_list_t.componentalpha */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->componentalpha;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_render_create_picture_value_list_unpack (const void                              *_buffer,
                                             uint32_t                                 value_mask,
                                             xcb_render_create_picture_value_list_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(value_mask & XCB_RENDER_CP_REPEAT) {
        /* xcb_render_create_picture_value_list_t.repeat */
        _aux->repeat = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_ALPHA_MAP) {
        /* xcb_render_create_picture_value_list_t.alphamap */
        _aux->alphamap = *(xcb_render_picture_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_render_picture_t);
        xcb_tmp += sizeof(xcb_render_picture_t);
        xcb_align_to = ALIGNOF(xcb_render_picture_t);
    }
    if(value_mask & XCB_RENDER_CP_ALPHA_X_ORIGIN) {
        /* xcb_render_create_picture_value_list_t.alphaxorigin */
        _aux->alphaxorigin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_ALPHA_Y_ORIGIN) {
        /* xcb_render_create_picture_value_list_t.alphayorigin */
        _aux->alphayorigin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_CLIP_X_ORIGIN) {
        /* xcb_render_create_picture_value_list_t.clipxorigin */
        _aux->clipxorigin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_CLIP_Y_ORIGIN) {
        /* xcb_render_create_picture_value_list_t.clipyorigin */
        _aux->clipyorigin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_CLIP_MASK) {
        /* xcb_render_create_picture_value_list_t.clipmask */
        _aux->clipmask = *(xcb_pixmap_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_tmp += sizeof(xcb_pixmap_t);
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_RENDER_CP_GRAPHICS_EXPOSURE) {
        /* xcb_render_create_picture_value_list_t.graphicsexposure */
        _aux->graphicsexposure = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_SUBWINDOW_MODE) {
        /* xcb_render_create_picture_value_list_t.subwindowmode */
        _aux->subwindowmode = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_POLY_EDGE) {
        /* xcb_render_create_picture_value_list_t.polyedge */
        _aux->polyedge = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_POLY_MODE) {
        /* xcb_render_create_picture_value_list_t.polymode */
        _aux->polymode = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_DITHER) {
        /* xcb_render_create_picture_value_list_t.dither */
        _aux->dither = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(value_mask & XCB_RENDER_CP_COMPONENT_ALPHA) {
        /* xcb_render_create_picture_value_list_t.componentalpha */
        _aux->componentalpha = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_render_create_picture_value_list_sizeof (const void  *_buffer,
                                             uint32_t     value_mask)
{
    xcb_render_create_picture_value_list_t _aux;
    return xcb_render_create_picture_value_list_unpack(_buffer, value_mask, &_aux);
}

int
xcb_render_create_picture_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_render_create_picture_request_t *_aux = (xcb_render_create_picture_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_create_picture_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* value_list */
    xcb_block_len += xcb_render_create_picture_value_list_sizeof(xcb_tmp, _aux->value_mask);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_create_picture_checked (xcb_connection_t        *c,
                                   xcb_render_picture_t     pid,
                                   xcb_drawable_t           drawable,
                                   xcb_render_pictformat_t  format,
                                   uint32_t                 value_mask,
                                   const void              *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_PICTURE,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_picture_request_t xcb_out;

    xcb_out.pid = pid;
    xcb_out.drawable = drawable;
    xcb_out.format = format;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_create_picture_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_render_create_picture_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_create_picture (xcb_connection_t        *c,
                           xcb_render_picture_t     pid,
                           xcb_drawable_t           drawable,
                           xcb_render_pictformat_t  format,
                           uint32_t                 value_mask,
                           const void              *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_PICTURE,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_picture_request_t xcb_out;

    xcb_out.pid = pid;
    xcb_out.drawable = drawable;
    xcb_out.format = format;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_create_picture_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_render_create_picture_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_create_picture_aux_checked (xcb_connection_t                             *c,
                                       xcb_render_picture_t                          pid,
                                       xcb_drawable_t                                drawable,
                                       xcb_render_pictformat_t                       format,
                                       uint32_t                                      value_mask,
                                       const xcb_render_create_picture_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_PICTURE,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_picture_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.pid = pid;
    xcb_out.drawable = drawable;
    xcb_out.format = format;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_create_picture_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_render_create_picture_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_create_picture_aux (xcb_connection_t                             *c,
                               xcb_render_picture_t                          pid,
                               xcb_drawable_t                                drawable,
                               xcb_render_pictformat_t                       format,
                               uint32_t                                      value_mask,
                               const xcb_render_create_picture_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_PICTURE,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_picture_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.pid = pid;
    xcb_out.drawable = drawable;
    xcb_out.format = format;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_create_picture_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_render_create_picture_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_render_create_picture_value_list (const xcb_render_create_picture_request_t *R)
{
    return (void *) (R + 1);
}

int
xcb_render_change_picture_value_list_serialize (void                                         **_buffer,
                                                uint32_t                                       value_mask,
                                                const xcb_render_change_picture_value_list_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[14];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(value_mask & XCB_RENDER_CP_REPEAT) {
        /* xcb_render_change_picture_value_list_t.repeat */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->repeat;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_ALPHA_MAP) {
        /* xcb_render_change_picture_value_list_t.alphamap */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->alphamap;
        xcb_block_len += sizeof(xcb_render_picture_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_render_picture_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_render_picture_t);
    }
    if(value_mask & XCB_RENDER_CP_ALPHA_X_ORIGIN) {
        /* xcb_render_change_picture_value_list_t.alphaxorigin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->alphaxorigin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_ALPHA_Y_ORIGIN) {
        /* xcb_render_change_picture_value_list_t.alphayorigin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->alphayorigin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_CLIP_X_ORIGIN) {
        /* xcb_render_change_picture_value_list_t.clipxorigin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->clipxorigin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_CLIP_Y_ORIGIN) {
        /* xcb_render_change_picture_value_list_t.clipyorigin */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->clipyorigin;
        xcb_block_len += sizeof(int32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(int32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_CLIP_MASK) {
        /* xcb_render_change_picture_value_list_t.clipmask */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->clipmask;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_pixmap_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_RENDER_CP_GRAPHICS_EXPOSURE) {
        /* xcb_render_change_picture_value_list_t.graphicsexposure */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->graphicsexposure;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_SUBWINDOW_MODE) {
        /* xcb_render_change_picture_value_list_t.subwindowmode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->subwindowmode;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_POLY_EDGE) {
        /* xcb_render_change_picture_value_list_t.polyedge */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->polyedge;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_POLY_MODE) {
        /* xcb_render_change_picture_value_list_t.polymode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->polymode;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_DITHER) {
        /* xcb_render_change_picture_value_list_t.dither */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->dither;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(value_mask & XCB_RENDER_CP_COMPONENT_ALPHA) {
        /* xcb_render_change_picture_value_list_t.componentalpha */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->componentalpha;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_render_change_picture_value_list_unpack (const void                              *_buffer,
                                             uint32_t                                 value_mask,
                                             xcb_render_change_picture_value_list_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if(value_mask & XCB_RENDER_CP_REPEAT) {
        /* xcb_render_change_picture_value_list_t.repeat */
        _aux->repeat = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_ALPHA_MAP) {
        /* xcb_render_change_picture_value_list_t.alphamap */
        _aux->alphamap = *(xcb_render_picture_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_render_picture_t);
        xcb_tmp += sizeof(xcb_render_picture_t);
        xcb_align_to = ALIGNOF(xcb_render_picture_t);
    }
    if(value_mask & XCB_RENDER_CP_ALPHA_X_ORIGIN) {
        /* xcb_render_change_picture_value_list_t.alphaxorigin */
        _aux->alphaxorigin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_ALPHA_Y_ORIGIN) {
        /* xcb_render_change_picture_value_list_t.alphayorigin */
        _aux->alphayorigin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_CLIP_X_ORIGIN) {
        /* xcb_render_change_picture_value_list_t.clipxorigin */
        _aux->clipxorigin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_CLIP_Y_ORIGIN) {
        /* xcb_render_change_picture_value_list_t.clipyorigin */
        _aux->clipyorigin = *(int32_t *)xcb_tmp;
        xcb_block_len += sizeof(int32_t);
        xcb_tmp += sizeof(int32_t);
        xcb_align_to = ALIGNOF(int32_t);
    }
    if(value_mask & XCB_RENDER_CP_CLIP_MASK) {
        /* xcb_render_change_picture_value_list_t.clipmask */
        _aux->clipmask = *(xcb_pixmap_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_pixmap_t);
        xcb_tmp += sizeof(xcb_pixmap_t);
        xcb_align_to = ALIGNOF(xcb_pixmap_t);
    }
    if(value_mask & XCB_RENDER_CP_GRAPHICS_EXPOSURE) {
        /* xcb_render_change_picture_value_list_t.graphicsexposure */
        _aux->graphicsexposure = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_SUBWINDOW_MODE) {
        /* xcb_render_change_picture_value_list_t.subwindowmode */
        _aux->subwindowmode = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_POLY_EDGE) {
        /* xcb_render_change_picture_value_list_t.polyedge */
        _aux->polyedge = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_POLY_MODE) {
        /* xcb_render_change_picture_value_list_t.polymode */
        _aux->polymode = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if(value_mask & XCB_RENDER_CP_DITHER) {
        /* xcb_render_change_picture_value_list_t.dither */
        _aux->dither = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(value_mask & XCB_RENDER_CP_COMPONENT_ALPHA) {
        /* xcb_render_change_picture_value_list_t.componentalpha */
        _aux->componentalpha = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_render_change_picture_value_list_sizeof (const void  *_buffer,
                                             uint32_t     value_mask)
{
    xcb_render_change_picture_value_list_t _aux;
    return xcb_render_change_picture_value_list_unpack(_buffer, value_mask, &_aux);
}

int
xcb_render_change_picture_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_render_change_picture_request_t *_aux = (xcb_render_change_picture_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_change_picture_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* value_list */
    xcb_block_len += xcb_render_change_picture_value_list_sizeof(xcb_tmp, _aux->value_mask);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_change_picture_checked (xcb_connection_t     *c,
                                   xcb_render_picture_t  picture,
                                   uint32_t              value_mask,
                                   const void           *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CHANGE_PICTURE,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_render_change_picture_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_change_picture_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_render_change_picture_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_change_picture (xcb_connection_t     *c,
                           xcb_render_picture_t  picture,
                           uint32_t              value_mask,
                           const void           *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CHANGE_PICTURE,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_render_change_picture_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_change_picture_value_list_t value_list */
    xcb_parts[4].iov_base = (char *) value_list;
    xcb_parts[4].iov_len =
      xcb_render_change_picture_value_list_sizeof (value_list, value_mask);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_change_picture_aux_checked (xcb_connection_t                             *c,
                                       xcb_render_picture_t                          picture,
                                       uint32_t                                      value_mask,
                                       const xcb_render_change_picture_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CHANGE_PICTURE,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_render_change_picture_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.picture = picture;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_change_picture_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_render_change_picture_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_change_picture_aux (xcb_connection_t                             *c,
                               xcb_render_picture_t                          picture,
                               uint32_t                                      value_mask,
                               const xcb_render_change_picture_value_list_t *value_list)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CHANGE_PICTURE,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_render_change_picture_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.picture = picture;
    xcb_out.value_mask = value_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_change_picture_value_list_t value_list */
    xcb_parts[4].iov_len =
      xcb_render_change_picture_value_list_serialize (&xcb_aux0, value_mask, value_list);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_render_change_picture_value_list (const xcb_render_change_picture_request_t *R)
{
    return (void *) (R + 1);
}

int
xcb_render_set_picture_clip_rectangles_sizeof (const void  *_buffer,
                                               uint32_t     rectangles_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_set_picture_clip_rectangles_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* rectangles */
    xcb_block_len += rectangles_len * sizeof(xcb_rectangle_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_rectangle_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_set_picture_clip_rectangles_checked (xcb_connection_t      *c,
                                                xcb_render_picture_t   picture,
                                                int16_t                clip_x_origin,
                                                int16_t                clip_y_origin,
                                                uint32_t               rectangles_len,
                                                const xcb_rectangle_t *rectangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_SET_PICTURE_CLIP_RECTANGLES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_set_picture_clip_rectangles_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.clip_x_origin = clip_x_origin;
    xcb_out.clip_y_origin = clip_y_origin;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rectangles */
    xcb_parts[4].iov_base = (char *) rectangles;
    xcb_parts[4].iov_len = rectangles_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_set_picture_clip_rectangles (xcb_connection_t      *c,
                                        xcb_render_picture_t   picture,
                                        int16_t                clip_x_origin,
                                        int16_t                clip_y_origin,
                                        uint32_t               rectangles_len,
                                        const xcb_rectangle_t *rectangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_SET_PICTURE_CLIP_RECTANGLES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_set_picture_clip_rectangles_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.clip_x_origin = clip_x_origin;
    xcb_out.clip_y_origin = clip_y_origin;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rectangles */
    xcb_parts[4].iov_base = (char *) rectangles;
    xcb_parts[4].iov_len = rectangles_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_rectangle_t *
xcb_render_set_picture_clip_rectangles_rectangles (const xcb_render_set_picture_clip_rectangles_request_t *R)
{
    return (xcb_rectangle_t *) (R + 1);
}

int
xcb_render_set_picture_clip_rectangles_rectangles_length (const xcb_render_set_picture_clip_rectangles_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_render_set_picture_clip_rectangles_request_t))/sizeof(xcb_rectangle_t));
}

xcb_rectangle_iterator_t
xcb_render_set_picture_clip_rectangles_rectangles_iterator (const xcb_render_set_picture_clip_rectangles_request_t *R)
{
    xcb_rectangle_iterator_t i;
    i.data = (xcb_rectangle_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_render_set_picture_clip_rectangles_request_t))/sizeof(xcb_rectangle_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_render_free_picture_checked (xcb_connection_t     *c,
                                 xcb_render_picture_t  picture)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_FREE_PICTURE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_free_picture_request_t xcb_out;

    xcb_out.picture = picture;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_free_picture (xcb_connection_t     *c,
                         xcb_render_picture_t  picture)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_FREE_PICTURE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_free_picture_request_t xcb_out;

    xcb_out.picture = picture;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_composite_checked (xcb_connection_t     *c,
                              uint8_t               op,
                              xcb_render_picture_t  src,
                              xcb_render_picture_t  mask,
                              xcb_render_picture_t  dst,
                              int16_t               src_x,
                              int16_t               src_y,
                              int16_t               mask_x,
                              int16_t               mask_y,
                              int16_t               dst_x,
                              int16_t               dst_y,
                              uint16_t              width,
                              uint16_t              height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_COMPOSITE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_composite_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.mask = mask;
    xcb_out.dst = dst;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;
    xcb_out.mask_x = mask_x;
    xcb_out.mask_y = mask_y;
    xcb_out.dst_x = dst_x;
    xcb_out.dst_y = dst_y;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_composite (xcb_connection_t     *c,
                      uint8_t               op,
                      xcb_render_picture_t  src,
                      xcb_render_picture_t  mask,
                      xcb_render_picture_t  dst,
                      int16_t               src_x,
                      int16_t               src_y,
                      int16_t               mask_x,
                      int16_t               mask_y,
                      int16_t               dst_x,
                      int16_t               dst_y,
                      uint16_t              width,
                      uint16_t              height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_COMPOSITE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_composite_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.mask = mask;
    xcb_out.dst = dst;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;
    xcb_out.mask_x = mask_x;
    xcb_out.mask_y = mask_y;
    xcb_out.dst_x = dst_x;
    xcb_out.dst_y = dst_y;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_render_trapezoids_sizeof (const void  *_buffer,
                              uint32_t     traps_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_trapezoids_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* traps */
    xcb_block_len += traps_len * sizeof(xcb_render_trapezoid_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_trapezoid_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_trapezoids_checked (xcb_connection_t             *c,
                               uint8_t                       op,
                               xcb_render_picture_t          src,
                               xcb_render_picture_t          dst,
                               xcb_render_pictformat_t       mask_format,
                               int16_t                       src_x,
                               int16_t                       src_y,
                               uint32_t                      traps_len,
                               const xcb_render_trapezoid_t *traps)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_TRAPEZOIDS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_trapezoids_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.dst = dst;
    xcb_out.mask_format = mask_format;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_trapezoid_t traps */
    xcb_parts[4].iov_base = (char *) traps;
    xcb_parts[4].iov_len = traps_len * sizeof(xcb_render_trapezoid_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_trapezoids (xcb_connection_t             *c,
                       uint8_t                       op,
                       xcb_render_picture_t          src,
                       xcb_render_picture_t          dst,
                       xcb_render_pictformat_t       mask_format,
                       int16_t                       src_x,
                       int16_t                       src_y,
                       uint32_t                      traps_len,
                       const xcb_render_trapezoid_t *traps)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_TRAPEZOIDS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_trapezoids_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.dst = dst;
    xcb_out.mask_format = mask_format;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_trapezoid_t traps */
    xcb_parts[4].iov_base = (char *) traps;
    xcb_parts[4].iov_len = traps_len * sizeof(xcb_render_trapezoid_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_trapezoid_t *
xcb_render_trapezoids_traps (const xcb_render_trapezoids_request_t *R)
{
    return (xcb_render_trapezoid_t *) (R + 1);
}

int
xcb_render_trapezoids_traps_length (const xcb_render_trapezoids_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_render_trapezoids_request_t))/sizeof(xcb_render_trapezoid_t));
}

xcb_render_trapezoid_iterator_t
xcb_render_trapezoids_traps_iterator (const xcb_render_trapezoids_request_t *R)
{
    xcb_render_trapezoid_iterator_t i;
    i.data = (xcb_render_trapezoid_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_render_trapezoids_request_t))/sizeof(xcb_render_trapezoid_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_render_triangles_sizeof (const void  *_buffer,
                             uint32_t     triangles_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_triangles_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* triangles */
    xcb_block_len += triangles_len * sizeof(xcb_render_triangle_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_triangle_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_triangles_checked (xcb_connection_t            *c,
                              uint8_t                      op,
                              xcb_render_picture_t         src,
                              xcb_render_picture_t         dst,
                              xcb_render_pictformat_t      mask_format,
                              int16_t                      src_x,
                              int16_t                      src_y,
                              uint32_t                     triangles_len,
                              const xcb_render_triangle_t *triangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_TRIANGLES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_triangles_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.dst = dst;
    xcb_out.mask_format = mask_format;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_triangle_t triangles */
    xcb_parts[4].iov_base = (char *) triangles;
    xcb_parts[4].iov_len = triangles_len * sizeof(xcb_render_triangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_triangles (xcb_connection_t            *c,
                      uint8_t                      op,
                      xcb_render_picture_t         src,
                      xcb_render_picture_t         dst,
                      xcb_render_pictformat_t      mask_format,
                      int16_t                      src_x,
                      int16_t                      src_y,
                      uint32_t                     triangles_len,
                      const xcb_render_triangle_t *triangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_TRIANGLES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_triangles_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.dst = dst;
    xcb_out.mask_format = mask_format;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_triangle_t triangles */
    xcb_parts[4].iov_base = (char *) triangles;
    xcb_parts[4].iov_len = triangles_len * sizeof(xcb_render_triangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_triangle_t *
xcb_render_triangles_triangles (const xcb_render_triangles_request_t *R)
{
    return (xcb_render_triangle_t *) (R + 1);
}

int
xcb_render_triangles_triangles_length (const xcb_render_triangles_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_render_triangles_request_t))/sizeof(xcb_render_triangle_t));
}

xcb_render_triangle_iterator_t
xcb_render_triangles_triangles_iterator (const xcb_render_triangles_request_t *R)
{
    xcb_render_triangle_iterator_t i;
    i.data = (xcb_render_triangle_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_render_triangles_request_t))/sizeof(xcb_render_triangle_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_render_tri_strip_sizeof (const void  *_buffer,
                             uint32_t     points_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_tri_strip_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* points */
    xcb_block_len += points_len * sizeof(xcb_render_pointfix_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_pointfix_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_tri_strip_checked (xcb_connection_t            *c,
                              uint8_t                      op,
                              xcb_render_picture_t         src,
                              xcb_render_picture_t         dst,
                              xcb_render_pictformat_t      mask_format,
                              int16_t                      src_x,
                              int16_t                      src_y,
                              uint32_t                     points_len,
                              const xcb_render_pointfix_t *points)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_TRI_STRIP,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_tri_strip_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.dst = dst;
    xcb_out.mask_format = mask_format;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_pointfix_t points */
    xcb_parts[4].iov_base = (char *) points;
    xcb_parts[4].iov_len = points_len * sizeof(xcb_render_pointfix_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_tri_strip (xcb_connection_t            *c,
                      uint8_t                      op,
                      xcb_render_picture_t         src,
                      xcb_render_picture_t         dst,
                      xcb_render_pictformat_t      mask_format,
                      int16_t                      src_x,
                      int16_t                      src_y,
                      uint32_t                     points_len,
                      const xcb_render_pointfix_t *points)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_TRI_STRIP,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_tri_strip_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.dst = dst;
    xcb_out.mask_format = mask_format;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_pointfix_t points */
    xcb_parts[4].iov_base = (char *) points;
    xcb_parts[4].iov_len = points_len * sizeof(xcb_render_pointfix_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_pointfix_t *
xcb_render_tri_strip_points (const xcb_render_tri_strip_request_t *R)
{
    return (xcb_render_pointfix_t *) (R + 1);
}

int
xcb_render_tri_strip_points_length (const xcb_render_tri_strip_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_render_tri_strip_request_t))/sizeof(xcb_render_pointfix_t));
}

xcb_render_pointfix_iterator_t
xcb_render_tri_strip_points_iterator (const xcb_render_tri_strip_request_t *R)
{
    xcb_render_pointfix_iterator_t i;
    i.data = (xcb_render_pointfix_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_render_tri_strip_request_t))/sizeof(xcb_render_pointfix_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_render_tri_fan_sizeof (const void  *_buffer,
                           uint32_t     points_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_tri_fan_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* points */
    xcb_block_len += points_len * sizeof(xcb_render_pointfix_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_pointfix_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_tri_fan_checked (xcb_connection_t            *c,
                            uint8_t                      op,
                            xcb_render_picture_t         src,
                            xcb_render_picture_t         dst,
                            xcb_render_pictformat_t      mask_format,
                            int16_t                      src_x,
                            int16_t                      src_y,
                            uint32_t                     points_len,
                            const xcb_render_pointfix_t *points)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_TRI_FAN,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_tri_fan_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.dst = dst;
    xcb_out.mask_format = mask_format;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_pointfix_t points */
    xcb_parts[4].iov_base = (char *) points;
    xcb_parts[4].iov_len = points_len * sizeof(xcb_render_pointfix_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_tri_fan (xcb_connection_t            *c,
                    uint8_t                      op,
                    xcb_render_picture_t         src,
                    xcb_render_picture_t         dst,
                    xcb_render_pictformat_t      mask_format,
                    int16_t                      src_x,
                    int16_t                      src_y,
                    uint32_t                     points_len,
                    const xcb_render_pointfix_t *points)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_TRI_FAN,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_tri_fan_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.dst = dst;
    xcb_out.mask_format = mask_format;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_pointfix_t points */
    xcb_parts[4].iov_base = (char *) points;
    xcb_parts[4].iov_len = points_len * sizeof(xcb_render_pointfix_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_pointfix_t *
xcb_render_tri_fan_points (const xcb_render_tri_fan_request_t *R)
{
    return (xcb_render_pointfix_t *) (R + 1);
}

int
xcb_render_tri_fan_points_length (const xcb_render_tri_fan_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_render_tri_fan_request_t))/sizeof(xcb_render_pointfix_t));
}

xcb_render_pointfix_iterator_t
xcb_render_tri_fan_points_iterator (const xcb_render_tri_fan_request_t *R)
{
    xcb_render_pointfix_iterator_t i;
    i.data = (xcb_render_pointfix_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_render_tri_fan_request_t))/sizeof(xcb_render_pointfix_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_render_create_glyph_set_checked (xcb_connection_t        *c,
                                     xcb_render_glyphset_t    gsid,
                                     xcb_render_pictformat_t  format)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_GLYPH_SET,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_glyph_set_request_t xcb_out;

    xcb_out.gsid = gsid;
    xcb_out.format = format;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_create_glyph_set (xcb_connection_t        *c,
                             xcb_render_glyphset_t    gsid,
                             xcb_render_pictformat_t  format)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_GLYPH_SET,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_glyph_set_request_t xcb_out;

    xcb_out.gsid = gsid;
    xcb_out.format = format;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_reference_glyph_set_checked (xcb_connection_t      *c,
                                        xcb_render_glyphset_t  gsid,
                                        xcb_render_glyphset_t  existing)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_REFERENCE_GLYPH_SET,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_reference_glyph_set_request_t xcb_out;

    xcb_out.gsid = gsid;
    xcb_out.existing = existing;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_reference_glyph_set (xcb_connection_t      *c,
                                xcb_render_glyphset_t  gsid,
                                xcb_render_glyphset_t  existing)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_REFERENCE_GLYPH_SET,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_reference_glyph_set_request_t xcb_out;

    xcb_out.gsid = gsid;
    xcb_out.existing = existing;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_free_glyph_set_checked (xcb_connection_t      *c,
                                   xcb_render_glyphset_t  glyphset)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_FREE_GLYPH_SET,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_free_glyph_set_request_t xcb_out;

    xcb_out.glyphset = glyphset;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_free_glyph_set (xcb_connection_t      *c,
                           xcb_render_glyphset_t  glyphset)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_FREE_GLYPH_SET,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_free_glyph_set_request_t xcb_out;

    xcb_out.glyphset = glyphset;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_render_add_glyphs_sizeof (const void  *_buffer,
                              uint32_t     data_len)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_render_add_glyphs_request_t *_aux = (xcb_render_add_glyphs_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_add_glyphs_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* glyphids */
    xcb_block_len += _aux->glyphs_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* glyphs */
    xcb_block_len += _aux->glyphs_len * sizeof(xcb_render_glyphinfo_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_glyphinfo_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* data */
    xcb_block_len += data_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_add_glyphs_checked (xcb_connection_t             *c,
                               xcb_render_glyphset_t         glyphset,
                               uint32_t                      glyphs_len,
                               const uint32_t               *glyphids,
                               const xcb_render_glyphinfo_t *glyphs,
                               uint32_t                      data_len,
                               const uint8_t                *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 8,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_ADD_GLYPHS,
        .isvoid = 1
    };

    struct iovec xcb_parts[10];
    xcb_void_cookie_t xcb_ret;
    xcb_render_add_glyphs_request_t xcb_out;

    xcb_out.glyphset = glyphset;
    xcb_out.glyphs_len = glyphs_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t glyphids */
    xcb_parts[4].iov_base = (char *) glyphids;
    xcb_parts[4].iov_len = glyphs_len * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_render_glyphinfo_t glyphs */
    xcb_parts[6].iov_base = (char *) glyphs;
    xcb_parts[6].iov_len = glyphs_len * sizeof(xcb_render_glyphinfo_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;
    /* uint8_t data */
    xcb_parts[8].iov_base = (char *) data;
    xcb_parts[8].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[9].iov_base = 0;
    xcb_parts[9].iov_len = -xcb_parts[8].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_add_glyphs (xcb_connection_t             *c,
                       xcb_render_glyphset_t         glyphset,
                       uint32_t                      glyphs_len,
                       const uint32_t               *glyphids,
                       const xcb_render_glyphinfo_t *glyphs,
                       uint32_t                      data_len,
                       const uint8_t                *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 8,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_ADD_GLYPHS,
        .isvoid = 1
    };

    struct iovec xcb_parts[10];
    xcb_void_cookie_t xcb_ret;
    xcb_render_add_glyphs_request_t xcb_out;

    xcb_out.glyphset = glyphset;
    xcb_out.glyphs_len = glyphs_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t glyphids */
    xcb_parts[4].iov_base = (char *) glyphids;
    xcb_parts[4].iov_len = glyphs_len * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_render_glyphinfo_t glyphs */
    xcb_parts[6].iov_base = (char *) glyphs;
    xcb_parts[6].iov_len = glyphs_len * sizeof(xcb_render_glyphinfo_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;
    /* uint8_t data */
    xcb_parts[8].iov_base = (char *) data;
    xcb_parts[8].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[9].iov_base = 0;
    xcb_parts[9].iov_len = -xcb_parts[8].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_render_add_glyphs_glyphids (const xcb_render_add_glyphs_request_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_render_add_glyphs_glyphids_length (const xcb_render_add_glyphs_request_t *R)
{
    return R->glyphs_len;
}

xcb_generic_iterator_t
xcb_render_add_glyphs_glyphids_end (const xcb_render_add_glyphs_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->glyphs_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_render_glyphinfo_t *
xcb_render_add_glyphs_glyphs (const xcb_render_add_glyphs_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_render_add_glyphs_glyphids_end(R);
    return (xcb_render_glyphinfo_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_render_glyphinfo_t, prev.index) + 0);
}

int
xcb_render_add_glyphs_glyphs_length (const xcb_render_add_glyphs_request_t *R)
{
    return R->glyphs_len;
}

xcb_render_glyphinfo_iterator_t
xcb_render_add_glyphs_glyphs_iterator (const xcb_render_add_glyphs_request_t *R)
{
    xcb_render_glyphinfo_iterator_t i;
    xcb_generic_iterator_t prev = xcb_render_add_glyphs_glyphids_end(R);
    i.data = (xcb_render_glyphinfo_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_render_glyphinfo_t, prev.index));
    i.rem = R->glyphs_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint8_t *
xcb_render_add_glyphs_data (const xcb_render_add_glyphs_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_render_glyphinfo_end(xcb_render_add_glyphs_glyphs_iterator(R));
    return (uint8_t *) ((char *) prev.data + XCB_TYPE_PAD(uint8_t, prev.index) + 0);
}

int
xcb_render_add_glyphs_data_length (const xcb_render_add_glyphs_request_t *R)
{
    return ((((char*)R) + R->length * 4) - (char*)(xcb_render_add_glyphs_data(R))) / sizeof(uint8_t);
}

xcb_generic_iterator_t
xcb_render_add_glyphs_data_end (const xcb_render_add_glyphs_request_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_render_glyphinfo_end(xcb_render_add_glyphs_glyphs_iterator(R));
    i.data = ((uint8_t *) ((char*) prev.data + XCB_TYPE_PAD(uint8_t, prev.index))) + (((((char*)R) + R->length * 4) - (char*)(xcb_render_add_glyphs_data(R))) / sizeof(uint8_t));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_render_free_glyphs_sizeof (const void  *_buffer,
                               uint32_t     glyphs_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_free_glyphs_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* glyphs */
    xcb_block_len += glyphs_len * sizeof(xcb_render_glyph_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_glyph_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_free_glyphs_checked (xcb_connection_t         *c,
                                xcb_render_glyphset_t     glyphset,
                                uint32_t                  glyphs_len,
                                const xcb_render_glyph_t *glyphs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_FREE_GLYPHS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_free_glyphs_request_t xcb_out;

    xcb_out.glyphset = glyphset;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_glyph_t glyphs */
    xcb_parts[4].iov_base = (char *) glyphs;
    xcb_parts[4].iov_len = glyphs_len * sizeof(xcb_render_glyph_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_free_glyphs (xcb_connection_t         *c,
                        xcb_render_glyphset_t     glyphset,
                        uint32_t                  glyphs_len,
                        const xcb_render_glyph_t *glyphs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_FREE_GLYPHS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_free_glyphs_request_t xcb_out;

    xcb_out.glyphset = glyphset;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_glyph_t glyphs */
    xcb_parts[4].iov_base = (char *) glyphs;
    xcb_parts[4].iov_len = glyphs_len * sizeof(xcb_render_glyph_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_glyph_t *
xcb_render_free_glyphs_glyphs (const xcb_render_free_glyphs_request_t *R)
{
    return (xcb_render_glyph_t *) (R + 1);
}

int
xcb_render_free_glyphs_glyphs_length (const xcb_render_free_glyphs_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_render_free_glyphs_request_t))/sizeof(xcb_render_glyph_t));
}

xcb_generic_iterator_t
xcb_render_free_glyphs_glyphs_end (const xcb_render_free_glyphs_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_render_glyph_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_render_free_glyphs_request_t))/sizeof(xcb_render_glyph_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_render_composite_glyphs_8_sizeof (const void  *_buffer,
                                      uint32_t     glyphcmds_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_composite_glyphs_8_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* glyphcmds */
    xcb_block_len += glyphcmds_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_composite_glyphs_8_checked (xcb_connection_t        *c,
                                       uint8_t                  op,
                                       xcb_render_picture_t     src,
                                       xcb_render_picture_t     dst,
                                       xcb_render_pictformat_t  mask_format,
                                       xcb_render_glyphset_t    glyphset,
                                       int16_t                  src_x,
                                       int16_t                  src_y,
                                       uint32_t                 glyphcmds_len,
                                       const uint8_t           *glyphcmds)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_COMPOSITE_GLYPHS_8,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_composite_glyphs_8_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.dst = dst;
    xcb_out.mask_format = mask_format;
    xcb_out.glyphset = glyphset;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t glyphcmds */
    xcb_parts[4].iov_base = (char *) glyphcmds;
    xcb_parts[4].iov_len = glyphcmds_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_composite_glyphs_8 (xcb_connection_t        *c,
                               uint8_t                  op,
                               xcb_render_picture_t     src,
                               xcb_render_picture_t     dst,
                               xcb_render_pictformat_t  mask_format,
                               xcb_render_glyphset_t    glyphset,
                               int16_t                  src_x,
                               int16_t                  src_y,
                               uint32_t                 glyphcmds_len,
                               const uint8_t           *glyphcmds)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_COMPOSITE_GLYPHS_8,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_composite_glyphs_8_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.dst = dst;
    xcb_out.mask_format = mask_format;
    xcb_out.glyphset = glyphset;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t glyphcmds */
    xcb_parts[4].iov_base = (char *) glyphcmds;
    xcb_parts[4].iov_len = glyphcmds_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_render_composite_glyphs_8_glyphcmds (const xcb_render_composite_glyphs_8_request_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_render_composite_glyphs_8_glyphcmds_length (const xcb_render_composite_glyphs_8_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_render_composite_glyphs_8_request_t))/sizeof(uint8_t));
}

xcb_generic_iterator_t
xcb_render_composite_glyphs_8_glyphcmds_end (const xcb_render_composite_glyphs_8_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_render_composite_glyphs_8_request_t))/sizeof(uint8_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_render_composite_glyphs_16_sizeof (const void  *_buffer,
                                       uint32_t     glyphcmds_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_composite_glyphs_16_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* glyphcmds */
    xcb_block_len += glyphcmds_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_composite_glyphs_16_checked (xcb_connection_t        *c,
                                        uint8_t                  op,
                                        xcb_render_picture_t     src,
                                        xcb_render_picture_t     dst,
                                        xcb_render_pictformat_t  mask_format,
                                        xcb_render_glyphset_t    glyphset,
                                        int16_t                  src_x,
                                        int16_t                  src_y,
                                        uint32_t                 glyphcmds_len,
                                        const uint8_t           *glyphcmds)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_COMPOSITE_GLYPHS_16,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_composite_glyphs_16_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.dst = dst;
    xcb_out.mask_format = mask_format;
    xcb_out.glyphset = glyphset;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t glyphcmds */
    xcb_parts[4].iov_base = (char *) glyphcmds;
    xcb_parts[4].iov_len = glyphcmds_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_composite_glyphs_16 (xcb_connection_t        *c,
                                uint8_t                  op,
                                xcb_render_picture_t     src,
                                xcb_render_picture_t     dst,
                                xcb_render_pictformat_t  mask_format,
                                xcb_render_glyphset_t    glyphset,
                                int16_t                  src_x,
                                int16_t                  src_y,
                                uint32_t                 glyphcmds_len,
                                const uint8_t           *glyphcmds)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_COMPOSITE_GLYPHS_16,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_composite_glyphs_16_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.dst = dst;
    xcb_out.mask_format = mask_format;
    xcb_out.glyphset = glyphset;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t glyphcmds */
    xcb_parts[4].iov_base = (char *) glyphcmds;
    xcb_parts[4].iov_len = glyphcmds_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_render_composite_glyphs_16_glyphcmds (const xcb_render_composite_glyphs_16_request_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_render_composite_glyphs_16_glyphcmds_length (const xcb_render_composite_glyphs_16_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_render_composite_glyphs_16_request_t))/sizeof(uint8_t));
}

xcb_generic_iterator_t
xcb_render_composite_glyphs_16_glyphcmds_end (const xcb_render_composite_glyphs_16_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_render_composite_glyphs_16_request_t))/sizeof(uint8_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_render_composite_glyphs_32_sizeof (const void  *_buffer,
                                       uint32_t     glyphcmds_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_composite_glyphs_32_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* glyphcmds */
    xcb_block_len += glyphcmds_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_composite_glyphs_32_checked (xcb_connection_t        *c,
                                        uint8_t                  op,
                                        xcb_render_picture_t     src,
                                        xcb_render_picture_t     dst,
                                        xcb_render_pictformat_t  mask_format,
                                        xcb_render_glyphset_t    glyphset,
                                        int16_t                  src_x,
                                        int16_t                  src_y,
                                        uint32_t                 glyphcmds_len,
                                        const uint8_t           *glyphcmds)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_COMPOSITE_GLYPHS_32,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_composite_glyphs_32_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.dst = dst;
    xcb_out.mask_format = mask_format;
    xcb_out.glyphset = glyphset;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t glyphcmds */
    xcb_parts[4].iov_base = (char *) glyphcmds;
    xcb_parts[4].iov_len = glyphcmds_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_composite_glyphs_32 (xcb_connection_t        *c,
                                uint8_t                  op,
                                xcb_render_picture_t     src,
                                xcb_render_picture_t     dst,
                                xcb_render_pictformat_t  mask_format,
                                xcb_render_glyphset_t    glyphset,
                                int16_t                  src_x,
                                int16_t                  src_y,
                                uint32_t                 glyphcmds_len,
                                const uint8_t           *glyphcmds)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_COMPOSITE_GLYPHS_32,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_composite_glyphs_32_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.src = src;
    xcb_out.dst = dst;
    xcb_out.mask_format = mask_format;
    xcb_out.glyphset = glyphset;
    xcb_out.src_x = src_x;
    xcb_out.src_y = src_y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t glyphcmds */
    xcb_parts[4].iov_base = (char *) glyphcmds;
    xcb_parts[4].iov_len = glyphcmds_len * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_render_composite_glyphs_32_glyphcmds (const xcb_render_composite_glyphs_32_request_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_render_composite_glyphs_32_glyphcmds_length (const xcb_render_composite_glyphs_32_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_render_composite_glyphs_32_request_t))/sizeof(uint8_t));
}

xcb_generic_iterator_t
xcb_render_composite_glyphs_32_glyphcmds_end (const xcb_render_composite_glyphs_32_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_render_composite_glyphs_32_request_t))/sizeof(uint8_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_render_fill_rectangles_sizeof (const void  *_buffer,
                                   uint32_t     rects_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_fill_rectangles_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* rects */
    xcb_block_len += rects_len * sizeof(xcb_rectangle_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_rectangle_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_fill_rectangles_checked (xcb_connection_t      *c,
                                    uint8_t                op,
                                    xcb_render_picture_t   dst,
                                    xcb_render_color_t     color,
                                    uint32_t               rects_len,
                                    const xcb_rectangle_t *rects)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_FILL_RECTANGLES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_fill_rectangles_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.dst = dst;
    xcb_out.color = color;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rects */
    xcb_parts[4].iov_base = (char *) rects;
    xcb_parts[4].iov_len = rects_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_fill_rectangles (xcb_connection_t      *c,
                            uint8_t                op,
                            xcb_render_picture_t   dst,
                            xcb_render_color_t     color,
                            uint32_t               rects_len,
                            const xcb_rectangle_t *rects)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_FILL_RECTANGLES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_fill_rectangles_request_t xcb_out;

    xcb_out.op = op;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.dst = dst;
    xcb_out.color = color;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rects */
    xcb_parts[4].iov_base = (char *) rects;
    xcb_parts[4].iov_len = rects_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_rectangle_t *
xcb_render_fill_rectangles_rects (const xcb_render_fill_rectangles_request_t *R)
{
    return (xcb_rectangle_t *) (R + 1);
}

int
xcb_render_fill_rectangles_rects_length (const xcb_render_fill_rectangles_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_render_fill_rectangles_request_t))/sizeof(xcb_rectangle_t));
}

xcb_rectangle_iterator_t
xcb_render_fill_rectangles_rects_iterator (const xcb_render_fill_rectangles_request_t *R)
{
    xcb_rectangle_iterator_t i;
    i.data = (xcb_rectangle_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_render_fill_rectangles_request_t))/sizeof(xcb_rectangle_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_render_create_cursor_checked (xcb_connection_t     *c,
                                  xcb_cursor_t          cid,
                                  xcb_render_picture_t  source,
                                  uint16_t              x,
                                  uint16_t              y)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_cursor_request_t xcb_out;

    xcb_out.cid = cid;
    xcb_out.source = source;
    xcb_out.x = x;
    xcb_out.y = y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_create_cursor (xcb_connection_t     *c,
                          xcb_cursor_t          cid,
                          xcb_render_picture_t  source,
                          uint16_t              x,
                          uint16_t              y)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_cursor_request_t xcb_out;

    xcb_out.cid = cid;
    xcb_out.source = source;
    xcb_out.x = x;
    xcb_out.y = y;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void
xcb_render_transform_next (xcb_render_transform_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_transform_t);
}

xcb_generic_iterator_t
xcb_render_transform_end (xcb_render_transform_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_void_cookie_t
xcb_render_set_picture_transform_checked (xcb_connection_t       *c,
                                          xcb_render_picture_t    picture,
                                          xcb_render_transform_t  transform)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_SET_PICTURE_TRANSFORM,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_set_picture_transform_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.transform = transform;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_set_picture_transform (xcb_connection_t       *c,
                                  xcb_render_picture_t    picture,
                                  xcb_render_transform_t  transform)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_SET_PICTURE_TRANSFORM,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_set_picture_transform_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.transform = transform;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_render_query_filters_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_render_query_filters_reply_t *_aux = (xcb_render_query_filters_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_render_query_filters_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* aliases */
    xcb_block_len += _aux->num_aliases * sizeof(uint16_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint16_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* filters */
    for(i=0; i<_aux->num_filters; i++) {
        xcb_tmp_len = xcb_str_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_str_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_render_query_filters_cookie_t
xcb_render_query_filters (xcb_connection_t *c,
                          xcb_drawable_t    drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_QUERY_FILTERS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_render_query_filters_cookie_t xcb_ret;
    xcb_render_query_filters_request_t xcb_out;

    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_query_filters_cookie_t
xcb_render_query_filters_unchecked (xcb_connection_t *c,
                                    xcb_drawable_t    drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_QUERY_FILTERS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_render_query_filters_cookie_t xcb_ret;
    xcb_render_query_filters_request_t xcb_out;

    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint16_t *
xcb_render_query_filters_aliases (const xcb_render_query_filters_reply_t *R)
{
    return (uint16_t *) (R + 1);
}

int
xcb_render_query_filters_aliases_length (const xcb_render_query_filters_reply_t *R)
{
    return R->num_aliases;
}

xcb_generic_iterator_t
xcb_render_query_filters_aliases_end (const xcb_render_query_filters_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint16_t *) (R + 1)) + (R->num_aliases);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_render_query_filters_filters_length (const xcb_render_query_filters_reply_t *R)
{
    return R->num_filters;
}

xcb_str_iterator_t
xcb_render_query_filters_filters_iterator (const xcb_render_query_filters_reply_t *R)
{
    xcb_str_iterator_t i;
    xcb_generic_iterator_t prev = xcb_render_query_filters_aliases_end(R);
    i.data = (xcb_str_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_str_t, prev.index));
    i.rem = R->num_filters;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_render_query_filters_reply_t *
xcb_render_query_filters_reply (xcb_connection_t                   *c,
                                xcb_render_query_filters_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_render_query_filters_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_render_set_picture_filter_sizeof (const void  *_buffer,
                                      uint32_t     values_len)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_render_set_picture_filter_request_t *_aux = (xcb_render_set_picture_filter_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_set_picture_filter_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* filter */
    xcb_block_len += _aux->filter_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* values */
    xcb_block_len += values_len * sizeof(xcb_render_fixed_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_fixed_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_set_picture_filter_checked (xcb_connection_t         *c,
                                       xcb_render_picture_t      picture,
                                       uint16_t                  filter_len,
                                       const char               *filter,
                                       uint32_t                  values_len,
                                       const xcb_render_fixed_t *values)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_SET_PICTURE_FILTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_render_set_picture_filter_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.filter_len = filter_len;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char filter */
    xcb_parts[4].iov_base = (char *) filter;
    xcb_parts[4].iov_len = filter_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_render_fixed_t values */
    xcb_parts[6].iov_base = (char *) values;
    xcb_parts[6].iov_len = values_len * sizeof(xcb_render_fixed_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_set_picture_filter (xcb_connection_t         *c,
                               xcb_render_picture_t      picture,
                               uint16_t                  filter_len,
                               const char               *filter,
                               uint32_t                  values_len,
                               const xcb_render_fixed_t *values)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_SET_PICTURE_FILTER,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_render_set_picture_filter_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.filter_len = filter_len;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char filter */
    xcb_parts[4].iov_base = (char *) filter;
    xcb_parts[4].iov_len = filter_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_render_fixed_t values */
    xcb_parts[6].iov_base = (char *) values;
    xcb_parts[6].iov_len = values_len * sizeof(xcb_render_fixed_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_render_set_picture_filter_filter (const xcb_render_set_picture_filter_request_t *R)
{
    return (char *) (R + 1);
}

int
xcb_render_set_picture_filter_filter_length (const xcb_render_set_picture_filter_request_t *R)
{
    return R->filter_len;
}

xcb_generic_iterator_t
xcb_render_set_picture_filter_filter_end (const xcb_render_set_picture_filter_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->filter_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_render_fixed_t *
xcb_render_set_picture_filter_values (const xcb_render_set_picture_filter_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_render_set_picture_filter_filter_end(R);
    return (xcb_render_fixed_t *) ((char *) prev.data + ((-prev.index) & (4 - 1)) + 0);
}

int
xcb_render_set_picture_filter_values_length (const xcb_render_set_picture_filter_request_t *R)
{
    return ((((char*)R) + R->length * 4) - (char*)(xcb_render_set_picture_filter_values(R))) / sizeof(xcb_render_fixed_t);
}

xcb_generic_iterator_t
xcb_render_set_picture_filter_values_end (const xcb_render_set_picture_filter_request_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_render_set_picture_filter_filter_end(R);
    i.data = ((xcb_render_fixed_t *) ((char*) prev.data + ((-prev.index) & (4 - 1)))) + (((((char*)R) + R->length * 4) - (char*)(xcb_render_set_picture_filter_values(R))) / sizeof(xcb_render_fixed_t));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_render_animcursorelt_next (xcb_render_animcursorelt_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_animcursorelt_t);
}

xcb_generic_iterator_t
xcb_render_animcursorelt_end (xcb_render_animcursorelt_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_render_create_anim_cursor_sizeof (const void  *_buffer,
                                      uint32_t     cursors_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_create_anim_cursor_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* cursors */
    xcb_block_len += cursors_len * sizeof(xcb_render_animcursorelt_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_animcursorelt_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_create_anim_cursor_checked (xcb_connection_t                 *c,
                                       xcb_cursor_t                      cid,
                                       uint32_t                          cursors_len,
                                       const xcb_render_animcursorelt_t *cursors)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_ANIM_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_anim_cursor_request_t xcb_out;

    xcb_out.cid = cid;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_animcursorelt_t cursors */
    xcb_parts[4].iov_base = (char *) cursors;
    xcb_parts[4].iov_len = cursors_len * sizeof(xcb_render_animcursorelt_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_create_anim_cursor (xcb_connection_t                 *c,
                               xcb_cursor_t                      cid,
                               uint32_t                          cursors_len,
                               const xcb_render_animcursorelt_t *cursors)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_ANIM_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_anim_cursor_request_t xcb_out;

    xcb_out.cid = cid;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_animcursorelt_t cursors */
    xcb_parts[4].iov_base = (char *) cursors;
    xcb_parts[4].iov_len = cursors_len * sizeof(xcb_render_animcursorelt_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_animcursorelt_t *
xcb_render_create_anim_cursor_cursors (const xcb_render_create_anim_cursor_request_t *R)
{
    return (xcb_render_animcursorelt_t *) (R + 1);
}

int
xcb_render_create_anim_cursor_cursors_length (const xcb_render_create_anim_cursor_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_render_create_anim_cursor_request_t))/sizeof(xcb_render_animcursorelt_t));
}

xcb_render_animcursorelt_iterator_t
xcb_render_create_anim_cursor_cursors_iterator (const xcb_render_create_anim_cursor_request_t *R)
{
    xcb_render_animcursorelt_iterator_t i;
    i.data = (xcb_render_animcursorelt_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_render_create_anim_cursor_request_t))/sizeof(xcb_render_animcursorelt_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_render_spanfix_next (xcb_render_spanfix_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_spanfix_t);
}

xcb_generic_iterator_t
xcb_render_spanfix_end (xcb_render_spanfix_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_render_trap_next (xcb_render_trap_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_render_trap_t);
}

xcb_generic_iterator_t
xcb_render_trap_end (xcb_render_trap_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_render_add_traps_sizeof (const void  *_buffer,
                             uint32_t     traps_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_add_traps_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* traps */
    xcb_block_len += traps_len * sizeof(xcb_render_trap_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_trap_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_add_traps_checked (xcb_connection_t        *c,
                              xcb_render_picture_t     picture,
                              int16_t                  x_off,
                              int16_t                  y_off,
                              uint32_t                 traps_len,
                              const xcb_render_trap_t *traps)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_ADD_TRAPS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_add_traps_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.x_off = x_off;
    xcb_out.y_off = y_off;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_trap_t traps */
    xcb_parts[4].iov_base = (char *) traps;
    xcb_parts[4].iov_len = traps_len * sizeof(xcb_render_trap_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_add_traps (xcb_connection_t        *c,
                      xcb_render_picture_t     picture,
                      int16_t                  x_off,
                      int16_t                  y_off,
                      uint32_t                 traps_len,
                      const xcb_render_trap_t *traps)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_ADD_TRAPS,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_render_add_traps_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.x_off = x_off;
    xcb_out.y_off = y_off;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_trap_t traps */
    xcb_parts[4].iov_base = (char *) traps;
    xcb_parts[4].iov_len = traps_len * sizeof(xcb_render_trap_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_trap_t *
xcb_render_add_traps_traps (const xcb_render_add_traps_request_t *R)
{
    return (xcb_render_trap_t *) (R + 1);
}

int
xcb_render_add_traps_traps_length (const xcb_render_add_traps_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_render_add_traps_request_t))/sizeof(xcb_render_trap_t));
}

xcb_render_trap_iterator_t
xcb_render_add_traps_traps_iterator (const xcb_render_add_traps_request_t *R)
{
    xcb_render_trap_iterator_t i;
    i.data = (xcb_render_trap_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_render_add_traps_request_t))/sizeof(xcb_render_trap_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_render_create_solid_fill_checked (xcb_connection_t     *c,
                                      xcb_render_picture_t  picture,
                                      xcb_render_color_t    color)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_SOLID_FILL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_solid_fill_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.color = color;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_create_solid_fill (xcb_connection_t     *c,
                              xcb_render_picture_t  picture,
                              xcb_render_color_t    color)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_SOLID_FILL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_solid_fill_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.color = color;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_render_create_linear_gradient_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_render_create_linear_gradient_request_t *_aux = (xcb_render_create_linear_gradient_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_create_linear_gradient_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* stops */
    xcb_block_len += _aux->num_stops * sizeof(xcb_render_fixed_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_fixed_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* colors */
    xcb_block_len += _aux->num_stops * sizeof(xcb_render_color_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_color_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_create_linear_gradient_checked (xcb_connection_t         *c,
                                           xcb_render_picture_t      picture,
                                           xcb_render_pointfix_t     p1,
                                           xcb_render_pointfix_t     p2,
                                           uint32_t                  num_stops,
                                           const xcb_render_fixed_t *stops,
                                           const xcb_render_color_t *colors)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_LINEAR_GRADIENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_linear_gradient_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.p1 = p1;
    xcb_out.p2 = p2;
    xcb_out.num_stops = num_stops;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_fixed_t stops */
    xcb_parts[4].iov_base = (char *) stops;
    xcb_parts[4].iov_len = num_stops * sizeof(xcb_render_fixed_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_render_color_t colors */
    xcb_parts[6].iov_base = (char *) colors;
    xcb_parts[6].iov_len = num_stops * sizeof(xcb_render_color_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_create_linear_gradient (xcb_connection_t         *c,
                                   xcb_render_picture_t      picture,
                                   xcb_render_pointfix_t     p1,
                                   xcb_render_pointfix_t     p2,
                                   uint32_t                  num_stops,
                                   const xcb_render_fixed_t *stops,
                                   const xcb_render_color_t *colors)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_LINEAR_GRADIENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_linear_gradient_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.p1 = p1;
    xcb_out.p2 = p2;
    xcb_out.num_stops = num_stops;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_fixed_t stops */
    xcb_parts[4].iov_base = (char *) stops;
    xcb_parts[4].iov_len = num_stops * sizeof(xcb_render_fixed_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_render_color_t colors */
    xcb_parts[6].iov_base = (char *) colors;
    xcb_parts[6].iov_len = num_stops * sizeof(xcb_render_color_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_fixed_t *
xcb_render_create_linear_gradient_stops (const xcb_render_create_linear_gradient_request_t *R)
{
    return (xcb_render_fixed_t *) (R + 1);
}

int
xcb_render_create_linear_gradient_stops_length (const xcb_render_create_linear_gradient_request_t *R)
{
    return R->num_stops;
}

xcb_generic_iterator_t
xcb_render_create_linear_gradient_stops_end (const xcb_render_create_linear_gradient_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_render_fixed_t *) (R + 1)) + (R->num_stops);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_render_color_t *
xcb_render_create_linear_gradient_colors (const xcb_render_create_linear_gradient_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_render_create_linear_gradient_stops_end(R);
    return (xcb_render_color_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_render_color_t, prev.index) + 0);
}

int
xcb_render_create_linear_gradient_colors_length (const xcb_render_create_linear_gradient_request_t *R)
{
    return R->num_stops;
}

xcb_render_color_iterator_t
xcb_render_create_linear_gradient_colors_iterator (const xcb_render_create_linear_gradient_request_t *R)
{
    xcb_render_color_iterator_t i;
    xcb_generic_iterator_t prev = xcb_render_create_linear_gradient_stops_end(R);
    i.data = (xcb_render_color_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_render_color_t, prev.index));
    i.rem = R->num_stops;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_render_create_radial_gradient_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_render_create_radial_gradient_request_t *_aux = (xcb_render_create_radial_gradient_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_create_radial_gradient_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* stops */
    xcb_block_len += _aux->num_stops * sizeof(xcb_render_fixed_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_fixed_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* colors */
    xcb_block_len += _aux->num_stops * sizeof(xcb_render_color_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_color_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_create_radial_gradient_checked (xcb_connection_t         *c,
                                           xcb_render_picture_t      picture,
                                           xcb_render_pointfix_t     inner,
                                           xcb_render_pointfix_t     outer,
                                           xcb_render_fixed_t        inner_radius,
                                           xcb_render_fixed_t        outer_radius,
                                           uint32_t                  num_stops,
                                           const xcb_render_fixed_t *stops,
                                           const xcb_render_color_t *colors)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_RADIAL_GRADIENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_radial_gradient_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.inner = inner;
    xcb_out.outer = outer;
    xcb_out.inner_radius = inner_radius;
    xcb_out.outer_radius = outer_radius;
    xcb_out.num_stops = num_stops;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_fixed_t stops */
    xcb_parts[4].iov_base = (char *) stops;
    xcb_parts[4].iov_len = num_stops * sizeof(xcb_render_fixed_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_render_color_t colors */
    xcb_parts[6].iov_base = (char *) colors;
    xcb_parts[6].iov_len = num_stops * sizeof(xcb_render_color_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_create_radial_gradient (xcb_connection_t         *c,
                                   xcb_render_picture_t      picture,
                                   xcb_render_pointfix_t     inner,
                                   xcb_render_pointfix_t     outer,
                                   xcb_render_fixed_t        inner_radius,
                                   xcb_render_fixed_t        outer_radius,
                                   uint32_t                  num_stops,
                                   const xcb_render_fixed_t *stops,
                                   const xcb_render_color_t *colors)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_RADIAL_GRADIENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_radial_gradient_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.inner = inner;
    xcb_out.outer = outer;
    xcb_out.inner_radius = inner_radius;
    xcb_out.outer_radius = outer_radius;
    xcb_out.num_stops = num_stops;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_fixed_t stops */
    xcb_parts[4].iov_base = (char *) stops;
    xcb_parts[4].iov_len = num_stops * sizeof(xcb_render_fixed_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_render_color_t colors */
    xcb_parts[6].iov_base = (char *) colors;
    xcb_parts[6].iov_len = num_stops * sizeof(xcb_render_color_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_fixed_t *
xcb_render_create_radial_gradient_stops (const xcb_render_create_radial_gradient_request_t *R)
{
    return (xcb_render_fixed_t *) (R + 1);
}

int
xcb_render_create_radial_gradient_stops_length (const xcb_render_create_radial_gradient_request_t *R)
{
    return R->num_stops;
}

xcb_generic_iterator_t
xcb_render_create_radial_gradient_stops_end (const xcb_render_create_radial_gradient_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_render_fixed_t *) (R + 1)) + (R->num_stops);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_render_color_t *
xcb_render_create_radial_gradient_colors (const xcb_render_create_radial_gradient_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_render_create_radial_gradient_stops_end(R);
    return (xcb_render_color_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_render_color_t, prev.index) + 0);
}

int
xcb_render_create_radial_gradient_colors_length (const xcb_render_create_radial_gradient_request_t *R)
{
    return R->num_stops;
}

xcb_render_color_iterator_t
xcb_render_create_radial_gradient_colors_iterator (const xcb_render_create_radial_gradient_request_t *R)
{
    xcb_render_color_iterator_t i;
    xcb_generic_iterator_t prev = xcb_render_create_radial_gradient_stops_end(R);
    i.data = (xcb_render_color_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_render_color_t, prev.index));
    i.rem = R->num_stops;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_render_create_conical_gradient_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_render_create_conical_gradient_request_t *_aux = (xcb_render_create_conical_gradient_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_render_create_conical_gradient_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* stops */
    xcb_block_len += _aux->num_stops * sizeof(xcb_render_fixed_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_fixed_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* colors */
    xcb_block_len += _aux->num_stops * sizeof(xcb_render_color_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_color_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_render_create_conical_gradient_checked (xcb_connection_t         *c,
                                            xcb_render_picture_t      picture,
                                            xcb_render_pointfix_t     center,
                                            xcb_render_fixed_t        angle,
                                            uint32_t                  num_stops,
                                            const xcb_render_fixed_t *stops,
                                            const xcb_render_color_t *colors)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_CONICAL_GRADIENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_conical_gradient_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.center = center;
    xcb_out.angle = angle;
    xcb_out.num_stops = num_stops;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_fixed_t stops */
    xcb_parts[4].iov_base = (char *) stops;
    xcb_parts[4].iov_len = num_stops * sizeof(xcb_render_fixed_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_render_color_t colors */
    xcb_parts[6].iov_base = (char *) colors;
    xcb_parts[6].iov_len = num_stops * sizeof(xcb_render_color_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_render_create_conical_gradient (xcb_connection_t         *c,
                                    xcb_render_picture_t      picture,
                                    xcb_render_pointfix_t     center,
                                    xcb_render_fixed_t        angle,
                                    uint32_t                  num_stops,
                                    const xcb_render_fixed_t *stops,
                                    const xcb_render_color_t *colors)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_render_id,
        .opcode = XCB_RENDER_CREATE_CONICAL_GRADIENT,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_render_create_conical_gradient_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.center = center;
    xcb_out.angle = angle;
    xcb_out.num_stops = num_stops;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_render_fixed_t stops */
    xcb_parts[4].iov_base = (char *) stops;
    xcb_parts[4].iov_len = num_stops * sizeof(xcb_render_fixed_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_render_color_t colors */
    xcb_parts[6].iov_base = (char *) colors;
    xcb_parts[6].iov_len = num_stops * sizeof(xcb_render_color_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_render_fixed_t *
xcb_render_create_conical_gradient_stops (const xcb_render_create_conical_gradient_request_t *R)
{
    return (xcb_render_fixed_t *) (R + 1);
}

int
xcb_render_create_conical_gradient_stops_length (const xcb_render_create_conical_gradient_request_t *R)
{
    return R->num_stops;
}

xcb_generic_iterator_t
xcb_render_create_conical_gradient_stops_end (const xcb_render_create_conical_gradient_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_render_fixed_t *) (R + 1)) + (R->num_stops);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_render_color_t *
xcb_render_create_conical_gradient_colors (const xcb_render_create_conical_gradient_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_render_create_conical_gradient_stops_end(R);
    return (xcb_render_color_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_render_color_t, prev.index) + 0);
}

int
xcb_render_create_conical_gradient_colors_length (const xcb_render_create_conical_gradient_request_t *R)
{
    return R->num_stops;
}

xcb_render_color_iterator_t
xcb_render_create_conical_gradient_colors_iterator (const xcb_render_create_conical_gradient_request_t *R)
{
    xcb_render_color_iterator_t i;
    xcb_generic_iterator_t prev = xcb_render_create_conical_gradient_stops_end(R);
    i.data = (xcb_render_color_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_render_color_t, prev.index));
    i.rem = R->num_stops;
    i.index = (char *) i.data - (char *) R;
    return i;
}

@


1.4
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d22 1
a22 1
xcb_render_glyph_next (xcb_render_glyph_iterator_t *i  /**< */)
d30 1
a30 1
xcb_render_glyph_end (xcb_render_glyph_iterator_t i  /**< */)
d40 1
a40 1
xcb_render_glyphset_next (xcb_render_glyphset_iterator_t *i  /**< */)
d48 1
a48 1
xcb_render_glyphset_end (xcb_render_glyphset_iterator_t i  /**< */)
d58 1
a58 1
xcb_render_picture_next (xcb_render_picture_iterator_t *i  /**< */)
d66 1
a66 1
xcb_render_picture_end (xcb_render_picture_iterator_t i  /**< */)
d76 1
a76 1
xcb_render_pictformat_next (xcb_render_pictformat_iterator_t *i  /**< */)
d84 1
a84 1
xcb_render_pictformat_end (xcb_render_pictformat_iterator_t i  /**< */)
d94 1
a94 1
xcb_render_fixed_next (xcb_render_fixed_iterator_t *i  /**< */)
d102 1
a102 1
xcb_render_fixed_end (xcb_render_fixed_iterator_t i  /**< */)
d112 1
a112 1
xcb_render_directformat_next (xcb_render_directformat_iterator_t *i  /**< */)
d120 1
a120 1
xcb_render_directformat_end (xcb_render_directformat_iterator_t i  /**< */)
d130 1
a130 1
xcb_render_pictforminfo_next (xcb_render_pictforminfo_iterator_t *i  /**< */)
d138 1
a138 1
xcb_render_pictforminfo_end (xcb_render_pictforminfo_iterator_t i  /**< */)
d148 1
a148 1
xcb_render_pictvisual_next (xcb_render_pictvisual_iterator_t *i  /**< */)
d156 1
a156 1
xcb_render_pictvisual_end (xcb_render_pictvisual_iterator_t i  /**< */)
d166 1
a166 1
xcb_render_pictdepth_sizeof (const void  *_buffer  /**< */)
d197 1
a197 1
xcb_render_pictdepth_visuals (const xcb_render_pictdepth_t *R  /**< */)
d203 1
a203 1
xcb_render_pictdepth_visuals_length (const xcb_render_pictdepth_t *R  /**< */)
d209 1
a209 1
xcb_render_pictdepth_visuals_iterator (const xcb_render_pictdepth_t *R  /**< */)
d219 1
a219 1
xcb_render_pictdepth_next (xcb_render_pictdepth_iterator_t *i  /**< */)
d230 1
a230 1
xcb_render_pictdepth_end (xcb_render_pictdepth_iterator_t i  /**< */)
d242 1
a242 1
xcb_render_pictscreen_sizeof (const void  *_buffer  /**< */)
d278 1
a278 1
xcb_render_pictscreen_depths_length (const xcb_render_pictscreen_t *R  /**< */)
d284 1
a284 1
xcb_render_pictscreen_depths_iterator (const xcb_render_pictscreen_t *R  /**< */)
d294 1
a294 1
xcb_render_pictscreen_next (xcb_render_pictscreen_iterator_t *i  /**< */)
d305 1
a305 1
xcb_render_pictscreen_end (xcb_render_pictscreen_iterator_t i  /**< */)
d317 1
a317 1
xcb_render_indexvalue_next (xcb_render_indexvalue_iterator_t *i  /**< */)
d325 1
a325 1
xcb_render_indexvalue_end (xcb_render_indexvalue_iterator_t i  /**< */)
d335 1
a335 1
xcb_render_color_next (xcb_render_color_iterator_t *i  /**< */)
d343 1
a343 1
xcb_render_color_end (xcb_render_color_iterator_t i  /**< */)
d353 1
a353 1
xcb_render_pointfix_next (xcb_render_pointfix_iterator_t *i  /**< */)
d361 1
a361 1
xcb_render_pointfix_end (xcb_render_pointfix_iterator_t i  /**< */)
d371 1
a371 1
xcb_render_linefix_next (xcb_render_linefix_iterator_t *i  /**< */)
d379 1
a379 1
xcb_render_linefix_end (xcb_render_linefix_iterator_t i  /**< */)
d389 1
a389 1
xcb_render_triangle_next (xcb_render_triangle_iterator_t *i  /**< */)
d397 1
a397 1
xcb_render_triangle_end (xcb_render_triangle_iterator_t i  /**< */)
d407 1
a407 1
xcb_render_trapezoid_next (xcb_render_trapezoid_iterator_t *i  /**< */)
d415 1
a415 1
xcb_render_trapezoid_end (xcb_render_trapezoid_iterator_t i  /**< */)
d425 1
a425 1
xcb_render_glyphinfo_next (xcb_render_glyphinfo_iterator_t *i  /**< */)
d433 1
a433 1
xcb_render_glyphinfo_end (xcb_render_glyphinfo_iterator_t i  /**< */)
d443 3
a445 3
xcb_render_query_version (xcb_connection_t *c  /**< */,
                          uint32_t          client_major_version  /**< */,
                          uint32_t          client_minor_version  /**< */)
d448 4
a451 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_QUERY_VERSION,
        /* isvoid */ 0
d471 3
a473 3
xcb_render_query_version_unchecked (xcb_connection_t *c  /**< */,
                                    uint32_t          client_major_version  /**< */,
                                    uint32_t          client_minor_version  /**< */)
d476 4
a479 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_QUERY_VERSION,
        /* isvoid */ 0
d499 1
a499 1
xcb_render_query_version_reply (xcb_connection_t                   *c  /**< */,
d501 1
a501 1
                                xcb_generic_error_t               **e  /**< */)
d507 1
a507 1
xcb_render_query_pict_formats_sizeof (const void  *_buffer  /**< */)
d567 1
a567 1
xcb_render_query_pict_formats (xcb_connection_t *c  /**< */)
d570 4
a573 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_QUERY_PICT_FORMATS,
        /* isvoid */ 0
d591 1
a591 1
xcb_render_query_pict_formats_unchecked (xcb_connection_t *c  /**< */)
d594 4
a597 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_QUERY_PICT_FORMATS,
        /* isvoid */ 0
d615 1
a615 1
xcb_render_query_pict_formats_formats (const xcb_render_query_pict_formats_reply_t *R  /**< */)
d621 1
a621 1
xcb_render_query_pict_formats_formats_length (const xcb_render_query_pict_formats_reply_t *R  /**< */)
d627 1
a627 1
xcb_render_query_pict_formats_formats_iterator (const xcb_render_query_pict_formats_reply_t *R  /**< */)
d637 1
a637 1
xcb_render_query_pict_formats_screens_length (const xcb_render_query_pict_formats_reply_t *R  /**< */)
d643 1
a643 1
xcb_render_query_pict_formats_screens_iterator (const xcb_render_query_pict_formats_reply_t *R  /**< */)
d654 1
a654 1
xcb_render_query_pict_formats_subpixels (const xcb_render_query_pict_formats_reply_t *R  /**< */)
d661 1
a661 1
xcb_render_query_pict_formats_subpixels_length (const xcb_render_query_pict_formats_reply_t *R  /**< */)
d667 1
a667 1
xcb_render_query_pict_formats_subpixels_end (const xcb_render_query_pict_formats_reply_t *R  /**< */)
d670 2
a671 2
    xcb_generic_iterator_t child = xcb_render_pictscreen_end(xcb_render_query_pict_formats_screens_iterator(R));
    i.data = ((uint32_t *) child.data) + (R->num_subpixel);
d678 1
a678 1
xcb_render_query_pict_formats_reply (xcb_connection_t                        *c  /**< */,
d680 1
a680 1
                                     xcb_generic_error_t                    **e  /**< */)
d686 1
a686 1
xcb_render_query_pict_index_values_sizeof (const void  *_buffer  /**< */)
d717 2
a718 2
xcb_render_query_pict_index_values (xcb_connection_t        *c  /**< */,
                                    xcb_render_pictformat_t  format  /**< */)
d721 4
a724 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_QUERY_PICT_INDEX_VALUES,
        /* isvoid */ 0
d743 2
a744 2
xcb_render_query_pict_index_values_unchecked (xcb_connection_t        *c  /**< */,
                                              xcb_render_pictformat_t  format  /**< */)
d747 4
a750 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_QUERY_PICT_INDEX_VALUES,
        /* isvoid */ 0
d769 1
a769 1
xcb_render_query_pict_index_values_values (const xcb_render_query_pict_index_values_reply_t *R  /**< */)
d775 1
a775 1
xcb_render_query_pict_index_values_values_length (const xcb_render_query_pict_index_values_reply_t *R  /**< */)
d781 1
a781 1
xcb_render_query_pict_index_values_values_iterator (const xcb_render_query_pict_index_values_reply_t *R  /**< */)
d791 1
a791 1
xcb_render_query_pict_index_values_reply (xcb_connection_t                             *c  /**< */,
d793 1
a793 1
                                          xcb_generic_error_t                         **e  /**< */)
d799 277
a1075 1
xcb_render_create_picture_sizeof (const void  *_buffer  /**< */)
d1090 1
a1090 1
    xcb_block_len += xcb_popcount(_aux->value_mask) * sizeof(uint32_t);
d1092 1
a1092 1
    xcb_align_to = ALIGNOF(uint32_t);
d1106 6
a1111 6
xcb_render_create_picture_checked (xcb_connection_t        *c  /**< */,
                                   xcb_render_picture_t     pid  /**< */,
                                   xcb_drawable_t           drawable  /**< */,
                                   xcb_render_pictformat_t  format  /**< */,
                                   uint32_t                 value_mask  /**< */,
                                   const uint32_t          *value_list  /**< */)
d1114 4
a1117 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_PICTURE,
        /* isvoid */ 1
d1120 1
a1120 1
    struct iovec xcb_parts[6];
d1133 1
a1133 1
    /* uint32_t value_list */
d1135 2
a1136 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d1143 6
a1148 6
xcb_render_create_picture (xcb_connection_t        *c  /**< */,
                           xcb_render_picture_t     pid  /**< */,
                           xcb_drawable_t           drawable  /**< */,
                           xcb_render_pictformat_t  format  /**< */,
                           uint32_t                 value_mask  /**< */,
                           const uint32_t          *value_list  /**< */)
d1151 4
a1154 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_PICTURE,
        /* isvoid */ 1
d1157 1
a1157 1
    struct iovec xcb_parts[6];
d1170 1
a1170 1
    /* uint32_t value_list */
d1172 79
a1250 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d1253 1
d1257 157
d1415 126
a1540 1
xcb_render_change_picture_sizeof (const void  *_buffer  /**< */)
d1555 1
a1555 1
    xcb_block_len += xcb_popcount(_aux->value_mask) * sizeof(uint32_t);
d1557 1
a1557 1
    xcb_align_to = ALIGNOF(uint32_t);
d1571 4
a1574 4
xcb_render_change_picture_checked (xcb_connection_t     *c  /**< */,
                                   xcb_render_picture_t  picture  /**< */,
                                   uint32_t              value_mask  /**< */,
                                   const uint32_t       *value_list  /**< */)
d1577 4
a1580 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CHANGE_PICTURE,
        /* isvoid */ 1
d1583 1
a1583 1
    struct iovec xcb_parts[6];
d1594 1
a1594 1
    /* uint32_t value_list */
d1596 2
a1597 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d1604 4
a1607 4
xcb_render_change_picture (xcb_connection_t     *c  /**< */,
                           xcb_render_picture_t  picture  /**< */,
                           uint32_t              value_mask  /**< */,
                           const uint32_t       *value_list  /**< */)
d1610 4
a1613 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CHANGE_PICTURE,
        /* isvoid */ 1
d1616 1
a1616 1
    struct iovec xcb_parts[6];
d1627 1
a1627 1
    /* uint32_t value_list */
d1629 71
a1699 3
    xcb_parts[4].iov_len = xcb_popcount(value_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d1702 1
d1706 6
d1713 2
a1714 2
xcb_render_set_picture_clip_rectangles_sizeof (const void  *_buffer  /**< */,
                                               uint32_t     rectangles_len  /**< */)
d1744 6
a1749 6
xcb_render_set_picture_clip_rectangles_checked (xcb_connection_t      *c  /**< */,
                                                xcb_render_picture_t   picture  /**< */,
                                                int16_t                clip_x_origin  /**< */,
                                                int16_t                clip_y_origin  /**< */,
                                                uint32_t               rectangles_len  /**< */,
                                                const xcb_rectangle_t *rectangles  /**< */)
d1752 4
a1755 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_SET_PICTURE_CLIP_RECTANGLES,
        /* isvoid */ 1
d1781 6
a1786 6
xcb_render_set_picture_clip_rectangles (xcb_connection_t      *c  /**< */,
                                        xcb_render_picture_t   picture  /**< */,
                                        int16_t                clip_x_origin  /**< */,
                                        int16_t                clip_y_origin  /**< */,
                                        uint32_t               rectangles_len  /**< */,
                                        const xcb_rectangle_t *rectangles  /**< */)
d1789 4
a1792 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_SET_PICTURE_CLIP_RECTANGLES,
        /* isvoid */ 1
d1817 22
d1840 2
a1841 2
xcb_render_free_picture_checked (xcb_connection_t     *c  /**< */,
                                 xcb_render_picture_t  picture  /**< */)
d1844 4
a1847 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_FREE_PICTURE,
        /* isvoid */ 1
d1866 2
a1867 2
xcb_render_free_picture (xcb_connection_t     *c  /**< */,
                         xcb_render_picture_t  picture  /**< */)
d1870 4
a1873 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_FREE_PICTURE,
        /* isvoid */ 1
d1892 19
a1910 19
xcb_render_composite_checked (xcb_connection_t     *c  /**< */,
                              uint8_t               op  /**< */,
                              xcb_render_picture_t  src  /**< */,
                              xcb_render_picture_t  mask  /**< */,
                              xcb_render_picture_t  dst  /**< */,
                              int16_t               src_x  /**< */,
                              int16_t               src_y  /**< */,
                              int16_t               mask_x  /**< */,
                              int16_t               mask_y  /**< */,
                              int16_t               dst_x  /**< */,
                              int16_t               dst_y  /**< */,
                              uint16_t              width  /**< */,
                              uint16_t              height  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_COMPOSITE,
        /* isvoid */ 1
d1941 19
a1959 19
xcb_render_composite (xcb_connection_t     *c  /**< */,
                      uint8_t               op  /**< */,
                      xcb_render_picture_t  src  /**< */,
                      xcb_render_picture_t  mask  /**< */,
                      xcb_render_picture_t  dst  /**< */,
                      int16_t               src_x  /**< */,
                      int16_t               src_y  /**< */,
                      int16_t               mask_x  /**< */,
                      int16_t               mask_y  /**< */,
                      int16_t               dst_x  /**< */,
                      int16_t               dst_y  /**< */,
                      uint16_t              width  /**< */,
                      uint16_t              height  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_COMPOSITE,
        /* isvoid */ 1
d1990 2
a1991 2
xcb_render_trapezoids_sizeof (const void  *_buffer  /**< */,
                              uint32_t     traps_len  /**< */)
d2021 9
a2029 9
xcb_render_trapezoids_checked (xcb_connection_t             *c  /**< */,
                               uint8_t                       op  /**< */,
                               xcb_render_picture_t          src  /**< */,
                               xcb_render_picture_t          dst  /**< */,
                               xcb_render_pictformat_t       mask_format  /**< */,
                               int16_t                       src_x  /**< */,
                               int16_t                       src_y  /**< */,
                               uint32_t                      traps_len  /**< */,
                               const xcb_render_trapezoid_t *traps  /**< */)
d2032 4
a2035 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_TRAPEZOIDS,
        /* isvoid */ 1
d2065 9
a2073 9
xcb_render_trapezoids (xcb_connection_t             *c  /**< */,
                       uint8_t                       op  /**< */,
                       xcb_render_picture_t          src  /**< */,
                       xcb_render_picture_t          dst  /**< */,
                       xcb_render_pictformat_t       mask_format  /**< */,
                       int16_t                       src_x  /**< */,
                       int16_t                       src_y  /**< */,
                       uint32_t                      traps_len  /**< */,
                       const xcb_render_trapezoid_t *traps  /**< */)
d2076 4
a2079 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_TRAPEZOIDS,
        /* isvoid */ 1
d2108 6
d2115 18
a2132 2
xcb_render_triangles_sizeof (const void  *_buffer  /**< */,
                             uint32_t     triangles_len  /**< */)
d2162 9
a2170 9
xcb_render_triangles_checked (xcb_connection_t            *c  /**< */,
                              uint8_t                      op  /**< */,
                              xcb_render_picture_t         src  /**< */,
                              xcb_render_picture_t         dst  /**< */,
                              xcb_render_pictformat_t      mask_format  /**< */,
                              int16_t                      src_x  /**< */,
                              int16_t                      src_y  /**< */,
                              uint32_t                     triangles_len  /**< */,
                              const xcb_render_triangle_t *triangles  /**< */)
d2173 4
a2176 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_TRIANGLES,
        /* isvoid */ 1
d2206 9
a2214 9
xcb_render_triangles (xcb_connection_t            *c  /**< */,
                      uint8_t                      op  /**< */,
                      xcb_render_picture_t         src  /**< */,
                      xcb_render_picture_t         dst  /**< */,
                      xcb_render_pictformat_t      mask_format  /**< */,
                      int16_t                      src_x  /**< */,
                      int16_t                      src_y  /**< */,
                      uint32_t                     triangles_len  /**< */,
                      const xcb_render_triangle_t *triangles  /**< */)
d2217 4
a2220 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_TRIANGLES,
        /* isvoid */ 1
d2249 22
d2272 2
a2273 2
xcb_render_tri_strip_sizeof (const void  *_buffer  /**< */,
                             uint32_t     points_len  /**< */)
d2303 9
a2311 9
xcb_render_tri_strip_checked (xcb_connection_t            *c  /**< */,
                              uint8_t                      op  /**< */,
                              xcb_render_picture_t         src  /**< */,
                              xcb_render_picture_t         dst  /**< */,
                              xcb_render_pictformat_t      mask_format  /**< */,
                              int16_t                      src_x  /**< */,
                              int16_t                      src_y  /**< */,
                              uint32_t                     points_len  /**< */,
                              const xcb_render_pointfix_t *points  /**< */)
d2314 4
a2317 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_TRI_STRIP,
        /* isvoid */ 1
d2347 9
a2355 9
xcb_render_tri_strip (xcb_connection_t            *c  /**< */,
                      uint8_t                      op  /**< */,
                      xcb_render_picture_t         src  /**< */,
                      xcb_render_picture_t         dst  /**< */,
                      xcb_render_pictformat_t      mask_format  /**< */,
                      int16_t                      src_x  /**< */,
                      int16_t                      src_y  /**< */,
                      uint32_t                     points_len  /**< */,
                      const xcb_render_pointfix_t *points  /**< */)
d2358 4
a2361 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_TRI_STRIP,
        /* isvoid */ 1
d2390 22
d2413 2
a2414 2
xcb_render_tri_fan_sizeof (const void  *_buffer  /**< */,
                           uint32_t     points_len  /**< */)
d2444 9
a2452 9
xcb_render_tri_fan_checked (xcb_connection_t            *c  /**< */,
                            uint8_t                      op  /**< */,
                            xcb_render_picture_t         src  /**< */,
                            xcb_render_picture_t         dst  /**< */,
                            xcb_render_pictformat_t      mask_format  /**< */,
                            int16_t                      src_x  /**< */,
                            int16_t                      src_y  /**< */,
                            uint32_t                     points_len  /**< */,
                            const xcb_render_pointfix_t *points  /**< */)
d2455 4
a2458 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_TRI_FAN,
        /* isvoid */ 1
d2488 9
a2496 9
xcb_render_tri_fan (xcb_connection_t            *c  /**< */,
                    uint8_t                      op  /**< */,
                    xcb_render_picture_t         src  /**< */,
                    xcb_render_picture_t         dst  /**< */,
                    xcb_render_pictformat_t      mask_format  /**< */,
                    int16_t                      src_x  /**< */,
                    int16_t                      src_y  /**< */,
                    uint32_t                     points_len  /**< */,
                    const xcb_render_pointfix_t *points  /**< */)
d2499 4
a2502 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_TRI_FAN,
        /* isvoid */ 1
d2531 22
d2554 3
a2556 3
xcb_render_create_glyph_set_checked (xcb_connection_t        *c  /**< */,
                                     xcb_render_glyphset_t    gsid  /**< */,
                                     xcb_render_pictformat_t  format  /**< */)
d2559 4
a2562 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_GLYPH_SET,
        /* isvoid */ 1
d2582 3
a2584 3
xcb_render_create_glyph_set (xcb_connection_t        *c  /**< */,
                             xcb_render_glyphset_t    gsid  /**< */,
                             xcb_render_pictformat_t  format  /**< */)
d2587 4
a2590 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_GLYPH_SET,
        /* isvoid */ 1
d2610 3
a2612 3
xcb_render_reference_glyph_set_checked (xcb_connection_t      *c  /**< */,
                                        xcb_render_glyphset_t  gsid  /**< */,
                                        xcb_render_glyphset_t  existing  /**< */)
d2615 4
a2618 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_REFERENCE_GLYPH_SET,
        /* isvoid */ 1
d2638 3
a2640 3
xcb_render_reference_glyph_set (xcb_connection_t      *c  /**< */,
                                xcb_render_glyphset_t  gsid  /**< */,
                                xcb_render_glyphset_t  existing  /**< */)
d2643 4
a2646 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_REFERENCE_GLYPH_SET,
        /* isvoid */ 1
d2666 2
a2667 2
xcb_render_free_glyph_set_checked (xcb_connection_t      *c  /**< */,
                                   xcb_render_glyphset_t  glyphset  /**< */)
d2670 4
a2673 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_FREE_GLYPH_SET,
        /* isvoid */ 1
d2692 2
a2693 2
xcb_render_free_glyph_set (xcb_connection_t      *c  /**< */,
                           xcb_render_glyphset_t  glyphset  /**< */)
d2696 4
a2699 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_FREE_GLYPH_SET,
        /* isvoid */ 1
d2718 2
a2719 2
xcb_render_add_glyphs_sizeof (const void  *_buffer  /**< */,
                              uint32_t     data_len  /**< */)
d2774 7
a2780 7
xcb_render_add_glyphs_checked (xcb_connection_t             *c  /**< */,
                               xcb_render_glyphset_t         glyphset  /**< */,
                               uint32_t                      glyphs_len  /**< */,
                               const uint32_t               *glyphids  /**< */,
                               const xcb_render_glyphinfo_t *glyphs  /**< */,
                               uint32_t                      data_len  /**< */,
                               const uint8_t                *data  /**< */)
d2783 4
a2786 4
        /* count */ 8,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_ADD_GLYPHS,
        /* isvoid */ 1
d2820 95
a2914 8
xcb_void_cookie_t
xcb_render_add_glyphs (xcb_connection_t             *c  /**< */,
                       xcb_render_glyphset_t         glyphset  /**< */,
                       uint32_t                      glyphs_len  /**< */,
                       const uint32_t               *glyphids  /**< */,
                       const xcb_render_glyphinfo_t *glyphs  /**< */,
                       uint32_t                      data_len  /**< */,
                       const uint8_t                *data  /**< */)
d2916 3
a2918 6
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 8,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_ADD_GLYPHS,
        /* isvoid */ 1
    };
d2920 5
a2924 3
    struct iovec xcb_parts[10];
    xcb_void_cookie_t xcb_ret;
    xcb_render_add_glyphs_request_t xcb_out;
d2926 9
a2934 25
    xcb_out.glyphset = glyphset;
    xcb_out.glyphs_len = glyphs_len;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t glyphids */
    xcb_parts[4].iov_base = (char *) glyphids;
    xcb_parts[4].iov_len = glyphs_len * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_render_glyphinfo_t glyphs */
    xcb_parts[6].iov_base = (char *) glyphs;
    xcb_parts[6].iov_len = glyphs_len * sizeof(xcb_render_glyphinfo_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;
    /* uint8_t data */
    xcb_parts[8].iov_base = (char *) data;
    xcb_parts[8].iov_len = data_len * sizeof(uint8_t);
    xcb_parts[9].iov_base = 0;
    xcb_parts[9].iov_len = -xcb_parts[8].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
d2938 2
a2939 2
xcb_render_free_glyphs_sizeof (const void  *_buffer  /**< */,
                               uint32_t     glyphs_len  /**< */)
d2969 4
a2972 4
xcb_render_free_glyphs_checked (xcb_connection_t         *c  /**< */,
                                xcb_render_glyphset_t     glyphset  /**< */,
                                uint32_t                  glyphs_len  /**< */,
                                const xcb_render_glyph_t *glyphs  /**< */)
d2975 4
a2978 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_FREE_GLYPHS,
        /* isvoid */ 1
d3002 4
a3005 4
xcb_render_free_glyphs (xcb_connection_t         *c  /**< */,
                        xcb_render_glyphset_t     glyphset  /**< */,
                        uint32_t                  glyphs_len  /**< */,
                        const xcb_render_glyph_t *glyphs  /**< */)
d3008 4
a3011 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_FREE_GLYPHS,
        /* isvoid */ 1
d3034 22
d3057 2
a3058 2
xcb_render_composite_glyphs_8_sizeof (const void  *_buffer  /**< */,
                                      uint32_t     glyphcmds_len  /**< */)
d3088 16
a3103 16
xcb_render_composite_glyphs_8_checked (xcb_connection_t        *c  /**< */,
                                       uint8_t                  op  /**< */,
                                       xcb_render_picture_t     src  /**< */,
                                       xcb_render_picture_t     dst  /**< */,
                                       xcb_render_pictformat_t  mask_format  /**< */,
                                       xcb_render_glyphset_t    glyphset  /**< */,
                                       int16_t                  src_x  /**< */,
                                       int16_t                  src_y  /**< */,
                                       uint32_t                 glyphcmds_len  /**< */,
                                       const uint8_t           *glyphcmds  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_COMPOSITE_GLYPHS_8,
        /* isvoid */ 1
d3134 16
a3149 16
xcb_render_composite_glyphs_8 (xcb_connection_t        *c  /**< */,
                               uint8_t                  op  /**< */,
                               xcb_render_picture_t     src  /**< */,
                               xcb_render_picture_t     dst  /**< */,
                               xcb_render_pictformat_t  mask_format  /**< */,
                               xcb_render_glyphset_t    glyphset  /**< */,
                               int16_t                  src_x  /**< */,
                               int16_t                  src_y  /**< */,
                               uint32_t                 glyphcmds_len  /**< */,
                               const uint8_t           *glyphcmds  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_COMPOSITE_GLYPHS_8,
        /* isvoid */ 1
d3179 22
d3202 2
a3203 2
xcb_render_composite_glyphs_16_sizeof (const void  *_buffer  /**< */,
                                       uint32_t     glyphcmds_len  /**< */)
d3233 16
a3248 16
xcb_render_composite_glyphs_16_checked (xcb_connection_t        *c  /**< */,
                                        uint8_t                  op  /**< */,
                                        xcb_render_picture_t     src  /**< */,
                                        xcb_render_picture_t     dst  /**< */,
                                        xcb_render_pictformat_t  mask_format  /**< */,
                                        xcb_render_glyphset_t    glyphset  /**< */,
                                        int16_t                  src_x  /**< */,
                                        int16_t                  src_y  /**< */,
                                        uint32_t                 glyphcmds_len  /**< */,
                                        const uint8_t           *glyphcmds  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_COMPOSITE_GLYPHS_16,
        /* isvoid */ 1
d3279 16
a3294 16
xcb_render_composite_glyphs_16 (xcb_connection_t        *c  /**< */,
                                uint8_t                  op  /**< */,
                                xcb_render_picture_t     src  /**< */,
                                xcb_render_picture_t     dst  /**< */,
                                xcb_render_pictformat_t  mask_format  /**< */,
                                xcb_render_glyphset_t    glyphset  /**< */,
                                int16_t                  src_x  /**< */,
                                int16_t                  src_y  /**< */,
                                uint32_t                 glyphcmds_len  /**< */,
                                const uint8_t           *glyphcmds  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_COMPOSITE_GLYPHS_16,
        /* isvoid */ 1
d3324 22
d3347 2
a3348 2
xcb_render_composite_glyphs_32_sizeof (const void  *_buffer  /**< */,
                                       uint32_t     glyphcmds_len  /**< */)
d3378 16
a3393 16
xcb_render_composite_glyphs_32_checked (xcb_connection_t        *c  /**< */,
                                        uint8_t                  op  /**< */,
                                        xcb_render_picture_t     src  /**< */,
                                        xcb_render_picture_t     dst  /**< */,
                                        xcb_render_pictformat_t  mask_format  /**< */,
                                        xcb_render_glyphset_t    glyphset  /**< */,
                                        int16_t                  src_x  /**< */,
                                        int16_t                  src_y  /**< */,
                                        uint32_t                 glyphcmds_len  /**< */,
                                        const uint8_t           *glyphcmds  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_COMPOSITE_GLYPHS_32,
        /* isvoid */ 1
d3424 16
a3439 16
xcb_render_composite_glyphs_32 (xcb_connection_t        *c  /**< */,
                                uint8_t                  op  /**< */,
                                xcb_render_picture_t     src  /**< */,
                                xcb_render_picture_t     dst  /**< */,
                                xcb_render_pictformat_t  mask_format  /**< */,
                                xcb_render_glyphset_t    glyphset  /**< */,
                                int16_t                  src_x  /**< */,
                                int16_t                  src_y  /**< */,
                                uint32_t                 glyphcmds_len  /**< */,
                                const uint8_t           *glyphcmds  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_COMPOSITE_GLYPHS_32,
        /* isvoid */ 1
d3469 22
d3492 2
a3493 2
xcb_render_fill_rectangles_sizeof (const void  *_buffer  /**< */,
                                   uint32_t     rects_len  /**< */)
d3523 6
a3528 6
xcb_render_fill_rectangles_checked (xcb_connection_t      *c  /**< */,
                                    uint8_t                op  /**< */,
                                    xcb_render_picture_t   dst  /**< */,
                                    xcb_render_color_t     color  /**< */,
                                    uint32_t               rects_len  /**< */,
                                    const xcb_rectangle_t *rects  /**< */)
d3531 4
a3534 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_FILL_RECTANGLES,
        /* isvoid */ 1
d3561 6
a3566 6
xcb_render_fill_rectangles (xcb_connection_t      *c  /**< */,
                            uint8_t                op  /**< */,
                            xcb_render_picture_t   dst  /**< */,
                            xcb_render_color_t     color  /**< */,
                            uint32_t               rects_len  /**< */,
                            const xcb_rectangle_t *rects  /**< */)
d3569 4
a3572 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_FILL_RECTANGLES,
        /* isvoid */ 1
d3598 22
d3621 5
a3625 5
xcb_render_create_cursor_checked (xcb_connection_t     *c  /**< */,
                                  xcb_cursor_t          cid  /**< */,
                                  xcb_render_picture_t  source  /**< */,
                                  uint16_t              x  /**< */,
                                  uint16_t              y  /**< */)
d3628 4
a3631 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_CURSOR,
        /* isvoid */ 1
d3653 5
a3657 5
xcb_render_create_cursor (xcb_connection_t     *c  /**< */,
                          xcb_cursor_t          cid  /**< */,
                          xcb_render_picture_t  source  /**< */,
                          uint16_t              x  /**< */,
                          uint16_t              y  /**< */)
d3660 4
a3663 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_CURSOR,
        /* isvoid */ 1
d3685 1
a3685 1
xcb_render_transform_next (xcb_render_transform_iterator_t *i  /**< */)
d3693 1
a3693 1
xcb_render_transform_end (xcb_render_transform_iterator_t i  /**< */)
d3703 3
a3705 3
xcb_render_set_picture_transform_checked (xcb_connection_t       *c  /**< */,
                                          xcb_render_picture_t    picture  /**< */,
                                          xcb_render_transform_t  transform  /**< */)
d3708 4
a3711 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_SET_PICTURE_TRANSFORM,
        /* isvoid */ 1
d3731 3
a3733 3
xcb_render_set_picture_transform (xcb_connection_t       *c  /**< */,
                                  xcb_render_picture_t    picture  /**< */,
                                  xcb_render_transform_t  transform  /**< */)
d3736 4
a3739 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_SET_PICTURE_TRANSFORM,
        /* isvoid */ 1
d3759 1
a3759 1
xcb_render_query_filters_sizeof (const void  *_buffer  /**< */)
d3807 2
a3808 2
xcb_render_query_filters (xcb_connection_t *c  /**< */,
                          xcb_drawable_t    drawable  /**< */)
d3811 4
a3814 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_QUERY_FILTERS,
        /* isvoid */ 0
d3833 2
a3834 2
xcb_render_query_filters_unchecked (xcb_connection_t *c  /**< */,
                                    xcb_drawable_t    drawable  /**< */)
d3837 4
a3840 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_QUERY_FILTERS,
        /* isvoid */ 0
d3859 1
a3859 1
xcb_render_query_filters_aliases (const xcb_render_query_filters_reply_t *R  /**< */)
d3865 1
a3865 1
xcb_render_query_filters_aliases_length (const xcb_render_query_filters_reply_t *R  /**< */)
d3871 1
a3871 1
xcb_render_query_filters_aliases_end (const xcb_render_query_filters_reply_t *R  /**< */)
d3881 1
a3881 1
xcb_render_query_filters_filters_length (const xcb_render_query_filters_reply_t *R  /**< */)
d3887 1
a3887 1
xcb_render_query_filters_filters_iterator (const xcb_render_query_filters_reply_t *R  /**< */)
d3898 1
a3898 1
xcb_render_query_filters_reply (xcb_connection_t                   *c  /**< */,
d3900 1
a3900 1
                                xcb_generic_error_t               **e  /**< */)
d3906 2
a3907 2
xcb_render_set_picture_filter_sizeof (const void  *_buffer  /**< */,
                                      uint32_t     values_len  /**< */)
d3925 9
d3959 6
a3964 6
xcb_render_set_picture_filter_checked (xcb_connection_t         *c  /**< */,
                                       xcb_render_picture_t      picture  /**< */,
                                       uint16_t                  filter_len  /**< */,
                                       const char               *filter  /**< */,
                                       uint32_t                  values_len  /**< */,
                                       const xcb_render_fixed_t *values  /**< */)
d3967 4
a3970 4
        /* count */ 6,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_SET_PICTURE_FILTER,
        /* isvoid */ 1
d4001 6
a4006 6
xcb_render_set_picture_filter (xcb_connection_t         *c  /**< */,
                               xcb_render_picture_t      picture  /**< */,
                               uint16_t                  filter_len  /**< */,
                               const char               *filter  /**< */,
                               uint32_t                  values_len  /**< */,
                               const xcb_render_fixed_t *values  /**< */)
d4009 4
a4012 4
        /* count */ 6,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_SET_PICTURE_FILTER,
        /* isvoid */ 1
d4042 46
d4089 1
a4089 1
xcb_render_animcursorelt_next (xcb_render_animcursorelt_iterator_t *i  /**< */)
d4097 1
a4097 1
xcb_render_animcursorelt_end (xcb_render_animcursorelt_iterator_t i  /**< */)
d4107 2
a4108 2
xcb_render_create_anim_cursor_sizeof (const void  *_buffer  /**< */,
                                      uint32_t     cursors_len  /**< */)
d4138 4
a4141 4
xcb_render_create_anim_cursor_checked (xcb_connection_t                 *c  /**< */,
                                       xcb_cursor_t                      cid  /**< */,
                                       uint32_t                          cursors_len  /**< */,
                                       const xcb_render_animcursorelt_t *cursors  /**< */)
d4144 4
a4147 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_ANIM_CURSOR,
        /* isvoid */ 1
d4171 4
a4174 4
xcb_render_create_anim_cursor (xcb_connection_t                 *c  /**< */,
                               xcb_cursor_t                      cid  /**< */,
                               uint32_t                          cursors_len  /**< */,
                               const xcb_render_animcursorelt_t *cursors  /**< */)
d4177 4
a4180 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_ANIM_CURSOR,
        /* isvoid */ 1
d4203 22
d4226 1
a4226 1
xcb_render_spanfix_next (xcb_render_spanfix_iterator_t *i  /**< */)
d4234 1
a4234 1
xcb_render_spanfix_end (xcb_render_spanfix_iterator_t i  /**< */)
d4244 1
a4244 1
xcb_render_trap_next (xcb_render_trap_iterator_t *i  /**< */)
d4252 1
a4252 1
xcb_render_trap_end (xcb_render_trap_iterator_t i  /**< */)
d4262 2
a4263 2
xcb_render_add_traps_sizeof (const void  *_buffer  /**< */,
                             uint32_t     traps_len  /**< */)
d4293 6
a4298 6
xcb_render_add_traps_checked (xcb_connection_t        *c  /**< */,
                              xcb_render_picture_t     picture  /**< */,
                              int16_t                  x_off  /**< */,
                              int16_t                  y_off  /**< */,
                              uint32_t                 traps_len  /**< */,
                              const xcb_render_trap_t *traps  /**< */)
d4301 4
a4304 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_ADD_TRAPS,
        /* isvoid */ 1
d4330 6
a4335 6
xcb_render_add_traps (xcb_connection_t        *c  /**< */,
                      xcb_render_picture_t     picture  /**< */,
                      int16_t                  x_off  /**< */,
                      int16_t                  y_off  /**< */,
                      uint32_t                 traps_len  /**< */,
                      const xcb_render_trap_t *traps  /**< */)
d4338 4
a4341 4
        /* count */ 4,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_ADD_TRAPS,
        /* isvoid */ 1
d4366 22
d4389 3
a4391 3
xcb_render_create_solid_fill_checked (xcb_connection_t     *c  /**< */,
                                      xcb_render_picture_t  picture  /**< */,
                                      xcb_render_color_t    color  /**< */)
d4394 4
a4397 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_SOLID_FILL,
        /* isvoid */ 1
d4417 3
a4419 3
xcb_render_create_solid_fill (xcb_connection_t     *c  /**< */,
                              xcb_render_picture_t  picture  /**< */,
                              xcb_render_color_t    color  /**< */)
d4422 4
a4425 4
        /* count */ 2,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_SOLID_FILL,
        /* isvoid */ 1
d4445 1
a4445 1
xcb_render_create_linear_gradient_sizeof (const void  *_buffer  /**< */)
d4488 7
a4494 7
xcb_render_create_linear_gradient_checked (xcb_connection_t         *c  /**< */,
                                           xcb_render_picture_t      picture  /**< */,
                                           xcb_render_pointfix_t     p1  /**< */,
                                           xcb_render_pointfix_t     p2  /**< */,
                                           uint32_t                  num_stops  /**< */,
                                           const xcb_render_fixed_t *stops  /**< */,
                                           const xcb_render_color_t *colors  /**< */)
d4497 4
a4500 4
        /* count */ 6,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_LINEAR_GRADIENT,
        /* isvoid */ 1
d4532 7
a4538 7
xcb_render_create_linear_gradient (xcb_connection_t         *c  /**< */,
                                   xcb_render_picture_t      picture  /**< */,
                                   xcb_render_pointfix_t     p1  /**< */,
                                   xcb_render_pointfix_t     p2  /**< */,
                                   uint32_t                  num_stops  /**< */,
                                   const xcb_render_fixed_t *stops  /**< */,
                                   const xcb_render_color_t *colors  /**< */)
d4541 4
a4544 4
        /* count */ 6,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_LINEAR_GRADIENT,
        /* isvoid */ 1
d4575 46
d4622 1
a4622 1
xcb_render_create_radial_gradient_sizeof (const void  *_buffer  /**< */)
d4665 9
a4673 9
xcb_render_create_radial_gradient_checked (xcb_connection_t         *c  /**< */,
                                           xcb_render_picture_t      picture  /**< */,
                                           xcb_render_pointfix_t     inner  /**< */,
                                           xcb_render_pointfix_t     outer  /**< */,
                                           xcb_render_fixed_t        inner_radius  /**< */,
                                           xcb_render_fixed_t        outer_radius  /**< */,
                                           uint32_t                  num_stops  /**< */,
                                           const xcb_render_fixed_t *stops  /**< */,
                                           const xcb_render_color_t *colors  /**< */)
d4676 4
a4679 4
        /* count */ 6,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_RADIAL_GRADIENT,
        /* isvoid */ 1
d4713 9
a4721 9
xcb_render_create_radial_gradient (xcb_connection_t         *c  /**< */,
                                   xcb_render_picture_t      picture  /**< */,
                                   xcb_render_pointfix_t     inner  /**< */,
                                   xcb_render_pointfix_t     outer  /**< */,
                                   xcb_render_fixed_t        inner_radius  /**< */,
                                   xcb_render_fixed_t        outer_radius  /**< */,
                                   uint32_t                  num_stops  /**< */,
                                   const xcb_render_fixed_t *stops  /**< */,
                                   const xcb_render_color_t *colors  /**< */)
d4724 4
a4727 4
        /* count */ 6,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_RADIAL_GRADIENT,
        /* isvoid */ 1
d4760 46
d4807 1
a4807 1
xcb_render_create_conical_gradient_sizeof (const void  *_buffer  /**< */)
d4850 7
a4856 7
xcb_render_create_conical_gradient_checked (xcb_connection_t         *c  /**< */,
                                            xcb_render_picture_t      picture  /**< */,
                                            xcb_render_pointfix_t     center  /**< */,
                                            xcb_render_fixed_t        angle  /**< */,
                                            uint32_t                  num_stops  /**< */,
                                            const xcb_render_fixed_t *stops  /**< */,
                                            const xcb_render_color_t *colors  /**< */)
d4859 4
a4862 4
        /* count */ 6,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_CONICAL_GRADIENT,
        /* isvoid */ 1
d4894 7
a4900 7
xcb_render_create_conical_gradient (xcb_connection_t         *c  /**< */,
                                    xcb_render_picture_t      picture  /**< */,
                                    xcb_render_pointfix_t     center  /**< */,
                                    xcb_render_fixed_t        angle  /**< */,
                                    uint32_t                  num_stops  /**< */,
                                    const xcb_render_fixed_t *stops  /**< */,
                                    const xcb_render_color_t *colors  /**< */)
d4903 4
a4906 4
        /* count */ 6,
        /* ext */ &xcb_render_id,
        /* opcode */ XCB_RENDER_CREATE_CONICAL_GRADIENT,
        /* isvoid */ 1
d4935 46
@


1.3
log
@Update build system and generated files for libxcb 1.10.
@
text
@a20 10

/*****************************************************************************
 **
 ** void xcb_render_glyph_next
 ** 
 ** @@param xcb_render_glyph_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a28 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_glyph_end
 ** 
 ** @@param xcb_render_glyph_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a38 10

/*****************************************************************************
 **
 ** void xcb_render_glyphset_next
 ** 
 ** @@param xcb_render_glyphset_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a46 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_glyphset_end
 ** 
 ** @@param xcb_render_glyphset_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a56 10

/*****************************************************************************
 **
 ** void xcb_render_picture_next
 ** 
 ** @@param xcb_render_picture_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a64 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_picture_end
 ** 
 ** @@param xcb_render_picture_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a74 10

/*****************************************************************************
 **
 ** void xcb_render_pictformat_next
 ** 
 ** @@param xcb_render_pictformat_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a82 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_pictformat_end
 ** 
 ** @@param xcb_render_pictformat_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a92 10

/*****************************************************************************
 **
 ** void xcb_render_fixed_next
 ** 
 ** @@param xcb_render_fixed_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a100 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_fixed_end
 ** 
 ** @@param xcb_render_fixed_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a110 10

/*****************************************************************************
 **
 ** void xcb_render_directformat_next
 ** 
 ** @@param xcb_render_directformat_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a118 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_directformat_end
 ** 
 ** @@param xcb_render_directformat_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a128 10

/*****************************************************************************
 **
 ** void xcb_render_pictforminfo_next
 ** 
 ** @@param xcb_render_pictforminfo_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a136 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_pictforminfo_end
 ** 
 ** @@param xcb_render_pictforminfo_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a146 10

/*****************************************************************************
 **
 ** void xcb_render_pictvisual_next
 ** 
 ** @@param xcb_render_pictvisual_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a154 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_pictvisual_end
 ** 
 ** @@param xcb_render_pictvisual_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a195 10

/*****************************************************************************
 **
 ** xcb_render_pictvisual_t * xcb_render_pictdepth_visuals
 ** 
 ** @@param const xcb_render_pictdepth_t *R
 ** @@returns xcb_render_pictvisual_t *
 **
 *****************************************************************************/
 
a201 10

/*****************************************************************************
 **
 ** int xcb_render_pictdepth_visuals_length
 ** 
 ** @@param const xcb_render_pictdepth_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a207 10

/*****************************************************************************
 **
 ** xcb_render_pictvisual_iterator_t xcb_render_pictdepth_visuals_iterator
 ** 
 ** @@param const xcb_render_pictdepth_t *R
 ** @@returns xcb_render_pictvisual_iterator_t
 **
 *****************************************************************************/
 
a217 10

/*****************************************************************************
 **
 ** void xcb_render_pictdepth_next
 ** 
 ** @@param xcb_render_pictdepth_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a228 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_pictdepth_end
 ** 
 ** @@param xcb_render_pictdepth_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a276 10

/*****************************************************************************
 **
 ** int xcb_render_pictscreen_depths_length
 ** 
 ** @@param const xcb_render_pictscreen_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a282 10

/*****************************************************************************
 **
 ** xcb_render_pictdepth_iterator_t xcb_render_pictscreen_depths_iterator
 ** 
 ** @@param const xcb_render_pictscreen_t *R
 ** @@returns xcb_render_pictdepth_iterator_t
 **
 *****************************************************************************/
 
a292 10

/*****************************************************************************
 **
 ** void xcb_render_pictscreen_next
 ** 
 ** @@param xcb_render_pictscreen_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a303 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_pictscreen_end
 ** 
 ** @@param xcb_render_pictscreen_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a315 10

/*****************************************************************************
 **
 ** void xcb_render_indexvalue_next
 ** 
 ** @@param xcb_render_indexvalue_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a323 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_indexvalue_end
 ** 
 ** @@param xcb_render_indexvalue_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a333 10

/*****************************************************************************
 **
 ** void xcb_render_color_next
 ** 
 ** @@param xcb_render_color_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a341 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_color_end
 ** 
 ** @@param xcb_render_color_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a351 10

/*****************************************************************************
 **
 ** void xcb_render_pointfix_next
 ** 
 ** @@param xcb_render_pointfix_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a359 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_pointfix_end
 ** 
 ** @@param xcb_render_pointfix_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a369 10

/*****************************************************************************
 **
 ** void xcb_render_linefix_next
 ** 
 ** @@param xcb_render_linefix_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a377 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_linefix_end
 ** 
 ** @@param xcb_render_linefix_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a387 10

/*****************************************************************************
 **
 ** void xcb_render_triangle_next
 ** 
 ** @@param xcb_render_triangle_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a395 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_triangle_end
 ** 
 ** @@param xcb_render_triangle_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a405 10

/*****************************************************************************
 **
 ** void xcb_render_trapezoid_next
 ** 
 ** @@param xcb_render_trapezoid_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a413 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_trapezoid_end
 ** 
 ** @@param xcb_render_trapezoid_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a423 10

/*****************************************************************************
 **
 ** void xcb_render_glyphinfo_next
 ** 
 ** @@param xcb_render_glyphinfo_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a431 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_glyphinfo_end
 ** 
 ** @@param xcb_render_glyphinfo_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a441 12

/*****************************************************************************
 **
 ** xcb_render_query_version_cookie_t xcb_render_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          client_major_version
 ** @@param uint32_t          client_minor_version
 ** @@returns xcb_render_query_version_cookie_t
 **
 *****************************************************************************/
 
d453 1
a453 1
    
d457 1
a457 1
    
d460 1
a460 1
    
d465 1
a465 1
    
a469 12

/*****************************************************************************
 **
 ** xcb_render_query_version_cookie_t xcb_render_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          client_major_version
 ** @@param uint32_t          client_minor_version
 ** @@returns xcb_render_query_version_cookie_t
 **
 *****************************************************************************/
 
d481 1
a481 1
    
d485 1
a485 1
    
d488 1
a488 1
    
d493 1
a493 1
    
a497 12

/*****************************************************************************
 **
 ** xcb_render_query_version_reply_t * xcb_render_query_version_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_render_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_render_query_version_reply_t *
 **
 *****************************************************************************/
 
a565 10

/*****************************************************************************
 **
 ** xcb_render_query_pict_formats_cookie_t xcb_render_query_pict_formats
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_render_query_pict_formats_cookie_t
 **
 *****************************************************************************/
 
d575 1
a575 1
    
d579 2
a580 2
    
    
d585 1
a585 1
    
a589 10

/*****************************************************************************
 **
 ** xcb_render_query_pict_formats_cookie_t xcb_render_query_pict_formats_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_render_query_pict_formats_cookie_t
 **
 *****************************************************************************/
 
d599 1
a599 1
    
d603 2
a604 2
    
    
d609 1
a609 1
    
a613 10

/*****************************************************************************
 **
 ** xcb_render_pictforminfo_t * xcb_render_query_pict_formats_formats
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns xcb_render_pictforminfo_t *
 **
 *****************************************************************************/
 
a619 10

/*****************************************************************************
 **
 ** int xcb_render_query_pict_formats_formats_length
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a625 10

/*****************************************************************************
 **
 ** xcb_render_pictforminfo_iterator_t xcb_render_query_pict_formats_formats_iterator
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns xcb_render_pictforminfo_iterator_t
 **
 *****************************************************************************/
 
a635 10

/*****************************************************************************
 **
 ** int xcb_render_query_pict_formats_screens_length
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a641 10

/*****************************************************************************
 **
 ** xcb_render_pictscreen_iterator_t xcb_render_query_pict_formats_screens_iterator
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns xcb_render_pictscreen_iterator_t
 **
 *****************************************************************************/
 
a652 10

/*****************************************************************************
 **
 ** uint32_t * xcb_render_query_pict_formats_subpixels
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a659 10

/*****************************************************************************
 **
 ** int xcb_render_query_pict_formats_subpixels_length
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a665 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_query_pict_formats_subpixels_end
 ** 
 ** @@param const xcb_render_query_pict_formats_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a676 12

/*****************************************************************************
 **
 ** xcb_render_query_pict_formats_reply_t * xcb_render_query_pict_formats_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_render_query_pict_formats_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_render_query_pict_formats_reply_t *
 **
 *****************************************************************************/
 
a715 11

/*****************************************************************************
 **
 ** xcb_render_query_pict_index_values_cookie_t xcb_render_query_pict_index_values
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_pictformat_t  format
 ** @@returns xcb_render_query_pict_index_values_cookie_t
 **
 *****************************************************************************/
 
d726 1
a726 1
    
d730 1
a730 1
    
d732 1
a732 1
    
d737 1
a737 1
    
a741 11

/*****************************************************************************
 **
 ** xcb_render_query_pict_index_values_cookie_t xcb_render_query_pict_index_values_unchecked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_pictformat_t  format
 ** @@returns xcb_render_query_pict_index_values_cookie_t
 **
 *****************************************************************************/
 
d752 1
a752 1
    
d756 1
a756 1
    
d758 1
a758 1
    
d763 1
a763 1
    
a767 10

/*****************************************************************************
 **
 ** xcb_render_indexvalue_t * xcb_render_query_pict_index_values_values
 ** 
 ** @@param const xcb_render_query_pict_index_values_reply_t *R
 ** @@returns xcb_render_indexvalue_t *
 **
 *****************************************************************************/
 
a773 10

/*****************************************************************************
 **
 ** int xcb_render_query_pict_index_values_values_length
 ** 
 ** @@param const xcb_render_query_pict_index_values_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a779 10

/*****************************************************************************
 **
 ** xcb_render_indexvalue_iterator_t xcb_render_query_pict_index_values_values_iterator
 ** 
 ** @@param const xcb_render_query_pict_index_values_reply_t *R
 ** @@returns xcb_render_indexvalue_iterator_t
 **
 *****************************************************************************/
 
a789 12

/*****************************************************************************
 **
 ** xcb_render_query_pict_index_values_reply_t * xcb_render_query_pict_index_values_reply
 ** 
 ** @@param xcb_connection_t                             *c
 ** @@param xcb_render_query_pict_index_values_cookie_t   cookie
 ** @@param xcb_generic_error_t                         **e
 ** @@returns xcb_render_query_pict_index_values_reply_t *
 **
 *****************************************************************************/
 
a828 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_picture_checked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_picture_t     pid
 ** @@param xcb_drawable_t           drawable
 ** @@param xcb_render_pictformat_t  format
 ** @@param uint32_t                 value_mask
 ** @@param const uint32_t          *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d843 1
a843 1
    
d847 1
a847 1
    
d852 1
a852 1
    
d862 1
a862 1
    
a866 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_picture
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_picture_t     pid
 ** @@param xcb_drawable_t           drawable
 ** @@param xcb_render_pictformat_t  format
 ** @@param uint32_t                 value_mask
 ** @@param const uint32_t          *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d881 1
a881 1
    
d885 1
a885 1
    
d890 1
a890 1
    
d900 1
a900 1
    
a935 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_change_picture_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_render_picture_t  picture
 ** @@param uint32_t              value_mask
 ** @@param const uint32_t       *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d948 1
a948 1
    
d952 1
a952 1
    
d955 1
a955 1
    
d965 1
a965 1
    
a969 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_change_picture
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_render_picture_t  picture
 ** @@param uint32_t              value_mask
 ** @@param const uint32_t       *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d982 1
a982 1
    
d986 1
a986 1
    
d989 1
a989 1
    
d999 1
a999 1
    
a1034 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_set_picture_clip_rectangles_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_render_picture_t   picture
 ** @@param int16_t                clip_x_origin
 ** @@param int16_t                clip_y_origin
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1049 1
a1049 1
    
d1053 1
a1053 1
    
d1057 1
a1057 1
    
d1067 1
a1067 1
    
a1071 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_set_picture_clip_rectangles
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_render_picture_t   picture
 ** @@param int16_t                clip_x_origin
 ** @@param int16_t                clip_y_origin
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1086 1
a1086 1
    
d1090 1
a1090 1
    
d1094 1
a1094 1
    
d1104 1
a1104 1
    
a1108 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_free_picture_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_render_picture_t  picture
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1119 1
a1119 1
    
d1123 1
a1123 1
    
d1125 1
a1125 1
    
d1130 1
a1130 1
    
a1134 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_free_picture
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_render_picture_t  picture
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1145 1
a1145 1
    
d1149 1
a1149 1
    
d1151 1
a1151 1
    
d1156 1
a1156 1
    
a1160 22

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               op
 ** @@param xcb_render_picture_t  src
 ** @@param xcb_render_picture_t  mask
 ** @@param xcb_render_picture_t  dst
 ** @@param int16_t               src_x
 ** @@param int16_t               src_y
 ** @@param int16_t               mask_x
 ** @@param int16_t               mask_y
 ** @@param int16_t               dst_x
 ** @@param int16_t               dst_y
 ** @@param uint16_t              width
 ** @@param uint16_t              height
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1182 1
a1182 1
    
d1186 1
a1186 1
    
d1200 1
a1200 1
    
d1205 1
a1205 1
    
a1209 22

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param uint8_t               op
 ** @@param xcb_render_picture_t  src
 ** @@param xcb_render_picture_t  mask
 ** @@param xcb_render_picture_t  dst
 ** @@param int16_t               src_x
 ** @@param int16_t               src_y
 ** @@param int16_t               mask_x
 ** @@param int16_t               mask_y
 ** @@param int16_t               dst_x
 ** @@param int16_t               dst_y
 ** @@param uint16_t              width
 ** @@param uint16_t              height
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1231 1
a1231 1
    
d1235 1
a1235 1
    
d1249 1
a1249 1
    
d1254 1
a1254 1
    
a1289 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_trapezoids_checked
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param uint8_t                       op
 ** @@param xcb_render_picture_t          src
 ** @@param xcb_render_picture_t          dst
 ** @@param xcb_render_pictformat_t       mask_format
 ** @@param int16_t                       src_x
 ** @@param int16_t                       src_y
 ** @@param uint32_t                      traps_len
 ** @@param const xcb_render_trapezoid_t *traps
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1307 1
a1307 1
    
d1311 1
a1311 1
    
d1319 1
a1319 1
    
d1329 1
a1329 1
    
a1333 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_trapezoids
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param uint8_t                       op
 ** @@param xcb_render_picture_t          src
 ** @@param xcb_render_picture_t          dst
 ** @@param xcb_render_pictformat_t       mask_format
 ** @@param int16_t                       src_x
 ** @@param int16_t                       src_y
 ** @@param uint32_t                      traps_len
 ** @@param const xcb_render_trapezoid_t *traps
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1351 1
a1351 1
    
d1355 1
a1355 1
    
d1363 1
a1363 1
    
d1373 1
a1373 1
    
a1408 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_triangles_checked
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint8_t                      op
 ** @@param xcb_render_picture_t         src
 ** @@param xcb_render_picture_t         dst
 ** @@param xcb_render_pictformat_t      mask_format
 ** @@param int16_t                      src_x
 ** @@param int16_t                      src_y
 ** @@param uint32_t                     triangles_len
 ** @@param const xcb_render_triangle_t *triangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1426 1
a1426 1
    
d1430 1
a1430 1
    
d1438 1
a1438 1
    
d1448 1
a1448 1
    
a1452 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_triangles
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint8_t                      op
 ** @@param xcb_render_picture_t         src
 ** @@param xcb_render_picture_t         dst
 ** @@param xcb_render_pictformat_t      mask_format
 ** @@param int16_t                      src_x
 ** @@param int16_t                      src_y
 ** @@param uint32_t                     triangles_len
 ** @@param const xcb_render_triangle_t *triangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1470 1
a1470 1
    
d1474 1
a1474 1
    
d1482 1
a1482 1
    
d1492 1
a1492 1
    
a1527 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_tri_strip_checked
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint8_t                      op
 ** @@param xcb_render_picture_t         src
 ** @@param xcb_render_picture_t         dst
 ** @@param xcb_render_pictformat_t      mask_format
 ** @@param int16_t                      src_x
 ** @@param int16_t                      src_y
 ** @@param uint32_t                     points_len
 ** @@param const xcb_render_pointfix_t *points
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1545 1
a1545 1
    
d1549 1
a1549 1
    
d1557 1
a1557 1
    
d1567 1
a1567 1
    
a1571 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_tri_strip
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint8_t                      op
 ** @@param xcb_render_picture_t         src
 ** @@param xcb_render_picture_t         dst
 ** @@param xcb_render_pictformat_t      mask_format
 ** @@param int16_t                      src_x
 ** @@param int16_t                      src_y
 ** @@param uint32_t                     points_len
 ** @@param const xcb_render_pointfix_t *points
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1589 1
a1589 1
    
d1593 1
a1593 1
    
d1601 1
a1601 1
    
d1611 1
a1611 1
    
a1646 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_tri_fan_checked
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint8_t                      op
 ** @@param xcb_render_picture_t         src
 ** @@param xcb_render_picture_t         dst
 ** @@param xcb_render_pictformat_t      mask_format
 ** @@param int16_t                      src_x
 ** @@param int16_t                      src_y
 ** @@param uint32_t                     points_len
 ** @@param const xcb_render_pointfix_t *points
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1664 1
a1664 1
    
d1668 1
a1668 1
    
d1676 1
a1676 1
    
d1686 1
a1686 1
    
a1690 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_tri_fan
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint8_t                      op
 ** @@param xcb_render_picture_t         src
 ** @@param xcb_render_picture_t         dst
 ** @@param xcb_render_pictformat_t      mask_format
 ** @@param int16_t                      src_x
 ** @@param int16_t                      src_y
 ** @@param uint32_t                     points_len
 ** @@param const xcb_render_pointfix_t *points
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1708 1
a1708 1
    
d1712 1
a1712 1
    
d1720 1
a1720 1
    
d1730 1
a1730 1
    
a1734 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_glyph_set_checked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_glyphset_t    gsid
 ** @@param xcb_render_pictformat_t  format
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1746 1
a1746 1
    
d1750 1
a1750 1
    
d1753 1
a1753 1
    
d1758 1
a1758 1
    
a1762 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_glyph_set
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_glyphset_t    gsid
 ** @@param xcb_render_pictformat_t  format
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1774 1
a1774 1
    
d1778 1
a1778 1
    
d1781 1
a1781 1
    
d1786 1
a1786 1
    
a1790 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_reference_glyph_set_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_render_glyphset_t  gsid
 ** @@param xcb_render_glyphset_t  existing
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1802 1
a1802 1
    
d1806 1
a1806 1
    
d1809 1
a1809 1
    
d1814 1
a1814 1
    
a1818 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_reference_glyph_set
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_render_glyphset_t  gsid
 ** @@param xcb_render_glyphset_t  existing
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1830 1
a1830 1
    
d1834 1
a1834 1
    
d1837 1
a1837 1
    
d1842 1
a1842 1
    
a1846 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_free_glyph_set_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_render_glyphset_t  glyphset
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1857 1
a1857 1
    
d1861 1
a1861 1
    
d1863 1
a1863 1
    
d1868 1
a1868 1
    
a1872 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_free_glyph_set
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_render_glyphset_t  glyphset
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1883 1
a1883 1
    
d1887 1
a1887 1
    
d1889 1
a1889 1
    
d1894 1
a1894 1
    
a1954 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_add_glyphs_checked
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_render_glyphset_t         glyphset
 ** @@param uint32_t                      glyphs_len
 ** @@param const uint32_t               *glyphids
 ** @@param const xcb_render_glyphinfo_t *glyphs
 ** @@param uint32_t                      data_len
 ** @@param const uint8_t                *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1970 1
a1970 1
    
d1974 1
a1974 1
    
d1977 1
a1977 1
    
d1997 1
a1997 1
    
a2001 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_add_glyphs
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_render_glyphset_t         glyphset
 ** @@param uint32_t                      glyphs_len
 ** @@param const uint32_t               *glyphids
 ** @@param const xcb_render_glyphinfo_t *glyphs
 ** @@param uint32_t                      data_len
 ** @@param const uint8_t                *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2017 1
a2017 1
    
d2021 1
a2021 1
    
d2024 1
a2024 1
    
d2044 1
a2044 1
    
a2079 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_free_glyphs_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_glyphset_t     glyphset
 ** @@param uint32_t                  glyphs_len
 ** @@param const xcb_render_glyph_t *glyphs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2092 1
a2092 1
    
d2096 1
a2096 1
    
d2098 1
a2098 1
    
d2108 1
a2108 1
    
a2112 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_free_glyphs
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_glyphset_t     glyphset
 ** @@param uint32_t                  glyphs_len
 ** @@param const xcb_render_glyph_t *glyphs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2125 1
a2125 1
    
d2129 1
a2129 1
    
d2131 1
a2131 1
    
d2141 1
a2141 1
    
a2176 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite_glyphs_8_checked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param uint8_t                  op
 ** @@param xcb_render_picture_t     src
 ** @@param xcb_render_picture_t     dst
 ** @@param xcb_render_pictformat_t  mask_format
 ** @@param xcb_render_glyphset_t    glyphset
 ** @@param int16_t                  src_x
 ** @@param int16_t                  src_y
 ** @@param uint32_t                 glyphcmds_len
 ** @@param const uint8_t           *glyphcmds
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2195 1
a2195 1
    
d2199 1
a2199 1
    
d2208 1
a2208 1
    
d2218 1
a2218 1
    
a2222 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite_glyphs_8
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param uint8_t                  op
 ** @@param xcb_render_picture_t     src
 ** @@param xcb_render_picture_t     dst
 ** @@param xcb_render_pictformat_t  mask_format
 ** @@param xcb_render_glyphset_t    glyphset
 ** @@param int16_t                  src_x
 ** @@param int16_t                  src_y
 ** @@param uint32_t                 glyphcmds_len
 ** @@param const uint8_t           *glyphcmds
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2241 1
a2241 1
    
d2245 1
a2245 1
    
d2254 1
a2254 1
    
d2264 1
a2264 1
    
a2299 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite_glyphs_16_checked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param uint8_t                  op
 ** @@param xcb_render_picture_t     src
 ** @@param xcb_render_picture_t     dst
 ** @@param xcb_render_pictformat_t  mask_format
 ** @@param xcb_render_glyphset_t    glyphset
 ** @@param int16_t                  src_x
 ** @@param int16_t                  src_y
 ** @@param uint32_t                 glyphcmds_len
 ** @@param const uint8_t           *glyphcmds
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2318 1
a2318 1
    
d2322 1
a2322 1
    
d2331 1
a2331 1
    
d2341 1
a2341 1
    
a2345 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite_glyphs_16
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param uint8_t                  op
 ** @@param xcb_render_picture_t     src
 ** @@param xcb_render_picture_t     dst
 ** @@param xcb_render_pictformat_t  mask_format
 ** @@param xcb_render_glyphset_t    glyphset
 ** @@param int16_t                  src_x
 ** @@param int16_t                  src_y
 ** @@param uint32_t                 glyphcmds_len
 ** @@param const uint8_t           *glyphcmds
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2364 1
a2364 1
    
d2368 1
a2368 1
    
d2377 1
a2377 1
    
d2387 1
a2387 1
    
a2422 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite_glyphs_32_checked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param uint8_t                  op
 ** @@param xcb_render_picture_t     src
 ** @@param xcb_render_picture_t     dst
 ** @@param xcb_render_pictformat_t  mask_format
 ** @@param xcb_render_glyphset_t    glyphset
 ** @@param int16_t                  src_x
 ** @@param int16_t                  src_y
 ** @@param uint32_t                 glyphcmds_len
 ** @@param const uint8_t           *glyphcmds
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2441 1
a2441 1
    
d2445 1
a2445 1
    
d2454 1
a2454 1
    
d2464 1
a2464 1
    
a2468 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_composite_glyphs_32
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param uint8_t                  op
 ** @@param xcb_render_picture_t     src
 ** @@param xcb_render_picture_t     dst
 ** @@param xcb_render_pictformat_t  mask_format
 ** @@param xcb_render_glyphset_t    glyphset
 ** @@param int16_t                  src_x
 ** @@param int16_t                  src_y
 ** @@param uint32_t                 glyphcmds_len
 ** @@param const uint8_t           *glyphcmds
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2487 1
a2487 1
    
d2491 1
a2491 1
    
d2500 1
a2500 1
    
d2510 1
a2510 1
    
a2545 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_fill_rectangles_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param uint8_t                op
 ** @@param xcb_render_picture_t   dst
 ** @@param xcb_render_color_t     color
 ** @@param uint32_t               rects_len
 ** @@param const xcb_rectangle_t *rects
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2560 1
a2560 1
    
d2564 1
a2564 1
    
d2569 1
a2569 1
    
d2579 1
a2579 1
    
a2583 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_fill_rectangles
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param uint8_t                op
 ** @@param xcb_render_picture_t   dst
 ** @@param xcb_render_color_t     color
 ** @@param uint32_t               rects_len
 ** @@param const xcb_rectangle_t *rects
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2598 1
a2598 1
    
d2602 1
a2602 1
    
d2607 1
a2607 1
    
d2617 1
a2617 1
    
a2621 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_cursor_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_cursor_t          cid
 ** @@param xcb_render_picture_t  source
 ** @@param uint16_t              x
 ** @@param uint16_t              y
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2635 1
a2635 1
    
d2639 1
a2639 1
    
d2644 1
a2644 1
    
d2649 1
a2649 1
    
a2653 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_cursor
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_cursor_t          cid
 ** @@param xcb_render_picture_t  source
 ** @@param uint16_t              x
 ** @@param uint16_t              y
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2667 1
a2667 1
    
d2671 1
a2671 1
    
d2676 1
a2676 1
    
d2681 1
a2681 1
    
a2685 10

/*****************************************************************************
 **
 ** void xcb_render_transform_next
 ** 
 ** @@param xcb_render_transform_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2693 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_transform_end
 ** 
 ** @@param xcb_render_transform_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2703 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_set_picture_transform_checked
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_render_picture_t    picture
 ** @@param xcb_render_transform_t  transform
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2715 1
a2715 1
    
d2719 1
a2719 1
    
d2722 1
a2722 1
    
d2727 1
a2727 1
    
a2731 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_set_picture_transform
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_render_picture_t    picture
 ** @@param xcb_render_transform_t  transform
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2743 1
a2743 1
    
d2747 1
a2747 1
    
d2750 1
a2750 1
    
d2755 1
a2755 1
    
a2807 11

/*****************************************************************************
 **
 ** xcb_render_query_filters_cookie_t xcb_render_query_filters
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_render_query_filters_cookie_t
 **
 *****************************************************************************/
 
d2818 1
a2818 1
    
d2822 1
a2822 1
    
d2824 1
a2824 1
    
d2829 1
a2829 1
    
a2833 11

/*****************************************************************************
 **
 ** xcb_render_query_filters_cookie_t xcb_render_query_filters_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_render_query_filters_cookie_t
 **
 *****************************************************************************/
 
d2844 1
a2844 1
    
d2848 1
a2848 1
    
d2850 1
a2850 1
    
d2855 1
a2855 1
    
a2859 10

/*****************************************************************************
 **
 ** uint16_t * xcb_render_query_filters_aliases
 ** 
 ** @@param const xcb_render_query_filters_reply_t *R
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a2865 10

/*****************************************************************************
 **
 ** int xcb_render_query_filters_aliases_length
 ** 
 ** @@param const xcb_render_query_filters_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2871 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_query_filters_aliases_end
 ** 
 ** @@param const xcb_render_query_filters_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2881 10

/*****************************************************************************
 **
 ** int xcb_render_query_filters_filters_length
 ** 
 ** @@param const xcb_render_query_filters_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2887 10

/*****************************************************************************
 **
 ** xcb_str_iterator_t xcb_render_query_filters_filters_iterator
 ** 
 ** @@param const xcb_render_query_filters_reply_t *R
 ** @@returns xcb_str_iterator_t
 **
 *****************************************************************************/
 
a2898 12

/*****************************************************************************
 **
 ** xcb_render_query_filters_reply_t * xcb_render_query_filters_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_render_query_filters_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_render_query_filters_reply_t *
 **
 *****************************************************************************/
 
a2950 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_set_picture_filter_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param uint16_t                  filter_len
 ** @@param const char               *filter
 ** @@param uint32_t                  values_len
 ** @@param const xcb_render_fixed_t *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2965 1
a2965 1
    
d2969 1
a2969 1
    
d2973 1
a2973 1
    
d2988 1
a2988 1
    
a2992 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_set_picture_filter
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param uint16_t                  filter_len
 ** @@param const char               *filter
 ** @@param uint32_t                  values_len
 ** @@param const xcb_render_fixed_t *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3007 1
a3007 1
    
d3011 1
a3011 1
    
d3015 1
a3015 1
    
d3030 1
a3030 1
    
a3034 10

/*****************************************************************************
 **
 ** void xcb_render_animcursorelt_next
 ** 
 ** @@param xcb_render_animcursorelt_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3042 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_animcursorelt_end
 ** 
 ** @@param xcb_render_animcursorelt_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3083 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_anim_cursor_checked
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_cursor_t                      cid
 ** @@param uint32_t                          cursors_len
 ** @@param const xcb_render_animcursorelt_t *cursors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3096 1
a3096 1
    
d3100 1
a3100 1
    
d3102 1
a3102 1
    
d3112 1
a3112 1
    
a3116 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_anim_cursor
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_cursor_t                      cid
 ** @@param uint32_t                          cursors_len
 ** @@param const xcb_render_animcursorelt_t *cursors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3129 1
a3129 1
    
d3133 1
a3133 1
    
d3135 1
a3135 1
    
d3145 1
a3145 1
    
a3149 10

/*****************************************************************************
 **
 ** void xcb_render_spanfix_next
 ** 
 ** @@param xcb_render_spanfix_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3157 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_spanfix_end
 ** 
 ** @@param xcb_render_spanfix_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3167 10

/*****************************************************************************
 **
 ** void xcb_render_trap_next
 ** 
 ** @@param xcb_render_trap_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3175 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_render_trap_end
 ** 
 ** @@param xcb_render_trap_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3216 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_add_traps_checked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_picture_t     picture
 ** @@param int16_t                  x_off
 ** @@param int16_t                  y_off
 ** @@param uint32_t                 traps_len
 ** @@param const xcb_render_trap_t *traps
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3231 1
a3231 1
    
d3235 1
a3235 1
    
d3239 1
a3239 1
    
d3249 1
a3249 1
    
a3253 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_add_traps
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_render_picture_t     picture
 ** @@param int16_t                  x_off
 ** @@param int16_t                  y_off
 ** @@param uint32_t                 traps_len
 ** @@param const xcb_render_trap_t *traps
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3268 1
a3268 1
    
d3272 1
a3272 1
    
d3276 1
a3276 1
    
d3286 1
a3286 1
    
a3290 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_solid_fill_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_render_picture_t  picture
 ** @@param xcb_render_color_t    color
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3302 1
a3302 1
    
d3306 1
a3306 1
    
d3309 1
a3309 1
    
d3314 1
a3314 1
    
a3318 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_solid_fill
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_render_picture_t  picture
 ** @@param xcb_render_color_t    color
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3330 1
a3330 1
    
d3334 1
a3334 1
    
d3337 1
a3337 1
    
d3342 1
a3342 1
    
a3389 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_linear_gradient_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param xcb_render_pointfix_t     p1
 ** @@param xcb_render_pointfix_t     p2
 ** @@param uint32_t                  num_stops
 ** @@param const xcb_render_fixed_t *stops
 ** @@param const xcb_render_color_t *colors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3405 1
a3405 1
    
d3409 1
a3409 1
    
d3414 1
a3414 1
    
d3429 1
a3429 1
    
a3433 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_linear_gradient
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param xcb_render_pointfix_t     p1
 ** @@param xcb_render_pointfix_t     p2
 ** @@param uint32_t                  num_stops
 ** @@param const xcb_render_fixed_t *stops
 ** @@param const xcb_render_color_t *colors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3449 1
a3449 1
    
d3453 1
a3453 1
    
d3458 1
a3458 1
    
d3473 1
a3473 1
    
a3520 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_radial_gradient_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param xcb_render_pointfix_t     inner
 ** @@param xcb_render_pointfix_t     outer
 ** @@param xcb_render_fixed_t        inner_radius
 ** @@param xcb_render_fixed_t        outer_radius
 ** @@param uint32_t                  num_stops
 ** @@param const xcb_render_fixed_t *stops
 ** @@param const xcb_render_color_t *colors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3538 1
a3538 1
    
d3542 1
a3542 1
    
d3549 1
a3549 1
    
d3564 1
a3564 1
    
a3568 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_radial_gradient
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param xcb_render_pointfix_t     inner
 ** @@param xcb_render_pointfix_t     outer
 ** @@param xcb_render_fixed_t        inner_radius
 ** @@param xcb_render_fixed_t        outer_radius
 ** @@param uint32_t                  num_stops
 ** @@param const xcb_render_fixed_t *stops
 ** @@param const xcb_render_color_t *colors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3586 1
a3586 1
    
d3590 1
a3590 1
    
d3597 1
a3597 1
    
d3612 1
a3612 1
    
a3659 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_conical_gradient_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param xcb_render_pointfix_t     center
 ** @@param xcb_render_fixed_t        angle
 ** @@param uint32_t                  num_stops
 ** @@param const xcb_render_fixed_t *stops
 ** @@param const xcb_render_color_t *colors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3675 1
a3675 1
    
d3679 1
a3679 1
    
d3684 1
a3684 1
    
d3699 1
a3699 1
    
a3703 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_render_create_conical_gradient
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_render_picture_t      picture
 ** @@param xcb_render_pointfix_t     center
 ** @@param xcb_render_fixed_t        angle
 ** @@param uint32_t                  num_stops
 ** @@param const xcb_render_fixed_t *stops
 ** @@param const xcb_render_color_t *colors
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3719 1
a3719 1
    
d3723 1
a3723 1
    
d3728 1
a3728 1
    
d3743 1
a3743 1
    
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d333 1
a333 1
    unsigned int xcb_align_to;
d338 2
d459 1
a459 1
    unsigned int xcb_align_to;
d466 2
d940 1
a940 1
    unsigned int xcb_align_to;
d947 2
d1231 1
a1231 1
    unsigned int xcb_align_to;
d1236 2
d1408 1
a1408 1
    unsigned int xcb_align_to;
d1413 2
d1545 1
a1545 1
    unsigned int xcb_align_to;
d1550 2
d1670 1
a1670 1
    unsigned int xcb_align_to;
d1675 2
d2021 1
a2021 1
    unsigned int xcb_align_to;
d2026 2
d2176 1
a2176 1
    unsigned int xcb_align_to;
d2181 2
d2331 1
a2331 1
    unsigned int xcb_align_to;
d2336 2
d2486 1
a2486 1
    unsigned int xcb_align_to;
d2491 2
d2876 1
a2876 1
    unsigned int xcb_align_to;
d2881 2
d3057 1
a3057 1
    unsigned int xcb_align_to;
d3062 2
d3180 1
a3180 1
    unsigned int xcb_align_to;
d3185 2
d3341 1
a3341 1
    unsigned int xcb_align_to;
d3346 2
d3502 1
a3502 1
    unsigned int xcb_align_to;
d3507 2
d3663 1
a3663 1
    unsigned int xcb_align_to;
d3668 2
d4010 1
a4010 1
    unsigned int xcb_align_to;
d4017 2
d4242 1
a4242 1
    unsigned int xcb_align_to;
d4247 2
d4437 1
a4437 1
    unsigned int xcb_align_to;
d4442 2
d4636 1
a4636 1
    unsigned int xcb_align_to;
d4641 2
d4851 1
a4851 1
    unsigned int xcb_align_to;
d4856 2
d5014 1
a5014 1
    unsigned int xcb_align_to;
d5019 2
d5189 1
a5189 1
    unsigned int xcb_align_to;
d5194 2
@


1.1
log
@Initial revision
@
text
@d6 4
d12 1
d15 2
d325 29
d420 3
a422 1
    xcb_generic_iterator_t child = xcb_render_pictvisual_end(xcb_render_pictdepth_visuals_iterator(R));
a424 1
    i->index = child.index;
d449 34
d533 3
a535 1
    xcb_generic_iterator_t child = xcb_render_pictdepth_end(xcb_render_pictscreen_depths_iterator(R));
a537 1
    i->index = child.index;
d863 1
d903 1
d928 58
d1015 1
d1049 1
d1217 29
d1278 1
d1315 1
d1392 29
d1464 1
d1469 1
d1517 1
d1522 1
d1527 29
d1593 1
d1598 1
d1640 1
d1645 1
d1650 29
d1721 1
d1726 1
d1773 1
d1778 1
d1815 1
d1852 1
d1923 1
d1994 1
d1999 29
d2080 1
d2085 1
d2142 1
d2147 1
d2152 29
d2233 1
d2238 1
d2295 1
d2300 1
d2305 29
d2386 1
d2391 1
d2448 1
d2453 1
d2458 29
d2539 1
d2544 1
d2601 1
d2606 1
d2646 1
d2686 1
d2726 1
d2766 1
d2803 1
d2840 1
d2845 54
d2942 1
d2947 1
d2952 1
d2957 1
d3005 1
d3010 1
d3015 1
d3020 1
d3025 29
d3090 1
d3095 1
d3136 1
d3141 1
d3146 29
d3230 1
d3235 1
d3295 1
d3300 1
d3305 29
d3389 1
d3394 1
d3454 1
d3459 1
d3464 29
d3548 1
d3553 1
d3613 1
d3618 1
d3623 29
d3695 1
d3700 1
d3748 1
d3753 1
d3799 1
d3845 1
d3923 1
d3963 1
d3968 46
d4046 1
d4083 1
d4197 42
d4281 1
d4286 1
d4291 1
d4338 1
d4343 1
d4348 1
d4391 29
d4456 1
d4461 1
d4502 1
d4507 1
d4588 29
d4659 1
d4664 1
d4711 1
d4716 1
d4756 1
d4796 1
d4801 41
d4887 1
d4892 1
d4897 1
d4947 1
d4952 1
d4957 1
d4962 41
d5054 1
d5059 1
d5064 1
d5120 1
d5125 1
d5130 1
d5135 41
d5221 1
d5226 1
d5231 1
d5281 1
d5286 1
d5291 1
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
