head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	mKDGsTNpiR2zRHYQ;

1.2
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.1;
commitid	01TEvO4uNHLqFv7N;

1.1
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from present.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_Present_API XCB Present API
 * @@brief Present XCB Protocol Implementation.
 * @@{
 **/

#ifndef __PRESENT_H
#define __PRESENT_H

#include "xcb.h"
#include "xproto.h"
#include "randr.h"
#include "xfixes.h"
#include "sync.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_PRESENT_MAJOR_VERSION 1
#define XCB_PRESENT_MINOR_VERSION 0

extern xcb_extension_t xcb_present_id;

typedef enum xcb_present_event_enum_t {
    XCB_PRESENT_EVENT_CONFIGURE_NOTIFY = 0,
    XCB_PRESENT_EVENT_COMPLETE_NOTIFY = 1,
    XCB_PRESENT_EVENT_IDLE_NOTIFY = 2,
    XCB_PRESENT_EVENT_REDIRECT_NOTIFY = 3
} xcb_present_event_enum_t;

typedef enum xcb_present_event_mask_t {
    XCB_PRESENT_EVENT_MASK_NO_EVENT = 0,
    XCB_PRESENT_EVENT_MASK_CONFIGURE_NOTIFY = 1,
    XCB_PRESENT_EVENT_MASK_COMPLETE_NOTIFY = 2,
    XCB_PRESENT_EVENT_MASK_IDLE_NOTIFY = 4,
    XCB_PRESENT_EVENT_MASK_REDIRECT_NOTIFY = 8
} xcb_present_event_mask_t;

typedef enum xcb_present_option_t {
    XCB_PRESENT_OPTION_NONE = 0,
    XCB_PRESENT_OPTION_ASYNC = 1,
    XCB_PRESENT_OPTION_COPY = 2,
    XCB_PRESENT_OPTION_UST = 4
} xcb_present_option_t;

typedef enum xcb_present_capability_t {
    XCB_PRESENT_CAPABILITY_NONE = 0,
    XCB_PRESENT_CAPABILITY_ASYNC = 1,
    XCB_PRESENT_CAPABILITY_FENCE = 2,
    XCB_PRESENT_CAPABILITY_UST = 4
} xcb_present_capability_t;

typedef enum xcb_present_complete_kind_t {
    XCB_PRESENT_COMPLETE_KIND_PIXMAP = 0,
    XCB_PRESENT_COMPLETE_KIND_NOTIFY_MSC = 1
} xcb_present_complete_kind_t;

typedef enum xcb_present_complete_mode_t {
    XCB_PRESENT_COMPLETE_MODE_COPY = 0,
    XCB_PRESENT_COMPLETE_MODE_FLIP = 1,
    XCB_PRESENT_COMPLETE_MODE_SKIP = 2
} xcb_present_complete_mode_t;

/**
 * @@brief xcb_present_notify_t
 **/
typedef struct xcb_present_notify_t {
    xcb_window_t window;
    uint32_t     serial;
} xcb_present_notify_t;

/**
 * @@brief xcb_present_notify_iterator_t
 **/
typedef struct xcb_present_notify_iterator_t {
    xcb_present_notify_t *data;
    int                   rem;
    int                   index;
} xcb_present_notify_iterator_t;

/**
 * @@brief xcb_present_query_version_cookie_t
 **/
typedef struct xcb_present_query_version_cookie_t {
    unsigned int sequence;
} xcb_present_query_version_cookie_t;

/** Opcode for xcb_present_query_version. */
#define XCB_PRESENT_QUERY_VERSION 0

/**
 * @@brief xcb_present_query_version_request_t
 **/
typedef struct xcb_present_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t major_version;
    uint32_t minor_version;
} xcb_present_query_version_request_t;

/**
 * @@brief xcb_present_query_version_reply_t
 **/
typedef struct xcb_present_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t major_version;
    uint32_t minor_version;
} xcb_present_query_version_reply_t;

/** Opcode for xcb_present_pixmap. */
#define XCB_PRESENT_PIXMAP 1

/**
 * @@brief xcb_present_pixmap_request_t
 **/
typedef struct xcb_present_pixmap_request_t {
    uint8_t             major_opcode;
    uint8_t             minor_opcode;
    uint16_t            length;
    xcb_window_t        window;
    xcb_pixmap_t        pixmap;
    uint32_t            serial;
    xcb_xfixes_region_t valid;
    xcb_xfixes_region_t update;
    int16_t             x_off;
    int16_t             y_off;
    xcb_randr_crtc_t    target_crtc;
    xcb_sync_fence_t    wait_fence;
    xcb_sync_fence_t    idle_fence;
    uint32_t            options;
    uint8_t             pad0[4];
    uint64_t            target_msc;
    uint64_t            divisor;
    uint64_t            remainder;
} xcb_present_pixmap_request_t;

/** Opcode for xcb_present_notify_msc. */
#define XCB_PRESENT_NOTIFY_MSC 2

/**
 * @@brief xcb_present_notify_msc_request_t
 **/
typedef struct xcb_present_notify_msc_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
    uint32_t     serial;
    uint8_t      pad0[4];
    uint64_t     target_msc;
    uint64_t     divisor;
    uint64_t     remainder;
} xcb_present_notify_msc_request_t;

typedef uint32_t xcb_present_event_t;

/**
 * @@brief xcb_present_event_iterator_t
 **/
typedef struct xcb_present_event_iterator_t {
    xcb_present_event_t *data;
    int                  rem;
    int                  index;
} xcb_present_event_iterator_t;

/** Opcode for xcb_present_select_input. */
#define XCB_PRESENT_SELECT_INPUT 3

/**
 * @@brief xcb_present_select_input_request_t
 **/
typedef struct xcb_present_select_input_request_t {
    uint8_t             major_opcode;
    uint8_t             minor_opcode;
    uint16_t            length;
    xcb_present_event_t eid;
    xcb_window_t        window;
    uint32_t            event_mask;
} xcb_present_select_input_request_t;

/**
 * @@brief xcb_present_query_capabilities_cookie_t
 **/
typedef struct xcb_present_query_capabilities_cookie_t {
    unsigned int sequence;
} xcb_present_query_capabilities_cookie_t;

/** Opcode for xcb_present_query_capabilities. */
#define XCB_PRESENT_QUERY_CAPABILITIES 4

/**
 * @@brief xcb_present_query_capabilities_request_t
 **/
typedef struct xcb_present_query_capabilities_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t target;
} xcb_present_query_capabilities_request_t;

/**
 * @@brief xcb_present_query_capabilities_reply_t
 **/
typedef struct xcb_present_query_capabilities_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t capabilities;
} xcb_present_query_capabilities_reply_t;

/** Opcode for xcb_present_generic. */
#define XCB_PRESENT_GENERIC 0

/**
 * @@brief xcb_present_generic_event_t
 **/
typedef struct xcb_present_generic_event_t {
    uint8_t             response_type;
    uint8_t             extension;
    uint16_t            sequence;
    uint32_t            length;
    uint16_t            evtype;
    uint8_t             pad0[2];
    xcb_present_event_t event;
} xcb_present_generic_event_t;

/** Opcode for xcb_present_configure_notify. */
#define XCB_PRESENT_CONFIGURE_NOTIFY 0

/**
 * @@brief xcb_present_configure_notify_event_t
 **/
typedef struct xcb_present_configure_notify_event_t {
    uint8_t             response_type;
    uint8_t             extension;
    uint16_t            sequence;
    uint32_t            length;
    uint16_t            event_type;
    uint8_t             pad0[2];
    xcb_present_event_t event;
    xcb_window_t        window;
    int16_t             x;
    int16_t             y;
    uint16_t            width;
    uint16_t            height;
    int16_t             off_x;
    int16_t             off_y;
    uint32_t            full_sequence;
    uint16_t            pixmap_width;
    uint16_t            pixmap_height;
    uint32_t            pixmap_flags;
} xcb_present_configure_notify_event_t;

/** Opcode for xcb_present_complete_notify. */
#define XCB_PRESENT_COMPLETE_NOTIFY 1

/**
 * @@brief xcb_present_complete_notify_event_t
 **/
typedef struct xcb_present_complete_notify_event_t {
    uint8_t             response_type;
    uint8_t             extension;
    uint16_t            sequence;
    uint32_t            length;
    uint16_t            event_type;
    uint8_t             kind;
    uint8_t             mode;
    xcb_present_event_t event;
    xcb_window_t        window;
    uint32_t            serial;
    uint64_t            ust;
    uint32_t            full_sequence;
    uint64_t            msc;
} XCB_PACKED xcb_present_complete_notify_event_t;

/** Opcode for xcb_present_idle_notify. */
#define XCB_PRESENT_IDLE_NOTIFY 2

/**
 * @@brief xcb_present_idle_notify_event_t
 **/
typedef struct xcb_present_idle_notify_event_t {
    uint8_t             response_type;
    uint8_t             extension;
    uint16_t            sequence;
    uint32_t            length;
    uint16_t            event_type;
    uint8_t             pad0[2];
    xcb_present_event_t event;
    xcb_window_t        window;
    uint32_t            serial;
    xcb_pixmap_t        pixmap;
    xcb_sync_fence_t    idle_fence;
    uint32_t            full_sequence;
} xcb_present_idle_notify_event_t;

/** Opcode for xcb_present_redirect_notify. */
#define XCB_PRESENT_REDIRECT_NOTIFY 3

/**
 * @@brief xcb_present_redirect_notify_event_t
 **/
typedef struct xcb_present_redirect_notify_event_t {
    uint8_t             response_type;
    uint8_t             extension;
    uint16_t            sequence;
    uint32_t            length;
    uint16_t            event_type;
    uint8_t             update_window;
    uint8_t             pad0;
    xcb_present_event_t event;
    xcb_window_t        event_window;
    xcb_window_t        window;
    xcb_pixmap_t        pixmap;
    uint32_t            serial;
    uint32_t            full_sequence;
    xcb_xfixes_region_t valid_region;
    xcb_xfixes_region_t update_region;
    xcb_rectangle_t     valid_rect;
    xcb_rectangle_t     update_rect;
    int16_t             x_off;
    int16_t             y_off;
    xcb_randr_crtc_t    target_crtc;
    xcb_sync_fence_t    wait_fence;
    xcb_sync_fence_t    idle_fence;
    uint32_t            options;
    uint8_t             pad1[4];
    uint64_t            target_msc;
    uint64_t            divisor;
    uint64_t            remainder;
} XCB_PACKED xcb_present_redirect_notify_event_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_present_notify_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_present_notify_t)
 */
void
xcb_present_notify_next (xcb_present_notify_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_present_notify_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_present_notify_end (xcb_present_notify_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_present_query_version_cookie_t
xcb_present_query_version (xcb_connection_t *c,
                           uint32_t          major_version,
                           uint32_t          minor_version);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_present_query_version_cookie_t
xcb_present_query_version_unchecked (xcb_connection_t *c,
                                     uint32_t          major_version,
                                     uint32_t          minor_version);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_present_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_present_query_version_reply_t *
xcb_present_query_version_reply (xcb_connection_t                    *c,
                                 xcb_present_query_version_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e);

int
xcb_present_pixmap_sizeof (const void  *_buffer,
                           uint32_t     notifies_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_present_pixmap_checked (xcb_connection_t           *c,
                            xcb_window_t                window,
                            xcb_pixmap_t                pixmap,
                            uint32_t                    serial,
                            xcb_xfixes_region_t         valid,
                            xcb_xfixes_region_t         update,
                            int16_t                     x_off,
                            int16_t                     y_off,
                            xcb_randr_crtc_t            target_crtc,
                            xcb_sync_fence_t            wait_fence,
                            xcb_sync_fence_t            idle_fence,
                            uint32_t                    options,
                            uint64_t                    target_msc,
                            uint64_t                    divisor,
                            uint64_t                    remainder,
                            uint32_t                    notifies_len,
                            const xcb_present_notify_t *notifies);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_present_pixmap (xcb_connection_t           *c,
                    xcb_window_t                window,
                    xcb_pixmap_t                pixmap,
                    uint32_t                    serial,
                    xcb_xfixes_region_t         valid,
                    xcb_xfixes_region_t         update,
                    int16_t                     x_off,
                    int16_t                     y_off,
                    xcb_randr_crtc_t            target_crtc,
                    xcb_sync_fence_t            wait_fence,
                    xcb_sync_fence_t            idle_fence,
                    uint32_t                    options,
                    uint64_t                    target_msc,
                    uint64_t                    divisor,
                    uint64_t                    remainder,
                    uint32_t                    notifies_len,
                    const xcb_present_notify_t *notifies);

xcb_present_notify_t *
xcb_present_pixmap_notifies (const xcb_present_pixmap_request_t *R);

int
xcb_present_pixmap_notifies_length (const xcb_present_pixmap_request_t *R);

xcb_present_notify_iterator_t
xcb_present_pixmap_notifies_iterator (const xcb_present_pixmap_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_present_notify_msc_checked (xcb_connection_t *c,
                                xcb_window_t      window,
                                uint32_t          serial,
                                uint64_t          target_msc,
                                uint64_t          divisor,
                                uint64_t          remainder);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_present_notify_msc (xcb_connection_t *c,
                        xcb_window_t      window,
                        uint32_t          serial,
                        uint64_t          target_msc,
                        uint64_t          divisor,
                        uint64_t          remainder);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_present_event_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_present_event_t)
 */
void
xcb_present_event_next (xcb_present_event_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_present_event_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_present_event_end (xcb_present_event_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_present_select_input_checked (xcb_connection_t    *c,
                                  xcb_present_event_t  eid,
                                  xcb_window_t         window,
                                  uint32_t             event_mask);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_present_select_input (xcb_connection_t    *c,
                          xcb_present_event_t  eid,
                          xcb_window_t         window,
                          uint32_t             event_mask);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_present_query_capabilities_cookie_t
xcb_present_query_capabilities (xcb_connection_t *c,
                                uint32_t          target);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_present_query_capabilities_cookie_t
xcb_present_query_capabilities_unchecked (xcb_connection_t *c,
                                          uint32_t          target);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_present_query_capabilities_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_present_query_capabilities_reply_t *
xcb_present_query_capabilities_reply (xcb_connection_t                         *c,
                                      xcb_present_query_capabilities_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e);

int
xcb_present_redirect_notify_sizeof (const void  *_buffer,
                                    uint32_t     notifies_len);

xcb_present_notify_t *
xcb_present_redirect_notify_notifies (const xcb_present_redirect_notify_event_t *R);

int
xcb_present_redirect_notify_notifies_length (const xcb_present_redirect_notify_event_t *R);

xcb_present_notify_iterator_t
xcb_present_redirect_notify_notifies_iterator (const xcb_present_redirect_notify_event_t *R);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.2
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d74 2
a75 2
    xcb_window_t window; /**<  */
    uint32_t     serial; /**<  */
d82 3
a84 3
    xcb_present_notify_t *data; /**<  */
    int                   rem; /**<  */
    int                   index; /**<  */
d91 1
a91 1
    unsigned int sequence; /**<  */
d101 5
a105 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t major_version; /**<  */
    uint32_t minor_version; /**<  */
d112 6
a117 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t major_version; /**<  */
    uint32_t minor_version; /**<  */
d127 18
a144 18
    uint8_t             major_opcode; /**<  */
    uint8_t             minor_opcode; /**<  */
    uint16_t            length; /**<  */
    xcb_window_t        window; /**<  */
    xcb_pixmap_t        pixmap; /**<  */
    uint32_t            serial; /**<  */
    xcb_xfixes_region_t valid; /**<  */
    xcb_xfixes_region_t update; /**<  */
    int16_t             x_off; /**<  */
    int16_t             y_off; /**<  */
    xcb_randr_crtc_t    target_crtc; /**<  */
    xcb_sync_fence_t    wait_fence; /**<  */
    xcb_sync_fence_t    idle_fence; /**<  */
    uint32_t            options; /**<  */
    uint8_t             pad0[4]; /**<  */
    uint64_t            target_msc; /**<  */
    uint64_t            divisor; /**<  */
    uint64_t            remainder; /**<  */
d154 9
a162 9
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
    uint32_t     serial; /**<  */
    uint8_t      pad0[4]; /**<  */
    uint64_t     target_msc; /**<  */
    uint64_t     divisor; /**<  */
    uint64_t     remainder; /**<  */
d171 3
a173 3
    xcb_present_event_t *data; /**<  */
    int                  rem; /**<  */
    int                  index; /**<  */
d183 6
a188 6
    uint8_t             major_opcode; /**<  */
    uint8_t             minor_opcode; /**<  */
    uint16_t            length; /**<  */
    xcb_present_event_t eid; /**<  */
    xcb_window_t        window; /**<  */
    uint32_t            event_mask; /**<  */
d195 1
a195 1
    unsigned int sequence; /**<  */
d205 4
a208 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t target; /**<  */
d215 5
a219 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t capabilities; /**<  */
d229 7
a235 7
    uint8_t             response_type; /**<  */
    uint8_t             extension; /**<  */
    uint16_t            sequence; /**<  */
    uint32_t            length; /**<  */
    uint16_t            evtype; /**<  */
    uint8_t             pad0[2]; /**<  */
    xcb_present_event_t event; /**<  */
d245 18
a262 18
    uint8_t             response_type; /**<  */
    uint8_t             extension; /**<  */
    uint16_t            sequence; /**<  */
    uint32_t            length; /**<  */
    uint16_t            event_type; /**<  */
    uint8_t             pad0[2]; /**<  */
    xcb_present_event_t event; /**<  */
    xcb_window_t        window; /**<  */
    int16_t             x; /**<  */
    int16_t             y; /**<  */
    uint16_t            width; /**<  */
    uint16_t            height; /**<  */
    int16_t             off_x; /**<  */
    int16_t             off_y; /**<  */
    uint32_t            full_sequence; /**<  */
    uint16_t            pixmap_width; /**<  */
    uint16_t            pixmap_height; /**<  */
    uint32_t            pixmap_flags; /**<  */
d272 13
a284 13
    uint8_t             response_type; /**<  */
    uint8_t             extension; /**<  */
    uint16_t            sequence; /**<  */
    uint32_t            length; /**<  */
    uint16_t            event_type; /**<  */
    uint8_t             kind; /**<  */
    uint8_t             mode; /**<  */
    xcb_present_event_t event; /**<  */
    xcb_window_t        window; /**<  */
    uint32_t            serial; /**<  */
    uint64_t            ust; /**<  */
    uint32_t            full_sequence; /**<  */
    uint64_t            msc; /**<  */
d294 12
a305 12
    uint8_t             response_type; /**<  */
    uint8_t             extension; /**<  */
    uint16_t            sequence; /**<  */
    uint32_t            length; /**<  */
    uint16_t            event_type; /**<  */
    uint8_t             pad0[2]; /**<  */
    xcb_present_event_t event; /**<  */
    xcb_window_t        window; /**<  */
    uint32_t            serial; /**<  */
    xcb_pixmap_t        pixmap; /**<  */
    xcb_sync_fence_t    idle_fence; /**<  */
    uint32_t            full_sequence; /**<  */
d315 27
a341 27
    uint8_t             response_type; /**<  */
    uint8_t             extension; /**<  */
    uint16_t            sequence; /**<  */
    uint32_t            length; /**<  */
    uint16_t            event_type; /**<  */
    uint8_t             update_window; /**<  */
    uint8_t             pad0; /**<  */
    xcb_present_event_t event; /**<  */
    xcb_window_t        event_window; /**<  */
    xcb_window_t        window; /**<  */
    xcb_pixmap_t        pixmap; /**<  */
    uint32_t            serial; /**<  */
    uint32_t            full_sequence; /**<  */
    xcb_xfixes_region_t valid_region; /**<  */
    xcb_xfixes_region_t update_region; /**<  */
    xcb_rectangle_t     valid_rect; /**<  */
    xcb_rectangle_t     update_rect; /**<  */
    int16_t             x_off; /**<  */
    int16_t             y_off; /**<  */
    xcb_randr_crtc_t    target_crtc; /**<  */
    xcb_sync_fence_t    wait_fence; /**<  */
    xcb_sync_fence_t    idle_fence; /**<  */
    uint32_t            options; /**<  */
    uint8_t             pad1[4]; /**<  */
    uint64_t            target_msc; /**<  */
    uint64_t            divisor; /**<  */
    uint64_t            remainder; /**<  */
d353 1
a353 1
xcb_present_notify_next (xcb_present_notify_iterator_t *i  /**< */);
d365 1
a365 1
xcb_present_notify_end (xcb_present_notify_iterator_t i  /**< */);
d376 3
a378 3
xcb_present_query_version (xcb_connection_t *c  /**< */,
                           uint32_t          major_version  /**< */,
                           uint32_t          minor_version  /**< */);
d392 3
a394 3
xcb_present_query_version_unchecked (xcb_connection_t *c  /**< */,
                                     uint32_t          major_version  /**< */,
                                     uint32_t          minor_version  /**< */);
d411 1
a411 1
xcb_present_query_version_reply (xcb_connection_t                    *c  /**< */,
d413 1
a413 1
                                 xcb_generic_error_t                **e  /**< */);
d416 2
a417 2
xcb_present_pixmap_sizeof (const void  *_buffer  /**< */,
                           uint32_t     notifies_len  /**< */);
d431 17
a447 17
xcb_present_pixmap_checked (xcb_connection_t           *c  /**< */,
                            xcb_window_t                window  /**< */,
                            xcb_pixmap_t                pixmap  /**< */,
                            uint32_t                    serial  /**< */,
                            xcb_xfixes_region_t         valid  /**< */,
                            xcb_xfixes_region_t         update  /**< */,
                            int16_t                     x_off  /**< */,
                            int16_t                     y_off  /**< */,
                            xcb_randr_crtc_t            target_crtc  /**< */,
                            xcb_sync_fence_t            wait_fence  /**< */,
                            xcb_sync_fence_t            idle_fence  /**< */,
                            uint32_t                    options  /**< */,
                            uint64_t                    target_msc  /**< */,
                            uint64_t                    divisor  /**< */,
                            uint64_t                    remainder  /**< */,
                            uint32_t                    notifies_len  /**< */,
                            const xcb_present_notify_t *notifies  /**< */);
d458 26
a483 17
xcb_present_pixmap (xcb_connection_t           *c  /**< */,
                    xcb_window_t                window  /**< */,
                    xcb_pixmap_t                pixmap  /**< */,
                    uint32_t                    serial  /**< */,
                    xcb_xfixes_region_t         valid  /**< */,
                    xcb_xfixes_region_t         update  /**< */,
                    int16_t                     x_off  /**< */,
                    int16_t                     y_off  /**< */,
                    xcb_randr_crtc_t            target_crtc  /**< */,
                    xcb_sync_fence_t            wait_fence  /**< */,
                    xcb_sync_fence_t            idle_fence  /**< */,
                    uint32_t                    options  /**< */,
                    uint64_t                    target_msc  /**< */,
                    uint64_t                    divisor  /**< */,
                    uint64_t                    remainder  /**< */,
                    uint32_t                    notifies_len  /**< */,
                    const xcb_present_notify_t *notifies  /**< */);
d497 6
a502 6
xcb_present_notify_msc_checked (xcb_connection_t *c  /**< */,
                                xcb_window_t      window  /**< */,
                                uint32_t          serial  /**< */,
                                uint64_t          target_msc  /**< */,
                                uint64_t          divisor  /**< */,
                                uint64_t          remainder  /**< */);
d513 6
a518 6
xcb_present_notify_msc (xcb_connection_t *c  /**< */,
                        xcb_window_t      window  /**< */,
                        uint32_t          serial  /**< */,
                        uint64_t          target_msc  /**< */,
                        uint64_t          divisor  /**< */,
                        uint64_t          remainder  /**< */);
d529 1
a529 1
xcb_present_event_next (xcb_present_event_iterator_t *i  /**< */);
d541 1
a541 1
xcb_present_event_end (xcb_present_event_iterator_t i  /**< */);
d555 4
a558 4
xcb_present_select_input_checked (xcb_connection_t    *c  /**< */,
                                  xcb_present_event_t  eid  /**< */,
                                  xcb_window_t         window  /**< */,
                                  uint32_t             event_mask  /**< */);
d569 4
a572 4
xcb_present_select_input (xcb_connection_t    *c  /**< */,
                          xcb_present_event_t  eid  /**< */,
                          xcb_window_t         window  /**< */,
                          uint32_t             event_mask  /**< */);
d583 2
a584 2
xcb_present_query_capabilities (xcb_connection_t *c  /**< */,
                                uint32_t          target  /**< */);
d598 2
a599 2
xcb_present_query_capabilities_unchecked (xcb_connection_t *c  /**< */,
                                          uint32_t          target  /**< */);
d616 1
a616 1
xcb_present_query_capabilities_reply (xcb_connection_t                         *c  /**< */,
d618 1
a618 1
                                      xcb_generic_error_t                     **e  /**< */);
d621 11
a631 2
xcb_present_redirect_notify_sizeof (const void  *_buffer  /**< */,
                                    uint32_t     notifies_len  /**< */);
@


1.1
log
@Update build system and generated files for libxcb 1.10.
@
text
@a16 1
#include "render.h"
a17 1
#include "shape.h"
d27 1
a27 1
  
d285 1
a285 1
} xcb_present_complete_notify_event_t;
d342 1
a342 1
} xcb_present_redirect_notify_event_t;
a351 10

/*****************************************************************************
 **
 ** void xcb_present_notify_next
 ** 
 ** @@param xcb_present_notify_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a363 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_present_notify_end
 ** 
 ** @@param xcb_present_notify_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d373 1
a373 1
 * 
a374 12

/*****************************************************************************
 **
 ** xcb_present_query_version_cookie_t xcb_present_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_present_query_version_cookie_t
 **
 *****************************************************************************/
 
d386 1
a386 1
 * 
a390 12

/*****************************************************************************
 **
 ** xcb_present_query_version_cookie_t xcb_present_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_present_query_version_cookie_t
 **
 *****************************************************************************/
 
d403 1
a403 1
 * 
a409 12

/*****************************************************************************
 **
 ** xcb_present_query_version_reply_t * xcb_present_query_version_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_present_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_present_query_version_reply_t *
 **
 *****************************************************************************/
 
d425 1
a425 1
 * 
a429 26

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_present_pixmap_checked
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_window_t                window
 ** @@param xcb_pixmap_t                pixmap
 ** @@param uint32_t                    serial
 ** @@param xcb_xfixes_region_t         valid
 ** @@param xcb_xfixes_region_t         update
 ** @@param int16_t                     x_off
 ** @@param int16_t                     y_off
 ** @@param xcb_randr_crtc_t            target_crtc
 ** @@param xcb_sync_fence_t            wait_fence
 ** @@param xcb_sync_fence_t            idle_fence
 ** @@param uint32_t                    options
 ** @@param uint64_t                    target_msc
 ** @@param uint64_t                    divisor
 ** @@param uint64_t                    remainder
 ** @@param uint32_t                    notifies_len
 ** @@param const xcb_present_notify_t *notifies
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d455 1
a455 1
 * 
a456 26

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_present_pixmap
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_window_t                window
 ** @@param xcb_pixmap_t                pixmap
 ** @@param uint32_t                    serial
 ** @@param xcb_xfixes_region_t         valid
 ** @@param xcb_xfixes_region_t         update
 ** @@param int16_t                     x_off
 ** @@param int16_t                     y_off
 ** @@param xcb_randr_crtc_t            target_crtc
 ** @@param xcb_sync_fence_t            wait_fence
 ** @@param xcb_sync_fence_t            idle_fence
 ** @@param uint32_t                    options
 ** @@param uint64_t                    target_msc
 ** @@param uint64_t                    divisor
 ** @@param uint64_t                    remainder
 ** @@param uint32_t                    notifies_len
 ** @@param const xcb_present_notify_t *notifies
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d482 1
a482 1
 * 
a486 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_present_notify_msc_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          serial
 ** @@param uint64_t          target_msc
 ** @@param uint64_t          divisor
 ** @@param uint64_t          remainder
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d501 1
a501 1
 * 
a502 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_present_notify_msc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          serial
 ** @@param uint64_t          target_msc
 ** @@param uint64_t          divisor
 ** @@param uint64_t          remainder
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
a518 10

/*****************************************************************************
 **
 ** void xcb_present_event_next
 ** 
 ** @@param xcb_present_event_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a530 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_present_event_end
 ** 
 ** @@param xcb_present_event_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d540 1
a540 1
 * 
a544 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_present_select_input_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_present_event_t  eid
 ** @@param xcb_window_t         window
 ** @@param uint32_t             event_mask
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d557 1
a557 1
 * 
a558 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_present_select_input
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_present_event_t  eid
 ** @@param xcb_window_t         window
 ** @@param uint32_t             event_mask
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d571 1
a571 1
 * 
a572 11

/*****************************************************************************
 **
 ** xcb_present_query_capabilities_cookie_t xcb_present_query_capabilities
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          target
 ** @@returns xcb_present_query_capabilities_cookie_t
 **
 *****************************************************************************/
 
d583 1
a583 1
 * 
a587 11

/*****************************************************************************
 **
 ** xcb_present_query_capabilities_cookie_t xcb_present_query_capabilities_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          target
 ** @@returns xcb_present_query_capabilities_cookie_t
 **
 *****************************************************************************/
 
d599 1
a599 1
 * 
a605 12

/*****************************************************************************
 **
 ** xcb_present_query_capabilities_reply_t * xcb_present_query_capabilities_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_present_query_capabilities_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_present_query_capabilities_reply_t *
 **
 *****************************************************************************/
 
@

