head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	mKDGsTNpiR2zRHYQ;

1.4
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	01TEvO4uNHLqFv7N;

1.3
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.22.20.31.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.10.09;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.10.09;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xprint.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "xprint.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"

xcb_extension_t xcb_x_print_id = { "XpExtension", 0 };

void
xcb_x_print_string8_next (xcb_x_print_string8_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_x_print_string8_t);
}

xcb_generic_iterator_t
xcb_x_print_string8_end (xcb_x_print_string8_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_x_print_printer_serialize (void                        **_buffer,
                               const xcb_x_print_printer_t  *_aux,
                               const xcb_x_print_string8_t  *name,
                               const xcb_x_print_string8_t  *description)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[7];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    /* xcb_x_print_printer_t.nameLen */
    xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->nameLen;
    xcb_block_len += sizeof(uint32_t);
    xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
    xcb_parts_idx++;
    xcb_align_to = ALIGNOF(uint32_t);
    /* name */
    xcb_parts[xcb_parts_idx].iov_base = (char *) name;
    xcb_block_len += _aux->nameLen * sizeof(xcb_x_print_string8_t);
    xcb_parts[xcb_parts_idx].iov_len = _aux->nameLen * sizeof(xcb_x_print_string8_t);
    xcb_parts_idx++;
    xcb_align_to = ALIGNOF(xcb_x_print_string8_t);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    xcb_block_len = 0;
    /* xcb_x_print_printer_t.descLen */
    xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->descLen;
    xcb_block_len += sizeof(uint32_t);
    xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
    xcb_parts_idx++;
    xcb_align_to = ALIGNOF(uint32_t);
    /* description */
    xcb_parts[xcb_parts_idx].iov_base = (char *) description;
    xcb_block_len += _aux->descLen * sizeof(xcb_x_print_string8_t);
    xcb_parts[xcb_parts_idx].iov_len = _aux->descLen * sizeof(xcb_x_print_string8_t);
    xcb_parts_idx++;
    xcb_align_to = ALIGNOF(xcb_x_print_string8_t);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_x_print_printer_unserialize (const void              *_buffer,
                                 xcb_x_print_printer_t  **_aux)
{
    char *xcb_tmp = (char *)_buffer;
    xcb_x_print_printer_t xcb_out;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    xcb_x_print_string8_t *name;
    int name_len;
    xcb_x_print_string8_t *description;
    int description_len;

    /* xcb_x_print_printer_t.nameLen */
    xcb_out.nameLen = *(uint32_t *)xcb_tmp;
    xcb_block_len += sizeof(uint32_t);
    xcb_tmp += sizeof(uint32_t);
    xcb_align_to = ALIGNOF(uint32_t);
    /* name */
    name = (xcb_x_print_string8_t *)xcb_tmp;
    name_len = xcb_out.nameLen * sizeof(xcb_x_print_string8_t);
    xcb_block_len += name_len;
    xcb_tmp += name_len;
    xcb_align_to = ALIGNOF(xcb_x_print_string8_t);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    xcb_block_len = 0;
    /* xcb_x_print_printer_t.descLen */
    xcb_out.descLen = *(uint32_t *)xcb_tmp;
    xcb_block_len += sizeof(uint32_t);
    xcb_tmp += sizeof(uint32_t);
    xcb_align_to = ALIGNOF(uint32_t);
    /* description */
    description = (xcb_x_print_string8_t *)xcb_tmp;
    description_len = xcb_out.descLen * sizeof(xcb_x_print_string8_t);
    xcb_block_len += description_len;
    xcb_tmp += description_len;
    xcb_align_to = ALIGNOF(xcb_x_print_string8_t);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    if (NULL == _aux)
        return xcb_buffer_len;

    if (NULL == *_aux) {
        /* allocate memory */
        *_aux = malloc(xcb_buffer_len);
    }

    xcb_tmp = ((char *)*_aux)+xcb_buffer_len;
    xcb_tmp -= description_len;
    memmove(xcb_tmp, description, description_len);
    xcb_tmp -= name_len;
    memmove(xcb_tmp, name, name_len);
    **_aux = xcb_out;

    return xcb_buffer_len;
}

int
xcb_x_print_printer_sizeof (const void  *_buffer)
{
    return xcb_x_print_printer_unserialize(_buffer, NULL);
}

xcb_x_print_string8_t *
xcb_x_print_printer_name (const xcb_x_print_printer_t *R)
{
    return (xcb_x_print_string8_t *) (R + 1);
}

int
xcb_x_print_printer_name_length (const xcb_x_print_printer_t *R)
{
    return R->nameLen;
}

xcb_generic_iterator_t
xcb_x_print_printer_name_end (const xcb_x_print_printer_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_x_print_string8_t *) (R + 1)) + (R->nameLen);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_x_print_string8_t *
xcb_x_print_printer_description (const xcb_x_print_printer_t *R)
{
    xcb_generic_iterator_t prev = xcb_x_print_printer_name_end(R);
    return (xcb_x_print_string8_t *) ((char *) prev.data + ((-prev.index) & (4 - 1)) + 4);
}

int
xcb_x_print_printer_description_length (const xcb_x_print_printer_t *R)
{
    return R->descLen;
}

xcb_generic_iterator_t
xcb_x_print_printer_description_end (const xcb_x_print_printer_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_x_print_printer_name_end(R);
    i.data = ((xcb_x_print_string8_t *) ((char*) prev.data + ((-prev.index) & (4 - 1)))) + (R->descLen);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_x_print_printer_next (xcb_x_print_printer_iterator_t *i)
{
    xcb_x_print_printer_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_x_print_printer_t *)(((char *)R) + xcb_x_print_printer_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_x_print_printer_t *) child.data;
}

xcb_generic_iterator_t
xcb_x_print_printer_end (xcb_x_print_printer_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_x_print_printer_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_x_print_pcontext_next (xcb_x_print_pcontext_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_x_print_pcontext_t);
}

xcb_generic_iterator_t
xcb_x_print_pcontext_end (xcb_x_print_pcontext_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_x_print_print_query_version_cookie_t
xcb_x_print_print_query_version (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_query_version_cookie_t xcb_ret;
    xcb_x_print_print_query_version_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_query_version_cookie_t
xcb_x_print_print_query_version_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_query_version_cookie_t xcb_ret;
    xcb_x_print_print_query_version_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_query_version_reply_t *
xcb_x_print_print_query_version_reply (xcb_connection_t                          *c,
                                       xcb_x_print_print_query_version_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e)
{
    return (xcb_x_print_print_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_x_print_print_get_printer_list_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_x_print_print_get_printer_list_request_t *_aux = (xcb_x_print_print_get_printer_list_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_x_print_print_get_printer_list_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* printer_name */
    xcb_block_len += _aux->printerNameLen * sizeof(xcb_x_print_string8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_x_print_string8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* locale */
    xcb_block_len += _aux->localeLen * sizeof(xcb_x_print_string8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_x_print_string8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_x_print_print_get_printer_list_cookie_t
xcb_x_print_print_get_printer_list (xcb_connection_t            *c,
                                    uint32_t                     printerNameLen,
                                    uint32_t                     localeLen,
                                    const xcb_x_print_string8_t *printer_name,
                                    const xcb_x_print_string8_t *locale)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_PRINTER_LIST,
        .isvoid = 0
    };

    struct iovec xcb_parts[8];
    xcb_x_print_print_get_printer_list_cookie_t xcb_ret;
    xcb_x_print_print_get_printer_list_request_t xcb_out;

    xcb_out.printerNameLen = printerNameLen;
    xcb_out.localeLen = localeLen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_x_print_string8_t printer_name */
    xcb_parts[4].iov_base = (char *) printer_name;
    xcb_parts[4].iov_len = printerNameLen * sizeof(xcb_x_print_string8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_x_print_string8_t locale */
    xcb_parts[6].iov_base = (char *) locale;
    xcb_parts[6].iov_len = localeLen * sizeof(xcb_x_print_string8_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_get_printer_list_cookie_t
xcb_x_print_print_get_printer_list_unchecked (xcb_connection_t            *c,
                                              uint32_t                     printerNameLen,
                                              uint32_t                     localeLen,
                                              const xcb_x_print_string8_t *printer_name,
                                              const xcb_x_print_string8_t *locale)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_PRINTER_LIST,
        .isvoid = 0
    };

    struct iovec xcb_parts[8];
    xcb_x_print_print_get_printer_list_cookie_t xcb_ret;
    xcb_x_print_print_get_printer_list_request_t xcb_out;

    xcb_out.printerNameLen = printerNameLen;
    xcb_out.localeLen = localeLen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_x_print_string8_t printer_name */
    xcb_parts[4].iov_base = (char *) printer_name;
    xcb_parts[4].iov_len = printerNameLen * sizeof(xcb_x_print_string8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_x_print_string8_t locale */
    xcb_parts[6].iov_base = (char *) locale;
    xcb_parts[6].iov_len = localeLen * sizeof(xcb_x_print_string8_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_x_print_print_get_printer_list_printers_length (const xcb_x_print_print_get_printer_list_reply_t *R)
{
    return R->listCount;
}

xcb_x_print_printer_iterator_t
xcb_x_print_print_get_printer_list_printers_iterator (const xcb_x_print_print_get_printer_list_reply_t *R)
{
    xcb_x_print_printer_iterator_t i;
    i.data = (xcb_x_print_printer_t *) (R + 1);
    i.rem = R->listCount;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_x_print_print_get_printer_list_reply_t *
xcb_x_print_print_get_printer_list_reply (xcb_connection_t                             *c,
                                          xcb_x_print_print_get_printer_list_cookie_t   cookie  /**< */,
                                          xcb_generic_error_t                         **e)
{
    xcb_x_print_print_get_printer_list_reply_t *reply = (xcb_x_print_print_get_printer_list_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
    int i;
    xcb_x_print_printer_iterator_t printers_iter = xcb_x_print_print_get_printer_list_printers_iterator(reply);
    int printers_len = xcb_x_print_print_get_printer_list_printers_length(reply);
    xcb_x_print_printer_t *printers_data;
    /* special cases: transform parts of the reply to match XCB data structures */
    for(i=0; i<printers_len; i++) {
        printers_data = printers_iter.data;
        xcb_x_print_printer_unserialize((const void *)printers_data, &printers_data);
        xcb_x_print_printer_next(&printers_iter);
    }
    return reply;
}

xcb_void_cookie_t
xcb_x_print_print_rehash_printer_list_checked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_REHASH_PRINTER_LIST,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_rehash_printer_list_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_rehash_printer_list (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_REHASH_PRINTER_LIST,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_rehash_printer_list_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_x_print_create_context_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_x_print_create_context_request_t *_aux = (xcb_x_print_create_context_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_x_print_create_context_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* printerName */
    xcb_block_len += _aux->printerNameLen * sizeof(xcb_x_print_string8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_x_print_string8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* locale */
    xcb_block_len += _aux->localeLen * sizeof(xcb_x_print_string8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_x_print_string8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_x_print_create_context_checked (xcb_connection_t            *c,
                                    uint32_t                     context_id,
                                    uint32_t                     printerNameLen,
                                    uint32_t                     localeLen,
                                    const xcb_x_print_string8_t *printerName,
                                    const xcb_x_print_string8_t *locale)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_CREATE_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_create_context_request_t xcb_out;

    xcb_out.context_id = context_id;
    xcb_out.printerNameLen = printerNameLen;
    xcb_out.localeLen = localeLen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_x_print_string8_t printerName */
    xcb_parts[4].iov_base = (char *) printerName;
    xcb_parts[4].iov_len = printerNameLen * sizeof(xcb_x_print_string8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_x_print_string8_t locale */
    xcb_parts[6].iov_base = (char *) locale;
    xcb_parts[6].iov_len = localeLen * sizeof(xcb_x_print_string8_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_create_context (xcb_connection_t            *c,
                            uint32_t                     context_id,
                            uint32_t                     printerNameLen,
                            uint32_t                     localeLen,
                            const xcb_x_print_string8_t *printerName,
                            const xcb_x_print_string8_t *locale)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_CREATE_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_create_context_request_t xcb_out;

    xcb_out.context_id = context_id;
    xcb_out.printerNameLen = printerNameLen;
    xcb_out.localeLen = localeLen;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_x_print_string8_t printerName */
    xcb_parts[4].iov_base = (char *) printerName;
    xcb_parts[4].iov_len = printerNameLen * sizeof(xcb_x_print_string8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_x_print_string8_t locale */
    xcb_parts[6].iov_base = (char *) locale;
    xcb_parts[6].iov_len = localeLen * sizeof(xcb_x_print_string8_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_string8_t *
xcb_x_print_create_context_printer_name (const xcb_x_print_create_context_request_t *R)
{
    return (xcb_x_print_string8_t *) (R + 1);
}

int
xcb_x_print_create_context_printer_name_length (const xcb_x_print_create_context_request_t *R)
{
    return R->printerNameLen;
}

xcb_generic_iterator_t
xcb_x_print_create_context_printer_name_end (const xcb_x_print_create_context_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_x_print_string8_t *) (R + 1)) + (R->printerNameLen);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_x_print_string8_t *
xcb_x_print_create_context_locale (const xcb_x_print_create_context_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_x_print_create_context_printer_name_end(R);
    return (xcb_x_print_string8_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_x_print_string8_t, prev.index) + 0);
}

int
xcb_x_print_create_context_locale_length (const xcb_x_print_create_context_request_t *R)
{
    return R->localeLen;
}

xcb_generic_iterator_t
xcb_x_print_create_context_locale_end (const xcb_x_print_create_context_request_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_x_print_create_context_printer_name_end(R);
    i.data = ((xcb_x_print_string8_t *) ((char*) prev.data + XCB_TYPE_PAD(xcb_x_print_string8_t, prev.index))) + (R->localeLen);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_x_print_print_set_context_checked (xcb_connection_t *c,
                                       uint32_t          context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_SET_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_set_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_set_context (xcb_connection_t *c,
                               uint32_t          context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_SET_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_set_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_get_context_cookie_t
xcb_x_print_print_get_context (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_CONTEXT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_get_context_cookie_t xcb_ret;
    xcb_x_print_print_get_context_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_get_context_cookie_t
xcb_x_print_print_get_context_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_CONTEXT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_get_context_cookie_t xcb_ret;
    xcb_x_print_print_get_context_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_get_context_reply_t *
xcb_x_print_print_get_context_reply (xcb_connection_t                        *c,
                                     xcb_x_print_print_get_context_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e)
{
    return (xcb_x_print_print_get_context_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_x_print_print_destroy_context_checked (xcb_connection_t *c,
                                           uint32_t          context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_DESTROY_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_destroy_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_destroy_context (xcb_connection_t *c,
                                   uint32_t          context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_DESTROY_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_destroy_context_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_get_screen_of_context_cookie_t
xcb_x_print_print_get_screen_of_context (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_SCREEN_OF_CONTEXT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_get_screen_of_context_cookie_t xcb_ret;
    xcb_x_print_print_get_screen_of_context_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_get_screen_of_context_cookie_t
xcb_x_print_print_get_screen_of_context_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_SCREEN_OF_CONTEXT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_get_screen_of_context_cookie_t xcb_ret;
    xcb_x_print_print_get_screen_of_context_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_get_screen_of_context_reply_t *
xcb_x_print_print_get_screen_of_context_reply (xcb_connection_t                                  *c,
                                               xcb_x_print_print_get_screen_of_context_cookie_t   cookie  /**< */,
                                               xcb_generic_error_t                              **e)
{
    return (xcb_x_print_print_get_screen_of_context_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_x_print_print_start_job_checked (xcb_connection_t *c,
                                     uint8_t           output_mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_START_JOB,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_start_job_request_t xcb_out;

    xcb_out.output_mode = output_mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_start_job (xcb_connection_t *c,
                             uint8_t           output_mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_START_JOB,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_start_job_request_t xcb_out;

    xcb_out.output_mode = output_mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_end_job_checked (xcb_connection_t *c,
                                   uint8_t           cancel)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_END_JOB,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_end_job_request_t xcb_out;

    xcb_out.cancel = cancel;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_end_job (xcb_connection_t *c,
                           uint8_t           cancel)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_END_JOB,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_end_job_request_t xcb_out;

    xcb_out.cancel = cancel;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_start_doc_checked (xcb_connection_t *c,
                                     uint8_t           driver_mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_START_DOC,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_start_doc_request_t xcb_out;

    xcb_out.driver_mode = driver_mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_start_doc (xcb_connection_t *c,
                             uint8_t           driver_mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_START_DOC,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_start_doc_request_t xcb_out;

    xcb_out.driver_mode = driver_mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_end_doc_checked (xcb_connection_t *c,
                                   uint8_t           cancel)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_END_DOC,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_end_doc_request_t xcb_out;

    xcb_out.cancel = cancel;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_end_doc (xcb_connection_t *c,
                           uint8_t           cancel)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_END_DOC,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_end_doc_request_t xcb_out;

    xcb_out.cancel = cancel;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_x_print_print_put_document_data_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_x_print_print_put_document_data_request_t *_aux = (xcb_x_print_print_put_document_data_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_x_print_print_put_document_data_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->len_data * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* doc_format */
    xcb_block_len += _aux->len_fmt * sizeof(xcb_x_print_string8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_x_print_string8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* options */
    xcb_block_len += _aux->len_options * sizeof(xcb_x_print_string8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_x_print_string8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_x_print_print_put_document_data_checked (xcb_connection_t            *c,
                                             xcb_drawable_t               drawable,
                                             uint32_t                     len_data,
                                             uint16_t                     len_fmt,
                                             uint16_t                     len_options,
                                             const uint8_t               *data,
                                             const xcb_x_print_string8_t *doc_format,
                                             const xcb_x_print_string8_t *options)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 8,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_PUT_DOCUMENT_DATA,
        .isvoid = 1
    };

    struct iovec xcb_parts[10];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_put_document_data_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.len_data = len_data;
    xcb_out.len_fmt = len_fmt;
    xcb_out.len_options = len_options;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = len_data * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_x_print_string8_t doc_format */
    xcb_parts[6].iov_base = (char *) doc_format;
    xcb_parts[6].iov_len = len_fmt * sizeof(xcb_x_print_string8_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;
    /* xcb_x_print_string8_t options */
    xcb_parts[8].iov_base = (char *) options;
    xcb_parts[8].iov_len = len_options * sizeof(xcb_x_print_string8_t);
    xcb_parts[9].iov_base = 0;
    xcb_parts[9].iov_len = -xcb_parts[8].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_put_document_data (xcb_connection_t            *c,
                                     xcb_drawable_t               drawable,
                                     uint32_t                     len_data,
                                     uint16_t                     len_fmt,
                                     uint16_t                     len_options,
                                     const uint8_t               *data,
                                     const xcb_x_print_string8_t *doc_format,
                                     const xcb_x_print_string8_t *options)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 8,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_PUT_DOCUMENT_DATA,
        .isvoid = 1
    };

    struct iovec xcb_parts[10];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_put_document_data_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.len_data = len_data;
    xcb_out.len_fmt = len_fmt;
    xcb_out.len_options = len_options;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint8_t data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = len_data * sizeof(uint8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_x_print_string8_t doc_format */
    xcb_parts[6].iov_base = (char *) doc_format;
    xcb_parts[6].iov_len = len_fmt * sizeof(xcb_x_print_string8_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;
    /* xcb_x_print_string8_t options */
    xcb_parts[8].iov_base = (char *) options;
    xcb_parts[8].iov_len = len_options * sizeof(xcb_x_print_string8_t);
    xcb_parts[9].iov_base = 0;
    xcb_parts[9].iov_len = -xcb_parts[8].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_x_print_print_put_document_data_data (const xcb_x_print_print_put_document_data_request_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_x_print_print_put_document_data_data_length (const xcb_x_print_print_put_document_data_request_t *R)
{
    return R->len_data;
}

xcb_generic_iterator_t
xcb_x_print_print_put_document_data_data_end (const xcb_x_print_print_put_document_data_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + (R->len_data);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_x_print_string8_t *
xcb_x_print_print_put_document_data_doc_format (const xcb_x_print_print_put_document_data_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_x_print_print_put_document_data_data_end(R);
    return (xcb_x_print_string8_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_x_print_string8_t, prev.index) + 0);
}

int
xcb_x_print_print_put_document_data_doc_format_length (const xcb_x_print_print_put_document_data_request_t *R)
{
    return R->len_fmt;
}

xcb_generic_iterator_t
xcb_x_print_print_put_document_data_doc_format_end (const xcb_x_print_print_put_document_data_request_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_x_print_print_put_document_data_data_end(R);
    i.data = ((xcb_x_print_string8_t *) ((char*) prev.data + XCB_TYPE_PAD(xcb_x_print_string8_t, prev.index))) + (R->len_fmt);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_x_print_string8_t *
xcb_x_print_print_put_document_data_options (const xcb_x_print_print_put_document_data_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_x_print_print_put_document_data_doc_format_end(R);
    return (xcb_x_print_string8_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_x_print_string8_t, prev.index) + 0);
}

int
xcb_x_print_print_put_document_data_options_length (const xcb_x_print_print_put_document_data_request_t *R)
{
    return R->len_options;
}

xcb_generic_iterator_t
xcb_x_print_print_put_document_data_options_end (const xcb_x_print_print_put_document_data_request_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_x_print_print_put_document_data_doc_format_end(R);
    i.data = ((xcb_x_print_string8_t *) ((char*) prev.data + XCB_TYPE_PAD(xcb_x_print_string8_t, prev.index))) + (R->len_options);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_x_print_print_get_document_data_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_x_print_print_get_document_data_reply_t *_aux = (xcb_x_print_print_get_document_data_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_x_print_print_get_document_data_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += _aux->dataLen * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_x_print_print_get_document_data_cookie_t
xcb_x_print_print_get_document_data (xcb_connection_t       *c,
                                     xcb_x_print_pcontext_t  context,
                                     uint32_t                max_bytes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_DOCUMENT_DATA,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_get_document_data_cookie_t xcb_ret;
    xcb_x_print_print_get_document_data_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.max_bytes = max_bytes;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_get_document_data_cookie_t
xcb_x_print_print_get_document_data_unchecked (xcb_connection_t       *c,
                                               xcb_x_print_pcontext_t  context,
                                               uint32_t                max_bytes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_DOCUMENT_DATA,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_get_document_data_cookie_t xcb_ret;
    xcb_x_print_print_get_document_data_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.max_bytes = max_bytes;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_x_print_print_get_document_data_data (const xcb_x_print_print_get_document_data_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_x_print_print_get_document_data_data_length (const xcb_x_print_print_get_document_data_reply_t *R)
{
    return R->dataLen;
}

xcb_generic_iterator_t
xcb_x_print_print_get_document_data_data_end (const xcb_x_print_print_get_document_data_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + (R->dataLen);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_x_print_print_get_document_data_reply_t *
xcb_x_print_print_get_document_data_reply (xcb_connection_t                              *c,
                                           xcb_x_print_print_get_document_data_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e)
{
    return (xcb_x_print_print_get_document_data_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_x_print_print_start_page_checked (xcb_connection_t *c,
                                      xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_START_PAGE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_start_page_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_start_page (xcb_connection_t *c,
                              xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_START_PAGE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_start_page_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_end_page_checked (xcb_connection_t *c,
                                    uint8_t           cancel)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_END_PAGE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_end_page_request_t xcb_out;

    xcb_out.cancel = cancel;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_end_page (xcb_connection_t *c,
                            uint8_t           cancel)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_END_PAGE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_end_page_request_t xcb_out;

    xcb_out.cancel = cancel;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_select_input_checked (xcb_connection_t       *c,
                                        xcb_x_print_pcontext_t  context,
                                        uint32_t                event_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_SELECT_INPUT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_select_input_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.event_mask = event_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_select_input (xcb_connection_t       *c,
                                xcb_x_print_pcontext_t  context,
                                uint32_t                event_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_SELECT_INPUT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_select_input_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.event_mask = event_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_input_selected_cookie_t
xcb_x_print_print_input_selected (xcb_connection_t       *c,
                                  xcb_x_print_pcontext_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_INPUT_SELECTED,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_input_selected_cookie_t xcb_ret;
    xcb_x_print_print_input_selected_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_input_selected_cookie_t
xcb_x_print_print_input_selected_unchecked (xcb_connection_t       *c,
                                            xcb_x_print_pcontext_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_INPUT_SELECTED,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_input_selected_cookie_t xcb_ret;
    xcb_x_print_print_input_selected_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_input_selected_reply_t *
xcb_x_print_print_input_selected_reply (xcb_connection_t                           *c,
                                        xcb_x_print_print_input_selected_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e)
{
    return (xcb_x_print_print_input_selected_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_x_print_print_get_attributes_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_x_print_print_get_attributes_reply_t *_aux = (xcb_x_print_print_get_attributes_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_x_print_print_get_attributes_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* attributes */
    xcb_block_len += _aux->stringLen * sizeof(xcb_x_print_string8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_x_print_string8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_x_print_print_get_attributes_cookie_t
xcb_x_print_print_get_attributes (xcb_connection_t       *c,
                                  xcb_x_print_pcontext_t  context,
                                  uint8_t                 pool)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_ATTRIBUTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_get_attributes_cookie_t xcb_ret;
    xcb_x_print_print_get_attributes_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.pool = pool;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_get_attributes_cookie_t
xcb_x_print_print_get_attributes_unchecked (xcb_connection_t       *c,
                                            xcb_x_print_pcontext_t  context,
                                            uint8_t                 pool)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_ATTRIBUTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_get_attributes_cookie_t xcb_ret;
    xcb_x_print_print_get_attributes_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.pool = pool;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_string8_t *
xcb_x_print_print_get_attributes_attributes (const xcb_x_print_print_get_attributes_reply_t *R)
{
    return (xcb_x_print_string8_t *) (R + 1);
}

int
xcb_x_print_print_get_attributes_attributes_length (const xcb_x_print_print_get_attributes_reply_t *R)
{
    return R->stringLen;
}

xcb_generic_iterator_t
xcb_x_print_print_get_attributes_attributes_end (const xcb_x_print_print_get_attributes_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_x_print_string8_t *) (R + 1)) + (R->stringLen);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_x_print_print_get_attributes_reply_t *
xcb_x_print_print_get_attributes_reply (xcb_connection_t                           *c,
                                        xcb_x_print_print_get_attributes_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e)
{
    return (xcb_x_print_print_get_attributes_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_x_print_print_get_one_attributes_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_x_print_print_get_one_attributes_request_t *_aux = (xcb_x_print_print_get_one_attributes_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_x_print_print_get_one_attributes_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->nameLen * sizeof(xcb_x_print_string8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_x_print_string8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_x_print_print_get_one_attributes_cookie_t
xcb_x_print_print_get_one_attributes (xcb_connection_t            *c,
                                      xcb_x_print_pcontext_t       context,
                                      uint32_t                     nameLen,
                                      uint8_t                      pool,
                                      const xcb_x_print_string8_t *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_ONE_ATTRIBUTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_x_print_print_get_one_attributes_cookie_t xcb_ret;
    xcb_x_print_print_get_one_attributes_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.nameLen = nameLen;
    xcb_out.pool = pool;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_x_print_string8_t name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = nameLen * sizeof(xcb_x_print_string8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_get_one_attributes_cookie_t
xcb_x_print_print_get_one_attributes_unchecked (xcb_connection_t            *c,
                                                xcb_x_print_pcontext_t       context,
                                                uint32_t                     nameLen,
                                                uint8_t                      pool,
                                                const xcb_x_print_string8_t *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_ONE_ATTRIBUTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_x_print_print_get_one_attributes_cookie_t xcb_ret;
    xcb_x_print_print_get_one_attributes_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.nameLen = nameLen;
    xcb_out.pool = pool;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_x_print_string8_t name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = nameLen * sizeof(xcb_x_print_string8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_string8_t *
xcb_x_print_print_get_one_attributes_value (const xcb_x_print_print_get_one_attributes_reply_t *R)
{
    return (xcb_x_print_string8_t *) (R + 1);
}

int
xcb_x_print_print_get_one_attributes_value_length (const xcb_x_print_print_get_one_attributes_reply_t *R)
{
    return R->valueLen;
}

xcb_generic_iterator_t
xcb_x_print_print_get_one_attributes_value_end (const xcb_x_print_print_get_one_attributes_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_x_print_string8_t *) (R + 1)) + (R->valueLen);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_x_print_print_get_one_attributes_reply_t *
xcb_x_print_print_get_one_attributes_reply (xcb_connection_t                               *c,
                                            xcb_x_print_print_get_one_attributes_cookie_t   cookie  /**< */,
                                            xcb_generic_error_t                           **e)
{
    return (xcb_x_print_print_get_one_attributes_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_x_print_print_set_attributes_sizeof (const void  *_buffer,
                                         uint32_t     attributes_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_x_print_print_set_attributes_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* attributes */
    xcb_block_len += attributes_len * sizeof(xcb_x_print_string8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_x_print_string8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_x_print_print_set_attributes_checked (xcb_connection_t            *c,
                                          xcb_x_print_pcontext_t       context,
                                          uint32_t                     stringLen,
                                          uint8_t                      pool,
                                          uint8_t                      rule,
                                          uint32_t                     attributes_len,
                                          const xcb_x_print_string8_t *attributes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_SET_ATTRIBUTES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_set_attributes_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.stringLen = stringLen;
    xcb_out.pool = pool;
    xcb_out.rule = rule;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_x_print_string8_t attributes */
    xcb_parts[4].iov_base = (char *) attributes;
    xcb_parts[4].iov_len = attributes_len * sizeof(xcb_x_print_string8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_x_print_print_set_attributes (xcb_connection_t            *c,
                                  xcb_x_print_pcontext_t       context,
                                  uint32_t                     stringLen,
                                  uint8_t                      pool,
                                  uint8_t                      rule,
                                  uint32_t                     attributes_len,
                                  const xcb_x_print_string8_t *attributes)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_SET_ATTRIBUTES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_x_print_print_set_attributes_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.stringLen = stringLen;
    xcb_out.pool = pool;
    xcb_out.rule = rule;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_x_print_string8_t attributes */
    xcb_parts[4].iov_base = (char *) attributes;
    xcb_parts[4].iov_len = attributes_len * sizeof(xcb_x_print_string8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_string8_t *
xcb_x_print_print_set_attributes_attributes (const xcb_x_print_print_set_attributes_request_t *R)
{
    return (xcb_x_print_string8_t *) (R + 1);
}

int
xcb_x_print_print_set_attributes_attributes_length (const xcb_x_print_print_set_attributes_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_x_print_print_set_attributes_request_t))/sizeof(xcb_x_print_string8_t));
}

xcb_generic_iterator_t
xcb_x_print_print_set_attributes_attributes_end (const xcb_x_print_print_set_attributes_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_x_print_string8_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_x_print_print_set_attributes_request_t))/sizeof(xcb_x_print_string8_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_x_print_print_get_page_dimensions_cookie_t
xcb_x_print_print_get_page_dimensions (xcb_connection_t       *c,
                                       xcb_x_print_pcontext_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_PAGE_DIMENSIONS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_get_page_dimensions_cookie_t xcb_ret;
    xcb_x_print_print_get_page_dimensions_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_get_page_dimensions_cookie_t
xcb_x_print_print_get_page_dimensions_unchecked (xcb_connection_t       *c,
                                                 xcb_x_print_pcontext_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_PAGE_DIMENSIONS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_get_page_dimensions_cookie_t xcb_ret;
    xcb_x_print_print_get_page_dimensions_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_get_page_dimensions_reply_t *
xcb_x_print_print_get_page_dimensions_reply (xcb_connection_t                                *c,
                                             xcb_x_print_print_get_page_dimensions_cookie_t   cookie  /**< */,
                                             xcb_generic_error_t                            **e)
{
    return (xcb_x_print_print_get_page_dimensions_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_x_print_print_query_screens_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_x_print_print_query_screens_reply_t *_aux = (xcb_x_print_print_query_screens_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_x_print_print_query_screens_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* roots */
    xcb_block_len += _aux->listCount * sizeof(xcb_window_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_window_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_x_print_print_query_screens_cookie_t
xcb_x_print_print_query_screens (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_QUERY_SCREENS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_query_screens_cookie_t xcb_ret;
    xcb_x_print_print_query_screens_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_query_screens_cookie_t
xcb_x_print_print_query_screens_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_QUERY_SCREENS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_query_screens_cookie_t xcb_ret;
    xcb_x_print_print_query_screens_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_window_t *
xcb_x_print_print_query_screens_roots (const xcb_x_print_print_query_screens_reply_t *R)
{
    return (xcb_window_t *) (R + 1);
}

int
xcb_x_print_print_query_screens_roots_length (const xcb_x_print_print_query_screens_reply_t *R)
{
    return R->listCount;
}

xcb_generic_iterator_t
xcb_x_print_print_query_screens_roots_end (const xcb_x_print_print_query_screens_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_window_t *) (R + 1)) + (R->listCount);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_x_print_print_query_screens_reply_t *
xcb_x_print_print_query_screens_reply (xcb_connection_t                          *c,
                                       xcb_x_print_print_query_screens_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e)
{
    return (xcb_x_print_print_query_screens_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_x_print_print_set_image_resolution_cookie_t
xcb_x_print_print_set_image_resolution (xcb_connection_t       *c,
                                        xcb_x_print_pcontext_t  context,
                                        uint16_t                image_resolution)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_SET_IMAGE_RESOLUTION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_set_image_resolution_cookie_t xcb_ret;
    xcb_x_print_print_set_image_resolution_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.image_resolution = image_resolution;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_set_image_resolution_cookie_t
xcb_x_print_print_set_image_resolution_unchecked (xcb_connection_t       *c,
                                                  xcb_x_print_pcontext_t  context,
                                                  uint16_t                image_resolution)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_SET_IMAGE_RESOLUTION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_set_image_resolution_cookie_t xcb_ret;
    xcb_x_print_print_set_image_resolution_request_t xcb_out;

    xcb_out.context = context;
    xcb_out.image_resolution = image_resolution;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_set_image_resolution_reply_t *
xcb_x_print_print_set_image_resolution_reply (xcb_connection_t                                 *c,
                                              xcb_x_print_print_set_image_resolution_cookie_t   cookie  /**< */,
                                              xcb_generic_error_t                             **e)
{
    return (xcb_x_print_print_set_image_resolution_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_x_print_print_get_image_resolution_cookie_t
xcb_x_print_print_get_image_resolution (xcb_connection_t       *c,
                                        xcb_x_print_pcontext_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_IMAGE_RESOLUTION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_get_image_resolution_cookie_t xcb_ret;
    xcb_x_print_print_get_image_resolution_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_get_image_resolution_cookie_t
xcb_x_print_print_get_image_resolution_unchecked (xcb_connection_t       *c,
                                                  xcb_x_print_pcontext_t  context)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_x_print_id,
        .opcode = XCB_X_PRINT_PRINT_GET_IMAGE_RESOLUTION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_x_print_print_get_image_resolution_cookie_t xcb_ret;
    xcb_x_print_print_get_image_resolution_request_t xcb_out;

    xcb_out.context = context;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_x_print_print_get_image_resolution_reply_t *
xcb_x_print_print_get_image_resolution_reply (xcb_connection_t                                 *c,
                                              xcb_x_print_print_get_image_resolution_cookie_t   cookie  /**< */,
                                              xcb_generic_error_t                             **e)
{
    return (xcb_x_print_print_get_image_resolution_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

@


1.4
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d22 1
a22 1
xcb_x_print_string8_next (xcb_x_print_string8_iterator_t *i  /**< */)
d30 1
a30 1
xcb_x_print_string8_end (xcb_x_print_string8_iterator_t i  /**< */)
d40 4
a43 4
xcb_x_print_printer_serialize (void                        **_buffer  /**< */,
                               const xcb_x_print_printer_t  *_aux  /**< */,
                               const xcb_x_print_string8_t  *name  /**< */,
                               const xcb_x_print_string8_t  *description  /**< */)
d51 1
a51 1
    struct iovec xcb_parts[5];
d69 5
d86 5
d120 2
a121 2
xcb_x_print_printer_unserialize (const void              *_buffer  /**< */,
                                 xcb_x_print_printer_t  **_aux  /**< */)
d146 5
d162 5
d195 1
a195 1
xcb_x_print_printer_sizeof (const void  *_buffer  /**< */)
d201 1
a201 1
xcb_x_print_printer_name (const xcb_x_print_printer_t *R  /**< */)
d207 1
a207 1
xcb_x_print_printer_name_length (const xcb_x_print_printer_t *R  /**< */)
d213 1
a213 1
xcb_x_print_printer_name_end (const xcb_x_print_printer_t *R  /**< */)
d223 1
a223 1
xcb_x_print_printer_description (const xcb_x_print_printer_t *R  /**< */)
d226 1
a226 1
    return (xcb_x_print_string8_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 4);
d230 1
a230 1
xcb_x_print_printer_description_length (const xcb_x_print_printer_t *R  /**< */)
d236 1
a236 1
xcb_x_print_printer_description_end (const xcb_x_print_printer_t *R  /**< */)
d239 2
a240 2
    xcb_generic_iterator_t child = xcb_x_print_printer_name_end(R);
    i.data = ((xcb_x_print_string8_t *) child.data) + (R->descLen);
d247 1
a247 1
xcb_x_print_printer_next (xcb_x_print_printer_iterator_t *i  /**< */)
d258 1
a258 1
xcb_x_print_printer_end (xcb_x_print_printer_iterator_t i  /**< */)
d270 1
a270 1
xcb_x_print_pcontext_next (xcb_x_print_pcontext_iterator_t *i  /**< */)
d278 1
a278 1
xcb_x_print_pcontext_end (xcb_x_print_pcontext_iterator_t i  /**< */)
d288 1
a288 1
xcb_x_print_print_query_version (xcb_connection_t *c  /**< */)
d291 4
a294 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_QUERY_VERSION,
        /* isvoid */ 0
d312 1
a312 1
xcb_x_print_print_query_version_unchecked (xcb_connection_t *c  /**< */)
d315 4
a318 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_QUERY_VERSION,
        /* isvoid */ 0
d336 1
a336 1
xcb_x_print_print_query_version_reply (xcb_connection_t                          *c  /**< */,
d338 1
a338 1
                                       xcb_generic_error_t                      **e  /**< */)
d344 1
a344 1
xcb_x_print_print_get_printer_list_sizeof (const void  *_buffer  /**< */)
d387 5
a391 5
xcb_x_print_print_get_printer_list (xcb_connection_t            *c  /**< */,
                                    uint32_t                     printerNameLen  /**< */,
                                    uint32_t                     localeLen  /**< */,
                                    const xcb_x_print_string8_t *printer_name  /**< */,
                                    const xcb_x_print_string8_t *locale  /**< */)
d394 4
a397 4
        /* count */ 6,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_PRINTER_LIST,
        /* isvoid */ 0
d427 5
a431 5
xcb_x_print_print_get_printer_list_unchecked (xcb_connection_t            *c  /**< */,
                                              uint32_t                     printerNameLen  /**< */,
                                              uint32_t                     localeLen  /**< */,
                                              const xcb_x_print_string8_t *printer_name  /**< */,
                                              const xcb_x_print_string8_t *locale  /**< */)
d434 4
a437 4
        /* count */ 6,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_PRINTER_LIST,
        /* isvoid */ 0
d467 1
a467 1
xcb_x_print_print_get_printer_list_printers_length (const xcb_x_print_print_get_printer_list_reply_t *R  /**< */)
d473 1
a473 1
xcb_x_print_print_get_printer_list_printers_iterator (const xcb_x_print_print_get_printer_list_reply_t *R  /**< */)
d483 1
a483 1
xcb_x_print_print_get_printer_list_reply (xcb_connection_t                             *c  /**< */,
d485 1
a485 1
                                          xcb_generic_error_t                         **e  /**< */)
d502 1
a502 1
xcb_x_print_print_rehash_printer_list_checked (xcb_connection_t *c  /**< */)
d505 4
a508 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_REHASH_PRINTER_LIST,
        /* isvoid */ 1
d526 1
a526 1
xcb_x_print_print_rehash_printer_list (xcb_connection_t *c  /**< */)
d529 4
a532 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_REHASH_PRINTER_LIST,
        /* isvoid */ 1
d550 1
a550 1
xcb_x_print_create_context_sizeof (const void  *_buffer  /**< */)
d593 6
a598 6
xcb_x_print_create_context_checked (xcb_connection_t            *c  /**< */,
                                    uint32_t                     context_id  /**< */,
                                    uint32_t                     printerNameLen  /**< */,
                                    uint32_t                     localeLen  /**< */,
                                    const xcb_x_print_string8_t *printerName  /**< */,
                                    const xcb_x_print_string8_t *locale  /**< */)
d601 4
a604 4
        /* count */ 6,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_CREATE_CONTEXT,
        /* isvoid */ 1
d635 6
a640 6
xcb_x_print_create_context (xcb_connection_t            *c  /**< */,
                            uint32_t                     context_id  /**< */,
                            uint32_t                     printerNameLen  /**< */,
                            uint32_t                     localeLen  /**< */,
                            const xcb_x_print_string8_t *printerName  /**< */,
                            const xcb_x_print_string8_t *locale  /**< */)
d643 4
a646 4
        /* count */ 6,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_CREATE_CONTEXT,
        /* isvoid */ 1
d676 46
d723 2
a724 2
xcb_x_print_print_set_context_checked (xcb_connection_t *c  /**< */,
                                       uint32_t          context  /**< */)
d727 4
a730 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_SET_CONTEXT,
        /* isvoid */ 1
d749 2
a750 2
xcb_x_print_print_set_context (xcb_connection_t *c  /**< */,
                               uint32_t          context  /**< */)
d753 4
a756 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_SET_CONTEXT,
        /* isvoid */ 1
d775 1
a775 1
xcb_x_print_print_get_context (xcb_connection_t *c  /**< */)
d778 4
a781 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_CONTEXT,
        /* isvoid */ 0
d799 1
a799 1
xcb_x_print_print_get_context_unchecked (xcb_connection_t *c  /**< */)
d802 4
a805 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_CONTEXT,
        /* isvoid */ 0
d823 1
a823 1
xcb_x_print_print_get_context_reply (xcb_connection_t                        *c  /**< */,
d825 1
a825 1
                                     xcb_generic_error_t                    **e  /**< */)
d831 2
a832 2
xcb_x_print_print_destroy_context_checked (xcb_connection_t *c  /**< */,
                                           uint32_t          context  /**< */)
d835 4
a838 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_DESTROY_CONTEXT,
        /* isvoid */ 1
d857 2
a858 2
xcb_x_print_print_destroy_context (xcb_connection_t *c  /**< */,
                                   uint32_t          context  /**< */)
d861 4
a864 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_DESTROY_CONTEXT,
        /* isvoid */ 1
d883 1
a883 1
xcb_x_print_print_get_screen_of_context (xcb_connection_t *c  /**< */)
d886 4
a889 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_SCREEN_OF_CONTEXT,
        /* isvoid */ 0
d907 1
a907 1
xcb_x_print_print_get_screen_of_context_unchecked (xcb_connection_t *c  /**< */)
d910 4
a913 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_SCREEN_OF_CONTEXT,
        /* isvoid */ 0
d931 1
a931 1
xcb_x_print_print_get_screen_of_context_reply (xcb_connection_t                                  *c  /**< */,
d933 1
a933 1
                                               xcb_generic_error_t                              **e  /**< */)
d939 2
a940 2
xcb_x_print_print_start_job_checked (xcb_connection_t *c  /**< */,
                                     uint8_t           output_mode  /**< */)
d943 4
a946 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_START_JOB,
        /* isvoid */ 1
d965 2
a966 2
xcb_x_print_print_start_job (xcb_connection_t *c  /**< */,
                             uint8_t           output_mode  /**< */)
d969 4
a972 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_START_JOB,
        /* isvoid */ 1
d991 2
a992 2
xcb_x_print_print_end_job_checked (xcb_connection_t *c  /**< */,
                                   uint8_t           cancel  /**< */)
d995 4
a998 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_END_JOB,
        /* isvoid */ 1
d1017 2
a1018 2
xcb_x_print_print_end_job (xcb_connection_t *c  /**< */,
                           uint8_t           cancel  /**< */)
d1021 4
a1024 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_END_JOB,
        /* isvoid */ 1
d1043 2
a1044 2
xcb_x_print_print_start_doc_checked (xcb_connection_t *c  /**< */,
                                     uint8_t           driver_mode  /**< */)
d1047 4
a1050 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_START_DOC,
        /* isvoid */ 1
d1069 2
a1070 2
xcb_x_print_print_start_doc (xcb_connection_t *c  /**< */,
                             uint8_t           driver_mode  /**< */)
d1073 4
a1076 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_START_DOC,
        /* isvoid */ 1
d1095 2
a1096 2
xcb_x_print_print_end_doc_checked (xcb_connection_t *c  /**< */,
                                   uint8_t           cancel  /**< */)
d1099 4
a1102 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_END_DOC,
        /* isvoid */ 1
d1121 2
a1122 2
xcb_x_print_print_end_doc (xcb_connection_t *c  /**< */,
                           uint8_t           cancel  /**< */)
d1125 4
a1128 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_END_DOC,
        /* isvoid */ 1
d1147 1
a1147 3
xcb_x_print_print_put_document_data_sizeof (const void  *_buffer  /**< */,
                                            uint32_t     doc_format_len  /**< */,
                                            uint32_t     options_len  /**< */)
d1174 1
a1174 1
    xcb_block_len += doc_format_len * sizeof(xcb_x_print_string8_t);
d1186 1
a1186 1
    xcb_block_len += options_len * sizeof(xcb_x_print_string8_t);
d1202 14
a1215 16
xcb_x_print_print_put_document_data_checked (xcb_connection_t            *c  /**< */,
                                             xcb_drawable_t               drawable  /**< */,
                                             uint32_t                     len_data  /**< */,
                                             uint16_t                     len_fmt  /**< */,
                                             uint16_t                     len_options  /**< */,
                                             const uint8_t               *data  /**< */,
                                             uint32_t                     doc_format_len  /**< */,
                                             const xcb_x_print_string8_t *doc_format  /**< */,
                                             uint32_t                     options_len  /**< */,
                                             const xcb_x_print_string8_t *options  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 8,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_PUT_DOCUMENT_DATA,
        /* isvoid */ 1
d1238 1
a1238 1
    xcb_parts[6].iov_len = doc_format_len * sizeof(xcb_x_print_string8_t);
d1243 1
a1243 1
    xcb_parts[8].iov_len = options_len * sizeof(xcb_x_print_string8_t);
d1252 14
a1265 16
xcb_x_print_print_put_document_data (xcb_connection_t            *c  /**< */,
                                     xcb_drawable_t               drawable  /**< */,
                                     uint32_t                     len_data  /**< */,
                                     uint16_t                     len_fmt  /**< */,
                                     uint16_t                     len_options  /**< */,
                                     const uint8_t               *data  /**< */,
                                     uint32_t                     doc_format_len  /**< */,
                                     const xcb_x_print_string8_t *doc_format  /**< */,
                                     uint32_t                     options_len  /**< */,
                                     const xcb_x_print_string8_t *options  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 8,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_PUT_DOCUMENT_DATA,
        /* isvoid */ 1
d1288 1
a1288 1
    xcb_parts[6].iov_len = doc_format_len * sizeof(xcb_x_print_string8_t);
d1293 1
a1293 1
    xcb_parts[8].iov_len = options_len * sizeof(xcb_x_print_string8_t);
d1301 70
d1372 1
a1372 1
xcb_x_print_print_get_document_data_sizeof (const void  *_buffer  /**< */)
d1403 3
a1405 3
xcb_x_print_print_get_document_data (xcb_connection_t       *c  /**< */,
                                     xcb_x_print_pcontext_t  context  /**< */,
                                     uint32_t                max_bytes  /**< */)
d1408 4
a1411 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_DOCUMENT_DATA,
        /* isvoid */ 0
d1431 3
a1433 3
xcb_x_print_print_get_document_data_unchecked (xcb_connection_t       *c  /**< */,
                                               xcb_x_print_pcontext_t  context  /**< */,
                                               uint32_t                max_bytes  /**< */)
d1436 4
a1439 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_DOCUMENT_DATA,
        /* isvoid */ 0
d1459 1
a1459 1
xcb_x_print_print_get_document_data_data (const xcb_x_print_print_get_document_data_reply_t *R  /**< */)
d1465 1
a1465 1
xcb_x_print_print_get_document_data_data_length (const xcb_x_print_print_get_document_data_reply_t *R  /**< */)
d1471 1
a1471 1
xcb_x_print_print_get_document_data_data_end (const xcb_x_print_print_get_document_data_reply_t *R  /**< */)
d1481 1
a1481 1
xcb_x_print_print_get_document_data_reply (xcb_connection_t                              *c  /**< */,
d1483 1
a1483 1
                                           xcb_generic_error_t                          **e  /**< */)
d1489 2
a1490 2
xcb_x_print_print_start_page_checked (xcb_connection_t *c  /**< */,
                                      xcb_window_t      window  /**< */)
d1493 4
a1496 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_START_PAGE,
        /* isvoid */ 1
d1515 2
a1516 2
xcb_x_print_print_start_page (xcb_connection_t *c  /**< */,
                              xcb_window_t      window  /**< */)
d1519 4
a1522 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_START_PAGE,
        /* isvoid */ 1
d1541 2
a1542 2
xcb_x_print_print_end_page_checked (xcb_connection_t *c  /**< */,
                                    uint8_t           cancel  /**< */)
d1545 4
a1548 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_END_PAGE,
        /* isvoid */ 1
d1568 2
a1569 2
xcb_x_print_print_end_page (xcb_connection_t *c  /**< */,
                            uint8_t           cancel  /**< */)
d1572 4
a1575 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_END_PAGE,
        /* isvoid */ 1
a1593 31
int
xcb_x_print_print_select_input_sizeof (const void  *_buffer  /**< */)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_x_print_print_select_input_request_t *_aux = (xcb_x_print_print_select_input_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_x_print_print_select_input_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* event_list */
    xcb_block_len += xcb_popcount(_aux->event_mask) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

d1595 3
a1597 4
xcb_x_print_print_select_input_checked (xcb_connection_t       *c  /**< */,
                                        xcb_x_print_pcontext_t  context  /**< */,
                                        uint32_t                event_mask  /**< */,
                                        const uint32_t         *event_list  /**< */)
d1600 4
a1603 4
        /* count */ 4,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_SELECT_INPUT,
        /* isvoid */ 1
d1606 1
a1606 1
    struct iovec xcb_parts[6];
a1616 5
    /* uint32_t event_list */
    xcb_parts[4].iov_base = (char *) event_list;
    xcb_parts[4].iov_len = xcb_popcount(event_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
d1623 3
a1625 4
xcb_x_print_print_select_input (xcb_connection_t       *c  /**< */,
                                xcb_x_print_pcontext_t  context  /**< */,
                                uint32_t                event_mask  /**< */,
                                const uint32_t         *event_list  /**< */)
d1628 4
a1631 4
        /* count */ 4,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_SELECT_INPUT,
        /* isvoid */ 1
d1634 1
a1634 1
    struct iovec xcb_parts[6];
a1644 5
    /* uint32_t event_list */
    xcb_parts[4].iov_base = (char *) event_list;
    xcb_parts[4].iov_len = xcb_popcount(event_mask) * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
a1649 167
int
xcb_x_print_print_input_selected_serialize (void                                           **_buffer  /**< */,
                                            const xcb_x_print_print_input_selected_reply_t  *_aux  /**< */,
                                            const uint32_t                                  *event_list  /**< */,
                                            const uint32_t                                  *all_events_list  /**< */)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[6];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    /* xcb_x_print_print_input_selected_reply_t.pad0 */
    xcb_parts[xcb_parts_idx].iov_base = (char *) &xcb_pad;
    xcb_block_len += sizeof(uint8_t);
    xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
    xcb_parts_idx++;
    xcb_align_to = ALIGNOF(uint8_t);
    /* xcb_x_print_print_input_selected_reply_t.event_mask */
    xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->event_mask;
    xcb_block_len += sizeof(uint32_t);
    xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
    xcb_parts_idx++;
    xcb_align_to = ALIGNOF(uint32_t);
    /* event_list */
    xcb_parts[xcb_parts_idx].iov_base = (char *) event_list;
    xcb_block_len += xcb_popcount(_aux->event_mask) * sizeof(uint32_t);
    xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(_aux->event_mask) * sizeof(uint32_t);
    xcb_parts_idx++;
    xcb_align_to = ALIGNOF(uint32_t);
    /* xcb_x_print_print_input_selected_reply_t.all_events_mask */
    xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->all_events_mask;
    xcb_block_len += sizeof(uint32_t);
    xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
    xcb_parts_idx++;
    xcb_align_to = ALIGNOF(uint32_t);
    /* all_events_list */
    xcb_parts[xcb_parts_idx].iov_base = (char *) all_events_list;
    xcb_block_len += xcb_popcount(_aux->all_events_mask) * sizeof(uint32_t);
    xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(_aux->all_events_mask) * sizeof(uint32_t);
    xcb_parts_idx++;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_x_print_print_input_selected_unserialize (const void                                 *_buffer  /**< */,
                                              xcb_x_print_print_input_selected_reply_t  **_aux  /**< */)
{
    char *xcb_tmp = (char *)_buffer;
    xcb_x_print_print_input_selected_reply_t xcb_out;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    uint32_t *event_list;
    int event_list_len;
    uint32_t *all_events_list;
    int all_events_list_len;

    /* xcb_x_print_print_input_selected_reply_t.response_type */
    xcb_out.response_type = *(uint8_t *)xcb_tmp;
    xcb_block_len += sizeof(uint8_t);
    xcb_tmp += sizeof(uint8_t);
    xcb_align_to = ALIGNOF(uint8_t);
    /* xcb_x_print_print_input_selected_reply_t.pad0 */
    xcb_out.pad0 = *(uint8_t *)xcb_tmp;
    xcb_block_len += sizeof(uint8_t);
    xcb_tmp += sizeof(uint8_t);
    xcb_align_to = ALIGNOF(uint8_t);
    /* xcb_x_print_print_input_selected_reply_t.sequence */
    xcb_out.sequence = *(uint16_t *)xcb_tmp;
    xcb_block_len += sizeof(uint16_t);
    xcb_tmp += sizeof(uint16_t);
    xcb_align_to = ALIGNOF(uint16_t);
    /* xcb_x_print_print_input_selected_reply_t.length */
    xcb_out.length = *(uint32_t *)xcb_tmp;
    xcb_block_len += sizeof(uint32_t);
    xcb_tmp += sizeof(uint32_t);
    xcb_align_to = ALIGNOF(uint32_t);
    /* xcb_x_print_print_input_selected_reply_t.event_mask */
    xcb_out.event_mask = *(uint32_t *)xcb_tmp;
    xcb_block_len += sizeof(uint32_t);
    xcb_tmp += sizeof(uint32_t);
    xcb_align_to = ALIGNOF(uint32_t);
    /* event_list */
    event_list = (uint32_t *)xcb_tmp;
    event_list_len = xcb_popcount(xcb_out.event_mask) * sizeof(uint32_t);
    xcb_block_len += event_list_len;
    xcb_tmp += event_list_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* xcb_x_print_print_input_selected_reply_t.all_events_mask */
    xcb_out.all_events_mask = *(uint32_t *)xcb_tmp;
    xcb_block_len += sizeof(uint32_t);
    xcb_tmp += sizeof(uint32_t);
    xcb_align_to = ALIGNOF(uint32_t);
    /* all_events_list */
    all_events_list = (uint32_t *)xcb_tmp;
    all_events_list_len = xcb_popcount(xcb_out.all_events_mask) * sizeof(uint32_t);
    xcb_block_len += all_events_list_len;
    xcb_tmp += all_events_list_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    if (NULL == _aux)
        return xcb_buffer_len;

    if (NULL == *_aux) {
        /* allocate memory */
        *_aux = malloc(xcb_buffer_len);
    }

    xcb_tmp = ((char *)*_aux)+xcb_buffer_len;
    xcb_tmp -= all_events_list_len;
    memmove(xcb_tmp, all_events_list, all_events_list_len);
    xcb_tmp -= event_list_len;
    memmove(xcb_tmp, event_list, event_list_len);
    **_aux = xcb_out;

    return xcb_buffer_len;
}

int
xcb_x_print_print_input_selected_sizeof (const void  *_buffer  /**< */)
{
    return xcb_x_print_print_input_selected_unserialize(_buffer, NULL);
}

d1651 2
a1652 2
xcb_x_print_print_input_selected (xcb_connection_t       *c  /**< */,
                                  xcb_x_print_pcontext_t  context  /**< */)
d1655 4
a1658 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_INPUT_SELECTED,
        /* isvoid */ 0
d1677 2
a1678 2
xcb_x_print_print_input_selected_unchecked (xcb_connection_t       *c  /**< */,
                                            xcb_x_print_pcontext_t  context  /**< */)
d1681 4
a1684 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_INPUT_SELECTED,
        /* isvoid */ 0
a1701 46
uint32_t *
xcb_x_print_print_input_selected_event_list (const xcb_x_print_print_input_selected_reply_t *R  /**< */)
{
    return (uint32_t *) (R + 1);
}

int
xcb_x_print_print_input_selected_event_list_length (const xcb_x_print_print_input_selected_reply_t *R  /**< */)
{
    return xcb_popcount(R->event_mask);
}

xcb_generic_iterator_t
xcb_x_print_print_input_selected_event_list_end (const xcb_x_print_print_input_selected_reply_t *R  /**< */)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (xcb_popcount(R->event_mask));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint32_t *
xcb_x_print_print_input_selected_all_events_list (const xcb_x_print_print_input_selected_reply_t *R  /**< */)
{
    xcb_generic_iterator_t prev = xcb_x_print_print_input_selected_event_list_end(R);
    return (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 4);
}

int
xcb_x_print_print_input_selected_all_events_list_length (const xcb_x_print_print_input_selected_reply_t *R  /**< */)
{
    return xcb_popcount(R->all_events_mask);
}

xcb_generic_iterator_t
xcb_x_print_print_input_selected_all_events_list_end (const xcb_x_print_print_input_selected_reply_t *R  /**< */)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t child = xcb_x_print_print_input_selected_event_list_end(R);
    i.data = ((uint32_t *) child.data) + (xcb_popcount(R->all_events_mask));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

d1703 1
a1703 1
xcb_x_print_print_input_selected_reply (xcb_connection_t                           *c  /**< */,
d1705 1
a1705 1
                                        xcb_generic_error_t                       **e  /**< */)
d1711 1
a1711 1
xcb_x_print_print_get_attributes_sizeof (const void  *_buffer  /**< */)
d1742 3
a1744 3
xcb_x_print_print_get_attributes (xcb_connection_t       *c  /**< */,
                                  xcb_x_print_pcontext_t  context  /**< */,
                                  uint8_t                 pool  /**< */)
d1747 4
a1750 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_ATTRIBUTES,
        /* isvoid */ 0
d1771 3
a1773 3
xcb_x_print_print_get_attributes_unchecked (xcb_connection_t       *c  /**< */,
                                            xcb_x_print_pcontext_t  context  /**< */,
                                            uint8_t                 pool  /**< */)
d1776 4
a1779 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_ATTRIBUTES,
        /* isvoid */ 0
d1800 1
a1800 1
xcb_x_print_print_get_attributes_attributes (const xcb_x_print_print_get_attributes_reply_t *R  /**< */)
d1806 1
a1806 1
xcb_x_print_print_get_attributes_attributes_length (const xcb_x_print_print_get_attributes_reply_t *R  /**< */)
d1812 1
a1812 1
xcb_x_print_print_get_attributes_attributes_end (const xcb_x_print_print_get_attributes_reply_t *R  /**< */)
d1822 1
a1822 1
xcb_x_print_print_get_attributes_reply (xcb_connection_t                           *c  /**< */,
d1824 1
a1824 1
                                        xcb_generic_error_t                       **e  /**< */)
d1830 1
a1830 1
xcb_x_print_print_get_one_attributes_sizeof (const void  *_buffer  /**< */)
d1861 5
a1865 5
xcb_x_print_print_get_one_attributes (xcb_connection_t            *c  /**< */,
                                      xcb_x_print_pcontext_t       context  /**< */,
                                      uint32_t                     nameLen  /**< */,
                                      uint8_t                      pool  /**< */,
                                      const xcb_x_print_string8_t *name  /**< */)
d1868 4
a1871 4
        /* count */ 4,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_ONE_ATTRIBUTES,
        /* isvoid */ 0
d1898 5
a1902 5
xcb_x_print_print_get_one_attributes_unchecked (xcb_connection_t            *c  /**< */,
                                                xcb_x_print_pcontext_t       context  /**< */,
                                                uint32_t                     nameLen  /**< */,
                                                uint8_t                      pool  /**< */,
                                                const xcb_x_print_string8_t *name  /**< */)
d1905 4
a1908 4
        /* count */ 4,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_ONE_ATTRIBUTES,
        /* isvoid */ 0
d1935 1
a1935 1
xcb_x_print_print_get_one_attributes_value (const xcb_x_print_print_get_one_attributes_reply_t *R  /**< */)
d1941 1
a1941 1
xcb_x_print_print_get_one_attributes_value_length (const xcb_x_print_print_get_one_attributes_reply_t *R  /**< */)
d1947 1
a1947 1
xcb_x_print_print_get_one_attributes_value_end (const xcb_x_print_print_get_one_attributes_reply_t *R  /**< */)
d1957 1
a1957 1
xcb_x_print_print_get_one_attributes_reply (xcb_connection_t                               *c  /**< */,
d1959 1
a1959 1
                                            xcb_generic_error_t                           **e  /**< */)
d1965 2
a1966 2
xcb_x_print_print_set_attributes_sizeof (const void  *_buffer  /**< */,
                                         uint32_t     attributes_len  /**< */)
d1996 7
a2002 7
xcb_x_print_print_set_attributes_checked (xcb_connection_t            *c  /**< */,
                                          xcb_x_print_pcontext_t       context  /**< */,
                                          uint32_t                     stringLen  /**< */,
                                          uint8_t                      pool  /**< */,
                                          uint8_t                      rule  /**< */,
                                          uint32_t                     attributes_len  /**< */,
                                          const xcb_x_print_string8_t *attributes  /**< */)
d2005 4
a2008 4
        /* count */ 4,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_SET_ATTRIBUTES,
        /* isvoid */ 1
d2036 7
a2042 7
xcb_x_print_print_set_attributes (xcb_connection_t            *c  /**< */,
                                  xcb_x_print_pcontext_t       context  /**< */,
                                  uint32_t                     stringLen  /**< */,
                                  uint8_t                      pool  /**< */,
                                  uint8_t                      rule  /**< */,
                                  uint32_t                     attributes_len  /**< */,
                                  const xcb_x_print_string8_t *attributes  /**< */)
d2045 4
a2048 4
        /* count */ 4,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_SET_ATTRIBUTES,
        /* isvoid */ 1
d2075 22
d2098 2
a2099 2
xcb_x_print_print_get_page_dimensions (xcb_connection_t       *c  /**< */,
                                       xcb_x_print_pcontext_t  context  /**< */)
d2102 4
a2105 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_PAGE_DIMENSIONS,
        /* isvoid */ 0
d2124 2
a2125 2
xcb_x_print_print_get_page_dimensions_unchecked (xcb_connection_t       *c  /**< */,
                                                 xcb_x_print_pcontext_t  context  /**< */)
d2128 4
a2131 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_PAGE_DIMENSIONS,
        /* isvoid */ 0
d2150 1
a2150 1
xcb_x_print_print_get_page_dimensions_reply (xcb_connection_t                                *c  /**< */,
d2152 1
a2152 1
                                             xcb_generic_error_t                            **e  /**< */)
d2158 1
a2158 1
xcb_x_print_print_query_screens_sizeof (const void  *_buffer  /**< */)
d2189 1
a2189 1
xcb_x_print_print_query_screens (xcb_connection_t *c  /**< */)
d2192 4
a2195 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_QUERY_SCREENS,
        /* isvoid */ 0
d2213 1
a2213 1
xcb_x_print_print_query_screens_unchecked (xcb_connection_t *c  /**< */)
d2216 4
a2219 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_QUERY_SCREENS,
        /* isvoid */ 0
d2237 1
a2237 1
xcb_x_print_print_query_screens_roots (const xcb_x_print_print_query_screens_reply_t *R  /**< */)
d2243 1
a2243 1
xcb_x_print_print_query_screens_roots_length (const xcb_x_print_print_query_screens_reply_t *R  /**< */)
d2249 1
a2249 1
xcb_x_print_print_query_screens_roots_end (const xcb_x_print_print_query_screens_reply_t *R  /**< */)
d2259 1
a2259 1
xcb_x_print_print_query_screens_reply (xcb_connection_t                          *c  /**< */,
d2261 1
a2261 1
                                       xcb_generic_error_t                      **e  /**< */)
d2267 3
a2269 3
xcb_x_print_print_set_image_resolution (xcb_connection_t       *c  /**< */,
                                        xcb_x_print_pcontext_t  context  /**< */,
                                        uint16_t                image_resolution  /**< */)
d2272 4
a2275 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_SET_IMAGE_RESOLUTION,
        /* isvoid */ 0
d2295 3
a2297 3
xcb_x_print_print_set_image_resolution_unchecked (xcb_connection_t       *c  /**< */,
                                                  xcb_x_print_pcontext_t  context  /**< */,
                                                  uint16_t                image_resolution  /**< */)
d2300 4
a2303 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_SET_IMAGE_RESOLUTION,
        /* isvoid */ 0
d2323 1
a2323 1
xcb_x_print_print_set_image_resolution_reply (xcb_connection_t                                 *c  /**< */,
d2325 1
a2325 1
                                              xcb_generic_error_t                             **e  /**< */)
d2331 2
a2332 2
xcb_x_print_print_get_image_resolution (xcb_connection_t       *c  /**< */,
                                        xcb_x_print_pcontext_t  context  /**< */)
d2335 4
a2338 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_IMAGE_RESOLUTION,
        /* isvoid */ 0
d2357 2
a2358 2
xcb_x_print_print_get_image_resolution_unchecked (xcb_connection_t       *c  /**< */,
                                                  xcb_x_print_pcontext_t  context  /**< */)
d2361 4
a2364 4
        /* count */ 2,
        /* ext */ &xcb_x_print_id,
        /* opcode */ XCB_X_PRINT_PRINT_GET_IMAGE_RESOLUTION,
        /* isvoid */ 0
d2383 1
a2383 1
xcb_x_print_print_get_image_resolution_reply (xcb_connection_t                                 *c  /**< */,
d2385 1
a2385 1
                                              xcb_generic_error_t                             **e  /**< */)
@


1.3
log
@Update build system and generated files for libxcb 1.10.
@
text
@a20 10

/*****************************************************************************
 **
 ** void xcb_x_print_string8_next
 ** 
 ** @@param xcb_x_print_string8_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a28 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_x_print_string8_end
 ** 
 ** @@param xcb_x_print_string8_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a179 10

/*****************************************************************************
 **
 ** xcb_x_print_string8_t * xcb_x_print_printer_name
 ** 
 ** @@param const xcb_x_print_printer_t *R
 ** @@returns xcb_x_print_string8_t *
 **
 *****************************************************************************/
 
a185 10

/*****************************************************************************
 **
 ** int xcb_x_print_printer_name_length
 ** 
 ** @@param const xcb_x_print_printer_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a191 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_x_print_printer_name_end
 ** 
 ** @@param const xcb_x_print_printer_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a201 10

/*****************************************************************************
 **
 ** xcb_x_print_string8_t * xcb_x_print_printer_description
 ** 
 ** @@param const xcb_x_print_printer_t *R
 ** @@returns xcb_x_print_string8_t *
 **
 *****************************************************************************/
 
a208 10

/*****************************************************************************
 **
 ** int xcb_x_print_printer_description_length
 ** 
 ** @@param const xcb_x_print_printer_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a214 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_x_print_printer_description_end
 ** 
 ** @@param const xcb_x_print_printer_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a225 10

/*****************************************************************************
 **
 ** void xcb_x_print_printer_next
 ** 
 ** @@param xcb_x_print_printer_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a236 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_x_print_printer_end
 ** 
 ** @@param xcb_x_print_printer_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a248 10

/*****************************************************************************
 **
 ** void xcb_x_print_pcontext_next
 ** 
 ** @@param xcb_x_print_pcontext_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a256 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_x_print_pcontext_end
 ** 
 ** @@param xcb_x_print_pcontext_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a266 10

/*****************************************************************************
 **
 ** xcb_x_print_print_query_version_cookie_t xcb_x_print_print_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_x_print_print_query_version_cookie_t
 **
 *****************************************************************************/
 
d276 1
a276 1
    
d280 2
a281 2
    
    
d286 1
a286 1
    
a290 10

/*****************************************************************************
 **
 ** xcb_x_print_print_query_version_cookie_t xcb_x_print_print_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_x_print_print_query_version_cookie_t
 **
 *****************************************************************************/
 
d300 1
a300 1
    
d304 2
a305 2
    
    
d310 1
a310 1
    
a314 12

/*****************************************************************************
 **
 ** xcb_x_print_print_query_version_reply_t * xcb_x_print_print_query_version_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_x_print_print_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_x_print_print_query_version_reply_t *
 **
 *****************************************************************************/
 
a365 14

/*****************************************************************************
 **
 ** xcb_x_print_print_get_printer_list_cookie_t xcb_x_print_print_get_printer_list
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint32_t                     printerNameLen
 ** @@param uint32_t                     localeLen
 ** @@param const xcb_x_print_string8_t *printer_name
 ** @@param const xcb_x_print_string8_t *locale
 ** @@returns xcb_x_print_print_get_printer_list_cookie_t
 **
 *****************************************************************************/
 
d379 1
a379 1
    
d383 1
a383 1
    
d386 1
a386 1
    
d401 1
a401 1
    
a405 14

/*****************************************************************************
 **
 ** xcb_x_print_print_get_printer_list_cookie_t xcb_x_print_print_get_printer_list_unchecked
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint32_t                     printerNameLen
 ** @@param uint32_t                     localeLen
 ** @@param const xcb_x_print_string8_t *printer_name
 ** @@param const xcb_x_print_string8_t *locale
 ** @@returns xcb_x_print_print_get_printer_list_cookie_t
 **
 *****************************************************************************/
 
d419 1
a419 1
    
d423 1
a423 1
    
d426 1
a426 1
    
d441 1
a441 1
    
a445 10

/*****************************************************************************
 **
 ** int xcb_x_print_print_get_printer_list_printers_length
 ** 
 ** @@param const xcb_x_print_print_get_printer_list_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a451 10

/*****************************************************************************
 **
 ** xcb_x_print_printer_iterator_t xcb_x_print_print_get_printer_list_printers_iterator
 ** 
 ** @@param const xcb_x_print_print_get_printer_list_reply_t *R
 ** @@returns xcb_x_print_printer_iterator_t
 **
 *****************************************************************************/
 
a461 12

/*****************************************************************************
 **
 ** xcb_x_print_print_get_printer_list_reply_t * xcb_x_print_print_get_printer_list_reply
 ** 
 ** @@param xcb_connection_t                             *c
 ** @@param xcb_x_print_print_get_printer_list_cookie_t   cookie
 ** @@param xcb_generic_error_t                         **e
 ** @@returns xcb_x_print_print_get_printer_list_reply_t *
 **
 *****************************************************************************/
 
a480 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_rehash_printer_list_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d490 1
a490 1
    
d494 2
a495 2
    
    
d500 1
a500 1
    
a504 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_rehash_printer_list
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d514 1
a514 1
    
d518 2
a519 2
    
    
d524 1
a524 1
    
a571 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_create_context_checked
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint32_t                     context_id
 ** @@param uint32_t                     printerNameLen
 ** @@param uint32_t                     localeLen
 ** @@param const xcb_x_print_string8_t *printerName
 ** @@param const xcb_x_print_string8_t *locale
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d586 1
a586 1
    
d590 1
a590 1
    
d594 1
a594 1
    
d609 1
a609 1
    
a613 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_create_context
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param uint32_t                     context_id
 ** @@param uint32_t                     printerNameLen
 ** @@param uint32_t                     localeLen
 ** @@param const xcb_x_print_string8_t *printerName
 ** @@param const xcb_x_print_string8_t *locale
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d628 1
a628 1
    
d632 1
a632 1
    
d636 1
a636 1
    
d651 1
a651 1
    
a655 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_set_context_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d666 1
a666 1
    
d670 1
a670 1
    
d672 1
a672 1
    
d677 1
a677 1
    
a681 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_set_context
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d692 1
a692 1
    
d696 1
a696 1
    
d698 1
a698 1
    
d703 1
a703 1
    
a707 10

/*****************************************************************************
 **
 ** xcb_x_print_print_get_context_cookie_t xcb_x_print_print_get_context
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_x_print_print_get_context_cookie_t
 **
 *****************************************************************************/
 
d717 1
a717 1
    
d721 2
a722 2
    
    
d727 1
a727 1
    
a731 10

/*****************************************************************************
 **
 ** xcb_x_print_print_get_context_cookie_t xcb_x_print_print_get_context_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_x_print_print_get_context_cookie_t
 **
 *****************************************************************************/
 
d741 1
a741 1
    
d745 2
a746 2
    
    
d751 1
a751 1
    
a755 12

/*****************************************************************************
 **
 ** xcb_x_print_print_get_context_reply_t * xcb_x_print_print_get_context_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_x_print_print_get_context_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_x_print_print_get_context_reply_t *
 **
 *****************************************************************************/
 
a763 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_destroy_context_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d774 1
a774 1
    
d778 1
a778 1
    
d780 1
a780 1
    
d785 1
a785 1
    
a789 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_destroy_context
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d800 1
a800 1
    
d804 1
a804 1
    
d806 1
a806 1
    
d811 1
a811 1
    
a815 10

/*****************************************************************************
 **
 ** xcb_x_print_print_get_screen_of_context_cookie_t xcb_x_print_print_get_screen_of_context
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_x_print_print_get_screen_of_context_cookie_t
 **
 *****************************************************************************/
 
d825 1
a825 1
    
d829 2
a830 2
    
    
d835 1
a835 1
    
a839 10

/*****************************************************************************
 **
 ** xcb_x_print_print_get_screen_of_context_cookie_t xcb_x_print_print_get_screen_of_context_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_x_print_print_get_screen_of_context_cookie_t
 **
 *****************************************************************************/
 
d849 1
a849 1
    
d853 2
a854 2
    
    
d859 1
a859 1
    
a863 12

/*****************************************************************************
 **
 ** xcb_x_print_print_get_screen_of_context_reply_t * xcb_x_print_print_get_screen_of_context_reply
 ** 
 ** @@param xcb_connection_t                                  *c
 ** @@param xcb_x_print_print_get_screen_of_context_cookie_t   cookie
 ** @@param xcb_generic_error_t                              **e
 ** @@returns xcb_x_print_print_get_screen_of_context_reply_t *
 **
 *****************************************************************************/
 
a871 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_start_job_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           output_mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d882 1
a882 1
    
d886 1
a886 1
    
d888 1
a888 1
    
d893 1
a893 1
    
a897 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_start_job
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           output_mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d908 1
a908 1
    
d912 1
a912 1
    
d914 1
a914 1
    
d919 1
a919 1
    
a923 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_end_job_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           cancel
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d934 1
a934 1
    
d938 1
a938 1
    
d940 1
a940 1
    
d945 1
a945 1
    
a949 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_end_job
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           cancel
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d960 1
a960 1
    
d964 1
a964 1
    
d966 1
a966 1
    
d971 1
a971 1
    
a975 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_start_doc_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           driver_mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d986 1
a986 1
    
d990 1
a990 1
    
d992 1
a992 1
    
d997 1
a997 1
    
a1001 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_start_doc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           driver_mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1012 1
a1012 1
    
d1016 1
a1016 1
    
d1018 1
a1018 1
    
d1023 1
a1023 1
    
a1027 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_end_doc_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           cancel
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1038 1
a1038 1
    
d1042 1
a1042 1
    
d1044 1
a1044 1
    
d1049 1
a1049 1
    
a1053 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_end_doc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           cancel
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1064 1
a1064 1
    
d1068 1
a1068 1
    
d1070 1
a1070 1
    
d1075 1
a1075 1
    
a1136 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_put_document_data_checked
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_drawable_t               drawable
 ** @@param uint32_t                     len_data
 ** @@param uint16_t                     len_fmt
 ** @@param uint16_t                     len_options
 ** @@param const uint8_t               *data
 ** @@param uint32_t                     doc_format_len
 ** @@param const xcb_x_print_string8_t *doc_format
 ** @@param uint32_t                     options_len
 ** @@param const xcb_x_print_string8_t *options
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1155 1
a1155 1
    
d1159 1
a1159 1
    
d1164 1
a1164 1
    
d1184 1
a1184 1
    
a1188 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_put_document_data
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_drawable_t               drawable
 ** @@param uint32_t                     len_data
 ** @@param uint16_t                     len_fmt
 ** @@param uint16_t                     len_options
 ** @@param const uint8_t               *data
 ** @@param uint32_t                     doc_format_len
 ** @@param const xcb_x_print_string8_t *doc_format
 ** @@param uint32_t                     options_len
 ** @@param const xcb_x_print_string8_t *options
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1207 1
a1207 1
    
d1211 1
a1211 1
    
d1216 1
a1216 1
    
d1236 1
a1236 1
    
a1271 12

/*****************************************************************************
 **
 ** xcb_x_print_print_get_document_data_cookie_t xcb_x_print_print_get_document_data
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_x_print_pcontext_t  context
 ** @@param uint32_t                max_bytes
 ** @@returns xcb_x_print_print_get_document_data_cookie_t
 **
 *****************************************************************************/
 
d1283 1
a1283 1
    
d1287 1
a1287 1
    
d1290 1
a1290 1
    
d1295 1
a1295 1
    
a1299 12

/*****************************************************************************
 **
 ** xcb_x_print_print_get_document_data_cookie_t xcb_x_print_print_get_document_data_unchecked
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_x_print_pcontext_t  context
 ** @@param uint32_t                max_bytes
 ** @@returns xcb_x_print_print_get_document_data_cookie_t
 **
 *****************************************************************************/
 
d1311 1
a1311 1
    
d1315 1
a1315 1
    
d1318 1
a1318 1
    
d1323 1
a1323 1
    
a1327 10

/*****************************************************************************
 **
 ** uint8_t * xcb_x_print_print_get_document_data_data
 ** 
 ** @@param const xcb_x_print_print_get_document_data_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a1333 10

/*****************************************************************************
 **
 ** int xcb_x_print_print_get_document_data_data_length
 ** 
 ** @@param const xcb_x_print_print_get_document_data_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1339 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_x_print_print_get_document_data_data_end
 ** 
 ** @@param const xcb_x_print_print_get_document_data_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1349 12

/*****************************************************************************
 **
 ** xcb_x_print_print_get_document_data_reply_t * xcb_x_print_print_get_document_data_reply
 ** 
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_x_print_print_get_document_data_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_x_print_print_get_document_data_reply_t *
 **
 *****************************************************************************/
 
a1357 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_start_page_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1368 1
a1368 1
    
d1372 1
a1372 1
    
d1374 1
a1374 1
    
d1379 1
a1379 1
    
a1383 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_start_page
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1394 1
a1394 1
    
d1398 1
a1398 1
    
d1400 1
a1400 1
    
d1405 1
a1405 1
    
a1409 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_end_page_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           cancel
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1420 1
a1420 1
    
d1424 1
a1424 1
    
d1427 1
a1427 1
    
d1432 1
a1432 1
    
a1436 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_end_page
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           cancel
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1447 1
a1447 1
    
d1451 1
a1451 1
    
d1454 1
a1454 1
    
d1459 1
a1459 1
    
a1494 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_select_input_checked
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_x_print_pcontext_t  context
 ** @@param uint32_t                event_mask
 ** @@param const uint32_t         *event_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1507 1
a1507 1
    
d1511 1
a1511 1
    
d1514 1
a1514 1
    
d1524 1
a1524 1
    
a1528 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_select_input
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_x_print_pcontext_t  context
 ** @@param uint32_t                event_mask
 ** @@param const uint32_t         *event_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1541 1
a1541 1
    
d1545 1
a1545 1
    
d1548 1
a1548 1
    
d1558 1
a1558 1
    
a1729 11

/*****************************************************************************
 **
 ** xcb_x_print_print_input_selected_cookie_t xcb_x_print_print_input_selected
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_x_print_pcontext_t  context
 ** @@returns xcb_x_print_print_input_selected_cookie_t
 **
 *****************************************************************************/
 
d1740 1
a1740 1
    
d1744 1
a1744 1
    
d1746 1
a1746 1
    
d1751 1
a1751 1
    
a1755 11

/*****************************************************************************
 **
 ** xcb_x_print_print_input_selected_cookie_t xcb_x_print_print_input_selected_unchecked
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_x_print_pcontext_t  context
 ** @@returns xcb_x_print_print_input_selected_cookie_t
 **
 *****************************************************************************/
 
d1766 1
a1766 1
    
d1770 1
a1770 1
    
d1772 1
a1772 1
    
d1777 1
a1777 1
    
a1781 10

/*****************************************************************************
 **
 ** uint32_t * xcb_x_print_print_input_selected_event_list
 ** 
 ** @@param const xcb_x_print_print_input_selected_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a1787 10

/*****************************************************************************
 **
 ** int xcb_x_print_print_input_selected_event_list_length
 ** 
 ** @@param const xcb_x_print_print_input_selected_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1793 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_x_print_print_input_selected_event_list_end
 ** 
 ** @@param const xcb_x_print_print_input_selected_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1803 10

/*****************************************************************************
 **
 ** uint32_t * xcb_x_print_print_input_selected_all_events_list
 ** 
 ** @@param const xcb_x_print_print_input_selected_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a1810 10

/*****************************************************************************
 **
 ** int xcb_x_print_print_input_selected_all_events_list_length
 ** 
 ** @@param const xcb_x_print_print_input_selected_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1816 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_x_print_print_input_selected_all_events_list_end
 ** 
 ** @@param const xcb_x_print_print_input_selected_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1827 12

/*****************************************************************************
 **
 ** xcb_x_print_print_input_selected_reply_t * xcb_x_print_print_input_selected_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_x_print_print_input_selected_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_x_print_print_input_selected_reply_t *
 **
 *****************************************************************************/
 
d1836 30
a1866 11
/*****************************************************************************
 **
 ** xcb_x_print_print_get_attributes_cookie_t xcb_x_print_print_get_attributes
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_x_print_pcontext_t  context
 ** @@param uint8_t                 pool
 ** @@returns xcb_x_print_print_get_attributes_cookie_t
 **
 *****************************************************************************/
 
d1878 1
a1878 1
    
d1882 1
a1882 1
    
d1886 1
a1886 1
    
d1891 1
a1891 1
    
a1895 12

/*****************************************************************************
 **
 ** xcb_x_print_print_get_attributes_cookie_t xcb_x_print_print_get_attributes_unchecked
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_x_print_pcontext_t  context
 ** @@param uint8_t                 pool
 ** @@returns xcb_x_print_print_get_attributes_cookie_t
 **
 *****************************************************************************/
 
d1907 1
a1907 1
    
d1911 1
a1911 1
    
d1915 1
a1915 1
    
d1920 1
a1920 1
    
d1925 21
a1946 11
/*****************************************************************************
 **
 ** xcb_x_print_print_get_attributes_reply_t * xcb_x_print_print_get_attributes_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_x_print_print_get_attributes_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_x_print_print_get_attributes_reply_t *
 **
 *****************************************************************************/
 
a1985 14

/*****************************************************************************
 **
 ** xcb_x_print_print_get_one_attributes_cookie_t xcb_x_print_print_get_one_attributes
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_x_print_pcontext_t       context
 ** @@param uint32_t                     nameLen
 ** @@param uint8_t                      pool
 ** @@param const xcb_x_print_string8_t *name
 ** @@returns xcb_x_print_print_get_one_attributes_cookie_t
 **
 *****************************************************************************/
 
d1999 1
a1999 1
    
d2003 1
a2003 1
    
d2008 1
a2008 1
    
d2018 1
a2018 1
    
a2022 14

/*****************************************************************************
 **
 ** xcb_x_print_print_get_one_attributes_cookie_t xcb_x_print_print_get_one_attributes_unchecked
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_x_print_pcontext_t       context
 ** @@param uint32_t                     nameLen
 ** @@param uint8_t                      pool
 ** @@param const xcb_x_print_string8_t *name
 ** @@returns xcb_x_print_print_get_one_attributes_cookie_t
 **
 *****************************************************************************/
 
d2036 1
a2036 1
    
d2040 1
a2040 1
    
d2045 1
a2045 1
    
d2055 1
a2055 1
    
a2059 10

/*****************************************************************************
 **
 ** xcb_x_print_string8_t * xcb_x_print_print_get_one_attributes_value
 ** 
 ** @@param const xcb_x_print_print_get_one_attributes_reply_t *R
 ** @@returns xcb_x_print_string8_t *
 **
 *****************************************************************************/
 
a2065 10

/*****************************************************************************
 **
 ** int xcb_x_print_print_get_one_attributes_value_length
 ** 
 ** @@param const xcb_x_print_print_get_one_attributes_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2071 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_x_print_print_get_one_attributes_value_end
 ** 
 ** @@param const xcb_x_print_print_get_one_attributes_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2081 12

/*****************************************************************************
 **
 ** xcb_x_print_print_get_one_attributes_reply_t * xcb_x_print_print_get_one_attributes_reply
 ** 
 ** @@param xcb_connection_t                               *c
 ** @@param xcb_x_print_print_get_one_attributes_cookie_t   cookie
 ** @@param xcb_generic_error_t                           **e
 ** @@returns xcb_x_print_print_get_one_attributes_reply_t *
 **
 *****************************************************************************/
 
a2120 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_set_attributes_checked
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_x_print_pcontext_t       context
 ** @@param uint32_t                     stringLen
 ** @@param uint8_t                      pool
 ** @@param uint8_t                      rule
 ** @@param uint32_t                     attributes_len
 ** @@param const xcb_x_print_string8_t *attributes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2136 1
a2136 1
    
d2140 1
a2140 1
    
d2146 1
a2146 1
    
d2156 1
a2156 1
    
a2160 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_x_print_print_set_attributes
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_x_print_pcontext_t       context
 ** @@param uint32_t                     stringLen
 ** @@param uint8_t                      pool
 ** @@param uint8_t                      rule
 ** @@param uint32_t                     attributes_len
 ** @@param const xcb_x_print_string8_t *attributes
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2176 1
a2176 1
    
d2180 1
a2180 1
    
d2186 1
a2186 1
    
d2196 1
a2196 1
    
a2200 11

/*****************************************************************************
 **
 ** xcb_x_print_print_get_page_dimensions_cookie_t xcb_x_print_print_get_page_dimensions
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_x_print_pcontext_t  context
 ** @@returns xcb_x_print_print_get_page_dimensions_cookie_t
 **
 *****************************************************************************/
 
d2211 1
a2211 1
    
d2215 1
a2215 1
    
d2217 1
a2217 1
    
d2222 1
a2222 1
    
a2226 11

/*****************************************************************************
 **
 ** xcb_x_print_print_get_page_dimensions_cookie_t xcb_x_print_print_get_page_dimensions_unchecked
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_x_print_pcontext_t  context
 ** @@returns xcb_x_print_print_get_page_dimensions_cookie_t
 **
 *****************************************************************************/
 
d2237 1
a2237 1
    
d2241 1
a2241 1
    
d2243 1
a2243 1
    
d2248 1
a2248 1
    
a2252 12

/*****************************************************************************
 **
 ** xcb_x_print_print_get_page_dimensions_reply_t * xcb_x_print_print_get_page_dimensions_reply
 ** 
 ** @@param xcb_connection_t                                *c
 ** @@param xcb_x_print_print_get_page_dimensions_cookie_t   cookie
 ** @@param xcb_generic_error_t                            **e
 ** @@returns xcb_x_print_print_get_page_dimensions_reply_t *
 **
 *****************************************************************************/
 
a2291 10

/*****************************************************************************
 **
 ** xcb_x_print_print_query_screens_cookie_t xcb_x_print_print_query_screens
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_x_print_print_query_screens_cookie_t
 **
 *****************************************************************************/
 
d2301 1
a2301 1
    
d2305 2
a2306 2
    
    
d2311 1
a2311 1
    
a2315 10

/*****************************************************************************
 **
 ** xcb_x_print_print_query_screens_cookie_t xcb_x_print_print_query_screens_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_x_print_print_query_screens_cookie_t
 **
 *****************************************************************************/
 
d2325 1
a2325 1
    
d2329 2
a2330 2
    
    
d2335 1
a2335 1
    
a2339 10

/*****************************************************************************
 **
 ** xcb_window_t * xcb_x_print_print_query_screens_roots
 ** 
 ** @@param const xcb_x_print_print_query_screens_reply_t *R
 ** @@returns xcb_window_t *
 **
 *****************************************************************************/
 
a2345 10

/*****************************************************************************
 **
 ** int xcb_x_print_print_query_screens_roots_length
 ** 
 ** @@param const xcb_x_print_print_query_screens_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2351 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_x_print_print_query_screens_roots_end
 ** 
 ** @@param const xcb_x_print_print_query_screens_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2361 12

/*****************************************************************************
 **
 ** xcb_x_print_print_query_screens_reply_t * xcb_x_print_print_query_screens_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_x_print_print_query_screens_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_x_print_print_query_screens_reply_t *
 **
 *****************************************************************************/
 
a2369 12

/*****************************************************************************
 **
 ** xcb_x_print_print_set_image_resolution_cookie_t xcb_x_print_print_set_image_resolution
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_x_print_pcontext_t  context
 ** @@param uint16_t                image_resolution
 ** @@returns xcb_x_print_print_set_image_resolution_cookie_t
 **
 *****************************************************************************/
 
d2381 1
a2381 1
    
d2385 1
a2385 1
    
d2388 1
a2388 1
    
d2393 1
a2393 1
    
a2397 12

/*****************************************************************************
 **
 ** xcb_x_print_print_set_image_resolution_cookie_t xcb_x_print_print_set_image_resolution_unchecked
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_x_print_pcontext_t  context
 ** @@param uint16_t                image_resolution
 ** @@returns xcb_x_print_print_set_image_resolution_cookie_t
 **
 *****************************************************************************/
 
d2409 1
a2409 1
    
d2413 1
a2413 1
    
d2416 1
a2416 1
    
d2421 1
a2421 1
    
a2425 12

/*****************************************************************************
 **
 ** xcb_x_print_print_set_image_resolution_reply_t * xcb_x_print_print_set_image_resolution_reply
 ** 
 ** @@param xcb_connection_t                                 *c
 ** @@param xcb_x_print_print_set_image_resolution_cookie_t   cookie
 ** @@param xcb_generic_error_t                             **e
 ** @@returns xcb_x_print_print_set_image_resolution_reply_t *
 **
 *****************************************************************************/
 
a2433 11

/*****************************************************************************
 **
 ** xcb_x_print_print_get_image_resolution_cookie_t xcb_x_print_print_get_image_resolution
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_x_print_pcontext_t  context
 ** @@returns xcb_x_print_print_get_image_resolution_cookie_t
 **
 *****************************************************************************/
 
d2444 1
a2444 1
    
d2448 1
a2448 1
    
d2450 1
a2450 1
    
d2455 1
a2455 1
    
a2459 11

/*****************************************************************************
 **
 ** xcb_x_print_print_get_image_resolution_cookie_t xcb_x_print_print_get_image_resolution_unchecked
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param xcb_x_print_pcontext_t  context
 ** @@returns xcb_x_print_print_get_image_resolution_cookie_t
 **
 *****************************************************************************/
 
d2470 1
a2470 1
    
d2474 1
a2474 1
    
d2476 1
a2476 1
    
d2481 1
a2481 1
    
a2485 12

/*****************************************************************************
 **
 ** xcb_x_print_print_get_image_resolution_reply_t * xcb_x_print_print_get_image_resolution_reply
 ** 
 ** @@param xcb_connection_t                                 *c
 ** @@param xcb_x_print_print_get_image_resolution_cookie_t   cookie
 ** @@param xcb_generic_error_t                             **e
 ** @@returns xcb_x_print_print_get_image_resolution_reply_t *
 **
 *****************************************************************************/
 
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d67 1
a67 1
    unsigned int xcb_align_to;
d138 1
a138 1
    unsigned int xcb_align_to;
d483 1
a483 1
    unsigned int xcb_align_to;
d488 2
d769 1
a769 1
    unsigned int xcb_align_to;
d774 2
d1548 1
a1548 1
    unsigned int xcb_align_to;
d1553 2
d1745 1
a1745 1
    unsigned int xcb_align_to;
d1750 2
d2078 1
a2078 1
    unsigned int xcb_align_to;
d2083 2
d2203 1
a2203 1
    unsigned int xcb_align_to;
d2280 1
a2280 1
    unsigned int xcb_align_to;
d2672 1
a2672 1
    unsigned int xcb_align_to;
d2677 2
d2877 1
a2877 1
    unsigned int xcb_align_to;
d2882 2
d3114 1
a3114 1
    unsigned int xcb_align_to;
d3119 2
@


1.1
log
@Initial revision
@
text
@d6 4
d12 1
d15 2
d59 141
a254 17
 ** uint32_t xcb_x_print_printer_desc_len
 ** 
 ** @@param const xcb_x_print_printer_t *R
 ** @@returns uint32_t
 **
 *****************************************************************************/
 
uint32_t
xcb_x_print_printer_desc_len (const xcb_x_print_printer_t *R  /**< */)
{
    xcb_generic_iterator_t prev = xcb_x_print_printer_name_end(R);
    return * (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
}


/*****************************************************************************
 **
d282 1
a282 1
    return xcb_x_print_printer_desc_len(R);
d300 1
a300 1
    i.data = ((xcb_x_print_string8_t *) child.data) + (xcb_x_print_printer_desc_len(R));
d320 3
a322 1
    xcb_generic_iterator_t child = xcb_x_print_printer_description_end(R);
a324 1
    i->index = child.index;
d416 1
d450 1
d475 41
d555 1
d560 1
d565 1
d609 1
d614 1
d619 1
d677 12
a688 1
    return (xcb_x_print_print_get_printer_list_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
d720 1
d754 1
d759 41
d842 1
d847 1
d852 1
d899 1
d904 1
d909 1
d946 1
d983 1
d1017 1
d1051 1
d1108 1
d1145 1
d1179 1
d1213 1
d1270 1
d1307 1
d1344 1
d1381 1
d1418 1
d1455 1
d1492 1
d1529 1
d1534 55
d1640 1
d1645 1
d1650 1
d1655 1
d1711 1
d1716 1
d1721 1
d1726 1
d1731 29
d1795 1
d1835 1
d1944 1
d1981 1
d2019 1
d2057 1
d2062 29
d2128 1
d2133 1
d2175 1
d2180 1
d2185 167
d2384 1
d2421 1
a2480 17
 ** uint32_t xcb_x_print_print_input_selected_all_events_mask
 ** 
 ** @@param const xcb_x_print_print_input_selected_reply_t *R
 ** @@returns uint32_t
 **
 *****************************************************************************/
 
uint32_t
xcb_x_print_print_input_selected_all_events_mask (const xcb_x_print_print_input_selected_reply_t *R  /**< */)
{
    xcb_generic_iterator_t prev = xcb_x_print_print_input_selected_event_list_end(R);
    return * (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
}


/*****************************************************************************
 **
d2508 1
a2508 1
    return xcb_popcount(xcb_x_print_print_input_selected_all_events_mask(R));
d2526 1
a2526 1
    i.data = ((uint32_t *) child.data) + (xcb_popcount(xcb_x_print_print_input_selected_all_events_mask(R)));
d2588 1
d2629 1
d2654 29
d2724 1
d2729 1
d2775 1
d2780 1
d2857 29
d2932 1
d2937 1
d2988 1
d2993 1
d3030 1
d3067 1
d3092 29
d3150 1
d3184 1
d3296 1
d3336 1
d3393 1
d3430 1
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
