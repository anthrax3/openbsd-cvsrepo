head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	mKDGsTNpiR2zRHYQ;

1.4
date	2015.01.26.21.32.12;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	01TEvO4uNHLqFv7N;

1.3
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.22.20.31.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.10.17;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.10.17;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xvmc.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "xvmc.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xv.h"

xcb_extension_t xcb_xvmc_id = { "XVideo-MotionCompensation", 0 };

void
xcb_xvmc_context_next (xcb_xvmc_context_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xvmc_context_t);
}

xcb_generic_iterator_t
xcb_xvmc_context_end (xcb_xvmc_context_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xvmc_surface_next (xcb_xvmc_surface_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xvmc_surface_t);
}

xcb_generic_iterator_t
xcb_xvmc_surface_end (xcb_xvmc_surface_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xvmc_subpicture_next (xcb_xvmc_subpicture_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xvmc_subpicture_t);
}

xcb_generic_iterator_t
xcb_xvmc_subpicture_end (xcb_xvmc_subpicture_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xvmc_surface_info_next (xcb_xvmc_surface_info_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xvmc_surface_info_t);
}

xcb_generic_iterator_t
xcb_xvmc_surface_info_end (xcb_xvmc_surface_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_xvmc_query_version_cookie_t
xcb_xvmc_query_version (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xvmc_query_version_cookie_t xcb_ret;
    xcb_xvmc_query_version_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xvmc_query_version_cookie_t
xcb_xvmc_query_version_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xvmc_query_version_cookie_t xcb_ret;
    xcb_xvmc_query_version_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xvmc_query_version_reply_t *
xcb_xvmc_query_version_reply (xcb_connection_t                 *c,
                              xcb_xvmc_query_version_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_xvmc_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xvmc_list_surface_types_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xvmc_list_surface_types_reply_t *_aux = (xcb_xvmc_list_surface_types_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xvmc_list_surface_types_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* surfaces */
    xcb_block_len += _aux->num * sizeof(xcb_xvmc_surface_info_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xvmc_surface_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xvmc_list_surface_types_cookie_t
xcb_xvmc_list_surface_types (xcb_connection_t *c,
                             xcb_xv_port_t     port_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_LIST_SURFACE_TYPES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xvmc_list_surface_types_cookie_t xcb_ret;
    xcb_xvmc_list_surface_types_request_t xcb_out;

    xcb_out.port_id = port_id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xvmc_list_surface_types_cookie_t
xcb_xvmc_list_surface_types_unchecked (xcb_connection_t *c,
                                       xcb_xv_port_t     port_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_LIST_SURFACE_TYPES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xvmc_list_surface_types_cookie_t xcb_ret;
    xcb_xvmc_list_surface_types_request_t xcb_out;

    xcb_out.port_id = port_id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xvmc_surface_info_t *
xcb_xvmc_list_surface_types_surfaces (const xcb_xvmc_list_surface_types_reply_t *R)
{
    return (xcb_xvmc_surface_info_t *) (R + 1);
}

int
xcb_xvmc_list_surface_types_surfaces_length (const xcb_xvmc_list_surface_types_reply_t *R)
{
    return R->num;
}

xcb_xvmc_surface_info_iterator_t
xcb_xvmc_list_surface_types_surfaces_iterator (const xcb_xvmc_list_surface_types_reply_t *R)
{
    xcb_xvmc_surface_info_iterator_t i;
    i.data = (xcb_xvmc_surface_info_t *) (R + 1);
    i.rem = R->num;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xvmc_list_surface_types_reply_t *
xcb_xvmc_list_surface_types_reply (xcb_connection_t                      *c,
                                   xcb_xvmc_list_surface_types_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_xvmc_list_surface_types_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xvmc_create_context_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xvmc_create_context_reply_t *_aux = (xcb_xvmc_create_context_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xvmc_create_context_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* priv_data */
    xcb_block_len += _aux->length * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xvmc_create_context_cookie_t
xcb_xvmc_create_context (xcb_connection_t   *c,
                         xcb_xvmc_context_t  context_id,
                         xcb_xv_port_t       port_id,
                         xcb_xvmc_surface_t  surface_id,
                         uint16_t            width,
                         uint16_t            height,
                         uint32_t            flags)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_CREATE_CONTEXT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xvmc_create_context_cookie_t xcb_ret;
    xcb_xvmc_create_context_request_t xcb_out;

    xcb_out.context_id = context_id;
    xcb_out.port_id = port_id;
    xcb_out.surface_id = surface_id;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.flags = flags;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xvmc_create_context_cookie_t
xcb_xvmc_create_context_unchecked (xcb_connection_t   *c,
                                   xcb_xvmc_context_t  context_id,
                                   xcb_xv_port_t       port_id,
                                   xcb_xvmc_surface_t  surface_id,
                                   uint16_t            width,
                                   uint16_t            height,
                                   uint32_t            flags)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_CREATE_CONTEXT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xvmc_create_context_cookie_t xcb_ret;
    xcb_xvmc_create_context_request_t xcb_out;

    xcb_out.context_id = context_id;
    xcb_out.port_id = port_id;
    xcb_out.surface_id = surface_id;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.flags = flags;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_xvmc_create_context_priv_data (const xcb_xvmc_create_context_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_xvmc_create_context_priv_data_length (const xcb_xvmc_create_context_reply_t *R)
{
    return R->length;
}

xcb_generic_iterator_t
xcb_xvmc_create_context_priv_data_end (const xcb_xvmc_create_context_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xvmc_create_context_reply_t *
xcb_xvmc_create_context_reply (xcb_connection_t                  *c,
                               xcb_xvmc_create_context_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_xvmc_create_context_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_xvmc_destroy_context_checked (xcb_connection_t   *c,
                                  xcb_xvmc_context_t  context_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_DESTROY_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xvmc_destroy_context_request_t xcb_out;

    xcb_out.context_id = context_id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xvmc_destroy_context (xcb_connection_t   *c,
                          xcb_xvmc_context_t  context_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_DESTROY_CONTEXT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xvmc_destroy_context_request_t xcb_out;

    xcb_out.context_id = context_id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xvmc_create_surface_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xvmc_create_surface_reply_t *_aux = (xcb_xvmc_create_surface_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xvmc_create_surface_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* priv_data */
    xcb_block_len += _aux->length * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xvmc_create_surface_cookie_t
xcb_xvmc_create_surface (xcb_connection_t   *c,
                         xcb_xvmc_surface_t  surface_id,
                         xcb_xvmc_context_t  context_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_CREATE_SURFACE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xvmc_create_surface_cookie_t xcb_ret;
    xcb_xvmc_create_surface_request_t xcb_out;

    xcb_out.surface_id = surface_id;
    xcb_out.context_id = context_id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xvmc_create_surface_cookie_t
xcb_xvmc_create_surface_unchecked (xcb_connection_t   *c,
                                   xcb_xvmc_surface_t  surface_id,
                                   xcb_xvmc_context_t  context_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_CREATE_SURFACE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xvmc_create_surface_cookie_t xcb_ret;
    xcb_xvmc_create_surface_request_t xcb_out;

    xcb_out.surface_id = surface_id;
    xcb_out.context_id = context_id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_xvmc_create_surface_priv_data (const xcb_xvmc_create_surface_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_xvmc_create_surface_priv_data_length (const xcb_xvmc_create_surface_reply_t *R)
{
    return R->length;
}

xcb_generic_iterator_t
xcb_xvmc_create_surface_priv_data_end (const xcb_xvmc_create_surface_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xvmc_create_surface_reply_t *
xcb_xvmc_create_surface_reply (xcb_connection_t                  *c,
                               xcb_xvmc_create_surface_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_xvmc_create_surface_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_xvmc_destroy_surface_checked (xcb_connection_t   *c,
                                  xcb_xvmc_surface_t  surface_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_DESTROY_SURFACE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xvmc_destroy_surface_request_t xcb_out;

    xcb_out.surface_id = surface_id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xvmc_destroy_surface (xcb_connection_t   *c,
                          xcb_xvmc_surface_t  surface_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_DESTROY_SURFACE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xvmc_destroy_surface_request_t xcb_out;

    xcb_out.surface_id = surface_id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xvmc_create_subpicture_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xvmc_create_subpicture_reply_t *_aux = (xcb_xvmc_create_subpicture_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xvmc_create_subpicture_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* priv_data */
    xcb_block_len += _aux->length * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xvmc_create_subpicture_cookie_t
xcb_xvmc_create_subpicture (xcb_connection_t      *c,
                            xcb_xvmc_subpicture_t  subpicture_id,
                            xcb_xvmc_context_t     context,
                            uint32_t               xvimage_id,
                            uint16_t               width,
                            uint16_t               height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_CREATE_SUBPICTURE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xvmc_create_subpicture_cookie_t xcb_ret;
    xcb_xvmc_create_subpicture_request_t xcb_out;

    xcb_out.subpicture_id = subpicture_id;
    xcb_out.context = context;
    xcb_out.xvimage_id = xvimage_id;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xvmc_create_subpicture_cookie_t
xcb_xvmc_create_subpicture_unchecked (xcb_connection_t      *c,
                                      xcb_xvmc_subpicture_t  subpicture_id,
                                      xcb_xvmc_context_t     context,
                                      uint32_t               xvimage_id,
                                      uint16_t               width,
                                      uint16_t               height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_CREATE_SUBPICTURE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xvmc_create_subpicture_cookie_t xcb_ret;
    xcb_xvmc_create_subpicture_request_t xcb_out;

    xcb_out.subpicture_id = subpicture_id;
    xcb_out.context = context;
    xcb_out.xvimage_id = xvimage_id;
    xcb_out.width = width;
    xcb_out.height = height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_xvmc_create_subpicture_priv_data (const xcb_xvmc_create_subpicture_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_xvmc_create_subpicture_priv_data_length (const xcb_xvmc_create_subpicture_reply_t *R)
{
    return R->length;
}

xcb_generic_iterator_t
xcb_xvmc_create_subpicture_priv_data_end (const xcb_xvmc_create_subpicture_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xvmc_create_subpicture_reply_t *
xcb_xvmc_create_subpicture_reply (xcb_connection_t                     *c,
                                  xcb_xvmc_create_subpicture_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e)
{
    return (xcb_xvmc_create_subpicture_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_xvmc_destroy_subpicture_checked (xcb_connection_t      *c,
                                     xcb_xvmc_subpicture_t  subpicture_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_DESTROY_SUBPICTURE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xvmc_destroy_subpicture_request_t xcb_out;

    xcb_out.subpicture_id = subpicture_id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xvmc_destroy_subpicture (xcb_connection_t      *c,
                             xcb_xvmc_subpicture_t  subpicture_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_DESTROY_SUBPICTURE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xvmc_destroy_subpicture_request_t xcb_out;

    xcb_out.subpicture_id = subpicture_id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xvmc_list_subpicture_types_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xvmc_list_subpicture_types_reply_t *_aux = (xcb_xvmc_list_subpicture_types_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xvmc_list_subpicture_types_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* types */
    xcb_block_len += _aux->num * sizeof(xcb_xv_image_format_info_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xv_image_format_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xvmc_list_subpicture_types_cookie_t
xcb_xvmc_list_subpicture_types (xcb_connection_t   *c,
                                xcb_xv_port_t       port_id,
                                xcb_xvmc_surface_t  surface_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_LIST_SUBPICTURE_TYPES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xvmc_list_subpicture_types_cookie_t xcb_ret;
    xcb_xvmc_list_subpicture_types_request_t xcb_out;

    xcb_out.port_id = port_id;
    xcb_out.surface_id = surface_id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xvmc_list_subpicture_types_cookie_t
xcb_xvmc_list_subpicture_types_unchecked (xcb_connection_t   *c,
                                          xcb_xv_port_t       port_id,
                                          xcb_xvmc_surface_t  surface_id)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xvmc_id,
        .opcode = XCB_XVMC_LIST_SUBPICTURE_TYPES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xvmc_list_subpicture_types_cookie_t xcb_ret;
    xcb_xvmc_list_subpicture_types_request_t xcb_out;

    xcb_out.port_id = port_id;
    xcb_out.surface_id = surface_id;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xv_image_format_info_t *
xcb_xvmc_list_subpicture_types_types (const xcb_xvmc_list_subpicture_types_reply_t *R)
{
    return (xcb_xv_image_format_info_t *) (R + 1);
}

int
xcb_xvmc_list_subpicture_types_types_length (const xcb_xvmc_list_subpicture_types_reply_t *R)
{
    return R->num;
}

xcb_xv_image_format_info_iterator_t
xcb_xvmc_list_subpicture_types_types_iterator (const xcb_xvmc_list_subpicture_types_reply_t *R)
{
    xcb_xv_image_format_info_iterator_t i;
    i.data = (xcb_xv_image_format_info_t *) (R + 1);
    i.rem = R->num;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xvmc_list_subpicture_types_reply_t *
xcb_xvmc_list_subpicture_types_reply (xcb_connection_t                         *c,
                                      xcb_xvmc_list_subpicture_types_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e)
{
    return (xcb_xvmc_list_subpicture_types_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

@


1.4
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d22 1
a22 1
xcb_xvmc_context_next (xcb_xvmc_context_iterator_t *i  /**< */)
d30 1
a30 1
xcb_xvmc_context_end (xcb_xvmc_context_iterator_t i  /**< */)
d40 1
a40 1
xcb_xvmc_surface_next (xcb_xvmc_surface_iterator_t *i  /**< */)
d48 1
a48 1
xcb_xvmc_surface_end (xcb_xvmc_surface_iterator_t i  /**< */)
d58 1
a58 1
xcb_xvmc_subpicture_next (xcb_xvmc_subpicture_iterator_t *i  /**< */)
d66 1
a66 1
xcb_xvmc_subpicture_end (xcb_xvmc_subpicture_iterator_t i  /**< */)
d76 1
a76 1
xcb_xvmc_surface_info_next (xcb_xvmc_surface_info_iterator_t *i  /**< */)
d84 1
a84 1
xcb_xvmc_surface_info_end (xcb_xvmc_surface_info_iterator_t i  /**< */)
d94 1
a94 1
xcb_xvmc_query_version (xcb_connection_t *c  /**< */)
d97 4
a100 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_QUERY_VERSION,
        /* isvoid */ 0
d118 1
a118 1
xcb_xvmc_query_version_unchecked (xcb_connection_t *c  /**< */)
d121 4
a124 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_QUERY_VERSION,
        /* isvoid */ 0
d142 1
a142 1
xcb_xvmc_query_version_reply (xcb_connection_t                 *c  /**< */,
d144 1
a144 1
                              xcb_generic_error_t             **e  /**< */)
d150 1
a150 1
xcb_xvmc_list_surface_types_sizeof (const void  *_buffer  /**< */)
d181 2
a182 2
xcb_xvmc_list_surface_types (xcb_connection_t *c  /**< */,
                             xcb_xv_port_t     port_id  /**< */)
d185 4
a188 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_LIST_SURFACE_TYPES,
        /* isvoid */ 0
d207 2
a208 2
xcb_xvmc_list_surface_types_unchecked (xcb_connection_t *c  /**< */,
                                       xcb_xv_port_t     port_id  /**< */)
d211 4
a214 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_LIST_SURFACE_TYPES,
        /* isvoid */ 0
d233 1
a233 1
xcb_xvmc_list_surface_types_surfaces (const xcb_xvmc_list_surface_types_reply_t *R  /**< */)
d239 1
a239 1
xcb_xvmc_list_surface_types_surfaces_length (const xcb_xvmc_list_surface_types_reply_t *R  /**< */)
d245 1
a245 1
xcb_xvmc_list_surface_types_surfaces_iterator (const xcb_xvmc_list_surface_types_reply_t *R  /**< */)
d255 1
a255 1
xcb_xvmc_list_surface_types_reply (xcb_connection_t                      *c  /**< */,
d257 1
a257 1
                                   xcb_generic_error_t                  **e  /**< */)
d263 1
a263 1
xcb_xvmc_create_context_sizeof (const void  *_buffer  /**< */)
d294 7
a300 7
xcb_xvmc_create_context (xcb_connection_t   *c  /**< */,
                         xcb_xvmc_context_t  context_id  /**< */,
                         xcb_xv_port_t       port_id  /**< */,
                         xcb_xvmc_surface_t  surface_id  /**< */,
                         uint16_t            width  /**< */,
                         uint16_t            height  /**< */,
                         uint32_t            flags  /**< */)
d303 4
a306 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_CREATE_CONTEXT,
        /* isvoid */ 0
d330 7
a336 7
xcb_xvmc_create_context_unchecked (xcb_connection_t   *c  /**< */,
                                   xcb_xvmc_context_t  context_id  /**< */,
                                   xcb_xv_port_t       port_id  /**< */,
                                   xcb_xvmc_surface_t  surface_id  /**< */,
                                   uint16_t            width  /**< */,
                                   uint16_t            height  /**< */,
                                   uint32_t            flags  /**< */)
d339 4
a342 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_CREATE_CONTEXT,
        /* isvoid */ 0
d366 1
a366 1
xcb_xvmc_create_context_priv_data (const xcb_xvmc_create_context_reply_t *R  /**< */)
d372 1
a372 1
xcb_xvmc_create_context_priv_data_length (const xcb_xvmc_create_context_reply_t *R  /**< */)
d378 1
a378 1
xcb_xvmc_create_context_priv_data_end (const xcb_xvmc_create_context_reply_t *R  /**< */)
d388 1
a388 1
xcb_xvmc_create_context_reply (xcb_connection_t                  *c  /**< */,
d390 1
a390 1
                               xcb_generic_error_t              **e  /**< */)
d396 2
a397 2
xcb_xvmc_destroy_context_checked (xcb_connection_t   *c  /**< */,
                                  xcb_xvmc_context_t  context_id  /**< */)
d400 4
a403 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_DESTROY_CONTEXT,
        /* isvoid */ 1
d422 2
a423 2
xcb_xvmc_destroy_context (xcb_connection_t   *c  /**< */,
                          xcb_xvmc_context_t  context_id  /**< */)
d426 4
a429 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_DESTROY_CONTEXT,
        /* isvoid */ 1
d448 1
a448 1
xcb_xvmc_create_surface_sizeof (const void  *_buffer  /**< */)
d479 3
a481 3
xcb_xvmc_create_surface (xcb_connection_t   *c  /**< */,
                         xcb_xvmc_surface_t  surface_id  /**< */,
                         xcb_xvmc_context_t  context_id  /**< */)
d484 4
a487 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_CREATE_SURFACE,
        /* isvoid */ 0
d507 3
a509 3
xcb_xvmc_create_surface_unchecked (xcb_connection_t   *c  /**< */,
                                   xcb_xvmc_surface_t  surface_id  /**< */,
                                   xcb_xvmc_context_t  context_id  /**< */)
d512 4
a515 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_CREATE_SURFACE,
        /* isvoid */ 0
d535 1
a535 1
xcb_xvmc_create_surface_priv_data (const xcb_xvmc_create_surface_reply_t *R  /**< */)
d541 1
a541 1
xcb_xvmc_create_surface_priv_data_length (const xcb_xvmc_create_surface_reply_t *R  /**< */)
d547 1
a547 1
xcb_xvmc_create_surface_priv_data_end (const xcb_xvmc_create_surface_reply_t *R  /**< */)
d557 1
a557 1
xcb_xvmc_create_surface_reply (xcb_connection_t                  *c  /**< */,
d559 1
a559 1
                               xcb_generic_error_t              **e  /**< */)
d565 2
a566 2
xcb_xvmc_destroy_surface_checked (xcb_connection_t   *c  /**< */,
                                  xcb_xvmc_surface_t  surface_id  /**< */)
d569 4
a572 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_DESTROY_SURFACE,
        /* isvoid */ 1
d591 2
a592 2
xcb_xvmc_destroy_surface (xcb_connection_t   *c  /**< */,
                          xcb_xvmc_surface_t  surface_id  /**< */)
d595 4
a598 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_DESTROY_SURFACE,
        /* isvoid */ 1
d617 1
a617 1
xcb_xvmc_create_subpicture_sizeof (const void  *_buffer  /**< */)
d648 6
a653 6
xcb_xvmc_create_subpicture (xcb_connection_t      *c  /**< */,
                            xcb_xvmc_subpicture_t  subpicture_id  /**< */,
                            xcb_xvmc_context_t     context  /**< */,
                            uint32_t               xvimage_id  /**< */,
                            uint16_t               width  /**< */,
                            uint16_t               height  /**< */)
d656 4
a659 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_CREATE_SUBPICTURE,
        /* isvoid */ 0
d682 6
a687 6
xcb_xvmc_create_subpicture_unchecked (xcb_connection_t      *c  /**< */,
                                      xcb_xvmc_subpicture_t  subpicture_id  /**< */,
                                      xcb_xvmc_context_t     context  /**< */,
                                      uint32_t               xvimage_id  /**< */,
                                      uint16_t               width  /**< */,
                                      uint16_t               height  /**< */)
d690 4
a693 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_CREATE_SUBPICTURE,
        /* isvoid */ 0
d716 1
a716 1
xcb_xvmc_create_subpicture_priv_data (const xcb_xvmc_create_subpicture_reply_t *R  /**< */)
d722 1
a722 1
xcb_xvmc_create_subpicture_priv_data_length (const xcb_xvmc_create_subpicture_reply_t *R  /**< */)
d728 1
a728 1
xcb_xvmc_create_subpicture_priv_data_end (const xcb_xvmc_create_subpicture_reply_t *R  /**< */)
d738 1
a738 1
xcb_xvmc_create_subpicture_reply (xcb_connection_t                     *c  /**< */,
d740 1
a740 1
                                  xcb_generic_error_t                 **e  /**< */)
d746 2
a747 2
xcb_xvmc_destroy_subpicture_checked (xcb_connection_t      *c  /**< */,
                                     xcb_xvmc_subpicture_t  subpicture_id  /**< */)
d750 4
a753 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_DESTROY_SUBPICTURE,
        /* isvoid */ 1
d772 2
a773 2
xcb_xvmc_destroy_subpicture (xcb_connection_t      *c  /**< */,
                             xcb_xvmc_subpicture_t  subpicture_id  /**< */)
d776 4
a779 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_DESTROY_SUBPICTURE,
        /* isvoid */ 1
d798 1
a798 1
xcb_xvmc_list_subpicture_types_sizeof (const void  *_buffer  /**< */)
d829 3
a831 3
xcb_xvmc_list_subpicture_types (xcb_connection_t   *c  /**< */,
                                xcb_xv_port_t       port_id  /**< */,
                                xcb_xvmc_surface_t  surface_id  /**< */)
d834 4
a837 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_LIST_SUBPICTURE_TYPES,
        /* isvoid */ 0
d857 3
a859 3
xcb_xvmc_list_subpicture_types_unchecked (xcb_connection_t   *c  /**< */,
                                          xcb_xv_port_t       port_id  /**< */,
                                          xcb_xvmc_surface_t  surface_id  /**< */)
d862 4
a865 4
        /* count */ 2,
        /* ext */ &xcb_xvmc_id,
        /* opcode */ XCB_XVMC_LIST_SUBPICTURE_TYPES,
        /* isvoid */ 0
d885 1
a885 1
xcb_xvmc_list_subpicture_types_types (const xcb_xvmc_list_subpicture_types_reply_t *R  /**< */)
d891 1
a891 1
xcb_xvmc_list_subpicture_types_types_length (const xcb_xvmc_list_subpicture_types_reply_t *R  /**< */)
d897 1
a897 1
xcb_xvmc_list_subpicture_types_types_iterator (const xcb_xvmc_list_subpicture_types_reply_t *R  /**< */)
d907 1
a907 1
xcb_xvmc_list_subpicture_types_reply (xcb_connection_t                         *c  /**< */,
d909 1
a909 1
                                      xcb_generic_error_t                     **e  /**< */)
@


1.3
log
@Update build system and generated files for libxcb 1.10.
@
text
@a16 2
#include "xproto.h"
#include "shm.h"
a20 10

/*****************************************************************************
 **
 ** void xcb_xvmc_context_next
 ** 
 ** @@param xcb_xvmc_context_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a28 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xvmc_context_end
 ** 
 ** @@param xcb_xvmc_context_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a38 10

/*****************************************************************************
 **
 ** void xcb_xvmc_surface_next
 ** 
 ** @@param xcb_xvmc_surface_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a46 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xvmc_surface_end
 ** 
 ** @@param xcb_xvmc_surface_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a56 10

/*****************************************************************************
 **
 ** void xcb_xvmc_subpicture_next
 ** 
 ** @@param xcb_xvmc_subpicture_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a64 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xvmc_subpicture_end
 ** 
 ** @@param xcb_xvmc_subpicture_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a74 10

/*****************************************************************************
 **
 ** void xcb_xvmc_surface_info_next
 ** 
 ** @@param xcb_xvmc_surface_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a82 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xvmc_surface_info_end
 ** 
 ** @@param xcb_xvmc_surface_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a92 10

/*****************************************************************************
 **
 ** xcb_xvmc_query_version_cookie_t xcb_xvmc_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xvmc_query_version_cookie_t
 **
 *****************************************************************************/
 
d102 1
a102 1
    
d106 2
a107 2
    
    
d112 1
a112 1
    
a116 10

/*****************************************************************************
 **
 ** xcb_xvmc_query_version_cookie_t xcb_xvmc_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xvmc_query_version_cookie_t
 **
 *****************************************************************************/
 
d126 1
a126 1
    
d130 2
a131 2
    
    
d136 1
a136 1
    
a140 12

/*****************************************************************************
 **
 ** xcb_xvmc_query_version_reply_t * xcb_xvmc_query_version_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xvmc_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_xvmc_query_version_reply_t *
 **
 *****************************************************************************/
 
a179 11

/*****************************************************************************
 **
 ** xcb_xvmc_list_surface_types_cookie_t xcb_xvmc_list_surface_types
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port_id
 ** @@returns xcb_xvmc_list_surface_types_cookie_t
 **
 *****************************************************************************/
 
d190 1
a190 1
    
d194 1
a194 1
    
d196 1
a196 1
    
d201 1
a201 1
    
a205 11

/*****************************************************************************
 **
 ** xcb_xvmc_list_surface_types_cookie_t xcb_xvmc_list_surface_types_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_xv_port_t     port_id
 ** @@returns xcb_xvmc_list_surface_types_cookie_t
 **
 *****************************************************************************/
 
d216 1
a216 1
    
d220 1
a220 1
    
d222 1
a222 1
    
d227 1
a227 1
    
a231 10

/*****************************************************************************
 **
 ** xcb_xvmc_surface_info_t * xcb_xvmc_list_surface_types_surfaces
 ** 
 ** @@param const xcb_xvmc_list_surface_types_reply_t *R
 ** @@returns xcb_xvmc_surface_info_t *
 **
 *****************************************************************************/
 
a237 10

/*****************************************************************************
 **
 ** int xcb_xvmc_list_surface_types_surfaces_length
 ** 
 ** @@param const xcb_xvmc_list_surface_types_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a243 10

/*****************************************************************************
 **
 ** xcb_xvmc_surface_info_iterator_t xcb_xvmc_list_surface_types_surfaces_iterator
 ** 
 ** @@param const xcb_xvmc_list_surface_types_reply_t *R
 ** @@returns xcb_xvmc_surface_info_iterator_t
 **
 *****************************************************************************/
 
a253 12

/*****************************************************************************
 **
 ** xcb_xvmc_list_surface_types_reply_t * xcb_xvmc_list_surface_types_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xvmc_list_surface_types_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_xvmc_list_surface_types_reply_t *
 **
 *****************************************************************************/
 
a292 16

/*****************************************************************************
 **
 ** xcb_xvmc_create_context_cookie_t xcb_xvmc_create_context
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_context_t  context_id
 ** @@param xcb_xv_port_t       port_id
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@param uint16_t            width
 ** @@param uint16_t            height
 ** @@param uint32_t            flags
 ** @@returns xcb_xvmc_create_context_cookie_t
 **
 *****************************************************************************/
 
d308 1
a308 1
    
d312 1
a312 1
    
d319 1
a319 1
    
d324 1
a324 1
    
a328 16

/*****************************************************************************
 **
 ** xcb_xvmc_create_context_cookie_t xcb_xvmc_create_context_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_context_t  context_id
 ** @@param xcb_xv_port_t       port_id
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@param uint16_t            width
 ** @@param uint16_t            height
 ** @@param uint32_t            flags
 ** @@returns xcb_xvmc_create_context_cookie_t
 **
 *****************************************************************************/
 
d344 1
a344 1
    
d348 1
a348 1
    
d355 1
a355 1
    
d360 1
a360 1
    
a364 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xvmc_create_context_priv_data
 ** 
 ** @@param const xcb_xvmc_create_context_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a370 10

/*****************************************************************************
 **
 ** int xcb_xvmc_create_context_priv_data_length
 ** 
 ** @@param const xcb_xvmc_create_context_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a376 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xvmc_create_context_priv_data_end
 ** 
 ** @@param const xcb_xvmc_create_context_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a386 12

/*****************************************************************************
 **
 ** xcb_xvmc_create_context_reply_t * xcb_xvmc_create_context_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_xvmc_create_context_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_xvmc_create_context_reply_t *
 **
 *****************************************************************************/
 
a394 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xvmc_destroy_context_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_context_t  context_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d405 1
a405 1
    
d409 1
a409 1
    
d411 1
a411 1
    
d416 1
a416 1
    
a420 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xvmc_destroy_context
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_context_t  context_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d431 1
a431 1
    
d435 1
a435 1
    
d437 1
a437 1
    
d442 1
a442 1
    
a477 12

/*****************************************************************************
 **
 ** xcb_xvmc_create_surface_cookie_t xcb_xvmc_create_surface
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@param xcb_xvmc_context_t  context_id
 ** @@returns xcb_xvmc_create_surface_cookie_t
 **
 *****************************************************************************/
 
d489 1
a489 1
    
d493 1
a493 1
    
d496 1
a496 1
    
d501 1
a501 1
    
a505 12

/*****************************************************************************
 **
 ** xcb_xvmc_create_surface_cookie_t xcb_xvmc_create_surface_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@param xcb_xvmc_context_t  context_id
 ** @@returns xcb_xvmc_create_surface_cookie_t
 **
 *****************************************************************************/
 
d517 1
a517 1
    
d521 1
a521 1
    
d524 1
a524 1
    
d529 1
a529 1
    
a533 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xvmc_create_surface_priv_data
 ** 
 ** @@param const xcb_xvmc_create_surface_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a539 10

/*****************************************************************************
 **
 ** int xcb_xvmc_create_surface_priv_data_length
 ** 
 ** @@param const xcb_xvmc_create_surface_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a545 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xvmc_create_surface_priv_data_end
 ** 
 ** @@param const xcb_xvmc_create_surface_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a555 12

/*****************************************************************************
 **
 ** xcb_xvmc_create_surface_reply_t * xcb_xvmc_create_surface_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_xvmc_create_surface_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_xvmc_create_surface_reply_t *
 **
 *****************************************************************************/
 
a563 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xvmc_destroy_surface_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d574 1
a574 1
    
d578 1
a578 1
    
d580 1
a580 1
    
d585 1
a585 1
    
a589 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xvmc_destroy_surface
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d600 1
a600 1
    
d604 1
a604 1
    
d606 1
a606 1
    
d611 1
a611 1
    
a646 15

/*****************************************************************************
 **
 ** xcb_xvmc_create_subpicture_cookie_t xcb_xvmc_create_subpicture
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xvmc_subpicture_t  subpicture_id
 ** @@param xcb_xvmc_context_t     context
 ** @@param uint32_t               xvimage_id
 ** @@param uint16_t               width
 ** @@param uint16_t               height
 ** @@returns xcb_xvmc_create_subpicture_cookie_t
 **
 *****************************************************************************/
 
d661 1
a661 1
    
d665 1
a665 1
    
d671 1
a671 1
    
d676 1
a676 1
    
a680 15

/*****************************************************************************
 **
 ** xcb_xvmc_create_subpicture_cookie_t xcb_xvmc_create_subpicture_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xvmc_subpicture_t  subpicture_id
 ** @@param xcb_xvmc_context_t     context
 ** @@param uint32_t               xvimage_id
 ** @@param uint16_t               width
 ** @@param uint16_t               height
 ** @@returns xcb_xvmc_create_subpicture_cookie_t
 **
 *****************************************************************************/
 
d695 1
a695 1
    
d699 1
a699 1
    
d705 1
a705 1
    
d710 1
a710 1
    
a714 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xvmc_create_subpicture_priv_data
 ** 
 ** @@param const xcb_xvmc_create_subpicture_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a720 10

/*****************************************************************************
 **
 ** int xcb_xvmc_create_subpicture_priv_data_length
 ** 
 ** @@param const xcb_xvmc_create_subpicture_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a726 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xvmc_create_subpicture_priv_data_end
 ** 
 ** @@param const xcb_xvmc_create_subpicture_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a736 12

/*****************************************************************************
 **
 ** xcb_xvmc_create_subpicture_reply_t * xcb_xvmc_create_subpicture_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_xvmc_create_subpicture_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_xvmc_create_subpicture_reply_t *
 **
 *****************************************************************************/
 
a744 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xvmc_destroy_subpicture_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xvmc_subpicture_t  subpicture_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d755 1
a755 1
    
d759 1
a759 1
    
d761 1
a761 1
    
d766 1
a766 1
    
a770 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xvmc_destroy_subpicture
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xvmc_subpicture_t  subpicture_id
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d781 1
a781 1
    
d785 1
a785 1
    
d787 1
a787 1
    
d792 1
a792 1
    
a827 12

/*****************************************************************************
 **
 ** xcb_xvmc_list_subpicture_types_cookie_t xcb_xvmc_list_subpicture_types
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xv_port_t       port_id
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@returns xcb_xvmc_list_subpicture_types_cookie_t
 **
 *****************************************************************************/
 
d839 1
a839 1
    
d843 1
a843 1
    
d846 1
a846 1
    
d851 1
a851 1
    
a855 12

/*****************************************************************************
 **
 ** xcb_xvmc_list_subpicture_types_cookie_t xcb_xvmc_list_subpicture_types_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_xv_port_t       port_id
 ** @@param xcb_xvmc_surface_t  surface_id
 ** @@returns xcb_xvmc_list_subpicture_types_cookie_t
 **
 *****************************************************************************/
 
d867 1
a867 1
    
d871 1
a871 1
    
d874 1
a874 1
    
d879 1
a879 1
    
a883 10

/*****************************************************************************
 **
 ** xcb_xv_image_format_info_t * xcb_xvmc_list_subpicture_types_types
 ** 
 ** @@param const xcb_xvmc_list_subpicture_types_reply_t *R
 ** @@returns xcb_xv_image_format_info_t *
 **
 *****************************************************************************/
 
a889 10

/*****************************************************************************
 **
 ** int xcb_xvmc_list_subpicture_types_types_length
 ** 
 ** @@param const xcb_xvmc_list_subpicture_types_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a895 10

/*****************************************************************************
 **
 ** xcb_xv_image_format_info_iterator_t xcb_xvmc_list_subpicture_types_types_iterator
 ** 
 ** @@param const xcb_xvmc_list_subpicture_types_reply_t *R
 ** @@returns xcb_xv_image_format_info_iterator_t
 **
 *****************************************************************************/
 
a905 12

/*****************************************************************************
 **
 ** xcb_xvmc_list_subpicture_types_reply_t * xcb_xvmc_list_subpicture_types_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_xvmc_list_subpicture_types_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_xvmc_list_subpicture_types_reply_t *
 **
 *****************************************************************************/
 
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d271 1
a271 1
    unsigned int xcb_align_to;
d276 2
d448 1
a448 1
    unsigned int xcb_align_to;
d453 2
d729 1
a729 1
    unsigned int xcb_align_to;
d734 2
d986 1
a986 1
    unsigned int xcb_align_to;
d991 2
d1261 1
a1261 1
    unsigned int xcb_align_to;
d1266 2
@


1.1
log
@Initial revision
@
text
@d6 4
d12 1
d15 2
d204 1
d238 1
d263 29
d324 1
d361 1
d438 29
d514 1
d566 1
d675 1
d712 1
d717 29
d781 1
d821 1
d930 1
d967 1
d972 29
d1045 1
d1094 1
d1203 1
d1240 1
d1245 29
d1309 1
d1349 1
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
