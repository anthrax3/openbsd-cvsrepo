head	1.4;
access;
symbols
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.6
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	mKDGsTNpiR2zRHYQ;

1.3
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	01TEvO4uNHLqFv7N;

1.2
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.54;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.54;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xinerama.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_Xinerama_API XCB Xinerama API
 * @@brief Xinerama XCB Protocol Implementation.
 * @@{
 **/

#ifndef __XINERAMA_H
#define __XINERAMA_H

#include "xcb.h"
#include "xproto.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_XINERAMA_MAJOR_VERSION 1
#define XCB_XINERAMA_MINOR_VERSION 1

extern xcb_extension_t xcb_xinerama_id;

/**
 * @@brief xcb_xinerama_screen_info_t
 **/
typedef struct xcb_xinerama_screen_info_t {
    int16_t  x_org;
    int16_t  y_org;
    uint16_t width;
    uint16_t height;
} xcb_xinerama_screen_info_t;

/**
 * @@brief xcb_xinerama_screen_info_iterator_t
 **/
typedef struct xcb_xinerama_screen_info_iterator_t {
    xcb_xinerama_screen_info_t *data;
    int                         rem;
    int                         index;
} xcb_xinerama_screen_info_iterator_t;

/**
 * @@brief xcb_xinerama_query_version_cookie_t
 **/
typedef struct xcb_xinerama_query_version_cookie_t {
    unsigned int sequence;
} xcb_xinerama_query_version_cookie_t;

/** Opcode for xcb_xinerama_query_version. */
#define XCB_XINERAMA_QUERY_VERSION 0

/**
 * @@brief xcb_xinerama_query_version_request_t
 **/
typedef struct xcb_xinerama_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  major;
    uint8_t  minor;
} xcb_xinerama_query_version_request_t;

/**
 * @@brief xcb_xinerama_query_version_reply_t
 **/
typedef struct xcb_xinerama_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t major;
    uint16_t minor;
} xcb_xinerama_query_version_reply_t;

/**
 * @@brief xcb_xinerama_get_state_cookie_t
 **/
typedef struct xcb_xinerama_get_state_cookie_t {
    unsigned int sequence;
} xcb_xinerama_get_state_cookie_t;

/** Opcode for xcb_xinerama_get_state. */
#define XCB_XINERAMA_GET_STATE 1

/**
 * @@brief xcb_xinerama_get_state_request_t
 **/
typedef struct xcb_xinerama_get_state_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
} xcb_xinerama_get_state_request_t;

/**
 * @@brief xcb_xinerama_get_state_reply_t
 **/
typedef struct xcb_xinerama_get_state_reply_t {
    uint8_t      response_type;
    uint8_t      state;
    uint16_t     sequence;
    uint32_t     length;
    xcb_window_t window;
} xcb_xinerama_get_state_reply_t;

/**
 * @@brief xcb_xinerama_get_screen_count_cookie_t
 **/
typedef struct xcb_xinerama_get_screen_count_cookie_t {
    unsigned int sequence;
} xcb_xinerama_get_screen_count_cookie_t;

/** Opcode for xcb_xinerama_get_screen_count. */
#define XCB_XINERAMA_GET_SCREEN_COUNT 2

/**
 * @@brief xcb_xinerama_get_screen_count_request_t
 **/
typedef struct xcb_xinerama_get_screen_count_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
} xcb_xinerama_get_screen_count_request_t;

/**
 * @@brief xcb_xinerama_get_screen_count_reply_t
 **/
typedef struct xcb_xinerama_get_screen_count_reply_t {
    uint8_t      response_type;
    uint8_t      screen_count;
    uint16_t     sequence;
    uint32_t     length;
    xcb_window_t window;
} xcb_xinerama_get_screen_count_reply_t;

/**
 * @@brief xcb_xinerama_get_screen_size_cookie_t
 **/
typedef struct xcb_xinerama_get_screen_size_cookie_t {
    unsigned int sequence;
} xcb_xinerama_get_screen_size_cookie_t;

/** Opcode for xcb_xinerama_get_screen_size. */
#define XCB_XINERAMA_GET_SCREEN_SIZE 3

/**
 * @@brief xcb_xinerama_get_screen_size_request_t
 **/
typedef struct xcb_xinerama_get_screen_size_request_t {
    uint8_t      major_opcode;
    uint8_t      minor_opcode;
    uint16_t     length;
    xcb_window_t window;
    uint32_t     screen;
} xcb_xinerama_get_screen_size_request_t;

/**
 * @@brief xcb_xinerama_get_screen_size_reply_t
 **/
typedef struct xcb_xinerama_get_screen_size_reply_t {
    uint8_t      response_type;
    uint8_t      pad0;
    uint16_t     sequence;
    uint32_t     length;
    uint32_t     width;
    uint32_t     height;
    xcb_window_t window;
    uint32_t     screen;
} xcb_xinerama_get_screen_size_reply_t;

/**
 * @@brief xcb_xinerama_is_active_cookie_t
 **/
typedef struct xcb_xinerama_is_active_cookie_t {
    unsigned int sequence;
} xcb_xinerama_is_active_cookie_t;

/** Opcode for xcb_xinerama_is_active. */
#define XCB_XINERAMA_IS_ACTIVE 4

/**
 * @@brief xcb_xinerama_is_active_request_t
 **/
typedef struct xcb_xinerama_is_active_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_xinerama_is_active_request_t;

/**
 * @@brief xcb_xinerama_is_active_reply_t
 **/
typedef struct xcb_xinerama_is_active_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t state;
} xcb_xinerama_is_active_reply_t;

/**
 * @@brief xcb_xinerama_query_screens_cookie_t
 **/
typedef struct xcb_xinerama_query_screens_cookie_t {
    unsigned int sequence;
} xcb_xinerama_query_screens_cookie_t;

/** Opcode for xcb_xinerama_query_screens. */
#define XCB_XINERAMA_QUERY_SCREENS 5

/**
 * @@brief xcb_xinerama_query_screens_request_t
 **/
typedef struct xcb_xinerama_query_screens_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_xinerama_query_screens_request_t;

/**
 * @@brief xcb_xinerama_query_screens_reply_t
 **/
typedef struct xcb_xinerama_query_screens_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t number;
    uint8_t  pad1[20];
} xcb_xinerama_query_screens_reply_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xinerama_screen_info_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xinerama_screen_info_t)
 */
void
xcb_xinerama_screen_info_next (xcb_xinerama_screen_info_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xinerama_screen_info_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xinerama_screen_info_end (xcb_xinerama_screen_info_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xinerama_query_version_cookie_t
xcb_xinerama_query_version (xcb_connection_t *c,
                            uint8_t           major,
                            uint8_t           minor);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xinerama_query_version_cookie_t
xcb_xinerama_query_version_unchecked (xcb_connection_t *c,
                                      uint8_t           major,
                                      uint8_t           minor);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xinerama_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xinerama_query_version_reply_t *
xcb_xinerama_query_version_reply (xcb_connection_t                     *c,
                                  xcb_xinerama_query_version_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xinerama_get_state_cookie_t
xcb_xinerama_get_state (xcb_connection_t *c,
                        xcb_window_t      window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xinerama_get_state_cookie_t
xcb_xinerama_get_state_unchecked (xcb_connection_t *c,
                                  xcb_window_t      window);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xinerama_get_state_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xinerama_get_state_reply_t *
xcb_xinerama_get_state_reply (xcb_connection_t                 *c,
                              xcb_xinerama_get_state_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xinerama_get_screen_count_cookie_t
xcb_xinerama_get_screen_count (xcb_connection_t *c,
                               xcb_window_t      window);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xinerama_get_screen_count_cookie_t
xcb_xinerama_get_screen_count_unchecked (xcb_connection_t *c,
                                         xcb_window_t      window);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xinerama_get_screen_count_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xinerama_get_screen_count_reply_t *
xcb_xinerama_get_screen_count_reply (xcb_connection_t                        *c,
                                     xcb_xinerama_get_screen_count_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xinerama_get_screen_size_cookie_t
xcb_xinerama_get_screen_size (xcb_connection_t *c,
                              xcb_window_t      window,
                              uint32_t          screen);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xinerama_get_screen_size_cookie_t
xcb_xinerama_get_screen_size_unchecked (xcb_connection_t *c,
                                        xcb_window_t      window,
                                        uint32_t          screen);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xinerama_get_screen_size_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xinerama_get_screen_size_reply_t *
xcb_xinerama_get_screen_size_reply (xcb_connection_t                       *c,
                                    xcb_xinerama_get_screen_size_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xinerama_is_active_cookie_t
xcb_xinerama_is_active (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xinerama_is_active_cookie_t
xcb_xinerama_is_active_unchecked (xcb_connection_t *c);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xinerama_is_active_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xinerama_is_active_reply_t *
xcb_xinerama_is_active_reply (xcb_connection_t                 *c,
                              xcb_xinerama_is_active_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

int
xcb_xinerama_query_screens_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xinerama_query_screens_cookie_t
xcb_xinerama_query_screens (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xinerama_query_screens_cookie_t
xcb_xinerama_query_screens_unchecked (xcb_connection_t *c);

xcb_xinerama_screen_info_t *
xcb_xinerama_query_screens_screen_info (const xcb_xinerama_query_screens_reply_t *R);

int
xcb_xinerama_query_screens_screen_info_length (const xcb_xinerama_query_screens_reply_t *R);

xcb_xinerama_screen_info_iterator_t
xcb_xinerama_query_screens_screen_info_iterator (const xcb_xinerama_query_screens_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xinerama_query_screens_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xinerama_query_screens_reply_t *
xcb_xinerama_query_screens_reply (xcb_connection_t                     *c,
                                  xcb_xinerama_query_screens_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.3
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d31 4
a34 4
    int16_t  x_org; /**<  */
    int16_t  y_org; /**<  */
    uint16_t width; /**<  */
    uint16_t height; /**<  */
d41 3
a43 3
    xcb_xinerama_screen_info_t *data; /**<  */
    int                         rem; /**<  */
    int                         index; /**<  */
d50 1
a50 1
    unsigned int sequence; /**<  */
d60 5
a64 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  major; /**<  */
    uint8_t  minor; /**<  */
d71 6
a76 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t major; /**<  */
    uint16_t minor; /**<  */
d83 1
a83 1
    unsigned int sequence; /**<  */
d93 4
a96 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
d103 5
a107 5
    uint8_t      response_type; /**<  */
    uint8_t      state; /**<  */
    uint16_t     sequence; /**<  */
    uint32_t     length; /**<  */
    xcb_window_t window; /**<  */
d114 1
a114 1
    unsigned int sequence; /**<  */
d124 4
a127 4
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
d134 5
a138 5
    uint8_t      response_type; /**<  */
    uint8_t      screen_count; /**<  */
    uint16_t     sequence; /**<  */
    uint32_t     length; /**<  */
    xcb_window_t window; /**<  */
d145 1
a145 1
    unsigned int sequence; /**<  */
d155 5
a159 5
    uint8_t      major_opcode; /**<  */
    uint8_t      minor_opcode; /**<  */
    uint16_t     length; /**<  */
    xcb_window_t window; /**<  */
    uint32_t     screen; /**<  */
d166 8
a173 8
    uint8_t      response_type; /**<  */
    uint8_t      pad0; /**<  */
    uint16_t     sequence; /**<  */
    uint32_t     length; /**<  */
    uint32_t     width; /**<  */
    uint32_t     height; /**<  */
    xcb_window_t window; /**<  */
    uint32_t     screen; /**<  */
d180 1
a180 1
    unsigned int sequence; /**<  */
d190 3
a192 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d199 5
a203 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t state; /**<  */
d210 1
a210 1
    unsigned int sequence; /**<  */
d220 3
a222 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d229 6
a234 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t number; /**<  */
    uint8_t  pad1[20]; /**<  */
d246 1
a246 1
xcb_xinerama_screen_info_next (xcb_xinerama_screen_info_iterator_t *i  /**< */);
d258 1
a258 1
xcb_xinerama_screen_info_end (xcb_xinerama_screen_info_iterator_t i  /**< */);
d269 3
a271 3
xcb_xinerama_query_version (xcb_connection_t *c  /**< */,
                            uint8_t           major  /**< */,
                            uint8_t           minor  /**< */);
d285 3
a287 3
xcb_xinerama_query_version_unchecked (xcb_connection_t *c  /**< */,
                                      uint8_t           major  /**< */,
                                      uint8_t           minor  /**< */);
d304 1
a304 1
xcb_xinerama_query_version_reply (xcb_connection_t                     *c  /**< */,
d306 1
a306 1
                                  xcb_generic_error_t                 **e  /**< */);
d317 2
a318 2
xcb_xinerama_get_state (xcb_connection_t *c  /**< */,
                        xcb_window_t      window  /**< */);
d332 2
a333 2
xcb_xinerama_get_state_unchecked (xcb_connection_t *c  /**< */,
                                  xcb_window_t      window  /**< */);
d350 1
a350 1
xcb_xinerama_get_state_reply (xcb_connection_t                 *c  /**< */,
d352 1
a352 1
                              xcb_generic_error_t             **e  /**< */);
d363 2
a364 2
xcb_xinerama_get_screen_count (xcb_connection_t *c  /**< */,
                               xcb_window_t      window  /**< */);
d378 2
a379 2
xcb_xinerama_get_screen_count_unchecked (xcb_connection_t *c  /**< */,
                                         xcb_window_t      window  /**< */);
d396 1
a396 1
xcb_xinerama_get_screen_count_reply (xcb_connection_t                        *c  /**< */,
d398 1
a398 1
                                     xcb_generic_error_t                    **e  /**< */);
d409 3
a411 3
xcb_xinerama_get_screen_size (xcb_connection_t *c  /**< */,
                              xcb_window_t      window  /**< */,
                              uint32_t          screen  /**< */);
d425 3
a427 3
xcb_xinerama_get_screen_size_unchecked (xcb_connection_t *c  /**< */,
                                        xcb_window_t      window  /**< */,
                                        uint32_t          screen  /**< */);
d444 1
a444 1
xcb_xinerama_get_screen_size_reply (xcb_connection_t                       *c  /**< */,
d446 1
a446 1
                                    xcb_generic_error_t                   **e  /**< */);
d457 1
a457 1
xcb_xinerama_is_active (xcb_connection_t *c  /**< */);
d471 1
a471 1
xcb_xinerama_is_active_unchecked (xcb_connection_t *c  /**< */);
d488 1
a488 1
xcb_xinerama_is_active_reply (xcb_connection_t                 *c  /**< */,
d490 1
a490 1
                              xcb_generic_error_t             **e  /**< */);
d493 1
a493 1
xcb_xinerama_query_screens_sizeof (const void  *_buffer  /**< */);
d504 1
a504 1
xcb_xinerama_query_screens (xcb_connection_t *c  /**< */);
d518 1
a518 1
xcb_xinerama_query_screens_unchecked (xcb_connection_t *c  /**< */);
d521 1
a521 1
xcb_xinerama_query_screens_screen_info (const xcb_xinerama_query_screens_reply_t *R  /**< */);
d524 1
a524 1
xcb_xinerama_query_screens_screen_info_length (const xcb_xinerama_query_screens_reply_t *R  /**< */);
d527 1
a527 1
xcb_xinerama_query_screens_screen_info_iterator (const xcb_xinerama_query_screens_reply_t *R  /**< */);
d544 1
a544 1
xcb_xinerama_query_screens_reply (xcb_connection_t                     *c  /**< */,
d546 1
a546 1
                                  xcb_generic_error_t                 **e  /**< */);
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d24 1
a24 1
  
a244 10

/*****************************************************************************
 **
 ** void xcb_xinerama_screen_info_next
 ** 
 ** @@param xcb_xinerama_screen_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a256 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xinerama_screen_info_end
 ** 
 ** @@param xcb_xinerama_screen_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d266 1
a266 1
 * 
a267 12

/*****************************************************************************
 **
 ** xcb_xinerama_query_version_cookie_t xcb_xinerama_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           major
 ** @@param uint8_t           minor
 ** @@returns xcb_xinerama_query_version_cookie_t
 **
 *****************************************************************************/
 
d279 1
a279 1
 * 
a283 12

/*****************************************************************************
 **
 ** xcb_xinerama_query_version_cookie_t xcb_xinerama_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           major
 ** @@param uint8_t           minor
 ** @@returns xcb_xinerama_query_version_cookie_t
 **
 *****************************************************************************/
 
d296 1
a296 1
 * 
a302 12

/*****************************************************************************
 **
 ** xcb_xinerama_query_version_reply_t * xcb_xinerama_query_version_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_xinerama_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_xinerama_query_version_reply_t *
 **
 *****************************************************************************/
 
d314 1
a314 1
 * 
a315 11

/*****************************************************************************
 **
 ** xcb_xinerama_get_state_cookie_t xcb_xinerama_get_state
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_xinerama_get_state_cookie_t
 **
 *****************************************************************************/
 
d326 1
a326 1
 * 
a330 11

/*****************************************************************************
 **
 ** xcb_xinerama_get_state_cookie_t xcb_xinerama_get_state_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_xinerama_get_state_cookie_t
 **
 *****************************************************************************/
 
d342 1
a342 1
 * 
a348 12

/*****************************************************************************
 **
 ** xcb_xinerama_get_state_reply_t * xcb_xinerama_get_state_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xinerama_get_state_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_xinerama_get_state_reply_t *
 **
 *****************************************************************************/
 
d360 1
a360 1
 * 
a361 11

/*****************************************************************************
 **
 ** xcb_xinerama_get_screen_count_cookie_t xcb_xinerama_get_screen_count
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_xinerama_get_screen_count_cookie_t
 **
 *****************************************************************************/
 
d372 1
a372 1
 * 
a376 11

/*****************************************************************************
 **
 ** xcb_xinerama_get_screen_count_cookie_t xcb_xinerama_get_screen_count_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_xinerama_get_screen_count_cookie_t
 **
 *****************************************************************************/
 
d388 1
a388 1
 * 
a394 12

/*****************************************************************************
 **
 ** xcb_xinerama_get_screen_count_reply_t * xcb_xinerama_get_screen_count_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_xinerama_get_screen_count_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_xinerama_get_screen_count_reply_t *
 **
 *****************************************************************************/
 
d406 1
a406 1
 * 
a407 12

/*****************************************************************************
 **
 ** xcb_xinerama_get_screen_size_cookie_t xcb_xinerama_get_screen_size
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          screen
 ** @@returns xcb_xinerama_get_screen_size_cookie_t
 **
 *****************************************************************************/
 
d419 1
a419 1
 * 
a423 12

/*****************************************************************************
 **
 ** xcb_xinerama_get_screen_size_cookie_t xcb_xinerama_get_screen_size_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          screen
 ** @@returns xcb_xinerama_get_screen_size_cookie_t
 **
 *****************************************************************************/
 
d436 1
a436 1
 * 
a442 12

/*****************************************************************************
 **
 ** xcb_xinerama_get_screen_size_reply_t * xcb_xinerama_get_screen_size_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_xinerama_get_screen_size_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_xinerama_get_screen_size_reply_t *
 **
 *****************************************************************************/
 
d454 1
a454 1
 * 
a455 10

/*****************************************************************************
 **
 ** xcb_xinerama_is_active_cookie_t xcb_xinerama_is_active
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xinerama_is_active_cookie_t
 **
 *****************************************************************************/
 
d465 1
a465 1
 * 
a469 10

/*****************************************************************************
 **
 ** xcb_xinerama_is_active_cookie_t xcb_xinerama_is_active_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xinerama_is_active_cookie_t
 **
 *****************************************************************************/
 
d480 1
a480 1
 * 
a486 12

/*****************************************************************************
 **
 ** xcb_xinerama_is_active_reply_t * xcb_xinerama_is_active_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xinerama_is_active_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_xinerama_is_active_reply_t *
 **
 *****************************************************************************/
 
d501 1
a501 1
 * 
a502 10

/*****************************************************************************
 **
 ** xcb_xinerama_query_screens_cookie_t xcb_xinerama_query_screens
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xinerama_query_screens_cookie_t
 **
 *****************************************************************************/
 
d512 1
a512 1
 * 
a516 10

/*****************************************************************************
 **
 ** xcb_xinerama_query_screens_cookie_t xcb_xinerama_query_screens_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xinerama_query_screens_cookie_t
 **
 *****************************************************************************/
 
a519 10

/*****************************************************************************
 **
 ** xcb_xinerama_screen_info_t * xcb_xinerama_query_screens_screen_info
 ** 
 ** @@param const xcb_xinerama_query_screens_reply_t *R
 ** @@returns xcb_xinerama_screen_info_t *
 **
 *****************************************************************************/
 
a522 10

/*****************************************************************************
 **
 ** int xcb_xinerama_query_screens_screen_info_length
 ** 
 ** @@param const xcb_xinerama_query_screens_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a525 10

/*****************************************************************************
 **
 ** xcb_xinerama_screen_info_iterator_t xcb_xinerama_query_screens_screen_info_iterator
 ** 
 ** @@param const xcb_xinerama_query_screens_reply_t *R
 ** @@returns xcb_xinerama_screen_info_iterator_t
 **
 *****************************************************************************/
 
d536 1
a536 1
 * 
a542 12

/*****************************************************************************
 **
 ** xcb_xinerama_query_screens_reply_t * xcb_xinerama_query_screens_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_xinerama_query_screens_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_xinerama_query_screens_reply_t *
 **
 *****************************************************************************/
 
@


1.1
log
@Initial revision
@
text
@d281 1
a281 1
 * Delivers a request to the X server
d306 1
a306 1
 * Delivers a request to the X server
d365 1
a365 1
 * Delivers a request to the X server
d388 1
a388 1
 * Delivers a request to the X server
d445 1
a445 1
 * Delivers a request to the X server
d468 1
a468 1
 * Delivers a request to the X server
d525 1
a525 1
 * Delivers a request to the X server
d550 1
a550 1
 * Delivers a request to the X server
d609 1
a609 1
 * Delivers a request to the X server
d630 1
a630 1
 * Delivers a request to the X server
d684 3
d688 1
a688 1
 * Delivers a request to the X server
d709 1
a709 1
 * Delivers a request to the X server
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
