head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.4
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	mKDGsTNpiR2zRHYQ;

1.4
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	01TEvO4uNHLqFv7N;

1.3
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.46;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.46;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from shape.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "shape.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"

xcb_extension_t xcb_shape_id = { "SHAPE", 0 };

void
xcb_shape_op_next (xcb_shape_op_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_shape_op_t);
}

xcb_generic_iterator_t
xcb_shape_op_end (xcb_shape_op_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_shape_kind_next (xcb_shape_kind_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_shape_kind_t);
}

xcb_generic_iterator_t
xcb_shape_kind_end (xcb_shape_kind_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_shape_query_version_cookie_t
xcb_shape_query_version (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_shape_query_version_cookie_t xcb_ret;
    xcb_shape_query_version_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_shape_query_version_cookie_t
xcb_shape_query_version_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_shape_query_version_cookie_t xcb_ret;
    xcb_shape_query_version_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_shape_query_version_reply_t *
xcb_shape_query_version_reply (xcb_connection_t                  *c,
                               xcb_shape_query_version_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_shape_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_shape_rectangles_sizeof (const void  *_buffer,
                             uint32_t     rectangles_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_shape_rectangles_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* rectangles */
    xcb_block_len += rectangles_len * sizeof(xcb_rectangle_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_rectangle_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_shape_rectangles_checked (xcb_connection_t      *c,
                              xcb_shape_op_t         operation,
                              xcb_shape_kind_t       destination_kind,
                              uint8_t                ordering,
                              xcb_window_t           destination_window,
                              int16_t                x_offset,
                              int16_t                y_offset,
                              uint32_t               rectangles_len,
                              const xcb_rectangle_t *rectangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_RECTANGLES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_shape_rectangles_request_t xcb_out;

    xcb_out.operation = operation;
    xcb_out.destination_kind = destination_kind;
    xcb_out.ordering = ordering;
    xcb_out.pad0 = 0;
    xcb_out.destination_window = destination_window;
    xcb_out.x_offset = x_offset;
    xcb_out.y_offset = y_offset;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rectangles */
    xcb_parts[4].iov_base = (char *) rectangles;
    xcb_parts[4].iov_len = rectangles_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_shape_rectangles (xcb_connection_t      *c,
                      xcb_shape_op_t         operation,
                      xcb_shape_kind_t       destination_kind,
                      uint8_t                ordering,
                      xcb_window_t           destination_window,
                      int16_t                x_offset,
                      int16_t                y_offset,
                      uint32_t               rectangles_len,
                      const xcb_rectangle_t *rectangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_RECTANGLES,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_shape_rectangles_request_t xcb_out;

    xcb_out.operation = operation;
    xcb_out.destination_kind = destination_kind;
    xcb_out.ordering = ordering;
    xcb_out.pad0 = 0;
    xcb_out.destination_window = destination_window;
    xcb_out.x_offset = x_offset;
    xcb_out.y_offset = y_offset;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rectangles */
    xcb_parts[4].iov_base = (char *) rectangles;
    xcb_parts[4].iov_len = rectangles_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_rectangle_t *
xcb_shape_rectangles_rectangles (const xcb_shape_rectangles_request_t *R)
{
    return (xcb_rectangle_t *) (R + 1);
}

int
xcb_shape_rectangles_rectangles_length (const xcb_shape_rectangles_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_shape_rectangles_request_t))/sizeof(xcb_rectangle_t));
}

xcb_rectangle_iterator_t
xcb_shape_rectangles_rectangles_iterator (const xcb_shape_rectangles_request_t *R)
{
    xcb_rectangle_iterator_t i;
    i.data = (xcb_rectangle_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_shape_rectangles_request_t))/sizeof(xcb_rectangle_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_shape_mask_checked (xcb_connection_t *c,
                        xcb_shape_op_t    operation,
                        xcb_shape_kind_t  destination_kind,
                        xcb_window_t      destination_window,
                        int16_t           x_offset,
                        int16_t           y_offset,
                        xcb_pixmap_t      source_bitmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_MASK,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_shape_mask_request_t xcb_out;

    xcb_out.operation = operation;
    xcb_out.destination_kind = destination_kind;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.destination_window = destination_window;
    xcb_out.x_offset = x_offset;
    xcb_out.y_offset = y_offset;
    xcb_out.source_bitmap = source_bitmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_shape_mask (xcb_connection_t *c,
                xcb_shape_op_t    operation,
                xcb_shape_kind_t  destination_kind,
                xcb_window_t      destination_window,
                int16_t           x_offset,
                int16_t           y_offset,
                xcb_pixmap_t      source_bitmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_MASK,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_shape_mask_request_t xcb_out;

    xcb_out.operation = operation;
    xcb_out.destination_kind = destination_kind;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.destination_window = destination_window;
    xcb_out.x_offset = x_offset;
    xcb_out.y_offset = y_offset;
    xcb_out.source_bitmap = source_bitmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_shape_combine_checked (xcb_connection_t *c,
                           xcb_shape_op_t    operation,
                           xcb_shape_kind_t  destination_kind,
                           xcb_shape_kind_t  source_kind,
                           xcb_window_t      destination_window,
                           int16_t           x_offset,
                           int16_t           y_offset,
                           xcb_window_t      source_window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_COMBINE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_shape_combine_request_t xcb_out;

    xcb_out.operation = operation;
    xcb_out.destination_kind = destination_kind;
    xcb_out.source_kind = source_kind;
    xcb_out.pad0 = 0;
    xcb_out.destination_window = destination_window;
    xcb_out.x_offset = x_offset;
    xcb_out.y_offset = y_offset;
    xcb_out.source_window = source_window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_shape_combine (xcb_connection_t *c,
                   xcb_shape_op_t    operation,
                   xcb_shape_kind_t  destination_kind,
                   xcb_shape_kind_t  source_kind,
                   xcb_window_t      destination_window,
                   int16_t           x_offset,
                   int16_t           y_offset,
                   xcb_window_t      source_window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_COMBINE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_shape_combine_request_t xcb_out;

    xcb_out.operation = operation;
    xcb_out.destination_kind = destination_kind;
    xcb_out.source_kind = source_kind;
    xcb_out.pad0 = 0;
    xcb_out.destination_window = destination_window;
    xcb_out.x_offset = x_offset;
    xcb_out.y_offset = y_offset;
    xcb_out.source_window = source_window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_shape_offset_checked (xcb_connection_t *c,
                          xcb_shape_kind_t  destination_kind,
                          xcb_window_t      destination_window,
                          int16_t           x_offset,
                          int16_t           y_offset)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_OFFSET,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_shape_offset_request_t xcb_out;

    xcb_out.destination_kind = destination_kind;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.destination_window = destination_window;
    xcb_out.x_offset = x_offset;
    xcb_out.y_offset = y_offset;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_shape_offset (xcb_connection_t *c,
                  xcb_shape_kind_t  destination_kind,
                  xcb_window_t      destination_window,
                  int16_t           x_offset,
                  int16_t           y_offset)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_OFFSET,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_shape_offset_request_t xcb_out;

    xcb_out.destination_kind = destination_kind;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.destination_window = destination_window;
    xcb_out.x_offset = x_offset;
    xcb_out.y_offset = y_offset;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_shape_query_extents_cookie_t
xcb_shape_query_extents (xcb_connection_t *c,
                         xcb_window_t      destination_window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_QUERY_EXTENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_shape_query_extents_cookie_t xcb_ret;
    xcb_shape_query_extents_request_t xcb_out;

    xcb_out.destination_window = destination_window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_shape_query_extents_cookie_t
xcb_shape_query_extents_unchecked (xcb_connection_t *c,
                                   xcb_window_t      destination_window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_QUERY_EXTENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_shape_query_extents_cookie_t xcb_ret;
    xcb_shape_query_extents_request_t xcb_out;

    xcb_out.destination_window = destination_window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_shape_query_extents_reply_t *
xcb_shape_query_extents_reply (xcb_connection_t                  *c,
                               xcb_shape_query_extents_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_shape_query_extents_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_shape_select_input_checked (xcb_connection_t *c,
                                xcb_window_t      destination_window,
                                uint8_t           enable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_SELECT_INPUT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_shape_select_input_request_t xcb_out;

    xcb_out.destination_window = destination_window;
    xcb_out.enable = enable;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_shape_select_input (xcb_connection_t *c,
                        xcb_window_t      destination_window,
                        uint8_t           enable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_SELECT_INPUT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_shape_select_input_request_t xcb_out;

    xcb_out.destination_window = destination_window;
    xcb_out.enable = enable;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_shape_input_selected_cookie_t
xcb_shape_input_selected (xcb_connection_t *c,
                          xcb_window_t      destination_window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_INPUT_SELECTED,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_shape_input_selected_cookie_t xcb_ret;
    xcb_shape_input_selected_request_t xcb_out;

    xcb_out.destination_window = destination_window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_shape_input_selected_cookie_t
xcb_shape_input_selected_unchecked (xcb_connection_t *c,
                                    xcb_window_t      destination_window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_INPUT_SELECTED,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_shape_input_selected_cookie_t xcb_ret;
    xcb_shape_input_selected_request_t xcb_out;

    xcb_out.destination_window = destination_window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_shape_input_selected_reply_t *
xcb_shape_input_selected_reply (xcb_connection_t                   *c,
                                xcb_shape_input_selected_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_shape_input_selected_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_shape_get_rectangles_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_shape_get_rectangles_reply_t *_aux = (xcb_shape_get_rectangles_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_shape_get_rectangles_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* rectangles */
    xcb_block_len += _aux->rectangles_len * sizeof(xcb_rectangle_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_rectangle_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_shape_get_rectangles_cookie_t
xcb_shape_get_rectangles (xcb_connection_t *c,
                          xcb_window_t      window,
                          xcb_shape_kind_t  source_kind)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_GET_RECTANGLES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_shape_get_rectangles_cookie_t xcb_ret;
    xcb_shape_get_rectangles_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.source_kind = source_kind;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_shape_get_rectangles_cookie_t
xcb_shape_get_rectangles_unchecked (xcb_connection_t *c,
                                    xcb_window_t      window,
                                    xcb_shape_kind_t  source_kind)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_shape_id,
        .opcode = XCB_SHAPE_GET_RECTANGLES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_shape_get_rectangles_cookie_t xcb_ret;
    xcb_shape_get_rectangles_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.source_kind = source_kind;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_rectangle_t *
xcb_shape_get_rectangles_rectangles (const xcb_shape_get_rectangles_reply_t *R)
{
    return (xcb_rectangle_t *) (R + 1);
}

int
xcb_shape_get_rectangles_rectangles_length (const xcb_shape_get_rectangles_reply_t *R)
{
    return R->rectangles_len;
}

xcb_rectangle_iterator_t
xcb_shape_get_rectangles_rectangles_iterator (const xcb_shape_get_rectangles_reply_t *R)
{
    xcb_rectangle_iterator_t i;
    i.data = (xcb_rectangle_t *) (R + 1);
    i.rem = R->rectangles_len;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_shape_get_rectangles_reply_t *
xcb_shape_get_rectangles_reply (xcb_connection_t                   *c,
                                xcb_shape_get_rectangles_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_shape_get_rectangles_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

@


1.4
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d22 1
a22 1
xcb_shape_op_next (xcb_shape_op_iterator_t *i  /**< */)
d30 1
a30 1
xcb_shape_op_end (xcb_shape_op_iterator_t i  /**< */)
d40 1
a40 1
xcb_shape_kind_next (xcb_shape_kind_iterator_t *i  /**< */)
d48 1
a48 1
xcb_shape_kind_end (xcb_shape_kind_iterator_t i  /**< */)
d58 1
a58 1
xcb_shape_query_version (xcb_connection_t *c  /**< */)
d61 4
a64 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_QUERY_VERSION,
        /* isvoid */ 0
d82 1
a82 1
xcb_shape_query_version_unchecked (xcb_connection_t *c  /**< */)
d85 4
a88 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_QUERY_VERSION,
        /* isvoid */ 0
d106 1
a106 1
xcb_shape_query_version_reply (xcb_connection_t                  *c  /**< */,
d108 1
a108 1
                               xcb_generic_error_t              **e  /**< */)
d114 2
a115 2
xcb_shape_rectangles_sizeof (const void  *_buffer  /**< */,
                             uint32_t     rectangles_len  /**< */)
d145 9
a153 9
xcb_shape_rectangles_checked (xcb_connection_t      *c  /**< */,
                              xcb_shape_op_t         operation  /**< */,
                              xcb_shape_kind_t       destination_kind  /**< */,
                              uint8_t                ordering  /**< */,
                              xcb_window_t           destination_window  /**< */,
                              int16_t                x_offset  /**< */,
                              int16_t                y_offset  /**< */,
                              uint32_t               rectangles_len  /**< */,
                              const xcb_rectangle_t *rectangles  /**< */)
d156 4
a159 4
        /* count */ 4,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_RECTANGLES,
        /* isvoid */ 1
d189 9
a197 9
xcb_shape_rectangles (xcb_connection_t      *c  /**< */,
                      xcb_shape_op_t         operation  /**< */,
                      xcb_shape_kind_t       destination_kind  /**< */,
                      uint8_t                ordering  /**< */,
                      xcb_window_t           destination_window  /**< */,
                      int16_t                x_offset  /**< */,
                      int16_t                y_offset  /**< */,
                      uint32_t               rectangles_len  /**< */,
                      const xcb_rectangle_t *rectangles  /**< */)
d200 4
a203 4
        /* count */ 4,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_RECTANGLES,
        /* isvoid */ 1
d232 22
d255 7
a261 7
xcb_shape_mask_checked (xcb_connection_t *c  /**< */,
                        xcb_shape_op_t    operation  /**< */,
                        xcb_shape_kind_t  destination_kind  /**< */,
                        xcb_window_t      destination_window  /**< */,
                        int16_t           x_offset  /**< */,
                        int16_t           y_offset  /**< */,
                        xcb_pixmap_t      source_bitmap  /**< */)
d264 4
a267 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_MASK,
        /* isvoid */ 1
d292 7
a298 7
xcb_shape_mask (xcb_connection_t *c  /**< */,
                xcb_shape_op_t    operation  /**< */,
                xcb_shape_kind_t  destination_kind  /**< */,
                xcb_window_t      destination_window  /**< */,
                int16_t           x_offset  /**< */,
                int16_t           y_offset  /**< */,
                xcb_pixmap_t      source_bitmap  /**< */)
d301 4
a304 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_MASK,
        /* isvoid */ 1
d329 8
a336 8
xcb_shape_combine_checked (xcb_connection_t *c  /**< */,
                           xcb_shape_op_t    operation  /**< */,
                           xcb_shape_kind_t  destination_kind  /**< */,
                           xcb_shape_kind_t  source_kind  /**< */,
                           xcb_window_t      destination_window  /**< */,
                           int16_t           x_offset  /**< */,
                           int16_t           y_offset  /**< */,
                           xcb_window_t      source_window  /**< */)
d339 4
a342 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_COMBINE,
        /* isvoid */ 1
d368 8
a375 8
xcb_shape_combine (xcb_connection_t *c  /**< */,
                   xcb_shape_op_t    operation  /**< */,
                   xcb_shape_kind_t  destination_kind  /**< */,
                   xcb_shape_kind_t  source_kind  /**< */,
                   xcb_window_t      destination_window  /**< */,
                   int16_t           x_offset  /**< */,
                   int16_t           y_offset  /**< */,
                   xcb_window_t      source_window  /**< */)
d378 4
a381 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_COMBINE,
        /* isvoid */ 1
d407 5
a411 5
xcb_shape_offset_checked (xcb_connection_t *c  /**< */,
                          xcb_shape_kind_t  destination_kind  /**< */,
                          xcb_window_t      destination_window  /**< */,
                          int16_t           x_offset  /**< */,
                          int16_t           y_offset  /**< */)
d414 4
a417 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_OFFSET,
        /* isvoid */ 1
d440 5
a444 5
xcb_shape_offset (xcb_connection_t *c  /**< */,
                  xcb_shape_kind_t  destination_kind  /**< */,
                  xcb_window_t      destination_window  /**< */,
                  int16_t           x_offset  /**< */,
                  int16_t           y_offset  /**< */)
d447 4
a450 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_OFFSET,
        /* isvoid */ 1
d473 2
a474 2
xcb_shape_query_extents (xcb_connection_t *c  /**< */,
                         xcb_window_t      destination_window  /**< */)
d477 4
a480 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_QUERY_EXTENTS,
        /* isvoid */ 0
d499 2
a500 2
xcb_shape_query_extents_unchecked (xcb_connection_t *c  /**< */,
                                   xcb_window_t      destination_window  /**< */)
d503 4
a506 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_QUERY_EXTENTS,
        /* isvoid */ 0
d525 1
a525 1
xcb_shape_query_extents_reply (xcb_connection_t                  *c  /**< */,
d527 1
a527 1
                               xcb_generic_error_t              **e  /**< */)
d533 3
a535 3
xcb_shape_select_input_checked (xcb_connection_t *c  /**< */,
                                xcb_window_t      destination_window  /**< */,
                                uint8_t           enable  /**< */)
d538 4
a541 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_SELECT_INPUT,
        /* isvoid */ 1
d562 3
a564 3
xcb_shape_select_input (xcb_connection_t *c  /**< */,
                        xcb_window_t      destination_window  /**< */,
                        uint8_t           enable  /**< */)
d567 4
a570 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_SELECT_INPUT,
        /* isvoid */ 1
d591 2
a592 2
xcb_shape_input_selected (xcb_connection_t *c  /**< */,
                          xcb_window_t      destination_window  /**< */)
d595 4
a598 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_INPUT_SELECTED,
        /* isvoid */ 0
d617 2
a618 2
xcb_shape_input_selected_unchecked (xcb_connection_t *c  /**< */,
                                    xcb_window_t      destination_window  /**< */)
d621 4
a624 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_INPUT_SELECTED,
        /* isvoid */ 0
d643 1
a643 1
xcb_shape_input_selected_reply (xcb_connection_t                   *c  /**< */,
d645 1
a645 1
                                xcb_generic_error_t               **e  /**< */)
d651 1
a651 1
xcb_shape_get_rectangles_sizeof (const void  *_buffer  /**< */)
d682 3
a684 3
xcb_shape_get_rectangles (xcb_connection_t *c  /**< */,
                          xcb_window_t      window  /**< */,
                          xcb_shape_kind_t  source_kind  /**< */)
d687 4
a690 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_GET_RECTANGLES,
        /* isvoid */ 0
d711 3
a713 3
xcb_shape_get_rectangles_unchecked (xcb_connection_t *c  /**< */,
                                    xcb_window_t      window  /**< */,
                                    xcb_shape_kind_t  source_kind  /**< */)
d716 4
a719 4
        /* count */ 2,
        /* ext */ &xcb_shape_id,
        /* opcode */ XCB_SHAPE_GET_RECTANGLES,
        /* isvoid */ 0
d740 1
a740 1
xcb_shape_get_rectangles_rectangles (const xcb_shape_get_rectangles_reply_t *R  /**< */)
d746 1
a746 1
xcb_shape_get_rectangles_rectangles_length (const xcb_shape_get_rectangles_reply_t *R  /**< */)
d752 1
a752 1
xcb_shape_get_rectangles_rectangles_iterator (const xcb_shape_get_rectangles_reply_t *R  /**< */)
d762 1
a762 1
xcb_shape_get_rectangles_reply (xcb_connection_t                   *c  /**< */,
d764 1
a764 1
                                xcb_generic_error_t               **e  /**< */)
@


1.3
log
@Update build system and generated files for libxcb 1.10.
@
text
@a20 10

/*****************************************************************************
 **
 ** void xcb_shape_op_next
 ** 
 ** @@param xcb_shape_op_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a28 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_shape_op_end
 ** 
 ** @@param xcb_shape_op_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a38 10

/*****************************************************************************
 **
 ** void xcb_shape_kind_next
 ** 
 ** @@param xcb_shape_kind_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a46 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_shape_kind_end
 ** 
 ** @@param xcb_shape_kind_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a56 10

/*****************************************************************************
 **
 ** xcb_shape_query_version_cookie_t xcb_shape_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_shape_query_version_cookie_t
 **
 *****************************************************************************/
 
d66 1
a66 1
    
d70 2
a71 2
    
    
d76 1
a76 1
    
a80 10

/*****************************************************************************
 **
 ** xcb_shape_query_version_cookie_t xcb_shape_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_shape_query_version_cookie_t
 **
 *****************************************************************************/
 
d90 1
a90 1
    
d94 2
a95 2
    
    
d100 1
a100 1
    
a104 12

/*****************************************************************************
 **
 ** xcb_shape_query_version_reply_t * xcb_shape_query_version_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_shape_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_shape_query_version_reply_t *
 **
 *****************************************************************************/
 
a143 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_rectangles_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_shape_op_t         operation
 ** @@param xcb_shape_kind_t       destination_kind
 ** @@param uint8_t                ordering
 ** @@param xcb_window_t           destination_window
 ** @@param int16_t                x_offset
 ** @@param int16_t                y_offset
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d161 1
a161 1
    
d165 1
a165 1
    
d173 1
a173 1
    
d183 1
a183 1
    
a187 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_rectangles
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_shape_op_t         operation
 ** @@param xcb_shape_kind_t       destination_kind
 ** @@param uint8_t                ordering
 ** @@param xcb_window_t           destination_window
 ** @@param int16_t                x_offset
 ** @@param int16_t                y_offset
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d205 1
a205 1
    
d209 1
a209 1
    
d217 1
a217 1
    
d227 1
a227 1
    
a231 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_mask_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shape_op_t    operation
 ** @@param xcb_shape_kind_t  destination_kind
 ** @@param xcb_window_t      destination_window
 ** @@param int16_t           x_offset
 ** @@param int16_t           y_offset
 ** @@param xcb_pixmap_t      source_bitmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d247 1
a247 1
    
d251 1
a251 1
    
d259 1
a259 1
    
d264 1
a264 1
    
a268 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_mask
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shape_op_t    operation
 ** @@param xcb_shape_kind_t  destination_kind
 ** @@param xcb_window_t      destination_window
 ** @@param int16_t           x_offset
 ** @@param int16_t           y_offset
 ** @@param xcb_pixmap_t      source_bitmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d284 1
a284 1
    
d288 1
a288 1
    
d296 1
a296 1
    
d301 1
a301 1
    
a305 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_combine_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shape_op_t    operation
 ** @@param xcb_shape_kind_t  destination_kind
 ** @@param xcb_shape_kind_t  source_kind
 ** @@param xcb_window_t      destination_window
 ** @@param int16_t           x_offset
 ** @@param int16_t           y_offset
 ** @@param xcb_window_t      source_window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d322 1
a322 1
    
d326 1
a326 1
    
d335 1
a335 1
    
d340 1
a340 1
    
a344 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_combine
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shape_op_t    operation
 ** @@param xcb_shape_kind_t  destination_kind
 ** @@param xcb_shape_kind_t  source_kind
 ** @@param xcb_window_t      destination_window
 ** @@param int16_t           x_offset
 ** @@param int16_t           y_offset
 ** @@param xcb_window_t      source_window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d361 1
a361 1
    
d365 1
a365 1
    
d374 1
a374 1
    
d379 1
a379 1
    
a383 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_offset_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shape_kind_t  destination_kind
 ** @@param xcb_window_t      destination_window
 ** @@param int16_t           x_offset
 ** @@param int16_t           y_offset
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d397 1
a397 1
    
d401 1
a401 1
    
d407 1
a407 1
    
d412 1
a412 1
    
a416 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_offset
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_shape_kind_t  destination_kind
 ** @@param xcb_window_t      destination_window
 ** @@param int16_t           x_offset
 ** @@param int16_t           y_offset
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d430 1
a430 1
    
d434 1
a434 1
    
d440 1
a440 1
    
d445 1
a445 1
    
a449 11

/*****************************************************************************
 **
 ** xcb_shape_query_extents_cookie_t xcb_shape_query_extents
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      destination_window
 ** @@returns xcb_shape_query_extents_cookie_t
 **
 *****************************************************************************/
 
d460 1
a460 1
    
d464 1
a464 1
    
d466 1
a466 1
    
d471 1
a471 1
    
a475 11

/*****************************************************************************
 **
 ** xcb_shape_query_extents_cookie_t xcb_shape_query_extents_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      destination_window
 ** @@returns xcb_shape_query_extents_cookie_t
 **
 *****************************************************************************/
 
d486 1
a486 1
    
d490 1
a490 1
    
d492 1
a492 1
    
d497 1
a497 1
    
a501 12

/*****************************************************************************
 **
 ** xcb_shape_query_extents_reply_t * xcb_shape_query_extents_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_shape_query_extents_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_shape_query_extents_reply_t *
 **
 *****************************************************************************/
 
a509 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_select_input_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      destination_window
 ** @@param uint8_t           enable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d521 1
a521 1
    
d525 1
a525 1
    
d529 1
a529 1
    
d534 1
a534 1
    
a538 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_shape_select_input
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      destination_window
 ** @@param uint8_t           enable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d550 1
a550 1
    
d554 1
a554 1
    
d558 1
a558 1
    
d563 1
a563 1
    
a567 11

/*****************************************************************************
 **
 ** xcb_shape_input_selected_cookie_t xcb_shape_input_selected
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      destination_window
 ** @@returns xcb_shape_input_selected_cookie_t
 **
 *****************************************************************************/
 
d578 1
a578 1
    
d582 1
a582 1
    
d584 1
a584 1
    
d589 1
a589 1
    
a593 11

/*****************************************************************************
 **
 ** xcb_shape_input_selected_cookie_t xcb_shape_input_selected_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      destination_window
 ** @@returns xcb_shape_input_selected_cookie_t
 **
 *****************************************************************************/
 
d604 1
a604 1
    
d608 1
a608 1
    
d610 1
a610 1
    
d615 1
a615 1
    
a619 12

/*****************************************************************************
 **
 ** xcb_shape_input_selected_reply_t * xcb_shape_input_selected_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_shape_input_selected_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_shape_input_selected_reply_t *
 **
 *****************************************************************************/
 
a658 12

/*****************************************************************************
 **
 ** xcb_shape_get_rectangles_cookie_t xcb_shape_get_rectangles
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_shape_kind_t  source_kind
 ** @@returns xcb_shape_get_rectangles_cookie_t
 **
 *****************************************************************************/
 
d670 1
a670 1
    
d674 1
a674 1
    
d678 1
a678 1
    
d683 1
a683 1
    
a687 12

/*****************************************************************************
 **
 ** xcb_shape_get_rectangles_cookie_t xcb_shape_get_rectangles_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_shape_kind_t  source_kind
 ** @@returns xcb_shape_get_rectangles_cookie_t
 **
 *****************************************************************************/
 
d699 1
a699 1
    
d703 1
a703 1
    
d707 1
a707 1
    
d712 1
a712 1
    
a716 10

/*****************************************************************************
 **
 ** xcb_rectangle_t * xcb_shape_get_rectangles_rectangles
 ** 
 ** @@param const xcb_shape_get_rectangles_reply_t *R
 ** @@returns xcb_rectangle_t *
 **
 *****************************************************************************/
 
a722 10

/*****************************************************************************
 **
 ** int xcb_shape_get_rectangles_rectangles_length
 ** 
 ** @@param const xcb_shape_get_rectangles_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a728 10

/*****************************************************************************
 **
 ** xcb_rectangle_iterator_t xcb_shape_get_rectangles_rectangles_iterator
 ** 
 ** @@param const xcb_shape_get_rectangles_reply_t *R
 ** @@returns xcb_rectangle_iterator_t
 **
 *****************************************************************************/
 
a738 12

/*****************************************************************************
 **
 ** xcb_shape_get_rectangles_reply_t * xcb_shape_get_rectangles_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_shape_get_rectangles_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_shape_get_rectangles_reply_t *
 **
 *****************************************************************************/
 
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d193 1
a193 1
    unsigned int xcb_align_to;
d198 2
d930 1
a930 1
    unsigned int xcb_align_to;
d935 2
@


1.1
log
@Initial revision
@
text
@d6 4
d12 1
d15 2
d126 1
d160 1
d185 29
d266 1
d271 1
d328 1
d333 1
d386 1
d439 1
d495 1
d551 1
d598 1
d645 1
d682 1
d719 1
d780 1
d821 1
d858 1
d895 1
d920 29
d985 1
d1026 1
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
