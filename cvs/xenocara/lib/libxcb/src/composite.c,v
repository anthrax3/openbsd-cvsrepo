head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.6
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	mKDGsTNpiR2zRHYQ;

1.3
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	01TEvO4uNHLqFv7N;

1.2
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.16;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.16;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from composite.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "composite.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"
#include "xfixes.h"

xcb_extension_t xcb_composite_id = { "Composite", 0 };

xcb_composite_query_version_cookie_t
xcb_composite_query_version (xcb_connection_t *c,
                             uint32_t          client_major_version,
                             uint32_t          client_minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_composite_query_version_cookie_t xcb_ret;
    xcb_composite_query_version_request_t xcb_out;

    xcb_out.client_major_version = client_major_version;
    xcb_out.client_minor_version = client_minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_composite_query_version_cookie_t
xcb_composite_query_version_unchecked (xcb_connection_t *c,
                                       uint32_t          client_major_version,
                                       uint32_t          client_minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_composite_query_version_cookie_t xcb_ret;
    xcb_composite_query_version_request_t xcb_out;

    xcb_out.client_major_version = client_major_version;
    xcb_out.client_minor_version = client_minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_composite_query_version_reply_t *
xcb_composite_query_version_reply (xcb_connection_t                      *c,
                                   xcb_composite_query_version_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_composite_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_composite_redirect_window_checked (xcb_connection_t *c,
                                       xcb_window_t      window,
                                       uint8_t           update)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_REDIRECT_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_composite_redirect_window_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.update = update;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_composite_redirect_window (xcb_connection_t *c,
                               xcb_window_t      window,
                               uint8_t           update)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_REDIRECT_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_composite_redirect_window_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.update = update;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_composite_redirect_subwindows_checked (xcb_connection_t *c,
                                           xcb_window_t      window,
                                           uint8_t           update)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_REDIRECT_SUBWINDOWS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_composite_redirect_subwindows_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.update = update;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_composite_redirect_subwindows (xcb_connection_t *c,
                                   xcb_window_t      window,
                                   uint8_t           update)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_REDIRECT_SUBWINDOWS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_composite_redirect_subwindows_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.update = update;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_composite_unredirect_window_checked (xcb_connection_t *c,
                                         xcb_window_t      window,
                                         uint8_t           update)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_UNREDIRECT_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_composite_unredirect_window_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.update = update;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_composite_unredirect_window (xcb_connection_t *c,
                                 xcb_window_t      window,
                                 uint8_t           update)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_UNREDIRECT_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_composite_unredirect_window_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.update = update;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_composite_unredirect_subwindows_checked (xcb_connection_t *c,
                                             xcb_window_t      window,
                                             uint8_t           update)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_UNREDIRECT_SUBWINDOWS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_composite_unredirect_subwindows_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.update = update;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_composite_unredirect_subwindows (xcb_connection_t *c,
                                     xcb_window_t      window,
                                     uint8_t           update)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_UNREDIRECT_SUBWINDOWS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_composite_unredirect_subwindows_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.update = update;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_composite_create_region_from_border_clip_checked (xcb_connection_t    *c,
                                                      xcb_xfixes_region_t  region,
                                                      xcb_window_t         window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_CREATE_REGION_FROM_BORDER_CLIP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_composite_create_region_from_border_clip_request_t xcb_out;

    xcb_out.region = region;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_composite_create_region_from_border_clip (xcb_connection_t    *c,
                                              xcb_xfixes_region_t  region,
                                              xcb_window_t         window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_CREATE_REGION_FROM_BORDER_CLIP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_composite_create_region_from_border_clip_request_t xcb_out;

    xcb_out.region = region;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_composite_name_window_pixmap_checked (xcb_connection_t *c,
                                          xcb_window_t      window,
                                          xcb_pixmap_t      pixmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_NAME_WINDOW_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_composite_name_window_pixmap_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.pixmap = pixmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_composite_name_window_pixmap (xcb_connection_t *c,
                                  xcb_window_t      window,
                                  xcb_pixmap_t      pixmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_NAME_WINDOW_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_composite_name_window_pixmap_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.pixmap = pixmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_composite_get_overlay_window_cookie_t
xcb_composite_get_overlay_window (xcb_connection_t *c,
                                  xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_GET_OVERLAY_WINDOW,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_composite_get_overlay_window_cookie_t xcb_ret;
    xcb_composite_get_overlay_window_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_composite_get_overlay_window_cookie_t
xcb_composite_get_overlay_window_unchecked (xcb_connection_t *c,
                                            xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_GET_OVERLAY_WINDOW,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_composite_get_overlay_window_cookie_t xcb_ret;
    xcb_composite_get_overlay_window_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_composite_get_overlay_window_reply_t *
xcb_composite_get_overlay_window_reply (xcb_connection_t                           *c,
                                        xcb_composite_get_overlay_window_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e)
{
    return (xcb_composite_get_overlay_window_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_composite_release_overlay_window_checked (xcb_connection_t *c,
                                              xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_RELEASE_OVERLAY_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_composite_release_overlay_window_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_composite_release_overlay_window (xcb_connection_t *c,
                                      xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_composite_id,
        .opcode = XCB_COMPOSITE_RELEASE_OVERLAY_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_composite_release_overlay_window_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

@


1.3
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d23 3
a25 3
xcb_composite_query_version (xcb_connection_t *c  /**< */,
                             uint32_t          client_major_version  /**< */,
                             uint32_t          client_minor_version  /**< */)
d28 4
a31 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_QUERY_VERSION,
        /* isvoid */ 0
d51 3
a53 3
xcb_composite_query_version_unchecked (xcb_connection_t *c  /**< */,
                                       uint32_t          client_major_version  /**< */,
                                       uint32_t          client_minor_version  /**< */)
d56 4
a59 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_QUERY_VERSION,
        /* isvoid */ 0
d79 1
a79 1
xcb_composite_query_version_reply (xcb_connection_t                      *c  /**< */,
d81 1
a81 1
                                   xcb_generic_error_t                  **e  /**< */)
d87 3
a89 3
xcb_composite_redirect_window_checked (xcb_connection_t *c  /**< */,
                                       xcb_window_t      window  /**< */,
                                       uint8_t           update  /**< */)
d92 4
a95 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_REDIRECT_WINDOW,
        /* isvoid */ 1
d116 3
a118 3
xcb_composite_redirect_window (xcb_connection_t *c  /**< */,
                               xcb_window_t      window  /**< */,
                               uint8_t           update  /**< */)
d121 4
a124 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_REDIRECT_WINDOW,
        /* isvoid */ 1
d145 3
a147 3
xcb_composite_redirect_subwindows_checked (xcb_connection_t *c  /**< */,
                                           xcb_window_t      window  /**< */,
                                           uint8_t           update  /**< */)
d150 4
a153 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_REDIRECT_SUBWINDOWS,
        /* isvoid */ 1
d174 3
a176 3
xcb_composite_redirect_subwindows (xcb_connection_t *c  /**< */,
                                   xcb_window_t      window  /**< */,
                                   uint8_t           update  /**< */)
d179 4
a182 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_REDIRECT_SUBWINDOWS,
        /* isvoid */ 1
d203 3
a205 3
xcb_composite_unredirect_window_checked (xcb_connection_t *c  /**< */,
                                         xcb_window_t      window  /**< */,
                                         uint8_t           update  /**< */)
d208 4
a211 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_UNREDIRECT_WINDOW,
        /* isvoid */ 1
d232 3
a234 3
xcb_composite_unredirect_window (xcb_connection_t *c  /**< */,
                                 xcb_window_t      window  /**< */,
                                 uint8_t           update  /**< */)
d237 4
a240 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_UNREDIRECT_WINDOW,
        /* isvoid */ 1
d261 3
a263 3
xcb_composite_unredirect_subwindows_checked (xcb_connection_t *c  /**< */,
                                             xcb_window_t      window  /**< */,
                                             uint8_t           update  /**< */)
d266 4
a269 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_UNREDIRECT_SUBWINDOWS,
        /* isvoid */ 1
d290 3
a292 3
xcb_composite_unredirect_subwindows (xcb_connection_t *c  /**< */,
                                     xcb_window_t      window  /**< */,
                                     uint8_t           update  /**< */)
d295 4
a298 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_UNREDIRECT_SUBWINDOWS,
        /* isvoid */ 1
d319 3
a321 3
xcb_composite_create_region_from_border_clip_checked (xcb_connection_t    *c  /**< */,
                                                      xcb_xfixes_region_t  region  /**< */,
                                                      xcb_window_t         window  /**< */)
d324 4
a327 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_CREATE_REGION_FROM_BORDER_CLIP,
        /* isvoid */ 1
d347 3
a349 3
xcb_composite_create_region_from_border_clip (xcb_connection_t    *c  /**< */,
                                              xcb_xfixes_region_t  region  /**< */,
                                              xcb_window_t         window  /**< */)
d352 4
a355 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_CREATE_REGION_FROM_BORDER_CLIP,
        /* isvoid */ 1
d375 3
a377 3
xcb_composite_name_window_pixmap_checked (xcb_connection_t *c  /**< */,
                                          xcb_window_t      window  /**< */,
                                          xcb_pixmap_t      pixmap  /**< */)
d380 4
a383 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_NAME_WINDOW_PIXMAP,
        /* isvoid */ 1
d403 3
a405 3
xcb_composite_name_window_pixmap (xcb_connection_t *c  /**< */,
                                  xcb_window_t      window  /**< */,
                                  xcb_pixmap_t      pixmap  /**< */)
d408 4
a411 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_NAME_WINDOW_PIXMAP,
        /* isvoid */ 1
d431 2
a432 2
xcb_composite_get_overlay_window (xcb_connection_t *c  /**< */,
                                  xcb_window_t      window  /**< */)
d435 4
a438 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_GET_OVERLAY_WINDOW,
        /* isvoid */ 0
d457 2
a458 2
xcb_composite_get_overlay_window_unchecked (xcb_connection_t *c  /**< */,
                                            xcb_window_t      window  /**< */)
d461 4
a464 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_GET_OVERLAY_WINDOW,
        /* isvoid */ 0
d483 1
a483 1
xcb_composite_get_overlay_window_reply (xcb_connection_t                           *c  /**< */,
d485 1
a485 1
                                        xcb_generic_error_t                       **e  /**< */)
d491 2
a492 2
xcb_composite_release_overlay_window_checked (xcb_connection_t *c  /**< */,
                                              xcb_window_t      window  /**< */)
d495 4
a498 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_RELEASE_OVERLAY_WINDOW,
        /* isvoid */ 1
d517 2
a518 2
xcb_composite_release_overlay_window (xcb_connection_t *c  /**< */,
                                      xcb_window_t      window  /**< */)
d521 4
a524 4
        /* count */ 2,
        /* ext */ &xcb_composite_id,
        /* opcode */ XCB_COMPOSITE_RELEASE_OVERLAY_WINDOW,
        /* isvoid */ 1
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@a17 2
#include "render.h"
#include "shape.h"
a21 12

/*****************************************************************************
 **
 ** xcb_composite_query_version_cookie_t xcb_composite_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          client_major_version
 ** @@param uint32_t          client_minor_version
 ** @@returns xcb_composite_query_version_cookie_t
 **
 *****************************************************************************/
 
d33 1
a33 1
    
d37 1
a37 1
    
d40 1
a40 1
    
d45 1
a45 1
    
a49 12

/*****************************************************************************
 **
 ** xcb_composite_query_version_cookie_t xcb_composite_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          client_major_version
 ** @@param uint32_t          client_minor_version
 ** @@returns xcb_composite_query_version_cookie_t
 **
 *****************************************************************************/
 
d61 1
a61 1
    
d65 1
a65 1
    
d68 1
a68 1
    
d73 1
a73 1
    
a77 12

/*****************************************************************************
 **
 ** xcb_composite_query_version_reply_t * xcb_composite_query_version_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_composite_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_composite_query_version_reply_t *
 **
 *****************************************************************************/
 
a85 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_composite_redirect_window_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint8_t           update
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d97 1
a97 1
    
d101 1
a101 1
    
d105 1
a105 1
    
d110 1
a110 1
    
a114 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_composite_redirect_window
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint8_t           update
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d126 1
a126 1
    
d130 1
a130 1
    
d134 1
a134 1
    
d139 1
a139 1
    
a143 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_composite_redirect_subwindows_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint8_t           update
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d155 1
a155 1
    
d159 1
a159 1
    
d163 1
a163 1
    
d168 1
a168 1
    
a172 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_composite_redirect_subwindows
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint8_t           update
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d184 1
a184 1
    
d188 1
a188 1
    
d192 1
a192 1
    
d197 1
a197 1
    
a201 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_composite_unredirect_window_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint8_t           update
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d213 1
a213 1
    
d217 1
a217 1
    
d221 1
a221 1
    
d226 1
a226 1
    
a230 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_composite_unredirect_window
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint8_t           update
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d242 1
a242 1
    
d246 1
a246 1
    
d250 1
a250 1
    
d255 1
a255 1
    
a259 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_composite_unredirect_subwindows_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint8_t           update
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d271 1
a271 1
    
d275 1
a275 1
    
d279 1
a279 1
    
d284 1
a284 1
    
a288 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_composite_unredirect_subwindows
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint8_t           update
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d300 1
a300 1
    
d304 1
a304 1
    
d308 1
a308 1
    
d313 1
a313 1
    
a317 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_composite_create_region_from_border_clip_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  region
 ** @@param xcb_window_t         window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d329 1
a329 1
    
d333 1
a333 1
    
d336 1
a336 1
    
d341 1
a341 1
    
a345 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_composite_create_region_from_border_clip
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  region
 ** @@param xcb_window_t         window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d357 1
a357 1
    
d361 1
a361 1
    
d364 1
a364 1
    
d369 1
a369 1
    
a373 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_composite_name_window_pixmap_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_pixmap_t      pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d385 1
a385 1
    
d389 1
a389 1
    
d392 1
a392 1
    
d397 1
a397 1
    
a401 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_composite_name_window_pixmap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_pixmap_t      pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d413 1
a413 1
    
d417 1
a417 1
    
d420 1
a420 1
    
d425 1
a425 1
    
a429 11

/*****************************************************************************
 **
 ** xcb_composite_get_overlay_window_cookie_t xcb_composite_get_overlay_window
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_composite_get_overlay_window_cookie_t
 **
 *****************************************************************************/
 
d440 1
a440 1
    
d444 1
a444 1
    
d446 1
a446 1
    
d451 1
a451 1
    
a455 11

/*****************************************************************************
 **
 ** xcb_composite_get_overlay_window_cookie_t xcb_composite_get_overlay_window_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_composite_get_overlay_window_cookie_t
 **
 *****************************************************************************/
 
d466 1
a466 1
    
d470 1
a470 1
    
d472 1
a472 1
    
d477 1
a477 1
    
a481 12

/*****************************************************************************
 **
 ** xcb_composite_get_overlay_window_reply_t * xcb_composite_get_overlay_window_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_composite_get_overlay_window_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_composite_get_overlay_window_reply_t *
 **
 *****************************************************************************/
 
a489 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_composite_release_overlay_window_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d500 1
a500 1
    
d504 1
a504 1
    
d506 1
a506 1
    
d511 1
a511 1
    
a515 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_composite_release_overlay_window
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d526 1
a526 1
    
d530 1
a530 1
    
d532 1
a532 1
    
d537 1
a537 1
    
@


1.1
log
@Initial revision
@
text
@d6 4
d12 1
d15 2
d59 1
d99 1
d160 1
d201 1
d242 1
d283 1
d324 1
d365 1
d406 1
d447 1
d487 1
d527 1
d567 1
d607 1
d644 1
d681 1
d738 1
d775 1
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
