head	1.3;
access;
symbols
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	mKDGsTNpiR2zRHYQ;

1.2
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.1;
commitid	01TEvO4uNHLqFv7N;

1.1
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xkb.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "xkb.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"

xcb_extension_t xcb_xkb_id = { "XKEYBOARD", 0 };

void
xcb_xkb_device_spec_next (xcb_xkb_device_spec_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_device_spec_t);
}

xcb_generic_iterator_t
xcb_xkb_device_spec_end (xcb_xkb_device_spec_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_led_class_spec_next (xcb_xkb_led_class_spec_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_led_class_spec_t);
}

xcb_generic_iterator_t
xcb_xkb_led_class_spec_end (xcb_xkb_led_class_spec_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_bell_class_spec_next (xcb_xkb_bell_class_spec_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_bell_class_spec_t);
}

xcb_generic_iterator_t
xcb_xkb_bell_class_spec_end (xcb_xkb_bell_class_spec_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_id_spec_next (xcb_xkb_id_spec_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_id_spec_t);
}

xcb_generic_iterator_t
xcb_xkb_id_spec_end (xcb_xkb_id_spec_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_indicator_map_next (xcb_xkb_indicator_map_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_indicator_map_t);
}

xcb_generic_iterator_t
xcb_xkb_indicator_map_end (xcb_xkb_indicator_map_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_mod_def_next (xcb_xkb_mod_def_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_mod_def_t);
}

xcb_generic_iterator_t
xcb_xkb_mod_def_end (xcb_xkb_mod_def_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_key_name_next (xcb_xkb_key_name_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_key_name_t);
}

xcb_generic_iterator_t
xcb_xkb_key_name_end (xcb_xkb_key_name_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_key_alias_next (xcb_xkb_key_alias_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_key_alias_t);
}

xcb_generic_iterator_t
xcb_xkb_key_alias_end (xcb_xkb_key_alias_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_xkb_counted_string_16_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_counted_string_16_t *_aux = (xcb_xkb_counted_string_16_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_counted_string_16_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* string */
    xcb_block_len += _aux->length * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* alignment_pad */
    xcb_block_len += (((_aux->length + 5) & (~3)) - (_aux->length + 2)) * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

char *
xcb_xkb_counted_string_16_string (const xcb_xkb_counted_string_16_t *R)
{
    return (char *) (R + 1);
}

int
xcb_xkb_counted_string_16_string_length (const xcb_xkb_counted_string_16_t *R)
{
    return R->length;
}

xcb_generic_iterator_t
xcb_xkb_counted_string_16_string_end (const xcb_xkb_counted_string_16_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void *
xcb_xkb_counted_string_16_alignment_pad (const xcb_xkb_counted_string_16_t *R)
{
    xcb_generic_iterator_t prev = xcb_xkb_counted_string_16_string_end(R);
    return (void *) ((char *) prev.data + XCB_TYPE_PAD(char, prev.index) + 0);
}

int
xcb_xkb_counted_string_16_alignment_pad_length (const xcb_xkb_counted_string_16_t *R)
{
    return (((R->length + 5) & (~3)) - (R->length + 2));
}

xcb_generic_iterator_t
xcb_xkb_counted_string_16_alignment_pad_end (const xcb_xkb_counted_string_16_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xkb_counted_string_16_string_end(R);
    i.data = ((char *) ((char*) prev.data + XCB_TYPE_PAD(char, prev.index))) + ((((R->length + 5) & (~3)) - (R->length + 2)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xkb_counted_string_16_next (xcb_xkb_counted_string_16_iterator_t *i)
{
    xcb_xkb_counted_string_16_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xkb_counted_string_16_t *)(((char *)R) + xcb_xkb_counted_string_16_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xkb_counted_string_16_t *) child.data;
}

xcb_generic_iterator_t
xcb_xkb_counted_string_16_end (xcb_xkb_counted_string_16_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xkb_counted_string_16_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_xkb_kt_map_entry_next (xcb_xkb_kt_map_entry_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_kt_map_entry_t);
}

xcb_generic_iterator_t
xcb_xkb_kt_map_entry_end (xcb_xkb_kt_map_entry_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_xkb_key_type_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_key_type_t *_aux = (xcb_xkb_key_type_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_key_type_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* map */
    xcb_block_len += _aux->nMapEntries * sizeof(xcb_xkb_kt_map_entry_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_kt_map_entry_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* preserve */
    xcb_block_len += (_aux->hasPreserve * _aux->nMapEntries) * sizeof(xcb_xkb_mod_def_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_mod_def_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xkb_kt_map_entry_t *
xcb_xkb_key_type_map (const xcb_xkb_key_type_t *R)
{
    return (xcb_xkb_kt_map_entry_t *) (R + 1);
}

int
xcb_xkb_key_type_map_length (const xcb_xkb_key_type_t *R)
{
    return R->nMapEntries;
}

xcb_xkb_kt_map_entry_iterator_t
xcb_xkb_key_type_map_iterator (const xcb_xkb_key_type_t *R)
{
    xcb_xkb_kt_map_entry_iterator_t i;
    i.data = (xcb_xkb_kt_map_entry_t *) (R + 1);
    i.rem = R->nMapEntries;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xkb_mod_def_t *
xcb_xkb_key_type_preserve (const xcb_xkb_key_type_t *R)
{
    xcb_generic_iterator_t prev = xcb_xkb_kt_map_entry_end(xcb_xkb_key_type_map_iterator(R));
    return (xcb_xkb_mod_def_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_mod_def_t, prev.index) + 0);
}

int
xcb_xkb_key_type_preserve_length (const xcb_xkb_key_type_t *R)
{
    return (R->hasPreserve * R->nMapEntries);
}

xcb_xkb_mod_def_iterator_t
xcb_xkb_key_type_preserve_iterator (const xcb_xkb_key_type_t *R)
{
    xcb_xkb_mod_def_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xkb_kt_map_entry_end(xcb_xkb_key_type_map_iterator(R));
    i.data = (xcb_xkb_mod_def_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_mod_def_t, prev.index));
    i.rem = (R->hasPreserve * R->nMapEntries);
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xkb_key_type_next (xcb_xkb_key_type_iterator_t *i)
{
    xcb_xkb_key_type_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xkb_key_type_t *)(((char *)R) + xcb_xkb_key_type_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xkb_key_type_t *) child.data;
}

xcb_generic_iterator_t
xcb_xkb_key_type_end (xcb_xkb_key_type_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xkb_key_type_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_xkb_key_sym_map_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_key_sym_map_t *_aux = (xcb_xkb_key_sym_map_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_key_sym_map_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* syms */
    xcb_block_len += _aux->nSyms * sizeof(xcb_keysym_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_keysym_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_keysym_t *
xcb_xkb_key_sym_map_syms (const xcb_xkb_key_sym_map_t *R)
{
    return (xcb_keysym_t *) (R + 1);
}

int
xcb_xkb_key_sym_map_syms_length (const xcb_xkb_key_sym_map_t *R)
{
    return R->nSyms;
}

xcb_generic_iterator_t
xcb_xkb_key_sym_map_syms_end (const xcb_xkb_key_sym_map_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_keysym_t *) (R + 1)) + (R->nSyms);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xkb_key_sym_map_next (xcb_xkb_key_sym_map_iterator_t *i)
{
    xcb_xkb_key_sym_map_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xkb_key_sym_map_t *)(((char *)R) + xcb_xkb_key_sym_map_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xkb_key_sym_map_t *) child.data;
}

xcb_generic_iterator_t
xcb_xkb_key_sym_map_end (xcb_xkb_key_sym_map_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xkb_key_sym_map_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_xkb_common_behavior_next (xcb_xkb_common_behavior_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_common_behavior_t);
}

xcb_generic_iterator_t
xcb_xkb_common_behavior_end (xcb_xkb_common_behavior_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_default_behavior_next (xcb_xkb_default_behavior_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_default_behavior_t);
}

xcb_generic_iterator_t
xcb_xkb_default_behavior_end (xcb_xkb_default_behavior_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_lock_behavior_next (xcb_xkb_lock_behavior_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_lock_behavior_t);
}

xcb_generic_iterator_t
xcb_xkb_lock_behavior_end (xcb_xkb_lock_behavior_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_radio_group_behavior_next (xcb_xkb_radio_group_behavior_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_radio_group_behavior_t);
}

xcb_generic_iterator_t
xcb_xkb_radio_group_behavior_end (xcb_xkb_radio_group_behavior_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_overlay_behavior_next (xcb_xkb_overlay_behavior_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_overlay_behavior_t);
}

xcb_generic_iterator_t
xcb_xkb_overlay_behavior_end (xcb_xkb_overlay_behavior_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_permament_lock_behavior_next (xcb_xkb_permament_lock_behavior_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_permament_lock_behavior_t);
}

xcb_generic_iterator_t
xcb_xkb_permament_lock_behavior_end (xcb_xkb_permament_lock_behavior_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_permament_radio_group_behavior_next (xcb_xkb_permament_radio_group_behavior_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_permament_radio_group_behavior_t);
}

xcb_generic_iterator_t
xcb_xkb_permament_radio_group_behavior_end (xcb_xkb_permament_radio_group_behavior_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_permament_overlay_behavior_next (xcb_xkb_permament_overlay_behavior_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_permament_overlay_behavior_t);
}

xcb_generic_iterator_t
xcb_xkb_permament_overlay_behavior_end (xcb_xkb_permament_overlay_behavior_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_behavior_next (xcb_xkb_behavior_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_behavior_t);
}

xcb_generic_iterator_t
xcb_xkb_behavior_end (xcb_xkb_behavior_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_set_behavior_next (xcb_xkb_set_behavior_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_set_behavior_t);
}

xcb_generic_iterator_t
xcb_xkb_set_behavior_end (xcb_xkb_set_behavior_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_set_explicit_next (xcb_xkb_set_explicit_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_set_explicit_t);
}

xcb_generic_iterator_t
xcb_xkb_set_explicit_end (xcb_xkb_set_explicit_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_key_mod_map_next (xcb_xkb_key_mod_map_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_key_mod_map_t);
}

xcb_generic_iterator_t
xcb_xkb_key_mod_map_end (xcb_xkb_key_mod_map_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_key_v_mod_map_next (xcb_xkb_key_v_mod_map_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_key_v_mod_map_t);
}

xcb_generic_iterator_t
xcb_xkb_key_v_mod_map_end (xcb_xkb_key_v_mod_map_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_kt_set_map_entry_next (xcb_xkb_kt_set_map_entry_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_kt_set_map_entry_t);
}

xcb_generic_iterator_t
xcb_xkb_kt_set_map_entry_end (xcb_xkb_kt_set_map_entry_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_xkb_set_key_type_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_set_key_type_t *_aux = (xcb_xkb_set_key_type_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_set_key_type_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* entries */
    xcb_block_len += _aux->nMapEntries * sizeof(xcb_xkb_kt_set_map_entry_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_kt_set_map_entry_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* preserve_entries */
    xcb_block_len += (_aux->preserve * _aux->nMapEntries) * sizeof(xcb_xkb_kt_set_map_entry_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_kt_set_map_entry_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xkb_kt_set_map_entry_t *
xcb_xkb_set_key_type_entries (const xcb_xkb_set_key_type_t *R)
{
    return (xcb_xkb_kt_set_map_entry_t *) (R + 1);
}

int
xcb_xkb_set_key_type_entries_length (const xcb_xkb_set_key_type_t *R)
{
    return R->nMapEntries;
}

xcb_xkb_kt_set_map_entry_iterator_t
xcb_xkb_set_key_type_entries_iterator (const xcb_xkb_set_key_type_t *R)
{
    xcb_xkb_kt_set_map_entry_iterator_t i;
    i.data = (xcb_xkb_kt_set_map_entry_t *) (R + 1);
    i.rem = R->nMapEntries;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xkb_kt_set_map_entry_t *
xcb_xkb_set_key_type_preserve_entries (const xcb_xkb_set_key_type_t *R)
{
    xcb_generic_iterator_t prev = xcb_xkb_kt_set_map_entry_end(xcb_xkb_set_key_type_entries_iterator(R));
    return (xcb_xkb_kt_set_map_entry_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_kt_set_map_entry_t, prev.index) + 0);
}

int
xcb_xkb_set_key_type_preserve_entries_length (const xcb_xkb_set_key_type_t *R)
{
    return (R->preserve * R->nMapEntries);
}

xcb_xkb_kt_set_map_entry_iterator_t
xcb_xkb_set_key_type_preserve_entries_iterator (const xcb_xkb_set_key_type_t *R)
{
    xcb_xkb_kt_set_map_entry_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xkb_kt_set_map_entry_end(xcb_xkb_set_key_type_entries_iterator(R));
    i.data = (xcb_xkb_kt_set_map_entry_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_kt_set_map_entry_t, prev.index));
    i.rem = (R->preserve * R->nMapEntries);
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xkb_set_key_type_next (xcb_xkb_set_key_type_iterator_t *i)
{
    xcb_xkb_set_key_type_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xkb_set_key_type_t *)(((char *)R) + xcb_xkb_set_key_type_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xkb_set_key_type_t *) child.data;
}

xcb_generic_iterator_t
xcb_xkb_set_key_type_end (xcb_xkb_set_key_type_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xkb_set_key_type_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_xkb_string8_next (xcb_xkb_string8_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_string8_t);
}

xcb_generic_iterator_t
xcb_xkb_string8_end (xcb_xkb_string8_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_xkb_outline_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_outline_t *_aux = (xcb_xkb_outline_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_outline_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* points */
    xcb_block_len += _aux->nPoints * sizeof(xcb_point_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_point_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_point_t *
xcb_xkb_outline_points (const xcb_xkb_outline_t *R)
{
    return (xcb_point_t *) (R + 1);
}

int
xcb_xkb_outline_points_length (const xcb_xkb_outline_t *R)
{
    return R->nPoints;
}

xcb_point_iterator_t
xcb_xkb_outline_points_iterator (const xcb_xkb_outline_t *R)
{
    xcb_point_iterator_t i;
    i.data = (xcb_point_t *) (R + 1);
    i.rem = R->nPoints;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xkb_outline_next (xcb_xkb_outline_iterator_t *i)
{
    xcb_xkb_outline_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xkb_outline_t *)(((char *)R) + xcb_xkb_outline_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xkb_outline_t *) child.data;
}

xcb_generic_iterator_t
xcb_xkb_outline_end (xcb_xkb_outline_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xkb_outline_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_xkb_shape_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_shape_t *_aux = (xcb_xkb_shape_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_xkb_shape_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* outlines */
    for(i=0; i<_aux->nOutlines; i++) {
        xcb_tmp_len = xcb_xkb_outline_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_xkb_outline_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

int
xcb_xkb_shape_outlines_length (const xcb_xkb_shape_t *R)
{
    return R->nOutlines;
}

xcb_xkb_outline_iterator_t
xcb_xkb_shape_outlines_iterator (const xcb_xkb_shape_t *R)
{
    xcb_xkb_outline_iterator_t i;
    i.data = (xcb_xkb_outline_t *) (R + 1);
    i.rem = R->nOutlines;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xkb_shape_next (xcb_xkb_shape_iterator_t *i)
{
    xcb_xkb_shape_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xkb_shape_t *)(((char *)R) + xcb_xkb_shape_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xkb_shape_t *) child.data;
}

xcb_generic_iterator_t
xcb_xkb_shape_end (xcb_xkb_shape_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xkb_shape_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_xkb_key_next (xcb_xkb_key_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_key_t);
}

xcb_generic_iterator_t
xcb_xkb_key_end (xcb_xkb_key_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_overlay_key_next (xcb_xkb_overlay_key_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_overlay_key_t);
}

xcb_generic_iterator_t
xcb_xkb_overlay_key_end (xcb_xkb_overlay_key_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_xkb_overlay_row_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_overlay_row_t *_aux = (xcb_xkb_overlay_row_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_overlay_row_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* keys */
    xcb_block_len += _aux->nKeys * sizeof(xcb_xkb_overlay_key_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_overlay_key_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xkb_overlay_key_t *
xcb_xkb_overlay_row_keys (const xcb_xkb_overlay_row_t *R)
{
    return (xcb_xkb_overlay_key_t *) (R + 1);
}

int
xcb_xkb_overlay_row_keys_length (const xcb_xkb_overlay_row_t *R)
{
    return R->nKeys;
}

xcb_xkb_overlay_key_iterator_t
xcb_xkb_overlay_row_keys_iterator (const xcb_xkb_overlay_row_t *R)
{
    xcb_xkb_overlay_key_iterator_t i;
    i.data = (xcb_xkb_overlay_key_t *) (R + 1);
    i.rem = R->nKeys;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xkb_overlay_row_next (xcb_xkb_overlay_row_iterator_t *i)
{
    xcb_xkb_overlay_row_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xkb_overlay_row_t *)(((char *)R) + xcb_xkb_overlay_row_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xkb_overlay_row_t *) child.data;
}

xcb_generic_iterator_t
xcb_xkb_overlay_row_end (xcb_xkb_overlay_row_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xkb_overlay_row_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_xkb_overlay_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_overlay_t *_aux = (xcb_xkb_overlay_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_xkb_overlay_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* rows */
    for(i=0; i<_aux->nRows; i++) {
        xcb_tmp_len = xcb_xkb_overlay_row_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_xkb_overlay_row_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

int
xcb_xkb_overlay_rows_length (const xcb_xkb_overlay_t *R)
{
    return R->nRows;
}

xcb_xkb_overlay_row_iterator_t
xcb_xkb_overlay_rows_iterator (const xcb_xkb_overlay_t *R)
{
    xcb_xkb_overlay_row_iterator_t i;
    i.data = (xcb_xkb_overlay_row_t *) (R + 1);
    i.rem = R->nRows;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xkb_overlay_next (xcb_xkb_overlay_iterator_t *i)
{
    xcb_xkb_overlay_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xkb_overlay_t *)(((char *)R) + xcb_xkb_overlay_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xkb_overlay_t *) child.data;
}

xcb_generic_iterator_t
xcb_xkb_overlay_end (xcb_xkb_overlay_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xkb_overlay_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_xkb_row_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_row_t *_aux = (xcb_xkb_row_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_row_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* keys */
    xcb_block_len += _aux->nKeys * sizeof(xcb_xkb_key_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_key_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xkb_key_t *
xcb_xkb_row_keys (const xcb_xkb_row_t *R)
{
    return (xcb_xkb_key_t *) (R + 1);
}

int
xcb_xkb_row_keys_length (const xcb_xkb_row_t *R)
{
    return R->nKeys;
}

xcb_xkb_key_iterator_t
xcb_xkb_row_keys_iterator (const xcb_xkb_row_t *R)
{
    xcb_xkb_key_iterator_t i;
    i.data = (xcb_xkb_key_t *) (R + 1);
    i.rem = R->nKeys;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xkb_row_next (xcb_xkb_row_iterator_t *i)
{
    xcb_xkb_row_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xkb_row_t *)(((char *)R) + xcb_xkb_row_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xkb_row_t *) child.data;
}

xcb_generic_iterator_t
xcb_xkb_row_end (xcb_xkb_row_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xkb_row_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_xkb_listing_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_listing_t *_aux = (xcb_xkb_listing_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_listing_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* string */
    xcb_block_len += _aux->length * sizeof(xcb_xkb_string8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_string8_t);
    xcb_align_to = 2;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xkb_string8_t *
xcb_xkb_listing_string (const xcb_xkb_listing_t *R)
{
    return (xcb_xkb_string8_t *) (R + 1);
}

int
xcb_xkb_listing_string_length (const xcb_xkb_listing_t *R)
{
    return R->length;
}

xcb_generic_iterator_t
xcb_xkb_listing_string_end (const xcb_xkb_listing_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_xkb_string8_t *) (R + 1)) + (R->length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xkb_listing_next (xcb_xkb_listing_iterator_t *i)
{
    xcb_xkb_listing_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xkb_listing_t *)(((char *)R) + xcb_xkb_listing_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xkb_listing_t *) child.data;
}

xcb_generic_iterator_t
xcb_xkb_listing_end (xcb_xkb_listing_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xkb_listing_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_xkb_device_led_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_device_led_info_t *_aux = (xcb_xkb_device_led_info_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_device_led_info_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* names */
    xcb_block_len += xcb_popcount(_aux->namesPresent) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_atom_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* maps */
    xcb_block_len += xcb_popcount(_aux->mapsPresent) * sizeof(xcb_xkb_indicator_map_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_indicator_map_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_atom_t *
xcb_xkb_device_led_info_names (const xcb_xkb_device_led_info_t *R)
{
    return (xcb_atom_t *) (R + 1);
}

int
xcb_xkb_device_led_info_names_length (const xcb_xkb_device_led_info_t *R)
{
    return xcb_popcount(R->namesPresent);
}

xcb_generic_iterator_t
xcb_xkb_device_led_info_names_end (const xcb_xkb_device_led_info_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_atom_t *) (R + 1)) + (xcb_popcount(R->namesPresent));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xkb_indicator_map_t *
xcb_xkb_device_led_info_maps (const xcb_xkb_device_led_info_t *R)
{
    xcb_generic_iterator_t prev = xcb_xkb_device_led_info_names_end(R);
    return (xcb_xkb_indicator_map_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_indicator_map_t, prev.index) + 0);
}

int
xcb_xkb_device_led_info_maps_length (const xcb_xkb_device_led_info_t *R)
{
    return xcb_popcount(R->mapsPresent);
}

xcb_xkb_indicator_map_iterator_t
xcb_xkb_device_led_info_maps_iterator (const xcb_xkb_device_led_info_t *R)
{
    xcb_xkb_indicator_map_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xkb_device_led_info_names_end(R);
    i.data = (xcb_xkb_indicator_map_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_indicator_map_t, prev.index));
    i.rem = xcb_popcount(R->mapsPresent);
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_xkb_device_led_info_next (xcb_xkb_device_led_info_iterator_t *i)
{
    xcb_xkb_device_led_info_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_xkb_device_led_info_t *)(((char *)R) + xcb_xkb_device_led_info_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_xkb_device_led_info_t *) child.data;
}

xcb_generic_iterator_t
xcb_xkb_device_led_info_end (xcb_xkb_device_led_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_xkb_device_led_info_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_xkb_sa_no_action_next (xcb_xkb_sa_no_action_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_no_action_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_no_action_end (xcb_xkb_sa_no_action_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_set_mods_next (xcb_xkb_sa_set_mods_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_set_mods_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_set_mods_end (xcb_xkb_sa_set_mods_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_latch_mods_next (xcb_xkb_sa_latch_mods_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_latch_mods_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_latch_mods_end (xcb_xkb_sa_latch_mods_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_lock_mods_next (xcb_xkb_sa_lock_mods_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_lock_mods_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_lock_mods_end (xcb_xkb_sa_lock_mods_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_set_group_next (xcb_xkb_sa_set_group_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_set_group_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_set_group_end (xcb_xkb_sa_set_group_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_latch_group_next (xcb_xkb_sa_latch_group_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_latch_group_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_latch_group_end (xcb_xkb_sa_latch_group_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_lock_group_next (xcb_xkb_sa_lock_group_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_lock_group_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_lock_group_end (xcb_xkb_sa_lock_group_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_move_ptr_next (xcb_xkb_sa_move_ptr_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_move_ptr_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_move_ptr_end (xcb_xkb_sa_move_ptr_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_ptr_btn_next (xcb_xkb_sa_ptr_btn_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_ptr_btn_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_ptr_btn_end (xcb_xkb_sa_ptr_btn_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_lock_ptr_btn_next (xcb_xkb_sa_lock_ptr_btn_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_lock_ptr_btn_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_lock_ptr_btn_end (xcb_xkb_sa_lock_ptr_btn_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_set_ptr_dflt_next (xcb_xkb_sa_set_ptr_dflt_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_set_ptr_dflt_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_set_ptr_dflt_end (xcb_xkb_sa_set_ptr_dflt_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_iso_lock_next (xcb_xkb_sa_iso_lock_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_iso_lock_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_iso_lock_end (xcb_xkb_sa_iso_lock_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_terminate_next (xcb_xkb_sa_terminate_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_terminate_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_terminate_end (xcb_xkb_sa_terminate_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_switch_screen_next (xcb_xkb_sa_switch_screen_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_switch_screen_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_switch_screen_end (xcb_xkb_sa_switch_screen_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_set_controls_next (xcb_xkb_sa_set_controls_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_set_controls_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_set_controls_end (xcb_xkb_sa_set_controls_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_lock_controls_next (xcb_xkb_sa_lock_controls_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_lock_controls_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_lock_controls_end (xcb_xkb_sa_lock_controls_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_action_message_next (xcb_xkb_sa_action_message_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_action_message_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_action_message_end (xcb_xkb_sa_action_message_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_redirect_key_next (xcb_xkb_sa_redirect_key_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_redirect_key_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_redirect_key_end (xcb_xkb_sa_redirect_key_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_device_btn_next (xcb_xkb_sa_device_btn_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_device_btn_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_device_btn_end (xcb_xkb_sa_device_btn_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_lock_device_btn_next (xcb_xkb_sa_lock_device_btn_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_lock_device_btn_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_lock_device_btn_end (xcb_xkb_sa_lock_device_btn_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sa_device_valuator_next (xcb_xkb_sa_device_valuator_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sa_device_valuator_t);
}

xcb_generic_iterator_t
xcb_xkb_sa_device_valuator_end (xcb_xkb_sa_device_valuator_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_si_action_next (xcb_xkb_si_action_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_si_action_t);
}

xcb_generic_iterator_t
xcb_xkb_si_action_end (xcb_xkb_si_action_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_sym_interpret_next (xcb_xkb_sym_interpret_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_sym_interpret_t);
}

xcb_generic_iterator_t
xcb_xkb_sym_interpret_end (xcb_xkb_sym_interpret_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_xkb_action_next (xcb_xkb_action_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xkb_action_t);
}

xcb_generic_iterator_t
xcb_xkb_action_end (xcb_xkb_action_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_xkb_use_extension_cookie_t
xcb_xkb_use_extension (xcb_connection_t *c,
                       uint16_t          wantedMajor,
                       uint16_t          wantedMinor)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_USE_EXTENSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_use_extension_cookie_t xcb_ret;
    xcb_xkb_use_extension_request_t xcb_out;

    xcb_out.wantedMajor = wantedMajor;
    xcb_out.wantedMinor = wantedMinor;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_use_extension_cookie_t
xcb_xkb_use_extension_unchecked (xcb_connection_t *c,
                                 uint16_t          wantedMajor,
                                 uint16_t          wantedMinor)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_USE_EXTENSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_use_extension_cookie_t xcb_ret;
    xcb_xkb_use_extension_request_t xcb_out;

    xcb_out.wantedMajor = wantedMajor;
    xcb_out.wantedMinor = wantedMinor;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_use_extension_reply_t *
xcb_xkb_use_extension_reply (xcb_connection_t                *c,
                             xcb_xkb_use_extension_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_xkb_use_extension_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xkb_select_events_details_serialize (void                                  **_buffer,
                                         uint16_t                                affectWhich,
                                         uint16_t                                clear,
                                         uint16_t                                selectAll,
                                         const xcb_xkb_select_events_details_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[23];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_NEW_KEYBOARD_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectNewKeyboard */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->affectNewKeyboard;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_select_events_details_t.newKeyboardDetails */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->newKeyboardDetails;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_STATE_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectState */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->affectState;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_select_events_details_t.stateDetails */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->stateDetails;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_CONTROLS_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectCtrls */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->affectCtrls;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_select_events_details_t.ctrlDetails */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->ctrlDetails;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_INDICATOR_STATE_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectIndicatorState */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->affectIndicatorState;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_select_events_details_t.indicatorStateDetails */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->indicatorStateDetails;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_INDICATOR_MAP_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectIndicatorMap */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->affectIndicatorMap;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_select_events_details_t.indicatorMapDetails */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->indicatorMapDetails;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_NAMES_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->affectNames;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_select_events_details_t.namesDetails */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->namesDetails;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_COMPAT_MAP_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectCompat */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->affectCompat;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_select_events_details_t.compatDetails */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->compatDetails;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_BELL_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectBell */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->affectBell;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_select_events_details_t.bellDetails */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->bellDetails;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_ACTION_MESSAGE) {
        /* xcb_xkb_select_events_details_t.affectMsgDetails */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->affectMsgDetails;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_select_events_details_t.msgDetails */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->msgDetails;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_ACCESS_X_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectAccessX */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->affectAccessX;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_select_events_details_t.accessXDetails */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->accessXDetails;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_EXTENSION_DEVICE_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectExtDev */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->affectExtDev;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_select_events_details_t.extdevDetails */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->extdevDetails;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_xkb_select_events_details_unpack (const void                       *_buffer,
                                      uint16_t                          affectWhich,
                                      uint16_t                          clear,
                                      uint16_t                          selectAll,
                                      xcb_xkb_select_events_details_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_NEW_KEYBOARD_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectNewKeyboard */
        _aux->affectNewKeyboard = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_select_events_details_t.newKeyboardDetails */
        _aux->newKeyboardDetails = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_STATE_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectState */
        _aux->affectState = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_select_events_details_t.stateDetails */
        _aux->stateDetails = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_CONTROLS_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectCtrls */
        _aux->affectCtrls = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_select_events_details_t.ctrlDetails */
        _aux->ctrlDetails = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_INDICATOR_STATE_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectIndicatorState */
        _aux->affectIndicatorState = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_select_events_details_t.indicatorStateDetails */
        _aux->indicatorStateDetails = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_INDICATOR_MAP_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectIndicatorMap */
        _aux->affectIndicatorMap = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_select_events_details_t.indicatorMapDetails */
        _aux->indicatorMapDetails = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_NAMES_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectNames */
        _aux->affectNames = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_select_events_details_t.namesDetails */
        _aux->namesDetails = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_COMPAT_MAP_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectCompat */
        _aux->affectCompat = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_select_events_details_t.compatDetails */
        _aux->compatDetails = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_BELL_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectBell */
        _aux->affectBell = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_select_events_details_t.bellDetails */
        _aux->bellDetails = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_ACTION_MESSAGE) {
        /* xcb_xkb_select_events_details_t.affectMsgDetails */
        _aux->affectMsgDetails = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_select_events_details_t.msgDetails */
        _aux->msgDetails = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_ACCESS_X_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectAccessX */
        _aux->affectAccessX = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_select_events_details_t.accessXDetails */
        _aux->accessXDetails = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
    }
    if((affectWhich & ((~clear) & (~selectAll))) & XCB_XKB_EVENT_TYPE_EXTENSION_DEVICE_NOTIFY) {
        /* xcb_xkb_select_events_details_t.affectExtDev */
        _aux->affectExtDev = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_select_events_details_t.extdevDetails */
        _aux->extdevDetails = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_xkb_select_events_details_sizeof (const void  *_buffer,
                                      uint16_t     affectWhich,
                                      uint16_t     clear,
                                      uint16_t     selectAll)
{
    xcb_xkb_select_events_details_t _aux;
    return xcb_xkb_select_events_details_unpack(_buffer, affectWhich, clear, selectAll, &_aux);
}

int
xcb_xkb_select_events_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_select_events_request_t *_aux = (xcb_xkb_select_events_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_select_events_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* details */
    xcb_block_len += xcb_xkb_select_events_details_sizeof(xcb_tmp, _aux->affectWhich, _aux->clear, _aux->selectAll);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_xkb_select_events_checked (xcb_connection_t      *c,
                               xcb_xkb_device_spec_t  deviceSpec,
                               uint16_t               affectWhich,
                               uint16_t               clear,
                               uint16_t               selectAll,
                               uint16_t               affectMap,
                               uint16_t               map,
                               const void            *details)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SELECT_EVENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_select_events_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.affectWhich = affectWhich;
    xcb_out.clear = clear;
    xcb_out.selectAll = selectAll;
    xcb_out.affectMap = affectMap;
    xcb_out.map = map;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_select_events_details_t details */
    xcb_parts[4].iov_base = (char *) details;
    xcb_parts[4].iov_len =
      xcb_xkb_select_events_details_sizeof (details, affectWhich, clear, selectAll);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_select_events (xcb_connection_t      *c,
                       xcb_xkb_device_spec_t  deviceSpec,
                       uint16_t               affectWhich,
                       uint16_t               clear,
                       uint16_t               selectAll,
                       uint16_t               affectMap,
                       uint16_t               map,
                       const void            *details)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SELECT_EVENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_select_events_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.affectWhich = affectWhich;
    xcb_out.clear = clear;
    xcb_out.selectAll = selectAll;
    xcb_out.affectMap = affectMap;
    xcb_out.map = map;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_select_events_details_t details */
    xcb_parts[4].iov_base = (char *) details;
    xcb_parts[4].iov_len =
      xcb_xkb_select_events_details_sizeof (details, affectWhich, clear, selectAll);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_select_events_aux_checked (xcb_connection_t                      *c,
                                   xcb_xkb_device_spec_t                  deviceSpec,
                                   uint16_t                               affectWhich,
                                   uint16_t                               clear,
                                   uint16_t                               selectAll,
                                   uint16_t                               affectMap,
                                   uint16_t                               map,
                                   const xcb_xkb_select_events_details_t *details)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SELECT_EVENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_select_events_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.affectWhich = affectWhich;
    xcb_out.clear = clear;
    xcb_out.selectAll = selectAll;
    xcb_out.affectMap = affectMap;
    xcb_out.map = map;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_select_events_details_t details */
    xcb_parts[4].iov_len =
      xcb_xkb_select_events_details_serialize (&xcb_aux0, affectWhich, clear, selectAll, details);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_select_events_aux (xcb_connection_t                      *c,
                           xcb_xkb_device_spec_t                  deviceSpec,
                           uint16_t                               affectWhich,
                           uint16_t                               clear,
                           uint16_t                               selectAll,
                           uint16_t                               affectMap,
                           uint16_t                               map,
                           const xcb_xkb_select_events_details_t *details)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SELECT_EVENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_select_events_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.affectWhich = affectWhich;
    xcb_out.clear = clear;
    xcb_out.selectAll = selectAll;
    xcb_out.affectMap = affectMap;
    xcb_out.map = map;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_select_events_details_t details */
    xcb_parts[4].iov_len =
      xcb_xkb_select_events_details_serialize (&xcb_aux0, affectWhich, clear, selectAll, details);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_xkb_select_events_details (const xcb_xkb_select_events_request_t *R)
{
    return (void *) (R + 1);
}

xcb_void_cookie_t
xcb_xkb_bell_checked (xcb_connection_t          *c,
                      xcb_xkb_device_spec_t      deviceSpec,
                      xcb_xkb_bell_class_spec_t  bellClass,
                      xcb_xkb_id_spec_t          bellID,
                      int8_t                     percent,
                      uint8_t                    forceSound,
                      uint8_t                    eventOnly,
                      int16_t                    pitch,
                      int16_t                    duration,
                      xcb_atom_t                 name,
                      xcb_window_t               window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_BELL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_bell_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.bellClass = bellClass;
    xcb_out.bellID = bellID;
    xcb_out.percent = percent;
    xcb_out.forceSound = forceSound;
    xcb_out.eventOnly = eventOnly;
    xcb_out.pad0 = 0;
    xcb_out.pitch = pitch;
    xcb_out.duration = duration;
    memset(xcb_out.pad1, 0, 2);
    xcb_out.name = name;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_bell (xcb_connection_t          *c,
              xcb_xkb_device_spec_t      deviceSpec,
              xcb_xkb_bell_class_spec_t  bellClass,
              xcb_xkb_id_spec_t          bellID,
              int8_t                     percent,
              uint8_t                    forceSound,
              uint8_t                    eventOnly,
              int16_t                    pitch,
              int16_t                    duration,
              xcb_atom_t                 name,
              xcb_window_t               window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_BELL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_bell_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.bellClass = bellClass;
    xcb_out.bellID = bellID;
    xcb_out.percent = percent;
    xcb_out.forceSound = forceSound;
    xcb_out.eventOnly = eventOnly;
    xcb_out.pad0 = 0;
    xcb_out.pitch = pitch;
    xcb_out.duration = duration;
    memset(xcb_out.pad1, 0, 2);
    xcb_out.name = name;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_state_cookie_t
xcb_xkb_get_state (xcb_connection_t      *c,
                   xcb_xkb_device_spec_t  deviceSpec)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_STATE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_state_cookie_t xcb_ret;
    xcb_xkb_get_state_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_state_cookie_t
xcb_xkb_get_state_unchecked (xcb_connection_t      *c,
                             xcb_xkb_device_spec_t  deviceSpec)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_STATE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_state_cookie_t xcb_ret;
    xcb_xkb_get_state_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_state_reply_t *
xcb_xkb_get_state_reply (xcb_connection_t            *c,
                         xcb_xkb_get_state_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e)
{
    return (xcb_xkb_get_state_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_xkb_latch_lock_state_checked (xcb_connection_t      *c,
                                  xcb_xkb_device_spec_t  deviceSpec,
                                  uint8_t                affectModLocks,
                                  uint8_t                modLocks,
                                  uint8_t                lockGroup,
                                  uint8_t                groupLock,
                                  uint8_t                affectModLatches,
                                  uint8_t                latchGroup,
                                  uint16_t               groupLatch)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_LATCH_LOCK_STATE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_latch_lock_state_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.affectModLocks = affectModLocks;
    xcb_out.modLocks = modLocks;
    xcb_out.lockGroup = lockGroup;
    xcb_out.groupLock = groupLock;
    xcb_out.affectModLatches = affectModLatches;
    xcb_out.pad0 = 0;
    xcb_out.pad1 = 0;
    xcb_out.latchGroup = latchGroup;
    xcb_out.groupLatch = groupLatch;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_latch_lock_state (xcb_connection_t      *c,
                          xcb_xkb_device_spec_t  deviceSpec,
                          uint8_t                affectModLocks,
                          uint8_t                modLocks,
                          uint8_t                lockGroup,
                          uint8_t                groupLock,
                          uint8_t                affectModLatches,
                          uint8_t                latchGroup,
                          uint16_t               groupLatch)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_LATCH_LOCK_STATE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_latch_lock_state_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.affectModLocks = affectModLocks;
    xcb_out.modLocks = modLocks;
    xcb_out.lockGroup = lockGroup;
    xcb_out.groupLock = groupLock;
    xcb_out.affectModLatches = affectModLatches;
    xcb_out.pad0 = 0;
    xcb_out.pad1 = 0;
    xcb_out.latchGroup = latchGroup;
    xcb_out.groupLatch = groupLatch;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_controls_cookie_t
xcb_xkb_get_controls (xcb_connection_t      *c,
                      xcb_xkb_device_spec_t  deviceSpec)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_CONTROLS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_controls_cookie_t xcb_ret;
    xcb_xkb_get_controls_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_controls_cookie_t
xcb_xkb_get_controls_unchecked (xcb_connection_t      *c,
                                xcb_xkb_device_spec_t  deviceSpec)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_CONTROLS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_controls_cookie_t xcb_ret;
    xcb_xkb_get_controls_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_controls_reply_t *
xcb_xkb_get_controls_reply (xcb_connection_t               *c,
                            xcb_xkb_get_controls_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e)
{
    return (xcb_xkb_get_controls_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_xkb_set_controls_checked (xcb_connection_t      *c,
                              xcb_xkb_device_spec_t  deviceSpec,
                              uint8_t                affectInternalRealMods,
                              uint8_t                internalRealMods,
                              uint8_t                affectIgnoreLockRealMods,
                              uint8_t                ignoreLockRealMods,
                              uint16_t               affectInternalVirtualMods,
                              uint16_t               internalVirtualMods,
                              uint16_t               affectIgnoreLockVirtualMods,
                              uint16_t               ignoreLockVirtualMods,
                              uint8_t                mouseKeysDfltBtn,
                              uint8_t                groupsWrap,
                              uint16_t               accessXOptions,
                              uint32_t               affectEnabledControls,
                              uint32_t               enabledControls,
                              uint32_t               changeControls,
                              uint16_t               repeatDelay,
                              uint16_t               repeatInterval,
                              uint16_t               slowKeysDelay,
                              uint16_t               debounceDelay,
                              uint16_t               mouseKeysDelay,
                              uint16_t               mouseKeysInterval,
                              uint16_t               mouseKeysTimeToMax,
                              uint16_t               mouseKeysMaxSpeed,
                              int16_t                mouseKeysCurve,
                              uint16_t               accessXTimeout,
                              uint32_t               accessXTimeoutMask,
                              uint32_t               accessXTimeoutValues,
                              uint16_t               accessXTimeoutOptionsMask,
                              uint16_t               accessXTimeoutOptionsValues,
                              const uint8_t         *perKeyRepeat)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_CONTROLS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_controls_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.affectInternalRealMods = affectInternalRealMods;
    xcb_out.internalRealMods = internalRealMods;
    xcb_out.affectIgnoreLockRealMods = affectIgnoreLockRealMods;
    xcb_out.ignoreLockRealMods = ignoreLockRealMods;
    xcb_out.affectInternalVirtualMods = affectInternalVirtualMods;
    xcb_out.internalVirtualMods = internalVirtualMods;
    xcb_out.affectIgnoreLockVirtualMods = affectIgnoreLockVirtualMods;
    xcb_out.ignoreLockVirtualMods = ignoreLockVirtualMods;
    xcb_out.mouseKeysDfltBtn = mouseKeysDfltBtn;
    xcb_out.groupsWrap = groupsWrap;
    xcb_out.accessXOptions = accessXOptions;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.affectEnabledControls = affectEnabledControls;
    xcb_out.enabledControls = enabledControls;
    xcb_out.changeControls = changeControls;
    xcb_out.repeatDelay = repeatDelay;
    xcb_out.repeatInterval = repeatInterval;
    xcb_out.slowKeysDelay = slowKeysDelay;
    xcb_out.debounceDelay = debounceDelay;
    xcb_out.mouseKeysDelay = mouseKeysDelay;
    xcb_out.mouseKeysInterval = mouseKeysInterval;
    xcb_out.mouseKeysTimeToMax = mouseKeysTimeToMax;
    xcb_out.mouseKeysMaxSpeed = mouseKeysMaxSpeed;
    xcb_out.mouseKeysCurve = mouseKeysCurve;
    xcb_out.accessXTimeout = accessXTimeout;
    xcb_out.accessXTimeoutMask = accessXTimeoutMask;
    xcb_out.accessXTimeoutValues = accessXTimeoutValues;
    xcb_out.accessXTimeoutOptionsMask = accessXTimeoutOptionsMask;
    xcb_out.accessXTimeoutOptionsValues = accessXTimeoutOptionsValues;
    memcpy(xcb_out.perKeyRepeat, perKeyRepeat, 32);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_set_controls (xcb_connection_t      *c,
                      xcb_xkb_device_spec_t  deviceSpec,
                      uint8_t                affectInternalRealMods,
                      uint8_t                internalRealMods,
                      uint8_t                affectIgnoreLockRealMods,
                      uint8_t                ignoreLockRealMods,
                      uint16_t               affectInternalVirtualMods,
                      uint16_t               internalVirtualMods,
                      uint16_t               affectIgnoreLockVirtualMods,
                      uint16_t               ignoreLockVirtualMods,
                      uint8_t                mouseKeysDfltBtn,
                      uint8_t                groupsWrap,
                      uint16_t               accessXOptions,
                      uint32_t               affectEnabledControls,
                      uint32_t               enabledControls,
                      uint32_t               changeControls,
                      uint16_t               repeatDelay,
                      uint16_t               repeatInterval,
                      uint16_t               slowKeysDelay,
                      uint16_t               debounceDelay,
                      uint16_t               mouseKeysDelay,
                      uint16_t               mouseKeysInterval,
                      uint16_t               mouseKeysTimeToMax,
                      uint16_t               mouseKeysMaxSpeed,
                      int16_t                mouseKeysCurve,
                      uint16_t               accessXTimeout,
                      uint32_t               accessXTimeoutMask,
                      uint32_t               accessXTimeoutValues,
                      uint16_t               accessXTimeoutOptionsMask,
                      uint16_t               accessXTimeoutOptionsValues,
                      const uint8_t         *perKeyRepeat)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_CONTROLS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_controls_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.affectInternalRealMods = affectInternalRealMods;
    xcb_out.internalRealMods = internalRealMods;
    xcb_out.affectIgnoreLockRealMods = affectIgnoreLockRealMods;
    xcb_out.ignoreLockRealMods = ignoreLockRealMods;
    xcb_out.affectInternalVirtualMods = affectInternalVirtualMods;
    xcb_out.internalVirtualMods = internalVirtualMods;
    xcb_out.affectIgnoreLockVirtualMods = affectIgnoreLockVirtualMods;
    xcb_out.ignoreLockVirtualMods = ignoreLockVirtualMods;
    xcb_out.mouseKeysDfltBtn = mouseKeysDfltBtn;
    xcb_out.groupsWrap = groupsWrap;
    xcb_out.accessXOptions = accessXOptions;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.affectEnabledControls = affectEnabledControls;
    xcb_out.enabledControls = enabledControls;
    xcb_out.changeControls = changeControls;
    xcb_out.repeatDelay = repeatDelay;
    xcb_out.repeatInterval = repeatInterval;
    xcb_out.slowKeysDelay = slowKeysDelay;
    xcb_out.debounceDelay = debounceDelay;
    xcb_out.mouseKeysDelay = mouseKeysDelay;
    xcb_out.mouseKeysInterval = mouseKeysInterval;
    xcb_out.mouseKeysTimeToMax = mouseKeysTimeToMax;
    xcb_out.mouseKeysMaxSpeed = mouseKeysMaxSpeed;
    xcb_out.mouseKeysCurve = mouseKeysCurve;
    xcb_out.accessXTimeout = accessXTimeout;
    xcb_out.accessXTimeoutMask = accessXTimeoutMask;
    xcb_out.accessXTimeoutValues = accessXTimeoutValues;
    xcb_out.accessXTimeoutOptionsMask = accessXTimeoutOptionsMask;
    xcb_out.accessXTimeoutOptionsValues = accessXTimeoutOptionsValues;
    memcpy(xcb_out.perKeyRepeat, perKeyRepeat, 32);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xkb_get_map_map_types_rtrn_length (const xcb_xkb_get_map_reply_t *R,
                                       const xcb_xkb_get_map_map_t *S)
{
    return R->nTypes;
}

xcb_xkb_key_type_iterator_t
xcb_xkb_get_map_map_types_rtrn_iterator (const xcb_xkb_get_map_reply_t *R,
                                         const xcb_xkb_get_map_map_t *S)
{
    xcb_xkb_key_type_iterator_t i;
    i.data = S->types_rtrn;
    i.rem = R->nTypes;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_xkb_get_map_map_syms_rtrn_length (const xcb_xkb_get_map_reply_t *R,
                                      const xcb_xkb_get_map_map_t *S)
{
    return R->nKeySyms;
}

xcb_xkb_key_sym_map_iterator_t
xcb_xkb_get_map_map_syms_rtrn_iterator (const xcb_xkb_get_map_reply_t *R,
                                        const xcb_xkb_get_map_map_t *S)
{
    xcb_xkb_key_sym_map_iterator_t i;
    i.data = S->syms_rtrn;
    i.rem = R->nKeySyms;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint8_t *
xcb_xkb_get_map_map_acts_rtrn_count (const xcb_xkb_get_map_map_t *S)
{
    return S->acts_rtrn_count;
}

int
xcb_xkb_get_map_map_acts_rtrn_count_length (const xcb_xkb_get_map_reply_t *R,
                                            const xcb_xkb_get_map_map_t *S)
{
    return R->nKeyActions;
}

xcb_generic_iterator_t
xcb_xkb_get_map_map_acts_rtrn_count_end (const xcb_xkb_get_map_reply_t *R,
                                         const xcb_xkb_get_map_map_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->acts_rtrn_count + R->nKeyActions;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_action_t *
xcb_xkb_get_map_map_acts_rtrn_acts (const xcb_xkb_get_map_map_t *S)
{
    return S->acts_rtrn_acts;
}

int
xcb_xkb_get_map_map_acts_rtrn_acts_length (const xcb_xkb_get_map_reply_t *R,
                                           const xcb_xkb_get_map_map_t *S)
{
    return R->totalActions;
}

xcb_xkb_action_iterator_t
xcb_xkb_get_map_map_acts_rtrn_acts_iterator (const xcb_xkb_get_map_reply_t *R,
                                             const xcb_xkb_get_map_map_t *S)
{
    xcb_xkb_action_iterator_t i;
    i.data = S->acts_rtrn_acts;
    i.rem = R->totalActions;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_set_behavior_t *
xcb_xkb_get_map_map_behaviors_rtrn (const xcb_xkb_get_map_map_t *S)
{
    return S->behaviors_rtrn;
}

int
xcb_xkb_get_map_map_behaviors_rtrn_length (const xcb_xkb_get_map_reply_t *R,
                                           const xcb_xkb_get_map_map_t *S)
{
    return R->totalKeyBehaviors;
}

xcb_xkb_set_behavior_iterator_t
xcb_xkb_get_map_map_behaviors_rtrn_iterator (const xcb_xkb_get_map_reply_t *R,
                                             const xcb_xkb_get_map_map_t *S)
{
    xcb_xkb_set_behavior_iterator_t i;
    i.data = S->behaviors_rtrn;
    i.rem = R->totalKeyBehaviors;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint8_t *
xcb_xkb_get_map_map_vmods_rtrn (const xcb_xkb_get_map_map_t *S)
{
    return S->vmods_rtrn;
}

int
xcb_xkb_get_map_map_vmods_rtrn_length (const xcb_xkb_get_map_reply_t *R,
                                       const xcb_xkb_get_map_map_t *S)
{
    return xcb_popcount(R->virtualMods);
}

xcb_generic_iterator_t
xcb_xkb_get_map_map_vmods_rtrn_end (const xcb_xkb_get_map_reply_t *R,
                                    const xcb_xkb_get_map_map_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->vmods_rtrn + xcb_popcount(R->virtualMods);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_set_explicit_t *
xcb_xkb_get_map_map_explicit_rtrn (const xcb_xkb_get_map_map_t *S)
{
    return S->explicit_rtrn;
}

int
xcb_xkb_get_map_map_explicit_rtrn_length (const xcb_xkb_get_map_reply_t *R,
                                          const xcb_xkb_get_map_map_t *S)
{
    return R->totalKeyExplicit;
}

xcb_xkb_set_explicit_iterator_t
xcb_xkb_get_map_map_explicit_rtrn_iterator (const xcb_xkb_get_map_reply_t *R,
                                            const xcb_xkb_get_map_map_t *S)
{
    xcb_xkb_set_explicit_iterator_t i;
    i.data = S->explicit_rtrn;
    i.rem = R->totalKeyExplicit;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_key_mod_map_t *
xcb_xkb_get_map_map_modmap_rtrn (const xcb_xkb_get_map_map_t *S)
{
    return S->modmap_rtrn;
}

int
xcb_xkb_get_map_map_modmap_rtrn_length (const xcb_xkb_get_map_reply_t *R,
                                        const xcb_xkb_get_map_map_t *S)
{
    return R->totalModMapKeys;
}

xcb_xkb_key_mod_map_iterator_t
xcb_xkb_get_map_map_modmap_rtrn_iterator (const xcb_xkb_get_map_reply_t *R,
                                          const xcb_xkb_get_map_map_t *S)
{
    xcb_xkb_key_mod_map_iterator_t i;
    i.data = S->modmap_rtrn;
    i.rem = R->totalModMapKeys;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_key_v_mod_map_t *
xcb_xkb_get_map_map_vmodmap_rtrn (const xcb_xkb_get_map_map_t *S)
{
    return S->vmodmap_rtrn;
}

int
xcb_xkb_get_map_map_vmodmap_rtrn_length (const xcb_xkb_get_map_reply_t *R,
                                         const xcb_xkb_get_map_map_t *S)
{
    return R->totalVModMapKeys;
}

xcb_xkb_key_v_mod_map_iterator_t
xcb_xkb_get_map_map_vmodmap_rtrn_iterator (const xcb_xkb_get_map_reply_t *R,
                                           const xcb_xkb_get_map_map_t *S)
{
    xcb_xkb_key_v_mod_map_iterator_t i;
    i.data = S->vmodmap_rtrn;
    i.rem = R->totalVModMapKeys;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_xkb_get_map_map_serialize (void                        **_buffer,
                               uint8_t                       nTypes,
                               uint8_t                       nKeySyms,
                               uint8_t                       nKeyActions,
                               uint16_t                      totalActions,
                               uint8_t                       totalKeyBehaviors,
                               uint16_t                      virtualMods,
                               uint8_t                       totalKeyExplicit,
                               uint8_t                       totalModMapKeys,
                               uint8_t                       totalVModMapKeys,
                               uint16_t                      present,
                               const xcb_xkb_get_map_map_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[23];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(present & XCB_XKB_MAP_PART_KEY_TYPES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* types_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->types_rtrn;
        xcb_parts[xcb_parts_idx].iov_len = 0;
        xcb_tmp = (char *) _aux->types_rtrn;
        for(i=0; i<nTypes; i++) { 
            xcb_block_len = xcb_xkb_key_type_sizeof(xcb_tmp);
            xcb_parts[xcb_parts_idx].iov_len += xcb_block_len;
        }
        xcb_block_len = xcb_parts[xcb_parts_idx].iov_len;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_type_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_SYMS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* syms_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->syms_rtrn;
        xcb_parts[xcb_parts_idx].iov_len = 0;
        xcb_tmp = (char *) _aux->syms_rtrn;
        for(i=0; i<nKeySyms; i++) { 
            xcb_block_len = xcb_xkb_key_sym_map_sizeof(xcb_tmp);
            xcb_parts[xcb_parts_idx].iov_len += xcb_block_len;
        }
        xcb_block_len = xcb_parts[xcb_parts_idx].iov_len;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_sym_map_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_ACTIONS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* acts_rtrn_count */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->acts_rtrn_count;
        xcb_block_len += nKeyActions * sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = nKeyActions * sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* acts_rtrn_acts */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->acts_rtrn_acts;
        xcb_block_len += totalActions * sizeof(xcb_xkb_action_t);
        xcb_parts[xcb_parts_idx].iov_len = totalActions * sizeof(xcb_xkb_action_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_action_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_BEHAVIORS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* behaviors_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->behaviors_rtrn;
        xcb_block_len += totalKeyBehaviors * sizeof(xcb_xkb_set_behavior_t);
        xcb_parts[xcb_parts_idx].iov_len = totalKeyBehaviors * sizeof(xcb_xkb_set_behavior_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_set_behavior_t);
    }
    if(present & XCB_XKB_MAP_PART_VIRTUAL_MODS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* vmods_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->vmods_rtrn;
        xcb_block_len += xcb_popcount(virtualMods) * sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(virtualMods) * sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(present & XCB_XKB_MAP_PART_EXPLICIT_COMPONENTS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* explicit_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->explicit_rtrn;
        xcb_block_len += totalKeyExplicit * sizeof(xcb_xkb_set_explicit_t);
        xcb_parts[xcb_parts_idx].iov_len = totalKeyExplicit * sizeof(xcb_xkb_set_explicit_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_set_explicit_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(present & XCB_XKB_MAP_PART_MODIFIER_MAP) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* modmap_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->modmap_rtrn;
        xcb_block_len += totalModMapKeys * sizeof(xcb_xkb_key_mod_map_t);
        xcb_parts[xcb_parts_idx].iov_len = totalModMapKeys * sizeof(xcb_xkb_key_mod_map_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_mod_map_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(present & XCB_XKB_MAP_PART_VIRTUAL_MOD_MAP) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* vmodmap_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->vmodmap_rtrn;
        xcb_block_len += totalVModMapKeys * sizeof(xcb_xkb_key_v_mod_map_t);
        xcb_parts[xcb_parts_idx].iov_len = totalVModMapKeys * sizeof(xcb_xkb_key_v_mod_map_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_v_mod_map_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_xkb_get_map_map_unpack (const void             *_buffer,
                            uint8_t                 nTypes,
                            uint8_t                 nKeySyms,
                            uint8_t                 nKeyActions,
                            uint16_t                totalActions,
                            uint8_t                 totalKeyBehaviors,
                            uint16_t                virtualMods,
                            uint8_t                 totalKeyExplicit,
                            uint8_t                 totalModMapKeys,
                            uint8_t                 totalVModMapKeys,
                            uint16_t                present,
                            xcb_xkb_get_map_map_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    if(present & XCB_XKB_MAP_PART_KEY_TYPES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* types_rtrn */
        _aux->types_rtrn = (xcb_xkb_key_type_t *)xcb_tmp;
        for(i=0; i<nTypes; i++) {
            xcb_tmp_len = xcb_xkb_key_type_sizeof(xcb_tmp);
            xcb_block_len += xcb_tmp_len;
            xcb_tmp += xcb_tmp_len;
        }
        xcb_align_to = ALIGNOF(xcb_xkb_key_type_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_SYMS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* syms_rtrn */
        _aux->syms_rtrn = (xcb_xkb_key_sym_map_t *)xcb_tmp;
        for(i=0; i<nKeySyms; i++) {
            xcb_tmp_len = xcb_xkb_key_sym_map_sizeof(xcb_tmp);
            xcb_block_len += xcb_tmp_len;
            xcb_tmp += xcb_tmp_len;
        }
        xcb_align_to = ALIGNOF(xcb_xkb_key_sym_map_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_ACTIONS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* acts_rtrn_count */
        _aux->acts_rtrn_count = (uint8_t *)xcb_tmp;
        xcb_block_len += nKeyActions * sizeof(xcb_keycode_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* acts_rtrn_acts */
        _aux->acts_rtrn_acts = (xcb_xkb_action_t *)xcb_tmp;
        xcb_block_len += totalActions * sizeof(xcb_xkb_action_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_action_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_BEHAVIORS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* behaviors_rtrn */
        _aux->behaviors_rtrn = (xcb_xkb_set_behavior_t *)xcb_tmp;
        xcb_block_len += totalKeyBehaviors * sizeof(xcb_xkb_set_behavior_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_set_behavior_t);
    }
    if(present & XCB_XKB_MAP_PART_VIRTUAL_MODS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* vmods_rtrn */
        _aux->vmods_rtrn = (uint8_t *)xcb_tmp;
        xcb_block_len += xcb_popcount(virtualMods) * sizeof(xcb_keycode_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(present & XCB_XKB_MAP_PART_EXPLICIT_COMPONENTS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* explicit_rtrn */
        _aux->explicit_rtrn = (xcb_xkb_set_explicit_t *)xcb_tmp;
        xcb_block_len += totalKeyExplicit * sizeof(xcb_xkb_set_explicit_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_set_explicit_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(present & XCB_XKB_MAP_PART_MODIFIER_MAP) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* modmap_rtrn */
        _aux->modmap_rtrn = (xcb_xkb_key_mod_map_t *)xcb_tmp;
        xcb_block_len += totalModMapKeys * sizeof(xcb_xkb_key_mod_map_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_key_mod_map_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(present & XCB_XKB_MAP_PART_VIRTUAL_MOD_MAP) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* vmodmap_rtrn */
        _aux->vmodmap_rtrn = (xcb_xkb_key_v_mod_map_t *)xcb_tmp;
        xcb_block_len += totalVModMapKeys * sizeof(xcb_xkb_key_v_mod_map_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_key_v_mod_map_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_xkb_get_map_map_sizeof (const void  *_buffer,
                            uint8_t      nTypes,
                            uint8_t      nKeySyms,
                            uint8_t      nKeyActions,
                            uint16_t     totalActions,
                            uint8_t      totalKeyBehaviors,
                            uint16_t     virtualMods,
                            uint8_t      totalKeyExplicit,
                            uint8_t      totalModMapKeys,
                            uint8_t      totalVModMapKeys,
                            uint16_t     present)
{
    xcb_xkb_get_map_map_t _aux;
    return xcb_xkb_get_map_map_unpack(_buffer, nTypes, nKeySyms, nKeyActions, totalActions, totalKeyBehaviors, virtualMods, totalKeyExplicit, totalModMapKeys, totalVModMapKeys, present, &_aux);
}

int
xcb_xkb_get_map_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_get_map_reply_t *_aux = (xcb_xkb_get_map_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_get_map_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* map */
    xcb_block_len += xcb_xkb_get_map_map_sizeof(xcb_tmp, _aux->nTypes, _aux->nKeySyms, _aux->nKeyActions, _aux->totalActions, _aux->totalKeyBehaviors, _aux->virtualMods, _aux->totalKeyExplicit, _aux->totalModMapKeys, _aux->totalVModMapKeys, _aux->present);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xkb_get_map_cookie_t
xcb_xkb_get_map (xcb_connection_t      *c,
                 xcb_xkb_device_spec_t  deviceSpec,
                 uint16_t               full,
                 uint16_t               partial,
                 uint8_t                firstType,
                 uint8_t                nTypes,
                 xcb_keycode_t          firstKeySym,
                 uint8_t                nKeySyms,
                 xcb_keycode_t          firstKeyAction,
                 uint8_t                nKeyActions,
                 xcb_keycode_t          firstKeyBehavior,
                 uint8_t                nKeyBehaviors,
                 uint16_t               virtualMods,
                 xcb_keycode_t          firstKeyExplicit,
                 uint8_t                nKeyExplicit,
                 xcb_keycode_t          firstModMapKey,
                 uint8_t                nModMapKeys,
                 xcb_keycode_t          firstVModMapKey,
                 uint8_t                nVModMapKeys)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_MAP,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_map_cookie_t xcb_ret;
    xcb_xkb_get_map_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.full = full;
    xcb_out.partial = partial;
    xcb_out.firstType = firstType;
    xcb_out.nTypes = nTypes;
    xcb_out.firstKeySym = firstKeySym;
    xcb_out.nKeySyms = nKeySyms;
    xcb_out.firstKeyAction = firstKeyAction;
    xcb_out.nKeyActions = nKeyActions;
    xcb_out.firstKeyBehavior = firstKeyBehavior;
    xcb_out.nKeyBehaviors = nKeyBehaviors;
    xcb_out.virtualMods = virtualMods;
    xcb_out.firstKeyExplicit = firstKeyExplicit;
    xcb_out.nKeyExplicit = nKeyExplicit;
    xcb_out.firstModMapKey = firstModMapKey;
    xcb_out.nModMapKeys = nModMapKeys;
    xcb_out.firstVModMapKey = firstVModMapKey;
    xcb_out.nVModMapKeys = nVModMapKeys;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_map_cookie_t
xcb_xkb_get_map_unchecked (xcb_connection_t      *c,
                           xcb_xkb_device_spec_t  deviceSpec,
                           uint16_t               full,
                           uint16_t               partial,
                           uint8_t                firstType,
                           uint8_t                nTypes,
                           xcb_keycode_t          firstKeySym,
                           uint8_t                nKeySyms,
                           xcb_keycode_t          firstKeyAction,
                           uint8_t                nKeyActions,
                           xcb_keycode_t          firstKeyBehavior,
                           uint8_t                nKeyBehaviors,
                           uint16_t               virtualMods,
                           xcb_keycode_t          firstKeyExplicit,
                           uint8_t                nKeyExplicit,
                           xcb_keycode_t          firstModMapKey,
                           uint8_t                nModMapKeys,
                           xcb_keycode_t          firstVModMapKey,
                           uint8_t                nVModMapKeys)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_MAP,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_map_cookie_t xcb_ret;
    xcb_xkb_get_map_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.full = full;
    xcb_out.partial = partial;
    xcb_out.firstType = firstType;
    xcb_out.nTypes = nTypes;
    xcb_out.firstKeySym = firstKeySym;
    xcb_out.nKeySyms = nKeySyms;
    xcb_out.firstKeyAction = firstKeyAction;
    xcb_out.nKeyActions = nKeyActions;
    xcb_out.firstKeyBehavior = firstKeyBehavior;
    xcb_out.nKeyBehaviors = nKeyBehaviors;
    xcb_out.virtualMods = virtualMods;
    xcb_out.firstKeyExplicit = firstKeyExplicit;
    xcb_out.nKeyExplicit = nKeyExplicit;
    xcb_out.firstModMapKey = firstModMapKey;
    xcb_out.nModMapKeys = nModMapKeys;
    xcb_out.firstVModMapKey = firstVModMapKey;
    xcb_out.nVModMapKeys = nVModMapKeys;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void *
xcb_xkb_get_map_map (const xcb_xkb_get_map_reply_t *R)
{
    return (void *) (R + 1);
}

xcb_xkb_get_map_reply_t *
xcb_xkb_get_map_reply (xcb_connection_t          *c,
                       xcb_xkb_get_map_cookie_t   cookie  /**< */,
                       xcb_generic_error_t      **e)
{
    return (xcb_xkb_get_map_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xkb_set_map_values_types_length (const xcb_xkb_set_map_request_t *R,
                                     const xcb_xkb_set_map_values_t *S)
{
    return R->nTypes;
}

xcb_xkb_set_key_type_iterator_t
xcb_xkb_set_map_values_types_iterator (const xcb_xkb_set_map_request_t *R,
                                       const xcb_xkb_set_map_values_t *S)
{
    xcb_xkb_set_key_type_iterator_t i;
    i.data = S->types;
    i.rem = R->nTypes;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_xkb_set_map_values_syms_length (const xcb_xkb_set_map_request_t *R,
                                    const xcb_xkb_set_map_values_t *S)
{
    return R->nKeySyms;
}

xcb_xkb_key_sym_map_iterator_t
xcb_xkb_set_map_values_syms_iterator (const xcb_xkb_set_map_request_t *R,
                                      const xcb_xkb_set_map_values_t *S)
{
    xcb_xkb_key_sym_map_iterator_t i;
    i.data = S->syms;
    i.rem = R->nKeySyms;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint8_t *
xcb_xkb_set_map_values_actions_count (const xcb_xkb_set_map_values_t *S)
{
    return S->actionsCount;
}

int
xcb_xkb_set_map_values_actions_count_length (const xcb_xkb_set_map_request_t *R,
                                             const xcb_xkb_set_map_values_t *S)
{
    return R->nKeyActions;
}

xcb_generic_iterator_t
xcb_xkb_set_map_values_actions_count_end (const xcb_xkb_set_map_request_t *R,
                                          const xcb_xkb_set_map_values_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->actionsCount + R->nKeyActions;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_action_t *
xcb_xkb_set_map_values_actions (const xcb_xkb_set_map_values_t *S)
{
    return S->actions;
}

int
xcb_xkb_set_map_values_actions_length (const xcb_xkb_set_map_request_t *R,
                                       const xcb_xkb_set_map_values_t *S)
{
    return R->totalActions;
}

xcb_xkb_action_iterator_t
xcb_xkb_set_map_values_actions_iterator (const xcb_xkb_set_map_request_t *R,
                                         const xcb_xkb_set_map_values_t *S)
{
    xcb_xkb_action_iterator_t i;
    i.data = S->actions;
    i.rem = R->totalActions;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_set_behavior_t *
xcb_xkb_set_map_values_behaviors (const xcb_xkb_set_map_values_t *S)
{
    return S->behaviors;
}

int
xcb_xkb_set_map_values_behaviors_length (const xcb_xkb_set_map_request_t *R,
                                         const xcb_xkb_set_map_values_t *S)
{
    return R->totalKeyBehaviors;
}

xcb_xkb_set_behavior_iterator_t
xcb_xkb_set_map_values_behaviors_iterator (const xcb_xkb_set_map_request_t *R,
                                           const xcb_xkb_set_map_values_t *S)
{
    xcb_xkb_set_behavior_iterator_t i;
    i.data = S->behaviors;
    i.rem = R->totalKeyBehaviors;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint8_t *
xcb_xkb_set_map_values_vmods (const xcb_xkb_set_map_values_t *S)
{
    return S->vmods;
}

int
xcb_xkb_set_map_values_vmods_length (const xcb_xkb_set_map_request_t *R,
                                     const xcb_xkb_set_map_values_t *S)
{
    return xcb_popcount(R->virtualMods);
}

xcb_generic_iterator_t
xcb_xkb_set_map_values_vmods_end (const xcb_xkb_set_map_request_t *R,
                                  const xcb_xkb_set_map_values_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->vmods + xcb_popcount(R->virtualMods);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_set_explicit_t *
xcb_xkb_set_map_values_explicit (const xcb_xkb_set_map_values_t *S)
{
    return S->explicit;
}

int
xcb_xkb_set_map_values_explicit_length (const xcb_xkb_set_map_request_t *R,
                                        const xcb_xkb_set_map_values_t *S)
{
    return R->totalKeyExplicit;
}

xcb_xkb_set_explicit_iterator_t
xcb_xkb_set_map_values_explicit_iterator (const xcb_xkb_set_map_request_t *R,
                                          const xcb_xkb_set_map_values_t *S)
{
    xcb_xkb_set_explicit_iterator_t i;
    i.data = S->explicit;
    i.rem = R->totalKeyExplicit;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_key_mod_map_t *
xcb_xkb_set_map_values_modmap (const xcb_xkb_set_map_values_t *S)
{
    return S->modmap;
}

int
xcb_xkb_set_map_values_modmap_length (const xcb_xkb_set_map_request_t *R,
                                      const xcb_xkb_set_map_values_t *S)
{
    return R->totalModMapKeys;
}

xcb_xkb_key_mod_map_iterator_t
xcb_xkb_set_map_values_modmap_iterator (const xcb_xkb_set_map_request_t *R,
                                        const xcb_xkb_set_map_values_t *S)
{
    xcb_xkb_key_mod_map_iterator_t i;
    i.data = S->modmap;
    i.rem = R->totalModMapKeys;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_key_v_mod_map_t *
xcb_xkb_set_map_values_vmodmap (const xcb_xkb_set_map_values_t *S)
{
    return S->vmodmap;
}

int
xcb_xkb_set_map_values_vmodmap_length (const xcb_xkb_set_map_request_t *R,
                                       const xcb_xkb_set_map_values_t *S)
{
    return R->totalVModMapKeys;
}

xcb_xkb_key_v_mod_map_iterator_t
xcb_xkb_set_map_values_vmodmap_iterator (const xcb_xkb_set_map_request_t *R,
                                         const xcb_xkb_set_map_values_t *S)
{
    xcb_xkb_key_v_mod_map_iterator_t i;
    i.data = S->vmodmap;
    i.rem = R->totalVModMapKeys;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_xkb_set_map_values_serialize (void                           **_buffer,
                                  uint8_t                          nTypes,
                                  uint8_t                          nKeySyms,
                                  uint8_t                          nKeyActions,
                                  uint16_t                         totalActions,
                                  uint8_t                          totalKeyBehaviors,
                                  uint16_t                         virtualMods,
                                  uint8_t                          totalKeyExplicit,
                                  uint8_t                          totalModMapKeys,
                                  uint8_t                          totalVModMapKeys,
                                  uint16_t                         present,
                                  const xcb_xkb_set_map_values_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[21];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(present & XCB_XKB_MAP_PART_KEY_TYPES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* types */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->types;
        xcb_parts[xcb_parts_idx].iov_len = 0;
        xcb_tmp = (char *) _aux->types;
        for(i=0; i<nTypes; i++) { 
            xcb_block_len = xcb_xkb_set_key_type_sizeof(xcb_tmp);
            xcb_parts[xcb_parts_idx].iov_len += xcb_block_len;
        }
        xcb_block_len = xcb_parts[xcb_parts_idx].iov_len;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_set_key_type_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_SYMS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* syms */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->syms;
        xcb_parts[xcb_parts_idx].iov_len = 0;
        xcb_tmp = (char *) _aux->syms;
        for(i=0; i<nKeySyms; i++) { 
            xcb_block_len = xcb_xkb_key_sym_map_sizeof(xcb_tmp);
            xcb_parts[xcb_parts_idx].iov_len += xcb_block_len;
        }
        xcb_block_len = xcb_parts[xcb_parts_idx].iov_len;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_sym_map_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_ACTIONS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* actionsCount */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->actionsCount;
        xcb_block_len += nKeyActions * sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = nKeyActions * sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* actions */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->actions;
        xcb_block_len += totalActions * sizeof(xcb_xkb_action_t);
        xcb_parts[xcb_parts_idx].iov_len = totalActions * sizeof(xcb_xkb_action_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_action_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_BEHAVIORS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* behaviors */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->behaviors;
        xcb_block_len += totalKeyBehaviors * sizeof(xcb_xkb_set_behavior_t);
        xcb_parts[xcb_parts_idx].iov_len = totalKeyBehaviors * sizeof(xcb_xkb_set_behavior_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_set_behavior_t);
    }
    if(present & XCB_XKB_MAP_PART_VIRTUAL_MODS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* vmods */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->vmods;
        xcb_block_len += xcb_popcount(virtualMods) * sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(virtualMods) * sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(present & XCB_XKB_MAP_PART_EXPLICIT_COMPONENTS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* explicit */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->explicit;
        xcb_block_len += totalKeyExplicit * sizeof(xcb_xkb_set_explicit_t);
        xcb_parts[xcb_parts_idx].iov_len = totalKeyExplicit * sizeof(xcb_xkb_set_explicit_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_set_explicit_t);
    }
    if(present & XCB_XKB_MAP_PART_MODIFIER_MAP) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* modmap */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->modmap;
        xcb_block_len += totalModMapKeys * sizeof(xcb_xkb_key_mod_map_t);
        xcb_parts[xcb_parts_idx].iov_len = totalModMapKeys * sizeof(xcb_xkb_key_mod_map_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_mod_map_t);
    }
    if(present & XCB_XKB_MAP_PART_VIRTUAL_MOD_MAP) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* vmodmap */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->vmodmap;
        xcb_block_len += totalVModMapKeys * sizeof(xcb_xkb_key_v_mod_map_t);
        xcb_parts[xcb_parts_idx].iov_len = totalVModMapKeys * sizeof(xcb_xkb_key_v_mod_map_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_v_mod_map_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_xkb_set_map_values_unpack (const void                *_buffer,
                               uint8_t                    nTypes,
                               uint8_t                    nKeySyms,
                               uint8_t                    nKeyActions,
                               uint16_t                   totalActions,
                               uint8_t                    totalKeyBehaviors,
                               uint16_t                   virtualMods,
                               uint8_t                    totalKeyExplicit,
                               uint8_t                    totalModMapKeys,
                               uint8_t                    totalVModMapKeys,
                               uint16_t                   present,
                               xcb_xkb_set_map_values_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    if(present & XCB_XKB_MAP_PART_KEY_TYPES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* types */
        _aux->types = (xcb_xkb_set_key_type_t *)xcb_tmp;
        for(i=0; i<nTypes; i++) {
            xcb_tmp_len = xcb_xkb_set_key_type_sizeof(xcb_tmp);
            xcb_block_len += xcb_tmp_len;
            xcb_tmp += xcb_tmp_len;
        }
        xcb_align_to = ALIGNOF(xcb_xkb_set_key_type_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_SYMS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* syms */
        _aux->syms = (xcb_xkb_key_sym_map_t *)xcb_tmp;
        for(i=0; i<nKeySyms; i++) {
            xcb_tmp_len = xcb_xkb_key_sym_map_sizeof(xcb_tmp);
            xcb_block_len += xcb_tmp_len;
            xcb_tmp += xcb_tmp_len;
        }
        xcb_align_to = ALIGNOF(xcb_xkb_key_sym_map_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_ACTIONS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* actionsCount */
        _aux->actionsCount = (uint8_t *)xcb_tmp;
        xcb_block_len += nKeyActions * sizeof(xcb_keycode_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* actions */
        _aux->actions = (xcb_xkb_action_t *)xcb_tmp;
        xcb_block_len += totalActions * sizeof(xcb_xkb_action_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_action_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_BEHAVIORS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* behaviors */
        _aux->behaviors = (xcb_xkb_set_behavior_t *)xcb_tmp;
        xcb_block_len += totalKeyBehaviors * sizeof(xcb_xkb_set_behavior_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_set_behavior_t);
    }
    if(present & XCB_XKB_MAP_PART_VIRTUAL_MODS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* vmods */
        _aux->vmods = (uint8_t *)xcb_tmp;
        xcb_block_len += xcb_popcount(virtualMods) * sizeof(xcb_keycode_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(present & XCB_XKB_MAP_PART_EXPLICIT_COMPONENTS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* explicit */
        _aux->explicit = (xcb_xkb_set_explicit_t *)xcb_tmp;
        xcb_block_len += totalKeyExplicit * sizeof(xcb_xkb_set_explicit_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_set_explicit_t);
    }
    if(present & XCB_XKB_MAP_PART_MODIFIER_MAP) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* modmap */
        _aux->modmap = (xcb_xkb_key_mod_map_t *)xcb_tmp;
        xcb_block_len += totalModMapKeys * sizeof(xcb_xkb_key_mod_map_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_key_mod_map_t);
    }
    if(present & XCB_XKB_MAP_PART_VIRTUAL_MOD_MAP) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* vmodmap */
        _aux->vmodmap = (xcb_xkb_key_v_mod_map_t *)xcb_tmp;
        xcb_block_len += totalVModMapKeys * sizeof(xcb_xkb_key_v_mod_map_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_key_v_mod_map_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_xkb_set_map_values_sizeof (const void  *_buffer,
                               uint8_t      nTypes,
                               uint8_t      nKeySyms,
                               uint8_t      nKeyActions,
                               uint16_t     totalActions,
                               uint8_t      totalKeyBehaviors,
                               uint16_t     virtualMods,
                               uint8_t      totalKeyExplicit,
                               uint8_t      totalModMapKeys,
                               uint8_t      totalVModMapKeys,
                               uint16_t     present)
{
    xcb_xkb_set_map_values_t _aux;
    return xcb_xkb_set_map_values_unpack(_buffer, nTypes, nKeySyms, nKeyActions, totalActions, totalKeyBehaviors, virtualMods, totalKeyExplicit, totalModMapKeys, totalVModMapKeys, present, &_aux);
}

int
xcb_xkb_set_map_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_set_map_request_t *_aux = (xcb_xkb_set_map_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_set_map_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* values */
    xcb_block_len += xcb_xkb_set_map_values_sizeof(xcb_tmp, _aux->nTypes, _aux->nKeySyms, _aux->nKeyActions, _aux->totalActions, _aux->totalKeyBehaviors, _aux->virtualMods, _aux->totalKeyExplicit, _aux->totalModMapKeys, _aux->totalVModMapKeys, _aux->present);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_xkb_set_map_checked (xcb_connection_t      *c,
                         xcb_xkb_device_spec_t  deviceSpec,
                         uint16_t               present,
                         uint16_t               flags,
                         xcb_keycode_t          minKeyCode,
                         xcb_keycode_t          maxKeyCode,
                         uint8_t                firstType,
                         uint8_t                nTypes,
                         xcb_keycode_t          firstKeySym,
                         uint8_t                nKeySyms,
                         uint16_t               totalSyms,
                         xcb_keycode_t          firstKeyAction,
                         uint8_t                nKeyActions,
                         uint16_t               totalActions,
                         xcb_keycode_t          firstKeyBehavior,
                         uint8_t                nKeyBehaviors,
                         uint8_t                totalKeyBehaviors,
                         xcb_keycode_t          firstKeyExplicit,
                         uint8_t                nKeyExplicit,
                         uint8_t                totalKeyExplicit,
                         xcb_keycode_t          firstModMapKey,
                         uint8_t                nModMapKeys,
                         uint8_t                totalModMapKeys,
                         xcb_keycode_t          firstVModMapKey,
                         uint8_t                nVModMapKeys,
                         uint8_t                totalVModMapKeys,
                         uint16_t               virtualMods,
                         const void            *values)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_MAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_map_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.present = present;
    xcb_out.flags = flags;
    xcb_out.minKeyCode = minKeyCode;
    xcb_out.maxKeyCode = maxKeyCode;
    xcb_out.firstType = firstType;
    xcb_out.nTypes = nTypes;
    xcb_out.firstKeySym = firstKeySym;
    xcb_out.nKeySyms = nKeySyms;
    xcb_out.totalSyms = totalSyms;
    xcb_out.firstKeyAction = firstKeyAction;
    xcb_out.nKeyActions = nKeyActions;
    xcb_out.totalActions = totalActions;
    xcb_out.firstKeyBehavior = firstKeyBehavior;
    xcb_out.nKeyBehaviors = nKeyBehaviors;
    xcb_out.totalKeyBehaviors = totalKeyBehaviors;
    xcb_out.firstKeyExplicit = firstKeyExplicit;
    xcb_out.nKeyExplicit = nKeyExplicit;
    xcb_out.totalKeyExplicit = totalKeyExplicit;
    xcb_out.firstModMapKey = firstModMapKey;
    xcb_out.nModMapKeys = nModMapKeys;
    xcb_out.totalModMapKeys = totalModMapKeys;
    xcb_out.firstVModMapKey = firstVModMapKey;
    xcb_out.nVModMapKeys = nVModMapKeys;
    xcb_out.totalVModMapKeys = totalVModMapKeys;
    xcb_out.virtualMods = virtualMods;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_set_map_values_t values */
    xcb_parts[4].iov_base = (char *) values;
    xcb_parts[4].iov_len =
      xcb_xkb_set_map_values_sizeof (values, nTypes, nKeySyms, nKeyActions, totalActions, totalKeyBehaviors, virtualMods, totalKeyExplicit, totalModMapKeys, totalVModMapKeys, present);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_set_map (xcb_connection_t      *c,
                 xcb_xkb_device_spec_t  deviceSpec,
                 uint16_t               present,
                 uint16_t               flags,
                 xcb_keycode_t          minKeyCode,
                 xcb_keycode_t          maxKeyCode,
                 uint8_t                firstType,
                 uint8_t                nTypes,
                 xcb_keycode_t          firstKeySym,
                 uint8_t                nKeySyms,
                 uint16_t               totalSyms,
                 xcb_keycode_t          firstKeyAction,
                 uint8_t                nKeyActions,
                 uint16_t               totalActions,
                 xcb_keycode_t          firstKeyBehavior,
                 uint8_t                nKeyBehaviors,
                 uint8_t                totalKeyBehaviors,
                 xcb_keycode_t          firstKeyExplicit,
                 uint8_t                nKeyExplicit,
                 uint8_t                totalKeyExplicit,
                 xcb_keycode_t          firstModMapKey,
                 uint8_t                nModMapKeys,
                 uint8_t                totalModMapKeys,
                 xcb_keycode_t          firstVModMapKey,
                 uint8_t                nVModMapKeys,
                 uint8_t                totalVModMapKeys,
                 uint16_t               virtualMods,
                 const void            *values)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_MAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_map_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.present = present;
    xcb_out.flags = flags;
    xcb_out.minKeyCode = minKeyCode;
    xcb_out.maxKeyCode = maxKeyCode;
    xcb_out.firstType = firstType;
    xcb_out.nTypes = nTypes;
    xcb_out.firstKeySym = firstKeySym;
    xcb_out.nKeySyms = nKeySyms;
    xcb_out.totalSyms = totalSyms;
    xcb_out.firstKeyAction = firstKeyAction;
    xcb_out.nKeyActions = nKeyActions;
    xcb_out.totalActions = totalActions;
    xcb_out.firstKeyBehavior = firstKeyBehavior;
    xcb_out.nKeyBehaviors = nKeyBehaviors;
    xcb_out.totalKeyBehaviors = totalKeyBehaviors;
    xcb_out.firstKeyExplicit = firstKeyExplicit;
    xcb_out.nKeyExplicit = nKeyExplicit;
    xcb_out.totalKeyExplicit = totalKeyExplicit;
    xcb_out.firstModMapKey = firstModMapKey;
    xcb_out.nModMapKeys = nModMapKeys;
    xcb_out.totalModMapKeys = totalModMapKeys;
    xcb_out.firstVModMapKey = firstVModMapKey;
    xcb_out.nVModMapKeys = nVModMapKeys;
    xcb_out.totalVModMapKeys = totalVModMapKeys;
    xcb_out.virtualMods = virtualMods;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_set_map_values_t values */
    xcb_parts[4].iov_base = (char *) values;
    xcb_parts[4].iov_len =
      xcb_xkb_set_map_values_sizeof (values, nTypes, nKeySyms, nKeyActions, totalActions, totalKeyBehaviors, virtualMods, totalKeyExplicit, totalModMapKeys, totalVModMapKeys, present);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_set_map_aux_checked (xcb_connection_t               *c,
                             xcb_xkb_device_spec_t           deviceSpec,
                             uint16_t                        present,
                             uint16_t                        flags,
                             xcb_keycode_t                   minKeyCode,
                             xcb_keycode_t                   maxKeyCode,
                             uint8_t                         firstType,
                             uint8_t                         nTypes,
                             xcb_keycode_t                   firstKeySym,
                             uint8_t                         nKeySyms,
                             uint16_t                        totalSyms,
                             xcb_keycode_t                   firstKeyAction,
                             uint8_t                         nKeyActions,
                             uint16_t                        totalActions,
                             xcb_keycode_t                   firstKeyBehavior,
                             uint8_t                         nKeyBehaviors,
                             uint8_t                         totalKeyBehaviors,
                             xcb_keycode_t                   firstKeyExplicit,
                             uint8_t                         nKeyExplicit,
                             uint8_t                         totalKeyExplicit,
                             xcb_keycode_t                   firstModMapKey,
                             uint8_t                         nModMapKeys,
                             uint8_t                         totalModMapKeys,
                             xcb_keycode_t                   firstVModMapKey,
                             uint8_t                         nVModMapKeys,
                             uint8_t                         totalVModMapKeys,
                             uint16_t                        virtualMods,
                             const xcb_xkb_set_map_values_t *values)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_MAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_map_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.present = present;
    xcb_out.flags = flags;
    xcb_out.minKeyCode = minKeyCode;
    xcb_out.maxKeyCode = maxKeyCode;
    xcb_out.firstType = firstType;
    xcb_out.nTypes = nTypes;
    xcb_out.firstKeySym = firstKeySym;
    xcb_out.nKeySyms = nKeySyms;
    xcb_out.totalSyms = totalSyms;
    xcb_out.firstKeyAction = firstKeyAction;
    xcb_out.nKeyActions = nKeyActions;
    xcb_out.totalActions = totalActions;
    xcb_out.firstKeyBehavior = firstKeyBehavior;
    xcb_out.nKeyBehaviors = nKeyBehaviors;
    xcb_out.totalKeyBehaviors = totalKeyBehaviors;
    xcb_out.firstKeyExplicit = firstKeyExplicit;
    xcb_out.nKeyExplicit = nKeyExplicit;
    xcb_out.totalKeyExplicit = totalKeyExplicit;
    xcb_out.firstModMapKey = firstModMapKey;
    xcb_out.nModMapKeys = nModMapKeys;
    xcb_out.totalModMapKeys = totalModMapKeys;
    xcb_out.firstVModMapKey = firstVModMapKey;
    xcb_out.nVModMapKeys = nVModMapKeys;
    xcb_out.totalVModMapKeys = totalVModMapKeys;
    xcb_out.virtualMods = virtualMods;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_set_map_values_t values */
    xcb_parts[4].iov_len =
      xcb_xkb_set_map_values_serialize (&xcb_aux0, nTypes, nKeySyms, nKeyActions, totalActions, totalKeyBehaviors, virtualMods, totalKeyExplicit, totalModMapKeys, totalVModMapKeys, present, values);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_set_map_aux (xcb_connection_t               *c,
                     xcb_xkb_device_spec_t           deviceSpec,
                     uint16_t                        present,
                     uint16_t                        flags,
                     xcb_keycode_t                   minKeyCode,
                     xcb_keycode_t                   maxKeyCode,
                     uint8_t                         firstType,
                     uint8_t                         nTypes,
                     xcb_keycode_t                   firstKeySym,
                     uint8_t                         nKeySyms,
                     uint16_t                        totalSyms,
                     xcb_keycode_t                   firstKeyAction,
                     uint8_t                         nKeyActions,
                     uint16_t                        totalActions,
                     xcb_keycode_t                   firstKeyBehavior,
                     uint8_t                         nKeyBehaviors,
                     uint8_t                         totalKeyBehaviors,
                     xcb_keycode_t                   firstKeyExplicit,
                     uint8_t                         nKeyExplicit,
                     uint8_t                         totalKeyExplicit,
                     xcb_keycode_t                   firstModMapKey,
                     uint8_t                         nModMapKeys,
                     uint8_t                         totalModMapKeys,
                     xcb_keycode_t                   firstVModMapKey,
                     uint8_t                         nVModMapKeys,
                     uint8_t                         totalVModMapKeys,
                     uint16_t                        virtualMods,
                     const xcb_xkb_set_map_values_t *values)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_MAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_map_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.present = present;
    xcb_out.flags = flags;
    xcb_out.minKeyCode = minKeyCode;
    xcb_out.maxKeyCode = maxKeyCode;
    xcb_out.firstType = firstType;
    xcb_out.nTypes = nTypes;
    xcb_out.firstKeySym = firstKeySym;
    xcb_out.nKeySyms = nKeySyms;
    xcb_out.totalSyms = totalSyms;
    xcb_out.firstKeyAction = firstKeyAction;
    xcb_out.nKeyActions = nKeyActions;
    xcb_out.totalActions = totalActions;
    xcb_out.firstKeyBehavior = firstKeyBehavior;
    xcb_out.nKeyBehaviors = nKeyBehaviors;
    xcb_out.totalKeyBehaviors = totalKeyBehaviors;
    xcb_out.firstKeyExplicit = firstKeyExplicit;
    xcb_out.nKeyExplicit = nKeyExplicit;
    xcb_out.totalKeyExplicit = totalKeyExplicit;
    xcb_out.firstModMapKey = firstModMapKey;
    xcb_out.nModMapKeys = nModMapKeys;
    xcb_out.totalModMapKeys = totalModMapKeys;
    xcb_out.firstVModMapKey = firstVModMapKey;
    xcb_out.nVModMapKeys = nVModMapKeys;
    xcb_out.totalVModMapKeys = totalVModMapKeys;
    xcb_out.virtualMods = virtualMods;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_set_map_values_t values */
    xcb_parts[4].iov_len =
      xcb_xkb_set_map_values_serialize (&xcb_aux0, nTypes, nKeySyms, nKeyActions, totalActions, totalKeyBehaviors, virtualMods, totalKeyExplicit, totalModMapKeys, totalVModMapKeys, present, values);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_xkb_set_map_values (const xcb_xkb_set_map_request_t *R)
{
    return (void *) (R + 1);
}

int
xcb_xkb_get_compat_map_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_get_compat_map_reply_t *_aux = (xcb_xkb_get_compat_map_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_get_compat_map_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* si_rtrn */
    xcb_block_len += _aux->nSIRtrn * sizeof(xcb_xkb_sym_interpret_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_sym_interpret_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* group_rtrn */
    xcb_block_len += xcb_popcount(_aux->groupsRtrn) * sizeof(xcb_xkb_mod_def_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_mod_def_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xkb_get_compat_map_cookie_t
xcb_xkb_get_compat_map (xcb_connection_t      *c,
                        xcb_xkb_device_spec_t  deviceSpec,
                        uint8_t                groups,
                        uint8_t                getAllSI,
                        uint16_t               firstSI,
                        uint16_t               nSI)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_COMPAT_MAP,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_compat_map_cookie_t xcb_ret;
    xcb_xkb_get_compat_map_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.groups = groups;
    xcb_out.getAllSI = getAllSI;
    xcb_out.firstSI = firstSI;
    xcb_out.nSI = nSI;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_compat_map_cookie_t
xcb_xkb_get_compat_map_unchecked (xcb_connection_t      *c,
                                  xcb_xkb_device_spec_t  deviceSpec,
                                  uint8_t                groups,
                                  uint8_t                getAllSI,
                                  uint16_t               firstSI,
                                  uint16_t               nSI)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_COMPAT_MAP,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_compat_map_cookie_t xcb_ret;
    xcb_xkb_get_compat_map_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.groups = groups;
    xcb_out.getAllSI = getAllSI;
    xcb_out.firstSI = firstSI;
    xcb_out.nSI = nSI;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_sym_interpret_t *
xcb_xkb_get_compat_map_si_rtrn (const xcb_xkb_get_compat_map_reply_t *R)
{
    return (xcb_xkb_sym_interpret_t *) (R + 1);
}

int
xcb_xkb_get_compat_map_si_rtrn_length (const xcb_xkb_get_compat_map_reply_t *R)
{
    return R->nSIRtrn;
}

xcb_xkb_sym_interpret_iterator_t
xcb_xkb_get_compat_map_si_rtrn_iterator (const xcb_xkb_get_compat_map_reply_t *R)
{
    xcb_xkb_sym_interpret_iterator_t i;
    i.data = (xcb_xkb_sym_interpret_t *) (R + 1);
    i.rem = R->nSIRtrn;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xkb_mod_def_t *
xcb_xkb_get_compat_map_group_rtrn (const xcb_xkb_get_compat_map_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_xkb_sym_interpret_end(xcb_xkb_get_compat_map_si_rtrn_iterator(R));
    return (xcb_xkb_mod_def_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_mod_def_t, prev.index) + 0);
}

int
xcb_xkb_get_compat_map_group_rtrn_length (const xcb_xkb_get_compat_map_reply_t *R)
{
    return xcb_popcount(R->groupsRtrn);
}

xcb_xkb_mod_def_iterator_t
xcb_xkb_get_compat_map_group_rtrn_iterator (const xcb_xkb_get_compat_map_reply_t *R)
{
    xcb_xkb_mod_def_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xkb_sym_interpret_end(xcb_xkb_get_compat_map_si_rtrn_iterator(R));
    i.data = (xcb_xkb_mod_def_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_mod_def_t, prev.index));
    i.rem = xcb_popcount(R->groupsRtrn);
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xkb_get_compat_map_reply_t *
xcb_xkb_get_compat_map_reply (xcb_connection_t                 *c,
                              xcb_xkb_get_compat_map_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_xkb_get_compat_map_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xkb_set_compat_map_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_set_compat_map_request_t *_aux = (xcb_xkb_set_compat_map_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_set_compat_map_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* si */
    xcb_block_len += _aux->nSI * sizeof(xcb_xkb_sym_interpret_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_sym_interpret_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* groupMaps */
    xcb_block_len += xcb_popcount(_aux->groups) * sizeof(xcb_xkb_mod_def_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_mod_def_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_xkb_set_compat_map_checked (xcb_connection_t              *c,
                                xcb_xkb_device_spec_t          deviceSpec,
                                uint8_t                        recomputeActions,
                                uint8_t                        truncateSI,
                                uint8_t                        groups,
                                uint16_t                       firstSI,
                                uint16_t                       nSI,
                                const xcb_xkb_sym_interpret_t *si,
                                const xcb_xkb_mod_def_t       *groupMaps)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_COMPAT_MAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_compat_map_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.pad0 = 0;
    xcb_out.recomputeActions = recomputeActions;
    xcb_out.truncateSI = truncateSI;
    xcb_out.groups = groups;
    xcb_out.firstSI = firstSI;
    xcb_out.nSI = nSI;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_sym_interpret_t si */
    xcb_parts[4].iov_base = (char *) si;
    xcb_parts[4].iov_len = nSI * sizeof(xcb_xkb_sym_interpret_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_xkb_mod_def_t groupMaps */
    xcb_parts[6].iov_base = (char *) groupMaps;
    xcb_parts[6].iov_len = xcb_popcount(groups) * sizeof(xcb_xkb_mod_def_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_set_compat_map (xcb_connection_t              *c,
                        xcb_xkb_device_spec_t          deviceSpec,
                        uint8_t                        recomputeActions,
                        uint8_t                        truncateSI,
                        uint8_t                        groups,
                        uint16_t                       firstSI,
                        uint16_t                       nSI,
                        const xcb_xkb_sym_interpret_t *si,
                        const xcb_xkb_mod_def_t       *groupMaps)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_COMPAT_MAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_compat_map_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.pad0 = 0;
    xcb_out.recomputeActions = recomputeActions;
    xcb_out.truncateSI = truncateSI;
    xcb_out.groups = groups;
    xcb_out.firstSI = firstSI;
    xcb_out.nSI = nSI;
    memset(xcb_out.pad1, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_sym_interpret_t si */
    xcb_parts[4].iov_base = (char *) si;
    xcb_parts[4].iov_len = nSI * sizeof(xcb_xkb_sym_interpret_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_xkb_mod_def_t groupMaps */
    xcb_parts[6].iov_base = (char *) groupMaps;
    xcb_parts[6].iov_len = xcb_popcount(groups) * sizeof(xcb_xkb_mod_def_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_sym_interpret_t *
xcb_xkb_set_compat_map_si (const xcb_xkb_set_compat_map_request_t *R)
{
    return (xcb_xkb_sym_interpret_t *) (R + 1);
}

int
xcb_xkb_set_compat_map_si_length (const xcb_xkb_set_compat_map_request_t *R)
{
    return R->nSI;
}

xcb_xkb_sym_interpret_iterator_t
xcb_xkb_set_compat_map_si_iterator (const xcb_xkb_set_compat_map_request_t *R)
{
    xcb_xkb_sym_interpret_iterator_t i;
    i.data = (xcb_xkb_sym_interpret_t *) (R + 1);
    i.rem = R->nSI;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xkb_mod_def_t *
xcb_xkb_set_compat_map_group_maps (const xcb_xkb_set_compat_map_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_xkb_sym_interpret_end(xcb_xkb_set_compat_map_si_iterator(R));
    return (xcb_xkb_mod_def_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_mod_def_t, prev.index) + 0);
}

int
xcb_xkb_set_compat_map_group_maps_length (const xcb_xkb_set_compat_map_request_t *R)
{
    return xcb_popcount(R->groups);
}

xcb_xkb_mod_def_iterator_t
xcb_xkb_set_compat_map_group_maps_iterator (const xcb_xkb_set_compat_map_request_t *R)
{
    xcb_xkb_mod_def_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xkb_sym_interpret_end(xcb_xkb_set_compat_map_si_iterator(R));
    i.data = (xcb_xkb_mod_def_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_mod_def_t, prev.index));
    i.rem = xcb_popcount(R->groups);
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xkb_get_indicator_state_cookie_t
xcb_xkb_get_indicator_state (xcb_connection_t      *c,
                             xcb_xkb_device_spec_t  deviceSpec)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_INDICATOR_STATE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_indicator_state_cookie_t xcb_ret;
    xcb_xkb_get_indicator_state_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_indicator_state_cookie_t
xcb_xkb_get_indicator_state_unchecked (xcb_connection_t      *c,
                                       xcb_xkb_device_spec_t  deviceSpec)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_INDICATOR_STATE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_indicator_state_cookie_t xcb_ret;
    xcb_xkb_get_indicator_state_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_indicator_state_reply_t *
xcb_xkb_get_indicator_state_reply (xcb_connection_t                      *c,
                                   xcb_xkb_get_indicator_state_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_xkb_get_indicator_state_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xkb_get_indicator_map_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_get_indicator_map_reply_t *_aux = (xcb_xkb_get_indicator_map_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_get_indicator_map_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* maps */
    xcb_block_len += xcb_popcount(_aux->which) * sizeof(xcb_xkb_indicator_map_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_indicator_map_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xkb_get_indicator_map_cookie_t
xcb_xkb_get_indicator_map (xcb_connection_t      *c,
                           xcb_xkb_device_spec_t  deviceSpec,
                           uint32_t               which)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_INDICATOR_MAP,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_indicator_map_cookie_t xcb_ret;
    xcb_xkb_get_indicator_map_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.which = which;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_indicator_map_cookie_t
xcb_xkb_get_indicator_map_unchecked (xcb_connection_t      *c,
                                     xcb_xkb_device_spec_t  deviceSpec,
                                     uint32_t               which)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_INDICATOR_MAP,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_indicator_map_cookie_t xcb_ret;
    xcb_xkb_get_indicator_map_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.which = which;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_indicator_map_t *
xcb_xkb_get_indicator_map_maps (const xcb_xkb_get_indicator_map_reply_t *R)
{
    return (xcb_xkb_indicator_map_t *) (R + 1);
}

int
xcb_xkb_get_indicator_map_maps_length (const xcb_xkb_get_indicator_map_reply_t *R)
{
    return xcb_popcount(R->which);
}

xcb_xkb_indicator_map_iterator_t
xcb_xkb_get_indicator_map_maps_iterator (const xcb_xkb_get_indicator_map_reply_t *R)
{
    xcb_xkb_indicator_map_iterator_t i;
    i.data = (xcb_xkb_indicator_map_t *) (R + 1);
    i.rem = xcb_popcount(R->which);
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xkb_get_indicator_map_reply_t *
xcb_xkb_get_indicator_map_reply (xcb_connection_t                    *c,
                                 xcb_xkb_get_indicator_map_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_xkb_get_indicator_map_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xkb_set_indicator_map_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_set_indicator_map_request_t *_aux = (xcb_xkb_set_indicator_map_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_set_indicator_map_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* maps */
    xcb_block_len += xcb_popcount(_aux->which) * sizeof(xcb_xkb_indicator_map_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_indicator_map_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_xkb_set_indicator_map_checked (xcb_connection_t              *c,
                                   xcb_xkb_device_spec_t          deviceSpec,
                                   uint32_t                       which,
                                   const xcb_xkb_indicator_map_t *maps)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_INDICATOR_MAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_indicator_map_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.which = which;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_indicator_map_t maps */
    xcb_parts[4].iov_base = (char *) maps;
    xcb_parts[4].iov_len = xcb_popcount(which) * sizeof(xcb_xkb_indicator_map_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_set_indicator_map (xcb_connection_t              *c,
                           xcb_xkb_device_spec_t          deviceSpec,
                           uint32_t                       which,
                           const xcb_xkb_indicator_map_t *maps)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_INDICATOR_MAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_indicator_map_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.which = which;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_indicator_map_t maps */
    xcb_parts[4].iov_base = (char *) maps;
    xcb_parts[4].iov_len = xcb_popcount(which) * sizeof(xcb_xkb_indicator_map_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_indicator_map_t *
xcb_xkb_set_indicator_map_maps (const xcb_xkb_set_indicator_map_request_t *R)
{
    return (xcb_xkb_indicator_map_t *) (R + 1);
}

int
xcb_xkb_set_indicator_map_maps_length (const xcb_xkb_set_indicator_map_request_t *R)
{
    return xcb_popcount(R->which);
}

xcb_xkb_indicator_map_iterator_t
xcb_xkb_set_indicator_map_maps_iterator (const xcb_xkb_set_indicator_map_request_t *R)
{
    xcb_xkb_indicator_map_iterator_t i;
    i.data = (xcb_xkb_indicator_map_t *) (R + 1);
    i.rem = xcb_popcount(R->which);
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xkb_get_named_indicator_cookie_t
xcb_xkb_get_named_indicator (xcb_connection_t         *c,
                             xcb_xkb_device_spec_t     deviceSpec,
                             xcb_xkb_led_class_spec_t  ledClass,
                             xcb_xkb_id_spec_t         ledID,
                             xcb_atom_t                indicator)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_NAMED_INDICATOR,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_named_indicator_cookie_t xcb_ret;
    xcb_xkb_get_named_indicator_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.ledClass = ledClass;
    xcb_out.ledID = ledID;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.indicator = indicator;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_named_indicator_cookie_t
xcb_xkb_get_named_indicator_unchecked (xcb_connection_t         *c,
                                       xcb_xkb_device_spec_t     deviceSpec,
                                       xcb_xkb_led_class_spec_t  ledClass,
                                       xcb_xkb_id_spec_t         ledID,
                                       xcb_atom_t                indicator)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_NAMED_INDICATOR,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_named_indicator_cookie_t xcb_ret;
    xcb_xkb_get_named_indicator_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.ledClass = ledClass;
    xcb_out.ledID = ledID;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.indicator = indicator;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_named_indicator_reply_t *
xcb_xkb_get_named_indicator_reply (xcb_connection_t                      *c,
                                   xcb_xkb_get_named_indicator_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_xkb_get_named_indicator_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_xkb_set_named_indicator_checked (xcb_connection_t         *c,
                                     xcb_xkb_device_spec_t     deviceSpec,
                                     xcb_xkb_led_class_spec_t  ledClass,
                                     xcb_xkb_id_spec_t         ledID,
                                     xcb_atom_t                indicator,
                                     uint8_t                   setState,
                                     uint8_t                   on,
                                     uint8_t                   setMap,
                                     uint8_t                   createMap,
                                     uint8_t                   map_flags,
                                     uint8_t                   map_whichGroups,
                                     uint8_t                   map_groups,
                                     uint8_t                   map_whichMods,
                                     uint8_t                   map_realMods,
                                     uint16_t                  map_vmods,
                                     uint32_t                  map_ctrls)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_NAMED_INDICATOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_named_indicator_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.ledClass = ledClass;
    xcb_out.ledID = ledID;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.indicator = indicator;
    xcb_out.setState = setState;
    xcb_out.on = on;
    xcb_out.setMap = setMap;
    xcb_out.createMap = createMap;
    xcb_out.pad1 = 0;
    xcb_out.map_flags = map_flags;
    xcb_out.map_whichGroups = map_whichGroups;
    xcb_out.map_groups = map_groups;
    xcb_out.map_whichMods = map_whichMods;
    xcb_out.map_realMods = map_realMods;
    xcb_out.map_vmods = map_vmods;
    xcb_out.map_ctrls = map_ctrls;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_set_named_indicator (xcb_connection_t         *c,
                             xcb_xkb_device_spec_t     deviceSpec,
                             xcb_xkb_led_class_spec_t  ledClass,
                             xcb_xkb_id_spec_t         ledID,
                             xcb_atom_t                indicator,
                             uint8_t                   setState,
                             uint8_t                   on,
                             uint8_t                   setMap,
                             uint8_t                   createMap,
                             uint8_t                   map_flags,
                             uint8_t                   map_whichGroups,
                             uint8_t                   map_groups,
                             uint8_t                   map_whichMods,
                             uint8_t                   map_realMods,
                             uint16_t                  map_vmods,
                             uint32_t                  map_ctrls)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_NAMED_INDICATOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_named_indicator_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.ledClass = ledClass;
    xcb_out.ledID = ledID;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.indicator = indicator;
    xcb_out.setState = setState;
    xcb_out.on = on;
    xcb_out.setMap = setMap;
    xcb_out.createMap = createMap;
    xcb_out.pad1 = 0;
    xcb_out.map_flags = map_flags;
    xcb_out.map_whichGroups = map_whichGroups;
    xcb_out.map_groups = map_groups;
    xcb_out.map_whichMods = map_whichMods;
    xcb_out.map_realMods = map_realMods;
    xcb_out.map_vmods = map_vmods;
    xcb_out.map_ctrls = map_ctrls;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_atom_t *
xcb_xkb_get_names_value_list_type_names (const xcb_xkb_get_names_value_list_t *S)
{
    return S->typeNames;
}

int
xcb_xkb_get_names_value_list_type_names_length (const xcb_xkb_get_names_reply_t *R,
                                                const xcb_xkb_get_names_value_list_t *S)
{
    return R->nTypes;
}

xcb_generic_iterator_t
xcb_xkb_get_names_value_list_type_names_end (const xcb_xkb_get_names_reply_t *R,
                                             const xcb_xkb_get_names_value_list_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->typeNames + R->nTypes;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint8_t *
xcb_xkb_get_names_value_list_n_levels_per_type (const xcb_xkb_get_names_value_list_t *S)
{
    return S->nLevelsPerType;
}

int
xcb_xkb_get_names_value_list_n_levels_per_type_length (const xcb_xkb_get_names_reply_t *R,
                                                       const xcb_xkb_get_names_value_list_t *S)
{
    return R->nTypes;
}

xcb_generic_iterator_t
xcb_xkb_get_names_value_list_n_levels_per_type_end (const xcb_xkb_get_names_reply_t *R,
                                                    const xcb_xkb_get_names_value_list_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->nLevelsPerType + R->nTypes;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_get_names_value_list_kt_level_names (const xcb_xkb_get_names_value_list_t *S)
{
    return S->ktLevelNames;
}

int
xcb_xkb_get_names_value_list_kt_level_names_length (const xcb_xkb_get_names_reply_t *R,
                                                    const xcb_xkb_get_names_value_list_t *S)
{
    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint8_t* xcb_pre_tmp_4; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_1 = R->nTypes;
    xcb_pre_tmp_3 = 0;
    xcb_pre_tmp_4 = S->nLevelsPerType;
    for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
        xcb_pre_tmp_3 += *xcb_pre_tmp_4;
        xcb_pre_tmp_4++;
    }
    /* sumof end. Result is in xcb_pre_tmp_3 */
    return xcb_pre_tmp_3;
}

xcb_generic_iterator_t
xcb_xkb_get_names_value_list_kt_level_names_end (const xcb_xkb_get_names_reply_t *R,
                                                 const xcb_xkb_get_names_value_list_t *S)
{
    xcb_generic_iterator_t i;
    int xcb_pre_tmp_5; /* sumof length */
    int xcb_pre_tmp_6; /* sumof loop counter */
    int64_t xcb_pre_tmp_7; /* sumof sum */
    const uint8_t* xcb_pre_tmp_8; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_5 = R->nTypes;
    xcb_pre_tmp_7 = 0;
    xcb_pre_tmp_8 = S->nLevelsPerType;
    for (xcb_pre_tmp_6 = 0; xcb_pre_tmp_6 < xcb_pre_tmp_5; xcb_pre_tmp_6++) {
        xcb_pre_tmp_7 += *xcb_pre_tmp_8;
        xcb_pre_tmp_8++;
    }
    /* sumof end. Result is in xcb_pre_tmp_7 */
    i.data = S->ktLevelNames + xcb_pre_tmp_7;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_get_names_value_list_indicator_names (const xcb_xkb_get_names_value_list_t *S)
{
    return S->indicatorNames;
}

int
xcb_xkb_get_names_value_list_indicator_names_length (const xcb_xkb_get_names_reply_t *R,
                                                     const xcb_xkb_get_names_value_list_t *S)
{
    return xcb_popcount(R->indicators);
}

xcb_generic_iterator_t
xcb_xkb_get_names_value_list_indicator_names_end (const xcb_xkb_get_names_reply_t *R,
                                                  const xcb_xkb_get_names_value_list_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->indicatorNames + xcb_popcount(R->indicators);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_get_names_value_list_virtual_mod_names (const xcb_xkb_get_names_value_list_t *S)
{
    return S->virtualModNames;
}

int
xcb_xkb_get_names_value_list_virtual_mod_names_length (const xcb_xkb_get_names_reply_t *R,
                                                       const xcb_xkb_get_names_value_list_t *S)
{
    return xcb_popcount(R->virtualMods);
}

xcb_generic_iterator_t
xcb_xkb_get_names_value_list_virtual_mod_names_end (const xcb_xkb_get_names_reply_t *R,
                                                    const xcb_xkb_get_names_value_list_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->virtualModNames + xcb_popcount(R->virtualMods);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_get_names_value_list_groups (const xcb_xkb_get_names_value_list_t *S)
{
    return S->groups;
}

int
xcb_xkb_get_names_value_list_groups_length (const xcb_xkb_get_names_reply_t *R,
                                            const xcb_xkb_get_names_value_list_t *S)
{
    return xcb_popcount(R->groupNames);
}

xcb_generic_iterator_t
xcb_xkb_get_names_value_list_groups_end (const xcb_xkb_get_names_reply_t *R,
                                         const xcb_xkb_get_names_value_list_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->groups + xcb_popcount(R->groupNames);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_key_name_t *
xcb_xkb_get_names_value_list_key_names (const xcb_xkb_get_names_value_list_t *S)
{
    return S->keyNames;
}

int
xcb_xkb_get_names_value_list_key_names_length (const xcb_xkb_get_names_reply_t *R,
                                               const xcb_xkb_get_names_value_list_t *S)
{
    return R->nKeys;
}

xcb_xkb_key_name_iterator_t
xcb_xkb_get_names_value_list_key_names_iterator (const xcb_xkb_get_names_reply_t *R,
                                                 const xcb_xkb_get_names_value_list_t *S)
{
    xcb_xkb_key_name_iterator_t i;
    i.data = S->keyNames;
    i.rem = R->nKeys;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_key_alias_t *
xcb_xkb_get_names_value_list_key_aliases (const xcb_xkb_get_names_value_list_t *S)
{
    return S->keyAliases;
}

int
xcb_xkb_get_names_value_list_key_aliases_length (const xcb_xkb_get_names_reply_t *R,
                                                 const xcb_xkb_get_names_value_list_t *S)
{
    return R->nKeyAliases;
}

xcb_xkb_key_alias_iterator_t
xcb_xkb_get_names_value_list_key_aliases_iterator (const xcb_xkb_get_names_reply_t *R,
                                                   const xcb_xkb_get_names_value_list_t *S)
{
    xcb_xkb_key_alias_iterator_t i;
    i.data = S->keyAliases;
    i.rem = R->nKeyAliases;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_get_names_value_list_radio_group_names (const xcb_xkb_get_names_value_list_t *S)
{
    return S->radioGroupNames;
}

int
xcb_xkb_get_names_value_list_radio_group_names_length (const xcb_xkb_get_names_reply_t *R,
                                                       const xcb_xkb_get_names_value_list_t *S)
{
    return R->nRadioGroups;
}

xcb_generic_iterator_t
xcb_xkb_get_names_value_list_radio_group_names_end (const xcb_xkb_get_names_reply_t *R,
                                                    const xcb_xkb_get_names_value_list_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->radioGroupNames + R->nRadioGroups;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_xkb_get_names_value_list_serialize (void                                 **_buffer,
                                        uint8_t                                nTypes,
                                        uint32_t                               indicators,
                                        uint16_t                               virtualMods,
                                        uint8_t                                groupNames,
                                        uint8_t                                nKeys,
                                        uint8_t                                nKeyAliases,
                                        uint8_t                                nRadioGroups,
                                        uint32_t                               which,
                                        const xcb_xkb_get_names_value_list_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint8_t* xcb_pre_tmp_4; /* sumof list ptr */
    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[26];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(which & XCB_XKB_NAME_DETAIL_KEYCODES) {
        /* xcb_xkb_get_names_value_list_t.keycodesName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keycodesName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_GEOMETRY) {
        /* xcb_xkb_get_names_value_list_t.geometryName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometryName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_SYMBOLS) {
        /* xcb_xkb_get_names_value_list_t.symbolsName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->symbolsName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_PHYS_SYMBOLS) {
        /* xcb_xkb_get_names_value_list_t.physSymbolsName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->physSymbolsName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_TYPES) {
        /* xcb_xkb_get_names_value_list_t.typesName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->typesName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_COMPAT) {
        /* xcb_xkb_get_names_value_list_t.compatName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->compatName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_TYPE_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* typeNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->typeNames;
        xcb_block_len += nTypes * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = nTypes * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KT_LEVEL_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* nLevelsPerType */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->nLevelsPerType;
        xcb_block_len += nTypes * sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = nTypes * sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* ktLevelNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->ktLevelNames;
        /* sumof start */
        xcb_pre_tmp_1 = nTypes;
        xcb_pre_tmp_3 = 0;
        xcb_pre_tmp_4 = _aux->nLevelsPerType;
        for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
            xcb_pre_tmp_3 += *xcb_pre_tmp_4;
            xcb_pre_tmp_4++;
        }
        /* sumof end. Result is in xcb_pre_tmp_3 */
        xcb_block_len += xcb_pre_tmp_3 * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_pre_tmp_3 * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_INDICATOR_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* indicatorNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->indicatorNames;
        xcb_block_len += xcb_popcount(indicators) * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(indicators) * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_VIRTUAL_MOD_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* virtualModNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->virtualModNames;
        xcb_block_len += xcb_popcount(virtualMods) * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(virtualMods) * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_GROUP_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* groups */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->groups;
        xcb_block_len += xcb_popcount(groupNames) * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(groupNames) * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keyNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->keyNames;
        xcb_block_len += nKeys * sizeof(xcb_xkb_key_name_t);
        xcb_parts[xcb_parts_idx].iov_len = nKeys * sizeof(xcb_xkb_key_name_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_name_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_ALIASES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keyAliases */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->keyAliases;
        xcb_block_len += nKeyAliases * sizeof(xcb_xkb_key_alias_t);
        xcb_parts[xcb_parts_idx].iov_len = nKeyAliases * sizeof(xcb_xkb_key_alias_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_alias_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_RG_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* radioGroupNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->radioGroupNames;
        xcb_block_len += nRadioGroups * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = nRadioGroups * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_xkb_get_names_value_list_unpack (const void                      *_buffer,
                                     uint8_t                          nTypes,
                                     uint32_t                         indicators,
                                     uint16_t                         virtualMods,
                                     uint8_t                          groupNames,
                                     uint8_t                          nKeys,
                                     uint8_t                          nKeyAliases,
                                     uint8_t                          nRadioGroups,
                                     uint32_t                         which,
                                     xcb_xkb_get_names_value_list_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint8_t* xcb_pre_tmp_4; /* sumof list ptr */

    if(which & XCB_XKB_NAME_DETAIL_KEYCODES) {
        /* xcb_xkb_get_names_value_list_t.keycodesName */
        _aux->keycodesName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_GEOMETRY) {
        /* xcb_xkb_get_names_value_list_t.geometryName */
        _aux->geometryName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_SYMBOLS) {
        /* xcb_xkb_get_names_value_list_t.symbolsName */
        _aux->symbolsName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_PHYS_SYMBOLS) {
        /* xcb_xkb_get_names_value_list_t.physSymbolsName */
        _aux->physSymbolsName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_TYPES) {
        /* xcb_xkb_get_names_value_list_t.typesName */
        _aux->typesName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_COMPAT) {
        /* xcb_xkb_get_names_value_list_t.compatName */
        _aux->compatName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_TYPE_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* typeNames */
        _aux->typeNames = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += nTypes * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KT_LEVEL_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* nLevelsPerType */
        _aux->nLevelsPerType = (uint8_t *)xcb_tmp;
        xcb_block_len += nTypes * sizeof(uint8_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* ktLevelNames */
        _aux->ktLevelNames = (xcb_atom_t *)xcb_tmp;
        /* sumof start */
        xcb_pre_tmp_1 = nTypes;
        xcb_pre_tmp_3 = 0;
        xcb_pre_tmp_4 = _aux->nLevelsPerType;
        for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
            xcb_pre_tmp_3 += *xcb_pre_tmp_4;
            xcb_pre_tmp_4++;
        }
        /* sumof end. Result is in xcb_pre_tmp_3 */
        xcb_block_len += xcb_pre_tmp_3 * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_INDICATOR_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* indicatorNames */
        _aux->indicatorNames = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += xcb_popcount(indicators) * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_VIRTUAL_MOD_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* virtualModNames */
        _aux->virtualModNames = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += xcb_popcount(virtualMods) * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_GROUP_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* groups */
        _aux->groups = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += xcb_popcount(groupNames) * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keyNames */
        _aux->keyNames = (xcb_xkb_key_name_t *)xcb_tmp;
        xcb_block_len += nKeys * sizeof(xcb_xkb_key_name_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_key_name_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_ALIASES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keyAliases */
        _aux->keyAliases = (xcb_xkb_key_alias_t *)xcb_tmp;
        xcb_block_len += nKeyAliases * sizeof(xcb_xkb_key_alias_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_key_alias_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_RG_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* radioGroupNames */
        _aux->radioGroupNames = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += nRadioGroups * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_xkb_get_names_value_list_sizeof (const void  *_buffer,
                                     uint8_t      nTypes,
                                     uint32_t     indicators,
                                     uint16_t     virtualMods,
                                     uint8_t      groupNames,
                                     uint8_t      nKeys,
                                     uint8_t      nKeyAliases,
                                     uint8_t      nRadioGroups,
                                     uint32_t     which)
{
    xcb_xkb_get_names_value_list_t _aux;
    return xcb_xkb_get_names_value_list_unpack(_buffer, nTypes, indicators, virtualMods, groupNames, nKeys, nKeyAliases, nRadioGroups, which, &_aux);
}

int
xcb_xkb_get_names_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_get_names_reply_t *_aux = (xcb_xkb_get_names_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_get_names_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* valueList */
    xcb_block_len += xcb_xkb_get_names_value_list_sizeof(xcb_tmp, _aux->nTypes, _aux->indicators, _aux->virtualMods, _aux->groupNames, _aux->nKeys, _aux->nKeyAliases, _aux->nRadioGroups, _aux->which);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xkb_get_names_cookie_t
xcb_xkb_get_names (xcb_connection_t      *c,
                   xcb_xkb_device_spec_t  deviceSpec,
                   uint32_t               which)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_NAMES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_names_cookie_t xcb_ret;
    xcb_xkb_get_names_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.which = which;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_names_cookie_t
xcb_xkb_get_names_unchecked (xcb_connection_t      *c,
                             xcb_xkb_device_spec_t  deviceSpec,
                             uint32_t               which)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_NAMES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_names_cookie_t xcb_ret;
    xcb_xkb_get_names_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.which = which;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void *
xcb_xkb_get_names_value_list (const xcb_xkb_get_names_reply_t *R)
{
    return (void *) (R + 1);
}

xcb_xkb_get_names_reply_t *
xcb_xkb_get_names_reply (xcb_connection_t            *c,
                         xcb_xkb_get_names_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e)
{
    return (xcb_xkb_get_names_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_atom_t *
xcb_xkb_set_names_values_type_names (const xcb_xkb_set_names_values_t *S)
{
    return S->typeNames;
}

int
xcb_xkb_set_names_values_type_names_length (const xcb_xkb_set_names_request_t *R,
                                            const xcb_xkb_set_names_values_t *S)
{
    return R->nTypes;
}

xcb_generic_iterator_t
xcb_xkb_set_names_values_type_names_end (const xcb_xkb_set_names_request_t *R,
                                         const xcb_xkb_set_names_values_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->typeNames + R->nTypes;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint8_t *
xcb_xkb_set_names_values_n_levels_per_type (const xcb_xkb_set_names_values_t *S)
{
    return S->nLevelsPerType;
}

int
xcb_xkb_set_names_values_n_levels_per_type_length (const xcb_xkb_set_names_request_t *R,
                                                   const xcb_xkb_set_names_values_t *S)
{
    return R->nTypes;
}

xcb_generic_iterator_t
xcb_xkb_set_names_values_n_levels_per_type_end (const xcb_xkb_set_names_request_t *R,
                                                const xcb_xkb_set_names_values_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->nLevelsPerType + R->nTypes;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_set_names_values_kt_level_names (const xcb_xkb_set_names_values_t *S)
{
    return S->ktLevelNames;
}

int
xcb_xkb_set_names_values_kt_level_names_length (const xcb_xkb_set_names_request_t *R,
                                                const xcb_xkb_set_names_values_t *S)
{
    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint8_t* xcb_pre_tmp_4; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_1 = R->nTypes;
    xcb_pre_tmp_3 = 0;
    xcb_pre_tmp_4 = S->nLevelsPerType;
    for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
        xcb_pre_tmp_3 += *xcb_pre_tmp_4;
        xcb_pre_tmp_4++;
    }
    /* sumof end. Result is in xcb_pre_tmp_3 */
    return xcb_pre_tmp_3;
}

xcb_generic_iterator_t
xcb_xkb_set_names_values_kt_level_names_end (const xcb_xkb_set_names_request_t *R,
                                             const xcb_xkb_set_names_values_t *S)
{
    xcb_generic_iterator_t i;
    int xcb_pre_tmp_5; /* sumof length */
    int xcb_pre_tmp_6; /* sumof loop counter */
    int64_t xcb_pre_tmp_7; /* sumof sum */
    const uint8_t* xcb_pre_tmp_8; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_5 = R->nTypes;
    xcb_pre_tmp_7 = 0;
    xcb_pre_tmp_8 = S->nLevelsPerType;
    for (xcb_pre_tmp_6 = 0; xcb_pre_tmp_6 < xcb_pre_tmp_5; xcb_pre_tmp_6++) {
        xcb_pre_tmp_7 += *xcb_pre_tmp_8;
        xcb_pre_tmp_8++;
    }
    /* sumof end. Result is in xcb_pre_tmp_7 */
    i.data = S->ktLevelNames + xcb_pre_tmp_7;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_set_names_values_indicator_names (const xcb_xkb_set_names_values_t *S)
{
    return S->indicatorNames;
}

int
xcb_xkb_set_names_values_indicator_names_length (const xcb_xkb_set_names_request_t *R,
                                                 const xcb_xkb_set_names_values_t *S)
{
    return xcb_popcount(R->indicators);
}

xcb_generic_iterator_t
xcb_xkb_set_names_values_indicator_names_end (const xcb_xkb_set_names_request_t *R,
                                              const xcb_xkb_set_names_values_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->indicatorNames + xcb_popcount(R->indicators);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_set_names_values_virtual_mod_names (const xcb_xkb_set_names_values_t *S)
{
    return S->virtualModNames;
}

int
xcb_xkb_set_names_values_virtual_mod_names_length (const xcb_xkb_set_names_request_t *R,
                                                   const xcb_xkb_set_names_values_t *S)
{
    return xcb_popcount(R->virtualMods);
}

xcb_generic_iterator_t
xcb_xkb_set_names_values_virtual_mod_names_end (const xcb_xkb_set_names_request_t *R,
                                                const xcb_xkb_set_names_values_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->virtualModNames + xcb_popcount(R->virtualMods);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_set_names_values_groups (const xcb_xkb_set_names_values_t *S)
{
    return S->groups;
}

int
xcb_xkb_set_names_values_groups_length (const xcb_xkb_set_names_request_t *R,
                                        const xcb_xkb_set_names_values_t *S)
{
    return xcb_popcount(R->groupNames);
}

xcb_generic_iterator_t
xcb_xkb_set_names_values_groups_end (const xcb_xkb_set_names_request_t *R,
                                     const xcb_xkb_set_names_values_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->groups + xcb_popcount(R->groupNames);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_key_name_t *
xcb_xkb_set_names_values_key_names (const xcb_xkb_set_names_values_t *S)
{
    return S->keyNames;
}

int
xcb_xkb_set_names_values_key_names_length (const xcb_xkb_set_names_request_t *R,
                                           const xcb_xkb_set_names_values_t *S)
{
    return R->nKeys;
}

xcb_xkb_key_name_iterator_t
xcb_xkb_set_names_values_key_names_iterator (const xcb_xkb_set_names_request_t *R,
                                             const xcb_xkb_set_names_values_t *S)
{
    xcb_xkb_key_name_iterator_t i;
    i.data = S->keyNames;
    i.rem = R->nKeys;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_key_alias_t *
xcb_xkb_set_names_values_key_aliases (const xcb_xkb_set_names_values_t *S)
{
    return S->keyAliases;
}

int
xcb_xkb_set_names_values_key_aliases_length (const xcb_xkb_set_names_request_t *R,
                                             const xcb_xkb_set_names_values_t *S)
{
    return R->nKeyAliases;
}

xcb_xkb_key_alias_iterator_t
xcb_xkb_set_names_values_key_aliases_iterator (const xcb_xkb_set_names_request_t *R,
                                               const xcb_xkb_set_names_values_t *S)
{
    xcb_xkb_key_alias_iterator_t i;
    i.data = S->keyAliases;
    i.rem = R->nKeyAliases;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_set_names_values_radio_group_names (const xcb_xkb_set_names_values_t *S)
{
    return S->radioGroupNames;
}

int
xcb_xkb_set_names_values_radio_group_names_length (const xcb_xkb_set_names_request_t *R,
                                                   const xcb_xkb_set_names_values_t *S)
{
    return R->nRadioGroups;
}

xcb_generic_iterator_t
xcb_xkb_set_names_values_radio_group_names_end (const xcb_xkb_set_names_request_t *R,
                                                const xcb_xkb_set_names_values_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->radioGroupNames + R->nRadioGroups;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_xkb_set_names_values_serialize (void                             **_buffer,
                                    uint8_t                            nTypes,
                                    uint32_t                           indicators,
                                    uint16_t                           virtualMods,
                                    uint8_t                            groupNames,
                                    uint8_t                            nKeys,
                                    uint8_t                            nKeyAliases,
                                    uint8_t                            nRadioGroups,
                                    uint32_t                           which,
                                    const xcb_xkb_set_names_values_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint8_t* xcb_pre_tmp_4; /* sumof list ptr */
    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[26];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(which & XCB_XKB_NAME_DETAIL_KEYCODES) {
        /* xcb_xkb_set_names_values_t.keycodesName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keycodesName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_GEOMETRY) {
        /* xcb_xkb_set_names_values_t.geometryName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometryName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_SYMBOLS) {
        /* xcb_xkb_set_names_values_t.symbolsName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->symbolsName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_PHYS_SYMBOLS) {
        /* xcb_xkb_set_names_values_t.physSymbolsName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->physSymbolsName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_TYPES) {
        /* xcb_xkb_set_names_values_t.typesName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->typesName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_COMPAT) {
        /* xcb_xkb_set_names_values_t.compatName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->compatName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_TYPE_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* typeNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->typeNames;
        xcb_block_len += nTypes * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = nTypes * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KT_LEVEL_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* nLevelsPerType */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->nLevelsPerType;
        xcb_block_len += nTypes * sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = nTypes * sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* ktLevelNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->ktLevelNames;
        /* sumof start */
        xcb_pre_tmp_1 = nTypes;
        xcb_pre_tmp_3 = 0;
        xcb_pre_tmp_4 = _aux->nLevelsPerType;
        for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
            xcb_pre_tmp_3 += *xcb_pre_tmp_4;
            xcb_pre_tmp_4++;
        }
        /* sumof end. Result is in xcb_pre_tmp_3 */
        xcb_block_len += xcb_pre_tmp_3 * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_pre_tmp_3 * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_INDICATOR_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* indicatorNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->indicatorNames;
        xcb_block_len += xcb_popcount(indicators) * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(indicators) * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_VIRTUAL_MOD_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* virtualModNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->virtualModNames;
        xcb_block_len += xcb_popcount(virtualMods) * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(virtualMods) * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_GROUP_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* groups */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->groups;
        xcb_block_len += xcb_popcount(groupNames) * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(groupNames) * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keyNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->keyNames;
        xcb_block_len += nKeys * sizeof(xcb_xkb_key_name_t);
        xcb_parts[xcb_parts_idx].iov_len = nKeys * sizeof(xcb_xkb_key_name_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_name_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_ALIASES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keyAliases */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->keyAliases;
        xcb_block_len += nKeyAliases * sizeof(xcb_xkb_key_alias_t);
        xcb_parts[xcb_parts_idx].iov_len = nKeyAliases * sizeof(xcb_xkb_key_alias_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_alias_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_RG_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* radioGroupNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->radioGroupNames;
        xcb_block_len += nRadioGroups * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = nRadioGroups * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_xkb_set_names_values_unpack (const void                  *_buffer,
                                 uint8_t                      nTypes,
                                 uint32_t                     indicators,
                                 uint16_t                     virtualMods,
                                 uint8_t                      groupNames,
                                 uint8_t                      nKeys,
                                 uint8_t                      nKeyAliases,
                                 uint8_t                      nRadioGroups,
                                 uint32_t                     which,
                                 xcb_xkb_set_names_values_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint8_t* xcb_pre_tmp_4; /* sumof list ptr */

    if(which & XCB_XKB_NAME_DETAIL_KEYCODES) {
        /* xcb_xkb_set_names_values_t.keycodesName */
        _aux->keycodesName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_GEOMETRY) {
        /* xcb_xkb_set_names_values_t.geometryName */
        _aux->geometryName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_SYMBOLS) {
        /* xcb_xkb_set_names_values_t.symbolsName */
        _aux->symbolsName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_PHYS_SYMBOLS) {
        /* xcb_xkb_set_names_values_t.physSymbolsName */
        _aux->physSymbolsName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_TYPES) {
        /* xcb_xkb_set_names_values_t.typesName */
        _aux->typesName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_COMPAT) {
        /* xcb_xkb_set_names_values_t.compatName */
        _aux->compatName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_TYPE_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* typeNames */
        _aux->typeNames = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += nTypes * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KT_LEVEL_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* nLevelsPerType */
        _aux->nLevelsPerType = (uint8_t *)xcb_tmp;
        xcb_block_len += nTypes * sizeof(uint8_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* ktLevelNames */
        _aux->ktLevelNames = (xcb_atom_t *)xcb_tmp;
        /* sumof start */
        xcb_pre_tmp_1 = nTypes;
        xcb_pre_tmp_3 = 0;
        xcb_pre_tmp_4 = _aux->nLevelsPerType;
        for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
            xcb_pre_tmp_3 += *xcb_pre_tmp_4;
            xcb_pre_tmp_4++;
        }
        /* sumof end. Result is in xcb_pre_tmp_3 */
        xcb_block_len += xcb_pre_tmp_3 * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_INDICATOR_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* indicatorNames */
        _aux->indicatorNames = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += xcb_popcount(indicators) * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_VIRTUAL_MOD_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* virtualModNames */
        _aux->virtualModNames = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += xcb_popcount(virtualMods) * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_GROUP_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* groups */
        _aux->groups = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += xcb_popcount(groupNames) * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keyNames */
        _aux->keyNames = (xcb_xkb_key_name_t *)xcb_tmp;
        xcb_block_len += nKeys * sizeof(xcb_xkb_key_name_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_key_name_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_ALIASES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keyAliases */
        _aux->keyAliases = (xcb_xkb_key_alias_t *)xcb_tmp;
        xcb_block_len += nKeyAliases * sizeof(xcb_xkb_key_alias_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_key_alias_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_RG_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* radioGroupNames */
        _aux->radioGroupNames = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += nRadioGroups * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_xkb_set_names_values_sizeof (const void  *_buffer,
                                 uint8_t      nTypes,
                                 uint32_t     indicators,
                                 uint16_t     virtualMods,
                                 uint8_t      groupNames,
                                 uint8_t      nKeys,
                                 uint8_t      nKeyAliases,
                                 uint8_t      nRadioGroups,
                                 uint32_t     which)
{
    xcb_xkb_set_names_values_t _aux;
    return xcb_xkb_set_names_values_unpack(_buffer, nTypes, indicators, virtualMods, groupNames, nKeys, nKeyAliases, nRadioGroups, which, &_aux);
}

int
xcb_xkb_set_names_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_set_names_request_t *_aux = (xcb_xkb_set_names_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_set_names_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* values */
    xcb_block_len += xcb_xkb_set_names_values_sizeof(xcb_tmp, _aux->nTypes, _aux->indicators, _aux->virtualMods, _aux->groupNames, _aux->nKeys, _aux->nKeyAliases, _aux->nRadioGroups, _aux->which);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_xkb_set_names_checked (xcb_connection_t      *c,
                           xcb_xkb_device_spec_t  deviceSpec,
                           uint16_t               virtualMods,
                           uint32_t               which,
                           uint8_t                firstType,
                           uint8_t                nTypes,
                           uint8_t                firstKTLevelt,
                           uint8_t                nKTLevels,
                           uint32_t               indicators,
                           uint8_t                groupNames,
                           uint8_t                nRadioGroups,
                           xcb_keycode_t          firstKey,
                           uint8_t                nKeys,
                           uint8_t                nKeyAliases,
                           uint16_t               totalKTLevelNames,
                           const void            *values)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_NAMES,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_names_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.virtualMods = virtualMods;
    xcb_out.which = which;
    xcb_out.firstType = firstType;
    xcb_out.nTypes = nTypes;
    xcb_out.firstKTLevelt = firstKTLevelt;
    xcb_out.nKTLevels = nKTLevels;
    xcb_out.indicators = indicators;
    xcb_out.groupNames = groupNames;
    xcb_out.nRadioGroups = nRadioGroups;
    xcb_out.firstKey = firstKey;
    xcb_out.nKeys = nKeys;
    xcb_out.nKeyAliases = nKeyAliases;
    xcb_out.pad0 = 0;
    xcb_out.totalKTLevelNames = totalKTLevelNames;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_set_names_values_t values */
    xcb_parts[4].iov_base = (char *) values;
    xcb_parts[4].iov_len =
      xcb_xkb_set_names_values_sizeof (values, nTypes, indicators, virtualMods, groupNames, nKeys, nKeyAliases, nRadioGroups, which);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_set_names (xcb_connection_t      *c,
                   xcb_xkb_device_spec_t  deviceSpec,
                   uint16_t               virtualMods,
                   uint32_t               which,
                   uint8_t                firstType,
                   uint8_t                nTypes,
                   uint8_t                firstKTLevelt,
                   uint8_t                nKTLevels,
                   uint32_t               indicators,
                   uint8_t                groupNames,
                   uint8_t                nRadioGroups,
                   xcb_keycode_t          firstKey,
                   uint8_t                nKeys,
                   uint8_t                nKeyAliases,
                   uint16_t               totalKTLevelNames,
                   const void            *values)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_NAMES,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_names_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.virtualMods = virtualMods;
    xcb_out.which = which;
    xcb_out.firstType = firstType;
    xcb_out.nTypes = nTypes;
    xcb_out.firstKTLevelt = firstKTLevelt;
    xcb_out.nKTLevels = nKTLevels;
    xcb_out.indicators = indicators;
    xcb_out.groupNames = groupNames;
    xcb_out.nRadioGroups = nRadioGroups;
    xcb_out.firstKey = firstKey;
    xcb_out.nKeys = nKeys;
    xcb_out.nKeyAliases = nKeyAliases;
    xcb_out.pad0 = 0;
    xcb_out.totalKTLevelNames = totalKTLevelNames;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_set_names_values_t values */
    xcb_parts[4].iov_base = (char *) values;
    xcb_parts[4].iov_len =
      xcb_xkb_set_names_values_sizeof (values, nTypes, indicators, virtualMods, groupNames, nKeys, nKeyAliases, nRadioGroups, which);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_set_names_aux_checked (xcb_connection_t                 *c,
                               xcb_xkb_device_spec_t             deviceSpec,
                               uint16_t                          virtualMods,
                               uint32_t                          which,
                               uint8_t                           firstType,
                               uint8_t                           nTypes,
                               uint8_t                           firstKTLevelt,
                               uint8_t                           nKTLevels,
                               uint32_t                          indicators,
                               uint8_t                           groupNames,
                               uint8_t                           nRadioGroups,
                               xcb_keycode_t                     firstKey,
                               uint8_t                           nKeys,
                               uint8_t                           nKeyAliases,
                               uint16_t                          totalKTLevelNames,
                               const xcb_xkb_set_names_values_t *values)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_NAMES,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_names_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.virtualMods = virtualMods;
    xcb_out.which = which;
    xcb_out.firstType = firstType;
    xcb_out.nTypes = nTypes;
    xcb_out.firstKTLevelt = firstKTLevelt;
    xcb_out.nKTLevels = nKTLevels;
    xcb_out.indicators = indicators;
    xcb_out.groupNames = groupNames;
    xcb_out.nRadioGroups = nRadioGroups;
    xcb_out.firstKey = firstKey;
    xcb_out.nKeys = nKeys;
    xcb_out.nKeyAliases = nKeyAliases;
    xcb_out.pad0 = 0;
    xcb_out.totalKTLevelNames = totalKTLevelNames;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_set_names_values_t values */
    xcb_parts[4].iov_len =
      xcb_xkb_set_names_values_serialize (&xcb_aux0, nTypes, indicators, virtualMods, groupNames, nKeys, nKeyAliases, nRadioGroups, which, values);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_set_names_aux (xcb_connection_t                 *c,
                       xcb_xkb_device_spec_t             deviceSpec,
                       uint16_t                          virtualMods,
                       uint32_t                          which,
                       uint8_t                           firstType,
                       uint8_t                           nTypes,
                       uint8_t                           firstKTLevelt,
                       uint8_t                           nKTLevels,
                       uint32_t                          indicators,
                       uint8_t                           groupNames,
                       uint8_t                           nRadioGroups,
                       xcb_keycode_t                     firstKey,
                       uint8_t                           nKeys,
                       uint8_t                           nKeyAliases,
                       uint16_t                          totalKTLevelNames,
                       const xcb_xkb_set_names_values_t *values)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 3,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_NAMES,
        .isvoid = 1
    };

    struct iovec xcb_parts[5];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_names_request_t xcb_out;
    void *xcb_aux0 = 0;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.virtualMods = virtualMods;
    xcb_out.which = which;
    xcb_out.firstType = firstType;
    xcb_out.nTypes = nTypes;
    xcb_out.firstKTLevelt = firstKTLevelt;
    xcb_out.nKTLevels = nKTLevels;
    xcb_out.indicators = indicators;
    xcb_out.groupNames = groupNames;
    xcb_out.nRadioGroups = nRadioGroups;
    xcb_out.firstKey = firstKey;
    xcb_out.nKeys = nKeys;
    xcb_out.nKeyAliases = nKeyAliases;
    xcb_out.pad0 = 0;
    xcb_out.totalKTLevelNames = totalKTLevelNames;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_set_names_values_t values */
    xcb_parts[4].iov_len =
      xcb_xkb_set_names_values_serialize (&xcb_aux0, nTypes, indicators, virtualMods, groupNames, nKeys, nKeyAliases, nRadioGroups, which, values);
    xcb_parts[4].iov_base = xcb_aux0;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    free(xcb_aux0);
    return xcb_ret;
}

void *
xcb_xkb_set_names_values (const xcb_xkb_set_names_request_t *R)
{
    return (void *) (R + 1);
}

xcb_xkb_per_client_flags_cookie_t
xcb_xkb_per_client_flags (xcb_connection_t      *c,
                          xcb_xkb_device_spec_t  deviceSpec,
                          uint32_t               change,
                          uint32_t               value,
                          uint32_t               ctrlsToChange,
                          uint32_t               autoCtrls,
                          uint32_t               autoCtrlsValues)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_PER_CLIENT_FLAGS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_per_client_flags_cookie_t xcb_ret;
    xcb_xkb_per_client_flags_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.change = change;
    xcb_out.value = value;
    xcb_out.ctrlsToChange = ctrlsToChange;
    xcb_out.autoCtrls = autoCtrls;
    xcb_out.autoCtrlsValues = autoCtrlsValues;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_per_client_flags_cookie_t
xcb_xkb_per_client_flags_unchecked (xcb_connection_t      *c,
                                    xcb_xkb_device_spec_t  deviceSpec,
                                    uint32_t               change,
                                    uint32_t               value,
                                    uint32_t               ctrlsToChange,
                                    uint32_t               autoCtrls,
                                    uint32_t               autoCtrlsValues)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_PER_CLIENT_FLAGS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_per_client_flags_cookie_t xcb_ret;
    xcb_xkb_per_client_flags_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.change = change;
    xcb_out.value = value;
    xcb_out.ctrlsToChange = ctrlsToChange;
    xcb_out.autoCtrls = autoCtrls;
    xcb_out.autoCtrlsValues = autoCtrlsValues;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_per_client_flags_reply_t *
xcb_xkb_per_client_flags_reply (xcb_connection_t                   *c,
                                xcb_xkb_per_client_flags_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_xkb_per_client_flags_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xkb_list_components_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_list_components_reply_t *_aux = (xcb_xkb_list_components_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_xkb_list_components_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* keymaps */
    for(i=0; i<_aux->nKeymaps; i++) {
        xcb_tmp_len = xcb_xkb_listing_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_xkb_listing_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* keycodes */
    for(i=0; i<_aux->nKeycodes; i++) {
        xcb_tmp_len = xcb_xkb_listing_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_xkb_listing_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* types */
    for(i=0; i<_aux->nTypes; i++) {
        xcb_tmp_len = xcb_xkb_listing_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_xkb_listing_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* compatMaps */
    for(i=0; i<_aux->nCompatMaps; i++) {
        xcb_tmp_len = xcb_xkb_listing_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_xkb_listing_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* symbols */
    for(i=0; i<_aux->nSymbols; i++) {
        xcb_tmp_len = xcb_xkb_listing_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_xkb_listing_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* geometries */
    for(i=0; i<_aux->nGeometries; i++) {
        xcb_tmp_len = xcb_xkb_listing_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_xkb_listing_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xkb_list_components_cookie_t
xcb_xkb_list_components (xcb_connection_t      *c,
                         xcb_xkb_device_spec_t  deviceSpec,
                         uint16_t               maxNames)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_LIST_COMPONENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_list_components_cookie_t xcb_ret;
    xcb_xkb_list_components_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.maxNames = maxNames;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_list_components_cookie_t
xcb_xkb_list_components_unchecked (xcb_connection_t      *c,
                                   xcb_xkb_device_spec_t  deviceSpec,
                                   uint16_t               maxNames)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_LIST_COMPONENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_list_components_cookie_t xcb_ret;
    xcb_xkb_list_components_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.maxNames = maxNames;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xkb_list_components_keymaps_length (const xcb_xkb_list_components_reply_t *R)
{
    return R->nKeymaps;
}

xcb_xkb_listing_iterator_t
xcb_xkb_list_components_keymaps_iterator (const xcb_xkb_list_components_reply_t *R)
{
    xcb_xkb_listing_iterator_t i;
    i.data = (xcb_xkb_listing_t *) (R + 1);
    i.rem = R->nKeymaps;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_xkb_list_components_keycodes_length (const xcb_xkb_list_components_reply_t *R)
{
    return R->nKeycodes;
}

xcb_xkb_listing_iterator_t
xcb_xkb_list_components_keycodes_iterator (const xcb_xkb_list_components_reply_t *R)
{
    xcb_xkb_listing_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xkb_listing_end(xcb_xkb_list_components_keymaps_iterator(R));
    i.data = (xcb_xkb_listing_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_listing_t, prev.index));
    i.rem = R->nKeycodes;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_xkb_list_components_types_length (const xcb_xkb_list_components_reply_t *R)
{
    return R->nTypes;
}

xcb_xkb_listing_iterator_t
xcb_xkb_list_components_types_iterator (const xcb_xkb_list_components_reply_t *R)
{
    xcb_xkb_listing_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xkb_listing_end(xcb_xkb_list_components_keycodes_iterator(R));
    i.data = (xcb_xkb_listing_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_listing_t, prev.index));
    i.rem = R->nTypes;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_xkb_list_components_compat_maps_length (const xcb_xkb_list_components_reply_t *R)
{
    return R->nCompatMaps;
}

xcb_xkb_listing_iterator_t
xcb_xkb_list_components_compat_maps_iterator (const xcb_xkb_list_components_reply_t *R)
{
    xcb_xkb_listing_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xkb_listing_end(xcb_xkb_list_components_types_iterator(R));
    i.data = (xcb_xkb_listing_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_listing_t, prev.index));
    i.rem = R->nCompatMaps;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_xkb_list_components_symbols_length (const xcb_xkb_list_components_reply_t *R)
{
    return R->nSymbols;
}

xcb_xkb_listing_iterator_t
xcb_xkb_list_components_symbols_iterator (const xcb_xkb_list_components_reply_t *R)
{
    xcb_xkb_listing_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xkb_listing_end(xcb_xkb_list_components_compat_maps_iterator(R));
    i.data = (xcb_xkb_listing_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_listing_t, prev.index));
    i.rem = R->nSymbols;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_xkb_list_components_geometries_length (const xcb_xkb_list_components_reply_t *R)
{
    return R->nGeometries;
}

xcb_xkb_listing_iterator_t
xcb_xkb_list_components_geometries_iterator (const xcb_xkb_list_components_reply_t *R)
{
    xcb_xkb_listing_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xkb_listing_end(xcb_xkb_list_components_symbols_iterator(R));
    i.data = (xcb_xkb_listing_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_listing_t, prev.index));
    i.rem = R->nGeometries;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xkb_list_components_reply_t *
xcb_xkb_list_components_reply (xcb_connection_t                  *c,
                               xcb_xkb_list_components_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_xkb_list_components_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xkb_get_kbd_by_name_replies_types_map_types_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                             const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.nTypes;
}

xcb_xkb_key_type_iterator_t
xcb_xkb_get_kbd_by_name_replies_types_map_types_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                               const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_xkb_key_type_iterator_t i;
    i.data = S->types.map.types_rtrn;
    i.rem = S->types.nTypes;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_xkb_get_kbd_by_name_replies_types_map_syms_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                            const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.nKeySyms;
}

xcb_xkb_key_sym_map_iterator_t
xcb_xkb_get_kbd_by_name_replies_types_map_syms_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                              const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_xkb_key_sym_map_iterator_t i;
    i.data = S->types.map.syms_rtrn;
    i.rem = S->types.nKeySyms;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint8_t *
xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_count (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.map.acts_rtrn_count;
}

int
xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_count_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                  const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.nKeyActions;
}

xcb_generic_iterator_t
xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_count_end (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                               const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->types.map.acts_rtrn_count + S->types.nKeyActions;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_action_t *
xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_acts (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.map.acts_rtrn_acts;
}

int
xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_acts_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                 const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.totalActions;
}

xcb_xkb_action_iterator_t
xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_acts_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                   const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_xkb_action_iterator_t i;
    i.data = S->types.map.acts_rtrn_acts;
    i.rem = S->types.totalActions;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_set_behavior_t *
xcb_xkb_get_kbd_by_name_replies_types_map_behaviors_rtrn (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.map.behaviors_rtrn;
}

int
xcb_xkb_get_kbd_by_name_replies_types_map_behaviors_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                 const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.totalKeyBehaviors;
}

xcb_xkb_set_behavior_iterator_t
xcb_xkb_get_kbd_by_name_replies_types_map_behaviors_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                   const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_xkb_set_behavior_iterator_t i;
    i.data = S->types.map.behaviors_rtrn;
    i.rem = S->types.totalKeyBehaviors;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint8_t *
xcb_xkb_get_kbd_by_name_replies_types_map_vmods_rtrn (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.map.vmods_rtrn;
}

int
xcb_xkb_get_kbd_by_name_replies_types_map_vmods_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                             const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return xcb_popcount(S->types.virtualMods);
}

xcb_generic_iterator_t
xcb_xkb_get_kbd_by_name_replies_types_map_vmods_rtrn_end (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                          const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->types.map.vmods_rtrn + xcb_popcount(S->types.virtualMods);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_set_explicit_t *
xcb_xkb_get_kbd_by_name_replies_types_map_explicit_rtrn (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.map.explicit_rtrn;
}

int
xcb_xkb_get_kbd_by_name_replies_types_map_explicit_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.totalKeyExplicit;
}

xcb_xkb_set_explicit_iterator_t
xcb_xkb_get_kbd_by_name_replies_types_map_explicit_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                  const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_xkb_set_explicit_iterator_t i;
    i.data = S->types.map.explicit_rtrn;
    i.rem = S->types.totalKeyExplicit;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_key_mod_map_t *
xcb_xkb_get_kbd_by_name_replies_types_map_modmap_rtrn (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.map.modmap_rtrn;
}

int
xcb_xkb_get_kbd_by_name_replies_types_map_modmap_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                              const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.totalModMapKeys;
}

xcb_xkb_key_mod_map_iterator_t
xcb_xkb_get_kbd_by_name_replies_types_map_modmap_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_xkb_key_mod_map_iterator_t i;
    i.data = S->types.map.modmap_rtrn;
    i.rem = S->types.totalModMapKeys;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_key_v_mod_map_t *
xcb_xkb_get_kbd_by_name_replies_types_map_vmodmap_rtrn (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.map.vmodmap_rtrn;
}

int
xcb_xkb_get_kbd_by_name_replies_types_map_vmodmap_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                               const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->types.totalVModMapKeys;
}

xcb_xkb_key_v_mod_map_iterator_t
xcb_xkb_get_kbd_by_name_replies_types_map_vmodmap_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                 const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_xkb_key_v_mod_map_iterator_t i;
    i.data = S->types.map.vmodmap_rtrn;
    i.rem = S->types.totalVModMapKeys;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_xkb_get_kbd_by_name_replies_types_map_serialize (void                                              **_buffer,
                                                     uint8_t                                             nTypes,
                                                     uint8_t                                             nKeySyms,
                                                     uint8_t                                             nKeyActions,
                                                     uint16_t                                            totalActions,
                                                     uint8_t                                             totalKeyBehaviors,
                                                     uint16_t                                            virtualMods,
                                                     uint8_t                                             totalKeyExplicit,
                                                     uint8_t                                             totalModMapKeys,
                                                     uint8_t                                             totalVModMapKeys,
                                                     uint16_t                                            present,
                                                     const xcb_xkb_get_kbd_by_name_replies_types_map_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[23];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(present & XCB_XKB_MAP_PART_KEY_TYPES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* types_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->types_rtrn;
        xcb_parts[xcb_parts_idx].iov_len = 0;
        xcb_tmp = (char *) _aux->types_rtrn;
        for(i=0; i<nTypes; i++) { 
            xcb_block_len = xcb_xkb_key_type_sizeof(xcb_tmp);
            xcb_parts[xcb_parts_idx].iov_len += xcb_block_len;
        }
        xcb_block_len = xcb_parts[xcb_parts_idx].iov_len;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_type_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_SYMS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* syms_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->syms_rtrn;
        xcb_parts[xcb_parts_idx].iov_len = 0;
        xcb_tmp = (char *) _aux->syms_rtrn;
        for(i=0; i<nKeySyms; i++) { 
            xcb_block_len = xcb_xkb_key_sym_map_sizeof(xcb_tmp);
            xcb_parts[xcb_parts_idx].iov_len += xcb_block_len;
        }
        xcb_block_len = xcb_parts[xcb_parts_idx].iov_len;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_sym_map_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_ACTIONS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* acts_rtrn_count */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->acts_rtrn_count;
        xcb_block_len += nKeyActions * sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = nKeyActions * sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* acts_rtrn_acts */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->acts_rtrn_acts;
        xcb_block_len += totalActions * sizeof(xcb_xkb_action_t);
        xcb_parts[xcb_parts_idx].iov_len = totalActions * sizeof(xcb_xkb_action_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_action_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_BEHAVIORS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* behaviors_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->behaviors_rtrn;
        xcb_block_len += totalKeyBehaviors * sizeof(xcb_xkb_set_behavior_t);
        xcb_parts[xcb_parts_idx].iov_len = totalKeyBehaviors * sizeof(xcb_xkb_set_behavior_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_set_behavior_t);
    }
    if(present & XCB_XKB_MAP_PART_VIRTUAL_MODS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* vmods_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->vmods_rtrn;
        xcb_block_len += xcb_popcount(virtualMods) * sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(virtualMods) * sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(present & XCB_XKB_MAP_PART_EXPLICIT_COMPONENTS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* explicit_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->explicit_rtrn;
        xcb_block_len += totalKeyExplicit * sizeof(xcb_xkb_set_explicit_t);
        xcb_parts[xcb_parts_idx].iov_len = totalKeyExplicit * sizeof(xcb_xkb_set_explicit_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_set_explicit_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(present & XCB_XKB_MAP_PART_MODIFIER_MAP) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* modmap_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->modmap_rtrn;
        xcb_block_len += totalModMapKeys * sizeof(xcb_xkb_key_mod_map_t);
        xcb_parts[xcb_parts_idx].iov_len = totalModMapKeys * sizeof(xcb_xkb_key_mod_map_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_mod_map_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(present & XCB_XKB_MAP_PART_VIRTUAL_MOD_MAP) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* vmodmap_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->vmodmap_rtrn;
        xcb_block_len += totalVModMapKeys * sizeof(xcb_xkb_key_v_mod_map_t);
        xcb_parts[xcb_parts_idx].iov_len = totalVModMapKeys * sizeof(xcb_xkb_key_v_mod_map_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_v_mod_map_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_xkb_get_kbd_by_name_replies_types_map_unpack (const void                                   *_buffer,
                                                  uint8_t                                       nTypes,
                                                  uint8_t                                       nKeySyms,
                                                  uint8_t                                       nKeyActions,
                                                  uint16_t                                      totalActions,
                                                  uint8_t                                       totalKeyBehaviors,
                                                  uint16_t                                      virtualMods,
                                                  uint8_t                                       totalKeyExplicit,
                                                  uint8_t                                       totalModMapKeys,
                                                  uint8_t                                       totalVModMapKeys,
                                                  uint16_t                                      present,
                                                  xcb_xkb_get_kbd_by_name_replies_types_map_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    if(present & XCB_XKB_MAP_PART_KEY_TYPES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* types_rtrn */
        _aux->types_rtrn = (xcb_xkb_key_type_t *)xcb_tmp;
        for(i=0; i<nTypes; i++) {
            xcb_tmp_len = xcb_xkb_key_type_sizeof(xcb_tmp);
            xcb_block_len += xcb_tmp_len;
            xcb_tmp += xcb_tmp_len;
        }
        xcb_align_to = ALIGNOF(xcb_xkb_key_type_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_SYMS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* syms_rtrn */
        _aux->syms_rtrn = (xcb_xkb_key_sym_map_t *)xcb_tmp;
        for(i=0; i<nKeySyms; i++) {
            xcb_tmp_len = xcb_xkb_key_sym_map_sizeof(xcb_tmp);
            xcb_block_len += xcb_tmp_len;
            xcb_tmp += xcb_tmp_len;
        }
        xcb_align_to = ALIGNOF(xcb_xkb_key_sym_map_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_ACTIONS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* acts_rtrn_count */
        _aux->acts_rtrn_count = (uint8_t *)xcb_tmp;
        xcb_block_len += nKeyActions * sizeof(xcb_keycode_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* acts_rtrn_acts */
        _aux->acts_rtrn_acts = (xcb_xkb_action_t *)xcb_tmp;
        xcb_block_len += totalActions * sizeof(xcb_xkb_action_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_action_t);
    }
    if(present & XCB_XKB_MAP_PART_KEY_BEHAVIORS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* behaviors_rtrn */
        _aux->behaviors_rtrn = (xcb_xkb_set_behavior_t *)xcb_tmp;
        xcb_block_len += totalKeyBehaviors * sizeof(xcb_xkb_set_behavior_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_set_behavior_t);
    }
    if(present & XCB_XKB_MAP_PART_VIRTUAL_MODS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* vmods_rtrn */
        _aux->vmods_rtrn = (uint8_t *)xcb_tmp;
        xcb_block_len += xcb_popcount(virtualMods) * sizeof(xcb_keycode_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(present & XCB_XKB_MAP_PART_EXPLICIT_COMPONENTS) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* explicit_rtrn */
        _aux->explicit_rtrn = (xcb_xkb_set_explicit_t *)xcb_tmp;
        xcb_block_len += totalKeyExplicit * sizeof(xcb_xkb_set_explicit_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_set_explicit_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(present & XCB_XKB_MAP_PART_MODIFIER_MAP) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* modmap_rtrn */
        _aux->modmap_rtrn = (xcb_xkb_key_mod_map_t *)xcb_tmp;
        xcb_block_len += totalModMapKeys * sizeof(xcb_xkb_key_mod_map_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_key_mod_map_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
    }
    if(present & XCB_XKB_MAP_PART_VIRTUAL_MOD_MAP) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* vmodmap_rtrn */
        _aux->vmodmap_rtrn = (xcb_xkb_key_v_mod_map_t *)xcb_tmp;
        xcb_block_len += totalVModMapKeys * sizeof(xcb_xkb_key_v_mod_map_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_key_v_mod_map_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_xkb_get_kbd_by_name_replies_types_map_sizeof (const void  *_buffer,
                                                  uint8_t      nTypes,
                                                  uint8_t      nKeySyms,
                                                  uint8_t      nKeyActions,
                                                  uint16_t     totalActions,
                                                  uint8_t      totalKeyBehaviors,
                                                  uint16_t     virtualMods,
                                                  uint8_t      totalKeyExplicit,
                                                  uint8_t      totalModMapKeys,
                                                  uint8_t      totalVModMapKeys,
                                                  uint16_t     present)
{
    xcb_xkb_get_kbd_by_name_replies_types_map_t _aux;
    return xcb_xkb_get_kbd_by_name_replies_types_map_unpack(_buffer, nTypes, nKeySyms, nKeyActions, totalActions, totalKeyBehaviors, virtualMods, totalKeyExplicit, totalModMapKeys, totalVModMapKeys, present, &_aux);
}

xcb_atom_t *
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_type_names (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->key_names.valueList.typeNames;
}

int
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_type_names_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                        const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->key_names.nTypes;
}

xcb_generic_iterator_t
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_type_names_end (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                     const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->key_names.valueList.typeNames + S->key_names.nTypes;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint8_t *
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_n_levels_per_type (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->key_names.valueList.nLevelsPerType;
}

int
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_n_levels_per_type_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                               const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->key_names.nTypes;
}

xcb_generic_iterator_t
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_n_levels_per_type_end (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                            const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->key_names.valueList.nLevelsPerType + S->key_names.nTypes;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_kt_level_names (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->key_names.valueList.ktLevelNames;
}

int
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_kt_level_names_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                            const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint8_t* xcb_pre_tmp_4; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_1 = S->key_names.nTypes;
    xcb_pre_tmp_3 = 0;
    xcb_pre_tmp_4 = S->key_names.valueList.nLevelsPerType;
    for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
        xcb_pre_tmp_3 += *xcb_pre_tmp_4;
        xcb_pre_tmp_4++;
    }
    /* sumof end. Result is in xcb_pre_tmp_3 */
    return xcb_pre_tmp_3;
}

xcb_generic_iterator_t
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_kt_level_names_end (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                         const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_generic_iterator_t i;
    int xcb_pre_tmp_5; /* sumof length */
    int xcb_pre_tmp_6; /* sumof loop counter */
    int64_t xcb_pre_tmp_7; /* sumof sum */
    const uint8_t* xcb_pre_tmp_8; /* sumof list ptr */
    /* sumof start */
    xcb_pre_tmp_5 = S->key_names.nTypes;
    xcb_pre_tmp_7 = 0;
    xcb_pre_tmp_8 = S->key_names.valueList.nLevelsPerType;
    for (xcb_pre_tmp_6 = 0; xcb_pre_tmp_6 < xcb_pre_tmp_5; xcb_pre_tmp_6++) {
        xcb_pre_tmp_7 += *xcb_pre_tmp_8;
        xcb_pre_tmp_8++;
    }
    /* sumof end. Result is in xcb_pre_tmp_7 */
    i.data = S->key_names.valueList.ktLevelNames + xcb_pre_tmp_7;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_indicator_names (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->key_names.valueList.indicatorNames;
}

int
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_indicator_names_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                             const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return xcb_popcount(S->key_names.indicators);
}

xcb_generic_iterator_t
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_indicator_names_end (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                          const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->key_names.valueList.indicatorNames + xcb_popcount(S->key_names.indicators);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_virtual_mod_names (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->key_names.valueList.virtualModNames;
}

int
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_virtual_mod_names_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                               const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return xcb_popcount(S->key_names.virtualMods);
}

xcb_generic_iterator_t
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_virtual_mod_names_end (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                            const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->key_names.valueList.virtualModNames + xcb_popcount(S->key_names.virtualMods);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_groups (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->key_names.valueList.groups;
}

int
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_groups_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                    const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return xcb_popcount(S->key_names.groupNames);
}

xcb_generic_iterator_t
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_groups_end (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                 const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->key_names.valueList.groups + xcb_popcount(S->key_names.groupNames);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_key_name_t *
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_names (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->key_names.valueList.keyNames;
}

int
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_names_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                       const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->key_names.nKeys;
}

xcb_xkb_key_name_iterator_t
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_names_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                         const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_xkb_key_name_iterator_t i;
    i.data = S->key_names.valueList.keyNames;
    i.rem = S->key_names.nKeys;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_key_alias_t *
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_aliases (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->key_names.valueList.keyAliases;
}

int
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_aliases_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                         const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->key_names.nKeyAliases;
}

xcb_xkb_key_alias_iterator_t
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_aliases_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                           const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_xkb_key_alias_iterator_t i;
    i.data = S->key_names.valueList.keyAliases;
    i.rem = S->key_names.nKeyAliases;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_atom_t *
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_radio_group_names (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->key_names.valueList.radioGroupNames;
}

int
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_radio_group_names_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                               const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->key_names.nRadioGroups;
}

xcb_generic_iterator_t
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_radio_group_names_end (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                            const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_generic_iterator_t i;
    i.data = S->key_names.valueList.radioGroupNames + S->key_names.nRadioGroups;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

int
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_serialize (void                                                         **_buffer,
                                                                uint8_t                                                        nTypes,
                                                                uint32_t                                                       indicators,
                                                                uint16_t                                                       virtualMods,
                                                                uint8_t                                                        groupNames,
                                                                uint8_t                                                        nKeys,
                                                                uint8_t                                                        nKeyAliases,
                                                                uint8_t                                                        nRadioGroups,
                                                                uint32_t                                                       which,
                                                                const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint8_t* xcb_pre_tmp_4; /* sumof list ptr */
    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[26];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if(which & XCB_XKB_NAME_DETAIL_KEYCODES) {
        /* xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t.keycodesName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->keycodesName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_GEOMETRY) {
        /* xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t.geometryName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometryName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_SYMBOLS) {
        /* xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t.symbolsName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->symbolsName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_PHYS_SYMBOLS) {
        /* xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t.physSymbolsName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->physSymbolsName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_TYPES) {
        /* xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t.typesName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->typesName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_COMPAT) {
        /* xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t.compatName */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->compatName;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_TYPE_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* typeNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->typeNames;
        xcb_block_len += nTypes * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = nTypes * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KT_LEVEL_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* nLevelsPerType */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->nLevelsPerType;
        xcb_block_len += nTypes * sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = nTypes * sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* ktLevelNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->ktLevelNames;
        /* sumof start */
        xcb_pre_tmp_1 = nTypes;
        xcb_pre_tmp_3 = 0;
        xcb_pre_tmp_4 = _aux->nLevelsPerType;
        for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
            xcb_pre_tmp_3 += *xcb_pre_tmp_4;
            xcb_pre_tmp_4++;
        }
        /* sumof end. Result is in xcb_pre_tmp_3 */
        xcb_block_len += xcb_pre_tmp_3 * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_pre_tmp_3 * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_INDICATOR_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* indicatorNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->indicatorNames;
        xcb_block_len += xcb_popcount(indicators) * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(indicators) * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_VIRTUAL_MOD_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* virtualModNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->virtualModNames;
        xcb_block_len += xcb_popcount(virtualMods) * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(virtualMods) * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_GROUP_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* groups */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->groups;
        xcb_block_len += xcb_popcount(groupNames) * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(groupNames) * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keyNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->keyNames;
        xcb_block_len += nKeys * sizeof(xcb_xkb_key_name_t);
        xcb_parts[xcb_parts_idx].iov_len = nKeys * sizeof(xcb_xkb_key_name_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_name_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_ALIASES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keyAliases */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->keyAliases;
        xcb_block_len += nKeyAliases * sizeof(xcb_xkb_key_alias_t);
        xcb_parts[xcb_parts_idx].iov_len = nKeyAliases * sizeof(xcb_xkb_key_alias_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_key_alias_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_RG_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* radioGroupNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->radioGroupNames;
        xcb_block_len += nRadioGroups * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = nRadioGroups * sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_unpack (const void                                              *_buffer,
                                                             uint8_t                                                  nTypes,
                                                             uint32_t                                                 indicators,
                                                             uint16_t                                                 virtualMods,
                                                             uint8_t                                                  groupNames,
                                                             uint8_t                                                  nKeys,
                                                             uint8_t                                                  nKeyAliases,
                                                             uint8_t                                                  nRadioGroups,
                                                             uint32_t                                                 which,
                                                             xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    int xcb_pre_tmp_1; /* sumof length */
    int xcb_pre_tmp_2; /* sumof loop counter */
    int64_t xcb_pre_tmp_3; /* sumof sum */
    const uint8_t* xcb_pre_tmp_4; /* sumof list ptr */

    if(which & XCB_XKB_NAME_DETAIL_KEYCODES) {
        /* xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t.keycodesName */
        _aux->keycodesName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_GEOMETRY) {
        /* xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t.geometryName */
        _aux->geometryName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_SYMBOLS) {
        /* xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t.symbolsName */
        _aux->symbolsName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_PHYS_SYMBOLS) {
        /* xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t.physSymbolsName */
        _aux->physSymbolsName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_TYPES) {
        /* xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t.typesName */
        _aux->typesName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_COMPAT) {
        /* xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t.compatName */
        _aux->compatName = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_TYPE_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* typeNames */
        _aux->typeNames = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += nTypes * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KT_LEVEL_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* nLevelsPerType */
        _aux->nLevelsPerType = (uint8_t *)xcb_tmp;
        xcb_block_len += nTypes * sizeof(uint8_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
        xcb_align_to = 4;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* ktLevelNames */
        _aux->ktLevelNames = (xcb_atom_t *)xcb_tmp;
        /* sumof start */
        xcb_pre_tmp_1 = nTypes;
        xcb_pre_tmp_3 = 0;
        xcb_pre_tmp_4 = _aux->nLevelsPerType;
        for (xcb_pre_tmp_2 = 0; xcb_pre_tmp_2 < xcb_pre_tmp_1; xcb_pre_tmp_2++) {
            xcb_pre_tmp_3 += *xcb_pre_tmp_4;
            xcb_pre_tmp_4++;
        }
        /* sumof end. Result is in xcb_pre_tmp_3 */
        xcb_block_len += xcb_pre_tmp_3 * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_INDICATOR_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* indicatorNames */
        _aux->indicatorNames = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += xcb_popcount(indicators) * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_VIRTUAL_MOD_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* virtualModNames */
        _aux->virtualModNames = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += xcb_popcount(virtualMods) * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_GROUP_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* groups */
        _aux->groups = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += xcb_popcount(groupNames) * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keyNames */
        _aux->keyNames = (xcb_xkb_key_name_t *)xcb_tmp;
        xcb_block_len += nKeys * sizeof(xcb_xkb_key_name_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_key_name_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_KEY_ALIASES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* keyAliases */
        _aux->keyAliases = (xcb_xkb_key_alias_t *)xcb_tmp;
        xcb_block_len += nKeyAliases * sizeof(xcb_xkb_key_alias_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_key_alias_t);
    }
    if(which & XCB_XKB_NAME_DETAIL_RG_NAMES) {
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* radioGroupNames */
        _aux->radioGroupNames = (xcb_atom_t *)xcb_tmp;
        xcb_block_len += nRadioGroups * sizeof(xcb_atom_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_atom_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_sizeof (const void  *_buffer,
                                                             uint8_t      nTypes,
                                                             uint32_t     indicators,
                                                             uint16_t     virtualMods,
                                                             uint8_t      groupNames,
                                                             uint8_t      nKeys,
                                                             uint8_t      nKeyAliases,
                                                             uint8_t      nRadioGroups,
                                                             uint32_t     which)
{
    xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t _aux;
    return xcb_xkb_get_kbd_by_name_replies_key_names_value_list_unpack(_buffer, nTypes, indicators, virtualMods, groupNames, nKeys, nKeyAliases, nRadioGroups, which, &_aux);
}

xcb_xkb_get_kbd_by_name_replies_types_map_t *
xcb_xkb_get_kbd_by_name_replies_types_map (const xcb_xkb_get_kbd_by_name_replies_t *R)
{
    return (xcb_xkb_get_kbd_by_name_replies_types_map_t *) (R + 1);
}

xcb_xkb_sym_interpret_t *
xcb_xkb_get_kbd_by_name_replies_compat_map_si_rtrn (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->compat_map.si_rtrn;
}

int
xcb_xkb_get_kbd_by_name_replies_compat_map_si_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                           const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->compat_map.nSIRtrn;
}

xcb_xkb_sym_interpret_iterator_t
xcb_xkb_get_kbd_by_name_replies_compat_map_si_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                             const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_xkb_sym_interpret_iterator_t i;
    i.data = S->compat_map.si_rtrn;
    i.rem = S->compat_map.nSIRtrn;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_mod_def_t *
xcb_xkb_get_kbd_by_name_replies_compat_map_group_rtrn (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->compat_map.group_rtrn;
}

int
xcb_xkb_get_kbd_by_name_replies_compat_map_group_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                              const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return xcb_popcount(S->compat_map.groupsRtrn);
}

xcb_xkb_mod_def_iterator_t
xcb_xkb_get_kbd_by_name_replies_compat_map_group_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                                const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_xkb_mod_def_iterator_t i;
    i.data = S->compat_map.group_rtrn;
    i.rem = xcb_popcount(S->compat_map.groupsRtrn);
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_indicator_map_t *
xcb_xkb_get_kbd_by_name_replies_indicator_maps_maps (const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->indicator_maps.maps;
}

int
xcb_xkb_get_kbd_by_name_replies_indicator_maps_maps_length (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                            const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    return S->indicator_maps.nIndicators;
}

xcb_xkb_indicator_map_iterator_t
xcb_xkb_get_kbd_by_name_replies_indicator_maps_maps_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R,
                                                              const xcb_xkb_get_kbd_by_name_replies_t *S)
{
    xcb_xkb_indicator_map_iterator_t i;
    i.data = S->indicator_maps.maps;
    i.rem = S->indicator_maps.nIndicators;
    i.index = (char *) i.data - (char *) S;
    return i;
}

xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *
xcb_xkb_get_kbd_by_name_replies_key_names_value_list (const xcb_xkb_get_kbd_by_name_replies_t *R)
{
    return (xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *) (R + 1);
}

xcb_xkb_counted_string_16_t *
xcb_xkb_get_kbd_by_name_replies_geometry_label_font (const xcb_xkb_get_kbd_by_name_replies_t *R)
{
    return (xcb_xkb_counted_string_16_t *) (R + 1);
}

int
xcb_xkb_get_kbd_by_name_replies_serialize (void                                    **_buffer,
                                           uint16_t                                  reported,
                                           const xcb_xkb_get_kbd_by_name_replies_t  *_aux)
{
    char *xcb_out = *_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;

    unsigned int xcb_pad = 0;
    char xcb_pad0[3] = {0, 0, 0};
    struct iovec xcb_parts[96];
    unsigned int xcb_parts_idx = 0;
    unsigned int xcb_block_len = 0;
    unsigned int i;
    char *xcb_tmp;

    if((reported & XCB_XKB_GBN_DETAIL_TYPES) ||
       (reported & XCB_XKB_GBN_DETAIL_CLIENT_SYMBOLS) ||
       (reported & XCB_XKB_GBN_DETAIL_SERVER_SYMBOLS)) {
        /* xcb_xkb_get_kbd_by_name_replies_t.types.getmap_type */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.getmap_type;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.typeDeviceID */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.typeDeviceID;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.getmap_sequence */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.getmap_sequence;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.getmap_length */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.getmap_length;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.pad1 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*2;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*2;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.typeMinKeyCode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.typeMinKeyCode;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.typeMaxKeyCode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.typeMaxKeyCode;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.present */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.present;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.firstType */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.firstType;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.nTypes */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.nTypes;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.totalTypes */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.totalTypes;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.firstKeySym */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.firstKeySym;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.totalSyms */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.totalSyms;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.nKeySyms */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.nKeySyms;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.firstKeyAction */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.firstKeyAction;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.totalActions */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.totalActions;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.nKeyActions */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.nKeyActions;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.firstKeyBehavior */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.firstKeyBehavior;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.nKeyBehaviors */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.nKeyBehaviors;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.totalKeyBehaviors */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.totalKeyBehaviors;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.firstKeyExplicit */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.firstKeyExplicit;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.nKeyExplicit */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.nKeyExplicit;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.totalKeyExplicit */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.totalKeyExplicit;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.firstModMapKey */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.firstModMapKey;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.nModMapKeys */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.nModMapKeys;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.totalModMapKeys */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.totalModMapKeys;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.firstVModMapKey */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.firstVModMapKey;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.nVModMapKeys */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.nVModMapKeys;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.totalVModMapKeys */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.totalVModMapKeys;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.pad2 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &xcb_pad;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.virtualMods */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->types.virtualMods;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* map */
        xcb_parts[xcb_parts_idx].iov_base = (char *)0;
        xcb_block_len += xcb_xkb_get_kbd_by_name_replies_types_map_serialize(&xcb_parts[xcb_parts_idx].iov_base, _aux->types.nTypes, _aux->types.nKeySyms, _aux->types.nKeyActions, _aux->types.totalActions, _aux->types.totalKeyBehaviors, _aux->types.virtualMods, _aux->types.totalKeyExplicit, _aux->types.totalModMapKeys, _aux->types.totalVModMapKeys, _aux->types.present, &_aux->types.map);
        xcb_parts[xcb_parts_idx].iov_len = xcb_xkb_get_kbd_by_name_replies_types_map_serialize(&xcb_parts[xcb_parts_idx].iov_base, _aux->types.nTypes, _aux->types.nKeySyms, _aux->types.nKeyActions, _aux->types.totalActions, _aux->types.totalKeyBehaviors, _aux->types.virtualMods, _aux->types.totalKeyExplicit, _aux->types.totalModMapKeys, _aux->types.totalVModMapKeys, _aux->types.present, &_aux->types.map);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(char);
    }
    if(reported & XCB_XKB_GBN_DETAIL_COMPAT_MAP) {
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.compatmap_type */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->compat_map.compatmap_type;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.compatDeviceID */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->compat_map.compatDeviceID;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.compatmap_sequence */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->compat_map.compatmap_sequence;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.compatmap_length */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->compat_map.compatmap_length;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.groupsRtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->compat_map.groupsRtrn;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.pad7 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &xcb_pad;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.firstSIRtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->compat_map.firstSIRtrn;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.nSIRtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->compat_map.nSIRtrn;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.nTotalSI */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->compat_map.nTotalSI;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.pad8 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*16;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*16;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* si_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->compat_map.si_rtrn;
        xcb_block_len += _aux->compat_map.nSIRtrn * sizeof(xcb_xkb_sym_interpret_t);
        xcb_parts[xcb_parts_idx].iov_len = _aux->compat_map.nSIRtrn * sizeof(xcb_xkb_sym_interpret_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_sym_interpret_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* group_rtrn */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->compat_map.group_rtrn;
        xcb_block_len += xcb_popcount(_aux->compat_map.groupsRtrn) * sizeof(xcb_xkb_mod_def_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_popcount(_aux->compat_map.groupsRtrn) * sizeof(xcb_xkb_mod_def_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_mod_def_t);
    }
    if(reported & XCB_XKB_GBN_DETAIL_INDICATOR_MAPS) {
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.indicatormap_type */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->indicator_maps.indicatormap_type;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.indicatorDeviceID */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->indicator_maps.indicatorDeviceID;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.indicatormap_sequence */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->indicator_maps.indicatormap_sequence;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.indicatormap_length */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->indicator_maps.indicatormap_length;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.which */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->indicator_maps.which;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.realIndicators */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->indicator_maps.realIndicators;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.nIndicators */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->indicator_maps.nIndicators;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.pad9 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*15;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*15;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* maps */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->indicator_maps.maps;
        xcb_block_len += _aux->indicator_maps.nIndicators * sizeof(xcb_xkb_indicator_map_t);
        xcb_parts[xcb_parts_idx].iov_len = _aux->indicator_maps.nIndicators * sizeof(xcb_xkb_indicator_map_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_indicator_map_t);
    }
    if((reported & XCB_XKB_GBN_DETAIL_KEY_NAMES) ||
       (reported & XCB_XKB_GBN_DETAIL_OTHER_NAMES)) {
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.keyname_type */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.keyname_type;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.keyDeviceID */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.keyDeviceID;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.keyname_sequence */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.keyname_sequence;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.keyname_length */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.keyname_length;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.which */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.which;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.keyMinKeyCode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.keyMinKeyCode;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.keyMaxKeyCode */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.keyMaxKeyCode;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.nTypes */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.nTypes;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.groupNames */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.groupNames;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.virtualMods */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.virtualMods;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.firstKey */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.firstKey;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.nKeys */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.nKeys;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.indicators */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.indicators;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.nRadioGroups */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.nRadioGroups;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.nKeyAliases */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.nKeyAliases;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.nKTLevels */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->key_names.nKTLevels;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.pad10 */
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_block_len += sizeof(uint8_t)*4;
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t)*4;
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* valueList */
        xcb_parts[xcb_parts_idx].iov_base = (char *)0;
        xcb_block_len += xcb_xkb_get_kbd_by_name_replies_key_names_value_list_serialize(&xcb_parts[xcb_parts_idx].iov_base, _aux->key_names.nTypes, _aux->key_names.indicators, _aux->key_names.virtualMods, _aux->key_names.groupNames, _aux->key_names.nKeys, _aux->key_names.nKeyAliases, _aux->key_names.nRadioGroups, _aux->key_names.which, &_aux->key_names.valueList);
        xcb_parts[xcb_parts_idx].iov_len = xcb_xkb_get_kbd_by_name_replies_key_names_value_list_serialize(&xcb_parts[xcb_parts_idx].iov_base, _aux->key_names.nTypes, _aux->key_names.indicators, _aux->key_names.virtualMods, _aux->key_names.groupNames, _aux->key_names.nKeys, _aux->key_names.nKeyAliases, _aux->key_names.nRadioGroups, _aux->key_names.which, &_aux->key_names.valueList);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(char);
    }
    if(reported & XCB_XKB_GBN_DETAIL_GEOMETRY) {
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.geometry_type */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.geometry_type;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.geometryDeviceID */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.geometryDeviceID;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.geometry_sequence */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.geometry_sequence;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.geometry_length */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.geometry_length;
        xcb_block_len += sizeof(uint32_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint32_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.name */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.name;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(xcb_atom_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_atom_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.geometryFound */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.geometryFound;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.pad12 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &xcb_pad;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.widthMM */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.widthMM;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.heightMM */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.heightMM;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.nProperties */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.nProperties;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.nColors */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.nColors;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.nShapes */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.nShapes;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.nSections */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.nSections;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.nDoodads */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.nDoodads;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.nKeyAliases */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.nKeyAliases;
        xcb_block_len += sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.baseColorNdx */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.baseColorNdx;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.labelColorNdx */
        xcb_parts[xcb_parts_idx].iov_base = (char *) &_aux->geometry.labelColorNdx;
        xcb_block_len += sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
            xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
            xcb_parts_idx++;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* labelFont */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->geometry.labelFont;
        xcb_block_len += xcb_xkb_counted_string_16_sizeof(_aux->geometry.labelFont);
        xcb_parts[xcb_parts_idx].iov_len = xcb_xkb_counted_string_16_sizeof(_aux->geometry.labelFont);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(xcb_xkb_counted_string_16_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_parts[xcb_parts_idx].iov_base = xcb_pad0;
        xcb_parts[xcb_parts_idx].iov_len = xcb_pad;
        xcb_parts_idx++;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    if (NULL == xcb_out) {
        /* allocate memory */
        xcb_out = malloc(xcb_buffer_len);
        *_buffer = xcb_out;
    }

    xcb_tmp = xcb_out;
    for(i=0; i<xcb_parts_idx; i++) {
        if (0 != xcb_parts[i].iov_base && 0 != xcb_parts[i].iov_len)
            memcpy(xcb_tmp, xcb_parts[i].iov_base, xcb_parts[i].iov_len);
        if (0 != xcb_parts[i].iov_len)
            xcb_tmp += xcb_parts[i].iov_len;
    }

    return xcb_buffer_len;
}

int
xcb_xkb_get_kbd_by_name_replies_unpack (const void                         *_buffer,
                                        uint16_t                            reported,
                                        xcb_xkb_get_kbd_by_name_replies_t  *_aux)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;
    unsigned int xcb_padding_offset = 0;


    if((reported & XCB_XKB_GBN_DETAIL_TYPES) ||
       (reported & XCB_XKB_GBN_DETAIL_CLIENT_SYMBOLS) ||
       (reported & XCB_XKB_GBN_DETAIL_SERVER_SYMBOLS)) {
        /* xcb_xkb_get_kbd_by_name_replies_t.types.getmap_type */
        _aux->types.getmap_type = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.typeDeviceID */
        _aux->types.typeDeviceID = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.getmap_sequence */
        _aux->types.getmap_sequence = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.getmap_length */
        _aux->types.getmap_length = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.pad1 */
        _aux->types.pad1[0] = *(uint8_t *)xcb_tmp;
        _aux->types.pad1[1] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 2;
        xcb_tmp += sizeof(uint8_t) * 2;
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.typeMinKeyCode */
        _aux->types.typeMinKeyCode = *(xcb_keycode_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_tmp += sizeof(xcb_keycode_t);
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.typeMaxKeyCode */
        _aux->types.typeMaxKeyCode = *(xcb_keycode_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_tmp += sizeof(xcb_keycode_t);
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.present */
        _aux->types.present = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.firstType */
        _aux->types.firstType = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.nTypes */
        _aux->types.nTypes = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.totalTypes */
        _aux->types.totalTypes = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.firstKeySym */
        _aux->types.firstKeySym = *(xcb_keycode_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_tmp += sizeof(xcb_keycode_t);
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.totalSyms */
        _aux->types.totalSyms = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.nKeySyms */
        _aux->types.nKeySyms = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.firstKeyAction */
        _aux->types.firstKeyAction = *(xcb_keycode_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_tmp += sizeof(xcb_keycode_t);
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.totalActions */
        _aux->types.totalActions = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.nKeyActions */
        _aux->types.nKeyActions = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.firstKeyBehavior */
        _aux->types.firstKeyBehavior = *(xcb_keycode_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_tmp += sizeof(xcb_keycode_t);
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.nKeyBehaviors */
        _aux->types.nKeyBehaviors = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.totalKeyBehaviors */
        _aux->types.totalKeyBehaviors = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.firstKeyExplicit */
        _aux->types.firstKeyExplicit = *(xcb_keycode_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_tmp += sizeof(xcb_keycode_t);
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.nKeyExplicit */
        _aux->types.nKeyExplicit = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.totalKeyExplicit */
        _aux->types.totalKeyExplicit = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.firstModMapKey */
        _aux->types.firstModMapKey = *(xcb_keycode_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_tmp += sizeof(xcb_keycode_t);
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.nModMapKeys */
        _aux->types.nModMapKeys = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.totalModMapKeys */
        _aux->types.totalModMapKeys = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.firstVModMapKey */
        _aux->types.firstVModMapKey = *(xcb_keycode_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_tmp += sizeof(xcb_keycode_t);
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.nVModMapKeys */
        _aux->types.nVModMapKeys = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.totalVModMapKeys */
        _aux->types.totalVModMapKeys = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.pad2 */
        _aux->types.pad2 = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.types.virtualMods */
        _aux->types.virtualMods = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* map */
        xcb_block_len += xcb_xkb_get_kbd_by_name_replies_types_map_unpack(xcb_tmp, _aux->types.nTypes, _aux->types.nKeySyms, _aux->types.nKeyActions, _aux->types.totalActions, _aux->types.totalKeyBehaviors, _aux->types.virtualMods, _aux->types.totalKeyExplicit, _aux->types.totalModMapKeys, _aux->types.totalVModMapKeys, _aux->types.present, &_aux->types.map);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(char);
    }
    if(reported & XCB_XKB_GBN_DETAIL_COMPAT_MAP) {
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.compatmap_type */
        _aux->compat_map.compatmap_type = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.compatDeviceID */
        _aux->compat_map.compatDeviceID = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.compatmap_sequence */
        _aux->compat_map.compatmap_sequence = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.compatmap_length */
        _aux->compat_map.compatmap_length = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.groupsRtrn */
        _aux->compat_map.groupsRtrn = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.pad7 */
        _aux->compat_map.pad7 = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.firstSIRtrn */
        _aux->compat_map.firstSIRtrn = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.nSIRtrn */
        _aux->compat_map.nSIRtrn = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.nTotalSI */
        _aux->compat_map.nTotalSI = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.pad8 */
        _aux->compat_map.pad8[0] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[1] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[2] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[3] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[4] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[5] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[6] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[7] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[8] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[9] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[10] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[11] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[12] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[13] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[14] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad8[15] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 16;
        xcb_tmp += sizeof(uint8_t) * 16;
        xcb_align_to = ALIGNOF(uint8_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* si_rtrn */
        _aux->compat_map.si_rtrn = (xcb_xkb_sym_interpret_t *)xcb_tmp;
        xcb_block_len += _aux->compat_map.nSIRtrn * sizeof(xcb_xkb_sym_interpret_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_sym_interpret_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* group_rtrn */
        _aux->compat_map.group_rtrn = (xcb_xkb_mod_def_t *)xcb_tmp;
        xcb_block_len += xcb_popcount(_aux->compat_map.groupsRtrn) * sizeof(xcb_xkb_mod_def_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_mod_def_t);
    }
    if(reported & XCB_XKB_GBN_DETAIL_INDICATOR_MAPS) {
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.indicatormap_type */
        _aux->indicator_maps.indicatormap_type = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.indicatorDeviceID */
        _aux->indicator_maps.indicatorDeviceID = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.indicatormap_sequence */
        _aux->indicator_maps.indicatormap_sequence = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.indicatormap_length */
        _aux->indicator_maps.indicatormap_length = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.which */
        _aux->indicator_maps.which = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.realIndicators */
        _aux->indicator_maps.realIndicators = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.nIndicators */
        _aux->indicator_maps.nIndicators = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.pad9 */
        _aux->indicator_maps.pad9[0] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad9[1] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad9[2] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad9[3] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad9[4] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad9[5] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad9[6] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad9[7] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad9[8] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad9[9] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad9[10] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad9[11] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad9[12] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad9[13] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad9[14] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 15;
        xcb_tmp += sizeof(uint8_t) * 15;
        xcb_align_to = ALIGNOF(uint8_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* maps */
        _aux->indicator_maps.maps = (xcb_xkb_indicator_map_t *)xcb_tmp;
        xcb_block_len += _aux->indicator_maps.nIndicators * sizeof(xcb_xkb_indicator_map_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_indicator_map_t);
    }
    if((reported & XCB_XKB_GBN_DETAIL_KEY_NAMES) ||
       (reported & XCB_XKB_GBN_DETAIL_OTHER_NAMES)) {
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.keyname_type */
        _aux->key_names.keyname_type = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.keyDeviceID */
        _aux->key_names.keyDeviceID = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.keyname_sequence */
        _aux->key_names.keyname_sequence = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.keyname_length */
        _aux->key_names.keyname_length = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.which */
        _aux->key_names.which = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.keyMinKeyCode */
        _aux->key_names.keyMinKeyCode = *(xcb_keycode_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_tmp += sizeof(xcb_keycode_t);
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.keyMaxKeyCode */
        _aux->key_names.keyMaxKeyCode = *(xcb_keycode_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_tmp += sizeof(xcb_keycode_t);
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.nTypes */
        _aux->key_names.nTypes = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.groupNames */
        _aux->key_names.groupNames = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.virtualMods */
        _aux->key_names.virtualMods = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.firstKey */
        _aux->key_names.firstKey = *(xcb_keycode_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_keycode_t);
        xcb_tmp += sizeof(xcb_keycode_t);
        xcb_align_to = ALIGNOF(xcb_keycode_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.nKeys */
        _aux->key_names.nKeys = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.indicators */
        _aux->key_names.indicators = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.nRadioGroups */
        _aux->key_names.nRadioGroups = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.nKeyAliases */
        _aux->key_names.nKeyAliases = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.nKTLevels */
        _aux->key_names.nKTLevels = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.pad10 */
        _aux->key_names.pad10[0] = *(uint8_t *)xcb_tmp;
        _aux->key_names.pad10[1] = *(uint8_t *)xcb_tmp;
        _aux->key_names.pad10[2] = *(uint8_t *)xcb_tmp;
        _aux->key_names.pad10[3] = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t) * 4;
        xcb_tmp += sizeof(uint8_t) * 4;
        xcb_align_to = ALIGNOF(uint8_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* valueList */
        xcb_block_len += xcb_xkb_get_kbd_by_name_replies_key_names_value_list_unpack(xcb_tmp, _aux->key_names.nTypes, _aux->key_names.indicators, _aux->key_names.virtualMods, _aux->key_names.groupNames, _aux->key_names.nKeys, _aux->key_names.nKeyAliases, _aux->key_names.nRadioGroups, _aux->key_names.which, &_aux->key_names.valueList);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(char);
    }
    if(reported & XCB_XKB_GBN_DETAIL_GEOMETRY) {
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.geometry_type */
        _aux->geometry.geometry_type = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.geometryDeviceID */
        _aux->geometry.geometryDeviceID = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.geometry_sequence */
        _aux->geometry.geometry_sequence = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.geometry_length */
        _aux->geometry.geometry_length = *(uint32_t *)xcb_tmp;
        xcb_block_len += sizeof(uint32_t);
        xcb_tmp += sizeof(uint32_t);
        xcb_align_to = ALIGNOF(uint32_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.name */
        _aux->geometry.name = *(xcb_atom_t *)xcb_tmp;
        xcb_block_len += sizeof(xcb_atom_t);
        xcb_tmp += sizeof(xcb_atom_t);
        xcb_align_to = ALIGNOF(xcb_atom_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.geometryFound */
        _aux->geometry.geometryFound = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.pad12 */
        _aux->geometry.pad12 = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.widthMM */
        _aux->geometry.widthMM = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.heightMM */
        _aux->geometry.heightMM = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.nProperties */
        _aux->geometry.nProperties = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.nColors */
        _aux->geometry.nColors = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.nShapes */
        _aux->geometry.nShapes = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.nSections */
        _aux->geometry.nSections = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.nDoodads */
        _aux->geometry.nDoodads = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.nKeyAliases */
        _aux->geometry.nKeyAliases = *(uint16_t *)xcb_tmp;
        xcb_block_len += sizeof(uint16_t);
        xcb_tmp += sizeof(uint16_t);
        xcb_align_to = ALIGNOF(uint16_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.baseColorNdx */
        _aux->geometry.baseColorNdx = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.labelColorNdx */
        _aux->geometry.labelColorNdx = *(uint8_t *)xcb_tmp;
        xcb_block_len += sizeof(uint8_t);
        xcb_tmp += sizeof(uint8_t);
        xcb_align_to = ALIGNOF(uint8_t);
        /* insert padding */
        xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
        xcb_buffer_len += xcb_block_len + xcb_pad;
        if (0 != xcb_pad) {
            xcb_tmp += xcb_pad;
            xcb_pad = 0;
        }
        xcb_block_len = 0;
        xcb_padding_offset = 0;
        /* labelFont */
        _aux->geometry.labelFont = (xcb_xkb_counted_string_16_t *)xcb_tmp;
        xcb_block_len += xcb_xkb_counted_string_16_sizeof(xcb_tmp);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(xcb_xkb_counted_string_16_t);
    }
    /* insert padding */
    xcb_pad = -(xcb_block_len + xcb_padding_offset) & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    xcb_padding_offset = 0;

    return xcb_buffer_len;
}

int
xcb_xkb_get_kbd_by_name_replies_sizeof (const void  *_buffer,
                                        uint16_t     reported)
{
    xcb_xkb_get_kbd_by_name_replies_t _aux;
    return xcb_xkb_get_kbd_by_name_replies_unpack(_buffer, reported, &_aux);
}

int
xcb_xkb_get_kbd_by_name_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_get_kbd_by_name_reply_t *_aux = (xcb_xkb_get_kbd_by_name_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_get_kbd_by_name_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* replies */
    xcb_block_len += xcb_xkb_get_kbd_by_name_replies_sizeof(xcb_tmp, _aux->reported);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xkb_get_kbd_by_name_cookie_t
xcb_xkb_get_kbd_by_name (xcb_connection_t      *c,
                         xcb_xkb_device_spec_t  deviceSpec,
                         uint16_t               need,
                         uint16_t               want,
                         uint8_t                load)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_KBD_BY_NAME,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_kbd_by_name_cookie_t xcb_ret;
    xcb_xkb_get_kbd_by_name_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.need = need;
    xcb_out.want = want;
    xcb_out.load = load;
    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_kbd_by_name_cookie_t
xcb_xkb_get_kbd_by_name_unchecked (xcb_connection_t      *c,
                                   xcb_xkb_device_spec_t  deviceSpec,
                                   uint16_t               need,
                                   uint16_t               want,
                                   uint8_t                load)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_KBD_BY_NAME,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_kbd_by_name_cookie_t xcb_ret;
    xcb_xkb_get_kbd_by_name_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.need = need;
    xcb_out.want = want;
    xcb_out.load = load;
    xcb_out.pad0 = 0;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void *
xcb_xkb_get_kbd_by_name_replies (const xcb_xkb_get_kbd_by_name_reply_t *R)
{
    return (void *) (R + 1);
}

xcb_xkb_get_kbd_by_name_reply_t *
xcb_xkb_get_kbd_by_name_reply (xcb_connection_t                  *c,
                               xcb_xkb_get_kbd_by_name_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_xkb_get_kbd_by_name_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xkb_get_device_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_get_device_info_reply_t *_aux = (xcb_xkb_get_device_info_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_xkb_get_device_info_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->nameLen * sizeof(xcb_xkb_string8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_string8_t);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* btnActions */
    xcb_block_len += _aux->nBtnsRtrn * sizeof(xcb_xkb_action_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_action_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* leds */
    for(i=0; i<_aux->nDeviceLedFBs; i++) {
        xcb_tmp_len = xcb_xkb_device_led_info_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_xkb_device_led_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xkb_get_device_info_cookie_t
xcb_xkb_get_device_info (xcb_connection_t         *c,
                         xcb_xkb_device_spec_t     deviceSpec,
                         uint16_t                  wanted,
                         uint8_t                   allButtons,
                         uint8_t                   firstButton,
                         uint8_t                   nButtons,
                         xcb_xkb_led_class_spec_t  ledClass,
                         xcb_xkb_id_spec_t         ledID)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_DEVICE_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_device_info_cookie_t xcb_ret;
    xcb_xkb_get_device_info_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.wanted = wanted;
    xcb_out.allButtons = allButtons;
    xcb_out.firstButton = firstButton;
    xcb_out.nButtons = nButtons;
    xcb_out.pad0 = 0;
    xcb_out.ledClass = ledClass;
    xcb_out.ledID = ledID;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_get_device_info_cookie_t
xcb_xkb_get_device_info_unchecked (xcb_connection_t         *c,
                                   xcb_xkb_device_spec_t     deviceSpec,
                                   uint16_t                  wanted,
                                   uint8_t                   allButtons,
                                   uint8_t                   firstButton,
                                   uint8_t                   nButtons,
                                   xcb_xkb_led_class_spec_t  ledClass,
                                   xcb_xkb_id_spec_t         ledID)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_GET_DEVICE_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xkb_get_device_info_cookie_t xcb_ret;
    xcb_xkb_get_device_info_request_t xcb_out;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.wanted = wanted;
    xcb_out.allButtons = allButtons;
    xcb_out.firstButton = firstButton;
    xcb_out.nButtons = nButtons;
    xcb_out.pad0 = 0;
    xcb_out.ledClass = ledClass;
    xcb_out.ledID = ledID;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_string8_t *
xcb_xkb_get_device_info_name (const xcb_xkb_get_device_info_reply_t *R)
{
    return (xcb_xkb_string8_t *) (R + 1);
}

int
xcb_xkb_get_device_info_name_length (const xcb_xkb_get_device_info_reply_t *R)
{
    return R->nameLen;
}

xcb_generic_iterator_t
xcb_xkb_get_device_info_name_end (const xcb_xkb_get_device_info_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_xkb_string8_t *) (R + 1)) + (R->nameLen);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xkb_action_t *
xcb_xkb_get_device_info_btn_actions (const xcb_xkb_get_device_info_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_xkb_get_device_info_name_end(R);
    return (xcb_xkb_action_t *) ((char *) prev.data + ((-prev.index) & (4 - 1)) + 0);
}

int
xcb_xkb_get_device_info_btn_actions_length (const xcb_xkb_get_device_info_reply_t *R)
{
    return R->nBtnsRtrn;
}

xcb_xkb_action_iterator_t
xcb_xkb_get_device_info_btn_actions_iterator (const xcb_xkb_get_device_info_reply_t *R)
{
    xcb_xkb_action_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xkb_get_device_info_name_end(R);
    i.data = (xcb_xkb_action_t *) ((char *) prev.data + ((-prev.index) & (4 - 1)));
    i.rem = R->nBtnsRtrn;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_xkb_get_device_info_leds_length (const xcb_xkb_get_device_info_reply_t *R)
{
    return R->nDeviceLedFBs;
}

xcb_xkb_device_led_info_iterator_t
xcb_xkb_get_device_info_leds_iterator (const xcb_xkb_get_device_info_reply_t *R)
{
    xcb_xkb_device_led_info_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xkb_action_end(xcb_xkb_get_device_info_btn_actions_iterator(R));
    i.data = (xcb_xkb_device_led_info_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_device_led_info_t, prev.index));
    i.rem = R->nDeviceLedFBs;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xkb_get_device_info_reply_t *
xcb_xkb_get_device_info_reply (xcb_connection_t                  *c,
                               xcb_xkb_get_device_info_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_xkb_get_device_info_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xkb_set_device_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_set_device_info_request_t *_aux = (xcb_xkb_set_device_info_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_xkb_set_device_info_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* btnActions */
    xcb_block_len += _aux->nBtns * sizeof(xcb_xkb_action_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_action_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* leds */
    for(i=0; i<_aux->nDeviceLedFBs; i++) {
        xcb_tmp_len = xcb_xkb_device_led_info_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_xkb_device_led_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_xkb_set_device_info_checked (xcb_connection_t                *c,
                                 xcb_xkb_device_spec_t            deviceSpec,
                                 uint8_t                          firstBtn,
                                 uint8_t                          nBtns,
                                 uint16_t                         change,
                                 uint16_t                         nDeviceLedFBs,
                                 const xcb_xkb_action_t          *btnActions,
                                 const xcb_xkb_device_led_info_t *leds)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_DEVICE_INFO,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_device_info_request_t xcb_out;
    unsigned int i;
    unsigned int xcb_tmp_len;
    char *xcb_tmp;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.firstBtn = firstBtn;
    xcb_out.nBtns = nBtns;
    xcb_out.change = change;
    xcb_out.nDeviceLedFBs = nDeviceLedFBs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_action_t btnActions */
    xcb_parts[4].iov_base = (char *) btnActions;
    xcb_parts[4].iov_len = nBtns * sizeof(xcb_xkb_action_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_xkb_device_led_info_t leds */
    xcb_parts[6].iov_base = (char *) leds;
    xcb_parts[6].iov_len = 0;
    xcb_tmp = (char *)leds;
    for(i=0; i<nDeviceLedFBs; i++) {
        xcb_tmp_len = xcb_xkb_device_led_info_sizeof(xcb_tmp);
        xcb_parts[6].iov_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xkb_set_device_info (xcb_connection_t                *c,
                         xcb_xkb_device_spec_t            deviceSpec,
                         uint8_t                          firstBtn,
                         uint8_t                          nBtns,
                         uint16_t                         change,
                         uint16_t                         nDeviceLedFBs,
                         const xcb_xkb_action_t          *btnActions,
                         const xcb_xkb_device_led_info_t *leds)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_DEVICE_INFO,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_xkb_set_device_info_request_t xcb_out;
    unsigned int i;
    unsigned int xcb_tmp_len;
    char *xcb_tmp;

    xcb_out.deviceSpec = deviceSpec;
    xcb_out.firstBtn = firstBtn;
    xcb_out.nBtns = nBtns;
    xcb_out.change = change;
    xcb_out.nDeviceLedFBs = nDeviceLedFBs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_action_t btnActions */
    xcb_parts[4].iov_base = (char *) btnActions;
    xcb_parts[4].iov_len = nBtns * sizeof(xcb_xkb_action_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_xkb_device_led_info_t leds */
    xcb_parts[6].iov_base = (char *) leds;
    xcb_parts[6].iov_len = 0;
    xcb_tmp = (char *)leds;
    for(i=0; i<nDeviceLedFBs; i++) {
        xcb_tmp_len = xcb_xkb_device_led_info_sizeof(xcb_tmp);
        xcb_parts[6].iov_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_action_t *
xcb_xkb_set_device_info_btn_actions (const xcb_xkb_set_device_info_request_t *R)
{
    return (xcb_xkb_action_t *) (R + 1);
}

int
xcb_xkb_set_device_info_btn_actions_length (const xcb_xkb_set_device_info_request_t *R)
{
    return R->nBtns;
}

xcb_xkb_action_iterator_t
xcb_xkb_set_device_info_btn_actions_iterator (const xcb_xkb_set_device_info_request_t *R)
{
    xcb_xkb_action_iterator_t i;
    i.data = (xcb_xkb_action_t *) (R + 1);
    i.rem = R->nBtns;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_xkb_set_device_info_leds_length (const xcb_xkb_set_device_info_request_t *R)
{
    return R->nDeviceLedFBs;
}

xcb_xkb_device_led_info_iterator_t
xcb_xkb_set_device_info_leds_iterator (const xcb_xkb_set_device_info_request_t *R)
{
    xcb_xkb_device_led_info_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xkb_action_end(xcb_xkb_set_device_info_btn_actions_iterator(R));
    i.data = (xcb_xkb_device_led_info_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_device_led_info_t, prev.index));
    i.rem = R->nDeviceLedFBs;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_xkb_set_debugging_flags_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xkb_set_debugging_flags_request_t *_aux = (xcb_xkb_set_debugging_flags_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xkb_set_debugging_flags_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* message */
    xcb_block_len += _aux->msgLength * sizeof(xcb_xkb_string8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_xkb_string8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xkb_set_debugging_flags_cookie_t
xcb_xkb_set_debugging_flags (xcb_connection_t        *c,
                             uint16_t                 msgLength,
                             uint32_t                 affectFlags,
                             uint32_t                 flags,
                             uint32_t                 affectCtrls,
                             uint32_t                 ctrls,
                             const xcb_xkb_string8_t *message)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_DEBUGGING_FLAGS,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_xkb_set_debugging_flags_cookie_t xcb_ret;
    xcb_xkb_set_debugging_flags_request_t xcb_out;

    xcb_out.msgLength = msgLength;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.affectFlags = affectFlags;
    xcb_out.flags = flags;
    xcb_out.affectCtrls = affectCtrls;
    xcb_out.ctrls = ctrls;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_string8_t message */
    xcb_parts[4].iov_base = (char *) message;
    xcb_parts[4].iov_len = msgLength * sizeof(xcb_xkb_string8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_set_debugging_flags_cookie_t
xcb_xkb_set_debugging_flags_unchecked (xcb_connection_t        *c,
                                       uint16_t                 msgLength,
                                       uint32_t                 affectFlags,
                                       uint32_t                 flags,
                                       uint32_t                 affectCtrls,
                                       uint32_t                 ctrls,
                                       const xcb_xkb_string8_t *message)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xkb_id,
        .opcode = XCB_XKB_SET_DEBUGGING_FLAGS,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_xkb_set_debugging_flags_cookie_t xcb_ret;
    xcb_xkb_set_debugging_flags_request_t xcb_out;

    xcb_out.msgLength = msgLength;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.affectFlags = affectFlags;
    xcb_out.flags = flags;
    xcb_out.affectCtrls = affectCtrls;
    xcb_out.ctrls = ctrls;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_xkb_string8_t message */
    xcb_parts[4].iov_base = (char *) message;
    xcb_parts[4].iov_len = msgLength * sizeof(xcb_xkb_string8_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xkb_set_debugging_flags_reply_t *
xcb_xkb_set_debugging_flags_reply (xcb_connection_t                      *c,
                                   xcb_xkb_set_debugging_flags_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_xkb_set_debugging_flags_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

@


1.2
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d22 1
a22 1
xcb_xkb_device_spec_next (xcb_xkb_device_spec_iterator_t *i  /**< */)
d30 1
a30 1
xcb_xkb_device_spec_end (xcb_xkb_device_spec_iterator_t i  /**< */)
d40 1
a40 1
xcb_xkb_led_class_spec_next (xcb_xkb_led_class_spec_iterator_t *i  /**< */)
d48 1
a48 1
xcb_xkb_led_class_spec_end (xcb_xkb_led_class_spec_iterator_t i  /**< */)
d58 1
a58 1
xcb_xkb_bell_class_spec_next (xcb_xkb_bell_class_spec_iterator_t *i  /**< */)
d66 1
a66 1
xcb_xkb_bell_class_spec_end (xcb_xkb_bell_class_spec_iterator_t i  /**< */)
d76 1
a76 1
xcb_xkb_id_spec_next (xcb_xkb_id_spec_iterator_t *i  /**< */)
d84 1
a84 1
xcb_xkb_id_spec_end (xcb_xkb_id_spec_iterator_t i  /**< */)
d94 1
a94 1
xcb_xkb_indicator_map_next (xcb_xkb_indicator_map_iterator_t *i  /**< */)
d102 1
a102 1
xcb_xkb_indicator_map_end (xcb_xkb_indicator_map_iterator_t i  /**< */)
d112 1
a112 1
xcb_xkb_mod_def_next (xcb_xkb_mod_def_iterator_t *i  /**< */)
d120 1
a120 1
xcb_xkb_mod_def_end (xcb_xkb_mod_def_iterator_t i  /**< */)
d130 1
a130 1
xcb_xkb_key_name_next (xcb_xkb_key_name_iterator_t *i  /**< */)
d138 1
a138 1
xcb_xkb_key_name_end (xcb_xkb_key_name_iterator_t i  /**< */)
d148 1
a148 1
xcb_xkb_key_alias_next (xcb_xkb_key_alias_iterator_t *i  /**< */)
d156 1
a156 1
xcb_xkb_key_alias_end (xcb_xkb_key_alias_iterator_t i  /**< */)
d166 1
a166 1
xcb_xkb_counted_string_16_sizeof (const void  *_buffer  /**< */)
d209 1
a209 1
xcb_xkb_counted_string_16_string (const xcb_xkb_counted_string_16_t *R  /**< */)
d215 1
a215 1
xcb_xkb_counted_string_16_string_length (const xcb_xkb_counted_string_16_t *R  /**< */)
d221 1
a221 1
xcb_xkb_counted_string_16_string_end (const xcb_xkb_counted_string_16_t *R  /**< */)
d231 1
a231 1
xcb_xkb_counted_string_16_alignment_pad (const xcb_xkb_counted_string_16_t *R  /**< */)
d238 1
a238 1
xcb_xkb_counted_string_16_alignment_pad_length (const xcb_xkb_counted_string_16_t *R  /**< */)
d244 1
a244 1
xcb_xkb_counted_string_16_alignment_pad_end (const xcb_xkb_counted_string_16_t *R  /**< */)
d247 2
a248 2
    xcb_generic_iterator_t child = xcb_xkb_counted_string_16_string_end(R);
    i.data = ((char *) child.data) + ((((R->length + 5) & (~3)) - (R->length + 2)));
d255 1
a255 1
xcb_xkb_counted_string_16_next (xcb_xkb_counted_string_16_iterator_t *i  /**< */)
d266 1
a266 1
xcb_xkb_counted_string_16_end (xcb_xkb_counted_string_16_iterator_t i  /**< */)
d278 1
a278 1
xcb_xkb_kt_map_entry_next (xcb_xkb_kt_map_entry_iterator_t *i  /**< */)
d286 1
a286 1
xcb_xkb_kt_map_entry_end (xcb_xkb_kt_map_entry_iterator_t i  /**< */)
d296 1
a296 1
xcb_xkb_key_type_sizeof (const void  *_buffer  /**< */)
d339 1
a339 1
xcb_xkb_key_type_map (const xcb_xkb_key_type_t *R  /**< */)
d345 1
a345 1
xcb_xkb_key_type_map_length (const xcb_xkb_key_type_t *R  /**< */)
d351 1
a351 1
xcb_xkb_key_type_map_iterator (const xcb_xkb_key_type_t *R  /**< */)
d361 1
a361 1
xcb_xkb_key_type_preserve (const xcb_xkb_key_type_t *R  /**< */)
d368 1
a368 1
xcb_xkb_key_type_preserve_length (const xcb_xkb_key_type_t *R  /**< */)
d374 1
a374 1
xcb_xkb_key_type_preserve_iterator (const xcb_xkb_key_type_t *R  /**< */)
d385 1
a385 1
xcb_xkb_key_type_next (xcb_xkb_key_type_iterator_t *i  /**< */)
d396 1
a396 1
xcb_xkb_key_type_end (xcb_xkb_key_type_iterator_t i  /**< */)
d408 1
a408 1
xcb_xkb_key_sym_map_sizeof (const void  *_buffer  /**< */)
d439 1
a439 1
xcb_xkb_key_sym_map_syms (const xcb_xkb_key_sym_map_t *R  /**< */)
d445 1
a445 1
xcb_xkb_key_sym_map_syms_length (const xcb_xkb_key_sym_map_t *R  /**< */)
d451 1
a451 1
xcb_xkb_key_sym_map_syms_end (const xcb_xkb_key_sym_map_t *R  /**< */)
d461 1
a461 1
xcb_xkb_key_sym_map_next (xcb_xkb_key_sym_map_iterator_t *i  /**< */)
d472 1
a472 1
xcb_xkb_key_sym_map_end (xcb_xkb_key_sym_map_iterator_t i  /**< */)
d484 1
a484 1
xcb_xkb_common_behavior_next (xcb_xkb_common_behavior_iterator_t *i  /**< */)
d492 1
a492 1
xcb_xkb_common_behavior_end (xcb_xkb_common_behavior_iterator_t i  /**< */)
d502 1
a502 1
xcb_xkb_default_behavior_next (xcb_xkb_default_behavior_iterator_t *i  /**< */)
d510 1
a510 1
xcb_xkb_default_behavior_end (xcb_xkb_default_behavior_iterator_t i  /**< */)
d520 1
a520 1
xcb_xkb_lock_behavior_next (xcb_xkb_lock_behavior_iterator_t *i  /**< */)
d528 1
a528 1
xcb_xkb_lock_behavior_end (xcb_xkb_lock_behavior_iterator_t i  /**< */)
d538 1
a538 1
xcb_xkb_radio_group_behavior_next (xcb_xkb_radio_group_behavior_iterator_t *i  /**< */)
d546 1
a546 1
xcb_xkb_radio_group_behavior_end (xcb_xkb_radio_group_behavior_iterator_t i  /**< */)
d556 1
a556 1
xcb_xkb_overlay_behavior_next (xcb_xkb_overlay_behavior_iterator_t *i  /**< */)
d564 1
a564 1
xcb_xkb_overlay_behavior_end (xcb_xkb_overlay_behavior_iterator_t i  /**< */)
d574 1
a574 1
xcb_xkb_permament_lock_behavior_next (xcb_xkb_permament_lock_behavior_iterator_t *i  /**< */)
d582 1
a582 1
xcb_xkb_permament_lock_behavior_end (xcb_xkb_permament_lock_behavior_iterator_t i  /**< */)
d592 1
a592 1
xcb_xkb_permament_radio_group_behavior_next (xcb_xkb_permament_radio_group_behavior_iterator_t *i  /**< */)
d600 1
a600 1
xcb_xkb_permament_radio_group_behavior_end (xcb_xkb_permament_radio_group_behavior_iterator_t i  /**< */)
d610 1
a610 1
xcb_xkb_permament_overlay_behavior_next (xcb_xkb_permament_overlay_behavior_iterator_t *i  /**< */)
d618 1
a618 1
xcb_xkb_permament_overlay_behavior_end (xcb_xkb_permament_overlay_behavior_iterator_t i  /**< */)
d628 1
a628 1
xcb_xkb_behavior_next (xcb_xkb_behavior_iterator_t *i  /**< */)
d636 1
a636 1
xcb_xkb_behavior_end (xcb_xkb_behavior_iterator_t i  /**< */)
d646 1
a646 1
xcb_xkb_set_behavior_next (xcb_xkb_set_behavior_iterator_t *i  /**< */)
d654 1
a654 1
xcb_xkb_set_behavior_end (xcb_xkb_set_behavior_iterator_t i  /**< */)
d664 1
a664 1
xcb_xkb_set_explicit_next (xcb_xkb_set_explicit_iterator_t *i  /**< */)
d672 1
a672 1
xcb_xkb_set_explicit_end (xcb_xkb_set_explicit_iterator_t i  /**< */)
d682 1
a682 1
xcb_xkb_key_mod_map_next (xcb_xkb_key_mod_map_iterator_t *i  /**< */)
d690 1
a690 1
xcb_xkb_key_mod_map_end (xcb_xkb_key_mod_map_iterator_t i  /**< */)
d700 1
a700 1
xcb_xkb_key_v_mod_map_next (xcb_xkb_key_v_mod_map_iterator_t *i  /**< */)
d708 1
a708 1
xcb_xkb_key_v_mod_map_end (xcb_xkb_key_v_mod_map_iterator_t i  /**< */)
d718 1
a718 1
xcb_xkb_kt_set_map_entry_next (xcb_xkb_kt_set_map_entry_iterator_t *i  /**< */)
d726 1
a726 1
xcb_xkb_kt_set_map_entry_end (xcb_xkb_kt_set_map_entry_iterator_t i  /**< */)
d736 1
a736 1
xcb_xkb_set_key_type_sizeof (const void  *_buffer  /**< */)
d779 1
a779 1
xcb_xkb_set_key_type_entries (const xcb_xkb_set_key_type_t *R  /**< */)
d785 1
a785 1
xcb_xkb_set_key_type_entries_length (const xcb_xkb_set_key_type_t *R  /**< */)
d791 1
a791 1
xcb_xkb_set_key_type_entries_iterator (const xcb_xkb_set_key_type_t *R  /**< */)
d801 1
a801 1
xcb_xkb_set_key_type_preserve_entries (const xcb_xkb_set_key_type_t *R  /**< */)
d808 1
a808 1
xcb_xkb_set_key_type_preserve_entries_length (const xcb_xkb_set_key_type_t *R  /**< */)
d814 1
a814 1
xcb_xkb_set_key_type_preserve_entries_iterator (const xcb_xkb_set_key_type_t *R  /**< */)
d825 1
a825 1
xcb_xkb_set_key_type_next (xcb_xkb_set_key_type_iterator_t *i  /**< */)
d836 1
a836 1
xcb_xkb_set_key_type_end (xcb_xkb_set_key_type_iterator_t i  /**< */)
d848 1
a848 1
xcb_xkb_string8_next (xcb_xkb_string8_iterator_t *i  /**< */)
d856 1
a856 1
xcb_xkb_string8_end (xcb_xkb_string8_iterator_t i  /**< */)
d866 1
a866 1
xcb_xkb_outline_sizeof (const void  *_buffer  /**< */)
d897 1
a897 1
xcb_xkb_outline_points (const xcb_xkb_outline_t *R  /**< */)
d903 1
a903 1
xcb_xkb_outline_points_length (const xcb_xkb_outline_t *R  /**< */)
d909 1
a909 1
xcb_xkb_outline_points_iterator (const xcb_xkb_outline_t *R  /**< */)
d919 1
a919 1
xcb_xkb_outline_next (xcb_xkb_outline_iterator_t *i  /**< */)
d930 1
a930 1
xcb_xkb_outline_end (xcb_xkb_outline_iterator_t i  /**< */)
d942 1
a942 1
xcb_xkb_shape_sizeof (const void  *_buffer  /**< */)
d978 1
a978 1
xcb_xkb_shape_outlines_length (const xcb_xkb_shape_t *R  /**< */)
d984 1
a984 1
xcb_xkb_shape_outlines_iterator (const xcb_xkb_shape_t *R  /**< */)
d994 1
a994 1
xcb_xkb_shape_next (xcb_xkb_shape_iterator_t *i  /**< */)
d1005 1
a1005 1
xcb_xkb_shape_end (xcb_xkb_shape_iterator_t i  /**< */)
d1017 1
a1017 1
xcb_xkb_key_next (xcb_xkb_key_iterator_t *i  /**< */)
d1025 1
a1025 1
xcb_xkb_key_end (xcb_xkb_key_iterator_t i  /**< */)
d1035 1
a1035 1
xcb_xkb_overlay_key_next (xcb_xkb_overlay_key_iterator_t *i  /**< */)
d1043 1
a1043 1
xcb_xkb_overlay_key_end (xcb_xkb_overlay_key_iterator_t i  /**< */)
d1053 1
a1053 1
xcb_xkb_overlay_row_sizeof (const void  *_buffer  /**< */)
d1084 1
a1084 1
xcb_xkb_overlay_row_keys (const xcb_xkb_overlay_row_t *R  /**< */)
d1090 1
a1090 1
xcb_xkb_overlay_row_keys_length (const xcb_xkb_overlay_row_t *R  /**< */)
d1096 1
a1096 1
xcb_xkb_overlay_row_keys_iterator (const xcb_xkb_overlay_row_t *R  /**< */)
d1106 1
a1106 1
xcb_xkb_overlay_row_next (xcb_xkb_overlay_row_iterator_t *i  /**< */)
d1117 1
a1117 1
xcb_xkb_overlay_row_end (xcb_xkb_overlay_row_iterator_t i  /**< */)
d1129 1
a1129 1
xcb_xkb_overlay_sizeof (const void  *_buffer  /**< */)
d1165 1
a1165 1
xcb_xkb_overlay_rows_length (const xcb_xkb_overlay_t *R  /**< */)
d1171 1
a1171 1
xcb_xkb_overlay_rows_iterator (const xcb_xkb_overlay_t *R  /**< */)
d1181 1
a1181 1
xcb_xkb_overlay_next (xcb_xkb_overlay_iterator_t *i  /**< */)
d1192 1
a1192 1
xcb_xkb_overlay_end (xcb_xkb_overlay_iterator_t i  /**< */)
d1204 1
a1204 1
xcb_xkb_row_sizeof (const void  *_buffer  /**< */)
d1235 1
a1235 1
xcb_xkb_row_keys (const xcb_xkb_row_t *R  /**< */)
d1241 1
a1241 1
xcb_xkb_row_keys_length (const xcb_xkb_row_t *R  /**< */)
d1247 1
a1247 1
xcb_xkb_row_keys_iterator (const xcb_xkb_row_t *R  /**< */)
d1257 1
a1257 1
xcb_xkb_row_next (xcb_xkb_row_iterator_t *i  /**< */)
d1268 1
a1268 1
xcb_xkb_row_end (xcb_xkb_row_iterator_t i  /**< */)
d1280 1
a1280 1
xcb_xkb_listing_sizeof (const void  *_buffer  /**< */)
d1298 9
d1320 1
a1320 1
xcb_xkb_listing_string (const xcb_xkb_listing_t *R  /**< */)
d1326 1
a1326 1
xcb_xkb_listing_string_length (const xcb_xkb_listing_t *R  /**< */)
d1332 1
a1332 1
xcb_xkb_listing_string_end (const xcb_xkb_listing_t *R  /**< */)
d1342 1
a1342 1
xcb_xkb_listing_next (xcb_xkb_listing_iterator_t *i  /**< */)
d1353 1
a1353 1
xcb_xkb_listing_end (xcb_xkb_listing_iterator_t i  /**< */)
d1365 1
a1365 1
xcb_xkb_device_led_info_sizeof (const void  *_buffer  /**< */)
d1408 1
a1408 1
xcb_xkb_device_led_info_names (const xcb_xkb_device_led_info_t *R  /**< */)
d1414 1
a1414 1
xcb_xkb_device_led_info_names_length (const xcb_xkb_device_led_info_t *R  /**< */)
d1420 1
a1420 1
xcb_xkb_device_led_info_names_end (const xcb_xkb_device_led_info_t *R  /**< */)
d1430 1
a1430 1
xcb_xkb_device_led_info_maps (const xcb_xkb_device_led_info_t *R  /**< */)
d1437 1
a1437 1
xcb_xkb_device_led_info_maps_length (const xcb_xkb_device_led_info_t *R  /**< */)
d1443 1
a1443 1
xcb_xkb_device_led_info_maps_iterator (const xcb_xkb_device_led_info_t *R  /**< */)
d1454 1
a1454 1
xcb_xkb_device_led_info_next (xcb_xkb_device_led_info_iterator_t *i  /**< */)
d1465 1
a1465 1
xcb_xkb_device_led_info_end (xcb_xkb_device_led_info_iterator_t i  /**< */)
d1477 1
a1477 1
xcb_xkb_sa_no_action_next (xcb_xkb_sa_no_action_iterator_t *i  /**< */)
d1485 1
a1485 1
xcb_xkb_sa_no_action_end (xcb_xkb_sa_no_action_iterator_t i  /**< */)
d1495 1
a1495 1
xcb_xkb_sa_set_mods_next (xcb_xkb_sa_set_mods_iterator_t *i  /**< */)
d1503 1
a1503 1
xcb_xkb_sa_set_mods_end (xcb_xkb_sa_set_mods_iterator_t i  /**< */)
d1513 1
a1513 1
xcb_xkb_sa_latch_mods_next (xcb_xkb_sa_latch_mods_iterator_t *i  /**< */)
d1521 1
a1521 1
xcb_xkb_sa_latch_mods_end (xcb_xkb_sa_latch_mods_iterator_t i  /**< */)
d1531 1
a1531 1
xcb_xkb_sa_lock_mods_next (xcb_xkb_sa_lock_mods_iterator_t *i  /**< */)
d1539 1
a1539 1
xcb_xkb_sa_lock_mods_end (xcb_xkb_sa_lock_mods_iterator_t i  /**< */)
d1549 1
a1549 1
xcb_xkb_sa_set_group_next (xcb_xkb_sa_set_group_iterator_t *i  /**< */)
d1557 1
a1557 1
xcb_xkb_sa_set_group_end (xcb_xkb_sa_set_group_iterator_t i  /**< */)
d1567 1
a1567 1
xcb_xkb_sa_latch_group_next (xcb_xkb_sa_latch_group_iterator_t *i  /**< */)
d1575 1
a1575 1
xcb_xkb_sa_latch_group_end (xcb_xkb_sa_latch_group_iterator_t i  /**< */)
d1585 1
a1585 1
xcb_xkb_sa_lock_group_next (xcb_xkb_sa_lock_group_iterator_t *i  /**< */)
d1593 1
a1593 1
xcb_xkb_sa_lock_group_end (xcb_xkb_sa_lock_group_iterator_t i  /**< */)
d1603 1
a1603 1
xcb_xkb_sa_move_ptr_next (xcb_xkb_sa_move_ptr_iterator_t *i  /**< */)
d1611 1
a1611 1
xcb_xkb_sa_move_ptr_end (xcb_xkb_sa_move_ptr_iterator_t i  /**< */)
d1621 1
a1621 1
xcb_xkb_sa_ptr_btn_next (xcb_xkb_sa_ptr_btn_iterator_t *i  /**< */)
d1629 1
a1629 1
xcb_xkb_sa_ptr_btn_end (xcb_xkb_sa_ptr_btn_iterator_t i  /**< */)
d1639 1
a1639 1
xcb_xkb_sa_lock_ptr_btn_next (xcb_xkb_sa_lock_ptr_btn_iterator_t *i  /**< */)
d1647 1
a1647 1
xcb_xkb_sa_lock_ptr_btn_end (xcb_xkb_sa_lock_ptr_btn_iterator_t i  /**< */)
d1657 1
a1657 1
xcb_xkb_sa_set_ptr_dflt_next (xcb_xkb_sa_set_ptr_dflt_iterator_t *i  /**< */)
d1665 1
a1665 1
xcb_xkb_sa_set_ptr_dflt_end (xcb_xkb_sa_set_ptr_dflt_iterator_t i  /**< */)
d1675 1
a1675 1
xcb_xkb_sa_iso_lock_next (xcb_xkb_sa_iso_lock_iterator_t *i  /**< */)
d1683 1
a1683 1
xcb_xkb_sa_iso_lock_end (xcb_xkb_sa_iso_lock_iterator_t i  /**< */)
d1693 1
a1693 1
xcb_xkb_sa_terminate_next (xcb_xkb_sa_terminate_iterator_t *i  /**< */)
d1701 1
a1701 1
xcb_xkb_sa_terminate_end (xcb_xkb_sa_terminate_iterator_t i  /**< */)
d1711 1
a1711 1
xcb_xkb_sa_switch_screen_next (xcb_xkb_sa_switch_screen_iterator_t *i  /**< */)
d1719 1
a1719 1
xcb_xkb_sa_switch_screen_end (xcb_xkb_sa_switch_screen_iterator_t i  /**< */)
d1729 1
a1729 1
xcb_xkb_sa_set_controls_next (xcb_xkb_sa_set_controls_iterator_t *i  /**< */)
d1737 1
a1737 1
xcb_xkb_sa_set_controls_end (xcb_xkb_sa_set_controls_iterator_t i  /**< */)
d1747 1
a1747 1
xcb_xkb_sa_lock_controls_next (xcb_xkb_sa_lock_controls_iterator_t *i  /**< */)
d1755 1
a1755 1
xcb_xkb_sa_lock_controls_end (xcb_xkb_sa_lock_controls_iterator_t i  /**< */)
d1765 1
a1765 1
xcb_xkb_sa_action_message_next (xcb_xkb_sa_action_message_iterator_t *i  /**< */)
d1773 1
a1773 1
xcb_xkb_sa_action_message_end (xcb_xkb_sa_action_message_iterator_t i  /**< */)
d1783 1
a1783 1
xcb_xkb_sa_redirect_key_next (xcb_xkb_sa_redirect_key_iterator_t *i  /**< */)
d1791 1
a1791 1
xcb_xkb_sa_redirect_key_end (xcb_xkb_sa_redirect_key_iterator_t i  /**< */)
d1801 1
a1801 1
xcb_xkb_sa_device_btn_next (xcb_xkb_sa_device_btn_iterator_t *i  /**< */)
d1809 1
a1809 1
xcb_xkb_sa_device_btn_end (xcb_xkb_sa_device_btn_iterator_t i  /**< */)
d1819 1
a1819 1
xcb_xkb_sa_lock_device_btn_next (xcb_xkb_sa_lock_device_btn_iterator_t *i  /**< */)
d1827 1
a1827 1
xcb_xkb_sa_lock_device_btn_end (xcb_xkb_sa_lock_device_btn_iterator_t i  /**< */)
d1837 1
a1837 1
xcb_xkb_sa_device_valuator_next (xcb_xkb_sa_device_valuator_iterator_t *i  /**< */)
d1845 1
a1845 1
xcb_xkb_sa_device_valuator_end (xcb_xkb_sa_device_valuator_iterator_t i  /**< */)
d1855 1
a1855 1
xcb_xkb_si_action_next (xcb_xkb_si_action_iterator_t *i  /**< */)
d1863 1
a1863 1
xcb_xkb_si_action_end (xcb_xkb_si_action_iterator_t i  /**< */)
d1873 1
a1873 1
xcb_xkb_sym_interpret_next (xcb_xkb_sym_interpret_iterator_t *i  /**< */)
d1881 1
a1881 1
xcb_xkb_sym_interpret_end (xcb_xkb_sym_interpret_iterator_t i  /**< */)
d1891 1
a1891 1
xcb_xkb_action_next (xcb_xkb_action_iterator_t *i  /**< */)
d1899 1
a1899 1
xcb_xkb_action_end (xcb_xkb_action_iterator_t i  /**< */)
d1909 3
a1911 3
xcb_xkb_use_extension (xcb_connection_t *c  /**< */,
                       uint16_t          wantedMajor  /**< */,
                       uint16_t          wantedMinor  /**< */)
d1914 4
a1917 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_USE_EXTENSION,
        /* isvoid */ 0
d1937 3
a1939 3
xcb_xkb_use_extension_unchecked (xcb_connection_t *c  /**< */,
                                 uint16_t          wantedMajor  /**< */,
                                 uint16_t          wantedMinor  /**< */)
d1942 4
a1945 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_USE_EXTENSION,
        /* isvoid */ 0
d1965 1
a1965 1
xcb_xkb_use_extension_reply (xcb_connection_t                *c  /**< */,
d1967 1
a1967 1
                             xcb_generic_error_t            **e  /**< */)
d1973 5
a1977 5
xcb_xkb_select_events_details_serialize (void                                  **_buffer  /**< */,
                                         uint16_t                                affectWhich  /**< */,
                                         uint16_t                                clear  /**< */,
                                         uint16_t                                selectAll  /**< */,
                                         const xcb_xkb_select_events_details_t  *_aux  /**< */)
d1982 1
d2147 1
a2147 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d2156 1
d2176 5
a2180 5
xcb_xkb_select_events_details_unpack (const void                       *_buffer  /**< */,
                                      uint16_t                          affectWhich  /**< */,
                                      uint16_t                          clear  /**< */,
                                      uint16_t                          selectAll  /**< */,
                                      xcb_xkb_select_events_details_t  *_aux  /**< */)
d2187 1
d2323 1
a2323 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d2330 1
d2336 4
a2339 4
xcb_xkb_select_events_details_sizeof (const void  *_buffer  /**< */,
                                      uint16_t     affectWhich  /**< */,
                                      uint16_t     clear  /**< */,
                                      uint16_t     selectAll  /**< */)
d2345 31
d2377 8
a2384 8
xcb_xkb_select_events_checked (xcb_connection_t      *c  /**< */,
                               xcb_xkb_device_spec_t  deviceSpec  /**< */,
                               uint16_t               affectWhich  /**< */,
                               uint16_t               clear  /**< */,
                               uint16_t               selectAll  /**< */,
                               uint16_t               affectMap  /**< */,
                               uint16_t               map  /**< */,
                               const void            *details  /**< */)
d2387 4
a2390 4
        /* count */ 3,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SELECT_EVENTS,
        /* isvoid */ 1
d2418 8
a2425 8
xcb_xkb_select_events (xcb_connection_t      *c  /**< */,
                       xcb_xkb_device_spec_t  deviceSpec  /**< */,
                       uint16_t               affectWhich  /**< */,
                       uint16_t               clear  /**< */,
                       uint16_t               selectAll  /**< */,
                       uint16_t               affectMap  /**< */,
                       uint16_t               map  /**< */,
                       const void            *details  /**< */)
d2428 4
a2431 4
        /* count */ 3,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SELECT_EVENTS,
        /* isvoid */ 1
d2459 8
a2466 8
xcb_xkb_select_events_aux_checked (xcb_connection_t                      *c  /**< */,
                                   xcb_xkb_device_spec_t                  deviceSpec  /**< */,
                                   uint16_t                               affectWhich  /**< */,
                                   uint16_t                               clear  /**< */,
                                   uint16_t                               selectAll  /**< */,
                                   uint16_t                               affectMap  /**< */,
                                   uint16_t                               map  /**< */,
                                   const xcb_xkb_select_events_details_t *details  /**< */)
d2469 4
a2472 4
        /* count */ 3,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SELECT_EVENTS,
        /* isvoid */ 1
d2502 8
a2509 8
xcb_xkb_select_events_aux (xcb_connection_t                      *c  /**< */,
                           xcb_xkb_device_spec_t                  deviceSpec  /**< */,
                           uint16_t                               affectWhich  /**< */,
                           uint16_t                               clear  /**< */,
                           uint16_t                               selectAll  /**< */,
                           uint16_t                               affectMap  /**< */,
                           uint16_t                               map  /**< */,
                           const xcb_xkb_select_events_details_t *details  /**< */)
d2512 4
a2515 4
        /* count */ 3,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SELECT_EVENTS,
        /* isvoid */ 1
d2544 6
d2551 17
a2567 17
xcb_xkb_bell_checked (xcb_connection_t          *c  /**< */,
                      xcb_xkb_device_spec_t      deviceSpec  /**< */,
                      xcb_xkb_bell_class_spec_t  bellClass  /**< */,
                      xcb_xkb_id_spec_t          bellID  /**< */,
                      int8_t                     percent  /**< */,
                      uint8_t                    forceSound  /**< */,
                      uint8_t                    eventOnly  /**< */,
                      int16_t                    pitch  /**< */,
                      int16_t                    duration  /**< */,
                      xcb_atom_t                 name  /**< */,
                      xcb_window_t               window  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_BELL,
        /* isvoid */ 1
d2597 17
a2613 17
xcb_xkb_bell (xcb_connection_t          *c  /**< */,
              xcb_xkb_device_spec_t      deviceSpec  /**< */,
              xcb_xkb_bell_class_spec_t  bellClass  /**< */,
              xcb_xkb_id_spec_t          bellID  /**< */,
              int8_t                     percent  /**< */,
              uint8_t                    forceSound  /**< */,
              uint8_t                    eventOnly  /**< */,
              int16_t                    pitch  /**< */,
              int16_t                    duration  /**< */,
              xcb_atom_t                 name  /**< */,
              xcb_window_t               window  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_BELL,
        /* isvoid */ 1
d2643 2
a2644 2
xcb_xkb_get_state (xcb_connection_t      *c  /**< */,
                   xcb_xkb_device_spec_t  deviceSpec  /**< */)
d2647 4
a2650 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_STATE,
        /* isvoid */ 0
d2670 2
a2671 2
xcb_xkb_get_state_unchecked (xcb_connection_t      *c  /**< */,
                             xcb_xkb_device_spec_t  deviceSpec  /**< */)
d2674 4
a2677 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_STATE,
        /* isvoid */ 0
d2697 1
a2697 1
xcb_xkb_get_state_reply (xcb_connection_t            *c  /**< */,
d2699 1
a2699 1
                         xcb_generic_error_t        **e  /**< */)
d2705 9
a2713 9
xcb_xkb_latch_lock_state_checked (xcb_connection_t      *c  /**< */,
                                  xcb_xkb_device_spec_t  deviceSpec  /**< */,
                                  uint8_t                affectModLocks  /**< */,
                                  uint8_t                modLocks  /**< */,
                                  uint8_t                lockGroup  /**< */,
                                  uint8_t                groupLock  /**< */,
                                  uint8_t                affectModLatches  /**< */,
                                  uint8_t                latchGroup  /**< */,
                                  uint16_t               groupLatch  /**< */)
d2716 4
a2719 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_LATCH_LOCK_STATE,
        /* isvoid */ 1
d2747 9
a2755 9
xcb_xkb_latch_lock_state (xcb_connection_t      *c  /**< */,
                          xcb_xkb_device_spec_t  deviceSpec  /**< */,
                          uint8_t                affectModLocks  /**< */,
                          uint8_t                modLocks  /**< */,
                          uint8_t                lockGroup  /**< */,
                          uint8_t                groupLock  /**< */,
                          uint8_t                affectModLatches  /**< */,
                          uint8_t                latchGroup  /**< */,
                          uint16_t               groupLatch  /**< */)
d2758 4
a2761 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_LATCH_LOCK_STATE,
        /* isvoid */ 1
d2789 2
a2790 2
xcb_xkb_get_controls (xcb_connection_t      *c  /**< */,
                      xcb_xkb_device_spec_t  deviceSpec  /**< */)
d2793 4
a2796 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_CONTROLS,
        /* isvoid */ 0
d2816 2
a2817 2
xcb_xkb_get_controls_unchecked (xcb_connection_t      *c  /**< */,
                                xcb_xkb_device_spec_t  deviceSpec  /**< */)
d2820 4
a2823 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_CONTROLS,
        /* isvoid */ 0
d2843 1
a2843 1
xcb_xkb_get_controls_reply (xcb_connection_t               *c  /**< */,
d2845 1
a2845 1
                            xcb_generic_error_t           **e  /**< */)
d2851 37
a2887 37
xcb_xkb_set_controls_checked (xcb_connection_t      *c  /**< */,
                              xcb_xkb_device_spec_t  deviceSpec  /**< */,
                              uint8_t                affectInternalRealMods  /**< */,
                              uint8_t                internalRealMods  /**< */,
                              uint8_t                affectIgnoreLockRealMods  /**< */,
                              uint8_t                ignoreLockRealMods  /**< */,
                              uint16_t               affectInternalVirtualMods  /**< */,
                              uint16_t               internalVirtualMods  /**< */,
                              uint16_t               affectIgnoreLockVirtualMods  /**< */,
                              uint16_t               ignoreLockVirtualMods  /**< */,
                              uint8_t                mouseKeysDfltBtn  /**< */,
                              uint8_t                groupsWrap  /**< */,
                              uint16_t               accessXOptions  /**< */,
                              uint32_t               affectEnabledControls  /**< */,
                              uint32_t               enabledControls  /**< */,
                              uint32_t               changeControls  /**< */,
                              uint16_t               repeatDelay  /**< */,
                              uint16_t               repeatInterval  /**< */,
                              uint16_t               slowKeysDelay  /**< */,
                              uint16_t               debounceDelay  /**< */,
                              uint16_t               mouseKeysDelay  /**< */,
                              uint16_t               mouseKeysInterval  /**< */,
                              uint16_t               mouseKeysTimeToMax  /**< */,
                              uint16_t               mouseKeysMaxSpeed  /**< */,
                              int16_t                mouseKeysCurve  /**< */,
                              uint16_t               accessXTimeout  /**< */,
                              uint32_t               accessXTimeoutMask  /**< */,
                              uint32_t               accessXTimeoutValues  /**< */,
                              uint16_t               accessXTimeoutOptionsMask  /**< */,
                              uint16_t               accessXTimeoutOptionsValues  /**< */,
                              const uint8_t         *perKeyRepeat  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_CONTROLS,
        /* isvoid */ 1
d2936 37
a2972 37
xcb_xkb_set_controls (xcb_connection_t      *c  /**< */,
                      xcb_xkb_device_spec_t  deviceSpec  /**< */,
                      uint8_t                affectInternalRealMods  /**< */,
                      uint8_t                internalRealMods  /**< */,
                      uint8_t                affectIgnoreLockRealMods  /**< */,
                      uint8_t                ignoreLockRealMods  /**< */,
                      uint16_t               affectInternalVirtualMods  /**< */,
                      uint16_t               internalVirtualMods  /**< */,
                      uint16_t               affectIgnoreLockVirtualMods  /**< */,
                      uint16_t               ignoreLockVirtualMods  /**< */,
                      uint8_t                mouseKeysDfltBtn  /**< */,
                      uint8_t                groupsWrap  /**< */,
                      uint16_t               accessXOptions  /**< */,
                      uint32_t               affectEnabledControls  /**< */,
                      uint32_t               enabledControls  /**< */,
                      uint32_t               changeControls  /**< */,
                      uint16_t               repeatDelay  /**< */,
                      uint16_t               repeatInterval  /**< */,
                      uint16_t               slowKeysDelay  /**< */,
                      uint16_t               debounceDelay  /**< */,
                      uint16_t               mouseKeysDelay  /**< */,
                      uint16_t               mouseKeysInterval  /**< */,
                      uint16_t               mouseKeysTimeToMax  /**< */,
                      uint16_t               mouseKeysMaxSpeed  /**< */,
                      int16_t                mouseKeysCurve  /**< */,
                      uint16_t               accessXTimeout  /**< */,
                      uint32_t               accessXTimeoutMask  /**< */,
                      uint32_t               accessXTimeoutValues  /**< */,
                      uint16_t               accessXTimeoutOptionsMask  /**< */,
                      uint16_t               accessXTimeoutOptionsValues  /**< */,
                      const uint8_t         *perKeyRepeat  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_CONTROLS,
        /* isvoid */ 1
d3021 2
a3022 2
xcb_xkb_get_map_map_types_rtrn_length (const xcb_xkb_get_map_reply_t *R  /**< */,
                                       const xcb_xkb_get_map_map_t *S  /**< */)
d3028 2
a3029 2
xcb_xkb_get_map_map_types_rtrn_iterator (const xcb_xkb_get_map_reply_t *R  /**< */,
                                         const xcb_xkb_get_map_map_t *S  /**< */)
d3032 1
a3032 1
    i.data = /* map */ S->types_rtrn;
d3039 2
a3040 2
xcb_xkb_get_map_map_syms_rtrn_length (const xcb_xkb_get_map_reply_t *R  /**< */,
                                      const xcb_xkb_get_map_map_t *S  /**< */)
d3046 2
a3047 2
xcb_xkb_get_map_map_syms_rtrn_iterator (const xcb_xkb_get_map_reply_t *R  /**< */,
                                        const xcb_xkb_get_map_map_t *S  /**< */)
d3050 1
a3050 1
    i.data = /* map */ S->syms_rtrn;
d3057 1
a3057 1
xcb_xkb_get_map_map_acts_rtrn_count (const xcb_xkb_get_map_map_t *S  /**< */)
d3059 1
a3059 1
    return /* map */ S->acts_rtrn_count;
d3063 2
a3064 2
xcb_xkb_get_map_map_acts_rtrn_count_length (const xcb_xkb_get_map_reply_t *R  /**< */,
                                            const xcb_xkb_get_map_map_t *S  /**< */)
d3070 2
a3071 2
xcb_xkb_get_map_map_acts_rtrn_count_end (const xcb_xkb_get_map_reply_t *R  /**< */,
                                         const xcb_xkb_get_map_map_t *S  /**< */)
d3074 1
a3074 1
    i.data = /* map */ S->acts_rtrn_count + R->nKeyActions;
d3081 1
a3081 1
xcb_xkb_get_map_map_acts_rtrn_acts (const xcb_xkb_get_map_map_t *S  /**< */)
d3083 1
a3083 1
    return /* map */ S->acts_rtrn_acts;
d3087 2
a3088 2
xcb_xkb_get_map_map_acts_rtrn_acts_length (const xcb_xkb_get_map_reply_t *R  /**< */,
                                           const xcb_xkb_get_map_map_t *S  /**< */)
d3094 2
a3095 2
xcb_xkb_get_map_map_acts_rtrn_acts_iterator (const xcb_xkb_get_map_reply_t *R  /**< */,
                                             const xcb_xkb_get_map_map_t *S  /**< */)
d3098 1
a3098 1
    i.data = /* map */ S->acts_rtrn_acts;
d3105 1
a3105 1
xcb_xkb_get_map_map_behaviors_rtrn (const xcb_xkb_get_map_map_t *S  /**< */)
d3107 1
a3107 1
    return /* map */ S->behaviors_rtrn;
d3111 2
a3112 2
xcb_xkb_get_map_map_behaviors_rtrn_length (const xcb_xkb_get_map_reply_t *R  /**< */,
                                           const xcb_xkb_get_map_map_t *S  /**< */)
d3118 2
a3119 2
xcb_xkb_get_map_map_behaviors_rtrn_iterator (const xcb_xkb_get_map_reply_t *R  /**< */,
                                             const xcb_xkb_get_map_map_t *S  /**< */)
d3122 1
a3122 1
    i.data = /* map */ S->behaviors_rtrn;
d3129 1
a3129 1
xcb_xkb_get_map_map_vmods_rtrn (const xcb_xkb_get_map_map_t *S  /**< */)
d3131 1
a3131 1
    return /* map */ S->vmods_rtrn;
d3135 2
a3136 2
xcb_xkb_get_map_map_vmods_rtrn_length (const xcb_xkb_get_map_reply_t *R  /**< */,
                                       const xcb_xkb_get_map_map_t *S  /**< */)
d3142 2
a3143 2
xcb_xkb_get_map_map_vmods_rtrn_end (const xcb_xkb_get_map_reply_t *R  /**< */,
                                    const xcb_xkb_get_map_map_t *S  /**< */)
d3146 1
a3146 1
    i.data = /* map */ S->vmods_rtrn + xcb_popcount(R->virtualMods);
d3153 1
a3153 1
xcb_xkb_get_map_map_explicit_rtrn (const xcb_xkb_get_map_map_t *S  /**< */)
d3155 1
a3155 1
    return /* map */ S->explicit_rtrn;
d3159 2
a3160 2
xcb_xkb_get_map_map_explicit_rtrn_length (const xcb_xkb_get_map_reply_t *R  /**< */,
                                          const xcb_xkb_get_map_map_t *S  /**< */)
d3166 2
a3167 2
xcb_xkb_get_map_map_explicit_rtrn_iterator (const xcb_xkb_get_map_reply_t *R  /**< */,
                                            const xcb_xkb_get_map_map_t *S  /**< */)
d3170 1
a3170 1
    i.data = /* map */ S->explicit_rtrn;
d3177 1
a3177 1
xcb_xkb_get_map_map_modmap_rtrn (const xcb_xkb_get_map_map_t *S  /**< */)
d3179 1
a3179 1
    return /* map */ S->modmap_rtrn;
d3183 2
a3184 2
xcb_xkb_get_map_map_modmap_rtrn_length (const xcb_xkb_get_map_reply_t *R  /**< */,
                                        const xcb_xkb_get_map_map_t *S  /**< */)
d3190 2
a3191 2
xcb_xkb_get_map_map_modmap_rtrn_iterator (const xcb_xkb_get_map_reply_t *R  /**< */,
                                          const xcb_xkb_get_map_map_t *S  /**< */)
d3194 1
a3194 1
    i.data = /* map */ S->modmap_rtrn;
d3201 1
a3201 1
xcb_xkb_get_map_map_vmodmap_rtrn (const xcb_xkb_get_map_map_t *S  /**< */)
d3203 1
a3203 1
    return /* map */ S->vmodmap_rtrn;
d3207 2
a3208 2
xcb_xkb_get_map_map_vmodmap_rtrn_length (const xcb_xkb_get_map_reply_t *R  /**< */,
                                         const xcb_xkb_get_map_map_t *S  /**< */)
d3214 2
a3215 2
xcb_xkb_get_map_map_vmodmap_rtrn_iterator (const xcb_xkb_get_map_reply_t *R  /**< */,
                                           const xcb_xkb_get_map_map_t *S  /**< */)
d3218 1
a3218 1
    i.data = /* map */ S->vmodmap_rtrn;
d3225 12
a3236 12
xcb_xkb_get_map_map_serialize (void                        **_buffer  /**< */,
                               uint8_t                       nTypes  /**< */,
                               uint8_t                       nKeySyms  /**< */,
                               uint8_t                       nKeyActions  /**< */,
                               uint16_t                      totalActions  /**< */,
                               uint8_t                       totalKeyBehaviors  /**< */,
                               uint16_t                      virtualMods  /**< */,
                               uint8_t                       totalKeyExplicit  /**< */,
                               uint8_t                       totalModMapKeys  /**< */,
                               uint8_t                       totalVModMapKeys  /**< */,
                               uint16_t                      present  /**< */,
                               const xcb_xkb_get_map_map_t  *_aux  /**< */)
d3241 1
d3253 1
a3253 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3262 1
d3277 1
a3277 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3286 1
d3301 1
a3301 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3310 1
d3319 1
a3319 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3328 1
d3330 1
a3330 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3339 1
d3349 1
a3349 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3358 1
d3368 1
a3368 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3377 1
d3386 1
a3386 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3395 1
d3399 1
a3399 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3408 1
d3417 1
a3417 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3426 1
d3430 1
a3430 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3439 1
d3448 1
a3448 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3457 1
d3461 1
a3461 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3470 1
d3479 1
a3479 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3488 1
d3508 12
a3519 12
xcb_xkb_get_map_map_unpack (const void             *_buffer  /**< */,
                            uint8_t                 nTypes  /**< */,
                            uint8_t                 nKeySyms  /**< */,
                            uint8_t                 nKeyActions  /**< */,
                            uint16_t                totalActions  /**< */,
                            uint8_t                 totalKeyBehaviors  /**< */,
                            uint16_t                virtualMods  /**< */,
                            uint8_t                 totalKeyExplicit  /**< */,
                            uint8_t                 totalModMapKeys  /**< */,
                            uint8_t                 totalVModMapKeys  /**< */,
                            uint16_t                present  /**< */,
                            xcb_xkb_get_map_map_t  *_aux  /**< */)
d3526 1
d3533 1
a3533 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3540 1
d3552 1
a3552 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3559 1
d3571 1
a3571 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3578 1
d3586 1
a3586 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3593 1
d3595 1
a3595 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3602 1
d3611 1
a3611 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3618 1
d3627 1
a3627 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3634 1
d3642 1
a3642 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3649 1
d3653 1
a3653 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3660 1
d3668 1
a3668 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3675 1
d3679 1
a3679 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3686 1
d3694 1
a3694 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3701 1
d3705 1
a3705 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3712 1
d3720 1
a3720 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d3727 1
d3733 11
a3743 11
xcb_xkb_get_map_map_sizeof (const void  *_buffer  /**< */,
                            uint8_t      nTypes  /**< */,
                            uint8_t      nKeySyms  /**< */,
                            uint8_t      nKeyActions  /**< */,
                            uint16_t     totalActions  /**< */,
                            uint8_t      totalKeyBehaviors  /**< */,
                            uint16_t     virtualMods  /**< */,
                            uint8_t      totalKeyExplicit  /**< */,
                            uint8_t      totalModMapKeys  /**< */,
                            uint8_t      totalVModMapKeys  /**< */,
                            uint16_t     present  /**< */)
d3749 31
d3781 25
a3805 25
xcb_xkb_get_map (xcb_connection_t      *c  /**< */,
                 xcb_xkb_device_spec_t  deviceSpec  /**< */,
                 uint16_t               full  /**< */,
                 uint16_t               partial  /**< */,
                 uint8_t                firstType  /**< */,
                 uint8_t                nTypes  /**< */,
                 xcb_keycode_t          firstKeySym  /**< */,
                 uint8_t                nKeySyms  /**< */,
                 xcb_keycode_t          firstKeyAction  /**< */,
                 uint8_t                nKeyActions  /**< */,
                 xcb_keycode_t          firstKeyBehavior  /**< */,
                 uint8_t                nKeyBehaviors  /**< */,
                 uint16_t               virtualMods  /**< */,
                 xcb_keycode_t          firstKeyExplicit  /**< */,
                 uint8_t                nKeyExplicit  /**< */,
                 xcb_keycode_t          firstModMapKey  /**< */,
                 uint8_t                nModMapKeys  /**< */,
                 xcb_keycode_t          firstVModMapKey  /**< */,
                 uint8_t                nVModMapKeys  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_MAP,
        /* isvoid */ 0
d3842 25
a3866 25
xcb_xkb_get_map_unchecked (xcb_connection_t      *c  /**< */,
                           xcb_xkb_device_spec_t  deviceSpec  /**< */,
                           uint16_t               full  /**< */,
                           uint16_t               partial  /**< */,
                           uint8_t                firstType  /**< */,
                           uint8_t                nTypes  /**< */,
                           xcb_keycode_t          firstKeySym  /**< */,
                           uint8_t                nKeySyms  /**< */,
                           xcb_keycode_t          firstKeyAction  /**< */,
                           uint8_t                nKeyActions  /**< */,
                           xcb_keycode_t          firstKeyBehavior  /**< */,
                           uint8_t                nKeyBehaviors  /**< */,
                           uint16_t               virtualMods  /**< */,
                           xcb_keycode_t          firstKeyExplicit  /**< */,
                           uint8_t                nKeyExplicit  /**< */,
                           xcb_keycode_t          firstModMapKey  /**< */,
                           uint8_t                nModMapKeys  /**< */,
                           xcb_keycode_t          firstVModMapKey  /**< */,
                           uint8_t                nVModMapKeys  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_MAP,
        /* isvoid */ 0
d3903 1
a3903 1
xcb_xkb_get_map_map (const xcb_xkb_get_map_reply_t *R  /**< */)
d3909 1
a3909 1
xcb_xkb_get_map_reply (xcb_connection_t          *c  /**< */,
d3911 1
a3911 1
                       xcb_generic_error_t      **e  /**< */)
d3917 2
a3918 2
xcb_xkb_set_map_values_types_length (const xcb_xkb_set_map_request_t *R  /**< */,
                                     const xcb_xkb_set_map_values_t *S  /**< */)
d3924 2
a3925 2
xcb_xkb_set_map_values_types_iterator (const xcb_xkb_set_map_request_t *R  /**< */,
                                       const xcb_xkb_set_map_values_t *S  /**< */)
d3928 1
a3928 1
    i.data = /* values */ S->types;
d3935 2
a3936 2
xcb_xkb_set_map_values_syms_length (const xcb_xkb_set_map_request_t *R  /**< */,
                                    const xcb_xkb_set_map_values_t *S  /**< */)
d3942 2
a3943 2
xcb_xkb_set_map_values_syms_iterator (const xcb_xkb_set_map_request_t *R  /**< */,
                                      const xcb_xkb_set_map_values_t *S  /**< */)
d3946 1
a3946 1
    i.data = /* values */ S->syms;
d3953 1
a3953 1
xcb_xkb_set_map_values_actions_count (const xcb_xkb_set_map_values_t *S  /**< */)
d3955 1
a3955 1
    return /* values */ S->actionsCount;
d3959 2
a3960 2
xcb_xkb_set_map_values_actions_count_length (const xcb_xkb_set_map_request_t *R  /**< */,
                                             const xcb_xkb_set_map_values_t *S  /**< */)
d3966 2
a3967 2
xcb_xkb_set_map_values_actions_count_end (const xcb_xkb_set_map_request_t *R  /**< */,
                                          const xcb_xkb_set_map_values_t *S  /**< */)
d3970 1
a3970 1
    i.data = /* values */ S->actionsCount + R->nKeyActions;
d3977 1
a3977 1
xcb_xkb_set_map_values_actions (const xcb_xkb_set_map_values_t *S  /**< */)
d3979 1
a3979 1
    return /* values */ S->actions;
d3983 2
a3984 2
xcb_xkb_set_map_values_actions_length (const xcb_xkb_set_map_request_t *R  /**< */,
                                       const xcb_xkb_set_map_values_t *S  /**< */)
d3990 2
a3991 2
xcb_xkb_set_map_values_actions_iterator (const xcb_xkb_set_map_request_t *R  /**< */,
                                         const xcb_xkb_set_map_values_t *S  /**< */)
d3994 1
a3994 1
    i.data = /* values */ S->actions;
d4001 1
a4001 1
xcb_xkb_set_map_values_behaviors (const xcb_xkb_set_map_values_t *S  /**< */)
d4003 1
a4003 1
    return /* values */ S->behaviors;
d4007 2
a4008 2
xcb_xkb_set_map_values_behaviors_length (const xcb_xkb_set_map_request_t *R  /**< */,
                                         const xcb_xkb_set_map_values_t *S  /**< */)
d4014 2
a4015 2
xcb_xkb_set_map_values_behaviors_iterator (const xcb_xkb_set_map_request_t *R  /**< */,
                                           const xcb_xkb_set_map_values_t *S  /**< */)
d4018 1
a4018 1
    i.data = /* values */ S->behaviors;
d4025 1
a4025 1
xcb_xkb_set_map_values_vmods (const xcb_xkb_set_map_values_t *S  /**< */)
d4027 1
a4027 1
    return /* values */ S->vmods;
d4031 2
a4032 2
xcb_xkb_set_map_values_vmods_length (const xcb_xkb_set_map_request_t *R  /**< */,
                                     const xcb_xkb_set_map_values_t *S  /**< */)
d4038 2
a4039 2
xcb_xkb_set_map_values_vmods_end (const xcb_xkb_set_map_request_t *R  /**< */,
                                  const xcb_xkb_set_map_values_t *S  /**< */)
d4042 1
a4042 1
    i.data = /* values */ S->vmods + xcb_popcount(R->virtualMods);
d4049 1
a4049 1
xcb_xkb_set_map_values_explicit (const xcb_xkb_set_map_values_t *S  /**< */)
d4051 1
a4051 1
    return /* values */ S->explicit;
d4055 2
a4056 2
xcb_xkb_set_map_values_explicit_length (const xcb_xkb_set_map_request_t *R  /**< */,
                                        const xcb_xkb_set_map_values_t *S  /**< */)
d4062 2
a4063 2
xcb_xkb_set_map_values_explicit_iterator (const xcb_xkb_set_map_request_t *R  /**< */,
                                          const xcb_xkb_set_map_values_t *S  /**< */)
d4066 1
a4066 1
    i.data = /* values */ S->explicit;
d4073 1
a4073 1
xcb_xkb_set_map_values_modmap (const xcb_xkb_set_map_values_t *S  /**< */)
d4075 1
a4075 1
    return /* values */ S->modmap;
d4079 2
a4080 2
xcb_xkb_set_map_values_modmap_length (const xcb_xkb_set_map_request_t *R  /**< */,
                                      const xcb_xkb_set_map_values_t *S  /**< */)
d4086 2
a4087 2
xcb_xkb_set_map_values_modmap_iterator (const xcb_xkb_set_map_request_t *R  /**< */,
                                        const xcb_xkb_set_map_values_t *S  /**< */)
d4090 1
a4090 1
    i.data = /* values */ S->modmap;
d4097 1
a4097 1
xcb_xkb_set_map_values_vmodmap (const xcb_xkb_set_map_values_t *S  /**< */)
d4099 1
a4099 1
    return /* values */ S->vmodmap;
d4103 2
a4104 2
xcb_xkb_set_map_values_vmodmap_length (const xcb_xkb_set_map_request_t *R  /**< */,
                                       const xcb_xkb_set_map_values_t *S  /**< */)
d4110 2
a4111 2
xcb_xkb_set_map_values_vmodmap_iterator (const xcb_xkb_set_map_request_t *R  /**< */,
                                         const xcb_xkb_set_map_values_t *S  /**< */)
d4114 1
a4114 1
    i.data = /* values */ S->vmodmap;
d4121 12
a4132 12
xcb_xkb_set_map_values_serialize (void                           **_buffer  /**< */,
                                  uint8_t                          nTypes  /**< */,
                                  uint8_t                          nKeySyms  /**< */,
                                  uint8_t                          nKeyActions  /**< */,
                                  uint16_t                         totalActions  /**< */,
                                  uint8_t                          totalKeyBehaviors  /**< */,
                                  uint16_t                         virtualMods  /**< */,
                                  uint8_t                          totalKeyExplicit  /**< */,
                                  uint8_t                          totalModMapKeys  /**< */,
                                  uint8_t                          totalVModMapKeys  /**< */,
                                  uint16_t                         present  /**< */,
                                  const xcb_xkb_set_map_values_t  *_aux  /**< */)
d4137 1
d4141 1
a4141 1
    struct iovec xcb_parts[19];
d4149 1
a4149 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4158 1
d4173 1
a4173 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4182 1
d4197 1
a4197 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4206 1
d4213 1
d4215 1
a4215 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4224 12
d4245 1
a4245 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4254 1
d4264 1
a4264 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4273 1
d4280 12
d4295 1
a4295 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4304 1
d4314 1
a4314 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4323 1
d4333 1
a4333 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4342 1
d4351 1
a4351 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4360 1
d4380 12
a4391 12
xcb_xkb_set_map_values_unpack (const void                *_buffer  /**< */,
                               uint8_t                    nTypes  /**< */,
                               uint8_t                    nKeySyms  /**< */,
                               uint8_t                    nKeyActions  /**< */,
                               uint16_t                   totalActions  /**< */,
                               uint8_t                    totalKeyBehaviors  /**< */,
                               uint16_t                   virtualMods  /**< */,
                               uint8_t                    totalKeyExplicit  /**< */,
                               uint8_t                    totalModMapKeys  /**< */,
                               uint8_t                    totalVModMapKeys  /**< */,
                               uint16_t                   present  /**< */,
                               xcb_xkb_set_map_values_t  *_aux  /**< */)
d4398 1
d4405 1
a4405 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4412 1
d4424 1
a4424 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4431 1
d4443 1
a4443 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4450 1
d4456 1
d4458 1
a4458 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4465 10
d4483 1
a4483 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4490 1
d4499 1
a4499 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4506 1
d4512 10
d4525 1
a4525 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4532 1
d4541 1
a4541 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4548 1
d4557 1
a4557 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4564 1
d4572 1
a4572 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d4579 1
d4585 11
a4595 11
xcb_xkb_set_map_values_sizeof (const void  *_buffer  /**< */,
                               uint8_t      nTypes  /**< */,
                               uint8_t      nKeySyms  /**< */,
                               uint8_t      nKeyActions  /**< */,
                               uint16_t     totalActions  /**< */,
                               uint8_t      totalKeyBehaviors  /**< */,
                               uint16_t     virtualMods  /**< */,
                               uint8_t      totalKeyExplicit  /**< */,
                               uint8_t      totalModMapKeys  /**< */,
                               uint8_t      totalVModMapKeys  /**< */,
                               uint16_t     present  /**< */)
d4601 31
d4633 34
a4666 34
xcb_xkb_set_map_checked (xcb_connection_t      *c  /**< */,
                         xcb_xkb_device_spec_t  deviceSpec  /**< */,
                         uint16_t               present  /**< */,
                         uint16_t               flags  /**< */,
                         xcb_keycode_t          minKeyCode  /**< */,
                         xcb_keycode_t          maxKeyCode  /**< */,
                         uint8_t                firstType  /**< */,
                         uint8_t                nTypes  /**< */,
                         xcb_keycode_t          firstKeySym  /**< */,
                         uint8_t                nKeySyms  /**< */,
                         uint16_t               totalSyms  /**< */,
                         xcb_keycode_t          firstKeyAction  /**< */,
                         uint8_t                nKeyActions  /**< */,
                         uint16_t               totalActions  /**< */,
                         xcb_keycode_t          firstKeyBehavior  /**< */,
                         uint8_t                nKeyBehaviors  /**< */,
                         uint8_t                totalKeyBehaviors  /**< */,
                         xcb_keycode_t          firstKeyExplicit  /**< */,
                         uint8_t                nKeyExplicit  /**< */,
                         uint8_t                totalKeyExplicit  /**< */,
                         xcb_keycode_t          firstModMapKey  /**< */,
                         uint8_t                nModMapKeys  /**< */,
                         uint8_t                totalModMapKeys  /**< */,
                         xcb_keycode_t          firstVModMapKey  /**< */,
                         uint8_t                nVModMapKeys  /**< */,
                         uint8_t                totalVModMapKeys  /**< */,
                         uint16_t               virtualMods  /**< */,
                         const void            *values  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 3,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_MAP,
        /* isvoid */ 1
d4714 34
a4747 34
xcb_xkb_set_map (xcb_connection_t      *c  /**< */,
                 xcb_xkb_device_spec_t  deviceSpec  /**< */,
                 uint16_t               present  /**< */,
                 uint16_t               flags  /**< */,
                 xcb_keycode_t          minKeyCode  /**< */,
                 xcb_keycode_t          maxKeyCode  /**< */,
                 uint8_t                firstType  /**< */,
                 uint8_t                nTypes  /**< */,
                 xcb_keycode_t          firstKeySym  /**< */,
                 uint8_t                nKeySyms  /**< */,
                 uint16_t               totalSyms  /**< */,
                 xcb_keycode_t          firstKeyAction  /**< */,
                 uint8_t                nKeyActions  /**< */,
                 uint16_t               totalActions  /**< */,
                 xcb_keycode_t          firstKeyBehavior  /**< */,
                 uint8_t                nKeyBehaviors  /**< */,
                 uint8_t                totalKeyBehaviors  /**< */,
                 xcb_keycode_t          firstKeyExplicit  /**< */,
                 uint8_t                nKeyExplicit  /**< */,
                 uint8_t                totalKeyExplicit  /**< */,
                 xcb_keycode_t          firstModMapKey  /**< */,
                 uint8_t                nModMapKeys  /**< */,
                 uint8_t                totalModMapKeys  /**< */,
                 xcb_keycode_t          firstVModMapKey  /**< */,
                 uint8_t                nVModMapKeys  /**< */,
                 uint8_t                totalVModMapKeys  /**< */,
                 uint16_t               virtualMods  /**< */,
                 const void            *values  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 3,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_MAP,
        /* isvoid */ 1
d4795 34
a4828 34
xcb_xkb_set_map_aux_checked (xcb_connection_t               *c  /**< */,
                             xcb_xkb_device_spec_t           deviceSpec  /**< */,
                             uint16_t                        present  /**< */,
                             uint16_t                        flags  /**< */,
                             xcb_keycode_t                   minKeyCode  /**< */,
                             xcb_keycode_t                   maxKeyCode  /**< */,
                             uint8_t                         firstType  /**< */,
                             uint8_t                         nTypes  /**< */,
                             xcb_keycode_t                   firstKeySym  /**< */,
                             uint8_t                         nKeySyms  /**< */,
                             uint16_t                        totalSyms  /**< */,
                             xcb_keycode_t                   firstKeyAction  /**< */,
                             uint8_t                         nKeyActions  /**< */,
                             uint16_t                        totalActions  /**< */,
                             xcb_keycode_t                   firstKeyBehavior  /**< */,
                             uint8_t                         nKeyBehaviors  /**< */,
                             uint8_t                         totalKeyBehaviors  /**< */,
                             xcb_keycode_t                   firstKeyExplicit  /**< */,
                             uint8_t                         nKeyExplicit  /**< */,
                             uint8_t                         totalKeyExplicit  /**< */,
                             xcb_keycode_t                   firstModMapKey  /**< */,
                             uint8_t                         nModMapKeys  /**< */,
                             uint8_t                         totalModMapKeys  /**< */,
                             xcb_keycode_t                   firstVModMapKey  /**< */,
                             uint8_t                         nVModMapKeys  /**< */,
                             uint8_t                         totalVModMapKeys  /**< */,
                             uint16_t                        virtualMods  /**< */,
                             const xcb_xkb_set_map_values_t *values  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 3,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_MAP,
        /* isvoid */ 1
d4878 34
a4911 34
xcb_xkb_set_map_aux (xcb_connection_t               *c  /**< */,
                     xcb_xkb_device_spec_t           deviceSpec  /**< */,
                     uint16_t                        present  /**< */,
                     uint16_t                        flags  /**< */,
                     xcb_keycode_t                   minKeyCode  /**< */,
                     xcb_keycode_t                   maxKeyCode  /**< */,
                     uint8_t                         firstType  /**< */,
                     uint8_t                         nTypes  /**< */,
                     xcb_keycode_t                   firstKeySym  /**< */,
                     uint8_t                         nKeySyms  /**< */,
                     uint16_t                        totalSyms  /**< */,
                     xcb_keycode_t                   firstKeyAction  /**< */,
                     uint8_t                         nKeyActions  /**< */,
                     uint16_t                        totalActions  /**< */,
                     xcb_keycode_t                   firstKeyBehavior  /**< */,
                     uint8_t                         nKeyBehaviors  /**< */,
                     uint8_t                         totalKeyBehaviors  /**< */,
                     xcb_keycode_t                   firstKeyExplicit  /**< */,
                     uint8_t                         nKeyExplicit  /**< */,
                     uint8_t                         totalKeyExplicit  /**< */,
                     xcb_keycode_t                   firstModMapKey  /**< */,
                     uint8_t                         nModMapKeys  /**< */,
                     uint8_t                         totalModMapKeys  /**< */,
                     xcb_keycode_t                   firstVModMapKey  /**< */,
                     uint8_t                         nVModMapKeys  /**< */,
                     uint8_t                         totalVModMapKeys  /**< */,
                     uint16_t                        virtualMods  /**< */,
                     const xcb_xkb_set_map_values_t *values  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 3,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_MAP,
        /* isvoid */ 1
d4960 6
d4967 1
a4967 1
xcb_xkb_get_compat_map_sizeof (const void  *_buffer  /**< */)
d5010 6
a5015 6
xcb_xkb_get_compat_map (xcb_connection_t      *c  /**< */,
                        xcb_xkb_device_spec_t  deviceSpec  /**< */,
                        uint8_t                groups  /**< */,
                        uint8_t                getAllSI  /**< */,
                        uint16_t               firstSI  /**< */,
                        uint16_t               nSI  /**< */)
d5018 4
a5021 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_COMPAT_MAP,
        /* isvoid */ 0
d5044 6
a5049 6
xcb_xkb_get_compat_map_unchecked (xcb_connection_t      *c  /**< */,
                                  xcb_xkb_device_spec_t  deviceSpec  /**< */,
                                  uint8_t                groups  /**< */,
                                  uint8_t                getAllSI  /**< */,
                                  uint16_t               firstSI  /**< */,
                                  uint16_t               nSI  /**< */)
d5052 4
a5055 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_COMPAT_MAP,
        /* isvoid */ 0
d5078 1
a5078 1
xcb_xkb_get_compat_map_si_rtrn (const xcb_xkb_get_compat_map_reply_t *R  /**< */)
d5084 1
a5084 1
xcb_xkb_get_compat_map_si_rtrn_length (const xcb_xkb_get_compat_map_reply_t *R  /**< */)
d5090 1
a5090 1
xcb_xkb_get_compat_map_si_rtrn_iterator (const xcb_xkb_get_compat_map_reply_t *R  /**< */)
d5100 1
a5100 1
xcb_xkb_get_compat_map_group_rtrn (const xcb_xkb_get_compat_map_reply_t *R  /**< */)
d5107 1
a5107 1
xcb_xkb_get_compat_map_group_rtrn_length (const xcb_xkb_get_compat_map_reply_t *R  /**< */)
d5113 1
a5113 1
xcb_xkb_get_compat_map_group_rtrn_iterator (const xcb_xkb_get_compat_map_reply_t *R  /**< */)
d5124 1
a5124 1
xcb_xkb_get_compat_map_reply (xcb_connection_t                 *c  /**< */,
d5126 1
a5126 1
                              xcb_generic_error_t             **e  /**< */)
d5132 1
a5132 1
xcb_xkb_set_compat_map_sizeof (const void  *_buffer  /**< */)
d5175 9
a5183 9
xcb_xkb_set_compat_map_checked (xcb_connection_t              *c  /**< */,
                                xcb_xkb_device_spec_t          deviceSpec  /**< */,
                                uint8_t                        recomputeActions  /**< */,
                                uint8_t                        truncateSI  /**< */,
                                uint8_t                        groups  /**< */,
                                uint16_t                       firstSI  /**< */,
                                uint16_t                       nSI  /**< */,
                                const xcb_xkb_sym_interpret_t *si  /**< */,
                                const xcb_xkb_mod_def_t       *groupMaps  /**< */)
d5186 4
a5189 4
        /* count */ 6,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_COMPAT_MAP,
        /* isvoid */ 1
d5225 9
a5233 9
xcb_xkb_set_compat_map (xcb_connection_t              *c  /**< */,
                        xcb_xkb_device_spec_t          deviceSpec  /**< */,
                        uint8_t                        recomputeActions  /**< */,
                        uint8_t                        truncateSI  /**< */,
                        uint8_t                        groups  /**< */,
                        uint16_t                       firstSI  /**< */,
                        uint16_t                       nSI  /**< */,
                        const xcb_xkb_sym_interpret_t *si  /**< */,
                        const xcb_xkb_mod_def_t       *groupMaps  /**< */)
d5236 4
a5239 4
        /* count */ 6,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_COMPAT_MAP,
        /* isvoid */ 1
d5274 46
d5321 2
a5322 2
xcb_xkb_get_indicator_state (xcb_connection_t      *c  /**< */,
                             xcb_xkb_device_spec_t  deviceSpec  /**< */)
d5325 4
a5328 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_INDICATOR_STATE,
        /* isvoid */ 0
d5348 2
a5349 2
xcb_xkb_get_indicator_state_unchecked (xcb_connection_t      *c  /**< */,
                                       xcb_xkb_device_spec_t  deviceSpec  /**< */)
d5352 4
a5355 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_INDICATOR_STATE,
        /* isvoid */ 0
d5375 1
a5375 1
xcb_xkb_get_indicator_state_reply (xcb_connection_t                      *c  /**< */,
d5377 1
a5377 1
                                   xcb_generic_error_t                  **e  /**< */)
d5383 1
a5383 1
xcb_xkb_get_indicator_map_sizeof (const void  *_buffer  /**< */)
d5414 3
a5416 3
xcb_xkb_get_indicator_map (xcb_connection_t      *c  /**< */,
                           xcb_xkb_device_spec_t  deviceSpec  /**< */,
                           uint32_t               which  /**< */)
d5419 4
a5422 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_INDICATOR_MAP,
        /* isvoid */ 0
d5443 3
a5445 3
xcb_xkb_get_indicator_map_unchecked (xcb_connection_t      *c  /**< */,
                                     xcb_xkb_device_spec_t  deviceSpec  /**< */,
                                     uint32_t               which  /**< */)
d5448 4
a5451 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_INDICATOR_MAP,
        /* isvoid */ 0
d5472 1
a5472 1
xcb_xkb_get_indicator_map_maps (const xcb_xkb_get_indicator_map_reply_t *R  /**< */)
d5478 1
a5478 1
xcb_xkb_get_indicator_map_maps_length (const xcb_xkb_get_indicator_map_reply_t *R  /**< */)
d5484 1
a5484 1
xcb_xkb_get_indicator_map_maps_iterator (const xcb_xkb_get_indicator_map_reply_t *R  /**< */)
d5494 1
a5494 1
xcb_xkb_get_indicator_map_reply (xcb_connection_t                    *c  /**< */,
d5496 1
a5496 1
                                 xcb_generic_error_t                **e  /**< */)
d5502 1
a5502 1
xcb_xkb_set_indicator_map_sizeof (const void  *_buffer  /**< */)
d5533 4
a5536 4
xcb_xkb_set_indicator_map_checked (xcb_connection_t              *c  /**< */,
                                   xcb_xkb_device_spec_t          deviceSpec  /**< */,
                                   uint32_t                       which  /**< */,
                                   const xcb_xkb_indicator_map_t *maps  /**< */)
d5539 4
a5542 4
        /* count */ 4,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_INDICATOR_MAP,
        /* isvoid */ 1
d5568 4
a5571 4
xcb_xkb_set_indicator_map (xcb_connection_t              *c  /**< */,
                           xcb_xkb_device_spec_t          deviceSpec  /**< */,
                           uint32_t                       which  /**< */,
                           const xcb_xkb_indicator_map_t *maps  /**< */)
d5574 4
a5577 4
        /* count */ 4,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_INDICATOR_MAP,
        /* isvoid */ 1
d5602 22
d5625 5
a5629 5
xcb_xkb_get_named_indicator (xcb_connection_t         *c  /**< */,
                             xcb_xkb_device_spec_t     deviceSpec  /**< */,
                             xcb_xkb_led_class_spec_t  ledClass  /**< */,
                             xcb_xkb_id_spec_t         ledID  /**< */,
                             xcb_atom_t                indicator  /**< */)
d5632 4
a5635 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_NAMED_INDICATOR,
        /* isvoid */ 0
d5658 5
a5662 5
xcb_xkb_get_named_indicator_unchecked (xcb_connection_t         *c  /**< */,
                                       xcb_xkb_device_spec_t     deviceSpec  /**< */,
                                       xcb_xkb_led_class_spec_t  ledClass  /**< */,
                                       xcb_xkb_id_spec_t         ledID  /**< */,
                                       xcb_atom_t                indicator  /**< */)
d5665 4
a5668 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_NAMED_INDICATOR,
        /* isvoid */ 0
d5691 1
a5691 1
xcb_xkb_get_named_indicator_reply (xcb_connection_t                      *c  /**< */,
d5693 1
a5693 1
                                   xcb_generic_error_t                  **e  /**< */)
d5699 22
a5720 22
xcb_xkb_set_named_indicator_checked (xcb_connection_t         *c  /**< */,
                                     xcb_xkb_device_spec_t     deviceSpec  /**< */,
                                     xcb_xkb_led_class_spec_t  ledClass  /**< */,
                                     xcb_xkb_id_spec_t         ledID  /**< */,
                                     xcb_atom_t                indicator  /**< */,
                                     uint8_t                   setState  /**< */,
                                     uint8_t                   on  /**< */,
                                     uint8_t                   setMap  /**< */,
                                     uint8_t                   createMap  /**< */,
                                     uint8_t                   map_flags  /**< */,
                                     uint8_t                   map_whichGroups  /**< */,
                                     uint8_t                   map_groups  /**< */,
                                     uint8_t                   map_whichMods  /**< */,
                                     uint8_t                   map_realMods  /**< */,
                                     uint16_t                  map_vmods  /**< */,
                                     uint32_t                  map_ctrls  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_NAMED_INDICATOR,
        /* isvoid */ 1
d5755 22
a5776 22
xcb_xkb_set_named_indicator (xcb_connection_t         *c  /**< */,
                             xcb_xkb_device_spec_t     deviceSpec  /**< */,
                             xcb_xkb_led_class_spec_t  ledClass  /**< */,
                             xcb_xkb_id_spec_t         ledID  /**< */,
                             xcb_atom_t                indicator  /**< */,
                             uint8_t                   setState  /**< */,
                             uint8_t                   on  /**< */,
                             uint8_t                   setMap  /**< */,
                             uint8_t                   createMap  /**< */,
                             uint8_t                   map_flags  /**< */,
                             uint8_t                   map_whichGroups  /**< */,
                             uint8_t                   map_groups  /**< */,
                             uint8_t                   map_whichMods  /**< */,
                             uint8_t                   map_realMods  /**< */,
                             uint16_t                  map_vmods  /**< */,
                             uint32_t                  map_ctrls  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_NAMED_INDICATOR,
        /* isvoid */ 1
d5811 1
a5811 1
xcb_xkb_get_names_value_list_type_names (const xcb_xkb_get_names_value_list_t *S  /**< */)
d5813 1
a5813 1
    return /* valueList */ S->typeNames;
d5817 2
a5818 2
xcb_xkb_get_names_value_list_type_names_length (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                const xcb_xkb_get_names_value_list_t *S  /**< */)
d5824 2
a5825 2
xcb_xkb_get_names_value_list_type_names_end (const xcb_xkb_get_names_reply_t *R  /**< */,
                                             const xcb_xkb_get_names_value_list_t *S  /**< */)
d5828 1
a5828 1
    i.data = /* valueList */ S->typeNames + R->nTypes;
d5835 1
a5835 1
xcb_xkb_get_names_value_list_n_levels_per_type (const xcb_xkb_get_names_value_list_t *S  /**< */)
d5837 1
a5837 1
    return /* valueList */ S->nLevelsPerType;
d5841 2
a5842 2
xcb_xkb_get_names_value_list_n_levels_per_type_length (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                       const xcb_xkb_get_names_value_list_t *S  /**< */)
d5848 2
a5849 26
xcb_xkb_get_names_value_list_n_levels_per_type_end (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                    const xcb_xkb_get_names_value_list_t *S  /**< */)
{
    xcb_generic_iterator_t i;
    i.data = /* valueList */ S->nLevelsPerType + R->nTypes;
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}

uint8_t *
xcb_xkb_get_names_value_list_alignment_pad (const xcb_xkb_get_names_value_list_t *S  /**< */)
{
    return /* valueList */ S->alignment_pad;
}

int
xcb_xkb_get_names_value_list_alignment_pad_length (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                   const xcb_xkb_get_names_value_list_t *S  /**< */)
{
    return (((R->nTypes + 3) & (~3)) - R->nTypes);
}

xcb_generic_iterator_t
xcb_xkb_get_names_value_list_alignment_pad_end (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                const xcb_xkb_get_names_value_list_t *S  /**< */)
d5852 1
a5852 1
    i.data = /* valueList */ S->alignment_pad + (((R->nTypes + 3) & (~3)) - R->nTypes);
d5859 1
a5859 1
xcb_xkb_get_names_value_list_kt_level_names (const xcb_xkb_get_names_value_list_t *S  /**< */)
d5861 1
a5861 1
    return /* valueList */ S->ktLevelNames;
d5865 2
a5866 2
xcb_xkb_get_names_value_list_kt_level_names_length (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                    const xcb_xkb_get_names_value_list_t *S  /**< */)
d5868 14
a5881 1
    return xcb_sumof(/* valueList */ S->nLevelsPerType, R->nTypes);
d5885 2
a5886 2
xcb_xkb_get_names_value_list_kt_level_names_end (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                 const xcb_xkb_get_names_value_list_t *S  /**< */)
d5889 14
a5902 1
    i.data = /* valueList */ S->ktLevelNames + xcb_sumof(/* valueList */ S->nLevelsPerType, R->nTypes);
d5909 1
a5909 1
xcb_xkb_get_names_value_list_indicator_names (const xcb_xkb_get_names_value_list_t *S  /**< */)
d5911 1
a5911 1
    return /* valueList */ S->indicatorNames;
d5915 2
a5916 2
xcb_xkb_get_names_value_list_indicator_names_length (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                     const xcb_xkb_get_names_value_list_t *S  /**< */)
d5922 2
a5923 2
xcb_xkb_get_names_value_list_indicator_names_end (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                  const xcb_xkb_get_names_value_list_t *S  /**< */)
d5926 1
a5926 1
    i.data = /* valueList */ S->indicatorNames + xcb_popcount(R->indicators);
d5933 1
a5933 1
xcb_xkb_get_names_value_list_virtual_mod_names (const xcb_xkb_get_names_value_list_t *S  /**< */)
d5935 1
a5935 1
    return /* valueList */ S->virtualModNames;
d5939 2
a5940 2
xcb_xkb_get_names_value_list_virtual_mod_names_length (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                       const xcb_xkb_get_names_value_list_t *S  /**< */)
d5946 2
a5947 2
xcb_xkb_get_names_value_list_virtual_mod_names_end (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                    const xcb_xkb_get_names_value_list_t *S  /**< */)
d5950 1
a5950 1
    i.data = /* valueList */ S->virtualModNames + xcb_popcount(R->virtualMods);
d5957 1
a5957 1
xcb_xkb_get_names_value_list_groups (const xcb_xkb_get_names_value_list_t *S  /**< */)
d5959 1
a5959 1
    return /* valueList */ S->groups;
d5963 2
a5964 2
xcb_xkb_get_names_value_list_groups_length (const xcb_xkb_get_names_reply_t *R  /**< */,
                                            const xcb_xkb_get_names_value_list_t *S  /**< */)
d5970 2
a5971 2
xcb_xkb_get_names_value_list_groups_end (const xcb_xkb_get_names_reply_t *R  /**< */,
                                         const xcb_xkb_get_names_value_list_t *S  /**< */)
d5974 1
a5974 1
    i.data = /* valueList */ S->groups + xcb_popcount(R->groupNames);
d5981 1
a5981 1
xcb_xkb_get_names_value_list_key_names (const xcb_xkb_get_names_value_list_t *S  /**< */)
d5983 1
a5983 1
    return /* valueList */ S->keyNames;
d5987 2
a5988 2
xcb_xkb_get_names_value_list_key_names_length (const xcb_xkb_get_names_reply_t *R  /**< */,
                                               const xcb_xkb_get_names_value_list_t *S  /**< */)
d5994 2
a5995 2
xcb_xkb_get_names_value_list_key_names_iterator (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                 const xcb_xkb_get_names_value_list_t *S  /**< */)
d5998 1
a5998 1
    i.data = /* valueList */ S->keyNames;
d6005 1
a6005 1
xcb_xkb_get_names_value_list_key_aliases (const xcb_xkb_get_names_value_list_t *S  /**< */)
d6007 1
a6007 1
    return /* valueList */ S->keyAliases;
d6011 2
a6012 2
xcb_xkb_get_names_value_list_key_aliases_length (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                 const xcb_xkb_get_names_value_list_t *S  /**< */)
d6018 2
a6019 2
xcb_xkb_get_names_value_list_key_aliases_iterator (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                   const xcb_xkb_get_names_value_list_t *S  /**< */)
d6022 1
a6022 1
    i.data = /* valueList */ S->keyAliases;
d6029 1
a6029 1
xcb_xkb_get_names_value_list_radio_group_names (const xcb_xkb_get_names_value_list_t *S  /**< */)
d6031 1
a6031 1
    return /* valueList */ S->radioGroupNames;
d6035 2
a6036 2
xcb_xkb_get_names_value_list_radio_group_names_length (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                       const xcb_xkb_get_names_value_list_t *S  /**< */)
d6042 2
a6043 2
xcb_xkb_get_names_value_list_radio_group_names_end (const xcb_xkb_get_names_reply_t *R  /**< */,
                                                    const xcb_xkb_get_names_value_list_t *S  /**< */)
d6046 1
a6046 1
    i.data = /* valueList */ S->radioGroupNames + R->nRadioGroups;
d6053 10
a6062 10
xcb_xkb_get_names_value_list_serialize (void                                 **_buffer  /**< */,
                                        uint8_t                                nTypes  /**< */,
                                        uint32_t                               indicators  /**< */,
                                        uint16_t                               virtualMods  /**< */,
                                        uint8_t                                groupNames  /**< */,
                                        uint8_t                                nKeys  /**< */,
                                        uint8_t                                nKeyAliases  /**< */,
                                        uint8_t                                nRadioGroups  /**< */,
                                        uint32_t                               which  /**< */,
                                        const xcb_xkb_get_names_value_list_t  *_aux  /**< */)
d6067 1
d6069 4
d6075 1
a6075 1
    struct iovec xcb_parts[27];
d6131 1
a6131 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6140 1
d6150 1
a6150 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6159 1
d6166 1
d6168 1
a6168 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6177 1
a6177 6
        /* alignment_pad */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->alignment_pad;
        xcb_block_len += (((nTypes + 3) & (~3)) - nTypes) * sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = (((nTypes + 3) & (~3)) - nTypes) * sizeof(uint8_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
d6179 1
a6179 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6188 1
d6191 11
a6201 2
        xcb_block_len += xcb_sumof(_aux->nLevelsPerType, nTypes) * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_sumof(_aux->nLevelsPerType, nTypes) * sizeof(xcb_atom_t);
d6207 1
a6207 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6216 1
d6226 1
a6226 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6235 1
d6245 1
a6245 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6254 1
d6264 1
a6264 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6273 1
d6283 1
a6283 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6292 1
d6302 1
a6302 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6311 1
d6320 1
a6320 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6329 1
d6349 10
a6358 10
xcb_xkb_get_names_value_list_unpack (const void                      *_buffer  /**< */,
                                     uint8_t                          nTypes  /**< */,
                                     uint32_t                         indicators  /**< */,
                                     uint16_t                         virtualMods  /**< */,
                                     uint8_t                          groupNames  /**< */,
                                     uint8_t                          nKeys  /**< */,
                                     uint8_t                          nKeyAliases  /**< */,
                                     uint8_t                          nRadioGroups  /**< */,
                                     uint32_t                         which  /**< */,
                                     xcb_xkb_get_names_value_list_t  *_aux  /**< */)
d6365 1
d6367 4
d6416 1
a6416 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6423 1
d6432 1
a6432 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6439 1
d6445 1
d6447 1
a6447 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6454 1
a6454 5
        /* alignment_pad */
        _aux->alignment_pad = (uint8_t *)xcb_tmp;
        xcb_block_len += (((nTypes + 3) & (~3)) - nTypes) * sizeof(uint8_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
d6456 1
a6456 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6463 1
d6466 10
a6475 1
        xcb_block_len += xcb_sumof(_aux->nLevelsPerType, nTypes) * sizeof(xcb_atom_t);
d6481 1
a6481 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6488 1
d6497 1
a6497 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6504 1
d6513 1
a6513 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6520 1
d6529 1
a6529 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6536 1
d6545 1
a6545 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6552 1
d6561 1
a6561 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6568 1
d6576 1
a6576 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d6583 1
d6589 9
a6597 9
xcb_xkb_get_names_value_list_sizeof (const void  *_buffer  /**< */,
                                     uint8_t      nTypes  /**< */,
                                     uint32_t     indicators  /**< */,
                                     uint16_t     virtualMods  /**< */,
                                     uint8_t      groupNames  /**< */,
                                     uint8_t      nKeys  /**< */,
                                     uint8_t      nKeyAliases  /**< */,
                                     uint8_t      nRadioGroups  /**< */,
                                     uint32_t     which  /**< */)
d6603 31
d6635 3
a6637 3
xcb_xkb_get_names (xcb_connection_t      *c  /**< */,
                   xcb_xkb_device_spec_t  deviceSpec  /**< */,
                   uint32_t               which  /**< */)
d6640 4
a6643 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_NAMES,
        /* isvoid */ 0
d6664 3
a6666 3
xcb_xkb_get_names_unchecked (xcb_connection_t      *c  /**< */,
                             xcb_xkb_device_spec_t  deviceSpec  /**< */,
                             uint32_t               which  /**< */)
d6669 4
a6672 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_NAMES,
        /* isvoid */ 0
d6693 1
a6693 1
xcb_xkb_get_names_value_list (const xcb_xkb_get_names_reply_t *R  /**< */)
d6699 1
a6699 1
xcb_xkb_get_names_reply (xcb_connection_t            *c  /**< */,
d6701 1
a6701 1
                         xcb_generic_error_t        **e  /**< */)
d6707 1
a6707 1
xcb_xkb_set_names_values_type_names (const xcb_xkb_set_names_values_t *S  /**< */)
d6709 1
a6709 1
    return /* values */ S->typeNames;
d6713 2
a6714 2
xcb_xkb_set_names_values_type_names_length (const xcb_xkb_set_names_request_t *R  /**< */,
                                            const xcb_xkb_set_names_values_t *S  /**< */)
d6720 2
a6721 2
xcb_xkb_set_names_values_type_names_end (const xcb_xkb_set_names_request_t *R  /**< */,
                                         const xcb_xkb_set_names_values_t *S  /**< */)
d6724 1
a6724 1
    i.data = /* values */ S->typeNames + R->nTypes;
d6731 1
a6731 1
xcb_xkb_set_names_values_n_levels_per_type (const xcb_xkb_set_names_values_t *S  /**< */)
d6733 1
a6733 1
    return /* values */ S->nLevelsPerType;
d6737 2
a6738 2
xcb_xkb_set_names_values_n_levels_per_type_length (const xcb_xkb_set_names_request_t *R  /**< */,
                                                   const xcb_xkb_set_names_values_t *S  /**< */)
d6744 2
a6745 2
xcb_xkb_set_names_values_n_levels_per_type_end (const xcb_xkb_set_names_request_t *R  /**< */,
                                                const xcb_xkb_set_names_values_t *S  /**< */)
d6748 1
a6748 1
    i.data = /* values */ S->nLevelsPerType + R->nTypes;
d6755 1
a6755 1
xcb_xkb_set_names_values_kt_level_names (const xcb_xkb_set_names_values_t *S  /**< */)
d6757 1
a6757 1
    return /* values */ S->ktLevelNames;
d6761 2
a6762 2
xcb_xkb_set_names_values_kt_level_names_length (const xcb_xkb_set_names_request_t *R  /**< */,
                                                const xcb_xkb_set_names_values_t *S  /**< */)
d6764 14
a6777 1
    return xcb_sumof(/* values */ S->nLevelsPerType, R->nTypes);
d6781 2
a6782 2
xcb_xkb_set_names_values_kt_level_names_end (const xcb_xkb_set_names_request_t *R  /**< */,
                                             const xcb_xkb_set_names_values_t *S  /**< */)
d6785 14
a6798 1
    i.data = /* values */ S->ktLevelNames + xcb_sumof(/* values */ S->nLevelsPerType, R->nTypes);
d6805 1
a6805 1
xcb_xkb_set_names_values_indicator_names (const xcb_xkb_set_names_values_t *S  /**< */)
d6807 1
a6807 1
    return /* values */ S->indicatorNames;
d6811 2
a6812 2
xcb_xkb_set_names_values_indicator_names_length (const xcb_xkb_set_names_request_t *R  /**< */,
                                                 const xcb_xkb_set_names_values_t *S  /**< */)
d6818 2
a6819 2
xcb_xkb_set_names_values_indicator_names_end (const xcb_xkb_set_names_request_t *R  /**< */,
                                              const xcb_xkb_set_names_values_t *S  /**< */)
d6822 1
a6822 1
    i.data = /* values */ S->indicatorNames + xcb_popcount(R->indicators);
d6829 1
a6829 1
xcb_xkb_set_names_values_virtual_mod_names (const xcb_xkb_set_names_values_t *S  /**< */)
d6831 1
a6831 1
    return /* values */ S->virtualModNames;
d6835 2
a6836 2
xcb_xkb_set_names_values_virtual_mod_names_length (const xcb_xkb_set_names_request_t *R  /**< */,
                                                   const xcb_xkb_set_names_values_t *S  /**< */)
d6842 2
a6843 2
xcb_xkb_set_names_values_virtual_mod_names_end (const xcb_xkb_set_names_request_t *R  /**< */,
                                                const xcb_xkb_set_names_values_t *S  /**< */)
d6846 1
a6846 1
    i.data = /* values */ S->virtualModNames + xcb_popcount(R->virtualMods);
d6853 1
a6853 1
xcb_xkb_set_names_values_groups (const xcb_xkb_set_names_values_t *S  /**< */)
d6855 1
a6855 1
    return /* values */ S->groups;
d6859 2
a6860 2
xcb_xkb_set_names_values_groups_length (const xcb_xkb_set_names_request_t *R  /**< */,
                                        const xcb_xkb_set_names_values_t *S  /**< */)
d6866 2
a6867 2
xcb_xkb_set_names_values_groups_end (const xcb_xkb_set_names_request_t *R  /**< */,
                                     const xcb_xkb_set_names_values_t *S  /**< */)
d6870 1
a6870 1
    i.data = /* values */ S->groups + xcb_popcount(R->groupNames);
d6877 1
a6877 1
xcb_xkb_set_names_values_key_names (const xcb_xkb_set_names_values_t *S  /**< */)
d6879 1
a6879 1
    return /* values */ S->keyNames;
d6883 2
a6884 2
xcb_xkb_set_names_values_key_names_length (const xcb_xkb_set_names_request_t *R  /**< */,
                                           const xcb_xkb_set_names_values_t *S  /**< */)
d6890 2
a6891 2
xcb_xkb_set_names_values_key_names_iterator (const xcb_xkb_set_names_request_t *R  /**< */,
                                             const xcb_xkb_set_names_values_t *S  /**< */)
d6894 1
a6894 1
    i.data = /* values */ S->keyNames;
d6901 1
a6901 1
xcb_xkb_set_names_values_key_aliases (const xcb_xkb_set_names_values_t *S  /**< */)
d6903 1
a6903 1
    return /* values */ S->keyAliases;
d6907 2
a6908 2
xcb_xkb_set_names_values_key_aliases_length (const xcb_xkb_set_names_request_t *R  /**< */,
                                             const xcb_xkb_set_names_values_t *S  /**< */)
d6914 2
a6915 2
xcb_xkb_set_names_values_key_aliases_iterator (const xcb_xkb_set_names_request_t *R  /**< */,
                                               const xcb_xkb_set_names_values_t *S  /**< */)
d6918 1
a6918 1
    i.data = /* values */ S->keyAliases;
d6925 1
a6925 1
xcb_xkb_set_names_values_radio_group_names (const xcb_xkb_set_names_values_t *S  /**< */)
d6927 1
a6927 1
    return /* values */ S->radioGroupNames;
d6931 2
a6932 2
xcb_xkb_set_names_values_radio_group_names_length (const xcb_xkb_set_names_request_t *R  /**< */,
                                                   const xcb_xkb_set_names_values_t *S  /**< */)
d6938 2
a6939 2
xcb_xkb_set_names_values_radio_group_names_end (const xcb_xkb_set_names_request_t *R  /**< */,
                                                const xcb_xkb_set_names_values_t *S  /**< */)
d6942 1
a6942 1
    i.data = /* values */ S->radioGroupNames + R->nRadioGroups;
d6949 10
a6958 10
xcb_xkb_set_names_values_serialize (void                             **_buffer  /**< */,
                                    uint8_t                            nTypes  /**< */,
                                    uint32_t                           indicators  /**< */,
                                    uint16_t                           virtualMods  /**< */,
                                    uint8_t                            groupNames  /**< */,
                                    uint8_t                            nKeys  /**< */,
                                    uint8_t                            nKeyAliases  /**< */,
                                    uint8_t                            nRadioGroups  /**< */,
                                    uint32_t                           which  /**< */,
                                    const xcb_xkb_set_names_values_t  *_aux  /**< */)
d6963 1
d6965 4
d6971 1
a6971 1
    struct iovec xcb_parts[25];
d7027 1
a7027 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7036 1
d7046 1
a7046 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7055 1
d7062 12
d7075 1
a7075 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7084 1
d7087 11
a7097 2
        xcb_block_len += xcb_sumof(_aux->nLevelsPerType, nTypes) * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_sumof(_aux->nLevelsPerType, nTypes) * sizeof(xcb_atom_t);
d7103 1
a7103 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7112 1
d7122 1
a7122 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7131 1
d7141 1
a7141 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7150 1
d7160 1
a7160 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7169 1
d7179 1
a7179 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7188 1
d7198 1
a7198 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7207 1
d7216 1
a7216 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7225 1
d7245 10
a7254 10
xcb_xkb_set_names_values_unpack (const void                  *_buffer  /**< */,
                                 uint8_t                      nTypes  /**< */,
                                 uint32_t                     indicators  /**< */,
                                 uint16_t                     virtualMods  /**< */,
                                 uint8_t                      groupNames  /**< */,
                                 uint8_t                      nKeys  /**< */,
                                 uint8_t                      nKeyAliases  /**< */,
                                 uint8_t                      nRadioGroups  /**< */,
                                 uint32_t                     which  /**< */,
                                 xcb_xkb_set_names_values_t  *_aux  /**< */)
d7261 1
d7263 4
d7312 1
a7312 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7319 1
d7328 1
a7328 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7335 1
d7341 10
d7352 1
a7352 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7359 1
d7362 10
a7371 1
        xcb_block_len += xcb_sumof(_aux->nLevelsPerType, nTypes) * sizeof(xcb_atom_t);
d7377 1
a7377 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7384 1
d7393 1
a7393 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7400 1
d7409 1
a7409 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7416 1
d7425 1
a7425 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7432 1
d7441 1
a7441 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7448 1
d7457 1
a7457 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7464 1
d7472 1
a7472 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d7479 1
d7485 9
a7493 9
xcb_xkb_set_names_values_sizeof (const void  *_buffer  /**< */,
                                 uint8_t      nTypes  /**< */,
                                 uint32_t     indicators  /**< */,
                                 uint16_t     virtualMods  /**< */,
                                 uint8_t      groupNames  /**< */,
                                 uint8_t      nKeys  /**< */,
                                 uint8_t      nKeyAliases  /**< */,
                                 uint8_t      nRadioGroups  /**< */,
                                 uint32_t     which  /**< */)
d7499 31
d7531 22
a7552 22
xcb_xkb_set_names_checked (xcb_connection_t      *c  /**< */,
                           xcb_xkb_device_spec_t  deviceSpec  /**< */,
                           uint16_t               virtualMods  /**< */,
                           uint32_t               which  /**< */,
                           uint8_t                firstType  /**< */,
                           uint8_t                nTypes  /**< */,
                           uint8_t                firstKTLevelt  /**< */,
                           uint8_t                nKTLevels  /**< */,
                           uint32_t               indicators  /**< */,
                           uint8_t                groupNames  /**< */,
                           uint8_t                nRadioGroups  /**< */,
                           xcb_keycode_t          firstKey  /**< */,
                           uint8_t                nKeys  /**< */,
                           uint8_t                nKeyAliases  /**< */,
                           uint16_t               totalKTLevelNames  /**< */,
                           const void            *values  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 3,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_NAMES,
        /* isvoid */ 1
d7589 22
a7610 22
xcb_xkb_set_names (xcb_connection_t      *c  /**< */,
                   xcb_xkb_device_spec_t  deviceSpec  /**< */,
                   uint16_t               virtualMods  /**< */,
                   uint32_t               which  /**< */,
                   uint8_t                firstType  /**< */,
                   uint8_t                nTypes  /**< */,
                   uint8_t                firstKTLevelt  /**< */,
                   uint8_t                nKTLevels  /**< */,
                   uint32_t               indicators  /**< */,
                   uint8_t                groupNames  /**< */,
                   uint8_t                nRadioGroups  /**< */,
                   xcb_keycode_t          firstKey  /**< */,
                   uint8_t                nKeys  /**< */,
                   uint8_t                nKeyAliases  /**< */,
                   uint16_t               totalKTLevelNames  /**< */,
                   const void            *values  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 3,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_NAMES,
        /* isvoid */ 1
d7647 22
a7668 22
xcb_xkb_set_names_aux_checked (xcb_connection_t                 *c  /**< */,
                               xcb_xkb_device_spec_t             deviceSpec  /**< */,
                               uint16_t                          virtualMods  /**< */,
                               uint32_t                          which  /**< */,
                               uint8_t                           firstType  /**< */,
                               uint8_t                           nTypes  /**< */,
                               uint8_t                           firstKTLevelt  /**< */,
                               uint8_t                           nKTLevels  /**< */,
                               uint32_t                          indicators  /**< */,
                               uint8_t                           groupNames  /**< */,
                               uint8_t                           nRadioGroups  /**< */,
                               xcb_keycode_t                     firstKey  /**< */,
                               uint8_t                           nKeys  /**< */,
                               uint8_t                           nKeyAliases  /**< */,
                               uint16_t                          totalKTLevelNames  /**< */,
                               const xcb_xkb_set_names_values_t *values  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 3,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_NAMES,
        /* isvoid */ 1
d7707 22
a7728 22
xcb_xkb_set_names_aux (xcb_connection_t                 *c  /**< */,
                       xcb_xkb_device_spec_t             deviceSpec  /**< */,
                       uint16_t                          virtualMods  /**< */,
                       uint32_t                          which  /**< */,
                       uint8_t                           firstType  /**< */,
                       uint8_t                           nTypes  /**< */,
                       uint8_t                           firstKTLevelt  /**< */,
                       uint8_t                           nKTLevels  /**< */,
                       uint32_t                          indicators  /**< */,
                       uint8_t                           groupNames  /**< */,
                       uint8_t                           nRadioGroups  /**< */,
                       xcb_keycode_t                     firstKey  /**< */,
                       uint8_t                           nKeys  /**< */,
                       uint8_t                           nKeyAliases  /**< */,
                       uint16_t                          totalKTLevelNames  /**< */,
                       const xcb_xkb_set_names_values_t *values  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 3,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_NAMES,
        /* isvoid */ 1
d7766 6
d7773 7
a7779 7
xcb_xkb_per_client_flags (xcb_connection_t      *c  /**< */,
                          xcb_xkb_device_spec_t  deviceSpec  /**< */,
                          uint32_t               change  /**< */,
                          uint32_t               value  /**< */,
                          uint32_t               ctrlsToChange  /**< */,
                          uint32_t               autoCtrls  /**< */,
                          uint32_t               autoCtrlsValues  /**< */)
d7782 4
a7785 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_PER_CLIENT_FLAGS,
        /* isvoid */ 0
d7810 7
a7816 7
xcb_xkb_per_client_flags_unchecked (xcb_connection_t      *c  /**< */,
                                    xcb_xkb_device_spec_t  deviceSpec  /**< */,
                                    uint32_t               change  /**< */,
                                    uint32_t               value  /**< */,
                                    uint32_t               ctrlsToChange  /**< */,
                                    uint32_t               autoCtrls  /**< */,
                                    uint32_t               autoCtrlsValues  /**< */)
d7819 4
a7822 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_PER_CLIENT_FLAGS,
        /* isvoid */ 0
d7847 1
a7847 1
xcb_xkb_per_client_flags_reply (xcb_connection_t                   *c  /**< */,
d7849 1
a7849 1
                                xcb_generic_error_t               **e  /**< */)
d7855 1
a7855 1
xcb_xkb_list_components_sizeof (const void  *_buffer  /**< */)
d7966 3
a7968 3
xcb_xkb_list_components (xcb_connection_t      *c  /**< */,
                         xcb_xkb_device_spec_t  deviceSpec  /**< */,
                         uint16_t               maxNames  /**< */)
d7971 4
a7974 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_LIST_COMPONENTS,
        /* isvoid */ 0
d7994 3
a7996 3
xcb_xkb_list_components_unchecked (xcb_connection_t      *c  /**< */,
                                   xcb_xkb_device_spec_t  deviceSpec  /**< */,
                                   uint16_t               maxNames  /**< */)
d7999 4
a8002 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_LIST_COMPONENTS,
        /* isvoid */ 0
d8022 1
a8022 1
xcb_xkb_list_components_keymaps_length (const xcb_xkb_list_components_reply_t *R  /**< */)
d8028 1
a8028 1
xcb_xkb_list_components_keymaps_iterator (const xcb_xkb_list_components_reply_t *R  /**< */)
d8038 1
a8038 1
xcb_xkb_list_components_keycodes_length (const xcb_xkb_list_components_reply_t *R  /**< */)
d8044 1
a8044 1
xcb_xkb_list_components_keycodes_iterator (const xcb_xkb_list_components_reply_t *R  /**< */)
d8055 1
a8055 1
xcb_xkb_list_components_types_length (const xcb_xkb_list_components_reply_t *R  /**< */)
d8061 1
a8061 1
xcb_xkb_list_components_types_iterator (const xcb_xkb_list_components_reply_t *R  /**< */)
d8072 1
a8072 1
xcb_xkb_list_components_compat_maps_length (const xcb_xkb_list_components_reply_t *R  /**< */)
d8078 1
a8078 1
xcb_xkb_list_components_compat_maps_iterator (const xcb_xkb_list_components_reply_t *R  /**< */)
d8089 1
a8089 1
xcb_xkb_list_components_symbols_length (const xcb_xkb_list_components_reply_t *R  /**< */)
d8095 1
a8095 1
xcb_xkb_list_components_symbols_iterator (const xcb_xkb_list_components_reply_t *R  /**< */)
d8106 1
a8106 1
xcb_xkb_list_components_geometries_length (const xcb_xkb_list_components_reply_t *R  /**< */)
d8112 1
a8112 1
xcb_xkb_list_components_geometries_iterator (const xcb_xkb_list_components_reply_t *R  /**< */)
d8123 1
a8123 1
xcb_xkb_list_components_reply (xcb_connection_t                  *c  /**< */,
d8125 1
a8125 1
                               xcb_generic_error_t              **e  /**< */)
d8131 2
a8132 2
xcb_xkb_get_kbd_by_name_replies_types_map_types_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                             const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8134 1
a8134 1
    return /* replies */ S->types.nTypes;
d8138 2
a8139 2
xcb_xkb_get_kbd_by_name_replies_types_map_types_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                               const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8142 2
a8143 2
    i.data = /* replies */ S->types.map.types_rtrn;
    i.rem = /* replies */ S->types.nTypes;
d8149 2
a8150 2
xcb_xkb_get_kbd_by_name_replies_types_map_syms_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                            const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8152 1
a8152 1
    return /* replies */ S->types.nKeySyms;
d8156 2
a8157 2
xcb_xkb_get_kbd_by_name_replies_types_map_syms_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                              const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8160 2
a8161 2
    i.data = /* replies */ S->types.map.syms_rtrn;
    i.rem = /* replies */ S->types.nKeySyms;
d8167 1
a8167 1
xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_count (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8169 1
a8169 1
    return /* replies */ S->types.map.acts_rtrn_count;
d8173 2
a8174 2
xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_count_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                  const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8176 1
a8176 1
    return /* replies */ S->types.nKeyActions;
d8180 2
a8181 2
xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_count_end (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                               const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8184 1
a8184 1
    i.data = /* replies */ S->types.map.acts_rtrn_count + /* replies */ S->types.nKeyActions;
d8191 1
a8191 1
xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_acts (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8193 1
a8193 1
    return /* replies */ S->types.map.acts_rtrn_acts;
d8197 2
a8198 2
xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_acts_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                 const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8200 1
a8200 1
    return /* replies */ S->types.totalActions;
d8204 2
a8205 2
xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_acts_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                   const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8208 2
a8209 2
    i.data = /* replies */ S->types.map.acts_rtrn_acts;
    i.rem = /* replies */ S->types.totalActions;
d8215 1
a8215 1
xcb_xkb_get_kbd_by_name_replies_types_map_behaviors_rtrn (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8217 1
a8217 1
    return /* replies */ S->types.map.behaviors_rtrn;
d8221 2
a8222 2
xcb_xkb_get_kbd_by_name_replies_types_map_behaviors_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                 const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8224 1
a8224 1
    return /* replies */ S->types.totalKeyBehaviors;
d8228 2
a8229 2
xcb_xkb_get_kbd_by_name_replies_types_map_behaviors_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                   const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8232 2
a8233 2
    i.data = /* replies */ S->types.map.behaviors_rtrn;
    i.rem = /* replies */ S->types.totalKeyBehaviors;
d8239 1
a8239 1
xcb_xkb_get_kbd_by_name_replies_types_map_vmods_rtrn (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8241 1
a8241 1
    return /* replies */ S->types.map.vmods_rtrn;
d8245 2
a8246 2
xcb_xkb_get_kbd_by_name_replies_types_map_vmods_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                             const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8248 1
a8248 1
    return xcb_popcount(/* replies */ S->types.virtualMods);
d8252 2
a8253 2
xcb_xkb_get_kbd_by_name_replies_types_map_vmods_rtrn_end (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                          const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8256 1
a8256 1
    i.data = /* replies */ S->types.map.vmods_rtrn + xcb_popcount(/* replies */ S->types.virtualMods);
d8263 1
a8263 1
xcb_xkb_get_kbd_by_name_replies_types_map_explicit_rtrn (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8265 1
a8265 1
    return /* replies */ S->types.map.explicit_rtrn;
d8269 2
a8270 2
xcb_xkb_get_kbd_by_name_replies_types_map_explicit_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8272 1
a8272 1
    return /* replies */ S->types.totalKeyExplicit;
d8276 2
a8277 2
xcb_xkb_get_kbd_by_name_replies_types_map_explicit_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                  const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8280 2
a8281 2
    i.data = /* replies */ S->types.map.explicit_rtrn;
    i.rem = /* replies */ S->types.totalKeyExplicit;
d8287 1
a8287 1
xcb_xkb_get_kbd_by_name_replies_types_map_modmap_rtrn (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8289 1
a8289 1
    return /* replies */ S->types.map.modmap_rtrn;
d8293 2
a8294 2
xcb_xkb_get_kbd_by_name_replies_types_map_modmap_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                              const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8296 1
a8296 1
    return /* replies */ S->types.totalModMapKeys;
d8300 2
a8301 2
xcb_xkb_get_kbd_by_name_replies_types_map_modmap_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8304 2
a8305 2
    i.data = /* replies */ S->types.map.modmap_rtrn;
    i.rem = /* replies */ S->types.totalModMapKeys;
d8311 1
a8311 1
xcb_xkb_get_kbd_by_name_replies_types_map_vmodmap_rtrn (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8313 1
a8313 1
    return /* replies */ S->types.map.vmodmap_rtrn;
d8317 2
a8318 2
xcb_xkb_get_kbd_by_name_replies_types_map_vmodmap_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                               const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8320 1
a8320 1
    return /* replies */ S->types.totalVModMapKeys;
d8324 2
a8325 2
xcb_xkb_get_kbd_by_name_replies_types_map_vmodmap_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                 const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8328 2
a8329 2
    i.data = /* replies */ S->types.map.vmodmap_rtrn;
    i.rem = /* replies */ S->types.totalVModMapKeys;
d8335 12
a8346 12
xcb_xkb_get_kbd_by_name_replies_types_map_serialize (void                                              **_buffer  /**< */,
                                                     uint8_t                                             nTypes  /**< */,
                                                     uint8_t                                             nKeySyms  /**< */,
                                                     uint8_t                                             nKeyActions  /**< */,
                                                     uint16_t                                            totalActions  /**< */,
                                                     uint8_t                                             totalKeyBehaviors  /**< */,
                                                     uint16_t                                            virtualMods  /**< */,
                                                     uint8_t                                             totalKeyExplicit  /**< */,
                                                     uint8_t                                             totalModMapKeys  /**< */,
                                                     uint8_t                                             totalVModMapKeys  /**< */,
                                                     uint16_t                                            present  /**< */,
                                                     const xcb_xkb_get_kbd_by_name_replies_types_map_t  *_aux  /**< */)
d8351 1
d8355 1
a8355 1
    struct iovec xcb_parts[19];
d8363 1
a8363 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8372 1
d8387 1
a8387 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8396 1
d8411 1
a8411 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8420 1
d8427 1
d8429 1
a8429 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8438 12
d8459 1
a8459 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8468 1
d8478 1
a8478 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8487 1
d8494 12
d8509 1
a8509 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8518 1
d8525 12
d8540 1
a8540 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8549 1
d8556 12
d8571 1
a8571 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8580 1
d8589 1
a8589 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8598 1
d8618 12
a8629 12
xcb_xkb_get_kbd_by_name_replies_types_map_unpack (const void                                   *_buffer  /**< */,
                                                  uint8_t                                       nTypes  /**< */,
                                                  uint8_t                                       nKeySyms  /**< */,
                                                  uint8_t                                       nKeyActions  /**< */,
                                                  uint16_t                                      totalActions  /**< */,
                                                  uint8_t                                       totalKeyBehaviors  /**< */,
                                                  uint16_t                                      virtualMods  /**< */,
                                                  uint8_t                                       totalKeyExplicit  /**< */,
                                                  uint8_t                                       totalModMapKeys  /**< */,
                                                  uint8_t                                       totalVModMapKeys  /**< */,
                                                  uint16_t                                      present  /**< */,
                                                  xcb_xkb_get_kbd_by_name_replies_types_map_t  *_aux  /**< */)
d8636 1
d8643 1
a8643 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8650 1
d8662 1
a8662 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8669 1
d8681 1
a8681 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8688 1
d8694 1
d8696 1
a8696 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8703 10
d8721 1
a8721 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8728 1
d8737 1
a8737 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8744 1
d8750 10
d8763 1
a8763 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8770 1
d8776 10
d8789 1
a8789 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8796 1
d8802 10
d8815 1
a8815 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8822 1
d8830 1
a8830 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d8837 1
d8843 11
a8853 11
xcb_xkb_get_kbd_by_name_replies_types_map_sizeof (const void  *_buffer  /**< */,
                                                  uint8_t      nTypes  /**< */,
                                                  uint8_t      nKeySyms  /**< */,
                                                  uint8_t      nKeyActions  /**< */,
                                                  uint16_t     totalActions  /**< */,
                                                  uint8_t      totalKeyBehaviors  /**< */,
                                                  uint16_t     virtualMods  /**< */,
                                                  uint8_t      totalKeyExplicit  /**< */,
                                                  uint8_t      totalModMapKeys  /**< */,
                                                  uint8_t      totalVModMapKeys  /**< */,
                                                  uint16_t     present  /**< */)
d8860 1
a8860 1
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_type_names (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8862 1
a8862 1
    return /* replies */ S->key_names.valueList.typeNames;
d8866 2
a8867 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_type_names_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                        const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8869 1
a8869 1
    return /* replies */ S->key_names.nTypes;
d8873 2
a8874 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_type_names_end (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                     const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8877 1
a8877 1
    i.data = /* replies */ S->key_names.valueList.typeNames + /* replies */ S->key_names.nTypes;
d8884 1
a8884 1
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_n_levels_per_type (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8886 1
a8886 1
    return /* replies */ S->key_names.valueList.nLevelsPerType;
d8890 2
a8891 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_n_levels_per_type_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                               const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8893 1
a8893 1
    return /* replies */ S->key_names.nTypes;
d8897 2
a8898 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_n_levels_per_type_end (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                            const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8901 1
a8901 1
    i.data = /* replies */ S->key_names.valueList.nLevelsPerType + /* replies */ S->key_names.nTypes;
d8908 1
a8908 1
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_kt_level_names (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8910 1
a8910 1
    return /* replies */ S->key_names.valueList.ktLevelNames;
d8914 2
a8915 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_kt_level_names_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                            const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8917 14
a8930 1
    return xcb_sumof(/* replies */ S->key_names.valueList.nLevelsPerType, /* replies */ S->key_names.nTypes);
d8934 2
a8935 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_kt_level_names_end (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                         const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8938 14
a8951 1
    i.data = /* replies */ S->key_names.valueList.ktLevelNames + xcb_sumof(/* replies */ S->key_names.valueList.nLevelsPerType, /* replies */ S->key_names.nTypes);
d8958 1
a8958 1
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_indicator_names (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8960 1
a8960 1
    return /* replies */ S->key_names.valueList.indicatorNames;
d8964 2
a8965 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_indicator_names_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                             const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8967 1
a8967 1
    return xcb_popcount(/* replies */ S->key_names.indicators);
d8971 2
a8972 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_indicator_names_end (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                          const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8975 1
a8975 1
    i.data = /* replies */ S->key_names.valueList.indicatorNames + xcb_popcount(/* replies */ S->key_names.indicators);
d8982 1
a8982 1
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_virtual_mod_names (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8984 1
a8984 1
    return /* replies */ S->key_names.valueList.virtualModNames;
d8988 2
a8989 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_virtual_mod_names_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                               const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8991 1
a8991 1
    return xcb_popcount(/* replies */ S->key_names.virtualMods);
d8995 2
a8996 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_virtual_mod_names_end (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                            const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d8999 1
a8999 1
    i.data = /* replies */ S->key_names.valueList.virtualModNames + xcb_popcount(/* replies */ S->key_names.virtualMods);
d9006 1
a9006 1
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_groups (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9008 1
a9008 1
    return /* replies */ S->key_names.valueList.groups;
d9012 2
a9013 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_groups_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                    const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9015 1
a9015 1
    return xcb_popcount(/* replies */ S->key_names.groupNames);
d9019 2
a9020 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_groups_end (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                 const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9023 1
a9023 1
    i.data = /* replies */ S->key_names.valueList.groups + xcb_popcount(/* replies */ S->key_names.groupNames);
d9030 1
a9030 1
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_names (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9032 1
a9032 1
    return /* replies */ S->key_names.valueList.keyNames;
d9036 2
a9037 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_names_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                       const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9039 1
a9039 1
    return /* replies */ S->key_names.nKeys;
d9043 2
a9044 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_names_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                         const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9047 2
a9048 2
    i.data = /* replies */ S->key_names.valueList.keyNames;
    i.rem = /* replies */ S->key_names.nKeys;
d9054 1
a9054 1
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_aliases (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9056 1
a9056 1
    return /* replies */ S->key_names.valueList.keyAliases;
d9060 2
a9061 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_aliases_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                         const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9063 1
a9063 1
    return /* replies */ S->key_names.nKeyAliases;
d9067 2
a9068 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_aliases_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                           const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9071 2
a9072 2
    i.data = /* replies */ S->key_names.valueList.keyAliases;
    i.rem = /* replies */ S->key_names.nKeyAliases;
d9078 1
a9078 1
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_radio_group_names (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9080 1
a9080 1
    return /* replies */ S->key_names.valueList.radioGroupNames;
d9084 2
a9085 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_radio_group_names_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                               const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9087 1
a9087 1
    return /* replies */ S->key_names.nRadioGroups;
d9091 2
a9092 2
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_radio_group_names_end (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                            const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9095 1
a9095 1
    i.data = /* replies */ S->key_names.valueList.radioGroupNames + /* replies */ S->key_names.nRadioGroups;
d9102 10
a9111 10
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_serialize (void                                                         **_buffer  /**< */,
                                                                uint8_t                                                        nTypes  /**< */,
                                                                uint32_t                                                       indicators  /**< */,
                                                                uint16_t                                                       virtualMods  /**< */,
                                                                uint8_t                                                        groupNames  /**< */,
                                                                uint8_t                                                        nKeys  /**< */,
                                                                uint8_t                                                        nKeyAliases  /**< */,
                                                                uint8_t                                                        nRadioGroups  /**< */,
                                                                uint32_t                                                       which  /**< */,
                                                                const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t  *_aux  /**< */)
d9116 1
d9118 4
d9124 1
a9124 1
    struct iovec xcb_parts[25];
d9180 1
a9180 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9189 1
d9199 1
a9199 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9208 1
d9215 1
d9217 1
a9217 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9226 12
d9240 11
a9250 2
        xcb_block_len += xcb_sumof(_aux->nLevelsPerType, nTypes) * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_sumof(_aux->nLevelsPerType, nTypes) * sizeof(xcb_atom_t);
d9256 1
a9256 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9265 1
d9275 1
a9275 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9284 1
d9294 1
a9294 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9303 1
d9313 1
a9313 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9322 1
d9332 1
a9332 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9341 1
d9351 1
a9351 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9360 1
d9369 1
a9369 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9378 1
d9398 10
a9407 10
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_unpack (const void                                              *_buffer  /**< */,
                                                             uint8_t                                                  nTypes  /**< */,
                                                             uint32_t                                                 indicators  /**< */,
                                                             uint16_t                                                 virtualMods  /**< */,
                                                             uint8_t                                                  groupNames  /**< */,
                                                             uint8_t                                                  nKeys  /**< */,
                                                             uint8_t                                                  nKeyAliases  /**< */,
                                                             uint8_t                                                  nRadioGroups  /**< */,
                                                             uint32_t                                                 which  /**< */,
                                                             xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t  *_aux  /**< */)
d9414 1
d9416 4
d9465 1
a9465 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9472 1
d9481 1
a9481 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9488 1
d9494 1
d9496 1
a9496 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9503 10
d9515 10
a9524 1
        xcb_block_len += xcb_sumof(_aux->nLevelsPerType, nTypes) * sizeof(xcb_atom_t);
d9530 1
a9530 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9537 1
d9546 1
a9546 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9553 1
d9562 1
a9562 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9569 1
d9578 1
a9578 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9585 1
d9594 1
a9594 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9601 1
d9610 1
a9610 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9617 1
d9625 1
a9625 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9632 1
d9638 9
a9646 9
xcb_xkb_get_kbd_by_name_replies_key_names_value_list_sizeof (const void  *_buffer  /**< */,
                                                             uint8_t      nTypes  /**< */,
                                                             uint32_t     indicators  /**< */,
                                                             uint16_t     virtualMods  /**< */,
                                                             uint8_t      groupNames  /**< */,
                                                             uint8_t      nKeys  /**< */,
                                                             uint8_t      nKeyAliases  /**< */,
                                                             uint8_t      nRadioGroups  /**< */,
                                                             uint32_t     which  /**< */)
d9653 1
a9653 1
xcb_xkb_get_kbd_by_name_replies_types_map (const xcb_xkb_get_kbd_by_name_replies_t *R  /**< */)
d9659 1
a9659 1
xcb_xkb_get_kbd_by_name_replies_compat_map_si_rtrn (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9661 1
a9661 1
    return /* replies */ S->compat_map.si_rtrn;
d9665 2
a9666 2
xcb_xkb_get_kbd_by_name_replies_compat_map_si_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                           const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9668 1
a9668 1
    return /* replies */ S->compat_map.nSIRtrn;
d9672 2
a9673 2
xcb_xkb_get_kbd_by_name_replies_compat_map_si_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                             const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9676 2
a9677 2
    i.data = /* replies */ S->compat_map.si_rtrn;
    i.rem = /* replies */ S->compat_map.nSIRtrn;
d9683 1
a9683 1
xcb_xkb_get_kbd_by_name_replies_compat_map_group_rtrn (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9685 1
a9685 1
    return /* replies */ S->compat_map.group_rtrn;
d9689 2
a9690 2
xcb_xkb_get_kbd_by_name_replies_compat_map_group_rtrn_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                              const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9692 1
a9692 1
    return xcb_popcount(/* replies */ S->compat_map.groupsRtrn);
d9696 2
a9697 2
xcb_xkb_get_kbd_by_name_replies_compat_map_group_rtrn_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                                const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9700 2
a9701 2
    i.data = /* replies */ S->compat_map.group_rtrn;
    i.rem = xcb_popcount(/* replies */ S->compat_map.groupsRtrn);
d9707 1
a9707 1
xcb_xkb_get_kbd_by_name_replies_indicator_maps_maps (const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9709 1
a9709 1
    return /* replies */ S->indicator_maps.maps;
d9713 2
a9714 2
xcb_xkb_get_kbd_by_name_replies_indicator_maps_maps_length (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                            const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9716 1
a9716 1
    return /* replies */ S->indicator_maps.nIndicators;
d9720 2
a9721 2
xcb_xkb_get_kbd_by_name_replies_indicator_maps_maps_iterator (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */,
                                                              const xcb_xkb_get_kbd_by_name_replies_t *S  /**< */)
d9724 2
a9725 2
    i.data = /* replies */ S->indicator_maps.maps;
    i.rem = /* replies */ S->indicator_maps.nIndicators;
d9731 1
a9731 1
xcb_xkb_get_kbd_by_name_replies_key_names_value_list (const xcb_xkb_get_kbd_by_name_replies_t *R  /**< */)
d9737 1
a9737 1
xcb_xkb_get_kbd_by_name_replies_geometry_label_font (const xcb_xkb_get_kbd_by_name_replies_t *R  /**< */)
d9743 3
a9745 3
xcb_xkb_get_kbd_by_name_replies_serialize (void                                    **_buffer  /**< */,
                                           uint16_t                                  reported  /**< */,
                                           const xcb_xkb_get_kbd_by_name_replies_t  *_aux  /**< */)
d9750 1
d9950 1
a9950 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d9959 1
d9965 1
a9965 1
        xcb_align_to = ALIGNOF(xcb_xkb_get_kbd_by_name_replies_types_map_t);
d9998 1
a9998 1
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.pad3 */
d10022 1
a10022 1
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.pad4 */
d10029 1
a10029 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d10038 1
d10046 1
a10046 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d10055 1
d10106 1
a10106 1
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.pad5 */
d10113 1
a10113 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d10122 1
d10228 1
a10228 1
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.pad6 */
d10235 1
a10235 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d10244 1
d10250 1
a10250 1
        xcb_align_to = ALIGNOF(xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t);
d10289 1
a10289 1
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.pad7 */
d10356 1
a10356 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d10365 1
d10374 1
a10374 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d10383 1
d10403 3
a10405 3
xcb_xkb_get_kbd_by_name_replies_unpack (const void                         *_buffer  /**< */,
                                        uint16_t                            reported  /**< */,
                                        xcb_xkb_get_kbd_by_name_replies_t  *_aux  /**< */)
d10412 1
d10575 1
a10575 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d10582 1
d10586 1
a10586 1
        xcb_align_to = ALIGNOF(xcb_xkb_get_kbd_by_name_replies_types_map_t);
d10614 2
a10615 2
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.pad3 */
        _aux->compat_map.pad3 = *(uint8_t *)xcb_tmp;
d10634 17
a10650 17
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.pad4 */
        _aux->compat_map.pad4[0] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[1] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[2] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[3] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[4] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[5] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[6] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[7] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[8] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[9] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[10] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[11] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[12] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[13] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[14] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad4[15] = *(uint8_t *)xcb_tmp;
d10655 1
a10655 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d10662 1
d10669 1
a10669 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d10676 1
d10719 16
a10734 16
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.pad5 */
        _aux->indicator_maps.pad5[0] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad5[1] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad5[2] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad5[3] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad5[4] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad5[5] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad5[6] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad5[7] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad5[8] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad5[9] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad5[10] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad5[11] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad5[12] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad5[13] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad5[14] = *(uint8_t *)xcb_tmp;
d10739 1
a10739 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d10746 1
d10835 5
a10839 5
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.pad6 */
        _aux->key_names.pad6[0] = *(uint8_t *)xcb_tmp;
        _aux->key_names.pad6[1] = *(uint8_t *)xcb_tmp;
        _aux->key_names.pad6[2] = *(uint8_t *)xcb_tmp;
        _aux->key_names.pad6[3] = *(uint8_t *)xcb_tmp;
d10844 1
a10844 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d10851 1
d10855 1
a10855 1
        xcb_align_to = ALIGNOF(xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t);
d10888 2
a10889 2
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.pad7 */
        _aux->geometry.pad7 = *(uint8_t *)xcb_tmp;
d10944 1
a10944 1
        xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d10951 1
d10959 1
a10959 1
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
d10966 1
d10972 2
a10973 2
xcb_xkb_get_kbd_by_name_replies_sizeof (const void  *_buffer  /**< */,
                                        uint16_t     reported  /**< */)
d10979 31
d11011 5
a11015 5
xcb_xkb_get_kbd_by_name (xcb_connection_t      *c  /**< */,
                         xcb_xkb_device_spec_t  deviceSpec  /**< */,
                         uint16_t               need  /**< */,
                         uint16_t               want  /**< */,
                         uint8_t                load  /**< */)
d11018 4
a11021 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_KBD_BY_NAME,
        /* isvoid */ 0
d11044 5
a11048 5
xcb_xkb_get_kbd_by_name_unchecked (xcb_connection_t      *c  /**< */,
                                   xcb_xkb_device_spec_t  deviceSpec  /**< */,
                                   uint16_t               need  /**< */,
                                   uint16_t               want  /**< */,
                                   uint8_t                load  /**< */)
d11051 4
a11054 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_KBD_BY_NAME,
        /* isvoid */ 0
d11077 1
a11077 1
xcb_xkb_get_kbd_by_name_replies (const xcb_xkb_get_kbd_by_name_reply_t *R  /**< */)
d11083 1
a11083 1
xcb_xkb_get_kbd_by_name_reply (xcb_connection_t                  *c  /**< */,
d11085 1
a11085 1
                               xcb_generic_error_t              **e  /**< */)
d11091 1
a11091 1
xcb_xkb_get_device_info_sizeof (const void  *_buffer  /**< */)
d11111 9
d11160 8
a11167 8
xcb_xkb_get_device_info (xcb_connection_t         *c  /**< */,
                         xcb_xkb_device_spec_t     deviceSpec  /**< */,
                         uint16_t                  wanted  /**< */,
                         uint8_t                   allButtons  /**< */,
                         uint8_t                   firstButton  /**< */,
                         uint8_t                   nButtons  /**< */,
                         xcb_xkb_led_class_spec_t  ledClass  /**< */,
                         xcb_xkb_id_spec_t         ledID  /**< */)
d11170 4
a11173 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_DEVICE_INFO,
        /* isvoid */ 0
d11199 8
a11206 8
xcb_xkb_get_device_info_unchecked (xcb_connection_t         *c  /**< */,
                                   xcb_xkb_device_spec_t     deviceSpec  /**< */,
                                   uint16_t                  wanted  /**< */,
                                   uint8_t                   allButtons  /**< */,
                                   uint8_t                   firstButton  /**< */,
                                   uint8_t                   nButtons  /**< */,
                                   xcb_xkb_led_class_spec_t  ledClass  /**< */,
                                   xcb_xkb_id_spec_t         ledID  /**< */)
d11209 4
a11212 4
        /* count */ 2,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_GET_DEVICE_INFO,
        /* isvoid */ 0
d11238 1
a11238 1
xcb_xkb_get_device_info_name (const xcb_xkb_get_device_info_reply_t *R  /**< */)
d11244 1
a11244 1
xcb_xkb_get_device_info_name_length (const xcb_xkb_get_device_info_reply_t *R  /**< */)
d11250 1
a11250 1
xcb_xkb_get_device_info_name_end (const xcb_xkb_get_device_info_reply_t *R  /**< */)
d11260 1
a11260 1
xcb_xkb_get_device_info_btn_actions (const xcb_xkb_get_device_info_reply_t *R  /**< */)
d11263 1
a11263 1
    return (xcb_xkb_action_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_action_t, prev.index) + 0);
d11267 1
a11267 1
xcb_xkb_get_device_info_btn_actions_length (const xcb_xkb_get_device_info_reply_t *R  /**< */)
d11273 1
a11273 1
xcb_xkb_get_device_info_btn_actions_iterator (const xcb_xkb_get_device_info_reply_t *R  /**< */)
d11277 1
a11277 1
    i.data = (xcb_xkb_action_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_xkb_action_t, prev.index));
d11284 1
a11284 1
xcb_xkb_get_device_info_leds_length (const xcb_xkb_get_device_info_reply_t *R  /**< */)
d11290 1
a11290 1
xcb_xkb_get_device_info_leds_iterator (const xcb_xkb_get_device_info_reply_t *R  /**< */)
d11301 1
a11301 1
xcb_xkb_get_device_info_reply (xcb_connection_t                  *c  /**< */,
d11303 1
a11303 1
                               xcb_generic_error_t              **e  /**< */)
d11309 1
a11309 1
xcb_xkb_set_device_info_sizeof (const void  *_buffer  /**< */)
d11357 8
a11364 8
xcb_xkb_set_device_info_checked (xcb_connection_t                *c  /**< */,
                                 xcb_xkb_device_spec_t            deviceSpec  /**< */,
                                 uint8_t                          firstBtn  /**< */,
                                 uint8_t                          nBtns  /**< */,
                                 uint16_t                         change  /**< */,
                                 uint16_t                         nDeviceLedFBs  /**< */,
                                 const xcb_xkb_action_t          *btnActions  /**< */,
                                 const xcb_xkb_device_led_info_t *leds  /**< */)
d11367 4
a11370 4
        /* count */ 6,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_DEVICE_INFO,
        /* isvoid */ 1
d11412 8
a11419 8
xcb_xkb_set_device_info (xcb_connection_t                *c  /**< */,
                         xcb_xkb_device_spec_t            deviceSpec  /**< */,
                         uint8_t                          firstBtn  /**< */,
                         uint8_t                          nBtns  /**< */,
                         uint16_t                         change  /**< */,
                         uint16_t                         nDeviceLedFBs  /**< */,
                         const xcb_xkb_action_t          *btnActions  /**< */,
                         const xcb_xkb_device_led_info_t *leds  /**< */)
d11422 4
a11425 4
        /* count */ 6,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_DEVICE_INFO,
        /* isvoid */ 1
d11466 39
d11506 1
a11506 1
xcb_xkb_set_debugging_flags_sizeof (const void  *_buffer  /**< */)
d11537 7
a11543 7
xcb_xkb_set_debugging_flags (xcb_connection_t        *c  /**< */,
                             uint16_t                 msgLength  /**< */,
                             uint32_t                 affectFlags  /**< */,
                             uint32_t                 flags  /**< */,
                             uint32_t                 affectCtrls  /**< */,
                             uint32_t                 ctrls  /**< */,
                             const xcb_xkb_string8_t *message  /**< */)
d11546 4
a11549 4
        /* count */ 4,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_DEBUGGING_FLAGS,
        /* isvoid */ 0
d11578 7
a11584 7
xcb_xkb_set_debugging_flags_unchecked (xcb_connection_t        *c  /**< */,
                                       uint16_t                 msgLength  /**< */,
                                       uint32_t                 affectFlags  /**< */,
                                       uint32_t                 flags  /**< */,
                                       uint32_t                 affectCtrls  /**< */,
                                       uint32_t                 ctrls  /**< */,
                                       const xcb_xkb_string8_t *message  /**< */)
d11587 4
a11590 4
        /* count */ 4,
        /* ext */ &xcb_xkb_id,
        /* opcode */ XCB_XKB_SET_DEBUGGING_FLAGS,
        /* isvoid */ 0
d11619 1
a11619 1
xcb_xkb_set_debugging_flags_reply (xcb_connection_t                      *c  /**< */,
d11621 1
a11621 1
                                   xcb_generic_error_t                  **e  /**< */)
@


1.1
log
@Update build system and generated files for libxcb 1.10.
@
text
@a20 10

/*****************************************************************************
 **
 ** void xcb_xkb_device_spec_next
 ** 
 ** @@param xcb_xkb_device_spec_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a28 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_device_spec_end
 ** 
 ** @@param xcb_xkb_device_spec_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a38 10

/*****************************************************************************
 **
 ** void xcb_xkb_led_class_spec_next
 ** 
 ** @@param xcb_xkb_led_class_spec_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a46 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_led_class_spec_end
 ** 
 ** @@param xcb_xkb_led_class_spec_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a56 10

/*****************************************************************************
 **
 ** void xcb_xkb_bell_class_spec_next
 ** 
 ** @@param xcb_xkb_bell_class_spec_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a64 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_bell_class_spec_end
 ** 
 ** @@param xcb_xkb_bell_class_spec_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a74 10

/*****************************************************************************
 **
 ** void xcb_xkb_id_spec_next
 ** 
 ** @@param xcb_xkb_id_spec_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a82 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_id_spec_end
 ** 
 ** @@param xcb_xkb_id_spec_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a92 10

/*****************************************************************************
 **
 ** void xcb_xkb_indicator_map_next
 ** 
 ** @@param xcb_xkb_indicator_map_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a100 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_indicator_map_end
 ** 
 ** @@param xcb_xkb_indicator_map_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a110 10

/*****************************************************************************
 **
 ** void xcb_xkb_mod_def_next
 ** 
 ** @@param xcb_xkb_mod_def_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a118 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_mod_def_end
 ** 
 ** @@param xcb_xkb_mod_def_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a128 10

/*****************************************************************************
 **
 ** void xcb_xkb_key_name_next
 ** 
 ** @@param xcb_xkb_key_name_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a136 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_key_name_end
 ** 
 ** @@param xcb_xkb_key_name_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a146 10

/*****************************************************************************
 **
 ** void xcb_xkb_key_alias_next
 ** 
 ** @@param xcb_xkb_key_alias_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a154 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_key_alias_end
 ** 
 ** @@param xcb_xkb_key_alias_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a207 10

/*****************************************************************************
 **
 ** char * xcb_xkb_counted_string_16_string
 ** 
 ** @@param const xcb_xkb_counted_string_16_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a213 10

/*****************************************************************************
 **
 ** int xcb_xkb_counted_string_16_string_length
 ** 
 ** @@param const xcb_xkb_counted_string_16_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a219 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_counted_string_16_string_end
 ** 
 ** @@param const xcb_xkb_counted_string_16_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a229 10

/*****************************************************************************
 **
 ** void * xcb_xkb_counted_string_16_alignment_pad
 ** 
 ** @@param const xcb_xkb_counted_string_16_t *R
 ** @@returns void *
 **
 *****************************************************************************/
 
a236 10

/*****************************************************************************
 **
 ** int xcb_xkb_counted_string_16_alignment_pad_length
 ** 
 ** @@param const xcb_xkb_counted_string_16_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a242 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_counted_string_16_alignment_pad_end
 ** 
 ** @@param const xcb_xkb_counted_string_16_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a253 10

/*****************************************************************************
 **
 ** void xcb_xkb_counted_string_16_next
 ** 
 ** @@param xcb_xkb_counted_string_16_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a264 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_counted_string_16_end
 ** 
 ** @@param xcb_xkb_counted_string_16_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a276 10

/*****************************************************************************
 **
 ** void xcb_xkb_kt_map_entry_next
 ** 
 ** @@param xcb_xkb_kt_map_entry_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a284 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_kt_map_entry_end
 ** 
 ** @@param xcb_xkb_kt_map_entry_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a337 10

/*****************************************************************************
 **
 ** xcb_xkb_kt_map_entry_t * xcb_xkb_key_type_map
 ** 
 ** @@param const xcb_xkb_key_type_t *R
 ** @@returns xcb_xkb_kt_map_entry_t *
 **
 *****************************************************************************/
 
a343 10

/*****************************************************************************
 **
 ** int xcb_xkb_key_type_map_length
 ** 
 ** @@param const xcb_xkb_key_type_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a349 10

/*****************************************************************************
 **
 ** xcb_xkb_kt_map_entry_iterator_t xcb_xkb_key_type_map_iterator
 ** 
 ** @@param const xcb_xkb_key_type_t *R
 ** @@returns xcb_xkb_kt_map_entry_iterator_t
 **
 *****************************************************************************/
 
a359 10

/*****************************************************************************
 **
 ** xcb_xkb_mod_def_t * xcb_xkb_key_type_preserve
 ** 
 ** @@param const xcb_xkb_key_type_t *R
 ** @@returns xcb_xkb_mod_def_t *
 **
 *****************************************************************************/
 
a366 10

/*****************************************************************************
 **
 ** int xcb_xkb_key_type_preserve_length
 ** 
 ** @@param const xcb_xkb_key_type_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a372 10

/*****************************************************************************
 **
 ** xcb_xkb_mod_def_iterator_t xcb_xkb_key_type_preserve_iterator
 ** 
 ** @@param const xcb_xkb_key_type_t *R
 ** @@returns xcb_xkb_mod_def_iterator_t
 **
 *****************************************************************************/
 
a383 10

/*****************************************************************************
 **
 ** void xcb_xkb_key_type_next
 ** 
 ** @@param xcb_xkb_key_type_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a394 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_key_type_end
 ** 
 ** @@param xcb_xkb_key_type_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a437 10

/*****************************************************************************
 **
 ** xcb_keysym_t * xcb_xkb_key_sym_map_syms
 ** 
 ** @@param const xcb_xkb_key_sym_map_t *R
 ** @@returns xcb_keysym_t *
 **
 *****************************************************************************/
 
a443 10

/*****************************************************************************
 **
 ** int xcb_xkb_key_sym_map_syms_length
 ** 
 ** @@param const xcb_xkb_key_sym_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a449 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_key_sym_map_syms_end
 ** 
 ** @@param const xcb_xkb_key_sym_map_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a459 10

/*****************************************************************************
 **
 ** void xcb_xkb_key_sym_map_next
 ** 
 ** @@param xcb_xkb_key_sym_map_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a470 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_key_sym_map_end
 ** 
 ** @@param xcb_xkb_key_sym_map_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a482 10

/*****************************************************************************
 **
 ** void xcb_xkb_common_behavior_next
 ** 
 ** @@param xcb_xkb_common_behavior_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a490 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_common_behavior_end
 ** 
 ** @@param xcb_xkb_common_behavior_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a500 10

/*****************************************************************************
 **
 ** void xcb_xkb_default_behavior_next
 ** 
 ** @@param xcb_xkb_default_behavior_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a508 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_default_behavior_end
 ** 
 ** @@param xcb_xkb_default_behavior_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a518 10

/*****************************************************************************
 **
 ** void xcb_xkb_lock_behavior_next
 ** 
 ** @@param xcb_xkb_lock_behavior_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a526 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_lock_behavior_end
 ** 
 ** @@param xcb_xkb_lock_behavior_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a536 10

/*****************************************************************************
 **
 ** void xcb_xkb_radio_group_behavior_next
 ** 
 ** @@param xcb_xkb_radio_group_behavior_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a544 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_radio_group_behavior_end
 ** 
 ** @@param xcb_xkb_radio_group_behavior_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a554 10

/*****************************************************************************
 **
 ** void xcb_xkb_overlay_behavior_next
 ** 
 ** @@param xcb_xkb_overlay_behavior_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a562 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_overlay_behavior_end
 ** 
 ** @@param xcb_xkb_overlay_behavior_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a572 10

/*****************************************************************************
 **
 ** void xcb_xkb_permament_lock_behavior_next
 ** 
 ** @@param xcb_xkb_permament_lock_behavior_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a580 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_permament_lock_behavior_end
 ** 
 ** @@param xcb_xkb_permament_lock_behavior_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a590 10

/*****************************************************************************
 **
 ** void xcb_xkb_permament_radio_group_behavior_next
 ** 
 ** @@param xcb_xkb_permament_radio_group_behavior_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a598 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_permament_radio_group_behavior_end
 ** 
 ** @@param xcb_xkb_permament_radio_group_behavior_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a608 10

/*****************************************************************************
 **
 ** void xcb_xkb_permament_overlay_behavior_next
 ** 
 ** @@param xcb_xkb_permament_overlay_behavior_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a616 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_permament_overlay_behavior_end
 ** 
 ** @@param xcb_xkb_permament_overlay_behavior_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a626 10

/*****************************************************************************
 **
 ** void xcb_xkb_behavior_next
 ** 
 ** @@param xcb_xkb_behavior_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a634 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_behavior_end
 ** 
 ** @@param xcb_xkb_behavior_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a644 10

/*****************************************************************************
 **
 ** void xcb_xkb_set_behavior_next
 ** 
 ** @@param xcb_xkb_set_behavior_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a652 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_set_behavior_end
 ** 
 ** @@param xcb_xkb_set_behavior_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a662 10

/*****************************************************************************
 **
 ** void xcb_xkb_set_explicit_next
 ** 
 ** @@param xcb_xkb_set_explicit_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a670 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_set_explicit_end
 ** 
 ** @@param xcb_xkb_set_explicit_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a680 10

/*****************************************************************************
 **
 ** void xcb_xkb_key_mod_map_next
 ** 
 ** @@param xcb_xkb_key_mod_map_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a688 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_key_mod_map_end
 ** 
 ** @@param xcb_xkb_key_mod_map_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a698 10

/*****************************************************************************
 **
 ** void xcb_xkb_key_v_mod_map_next
 ** 
 ** @@param xcb_xkb_key_v_mod_map_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a706 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_key_v_mod_map_end
 ** 
 ** @@param xcb_xkb_key_v_mod_map_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a716 10

/*****************************************************************************
 **
 ** void xcb_xkb_kt_set_map_entry_next
 ** 
 ** @@param xcb_xkb_kt_set_map_entry_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a724 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_kt_set_map_entry_end
 ** 
 ** @@param xcb_xkb_kt_set_map_entry_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a777 10

/*****************************************************************************
 **
 ** xcb_xkb_kt_set_map_entry_t * xcb_xkb_set_key_type_entries
 ** 
 ** @@param const xcb_xkb_set_key_type_t *R
 ** @@returns xcb_xkb_kt_set_map_entry_t *
 **
 *****************************************************************************/
 
a783 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_key_type_entries_length
 ** 
 ** @@param const xcb_xkb_set_key_type_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a789 10

/*****************************************************************************
 **
 ** xcb_xkb_kt_set_map_entry_iterator_t xcb_xkb_set_key_type_entries_iterator
 ** 
 ** @@param const xcb_xkb_set_key_type_t *R
 ** @@returns xcb_xkb_kt_set_map_entry_iterator_t
 **
 *****************************************************************************/
 
a799 10

/*****************************************************************************
 **
 ** xcb_xkb_kt_set_map_entry_t * xcb_xkb_set_key_type_preserve_entries
 ** 
 ** @@param const xcb_xkb_set_key_type_t *R
 ** @@returns xcb_xkb_kt_set_map_entry_t *
 **
 *****************************************************************************/
 
a806 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_key_type_preserve_entries_length
 ** 
 ** @@param const xcb_xkb_set_key_type_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a812 10

/*****************************************************************************
 **
 ** xcb_xkb_kt_set_map_entry_iterator_t xcb_xkb_set_key_type_preserve_entries_iterator
 ** 
 ** @@param const xcb_xkb_set_key_type_t *R
 ** @@returns xcb_xkb_kt_set_map_entry_iterator_t
 **
 *****************************************************************************/
 
a823 10

/*****************************************************************************
 **
 ** void xcb_xkb_set_key_type_next
 ** 
 ** @@param xcb_xkb_set_key_type_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a834 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_set_key_type_end
 ** 
 ** @@param xcb_xkb_set_key_type_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a846 10

/*****************************************************************************
 **
 ** void xcb_xkb_string8_next
 ** 
 ** @@param xcb_xkb_string8_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a854 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_string8_end
 ** 
 ** @@param xcb_xkb_string8_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a895 10

/*****************************************************************************
 **
 ** xcb_point_t * xcb_xkb_outline_points
 ** 
 ** @@param const xcb_xkb_outline_t *R
 ** @@returns xcb_point_t *
 **
 *****************************************************************************/
 
a901 10

/*****************************************************************************
 **
 ** int xcb_xkb_outline_points_length
 ** 
 ** @@param const xcb_xkb_outline_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a907 10

/*****************************************************************************
 **
 ** xcb_point_iterator_t xcb_xkb_outline_points_iterator
 ** 
 ** @@param const xcb_xkb_outline_t *R
 ** @@returns xcb_point_iterator_t
 **
 *****************************************************************************/
 
a917 10

/*****************************************************************************
 **
 ** void xcb_xkb_outline_next
 ** 
 ** @@param xcb_xkb_outline_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a928 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_outline_end
 ** 
 ** @@param xcb_xkb_outline_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a976 10

/*****************************************************************************
 **
 ** int xcb_xkb_shape_outlines_length
 ** 
 ** @@param const xcb_xkb_shape_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a982 10

/*****************************************************************************
 **
 ** xcb_xkb_outline_iterator_t xcb_xkb_shape_outlines_iterator
 ** 
 ** @@param const xcb_xkb_shape_t *R
 ** @@returns xcb_xkb_outline_iterator_t
 **
 *****************************************************************************/
 
a992 10

/*****************************************************************************
 **
 ** void xcb_xkb_shape_next
 ** 
 ** @@param xcb_xkb_shape_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1003 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_shape_end
 ** 
 ** @@param xcb_xkb_shape_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1015 10

/*****************************************************************************
 **
 ** void xcb_xkb_key_next
 ** 
 ** @@param xcb_xkb_key_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1023 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_key_end
 ** 
 ** @@param xcb_xkb_key_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1033 10

/*****************************************************************************
 **
 ** void xcb_xkb_overlay_key_next
 ** 
 ** @@param xcb_xkb_overlay_key_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1041 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_overlay_key_end
 ** 
 ** @@param xcb_xkb_overlay_key_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1082 10

/*****************************************************************************
 **
 ** xcb_xkb_overlay_key_t * xcb_xkb_overlay_row_keys
 ** 
 ** @@param const xcb_xkb_overlay_row_t *R
 ** @@returns xcb_xkb_overlay_key_t *
 **
 *****************************************************************************/
 
a1088 10

/*****************************************************************************
 **
 ** int xcb_xkb_overlay_row_keys_length
 ** 
 ** @@param const xcb_xkb_overlay_row_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1094 10

/*****************************************************************************
 **
 ** xcb_xkb_overlay_key_iterator_t xcb_xkb_overlay_row_keys_iterator
 ** 
 ** @@param const xcb_xkb_overlay_row_t *R
 ** @@returns xcb_xkb_overlay_key_iterator_t
 **
 *****************************************************************************/
 
a1104 10

/*****************************************************************************
 **
 ** void xcb_xkb_overlay_row_next
 ** 
 ** @@param xcb_xkb_overlay_row_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1115 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_overlay_row_end
 ** 
 ** @@param xcb_xkb_overlay_row_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1163 10

/*****************************************************************************
 **
 ** int xcb_xkb_overlay_rows_length
 ** 
 ** @@param const xcb_xkb_overlay_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1169 10

/*****************************************************************************
 **
 ** xcb_xkb_overlay_row_iterator_t xcb_xkb_overlay_rows_iterator
 ** 
 ** @@param const xcb_xkb_overlay_t *R
 ** @@returns xcb_xkb_overlay_row_iterator_t
 **
 *****************************************************************************/
 
a1179 10

/*****************************************************************************
 **
 ** void xcb_xkb_overlay_next
 ** 
 ** @@param xcb_xkb_overlay_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1190 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_overlay_end
 ** 
 ** @@param xcb_xkb_overlay_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1233 10

/*****************************************************************************
 **
 ** xcb_xkb_key_t * xcb_xkb_row_keys
 ** 
 ** @@param const xcb_xkb_row_t *R
 ** @@returns xcb_xkb_key_t *
 **
 *****************************************************************************/
 
a1239 10

/*****************************************************************************
 **
 ** int xcb_xkb_row_keys_length
 ** 
 ** @@param const xcb_xkb_row_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1245 10

/*****************************************************************************
 **
 ** xcb_xkb_key_iterator_t xcb_xkb_row_keys_iterator
 ** 
 ** @@param const xcb_xkb_row_t *R
 ** @@returns xcb_xkb_key_iterator_t
 **
 *****************************************************************************/
 
a1255 10

/*****************************************************************************
 **
 ** void xcb_xkb_row_next
 ** 
 ** @@param xcb_xkb_row_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1266 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_row_end
 ** 
 ** @@param xcb_xkb_row_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1309 10

/*****************************************************************************
 **
 ** xcb_xkb_string8_t * xcb_xkb_listing_string
 ** 
 ** @@param const xcb_xkb_listing_t *R
 ** @@returns xcb_xkb_string8_t *
 **
 *****************************************************************************/
 
a1315 10

/*****************************************************************************
 **
 ** int xcb_xkb_listing_string_length
 ** 
 ** @@param const xcb_xkb_listing_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1321 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_listing_string_end
 ** 
 ** @@param const xcb_xkb_listing_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1331 10

/*****************************************************************************
 **
 ** void xcb_xkb_listing_next
 ** 
 ** @@param xcb_xkb_listing_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1342 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_listing_end
 ** 
 ** @@param xcb_xkb_listing_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1397 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_device_led_info_names
 ** 
 ** @@param const xcb_xkb_device_led_info_t *R
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a1403 10

/*****************************************************************************
 **
 ** int xcb_xkb_device_led_info_names_length
 ** 
 ** @@param const xcb_xkb_device_led_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1409 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_device_led_info_names_end
 ** 
 ** @@param const xcb_xkb_device_led_info_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1419 10

/*****************************************************************************
 **
 ** xcb_xkb_indicator_map_t * xcb_xkb_device_led_info_maps
 ** 
 ** @@param const xcb_xkb_device_led_info_t *R
 ** @@returns xcb_xkb_indicator_map_t *
 **
 *****************************************************************************/
 
a1426 10

/*****************************************************************************
 **
 ** int xcb_xkb_device_led_info_maps_length
 ** 
 ** @@param const xcb_xkb_device_led_info_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1432 10

/*****************************************************************************
 **
 ** xcb_xkb_indicator_map_iterator_t xcb_xkb_device_led_info_maps_iterator
 ** 
 ** @@param const xcb_xkb_device_led_info_t *R
 ** @@returns xcb_xkb_indicator_map_iterator_t
 **
 *****************************************************************************/
 
a1443 10

/*****************************************************************************
 **
 ** void xcb_xkb_device_led_info_next
 ** 
 ** @@param xcb_xkb_device_led_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1454 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_device_led_info_end
 ** 
 ** @@param xcb_xkb_device_led_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1466 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_no_action_next
 ** 
 ** @@param xcb_xkb_sa_no_action_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1474 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_no_action_end
 ** 
 ** @@param xcb_xkb_sa_no_action_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1484 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_set_mods_next
 ** 
 ** @@param xcb_xkb_sa_set_mods_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1492 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_set_mods_end
 ** 
 ** @@param xcb_xkb_sa_set_mods_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1502 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_latch_mods_next
 ** 
 ** @@param xcb_xkb_sa_latch_mods_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1510 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_latch_mods_end
 ** 
 ** @@param xcb_xkb_sa_latch_mods_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1520 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_lock_mods_next
 ** 
 ** @@param xcb_xkb_sa_lock_mods_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1528 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_lock_mods_end
 ** 
 ** @@param xcb_xkb_sa_lock_mods_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1538 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_set_group_next
 ** 
 ** @@param xcb_xkb_sa_set_group_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1546 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_set_group_end
 ** 
 ** @@param xcb_xkb_sa_set_group_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1556 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_latch_group_next
 ** 
 ** @@param xcb_xkb_sa_latch_group_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1564 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_latch_group_end
 ** 
 ** @@param xcb_xkb_sa_latch_group_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1574 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_lock_group_next
 ** 
 ** @@param xcb_xkb_sa_lock_group_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1582 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_lock_group_end
 ** 
 ** @@param xcb_xkb_sa_lock_group_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1592 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_move_ptr_next
 ** 
 ** @@param xcb_xkb_sa_move_ptr_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1600 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_move_ptr_end
 ** 
 ** @@param xcb_xkb_sa_move_ptr_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1610 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_ptr_btn_next
 ** 
 ** @@param xcb_xkb_sa_ptr_btn_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1618 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_ptr_btn_end
 ** 
 ** @@param xcb_xkb_sa_ptr_btn_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1628 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_lock_ptr_btn_next
 ** 
 ** @@param xcb_xkb_sa_lock_ptr_btn_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1636 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_lock_ptr_btn_end
 ** 
 ** @@param xcb_xkb_sa_lock_ptr_btn_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1646 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_set_ptr_dflt_next
 ** 
 ** @@param xcb_xkb_sa_set_ptr_dflt_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1654 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_set_ptr_dflt_end
 ** 
 ** @@param xcb_xkb_sa_set_ptr_dflt_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1664 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_iso_lock_next
 ** 
 ** @@param xcb_xkb_sa_iso_lock_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1672 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_iso_lock_end
 ** 
 ** @@param xcb_xkb_sa_iso_lock_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1682 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_terminate_next
 ** 
 ** @@param xcb_xkb_sa_terminate_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1690 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_terminate_end
 ** 
 ** @@param xcb_xkb_sa_terminate_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1700 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_switch_screen_next
 ** 
 ** @@param xcb_xkb_sa_switch_screen_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1708 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_switch_screen_end
 ** 
 ** @@param xcb_xkb_sa_switch_screen_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1718 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_set_controls_next
 ** 
 ** @@param xcb_xkb_sa_set_controls_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1726 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_set_controls_end
 ** 
 ** @@param xcb_xkb_sa_set_controls_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1736 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_lock_controls_next
 ** 
 ** @@param xcb_xkb_sa_lock_controls_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1744 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_lock_controls_end
 ** 
 ** @@param xcb_xkb_sa_lock_controls_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1754 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_action_message_next
 ** 
 ** @@param xcb_xkb_sa_action_message_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1762 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_action_message_end
 ** 
 ** @@param xcb_xkb_sa_action_message_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1772 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_redirect_key_next
 ** 
 ** @@param xcb_xkb_sa_redirect_key_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1780 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_redirect_key_end
 ** 
 ** @@param xcb_xkb_sa_redirect_key_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1790 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_device_btn_next
 ** 
 ** @@param xcb_xkb_sa_device_btn_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1798 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_device_btn_end
 ** 
 ** @@param xcb_xkb_sa_device_btn_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1808 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_lock_device_btn_next
 ** 
 ** @@param xcb_xkb_sa_lock_device_btn_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1816 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_lock_device_btn_end
 ** 
 ** @@param xcb_xkb_sa_lock_device_btn_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1826 10

/*****************************************************************************
 **
 ** void xcb_xkb_sa_device_valuator_next
 ** 
 ** @@param xcb_xkb_sa_device_valuator_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1834 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sa_device_valuator_end
 ** 
 ** @@param xcb_xkb_sa_device_valuator_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1844 10

/*****************************************************************************
 **
 ** void xcb_xkb_si_action_next
 ** 
 ** @@param xcb_xkb_si_action_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1852 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_si_action_end
 ** 
 ** @@param xcb_xkb_si_action_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1862 10

/*****************************************************************************
 **
 ** void xcb_xkb_sym_interpret_next
 ** 
 ** @@param xcb_xkb_sym_interpret_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1870 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_sym_interpret_end
 ** 
 ** @@param xcb_xkb_sym_interpret_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1880 10

/*****************************************************************************
 **
 ** void xcb_xkb_action_next
 ** 
 ** @@param xcb_xkb_action_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a1888 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_action_end
 ** 
 ** @@param xcb_xkb_action_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1898 12

/*****************************************************************************
 **
 ** xcb_xkb_use_extension_cookie_t xcb_xkb_use_extension
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          wantedMajor
 ** @@param uint16_t          wantedMinor
 ** @@returns xcb_xkb_use_extension_cookie_t
 **
 *****************************************************************************/
 
d1910 1
a1910 1
    
d1914 1
a1914 1
    
d1917 1
a1917 1
    
d1922 1
a1922 1
    
a1926 12

/*****************************************************************************
 **
 ** xcb_xkb_use_extension_cookie_t xcb_xkb_use_extension_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          wantedMajor
 ** @@param uint16_t          wantedMinor
 ** @@returns xcb_xkb_use_extension_cookie_t
 **
 *****************************************************************************/
 
d1938 1
a1938 1
    
d1942 1
a1942 1
    
d1945 1
a1945 1
    
d1950 1
a1950 1
    
a1954 12

/*****************************************************************************
 **
 ** xcb_xkb_use_extension_reply_t * xcb_xkb_use_extension_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_xkb_use_extension_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_xkb_use_extension_reply_t *
 **
 *****************************************************************************/
 
a2331 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_select_events_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint16_t               affectWhich
 ** @@param uint16_t               clear
 ** @@param uint16_t               selectAll
 ** @@param uint16_t               affectMap
 ** @@param uint16_t               map
 ** @@param const void            *details
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2348 1
a2348 1
    
d2352 1
a2352 1
    
d2359 1
a2359 1
    
d2366 1
a2366 1
    xcb_parts[4].iov_len = 
d2368 1
a2368 1
    
a2372 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_select_events
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint16_t               affectWhich
 ** @@param uint16_t               clear
 ** @@param uint16_t               selectAll
 ** @@param uint16_t               affectMap
 ** @@param uint16_t               map
 ** @@param const void            *details
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2389 1
a2389 1
    
d2393 1
a2393 1
    
d2400 1
a2400 1
    
d2407 1
a2407 1
    xcb_parts[4].iov_len = 
d2409 1
a2409 1
    
a2413 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_select_events_aux_checked
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xkb_device_spec_t                  deviceSpec
 ** @@param uint16_t                               affectWhich
 ** @@param uint16_t                               clear
 ** @@param uint16_t                               selectAll
 ** @@param uint16_t                               affectMap
 ** @@param uint16_t                               map
 ** @@param const xcb_xkb_select_events_details_t *details
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2430 1
a2430 1
    
d2435 1
a2435 1
    
d2442 1
a2442 1
    
d2448 1
a2448 1
    xcb_parts[4].iov_len = 
d2451 1
a2451 1
    
a2456 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_select_events_aux
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xkb_device_spec_t                  deviceSpec
 ** @@param uint16_t                               affectWhich
 ** @@param uint16_t                               clear
 ** @@param uint16_t                               selectAll
 ** @@param uint16_t                               affectMap
 ** @@param uint16_t                               map
 ** @@param const xcb_xkb_select_events_details_t *details
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2473 1
a2473 1
    
d2478 1
a2478 1
    
d2485 1
a2485 1
    
d2491 1
a2491 1
    xcb_parts[4].iov_len = 
d2494 1
a2494 1
    
a2499 20

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_bell_checked
 ** 
 ** @@param xcb_connection_t          *c
 ** @@param xcb_xkb_device_spec_t      deviceSpec
 ** @@param xcb_xkb_bell_class_spec_t  bellClass
 ** @@param xcb_xkb_id_spec_t          bellID
 ** @@param int8_t                     percent
 ** @@param uint8_t                    forceSound
 ** @@param uint8_t                    eventOnly
 ** @@param int16_t                    pitch
 ** @@param int16_t                    duration
 ** @@param xcb_atom_t                 name
 ** @@param xcb_window_t               window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2519 1
a2519 1
    
d2523 1
a2523 1
    
d2536 1
a2536 1
    
d2541 1
a2541 1
    
a2545 20

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_bell
 ** 
 ** @@param xcb_connection_t          *c
 ** @@param xcb_xkb_device_spec_t      deviceSpec
 ** @@param xcb_xkb_bell_class_spec_t  bellClass
 ** @@param xcb_xkb_id_spec_t          bellID
 ** @@param int8_t                     percent
 ** @@param uint8_t                    forceSound
 ** @@param uint8_t                    eventOnly
 ** @@param int16_t                    pitch
 ** @@param int16_t                    duration
 ** @@param xcb_atom_t                 name
 ** @@param xcb_window_t               window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2565 1
a2565 1
    
d2569 1
a2569 1
    
d2582 1
a2582 1
    
d2587 1
a2587 1
    
a2591 11

/*****************************************************************************
 **
 ** xcb_xkb_get_state_cookie_t xcb_xkb_get_state
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@returns xcb_xkb_get_state_cookie_t
 **
 *****************************************************************************/
 
d2602 1
a2602 1
    
d2606 1
a2606 1
    
d2609 1
a2609 1
    
d2614 1
a2614 1
    
a2618 11

/*****************************************************************************
 **
 ** xcb_xkb_get_state_cookie_t xcb_xkb_get_state_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@returns xcb_xkb_get_state_cookie_t
 **
 *****************************************************************************/
 
d2629 1
a2629 1
    
d2633 1
a2633 1
    
d2636 1
a2636 1
    
d2641 1
a2641 1
    
a2645 12

/*****************************************************************************
 **
 ** xcb_xkb_get_state_reply_t * xcb_xkb_get_state_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_xkb_get_state_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_xkb_get_state_reply_t *
 **
 *****************************************************************************/
 
a2653 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_latch_lock_state_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint8_t                affectModLocks
 ** @@param uint8_t                modLocks
 ** @@param uint8_t                lockGroup
 ** @@param uint8_t                groupLock
 ** @@param uint8_t                affectModLatches
 ** @@param uint8_t                latchGroup
 ** @@param uint16_t               groupLatch
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2671 1
a2671 1
    
d2675 1
a2675 1
    
d2683 1
d2686 1
a2686 1
    
d2691 1
a2691 1
    
a2695 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_latch_lock_state
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint8_t                affectModLocks
 ** @@param uint8_t                modLocks
 ** @@param uint8_t                lockGroup
 ** @@param uint8_t                groupLock
 ** @@param uint8_t                affectModLatches
 ** @@param uint8_t                latchGroup
 ** @@param uint16_t               groupLatch
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2713 1
a2713 1
    
d2717 1
a2717 1
    
d2725 1
d2728 1
a2728 1
    
d2733 1
a2733 1
    
a2737 11

/*****************************************************************************
 **
 ** xcb_xkb_get_controls_cookie_t xcb_xkb_get_controls
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@returns xcb_xkb_get_controls_cookie_t
 **
 *****************************************************************************/
 
d2748 1
a2748 1
    
d2752 1
a2752 1
    
d2755 1
a2755 1
    
d2760 1
a2760 1
    
a2764 11

/*****************************************************************************
 **
 ** xcb_xkb_get_controls_cookie_t xcb_xkb_get_controls_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@returns xcb_xkb_get_controls_cookie_t
 **
 *****************************************************************************/
 
d2775 1
a2775 1
    
d2779 1
a2779 1
    
d2782 1
a2782 1
    
d2787 1
a2787 1
    
a2791 12

/*****************************************************************************
 **
 ** xcb_xkb_get_controls_reply_t * xcb_xkb_get_controls_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_xkb_get_controls_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_xkb_get_controls_reply_t *
 **
 *****************************************************************************/
 
a2799 40

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_controls_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint8_t                affectInternalRealMods
 ** @@param uint8_t                internalRealMods
 ** @@param uint8_t                affectIgnoreLockRealMods
 ** @@param uint8_t                ignoreLockRealMods
 ** @@param uint16_t               affectInternalVirtualMods
 ** @@param uint16_t               internalVirtualMods
 ** @@param uint16_t               affectIgnoreLockVirtualMods
 ** @@param uint16_t               ignoreLockVirtualMods
 ** @@param uint8_t                mouseKeysDfltBtn
 ** @@param uint8_t                groupsWrap
 ** @@param uint16_t               accessXOptions
 ** @@param uint32_t               affectEnabledControls
 ** @@param uint32_t               enabledControls
 ** @@param uint32_t               changeControls
 ** @@param uint16_t               repeatDelay
 ** @@param uint16_t               repeatInterval
 ** @@param uint16_t               slowKeysDelay
 ** @@param uint16_t               debounceDelay
 ** @@param uint16_t               mouseKeysDelay
 ** @@param uint16_t               mouseKeysInterval
 ** @@param uint16_t               mouseKeysTimeToMax
 ** @@param uint16_t               mouseKeysMaxSpeed
 ** @@param int16_t                mouseKeysCurve
 ** @@param uint16_t               accessXTimeout
 ** @@param uint32_t               accessXTimeoutMask
 ** @@param uint32_t               accessXTimeoutValues
 ** @@param uint16_t               accessXTimeoutOptionsMask
 ** @@param uint16_t               accessXTimeoutOptionsValues
 ** @@param const uint8_t         *perKeyRepeat
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2839 1
a2839 1
    
d2843 1
a2843 1
    
d2875 1
a2875 1
    
d2880 1
a2880 1
    
a2884 40

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_controls
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint8_t                affectInternalRealMods
 ** @@param uint8_t                internalRealMods
 ** @@param uint8_t                affectIgnoreLockRealMods
 ** @@param uint8_t                ignoreLockRealMods
 ** @@param uint16_t               affectInternalVirtualMods
 ** @@param uint16_t               internalVirtualMods
 ** @@param uint16_t               affectIgnoreLockVirtualMods
 ** @@param uint16_t               ignoreLockVirtualMods
 ** @@param uint8_t                mouseKeysDfltBtn
 ** @@param uint8_t                groupsWrap
 ** @@param uint16_t               accessXOptions
 ** @@param uint32_t               affectEnabledControls
 ** @@param uint32_t               enabledControls
 ** @@param uint32_t               changeControls
 ** @@param uint16_t               repeatDelay
 ** @@param uint16_t               repeatInterval
 ** @@param uint16_t               slowKeysDelay
 ** @@param uint16_t               debounceDelay
 ** @@param uint16_t               mouseKeysDelay
 ** @@param uint16_t               mouseKeysInterval
 ** @@param uint16_t               mouseKeysTimeToMax
 ** @@param uint16_t               mouseKeysMaxSpeed
 ** @@param int16_t                mouseKeysCurve
 ** @@param uint16_t               accessXTimeout
 ** @@param uint32_t               accessXTimeoutMask
 ** @@param uint32_t               accessXTimeoutValues
 ** @@param uint16_t               accessXTimeoutOptionsMask
 ** @@param uint16_t               accessXTimeoutOptionsValues
 ** @@param const uint8_t         *perKeyRepeat
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2924 1
a2924 1
    
d2928 1
a2928 1
    
d2960 1
a2960 1
    
d2965 1
a2965 1
    
a2969 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_map_map_types_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2976 10

/*****************************************************************************
 **
 ** xcb_xkb_key_type_iterator_t xcb_xkb_get_map_map_types_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns xcb_xkb_key_type_iterator_t
 **
 *****************************************************************************/
 
a2987 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_map_map_syms_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2994 10

/*****************************************************************************
 **
 ** xcb_xkb_key_sym_map_iterator_t xcb_xkb_get_map_map_syms_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns xcb_xkb_key_sym_map_iterator_t
 **
 *****************************************************************************/
 
a3005 10

/*****************************************************************************
 **
 ** uint8_t * xcb_xkb_get_map_map_acts_rtrn_count
 ** 
 ** @@param const xcb_xkb_get_map_map_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a3011 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_map_map_acts_rtrn_count_length
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3018 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_map_map_acts_rtrn_count_end
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3029 64

/*****************************************************************************
 **
 ** uint8_t * xcb_xkb_get_map_map_alignment_pad
 ** 
 ** @@param const xcb_xkb_get_map_map_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
uint8_t *
xcb_xkb_get_map_map_alignment_pad (const xcb_xkb_get_map_map_t *S  /**< */)
{
    return /* map */ S->alignment_pad;
}


/*****************************************************************************
 **
 ** int xcb_xkb_get_map_map_alignment_pad_length
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
int
xcb_xkb_get_map_map_alignment_pad_length (const xcb_xkb_get_map_reply_t *R  /**< */,
                                          const xcb_xkb_get_map_map_t *S  /**< */)
{
    return (((R->nKeyActions + 3) & (~3)) - R->nKeyActions);
}


/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_map_map_alignment_pad_end
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
xcb_generic_iterator_t
xcb_xkb_get_map_map_alignment_pad_end (const xcb_xkb_get_map_reply_t *R  /**< */,
                                       const xcb_xkb_get_map_map_t *S  /**< */)
{
    xcb_generic_iterator_t i;
    i.data = /* map */ S->alignment_pad + (((R->nKeyActions + 3) & (~3)) - R->nKeyActions);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}


/*****************************************************************************
 **
 ** xcb_xkb_action_t * xcb_xkb_get_map_map_acts_rtrn_acts
 ** 
 ** @@param const xcb_xkb_get_map_map_t *S
 ** @@returns xcb_xkb_action_t *
 **
 *****************************************************************************/
 
a3035 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_map_map_acts_rtrn_acts_length
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3042 10

/*****************************************************************************
 **
 ** xcb_xkb_action_iterator_t xcb_xkb_get_map_map_acts_rtrn_acts_iterator
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns xcb_xkb_action_iterator_t
 **
 *****************************************************************************/
 
a3053 10

/*****************************************************************************
 **
 ** xcb_xkb_set_behavior_t * xcb_xkb_get_map_map_behaviors_rtrn
 ** 
 ** @@param const xcb_xkb_get_map_map_t *S
 ** @@returns xcb_xkb_set_behavior_t *
 **
 *****************************************************************************/
 
a3059 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_map_map_behaviors_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3066 10

/*****************************************************************************
 **
 ** xcb_xkb_set_behavior_iterator_t xcb_xkb_get_map_map_behaviors_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns xcb_xkb_set_behavior_iterator_t
 **
 *****************************************************************************/
 
a3077 10

/*****************************************************************************
 **
 ** uint8_t * xcb_xkb_get_map_map_vmods_rtrn
 ** 
 ** @@param const xcb_xkb_get_map_map_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a3083 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_map_map_vmods_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3090 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_map_map_vmods_rtrn_end
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3101 64

/*****************************************************************************
 **
 ** uint8_t * xcb_xkb_get_map_map_alignment_pad_2
 ** 
 ** @@param const xcb_xkb_get_map_map_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
uint8_t *
xcb_xkb_get_map_map_alignment_pad_2 (const xcb_xkb_get_map_map_t *S  /**< */)
{
    return /* map */ S->alignment_pad2;
}


/*****************************************************************************
 **
 ** int xcb_xkb_get_map_map_alignment_pad_2_length
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
int
xcb_xkb_get_map_map_alignment_pad_2_length (const xcb_xkb_get_map_reply_t *R  /**< */,
                                            const xcb_xkb_get_map_map_t *S  /**< */)
{
    return (((xcb_popcount(R->virtualMods) + 3) & (~3)) - xcb_popcount(R->virtualMods));
}


/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_map_map_alignment_pad_2_end
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
xcb_generic_iterator_t
xcb_xkb_get_map_map_alignment_pad_2_end (const xcb_xkb_get_map_reply_t *R  /**< */,
                                         const xcb_xkb_get_map_map_t *S  /**< */)
{
    xcb_generic_iterator_t i;
    i.data = /* map */ S->alignment_pad2 + (((xcb_popcount(R->virtualMods) + 3) & (~3)) - xcb_popcount(R->virtualMods));
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}


/*****************************************************************************
 **
 ** xcb_xkb_set_explicit_t * xcb_xkb_get_map_map_explicit_rtrn
 ** 
 ** @@param const xcb_xkb_get_map_map_t *S
 ** @@returns xcb_xkb_set_explicit_t *
 **
 *****************************************************************************/
 
a3107 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_map_map_explicit_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3114 10

/*****************************************************************************
 **
 ** xcb_xkb_set_explicit_iterator_t xcb_xkb_get_map_map_explicit_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns xcb_xkb_set_explicit_iterator_t
 **
 *****************************************************************************/
 
a3125 64

/*****************************************************************************
 **
 ** uint16_t * xcb_xkb_get_map_map_alignment_pad_3
 ** 
 ** @@param const xcb_xkb_get_map_map_t *S
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
uint16_t *
xcb_xkb_get_map_map_alignment_pad_3 (const xcb_xkb_get_map_map_t *S  /**< */)
{
    return /* map */ S->alignment_pad3;
}


/*****************************************************************************
 **
 ** int xcb_xkb_get_map_map_alignment_pad_3_length
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
int
xcb_xkb_get_map_map_alignment_pad_3_length (const xcb_xkb_get_map_reply_t *R  /**< */,
                                            const xcb_xkb_get_map_map_t *S  /**< */)
{
    return (((R->totalKeyExplicit + 1) & (~1)) - R->totalKeyExplicit);
}


/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_map_map_alignment_pad_3_end
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
xcb_generic_iterator_t
xcb_xkb_get_map_map_alignment_pad_3_end (const xcb_xkb_get_map_reply_t *R  /**< */,
                                         const xcb_xkb_get_map_map_t *S  /**< */)
{
    xcb_generic_iterator_t i;
    i.data = /* map */ S->alignment_pad3 + (((R->totalKeyExplicit + 1) & (~1)) - R->totalKeyExplicit);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}


/*****************************************************************************
 **
 ** xcb_xkb_key_mod_map_t * xcb_xkb_get_map_map_modmap_rtrn
 ** 
 ** @@param const xcb_xkb_get_map_map_t *S
 ** @@returns xcb_xkb_key_mod_map_t *
 **
 *****************************************************************************/
 
a3131 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_map_map_modmap_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3138 10

/*****************************************************************************
 **
 ** xcb_xkb_key_mod_map_iterator_t xcb_xkb_get_map_map_modmap_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns xcb_xkb_key_mod_map_iterator_t
 **
 *****************************************************************************/
 
a3149 64

/*****************************************************************************
 **
 ** uint16_t * xcb_xkb_get_map_map_alignment_pad_4
 ** 
 ** @@param const xcb_xkb_get_map_map_t *S
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
uint16_t *
xcb_xkb_get_map_map_alignment_pad_4 (const xcb_xkb_get_map_map_t *S  /**< */)
{
    return /* map */ S->alignment_pad4;
}


/*****************************************************************************
 **
 ** int xcb_xkb_get_map_map_alignment_pad_4_length
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
int
xcb_xkb_get_map_map_alignment_pad_4_length (const xcb_xkb_get_map_reply_t *R  /**< */,
                                            const xcb_xkb_get_map_map_t *S  /**< */)
{
    return (((R->totalModMapKeys + 1) & (~1)) - R->totalModMapKeys);
}


/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_map_map_alignment_pad_4_end
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
xcb_generic_iterator_t
xcb_xkb_get_map_map_alignment_pad_4_end (const xcb_xkb_get_map_reply_t *R  /**< */,
                                         const xcb_xkb_get_map_map_t *S  /**< */)
{
    xcb_generic_iterator_t i;
    i.data = /* map */ S->alignment_pad4 + (((R->totalModMapKeys + 1) & (~1)) - R->totalModMapKeys);
    i.rem = 0;
    i.index = (char *) i.data - (char *) S;
    return i;
}


/*****************************************************************************
 **
 ** xcb_xkb_key_v_mod_map_t * xcb_xkb_get_map_map_vmodmap_rtrn
 ** 
 ** @@param const xcb_xkb_get_map_map_t *S
 ** @@returns xcb_xkb_key_v_mod_map_t *
 **
 *****************************************************************************/
 
a3155 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_map_map_vmodmap_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3162 10

/*****************************************************************************
 **
 ** xcb_xkb_key_v_mod_map_iterator_t xcb_xkb_get_map_map_vmodmap_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_map_map_t *R
 ** @@returns xcb_xkb_key_v_mod_map_iterator_t
 **
 *****************************************************************************/
 
d3194 1
a3194 1
    struct iovec xcb_parts[27];
d3263 1
a3273 6
        /* alignment_pad */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->alignment_pad;
        xcb_block_len += (((nKeyActions + 3) & (~3)) - nKeyActions) * sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = (((nKeyActions + 3) & (~3)) - nKeyActions) * sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
d3326 1
a3336 6
        /* alignment_pad2 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->alignment_pad2;
        xcb_block_len += (((xcb_popcount(virtualMods) + 3) & (~3)) - xcb_popcount(virtualMods)) * sizeof(xcb_keycode_t);
        xcb_parts[xcb_parts_idx].iov_len = (((xcb_popcount(virtualMods) + 3) & (~3)) - xcb_popcount(virtualMods)) * sizeof(xcb_keycode_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint8_t);
d3355 1
a3365 6
        /* alignment_pad3 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->alignment_pad3;
        xcb_block_len += (((totalKeyExplicit + 1) & (~1)) - totalKeyExplicit) * sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = (((totalKeyExplicit + 1) & (~1)) - totalKeyExplicit) * sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
d3384 1
a3394 6
        /* alignment_pad4 */
        xcb_parts[xcb_parts_idx].iov_base = (char *) _aux->alignment_pad4;
        xcb_block_len += (((totalModMapKeys + 1) & (~1)) - totalModMapKeys) * sizeof(uint16_t);
        xcb_parts[xcb_parts_idx].iov_len = (((totalModMapKeys + 1) & (~1)) - totalModMapKeys) * sizeof(uint16_t);
        xcb_parts_idx++;
        xcb_align_to = ALIGNOF(uint16_t);
d3515 1
a3523 5
        /* alignment_pad */
        _aux->alignment_pad = (uint8_t *)xcb_tmp;
        xcb_block_len += (((nKeyActions + 3) & (~3)) - nKeyActions) * sizeof(xcb_keycode_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
d3567 1
a3575 5
        /* alignment_pad2 */
        _aux->alignment_pad2 = (uint8_t *)xcb_tmp;
        xcb_block_len += (((xcb_popcount(virtualMods) + 3) & (~3)) - xcb_popcount(virtualMods)) * sizeof(xcb_keycode_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint8_t);
d3591 1
a3599 5
        /* alignment_pad3 */
        _aux->alignment_pad3 = (uint16_t *)xcb_tmp;
        xcb_block_len += (((totalKeyExplicit + 1) & (~1)) - totalKeyExplicit) * sizeof(uint16_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint16_t);
d3615 1
a3623 5
        /* alignment_pad4 */
        _aux->alignment_pad4 = (uint16_t *)xcb_tmp;
        xcb_block_len += (((totalModMapKeys + 1) & (~1)) - totalModMapKeys) * sizeof(uint16_t);
        xcb_tmp += xcb_block_len;
        xcb_align_to = ALIGNOF(uint16_t);
a3668 28

/*****************************************************************************
 **
 ** xcb_xkb_get_map_cookie_t xcb_xkb_get_map
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint16_t               full
 ** @@param uint16_t               partial
 ** @@param uint8_t                firstType
 ** @@param uint8_t                nTypes
 ** @@param xcb_keycode_t          firstKeySym
 ** @@param uint8_t                nKeySyms
 ** @@param xcb_keycode_t          firstKeyAction
 ** @@param uint8_t                nKeyActions
 ** @@param xcb_keycode_t          firstKeyBehavior
 ** @@param uint8_t                nKeyBehaviors
 ** @@param uint16_t               virtualMods
 ** @@param xcb_keycode_t          firstKeyExplicit
 ** @@param uint8_t                nKeyExplicit
 ** @@param xcb_keycode_t          firstModMapKey
 ** @@param uint8_t                nModMapKeys
 ** @@param xcb_keycode_t          firstVModMapKey
 ** @@param uint8_t                nVModMapKeys
 ** @@returns xcb_xkb_get_map_cookie_t
 **
 *****************************************************************************/
 
d3696 1
a3696 1
    
d3700 1
a3700 1
    
d3720 1
a3720 1
    
d3725 1
a3725 1
    
a3729 28

/*****************************************************************************
 **
 ** xcb_xkb_get_map_cookie_t xcb_xkb_get_map_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint16_t               full
 ** @@param uint16_t               partial
 ** @@param uint8_t                firstType
 ** @@param uint8_t                nTypes
 ** @@param xcb_keycode_t          firstKeySym
 ** @@param uint8_t                nKeySyms
 ** @@param xcb_keycode_t          firstKeyAction
 ** @@param uint8_t                nKeyActions
 ** @@param xcb_keycode_t          firstKeyBehavior
 ** @@param uint8_t                nKeyBehaviors
 ** @@param uint16_t               virtualMods
 ** @@param xcb_keycode_t          firstKeyExplicit
 ** @@param uint8_t                nKeyExplicit
 ** @@param xcb_keycode_t          firstModMapKey
 ** @@param uint8_t                nModMapKeys
 ** @@param xcb_keycode_t          firstVModMapKey
 ** @@param uint8_t                nVModMapKeys
 ** @@returns xcb_xkb_get_map_cookie_t
 **
 *****************************************************************************/
 
d3757 1
a3757 1
    
d3761 1
a3761 1
    
d3781 1
a3781 1
    
d3786 1
a3786 1
    
a3790 10

/*****************************************************************************
 **
 ** xcb_xkb_get_map_map_t * xcb_xkb_get_map_map
 ** 
 ** @@param const xcb_xkb_get_map_reply_t *R
 ** @@returns xcb_xkb_get_map_map_t *
 **
 *****************************************************************************/
 
a3796 12

/*****************************************************************************
 **
 ** xcb_xkb_get_map_reply_t * xcb_xkb_get_map_reply
 ** 
 ** @@param xcb_connection_t          *c
 ** @@param xcb_xkb_get_map_cookie_t   cookie
 ** @@param xcb_generic_error_t      **e
 ** @@returns xcb_xkb_get_map_reply_t *
 **
 *****************************************************************************/
 
a3804 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_map_values_types_length
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3811 10

/*****************************************************************************
 **
 ** xcb_xkb_set_key_type_iterator_t xcb_xkb_set_map_values_types_iterator
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns xcb_xkb_set_key_type_iterator_t
 **
 *****************************************************************************/
 
a3822 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_map_values_syms_length
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3829 10

/*****************************************************************************
 **
 ** xcb_xkb_key_sym_map_iterator_t xcb_xkb_set_map_values_syms_iterator
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns xcb_xkb_key_sym_map_iterator_t
 **
 *****************************************************************************/
 
a3840 10

/*****************************************************************************
 **
 ** uint8_t * xcb_xkb_set_map_values_actions_count
 ** 
 ** @@param const xcb_xkb_set_map_values_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a3846 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_map_values_actions_count_length
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3853 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_set_map_values_actions_count_end
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3864 10

/*****************************************************************************
 **
 ** xcb_xkb_action_t * xcb_xkb_set_map_values_actions
 ** 
 ** @@param const xcb_xkb_set_map_values_t *S
 ** @@returns xcb_xkb_action_t *
 **
 *****************************************************************************/
 
a3870 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_map_values_actions_length
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3877 10

/*****************************************************************************
 **
 ** xcb_xkb_action_iterator_t xcb_xkb_set_map_values_actions_iterator
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns xcb_xkb_action_iterator_t
 **
 *****************************************************************************/
 
a3888 10

/*****************************************************************************
 **
 ** xcb_xkb_set_behavior_t * xcb_xkb_set_map_values_behaviors
 ** 
 ** @@param const xcb_xkb_set_map_values_t *S
 ** @@returns xcb_xkb_set_behavior_t *
 **
 *****************************************************************************/
 
a3894 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_map_values_behaviors_length
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3901 10

/*****************************************************************************
 **
 ** xcb_xkb_set_behavior_iterator_t xcb_xkb_set_map_values_behaviors_iterator
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns xcb_xkb_set_behavior_iterator_t
 **
 *****************************************************************************/
 
a3912 10

/*****************************************************************************
 **
 ** uint8_t * xcb_xkb_set_map_values_vmods
 ** 
 ** @@param const xcb_xkb_set_map_values_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a3918 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_map_values_vmods_length
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3925 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_set_map_values_vmods_end
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3936 10

/*****************************************************************************
 **
 ** xcb_xkb_set_explicit_t * xcb_xkb_set_map_values_explicit
 ** 
 ** @@param const xcb_xkb_set_map_values_t *S
 ** @@returns xcb_xkb_set_explicit_t *
 **
 *****************************************************************************/
 
a3942 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_map_values_explicit_length
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3949 10

/*****************************************************************************
 **
 ** xcb_xkb_set_explicit_iterator_t xcb_xkb_set_map_values_explicit_iterator
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns xcb_xkb_set_explicit_iterator_t
 **
 *****************************************************************************/
 
a3960 10

/*****************************************************************************
 **
 ** xcb_xkb_key_mod_map_t * xcb_xkb_set_map_values_modmap
 ** 
 ** @@param const xcb_xkb_set_map_values_t *S
 ** @@returns xcb_xkb_key_mod_map_t *
 **
 *****************************************************************************/
 
a3966 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_map_values_modmap_length
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3973 10

/*****************************************************************************
 **
 ** xcb_xkb_key_mod_map_iterator_t xcb_xkb_set_map_values_modmap_iterator
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns xcb_xkb_key_mod_map_iterator_t
 **
 *****************************************************************************/
 
a3984 10

/*****************************************************************************
 **
 ** xcb_xkb_key_v_mod_map_t * xcb_xkb_set_map_values_vmodmap
 ** 
 ** @@param const xcb_xkb_set_map_values_t *S
 ** @@returns xcb_xkb_key_v_mod_map_t *
 **
 *****************************************************************************/
 
a3990 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_map_values_vmodmap_length
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3997 10

/*****************************************************************************
 **
 ** xcb_xkb_key_v_mod_map_iterator_t xcb_xkb_set_map_values_vmodmap_iterator
 ** 
 ** @@param const xcb_xkb_set_map_values_t *R
 ** @@returns xcb_xkb_key_v_mod_map_iterator_t
 **
 *****************************************************************************/
 
a4423 37

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_map_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint16_t               present
 ** @@param uint16_t               flags
 ** @@param xcb_keycode_t          minKeyCode
 ** @@param xcb_keycode_t          maxKeyCode
 ** @@param uint8_t                firstType
 ** @@param uint8_t                nTypes
 ** @@param xcb_keycode_t          firstKeySym
 ** @@param uint8_t                nKeySyms
 ** @@param uint16_t               totalSyms
 ** @@param xcb_keycode_t          firstKeyAction
 ** @@param uint8_t                nKeyActions
 ** @@param uint16_t               totalActions
 ** @@param xcb_keycode_t          firstKeyBehavior
 ** @@param uint8_t                nKeyBehaviors
 ** @@param uint8_t                totalKeyBehaviors
 ** @@param xcb_keycode_t          firstKeyExplicit
 ** @@param uint8_t                nKeyExplicit
 ** @@param uint8_t                totalKeyExplicit
 ** @@param xcb_keycode_t          firstModMapKey
 ** @@param uint8_t                nModMapKeys
 ** @@param uint8_t                totalModMapKeys
 ** @@param xcb_keycode_t          firstVModMapKey
 ** @@param uint8_t                nVModMapKeys
 ** @@param uint8_t                totalVModMapKeys
 ** @@param uint16_t               virtualMods
 ** @@param const void            *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4460 1
a4460 1
    
d4464 1
a4464 1
    
d4491 1
a4491 1
    
d4498 1
a4498 1
    xcb_parts[4].iov_len = 
d4500 1
a4500 1
    
a4504 37

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_map
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint16_t               present
 ** @@param uint16_t               flags
 ** @@param xcb_keycode_t          minKeyCode
 ** @@param xcb_keycode_t          maxKeyCode
 ** @@param uint8_t                firstType
 ** @@param uint8_t                nTypes
 ** @@param xcb_keycode_t          firstKeySym
 ** @@param uint8_t                nKeySyms
 ** @@param uint16_t               totalSyms
 ** @@param xcb_keycode_t          firstKeyAction
 ** @@param uint8_t                nKeyActions
 ** @@param uint16_t               totalActions
 ** @@param xcb_keycode_t          firstKeyBehavior
 ** @@param uint8_t                nKeyBehaviors
 ** @@param uint8_t                totalKeyBehaviors
 ** @@param xcb_keycode_t          firstKeyExplicit
 ** @@param uint8_t                nKeyExplicit
 ** @@param uint8_t                totalKeyExplicit
 ** @@param xcb_keycode_t          firstModMapKey
 ** @@param uint8_t                nModMapKeys
 ** @@param uint8_t                totalModMapKeys
 ** @@param xcb_keycode_t          firstVModMapKey
 ** @@param uint8_t                nVModMapKeys
 ** @@param uint8_t                totalVModMapKeys
 ** @@param uint16_t               virtualMods
 ** @@param const void            *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4541 1
a4541 1
    
d4545 1
a4545 1
    
d4572 1
a4572 1
    
d4579 1
a4579 1
    xcb_parts[4].iov_len = 
d4581 1
a4581 1
    
a4585 37

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_map_aux_checked
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_xkb_device_spec_t           deviceSpec
 ** @@param uint16_t                        present
 ** @@param uint16_t                        flags
 ** @@param xcb_keycode_t                   minKeyCode
 ** @@param xcb_keycode_t                   maxKeyCode
 ** @@param uint8_t                         firstType
 ** @@param uint8_t                         nTypes
 ** @@param xcb_keycode_t                   firstKeySym
 ** @@param uint8_t                         nKeySyms
 ** @@param uint16_t                        totalSyms
 ** @@param xcb_keycode_t                   firstKeyAction
 ** @@param uint8_t                         nKeyActions
 ** @@param uint16_t                        totalActions
 ** @@param xcb_keycode_t                   firstKeyBehavior
 ** @@param uint8_t                         nKeyBehaviors
 ** @@param uint8_t                         totalKeyBehaviors
 ** @@param xcb_keycode_t                   firstKeyExplicit
 ** @@param uint8_t                         nKeyExplicit
 ** @@param uint8_t                         totalKeyExplicit
 ** @@param xcb_keycode_t                   firstModMapKey
 ** @@param uint8_t                         nModMapKeys
 ** @@param uint8_t                         totalModMapKeys
 ** @@param xcb_keycode_t                   firstVModMapKey
 ** @@param uint8_t                         nVModMapKeys
 ** @@param uint8_t                         totalVModMapKeys
 ** @@param uint16_t                        virtualMods
 ** @@param const xcb_xkb_set_map_values_t *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4622 1
a4622 1
    
d4627 1
a4627 1
    
d4654 1
a4654 1
    
d4660 1
a4660 1
    xcb_parts[4].iov_len = 
d4663 1
a4663 1
    
a4668 37

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_map_aux
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_xkb_device_spec_t           deviceSpec
 ** @@param uint16_t                        present
 ** @@param uint16_t                        flags
 ** @@param xcb_keycode_t                   minKeyCode
 ** @@param xcb_keycode_t                   maxKeyCode
 ** @@param uint8_t                         firstType
 ** @@param uint8_t                         nTypes
 ** @@param xcb_keycode_t                   firstKeySym
 ** @@param uint8_t                         nKeySyms
 ** @@param uint16_t                        totalSyms
 ** @@param xcb_keycode_t                   firstKeyAction
 ** @@param uint8_t                         nKeyActions
 ** @@param uint16_t                        totalActions
 ** @@param xcb_keycode_t                   firstKeyBehavior
 ** @@param uint8_t                         nKeyBehaviors
 ** @@param uint8_t                         totalKeyBehaviors
 ** @@param xcb_keycode_t                   firstKeyExplicit
 ** @@param uint8_t                         nKeyExplicit
 ** @@param uint8_t                         totalKeyExplicit
 ** @@param xcb_keycode_t                   firstModMapKey
 ** @@param uint8_t                         nModMapKeys
 ** @@param uint8_t                         totalModMapKeys
 ** @@param xcb_keycode_t                   firstVModMapKey
 ** @@param uint8_t                         nVModMapKeys
 ** @@param uint8_t                         totalVModMapKeys
 ** @@param uint16_t                        virtualMods
 ** @@param const xcb_xkb_set_map_values_t *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4705 1
a4705 1
    
d4710 1
a4710 1
    
d4737 1
a4737 1
    
d4743 1
a4743 1
    xcb_parts[4].iov_len = 
d4746 1
a4746 1
    
a4794 15

/*****************************************************************************
 **
 ** xcb_xkb_get_compat_map_cookie_t xcb_xkb_get_compat_map
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint8_t                groups
 ** @@param uint8_t                getAllSI
 ** @@param uint16_t               firstSI
 ** @@param uint16_t               nSI
 ** @@returns xcb_xkb_get_compat_map_cookie_t
 **
 *****************************************************************************/
 
d4809 1
a4809 1
    
d4813 1
a4813 1
    
d4819 1
a4819 1
    
d4824 1
a4824 1
    
a4828 15

/*****************************************************************************
 **
 ** xcb_xkb_get_compat_map_cookie_t xcb_xkb_get_compat_map_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint8_t                groups
 ** @@param uint8_t                getAllSI
 ** @@param uint16_t               firstSI
 ** @@param uint16_t               nSI
 ** @@returns xcb_xkb_get_compat_map_cookie_t
 **
 *****************************************************************************/
 
d4843 1
a4843 1
    
d4847 1
a4847 1
    
d4853 1
a4853 1
    
d4858 1
a4858 1
    
a4862 10

/*****************************************************************************
 **
 ** xcb_xkb_sym_interpret_t * xcb_xkb_get_compat_map_si_rtrn
 ** 
 ** @@param const xcb_xkb_get_compat_map_reply_t *R
 ** @@returns xcb_xkb_sym_interpret_t *
 **
 *****************************************************************************/
 
a4868 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_compat_map_si_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_compat_map_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4874 10

/*****************************************************************************
 **
 ** xcb_xkb_sym_interpret_iterator_t xcb_xkb_get_compat_map_si_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_compat_map_reply_t *R
 ** @@returns xcb_xkb_sym_interpret_iterator_t
 **
 *****************************************************************************/
 
a4884 10

/*****************************************************************************
 **
 ** xcb_xkb_mod_def_t * xcb_xkb_get_compat_map_group_rtrn
 ** 
 ** @@param const xcb_xkb_get_compat_map_reply_t *R
 ** @@returns xcb_xkb_mod_def_t *
 **
 *****************************************************************************/
 
a4891 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_compat_map_group_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_compat_map_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4897 10

/*****************************************************************************
 **
 ** xcb_xkb_mod_def_iterator_t xcb_xkb_get_compat_map_group_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_compat_map_reply_t *R
 ** @@returns xcb_xkb_mod_def_iterator_t
 **
 *****************************************************************************/
 
a4908 12

/*****************************************************************************
 **
 ** xcb_xkb_get_compat_map_reply_t * xcb_xkb_get_compat_map_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xkb_get_compat_map_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_xkb_get_compat_map_reply_t *
 **
 *****************************************************************************/
 
a4959 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_compat_map_checked
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_xkb_device_spec_t          deviceSpec
 ** @@param uint8_t                        recomputeActions
 ** @@param uint8_t                        truncateSI
 ** @@param uint8_t                        groups
 ** @@param uint16_t                       firstSI
 ** @@param uint16_t                       nSI
 ** @@param const xcb_xkb_sym_interpret_t *si
 ** @@param const xcb_xkb_mod_def_t       *groupMaps
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4977 1
a4977 1
    
d4981 1
a4981 1
    
d4990 1
a4990 1
    
d5005 1
a5005 1
    
a5009 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_compat_map
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_xkb_device_spec_t          deviceSpec
 ** @@param uint8_t                        recomputeActions
 ** @@param uint8_t                        truncateSI
 ** @@param uint8_t                        groups
 ** @@param uint16_t                       firstSI
 ** @@param uint16_t                       nSI
 ** @@param const xcb_xkb_sym_interpret_t *si
 ** @@param const xcb_xkb_mod_def_t       *groupMaps
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5027 1
a5027 1
    
d5031 1
a5031 1
    
d5040 1
a5040 1
    
d5055 1
a5055 1
    
a5059 11

/*****************************************************************************
 **
 ** xcb_xkb_get_indicator_state_cookie_t xcb_xkb_get_indicator_state
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@returns xcb_xkb_get_indicator_state_cookie_t
 **
 *****************************************************************************/
 
d5070 1
a5070 1
    
d5074 1
a5074 1
    
d5077 1
a5077 1
    
d5082 1
a5082 1
    
a5086 11

/*****************************************************************************
 **
 ** xcb_xkb_get_indicator_state_cookie_t xcb_xkb_get_indicator_state_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@returns xcb_xkb_get_indicator_state_cookie_t
 **
 *****************************************************************************/
 
d5097 1
a5097 1
    
d5101 1
a5101 1
    
d5104 1
a5104 1
    
d5109 1
a5109 1
    
a5113 12

/*****************************************************************************
 **
 ** xcb_xkb_get_indicator_state_reply_t * xcb_xkb_get_indicator_state_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xkb_get_indicator_state_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_xkb_get_indicator_state_reply_t *
 **
 *****************************************************************************/
 
a5152 12

/*****************************************************************************
 **
 ** xcb_xkb_get_indicator_map_cookie_t xcb_xkb_get_indicator_map
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint32_t               which
 ** @@returns xcb_xkb_get_indicator_map_cookie_t
 **
 *****************************************************************************/
 
d5164 1
a5164 1
    
d5168 1
a5168 1
    
d5172 1
a5172 1
    
d5177 1
a5177 1
    
a5181 12

/*****************************************************************************
 **
 ** xcb_xkb_get_indicator_map_cookie_t xcb_xkb_get_indicator_map_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint32_t               which
 ** @@returns xcb_xkb_get_indicator_map_cookie_t
 **
 *****************************************************************************/
 
d5193 1
a5193 1
    
d5197 1
a5197 1
    
d5201 1
a5201 1
    
d5206 1
a5206 1
    
a5210 10

/*****************************************************************************
 **
 ** xcb_xkb_indicator_map_t * xcb_xkb_get_indicator_map_maps
 ** 
 ** @@param const xcb_xkb_get_indicator_map_reply_t *R
 ** @@returns xcb_xkb_indicator_map_t *
 **
 *****************************************************************************/
 
a5216 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_indicator_map_maps_length
 ** 
 ** @@param const xcb_xkb_get_indicator_map_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5222 10

/*****************************************************************************
 **
 ** xcb_xkb_indicator_map_iterator_t xcb_xkb_get_indicator_map_maps_iterator
 ** 
 ** @@param const xcb_xkb_get_indicator_map_reply_t *R
 ** @@returns xcb_xkb_indicator_map_iterator_t
 **
 *****************************************************************************/
 
a5232 12

/*****************************************************************************
 **
 ** xcb_xkb_get_indicator_map_reply_t * xcb_xkb_get_indicator_map_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_xkb_get_indicator_map_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_xkb_get_indicator_map_reply_t *
 **
 *****************************************************************************/
 
a5271 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_indicator_map_checked
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_xkb_device_spec_t          deviceSpec
 ** @@param uint32_t                       which
 ** @@param const xcb_xkb_indicator_map_t *maps
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5284 1
a5284 1
    
d5288 1
a5288 1
    
d5292 1
a5292 1
    
d5302 1
a5302 1
    
a5306 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_indicator_map
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_xkb_device_spec_t          deviceSpec
 ** @@param uint32_t                       which
 ** @@param const xcb_xkb_indicator_map_t *maps
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5319 1
a5319 1
    
d5323 1
a5323 1
    
d5327 1
a5327 1
    
d5337 1
a5337 1
    
a5341 14

/*****************************************************************************
 **
 ** xcb_xkb_get_named_indicator_cookie_t xcb_xkb_get_named_indicator
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_xkb_device_spec_t     deviceSpec
 ** @@param xcb_xkb_led_class_spec_t  ledClass
 ** @@param xcb_xkb_id_spec_t         ledID
 ** @@param xcb_atom_t                indicator
 ** @@returns xcb_xkb_get_named_indicator_cookie_t
 **
 *****************************************************************************/
 
d5355 1
a5355 1
    
d5359 1
a5359 1
    
d5365 1
a5365 1
    
d5370 1
a5370 1
    
a5374 14

/*****************************************************************************
 **
 ** xcb_xkb_get_named_indicator_cookie_t xcb_xkb_get_named_indicator_unchecked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_xkb_device_spec_t     deviceSpec
 ** @@param xcb_xkb_led_class_spec_t  ledClass
 ** @@param xcb_xkb_id_spec_t         ledID
 ** @@param xcb_atom_t                indicator
 ** @@returns xcb_xkb_get_named_indicator_cookie_t
 **
 *****************************************************************************/
 
d5388 1
a5388 1
    
d5392 1
a5392 1
    
d5398 1
a5398 1
    
d5403 1
a5403 1
    
a5407 12

/*****************************************************************************
 **
 ** xcb_xkb_get_named_indicator_reply_t * xcb_xkb_get_named_indicator_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xkb_get_named_indicator_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_xkb_get_named_indicator_reply_t *
 **
 *****************************************************************************/
 
a5415 25

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_named_indicator_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_xkb_device_spec_t     deviceSpec
 ** @@param xcb_xkb_led_class_spec_t  ledClass
 ** @@param xcb_xkb_id_spec_t         ledID
 ** @@param xcb_atom_t                indicator
 ** @@param uint8_t                   setState
 ** @@param uint8_t                   on
 ** @@param uint8_t                   setMap
 ** @@param uint8_t                   createMap
 ** @@param uint8_t                   map_flags
 ** @@param uint8_t                   map_whichGroups
 ** @@param uint8_t                   map_groups
 ** @@param uint8_t                   map_whichMods
 ** @@param uint8_t                   map_realMods
 ** @@param uint16_t                  map_vmods
 ** @@param uint32_t                  map_ctrls
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5440 1
a5440 1
    
d5444 1
a5444 1
    
d5462 1
a5462 1
    
d5467 1
a5467 1
    
a5471 25

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_named_indicator
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_xkb_device_spec_t     deviceSpec
 ** @@param xcb_xkb_led_class_spec_t  ledClass
 ** @@param xcb_xkb_id_spec_t         ledID
 ** @@param xcb_atom_t                indicator
 ** @@param uint8_t                   setState
 ** @@param uint8_t                   on
 ** @@param uint8_t                   setMap
 ** @@param uint8_t                   createMap
 ** @@param uint8_t                   map_flags
 ** @@param uint8_t                   map_whichGroups
 ** @@param uint8_t                   map_groups
 ** @@param uint8_t                   map_whichMods
 ** @@param uint8_t                   map_realMods
 ** @@param uint16_t                  map_vmods
 ** @@param uint32_t                  map_ctrls
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5496 1
a5496 1
    
d5500 1
a5500 1
    
d5518 1
a5518 1
    
d5523 1
a5523 1
    
a5527 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_get_names_value_list_type_names
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a5533 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_names_value_list_type_names_length
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5540 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_names_value_list_type_names_end
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5551 10

/*****************************************************************************
 **
 ** uint8_t * xcb_xkb_get_names_value_list_n_levels_per_type
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a5557 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_names_value_list_n_levels_per_type_length
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5564 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_names_value_list_n_levels_per_type_end
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5575 10

/*****************************************************************************
 **
 ** uint8_t * xcb_xkb_get_names_value_list_alignment_pad
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a5581 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_names_value_list_alignment_pad_length
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5588 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_names_value_list_alignment_pad_end
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5599 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_get_names_value_list_kt_level_names
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a5605 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_names_value_list_kt_level_names_length
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5612 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_names_value_list_kt_level_names_end
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5623 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_get_names_value_list_indicator_names
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a5629 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_names_value_list_indicator_names_length
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5636 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_names_value_list_indicator_names_end
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5647 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_get_names_value_list_virtual_mod_names
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a5653 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_names_value_list_virtual_mod_names_length
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5660 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_names_value_list_virtual_mod_names_end
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5671 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_get_names_value_list_groups
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a5677 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_names_value_list_groups_length
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5684 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_names_value_list_groups_end
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a5695 10

/*****************************************************************************
 **
 ** xcb_xkb_key_name_t * xcb_xkb_get_names_value_list_key_names
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *S
 ** @@returns xcb_xkb_key_name_t *
 **
 *****************************************************************************/
 
a5701 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_names_value_list_key_names_length
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5708 10

/*****************************************************************************
 **
 ** xcb_xkb_key_name_iterator_t xcb_xkb_get_names_value_list_key_names_iterator
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns xcb_xkb_key_name_iterator_t
 **
 *****************************************************************************/
 
a5719 10

/*****************************************************************************
 **
 ** xcb_xkb_key_alias_t * xcb_xkb_get_names_value_list_key_aliases
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *S
 ** @@returns xcb_xkb_key_alias_t *
 **
 *****************************************************************************/
 
a5725 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_names_value_list_key_aliases_length
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5732 10

/*****************************************************************************
 **
 ** xcb_xkb_key_alias_iterator_t xcb_xkb_get_names_value_list_key_aliases_iterator
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns xcb_xkb_key_alias_iterator_t
 **
 *****************************************************************************/
 
a5743 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_get_names_value_list_radio_group_names
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a5749 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_names_value_list_radio_group_names_length
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5756 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_names_value_list_radio_group_names_end
 ** 
 ** @@param const xcb_xkb_get_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6277 12

/*****************************************************************************
 **
 ** xcb_xkb_get_names_cookie_t xcb_xkb_get_names
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint32_t               which
 ** @@returns xcb_xkb_get_names_cookie_t
 **
 *****************************************************************************/
 
d6289 1
a6289 1
    
d6293 1
a6293 1
    
d6297 1
a6297 1
    
d6302 1
a6302 1
    
a6306 12

/*****************************************************************************
 **
 ** xcb_xkb_get_names_cookie_t xcb_xkb_get_names_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint32_t               which
 ** @@returns xcb_xkb_get_names_cookie_t
 **
 *****************************************************************************/
 
d6318 1
a6318 1
    
d6322 1
a6322 1
    
d6326 1
a6326 1
    
d6331 1
a6331 1
    
a6335 10

/*****************************************************************************
 **
 ** xcb_xkb_get_names_value_list_t * xcb_xkb_get_names_value_list
 ** 
 ** @@param const xcb_xkb_get_names_reply_t *R
 ** @@returns xcb_xkb_get_names_value_list_t *
 **
 *****************************************************************************/
 
a6341 12

/*****************************************************************************
 **
 ** xcb_xkb_get_names_reply_t * xcb_xkb_get_names_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_xkb_get_names_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_xkb_get_names_reply_t *
 **
 *****************************************************************************/
 
a6349 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_set_names_values_type_names
 ** 
 ** @@param const xcb_xkb_set_names_values_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a6355 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_names_values_type_names_length
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6362 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_set_names_values_type_names_end
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6373 10

/*****************************************************************************
 **
 ** uint8_t * xcb_xkb_set_names_values_n_levels_per_type
 ** 
 ** @@param const xcb_xkb_set_names_values_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a6379 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_names_values_n_levels_per_type_length
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
d6384 1
a6384 1
    return R->nKTLevels;
a6386 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_set_names_values_n_levels_per_type_end
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6392 1
a6392 1
    i.data = /* values */ S->nLevelsPerType + R->nKTLevels;
a6397 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_set_names_values_kt_level_names
 ** 
 ** @@param const xcb_xkb_set_names_values_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a6403 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_names_values_kt_level_names_length
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
d6408 1
a6408 1
    return xcb_sumof(/* values */ S->nLevelsPerType, R->nKTLevels);
a6410 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_set_names_values_kt_level_names_end
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6416 1
a6416 1
    i.data = /* values */ S->ktLevelNames + xcb_sumof(/* values */ S->nLevelsPerType, R->nKTLevels);
a6421 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_set_names_values_indicator_names
 ** 
 ** @@param const xcb_xkb_set_names_values_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a6427 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_names_values_indicator_names_length
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6434 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_set_names_values_indicator_names_end
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6445 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_set_names_values_virtual_mod_names
 ** 
 ** @@param const xcb_xkb_set_names_values_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a6451 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_names_values_virtual_mod_names_length
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6458 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_set_names_values_virtual_mod_names_end
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6469 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_set_names_values_groups
 ** 
 ** @@param const xcb_xkb_set_names_values_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a6475 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_names_values_groups_length
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6482 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_set_names_values_groups_end
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6493 10

/*****************************************************************************
 **
 ** xcb_xkb_key_name_t * xcb_xkb_set_names_values_key_names
 ** 
 ** @@param const xcb_xkb_set_names_values_t *S
 ** @@returns xcb_xkb_key_name_t *
 **
 *****************************************************************************/
 
a6499 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_names_values_key_names_length
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6506 10

/*****************************************************************************
 **
 ** xcb_xkb_key_name_iterator_t xcb_xkb_set_names_values_key_names_iterator
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns xcb_xkb_key_name_iterator_t
 **
 *****************************************************************************/
 
a6517 10

/*****************************************************************************
 **
 ** xcb_xkb_key_alias_t * xcb_xkb_set_names_values_key_aliases
 ** 
 ** @@param const xcb_xkb_set_names_values_t *S
 ** @@returns xcb_xkb_key_alias_t *
 **
 *****************************************************************************/
 
a6523 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_names_values_key_aliases_length
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6530 10

/*****************************************************************************
 **
 ** xcb_xkb_key_alias_iterator_t xcb_xkb_set_names_values_key_aliases_iterator
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns xcb_xkb_key_alias_iterator_t
 **
 *****************************************************************************/
 
a6541 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_set_names_values_radio_group_names
 ** 
 ** @@param const xcb_xkb_set_names_values_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a6547 10

/*****************************************************************************
 **
 ** int xcb_xkb_set_names_values_radio_group_names_length
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6554 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_set_names_values_radio_group_names_end
 ** 
 ** @@param const xcb_xkb_set_names_values_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a6568 1
                                    uint8_t                            nKTLevels  /**< */,
d6669 2
a6670 2
        xcb_block_len += nKTLevels * sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = nKTLevels * sizeof(uint8_t);
d6685 2
a6686 2
        xcb_block_len += xcb_sumof(_aux->nLevelsPerType, nKTLevels) * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_sumof(_aux->nLevelsPerType, nKTLevels) * sizeof(xcb_atom_t);
a6828 1
                                 uint8_t                      nKTLevels  /**< */,
d6913 1
a6913 1
        xcb_block_len += nKTLevels * sizeof(uint8_t);
d6926 1
a6926 1
        xcb_block_len += xcb_sumof(_aux->nLevelsPerType, nKTLevels) * sizeof(xcb_atom_t);
a7034 1
                                 uint8_t      nKTLevels  /**< */,
d7044 1
a7044 1
    return xcb_xkb_set_names_values_unpack(_buffer, nTypes, nKTLevels, indicators, virtualMods, groupNames, nKeys, nKeyAliases, nRadioGroups, which, &_aux);
a7046 25

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_names_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint16_t               virtualMods
 ** @@param uint32_t               which
 ** @@param uint8_t                firstType
 ** @@param uint8_t                nTypes
 ** @@param uint8_t                firstKTLevelt
 ** @@param uint8_t                nKTLevels
 ** @@param uint32_t               indicators
 ** @@param uint8_t                groupNames
 ** @@param uint8_t                nRadioGroups
 ** @@param xcb_keycode_t          firstKey
 ** @@param uint8_t                nKeys
 ** @@param uint8_t                nKeyAliases
 ** @@param uint16_t               totalKTLevelNames
 ** @@param const void            *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7071 1
a7071 1
    
d7075 1
a7075 1
    
d7091 1
a7091 1
    
d7098 3
a7100 3
    xcb_parts[4].iov_len = 
      xcb_xkb_set_names_values_sizeof (values, nTypes, nKTLevels, indicators, virtualMods, groupNames, nKeys, nKeyAliases, nRadioGroups, which);
    
a7104 25

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_names
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint16_t               virtualMods
 ** @@param uint32_t               which
 ** @@param uint8_t                firstType
 ** @@param uint8_t                nTypes
 ** @@param uint8_t                firstKTLevelt
 ** @@param uint8_t                nKTLevels
 ** @@param uint32_t               indicators
 ** @@param uint8_t                groupNames
 ** @@param uint8_t                nRadioGroups
 ** @@param xcb_keycode_t          firstKey
 ** @@param uint8_t                nKeys
 ** @@param uint8_t                nKeyAliases
 ** @@param uint16_t               totalKTLevelNames
 ** @@param const void            *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7129 1
a7129 1
    
d7133 1
a7133 1
    
d7149 1
a7149 1
    
d7156 3
a7158 3
    xcb_parts[4].iov_len = 
      xcb_xkb_set_names_values_sizeof (values, nTypes, nKTLevels, indicators, virtualMods, groupNames, nKeys, nKeyAliases, nRadioGroups, which);
    
a7162 25

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_names_aux_checked
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xkb_device_spec_t             deviceSpec
 ** @@param uint16_t                          virtualMods
 ** @@param uint32_t                          which
 ** @@param uint8_t                           firstType
 ** @@param uint8_t                           nTypes
 ** @@param uint8_t                           firstKTLevelt
 ** @@param uint8_t                           nKTLevels
 ** @@param uint32_t                          indicators
 ** @@param uint8_t                           groupNames
 ** @@param uint8_t                           nRadioGroups
 ** @@param xcb_keycode_t                     firstKey
 ** @@param uint8_t                           nKeys
 ** @@param uint8_t                           nKeyAliases
 ** @@param uint16_t                          totalKTLevelNames
 ** @@param const xcb_xkb_set_names_values_t *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7187 1
a7187 1
    
d7192 1
a7192 1
    
d7208 1
a7208 1
    
d7214 2
a7215 2
    xcb_parts[4].iov_len = 
      xcb_xkb_set_names_values_serialize (&xcb_aux0, nTypes, nKTLevels, indicators, virtualMods, groupNames, nKeys, nKeyAliases, nRadioGroups, which, values);
d7217 1
a7217 1
    
a7222 25

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_names_aux
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xkb_device_spec_t             deviceSpec
 ** @@param uint16_t                          virtualMods
 ** @@param uint32_t                          which
 ** @@param uint8_t                           firstType
 ** @@param uint8_t                           nTypes
 ** @@param uint8_t                           firstKTLevelt
 ** @@param uint8_t                           nKTLevels
 ** @@param uint32_t                          indicators
 ** @@param uint8_t                           groupNames
 ** @@param uint8_t                           nRadioGroups
 ** @@param xcb_keycode_t                     firstKey
 ** @@param uint8_t                           nKeys
 ** @@param uint8_t                           nKeyAliases
 ** @@param uint16_t                          totalKTLevelNames
 ** @@param const xcb_xkb_set_names_values_t *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7247 1
a7247 1
    
d7252 1
a7252 1
    
d7268 1
a7268 1
    
d7274 2
a7275 2
    xcb_parts[4].iov_len = 
      xcb_xkb_set_names_values_serialize (&xcb_aux0, nTypes, nKTLevels, indicators, virtualMods, groupNames, nKeys, nKeyAliases, nRadioGroups, which, values);
d7277 1
a7277 1
    
a7282 16

/*****************************************************************************
 **
 ** xcb_xkb_per_client_flags_cookie_t xcb_xkb_per_client_flags
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint32_t               change
 ** @@param uint32_t               value
 ** @@param uint32_t               ctrlsToChange
 ** @@param uint32_t               autoCtrls
 ** @@param uint32_t               autoCtrlsValues
 ** @@returns xcb_xkb_per_client_flags_cookie_t
 **
 *****************************************************************************/
 
d7298 1
a7298 1
    
d7302 1
a7302 1
    
d7310 1
a7310 1
    
d7315 1
a7315 1
    
a7319 16

/*****************************************************************************
 **
 ** xcb_xkb_per_client_flags_cookie_t xcb_xkb_per_client_flags_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint32_t               change
 ** @@param uint32_t               value
 ** @@param uint32_t               ctrlsToChange
 ** @@param uint32_t               autoCtrls
 ** @@param uint32_t               autoCtrlsValues
 ** @@returns xcb_xkb_per_client_flags_cookie_t
 **
 *****************************************************************************/
 
d7335 1
a7335 1
    
d7339 1
a7339 1
    
d7347 1
a7347 1
    
d7352 1
a7352 1
    
a7356 12

/*****************************************************************************
 **
 ** xcb_xkb_per_client_flags_reply_t * xcb_xkb_per_client_flags_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_xkb_per_client_flags_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_xkb_per_client_flags_reply_t *
 **
 *****************************************************************************/
 
a7475 12

/*****************************************************************************
 **
 ** xcb_xkb_list_components_cookie_t xcb_xkb_list_components
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint16_t               maxNames
 ** @@returns xcb_xkb_list_components_cookie_t
 **
 *****************************************************************************/
 
d7487 1
a7487 1
    
d7491 1
a7491 1
    
d7494 1
a7494 1
    
d7499 1
a7499 1
    
a7503 12

/*****************************************************************************
 **
 ** xcb_xkb_list_components_cookie_t xcb_xkb_list_components_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint16_t               maxNames
 ** @@returns xcb_xkb_list_components_cookie_t
 **
 *****************************************************************************/
 
d7515 1
a7515 1
    
d7519 1
a7519 1
    
d7522 1
a7522 1
    
d7527 1
a7527 1
    
a7531 10

/*****************************************************************************
 **
 ** int xcb_xkb_list_components_keymaps_length
 ** 
 ** @@param const xcb_xkb_list_components_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7537 10

/*****************************************************************************
 **
 ** xcb_xkb_listing_iterator_t xcb_xkb_list_components_keymaps_iterator
 ** 
 ** @@param const xcb_xkb_list_components_reply_t *R
 ** @@returns xcb_xkb_listing_iterator_t
 **
 *****************************************************************************/
 
a7547 10

/*****************************************************************************
 **
 ** int xcb_xkb_list_components_keycodes_length
 ** 
 ** @@param const xcb_xkb_list_components_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7553 10

/*****************************************************************************
 **
 ** xcb_xkb_listing_iterator_t xcb_xkb_list_components_keycodes_iterator
 ** 
 ** @@param const xcb_xkb_list_components_reply_t *R
 ** @@returns xcb_xkb_listing_iterator_t
 **
 *****************************************************************************/
 
a7564 10

/*****************************************************************************
 **
 ** int xcb_xkb_list_components_types_length
 ** 
 ** @@param const xcb_xkb_list_components_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7570 10

/*****************************************************************************
 **
 ** xcb_xkb_listing_iterator_t xcb_xkb_list_components_types_iterator
 ** 
 ** @@param const xcb_xkb_list_components_reply_t *R
 ** @@returns xcb_xkb_listing_iterator_t
 **
 *****************************************************************************/
 
a7581 10

/*****************************************************************************
 **
 ** int xcb_xkb_list_components_compat_maps_length
 ** 
 ** @@param const xcb_xkb_list_components_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7587 10

/*****************************************************************************
 **
 ** xcb_xkb_listing_iterator_t xcb_xkb_list_components_compat_maps_iterator
 ** 
 ** @@param const xcb_xkb_list_components_reply_t *R
 ** @@returns xcb_xkb_listing_iterator_t
 **
 *****************************************************************************/
 
a7598 10

/*****************************************************************************
 **
 ** int xcb_xkb_list_components_symbols_length
 ** 
 ** @@param const xcb_xkb_list_components_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7604 10

/*****************************************************************************
 **
 ** xcb_xkb_listing_iterator_t xcb_xkb_list_components_symbols_iterator
 ** 
 ** @@param const xcb_xkb_list_components_reply_t *R
 ** @@returns xcb_xkb_listing_iterator_t
 **
 *****************************************************************************/
 
a7615 10

/*****************************************************************************
 **
 ** int xcb_xkb_list_components_geometries_length
 ** 
 ** @@param const xcb_xkb_list_components_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7621 10

/*****************************************************************************
 **
 ** xcb_xkb_listing_iterator_t xcb_xkb_list_components_geometries_iterator
 ** 
 ** @@param const xcb_xkb_list_components_reply_t *R
 ** @@returns xcb_xkb_listing_iterator_t
 **
 *****************************************************************************/
 
a7632 12

/*****************************************************************************
 **
 ** xcb_xkb_list_components_reply_t * xcb_xkb_list_components_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_xkb_list_components_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_xkb_list_components_reply_t *
 **
 *****************************************************************************/
 
a7640 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_types_map_types_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7647 10

/*****************************************************************************
 **
 ** xcb_xkb_key_type_iterator_t xcb_xkb_get_kbd_by_name_replies_types_map_types_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns xcb_xkb_key_type_iterator_t
 **
 *****************************************************************************/
 
a7658 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_types_map_syms_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7665 10

/*****************************************************************************
 **
 ** xcb_xkb_key_sym_map_iterator_t xcb_xkb_get_kbd_by_name_replies_types_map_syms_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns xcb_xkb_key_sym_map_iterator_t
 **
 *****************************************************************************/
 
a7676 10

/*****************************************************************************
 **
 ** uint8_t * xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_count
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a7682 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_count_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7689 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_count_end
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7700 10

/*****************************************************************************
 **
 ** xcb_xkb_action_t * xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_acts
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_xkb_action_t *
 **
 *****************************************************************************/
 
a7706 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_acts_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7713 10

/*****************************************************************************
 **
 ** xcb_xkb_action_iterator_t xcb_xkb_get_kbd_by_name_replies_types_map_acts_rtrn_acts_iterator
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns xcb_xkb_action_iterator_t
 **
 *****************************************************************************/
 
a7724 10

/*****************************************************************************
 **
 ** xcb_xkb_set_behavior_t * xcb_xkb_get_kbd_by_name_replies_types_map_behaviors_rtrn
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_xkb_set_behavior_t *
 **
 *****************************************************************************/
 
a7730 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_types_map_behaviors_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7737 10

/*****************************************************************************
 **
 ** xcb_xkb_set_behavior_iterator_t xcb_xkb_get_kbd_by_name_replies_types_map_behaviors_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns xcb_xkb_set_behavior_iterator_t
 **
 *****************************************************************************/
 
a7748 10

/*****************************************************************************
 **
 ** uint8_t * xcb_xkb_get_kbd_by_name_replies_types_map_vmods_rtrn
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a7754 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_types_map_vmods_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7761 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_kbd_by_name_replies_types_map_vmods_rtrn_end
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a7772 10

/*****************************************************************************
 **
 ** xcb_xkb_set_explicit_t * xcb_xkb_get_kbd_by_name_replies_types_map_explicit_rtrn
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_xkb_set_explicit_t *
 **
 *****************************************************************************/
 
a7778 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_types_map_explicit_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7785 10

/*****************************************************************************
 **
 ** xcb_xkb_set_explicit_iterator_t xcb_xkb_get_kbd_by_name_replies_types_map_explicit_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns xcb_xkb_set_explicit_iterator_t
 **
 *****************************************************************************/
 
a7796 10

/*****************************************************************************
 **
 ** xcb_xkb_key_mod_map_t * xcb_xkb_get_kbd_by_name_replies_types_map_modmap_rtrn
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_xkb_key_mod_map_t *
 **
 *****************************************************************************/
 
a7802 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_types_map_modmap_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7809 10

/*****************************************************************************
 **
 ** xcb_xkb_key_mod_map_iterator_t xcb_xkb_get_kbd_by_name_replies_types_map_modmap_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns xcb_xkb_key_mod_map_iterator_t
 **
 *****************************************************************************/
 
a7820 10

/*****************************************************************************
 **
 ** xcb_xkb_key_v_mod_map_t * xcb_xkb_get_kbd_by_name_replies_types_map_vmodmap_rtrn
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_xkb_key_v_mod_map_t *
 **
 *****************************************************************************/
 
a7826 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_types_map_vmodmap_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7833 10

/*****************************************************************************
 **
 ** xcb_xkb_key_v_mod_map_iterator_t xcb_xkb_get_kbd_by_name_replies_types_map_vmodmap_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_types_map_t *R
 ** @@returns xcb_xkb_key_v_mod_map_iterator_t
 **
 *****************************************************************************/
 
a8259 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_get_kbd_by_name_replies_key_names_value_list_type_names
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a8265 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_key_names_value_list_type_names_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8272 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_kbd_by_name_replies_key_names_value_list_type_names_end
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8283 10

/*****************************************************************************
 **
 ** uint8_t * xcb_xkb_get_kbd_by_name_replies_key_names_value_list_n_levels_per_type
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a8289 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_key_names_value_list_n_levels_per_type_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
d8294 1
a8294 1
    return /* replies */ S->key_names.nKTLevels;
a8296 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_kbd_by_name_replies_key_names_value_list_n_levels_per_type_end
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d8302 1
a8302 1
    i.data = /* replies */ S->key_names.valueList.nLevelsPerType + /* replies */ S->key_names.nKTLevels;
a8307 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_get_kbd_by_name_replies_key_names_value_list_kt_level_names
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a8313 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_key_names_value_list_kt_level_names_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
d8318 1
a8318 1
    return xcb_sumof(/* replies */ S->key_names.valueList.nLevelsPerType, /* replies */ S->key_names.nKTLevels);
a8320 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_kbd_by_name_replies_key_names_value_list_kt_level_names_end
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d8326 1
a8326 1
    i.data = /* replies */ S->key_names.valueList.ktLevelNames + xcb_sumof(/* replies */ S->key_names.valueList.nLevelsPerType, /* replies */ S->key_names.nKTLevels);
a8331 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_get_kbd_by_name_replies_key_names_value_list_indicator_names
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a8337 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_key_names_value_list_indicator_names_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8344 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_kbd_by_name_replies_key_names_value_list_indicator_names_end
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8355 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_get_kbd_by_name_replies_key_names_value_list_virtual_mod_names
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a8361 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_key_names_value_list_virtual_mod_names_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8368 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_kbd_by_name_replies_key_names_value_list_virtual_mod_names_end
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8379 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_get_kbd_by_name_replies_key_names_value_list_groups
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a8385 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_key_names_value_list_groups_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8392 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_kbd_by_name_replies_key_names_value_list_groups_end
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8403 10

/*****************************************************************************
 **
 ** xcb_xkb_key_name_t * xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_names
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_xkb_key_name_t *
 **
 *****************************************************************************/
 
a8409 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_names_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8416 10

/*****************************************************************************
 **
 ** xcb_xkb_key_name_iterator_t xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_names_iterator
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns xcb_xkb_key_name_iterator_t
 **
 *****************************************************************************/
 
a8427 10

/*****************************************************************************
 **
 ** xcb_xkb_key_alias_t * xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_aliases
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_xkb_key_alias_t *
 **
 *****************************************************************************/
 
a8433 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_aliases_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8440 10

/*****************************************************************************
 **
 ** xcb_xkb_key_alias_iterator_t xcb_xkb_get_kbd_by_name_replies_key_names_value_list_key_aliases_iterator
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns xcb_xkb_key_alias_iterator_t
 **
 *****************************************************************************/
 
a8451 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_xkb_get_kbd_by_name_replies_key_names_value_list_radio_group_names
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a8457 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_key_names_value_list_radio_group_names_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8464 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_kbd_by_name_replies_key_names_value_list_radio_group_names_end
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a8478 1
                                                                uint16_t                                                       nKTLevels  /**< */,
d8579 2
a8580 2
        xcb_block_len += nKTLevels * sizeof(uint8_t);
        xcb_parts[xcb_parts_idx].iov_len = nKTLevels * sizeof(uint8_t);
d8595 2
a8596 2
        xcb_block_len += xcb_sumof(_aux->nLevelsPerType, nKTLevels) * sizeof(xcb_atom_t);
        xcb_parts[xcb_parts_idx].iov_len = xcb_sumof(_aux->nLevelsPerType, nKTLevels) * sizeof(xcb_atom_t);
a8738 1
                                                             uint16_t                                                 nKTLevels  /**< */,
d8823 1
a8823 1
        xcb_block_len += nKTLevels * sizeof(uint8_t);
d8836 1
a8836 1
        xcb_block_len += xcb_sumof(_aux->nLevelsPerType, nKTLevels) * sizeof(xcb_atom_t);
a8944 1
                                                             uint16_t     nKTLevels  /**< */,
d8954 1
a8954 1
    return xcb_xkb_get_kbd_by_name_replies_key_names_value_list_unpack(_buffer, nTypes, nKTLevels, indicators, virtualMods, groupNames, nKeys, nKeyAliases, nRadioGroups, which, &_aux);
a8956 10

/*****************************************************************************
 **
 ** xcb_xkb_get_kbd_by_name_replies_types_map_t * xcb_xkb_get_kbd_by_name_replies_types_map
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *R
 ** @@returns xcb_xkb_get_kbd_by_name_replies_types_map_t *
 **
 *****************************************************************************/
 
a8962 10

/*****************************************************************************
 **
 ** xcb_xkb_sym_interpret_t * xcb_xkb_get_kbd_by_name_replies_compat_map_si_rtrn
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_xkb_sym_interpret_t *
 **
 *****************************************************************************/
 
a8968 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_compat_map_si_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8975 10

/*****************************************************************************
 **
 ** xcb_xkb_sym_interpret_iterator_t xcb_xkb_get_kbd_by_name_replies_compat_map_si_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *R
 ** @@returns xcb_xkb_sym_interpret_iterator_t
 **
 *****************************************************************************/
 
a8986 10

/*****************************************************************************
 **
 ** xcb_xkb_mod_def_t * xcb_xkb_get_kbd_by_name_replies_compat_map_group_rtrn
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_xkb_mod_def_t *
 **
 *****************************************************************************/
 
a8992 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_compat_map_group_rtrn_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8999 10

/*****************************************************************************
 **
 ** xcb_xkb_mod_def_iterator_t xcb_xkb_get_kbd_by_name_replies_compat_map_group_rtrn_iterator
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *R
 ** @@returns xcb_xkb_mod_def_iterator_t
 **
 *****************************************************************************/
 
a9010 10

/*****************************************************************************
 **
 ** xcb_xkb_indicator_map_t * xcb_xkb_get_kbd_by_name_replies_indicator_maps_maps
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *S
 ** @@returns xcb_xkb_indicator_map_t *
 **
 *****************************************************************************/
 
a9016 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_kbd_by_name_replies_indicator_maps_maps_length
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a9023 10

/*****************************************************************************
 **
 ** xcb_xkb_indicator_map_iterator_t xcb_xkb_get_kbd_by_name_replies_indicator_maps_maps_iterator
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *R
 ** @@returns xcb_xkb_indicator_map_iterator_t
 **
 *****************************************************************************/
 
a9034 10

/*****************************************************************************
 **
 ** xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t * xcb_xkb_get_kbd_by_name_replies_key_names_value_list
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *R
 ** @@returns xcb_xkb_get_kbd_by_name_replies_key_names_value_list_t *
 **
 *****************************************************************************/
 
a9040 10

/*****************************************************************************
 **
 ** xcb_xkb_counted_string_16_t * xcb_xkb_get_kbd_by_name_replies_geometry_label_font
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_replies_t *R
 ** @@returns xcb_xkb_counted_string_16_t *
 **
 *****************************************************************************/
 
d9091 1
a9091 1
        /* xcb_xkb_get_kbd_by_name_replies_t.types.pad0 */
d9241 1
a9241 1
        /* xcb_xkb_get_kbd_by_name_replies_t.types.pad1 */
d9301 1
a9301 1
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.pad0 */
d9325 1
a9325 1
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.pad1 */
d9407 1
a9407 1
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.pad0 */
d9528 1
a9528 1
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.pad0 */
d9546 2
a9547 2
        xcb_block_len += xcb_xkb_get_kbd_by_name_replies_key_names_value_list_serialize(&xcb_parts[xcb_parts_idx].iov_base, _aux->key_names.nTypes, _aux->key_names.nKTLevels, _aux->key_names.indicators, _aux->key_names.virtualMods, _aux->key_names.groupNames, _aux->key_names.nKeys, _aux->key_names.nKeyAliases, _aux->key_names.nRadioGroups, _aux->key_names.which, &_aux->key_names.valueList);
        xcb_parts[xcb_parts_idx].iov_len = xcb_xkb_get_kbd_by_name_replies_key_names_value_list_serialize(&xcb_parts[xcb_parts_idx].iov_base, _aux->key_names.nTypes, _aux->key_names.nKTLevels, _aux->key_names.indicators, _aux->key_names.virtualMods, _aux->key_names.groupNames, _aux->key_names.nKeys, _aux->key_names.nKeyAliases, _aux->key_names.nRadioGroups, _aux->key_names.which, &_aux->key_names.valueList);
d9588 1
a9588 1
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.pad0 */
d9734 3
a9736 3
        /* xcb_xkb_get_kbd_by_name_replies_t.types.pad0 */
        _aux->types.pad0[0] = *(uint8_t *)xcb_tmp;
        _aux->types.pad0[1] = *(uint8_t *)xcb_tmp;
d9860 2
a9861 2
        /* xcb_xkb_get_kbd_by_name_replies_t.types.pad1 */
        _aux->types.pad1 = *(uint8_t *)xcb_tmp;
d9909 2
a9910 2
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.pad0 */
        _aux->compat_map.pad0 = *(uint8_t *)xcb_tmp;
d9929 17
a9945 17
        /* xcb_xkb_get_kbd_by_name_replies_t.compat_map.pad1 */
        _aux->compat_map.pad1[0] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[1] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[2] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[3] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[4] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[5] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[6] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[7] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[8] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[9] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[10] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[11] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[12] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[13] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[14] = *(uint8_t *)xcb_tmp;
        _aux->compat_map.pad1[15] = *(uint8_t *)xcb_tmp;
d10012 16
a10027 16
        /* xcb_xkb_get_kbd_by_name_replies_t.indicator_maps.pad0 */
        _aux->indicator_maps.pad0[0] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad0[1] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad0[2] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad0[3] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad0[4] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad0[5] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad0[6] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad0[7] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad0[8] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad0[9] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad0[10] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad0[11] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad0[12] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad0[13] = *(uint8_t *)xcb_tmp;
        _aux->indicator_maps.pad0[14] = *(uint8_t *)xcb_tmp;
d10127 5
a10131 5
        /* xcb_xkb_get_kbd_by_name_replies_t.key_names.pad0 */
        _aux->key_names.pad0[0] = *(uint8_t *)xcb_tmp;
        _aux->key_names.pad0[1] = *(uint8_t *)xcb_tmp;
        _aux->key_names.pad0[2] = *(uint8_t *)xcb_tmp;
        _aux->key_names.pad0[3] = *(uint8_t *)xcb_tmp;
d10144 1
a10144 1
        xcb_block_len += xcb_xkb_get_kbd_by_name_replies_key_names_value_list_unpack(xcb_tmp, _aux->key_names.nTypes, _aux->key_names.nKTLevels, _aux->key_names.indicators, _aux->key_names.virtualMods, _aux->key_names.groupNames, _aux->key_names.nKeys, _aux->key_names.nKeyAliases, _aux->key_names.nRadioGroups, _aux->key_names.which, &_aux->key_names.valueList);
d10179 2
a10180 2
        /* xcb_xkb_get_kbd_by_name_replies_t.geometry.pad0 */
        _aux->geometry.pad0 = *(uint8_t *)xcb_tmp;
a10267 14

/*****************************************************************************
 **
 ** xcb_xkb_get_kbd_by_name_cookie_t xcb_xkb_get_kbd_by_name
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint16_t               need
 ** @@param uint16_t               want
 ** @@param uint8_t                load
 ** @@returns xcb_xkb_get_kbd_by_name_cookie_t
 **
 *****************************************************************************/
 
d10281 1
a10281 1
    
d10285 1
a10285 1
    
d10291 1
a10291 1
    
d10296 1
a10296 1
    
a10300 14

/*****************************************************************************
 **
 ** xcb_xkb_get_kbd_by_name_cookie_t xcb_xkb_get_kbd_by_name_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xkb_device_spec_t  deviceSpec
 ** @@param uint16_t               need
 ** @@param uint16_t               want
 ** @@param uint8_t                load
 ** @@returns xcb_xkb_get_kbd_by_name_cookie_t
 **
 *****************************************************************************/
 
d10314 1
a10314 1
    
d10318 1
a10318 1
    
d10324 1
a10324 1
    
d10329 1
a10329 1
    
a10333 10

/*****************************************************************************
 **
 ** xcb_xkb_get_kbd_by_name_replies_t * xcb_xkb_get_kbd_by_name_replies
 ** 
 ** @@param const xcb_xkb_get_kbd_by_name_reply_t *R
 ** @@returns xcb_xkb_get_kbd_by_name_replies_t *
 **
 *****************************************************************************/
 
a10339 12

/*****************************************************************************
 **
 ** xcb_xkb_get_kbd_by_name_reply_t * xcb_xkb_get_kbd_by_name_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_xkb_get_kbd_by_name_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_xkb_get_kbd_by_name_reply_t *
 **
 *****************************************************************************/
 
a10407 17

/*****************************************************************************
 **
 ** xcb_xkb_get_device_info_cookie_t xcb_xkb_get_device_info
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_xkb_device_spec_t     deviceSpec
 ** @@param uint16_t                  wanted
 ** @@param uint8_t                   allButtons
 ** @@param uint8_t                   firstButton
 ** @@param uint8_t                   nButtons
 ** @@param xcb_xkb_led_class_spec_t  ledClass
 ** @@param xcb_xkb_id_spec_t         ledID
 ** @@returns xcb_xkb_get_device_info_cookie_t
 **
 *****************************************************************************/
 
d10424 1
a10424 1
    
d10428 1
a10428 1
    
d10437 1
a10437 1
    
d10442 1
a10442 1
    
a10446 17

/*****************************************************************************
 **
 ** xcb_xkb_get_device_info_cookie_t xcb_xkb_get_device_info_unchecked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_xkb_device_spec_t     deviceSpec
 ** @@param uint16_t                  wanted
 ** @@param uint8_t                   allButtons
 ** @@param uint8_t                   firstButton
 ** @@param uint8_t                   nButtons
 ** @@param xcb_xkb_led_class_spec_t  ledClass
 ** @@param xcb_xkb_id_spec_t         ledID
 ** @@returns xcb_xkb_get_device_info_cookie_t
 **
 *****************************************************************************/
 
d10463 1
a10463 1
    
d10467 1
a10467 1
    
d10476 1
a10476 1
    
d10481 1
a10481 1
    
a10485 10

/*****************************************************************************
 **
 ** xcb_xkb_string8_t * xcb_xkb_get_device_info_name
 ** 
 ** @@param const xcb_xkb_get_device_info_reply_t *R
 ** @@returns xcb_xkb_string8_t *
 **
 *****************************************************************************/
 
a10491 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_device_info_name_length
 ** 
 ** @@param const xcb_xkb_get_device_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a10497 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xkb_get_device_info_name_end
 ** 
 ** @@param const xcb_xkb_get_device_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a10507 10

/*****************************************************************************
 **
 ** xcb_xkb_action_t * xcb_xkb_get_device_info_btn_actions
 ** 
 ** @@param const xcb_xkb_get_device_info_reply_t *R
 ** @@returns xcb_xkb_action_t *
 **
 *****************************************************************************/
 
a10514 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_device_info_btn_actions_length
 ** 
 ** @@param const xcb_xkb_get_device_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a10520 10

/*****************************************************************************
 **
 ** xcb_xkb_action_iterator_t xcb_xkb_get_device_info_btn_actions_iterator
 ** 
 ** @@param const xcb_xkb_get_device_info_reply_t *R
 ** @@returns xcb_xkb_action_iterator_t
 **
 *****************************************************************************/
 
a10531 10

/*****************************************************************************
 **
 ** int xcb_xkb_get_device_info_leds_length
 ** 
 ** @@param const xcb_xkb_get_device_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a10537 10

/*****************************************************************************
 **
 ** xcb_xkb_device_led_info_iterator_t xcb_xkb_get_device_info_leds_iterator
 ** 
 ** @@param const xcb_xkb_get_device_info_reply_t *R
 ** @@returns xcb_xkb_device_led_info_iterator_t
 **
 *****************************************************************************/
 
a10548 12

/*****************************************************************************
 **
 ** xcb_xkb_get_device_info_reply_t * xcb_xkb_get_device_info_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_xkb_get_device_info_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_xkb_get_device_info_reply_t *
 **
 *****************************************************************************/
 
a10604 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_device_info_checked
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_xkb_device_spec_t            deviceSpec
 ** @@param uint8_t                          firstBtn
 ** @@param uint8_t                          nBtns
 ** @@param uint16_t                         change
 ** @@param uint16_t                         nDeviceLedFBs
 ** @@param const xcb_xkb_action_t          *btnActions
 ** @@param const xcb_xkb_device_led_info_t *leds
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10621 1
a10621 1
    
d10628 1
a10628 1
    
d10634 1
a10634 1
    
d10655 1
a10655 1
    
a10659 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xkb_set_device_info
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_xkb_device_spec_t            deviceSpec
 ** @@param uint8_t                          firstBtn
 ** @@param uint8_t                          nBtns
 ** @@param uint16_t                         change
 ** @@param uint16_t                         nDeviceLedFBs
 ** @@param const xcb_xkb_action_t          *btnActions
 ** @@param const xcb_xkb_device_led_info_t *leds
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d10676 1
a10676 1
    
d10683 1
a10683 1
    
d10689 1
a10689 1
    
d10710 1
a10710 1
    
a10745 16

/*****************************************************************************
 **
 ** xcb_xkb_set_debugging_flags_cookie_t xcb_xkb_set_debugging_flags
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param uint16_t                 msgLength
 ** @@param uint32_t                 affectFlags
 ** @@param uint32_t                 flags
 ** @@param uint32_t                 affectCtrls
 ** @@param uint32_t                 ctrls
 ** @@param const xcb_xkb_string8_t *message
 ** @@returns xcb_xkb_set_debugging_flags_cookie_t
 **
 *****************************************************************************/
 
d10761 1
a10761 1
    
d10765 1
a10765 1
    
d10772 1
a10772 1
    
d10782 1
a10782 1
    
a10786 16

/*****************************************************************************
 **
 ** xcb_xkb_set_debugging_flags_cookie_t xcb_xkb_set_debugging_flags_unchecked
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param uint16_t                 msgLength
 ** @@param uint32_t                 affectFlags
 ** @@param uint32_t                 flags
 ** @@param uint32_t                 affectCtrls
 ** @@param uint32_t                 ctrls
 ** @@param const xcb_xkb_string8_t *message
 ** @@returns xcb_xkb_set_debugging_flags_cookie_t
 **
 *****************************************************************************/
 
d10802 1
a10802 1
    
d10806 1
a10806 1
    
d10813 1
a10813 1
    
d10823 1
a10823 1
    
a10827 12

/*****************************************************************************
 **
 ** xcb_xkb_set_debugging_flags_reply_t * xcb_xkb_set_debugging_flags_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xkb_set_debugging_flags_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_xkb_set_debugging_flags_reply_t *
 **
 *****************************************************************************/
 
@

