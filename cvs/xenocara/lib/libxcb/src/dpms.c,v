head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.2
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.6
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	mKDGsTNpiR2zRHYQ;

1.3
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	01TEvO4uNHLqFv7N;

1.2
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.17;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.17;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from dpms.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "dpms.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)

xcb_extension_t xcb_dpms_id = { "DPMS", 0 };

xcb_dpms_get_version_cookie_t
xcb_dpms_get_version (xcb_connection_t *c,
                      uint16_t          client_major_version,
                      uint16_t          client_minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_GET_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dpms_get_version_cookie_t xcb_ret;
    xcb_dpms_get_version_request_t xcb_out;

    xcb_out.client_major_version = client_major_version;
    xcb_out.client_minor_version = client_minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dpms_get_version_cookie_t
xcb_dpms_get_version_unchecked (xcb_connection_t *c,
                                uint16_t          client_major_version,
                                uint16_t          client_minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_GET_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dpms_get_version_cookie_t xcb_ret;
    xcb_dpms_get_version_request_t xcb_out;

    xcb_out.client_major_version = client_major_version;
    xcb_out.client_minor_version = client_minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dpms_get_version_reply_t *
xcb_dpms_get_version_reply (xcb_connection_t               *c,
                            xcb_dpms_get_version_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e)
{
    return (xcb_dpms_get_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_dpms_capable_cookie_t
xcb_dpms_capable (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_CAPABLE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dpms_capable_cookie_t xcb_ret;
    xcb_dpms_capable_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dpms_capable_cookie_t
xcb_dpms_capable_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_CAPABLE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dpms_capable_cookie_t xcb_ret;
    xcb_dpms_capable_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dpms_capable_reply_t *
xcb_dpms_capable_reply (xcb_connection_t           *c,
                        xcb_dpms_capable_cookie_t   cookie  /**< */,
                        xcb_generic_error_t       **e)
{
    return (xcb_dpms_capable_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_dpms_get_timeouts_cookie_t
xcb_dpms_get_timeouts (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_GET_TIMEOUTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dpms_get_timeouts_cookie_t xcb_ret;
    xcb_dpms_get_timeouts_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dpms_get_timeouts_cookie_t
xcb_dpms_get_timeouts_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_GET_TIMEOUTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dpms_get_timeouts_cookie_t xcb_ret;
    xcb_dpms_get_timeouts_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dpms_get_timeouts_reply_t *
xcb_dpms_get_timeouts_reply (xcb_connection_t                *c,
                             xcb_dpms_get_timeouts_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_dpms_get_timeouts_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_dpms_set_timeouts_checked (xcb_connection_t *c,
                               uint16_t          standby_timeout,
                               uint16_t          suspend_timeout,
                               uint16_t          off_timeout)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_SET_TIMEOUTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dpms_set_timeouts_request_t xcb_out;

    xcb_out.standby_timeout = standby_timeout;
    xcb_out.suspend_timeout = suspend_timeout;
    xcb_out.off_timeout = off_timeout;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_dpms_set_timeouts (xcb_connection_t *c,
                       uint16_t          standby_timeout,
                       uint16_t          suspend_timeout,
                       uint16_t          off_timeout)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_SET_TIMEOUTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dpms_set_timeouts_request_t xcb_out;

    xcb_out.standby_timeout = standby_timeout;
    xcb_out.suspend_timeout = suspend_timeout;
    xcb_out.off_timeout = off_timeout;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_dpms_enable_checked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_ENABLE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dpms_enable_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_dpms_enable (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_ENABLE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dpms_enable_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_dpms_disable_checked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_DISABLE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dpms_disable_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_dpms_disable (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_DISABLE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dpms_disable_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_dpms_force_level_checked (xcb_connection_t *c,
                              uint16_t          power_level)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_FORCE_LEVEL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dpms_force_level_request_t xcb_out;

    xcb_out.power_level = power_level;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_dpms_force_level (xcb_connection_t *c,
                      uint16_t          power_level)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_FORCE_LEVEL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dpms_force_level_request_t xcb_out;

    xcb_out.power_level = power_level;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dpms_info_cookie_t
xcb_dpms_info (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dpms_info_cookie_t xcb_ret;
    xcb_dpms_info_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dpms_info_cookie_t
xcb_dpms_info_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dpms_id,
        .opcode = XCB_DPMS_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dpms_info_cookie_t xcb_ret;
    xcb_dpms_info_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dpms_info_reply_t *
xcb_dpms_info_reply (xcb_connection_t        *c,
                     xcb_dpms_info_cookie_t   cookie  /**< */,
                     xcb_generic_error_t    **e)
{
    return (xcb_dpms_info_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

@


1.3
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d21 3
a23 3
xcb_dpms_get_version (xcb_connection_t *c  /**< */,
                      uint16_t          client_major_version  /**< */,
                      uint16_t          client_minor_version  /**< */)
d26 4
a29 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_GET_VERSION,
        /* isvoid */ 0
d49 3
a51 3
xcb_dpms_get_version_unchecked (xcb_connection_t *c  /**< */,
                                uint16_t          client_major_version  /**< */,
                                uint16_t          client_minor_version  /**< */)
d54 4
a57 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_GET_VERSION,
        /* isvoid */ 0
d77 1
a77 1
xcb_dpms_get_version_reply (xcb_connection_t               *c  /**< */,
d79 1
a79 1
                            xcb_generic_error_t           **e  /**< */)
d85 1
a85 1
xcb_dpms_capable (xcb_connection_t *c  /**< */)
d88 4
a91 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_CAPABLE,
        /* isvoid */ 0
d109 1
a109 1
xcb_dpms_capable_unchecked (xcb_connection_t *c  /**< */)
d112 4
a115 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_CAPABLE,
        /* isvoid */ 0
d133 1
a133 1
xcb_dpms_capable_reply (xcb_connection_t           *c  /**< */,
d135 1
a135 1
                        xcb_generic_error_t       **e  /**< */)
d141 1
a141 1
xcb_dpms_get_timeouts (xcb_connection_t *c  /**< */)
d144 4
a147 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_GET_TIMEOUTS,
        /* isvoid */ 0
d165 1
a165 1
xcb_dpms_get_timeouts_unchecked (xcb_connection_t *c  /**< */)
d168 4
a171 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_GET_TIMEOUTS,
        /* isvoid */ 0
d189 1
a189 1
xcb_dpms_get_timeouts_reply (xcb_connection_t                *c  /**< */,
d191 1
a191 1
                             xcb_generic_error_t            **e  /**< */)
d197 4
a200 4
xcb_dpms_set_timeouts_checked (xcb_connection_t *c  /**< */,
                               uint16_t          standby_timeout  /**< */,
                               uint16_t          suspend_timeout  /**< */,
                               uint16_t          off_timeout  /**< */)
d203 4
a206 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_SET_TIMEOUTS,
        /* isvoid */ 1
d227 4
a230 4
xcb_dpms_set_timeouts (xcb_connection_t *c  /**< */,
                       uint16_t          standby_timeout  /**< */,
                       uint16_t          suspend_timeout  /**< */,
                       uint16_t          off_timeout  /**< */)
d233 4
a236 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_SET_TIMEOUTS,
        /* isvoid */ 1
d257 1
a257 1
xcb_dpms_enable_checked (xcb_connection_t *c  /**< */)
d260 4
a263 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_ENABLE,
        /* isvoid */ 1
d281 1
a281 1
xcb_dpms_enable (xcb_connection_t *c  /**< */)
d284 4
a287 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_ENABLE,
        /* isvoid */ 1
d305 1
a305 1
xcb_dpms_disable_checked (xcb_connection_t *c  /**< */)
d308 4
a311 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_DISABLE,
        /* isvoid */ 1
d329 1
a329 1
xcb_dpms_disable (xcb_connection_t *c  /**< */)
d332 4
a335 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_DISABLE,
        /* isvoid */ 1
d353 2
a354 2
xcb_dpms_force_level_checked (xcb_connection_t *c  /**< */,
                              uint16_t          power_level  /**< */)
d357 4
a360 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_FORCE_LEVEL,
        /* isvoid */ 1
d379 2
a380 2
xcb_dpms_force_level (xcb_connection_t *c  /**< */,
                      uint16_t          power_level  /**< */)
d383 4
a386 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_FORCE_LEVEL,
        /* isvoid */ 1
d405 1
a405 1
xcb_dpms_info (xcb_connection_t *c  /**< */)
d408 4
a411 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_INFO,
        /* isvoid */ 0
d429 1
a429 1
xcb_dpms_info_unchecked (xcb_connection_t *c  /**< */)
d432 4
a435 4
        /* count */ 2,
        /* ext */ &xcb_dpms_id,
        /* opcode */ XCB_DPMS_INFO,
        /* isvoid */ 0
d453 1
a453 1
xcb_dpms_info_reply (xcb_connection_t        *c  /**< */,
d455 1
a455 1
                     xcb_generic_error_t    **e  /**< */)
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@a19 12

/*****************************************************************************
 **
 ** xcb_dpms_get_version_cookie_t xcb_dpms_get_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          client_major_version
 ** @@param uint16_t          client_minor_version
 ** @@returns xcb_dpms_get_version_cookie_t
 **
 *****************************************************************************/
 
d31 1
a31 1
    
d35 1
a35 1
    
d38 1
a38 1
    
d43 1
a43 1
    
a47 12

/*****************************************************************************
 **
 ** xcb_dpms_get_version_cookie_t xcb_dpms_get_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          client_major_version
 ** @@param uint16_t          client_minor_version
 ** @@returns xcb_dpms_get_version_cookie_t
 **
 *****************************************************************************/
 
d59 1
a59 1
    
d63 1
a63 1
    
d66 1
a66 1
    
d71 1
a71 1
    
a75 12

/*****************************************************************************
 **
 ** xcb_dpms_get_version_reply_t * xcb_dpms_get_version_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_dpms_get_version_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_dpms_get_version_reply_t *
 **
 *****************************************************************************/
 
a83 10

/*****************************************************************************
 **
 ** xcb_dpms_capable_cookie_t xcb_dpms_capable
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_dpms_capable_cookie_t
 **
 *****************************************************************************/
 
d93 1
a93 1
    
d97 2
a98 2
    
    
d103 1
a103 1
    
a107 10

/*****************************************************************************
 **
 ** xcb_dpms_capable_cookie_t xcb_dpms_capable_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_dpms_capable_cookie_t
 **
 *****************************************************************************/
 
d117 1
a117 1
    
d121 2
a122 2
    
    
d127 1
a127 1
    
a131 12

/*****************************************************************************
 **
 ** xcb_dpms_capable_reply_t * xcb_dpms_capable_reply
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_dpms_capable_cookie_t   cookie
 ** @@param xcb_generic_error_t       **e
 ** @@returns xcb_dpms_capable_reply_t *
 **
 *****************************************************************************/
 
a139 10

/*****************************************************************************
 **
 ** xcb_dpms_get_timeouts_cookie_t xcb_dpms_get_timeouts
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_dpms_get_timeouts_cookie_t
 **
 *****************************************************************************/
 
d149 1
a149 1
    
d153 2
a154 2
    
    
d159 1
a159 1
    
a163 10

/*****************************************************************************
 **
 ** xcb_dpms_get_timeouts_cookie_t xcb_dpms_get_timeouts_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_dpms_get_timeouts_cookie_t
 **
 *****************************************************************************/
 
d173 1
a173 1
    
d177 2
a178 2
    
    
d183 1
a183 1
    
a187 12

/*****************************************************************************
 **
 ** xcb_dpms_get_timeouts_reply_t * xcb_dpms_get_timeouts_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_dpms_get_timeouts_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_dpms_get_timeouts_reply_t *
 **
 *****************************************************************************/
 
a195 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_set_timeouts_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          standby_timeout
 ** @@param uint16_t          suspend_timeout
 ** @@param uint16_t          off_timeout
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d208 1
a208 1
    
d212 1
a212 1
    
d216 1
a216 1
    
d221 1
a221 1
    
a225 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_set_timeouts
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          standby_timeout
 ** @@param uint16_t          suspend_timeout
 ** @@param uint16_t          off_timeout
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d238 1
a238 1
    
d242 1
a242 1
    
d246 1
a246 1
    
d251 1
a251 1
    
a255 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_enable_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d265 1
a265 1
    
d269 2
a270 2
    
    
d275 1
a275 1
    
a279 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_enable
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d289 1
a289 1
    
d293 2
a294 2
    
    
d299 1
a299 1
    
a303 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_disable_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d313 1
a313 1
    
d317 2
a318 2
    
    
d323 1
a323 1
    
a327 10

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_disable
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d337 1
a337 1
    
d341 2
a342 2
    
    
d347 1
a347 1
    
a351 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_force_level_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          power_level
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d362 1
a362 1
    
d366 1
a366 1
    
d368 1
a368 1
    
d373 1
a373 1
    
a377 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dpms_force_level
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          power_level
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d388 1
a388 1
    
d392 1
a392 1
    
d394 1
a394 1
    
d399 1
a399 1
    
a403 10

/*****************************************************************************
 **
 ** xcb_dpms_info_cookie_t xcb_dpms_info
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_dpms_info_cookie_t
 **
 *****************************************************************************/
 
d413 1
a413 1
    
d417 2
a418 2
    
    
d423 1
a423 1
    
a427 10

/*****************************************************************************
 **
 ** xcb_dpms_info_cookie_t xcb_dpms_info_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_dpms_info_cookie_t
 **
 *****************************************************************************/
 
d437 1
a437 1
    
d441 2
a442 2
    
    
d447 1
a447 1
    
a451 12

/*****************************************************************************
 **
 ** xcb_dpms_info_reply_t * xcb_dpms_info_reply
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_dpms_info_cookie_t   cookie
 ** @@param xcb_generic_error_t    **e
 ** @@returns xcb_dpms_info_reply_t *
 **
 *****************************************************************************/
 
@


1.1
log
@Initial revision
@
text
@d6 4
d12 1
d16 2
d55 1
d95 1
d149 1
d183 1
d237 1
d271 1
d334 1
d377 1
d411 1
d445 1
d479 1
d513 1
d550 1
d587 1
d621 1
d655 1
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
