head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.4
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.03.27.19.14.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.24;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from glx.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_Glx_API XCB Glx API
 * @@brief Glx XCB Protocol Implementation.
 * @@{
 **/

#ifndef __GLX_H
#define __GLX_H

#include "xcb.h"
#include "xproto.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_GLX_MAJOR_VERSION 1
#define XCB_GLX_MINOR_VERSION 4

extern xcb_extension_t xcb_glx_id;

typedef uint32_t xcb_glx_pixmap_t;

/**
 * @@brief xcb_glx_pixmap_iterator_t
 **/
typedef struct xcb_glx_pixmap_iterator_t {
    xcb_glx_pixmap_t *data;
    int               rem;
    int               index;
} xcb_glx_pixmap_iterator_t;

typedef uint32_t xcb_glx_context_t;

/**
 * @@brief xcb_glx_context_iterator_t
 **/
typedef struct xcb_glx_context_iterator_t {
    xcb_glx_context_t *data;
    int                rem;
    int                index;
} xcb_glx_context_iterator_t;

typedef uint32_t xcb_glx_pbuffer_t;

/**
 * @@brief xcb_glx_pbuffer_iterator_t
 **/
typedef struct xcb_glx_pbuffer_iterator_t {
    xcb_glx_pbuffer_t *data;
    int                rem;
    int                index;
} xcb_glx_pbuffer_iterator_t;

typedef uint32_t xcb_glx_window_t;

/**
 * @@brief xcb_glx_window_iterator_t
 **/
typedef struct xcb_glx_window_iterator_t {
    xcb_glx_window_t *data;
    int               rem;
    int               index;
} xcb_glx_window_iterator_t;

typedef uint32_t xcb_glx_fbconfig_t;

/**
 * @@brief xcb_glx_fbconfig_iterator_t
 **/
typedef struct xcb_glx_fbconfig_iterator_t {
    xcb_glx_fbconfig_t *data;
    int                 rem;
    int                 index;
} xcb_glx_fbconfig_iterator_t;

typedef uint32_t xcb_glx_drawable_t;

/**
 * @@brief xcb_glx_drawable_iterator_t
 **/
typedef struct xcb_glx_drawable_iterator_t {
    xcb_glx_drawable_t *data;
    int                 rem;
    int                 index;
} xcb_glx_drawable_iterator_t;

typedef float xcb_glx_float32_t;

/**
 * @@brief xcb_glx_float32_iterator_t
 **/
typedef struct xcb_glx_float32_iterator_t {
    xcb_glx_float32_t *data;
    int                rem;
    int                index;
} xcb_glx_float32_iterator_t;

typedef double xcb_glx_float64_t;

/**
 * @@brief xcb_glx_float64_iterator_t
 **/
typedef struct xcb_glx_float64_iterator_t {
    xcb_glx_float64_t *data;
    int                rem;
    int                index;
} xcb_glx_float64_iterator_t;

typedef uint32_t xcb_glx_bool32_t;

/**
 * @@brief xcb_glx_bool32_iterator_t
 **/
typedef struct xcb_glx_bool32_iterator_t {
    xcb_glx_bool32_t *data;
    int               rem;
    int               index;
} xcb_glx_bool32_iterator_t;

typedef uint32_t xcb_glx_context_tag_t;

/**
 * @@brief xcb_glx_context_tag_iterator_t
 **/
typedef struct xcb_glx_context_tag_iterator_t {
    xcb_glx_context_tag_t *data;
    int                    rem;
    int                    index;
} xcb_glx_context_tag_iterator_t;

/** Opcode for xcb_glx_generic. */
#define XCB_GLX_GENERIC -1

/**
 * @@brief xcb_glx_generic_error_t
 **/
typedef struct xcb_glx_generic_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
    uint32_t bad_value;
    uint16_t minor_opcode;
    uint8_t  major_opcode;
    uint8_t  pad0[21];
} xcb_glx_generic_error_t;

/** Opcode for xcb_glx_bad_context. */
#define XCB_GLX_BAD_CONTEXT 0

typedef xcb_glx_generic_error_t xcb_glx_bad_context_error_t;

/** Opcode for xcb_glx_bad_context_state. */
#define XCB_GLX_BAD_CONTEXT_STATE 1

typedef xcb_glx_generic_error_t xcb_glx_bad_context_state_error_t;

/** Opcode for xcb_glx_bad_drawable. */
#define XCB_GLX_BAD_DRAWABLE 2

typedef xcb_glx_generic_error_t xcb_glx_bad_drawable_error_t;

/** Opcode for xcb_glx_bad_pixmap. */
#define XCB_GLX_BAD_PIXMAP 3

typedef xcb_glx_generic_error_t xcb_glx_bad_pixmap_error_t;

/** Opcode for xcb_glx_bad_context_tag. */
#define XCB_GLX_BAD_CONTEXT_TAG 4

typedef xcb_glx_generic_error_t xcb_glx_bad_context_tag_error_t;

/** Opcode for xcb_glx_bad_current_window. */
#define XCB_GLX_BAD_CURRENT_WINDOW 5

typedef xcb_glx_generic_error_t xcb_glx_bad_current_window_error_t;

/** Opcode for xcb_glx_bad_render_request. */
#define XCB_GLX_BAD_RENDER_REQUEST 6

typedef xcb_glx_generic_error_t xcb_glx_bad_render_request_error_t;

/** Opcode for xcb_glx_bad_large_request. */
#define XCB_GLX_BAD_LARGE_REQUEST 7

typedef xcb_glx_generic_error_t xcb_glx_bad_large_request_error_t;

/** Opcode for xcb_glx_unsupported_private_request. */
#define XCB_GLX_UNSUPPORTED_PRIVATE_REQUEST 8

typedef xcb_glx_generic_error_t xcb_glx_unsupported_private_request_error_t;

/** Opcode for xcb_glx_bad_fb_config. */
#define XCB_GLX_BAD_FB_CONFIG 9

typedef xcb_glx_generic_error_t xcb_glx_bad_fb_config_error_t;

/** Opcode for xcb_glx_bad_pbuffer. */
#define XCB_GLX_BAD_PBUFFER 10

typedef xcb_glx_generic_error_t xcb_glx_bad_pbuffer_error_t;

/** Opcode for xcb_glx_bad_current_drawable. */
#define XCB_GLX_BAD_CURRENT_DRAWABLE 11

typedef xcb_glx_generic_error_t xcb_glx_bad_current_drawable_error_t;

/** Opcode for xcb_glx_bad_window. */
#define XCB_GLX_BAD_WINDOW 12

typedef xcb_glx_generic_error_t xcb_glx_bad_window_error_t;

/** Opcode for xcb_glx_glx_bad_profile_arb. */
#define XCB_GLX_GLX_BAD_PROFILE_ARB 13

typedef xcb_glx_generic_error_t xcb_glx_glx_bad_profile_arb_error_t;

/** Opcode for xcb_glx_pbuffer_clobber. */
#define XCB_GLX_PBUFFER_CLOBBER 0

/**
 * @@brief xcb_glx_pbuffer_clobber_event_t
 **/
typedef struct xcb_glx_pbuffer_clobber_event_t {
    uint8_t            response_type;
    uint8_t            pad0;
    uint16_t           sequence;
    uint16_t           event_type;
    uint16_t           draw_type;
    xcb_glx_drawable_t drawable;
    uint32_t           b_mask;
    uint16_t           aux_buffer;
    uint16_t           x;
    uint16_t           y;
    uint16_t           width;
    uint16_t           height;
    uint16_t           count;
    uint8_t            pad1[4];
} xcb_glx_pbuffer_clobber_event_t;

/** Opcode for xcb_glx_buffer_swap_complete. */
#define XCB_GLX_BUFFER_SWAP_COMPLETE 1

/**
 * @@brief xcb_glx_buffer_swap_complete_event_t
 **/
typedef struct xcb_glx_buffer_swap_complete_event_t {
    uint8_t            response_type;
    uint8_t            pad0;
    uint16_t           sequence;
    uint16_t           event_type;
    uint8_t            pad1[2];
    xcb_glx_drawable_t drawable;
    uint32_t           ust_hi;
    uint32_t           ust_lo;
    uint32_t           msc_hi;
    uint32_t           msc_lo;
    uint32_t           sbc;
} xcb_glx_buffer_swap_complete_event_t;

typedef enum xcb_glx_pbcet_t {
    XCB_GLX_PBCET_DAMAGED = 32791,
    XCB_GLX_PBCET_SAVED = 32792
} xcb_glx_pbcet_t;

typedef enum xcb_glx_pbcdt_t {
    XCB_GLX_PBCDT_WINDOW = 32793,
    XCB_GLX_PBCDT_PBUFFER = 32794
} xcb_glx_pbcdt_t;

/** Opcode for xcb_glx_render. */
#define XCB_GLX_RENDER 1

/**
 * @@brief xcb_glx_render_request_t
 **/
typedef struct xcb_glx_render_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
} xcb_glx_render_request_t;

/** Opcode for xcb_glx_render_large. */
#define XCB_GLX_RENDER_LARGE 2

/**
 * @@brief xcb_glx_render_large_request_t
 **/
typedef struct xcb_glx_render_large_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint16_t              request_num;
    uint16_t              request_total;
    uint32_t              data_len;
} xcb_glx_render_large_request_t;

/** Opcode for xcb_glx_create_context. */
#define XCB_GLX_CREATE_CONTEXT 3

/**
 * @@brief xcb_glx_create_context_request_t
 **/
typedef struct xcb_glx_create_context_request_t {
    uint8_t           major_opcode;
    uint8_t           minor_opcode;
    uint16_t          length;
    xcb_glx_context_t context;
    xcb_visualid_t    visual;
    uint32_t          screen;
    xcb_glx_context_t share_list;
    uint8_t           is_direct;
    uint8_t           pad0[3];
} xcb_glx_create_context_request_t;

/** Opcode for xcb_glx_destroy_context. */
#define XCB_GLX_DESTROY_CONTEXT 4

/**
 * @@brief xcb_glx_destroy_context_request_t
 **/
typedef struct xcb_glx_destroy_context_request_t {
    uint8_t           major_opcode;
    uint8_t           minor_opcode;
    uint16_t          length;
    xcb_glx_context_t context;
} xcb_glx_destroy_context_request_t;

/**
 * @@brief xcb_glx_make_current_cookie_t
 **/
typedef struct xcb_glx_make_current_cookie_t {
    unsigned int sequence;
} xcb_glx_make_current_cookie_t;

/** Opcode for xcb_glx_make_current. */
#define XCB_GLX_MAKE_CURRENT 5

/**
 * @@brief xcb_glx_make_current_request_t
 **/
typedef struct xcb_glx_make_current_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_drawable_t    drawable;
    xcb_glx_context_t     context;
    xcb_glx_context_tag_t old_context_tag;
} xcb_glx_make_current_request_t;

/**
 * @@brief xcb_glx_make_current_reply_t
 **/
typedef struct xcb_glx_make_current_reply_t {
    uint8_t               response_type;
    uint8_t               pad0;
    uint16_t              sequence;
    uint32_t              length;
    xcb_glx_context_tag_t context_tag;
    uint8_t               pad1[20];
} xcb_glx_make_current_reply_t;

/**
 * @@brief xcb_glx_is_direct_cookie_t
 **/
typedef struct xcb_glx_is_direct_cookie_t {
    unsigned int sequence;
} xcb_glx_is_direct_cookie_t;

/** Opcode for xcb_glx_is_direct. */
#define XCB_GLX_IS_DIRECT 6

/**
 * @@brief xcb_glx_is_direct_request_t
 **/
typedef struct xcb_glx_is_direct_request_t {
    uint8_t           major_opcode;
    uint8_t           minor_opcode;
    uint16_t          length;
    xcb_glx_context_t context;
} xcb_glx_is_direct_request_t;

/**
 * @@brief xcb_glx_is_direct_reply_t
 **/
typedef struct xcb_glx_is_direct_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  is_direct;
    uint8_t  pad1[23];
} xcb_glx_is_direct_reply_t;

/**
 * @@brief xcb_glx_query_version_cookie_t
 **/
typedef struct xcb_glx_query_version_cookie_t {
    unsigned int sequence;
} xcb_glx_query_version_cookie_t;

/** Opcode for xcb_glx_query_version. */
#define XCB_GLX_QUERY_VERSION 7

/**
 * @@brief xcb_glx_query_version_request_t
 **/
typedef struct xcb_glx_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t major_version;
    uint32_t minor_version;
} xcb_glx_query_version_request_t;

/**
 * @@brief xcb_glx_query_version_reply_t
 **/
typedef struct xcb_glx_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t major_version;
    uint32_t minor_version;
    uint8_t  pad1[16];
} xcb_glx_query_version_reply_t;

/** Opcode for xcb_glx_wait_gl. */
#define XCB_GLX_WAIT_GL 8

/**
 * @@brief xcb_glx_wait_gl_request_t
 **/
typedef struct xcb_glx_wait_gl_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
} xcb_glx_wait_gl_request_t;

/** Opcode for xcb_glx_wait_x. */
#define XCB_GLX_WAIT_X 9

/**
 * @@brief xcb_glx_wait_x_request_t
 **/
typedef struct xcb_glx_wait_x_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
} xcb_glx_wait_x_request_t;

/** Opcode for xcb_glx_copy_context. */
#define XCB_GLX_COPY_CONTEXT 10

/**
 * @@brief xcb_glx_copy_context_request_t
 **/
typedef struct xcb_glx_copy_context_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_t     src;
    xcb_glx_context_t     dest;
    uint32_t              mask;
    xcb_glx_context_tag_t src_context_tag;
} xcb_glx_copy_context_request_t;

typedef enum xcb_glx_gc_t {
    XCB_GLX_GC_GL_CURRENT_BIT = 1,
    XCB_GLX_GC_GL_POINT_BIT = 2,
    XCB_GLX_GC_GL_LINE_BIT = 4,
    XCB_GLX_GC_GL_POLYGON_BIT = 8,
    XCB_GLX_GC_GL_POLYGON_STIPPLE_BIT = 16,
    XCB_GLX_GC_GL_PIXEL_MODE_BIT = 32,
    XCB_GLX_GC_GL_LIGHTING_BIT = 64,
    XCB_GLX_GC_GL_FOG_BIT = 128,
    XCB_GLX_GC_GL_DEPTH_BUFFER_BIT = 256,
    XCB_GLX_GC_GL_ACCUM_BUFFER_BIT = 512,
    XCB_GLX_GC_GL_STENCIL_BUFFER_BIT = 1024,
    XCB_GLX_GC_GL_VIEWPORT_BIT = 2048,
    XCB_GLX_GC_GL_TRANSFORM_BIT = 4096,
    XCB_GLX_GC_GL_ENABLE_BIT = 8192,
    XCB_GLX_GC_GL_COLOR_BUFFER_BIT = 16384,
    XCB_GLX_GC_GL_HINT_BIT = 32768,
    XCB_GLX_GC_GL_EVAL_BIT = 65536,
    XCB_GLX_GC_GL_LIST_BIT = 131072,
    XCB_GLX_GC_GL_TEXTURE_BIT = 262144,
    XCB_GLX_GC_GL_SCISSOR_BIT = 524288,
    XCB_GLX_GC_GL_ALL_ATTRIB_BITS = 16777215
} xcb_glx_gc_t;

/** Opcode for xcb_glx_swap_buffers. */
#define XCB_GLX_SWAP_BUFFERS 11

/**
 * @@brief xcb_glx_swap_buffers_request_t
 **/
typedef struct xcb_glx_swap_buffers_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    xcb_glx_drawable_t    drawable;
} xcb_glx_swap_buffers_request_t;

/** Opcode for xcb_glx_use_x_font. */
#define XCB_GLX_USE_X_FONT 12

/**
 * @@brief xcb_glx_use_x_font_request_t
 **/
typedef struct xcb_glx_use_x_font_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    xcb_font_t            font;
    uint32_t              first;
    uint32_t              count;
    uint32_t              list_base;
} xcb_glx_use_x_font_request_t;

/** Opcode for xcb_glx_create_glx_pixmap. */
#define XCB_GLX_CREATE_GLX_PIXMAP 13

/**
 * @@brief xcb_glx_create_glx_pixmap_request_t
 **/
typedef struct xcb_glx_create_glx_pixmap_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    uint32_t         screen;
    xcb_visualid_t   visual;
    xcb_pixmap_t     pixmap;
    xcb_glx_pixmap_t glx_pixmap;
} xcb_glx_create_glx_pixmap_request_t;

/**
 * @@brief xcb_glx_get_visual_configs_cookie_t
 **/
typedef struct xcb_glx_get_visual_configs_cookie_t {
    unsigned int sequence;
} xcb_glx_get_visual_configs_cookie_t;

/** Opcode for xcb_glx_get_visual_configs. */
#define XCB_GLX_GET_VISUAL_CONFIGS 14

/**
 * @@brief xcb_glx_get_visual_configs_request_t
 **/
typedef struct xcb_glx_get_visual_configs_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
} xcb_glx_get_visual_configs_request_t;

/**
 * @@brief xcb_glx_get_visual_configs_reply_t
 **/
typedef struct xcb_glx_get_visual_configs_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_visuals;
    uint32_t num_properties;
    uint8_t  pad1[16];
} xcb_glx_get_visual_configs_reply_t;

/** Opcode for xcb_glx_destroy_glx_pixmap. */
#define XCB_GLX_DESTROY_GLX_PIXMAP 15

/**
 * @@brief xcb_glx_destroy_glx_pixmap_request_t
 **/
typedef struct xcb_glx_destroy_glx_pixmap_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_glx_pixmap_t glx_pixmap;
} xcb_glx_destroy_glx_pixmap_request_t;

/** Opcode for xcb_glx_vendor_private. */
#define XCB_GLX_VENDOR_PRIVATE 16

/**
 * @@brief xcb_glx_vendor_private_request_t
 **/
typedef struct xcb_glx_vendor_private_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    uint32_t              vendor_code;
    xcb_glx_context_tag_t context_tag;
} xcb_glx_vendor_private_request_t;

/**
 * @@brief xcb_glx_vendor_private_with_reply_cookie_t
 **/
typedef struct xcb_glx_vendor_private_with_reply_cookie_t {
    unsigned int sequence;
} xcb_glx_vendor_private_with_reply_cookie_t;

/** Opcode for xcb_glx_vendor_private_with_reply. */
#define XCB_GLX_VENDOR_PRIVATE_WITH_REPLY 17

/**
 * @@brief xcb_glx_vendor_private_with_reply_request_t
 **/
typedef struct xcb_glx_vendor_private_with_reply_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    uint32_t              vendor_code;
    xcb_glx_context_tag_t context_tag;
} xcb_glx_vendor_private_with_reply_request_t;

/**
 * @@brief xcb_glx_vendor_private_with_reply_reply_t
 **/
typedef struct xcb_glx_vendor_private_with_reply_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t retval;
    uint8_t  data1[24];
} xcb_glx_vendor_private_with_reply_reply_t;

/**
 * @@brief xcb_glx_query_extensions_string_cookie_t
 **/
typedef struct xcb_glx_query_extensions_string_cookie_t {
    unsigned int sequence;
} xcb_glx_query_extensions_string_cookie_t;

/** Opcode for xcb_glx_query_extensions_string. */
#define XCB_GLX_QUERY_EXTENSIONS_STRING 18

/**
 * @@brief xcb_glx_query_extensions_string_request_t
 **/
typedef struct xcb_glx_query_extensions_string_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
} xcb_glx_query_extensions_string_request_t;

/**
 * @@brief xcb_glx_query_extensions_string_reply_t
 **/
typedef struct xcb_glx_query_extensions_string_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    uint8_t  pad2[16];
} xcb_glx_query_extensions_string_reply_t;

/**
 * @@brief xcb_glx_query_server_string_cookie_t
 **/
typedef struct xcb_glx_query_server_string_cookie_t {
    unsigned int sequence;
} xcb_glx_query_server_string_cookie_t;

/** Opcode for xcb_glx_query_server_string. */
#define XCB_GLX_QUERY_SERVER_STRING 19

/**
 * @@brief xcb_glx_query_server_string_request_t
 **/
typedef struct xcb_glx_query_server_string_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
    uint32_t name;
} xcb_glx_query_server_string_request_t;

/**
 * @@brief xcb_glx_query_server_string_reply_t
 **/
typedef struct xcb_glx_query_server_string_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t str_len;
    uint8_t  pad2[16];
} xcb_glx_query_server_string_reply_t;

/** Opcode for xcb_glx_client_info. */
#define XCB_GLX_CLIENT_INFO 20

/**
 * @@brief xcb_glx_client_info_request_t
 **/
typedef struct xcb_glx_client_info_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t major_version;
    uint32_t minor_version;
    uint32_t str_len;
} xcb_glx_client_info_request_t;

/**
 * @@brief xcb_glx_get_fb_configs_cookie_t
 **/
typedef struct xcb_glx_get_fb_configs_cookie_t {
    unsigned int sequence;
} xcb_glx_get_fb_configs_cookie_t;

/** Opcode for xcb_glx_get_fb_configs. */
#define XCB_GLX_GET_FB_CONFIGS 21

/**
 * @@brief xcb_glx_get_fb_configs_request_t
 **/
typedef struct xcb_glx_get_fb_configs_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
} xcb_glx_get_fb_configs_request_t;

/**
 * @@brief xcb_glx_get_fb_configs_reply_t
 **/
typedef struct xcb_glx_get_fb_configs_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_FB_configs;
    uint32_t num_properties;
    uint8_t  pad1[16];
} xcb_glx_get_fb_configs_reply_t;

/** Opcode for xcb_glx_create_pixmap. */
#define XCB_GLX_CREATE_PIXMAP 22

/**
 * @@brief xcb_glx_create_pixmap_request_t
 **/
typedef struct xcb_glx_create_pixmap_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    uint32_t           screen;
    xcb_glx_fbconfig_t fbconfig;
    xcb_pixmap_t       pixmap;
    xcb_glx_pixmap_t   glx_pixmap;
    uint32_t           num_attribs;
} xcb_glx_create_pixmap_request_t;

/** Opcode for xcb_glx_destroy_pixmap. */
#define XCB_GLX_DESTROY_PIXMAP 23

/**
 * @@brief xcb_glx_destroy_pixmap_request_t
 **/
typedef struct xcb_glx_destroy_pixmap_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_glx_pixmap_t glx_pixmap;
} xcb_glx_destroy_pixmap_request_t;

/** Opcode for xcb_glx_create_new_context. */
#define XCB_GLX_CREATE_NEW_CONTEXT 24

/**
 * @@brief xcb_glx_create_new_context_request_t
 **/
typedef struct xcb_glx_create_new_context_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_glx_context_t  context;
    xcb_glx_fbconfig_t fbconfig;
    uint32_t           screen;
    uint32_t           render_type;
    xcb_glx_context_t  share_list;
    uint8_t            is_direct;
    uint8_t            pad0[3];
} xcb_glx_create_new_context_request_t;

/**
 * @@brief xcb_glx_query_context_cookie_t
 **/
typedef struct xcb_glx_query_context_cookie_t {
    unsigned int sequence;
} xcb_glx_query_context_cookie_t;

/** Opcode for xcb_glx_query_context. */
#define XCB_GLX_QUERY_CONTEXT 25

/**
 * @@brief xcb_glx_query_context_request_t
 **/
typedef struct xcb_glx_query_context_request_t {
    uint8_t           major_opcode;
    uint8_t           minor_opcode;
    uint16_t          length;
    xcb_glx_context_t context;
} xcb_glx_query_context_request_t;

/**
 * @@brief xcb_glx_query_context_reply_t
 **/
typedef struct xcb_glx_query_context_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_attribs;
    uint8_t  pad1[20];
} xcb_glx_query_context_reply_t;

/**
 * @@brief xcb_glx_make_context_current_cookie_t
 **/
typedef struct xcb_glx_make_context_current_cookie_t {
    unsigned int sequence;
} xcb_glx_make_context_current_cookie_t;

/** Opcode for xcb_glx_make_context_current. */
#define XCB_GLX_MAKE_CONTEXT_CURRENT 26

/**
 * @@brief xcb_glx_make_context_current_request_t
 **/
typedef struct xcb_glx_make_context_current_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t old_context_tag;
    xcb_glx_drawable_t    drawable;
    xcb_glx_drawable_t    read_drawable;
    xcb_glx_context_t     context;
} xcb_glx_make_context_current_request_t;

/**
 * @@brief xcb_glx_make_context_current_reply_t
 **/
typedef struct xcb_glx_make_context_current_reply_t {
    uint8_t               response_type;
    uint8_t               pad0;
    uint16_t              sequence;
    uint32_t              length;
    xcb_glx_context_tag_t context_tag;
    uint8_t               pad1[20];
} xcb_glx_make_context_current_reply_t;

/** Opcode for xcb_glx_create_pbuffer. */
#define XCB_GLX_CREATE_PBUFFER 27

/**
 * @@brief xcb_glx_create_pbuffer_request_t
 **/
typedef struct xcb_glx_create_pbuffer_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    uint32_t           screen;
    xcb_glx_fbconfig_t fbconfig;
    xcb_glx_pbuffer_t  pbuffer;
    uint32_t           num_attribs;
} xcb_glx_create_pbuffer_request_t;

/** Opcode for xcb_glx_destroy_pbuffer. */
#define XCB_GLX_DESTROY_PBUFFER 28

/**
 * @@brief xcb_glx_destroy_pbuffer_request_t
 **/
typedef struct xcb_glx_destroy_pbuffer_request_t {
    uint8_t           major_opcode;
    uint8_t           minor_opcode;
    uint16_t          length;
    xcb_glx_pbuffer_t pbuffer;
} xcb_glx_destroy_pbuffer_request_t;

/**
 * @@brief xcb_glx_get_drawable_attributes_cookie_t
 **/
typedef struct xcb_glx_get_drawable_attributes_cookie_t {
    unsigned int sequence;
} xcb_glx_get_drawable_attributes_cookie_t;

/** Opcode for xcb_glx_get_drawable_attributes. */
#define XCB_GLX_GET_DRAWABLE_ATTRIBUTES 29

/**
 * @@brief xcb_glx_get_drawable_attributes_request_t
 **/
typedef struct xcb_glx_get_drawable_attributes_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_glx_drawable_t drawable;
} xcb_glx_get_drawable_attributes_request_t;

/**
 * @@brief xcb_glx_get_drawable_attributes_reply_t
 **/
typedef struct xcb_glx_get_drawable_attributes_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t num_attribs;
    uint8_t  pad1[20];
} xcb_glx_get_drawable_attributes_reply_t;

/** Opcode for xcb_glx_change_drawable_attributes. */
#define XCB_GLX_CHANGE_DRAWABLE_ATTRIBUTES 30

/**
 * @@brief xcb_glx_change_drawable_attributes_request_t
 **/
typedef struct xcb_glx_change_drawable_attributes_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_glx_drawable_t drawable;
    uint32_t           num_attribs;
} xcb_glx_change_drawable_attributes_request_t;

/** Opcode for xcb_glx_create_window. */
#define XCB_GLX_CREATE_WINDOW 31

/**
 * @@brief xcb_glx_create_window_request_t
 **/
typedef struct xcb_glx_create_window_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    uint32_t           screen;
    xcb_glx_fbconfig_t fbconfig;
    xcb_window_t       window;
    xcb_glx_window_t   glx_window;
    uint32_t           num_attribs;
} xcb_glx_create_window_request_t;

/** Opcode for xcb_glx_delete_window. */
#define XCB_GLX_DELETE_WINDOW 32

/**
 * @@brief xcb_glx_delete_window_request_t
 **/
typedef struct xcb_glx_delete_window_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_glx_window_t glxwindow;
} xcb_glx_delete_window_request_t;

/** Opcode for xcb_glx_set_client_info_arb. */
#define XCB_GLX_SET_CLIENT_INFO_ARB 33

/**
 * @@brief xcb_glx_set_client_info_arb_request_t
 **/
typedef struct xcb_glx_set_client_info_arb_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t major_version;
    uint32_t minor_version;
    uint32_t num_versions;
    uint32_t gl_str_len;
    uint32_t glx_str_len;
} xcb_glx_set_client_info_arb_request_t;

/** Opcode for xcb_glx_create_context_attribs_arb. */
#define XCB_GLX_CREATE_CONTEXT_ATTRIBS_ARB 34

/**
 * @@brief xcb_glx_create_context_attribs_arb_request_t
 **/
typedef struct xcb_glx_create_context_attribs_arb_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_glx_context_t  context;
    xcb_glx_fbconfig_t fbconfig;
    uint32_t           screen;
    xcb_glx_context_t  share_list;
    uint8_t            is_direct;
    uint8_t            pad0[3];
    uint32_t           num_attribs;
} xcb_glx_create_context_attribs_arb_request_t;

/** Opcode for xcb_glx_set_client_info_2arb. */
#define XCB_GLX_SET_CLIENT_INFO_2ARB 35

/**
 * @@brief xcb_glx_set_client_info_2arb_request_t
 **/
typedef struct xcb_glx_set_client_info_2arb_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t major_version;
    uint32_t minor_version;
    uint32_t num_versions;
    uint32_t gl_str_len;
    uint32_t glx_str_len;
} xcb_glx_set_client_info_2arb_request_t;

/** Opcode for xcb_glx_new_list. */
#define XCB_GLX_NEW_LIST 101

/**
 * @@brief xcb_glx_new_list_request_t
 **/
typedef struct xcb_glx_new_list_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              list;
    uint32_t              mode;
} xcb_glx_new_list_request_t;

/** Opcode for xcb_glx_end_list. */
#define XCB_GLX_END_LIST 102

/**
 * @@brief xcb_glx_end_list_request_t
 **/
typedef struct xcb_glx_end_list_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
} xcb_glx_end_list_request_t;

/** Opcode for xcb_glx_delete_lists. */
#define XCB_GLX_DELETE_LISTS 103

/**
 * @@brief xcb_glx_delete_lists_request_t
 **/
typedef struct xcb_glx_delete_lists_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              list;
    int32_t               range;
} xcb_glx_delete_lists_request_t;

/**
 * @@brief xcb_glx_gen_lists_cookie_t
 **/
typedef struct xcb_glx_gen_lists_cookie_t {
    unsigned int sequence;
} xcb_glx_gen_lists_cookie_t;

/** Opcode for xcb_glx_gen_lists. */
#define XCB_GLX_GEN_LISTS 104

/**
 * @@brief xcb_glx_gen_lists_request_t
 **/
typedef struct xcb_glx_gen_lists_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    int32_t               range;
} xcb_glx_gen_lists_request_t;

/**
 * @@brief xcb_glx_gen_lists_reply_t
 **/
typedef struct xcb_glx_gen_lists_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t ret_val;
} xcb_glx_gen_lists_reply_t;

/** Opcode for xcb_glx_feedback_buffer. */
#define XCB_GLX_FEEDBACK_BUFFER 105

/**
 * @@brief xcb_glx_feedback_buffer_request_t
 **/
typedef struct xcb_glx_feedback_buffer_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    int32_t               size;
    int32_t               type;
} xcb_glx_feedback_buffer_request_t;

/** Opcode for xcb_glx_select_buffer. */
#define XCB_GLX_SELECT_BUFFER 106

/**
 * @@brief xcb_glx_select_buffer_request_t
 **/
typedef struct xcb_glx_select_buffer_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    int32_t               size;
} xcb_glx_select_buffer_request_t;

/**
 * @@brief xcb_glx_render_mode_cookie_t
 **/
typedef struct xcb_glx_render_mode_cookie_t {
    unsigned int sequence;
} xcb_glx_render_mode_cookie_t;

/** Opcode for xcb_glx_render_mode. */
#define XCB_GLX_RENDER_MODE 107

/**
 * @@brief xcb_glx_render_mode_request_t
 **/
typedef struct xcb_glx_render_mode_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              mode;
} xcb_glx_render_mode_request_t;

/**
 * @@brief xcb_glx_render_mode_reply_t
 **/
typedef struct xcb_glx_render_mode_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t ret_val;
    uint32_t n;
    uint32_t new_mode;
    uint8_t  pad1[12];
} xcb_glx_render_mode_reply_t;

typedef enum xcb_glx_rm_t {
    XCB_GLX_RM_GL_RENDER = 7168,
    XCB_GLX_RM_GL_FEEDBACK = 7169,
    XCB_GLX_RM_GL_SELECT = 7170
} xcb_glx_rm_t;

/**
 * @@brief xcb_glx_finish_cookie_t
 **/
typedef struct xcb_glx_finish_cookie_t {
    unsigned int sequence;
} xcb_glx_finish_cookie_t;

/** Opcode for xcb_glx_finish. */
#define XCB_GLX_FINISH 108

/**
 * @@brief xcb_glx_finish_request_t
 **/
typedef struct xcb_glx_finish_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
} xcb_glx_finish_request_t;

/**
 * @@brief xcb_glx_finish_reply_t
 **/
typedef struct xcb_glx_finish_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
} xcb_glx_finish_reply_t;

/** Opcode for xcb_glx_pixel_storef. */
#define XCB_GLX_PIXEL_STOREF 109

/**
 * @@brief xcb_glx_pixel_storef_request_t
 **/
typedef struct xcb_glx_pixel_storef_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              pname;
    xcb_glx_float32_t     datum;
} xcb_glx_pixel_storef_request_t;

/** Opcode for xcb_glx_pixel_storei. */
#define XCB_GLX_PIXEL_STOREI 110

/**
 * @@brief xcb_glx_pixel_storei_request_t
 **/
typedef struct xcb_glx_pixel_storei_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              pname;
    int32_t               datum;
} xcb_glx_pixel_storei_request_t;

/**
 * @@brief xcb_glx_read_pixels_cookie_t
 **/
typedef struct xcb_glx_read_pixels_cookie_t {
    unsigned int sequence;
} xcb_glx_read_pixels_cookie_t;

/** Opcode for xcb_glx_read_pixels. */
#define XCB_GLX_READ_PIXELS 111

/**
 * @@brief xcb_glx_read_pixels_request_t
 **/
typedef struct xcb_glx_read_pixels_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    int32_t               x;
    int32_t               y;
    int32_t               width;
    int32_t               height;
    uint32_t              format;
    uint32_t              type;
    uint8_t               swap_bytes;
    uint8_t               lsb_first;
} xcb_glx_read_pixels_request_t;

/**
 * @@brief xcb_glx_read_pixels_reply_t
 **/
typedef struct xcb_glx_read_pixels_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[24];
} xcb_glx_read_pixels_reply_t;

/**
 * @@brief xcb_glx_get_booleanv_cookie_t
 **/
typedef struct xcb_glx_get_booleanv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_booleanv_cookie_t;

/** Opcode for xcb_glx_get_booleanv. */
#define XCB_GLX_GET_BOOLEANV 112

/**
 * @@brief xcb_glx_get_booleanv_request_t
 **/
typedef struct xcb_glx_get_booleanv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    int32_t               pname;
} xcb_glx_get_booleanv_request_t;

/**
 * @@brief xcb_glx_get_booleanv_reply_t
 **/
typedef struct xcb_glx_get_booleanv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    uint8_t  datum;
    uint8_t  pad2[15];
} xcb_glx_get_booleanv_reply_t;

/**
 * @@brief xcb_glx_get_clip_plane_cookie_t
 **/
typedef struct xcb_glx_get_clip_plane_cookie_t {
    unsigned int sequence;
} xcb_glx_get_clip_plane_cookie_t;

/** Opcode for xcb_glx_get_clip_plane. */
#define XCB_GLX_GET_CLIP_PLANE 113

/**
 * @@brief xcb_glx_get_clip_plane_request_t
 **/
typedef struct xcb_glx_get_clip_plane_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    int32_t               plane;
} xcb_glx_get_clip_plane_request_t;

/**
 * @@brief xcb_glx_get_clip_plane_reply_t
 **/
typedef struct xcb_glx_get_clip_plane_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[24];
} xcb_glx_get_clip_plane_reply_t;

/**
 * @@brief xcb_glx_get_doublev_cookie_t
 **/
typedef struct xcb_glx_get_doublev_cookie_t {
    unsigned int sequence;
} xcb_glx_get_doublev_cookie_t;

/** Opcode for xcb_glx_get_doublev. */
#define XCB_GLX_GET_DOUBLEV 114

/**
 * @@brief xcb_glx_get_doublev_request_t
 **/
typedef struct xcb_glx_get_doublev_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              pname;
} xcb_glx_get_doublev_request_t;

/**
 * @@brief xcb_glx_get_doublev_reply_t
 **/
typedef struct xcb_glx_get_doublev_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float64_t datum;
    uint8_t           pad2[8];
} xcb_glx_get_doublev_reply_t;

/**
 * @@brief xcb_glx_get_error_cookie_t
 **/
typedef struct xcb_glx_get_error_cookie_t {
    unsigned int sequence;
} xcb_glx_get_error_cookie_t;

/** Opcode for xcb_glx_get_error. */
#define XCB_GLX_GET_ERROR 115

/**
 * @@brief xcb_glx_get_error_request_t
 **/
typedef struct xcb_glx_get_error_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
} xcb_glx_get_error_request_t;

/**
 * @@brief xcb_glx_get_error_reply_t
 **/
typedef struct xcb_glx_get_error_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    int32_t  error;
} xcb_glx_get_error_reply_t;

/**
 * @@brief xcb_glx_get_floatv_cookie_t
 **/
typedef struct xcb_glx_get_floatv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_floatv_cookie_t;

/** Opcode for xcb_glx_get_floatv. */
#define XCB_GLX_GET_FLOATV 116

/**
 * @@brief xcb_glx_get_floatv_request_t
 **/
typedef struct xcb_glx_get_floatv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              pname;
} xcb_glx_get_floatv_request_t;

/**
 * @@brief xcb_glx_get_floatv_reply_t
 **/
typedef struct xcb_glx_get_floatv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float32_t datum;
    uint8_t           pad2[12];
} xcb_glx_get_floatv_reply_t;

/**
 * @@brief xcb_glx_get_integerv_cookie_t
 **/
typedef struct xcb_glx_get_integerv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_integerv_cookie_t;

/** Opcode for xcb_glx_get_integerv. */
#define XCB_GLX_GET_INTEGERV 117

/**
 * @@brief xcb_glx_get_integerv_request_t
 **/
typedef struct xcb_glx_get_integerv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              pname;
} xcb_glx_get_integerv_request_t;

/**
 * @@brief xcb_glx_get_integerv_reply_t
 **/
typedef struct xcb_glx_get_integerv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    int32_t  datum;
    uint8_t  pad2[12];
} xcb_glx_get_integerv_reply_t;

/**
 * @@brief xcb_glx_get_lightfv_cookie_t
 **/
typedef struct xcb_glx_get_lightfv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_lightfv_cookie_t;

/** Opcode for xcb_glx_get_lightfv. */
#define XCB_GLX_GET_LIGHTFV 118

/**
 * @@brief xcb_glx_get_lightfv_request_t
 **/
typedef struct xcb_glx_get_lightfv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              light;
    uint32_t              pname;
} xcb_glx_get_lightfv_request_t;

/**
 * @@brief xcb_glx_get_lightfv_reply_t
 **/
typedef struct xcb_glx_get_lightfv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float32_t datum;
    uint8_t           pad2[12];
} xcb_glx_get_lightfv_reply_t;

/**
 * @@brief xcb_glx_get_lightiv_cookie_t
 **/
typedef struct xcb_glx_get_lightiv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_lightiv_cookie_t;

/** Opcode for xcb_glx_get_lightiv. */
#define XCB_GLX_GET_LIGHTIV 119

/**
 * @@brief xcb_glx_get_lightiv_request_t
 **/
typedef struct xcb_glx_get_lightiv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              light;
    uint32_t              pname;
} xcb_glx_get_lightiv_request_t;

/**
 * @@brief xcb_glx_get_lightiv_reply_t
 **/
typedef struct xcb_glx_get_lightiv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    int32_t  datum;
    uint8_t  pad2[12];
} xcb_glx_get_lightiv_reply_t;

/**
 * @@brief xcb_glx_get_mapdv_cookie_t
 **/
typedef struct xcb_glx_get_mapdv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_mapdv_cookie_t;

/** Opcode for xcb_glx_get_mapdv. */
#define XCB_GLX_GET_MAPDV 120

/**
 * @@brief xcb_glx_get_mapdv_request_t
 **/
typedef struct xcb_glx_get_mapdv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              query;
} xcb_glx_get_mapdv_request_t;

/**
 * @@brief xcb_glx_get_mapdv_reply_t
 **/
typedef struct xcb_glx_get_mapdv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float64_t datum;
    uint8_t           pad2[8];
} xcb_glx_get_mapdv_reply_t;

/**
 * @@brief xcb_glx_get_mapfv_cookie_t
 **/
typedef struct xcb_glx_get_mapfv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_mapfv_cookie_t;

/** Opcode for xcb_glx_get_mapfv. */
#define XCB_GLX_GET_MAPFV 121

/**
 * @@brief xcb_glx_get_mapfv_request_t
 **/
typedef struct xcb_glx_get_mapfv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              query;
} xcb_glx_get_mapfv_request_t;

/**
 * @@brief xcb_glx_get_mapfv_reply_t
 **/
typedef struct xcb_glx_get_mapfv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float32_t datum;
    uint8_t           pad2[12];
} xcb_glx_get_mapfv_reply_t;

/**
 * @@brief xcb_glx_get_mapiv_cookie_t
 **/
typedef struct xcb_glx_get_mapiv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_mapiv_cookie_t;

/** Opcode for xcb_glx_get_mapiv. */
#define XCB_GLX_GET_MAPIV 122

/**
 * @@brief xcb_glx_get_mapiv_request_t
 **/
typedef struct xcb_glx_get_mapiv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              query;
} xcb_glx_get_mapiv_request_t;

/**
 * @@brief xcb_glx_get_mapiv_reply_t
 **/
typedef struct xcb_glx_get_mapiv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    int32_t  datum;
    uint8_t  pad2[12];
} xcb_glx_get_mapiv_reply_t;

/**
 * @@brief xcb_glx_get_materialfv_cookie_t
 **/
typedef struct xcb_glx_get_materialfv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_materialfv_cookie_t;

/** Opcode for xcb_glx_get_materialfv. */
#define XCB_GLX_GET_MATERIALFV 123

/**
 * @@brief xcb_glx_get_materialfv_request_t
 **/
typedef struct xcb_glx_get_materialfv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              face;
    uint32_t              pname;
} xcb_glx_get_materialfv_request_t;

/**
 * @@brief xcb_glx_get_materialfv_reply_t
 **/
typedef struct xcb_glx_get_materialfv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float32_t datum;
    uint8_t           pad2[12];
} xcb_glx_get_materialfv_reply_t;

/**
 * @@brief xcb_glx_get_materialiv_cookie_t
 **/
typedef struct xcb_glx_get_materialiv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_materialiv_cookie_t;

/** Opcode for xcb_glx_get_materialiv. */
#define XCB_GLX_GET_MATERIALIV 124

/**
 * @@brief xcb_glx_get_materialiv_request_t
 **/
typedef struct xcb_glx_get_materialiv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              face;
    uint32_t              pname;
} xcb_glx_get_materialiv_request_t;

/**
 * @@brief xcb_glx_get_materialiv_reply_t
 **/
typedef struct xcb_glx_get_materialiv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    int32_t  datum;
    uint8_t  pad2[12];
} xcb_glx_get_materialiv_reply_t;

/**
 * @@brief xcb_glx_get_pixel_mapfv_cookie_t
 **/
typedef struct xcb_glx_get_pixel_mapfv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_pixel_mapfv_cookie_t;

/** Opcode for xcb_glx_get_pixel_mapfv. */
#define XCB_GLX_GET_PIXEL_MAPFV 125

/**
 * @@brief xcb_glx_get_pixel_mapfv_request_t
 **/
typedef struct xcb_glx_get_pixel_mapfv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              map;
} xcb_glx_get_pixel_mapfv_request_t;

/**
 * @@brief xcb_glx_get_pixel_mapfv_reply_t
 **/
typedef struct xcb_glx_get_pixel_mapfv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float32_t datum;
    uint8_t           pad2[12];
} xcb_glx_get_pixel_mapfv_reply_t;

/**
 * @@brief xcb_glx_get_pixel_mapuiv_cookie_t
 **/
typedef struct xcb_glx_get_pixel_mapuiv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_pixel_mapuiv_cookie_t;

/** Opcode for xcb_glx_get_pixel_mapuiv. */
#define XCB_GLX_GET_PIXEL_MAPUIV 126

/**
 * @@brief xcb_glx_get_pixel_mapuiv_request_t
 **/
typedef struct xcb_glx_get_pixel_mapuiv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              map;
} xcb_glx_get_pixel_mapuiv_request_t;

/**
 * @@brief xcb_glx_get_pixel_mapuiv_reply_t
 **/
typedef struct xcb_glx_get_pixel_mapuiv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    uint32_t datum;
    uint8_t  pad2[12];
} xcb_glx_get_pixel_mapuiv_reply_t;

/**
 * @@brief xcb_glx_get_pixel_mapusv_cookie_t
 **/
typedef struct xcb_glx_get_pixel_mapusv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_pixel_mapusv_cookie_t;

/** Opcode for xcb_glx_get_pixel_mapusv. */
#define XCB_GLX_GET_PIXEL_MAPUSV 127

/**
 * @@brief xcb_glx_get_pixel_mapusv_request_t
 **/
typedef struct xcb_glx_get_pixel_mapusv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              map;
} xcb_glx_get_pixel_mapusv_request_t;

/**
 * @@brief xcb_glx_get_pixel_mapusv_reply_t
 **/
typedef struct xcb_glx_get_pixel_mapusv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    uint16_t datum;
    uint8_t  pad2[16];
} xcb_glx_get_pixel_mapusv_reply_t;

/**
 * @@brief xcb_glx_get_polygon_stipple_cookie_t
 **/
typedef struct xcb_glx_get_polygon_stipple_cookie_t {
    unsigned int sequence;
} xcb_glx_get_polygon_stipple_cookie_t;

/** Opcode for xcb_glx_get_polygon_stipple. */
#define XCB_GLX_GET_POLYGON_STIPPLE 128

/**
 * @@brief xcb_glx_get_polygon_stipple_request_t
 **/
typedef struct xcb_glx_get_polygon_stipple_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint8_t               lsb_first;
} xcb_glx_get_polygon_stipple_request_t;

/**
 * @@brief xcb_glx_get_polygon_stipple_reply_t
 **/
typedef struct xcb_glx_get_polygon_stipple_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[24];
} xcb_glx_get_polygon_stipple_reply_t;

/**
 * @@brief xcb_glx_get_string_cookie_t
 **/
typedef struct xcb_glx_get_string_cookie_t {
    unsigned int sequence;
} xcb_glx_get_string_cookie_t;

/** Opcode for xcb_glx_get_string. */
#define XCB_GLX_GET_STRING 129

/**
 * @@brief xcb_glx_get_string_request_t
 **/
typedef struct xcb_glx_get_string_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              name;
} xcb_glx_get_string_request_t;

/**
 * @@brief xcb_glx_get_string_reply_t
 **/
typedef struct xcb_glx_get_string_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    uint8_t  pad2[16];
} xcb_glx_get_string_reply_t;

/**
 * @@brief xcb_glx_get_tex_envfv_cookie_t
 **/
typedef struct xcb_glx_get_tex_envfv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_tex_envfv_cookie_t;

/** Opcode for xcb_glx_get_tex_envfv. */
#define XCB_GLX_GET_TEX_ENVFV 130

/**
 * @@brief xcb_glx_get_tex_envfv_request_t
 **/
typedef struct xcb_glx_get_tex_envfv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              pname;
} xcb_glx_get_tex_envfv_request_t;

/**
 * @@brief xcb_glx_get_tex_envfv_reply_t
 **/
typedef struct xcb_glx_get_tex_envfv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float32_t datum;
    uint8_t           pad2[12];
} xcb_glx_get_tex_envfv_reply_t;

/**
 * @@brief xcb_glx_get_tex_enviv_cookie_t
 **/
typedef struct xcb_glx_get_tex_enviv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_tex_enviv_cookie_t;

/** Opcode for xcb_glx_get_tex_enviv. */
#define XCB_GLX_GET_TEX_ENVIV 131

/**
 * @@brief xcb_glx_get_tex_enviv_request_t
 **/
typedef struct xcb_glx_get_tex_enviv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              pname;
} xcb_glx_get_tex_enviv_request_t;

/**
 * @@brief xcb_glx_get_tex_enviv_reply_t
 **/
typedef struct xcb_glx_get_tex_enviv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    int32_t  datum;
    uint8_t  pad2[12];
} xcb_glx_get_tex_enviv_reply_t;

/**
 * @@brief xcb_glx_get_tex_gendv_cookie_t
 **/
typedef struct xcb_glx_get_tex_gendv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_tex_gendv_cookie_t;

/** Opcode for xcb_glx_get_tex_gendv. */
#define XCB_GLX_GET_TEX_GENDV 132

/**
 * @@brief xcb_glx_get_tex_gendv_request_t
 **/
typedef struct xcb_glx_get_tex_gendv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              coord;
    uint32_t              pname;
} xcb_glx_get_tex_gendv_request_t;

/**
 * @@brief xcb_glx_get_tex_gendv_reply_t
 **/
typedef struct xcb_glx_get_tex_gendv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float64_t datum;
    uint8_t           pad2[8];
} xcb_glx_get_tex_gendv_reply_t;

/**
 * @@brief xcb_glx_get_tex_genfv_cookie_t
 **/
typedef struct xcb_glx_get_tex_genfv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_tex_genfv_cookie_t;

/** Opcode for xcb_glx_get_tex_genfv. */
#define XCB_GLX_GET_TEX_GENFV 133

/**
 * @@brief xcb_glx_get_tex_genfv_request_t
 **/
typedef struct xcb_glx_get_tex_genfv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              coord;
    uint32_t              pname;
} xcb_glx_get_tex_genfv_request_t;

/**
 * @@brief xcb_glx_get_tex_genfv_reply_t
 **/
typedef struct xcb_glx_get_tex_genfv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float32_t datum;
    uint8_t           pad2[12];
} xcb_glx_get_tex_genfv_reply_t;

/**
 * @@brief xcb_glx_get_tex_geniv_cookie_t
 **/
typedef struct xcb_glx_get_tex_geniv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_tex_geniv_cookie_t;

/** Opcode for xcb_glx_get_tex_geniv. */
#define XCB_GLX_GET_TEX_GENIV 134

/**
 * @@brief xcb_glx_get_tex_geniv_request_t
 **/
typedef struct xcb_glx_get_tex_geniv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              coord;
    uint32_t              pname;
} xcb_glx_get_tex_geniv_request_t;

/**
 * @@brief xcb_glx_get_tex_geniv_reply_t
 **/
typedef struct xcb_glx_get_tex_geniv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    int32_t  datum;
    uint8_t  pad2[12];
} xcb_glx_get_tex_geniv_reply_t;

/**
 * @@brief xcb_glx_get_tex_image_cookie_t
 **/
typedef struct xcb_glx_get_tex_image_cookie_t {
    unsigned int sequence;
} xcb_glx_get_tex_image_cookie_t;

/** Opcode for xcb_glx_get_tex_image. */
#define XCB_GLX_GET_TEX_IMAGE 135

/**
 * @@brief xcb_glx_get_tex_image_request_t
 **/
typedef struct xcb_glx_get_tex_image_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    int32_t               level;
    uint32_t              format;
    uint32_t              type;
    uint8_t               swap_bytes;
} xcb_glx_get_tex_image_request_t;

/**
 * @@brief xcb_glx_get_tex_image_reply_t
 **/
typedef struct xcb_glx_get_tex_image_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[8];
    int32_t  width;
    int32_t  height;
    int32_t  depth;
    uint8_t  pad2[4];
} xcb_glx_get_tex_image_reply_t;

/**
 * @@brief xcb_glx_get_tex_parameterfv_cookie_t
 **/
typedef struct xcb_glx_get_tex_parameterfv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_tex_parameterfv_cookie_t;

/** Opcode for xcb_glx_get_tex_parameterfv. */
#define XCB_GLX_GET_TEX_PARAMETERFV 136

/**
 * @@brief xcb_glx_get_tex_parameterfv_request_t
 **/
typedef struct xcb_glx_get_tex_parameterfv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              pname;
} xcb_glx_get_tex_parameterfv_request_t;

/**
 * @@brief xcb_glx_get_tex_parameterfv_reply_t
 **/
typedef struct xcb_glx_get_tex_parameterfv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float32_t datum;
    uint8_t           pad2[12];
} xcb_glx_get_tex_parameterfv_reply_t;

/**
 * @@brief xcb_glx_get_tex_parameteriv_cookie_t
 **/
typedef struct xcb_glx_get_tex_parameteriv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_tex_parameteriv_cookie_t;

/** Opcode for xcb_glx_get_tex_parameteriv. */
#define XCB_GLX_GET_TEX_PARAMETERIV 137

/**
 * @@brief xcb_glx_get_tex_parameteriv_request_t
 **/
typedef struct xcb_glx_get_tex_parameteriv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              pname;
} xcb_glx_get_tex_parameteriv_request_t;

/**
 * @@brief xcb_glx_get_tex_parameteriv_reply_t
 **/
typedef struct xcb_glx_get_tex_parameteriv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    int32_t  datum;
    uint8_t  pad2[12];
} xcb_glx_get_tex_parameteriv_reply_t;

/**
 * @@brief xcb_glx_get_tex_level_parameterfv_cookie_t
 **/
typedef struct xcb_glx_get_tex_level_parameterfv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_tex_level_parameterfv_cookie_t;

/** Opcode for xcb_glx_get_tex_level_parameterfv. */
#define XCB_GLX_GET_TEX_LEVEL_PARAMETERFV 138

/**
 * @@brief xcb_glx_get_tex_level_parameterfv_request_t
 **/
typedef struct xcb_glx_get_tex_level_parameterfv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    int32_t               level;
    uint32_t              pname;
} xcb_glx_get_tex_level_parameterfv_request_t;

/**
 * @@brief xcb_glx_get_tex_level_parameterfv_reply_t
 **/
typedef struct xcb_glx_get_tex_level_parameterfv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float32_t datum;
    uint8_t           pad2[12];
} xcb_glx_get_tex_level_parameterfv_reply_t;

/**
 * @@brief xcb_glx_get_tex_level_parameteriv_cookie_t
 **/
typedef struct xcb_glx_get_tex_level_parameteriv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_tex_level_parameteriv_cookie_t;

/** Opcode for xcb_glx_get_tex_level_parameteriv. */
#define XCB_GLX_GET_TEX_LEVEL_PARAMETERIV 139

/**
 * @@brief xcb_glx_get_tex_level_parameteriv_request_t
 **/
typedef struct xcb_glx_get_tex_level_parameteriv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    int32_t               level;
    uint32_t              pname;
} xcb_glx_get_tex_level_parameteriv_request_t;

/**
 * @@brief xcb_glx_get_tex_level_parameteriv_reply_t
 **/
typedef struct xcb_glx_get_tex_level_parameteriv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    int32_t  datum;
    uint8_t  pad2[12];
} xcb_glx_get_tex_level_parameteriv_reply_t;

/**
 * @@brief xcb_glx_is_enabled_cookie_t
 **/
typedef struct xcb_glx_is_enabled_cookie_t {
    unsigned int sequence;
} xcb_glx_is_enabled_cookie_t;

/** Opcode for xcb_glx_is_enabled. */
#define XCB_GLX_IS_ENABLED 140

/**
 * @@brief xcb_glx_is_enabled_request_t
 **/
typedef struct xcb_glx_is_enabled_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              capability;
} xcb_glx_is_enabled_request_t;

/**
 * @@brief xcb_glx_is_enabled_reply_t
 **/
typedef struct xcb_glx_is_enabled_reply_t {
    uint8_t          response_type;
    uint8_t          pad0;
    uint16_t         sequence;
    uint32_t         length;
    xcb_glx_bool32_t ret_val;
} xcb_glx_is_enabled_reply_t;

/**
 * @@brief xcb_glx_is_list_cookie_t
 **/
typedef struct xcb_glx_is_list_cookie_t {
    unsigned int sequence;
} xcb_glx_is_list_cookie_t;

/** Opcode for xcb_glx_is_list. */
#define XCB_GLX_IS_LIST 141

/**
 * @@brief xcb_glx_is_list_request_t
 **/
typedef struct xcb_glx_is_list_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              list;
} xcb_glx_is_list_request_t;

/**
 * @@brief xcb_glx_is_list_reply_t
 **/
typedef struct xcb_glx_is_list_reply_t {
    uint8_t          response_type;
    uint8_t          pad0;
    uint16_t         sequence;
    uint32_t         length;
    xcb_glx_bool32_t ret_val;
} xcb_glx_is_list_reply_t;

/** Opcode for xcb_glx_flush. */
#define XCB_GLX_FLUSH 142

/**
 * @@brief xcb_glx_flush_request_t
 **/
typedef struct xcb_glx_flush_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
} xcb_glx_flush_request_t;

/**
 * @@brief xcb_glx_are_textures_resident_cookie_t
 **/
typedef struct xcb_glx_are_textures_resident_cookie_t {
    unsigned int sequence;
} xcb_glx_are_textures_resident_cookie_t;

/** Opcode for xcb_glx_are_textures_resident. */
#define XCB_GLX_ARE_TEXTURES_RESIDENT 143

/**
 * @@brief xcb_glx_are_textures_resident_request_t
 **/
typedef struct xcb_glx_are_textures_resident_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    int32_t               n;
} xcb_glx_are_textures_resident_request_t;

/**
 * @@brief xcb_glx_are_textures_resident_reply_t
 **/
typedef struct xcb_glx_are_textures_resident_reply_t {
    uint8_t          response_type;
    uint8_t          pad0;
    uint16_t         sequence;
    uint32_t         length;
    xcb_glx_bool32_t ret_val;
    uint8_t          pad1[20];
} xcb_glx_are_textures_resident_reply_t;

/** Opcode for xcb_glx_delete_textures. */
#define XCB_GLX_DELETE_TEXTURES 144

/**
 * @@brief xcb_glx_delete_textures_request_t
 **/
typedef struct xcb_glx_delete_textures_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    int32_t               n;
} xcb_glx_delete_textures_request_t;

/**
 * @@brief xcb_glx_gen_textures_cookie_t
 **/
typedef struct xcb_glx_gen_textures_cookie_t {
    unsigned int sequence;
} xcb_glx_gen_textures_cookie_t;

/** Opcode for xcb_glx_gen_textures. */
#define XCB_GLX_GEN_TEXTURES 145

/**
 * @@brief xcb_glx_gen_textures_request_t
 **/
typedef struct xcb_glx_gen_textures_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    int32_t               n;
} xcb_glx_gen_textures_request_t;

/**
 * @@brief xcb_glx_gen_textures_reply_t
 **/
typedef struct xcb_glx_gen_textures_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[24];
} xcb_glx_gen_textures_reply_t;

/**
 * @@brief xcb_glx_is_texture_cookie_t
 **/
typedef struct xcb_glx_is_texture_cookie_t {
    unsigned int sequence;
} xcb_glx_is_texture_cookie_t;

/** Opcode for xcb_glx_is_texture. */
#define XCB_GLX_IS_TEXTURE 146

/**
 * @@brief xcb_glx_is_texture_request_t
 **/
typedef struct xcb_glx_is_texture_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              texture;
} xcb_glx_is_texture_request_t;

/**
 * @@brief xcb_glx_is_texture_reply_t
 **/
typedef struct xcb_glx_is_texture_reply_t {
    uint8_t          response_type;
    uint8_t          pad0;
    uint16_t         sequence;
    uint32_t         length;
    xcb_glx_bool32_t ret_val;
} xcb_glx_is_texture_reply_t;

/**
 * @@brief xcb_glx_get_color_table_cookie_t
 **/
typedef struct xcb_glx_get_color_table_cookie_t {
    unsigned int sequence;
} xcb_glx_get_color_table_cookie_t;

/** Opcode for xcb_glx_get_color_table. */
#define XCB_GLX_GET_COLOR_TABLE 147

/**
 * @@brief xcb_glx_get_color_table_request_t
 **/
typedef struct xcb_glx_get_color_table_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              format;
    uint32_t              type;
    uint8_t               swap_bytes;
} xcb_glx_get_color_table_request_t;

/**
 * @@brief xcb_glx_get_color_table_reply_t
 **/
typedef struct xcb_glx_get_color_table_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[8];
    int32_t  width;
    uint8_t  pad2[12];
} xcb_glx_get_color_table_reply_t;

/**
 * @@brief xcb_glx_get_color_table_parameterfv_cookie_t
 **/
typedef struct xcb_glx_get_color_table_parameterfv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_color_table_parameterfv_cookie_t;

/** Opcode for xcb_glx_get_color_table_parameterfv. */
#define XCB_GLX_GET_COLOR_TABLE_PARAMETERFV 148

/**
 * @@brief xcb_glx_get_color_table_parameterfv_request_t
 **/
typedef struct xcb_glx_get_color_table_parameterfv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              pname;
} xcb_glx_get_color_table_parameterfv_request_t;

/**
 * @@brief xcb_glx_get_color_table_parameterfv_reply_t
 **/
typedef struct xcb_glx_get_color_table_parameterfv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float32_t datum;
    uint8_t           pad2[12];
} xcb_glx_get_color_table_parameterfv_reply_t;

/**
 * @@brief xcb_glx_get_color_table_parameteriv_cookie_t
 **/
typedef struct xcb_glx_get_color_table_parameteriv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_color_table_parameteriv_cookie_t;

/** Opcode for xcb_glx_get_color_table_parameteriv. */
#define XCB_GLX_GET_COLOR_TABLE_PARAMETERIV 149

/**
 * @@brief xcb_glx_get_color_table_parameteriv_request_t
 **/
typedef struct xcb_glx_get_color_table_parameteriv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              pname;
} xcb_glx_get_color_table_parameteriv_request_t;

/**
 * @@brief xcb_glx_get_color_table_parameteriv_reply_t
 **/
typedef struct xcb_glx_get_color_table_parameteriv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    int32_t  datum;
    uint8_t  pad2[12];
} xcb_glx_get_color_table_parameteriv_reply_t;

/**
 * @@brief xcb_glx_get_convolution_filter_cookie_t
 **/
typedef struct xcb_glx_get_convolution_filter_cookie_t {
    unsigned int sequence;
} xcb_glx_get_convolution_filter_cookie_t;

/** Opcode for xcb_glx_get_convolution_filter. */
#define XCB_GLX_GET_CONVOLUTION_FILTER 150

/**
 * @@brief xcb_glx_get_convolution_filter_request_t
 **/
typedef struct xcb_glx_get_convolution_filter_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              format;
    uint32_t              type;
    uint8_t               swap_bytes;
} xcb_glx_get_convolution_filter_request_t;

/**
 * @@brief xcb_glx_get_convolution_filter_reply_t
 **/
typedef struct xcb_glx_get_convolution_filter_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[8];
    int32_t  width;
    int32_t  height;
    uint8_t  pad2[8];
} xcb_glx_get_convolution_filter_reply_t;

/**
 * @@brief xcb_glx_get_convolution_parameterfv_cookie_t
 **/
typedef struct xcb_glx_get_convolution_parameterfv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_convolution_parameterfv_cookie_t;

/** Opcode for xcb_glx_get_convolution_parameterfv. */
#define XCB_GLX_GET_CONVOLUTION_PARAMETERFV 151

/**
 * @@brief xcb_glx_get_convolution_parameterfv_request_t
 **/
typedef struct xcb_glx_get_convolution_parameterfv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              pname;
} xcb_glx_get_convolution_parameterfv_request_t;

/**
 * @@brief xcb_glx_get_convolution_parameterfv_reply_t
 **/
typedef struct xcb_glx_get_convolution_parameterfv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float32_t datum;
    uint8_t           pad2[12];
} xcb_glx_get_convolution_parameterfv_reply_t;

/**
 * @@brief xcb_glx_get_convolution_parameteriv_cookie_t
 **/
typedef struct xcb_glx_get_convolution_parameteriv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_convolution_parameteriv_cookie_t;

/** Opcode for xcb_glx_get_convolution_parameteriv. */
#define XCB_GLX_GET_CONVOLUTION_PARAMETERIV 152

/**
 * @@brief xcb_glx_get_convolution_parameteriv_request_t
 **/
typedef struct xcb_glx_get_convolution_parameteriv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              pname;
} xcb_glx_get_convolution_parameteriv_request_t;

/**
 * @@brief xcb_glx_get_convolution_parameteriv_reply_t
 **/
typedef struct xcb_glx_get_convolution_parameteriv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    int32_t  datum;
    uint8_t  pad2[12];
} xcb_glx_get_convolution_parameteriv_reply_t;

/**
 * @@brief xcb_glx_get_separable_filter_cookie_t
 **/
typedef struct xcb_glx_get_separable_filter_cookie_t {
    unsigned int sequence;
} xcb_glx_get_separable_filter_cookie_t;

/** Opcode for xcb_glx_get_separable_filter. */
#define XCB_GLX_GET_SEPARABLE_FILTER 153

/**
 * @@brief xcb_glx_get_separable_filter_request_t
 **/
typedef struct xcb_glx_get_separable_filter_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              format;
    uint32_t              type;
    uint8_t               swap_bytes;
} xcb_glx_get_separable_filter_request_t;

/**
 * @@brief xcb_glx_get_separable_filter_reply_t
 **/
typedef struct xcb_glx_get_separable_filter_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[8];
    int32_t  row_w;
    int32_t  col_h;
    uint8_t  pad2[8];
} xcb_glx_get_separable_filter_reply_t;

/**
 * @@brief xcb_glx_get_histogram_cookie_t
 **/
typedef struct xcb_glx_get_histogram_cookie_t {
    unsigned int sequence;
} xcb_glx_get_histogram_cookie_t;

/** Opcode for xcb_glx_get_histogram. */
#define XCB_GLX_GET_HISTOGRAM 154

/**
 * @@brief xcb_glx_get_histogram_request_t
 **/
typedef struct xcb_glx_get_histogram_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              format;
    uint32_t              type;
    uint8_t               swap_bytes;
    uint8_t               reset;
} xcb_glx_get_histogram_request_t;

/**
 * @@brief xcb_glx_get_histogram_reply_t
 **/
typedef struct xcb_glx_get_histogram_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[8];
    int32_t  width;
    uint8_t  pad2[12];
} xcb_glx_get_histogram_reply_t;

/**
 * @@brief xcb_glx_get_histogram_parameterfv_cookie_t
 **/
typedef struct xcb_glx_get_histogram_parameterfv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_histogram_parameterfv_cookie_t;

/** Opcode for xcb_glx_get_histogram_parameterfv. */
#define XCB_GLX_GET_HISTOGRAM_PARAMETERFV 155

/**
 * @@brief xcb_glx_get_histogram_parameterfv_request_t
 **/
typedef struct xcb_glx_get_histogram_parameterfv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              pname;
} xcb_glx_get_histogram_parameterfv_request_t;

/**
 * @@brief xcb_glx_get_histogram_parameterfv_reply_t
 **/
typedef struct xcb_glx_get_histogram_parameterfv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float32_t datum;
    uint8_t           pad2[12];
} xcb_glx_get_histogram_parameterfv_reply_t;

/**
 * @@brief xcb_glx_get_histogram_parameteriv_cookie_t
 **/
typedef struct xcb_glx_get_histogram_parameteriv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_histogram_parameteriv_cookie_t;

/** Opcode for xcb_glx_get_histogram_parameteriv. */
#define XCB_GLX_GET_HISTOGRAM_PARAMETERIV 156

/**
 * @@brief xcb_glx_get_histogram_parameteriv_request_t
 **/
typedef struct xcb_glx_get_histogram_parameteriv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              pname;
} xcb_glx_get_histogram_parameteriv_request_t;

/**
 * @@brief xcb_glx_get_histogram_parameteriv_reply_t
 **/
typedef struct xcb_glx_get_histogram_parameteriv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    int32_t  datum;
    uint8_t  pad2[12];
} xcb_glx_get_histogram_parameteriv_reply_t;

/**
 * @@brief xcb_glx_get_minmax_cookie_t
 **/
typedef struct xcb_glx_get_minmax_cookie_t {
    unsigned int sequence;
} xcb_glx_get_minmax_cookie_t;

/** Opcode for xcb_glx_get_minmax. */
#define XCB_GLX_GET_MINMAX 157

/**
 * @@brief xcb_glx_get_minmax_request_t
 **/
typedef struct xcb_glx_get_minmax_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              format;
    uint32_t              type;
    uint8_t               swap_bytes;
    uint8_t               reset;
} xcb_glx_get_minmax_request_t;

/**
 * @@brief xcb_glx_get_minmax_reply_t
 **/
typedef struct xcb_glx_get_minmax_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[24];
} xcb_glx_get_minmax_reply_t;

/**
 * @@brief xcb_glx_get_minmax_parameterfv_cookie_t
 **/
typedef struct xcb_glx_get_minmax_parameterfv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_minmax_parameterfv_cookie_t;

/** Opcode for xcb_glx_get_minmax_parameterfv. */
#define XCB_GLX_GET_MINMAX_PARAMETERFV 158

/**
 * @@brief xcb_glx_get_minmax_parameterfv_request_t
 **/
typedef struct xcb_glx_get_minmax_parameterfv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              pname;
} xcb_glx_get_minmax_parameterfv_request_t;

/**
 * @@brief xcb_glx_get_minmax_parameterfv_reply_t
 **/
typedef struct xcb_glx_get_minmax_parameterfv_reply_t {
    uint8_t           response_type;
    uint8_t           pad0;
    uint16_t          sequence;
    uint32_t          length;
    uint8_t           pad1[4];
    uint32_t          n;
    xcb_glx_float32_t datum;
    uint8_t           pad2[12];
} xcb_glx_get_minmax_parameterfv_reply_t;

/**
 * @@brief xcb_glx_get_minmax_parameteriv_cookie_t
 **/
typedef struct xcb_glx_get_minmax_parameteriv_cookie_t {
    unsigned int sequence;
} xcb_glx_get_minmax_parameteriv_cookie_t;

/** Opcode for xcb_glx_get_minmax_parameteriv. */
#define XCB_GLX_GET_MINMAX_PARAMETERIV 159

/**
 * @@brief xcb_glx_get_minmax_parameteriv_request_t
 **/
typedef struct xcb_glx_get_minmax_parameteriv_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              pname;
} xcb_glx_get_minmax_parameteriv_request_t;

/**
 * @@brief xcb_glx_get_minmax_parameteriv_reply_t
 **/
typedef struct xcb_glx_get_minmax_parameteriv_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    int32_t  datum;
    uint8_t  pad2[12];
} xcb_glx_get_minmax_parameteriv_reply_t;

/**
 * @@brief xcb_glx_get_compressed_tex_image_arb_cookie_t
 **/
typedef struct xcb_glx_get_compressed_tex_image_arb_cookie_t {
    unsigned int sequence;
} xcb_glx_get_compressed_tex_image_arb_cookie_t;

/** Opcode for xcb_glx_get_compressed_tex_image_arb. */
#define XCB_GLX_GET_COMPRESSED_TEX_IMAGE_ARB 160

/**
 * @@brief xcb_glx_get_compressed_tex_image_arb_request_t
 **/
typedef struct xcb_glx_get_compressed_tex_image_arb_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    int32_t               level;
} xcb_glx_get_compressed_tex_image_arb_request_t;

/**
 * @@brief xcb_glx_get_compressed_tex_image_arb_reply_t
 **/
typedef struct xcb_glx_get_compressed_tex_image_arb_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[8];
    int32_t  size;
    uint8_t  pad2[12];
} xcb_glx_get_compressed_tex_image_arb_reply_t;

/** Opcode for xcb_glx_delete_queries_arb. */
#define XCB_GLX_DELETE_QUERIES_ARB 161

/**
 * @@brief xcb_glx_delete_queries_arb_request_t
 **/
typedef struct xcb_glx_delete_queries_arb_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    int32_t               n;
} xcb_glx_delete_queries_arb_request_t;

/**
 * @@brief xcb_glx_gen_queries_arb_cookie_t
 **/
typedef struct xcb_glx_gen_queries_arb_cookie_t {
    unsigned int sequence;
} xcb_glx_gen_queries_arb_cookie_t;

/** Opcode for xcb_glx_gen_queries_arb. */
#define XCB_GLX_GEN_QUERIES_ARB 162

/**
 * @@brief xcb_glx_gen_queries_arb_request_t
 **/
typedef struct xcb_glx_gen_queries_arb_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    int32_t               n;
} xcb_glx_gen_queries_arb_request_t;

/**
 * @@brief xcb_glx_gen_queries_arb_reply_t
 **/
typedef struct xcb_glx_gen_queries_arb_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[24];
} xcb_glx_gen_queries_arb_reply_t;

/**
 * @@brief xcb_glx_is_query_arb_cookie_t
 **/
typedef struct xcb_glx_is_query_arb_cookie_t {
    unsigned int sequence;
} xcb_glx_is_query_arb_cookie_t;

/** Opcode for xcb_glx_is_query_arb. */
#define XCB_GLX_IS_QUERY_ARB 163

/**
 * @@brief xcb_glx_is_query_arb_request_t
 **/
typedef struct xcb_glx_is_query_arb_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              id;
} xcb_glx_is_query_arb_request_t;

/**
 * @@brief xcb_glx_is_query_arb_reply_t
 **/
typedef struct xcb_glx_is_query_arb_reply_t {
    uint8_t          response_type;
    uint8_t          pad0;
    uint16_t         sequence;
    uint32_t         length;
    xcb_glx_bool32_t ret_val;
} xcb_glx_is_query_arb_reply_t;

/**
 * @@brief xcb_glx_get_queryiv_arb_cookie_t
 **/
typedef struct xcb_glx_get_queryiv_arb_cookie_t {
    unsigned int sequence;
} xcb_glx_get_queryiv_arb_cookie_t;

/** Opcode for xcb_glx_get_queryiv_arb. */
#define XCB_GLX_GET_QUERYIV_ARB 164

/**
 * @@brief xcb_glx_get_queryiv_arb_request_t
 **/
typedef struct xcb_glx_get_queryiv_arb_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              target;
    uint32_t              pname;
} xcb_glx_get_queryiv_arb_request_t;

/**
 * @@brief xcb_glx_get_queryiv_arb_reply_t
 **/
typedef struct xcb_glx_get_queryiv_arb_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    int32_t  datum;
    uint8_t  pad2[12];
} xcb_glx_get_queryiv_arb_reply_t;

/**
 * @@brief xcb_glx_get_query_objectiv_arb_cookie_t
 **/
typedef struct xcb_glx_get_query_objectiv_arb_cookie_t {
    unsigned int sequence;
} xcb_glx_get_query_objectiv_arb_cookie_t;

/** Opcode for xcb_glx_get_query_objectiv_arb. */
#define XCB_GLX_GET_QUERY_OBJECTIV_ARB 165

/**
 * @@brief xcb_glx_get_query_objectiv_arb_request_t
 **/
typedef struct xcb_glx_get_query_objectiv_arb_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              id;
    uint32_t              pname;
} xcb_glx_get_query_objectiv_arb_request_t;

/**
 * @@brief xcb_glx_get_query_objectiv_arb_reply_t
 **/
typedef struct xcb_glx_get_query_objectiv_arb_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    int32_t  datum;
    uint8_t  pad2[12];
} xcb_glx_get_query_objectiv_arb_reply_t;

/**
 * @@brief xcb_glx_get_query_objectuiv_arb_cookie_t
 **/
typedef struct xcb_glx_get_query_objectuiv_arb_cookie_t {
    unsigned int sequence;
} xcb_glx_get_query_objectuiv_arb_cookie_t;

/** Opcode for xcb_glx_get_query_objectuiv_arb. */
#define XCB_GLX_GET_QUERY_OBJECTUIV_ARB 166

/**
 * @@brief xcb_glx_get_query_objectuiv_arb_request_t
 **/
typedef struct xcb_glx_get_query_objectuiv_arb_request_t {
    uint8_t               major_opcode;
    uint8_t               minor_opcode;
    uint16_t              length;
    xcb_glx_context_tag_t context_tag;
    uint32_t              id;
    uint32_t              pname;
} xcb_glx_get_query_objectuiv_arb_request_t;

/**
 * @@brief xcb_glx_get_query_objectuiv_arb_reply_t
 **/
typedef struct xcb_glx_get_query_objectuiv_arb_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[4];
    uint32_t n;
    uint32_t datum;
    uint8_t  pad2[12];
} xcb_glx_get_query_objectuiv_arb_reply_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_glx_pixmap_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_glx_pixmap_t)
 */
void
xcb_glx_pixmap_next (xcb_glx_pixmap_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_glx_pixmap_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_glx_pixmap_end (xcb_glx_pixmap_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_glx_context_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_glx_context_t)
 */
void
xcb_glx_context_next (xcb_glx_context_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_glx_context_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_glx_context_end (xcb_glx_context_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_glx_pbuffer_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_glx_pbuffer_t)
 */
void
xcb_glx_pbuffer_next (xcb_glx_pbuffer_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_glx_pbuffer_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_glx_pbuffer_end (xcb_glx_pbuffer_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_glx_window_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_glx_window_t)
 */
void
xcb_glx_window_next (xcb_glx_window_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_glx_window_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_glx_window_end (xcb_glx_window_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_glx_fbconfig_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_glx_fbconfig_t)
 */
void
xcb_glx_fbconfig_next (xcb_glx_fbconfig_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_glx_fbconfig_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_glx_fbconfig_end (xcb_glx_fbconfig_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_glx_drawable_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_glx_drawable_t)
 */
void
xcb_glx_drawable_next (xcb_glx_drawable_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_glx_drawable_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_glx_drawable_end (xcb_glx_drawable_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_glx_float32_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_glx_float32_t)
 */
void
xcb_glx_float32_next (xcb_glx_float32_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_glx_float32_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_glx_float32_end (xcb_glx_float32_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_glx_float64_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_glx_float64_t)
 */
void
xcb_glx_float64_next (xcb_glx_float64_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_glx_float64_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_glx_float64_end (xcb_glx_float64_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_glx_bool32_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_glx_bool32_t)
 */
void
xcb_glx_bool32_next (xcb_glx_bool32_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_glx_bool32_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_glx_bool32_end (xcb_glx_bool32_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_glx_context_tag_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_glx_context_tag_t)
 */
void
xcb_glx_context_tag_next (xcb_glx_context_tag_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_glx_context_tag_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_glx_context_tag_end (xcb_glx_context_tag_iterator_t i);

int
xcb_glx_render_sizeof (const void  *_buffer,
                       uint32_t     data_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_render_checked (xcb_connection_t      *c,
                        xcb_glx_context_tag_t  context_tag,
                        uint32_t               data_len,
                        const uint8_t         *data);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_render (xcb_connection_t      *c,
                xcb_glx_context_tag_t  context_tag,
                uint32_t               data_len,
                const uint8_t         *data);

uint8_t *
xcb_glx_render_data (const xcb_glx_render_request_t *R);

int
xcb_glx_render_data_length (const xcb_glx_render_request_t *R);

xcb_generic_iterator_t
xcb_glx_render_data_end (const xcb_glx_render_request_t *R);

int
xcb_glx_render_large_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_render_large_checked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint16_t               request_num,
                              uint16_t               request_total,
                              uint32_t               data_len,
                              const uint8_t         *data);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_render_large (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      uint16_t               request_num,
                      uint16_t               request_total,
                      uint32_t               data_len,
                      const uint8_t         *data);

uint8_t *
xcb_glx_render_large_data (const xcb_glx_render_large_request_t *R);

int
xcb_glx_render_large_data_length (const xcb_glx_render_large_request_t *R);

xcb_generic_iterator_t
xcb_glx_render_large_data_end (const xcb_glx_render_large_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_create_context_checked (xcb_connection_t  *c,
                                xcb_glx_context_t  context,
                                xcb_visualid_t     visual,
                                uint32_t           screen,
                                xcb_glx_context_t  share_list,
                                uint8_t            is_direct);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_create_context (xcb_connection_t  *c,
                        xcb_glx_context_t  context,
                        xcb_visualid_t     visual,
                        uint32_t           screen,
                        xcb_glx_context_t  share_list,
                        uint8_t            is_direct);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_destroy_context_checked (xcb_connection_t  *c,
                                 xcb_glx_context_t  context);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_destroy_context (xcb_connection_t  *c,
                         xcb_glx_context_t  context);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_make_current_cookie_t
xcb_glx_make_current (xcb_connection_t      *c,
                      xcb_glx_drawable_t     drawable,
                      xcb_glx_context_t      context,
                      xcb_glx_context_tag_t  old_context_tag);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_make_current_cookie_t
xcb_glx_make_current_unchecked (xcb_connection_t      *c,
                                xcb_glx_drawable_t     drawable,
                                xcb_glx_context_t      context,
                                xcb_glx_context_tag_t  old_context_tag);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_make_current_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_make_current_reply_t *
xcb_glx_make_current_reply (xcb_connection_t               *c,
                            xcb_glx_make_current_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_is_direct_cookie_t
xcb_glx_is_direct (xcb_connection_t  *c,
                   xcb_glx_context_t  context);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_is_direct_cookie_t
xcb_glx_is_direct_unchecked (xcb_connection_t  *c,
                             xcb_glx_context_t  context);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_is_direct_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_is_direct_reply_t *
xcb_glx_is_direct_reply (xcb_connection_t            *c,
                         xcb_glx_is_direct_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_query_version_cookie_t
xcb_glx_query_version (xcb_connection_t *c,
                       uint32_t          major_version,
                       uint32_t          minor_version);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_query_version_cookie_t
xcb_glx_query_version_unchecked (xcb_connection_t *c,
                                 uint32_t          major_version,
                                 uint32_t          minor_version);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_query_version_reply_t *
xcb_glx_query_version_reply (xcb_connection_t                *c,
                             xcb_glx_query_version_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_wait_gl_checked (xcb_connection_t      *c,
                         xcb_glx_context_tag_t  context_tag);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_wait_gl (xcb_connection_t      *c,
                 xcb_glx_context_tag_t  context_tag);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_wait_x_checked (xcb_connection_t      *c,
                        xcb_glx_context_tag_t  context_tag);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_wait_x (xcb_connection_t      *c,
                xcb_glx_context_tag_t  context_tag);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_copy_context_checked (xcb_connection_t      *c,
                              xcb_glx_context_t      src,
                              xcb_glx_context_t      dest,
                              uint32_t               mask,
                              xcb_glx_context_tag_t  src_context_tag);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_copy_context (xcb_connection_t      *c,
                      xcb_glx_context_t      src,
                      xcb_glx_context_t      dest,
                      uint32_t               mask,
                      xcb_glx_context_tag_t  src_context_tag);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_swap_buffers_checked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              xcb_glx_drawable_t     drawable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_swap_buffers (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      xcb_glx_drawable_t     drawable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_use_x_font_checked (xcb_connection_t      *c,
                            xcb_glx_context_tag_t  context_tag,
                            xcb_font_t             font,
                            uint32_t               first,
                            uint32_t               count,
                            uint32_t               list_base);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_use_x_font (xcb_connection_t      *c,
                    xcb_glx_context_tag_t  context_tag,
                    xcb_font_t             font,
                    uint32_t               first,
                    uint32_t               count,
                    uint32_t               list_base);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_create_glx_pixmap_checked (xcb_connection_t *c,
                                   uint32_t          screen,
                                   xcb_visualid_t    visual,
                                   xcb_pixmap_t      pixmap,
                                   xcb_glx_pixmap_t  glx_pixmap);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_create_glx_pixmap (xcb_connection_t *c,
                           uint32_t          screen,
                           xcb_visualid_t    visual,
                           xcb_pixmap_t      pixmap,
                           xcb_glx_pixmap_t  glx_pixmap);

int
xcb_glx_get_visual_configs_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_visual_configs_cookie_t
xcb_glx_get_visual_configs (xcb_connection_t *c,
                            uint32_t          screen);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_visual_configs_cookie_t
xcb_glx_get_visual_configs_unchecked (xcb_connection_t *c,
                                      uint32_t          screen);

uint32_t *
xcb_glx_get_visual_configs_property_list (const xcb_glx_get_visual_configs_reply_t *R);

int
xcb_glx_get_visual_configs_property_list_length (const xcb_glx_get_visual_configs_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_visual_configs_property_list_end (const xcb_glx_get_visual_configs_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_visual_configs_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_visual_configs_reply_t *
xcb_glx_get_visual_configs_reply (xcb_connection_t                     *c,
                                  xcb_glx_get_visual_configs_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_destroy_glx_pixmap_checked (xcb_connection_t *c,
                                    xcb_glx_pixmap_t  glx_pixmap);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_destroy_glx_pixmap (xcb_connection_t *c,
                            xcb_glx_pixmap_t  glx_pixmap);

int
xcb_glx_vendor_private_sizeof (const void  *_buffer,
                               uint32_t     data_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_vendor_private_checked (xcb_connection_t      *c,
                                uint32_t               vendor_code,
                                xcb_glx_context_tag_t  context_tag,
                                uint32_t               data_len,
                                const uint8_t         *data);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_vendor_private (xcb_connection_t      *c,
                        uint32_t               vendor_code,
                        xcb_glx_context_tag_t  context_tag,
                        uint32_t               data_len,
                        const uint8_t         *data);

uint8_t *
xcb_glx_vendor_private_data (const xcb_glx_vendor_private_request_t *R);

int
xcb_glx_vendor_private_data_length (const xcb_glx_vendor_private_request_t *R);

xcb_generic_iterator_t
xcb_glx_vendor_private_data_end (const xcb_glx_vendor_private_request_t *R);

int
xcb_glx_vendor_private_with_reply_sizeof (const void  *_buffer,
                                          uint32_t     data_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_vendor_private_with_reply_cookie_t
xcb_glx_vendor_private_with_reply (xcb_connection_t      *c,
                                   uint32_t               vendor_code,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               data_len,
                                   const uint8_t         *data);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_vendor_private_with_reply_cookie_t
xcb_glx_vendor_private_with_reply_unchecked (xcb_connection_t      *c,
                                             uint32_t               vendor_code,
                                             xcb_glx_context_tag_t  context_tag,
                                             uint32_t               data_len,
                                             const uint8_t         *data);

uint8_t *
xcb_glx_vendor_private_with_reply_data_2 (const xcb_glx_vendor_private_with_reply_reply_t *R);

int
xcb_glx_vendor_private_with_reply_data_2_length (const xcb_glx_vendor_private_with_reply_reply_t *R);

xcb_generic_iterator_t
xcb_glx_vendor_private_with_reply_data_2_end (const xcb_glx_vendor_private_with_reply_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_vendor_private_with_reply_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_vendor_private_with_reply_reply_t *
xcb_glx_vendor_private_with_reply_reply (xcb_connection_t                            *c,
                                         xcb_glx_vendor_private_with_reply_cookie_t   cookie  /**< */,
                                         xcb_generic_error_t                        **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_query_extensions_string_cookie_t
xcb_glx_query_extensions_string (xcb_connection_t *c,
                                 uint32_t          screen);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_query_extensions_string_cookie_t
xcb_glx_query_extensions_string_unchecked (xcb_connection_t *c,
                                           uint32_t          screen);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_query_extensions_string_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_query_extensions_string_reply_t *
xcb_glx_query_extensions_string_reply (xcb_connection_t                          *c,
                                       xcb_glx_query_extensions_string_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e);

int
xcb_glx_query_server_string_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_query_server_string_cookie_t
xcb_glx_query_server_string (xcb_connection_t *c,
                             uint32_t          screen,
                             uint32_t          name);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_query_server_string_cookie_t
xcb_glx_query_server_string_unchecked (xcb_connection_t *c,
                                       uint32_t          screen,
                                       uint32_t          name);

char *
xcb_glx_query_server_string_string (const xcb_glx_query_server_string_reply_t *R);

int
xcb_glx_query_server_string_string_length (const xcb_glx_query_server_string_reply_t *R);

xcb_generic_iterator_t
xcb_glx_query_server_string_string_end (const xcb_glx_query_server_string_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_query_server_string_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_query_server_string_reply_t *
xcb_glx_query_server_string_reply (xcb_connection_t                      *c,
                                   xcb_glx_query_server_string_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e);

int
xcb_glx_client_info_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_client_info_checked (xcb_connection_t *c,
                             uint32_t          major_version,
                             uint32_t          minor_version,
                             uint32_t          str_len,
                             const char       *string);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_client_info (xcb_connection_t *c,
                     uint32_t          major_version,
                     uint32_t          minor_version,
                     uint32_t          str_len,
                     const char       *string);

char *
xcb_glx_client_info_string (const xcb_glx_client_info_request_t *R);

int
xcb_glx_client_info_string_length (const xcb_glx_client_info_request_t *R);

xcb_generic_iterator_t
xcb_glx_client_info_string_end (const xcb_glx_client_info_request_t *R);

int
xcb_glx_get_fb_configs_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_fb_configs_cookie_t
xcb_glx_get_fb_configs (xcb_connection_t *c,
                        uint32_t          screen);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_fb_configs_cookie_t
xcb_glx_get_fb_configs_unchecked (xcb_connection_t *c,
                                  uint32_t          screen);

uint32_t *
xcb_glx_get_fb_configs_property_list (const xcb_glx_get_fb_configs_reply_t *R);

int
xcb_glx_get_fb_configs_property_list_length (const xcb_glx_get_fb_configs_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_fb_configs_property_list_end (const xcb_glx_get_fb_configs_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_fb_configs_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_fb_configs_reply_t *
xcb_glx_get_fb_configs_reply (xcb_connection_t                 *c,
                              xcb_glx_get_fb_configs_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

int
xcb_glx_create_pixmap_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_create_pixmap_checked (xcb_connection_t   *c,
                               uint32_t            screen,
                               xcb_glx_fbconfig_t  fbconfig,
                               xcb_pixmap_t        pixmap,
                               xcb_glx_pixmap_t    glx_pixmap,
                               uint32_t            num_attribs,
                               const uint32_t     *attribs);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_create_pixmap (xcb_connection_t   *c,
                       uint32_t            screen,
                       xcb_glx_fbconfig_t  fbconfig,
                       xcb_pixmap_t        pixmap,
                       xcb_glx_pixmap_t    glx_pixmap,
                       uint32_t            num_attribs,
                       const uint32_t     *attribs);

uint32_t *
xcb_glx_create_pixmap_attribs (const xcb_glx_create_pixmap_request_t *R);

int
xcb_glx_create_pixmap_attribs_length (const xcb_glx_create_pixmap_request_t *R);

xcb_generic_iterator_t
xcb_glx_create_pixmap_attribs_end (const xcb_glx_create_pixmap_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_destroy_pixmap_checked (xcb_connection_t *c,
                                xcb_glx_pixmap_t  glx_pixmap);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_destroy_pixmap (xcb_connection_t *c,
                        xcb_glx_pixmap_t  glx_pixmap);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_create_new_context_checked (xcb_connection_t   *c,
                                    xcb_glx_context_t   context,
                                    xcb_glx_fbconfig_t  fbconfig,
                                    uint32_t            screen,
                                    uint32_t            render_type,
                                    xcb_glx_context_t   share_list,
                                    uint8_t             is_direct);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_create_new_context (xcb_connection_t   *c,
                            xcb_glx_context_t   context,
                            xcb_glx_fbconfig_t  fbconfig,
                            uint32_t            screen,
                            uint32_t            render_type,
                            xcb_glx_context_t   share_list,
                            uint8_t             is_direct);

int
xcb_glx_query_context_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_query_context_cookie_t
xcb_glx_query_context (xcb_connection_t  *c,
                       xcb_glx_context_t  context);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_query_context_cookie_t
xcb_glx_query_context_unchecked (xcb_connection_t  *c,
                                 xcb_glx_context_t  context);

uint32_t *
xcb_glx_query_context_attribs (const xcb_glx_query_context_reply_t *R);

int
xcb_glx_query_context_attribs_length (const xcb_glx_query_context_reply_t *R);

xcb_generic_iterator_t
xcb_glx_query_context_attribs_end (const xcb_glx_query_context_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_query_context_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_query_context_reply_t *
xcb_glx_query_context_reply (xcb_connection_t                *c,
                             xcb_glx_query_context_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_make_context_current_cookie_t
xcb_glx_make_context_current (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  old_context_tag,
                              xcb_glx_drawable_t     drawable,
                              xcb_glx_drawable_t     read_drawable,
                              xcb_glx_context_t      context);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_make_context_current_cookie_t
xcb_glx_make_context_current_unchecked (xcb_connection_t      *c,
                                        xcb_glx_context_tag_t  old_context_tag,
                                        xcb_glx_drawable_t     drawable,
                                        xcb_glx_drawable_t     read_drawable,
                                        xcb_glx_context_t      context);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_make_context_current_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_make_context_current_reply_t *
xcb_glx_make_context_current_reply (xcb_connection_t                       *c,
                                    xcb_glx_make_context_current_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e);

int
xcb_glx_create_pbuffer_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_create_pbuffer_checked (xcb_connection_t   *c,
                                uint32_t            screen,
                                xcb_glx_fbconfig_t  fbconfig,
                                xcb_glx_pbuffer_t   pbuffer,
                                uint32_t            num_attribs,
                                const uint32_t     *attribs);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_create_pbuffer (xcb_connection_t   *c,
                        uint32_t            screen,
                        xcb_glx_fbconfig_t  fbconfig,
                        xcb_glx_pbuffer_t   pbuffer,
                        uint32_t            num_attribs,
                        const uint32_t     *attribs);

uint32_t *
xcb_glx_create_pbuffer_attribs (const xcb_glx_create_pbuffer_request_t *R);

int
xcb_glx_create_pbuffer_attribs_length (const xcb_glx_create_pbuffer_request_t *R);

xcb_generic_iterator_t
xcb_glx_create_pbuffer_attribs_end (const xcb_glx_create_pbuffer_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_destroy_pbuffer_checked (xcb_connection_t  *c,
                                 xcb_glx_pbuffer_t  pbuffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_destroy_pbuffer (xcb_connection_t  *c,
                         xcb_glx_pbuffer_t  pbuffer);

int
xcb_glx_get_drawable_attributes_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_drawable_attributes_cookie_t
xcb_glx_get_drawable_attributes (xcb_connection_t   *c,
                                 xcb_glx_drawable_t  drawable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_drawable_attributes_cookie_t
xcb_glx_get_drawable_attributes_unchecked (xcb_connection_t   *c,
                                           xcb_glx_drawable_t  drawable);

uint32_t *
xcb_glx_get_drawable_attributes_attribs (const xcb_glx_get_drawable_attributes_reply_t *R);

int
xcb_glx_get_drawable_attributes_attribs_length (const xcb_glx_get_drawable_attributes_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_drawable_attributes_attribs_end (const xcb_glx_get_drawable_attributes_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_drawable_attributes_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_drawable_attributes_reply_t *
xcb_glx_get_drawable_attributes_reply (xcb_connection_t                          *c,
                                       xcb_glx_get_drawable_attributes_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e);

int
xcb_glx_change_drawable_attributes_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_change_drawable_attributes_checked (xcb_connection_t   *c,
                                            xcb_glx_drawable_t  drawable,
                                            uint32_t            num_attribs,
                                            const uint32_t     *attribs);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_change_drawable_attributes (xcb_connection_t   *c,
                                    xcb_glx_drawable_t  drawable,
                                    uint32_t            num_attribs,
                                    const uint32_t     *attribs);

uint32_t *
xcb_glx_change_drawable_attributes_attribs (const xcb_glx_change_drawable_attributes_request_t *R);

int
xcb_glx_change_drawable_attributes_attribs_length (const xcb_glx_change_drawable_attributes_request_t *R);

xcb_generic_iterator_t
xcb_glx_change_drawable_attributes_attribs_end (const xcb_glx_change_drawable_attributes_request_t *R);

int
xcb_glx_create_window_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_create_window_checked (xcb_connection_t   *c,
                               uint32_t            screen,
                               xcb_glx_fbconfig_t  fbconfig,
                               xcb_window_t        window,
                               xcb_glx_window_t    glx_window,
                               uint32_t            num_attribs,
                               const uint32_t     *attribs);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_create_window (xcb_connection_t   *c,
                       uint32_t            screen,
                       xcb_glx_fbconfig_t  fbconfig,
                       xcb_window_t        window,
                       xcb_glx_window_t    glx_window,
                       uint32_t            num_attribs,
                       const uint32_t     *attribs);

uint32_t *
xcb_glx_create_window_attribs (const xcb_glx_create_window_request_t *R);

int
xcb_glx_create_window_attribs_length (const xcb_glx_create_window_request_t *R);

xcb_generic_iterator_t
xcb_glx_create_window_attribs_end (const xcb_glx_create_window_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_delete_window_checked (xcb_connection_t *c,
                               xcb_glx_window_t  glxwindow);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_delete_window (xcb_connection_t *c,
                       xcb_glx_window_t  glxwindow);

int
xcb_glx_set_client_info_arb_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_set_client_info_arb_checked (xcb_connection_t *c,
                                     uint32_t          major_version,
                                     uint32_t          minor_version,
                                     uint32_t          num_versions,
                                     uint32_t          gl_str_len,
                                     uint32_t          glx_str_len,
                                     const uint32_t   *gl_versions,
                                     const char       *gl_extension_string,
                                     const char       *glx_extension_string);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_set_client_info_arb (xcb_connection_t *c,
                             uint32_t          major_version,
                             uint32_t          minor_version,
                             uint32_t          num_versions,
                             uint32_t          gl_str_len,
                             uint32_t          glx_str_len,
                             const uint32_t   *gl_versions,
                             const char       *gl_extension_string,
                             const char       *glx_extension_string);

uint32_t *
xcb_glx_set_client_info_arb_gl_versions (const xcb_glx_set_client_info_arb_request_t *R);

int
xcb_glx_set_client_info_arb_gl_versions_length (const xcb_glx_set_client_info_arb_request_t *R);

xcb_generic_iterator_t
xcb_glx_set_client_info_arb_gl_versions_end (const xcb_glx_set_client_info_arb_request_t *R);

char *
xcb_glx_set_client_info_arb_gl_extension_string (const xcb_glx_set_client_info_arb_request_t *R);

int
xcb_glx_set_client_info_arb_gl_extension_string_length (const xcb_glx_set_client_info_arb_request_t *R);

xcb_generic_iterator_t
xcb_glx_set_client_info_arb_gl_extension_string_end (const xcb_glx_set_client_info_arb_request_t *R);

char *
xcb_glx_set_client_info_arb_glx_extension_string (const xcb_glx_set_client_info_arb_request_t *R);

int
xcb_glx_set_client_info_arb_glx_extension_string_length (const xcb_glx_set_client_info_arb_request_t *R);

xcb_generic_iterator_t
xcb_glx_set_client_info_arb_glx_extension_string_end (const xcb_glx_set_client_info_arb_request_t *R);

int
xcb_glx_create_context_attribs_arb_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_create_context_attribs_arb_checked (xcb_connection_t   *c,
                                            xcb_glx_context_t   context,
                                            xcb_glx_fbconfig_t  fbconfig,
                                            uint32_t            screen,
                                            xcb_glx_context_t   share_list,
                                            uint8_t             is_direct,
                                            uint32_t            num_attribs,
                                            const uint32_t     *attribs);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_create_context_attribs_arb (xcb_connection_t   *c,
                                    xcb_glx_context_t   context,
                                    xcb_glx_fbconfig_t  fbconfig,
                                    uint32_t            screen,
                                    xcb_glx_context_t   share_list,
                                    uint8_t             is_direct,
                                    uint32_t            num_attribs,
                                    const uint32_t     *attribs);

uint32_t *
xcb_glx_create_context_attribs_arb_attribs (const xcb_glx_create_context_attribs_arb_request_t *R);

int
xcb_glx_create_context_attribs_arb_attribs_length (const xcb_glx_create_context_attribs_arb_request_t *R);

xcb_generic_iterator_t
xcb_glx_create_context_attribs_arb_attribs_end (const xcb_glx_create_context_attribs_arb_request_t *R);

int
xcb_glx_set_client_info_2arb_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_set_client_info_2arb_checked (xcb_connection_t *c,
                                      uint32_t          major_version,
                                      uint32_t          minor_version,
                                      uint32_t          num_versions,
                                      uint32_t          gl_str_len,
                                      uint32_t          glx_str_len,
                                      const uint32_t   *gl_versions,
                                      const char       *gl_extension_string,
                                      const char       *glx_extension_string);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_set_client_info_2arb (xcb_connection_t *c,
                              uint32_t          major_version,
                              uint32_t          minor_version,
                              uint32_t          num_versions,
                              uint32_t          gl_str_len,
                              uint32_t          glx_str_len,
                              const uint32_t   *gl_versions,
                              const char       *gl_extension_string,
                              const char       *glx_extension_string);

uint32_t *
xcb_glx_set_client_info_2arb_gl_versions (const xcb_glx_set_client_info_2arb_request_t *R);

int
xcb_glx_set_client_info_2arb_gl_versions_length (const xcb_glx_set_client_info_2arb_request_t *R);

xcb_generic_iterator_t
xcb_glx_set_client_info_2arb_gl_versions_end (const xcb_glx_set_client_info_2arb_request_t *R);

char *
xcb_glx_set_client_info_2arb_gl_extension_string (const xcb_glx_set_client_info_2arb_request_t *R);

int
xcb_glx_set_client_info_2arb_gl_extension_string_length (const xcb_glx_set_client_info_2arb_request_t *R);

xcb_generic_iterator_t
xcb_glx_set_client_info_2arb_gl_extension_string_end (const xcb_glx_set_client_info_2arb_request_t *R);

char *
xcb_glx_set_client_info_2arb_glx_extension_string (const xcb_glx_set_client_info_2arb_request_t *R);

int
xcb_glx_set_client_info_2arb_glx_extension_string_length (const xcb_glx_set_client_info_2arb_request_t *R);

xcb_generic_iterator_t
xcb_glx_set_client_info_2arb_glx_extension_string_end (const xcb_glx_set_client_info_2arb_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_new_list_checked (xcb_connection_t      *c,
                          xcb_glx_context_tag_t  context_tag,
                          uint32_t               list,
                          uint32_t               mode);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_new_list (xcb_connection_t      *c,
                  xcb_glx_context_tag_t  context_tag,
                  uint32_t               list,
                  uint32_t               mode);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_end_list_checked (xcb_connection_t      *c,
                          xcb_glx_context_tag_t  context_tag);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_end_list (xcb_connection_t      *c,
                  xcb_glx_context_tag_t  context_tag);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_delete_lists_checked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               list,
                              int32_t                range);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_delete_lists (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      uint32_t               list,
                      int32_t                range);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_gen_lists_cookie_t
xcb_glx_gen_lists (xcb_connection_t      *c,
                   xcb_glx_context_tag_t  context_tag,
                   int32_t                range);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_gen_lists_cookie_t
xcb_glx_gen_lists_unchecked (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag,
                             int32_t                range);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_gen_lists_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_gen_lists_reply_t *
xcb_glx_gen_lists_reply (xcb_connection_t            *c,
                         xcb_glx_gen_lists_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_feedback_buffer_checked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 int32_t                size,
                                 int32_t                type);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_feedback_buffer (xcb_connection_t      *c,
                         xcb_glx_context_tag_t  context_tag,
                         int32_t                size,
                         int32_t                type);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_select_buffer_checked (xcb_connection_t      *c,
                               xcb_glx_context_tag_t  context_tag,
                               int32_t                size);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_select_buffer (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       int32_t                size);

int
xcb_glx_render_mode_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_render_mode_cookie_t
xcb_glx_render_mode (xcb_connection_t      *c,
                     xcb_glx_context_tag_t  context_tag,
                     uint32_t               mode);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_render_mode_cookie_t
xcb_glx_render_mode_unchecked (xcb_connection_t      *c,
                               xcb_glx_context_tag_t  context_tag,
                               uint32_t               mode);

uint32_t *
xcb_glx_render_mode_data (const xcb_glx_render_mode_reply_t *R);

int
xcb_glx_render_mode_data_length (const xcb_glx_render_mode_reply_t *R);

xcb_generic_iterator_t
xcb_glx_render_mode_data_end (const xcb_glx_render_mode_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_render_mode_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_render_mode_reply_t *
xcb_glx_render_mode_reply (xcb_connection_t              *c,
                           xcb_glx_render_mode_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_finish_cookie_t
xcb_glx_finish (xcb_connection_t      *c,
                xcb_glx_context_tag_t  context_tag);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_finish_cookie_t
xcb_glx_finish_unchecked (xcb_connection_t      *c,
                          xcb_glx_context_tag_t  context_tag);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_finish_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_finish_reply_t *
xcb_glx_finish_reply (xcb_connection_t         *c,
                      xcb_glx_finish_cookie_t   cookie  /**< */,
                      xcb_generic_error_t     **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_pixel_storef_checked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               pname,
                              xcb_glx_float32_t      datum);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_pixel_storef (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      uint32_t               pname,
                      xcb_glx_float32_t      datum);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_pixel_storei_checked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               pname,
                              int32_t                datum);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_pixel_storei (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      uint32_t               pname,
                      int32_t                datum);

int
xcb_glx_read_pixels_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_read_pixels_cookie_t
xcb_glx_read_pixels (xcb_connection_t      *c,
                     xcb_glx_context_tag_t  context_tag,
                     int32_t                x,
                     int32_t                y,
                     int32_t                width,
                     int32_t                height,
                     uint32_t               format,
                     uint32_t               type,
                     uint8_t                swap_bytes,
                     uint8_t                lsb_first);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_read_pixels_cookie_t
xcb_glx_read_pixels_unchecked (xcb_connection_t      *c,
                               xcb_glx_context_tag_t  context_tag,
                               int32_t                x,
                               int32_t                y,
                               int32_t                width,
                               int32_t                height,
                               uint32_t               format,
                               uint32_t               type,
                               uint8_t                swap_bytes,
                               uint8_t                lsb_first);

uint8_t *
xcb_glx_read_pixels_data (const xcb_glx_read_pixels_reply_t *R);

int
xcb_glx_read_pixels_data_length (const xcb_glx_read_pixels_reply_t *R);

xcb_generic_iterator_t
xcb_glx_read_pixels_data_end (const xcb_glx_read_pixels_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_read_pixels_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_read_pixels_reply_t *
xcb_glx_read_pixels_reply (xcb_connection_t              *c,
                           xcb_glx_read_pixels_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e);

int
xcb_glx_get_booleanv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_booleanv_cookie_t
xcb_glx_get_booleanv (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      int32_t                pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_booleanv_cookie_t
xcb_glx_get_booleanv_unchecked (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                int32_t                pname);

uint8_t *
xcb_glx_get_booleanv_data (const xcb_glx_get_booleanv_reply_t *R);

int
xcb_glx_get_booleanv_data_length (const xcb_glx_get_booleanv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_booleanv_data_end (const xcb_glx_get_booleanv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_booleanv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_booleanv_reply_t *
xcb_glx_get_booleanv_reply (xcb_connection_t               *c,
                            xcb_glx_get_booleanv_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e);

int
xcb_glx_get_clip_plane_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_clip_plane_cookie_t
xcb_glx_get_clip_plane (xcb_connection_t      *c,
                        xcb_glx_context_tag_t  context_tag,
                        int32_t                plane);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_clip_plane_cookie_t
xcb_glx_get_clip_plane_unchecked (xcb_connection_t      *c,
                                  xcb_glx_context_tag_t  context_tag,
                                  int32_t                plane);

xcb_glx_float64_t *
xcb_glx_get_clip_plane_data (const xcb_glx_get_clip_plane_reply_t *R);

int
xcb_glx_get_clip_plane_data_length (const xcb_glx_get_clip_plane_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_clip_plane_data_end (const xcb_glx_get_clip_plane_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_clip_plane_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_clip_plane_reply_t *
xcb_glx_get_clip_plane_reply (xcb_connection_t                 *c,
                              xcb_glx_get_clip_plane_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

int
xcb_glx_get_doublev_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_doublev_cookie_t
xcb_glx_get_doublev (xcb_connection_t      *c,
                     xcb_glx_context_tag_t  context_tag,
                     uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_doublev_cookie_t
xcb_glx_get_doublev_unchecked (xcb_connection_t      *c,
                               xcb_glx_context_tag_t  context_tag,
                               uint32_t               pname);

xcb_glx_float64_t *
xcb_glx_get_doublev_data (const xcb_glx_get_doublev_reply_t *R);

int
xcb_glx_get_doublev_data_length (const xcb_glx_get_doublev_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_doublev_data_end (const xcb_glx_get_doublev_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_doublev_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_doublev_reply_t *
xcb_glx_get_doublev_reply (xcb_connection_t              *c,
                           xcb_glx_get_doublev_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_error_cookie_t
xcb_glx_get_error (xcb_connection_t      *c,
                   xcb_glx_context_tag_t  context_tag);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_error_cookie_t
xcb_glx_get_error_unchecked (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_error_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_error_reply_t *
xcb_glx_get_error_reply (xcb_connection_t            *c,
                         xcb_glx_get_error_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e);

int
xcb_glx_get_floatv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_floatv_cookie_t
xcb_glx_get_floatv (xcb_connection_t      *c,
                    xcb_glx_context_tag_t  context_tag,
                    uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_floatv_cookie_t
xcb_glx_get_floatv_unchecked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               pname);

xcb_glx_float32_t *
xcb_glx_get_floatv_data (const xcb_glx_get_floatv_reply_t *R);

int
xcb_glx_get_floatv_data_length (const xcb_glx_get_floatv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_floatv_data_end (const xcb_glx_get_floatv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_floatv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_floatv_reply_t *
xcb_glx_get_floatv_reply (xcb_connection_t             *c,
                          xcb_glx_get_floatv_cookie_t   cookie  /**< */,
                          xcb_generic_error_t         **e);

int
xcb_glx_get_integerv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_integerv_cookie_t
xcb_glx_get_integerv (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_integerv_cookie_t
xcb_glx_get_integerv_unchecked (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                uint32_t               pname);

int32_t *
xcb_glx_get_integerv_data (const xcb_glx_get_integerv_reply_t *R);

int
xcb_glx_get_integerv_data_length (const xcb_glx_get_integerv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_integerv_data_end (const xcb_glx_get_integerv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_integerv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_integerv_reply_t *
xcb_glx_get_integerv_reply (xcb_connection_t               *c,
                            xcb_glx_get_integerv_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e);

int
xcb_glx_get_lightfv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_lightfv_cookie_t
xcb_glx_get_lightfv (xcb_connection_t      *c,
                     xcb_glx_context_tag_t  context_tag,
                     uint32_t               light,
                     uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_lightfv_cookie_t
xcb_glx_get_lightfv_unchecked (xcb_connection_t      *c,
                               xcb_glx_context_tag_t  context_tag,
                               uint32_t               light,
                               uint32_t               pname);

xcb_glx_float32_t *
xcb_glx_get_lightfv_data (const xcb_glx_get_lightfv_reply_t *R);

int
xcb_glx_get_lightfv_data_length (const xcb_glx_get_lightfv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_lightfv_data_end (const xcb_glx_get_lightfv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_lightfv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_lightfv_reply_t *
xcb_glx_get_lightfv_reply (xcb_connection_t              *c,
                           xcb_glx_get_lightfv_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e);

int
xcb_glx_get_lightiv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_lightiv_cookie_t
xcb_glx_get_lightiv (xcb_connection_t      *c,
                     xcb_glx_context_tag_t  context_tag,
                     uint32_t               light,
                     uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_lightiv_cookie_t
xcb_glx_get_lightiv_unchecked (xcb_connection_t      *c,
                               xcb_glx_context_tag_t  context_tag,
                               uint32_t               light,
                               uint32_t               pname);

int32_t *
xcb_glx_get_lightiv_data (const xcb_glx_get_lightiv_reply_t *R);

int
xcb_glx_get_lightiv_data_length (const xcb_glx_get_lightiv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_lightiv_data_end (const xcb_glx_get_lightiv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_lightiv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_lightiv_reply_t *
xcb_glx_get_lightiv_reply (xcb_connection_t              *c,
                           xcb_glx_get_lightiv_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e);

int
xcb_glx_get_mapdv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_mapdv_cookie_t
xcb_glx_get_mapdv (xcb_connection_t      *c,
                   xcb_glx_context_tag_t  context_tag,
                   uint32_t               target,
                   uint32_t               query);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_mapdv_cookie_t
xcb_glx_get_mapdv_unchecked (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag,
                             uint32_t               target,
                             uint32_t               query);

xcb_glx_float64_t *
xcb_glx_get_mapdv_data (const xcb_glx_get_mapdv_reply_t *R);

int
xcb_glx_get_mapdv_data_length (const xcb_glx_get_mapdv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_mapdv_data_end (const xcb_glx_get_mapdv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_mapdv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_mapdv_reply_t *
xcb_glx_get_mapdv_reply (xcb_connection_t            *c,
                         xcb_glx_get_mapdv_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e);

int
xcb_glx_get_mapfv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_mapfv_cookie_t
xcb_glx_get_mapfv (xcb_connection_t      *c,
                   xcb_glx_context_tag_t  context_tag,
                   uint32_t               target,
                   uint32_t               query);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_mapfv_cookie_t
xcb_glx_get_mapfv_unchecked (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag,
                             uint32_t               target,
                             uint32_t               query);

xcb_glx_float32_t *
xcb_glx_get_mapfv_data (const xcb_glx_get_mapfv_reply_t *R);

int
xcb_glx_get_mapfv_data_length (const xcb_glx_get_mapfv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_mapfv_data_end (const xcb_glx_get_mapfv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_mapfv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_mapfv_reply_t *
xcb_glx_get_mapfv_reply (xcb_connection_t            *c,
                         xcb_glx_get_mapfv_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e);

int
xcb_glx_get_mapiv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_mapiv_cookie_t
xcb_glx_get_mapiv (xcb_connection_t      *c,
                   xcb_glx_context_tag_t  context_tag,
                   uint32_t               target,
                   uint32_t               query);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_mapiv_cookie_t
xcb_glx_get_mapiv_unchecked (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag,
                             uint32_t               target,
                             uint32_t               query);

int32_t *
xcb_glx_get_mapiv_data (const xcb_glx_get_mapiv_reply_t *R);

int
xcb_glx_get_mapiv_data_length (const xcb_glx_get_mapiv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_mapiv_data_end (const xcb_glx_get_mapiv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_mapiv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_mapiv_reply_t *
xcb_glx_get_mapiv_reply (xcb_connection_t            *c,
                         xcb_glx_get_mapiv_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e);

int
xcb_glx_get_materialfv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_materialfv_cookie_t
xcb_glx_get_materialfv (xcb_connection_t      *c,
                        xcb_glx_context_tag_t  context_tag,
                        uint32_t               face,
                        uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_materialfv_cookie_t
xcb_glx_get_materialfv_unchecked (xcb_connection_t      *c,
                                  xcb_glx_context_tag_t  context_tag,
                                  uint32_t               face,
                                  uint32_t               pname);

xcb_glx_float32_t *
xcb_glx_get_materialfv_data (const xcb_glx_get_materialfv_reply_t *R);

int
xcb_glx_get_materialfv_data_length (const xcb_glx_get_materialfv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_materialfv_data_end (const xcb_glx_get_materialfv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_materialfv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_materialfv_reply_t *
xcb_glx_get_materialfv_reply (xcb_connection_t                 *c,
                              xcb_glx_get_materialfv_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

int
xcb_glx_get_materialiv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_materialiv_cookie_t
xcb_glx_get_materialiv (xcb_connection_t      *c,
                        xcb_glx_context_tag_t  context_tag,
                        uint32_t               face,
                        uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_materialiv_cookie_t
xcb_glx_get_materialiv_unchecked (xcb_connection_t      *c,
                                  xcb_glx_context_tag_t  context_tag,
                                  uint32_t               face,
                                  uint32_t               pname);

int32_t *
xcb_glx_get_materialiv_data (const xcb_glx_get_materialiv_reply_t *R);

int
xcb_glx_get_materialiv_data_length (const xcb_glx_get_materialiv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_materialiv_data_end (const xcb_glx_get_materialiv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_materialiv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_materialiv_reply_t *
xcb_glx_get_materialiv_reply (xcb_connection_t                 *c,
                              xcb_glx_get_materialiv_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

int
xcb_glx_get_pixel_mapfv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_pixel_mapfv_cookie_t
xcb_glx_get_pixel_mapfv (xcb_connection_t      *c,
                         xcb_glx_context_tag_t  context_tag,
                         uint32_t               map);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_pixel_mapfv_cookie_t
xcb_glx_get_pixel_mapfv_unchecked (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               map);

xcb_glx_float32_t *
xcb_glx_get_pixel_mapfv_data (const xcb_glx_get_pixel_mapfv_reply_t *R);

int
xcb_glx_get_pixel_mapfv_data_length (const xcb_glx_get_pixel_mapfv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_pixel_mapfv_data_end (const xcb_glx_get_pixel_mapfv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_pixel_mapfv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_pixel_mapfv_reply_t *
xcb_glx_get_pixel_mapfv_reply (xcb_connection_t                  *c,
                               xcb_glx_get_pixel_mapfv_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e);

int
xcb_glx_get_pixel_mapuiv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_pixel_mapuiv_cookie_t
xcb_glx_get_pixel_mapuiv (xcb_connection_t      *c,
                          xcb_glx_context_tag_t  context_tag,
                          uint32_t               map);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_pixel_mapuiv_cookie_t
xcb_glx_get_pixel_mapuiv_unchecked (xcb_connection_t      *c,
                                    xcb_glx_context_tag_t  context_tag,
                                    uint32_t               map);

uint32_t *
xcb_glx_get_pixel_mapuiv_data (const xcb_glx_get_pixel_mapuiv_reply_t *R);

int
xcb_glx_get_pixel_mapuiv_data_length (const xcb_glx_get_pixel_mapuiv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_pixel_mapuiv_data_end (const xcb_glx_get_pixel_mapuiv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_pixel_mapuiv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_pixel_mapuiv_reply_t *
xcb_glx_get_pixel_mapuiv_reply (xcb_connection_t                   *c,
                                xcb_glx_get_pixel_mapuiv_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e);

int
xcb_glx_get_pixel_mapusv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_pixel_mapusv_cookie_t
xcb_glx_get_pixel_mapusv (xcb_connection_t      *c,
                          xcb_glx_context_tag_t  context_tag,
                          uint32_t               map);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_pixel_mapusv_cookie_t
xcb_glx_get_pixel_mapusv_unchecked (xcb_connection_t      *c,
                                    xcb_glx_context_tag_t  context_tag,
                                    uint32_t               map);

uint16_t *
xcb_glx_get_pixel_mapusv_data (const xcb_glx_get_pixel_mapusv_reply_t *R);

int
xcb_glx_get_pixel_mapusv_data_length (const xcb_glx_get_pixel_mapusv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_pixel_mapusv_data_end (const xcb_glx_get_pixel_mapusv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_pixel_mapusv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_pixel_mapusv_reply_t *
xcb_glx_get_pixel_mapusv_reply (xcb_connection_t                   *c,
                                xcb_glx_get_pixel_mapusv_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e);

int
xcb_glx_get_polygon_stipple_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_polygon_stipple_cookie_t
xcb_glx_get_polygon_stipple (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag,
                             uint8_t                lsb_first);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_polygon_stipple_cookie_t
xcb_glx_get_polygon_stipple_unchecked (xcb_connection_t      *c,
                                       xcb_glx_context_tag_t  context_tag,
                                       uint8_t                lsb_first);

uint8_t *
xcb_glx_get_polygon_stipple_data (const xcb_glx_get_polygon_stipple_reply_t *R);

int
xcb_glx_get_polygon_stipple_data_length (const xcb_glx_get_polygon_stipple_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_polygon_stipple_data_end (const xcb_glx_get_polygon_stipple_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_polygon_stipple_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_polygon_stipple_reply_t *
xcb_glx_get_polygon_stipple_reply (xcb_connection_t                      *c,
                                   xcb_glx_get_polygon_stipple_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e);

int
xcb_glx_get_string_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_string_cookie_t
xcb_glx_get_string (xcb_connection_t      *c,
                    xcb_glx_context_tag_t  context_tag,
                    uint32_t               name);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_string_cookie_t
xcb_glx_get_string_unchecked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               name);

char *
xcb_glx_get_string_string (const xcb_glx_get_string_reply_t *R);

int
xcb_glx_get_string_string_length (const xcb_glx_get_string_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_string_string_end (const xcb_glx_get_string_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_string_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_string_reply_t *
xcb_glx_get_string_reply (xcb_connection_t             *c,
                          xcb_glx_get_string_cookie_t   cookie  /**< */,
                          xcb_generic_error_t         **e);

int
xcb_glx_get_tex_envfv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_tex_envfv_cookie_t
xcb_glx_get_tex_envfv (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       uint32_t               target,
                       uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_tex_envfv_cookie_t
xcb_glx_get_tex_envfv_unchecked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               target,
                                 uint32_t               pname);

xcb_glx_float32_t *
xcb_glx_get_tex_envfv_data (const xcb_glx_get_tex_envfv_reply_t *R);

int
xcb_glx_get_tex_envfv_data_length (const xcb_glx_get_tex_envfv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_tex_envfv_data_end (const xcb_glx_get_tex_envfv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_tex_envfv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_tex_envfv_reply_t *
xcb_glx_get_tex_envfv_reply (xcb_connection_t                *c,
                             xcb_glx_get_tex_envfv_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

int
xcb_glx_get_tex_enviv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_tex_enviv_cookie_t
xcb_glx_get_tex_enviv (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       uint32_t               target,
                       uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_tex_enviv_cookie_t
xcb_glx_get_tex_enviv_unchecked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               target,
                                 uint32_t               pname);

int32_t *
xcb_glx_get_tex_enviv_data (const xcb_glx_get_tex_enviv_reply_t *R);

int
xcb_glx_get_tex_enviv_data_length (const xcb_glx_get_tex_enviv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_tex_enviv_data_end (const xcb_glx_get_tex_enviv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_tex_enviv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_tex_enviv_reply_t *
xcb_glx_get_tex_enviv_reply (xcb_connection_t                *c,
                             xcb_glx_get_tex_enviv_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

int
xcb_glx_get_tex_gendv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_tex_gendv_cookie_t
xcb_glx_get_tex_gendv (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       uint32_t               coord,
                       uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_tex_gendv_cookie_t
xcb_glx_get_tex_gendv_unchecked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               coord,
                                 uint32_t               pname);

xcb_glx_float64_t *
xcb_glx_get_tex_gendv_data (const xcb_glx_get_tex_gendv_reply_t *R);

int
xcb_glx_get_tex_gendv_data_length (const xcb_glx_get_tex_gendv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_tex_gendv_data_end (const xcb_glx_get_tex_gendv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_tex_gendv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_tex_gendv_reply_t *
xcb_glx_get_tex_gendv_reply (xcb_connection_t                *c,
                             xcb_glx_get_tex_gendv_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

int
xcb_glx_get_tex_genfv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_tex_genfv_cookie_t
xcb_glx_get_tex_genfv (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       uint32_t               coord,
                       uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_tex_genfv_cookie_t
xcb_glx_get_tex_genfv_unchecked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               coord,
                                 uint32_t               pname);

xcb_glx_float32_t *
xcb_glx_get_tex_genfv_data (const xcb_glx_get_tex_genfv_reply_t *R);

int
xcb_glx_get_tex_genfv_data_length (const xcb_glx_get_tex_genfv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_tex_genfv_data_end (const xcb_glx_get_tex_genfv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_tex_genfv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_tex_genfv_reply_t *
xcb_glx_get_tex_genfv_reply (xcb_connection_t                *c,
                             xcb_glx_get_tex_genfv_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

int
xcb_glx_get_tex_geniv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_tex_geniv_cookie_t
xcb_glx_get_tex_geniv (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       uint32_t               coord,
                       uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_tex_geniv_cookie_t
xcb_glx_get_tex_geniv_unchecked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               coord,
                                 uint32_t               pname);

int32_t *
xcb_glx_get_tex_geniv_data (const xcb_glx_get_tex_geniv_reply_t *R);

int
xcb_glx_get_tex_geniv_data_length (const xcb_glx_get_tex_geniv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_tex_geniv_data_end (const xcb_glx_get_tex_geniv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_tex_geniv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_tex_geniv_reply_t *
xcb_glx_get_tex_geniv_reply (xcb_connection_t                *c,
                             xcb_glx_get_tex_geniv_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

int
xcb_glx_get_tex_image_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_tex_image_cookie_t
xcb_glx_get_tex_image (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       uint32_t               target,
                       int32_t                level,
                       uint32_t               format,
                       uint32_t               type,
                       uint8_t                swap_bytes);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_tex_image_cookie_t
xcb_glx_get_tex_image_unchecked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               target,
                                 int32_t                level,
                                 uint32_t               format,
                                 uint32_t               type,
                                 uint8_t                swap_bytes);

uint8_t *
xcb_glx_get_tex_image_data (const xcb_glx_get_tex_image_reply_t *R);

int
xcb_glx_get_tex_image_data_length (const xcb_glx_get_tex_image_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_tex_image_data_end (const xcb_glx_get_tex_image_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_tex_image_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_tex_image_reply_t *
xcb_glx_get_tex_image_reply (xcb_connection_t                *c,
                             xcb_glx_get_tex_image_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

int
xcb_glx_get_tex_parameterfv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_tex_parameterfv_cookie_t
xcb_glx_get_tex_parameterfv (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag,
                             uint32_t               target,
                             uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_tex_parameterfv_cookie_t
xcb_glx_get_tex_parameterfv_unchecked (xcb_connection_t      *c,
                                       xcb_glx_context_tag_t  context_tag,
                                       uint32_t               target,
                                       uint32_t               pname);

xcb_glx_float32_t *
xcb_glx_get_tex_parameterfv_data (const xcb_glx_get_tex_parameterfv_reply_t *R);

int
xcb_glx_get_tex_parameterfv_data_length (const xcb_glx_get_tex_parameterfv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_tex_parameterfv_data_end (const xcb_glx_get_tex_parameterfv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_tex_parameterfv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_tex_parameterfv_reply_t *
xcb_glx_get_tex_parameterfv_reply (xcb_connection_t                      *c,
                                   xcb_glx_get_tex_parameterfv_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e);

int
xcb_glx_get_tex_parameteriv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_tex_parameteriv_cookie_t
xcb_glx_get_tex_parameteriv (xcb_connection_t      *c,
                             xcb_glx_context_tag_t  context_tag,
                             uint32_t               target,
                             uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_tex_parameteriv_cookie_t
xcb_glx_get_tex_parameteriv_unchecked (xcb_connection_t      *c,
                                       xcb_glx_context_tag_t  context_tag,
                                       uint32_t               target,
                                       uint32_t               pname);

int32_t *
xcb_glx_get_tex_parameteriv_data (const xcb_glx_get_tex_parameteriv_reply_t *R);

int
xcb_glx_get_tex_parameteriv_data_length (const xcb_glx_get_tex_parameteriv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_tex_parameteriv_data_end (const xcb_glx_get_tex_parameteriv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_tex_parameteriv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_tex_parameteriv_reply_t *
xcb_glx_get_tex_parameteriv_reply (xcb_connection_t                      *c,
                                   xcb_glx_get_tex_parameteriv_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e);

int
xcb_glx_get_tex_level_parameterfv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_tex_level_parameterfv_cookie_t
xcb_glx_get_tex_level_parameterfv (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               target,
                                   int32_t                level,
                                   uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_tex_level_parameterfv_cookie_t
xcb_glx_get_tex_level_parameterfv_unchecked (xcb_connection_t      *c,
                                             xcb_glx_context_tag_t  context_tag,
                                             uint32_t               target,
                                             int32_t                level,
                                             uint32_t               pname);

xcb_glx_float32_t *
xcb_glx_get_tex_level_parameterfv_data (const xcb_glx_get_tex_level_parameterfv_reply_t *R);

int
xcb_glx_get_tex_level_parameterfv_data_length (const xcb_glx_get_tex_level_parameterfv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_tex_level_parameterfv_data_end (const xcb_glx_get_tex_level_parameterfv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_tex_level_parameterfv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_tex_level_parameterfv_reply_t *
xcb_glx_get_tex_level_parameterfv_reply (xcb_connection_t                            *c,
                                         xcb_glx_get_tex_level_parameterfv_cookie_t   cookie  /**< */,
                                         xcb_generic_error_t                        **e);

int
xcb_glx_get_tex_level_parameteriv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_tex_level_parameteriv_cookie_t
xcb_glx_get_tex_level_parameteriv (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               target,
                                   int32_t                level,
                                   uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_tex_level_parameteriv_cookie_t
xcb_glx_get_tex_level_parameteriv_unchecked (xcb_connection_t      *c,
                                             xcb_glx_context_tag_t  context_tag,
                                             uint32_t               target,
                                             int32_t                level,
                                             uint32_t               pname);

int32_t *
xcb_glx_get_tex_level_parameteriv_data (const xcb_glx_get_tex_level_parameteriv_reply_t *R);

int
xcb_glx_get_tex_level_parameteriv_data_length (const xcb_glx_get_tex_level_parameteriv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_tex_level_parameteriv_data_end (const xcb_glx_get_tex_level_parameteriv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_tex_level_parameteriv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_tex_level_parameteriv_reply_t *
xcb_glx_get_tex_level_parameteriv_reply (xcb_connection_t                            *c,
                                         xcb_glx_get_tex_level_parameteriv_cookie_t   cookie  /**< */,
                                         xcb_generic_error_t                        **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_is_enabled_cookie_t
xcb_glx_is_enabled (xcb_connection_t      *c,
                    xcb_glx_context_tag_t  context_tag,
                    uint32_t               capability);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_is_enabled_cookie_t
xcb_glx_is_enabled_unchecked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               capability);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_is_enabled_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_is_enabled_reply_t *
xcb_glx_is_enabled_reply (xcb_connection_t             *c,
                          xcb_glx_is_enabled_cookie_t   cookie  /**< */,
                          xcb_generic_error_t         **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_is_list_cookie_t
xcb_glx_is_list (xcb_connection_t      *c,
                 xcb_glx_context_tag_t  context_tag,
                 uint32_t               list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_is_list_cookie_t
xcb_glx_is_list_unchecked (xcb_connection_t      *c,
                           xcb_glx_context_tag_t  context_tag,
                           uint32_t               list);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_is_list_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_is_list_reply_t *
xcb_glx_is_list_reply (xcb_connection_t          *c,
                       xcb_glx_is_list_cookie_t   cookie  /**< */,
                       xcb_generic_error_t      **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_flush_checked (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_flush (xcb_connection_t      *c,
               xcb_glx_context_tag_t  context_tag);

int
xcb_glx_are_textures_resident_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_are_textures_resident_cookie_t
xcb_glx_are_textures_resident (xcb_connection_t      *c,
                               xcb_glx_context_tag_t  context_tag,
                               int32_t                n,
                               const uint32_t        *textures);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_are_textures_resident_cookie_t
xcb_glx_are_textures_resident_unchecked (xcb_connection_t      *c,
                                         xcb_glx_context_tag_t  context_tag,
                                         int32_t                n,
                                         const uint32_t        *textures);

uint8_t *
xcb_glx_are_textures_resident_data (const xcb_glx_are_textures_resident_reply_t *R);

int
xcb_glx_are_textures_resident_data_length (const xcb_glx_are_textures_resident_reply_t *R);

xcb_generic_iterator_t
xcb_glx_are_textures_resident_data_end (const xcb_glx_are_textures_resident_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_are_textures_resident_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_are_textures_resident_reply_t *
xcb_glx_are_textures_resident_reply (xcb_connection_t                        *c,
                                     xcb_glx_are_textures_resident_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e);

int
xcb_glx_delete_textures_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_delete_textures_checked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 int32_t                n,
                                 const uint32_t        *textures);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_delete_textures (xcb_connection_t      *c,
                         xcb_glx_context_tag_t  context_tag,
                         int32_t                n,
                         const uint32_t        *textures);

uint32_t *
xcb_glx_delete_textures_textures (const xcb_glx_delete_textures_request_t *R);

int
xcb_glx_delete_textures_textures_length (const xcb_glx_delete_textures_request_t *R);

xcb_generic_iterator_t
xcb_glx_delete_textures_textures_end (const xcb_glx_delete_textures_request_t *R);

int
xcb_glx_gen_textures_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_gen_textures_cookie_t
xcb_glx_gen_textures (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      int32_t                n);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_gen_textures_cookie_t
xcb_glx_gen_textures_unchecked (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                int32_t                n);

uint32_t *
xcb_glx_gen_textures_data (const xcb_glx_gen_textures_reply_t *R);

int
xcb_glx_gen_textures_data_length (const xcb_glx_gen_textures_reply_t *R);

xcb_generic_iterator_t
xcb_glx_gen_textures_data_end (const xcb_glx_gen_textures_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_gen_textures_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_gen_textures_reply_t *
xcb_glx_gen_textures_reply (xcb_connection_t               *c,
                            xcb_glx_gen_textures_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_is_texture_cookie_t
xcb_glx_is_texture (xcb_connection_t      *c,
                    xcb_glx_context_tag_t  context_tag,
                    uint32_t               texture);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_is_texture_cookie_t
xcb_glx_is_texture_unchecked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               texture);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_is_texture_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_is_texture_reply_t *
xcb_glx_is_texture_reply (xcb_connection_t             *c,
                          xcb_glx_is_texture_cookie_t   cookie  /**< */,
                          xcb_generic_error_t         **e);

int
xcb_glx_get_color_table_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_color_table_cookie_t
xcb_glx_get_color_table (xcb_connection_t      *c,
                         xcb_glx_context_tag_t  context_tag,
                         uint32_t               target,
                         uint32_t               format,
                         uint32_t               type,
                         uint8_t                swap_bytes);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_color_table_cookie_t
xcb_glx_get_color_table_unchecked (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               target,
                                   uint32_t               format,
                                   uint32_t               type,
                                   uint8_t                swap_bytes);

uint8_t *
xcb_glx_get_color_table_data (const xcb_glx_get_color_table_reply_t *R);

int
xcb_glx_get_color_table_data_length (const xcb_glx_get_color_table_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_color_table_data_end (const xcb_glx_get_color_table_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_color_table_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_color_table_reply_t *
xcb_glx_get_color_table_reply (xcb_connection_t                  *c,
                               xcb_glx_get_color_table_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e);

int
xcb_glx_get_color_table_parameterfv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_color_table_parameterfv_cookie_t
xcb_glx_get_color_table_parameterfv (xcb_connection_t      *c,
                                     xcb_glx_context_tag_t  context_tag,
                                     uint32_t               target,
                                     uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_color_table_parameterfv_cookie_t
xcb_glx_get_color_table_parameterfv_unchecked (xcb_connection_t      *c,
                                               xcb_glx_context_tag_t  context_tag,
                                               uint32_t               target,
                                               uint32_t               pname);

xcb_glx_float32_t *
xcb_glx_get_color_table_parameterfv_data (const xcb_glx_get_color_table_parameterfv_reply_t *R);

int
xcb_glx_get_color_table_parameterfv_data_length (const xcb_glx_get_color_table_parameterfv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_color_table_parameterfv_data_end (const xcb_glx_get_color_table_parameterfv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_color_table_parameterfv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_color_table_parameterfv_reply_t *
xcb_glx_get_color_table_parameterfv_reply (xcb_connection_t                              *c,
                                           xcb_glx_get_color_table_parameterfv_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e);

int
xcb_glx_get_color_table_parameteriv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_color_table_parameteriv_cookie_t
xcb_glx_get_color_table_parameteriv (xcb_connection_t      *c,
                                     xcb_glx_context_tag_t  context_tag,
                                     uint32_t               target,
                                     uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_color_table_parameteriv_cookie_t
xcb_glx_get_color_table_parameteriv_unchecked (xcb_connection_t      *c,
                                               xcb_glx_context_tag_t  context_tag,
                                               uint32_t               target,
                                               uint32_t               pname);

int32_t *
xcb_glx_get_color_table_parameteriv_data (const xcb_glx_get_color_table_parameteriv_reply_t *R);

int
xcb_glx_get_color_table_parameteriv_data_length (const xcb_glx_get_color_table_parameteriv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_color_table_parameteriv_data_end (const xcb_glx_get_color_table_parameteriv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_color_table_parameteriv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_color_table_parameteriv_reply_t *
xcb_glx_get_color_table_parameteriv_reply (xcb_connection_t                              *c,
                                           xcb_glx_get_color_table_parameteriv_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e);

int
xcb_glx_get_convolution_filter_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_convolution_filter_cookie_t
xcb_glx_get_convolution_filter (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                uint32_t               target,
                                uint32_t               format,
                                uint32_t               type,
                                uint8_t                swap_bytes);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_convolution_filter_cookie_t
xcb_glx_get_convolution_filter_unchecked (xcb_connection_t      *c,
                                          xcb_glx_context_tag_t  context_tag,
                                          uint32_t               target,
                                          uint32_t               format,
                                          uint32_t               type,
                                          uint8_t                swap_bytes);

uint8_t *
xcb_glx_get_convolution_filter_data (const xcb_glx_get_convolution_filter_reply_t *R);

int
xcb_glx_get_convolution_filter_data_length (const xcb_glx_get_convolution_filter_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_convolution_filter_data_end (const xcb_glx_get_convolution_filter_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_convolution_filter_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_convolution_filter_reply_t *
xcb_glx_get_convolution_filter_reply (xcb_connection_t                         *c,
                                      xcb_glx_get_convolution_filter_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e);

int
xcb_glx_get_convolution_parameterfv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_convolution_parameterfv_cookie_t
xcb_glx_get_convolution_parameterfv (xcb_connection_t      *c,
                                     xcb_glx_context_tag_t  context_tag,
                                     uint32_t               target,
                                     uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_convolution_parameterfv_cookie_t
xcb_glx_get_convolution_parameterfv_unchecked (xcb_connection_t      *c,
                                               xcb_glx_context_tag_t  context_tag,
                                               uint32_t               target,
                                               uint32_t               pname);

xcb_glx_float32_t *
xcb_glx_get_convolution_parameterfv_data (const xcb_glx_get_convolution_parameterfv_reply_t *R);

int
xcb_glx_get_convolution_parameterfv_data_length (const xcb_glx_get_convolution_parameterfv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_convolution_parameterfv_data_end (const xcb_glx_get_convolution_parameterfv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_convolution_parameterfv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_convolution_parameterfv_reply_t *
xcb_glx_get_convolution_parameterfv_reply (xcb_connection_t                              *c,
                                           xcb_glx_get_convolution_parameterfv_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e);

int
xcb_glx_get_convolution_parameteriv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_convolution_parameteriv_cookie_t
xcb_glx_get_convolution_parameteriv (xcb_connection_t      *c,
                                     xcb_glx_context_tag_t  context_tag,
                                     uint32_t               target,
                                     uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_convolution_parameteriv_cookie_t
xcb_glx_get_convolution_parameteriv_unchecked (xcb_connection_t      *c,
                                               xcb_glx_context_tag_t  context_tag,
                                               uint32_t               target,
                                               uint32_t               pname);

int32_t *
xcb_glx_get_convolution_parameteriv_data (const xcb_glx_get_convolution_parameteriv_reply_t *R);

int
xcb_glx_get_convolution_parameteriv_data_length (const xcb_glx_get_convolution_parameteriv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_convolution_parameteriv_data_end (const xcb_glx_get_convolution_parameteriv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_convolution_parameteriv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_convolution_parameteriv_reply_t *
xcb_glx_get_convolution_parameteriv_reply (xcb_connection_t                              *c,
                                           xcb_glx_get_convolution_parameteriv_cookie_t   cookie  /**< */,
                                           xcb_generic_error_t                          **e);

int
xcb_glx_get_separable_filter_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_separable_filter_cookie_t
xcb_glx_get_separable_filter (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               target,
                              uint32_t               format,
                              uint32_t               type,
                              uint8_t                swap_bytes);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_separable_filter_cookie_t
xcb_glx_get_separable_filter_unchecked (xcb_connection_t      *c,
                                        xcb_glx_context_tag_t  context_tag,
                                        uint32_t               target,
                                        uint32_t               format,
                                        uint32_t               type,
                                        uint8_t                swap_bytes);

uint8_t *
xcb_glx_get_separable_filter_rows_and_cols (const xcb_glx_get_separable_filter_reply_t *R);

int
xcb_glx_get_separable_filter_rows_and_cols_length (const xcb_glx_get_separable_filter_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_separable_filter_rows_and_cols_end (const xcb_glx_get_separable_filter_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_separable_filter_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_separable_filter_reply_t *
xcb_glx_get_separable_filter_reply (xcb_connection_t                       *c,
                                    xcb_glx_get_separable_filter_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e);

int
xcb_glx_get_histogram_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_histogram_cookie_t
xcb_glx_get_histogram (xcb_connection_t      *c,
                       xcb_glx_context_tag_t  context_tag,
                       uint32_t               target,
                       uint32_t               format,
                       uint32_t               type,
                       uint8_t                swap_bytes,
                       uint8_t                reset);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_histogram_cookie_t
xcb_glx_get_histogram_unchecked (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               target,
                                 uint32_t               format,
                                 uint32_t               type,
                                 uint8_t                swap_bytes,
                                 uint8_t                reset);

uint8_t *
xcb_glx_get_histogram_data (const xcb_glx_get_histogram_reply_t *R);

int
xcb_glx_get_histogram_data_length (const xcb_glx_get_histogram_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_histogram_data_end (const xcb_glx_get_histogram_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_histogram_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_histogram_reply_t *
xcb_glx_get_histogram_reply (xcb_connection_t                *c,
                             xcb_glx_get_histogram_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

int
xcb_glx_get_histogram_parameterfv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_histogram_parameterfv_cookie_t
xcb_glx_get_histogram_parameterfv (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               target,
                                   uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_histogram_parameterfv_cookie_t
xcb_glx_get_histogram_parameterfv_unchecked (xcb_connection_t      *c,
                                             xcb_glx_context_tag_t  context_tag,
                                             uint32_t               target,
                                             uint32_t               pname);

xcb_glx_float32_t *
xcb_glx_get_histogram_parameterfv_data (const xcb_glx_get_histogram_parameterfv_reply_t *R);

int
xcb_glx_get_histogram_parameterfv_data_length (const xcb_glx_get_histogram_parameterfv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_histogram_parameterfv_data_end (const xcb_glx_get_histogram_parameterfv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_histogram_parameterfv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_histogram_parameterfv_reply_t *
xcb_glx_get_histogram_parameterfv_reply (xcb_connection_t                            *c,
                                         xcb_glx_get_histogram_parameterfv_cookie_t   cookie  /**< */,
                                         xcb_generic_error_t                        **e);

int
xcb_glx_get_histogram_parameteriv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_histogram_parameteriv_cookie_t
xcb_glx_get_histogram_parameteriv (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               target,
                                   uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_histogram_parameteriv_cookie_t
xcb_glx_get_histogram_parameteriv_unchecked (xcb_connection_t      *c,
                                             xcb_glx_context_tag_t  context_tag,
                                             uint32_t               target,
                                             uint32_t               pname);

int32_t *
xcb_glx_get_histogram_parameteriv_data (const xcb_glx_get_histogram_parameteriv_reply_t *R);

int
xcb_glx_get_histogram_parameteriv_data_length (const xcb_glx_get_histogram_parameteriv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_histogram_parameteriv_data_end (const xcb_glx_get_histogram_parameteriv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_histogram_parameteriv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_histogram_parameteriv_reply_t *
xcb_glx_get_histogram_parameteriv_reply (xcb_connection_t                            *c,
                                         xcb_glx_get_histogram_parameteriv_cookie_t   cookie  /**< */,
                                         xcb_generic_error_t                        **e);

int
xcb_glx_get_minmax_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_minmax_cookie_t
xcb_glx_get_minmax (xcb_connection_t      *c,
                    xcb_glx_context_tag_t  context_tag,
                    uint32_t               target,
                    uint32_t               format,
                    uint32_t               type,
                    uint8_t                swap_bytes,
                    uint8_t                reset);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_minmax_cookie_t
xcb_glx_get_minmax_unchecked (xcb_connection_t      *c,
                              xcb_glx_context_tag_t  context_tag,
                              uint32_t               target,
                              uint32_t               format,
                              uint32_t               type,
                              uint8_t                swap_bytes,
                              uint8_t                reset);

uint8_t *
xcb_glx_get_minmax_data (const xcb_glx_get_minmax_reply_t *R);

int
xcb_glx_get_minmax_data_length (const xcb_glx_get_minmax_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_minmax_data_end (const xcb_glx_get_minmax_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_minmax_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_minmax_reply_t *
xcb_glx_get_minmax_reply (xcb_connection_t             *c,
                          xcb_glx_get_minmax_cookie_t   cookie  /**< */,
                          xcb_generic_error_t         **e);

int
xcb_glx_get_minmax_parameterfv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_minmax_parameterfv_cookie_t
xcb_glx_get_minmax_parameterfv (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                uint32_t               target,
                                uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_minmax_parameterfv_cookie_t
xcb_glx_get_minmax_parameterfv_unchecked (xcb_connection_t      *c,
                                          xcb_glx_context_tag_t  context_tag,
                                          uint32_t               target,
                                          uint32_t               pname);

xcb_glx_float32_t *
xcb_glx_get_minmax_parameterfv_data (const xcb_glx_get_minmax_parameterfv_reply_t *R);

int
xcb_glx_get_minmax_parameterfv_data_length (const xcb_glx_get_minmax_parameterfv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_minmax_parameterfv_data_end (const xcb_glx_get_minmax_parameterfv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_minmax_parameterfv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_minmax_parameterfv_reply_t *
xcb_glx_get_minmax_parameterfv_reply (xcb_connection_t                         *c,
                                      xcb_glx_get_minmax_parameterfv_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e);

int
xcb_glx_get_minmax_parameteriv_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_minmax_parameteriv_cookie_t
xcb_glx_get_minmax_parameteriv (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                uint32_t               target,
                                uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_minmax_parameteriv_cookie_t
xcb_glx_get_minmax_parameteriv_unchecked (xcb_connection_t      *c,
                                          xcb_glx_context_tag_t  context_tag,
                                          uint32_t               target,
                                          uint32_t               pname);

int32_t *
xcb_glx_get_minmax_parameteriv_data (const xcb_glx_get_minmax_parameteriv_reply_t *R);

int
xcb_glx_get_minmax_parameteriv_data_length (const xcb_glx_get_minmax_parameteriv_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_minmax_parameteriv_data_end (const xcb_glx_get_minmax_parameteriv_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_minmax_parameteriv_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_minmax_parameteriv_reply_t *
xcb_glx_get_minmax_parameteriv_reply (xcb_connection_t                         *c,
                                      xcb_glx_get_minmax_parameteriv_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e);

int
xcb_glx_get_compressed_tex_image_arb_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_compressed_tex_image_arb_cookie_t
xcb_glx_get_compressed_tex_image_arb (xcb_connection_t      *c,
                                      xcb_glx_context_tag_t  context_tag,
                                      uint32_t               target,
                                      int32_t                level);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_compressed_tex_image_arb_cookie_t
xcb_glx_get_compressed_tex_image_arb_unchecked (xcb_connection_t      *c,
                                                xcb_glx_context_tag_t  context_tag,
                                                uint32_t               target,
                                                int32_t                level);

uint8_t *
xcb_glx_get_compressed_tex_image_arb_data (const xcb_glx_get_compressed_tex_image_arb_reply_t *R);

int
xcb_glx_get_compressed_tex_image_arb_data_length (const xcb_glx_get_compressed_tex_image_arb_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_compressed_tex_image_arb_data_end (const xcb_glx_get_compressed_tex_image_arb_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_compressed_tex_image_arb_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_compressed_tex_image_arb_reply_t *
xcb_glx_get_compressed_tex_image_arb_reply (xcb_connection_t                               *c,
                                            xcb_glx_get_compressed_tex_image_arb_cookie_t   cookie  /**< */,
                                            xcb_generic_error_t                           **e);

int
xcb_glx_delete_queries_arb_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_glx_delete_queries_arb_checked (xcb_connection_t      *c,
                                    xcb_glx_context_tag_t  context_tag,
                                    int32_t                n,
                                    const uint32_t        *ids);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_glx_delete_queries_arb (xcb_connection_t      *c,
                            xcb_glx_context_tag_t  context_tag,
                            int32_t                n,
                            const uint32_t        *ids);

uint32_t *
xcb_glx_delete_queries_arb_ids (const xcb_glx_delete_queries_arb_request_t *R);

int
xcb_glx_delete_queries_arb_ids_length (const xcb_glx_delete_queries_arb_request_t *R);

xcb_generic_iterator_t
xcb_glx_delete_queries_arb_ids_end (const xcb_glx_delete_queries_arb_request_t *R);

int
xcb_glx_gen_queries_arb_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_gen_queries_arb_cookie_t
xcb_glx_gen_queries_arb (xcb_connection_t      *c,
                         xcb_glx_context_tag_t  context_tag,
                         int32_t                n);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_gen_queries_arb_cookie_t
xcb_glx_gen_queries_arb_unchecked (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   int32_t                n);

uint32_t *
xcb_glx_gen_queries_arb_data (const xcb_glx_gen_queries_arb_reply_t *R);

int
xcb_glx_gen_queries_arb_data_length (const xcb_glx_gen_queries_arb_reply_t *R);

xcb_generic_iterator_t
xcb_glx_gen_queries_arb_data_end (const xcb_glx_gen_queries_arb_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_gen_queries_arb_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_gen_queries_arb_reply_t *
xcb_glx_gen_queries_arb_reply (xcb_connection_t                  *c,
                               xcb_glx_gen_queries_arb_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_is_query_arb_cookie_t
xcb_glx_is_query_arb (xcb_connection_t      *c,
                      xcb_glx_context_tag_t  context_tag,
                      uint32_t               id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_is_query_arb_cookie_t
xcb_glx_is_query_arb_unchecked (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                uint32_t               id);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_is_query_arb_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_is_query_arb_reply_t *
xcb_glx_is_query_arb_reply (xcb_connection_t               *c,
                            xcb_glx_is_query_arb_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e);

int
xcb_glx_get_queryiv_arb_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_queryiv_arb_cookie_t
xcb_glx_get_queryiv_arb (xcb_connection_t      *c,
                         xcb_glx_context_tag_t  context_tag,
                         uint32_t               target,
                         uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_queryiv_arb_cookie_t
xcb_glx_get_queryiv_arb_unchecked (xcb_connection_t      *c,
                                   xcb_glx_context_tag_t  context_tag,
                                   uint32_t               target,
                                   uint32_t               pname);

int32_t *
xcb_glx_get_queryiv_arb_data (const xcb_glx_get_queryiv_arb_reply_t *R);

int
xcb_glx_get_queryiv_arb_data_length (const xcb_glx_get_queryiv_arb_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_queryiv_arb_data_end (const xcb_glx_get_queryiv_arb_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_queryiv_arb_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_queryiv_arb_reply_t *
xcb_glx_get_queryiv_arb_reply (xcb_connection_t                  *c,
                               xcb_glx_get_queryiv_arb_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e);

int
xcb_glx_get_query_objectiv_arb_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_query_objectiv_arb_cookie_t
xcb_glx_get_query_objectiv_arb (xcb_connection_t      *c,
                                xcb_glx_context_tag_t  context_tag,
                                uint32_t               id,
                                uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_query_objectiv_arb_cookie_t
xcb_glx_get_query_objectiv_arb_unchecked (xcb_connection_t      *c,
                                          xcb_glx_context_tag_t  context_tag,
                                          uint32_t               id,
                                          uint32_t               pname);

int32_t *
xcb_glx_get_query_objectiv_arb_data (const xcb_glx_get_query_objectiv_arb_reply_t *R);

int
xcb_glx_get_query_objectiv_arb_data_length (const xcb_glx_get_query_objectiv_arb_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_query_objectiv_arb_data_end (const xcb_glx_get_query_objectiv_arb_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_query_objectiv_arb_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_query_objectiv_arb_reply_t *
xcb_glx_get_query_objectiv_arb_reply (xcb_connection_t                         *c,
                                      xcb_glx_get_query_objectiv_arb_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e);

int
xcb_glx_get_query_objectuiv_arb_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_glx_get_query_objectuiv_arb_cookie_t
xcb_glx_get_query_objectuiv_arb (xcb_connection_t      *c,
                                 xcb_glx_context_tag_t  context_tag,
                                 uint32_t               id,
                                 uint32_t               pname);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_glx_get_query_objectuiv_arb_cookie_t
xcb_glx_get_query_objectuiv_arb_unchecked (xcb_connection_t      *c,
                                           xcb_glx_context_tag_t  context_tag,
                                           uint32_t               id,
                                           uint32_t               pname);

uint32_t *
xcb_glx_get_query_objectuiv_arb_data (const xcb_glx_get_query_objectuiv_arb_reply_t *R);

int
xcb_glx_get_query_objectuiv_arb_data_length (const xcb_glx_get_query_objectuiv_arb_reply_t *R);

xcb_generic_iterator_t
xcb_glx_get_query_objectuiv_arb_data_end (const xcb_glx_get_query_objectuiv_arb_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_glx_get_query_objectuiv_arb_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_glx_get_query_objectuiv_arb_reply_t *
xcb_glx_get_query_objectuiv_arb_reply (xcb_connection_t                          *c,
                                       xcb_glx_get_query_objectuiv_arb_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d33 3
a35 3
    xcb_glx_pixmap_t *data; /**<  */
    int               rem; /**<  */
    int               index; /**<  */
d44 3
a46 3
    xcb_glx_context_t *data; /**<  */
    int                rem; /**<  */
    int                index; /**<  */
d55 3
a57 3
    xcb_glx_pbuffer_t *data; /**<  */
    int                rem; /**<  */
    int                index; /**<  */
d66 3
a68 3
    xcb_glx_window_t *data; /**<  */
    int               rem; /**<  */
    int               index; /**<  */
d77 3
a79 3
    xcb_glx_fbconfig_t *data; /**<  */
    int                 rem; /**<  */
    int                 index; /**<  */
d88 3
a90 3
    xcb_glx_drawable_t *data; /**<  */
    int                 rem; /**<  */
    int                 index; /**<  */
d99 3
a101 3
    xcb_glx_float32_t *data; /**<  */
    int                rem; /**<  */
    int                index; /**<  */
d110 3
a112 3
    xcb_glx_float64_t *data; /**<  */
    int                rem; /**<  */
    int                index; /**<  */
d121 3
a123 3
    xcb_glx_bool32_t *data; /**<  */
    int               rem; /**<  */
    int               index; /**<  */
d132 3
a134 3
    xcb_glx_context_tag_t *data; /**<  */
    int                    rem; /**<  */
    int                    index; /**<  */
d144 7
a150 7
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
    uint32_t bad_value; /**<  */
    uint16_t minor_opcode; /**<  */
    uint8_t  major_opcode; /**<  */
    uint8_t  pad0[21]; /**<  */
d230 14
a243 14
    uint8_t            response_type; /**<  */
    uint8_t            pad0; /**<  */
    uint16_t           sequence; /**<  */
    uint16_t           event_type; /**<  */
    uint16_t           draw_type; /**<  */
    xcb_glx_drawable_t drawable; /**<  */
    uint32_t           b_mask; /**<  */
    uint16_t           aux_buffer; /**<  */
    uint16_t           x; /**<  */
    uint16_t           y; /**<  */
    uint16_t           width; /**<  */
    uint16_t           height; /**<  */
    uint16_t           count; /**<  */
    uint8_t            pad1[4]; /**<  */
d253 11
a263 11
    uint8_t            response_type; /**<  */
    uint8_t            pad0; /**<  */
    uint16_t           sequence; /**<  */
    uint16_t           event_type; /**<  */
    uint8_t            pad1[2]; /**<  */
    xcb_glx_drawable_t drawable; /**<  */
    uint32_t           ust_hi; /**<  */
    uint32_t           ust_lo; /**<  */
    uint32_t           msc_hi; /**<  */
    uint32_t           msc_lo; /**<  */
    uint32_t           sbc; /**<  */
d283 4
a286 4
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
d296 7
a302 7
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint16_t              request_num; /**<  */
    uint16_t              request_total; /**<  */
    uint32_t              data_len; /**<  */
d312 9
a320 9
    uint8_t           major_opcode; /**<  */
    uint8_t           minor_opcode; /**<  */
    uint16_t          length; /**<  */
    xcb_glx_context_t context; /**<  */
    xcb_visualid_t    visual; /**<  */
    uint32_t          screen; /**<  */
    xcb_glx_context_t share_list; /**<  */
    uint8_t           is_direct; /**<  */
    uint8_t           pad0[3]; /**<  */
d330 4
a333 4
    uint8_t           major_opcode; /**<  */
    uint8_t           minor_opcode; /**<  */
    uint16_t          length; /**<  */
    xcb_glx_context_t context; /**<  */
d340 1
a340 1
    unsigned int sequence; /**<  */
d350 6
a355 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_drawable_t    drawable; /**<  */
    xcb_glx_context_t     context; /**<  */
    xcb_glx_context_tag_t old_context_tag; /**<  */
d362 6
a367 6
    uint8_t               response_type; /**<  */
    uint8_t               pad0; /**<  */
    uint16_t              sequence; /**<  */
    uint32_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint8_t               pad1[20]; /**<  */
d374 1
a374 1
    unsigned int sequence; /**<  */
d384 4
a387 4
    uint8_t           major_opcode; /**<  */
    uint8_t           minor_opcode; /**<  */
    uint16_t          length; /**<  */
    xcb_glx_context_t context; /**<  */
d394 6
a399 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  is_direct; /**<  */
    uint8_t  pad1[23]; /**<  */
d406 1
a406 1
    unsigned int sequence; /**<  */
d416 5
a420 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t major_version; /**<  */
    uint32_t minor_version; /**<  */
d427 7
a433 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t major_version; /**<  */
    uint32_t minor_version; /**<  */
    uint8_t  pad1[16]; /**<  */
d443 4
a446 4
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
d456 4
a459 4
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
d469 7
a475 7
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_t     src; /**<  */
    xcb_glx_context_t     dest; /**<  */
    uint32_t              mask; /**<  */
    xcb_glx_context_tag_t src_context_tag; /**<  */
d509 5
a513 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    xcb_glx_drawable_t    drawable; /**<  */
d523 8
a530 8
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    xcb_font_t            font; /**<  */
    uint32_t              first; /**<  */
    uint32_t              count; /**<  */
    uint32_t              list_base; /**<  */
d540 7
a546 7
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    uint32_t         screen; /**<  */
    xcb_visualid_t   visual; /**<  */
    xcb_pixmap_t     pixmap; /**<  */
    xcb_glx_pixmap_t glx_pixmap; /**<  */
d553 1
a553 1
    unsigned int sequence; /**<  */
d563 4
a566 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
d573 7
a579 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_visuals; /**<  */
    uint32_t num_properties; /**<  */
    uint8_t  pad1[16]; /**<  */
d589 4
a592 4
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_glx_pixmap_t glx_pixmap; /**<  */
d602 5
a606 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    uint32_t              vendor_code; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
d613 1
a613 1
    unsigned int sequence; /**<  */
d623 5
a627 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    uint32_t              vendor_code; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
d634 6
a639 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t retval; /**<  */
    uint8_t  data1[24]; /**<  */
d646 1
a646 1
    unsigned int sequence; /**<  */
d656 4
a659 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
d666 7
a672 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    uint8_t  pad2[16]; /**<  */
d679 1
a679 1
    unsigned int sequence; /**<  */
d689 5
a693 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
    uint32_t name; /**<  */
d700 7
a706 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t str_len; /**<  */
    uint8_t  pad2[16]; /**<  */
d716 6
a721 6
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t major_version; /**<  */
    uint32_t minor_version; /**<  */
    uint32_t str_len; /**<  */
d728 1
a728 1
    unsigned int sequence; /**<  */
d738 4
a741 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
d748 7
a754 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_FB_configs; /**<  */
    uint32_t num_properties; /**<  */
    uint8_t  pad1[16]; /**<  */
d764 8
a771 8
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    uint32_t           screen; /**<  */
    xcb_glx_fbconfig_t fbconfig; /**<  */
    xcb_pixmap_t       pixmap; /**<  */
    xcb_glx_pixmap_t   glx_pixmap; /**<  */
    uint32_t           num_attribs; /**<  */
d781 4
a784 4
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_glx_pixmap_t glx_pixmap; /**<  */
d794 10
a803 10
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_glx_context_t  context; /**<  */
    xcb_glx_fbconfig_t fbconfig; /**<  */
    uint32_t           screen; /**<  */
    uint32_t           render_type; /**<  */
    xcb_glx_context_t  share_list; /**<  */
    uint8_t            is_direct; /**<  */
    uint8_t            pad0[3]; /**<  */
d810 1
a810 1
    unsigned int sequence; /**<  */
d820 4
a823 4
    uint8_t           major_opcode; /**<  */
    uint8_t           minor_opcode; /**<  */
    uint16_t          length; /**<  */
    xcb_glx_context_t context; /**<  */
d830 6
a835 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_attribs; /**<  */
    uint8_t  pad1[20]; /**<  */
d842 1
a842 1
    unsigned int sequence; /**<  */
d852 7
a858 7
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t old_context_tag; /**<  */
    xcb_glx_drawable_t    drawable; /**<  */
    xcb_glx_drawable_t    read_drawable; /**<  */
    xcb_glx_context_t     context; /**<  */
d865 6
a870 6
    uint8_t               response_type; /**<  */
    uint8_t               pad0; /**<  */
    uint16_t              sequence; /**<  */
    uint32_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint8_t               pad1[20]; /**<  */
d880 7
a886 7
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    uint32_t           screen; /**<  */
    xcb_glx_fbconfig_t fbconfig; /**<  */
    xcb_glx_pbuffer_t  pbuffer; /**<  */
    uint32_t           num_attribs; /**<  */
d896 4
a899 4
    uint8_t           major_opcode; /**<  */
    uint8_t           minor_opcode; /**<  */
    uint16_t          length; /**<  */
    xcb_glx_pbuffer_t pbuffer; /**<  */
d906 1
a906 1
    unsigned int sequence; /**<  */
d916 4
a919 4
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_glx_drawable_t drawable; /**<  */
d926 6
a931 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t num_attribs; /**<  */
    uint8_t  pad1[20]; /**<  */
d941 5
a945 5
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_glx_drawable_t drawable; /**<  */
    uint32_t           num_attribs; /**<  */
d955 8
a962 8
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    uint32_t           screen; /**<  */
    xcb_glx_fbconfig_t fbconfig; /**<  */
    xcb_window_t       window; /**<  */
    xcb_glx_window_t   glx_window; /**<  */
    uint32_t           num_attribs; /**<  */
d972 4
a975 4
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_glx_window_t glxwindow; /**<  */
d985 8
a992 8
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t major_version; /**<  */
    uint32_t minor_version; /**<  */
    uint32_t num_versions; /**<  */
    uint32_t gl_str_len; /**<  */
    uint32_t glx_str_len; /**<  */
d1002 10
a1011 10
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_glx_context_t  context; /**<  */
    xcb_glx_fbconfig_t fbconfig; /**<  */
    uint32_t           screen; /**<  */
    xcb_glx_context_t  share_list; /**<  */
    uint8_t            is_direct; /**<  */
    uint8_t            pad0[3]; /**<  */
    uint32_t           num_attribs; /**<  */
d1021 8
a1028 8
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t major_version; /**<  */
    uint32_t minor_version; /**<  */
    uint32_t num_versions; /**<  */
    uint32_t gl_str_len; /**<  */
    uint32_t glx_str_len; /**<  */
d1038 6
a1043 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              list; /**<  */
    uint32_t              mode; /**<  */
d1053 4
a1056 4
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
d1066 6
a1071 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              list; /**<  */
    int32_t               range; /**<  */
d1078 1
a1078 1
    unsigned int sequence; /**<  */
d1088 5
a1092 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    int32_t               range; /**<  */
d1099 5
a1103 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t ret_val; /**<  */
d1113 6
a1118 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    int32_t               size; /**<  */
    int32_t               type; /**<  */
d1128 5
a1132 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    int32_t               size; /**<  */
d1139 1
a1139 1
    unsigned int sequence; /**<  */
d1149 5
a1153 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              mode; /**<  */
d1160 8
a1167 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t ret_val; /**<  */
    uint32_t n; /**<  */
    uint32_t new_mode; /**<  */
    uint8_t  pad1[12]; /**<  */
d1180 1
a1180 1
    unsigned int sequence; /**<  */
d1190 4
a1193 4
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
d1200 4
a1203 4
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
d1213 6
a1218 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              pname; /**<  */
    xcb_glx_float32_t     datum; /**<  */
d1228 6
a1233 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              pname; /**<  */
    int32_t               datum; /**<  */
d1240 1
a1240 1
    unsigned int sequence; /**<  */
d1250 12
a1261 12
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    int32_t               x; /**<  */
    int32_t               y; /**<  */
    int32_t               width; /**<  */
    int32_t               height; /**<  */
    uint32_t              format; /**<  */
    uint32_t              type; /**<  */
    uint8_t               swap_bytes; /**<  */
    uint8_t               lsb_first; /**<  */
d1268 5
a1272 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[24]; /**<  */
d1279 1
a1279 1
    unsigned int sequence; /**<  */
d1289 5
a1293 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    int32_t               pname; /**<  */
d1300 8
a1307 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    uint8_t  datum; /**<  */
    uint8_t  pad2[15]; /**<  */
d1314 1
a1314 1
    unsigned int sequence; /**<  */
d1324 5
a1328 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    int32_t               plane; /**<  */
d1335 5
a1339 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[24]; /**<  */
d1346 1
a1346 1
    unsigned int sequence; /**<  */
d1356 5
a1360 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              pname; /**<  */
d1367 8
a1374 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float64_t datum; /**<  */
    uint8_t           pad2[8]; /**<  */
d1381 1
a1381 1
    unsigned int sequence; /**<  */
d1391 4
a1394 4
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
d1401 5
a1405 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    int32_t  error; /**<  */
d1412 1
a1412 1
    unsigned int sequence; /**<  */
d1422 5
a1426 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              pname; /**<  */
d1433 8
a1440 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float32_t datum; /**<  */
    uint8_t           pad2[12]; /**<  */
d1447 1
a1447 1
    unsigned int sequence; /**<  */
d1457 5
a1461 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              pname; /**<  */
d1468 8
a1475 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    int32_t  datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d1482 1
a1482 1
    unsigned int sequence; /**<  */
d1492 6
a1497 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              light; /**<  */
    uint32_t              pname; /**<  */
d1504 8
a1511 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float32_t datum; /**<  */
    uint8_t           pad2[12]; /**<  */
d1518 1
a1518 1
    unsigned int sequence; /**<  */
d1528 6
a1533 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              light; /**<  */
    uint32_t              pname; /**<  */
d1540 8
a1547 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    int32_t  datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d1554 1
a1554 1
    unsigned int sequence; /**<  */
d1564 6
a1569 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              query; /**<  */
d1576 8
a1583 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float64_t datum; /**<  */
    uint8_t           pad2[8]; /**<  */
d1590 1
a1590 1
    unsigned int sequence; /**<  */
d1600 6
a1605 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              query; /**<  */
d1612 8
a1619 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float32_t datum; /**<  */
    uint8_t           pad2[12]; /**<  */
d1626 1
a1626 1
    unsigned int sequence; /**<  */
d1636 6
a1641 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              query; /**<  */
d1648 8
a1655 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    int32_t  datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d1662 1
a1662 1
    unsigned int sequence; /**<  */
d1672 6
a1677 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              face; /**<  */
    uint32_t              pname; /**<  */
d1684 8
a1691 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float32_t datum; /**<  */
    uint8_t           pad2[12]; /**<  */
d1698 1
a1698 1
    unsigned int sequence; /**<  */
d1708 6
a1713 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              face; /**<  */
    uint32_t              pname; /**<  */
d1720 8
a1727 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    int32_t  datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d1734 1
a1734 1
    unsigned int sequence; /**<  */
d1744 5
a1748 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              map; /**<  */
d1755 8
a1762 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float32_t datum; /**<  */
    uint8_t           pad2[12]; /**<  */
d1769 1
a1769 1
    unsigned int sequence; /**<  */
d1779 5
a1783 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              map; /**<  */
d1790 8
a1797 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    uint32_t datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d1804 1
a1804 1
    unsigned int sequence; /**<  */
d1814 5
a1818 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              map; /**<  */
d1825 8
a1832 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    uint16_t datum; /**<  */
    uint8_t  pad2[16]; /**<  */
d1839 1
a1839 1
    unsigned int sequence; /**<  */
d1849 5
a1853 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint8_t               lsb_first; /**<  */
d1860 5
a1864 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[24]; /**<  */
d1871 1
a1871 1
    unsigned int sequence; /**<  */
d1881 5
a1885 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              name; /**<  */
d1892 7
a1898 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    uint8_t  pad2[16]; /**<  */
d1905 1
a1905 1
    unsigned int sequence; /**<  */
d1915 6
a1920 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              pname; /**<  */
d1927 8
a1934 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float32_t datum; /**<  */
    uint8_t           pad2[12]; /**<  */
d1941 1
a1941 1
    unsigned int sequence; /**<  */
d1951 6
a1956 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              pname; /**<  */
d1963 8
a1970 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    int32_t  datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d1977 1
a1977 1
    unsigned int sequence; /**<  */
d1987 6
a1992 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              coord; /**<  */
    uint32_t              pname; /**<  */
d1999 8
a2006 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float64_t datum; /**<  */
    uint8_t           pad2[8]; /**<  */
d2013 1
a2013 1
    unsigned int sequence; /**<  */
d2023 6
a2028 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              coord; /**<  */
    uint32_t              pname; /**<  */
d2035 8
a2042 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float32_t datum; /**<  */
    uint8_t           pad2[12]; /**<  */
d2049 1
a2049 1
    unsigned int sequence; /**<  */
d2059 6
a2064 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              coord; /**<  */
    uint32_t              pname; /**<  */
d2071 8
a2078 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    int32_t  datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d2085 1
a2085 1
    unsigned int sequence; /**<  */
d2095 9
a2103 9
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    int32_t               level; /**<  */
    uint32_t              format; /**<  */
    uint32_t              type; /**<  */
    uint8_t               swap_bytes; /**<  */
d2110 9
a2118 9
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[8]; /**<  */
    int32_t  width; /**<  */
    int32_t  height; /**<  */
    int32_t  depth; /**<  */
    uint8_t  pad2[4]; /**<  */
d2125 1
a2125 1
    unsigned int sequence; /**<  */
d2135 6
a2140 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              pname; /**<  */
d2147 8
a2154 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float32_t datum; /**<  */
    uint8_t           pad2[12]; /**<  */
d2161 1
a2161 1
    unsigned int sequence; /**<  */
d2171 6
a2176 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              pname; /**<  */
d2183 8
a2190 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    int32_t  datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d2197 1
a2197 1
    unsigned int sequence; /**<  */
d2207 7
a2213 7
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    int32_t               level; /**<  */
    uint32_t              pname; /**<  */
d2220 8
a2227 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float32_t datum; /**<  */
    uint8_t           pad2[12]; /**<  */
d2234 1
a2234 1
    unsigned int sequence; /**<  */
d2244 7
a2250 7
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    int32_t               level; /**<  */
    uint32_t              pname; /**<  */
d2257 8
a2264 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    int32_t  datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d2268 32
d2303 1
a2303 1
    unsigned int sequence; /**<  */
d2313 5
a2317 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              list; /**<  */
d2324 5
a2328 5
    uint8_t          response_type; /**<  */
    uint8_t          pad0; /**<  */
    uint16_t         sequence; /**<  */
    uint32_t         length; /**<  */
    xcb_glx_bool32_t ret_val; /**<  */
d2338 4
a2341 4
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
d2348 1
a2348 1
    unsigned int sequence; /**<  */
d2358 5
a2362 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    int32_t               n; /**<  */
d2369 6
a2374 6
    uint8_t          response_type; /**<  */
    uint8_t          pad0; /**<  */
    uint16_t         sequence; /**<  */
    uint32_t         length; /**<  */
    xcb_glx_bool32_t ret_val; /**<  */
    uint8_t          pad1[20]; /**<  */
d2384 5
a2388 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    int32_t               n; /**<  */
d2395 1
a2395 1
    unsigned int sequence; /**<  */
d2405 5
a2409 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    int32_t               n; /**<  */
d2416 5
a2420 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[24]; /**<  */
d2427 1
a2427 1
    unsigned int sequence; /**<  */
d2437 5
a2441 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              texture; /**<  */
d2448 5
a2452 5
    uint8_t          response_type; /**<  */
    uint8_t          pad0; /**<  */
    uint16_t         sequence; /**<  */
    uint32_t         length; /**<  */
    xcb_glx_bool32_t ret_val; /**<  */
d2459 1
a2459 1
    unsigned int sequence; /**<  */
d2469 8
a2476 8
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              format; /**<  */
    uint32_t              type; /**<  */
    uint8_t               swap_bytes; /**<  */
d2483 7
a2489 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[8]; /**<  */
    int32_t  width; /**<  */
    uint8_t  pad2[12]; /**<  */
d2496 1
a2496 1
    unsigned int sequence; /**<  */
d2506 6
a2511 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              pname; /**<  */
d2518 8
a2525 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float32_t datum; /**<  */
    uint8_t           pad2[12]; /**<  */
d2532 1
a2532 1
    unsigned int sequence; /**<  */
d2542 6
a2547 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              pname; /**<  */
d2554 8
a2561 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    int32_t  datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d2568 1
a2568 1
    unsigned int sequence; /**<  */
d2578 8
a2585 8
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              format; /**<  */
    uint32_t              type; /**<  */
    uint8_t               swap_bytes; /**<  */
d2592 8
a2599 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[8]; /**<  */
    int32_t  width; /**<  */
    int32_t  height; /**<  */
    uint8_t  pad2[8]; /**<  */
d2606 1
a2606 1
    unsigned int sequence; /**<  */
d2616 6
a2621 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              pname; /**<  */
d2628 8
a2635 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float32_t datum; /**<  */
    uint8_t           pad2[12]; /**<  */
d2642 1
a2642 1
    unsigned int sequence; /**<  */
d2652 6
a2657 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              pname; /**<  */
d2664 8
a2671 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    int32_t  datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d2678 1
a2678 1
    unsigned int sequence; /**<  */
d2688 8
a2695 8
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              format; /**<  */
    uint32_t              type; /**<  */
    uint8_t               swap_bytes; /**<  */
d2702 8
a2709 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[8]; /**<  */
    int32_t  row_w; /**<  */
    int32_t  col_h; /**<  */
    uint8_t  pad2[8]; /**<  */
d2716 1
a2716 1
    unsigned int sequence; /**<  */
d2726 9
a2734 9
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              format; /**<  */
    uint32_t              type; /**<  */
    uint8_t               swap_bytes; /**<  */
    uint8_t               reset; /**<  */
d2741 7
a2747 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[8]; /**<  */
    int32_t  width; /**<  */
    uint8_t  pad2[12]; /**<  */
d2754 1
a2754 1
    unsigned int sequence; /**<  */
d2764 6
a2769 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              pname; /**<  */
d2776 8
a2783 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float32_t datum; /**<  */
    uint8_t           pad2[12]; /**<  */
d2790 1
a2790 1
    unsigned int sequence; /**<  */
d2800 6
a2805 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              pname; /**<  */
d2812 8
a2819 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    int32_t  datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d2826 1
a2826 1
    unsigned int sequence; /**<  */
d2836 9
a2844 9
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              format; /**<  */
    uint32_t              type; /**<  */
    uint8_t               swap_bytes; /**<  */
    uint8_t               reset; /**<  */
d2851 5
a2855 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[24]; /**<  */
d2862 1
a2862 1
    unsigned int sequence; /**<  */
d2872 6
a2877 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              pname; /**<  */
d2884 8
a2891 8
    uint8_t           response_type; /**<  */
    uint8_t           pad0; /**<  */
    uint16_t          sequence; /**<  */
    uint32_t          length; /**<  */
    uint8_t           pad1[4]; /**<  */
    uint32_t          n; /**<  */
    xcb_glx_float32_t datum; /**<  */
    uint8_t           pad2[12]; /**<  */
d2898 1
a2898 1
    unsigned int sequence; /**<  */
d2908 6
a2913 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              pname; /**<  */
d2920 8
a2927 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    int32_t  datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d2934 1
a2934 1
    unsigned int sequence; /**<  */
d2944 6
a2949 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    int32_t               level; /**<  */
d2956 7
a2962 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[8]; /**<  */
    int32_t  size; /**<  */
    uint8_t  pad2[12]; /**<  */
d2972 5
a2976 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    int32_t               n; /**<  */
d2983 1
a2983 1
    unsigned int sequence; /**<  */
d2993 5
a2997 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    int32_t               n; /**<  */
d3004 5
a3008 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[24]; /**<  */
d3015 1
a3015 1
    unsigned int sequence; /**<  */
d3025 5
a3029 5
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              id; /**<  */
d3036 5
a3040 5
    uint8_t          response_type; /**<  */
    uint8_t          pad0; /**<  */
    uint16_t         sequence; /**<  */
    uint32_t         length; /**<  */
    xcb_glx_bool32_t ret_val; /**<  */
d3047 1
a3047 1
    unsigned int sequence; /**<  */
d3057 6
a3062 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              target; /**<  */
    uint32_t              pname; /**<  */
d3069 8
a3076 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    int32_t  datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d3083 1
a3083 1
    unsigned int sequence; /**<  */
d3093 6
a3098 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              id; /**<  */
    uint32_t              pname; /**<  */
d3105 8
a3112 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    int32_t  datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d3119 1
a3119 1
    unsigned int sequence; /**<  */
d3129 6
a3134 6
    uint8_t               major_opcode; /**<  */
    uint8_t               minor_opcode; /**<  */
    uint16_t              length; /**<  */
    xcb_glx_context_tag_t context_tag; /**<  */
    uint32_t              id; /**<  */
    uint32_t              pname; /**<  */
d3141 8
a3148 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[4]; /**<  */
    uint32_t n; /**<  */
    uint32_t datum; /**<  */
    uint8_t  pad2[12]; /**<  */
d3160 1
a3160 1
xcb_glx_pixmap_next (xcb_glx_pixmap_iterator_t *i  /**< */);
d3172 1
a3172 1
xcb_glx_pixmap_end (xcb_glx_pixmap_iterator_t i  /**< */);
d3183 1
a3183 1
xcb_glx_context_next (xcb_glx_context_iterator_t *i  /**< */);
d3195 1
a3195 1
xcb_glx_context_end (xcb_glx_context_iterator_t i  /**< */);
d3206 1
a3206 1
xcb_glx_pbuffer_next (xcb_glx_pbuffer_iterator_t *i  /**< */);
d3218 1
a3218 1
xcb_glx_pbuffer_end (xcb_glx_pbuffer_iterator_t i  /**< */);
d3229 1
a3229 1
xcb_glx_window_next (xcb_glx_window_iterator_t *i  /**< */);
d3241 1
a3241 1
xcb_glx_window_end (xcb_glx_window_iterator_t i  /**< */);
d3252 1
a3252 1
xcb_glx_fbconfig_next (xcb_glx_fbconfig_iterator_t *i  /**< */);
d3264 1
a3264 1
xcb_glx_fbconfig_end (xcb_glx_fbconfig_iterator_t i  /**< */);
d3275 1
a3275 1
xcb_glx_drawable_next (xcb_glx_drawable_iterator_t *i  /**< */);
d3287 1
a3287 1
xcb_glx_drawable_end (xcb_glx_drawable_iterator_t i  /**< */);
d3298 1
a3298 1
xcb_glx_float32_next (xcb_glx_float32_iterator_t *i  /**< */);
d3310 1
a3310 1
xcb_glx_float32_end (xcb_glx_float32_iterator_t i  /**< */);
d3321 1
a3321 1
xcb_glx_float64_next (xcb_glx_float64_iterator_t *i  /**< */);
d3333 1
a3333 1
xcb_glx_float64_end (xcb_glx_float64_iterator_t i  /**< */);
d3344 1
a3344 1
xcb_glx_bool32_next (xcb_glx_bool32_iterator_t *i  /**< */);
d3356 1
a3356 1
xcb_glx_bool32_end (xcb_glx_bool32_iterator_t i  /**< */);
d3367 1
a3367 1
xcb_glx_context_tag_next (xcb_glx_context_tag_iterator_t *i  /**< */);
d3379 1
a3379 1
xcb_glx_context_tag_end (xcb_glx_context_tag_iterator_t i  /**< */);
d3382 2
a3383 2
xcb_glx_render_sizeof (const void  *_buffer  /**< */,
                       uint32_t     data_len  /**< */);
d3397 4
a3400 4
xcb_glx_render_checked (xcb_connection_t      *c  /**< */,
                        xcb_glx_context_tag_t  context_tag  /**< */,
                        uint32_t               data_len  /**< */,
                        const uint8_t         *data  /**< */);
d3411 7
a3417 4
xcb_glx_render (xcb_connection_t      *c  /**< */,
                xcb_glx_context_tag_t  context_tag  /**< */,
                uint32_t               data_len  /**< */,
                const uint8_t         *data  /**< */);
d3420 7
a3426 1
xcb_glx_render_large_sizeof (const void  *_buffer  /**< */);
d3440 6
a3445 6
xcb_glx_render_large_checked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint16_t               request_num  /**< */,
                              uint16_t               request_total  /**< */,
                              uint32_t               data_len  /**< */,
                              const uint8_t         *data  /**< */);
d3456 15
a3470 6
xcb_glx_render_large (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      uint16_t               request_num  /**< */,
                      uint16_t               request_total  /**< */,
                      uint32_t               data_len  /**< */,
                      const uint8_t         *data  /**< */);
d3484 6
a3489 6
xcb_glx_create_context_checked (xcb_connection_t  *c  /**< */,
                                xcb_glx_context_t  context  /**< */,
                                xcb_visualid_t     visual  /**< */,
                                uint32_t           screen  /**< */,
                                xcb_glx_context_t  share_list  /**< */,
                                uint8_t            is_direct  /**< */);
d3500 6
a3505 6
xcb_glx_create_context (xcb_connection_t  *c  /**< */,
                        xcb_glx_context_t  context  /**< */,
                        xcb_visualid_t     visual  /**< */,
                        uint32_t           screen  /**< */,
                        xcb_glx_context_t  share_list  /**< */,
                        uint8_t            is_direct  /**< */);
d3519 2
a3520 2
xcb_glx_destroy_context_checked (xcb_connection_t  *c  /**< */,
                                 xcb_glx_context_t  context  /**< */);
d3531 2
a3532 2
xcb_glx_destroy_context (xcb_connection_t  *c  /**< */,
                         xcb_glx_context_t  context  /**< */);
d3543 4
a3546 4
xcb_glx_make_current (xcb_connection_t      *c  /**< */,
                      xcb_glx_drawable_t     drawable  /**< */,
                      xcb_glx_context_t      context  /**< */,
                      xcb_glx_context_tag_t  old_context_tag  /**< */);
d3560 4
a3563 4
xcb_glx_make_current_unchecked (xcb_connection_t      *c  /**< */,
                                xcb_glx_drawable_t     drawable  /**< */,
                                xcb_glx_context_t      context  /**< */,
                                xcb_glx_context_tag_t  old_context_tag  /**< */);
d3580 1
a3580 1
xcb_glx_make_current_reply (xcb_connection_t               *c  /**< */,
d3582 1
a3582 1
                            xcb_generic_error_t           **e  /**< */);
d3593 2
a3594 2
xcb_glx_is_direct (xcb_connection_t  *c  /**< */,
                   xcb_glx_context_t  context  /**< */);
d3608 2
a3609 2
xcb_glx_is_direct_unchecked (xcb_connection_t  *c  /**< */,
                             xcb_glx_context_t  context  /**< */);
d3626 1
a3626 1
xcb_glx_is_direct_reply (xcb_connection_t            *c  /**< */,
d3628 1
a3628 1
                         xcb_generic_error_t        **e  /**< */);
d3639 3
a3641 3
xcb_glx_query_version (xcb_connection_t *c  /**< */,
                       uint32_t          major_version  /**< */,
                       uint32_t          minor_version  /**< */);
d3655 3
a3657 3
xcb_glx_query_version_unchecked (xcb_connection_t *c  /**< */,
                                 uint32_t          major_version  /**< */,
                                 uint32_t          minor_version  /**< */);
d3674 1
a3674 1
xcb_glx_query_version_reply (xcb_connection_t                *c  /**< */,
d3676 1
a3676 1
                             xcb_generic_error_t            **e  /**< */);
d3690 2
a3691 2
xcb_glx_wait_gl_checked (xcb_connection_t      *c  /**< */,
                         xcb_glx_context_tag_t  context_tag  /**< */);
d3702 2
a3703 2
xcb_glx_wait_gl (xcb_connection_t      *c  /**< */,
                 xcb_glx_context_tag_t  context_tag  /**< */);
d3717 2
a3718 2
xcb_glx_wait_x_checked (xcb_connection_t      *c  /**< */,
                        xcb_glx_context_tag_t  context_tag  /**< */);
d3729 2
a3730 2
xcb_glx_wait_x (xcb_connection_t      *c  /**< */,
                xcb_glx_context_tag_t  context_tag  /**< */);
d3744 5
a3748 5
xcb_glx_copy_context_checked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_t      src  /**< */,
                              xcb_glx_context_t      dest  /**< */,
                              uint32_t               mask  /**< */,
                              xcb_glx_context_tag_t  src_context_tag  /**< */);
d3759 5
a3763 5
xcb_glx_copy_context (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_t      src  /**< */,
                      xcb_glx_context_t      dest  /**< */,
                      uint32_t               mask  /**< */,
                      xcb_glx_context_tag_t  src_context_tag  /**< */);
d3777 3
a3779 3
xcb_glx_swap_buffers_checked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              xcb_glx_drawable_t     drawable  /**< */);
d3790 3
a3792 3
xcb_glx_swap_buffers (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      xcb_glx_drawable_t     drawable  /**< */);
d3806 6
a3811 6
xcb_glx_use_x_font_checked (xcb_connection_t      *c  /**< */,
                            xcb_glx_context_tag_t  context_tag  /**< */,
                            xcb_font_t             font  /**< */,
                            uint32_t               first  /**< */,
                            uint32_t               count  /**< */,
                            uint32_t               list_base  /**< */);
d3822 6
a3827 6
xcb_glx_use_x_font (xcb_connection_t      *c  /**< */,
                    xcb_glx_context_tag_t  context_tag  /**< */,
                    xcb_font_t             font  /**< */,
                    uint32_t               first  /**< */,
                    uint32_t               count  /**< */,
                    uint32_t               list_base  /**< */);
d3841 5
a3845 5
xcb_glx_create_glx_pixmap_checked (xcb_connection_t *c  /**< */,
                                   uint32_t          screen  /**< */,
                                   xcb_visualid_t    visual  /**< */,
                                   xcb_pixmap_t      pixmap  /**< */,
                                   xcb_glx_pixmap_t  glx_pixmap  /**< */);
d3856 5
a3860 5
xcb_glx_create_glx_pixmap (xcb_connection_t *c  /**< */,
                           uint32_t          screen  /**< */,
                           xcb_visualid_t    visual  /**< */,
                           xcb_pixmap_t      pixmap  /**< */,
                           xcb_glx_pixmap_t  glx_pixmap  /**< */);
d3863 1
a3863 1
xcb_glx_get_visual_configs_sizeof (const void  *_buffer  /**< */);
d3874 2
a3875 2
xcb_glx_get_visual_configs (xcb_connection_t *c  /**< */,
                            uint32_t          screen  /**< */);
d3889 2
a3890 2
xcb_glx_get_visual_configs_unchecked (xcb_connection_t *c  /**< */,
                                      uint32_t          screen  /**< */);
d3893 1
a3893 1
xcb_glx_get_visual_configs_property_list (const xcb_glx_get_visual_configs_reply_t *R  /**< */);
d3896 1
a3896 1
xcb_glx_get_visual_configs_property_list_length (const xcb_glx_get_visual_configs_reply_t *R  /**< */);
d3899 1
a3899 1
xcb_glx_get_visual_configs_property_list_end (const xcb_glx_get_visual_configs_reply_t *R  /**< */);
d3916 1
a3916 1
xcb_glx_get_visual_configs_reply (xcb_connection_t                     *c  /**< */,
d3918 1
a3918 1
                                  xcb_generic_error_t                 **e  /**< */);
d3932 2
a3933 2
xcb_glx_destroy_glx_pixmap_checked (xcb_connection_t *c  /**< */,
                                    xcb_glx_pixmap_t  glx_pixmap  /**< */);
d3944 2
a3945 2
xcb_glx_destroy_glx_pixmap (xcb_connection_t *c  /**< */,
                            xcb_glx_pixmap_t  glx_pixmap  /**< */);
d3948 2
a3949 2
xcb_glx_vendor_private_sizeof (const void  *_buffer  /**< */,
                               uint32_t     data_len  /**< */);
d3963 5
a3967 5
xcb_glx_vendor_private_checked (xcb_connection_t      *c  /**< */,
                                uint32_t               vendor_code  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                uint32_t               data_len  /**< */,
                                const uint8_t         *data  /**< */);
d3978 14
a3991 5
xcb_glx_vendor_private (xcb_connection_t      *c  /**< */,
                        uint32_t               vendor_code  /**< */,
                        xcb_glx_context_tag_t  context_tag  /**< */,
                        uint32_t               data_len  /**< */,
                        const uint8_t         *data  /**< */);
d3994 2
a3995 2
xcb_glx_vendor_private_with_reply_sizeof (const void  *_buffer  /**< */,
                                          uint32_t     data_len  /**< */);
d4006 5
a4010 5
xcb_glx_vendor_private_with_reply (xcb_connection_t      *c  /**< */,
                                   uint32_t               vendor_code  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               data_len  /**< */,
                                   const uint8_t         *data  /**< */);
d4024 5
a4028 5
xcb_glx_vendor_private_with_reply_unchecked (xcb_connection_t      *c  /**< */,
                                             uint32_t               vendor_code  /**< */,
                                             xcb_glx_context_tag_t  context_tag  /**< */,
                                             uint32_t               data_len  /**< */,
                                             const uint8_t         *data  /**< */);
d4031 1
a4031 1
xcb_glx_vendor_private_with_reply_data_2 (const xcb_glx_vendor_private_with_reply_reply_t *R  /**< */);
d4034 1
a4034 1
xcb_glx_vendor_private_with_reply_data_2_length (const xcb_glx_vendor_private_with_reply_reply_t *R  /**< */);
d4037 1
a4037 1
xcb_glx_vendor_private_with_reply_data_2_end (const xcb_glx_vendor_private_with_reply_reply_t *R  /**< */);
d4054 1
a4054 1
xcb_glx_vendor_private_with_reply_reply (xcb_connection_t                            *c  /**< */,
d4056 1
a4056 1
                                         xcb_generic_error_t                        **e  /**< */);
d4067 2
a4068 2
xcb_glx_query_extensions_string (xcb_connection_t *c  /**< */,
                                 uint32_t          screen  /**< */);
d4082 2
a4083 2
xcb_glx_query_extensions_string_unchecked (xcb_connection_t *c  /**< */,
                                           uint32_t          screen  /**< */);
d4100 1
a4100 1
xcb_glx_query_extensions_string_reply (xcb_connection_t                          *c  /**< */,
d4102 1
a4102 1
                                       xcb_generic_error_t                      **e  /**< */);
d4105 1
a4105 1
xcb_glx_query_server_string_sizeof (const void  *_buffer  /**< */);
d4116 3
a4118 3
xcb_glx_query_server_string (xcb_connection_t *c  /**< */,
                             uint32_t          screen  /**< */,
                             uint32_t          name  /**< */);
d4132 3
a4134 3
xcb_glx_query_server_string_unchecked (xcb_connection_t *c  /**< */,
                                       uint32_t          screen  /**< */,
                                       uint32_t          name  /**< */);
d4137 1
a4137 1
xcb_glx_query_server_string_string (const xcb_glx_query_server_string_reply_t *R  /**< */);
d4140 1
a4140 1
xcb_glx_query_server_string_string_length (const xcb_glx_query_server_string_reply_t *R  /**< */);
d4143 1
a4143 1
xcb_glx_query_server_string_string_end (const xcb_glx_query_server_string_reply_t *R  /**< */);
d4160 1
a4160 1
xcb_glx_query_server_string_reply (xcb_connection_t                      *c  /**< */,
d4162 1
a4162 1
                                   xcb_generic_error_t                  **e  /**< */);
d4165 1
a4165 1
xcb_glx_client_info_sizeof (const void  *_buffer  /**< */);
d4179 5
a4183 5
xcb_glx_client_info_checked (xcb_connection_t *c  /**< */,
                             uint32_t          major_version  /**< */,
                             uint32_t          minor_version  /**< */,
                             uint32_t          str_len  /**< */,
                             const char       *string  /**< */);
d4194 8
a4201 5
xcb_glx_client_info (xcb_connection_t *c  /**< */,
                     uint32_t          major_version  /**< */,
                     uint32_t          minor_version  /**< */,
                     uint32_t          str_len  /**< */,
                     const char       *string  /**< */);
d4204 7
a4210 1
xcb_glx_get_fb_configs_sizeof (const void  *_buffer  /**< */);
d4221 2
a4222 2
xcb_glx_get_fb_configs (xcb_connection_t *c  /**< */,
                        uint32_t          screen  /**< */);
d4236 2
a4237 2
xcb_glx_get_fb_configs_unchecked (xcb_connection_t *c  /**< */,
                                  uint32_t          screen  /**< */);
d4240 1
a4240 1
xcb_glx_get_fb_configs_property_list (const xcb_glx_get_fb_configs_reply_t *R  /**< */);
d4243 1
a4243 1
xcb_glx_get_fb_configs_property_list_length (const xcb_glx_get_fb_configs_reply_t *R  /**< */);
d4246 1
a4246 1
xcb_glx_get_fb_configs_property_list_end (const xcb_glx_get_fb_configs_reply_t *R  /**< */);
d4263 1
a4263 1
xcb_glx_get_fb_configs_reply (xcb_connection_t                 *c  /**< */,
d4265 1
a4265 1
                              xcb_generic_error_t             **e  /**< */);
d4268 1
a4268 1
xcb_glx_create_pixmap_sizeof (const void  *_buffer  /**< */);
d4282 7
a4288 7
xcb_glx_create_pixmap_checked (xcb_connection_t   *c  /**< */,
                               uint32_t            screen  /**< */,
                               xcb_glx_fbconfig_t  fbconfig  /**< */,
                               xcb_pixmap_t        pixmap  /**< */,
                               xcb_glx_pixmap_t    glx_pixmap  /**< */,
                               uint32_t            num_attribs  /**< */,
                               const uint32_t     *attribs  /**< */);
d4299 16
a4314 7
xcb_glx_create_pixmap (xcb_connection_t   *c  /**< */,
                       uint32_t            screen  /**< */,
                       xcb_glx_fbconfig_t  fbconfig  /**< */,
                       xcb_pixmap_t        pixmap  /**< */,
                       xcb_glx_pixmap_t    glx_pixmap  /**< */,
                       uint32_t            num_attribs  /**< */,
                       const uint32_t     *attribs  /**< */);
d4328 2
a4329 2
xcb_glx_destroy_pixmap_checked (xcb_connection_t *c  /**< */,
                                xcb_glx_pixmap_t  glx_pixmap  /**< */);
d4340 2
a4341 2
xcb_glx_destroy_pixmap (xcb_connection_t *c  /**< */,
                        xcb_glx_pixmap_t  glx_pixmap  /**< */);
d4355 7
a4361 7
xcb_glx_create_new_context_checked (xcb_connection_t   *c  /**< */,
                                    xcb_glx_context_t   context  /**< */,
                                    xcb_glx_fbconfig_t  fbconfig  /**< */,
                                    uint32_t            screen  /**< */,
                                    uint32_t            render_type  /**< */,
                                    xcb_glx_context_t   share_list  /**< */,
                                    uint8_t             is_direct  /**< */);
d4372 7
a4378 7
xcb_glx_create_new_context (xcb_connection_t   *c  /**< */,
                            xcb_glx_context_t   context  /**< */,
                            xcb_glx_fbconfig_t  fbconfig  /**< */,
                            uint32_t            screen  /**< */,
                            uint32_t            render_type  /**< */,
                            xcb_glx_context_t   share_list  /**< */,
                            uint8_t             is_direct  /**< */);
d4381 1
a4381 1
xcb_glx_query_context_sizeof (const void  *_buffer  /**< */);
d4392 2
a4393 2
xcb_glx_query_context (xcb_connection_t  *c  /**< */,
                       xcb_glx_context_t  context  /**< */);
d4407 2
a4408 2
xcb_glx_query_context_unchecked (xcb_connection_t  *c  /**< */,
                                 xcb_glx_context_t  context  /**< */);
d4411 1
a4411 1
xcb_glx_query_context_attribs (const xcb_glx_query_context_reply_t *R  /**< */);
d4414 1
a4414 1
xcb_glx_query_context_attribs_length (const xcb_glx_query_context_reply_t *R  /**< */);
d4417 1
a4417 1
xcb_glx_query_context_attribs_end (const xcb_glx_query_context_reply_t *R  /**< */);
d4434 1
a4434 1
xcb_glx_query_context_reply (xcb_connection_t                *c  /**< */,
d4436 1
a4436 1
                             xcb_generic_error_t            **e  /**< */);
d4447 5
a4451 5
xcb_glx_make_context_current (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  old_context_tag  /**< */,
                              xcb_glx_drawable_t     drawable  /**< */,
                              xcb_glx_drawable_t     read_drawable  /**< */,
                              xcb_glx_context_t      context  /**< */);
d4465 5
a4469 5
xcb_glx_make_context_current_unchecked (xcb_connection_t      *c  /**< */,
                                        xcb_glx_context_tag_t  old_context_tag  /**< */,
                                        xcb_glx_drawable_t     drawable  /**< */,
                                        xcb_glx_drawable_t     read_drawable  /**< */,
                                        xcb_glx_context_t      context  /**< */);
d4486 1
a4486 1
xcb_glx_make_context_current_reply (xcb_connection_t                       *c  /**< */,
d4488 1
a4488 1
                                    xcb_generic_error_t                   **e  /**< */);
d4491 1
a4491 1
xcb_glx_create_pbuffer_sizeof (const void  *_buffer  /**< */);
d4505 6
a4510 6
xcb_glx_create_pbuffer_checked (xcb_connection_t   *c  /**< */,
                                uint32_t            screen  /**< */,
                                xcb_glx_fbconfig_t  fbconfig  /**< */,
                                xcb_glx_pbuffer_t   pbuffer  /**< */,
                                uint32_t            num_attribs  /**< */,
                                const uint32_t     *attribs  /**< */);
d4521 15
a4535 6
xcb_glx_create_pbuffer (xcb_connection_t   *c  /**< */,
                        uint32_t            screen  /**< */,
                        xcb_glx_fbconfig_t  fbconfig  /**< */,
                        xcb_glx_pbuffer_t   pbuffer  /**< */,
                        uint32_t            num_attribs  /**< */,
                        const uint32_t     *attribs  /**< */);
d4549 2
a4550 2
xcb_glx_destroy_pbuffer_checked (xcb_connection_t  *c  /**< */,
                                 xcb_glx_pbuffer_t  pbuffer  /**< */);
d4561 2
a4562 2
xcb_glx_destroy_pbuffer (xcb_connection_t  *c  /**< */,
                         xcb_glx_pbuffer_t  pbuffer  /**< */);
d4565 1
a4565 1
xcb_glx_get_drawable_attributes_sizeof (const void  *_buffer  /**< */);
d4576 2
a4577 2
xcb_glx_get_drawable_attributes (xcb_connection_t   *c  /**< */,
                                 xcb_glx_drawable_t  drawable  /**< */);
d4591 2
a4592 2
xcb_glx_get_drawable_attributes_unchecked (xcb_connection_t   *c  /**< */,
                                           xcb_glx_drawable_t  drawable  /**< */);
d4595 1
a4595 1
xcb_glx_get_drawable_attributes_attribs (const xcb_glx_get_drawable_attributes_reply_t *R  /**< */);
d4598 1
a4598 1
xcb_glx_get_drawable_attributes_attribs_length (const xcb_glx_get_drawable_attributes_reply_t *R  /**< */);
d4601 1
a4601 1
xcb_glx_get_drawable_attributes_attribs_end (const xcb_glx_get_drawable_attributes_reply_t *R  /**< */);
d4618 1
a4618 1
xcb_glx_get_drawable_attributes_reply (xcb_connection_t                          *c  /**< */,
d4620 1
a4620 1
                                       xcb_generic_error_t                      **e  /**< */);
d4623 1
a4623 1
xcb_glx_change_drawable_attributes_sizeof (const void  *_buffer  /**< */);
d4637 4
a4640 4
xcb_glx_change_drawable_attributes_checked (xcb_connection_t   *c  /**< */,
                                            xcb_glx_drawable_t  drawable  /**< */,
                                            uint32_t            num_attribs  /**< */,
                                            const uint32_t     *attribs  /**< */);
d4651 13
a4663 4
xcb_glx_change_drawable_attributes (xcb_connection_t   *c  /**< */,
                                    xcb_glx_drawable_t  drawable  /**< */,
                                    uint32_t            num_attribs  /**< */,
                                    const uint32_t     *attribs  /**< */);
d4666 1
a4666 1
xcb_glx_create_window_sizeof (const void  *_buffer  /**< */);
d4680 7
a4686 7
xcb_glx_create_window_checked (xcb_connection_t   *c  /**< */,
                               uint32_t            screen  /**< */,
                               xcb_glx_fbconfig_t  fbconfig  /**< */,
                               xcb_window_t        window  /**< */,
                               xcb_glx_window_t    glx_window  /**< */,
                               uint32_t            num_attribs  /**< */,
                               const uint32_t     *attribs  /**< */);
d4697 16
a4712 7
xcb_glx_create_window (xcb_connection_t   *c  /**< */,
                       uint32_t            screen  /**< */,
                       xcb_glx_fbconfig_t  fbconfig  /**< */,
                       xcb_window_t        window  /**< */,
                       xcb_glx_window_t    glx_window  /**< */,
                       uint32_t            num_attribs  /**< */,
                       const uint32_t     *attribs  /**< */);
d4726 2
a4727 2
xcb_glx_delete_window_checked (xcb_connection_t *c  /**< */,
                               xcb_glx_window_t  glxwindow  /**< */);
d4738 2
a4739 2
xcb_glx_delete_window (xcb_connection_t *c  /**< */,
                       xcb_glx_window_t  glxwindow  /**< */);
d4742 1
a4742 1
xcb_glx_set_client_info_arb_sizeof (const void  *_buffer  /**< */);
d4756 9
a4764 9
xcb_glx_set_client_info_arb_checked (xcb_connection_t *c  /**< */,
                                     uint32_t          major_version  /**< */,
                                     uint32_t          minor_version  /**< */,
                                     uint32_t          num_versions  /**< */,
                                     uint32_t          gl_str_len  /**< */,
                                     uint32_t          glx_str_len  /**< */,
                                     const uint32_t   *gl_versions  /**< */,
                                     const char       *gl_extension_string  /**< */,
                                     const char       *glx_extension_string  /**< */);
d4775 21
a4795 9
xcb_glx_set_client_info_arb (xcb_connection_t *c  /**< */,
                             uint32_t          major_version  /**< */,
                             uint32_t          minor_version  /**< */,
                             uint32_t          num_versions  /**< */,
                             uint32_t          gl_str_len  /**< */,
                             uint32_t          glx_str_len  /**< */,
                             const uint32_t   *gl_versions  /**< */,
                             const char       *gl_extension_string  /**< */,
                             const char       *glx_extension_string  /**< */);
d4798 16
a4813 1
xcb_glx_create_context_attribs_arb_sizeof (const void  *_buffer  /**< */);
d4827 8
a4834 8
xcb_glx_create_context_attribs_arb_checked (xcb_connection_t   *c  /**< */,
                                            xcb_glx_context_t   context  /**< */,
                                            xcb_glx_fbconfig_t  fbconfig  /**< */,
                                            uint32_t            screen  /**< */,
                                            xcb_glx_context_t   share_list  /**< */,
                                            uint8_t             is_direct  /**< */,
                                            uint32_t            num_attribs  /**< */,
                                            const uint32_t     *attribs  /**< */);
d4845 17
a4861 8
xcb_glx_create_context_attribs_arb (xcb_connection_t   *c  /**< */,
                                    xcb_glx_context_t   context  /**< */,
                                    xcb_glx_fbconfig_t  fbconfig  /**< */,
                                    uint32_t            screen  /**< */,
                                    xcb_glx_context_t   share_list  /**< */,
                                    uint8_t             is_direct  /**< */,
                                    uint32_t            num_attribs  /**< */,
                                    const uint32_t     *attribs  /**< */);
d4864 1
a4864 1
xcb_glx_set_client_info_2arb_sizeof (const void  *_buffer  /**< */);
d4878 9
a4886 9
xcb_glx_set_client_info_2arb_checked (xcb_connection_t *c  /**< */,
                                      uint32_t          major_version  /**< */,
                                      uint32_t          minor_version  /**< */,
                                      uint32_t          num_versions  /**< */,
                                      uint32_t          gl_str_len  /**< */,
                                      uint32_t          glx_str_len  /**< */,
                                      const uint32_t   *gl_versions  /**< */,
                                      const char       *gl_extension_string  /**< */,
                                      const char       *glx_extension_string  /**< */);
d4897 36
a4932 9
xcb_glx_set_client_info_2arb (xcb_connection_t *c  /**< */,
                              uint32_t          major_version  /**< */,
                              uint32_t          minor_version  /**< */,
                              uint32_t          num_versions  /**< */,
                              uint32_t          gl_str_len  /**< */,
                              uint32_t          glx_str_len  /**< */,
                              const uint32_t   *gl_versions  /**< */,
                              const char       *gl_extension_string  /**< */,
                              const char       *glx_extension_string  /**< */);
d4946 4
a4949 4
xcb_glx_new_list_checked (xcb_connection_t      *c  /**< */,
                          xcb_glx_context_tag_t  context_tag  /**< */,
                          uint32_t               list  /**< */,
                          uint32_t               mode  /**< */);
d4960 4
a4963 4
xcb_glx_new_list (xcb_connection_t      *c  /**< */,
                  xcb_glx_context_tag_t  context_tag  /**< */,
                  uint32_t               list  /**< */,
                  uint32_t               mode  /**< */);
d4977 2
a4978 2
xcb_glx_end_list_checked (xcb_connection_t      *c  /**< */,
                          xcb_glx_context_tag_t  context_tag  /**< */);
d4989 2
a4990 2
xcb_glx_end_list (xcb_connection_t      *c  /**< */,
                  xcb_glx_context_tag_t  context_tag  /**< */);
d5004 4
a5007 4
xcb_glx_delete_lists_checked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               list  /**< */,
                              int32_t                range  /**< */);
d5018 4
a5021 4
xcb_glx_delete_lists (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      uint32_t               list  /**< */,
                      int32_t                range  /**< */);
d5032 3
a5034 3
xcb_glx_gen_lists (xcb_connection_t      *c  /**< */,
                   xcb_glx_context_tag_t  context_tag  /**< */,
                   int32_t                range  /**< */);
d5048 3
a5050 3
xcb_glx_gen_lists_unchecked (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */,
                             int32_t                range  /**< */);
d5067 1
a5067 1
xcb_glx_gen_lists_reply (xcb_connection_t            *c  /**< */,
d5069 1
a5069 1
                         xcb_generic_error_t        **e  /**< */);
d5083 4
a5086 4
xcb_glx_feedback_buffer_checked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 int32_t                size  /**< */,
                                 int32_t                type  /**< */);
d5097 4
a5100 4
xcb_glx_feedback_buffer (xcb_connection_t      *c  /**< */,
                         xcb_glx_context_tag_t  context_tag  /**< */,
                         int32_t                size  /**< */,
                         int32_t                type  /**< */);
d5114 3
a5116 3
xcb_glx_select_buffer_checked (xcb_connection_t      *c  /**< */,
                               xcb_glx_context_tag_t  context_tag  /**< */,
                               int32_t                size  /**< */);
d5127 3
a5129 3
xcb_glx_select_buffer (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       int32_t                size  /**< */);
d5132 1
a5132 1
xcb_glx_render_mode_sizeof (const void  *_buffer  /**< */);
d5143 3
a5145 3
xcb_glx_render_mode (xcb_connection_t      *c  /**< */,
                     xcb_glx_context_tag_t  context_tag  /**< */,
                     uint32_t               mode  /**< */);
d5159 3
a5161 3
xcb_glx_render_mode_unchecked (xcb_connection_t      *c  /**< */,
                               xcb_glx_context_tag_t  context_tag  /**< */,
                               uint32_t               mode  /**< */);
d5164 1
a5164 1
xcb_glx_render_mode_data (const xcb_glx_render_mode_reply_t *R  /**< */);
d5167 1
a5167 1
xcb_glx_render_mode_data_length (const xcb_glx_render_mode_reply_t *R  /**< */);
d5170 1
a5170 1
xcb_glx_render_mode_data_end (const xcb_glx_render_mode_reply_t *R  /**< */);
d5187 1
a5187 1
xcb_glx_render_mode_reply (xcb_connection_t              *c  /**< */,
d5189 1
a5189 1
                           xcb_generic_error_t          **e  /**< */);
d5200 2
a5201 2
xcb_glx_finish (xcb_connection_t      *c  /**< */,
                xcb_glx_context_tag_t  context_tag  /**< */);
d5215 2
a5216 2
xcb_glx_finish_unchecked (xcb_connection_t      *c  /**< */,
                          xcb_glx_context_tag_t  context_tag  /**< */);
d5233 1
a5233 1
xcb_glx_finish_reply (xcb_connection_t         *c  /**< */,
d5235 1
a5235 1
                      xcb_generic_error_t     **e  /**< */);
d5249 4
a5252 4
xcb_glx_pixel_storef_checked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               pname  /**< */,
                              xcb_glx_float32_t      datum  /**< */);
d5263 4
a5266 4
xcb_glx_pixel_storef (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      uint32_t               pname  /**< */,
                      xcb_glx_float32_t      datum  /**< */);
d5280 4
a5283 4
xcb_glx_pixel_storei_checked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               pname  /**< */,
                              int32_t                datum  /**< */);
d5294 4
a5297 4
xcb_glx_pixel_storei (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      uint32_t               pname  /**< */,
                      int32_t                datum  /**< */);
d5300 1
a5300 1
xcb_glx_read_pixels_sizeof (const void  *_buffer  /**< */);
d5311 10
a5320 10
xcb_glx_read_pixels (xcb_connection_t      *c  /**< */,
                     xcb_glx_context_tag_t  context_tag  /**< */,
                     int32_t                x  /**< */,
                     int32_t                y  /**< */,
                     int32_t                width  /**< */,
                     int32_t                height  /**< */,
                     uint32_t               format  /**< */,
                     uint32_t               type  /**< */,
                     uint8_t                swap_bytes  /**< */,
                     uint8_t                lsb_first  /**< */);
d5334 10
a5343 10
xcb_glx_read_pixels_unchecked (xcb_connection_t      *c  /**< */,
                               xcb_glx_context_tag_t  context_tag  /**< */,
                               int32_t                x  /**< */,
                               int32_t                y  /**< */,
                               int32_t                width  /**< */,
                               int32_t                height  /**< */,
                               uint32_t               format  /**< */,
                               uint32_t               type  /**< */,
                               uint8_t                swap_bytes  /**< */,
                               uint8_t                lsb_first  /**< */);
d5346 1
a5346 1
xcb_glx_read_pixels_data (const xcb_glx_read_pixels_reply_t *R  /**< */);
d5349 1
a5349 1
xcb_glx_read_pixels_data_length (const xcb_glx_read_pixels_reply_t *R  /**< */);
d5352 1
a5352 1
xcb_glx_read_pixels_data_end (const xcb_glx_read_pixels_reply_t *R  /**< */);
d5369 1
a5369 1
xcb_glx_read_pixels_reply (xcb_connection_t              *c  /**< */,
d5371 1
a5371 1
                           xcb_generic_error_t          **e  /**< */);
d5374 1
a5374 1
xcb_glx_get_booleanv_sizeof (const void  *_buffer  /**< */);
d5385 3
a5387 3
xcb_glx_get_booleanv (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      int32_t                pname  /**< */);
d5401 3
a5403 3
xcb_glx_get_booleanv_unchecked (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                int32_t                pname  /**< */);
d5406 1
a5406 1
xcb_glx_get_booleanv_data (const xcb_glx_get_booleanv_reply_t *R  /**< */);
d5409 1
a5409 1
xcb_glx_get_booleanv_data_length (const xcb_glx_get_booleanv_reply_t *R  /**< */);
d5412 1
a5412 1
xcb_glx_get_booleanv_data_end (const xcb_glx_get_booleanv_reply_t *R  /**< */);
d5429 1
a5429 1
xcb_glx_get_booleanv_reply (xcb_connection_t               *c  /**< */,
d5431 1
a5431 1
                            xcb_generic_error_t           **e  /**< */);
d5434 1
a5434 1
xcb_glx_get_clip_plane_sizeof (const void  *_buffer  /**< */);
d5445 3
a5447 3
xcb_glx_get_clip_plane (xcb_connection_t      *c  /**< */,
                        xcb_glx_context_tag_t  context_tag  /**< */,
                        int32_t                plane  /**< */);
d5461 3
a5463 3
xcb_glx_get_clip_plane_unchecked (xcb_connection_t      *c  /**< */,
                                  xcb_glx_context_tag_t  context_tag  /**< */,
                                  int32_t                plane  /**< */);
d5466 1
a5466 1
xcb_glx_get_clip_plane_data (const xcb_glx_get_clip_plane_reply_t *R  /**< */);
d5469 1
a5469 1
xcb_glx_get_clip_plane_data_length (const xcb_glx_get_clip_plane_reply_t *R  /**< */);
d5472 1
a5472 1
xcb_glx_get_clip_plane_data_end (const xcb_glx_get_clip_plane_reply_t *R  /**< */);
d5489 1
a5489 1
xcb_glx_get_clip_plane_reply (xcb_connection_t                 *c  /**< */,
d5491 1
a5491 1
                              xcb_generic_error_t             **e  /**< */);
d5494 1
a5494 1
xcb_glx_get_doublev_sizeof (const void  *_buffer  /**< */);
d5505 3
a5507 3
xcb_glx_get_doublev (xcb_connection_t      *c  /**< */,
                     xcb_glx_context_tag_t  context_tag  /**< */,
                     uint32_t               pname  /**< */);
d5521 3
a5523 3
xcb_glx_get_doublev_unchecked (xcb_connection_t      *c  /**< */,
                               xcb_glx_context_tag_t  context_tag  /**< */,
                               uint32_t               pname  /**< */);
d5526 1
a5526 1
xcb_glx_get_doublev_data (const xcb_glx_get_doublev_reply_t *R  /**< */);
d5529 1
a5529 1
xcb_glx_get_doublev_data_length (const xcb_glx_get_doublev_reply_t *R  /**< */);
d5532 1
a5532 1
xcb_glx_get_doublev_data_end (const xcb_glx_get_doublev_reply_t *R  /**< */);
d5549 1
a5549 1
xcb_glx_get_doublev_reply (xcb_connection_t              *c  /**< */,
d5551 1
a5551 1
                           xcb_generic_error_t          **e  /**< */);
d5562 2
a5563 2
xcb_glx_get_error (xcb_connection_t      *c  /**< */,
                   xcb_glx_context_tag_t  context_tag  /**< */);
d5577 2
a5578 2
xcb_glx_get_error_unchecked (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */);
d5595 1
a5595 1
xcb_glx_get_error_reply (xcb_connection_t            *c  /**< */,
d5597 1
a5597 1
                         xcb_generic_error_t        **e  /**< */);
d5600 1
a5600 1
xcb_glx_get_floatv_sizeof (const void  *_buffer  /**< */);
d5611 3
a5613 3
xcb_glx_get_floatv (xcb_connection_t      *c  /**< */,
                    xcb_glx_context_tag_t  context_tag  /**< */,
                    uint32_t               pname  /**< */);
d5627 3
a5629 3
xcb_glx_get_floatv_unchecked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               pname  /**< */);
d5632 1
a5632 1
xcb_glx_get_floatv_data (const xcb_glx_get_floatv_reply_t *R  /**< */);
d5635 1
a5635 1
xcb_glx_get_floatv_data_length (const xcb_glx_get_floatv_reply_t *R  /**< */);
d5638 1
a5638 1
xcb_glx_get_floatv_data_end (const xcb_glx_get_floatv_reply_t *R  /**< */);
d5655 1
a5655 1
xcb_glx_get_floatv_reply (xcb_connection_t             *c  /**< */,
d5657 1
a5657 1
                          xcb_generic_error_t         **e  /**< */);
d5660 1
a5660 1
xcb_glx_get_integerv_sizeof (const void  *_buffer  /**< */);
d5671 3
a5673 3
xcb_glx_get_integerv (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      uint32_t               pname  /**< */);
d5687 3
a5689 3
xcb_glx_get_integerv_unchecked (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                uint32_t               pname  /**< */);
d5692 1
a5692 1
xcb_glx_get_integerv_data (const xcb_glx_get_integerv_reply_t *R  /**< */);
d5695 1
a5695 1
xcb_glx_get_integerv_data_length (const xcb_glx_get_integerv_reply_t *R  /**< */);
d5698 1
a5698 1
xcb_glx_get_integerv_data_end (const xcb_glx_get_integerv_reply_t *R  /**< */);
d5715 1
a5715 1
xcb_glx_get_integerv_reply (xcb_connection_t               *c  /**< */,
d5717 1
a5717 1
                            xcb_generic_error_t           **e  /**< */);
d5720 1
a5720 1
xcb_glx_get_lightfv_sizeof (const void  *_buffer  /**< */);
d5731 4
a5734 4
xcb_glx_get_lightfv (xcb_connection_t      *c  /**< */,
                     xcb_glx_context_tag_t  context_tag  /**< */,
                     uint32_t               light  /**< */,
                     uint32_t               pname  /**< */);
d5748 4
a5751 4
xcb_glx_get_lightfv_unchecked (xcb_connection_t      *c  /**< */,
                               xcb_glx_context_tag_t  context_tag  /**< */,
                               uint32_t               light  /**< */,
                               uint32_t               pname  /**< */);
d5754 1
a5754 1
xcb_glx_get_lightfv_data (const xcb_glx_get_lightfv_reply_t *R  /**< */);
d5757 1
a5757 1
xcb_glx_get_lightfv_data_length (const xcb_glx_get_lightfv_reply_t *R  /**< */);
d5760 1
a5760 1
xcb_glx_get_lightfv_data_end (const xcb_glx_get_lightfv_reply_t *R  /**< */);
d5777 1
a5777 1
xcb_glx_get_lightfv_reply (xcb_connection_t              *c  /**< */,
d5779 1
a5779 1
                           xcb_generic_error_t          **e  /**< */);
d5782 1
a5782 1
xcb_glx_get_lightiv_sizeof (const void  *_buffer  /**< */);
d5793 4
a5796 4
xcb_glx_get_lightiv (xcb_connection_t      *c  /**< */,
                     xcb_glx_context_tag_t  context_tag  /**< */,
                     uint32_t               light  /**< */,
                     uint32_t               pname  /**< */);
d5810 4
a5813 4
xcb_glx_get_lightiv_unchecked (xcb_connection_t      *c  /**< */,
                               xcb_glx_context_tag_t  context_tag  /**< */,
                               uint32_t               light  /**< */,
                               uint32_t               pname  /**< */);
d5816 1
a5816 1
xcb_glx_get_lightiv_data (const xcb_glx_get_lightiv_reply_t *R  /**< */);
d5819 1
a5819 1
xcb_glx_get_lightiv_data_length (const xcb_glx_get_lightiv_reply_t *R  /**< */);
d5822 1
a5822 1
xcb_glx_get_lightiv_data_end (const xcb_glx_get_lightiv_reply_t *R  /**< */);
d5839 1
a5839 1
xcb_glx_get_lightiv_reply (xcb_connection_t              *c  /**< */,
d5841 1
a5841 1
                           xcb_generic_error_t          **e  /**< */);
d5844 1
a5844 1
xcb_glx_get_mapdv_sizeof (const void  *_buffer  /**< */);
d5855 4
a5858 4
xcb_glx_get_mapdv (xcb_connection_t      *c  /**< */,
                   xcb_glx_context_tag_t  context_tag  /**< */,
                   uint32_t               target  /**< */,
                   uint32_t               query  /**< */);
d5872 4
a5875 4
xcb_glx_get_mapdv_unchecked (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */,
                             uint32_t               target  /**< */,
                             uint32_t               query  /**< */);
d5878 1
a5878 1
xcb_glx_get_mapdv_data (const xcb_glx_get_mapdv_reply_t *R  /**< */);
d5881 1
a5881 1
xcb_glx_get_mapdv_data_length (const xcb_glx_get_mapdv_reply_t *R  /**< */);
d5884 1
a5884 1
xcb_glx_get_mapdv_data_end (const xcb_glx_get_mapdv_reply_t *R  /**< */);
d5901 1
a5901 1
xcb_glx_get_mapdv_reply (xcb_connection_t            *c  /**< */,
d5903 1
a5903 1
                         xcb_generic_error_t        **e  /**< */);
d5906 1
a5906 1
xcb_glx_get_mapfv_sizeof (const void  *_buffer  /**< */);
d5917 4
a5920 4
xcb_glx_get_mapfv (xcb_connection_t      *c  /**< */,
                   xcb_glx_context_tag_t  context_tag  /**< */,
                   uint32_t               target  /**< */,
                   uint32_t               query  /**< */);
d5934 4
a5937 4
xcb_glx_get_mapfv_unchecked (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */,
                             uint32_t               target  /**< */,
                             uint32_t               query  /**< */);
d5940 1
a5940 1
xcb_glx_get_mapfv_data (const xcb_glx_get_mapfv_reply_t *R  /**< */);
d5943 1
a5943 1
xcb_glx_get_mapfv_data_length (const xcb_glx_get_mapfv_reply_t *R  /**< */);
d5946 1
a5946 1
xcb_glx_get_mapfv_data_end (const xcb_glx_get_mapfv_reply_t *R  /**< */);
d5963 1
a5963 1
xcb_glx_get_mapfv_reply (xcb_connection_t            *c  /**< */,
d5965 1
a5965 1
                         xcb_generic_error_t        **e  /**< */);
d5968 1
a5968 1
xcb_glx_get_mapiv_sizeof (const void  *_buffer  /**< */);
d5979 4
a5982 4
xcb_glx_get_mapiv (xcb_connection_t      *c  /**< */,
                   xcb_glx_context_tag_t  context_tag  /**< */,
                   uint32_t               target  /**< */,
                   uint32_t               query  /**< */);
d5996 4
a5999 4
xcb_glx_get_mapiv_unchecked (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */,
                             uint32_t               target  /**< */,
                             uint32_t               query  /**< */);
d6002 1
a6002 1
xcb_glx_get_mapiv_data (const xcb_glx_get_mapiv_reply_t *R  /**< */);
d6005 1
a6005 1
xcb_glx_get_mapiv_data_length (const xcb_glx_get_mapiv_reply_t *R  /**< */);
d6008 1
a6008 1
xcb_glx_get_mapiv_data_end (const xcb_glx_get_mapiv_reply_t *R  /**< */);
d6025 1
a6025 1
xcb_glx_get_mapiv_reply (xcb_connection_t            *c  /**< */,
d6027 1
a6027 1
                         xcb_generic_error_t        **e  /**< */);
d6030 1
a6030 1
xcb_glx_get_materialfv_sizeof (const void  *_buffer  /**< */);
d6041 4
a6044 4
xcb_glx_get_materialfv (xcb_connection_t      *c  /**< */,
                        xcb_glx_context_tag_t  context_tag  /**< */,
                        uint32_t               face  /**< */,
                        uint32_t               pname  /**< */);
d6058 4
a6061 4
xcb_glx_get_materialfv_unchecked (xcb_connection_t      *c  /**< */,
                                  xcb_glx_context_tag_t  context_tag  /**< */,
                                  uint32_t               face  /**< */,
                                  uint32_t               pname  /**< */);
d6064 1
a6064 1
xcb_glx_get_materialfv_data (const xcb_glx_get_materialfv_reply_t *R  /**< */);
d6067 1
a6067 1
xcb_glx_get_materialfv_data_length (const xcb_glx_get_materialfv_reply_t *R  /**< */);
d6070 1
a6070 1
xcb_glx_get_materialfv_data_end (const xcb_glx_get_materialfv_reply_t *R  /**< */);
d6087 1
a6087 1
xcb_glx_get_materialfv_reply (xcb_connection_t                 *c  /**< */,
d6089 1
a6089 1
                              xcb_generic_error_t             **e  /**< */);
d6092 1
a6092 1
xcb_glx_get_materialiv_sizeof (const void  *_buffer  /**< */);
d6103 4
a6106 4
xcb_glx_get_materialiv (xcb_connection_t      *c  /**< */,
                        xcb_glx_context_tag_t  context_tag  /**< */,
                        uint32_t               face  /**< */,
                        uint32_t               pname  /**< */);
d6120 4
a6123 4
xcb_glx_get_materialiv_unchecked (xcb_connection_t      *c  /**< */,
                                  xcb_glx_context_tag_t  context_tag  /**< */,
                                  uint32_t               face  /**< */,
                                  uint32_t               pname  /**< */);
d6126 1
a6126 1
xcb_glx_get_materialiv_data (const xcb_glx_get_materialiv_reply_t *R  /**< */);
d6129 1
a6129 1
xcb_glx_get_materialiv_data_length (const xcb_glx_get_materialiv_reply_t *R  /**< */);
d6132 1
a6132 1
xcb_glx_get_materialiv_data_end (const xcb_glx_get_materialiv_reply_t *R  /**< */);
d6149 1
a6149 1
xcb_glx_get_materialiv_reply (xcb_connection_t                 *c  /**< */,
d6151 1
a6151 1
                              xcb_generic_error_t             **e  /**< */);
d6154 1
a6154 1
xcb_glx_get_pixel_mapfv_sizeof (const void  *_buffer  /**< */);
d6165 3
a6167 3
xcb_glx_get_pixel_mapfv (xcb_connection_t      *c  /**< */,
                         xcb_glx_context_tag_t  context_tag  /**< */,
                         uint32_t               map  /**< */);
d6181 3
a6183 3
xcb_glx_get_pixel_mapfv_unchecked (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               map  /**< */);
d6186 1
a6186 1
xcb_glx_get_pixel_mapfv_data (const xcb_glx_get_pixel_mapfv_reply_t *R  /**< */);
d6189 1
a6189 1
xcb_glx_get_pixel_mapfv_data_length (const xcb_glx_get_pixel_mapfv_reply_t *R  /**< */);
d6192 1
a6192 1
xcb_glx_get_pixel_mapfv_data_end (const xcb_glx_get_pixel_mapfv_reply_t *R  /**< */);
d6209 1
a6209 1
xcb_glx_get_pixel_mapfv_reply (xcb_connection_t                  *c  /**< */,
d6211 1
a6211 1
                               xcb_generic_error_t              **e  /**< */);
d6214 1
a6214 1
xcb_glx_get_pixel_mapuiv_sizeof (const void  *_buffer  /**< */);
d6225 3
a6227 3
xcb_glx_get_pixel_mapuiv (xcb_connection_t      *c  /**< */,
                          xcb_glx_context_tag_t  context_tag  /**< */,
                          uint32_t               map  /**< */);
d6241 3
a6243 3
xcb_glx_get_pixel_mapuiv_unchecked (xcb_connection_t      *c  /**< */,
                                    xcb_glx_context_tag_t  context_tag  /**< */,
                                    uint32_t               map  /**< */);
d6246 1
a6246 1
xcb_glx_get_pixel_mapuiv_data (const xcb_glx_get_pixel_mapuiv_reply_t *R  /**< */);
d6249 1
a6249 1
xcb_glx_get_pixel_mapuiv_data_length (const xcb_glx_get_pixel_mapuiv_reply_t *R  /**< */);
d6252 1
a6252 1
xcb_glx_get_pixel_mapuiv_data_end (const xcb_glx_get_pixel_mapuiv_reply_t *R  /**< */);
d6269 1
a6269 1
xcb_glx_get_pixel_mapuiv_reply (xcb_connection_t                   *c  /**< */,
d6271 1
a6271 1
                                xcb_generic_error_t               **e  /**< */);
d6274 1
a6274 1
xcb_glx_get_pixel_mapusv_sizeof (const void  *_buffer  /**< */);
d6285 3
a6287 3
xcb_glx_get_pixel_mapusv (xcb_connection_t      *c  /**< */,
                          xcb_glx_context_tag_t  context_tag  /**< */,
                          uint32_t               map  /**< */);
d6301 3
a6303 3
xcb_glx_get_pixel_mapusv_unchecked (xcb_connection_t      *c  /**< */,
                                    xcb_glx_context_tag_t  context_tag  /**< */,
                                    uint32_t               map  /**< */);
d6306 1
a6306 1
xcb_glx_get_pixel_mapusv_data (const xcb_glx_get_pixel_mapusv_reply_t *R  /**< */);
d6309 1
a6309 1
xcb_glx_get_pixel_mapusv_data_length (const xcb_glx_get_pixel_mapusv_reply_t *R  /**< */);
d6312 1
a6312 1
xcb_glx_get_pixel_mapusv_data_end (const xcb_glx_get_pixel_mapusv_reply_t *R  /**< */);
d6329 1
a6329 1
xcb_glx_get_pixel_mapusv_reply (xcb_connection_t                   *c  /**< */,
d6331 1
a6331 1
                                xcb_generic_error_t               **e  /**< */);
d6334 1
a6334 1
xcb_glx_get_polygon_stipple_sizeof (const void  *_buffer  /**< */);
d6345 3
a6347 3
xcb_glx_get_polygon_stipple (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */,
                             uint8_t                lsb_first  /**< */);
d6361 3
a6363 3
xcb_glx_get_polygon_stipple_unchecked (xcb_connection_t      *c  /**< */,
                                       xcb_glx_context_tag_t  context_tag  /**< */,
                                       uint8_t                lsb_first  /**< */);
d6366 1
a6366 1
xcb_glx_get_polygon_stipple_data (const xcb_glx_get_polygon_stipple_reply_t *R  /**< */);
d6369 1
a6369 1
xcb_glx_get_polygon_stipple_data_length (const xcb_glx_get_polygon_stipple_reply_t *R  /**< */);
d6372 1
a6372 1
xcb_glx_get_polygon_stipple_data_end (const xcb_glx_get_polygon_stipple_reply_t *R  /**< */);
d6389 1
a6389 1
xcb_glx_get_polygon_stipple_reply (xcb_connection_t                      *c  /**< */,
d6391 1
a6391 1
                                   xcb_generic_error_t                  **e  /**< */);
d6394 1
a6394 1
xcb_glx_get_string_sizeof (const void  *_buffer  /**< */);
d6405 3
a6407 3
xcb_glx_get_string (xcb_connection_t      *c  /**< */,
                    xcb_glx_context_tag_t  context_tag  /**< */,
                    uint32_t               name  /**< */);
d6421 3
a6423 3
xcb_glx_get_string_unchecked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               name  /**< */);
d6426 1
a6426 1
xcb_glx_get_string_string (const xcb_glx_get_string_reply_t *R  /**< */);
d6429 1
a6429 1
xcb_glx_get_string_string_length (const xcb_glx_get_string_reply_t *R  /**< */);
d6432 1
a6432 1
xcb_glx_get_string_string_end (const xcb_glx_get_string_reply_t *R  /**< */);
d6449 1
a6449 1
xcb_glx_get_string_reply (xcb_connection_t             *c  /**< */,
d6451 1
a6451 1
                          xcb_generic_error_t         **e  /**< */);
d6454 1
a6454 1
xcb_glx_get_tex_envfv_sizeof (const void  *_buffer  /**< */);
d6465 4
a6468 4
xcb_glx_get_tex_envfv (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       uint32_t               target  /**< */,
                       uint32_t               pname  /**< */);
d6482 4
a6485 4
xcb_glx_get_tex_envfv_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               target  /**< */,
                                 uint32_t               pname  /**< */);
d6488 1
a6488 1
xcb_glx_get_tex_envfv_data (const xcb_glx_get_tex_envfv_reply_t *R  /**< */);
d6491 1
a6491 1
xcb_glx_get_tex_envfv_data_length (const xcb_glx_get_tex_envfv_reply_t *R  /**< */);
d6494 1
a6494 1
xcb_glx_get_tex_envfv_data_end (const xcb_glx_get_tex_envfv_reply_t *R  /**< */);
d6511 1
a6511 1
xcb_glx_get_tex_envfv_reply (xcb_connection_t                *c  /**< */,
d6513 1
a6513 1
                             xcb_generic_error_t            **e  /**< */);
d6516 1
a6516 1
xcb_glx_get_tex_enviv_sizeof (const void  *_buffer  /**< */);
d6527 4
a6530 4
xcb_glx_get_tex_enviv (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       uint32_t               target  /**< */,
                       uint32_t               pname  /**< */);
d6544 4
a6547 4
xcb_glx_get_tex_enviv_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               target  /**< */,
                                 uint32_t               pname  /**< */);
d6550 1
a6550 1
xcb_glx_get_tex_enviv_data (const xcb_glx_get_tex_enviv_reply_t *R  /**< */);
d6553 1
a6553 1
xcb_glx_get_tex_enviv_data_length (const xcb_glx_get_tex_enviv_reply_t *R  /**< */);
d6556 1
a6556 1
xcb_glx_get_tex_enviv_data_end (const xcb_glx_get_tex_enviv_reply_t *R  /**< */);
d6573 1
a6573 1
xcb_glx_get_tex_enviv_reply (xcb_connection_t                *c  /**< */,
d6575 1
a6575 1
                             xcb_generic_error_t            **e  /**< */);
d6578 1
a6578 1
xcb_glx_get_tex_gendv_sizeof (const void  *_buffer  /**< */);
d6589 4
a6592 4
xcb_glx_get_tex_gendv (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       uint32_t               coord  /**< */,
                       uint32_t               pname  /**< */);
d6606 4
a6609 4
xcb_glx_get_tex_gendv_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               coord  /**< */,
                                 uint32_t               pname  /**< */);
d6612 1
a6612 1
xcb_glx_get_tex_gendv_data (const xcb_glx_get_tex_gendv_reply_t *R  /**< */);
d6615 1
a6615 1
xcb_glx_get_tex_gendv_data_length (const xcb_glx_get_tex_gendv_reply_t *R  /**< */);
d6618 1
a6618 1
xcb_glx_get_tex_gendv_data_end (const xcb_glx_get_tex_gendv_reply_t *R  /**< */);
d6635 1
a6635 1
xcb_glx_get_tex_gendv_reply (xcb_connection_t                *c  /**< */,
d6637 1
a6637 1
                             xcb_generic_error_t            **e  /**< */);
d6640 1
a6640 1
xcb_glx_get_tex_genfv_sizeof (const void  *_buffer  /**< */);
d6651 4
a6654 4
xcb_glx_get_tex_genfv (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       uint32_t               coord  /**< */,
                       uint32_t               pname  /**< */);
d6668 4
a6671 4
xcb_glx_get_tex_genfv_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               coord  /**< */,
                                 uint32_t               pname  /**< */);
d6674 1
a6674 1
xcb_glx_get_tex_genfv_data (const xcb_glx_get_tex_genfv_reply_t *R  /**< */);
d6677 1
a6677 1
xcb_glx_get_tex_genfv_data_length (const xcb_glx_get_tex_genfv_reply_t *R  /**< */);
d6680 1
a6680 1
xcb_glx_get_tex_genfv_data_end (const xcb_glx_get_tex_genfv_reply_t *R  /**< */);
d6697 1
a6697 1
xcb_glx_get_tex_genfv_reply (xcb_connection_t                *c  /**< */,
d6699 1
a6699 1
                             xcb_generic_error_t            **e  /**< */);
d6702 1
a6702 1
xcb_glx_get_tex_geniv_sizeof (const void  *_buffer  /**< */);
d6713 4
a6716 4
xcb_glx_get_tex_geniv (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       uint32_t               coord  /**< */,
                       uint32_t               pname  /**< */);
d6730 4
a6733 4
xcb_glx_get_tex_geniv_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               coord  /**< */,
                                 uint32_t               pname  /**< */);
d6736 1
a6736 1
xcb_glx_get_tex_geniv_data (const xcb_glx_get_tex_geniv_reply_t *R  /**< */);
d6739 1
a6739 1
xcb_glx_get_tex_geniv_data_length (const xcb_glx_get_tex_geniv_reply_t *R  /**< */);
d6742 1
a6742 1
xcb_glx_get_tex_geniv_data_end (const xcb_glx_get_tex_geniv_reply_t *R  /**< */);
d6759 1
a6759 1
xcb_glx_get_tex_geniv_reply (xcb_connection_t                *c  /**< */,
d6761 1
a6761 1
                             xcb_generic_error_t            **e  /**< */);
d6764 1
a6764 1
xcb_glx_get_tex_image_sizeof (const void  *_buffer  /**< */);
d6775 7
a6781 7
xcb_glx_get_tex_image (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       uint32_t               target  /**< */,
                       int32_t                level  /**< */,
                       uint32_t               format  /**< */,
                       uint32_t               type  /**< */,
                       uint8_t                swap_bytes  /**< */);
d6795 7
a6801 7
xcb_glx_get_tex_image_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               target  /**< */,
                                 int32_t                level  /**< */,
                                 uint32_t               format  /**< */,
                                 uint32_t               type  /**< */,
                                 uint8_t                swap_bytes  /**< */);
d6804 1
a6804 1
xcb_glx_get_tex_image_data (const xcb_glx_get_tex_image_reply_t *R  /**< */);
d6807 1
a6807 1
xcb_glx_get_tex_image_data_length (const xcb_glx_get_tex_image_reply_t *R  /**< */);
d6810 1
a6810 1
xcb_glx_get_tex_image_data_end (const xcb_glx_get_tex_image_reply_t *R  /**< */);
d6827 1
a6827 1
xcb_glx_get_tex_image_reply (xcb_connection_t                *c  /**< */,
d6829 1
a6829 1
                             xcb_generic_error_t            **e  /**< */);
d6832 1
a6832 1
xcb_glx_get_tex_parameterfv_sizeof (const void  *_buffer  /**< */);
d6843 4
a6846 4
xcb_glx_get_tex_parameterfv (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */,
                             uint32_t               target  /**< */,
                             uint32_t               pname  /**< */);
d6860 4
a6863 4
xcb_glx_get_tex_parameterfv_unchecked (xcb_connection_t      *c  /**< */,
                                       xcb_glx_context_tag_t  context_tag  /**< */,
                                       uint32_t               target  /**< */,
                                       uint32_t               pname  /**< */);
d6866 1
a6866 1
xcb_glx_get_tex_parameterfv_data (const xcb_glx_get_tex_parameterfv_reply_t *R  /**< */);
d6869 1
a6869 1
xcb_glx_get_tex_parameterfv_data_length (const xcb_glx_get_tex_parameterfv_reply_t *R  /**< */);
d6872 1
a6872 1
xcb_glx_get_tex_parameterfv_data_end (const xcb_glx_get_tex_parameterfv_reply_t *R  /**< */);
d6889 1
a6889 1
xcb_glx_get_tex_parameterfv_reply (xcb_connection_t                      *c  /**< */,
d6891 1
a6891 1
                                   xcb_generic_error_t                  **e  /**< */);
d6894 1
a6894 1
xcb_glx_get_tex_parameteriv_sizeof (const void  *_buffer  /**< */);
d6905 4
a6908 4
xcb_glx_get_tex_parameteriv (xcb_connection_t      *c  /**< */,
                             xcb_glx_context_tag_t  context_tag  /**< */,
                             uint32_t               target  /**< */,
                             uint32_t               pname  /**< */);
d6922 4
a6925 4
xcb_glx_get_tex_parameteriv_unchecked (xcb_connection_t      *c  /**< */,
                                       xcb_glx_context_tag_t  context_tag  /**< */,
                                       uint32_t               target  /**< */,
                                       uint32_t               pname  /**< */);
d6928 1
a6928 1
xcb_glx_get_tex_parameteriv_data (const xcb_glx_get_tex_parameteriv_reply_t *R  /**< */);
d6931 1
a6931 1
xcb_glx_get_tex_parameteriv_data_length (const xcb_glx_get_tex_parameteriv_reply_t *R  /**< */);
d6934 1
a6934 1
xcb_glx_get_tex_parameteriv_data_end (const xcb_glx_get_tex_parameteriv_reply_t *R  /**< */);
d6951 1
a6951 1
xcb_glx_get_tex_parameteriv_reply (xcb_connection_t                      *c  /**< */,
d6953 1
a6953 1
                                   xcb_generic_error_t                  **e  /**< */);
d6956 1
a6956 1
xcb_glx_get_tex_level_parameterfv_sizeof (const void  *_buffer  /**< */);
d6967 5
a6971 5
xcb_glx_get_tex_level_parameterfv (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               target  /**< */,
                                   int32_t                level  /**< */,
                                   uint32_t               pname  /**< */);
d6985 5
a6989 5
xcb_glx_get_tex_level_parameterfv_unchecked (xcb_connection_t      *c  /**< */,
                                             xcb_glx_context_tag_t  context_tag  /**< */,
                                             uint32_t               target  /**< */,
                                             int32_t                level  /**< */,
                                             uint32_t               pname  /**< */);
d6992 1
a6992 1
xcb_glx_get_tex_level_parameterfv_data (const xcb_glx_get_tex_level_parameterfv_reply_t *R  /**< */);
d6995 1
a6995 1
xcb_glx_get_tex_level_parameterfv_data_length (const xcb_glx_get_tex_level_parameterfv_reply_t *R  /**< */);
d6998 1
a6998 1
xcb_glx_get_tex_level_parameterfv_data_end (const xcb_glx_get_tex_level_parameterfv_reply_t *R  /**< */);
d7015 1
a7015 1
xcb_glx_get_tex_level_parameterfv_reply (xcb_connection_t                            *c  /**< */,
d7017 1
a7017 1
                                         xcb_generic_error_t                        **e  /**< */);
d7020 1
a7020 1
xcb_glx_get_tex_level_parameteriv_sizeof (const void  *_buffer  /**< */);
d7031 5
a7035 5
xcb_glx_get_tex_level_parameteriv (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               target  /**< */,
                                   int32_t                level  /**< */,
                                   uint32_t               pname  /**< */);
d7049 5
a7053 5
xcb_glx_get_tex_level_parameteriv_unchecked (xcb_connection_t      *c  /**< */,
                                             xcb_glx_context_tag_t  context_tag  /**< */,
                                             uint32_t               target  /**< */,
                                             int32_t                level  /**< */,
                                             uint32_t               pname  /**< */);
d7056 1
a7056 1
xcb_glx_get_tex_level_parameteriv_data (const xcb_glx_get_tex_level_parameteriv_reply_t *R  /**< */);
d7059 1
a7059 1
xcb_glx_get_tex_level_parameteriv_data_length (const xcb_glx_get_tex_level_parameteriv_reply_t *R  /**< */);
d7062 1
a7062 1
xcb_glx_get_tex_level_parameteriv_data_end (const xcb_glx_get_tex_level_parameteriv_reply_t *R  /**< */);
d7079 1
a7079 1
xcb_glx_get_tex_level_parameteriv_reply (xcb_connection_t                            *c  /**< */,
d7081 49
a7129 1
                                         xcb_generic_error_t                        **e  /**< */);
d7140 3
a7142 3
xcb_glx_is_list (xcb_connection_t      *c  /**< */,
                 xcb_glx_context_tag_t  context_tag  /**< */,
                 uint32_t               list  /**< */);
d7156 3
a7158 3
xcb_glx_is_list_unchecked (xcb_connection_t      *c  /**< */,
                           xcb_glx_context_tag_t  context_tag  /**< */,
                           uint32_t               list  /**< */);
d7175 1
a7175 1
xcb_glx_is_list_reply (xcb_connection_t          *c  /**< */,
d7177 1
a7177 1
                       xcb_generic_error_t      **e  /**< */);
d7191 2
a7192 2
xcb_glx_flush_checked (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */);
d7203 2
a7204 2
xcb_glx_flush (xcb_connection_t      *c  /**< */,
               xcb_glx_context_tag_t  context_tag  /**< */);
d7207 1
a7207 1
xcb_glx_are_textures_resident_sizeof (const void  *_buffer  /**< */);
d7218 4
a7221 4
xcb_glx_are_textures_resident (xcb_connection_t      *c  /**< */,
                               xcb_glx_context_tag_t  context_tag  /**< */,
                               int32_t                n  /**< */,
                               const uint32_t        *textures  /**< */);
d7235 4
a7238 4
xcb_glx_are_textures_resident_unchecked (xcb_connection_t      *c  /**< */,
                                         xcb_glx_context_tag_t  context_tag  /**< */,
                                         int32_t                n  /**< */,
                                         const uint32_t        *textures  /**< */);
d7241 1
a7241 1
xcb_glx_are_textures_resident_data (const xcb_glx_are_textures_resident_reply_t *R  /**< */);
d7244 1
a7244 1
xcb_glx_are_textures_resident_data_length (const xcb_glx_are_textures_resident_reply_t *R  /**< */);
d7247 1
a7247 1
xcb_glx_are_textures_resident_data_end (const xcb_glx_are_textures_resident_reply_t *R  /**< */);
d7264 1
a7264 1
xcb_glx_are_textures_resident_reply (xcb_connection_t                        *c  /**< */,
d7266 1
a7266 1
                                     xcb_generic_error_t                    **e  /**< */);
d7269 1
a7269 1
xcb_glx_delete_textures_sizeof (const void  *_buffer  /**< */);
d7283 4
a7286 4
xcb_glx_delete_textures_checked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 int32_t                n  /**< */,
                                 const uint32_t        *textures  /**< */);
d7297 13
a7309 4
xcb_glx_delete_textures (xcb_connection_t      *c  /**< */,
                         xcb_glx_context_tag_t  context_tag  /**< */,
                         int32_t                n  /**< */,
                         const uint32_t        *textures  /**< */);
d7312 1
a7312 1
xcb_glx_gen_textures_sizeof (const void  *_buffer  /**< */);
d7323 3
a7325 3
xcb_glx_gen_textures (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      int32_t                n  /**< */);
d7339 3
a7341 3
xcb_glx_gen_textures_unchecked (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                int32_t                n  /**< */);
d7344 1
a7344 1
xcb_glx_gen_textures_data (const xcb_glx_gen_textures_reply_t *R  /**< */);
d7347 1
a7347 1
xcb_glx_gen_textures_data_length (const xcb_glx_gen_textures_reply_t *R  /**< */);
d7350 1
a7350 1
xcb_glx_gen_textures_data_end (const xcb_glx_gen_textures_reply_t *R  /**< */);
d7367 1
a7367 1
xcb_glx_gen_textures_reply (xcb_connection_t               *c  /**< */,
d7369 1
a7369 1
                            xcb_generic_error_t           **e  /**< */);
d7380 3
a7382 3
xcb_glx_is_texture (xcb_connection_t      *c  /**< */,
                    xcb_glx_context_tag_t  context_tag  /**< */,
                    uint32_t               texture  /**< */);
d7396 3
a7398 3
xcb_glx_is_texture_unchecked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               texture  /**< */);
d7415 1
a7415 1
xcb_glx_is_texture_reply (xcb_connection_t             *c  /**< */,
d7417 1
a7417 1
                          xcb_generic_error_t         **e  /**< */);
d7420 1
a7420 1
xcb_glx_get_color_table_sizeof (const void  *_buffer  /**< */);
d7431 6
a7436 6
xcb_glx_get_color_table (xcb_connection_t      *c  /**< */,
                         xcb_glx_context_tag_t  context_tag  /**< */,
                         uint32_t               target  /**< */,
                         uint32_t               format  /**< */,
                         uint32_t               type  /**< */,
                         uint8_t                swap_bytes  /**< */);
d7450 6
a7455 6
xcb_glx_get_color_table_unchecked (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               target  /**< */,
                                   uint32_t               format  /**< */,
                                   uint32_t               type  /**< */,
                                   uint8_t                swap_bytes  /**< */);
d7458 1
a7458 1
xcb_glx_get_color_table_data (const xcb_glx_get_color_table_reply_t *R  /**< */);
d7461 1
a7461 1
xcb_glx_get_color_table_data_length (const xcb_glx_get_color_table_reply_t *R  /**< */);
d7464 1
a7464 1
xcb_glx_get_color_table_data_end (const xcb_glx_get_color_table_reply_t *R  /**< */);
d7481 1
a7481 1
xcb_glx_get_color_table_reply (xcb_connection_t                  *c  /**< */,
d7483 1
a7483 1
                               xcb_generic_error_t              **e  /**< */);
d7486 1
a7486 1
xcb_glx_get_color_table_parameterfv_sizeof (const void  *_buffer  /**< */);
d7497 4
a7500 4
xcb_glx_get_color_table_parameterfv (xcb_connection_t      *c  /**< */,
                                     xcb_glx_context_tag_t  context_tag  /**< */,
                                     uint32_t               target  /**< */,
                                     uint32_t               pname  /**< */);
d7514 4
a7517 4
xcb_glx_get_color_table_parameterfv_unchecked (xcb_connection_t      *c  /**< */,
                                               xcb_glx_context_tag_t  context_tag  /**< */,
                                               uint32_t               target  /**< */,
                                               uint32_t               pname  /**< */);
d7520 1
a7520 1
xcb_glx_get_color_table_parameterfv_data (const xcb_glx_get_color_table_parameterfv_reply_t *R  /**< */);
d7523 1
a7523 1
xcb_glx_get_color_table_parameterfv_data_length (const xcb_glx_get_color_table_parameterfv_reply_t *R  /**< */);
d7526 1
a7526 1
xcb_glx_get_color_table_parameterfv_data_end (const xcb_glx_get_color_table_parameterfv_reply_t *R  /**< */);
d7543 1
a7543 1
xcb_glx_get_color_table_parameterfv_reply (xcb_connection_t                              *c  /**< */,
d7545 1
a7545 1
                                           xcb_generic_error_t                          **e  /**< */);
d7548 1
a7548 1
xcb_glx_get_color_table_parameteriv_sizeof (const void  *_buffer  /**< */);
d7559 4
a7562 4
xcb_glx_get_color_table_parameteriv (xcb_connection_t      *c  /**< */,
                                     xcb_glx_context_tag_t  context_tag  /**< */,
                                     uint32_t               target  /**< */,
                                     uint32_t               pname  /**< */);
d7576 4
a7579 4
xcb_glx_get_color_table_parameteriv_unchecked (xcb_connection_t      *c  /**< */,
                                               xcb_glx_context_tag_t  context_tag  /**< */,
                                               uint32_t               target  /**< */,
                                               uint32_t               pname  /**< */);
d7582 1
a7582 1
xcb_glx_get_color_table_parameteriv_data (const xcb_glx_get_color_table_parameteriv_reply_t *R  /**< */);
d7585 1
a7585 1
xcb_glx_get_color_table_parameteriv_data_length (const xcb_glx_get_color_table_parameteriv_reply_t *R  /**< */);
d7588 1
a7588 1
xcb_glx_get_color_table_parameteriv_data_end (const xcb_glx_get_color_table_parameteriv_reply_t *R  /**< */);
d7605 1
a7605 1
xcb_glx_get_color_table_parameteriv_reply (xcb_connection_t                              *c  /**< */,
d7607 1
a7607 1
                                           xcb_generic_error_t                          **e  /**< */);
d7610 1
a7610 1
xcb_glx_get_convolution_filter_sizeof (const void  *_buffer  /**< */);
d7621 6
a7626 6
xcb_glx_get_convolution_filter (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                uint32_t               target  /**< */,
                                uint32_t               format  /**< */,
                                uint32_t               type  /**< */,
                                uint8_t                swap_bytes  /**< */);
d7640 6
a7645 6
xcb_glx_get_convolution_filter_unchecked (xcb_connection_t      *c  /**< */,
                                          xcb_glx_context_tag_t  context_tag  /**< */,
                                          uint32_t               target  /**< */,
                                          uint32_t               format  /**< */,
                                          uint32_t               type  /**< */,
                                          uint8_t                swap_bytes  /**< */);
d7648 1
a7648 1
xcb_glx_get_convolution_filter_data (const xcb_glx_get_convolution_filter_reply_t *R  /**< */);
d7651 1
a7651 1
xcb_glx_get_convolution_filter_data_length (const xcb_glx_get_convolution_filter_reply_t *R  /**< */);
d7654 1
a7654 1
xcb_glx_get_convolution_filter_data_end (const xcb_glx_get_convolution_filter_reply_t *R  /**< */);
d7671 1
a7671 1
xcb_glx_get_convolution_filter_reply (xcb_connection_t                         *c  /**< */,
d7673 1
a7673 1
                                      xcb_generic_error_t                     **e  /**< */);
d7676 1
a7676 1
xcb_glx_get_convolution_parameterfv_sizeof (const void  *_buffer  /**< */);
d7687 4
a7690 4
xcb_glx_get_convolution_parameterfv (xcb_connection_t      *c  /**< */,
                                     xcb_glx_context_tag_t  context_tag  /**< */,
                                     uint32_t               target  /**< */,
                                     uint32_t               pname  /**< */);
d7704 4
a7707 4
xcb_glx_get_convolution_parameterfv_unchecked (xcb_connection_t      *c  /**< */,
                                               xcb_glx_context_tag_t  context_tag  /**< */,
                                               uint32_t               target  /**< */,
                                               uint32_t               pname  /**< */);
d7710 1
a7710 1
xcb_glx_get_convolution_parameterfv_data (const xcb_glx_get_convolution_parameterfv_reply_t *R  /**< */);
d7713 1
a7713 1
xcb_glx_get_convolution_parameterfv_data_length (const xcb_glx_get_convolution_parameterfv_reply_t *R  /**< */);
d7716 1
a7716 1
xcb_glx_get_convolution_parameterfv_data_end (const xcb_glx_get_convolution_parameterfv_reply_t *R  /**< */);
d7733 1
a7733 1
xcb_glx_get_convolution_parameterfv_reply (xcb_connection_t                              *c  /**< */,
d7735 1
a7735 1
                                           xcb_generic_error_t                          **e  /**< */);
d7738 1
a7738 1
xcb_glx_get_convolution_parameteriv_sizeof (const void  *_buffer  /**< */);
d7749 4
a7752 4
xcb_glx_get_convolution_parameteriv (xcb_connection_t      *c  /**< */,
                                     xcb_glx_context_tag_t  context_tag  /**< */,
                                     uint32_t               target  /**< */,
                                     uint32_t               pname  /**< */);
d7766 4
a7769 4
xcb_glx_get_convolution_parameteriv_unchecked (xcb_connection_t      *c  /**< */,
                                               xcb_glx_context_tag_t  context_tag  /**< */,
                                               uint32_t               target  /**< */,
                                               uint32_t               pname  /**< */);
d7772 1
a7772 1
xcb_glx_get_convolution_parameteriv_data (const xcb_glx_get_convolution_parameteriv_reply_t *R  /**< */);
d7775 1
a7775 1
xcb_glx_get_convolution_parameteriv_data_length (const xcb_glx_get_convolution_parameteriv_reply_t *R  /**< */);
d7778 1
a7778 1
xcb_glx_get_convolution_parameteriv_data_end (const xcb_glx_get_convolution_parameteriv_reply_t *R  /**< */);
d7795 1
a7795 1
xcb_glx_get_convolution_parameteriv_reply (xcb_connection_t                              *c  /**< */,
d7797 1
a7797 1
                                           xcb_generic_error_t                          **e  /**< */);
d7800 1
a7800 1
xcb_glx_get_separable_filter_sizeof (const void  *_buffer  /**< */);
d7811 6
a7816 6
xcb_glx_get_separable_filter (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               target  /**< */,
                              uint32_t               format  /**< */,
                              uint32_t               type  /**< */,
                              uint8_t                swap_bytes  /**< */);
d7830 6
a7835 6
xcb_glx_get_separable_filter_unchecked (xcb_connection_t      *c  /**< */,
                                        xcb_glx_context_tag_t  context_tag  /**< */,
                                        uint32_t               target  /**< */,
                                        uint32_t               format  /**< */,
                                        uint32_t               type  /**< */,
                                        uint8_t                swap_bytes  /**< */);
d7838 1
a7838 1
xcb_glx_get_separable_filter_rows_and_cols (const xcb_glx_get_separable_filter_reply_t *R  /**< */);
d7841 1
a7841 1
xcb_glx_get_separable_filter_rows_and_cols_length (const xcb_glx_get_separable_filter_reply_t *R  /**< */);
d7844 1
a7844 1
xcb_glx_get_separable_filter_rows_and_cols_end (const xcb_glx_get_separable_filter_reply_t *R  /**< */);
d7861 1
a7861 1
xcb_glx_get_separable_filter_reply (xcb_connection_t                       *c  /**< */,
d7863 1
a7863 1
                                    xcb_generic_error_t                   **e  /**< */);
d7866 1
a7866 1
xcb_glx_get_histogram_sizeof (const void  *_buffer  /**< */);
d7877 7
a7883 7
xcb_glx_get_histogram (xcb_connection_t      *c  /**< */,
                       xcb_glx_context_tag_t  context_tag  /**< */,
                       uint32_t               target  /**< */,
                       uint32_t               format  /**< */,
                       uint32_t               type  /**< */,
                       uint8_t                swap_bytes  /**< */,
                       uint8_t                reset  /**< */);
d7897 7
a7903 7
xcb_glx_get_histogram_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               target  /**< */,
                                 uint32_t               format  /**< */,
                                 uint32_t               type  /**< */,
                                 uint8_t                swap_bytes  /**< */,
                                 uint8_t                reset  /**< */);
d7906 1
a7906 1
xcb_glx_get_histogram_data (const xcb_glx_get_histogram_reply_t *R  /**< */);
d7909 1
a7909 1
xcb_glx_get_histogram_data_length (const xcb_glx_get_histogram_reply_t *R  /**< */);
d7912 1
a7912 1
xcb_glx_get_histogram_data_end (const xcb_glx_get_histogram_reply_t *R  /**< */);
d7929 1
a7929 1
xcb_glx_get_histogram_reply (xcb_connection_t                *c  /**< */,
d7931 1
a7931 1
                             xcb_generic_error_t            **e  /**< */);
d7934 1
a7934 1
xcb_glx_get_histogram_parameterfv_sizeof (const void  *_buffer  /**< */);
d7945 4
a7948 4
xcb_glx_get_histogram_parameterfv (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               target  /**< */,
                                   uint32_t               pname  /**< */);
d7962 4
a7965 4
xcb_glx_get_histogram_parameterfv_unchecked (xcb_connection_t      *c  /**< */,
                                             xcb_glx_context_tag_t  context_tag  /**< */,
                                             uint32_t               target  /**< */,
                                             uint32_t               pname  /**< */);
d7968 1
a7968 1
xcb_glx_get_histogram_parameterfv_data (const xcb_glx_get_histogram_parameterfv_reply_t *R  /**< */);
d7971 1
a7971 1
xcb_glx_get_histogram_parameterfv_data_length (const xcb_glx_get_histogram_parameterfv_reply_t *R  /**< */);
d7974 1
a7974 1
xcb_glx_get_histogram_parameterfv_data_end (const xcb_glx_get_histogram_parameterfv_reply_t *R  /**< */);
d7991 1
a7991 1
xcb_glx_get_histogram_parameterfv_reply (xcb_connection_t                            *c  /**< */,
d7993 1
a7993 1
                                         xcb_generic_error_t                        **e  /**< */);
d7996 1
a7996 1
xcb_glx_get_histogram_parameteriv_sizeof (const void  *_buffer  /**< */);
d8007 4
a8010 4
xcb_glx_get_histogram_parameteriv (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               target  /**< */,
                                   uint32_t               pname  /**< */);
d8024 4
a8027 4
xcb_glx_get_histogram_parameteriv_unchecked (xcb_connection_t      *c  /**< */,
                                             xcb_glx_context_tag_t  context_tag  /**< */,
                                             uint32_t               target  /**< */,
                                             uint32_t               pname  /**< */);
d8030 1
a8030 1
xcb_glx_get_histogram_parameteriv_data (const xcb_glx_get_histogram_parameteriv_reply_t *R  /**< */);
d8033 1
a8033 1
xcb_glx_get_histogram_parameteriv_data_length (const xcb_glx_get_histogram_parameteriv_reply_t *R  /**< */);
d8036 1
a8036 1
xcb_glx_get_histogram_parameteriv_data_end (const xcb_glx_get_histogram_parameteriv_reply_t *R  /**< */);
d8053 1
a8053 1
xcb_glx_get_histogram_parameteriv_reply (xcb_connection_t                            *c  /**< */,
d8055 1
a8055 1
                                         xcb_generic_error_t                        **e  /**< */);
d8058 1
a8058 1
xcb_glx_get_minmax_sizeof (const void  *_buffer  /**< */);
d8069 7
a8075 7
xcb_glx_get_minmax (xcb_connection_t      *c  /**< */,
                    xcb_glx_context_tag_t  context_tag  /**< */,
                    uint32_t               target  /**< */,
                    uint32_t               format  /**< */,
                    uint32_t               type  /**< */,
                    uint8_t                swap_bytes  /**< */,
                    uint8_t                reset  /**< */);
d8089 7
a8095 7
xcb_glx_get_minmax_unchecked (xcb_connection_t      *c  /**< */,
                              xcb_glx_context_tag_t  context_tag  /**< */,
                              uint32_t               target  /**< */,
                              uint32_t               format  /**< */,
                              uint32_t               type  /**< */,
                              uint8_t                swap_bytes  /**< */,
                              uint8_t                reset  /**< */);
d8098 1
a8098 1
xcb_glx_get_minmax_data (const xcb_glx_get_minmax_reply_t *R  /**< */);
d8101 1
a8101 1
xcb_glx_get_minmax_data_length (const xcb_glx_get_minmax_reply_t *R  /**< */);
d8104 1
a8104 1
xcb_glx_get_minmax_data_end (const xcb_glx_get_minmax_reply_t *R  /**< */);
d8121 1
a8121 1
xcb_glx_get_minmax_reply (xcb_connection_t             *c  /**< */,
d8123 1
a8123 1
                          xcb_generic_error_t         **e  /**< */);
d8126 1
a8126 1
xcb_glx_get_minmax_parameterfv_sizeof (const void  *_buffer  /**< */);
d8137 4
a8140 4
xcb_glx_get_minmax_parameterfv (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                uint32_t               target  /**< */,
                                uint32_t               pname  /**< */);
d8154 4
a8157 4
xcb_glx_get_minmax_parameterfv_unchecked (xcb_connection_t      *c  /**< */,
                                          xcb_glx_context_tag_t  context_tag  /**< */,
                                          uint32_t               target  /**< */,
                                          uint32_t               pname  /**< */);
d8160 1
a8160 1
xcb_glx_get_minmax_parameterfv_data (const xcb_glx_get_minmax_parameterfv_reply_t *R  /**< */);
d8163 1
a8163 1
xcb_glx_get_minmax_parameterfv_data_length (const xcb_glx_get_minmax_parameterfv_reply_t *R  /**< */);
d8166 1
a8166 1
xcb_glx_get_minmax_parameterfv_data_end (const xcb_glx_get_minmax_parameterfv_reply_t *R  /**< */);
d8183 1
a8183 1
xcb_glx_get_minmax_parameterfv_reply (xcb_connection_t                         *c  /**< */,
d8185 1
a8185 1
                                      xcb_generic_error_t                     **e  /**< */);
d8188 1
a8188 1
xcb_glx_get_minmax_parameteriv_sizeof (const void  *_buffer  /**< */);
d8199 4
a8202 4
xcb_glx_get_minmax_parameteriv (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                uint32_t               target  /**< */,
                                uint32_t               pname  /**< */);
d8216 4
a8219 4
xcb_glx_get_minmax_parameteriv_unchecked (xcb_connection_t      *c  /**< */,
                                          xcb_glx_context_tag_t  context_tag  /**< */,
                                          uint32_t               target  /**< */,
                                          uint32_t               pname  /**< */);
d8222 1
a8222 1
xcb_glx_get_minmax_parameteriv_data (const xcb_glx_get_minmax_parameteriv_reply_t *R  /**< */);
d8225 1
a8225 1
xcb_glx_get_minmax_parameteriv_data_length (const xcb_glx_get_minmax_parameteriv_reply_t *R  /**< */);
d8228 1
a8228 1
xcb_glx_get_minmax_parameteriv_data_end (const xcb_glx_get_minmax_parameteriv_reply_t *R  /**< */);
d8245 1
a8245 1
xcb_glx_get_minmax_parameteriv_reply (xcb_connection_t                         *c  /**< */,
d8247 1
a8247 1
                                      xcb_generic_error_t                     **e  /**< */);
d8250 1
a8250 1
xcb_glx_get_compressed_tex_image_arb_sizeof (const void  *_buffer  /**< */);
d8261 4
a8264 4
xcb_glx_get_compressed_tex_image_arb (xcb_connection_t      *c  /**< */,
                                      xcb_glx_context_tag_t  context_tag  /**< */,
                                      uint32_t               target  /**< */,
                                      int32_t                level  /**< */);
d8278 4
a8281 4
xcb_glx_get_compressed_tex_image_arb_unchecked (xcb_connection_t      *c  /**< */,
                                                xcb_glx_context_tag_t  context_tag  /**< */,
                                                uint32_t               target  /**< */,
                                                int32_t                level  /**< */);
d8284 1
a8284 1
xcb_glx_get_compressed_tex_image_arb_data (const xcb_glx_get_compressed_tex_image_arb_reply_t *R  /**< */);
d8287 1
a8287 1
xcb_glx_get_compressed_tex_image_arb_data_length (const xcb_glx_get_compressed_tex_image_arb_reply_t *R  /**< */);
d8290 1
a8290 1
xcb_glx_get_compressed_tex_image_arb_data_end (const xcb_glx_get_compressed_tex_image_arb_reply_t *R  /**< */);
d8307 1
a8307 1
xcb_glx_get_compressed_tex_image_arb_reply (xcb_connection_t                               *c  /**< */,
d8309 1
a8309 1
                                            xcb_generic_error_t                           **e  /**< */);
d8312 1
a8312 1
xcb_glx_delete_queries_arb_sizeof (const void  *_buffer  /**< */);
d8326 4
a8329 4
xcb_glx_delete_queries_arb_checked (xcb_connection_t      *c  /**< */,
                                    xcb_glx_context_tag_t  context_tag  /**< */,
                                    int32_t                n  /**< */,
                                    const uint32_t        *ids  /**< */);
d8340 13
a8352 4
xcb_glx_delete_queries_arb (xcb_connection_t      *c  /**< */,
                            xcb_glx_context_tag_t  context_tag  /**< */,
                            int32_t                n  /**< */,
                            const uint32_t        *ids  /**< */);
d8355 1
a8355 1
xcb_glx_gen_queries_arb_sizeof (const void  *_buffer  /**< */);
d8366 3
a8368 3
xcb_glx_gen_queries_arb (xcb_connection_t      *c  /**< */,
                         xcb_glx_context_tag_t  context_tag  /**< */,
                         int32_t                n  /**< */);
d8382 3
a8384 3
xcb_glx_gen_queries_arb_unchecked (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   int32_t                n  /**< */);
d8387 1
a8387 1
xcb_glx_gen_queries_arb_data (const xcb_glx_gen_queries_arb_reply_t *R  /**< */);
d8390 1
a8390 1
xcb_glx_gen_queries_arb_data_length (const xcb_glx_gen_queries_arb_reply_t *R  /**< */);
d8393 1
a8393 1
xcb_glx_gen_queries_arb_data_end (const xcb_glx_gen_queries_arb_reply_t *R  /**< */);
d8410 1
a8410 1
xcb_glx_gen_queries_arb_reply (xcb_connection_t                  *c  /**< */,
d8412 1
a8412 1
                               xcb_generic_error_t              **e  /**< */);
d8423 3
a8425 3
xcb_glx_is_query_arb (xcb_connection_t      *c  /**< */,
                      xcb_glx_context_tag_t  context_tag  /**< */,
                      uint32_t               id  /**< */);
d8439 3
a8441 3
xcb_glx_is_query_arb_unchecked (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                uint32_t               id  /**< */);
d8458 1
a8458 1
xcb_glx_is_query_arb_reply (xcb_connection_t               *c  /**< */,
d8460 1
a8460 1
                            xcb_generic_error_t           **e  /**< */);
d8463 1
a8463 1
xcb_glx_get_queryiv_arb_sizeof (const void  *_buffer  /**< */);
d8474 4
a8477 4
xcb_glx_get_queryiv_arb (xcb_connection_t      *c  /**< */,
                         xcb_glx_context_tag_t  context_tag  /**< */,
                         uint32_t               target  /**< */,
                         uint32_t               pname  /**< */);
d8491 4
a8494 4
xcb_glx_get_queryiv_arb_unchecked (xcb_connection_t      *c  /**< */,
                                   xcb_glx_context_tag_t  context_tag  /**< */,
                                   uint32_t               target  /**< */,
                                   uint32_t               pname  /**< */);
d8497 1
a8497 1
xcb_glx_get_queryiv_arb_data (const xcb_glx_get_queryiv_arb_reply_t *R  /**< */);
d8500 1
a8500 1
xcb_glx_get_queryiv_arb_data_length (const xcb_glx_get_queryiv_arb_reply_t *R  /**< */);
d8503 1
a8503 1
xcb_glx_get_queryiv_arb_data_end (const xcb_glx_get_queryiv_arb_reply_t *R  /**< */);
d8520 1
a8520 1
xcb_glx_get_queryiv_arb_reply (xcb_connection_t                  *c  /**< */,
d8522 1
a8522 1
                               xcb_generic_error_t              **e  /**< */);
d8525 1
a8525 1
xcb_glx_get_query_objectiv_arb_sizeof (const void  *_buffer  /**< */);
d8536 4
a8539 4
xcb_glx_get_query_objectiv_arb (xcb_connection_t      *c  /**< */,
                                xcb_glx_context_tag_t  context_tag  /**< */,
                                uint32_t               id  /**< */,
                                uint32_t               pname  /**< */);
d8553 4
a8556 4
xcb_glx_get_query_objectiv_arb_unchecked (xcb_connection_t      *c  /**< */,
                                          xcb_glx_context_tag_t  context_tag  /**< */,
                                          uint32_t               id  /**< */,
                                          uint32_t               pname  /**< */);
d8559 1
a8559 1
xcb_glx_get_query_objectiv_arb_data (const xcb_glx_get_query_objectiv_arb_reply_t *R  /**< */);
d8562 1
a8562 1
xcb_glx_get_query_objectiv_arb_data_length (const xcb_glx_get_query_objectiv_arb_reply_t *R  /**< */);
d8565 1
a8565 1
xcb_glx_get_query_objectiv_arb_data_end (const xcb_glx_get_query_objectiv_arb_reply_t *R  /**< */);
d8582 1
a8582 1
xcb_glx_get_query_objectiv_arb_reply (xcb_connection_t                         *c  /**< */,
d8584 1
a8584 1
                                      xcb_generic_error_t                     **e  /**< */);
d8587 1
a8587 1
xcb_glx_get_query_objectuiv_arb_sizeof (const void  *_buffer  /**< */);
d8598 4
a8601 4
xcb_glx_get_query_objectuiv_arb (xcb_connection_t      *c  /**< */,
                                 xcb_glx_context_tag_t  context_tag  /**< */,
                                 uint32_t               id  /**< */,
                                 uint32_t               pname  /**< */);
d8615 4
a8618 4
xcb_glx_get_query_objectuiv_arb_unchecked (xcb_connection_t      *c  /**< */,
                                           xcb_glx_context_tag_t  context_tag  /**< */,
                                           uint32_t               id  /**< */,
                                           uint32_t               pname  /**< */);
d8621 1
a8621 1
xcb_glx_get_query_objectuiv_arb_data (const xcb_glx_get_query_objectuiv_arb_reply_t *R  /**< */);
d8624 1
a8624 1
xcb_glx_get_query_objectuiv_arb_data_length (const xcb_glx_get_query_objectuiv_arb_reply_t *R  /**< */);
d8627 1
a8627 1
xcb_glx_get_query_objectuiv_arb_data_end (const xcb_glx_get_query_objectuiv_arb_reply_t *R  /**< */);
d8644 1
a8644 1
xcb_glx_get_query_objectuiv_arb_reply (xcb_connection_t                          *c  /**< */,
d8646 1
a8646 1
                                       xcb_generic_error_t                      **e  /**< */);
@


1.4
log
@Update build system and generated files for libxcb 1.10.
@
text
@d24 1
a24 1
  
a3126 10

/*****************************************************************************
 **
 ** void xcb_glx_pixmap_next
 ** 
 ** @@param xcb_glx_pixmap_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3138 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_pixmap_end
 ** 
 ** @@param xcb_glx_pixmap_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3149 10

/*****************************************************************************
 **
 ** void xcb_glx_context_next
 ** 
 ** @@param xcb_glx_context_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3161 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_context_end
 ** 
 ** @@param xcb_glx_context_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3172 10

/*****************************************************************************
 **
 ** void xcb_glx_pbuffer_next
 ** 
 ** @@param xcb_glx_pbuffer_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3184 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_pbuffer_end
 ** 
 ** @@param xcb_glx_pbuffer_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3195 10

/*****************************************************************************
 **
 ** void xcb_glx_window_next
 ** 
 ** @@param xcb_glx_window_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3207 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_window_end
 ** 
 ** @@param xcb_glx_window_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3218 10

/*****************************************************************************
 **
 ** void xcb_glx_fbconfig_next
 ** 
 ** @@param xcb_glx_fbconfig_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3230 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_fbconfig_end
 ** 
 ** @@param xcb_glx_fbconfig_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3241 10

/*****************************************************************************
 **
 ** void xcb_glx_drawable_next
 ** 
 ** @@param xcb_glx_drawable_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3253 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_drawable_end
 ** 
 ** @@param xcb_glx_drawable_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3264 10

/*****************************************************************************
 **
 ** void xcb_glx_float32_next
 ** 
 ** @@param xcb_glx_float32_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3276 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_float32_end
 ** 
 ** @@param xcb_glx_float32_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3287 10

/*****************************************************************************
 **
 ** void xcb_glx_float64_next
 ** 
 ** @@param xcb_glx_float64_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3299 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_float64_end
 ** 
 ** @@param xcb_glx_float64_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3310 10

/*****************************************************************************
 **
 ** void xcb_glx_bool32_next
 ** 
 ** @@param xcb_glx_bool32_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3322 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_bool32_end
 ** 
 ** @@param xcb_glx_bool32_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3333 10

/*****************************************************************************
 **
 ** void xcb_glx_context_tag_next
 ** 
 ** @@param xcb_glx_context_tag_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a3345 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_context_tag_end
 ** 
 ** @@param xcb_glx_context_tag_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d3359 1
a3359 1
 * 
a3363 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_render_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3376 1
a3376 1
 * 
a3377 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_render
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3393 1
a3393 1
 * 
a3397 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_render_large_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint16_t               request_num
 ** @@param uint16_t               request_total
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3412 1
a3412 1
 * 
a3413 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_render_large
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint16_t               request_num
 ** @@param uint16_t               request_total
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3428 1
a3428 1
 * 
a3432 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_context_checked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@param xcb_visualid_t     visual
 ** @@param uint32_t           screen
 ** @@param xcb_glx_context_t  share_list
 ** @@param uint8_t            is_direct
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3447 1
a3447 1
 * 
a3448 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_context
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@param xcb_visualid_t     visual
 ** @@param uint32_t           screen
 ** @@param xcb_glx_context_t  share_list
 ** @@param uint8_t            is_direct
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3463 1
a3463 1
 * 
a3467 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_context_checked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3478 1
a3478 1
 * 
a3479 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_context
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3490 1
a3490 1
 * 
a3491 13

/*****************************************************************************
 **
 ** xcb_glx_make_current_cookie_t xcb_glx_make_current
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_drawable_t     drawable
 ** @@param xcb_glx_context_t      context
 ** @@param xcb_glx_context_tag_t  old_context_tag
 ** @@returns xcb_glx_make_current_cookie_t
 **
 *****************************************************************************/
 
d3504 1
a3504 1
 * 
a3508 13

/*****************************************************************************
 **
 ** xcb_glx_make_current_cookie_t xcb_glx_make_current_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_drawable_t     drawable
 ** @@param xcb_glx_context_t      context
 ** @@param xcb_glx_context_tag_t  old_context_tag
 ** @@returns xcb_glx_make_current_cookie_t
 **
 *****************************************************************************/
 
d3522 1
a3522 1
 * 
a3528 12

/*****************************************************************************
 **
 ** xcb_glx_make_current_reply_t * xcb_glx_make_current_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_glx_make_current_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_glx_make_current_reply_t *
 **
 *****************************************************************************/
 
d3540 1
a3540 1
 * 
a3541 11

/*****************************************************************************
 **
 ** xcb_glx_is_direct_cookie_t xcb_glx_is_direct
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@returns xcb_glx_is_direct_cookie_t
 **
 *****************************************************************************/
 
d3552 1
a3552 1
 * 
a3556 11

/*****************************************************************************
 **
 ** xcb_glx_is_direct_cookie_t xcb_glx_is_direct_unchecked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@returns xcb_glx_is_direct_cookie_t
 **
 *****************************************************************************/
 
d3568 1
a3568 1
 * 
a3574 12

/*****************************************************************************
 **
 ** xcb_glx_is_direct_reply_t * xcb_glx_is_direct_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_glx_is_direct_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_glx_is_direct_reply_t *
 **
 *****************************************************************************/
 
d3586 1
a3586 1
 * 
a3587 12

/*****************************************************************************
 **
 ** xcb_glx_query_version_cookie_t xcb_glx_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_glx_query_version_cookie_t
 **
 *****************************************************************************/
 
d3599 1
a3599 1
 * 
a3603 12

/*****************************************************************************
 **
 ** xcb_glx_query_version_cookie_t xcb_glx_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_glx_query_version_cookie_t
 **
 *****************************************************************************/
 
d3616 1
a3616 1
 * 
a3622 12

/*****************************************************************************
 **
 ** xcb_glx_query_version_reply_t * xcb_glx_query_version_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_query_version_reply_t *
 **
 *****************************************************************************/
 
d3634 1
a3634 1
 * 
a3638 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_wait_gl_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3649 1
a3649 1
 * 
a3650 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_wait_gl
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3661 1
a3661 1
 * 
a3665 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_wait_x_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3676 1
a3676 1
 * 
a3677 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_wait_x
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3688 1
a3688 1
 * 
a3692 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_copy_context_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_t      src
 ** @@param xcb_glx_context_t      dest
 ** @@param uint32_t               mask
 ** @@param xcb_glx_context_tag_t  src_context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3706 1
a3706 1
 * 
a3707 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_copy_context
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_t      src
 ** @@param xcb_glx_context_t      dest
 ** @@param uint32_t               mask
 ** @@param xcb_glx_context_tag_t  src_context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3721 1
a3721 1
 * 
a3725 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_swap_buffers_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param xcb_glx_drawable_t     drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3737 1
a3737 1
 * 
a3738 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_swap_buffers
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param xcb_glx_drawable_t     drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3750 1
a3750 1
 * 
a3754 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_use_x_font_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param xcb_font_t             font
 ** @@param uint32_t               first
 ** @@param uint32_t               count
 ** @@param uint32_t               list_base
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3769 1
a3769 1
 * 
a3770 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_use_x_font
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param xcb_font_t             font
 ** @@param uint32_t               first
 ** @@param uint32_t               count
 ** @@param uint32_t               list_base
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3785 1
a3785 1
 * 
a3789 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_glx_pixmap_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param xcb_visualid_t    visual
 ** @@param xcb_pixmap_t      pixmap
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3803 1
a3803 1
 * 
a3804 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_glx_pixmap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param xcb_visualid_t    visual
 ** @@param xcb_pixmap_t      pixmap
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3821 1
a3821 1
 * 
a3822 11

/*****************************************************************************
 **
 ** xcb_glx_get_visual_configs_cookie_t xcb_glx_get_visual_configs
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_glx_get_visual_configs_cookie_t
 **
 *****************************************************************************/
 
d3833 1
a3833 1
 * 
a3837 11

/*****************************************************************************
 **
 ** xcb_glx_get_visual_configs_cookie_t xcb_glx_get_visual_configs_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_glx_get_visual_configs_cookie_t
 **
 *****************************************************************************/
 
a3841 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_get_visual_configs_property_list
 ** 
 ** @@param const xcb_glx_get_visual_configs_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a3844 10

/*****************************************************************************
 **
 ** int xcb_glx_get_visual_configs_property_list_length
 ** 
 ** @@param const xcb_glx_get_visual_configs_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3847 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_visual_configs_property_list_end
 ** 
 ** @@param const xcb_glx_get_visual_configs_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d3858 1
a3858 1
 * 
a3864 12

/*****************************************************************************
 **
 ** xcb_glx_get_visual_configs_reply_t * xcb_glx_get_visual_configs_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_glx_get_visual_configs_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_glx_get_visual_configs_reply_t *
 **
 *****************************************************************************/
 
d3876 1
a3876 1
 * 
a3880 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_glx_pixmap_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3891 1
a3891 1
 * 
a3892 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_glx_pixmap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3907 1
a3907 1
 * 
a3911 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_vendor_private_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param uint32_t               vendor_code
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3925 1
a3925 1
 * 
a3926 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_vendor_private
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param uint32_t               vendor_code
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3944 1
a3944 1
 * 
a3945 14

/*****************************************************************************
 **
 ** xcb_glx_vendor_private_with_reply_cookie_t xcb_glx_vendor_private_with_reply
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param uint32_t               vendor_code
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_glx_vendor_private_with_reply_cookie_t
 **
 *****************************************************************************/
 
d3959 1
a3959 1
 * 
a3963 14

/*****************************************************************************
 **
 ** xcb_glx_vendor_private_with_reply_cookie_t xcb_glx_vendor_private_with_reply_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param uint32_t               vendor_code
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               data_len
 ** @@param const uint8_t         *data
 ** @@returns xcb_glx_vendor_private_with_reply_cookie_t
 **
 *****************************************************************************/
 
a3970 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_vendor_private_with_reply_data_2
 ** 
 ** @@param const xcb_glx_vendor_private_with_reply_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a3973 10

/*****************************************************************************
 **
 ** int xcb_glx_vendor_private_with_reply_data_2_length
 ** 
 ** @@param const xcb_glx_vendor_private_with_reply_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3976 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_vendor_private_with_reply_data_2_end
 ** 
 ** @@param const xcb_glx_vendor_private_with_reply_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d3987 1
a3987 1
 * 
a3993 12

/*****************************************************************************
 **
 ** xcb_glx_vendor_private_with_reply_reply_t * xcb_glx_vendor_private_with_reply_reply
 ** 
 ** @@param xcb_connection_t                            *c
 ** @@param xcb_glx_vendor_private_with_reply_cookie_t   cookie
 ** @@param xcb_generic_error_t                        **e
 ** @@returns xcb_glx_vendor_private_with_reply_reply_t *
 **
 *****************************************************************************/
 
d4005 1
a4005 1
 * 
a4006 11

/*****************************************************************************
 **
 ** xcb_glx_query_extensions_string_cookie_t xcb_glx_query_extensions_string
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_glx_query_extensions_string_cookie_t
 **
 *****************************************************************************/
 
d4017 1
a4017 1
 * 
a4021 11

/*****************************************************************************
 **
 ** xcb_glx_query_extensions_string_cookie_t xcb_glx_query_extensions_string_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_glx_query_extensions_string_cookie_t
 **
 *****************************************************************************/
 
d4033 1
a4033 1
 * 
a4039 12

/*****************************************************************************
 **
 ** xcb_glx_query_extensions_string_reply_t * xcb_glx_query_extensions_string_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_glx_query_extensions_string_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_glx_query_extensions_string_reply_t *
 **
 *****************************************************************************/
 
d4054 1
a4054 1
 * 
a4055 12

/*****************************************************************************
 **
 ** xcb_glx_query_server_string_cookie_t xcb_glx_query_server_string
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          name
 ** @@returns xcb_glx_query_server_string_cookie_t
 **
 *****************************************************************************/
 
d4067 1
a4067 1
 * 
a4071 12

/*****************************************************************************
 **
 ** xcb_glx_query_server_string_cookie_t xcb_glx_query_server_string_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          name
 ** @@returns xcb_glx_query_server_string_cookie_t
 **
 *****************************************************************************/
 
a4076 10

/*****************************************************************************
 **
 ** char * xcb_glx_query_server_string_string
 ** 
 ** @@param const xcb_glx_query_server_string_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a4079 10

/*****************************************************************************
 **
 ** int xcb_glx_query_server_string_string_length
 ** 
 ** @@param const xcb_glx_query_server_string_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4082 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_query_server_string_string_end
 ** 
 ** @@param const xcb_glx_query_server_string_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d4093 1
a4093 1
 * 
a4099 12

/*****************************************************************************
 **
 ** xcb_glx_query_server_string_reply_t * xcb_glx_query_server_string_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_glx_query_server_string_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_glx_query_server_string_reply_t *
 **
 *****************************************************************************/
 
d4114 1
a4114 1
 * 
a4118 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_client_info_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@param uint32_t          str_len
 ** @@param const char       *string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4132 1
a4132 1
 * 
a4133 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_client_info
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@param uint32_t          str_len
 ** @@param const char       *string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4150 1
a4150 1
 * 
a4151 11

/*****************************************************************************
 **
 ** xcb_glx_get_fb_configs_cookie_t xcb_glx_get_fb_configs
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_glx_get_fb_configs_cookie_t
 **
 *****************************************************************************/
 
d4162 1
a4162 1
 * 
a4166 11

/*****************************************************************************
 **
 ** xcb_glx_get_fb_configs_cookie_t xcb_glx_get_fb_configs_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_glx_get_fb_configs_cookie_t
 **
 *****************************************************************************/
 
a4170 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_get_fb_configs_property_list
 ** 
 ** @@param const xcb_glx_get_fb_configs_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a4173 10

/*****************************************************************************
 **
 ** int xcb_glx_get_fb_configs_property_list_length
 ** 
 ** @@param const xcb_glx_get_fb_configs_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4176 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_fb_configs_property_list_end
 ** 
 ** @@param const xcb_glx_get_fb_configs_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d4187 1
a4187 1
 * 
a4193 12

/*****************************************************************************
 **
 ** xcb_glx_get_fb_configs_reply_t * xcb_glx_get_fb_configs_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_glx_get_fb_configs_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_glx_get_fb_configs_reply_t *
 **
 *****************************************************************************/
 
d4208 1
a4208 1
 * 
a4212 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_pixmap_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint32_t            screen
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param xcb_pixmap_t        pixmap
 ** @@param xcb_glx_pixmap_t    glx_pixmap
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4228 1
a4228 1
 * 
a4229 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_pixmap
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint32_t            screen
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param xcb_pixmap_t        pixmap
 ** @@param xcb_glx_pixmap_t    glx_pixmap
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4245 1
a4245 1
 * 
a4249 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_pixmap_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4260 1
a4260 1
 * 
a4261 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_pixmap
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4272 1
a4272 1
 * 
a4276 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_new_context_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_context_t   context
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param uint32_t            screen
 ** @@param uint32_t            render_type
 ** @@param xcb_glx_context_t   share_list
 ** @@param uint8_t             is_direct
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4292 1
a4292 1
 * 
a4293 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_new_context
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_context_t   context
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param uint32_t            screen
 ** @@param uint32_t            render_type
 ** @@param xcb_glx_context_t   share_list
 ** @@param uint8_t             is_direct
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4312 1
a4312 1
 * 
a4313 11

/*****************************************************************************
 **
 ** xcb_glx_query_context_cookie_t xcb_glx_query_context
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@returns xcb_glx_query_context_cookie_t
 **
 *****************************************************************************/
 
d4324 1
a4324 1
 * 
a4328 11

/*****************************************************************************
 **
 ** xcb_glx_query_context_cookie_t xcb_glx_query_context_unchecked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@returns xcb_glx_query_context_cookie_t
 **
 *****************************************************************************/
 
a4332 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_query_context_attribs
 ** 
 ** @@param const xcb_glx_query_context_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a4335 10

/*****************************************************************************
 **
 ** int xcb_glx_query_context_attribs_length
 ** 
 ** @@param const xcb_glx_query_context_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4338 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_query_context_attribs_end
 ** 
 ** @@param const xcb_glx_query_context_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d4349 1
a4349 1
 * 
a4355 12

/*****************************************************************************
 **
 ** xcb_glx_query_context_reply_t * xcb_glx_query_context_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_query_context_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_query_context_reply_t *
 **
 *****************************************************************************/
 
d4367 1
a4367 1
 * 
a4368 14

/*****************************************************************************
 **
 ** xcb_glx_make_context_current_cookie_t xcb_glx_make_context_current
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  old_context_tag
 ** @@param xcb_glx_drawable_t     drawable
 ** @@param xcb_glx_drawable_t     read_drawable
 ** @@param xcb_glx_context_t      context
 ** @@returns xcb_glx_make_context_current_cookie_t
 **
 *****************************************************************************/
 
d4382 1
a4382 1
 * 
a4386 14

/*****************************************************************************
 **
 ** xcb_glx_make_context_current_cookie_t xcb_glx_make_context_current_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  old_context_tag
 ** @@param xcb_glx_drawable_t     drawable
 ** @@param xcb_glx_drawable_t     read_drawable
 ** @@param xcb_glx_context_t      context
 ** @@returns xcb_glx_make_context_current_cookie_t
 **
 *****************************************************************************/
 
d4401 1
a4401 1
 * 
a4407 12

/*****************************************************************************
 **
 ** xcb_glx_make_context_current_reply_t * xcb_glx_make_context_current_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_glx_make_context_current_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_glx_make_context_current_reply_t *
 **
 *****************************************************************************/
 
d4422 1
a4422 1
 * 
a4426 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_pbuffer_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint32_t            screen
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param xcb_glx_pbuffer_t   pbuffer
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4441 1
a4441 1
 * 
a4442 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_pbuffer
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint32_t            screen
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param xcb_glx_pbuffer_t   pbuffer
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4457 1
a4457 1
 * 
a4461 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_pbuffer_checked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_pbuffer_t  pbuffer
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4472 1
a4472 1
 * 
a4473 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_destroy_pbuffer
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_pbuffer_t  pbuffer
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4487 1
a4487 1
 * 
a4488 11

/*****************************************************************************
 **
 ** xcb_glx_get_drawable_attributes_cookie_t xcb_glx_get_drawable_attributes
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_drawable_t  drawable
 ** @@returns xcb_glx_get_drawable_attributes_cookie_t
 **
 *****************************************************************************/
 
d4499 1
a4499 1
 * 
a4503 11

/*****************************************************************************
 **
 ** xcb_glx_get_drawable_attributes_cookie_t xcb_glx_get_drawable_attributes_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_drawable_t  drawable
 ** @@returns xcb_glx_get_drawable_attributes_cookie_t
 **
 *****************************************************************************/
 
a4507 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_get_drawable_attributes_attribs
 ** 
 ** @@param const xcb_glx_get_drawable_attributes_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a4510 10

/*****************************************************************************
 **
 ** int xcb_glx_get_drawable_attributes_attribs_length
 ** 
 ** @@param const xcb_glx_get_drawable_attributes_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4513 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_drawable_attributes_attribs_end
 ** 
 ** @@param const xcb_glx_get_drawable_attributes_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d4524 1
a4524 1
 * 
a4530 12

/*****************************************************************************
 **
 ** xcb_glx_get_drawable_attributes_reply_t * xcb_glx_get_drawable_attributes_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_glx_get_drawable_attributes_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_glx_get_drawable_attributes_reply_t *
 **
 *****************************************************************************/
 
d4545 1
a4545 1
 * 
a4549 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_change_drawable_attributes_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_drawable_t  drawable
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4562 1
a4562 1
 * 
a4563 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_change_drawable_attributes
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_drawable_t  drawable
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4579 1
a4579 1
 * 
a4583 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_window_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint32_t            screen
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param xcb_window_t        window
 ** @@param xcb_glx_window_t    glx_window
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4599 1
a4599 1
 * 
a4600 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_window
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param uint32_t            screen
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param xcb_window_t        window
 ** @@param xcb_glx_window_t    glx_window
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4616 1
a4616 1
 * 
a4620 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_window_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_glx_window_t  glxwindow
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4631 1
a4631 1
 * 
a4632 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_window
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_glx_window_t  glxwindow
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4646 1
a4646 1
 * 
a4650 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_set_client_info_arb_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@param uint32_t          num_versions
 ** @@param uint32_t          gl_str_len
 ** @@param uint32_t          glx_str_len
 ** @@param const uint32_t   *gl_versions
 ** @@param const char       *gl_extension_string
 ** @@param const char       *glx_extension_string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4668 1
a4668 1
 * 
a4669 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_set_client_info_arb
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@param uint32_t          num_versions
 ** @@param uint32_t          gl_str_len
 ** @@param uint32_t          glx_str_len
 ** @@param const uint32_t   *gl_versions
 ** @@param const char       *gl_extension_string
 ** @@param const char       *glx_extension_string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4690 1
a4690 1
 * 
a4694 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_context_attribs_arb_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_context_t   context
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param uint32_t            screen
 ** @@param xcb_glx_context_t   share_list
 ** @@param uint8_t             is_direct
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4711 1
a4711 1
 * 
a4712 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_create_context_attribs_arb
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_glx_context_t   context
 ** @@param xcb_glx_fbconfig_t  fbconfig
 ** @@param uint32_t            screen
 ** @@param xcb_glx_context_t   share_list
 ** @@param uint8_t             is_direct
 ** @@param uint32_t            num_attribs
 ** @@param const uint32_t     *attribs
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4732 1
a4732 1
 * 
a4736 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_set_client_info_2arb_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@param uint32_t          num_versions
 ** @@param uint32_t          gl_str_len
 ** @@param uint32_t          glx_str_len
 ** @@param const uint32_t   *gl_versions
 ** @@param const char       *gl_extension_string
 ** @@param const char       *glx_extension_string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4754 1
a4754 1
 * 
a4755 18

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_set_client_info_2arb
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@param uint32_t          num_versions
 ** @@param uint32_t          gl_str_len
 ** @@param uint32_t          glx_str_len
 ** @@param const uint32_t   *gl_versions
 ** @@param const char       *gl_extension_string
 ** @@param const char       *glx_extension_string
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4773 1
a4773 1
 * 
a4777 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_new_list_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               list
 ** @@param uint32_t               mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4790 1
a4790 1
 * 
a4791 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_new_list
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               list
 ** @@param uint32_t               mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4804 1
a4804 1
 * 
a4808 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_end_list_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4819 1
a4819 1
 * 
a4820 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_end_list
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4831 1
a4831 1
 * 
a4835 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_lists_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               list
 ** @@param int32_t                range
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4848 1
a4848 1
 * 
a4849 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_lists
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               list
 ** @@param int32_t                range
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4862 1
a4862 1
 * 
a4863 12

/*****************************************************************************
 **
 ** xcb_glx_gen_lists_cookie_t xcb_glx_gen_lists
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                range
 ** @@returns xcb_glx_gen_lists_cookie_t
 **
 *****************************************************************************/
 
d4875 1
a4875 1
 * 
a4879 12

/*****************************************************************************
 **
 ** xcb_glx_gen_lists_cookie_t xcb_glx_gen_lists_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                range
 ** @@returns xcb_glx_gen_lists_cookie_t
 **
 *****************************************************************************/
 
d4892 1
a4892 1
 * 
a4898 12

/*****************************************************************************
 **
 ** xcb_glx_gen_lists_reply_t * xcb_glx_gen_lists_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_glx_gen_lists_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_glx_gen_lists_reply_t *
 **
 *****************************************************************************/
 
d4910 1
a4910 1
 * 
a4914 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_feedback_buffer_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                size
 ** @@param int32_t                type
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4927 1
a4927 1
 * 
a4928 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_feedback_buffer
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                size
 ** @@param int32_t                type
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4941 1
a4941 1
 * 
a4945 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_select_buffer_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                size
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4957 1
a4957 1
 * 
a4958 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_select_buffer
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                size
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4973 1
a4973 1
 * 
a4974 12

/*****************************************************************************
 **
 ** xcb_glx_render_mode_cookie_t xcb_glx_render_mode
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               mode
 ** @@returns xcb_glx_render_mode_cookie_t
 **
 *****************************************************************************/
 
d4986 1
a4986 1
 * 
a4990 12

/*****************************************************************************
 **
 ** xcb_glx_render_mode_cookie_t xcb_glx_render_mode_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               mode
 ** @@returns xcb_glx_render_mode_cookie_t
 **
 *****************************************************************************/
 
a4995 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_render_mode_data
 ** 
 ** @@param const xcb_glx_render_mode_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a4998 10

/*****************************************************************************
 **
 ** int xcb_glx_render_mode_data_length
 ** 
 ** @@param const xcb_glx_render_mode_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5001 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_render_mode_data_end
 ** 
 ** @@param const xcb_glx_render_mode_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5012 1
a5012 1
 * 
a5018 12

/*****************************************************************************
 **
 ** xcb_glx_render_mode_reply_t * xcb_glx_render_mode_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_glx_render_mode_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_glx_render_mode_reply_t *
 **
 *****************************************************************************/
 
d5030 1
a5030 1
 * 
a5031 11

/*****************************************************************************
 **
 ** xcb_glx_finish_cookie_t xcb_glx_finish
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_glx_finish_cookie_t
 **
 *****************************************************************************/
 
d5042 1
a5042 1
 * 
a5046 11

/*****************************************************************************
 **
 ** xcb_glx_finish_cookie_t xcb_glx_finish_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_glx_finish_cookie_t
 **
 *****************************************************************************/
 
d5058 1
a5058 1
 * 
a5064 12

/*****************************************************************************
 **
 ** xcb_glx_finish_reply_t * xcb_glx_finish_reply
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_glx_finish_cookie_t   cookie
 ** @@param xcb_generic_error_t     **e
 ** @@returns xcb_glx_finish_reply_t *
 **
 *****************************************************************************/
 
d5076 1
a5076 1
 * 
a5080 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_pixel_storef_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@param xcb_glx_float32_t      datum
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5093 1
a5093 1
 * 
a5094 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_pixel_storef
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@param xcb_glx_float32_t      datum
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5107 1
a5107 1
 * 
a5111 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_pixel_storei_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@param int32_t                datum
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5124 1
a5124 1
 * 
a5125 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_pixel_storei
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@param int32_t                datum
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d5141 1
a5141 1
 * 
a5142 19

/*****************************************************************************
 **
 ** xcb_glx_read_pixels_cookie_t xcb_glx_read_pixels
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                x
 ** @@param int32_t                y
 ** @@param int32_t                width
 ** @@param int32_t                height
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@param uint8_t                lsb_first
 ** @@returns xcb_glx_read_pixels_cookie_t
 **
 *****************************************************************************/
 
d5161 1
a5161 1
 * 
a5165 19

/*****************************************************************************
 **
 ** xcb_glx_read_pixels_cookie_t xcb_glx_read_pixels_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                x
 ** @@param int32_t                y
 ** @@param int32_t                width
 ** @@param int32_t                height
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@param uint8_t                lsb_first
 ** @@returns xcb_glx_read_pixels_cookie_t
 **
 *****************************************************************************/
 
a5177 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_read_pixels_data
 ** 
 ** @@param const xcb_glx_read_pixels_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a5180 10

/*****************************************************************************
 **
 ** int xcb_glx_read_pixels_data_length
 ** 
 ** @@param const xcb_glx_read_pixels_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5183 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_read_pixels_data_end
 ** 
 ** @@param const xcb_glx_read_pixels_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5194 1
a5194 1
 * 
a5200 12

/*****************************************************************************
 **
 ** xcb_glx_read_pixels_reply_t * xcb_glx_read_pixels_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_glx_read_pixels_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_glx_read_pixels_reply_t *
 **
 *****************************************************************************/
 
d5215 1
a5215 1
 * 
a5216 12

/*****************************************************************************
 **
 ** xcb_glx_get_booleanv_cookie_t xcb_glx_get_booleanv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                pname
 ** @@returns xcb_glx_get_booleanv_cookie_t
 **
 *****************************************************************************/
 
d5228 1
a5228 1
 * 
a5232 12

/*****************************************************************************
 **
 ** xcb_glx_get_booleanv_cookie_t xcb_glx_get_booleanv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                pname
 ** @@returns xcb_glx_get_booleanv_cookie_t
 **
 *****************************************************************************/
 
a5237 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_booleanv_data
 ** 
 ** @@param const xcb_glx_get_booleanv_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a5240 10

/*****************************************************************************
 **
 ** int xcb_glx_get_booleanv_data_length
 ** 
 ** @@param const xcb_glx_get_booleanv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5243 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_booleanv_data_end
 ** 
 ** @@param const xcb_glx_get_booleanv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5254 1
a5254 1
 * 
a5260 12

/*****************************************************************************
 **
 ** xcb_glx_get_booleanv_reply_t * xcb_glx_get_booleanv_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_glx_get_booleanv_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_glx_get_booleanv_reply_t *
 **
 *****************************************************************************/
 
d5275 1
a5275 1
 * 
a5276 12

/*****************************************************************************
 **
 ** xcb_glx_get_clip_plane_cookie_t xcb_glx_get_clip_plane
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                plane
 ** @@returns xcb_glx_get_clip_plane_cookie_t
 **
 *****************************************************************************/
 
d5288 1
a5288 1
 * 
a5292 12

/*****************************************************************************
 **
 ** xcb_glx_get_clip_plane_cookie_t xcb_glx_get_clip_plane_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                plane
 ** @@returns xcb_glx_get_clip_plane_cookie_t
 **
 *****************************************************************************/
 
a5297 10

/*****************************************************************************
 **
 ** xcb_glx_float64_t * xcb_glx_get_clip_plane_data
 ** 
 ** @@param const xcb_glx_get_clip_plane_reply_t *R
 ** @@returns xcb_glx_float64_t *
 **
 *****************************************************************************/
 
a5300 10

/*****************************************************************************
 **
 ** int xcb_glx_get_clip_plane_data_length
 ** 
 ** @@param const xcb_glx_get_clip_plane_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5303 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_clip_plane_data_end
 ** 
 ** @@param const xcb_glx_get_clip_plane_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5314 1
a5314 1
 * 
a5320 12

/*****************************************************************************
 **
 ** xcb_glx_get_clip_plane_reply_t * xcb_glx_get_clip_plane_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_glx_get_clip_plane_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_glx_get_clip_plane_reply_t *
 **
 *****************************************************************************/
 
d5335 1
a5335 1
 * 
a5336 12

/*****************************************************************************
 **
 ** xcb_glx_get_doublev_cookie_t xcb_glx_get_doublev
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_doublev_cookie_t
 **
 *****************************************************************************/
 
d5348 1
a5348 1
 * 
a5352 12

/*****************************************************************************
 **
 ** xcb_glx_get_doublev_cookie_t xcb_glx_get_doublev_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_doublev_cookie_t
 **
 *****************************************************************************/
 
a5357 10

/*****************************************************************************
 **
 ** xcb_glx_float64_t * xcb_glx_get_doublev_data
 ** 
 ** @@param const xcb_glx_get_doublev_reply_t *R
 ** @@returns xcb_glx_float64_t *
 **
 *****************************************************************************/
 
a5360 10

/*****************************************************************************
 **
 ** int xcb_glx_get_doublev_data_length
 ** 
 ** @@param const xcb_glx_get_doublev_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5363 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_doublev_data_end
 ** 
 ** @@param const xcb_glx_get_doublev_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5374 1
a5374 1
 * 
a5380 12

/*****************************************************************************
 **
 ** xcb_glx_get_doublev_reply_t * xcb_glx_get_doublev_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_glx_get_doublev_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_glx_get_doublev_reply_t *
 **
 *****************************************************************************/
 
d5392 1
a5392 1
 * 
a5393 11

/*****************************************************************************
 **
 ** xcb_glx_get_error_cookie_t xcb_glx_get_error
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_glx_get_error_cookie_t
 **
 *****************************************************************************/
 
d5404 1
a5404 1
 * 
a5408 11

/*****************************************************************************
 **
 ** xcb_glx_get_error_cookie_t xcb_glx_get_error_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_glx_get_error_cookie_t
 **
 *****************************************************************************/
 
d5420 1
a5420 1
 * 
a5426 12

/*****************************************************************************
 **
 ** xcb_glx_get_error_reply_t * xcb_glx_get_error_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_glx_get_error_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_glx_get_error_reply_t *
 **
 *****************************************************************************/
 
d5441 1
a5441 1
 * 
a5442 12

/*****************************************************************************
 **
 ** xcb_glx_get_floatv_cookie_t xcb_glx_get_floatv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_floatv_cookie_t
 **
 *****************************************************************************/
 
d5454 1
a5454 1
 * 
a5458 12

/*****************************************************************************
 **
 ** xcb_glx_get_floatv_cookie_t xcb_glx_get_floatv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_floatv_cookie_t
 **
 *****************************************************************************/
 
a5463 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_floatv_data
 ** 
 ** @@param const xcb_glx_get_floatv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a5466 10

/*****************************************************************************
 **
 ** int xcb_glx_get_floatv_data_length
 ** 
 ** @@param const xcb_glx_get_floatv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5469 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_floatv_data_end
 ** 
 ** @@param const xcb_glx_get_floatv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5480 1
a5480 1
 * 
a5486 12

/*****************************************************************************
 **
 ** xcb_glx_get_floatv_reply_t * xcb_glx_get_floatv_reply
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_glx_get_floatv_cookie_t   cookie
 ** @@param xcb_generic_error_t         **e
 ** @@returns xcb_glx_get_floatv_reply_t *
 **
 *****************************************************************************/
 
d5501 1
a5501 1
 * 
a5502 12

/*****************************************************************************
 **
 ** xcb_glx_get_integerv_cookie_t xcb_glx_get_integerv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_integerv_cookie_t
 **
 *****************************************************************************/
 
d5514 1
a5514 1
 * 
a5518 12

/*****************************************************************************
 **
 ** xcb_glx_get_integerv_cookie_t xcb_glx_get_integerv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_integerv_cookie_t
 **
 *****************************************************************************/
 
a5523 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_integerv_data
 ** 
 ** @@param const xcb_glx_get_integerv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a5526 10

/*****************************************************************************
 **
 ** int xcb_glx_get_integerv_data_length
 ** 
 ** @@param const xcb_glx_get_integerv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5529 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_integerv_data_end
 ** 
 ** @@param const xcb_glx_get_integerv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5540 1
a5540 1
 * 
a5546 12

/*****************************************************************************
 **
 ** xcb_glx_get_integerv_reply_t * xcb_glx_get_integerv_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_glx_get_integerv_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_glx_get_integerv_reply_t *
 **
 *****************************************************************************/
 
d5561 1
a5561 1
 * 
a5562 13

/*****************************************************************************
 **
 ** xcb_glx_get_lightfv_cookie_t xcb_glx_get_lightfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               light
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_lightfv_cookie_t
 **
 *****************************************************************************/
 
d5575 1
a5575 1
 * 
a5579 13

/*****************************************************************************
 **
 ** xcb_glx_get_lightfv_cookie_t xcb_glx_get_lightfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               light
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_lightfv_cookie_t
 **
 *****************************************************************************/
 
a5585 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_lightfv_data
 ** 
 ** @@param const xcb_glx_get_lightfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a5588 10

/*****************************************************************************
 **
 ** int xcb_glx_get_lightfv_data_length
 ** 
 ** @@param const xcb_glx_get_lightfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5591 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_lightfv_data_end
 ** 
 ** @@param const xcb_glx_get_lightfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5602 1
a5602 1
 * 
a5608 12

/*****************************************************************************
 **
 ** xcb_glx_get_lightfv_reply_t * xcb_glx_get_lightfv_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_glx_get_lightfv_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_glx_get_lightfv_reply_t *
 **
 *****************************************************************************/
 
d5623 1
a5623 1
 * 
a5624 13

/*****************************************************************************
 **
 ** xcb_glx_get_lightiv_cookie_t xcb_glx_get_lightiv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               light
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_lightiv_cookie_t
 **
 *****************************************************************************/
 
d5637 1
a5637 1
 * 
a5641 13

/*****************************************************************************
 **
 ** xcb_glx_get_lightiv_cookie_t xcb_glx_get_lightiv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               light
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_lightiv_cookie_t
 **
 *****************************************************************************/
 
a5647 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_lightiv_data
 ** 
 ** @@param const xcb_glx_get_lightiv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a5650 10

/*****************************************************************************
 **
 ** int xcb_glx_get_lightiv_data_length
 ** 
 ** @@param const xcb_glx_get_lightiv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5653 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_lightiv_data_end
 ** 
 ** @@param const xcb_glx_get_lightiv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5664 1
a5664 1
 * 
a5670 12

/*****************************************************************************
 **
 ** xcb_glx_get_lightiv_reply_t * xcb_glx_get_lightiv_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_glx_get_lightiv_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_glx_get_lightiv_reply_t *
 **
 *****************************************************************************/
 
d5685 1
a5685 1
 * 
a5686 13

/*****************************************************************************
 **
 ** xcb_glx_get_mapdv_cookie_t xcb_glx_get_mapdv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               query
 ** @@returns xcb_glx_get_mapdv_cookie_t
 **
 *****************************************************************************/
 
d5699 1
a5699 1
 * 
a5703 13

/*****************************************************************************
 **
 ** xcb_glx_get_mapdv_cookie_t xcb_glx_get_mapdv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               query
 ** @@returns xcb_glx_get_mapdv_cookie_t
 **
 *****************************************************************************/
 
a5709 10

/*****************************************************************************
 **
 ** xcb_glx_float64_t * xcb_glx_get_mapdv_data
 ** 
 ** @@param const xcb_glx_get_mapdv_reply_t *R
 ** @@returns xcb_glx_float64_t *
 **
 *****************************************************************************/
 
a5712 10

/*****************************************************************************
 **
 ** int xcb_glx_get_mapdv_data_length
 ** 
 ** @@param const xcb_glx_get_mapdv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5715 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_mapdv_data_end
 ** 
 ** @@param const xcb_glx_get_mapdv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5726 1
a5726 1
 * 
a5732 12

/*****************************************************************************
 **
 ** xcb_glx_get_mapdv_reply_t * xcb_glx_get_mapdv_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_glx_get_mapdv_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_glx_get_mapdv_reply_t *
 **
 *****************************************************************************/
 
d5747 1
a5747 1
 * 
a5748 13

/*****************************************************************************
 **
 ** xcb_glx_get_mapfv_cookie_t xcb_glx_get_mapfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               query
 ** @@returns xcb_glx_get_mapfv_cookie_t
 **
 *****************************************************************************/
 
d5761 1
a5761 1
 * 
a5765 13

/*****************************************************************************
 **
 ** xcb_glx_get_mapfv_cookie_t xcb_glx_get_mapfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               query
 ** @@returns xcb_glx_get_mapfv_cookie_t
 **
 *****************************************************************************/
 
a5771 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_mapfv_data
 ** 
 ** @@param const xcb_glx_get_mapfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a5774 10

/*****************************************************************************
 **
 ** int xcb_glx_get_mapfv_data_length
 ** 
 ** @@param const xcb_glx_get_mapfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5777 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_mapfv_data_end
 ** 
 ** @@param const xcb_glx_get_mapfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5788 1
a5788 1
 * 
a5794 12

/*****************************************************************************
 **
 ** xcb_glx_get_mapfv_reply_t * xcb_glx_get_mapfv_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_glx_get_mapfv_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_glx_get_mapfv_reply_t *
 **
 *****************************************************************************/
 
d5809 1
a5809 1
 * 
a5810 13

/*****************************************************************************
 **
 ** xcb_glx_get_mapiv_cookie_t xcb_glx_get_mapiv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               query
 ** @@returns xcb_glx_get_mapiv_cookie_t
 **
 *****************************************************************************/
 
d5823 1
a5823 1
 * 
a5827 13

/*****************************************************************************
 **
 ** xcb_glx_get_mapiv_cookie_t xcb_glx_get_mapiv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               query
 ** @@returns xcb_glx_get_mapiv_cookie_t
 **
 *****************************************************************************/
 
a5833 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_mapiv_data
 ** 
 ** @@param const xcb_glx_get_mapiv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a5836 10

/*****************************************************************************
 **
 ** int xcb_glx_get_mapiv_data_length
 ** 
 ** @@param const xcb_glx_get_mapiv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5839 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_mapiv_data_end
 ** 
 ** @@param const xcb_glx_get_mapiv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5850 1
a5850 1
 * 
a5856 12

/*****************************************************************************
 **
 ** xcb_glx_get_mapiv_reply_t * xcb_glx_get_mapiv_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_glx_get_mapiv_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_glx_get_mapiv_reply_t *
 **
 *****************************************************************************/
 
d5871 1
a5871 1
 * 
a5872 13

/*****************************************************************************
 **
 ** xcb_glx_get_materialfv_cookie_t xcb_glx_get_materialfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               face
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_materialfv_cookie_t
 **
 *****************************************************************************/
 
d5885 1
a5885 1
 * 
a5889 13

/*****************************************************************************
 **
 ** xcb_glx_get_materialfv_cookie_t xcb_glx_get_materialfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               face
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_materialfv_cookie_t
 **
 *****************************************************************************/
 
a5895 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_materialfv_data
 ** 
 ** @@param const xcb_glx_get_materialfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a5898 10

/*****************************************************************************
 **
 ** int xcb_glx_get_materialfv_data_length
 ** 
 ** @@param const xcb_glx_get_materialfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5901 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_materialfv_data_end
 ** 
 ** @@param const xcb_glx_get_materialfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5912 1
a5912 1
 * 
a5918 12

/*****************************************************************************
 **
 ** xcb_glx_get_materialfv_reply_t * xcb_glx_get_materialfv_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_glx_get_materialfv_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_glx_get_materialfv_reply_t *
 **
 *****************************************************************************/
 
d5933 1
a5933 1
 * 
a5934 13

/*****************************************************************************
 **
 ** xcb_glx_get_materialiv_cookie_t xcb_glx_get_materialiv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               face
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_materialiv_cookie_t
 **
 *****************************************************************************/
 
d5947 1
a5947 1
 * 
a5951 13

/*****************************************************************************
 **
 ** xcb_glx_get_materialiv_cookie_t xcb_glx_get_materialiv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               face
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_materialiv_cookie_t
 **
 *****************************************************************************/
 
a5957 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_materialiv_data
 ** 
 ** @@param const xcb_glx_get_materialiv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a5960 10

/*****************************************************************************
 **
 ** int xcb_glx_get_materialiv_data_length
 ** 
 ** @@param const xcb_glx_get_materialiv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a5963 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_materialiv_data_end
 ** 
 ** @@param const xcb_glx_get_materialiv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d5974 1
a5974 1
 * 
a5980 12

/*****************************************************************************
 **
 ** xcb_glx_get_materialiv_reply_t * xcb_glx_get_materialiv_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_glx_get_materialiv_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_glx_get_materialiv_reply_t *
 **
 *****************************************************************************/
 
d5995 1
a5995 1
 * 
a5996 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapfv_cookie_t xcb_glx_get_pixel_mapfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               map
 ** @@returns xcb_glx_get_pixel_mapfv_cookie_t
 **
 *****************************************************************************/
 
d6008 1
a6008 1
 * 
a6012 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapfv_cookie_t xcb_glx_get_pixel_mapfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               map
 ** @@returns xcb_glx_get_pixel_mapfv_cookie_t
 **
 *****************************************************************************/
 
a6017 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_pixel_mapfv_data
 ** 
 ** @@param const xcb_glx_get_pixel_mapfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a6020 10

/*****************************************************************************
 **
 ** int xcb_glx_get_pixel_mapfv_data_length
 ** 
 ** @@param const xcb_glx_get_pixel_mapfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6023 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_pixel_mapfv_data_end
 ** 
 ** @@param const xcb_glx_get_pixel_mapfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6034 1
a6034 1
 * 
a6040 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapfv_reply_t * xcb_glx_get_pixel_mapfv_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_glx_get_pixel_mapfv_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_glx_get_pixel_mapfv_reply_t *
 **
 *****************************************************************************/
 
d6055 1
a6055 1
 * 
a6056 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapuiv_cookie_t xcb_glx_get_pixel_mapuiv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               map
 ** @@returns xcb_glx_get_pixel_mapuiv_cookie_t
 **
 *****************************************************************************/
 
d6068 1
a6068 1
 * 
a6072 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapuiv_cookie_t xcb_glx_get_pixel_mapuiv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               map
 ** @@returns xcb_glx_get_pixel_mapuiv_cookie_t
 **
 *****************************************************************************/
 
a6077 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_get_pixel_mapuiv_data
 ** 
 ** @@param const xcb_glx_get_pixel_mapuiv_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a6080 10

/*****************************************************************************
 **
 ** int xcb_glx_get_pixel_mapuiv_data_length
 ** 
 ** @@param const xcb_glx_get_pixel_mapuiv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6083 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_pixel_mapuiv_data_end
 ** 
 ** @@param const xcb_glx_get_pixel_mapuiv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6094 1
a6094 1
 * 
a6100 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapuiv_reply_t * xcb_glx_get_pixel_mapuiv_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_glx_get_pixel_mapuiv_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_glx_get_pixel_mapuiv_reply_t *
 **
 *****************************************************************************/
 
d6115 1
a6115 1
 * 
a6116 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapusv_cookie_t xcb_glx_get_pixel_mapusv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               map
 ** @@returns xcb_glx_get_pixel_mapusv_cookie_t
 **
 *****************************************************************************/
 
d6128 1
a6128 1
 * 
a6132 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapusv_cookie_t xcb_glx_get_pixel_mapusv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               map
 ** @@returns xcb_glx_get_pixel_mapusv_cookie_t
 **
 *****************************************************************************/
 
a6137 10

/*****************************************************************************
 **
 ** uint16_t * xcb_glx_get_pixel_mapusv_data
 ** 
 ** @@param const xcb_glx_get_pixel_mapusv_reply_t *R
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a6140 10

/*****************************************************************************
 **
 ** int xcb_glx_get_pixel_mapusv_data_length
 ** 
 ** @@param const xcb_glx_get_pixel_mapusv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6143 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_pixel_mapusv_data_end
 ** 
 ** @@param const xcb_glx_get_pixel_mapusv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6154 1
a6154 1
 * 
a6160 12

/*****************************************************************************
 **
 ** xcb_glx_get_pixel_mapusv_reply_t * xcb_glx_get_pixel_mapusv_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_glx_get_pixel_mapusv_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_glx_get_pixel_mapusv_reply_t *
 **
 *****************************************************************************/
 
d6175 1
a6175 1
 * 
a6176 12

/*****************************************************************************
 **
 ** xcb_glx_get_polygon_stipple_cookie_t xcb_glx_get_polygon_stipple
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint8_t                lsb_first
 ** @@returns xcb_glx_get_polygon_stipple_cookie_t
 **
 *****************************************************************************/
 
d6188 1
a6188 1
 * 
a6192 12

/*****************************************************************************
 **
 ** xcb_glx_get_polygon_stipple_cookie_t xcb_glx_get_polygon_stipple_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint8_t                lsb_first
 ** @@returns xcb_glx_get_polygon_stipple_cookie_t
 **
 *****************************************************************************/
 
a6197 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_polygon_stipple_data
 ** 
 ** @@param const xcb_glx_get_polygon_stipple_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a6200 10

/*****************************************************************************
 **
 ** int xcb_glx_get_polygon_stipple_data_length
 ** 
 ** @@param const xcb_glx_get_polygon_stipple_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6203 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_polygon_stipple_data_end
 ** 
 ** @@param const xcb_glx_get_polygon_stipple_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6214 1
a6214 1
 * 
a6220 12

/*****************************************************************************
 **
 ** xcb_glx_get_polygon_stipple_reply_t * xcb_glx_get_polygon_stipple_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_glx_get_polygon_stipple_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_glx_get_polygon_stipple_reply_t *
 **
 *****************************************************************************/
 
d6235 1
a6235 1
 * 
a6236 12

/*****************************************************************************
 **
 ** xcb_glx_get_string_cookie_t xcb_glx_get_string
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               name
 ** @@returns xcb_glx_get_string_cookie_t
 **
 *****************************************************************************/
 
d6248 1
a6248 1
 * 
a6252 12

/*****************************************************************************
 **
 ** xcb_glx_get_string_cookie_t xcb_glx_get_string_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               name
 ** @@returns xcb_glx_get_string_cookie_t
 **
 *****************************************************************************/
 
a6257 10

/*****************************************************************************
 **
 ** char * xcb_glx_get_string_string
 ** 
 ** @@param const xcb_glx_get_string_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a6260 10

/*****************************************************************************
 **
 ** int xcb_glx_get_string_string_length
 ** 
 ** @@param const xcb_glx_get_string_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6263 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_string_string_end
 ** 
 ** @@param const xcb_glx_get_string_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6274 1
a6274 1
 * 
a6280 12

/*****************************************************************************
 **
 ** xcb_glx_get_string_reply_t * xcb_glx_get_string_reply
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_glx_get_string_cookie_t   cookie
 ** @@param xcb_generic_error_t         **e
 ** @@returns xcb_glx_get_string_reply_t *
 **
 *****************************************************************************/
 
d6295 1
a6295 1
 * 
a6296 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_envfv_cookie_t xcb_glx_get_tex_envfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_envfv_cookie_t
 **
 *****************************************************************************/
 
d6309 1
a6309 1
 * 
a6313 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_envfv_cookie_t xcb_glx_get_tex_envfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_envfv_cookie_t
 **
 *****************************************************************************/
 
a6319 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_tex_envfv_data
 ** 
 ** @@param const xcb_glx_get_tex_envfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a6322 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_envfv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_envfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6325 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_envfv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_envfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6336 1
a6336 1
 * 
a6342 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_envfv_reply_t * xcb_glx_get_tex_envfv_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_get_tex_envfv_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_get_tex_envfv_reply_t *
 **
 *****************************************************************************/
 
d6357 1
a6357 1
 * 
a6358 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_enviv_cookie_t xcb_glx_get_tex_enviv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_enviv_cookie_t
 **
 *****************************************************************************/
 
d6371 1
a6371 1
 * 
a6375 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_enviv_cookie_t xcb_glx_get_tex_enviv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_enviv_cookie_t
 **
 *****************************************************************************/
 
a6381 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_tex_enviv_data
 ** 
 ** @@param const xcb_glx_get_tex_enviv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a6384 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_enviv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_enviv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6387 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_enviv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_enviv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6398 1
a6398 1
 * 
a6404 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_enviv_reply_t * xcb_glx_get_tex_enviv_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_get_tex_enviv_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_get_tex_enviv_reply_t *
 **
 *****************************************************************************/
 
d6419 1
a6419 1
 * 
a6420 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_gendv_cookie_t xcb_glx_get_tex_gendv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               coord
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_gendv_cookie_t
 **
 *****************************************************************************/
 
d6433 1
a6433 1
 * 
a6437 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_gendv_cookie_t xcb_glx_get_tex_gendv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               coord
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_gendv_cookie_t
 **
 *****************************************************************************/
 
a6443 10

/*****************************************************************************
 **
 ** xcb_glx_float64_t * xcb_glx_get_tex_gendv_data
 ** 
 ** @@param const xcb_glx_get_tex_gendv_reply_t *R
 ** @@returns xcb_glx_float64_t *
 **
 *****************************************************************************/
 
a6446 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_gendv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_gendv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6449 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_gendv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_gendv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6460 1
a6460 1
 * 
a6466 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_gendv_reply_t * xcb_glx_get_tex_gendv_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_get_tex_gendv_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_get_tex_gendv_reply_t *
 **
 *****************************************************************************/
 
d6481 1
a6481 1
 * 
a6482 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_genfv_cookie_t xcb_glx_get_tex_genfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               coord
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_genfv_cookie_t
 **
 *****************************************************************************/
 
d6495 1
a6495 1
 * 
a6499 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_genfv_cookie_t xcb_glx_get_tex_genfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               coord
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_genfv_cookie_t
 **
 *****************************************************************************/
 
a6505 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_tex_genfv_data
 ** 
 ** @@param const xcb_glx_get_tex_genfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a6508 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_genfv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_genfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6511 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_genfv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_genfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6522 1
a6522 1
 * 
a6528 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_genfv_reply_t * xcb_glx_get_tex_genfv_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_get_tex_genfv_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_get_tex_genfv_reply_t *
 **
 *****************************************************************************/
 
d6543 1
a6543 1
 * 
a6544 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_geniv_cookie_t xcb_glx_get_tex_geniv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               coord
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_geniv_cookie_t
 **
 *****************************************************************************/
 
d6557 1
a6557 1
 * 
a6561 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_geniv_cookie_t xcb_glx_get_tex_geniv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               coord
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_geniv_cookie_t
 **
 *****************************************************************************/
 
a6567 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_tex_geniv_data
 ** 
 ** @@param const xcb_glx_get_tex_geniv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a6570 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_geniv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_geniv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6573 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_geniv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_geniv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6584 1
a6584 1
 * 
a6590 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_geniv_reply_t * xcb_glx_get_tex_geniv_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_get_tex_geniv_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_get_tex_geniv_reply_t *
 **
 *****************************************************************************/
 
d6605 1
a6605 1
 * 
a6606 16

/*****************************************************************************
 **
 ** xcb_glx_get_tex_image_cookie_t xcb_glx_get_tex_image
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_tex_image_cookie_t
 **
 *****************************************************************************/
 
d6622 1
a6622 1
 * 
a6626 16

/*****************************************************************************
 **
 ** xcb_glx_get_tex_image_cookie_t xcb_glx_get_tex_image_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_tex_image_cookie_t
 **
 *****************************************************************************/
 
a6635 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_tex_image_data
 ** 
 ** @@param const xcb_glx_get_tex_image_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a6638 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_image_data_length
 ** 
 ** @@param const xcb_glx_get_tex_image_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6641 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_image_data_end
 ** 
 ** @@param const xcb_glx_get_tex_image_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6652 1
a6652 1
 * 
a6658 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_image_reply_t * xcb_glx_get_tex_image_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_get_tex_image_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_get_tex_image_reply_t *
 **
 *****************************************************************************/
 
d6673 1
a6673 1
 * 
a6674 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_parameterfv_cookie_t xcb_glx_get_tex_parameterfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d6687 1
a6687 1
 * 
a6691 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_parameterfv_cookie_t xcb_glx_get_tex_parameterfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_parameterfv_cookie_t
 **
 *****************************************************************************/
 
a6697 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_tex_parameterfv_data
 ** 
 ** @@param const xcb_glx_get_tex_parameterfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a6700 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_parameterfv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_parameterfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6703 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_parameterfv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_parameterfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6714 1
a6714 1
 * 
a6720 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_parameterfv_reply_t * xcb_glx_get_tex_parameterfv_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_glx_get_tex_parameterfv_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_glx_get_tex_parameterfv_reply_t *
 **
 *****************************************************************************/
 
d6735 1
a6735 1
 * 
a6736 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_parameteriv_cookie_t xcb_glx_get_tex_parameteriv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d6749 1
a6749 1
 * 
a6753 13

/*****************************************************************************
 **
 ** xcb_glx_get_tex_parameteriv_cookie_t xcb_glx_get_tex_parameteriv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_parameteriv_cookie_t
 **
 *****************************************************************************/
 
a6759 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_tex_parameteriv_data
 ** 
 ** @@param const xcb_glx_get_tex_parameteriv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a6762 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_parameteriv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_parameteriv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6765 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_parameteriv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_parameteriv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6776 1
a6776 1
 * 
a6782 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_parameteriv_reply_t * xcb_glx_get_tex_parameteriv_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_glx_get_tex_parameteriv_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_glx_get_tex_parameteriv_reply_t *
 **
 *****************************************************************************/
 
d6797 1
a6797 1
 * 
a6798 14

/*****************************************************************************
 **
 ** xcb_glx_get_tex_level_parameterfv_cookie_t xcb_glx_get_tex_level_parameterfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_level_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d6812 1
a6812 1
 * 
a6816 14

/*****************************************************************************
 **
 ** xcb_glx_get_tex_level_parameterfv_cookie_t xcb_glx_get_tex_level_parameterfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_level_parameterfv_cookie_t
 **
 *****************************************************************************/
 
a6823 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_tex_level_parameterfv_data
 ** 
 ** @@param const xcb_glx_get_tex_level_parameterfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a6826 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_level_parameterfv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_level_parameterfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6829 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_level_parameterfv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_level_parameterfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6840 1
a6840 1
 * 
a6846 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_level_parameterfv_reply_t * xcb_glx_get_tex_level_parameterfv_reply
 ** 
 ** @@param xcb_connection_t                            *c
 ** @@param xcb_glx_get_tex_level_parameterfv_cookie_t   cookie
 ** @@param xcb_generic_error_t                        **e
 ** @@returns xcb_glx_get_tex_level_parameterfv_reply_t *
 **
 *****************************************************************************/
 
d6861 1
a6861 1
 * 
a6862 14

/*****************************************************************************
 **
 ** xcb_glx_get_tex_level_parameteriv_cookie_t xcb_glx_get_tex_level_parameteriv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_level_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d6876 1
a6876 1
 * 
a6880 14

/*****************************************************************************
 **
 ** xcb_glx_get_tex_level_parameteriv_cookie_t xcb_glx_get_tex_level_parameteriv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_tex_level_parameteriv_cookie_t
 **
 *****************************************************************************/
 
a6887 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_tex_level_parameteriv_data
 ** 
 ** @@param const xcb_glx_get_tex_level_parameteriv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a6890 10

/*****************************************************************************
 **
 ** int xcb_glx_get_tex_level_parameteriv_data_length
 ** 
 ** @@param const xcb_glx_get_tex_level_parameteriv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a6893 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_tex_level_parameteriv_data_end
 ** 
 ** @@param const xcb_glx_get_tex_level_parameteriv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d6904 1
a6904 1
 * 
a6910 12

/*****************************************************************************
 **
 ** xcb_glx_get_tex_level_parameteriv_reply_t * xcb_glx_get_tex_level_parameteriv_reply
 ** 
 ** @@param xcb_connection_t                            *c
 ** @@param xcb_glx_get_tex_level_parameteriv_cookie_t   cookie
 ** @@param xcb_generic_error_t                        **e
 ** @@returns xcb_glx_get_tex_level_parameteriv_reply_t *
 **
 *****************************************************************************/
 
d6922 1
a6922 1
 * 
a6923 12

/*****************************************************************************
 **
 ** xcb_glx_is_list_cookie_t xcb_glx_is_list
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               list
 ** @@returns xcb_glx_is_list_cookie_t
 **
 *****************************************************************************/
 
d6935 1
a6935 1
 * 
a6939 12

/*****************************************************************************
 **
 ** xcb_glx_is_list_cookie_t xcb_glx_is_list_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               list
 ** @@returns xcb_glx_is_list_cookie_t
 **
 *****************************************************************************/
 
d6952 1
a6952 1
 * 
a6958 12

/*****************************************************************************
 **
 ** xcb_glx_is_list_reply_t * xcb_glx_is_list_reply
 ** 
 ** @@param xcb_connection_t          *c
 ** @@param xcb_glx_is_list_cookie_t   cookie
 ** @@param xcb_generic_error_t      **e
 ** @@returns xcb_glx_is_list_reply_t *
 **
 *****************************************************************************/
 
d6970 1
a6970 1
 * 
a6974 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_flush_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d6985 1
a6985 1
 * 
a6986 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_flush
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7000 1
a7000 1
 * 
a7001 13

/*****************************************************************************
 **
 ** xcb_glx_are_textures_resident_cookie_t xcb_glx_are_textures_resident
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@param const uint32_t        *textures
 ** @@returns xcb_glx_are_textures_resident_cookie_t
 **
 *****************************************************************************/
 
d7014 1
a7014 1
 * 
a7018 13

/*****************************************************************************
 **
 ** xcb_glx_are_textures_resident_cookie_t xcb_glx_are_textures_resident_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@param const uint32_t        *textures
 ** @@returns xcb_glx_are_textures_resident_cookie_t
 **
 *****************************************************************************/
 
a7024 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_are_textures_resident_data
 ** 
 ** @@param const xcb_glx_are_textures_resident_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a7027 10

/*****************************************************************************
 **
 ** int xcb_glx_are_textures_resident_data_length
 ** 
 ** @@param const xcb_glx_are_textures_resident_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7030 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_are_textures_resident_data_end
 ** 
 ** @@param const xcb_glx_are_textures_resident_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7041 1
a7041 1
 * 
a7047 12

/*****************************************************************************
 **
 ** xcb_glx_are_textures_resident_reply_t * xcb_glx_are_textures_resident_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_glx_are_textures_resident_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_glx_are_textures_resident_reply_t *
 **
 *****************************************************************************/
 
d7062 1
a7062 1
 * 
a7066 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_textures_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@param const uint32_t        *textures
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7079 1
a7079 1
 * 
a7080 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_textures
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@param const uint32_t        *textures
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d7096 1
a7096 1
 * 
a7097 12

/*****************************************************************************
 **
 ** xcb_glx_gen_textures_cookie_t xcb_glx_gen_textures
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@returns xcb_glx_gen_textures_cookie_t
 **
 *****************************************************************************/
 
d7109 1
a7109 1
 * 
a7113 12

/*****************************************************************************
 **
 ** xcb_glx_gen_textures_cookie_t xcb_glx_gen_textures_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@returns xcb_glx_gen_textures_cookie_t
 **
 *****************************************************************************/
 
a7118 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_gen_textures_data
 ** 
 ** @@param const xcb_glx_gen_textures_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a7121 10

/*****************************************************************************
 **
 ** int xcb_glx_gen_textures_data_length
 ** 
 ** @@param const xcb_glx_gen_textures_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7124 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_gen_textures_data_end
 ** 
 ** @@param const xcb_glx_gen_textures_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7135 1
a7135 1
 * 
a7141 12

/*****************************************************************************
 **
 ** xcb_glx_gen_textures_reply_t * xcb_glx_gen_textures_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_glx_gen_textures_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_glx_gen_textures_reply_t *
 **
 *****************************************************************************/
 
d7153 1
a7153 1
 * 
a7154 12

/*****************************************************************************
 **
 ** xcb_glx_is_texture_cookie_t xcb_glx_is_texture
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               texture
 ** @@returns xcb_glx_is_texture_cookie_t
 **
 *****************************************************************************/
 
d7166 1
a7166 1
 * 
a7170 12

/*****************************************************************************
 **
 ** xcb_glx_is_texture_cookie_t xcb_glx_is_texture_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               texture
 ** @@returns xcb_glx_is_texture_cookie_t
 **
 *****************************************************************************/
 
d7183 1
a7183 1
 * 
a7189 12

/*****************************************************************************
 **
 ** xcb_glx_is_texture_reply_t * xcb_glx_is_texture_reply
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_glx_is_texture_cookie_t   cookie
 ** @@param xcb_generic_error_t         **e
 ** @@returns xcb_glx_is_texture_reply_t *
 **
 *****************************************************************************/
 
d7204 1
a7204 1
 * 
a7205 15

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_cookie_t xcb_glx_get_color_table
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_color_table_cookie_t
 **
 *****************************************************************************/
 
d7220 1
a7220 1
 * 
a7224 15

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_cookie_t xcb_glx_get_color_table_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_color_table_cookie_t
 **
 *****************************************************************************/
 
a7232 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_color_table_data
 ** 
 ** @@param const xcb_glx_get_color_table_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a7235 10

/*****************************************************************************
 **
 ** int xcb_glx_get_color_table_data_length
 ** 
 ** @@param const xcb_glx_get_color_table_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7238 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_color_table_data_end
 ** 
 ** @@param const xcb_glx_get_color_table_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7249 1
a7249 1
 * 
a7255 12

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_reply_t * xcb_glx_get_color_table_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_glx_get_color_table_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_glx_get_color_table_reply_t *
 **
 *****************************************************************************/
 
d7270 1
a7270 1
 * 
a7271 13

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_parameterfv_cookie_t xcb_glx_get_color_table_parameterfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_color_table_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d7284 1
a7284 1
 * 
a7288 13

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_parameterfv_cookie_t xcb_glx_get_color_table_parameterfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_color_table_parameterfv_cookie_t
 **
 *****************************************************************************/
 
a7294 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_color_table_parameterfv_data
 ** 
 ** @@param const xcb_glx_get_color_table_parameterfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a7297 10

/*****************************************************************************
 **
 ** int xcb_glx_get_color_table_parameterfv_data_length
 ** 
 ** @@param const xcb_glx_get_color_table_parameterfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7300 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_color_table_parameterfv_data_end
 ** 
 ** @@param const xcb_glx_get_color_table_parameterfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7311 1
a7311 1
 * 
a7317 12

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_parameterfv_reply_t * xcb_glx_get_color_table_parameterfv_reply
 ** 
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_glx_get_color_table_parameterfv_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_glx_get_color_table_parameterfv_reply_t *
 **
 *****************************************************************************/
 
d7332 1
a7332 1
 * 
a7333 13

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_parameteriv_cookie_t xcb_glx_get_color_table_parameteriv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_color_table_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d7346 1
a7346 1
 * 
a7350 13

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_parameteriv_cookie_t xcb_glx_get_color_table_parameteriv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_color_table_parameteriv_cookie_t
 **
 *****************************************************************************/
 
a7356 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_color_table_parameteriv_data
 ** 
 ** @@param const xcb_glx_get_color_table_parameteriv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a7359 10

/*****************************************************************************
 **
 ** int xcb_glx_get_color_table_parameteriv_data_length
 ** 
 ** @@param const xcb_glx_get_color_table_parameteriv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7362 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_color_table_parameteriv_data_end
 ** 
 ** @@param const xcb_glx_get_color_table_parameteriv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7373 1
a7373 1
 * 
a7379 12

/*****************************************************************************
 **
 ** xcb_glx_get_color_table_parameteriv_reply_t * xcb_glx_get_color_table_parameteriv_reply
 ** 
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_glx_get_color_table_parameteriv_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_glx_get_color_table_parameteriv_reply_t *
 **
 *****************************************************************************/
 
d7394 1
a7394 1
 * 
a7395 15

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_filter_cookie_t xcb_glx_get_convolution_filter
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_convolution_filter_cookie_t
 **
 *****************************************************************************/
 
d7410 1
a7410 1
 * 
a7414 15

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_filter_cookie_t xcb_glx_get_convolution_filter_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_convolution_filter_cookie_t
 **
 *****************************************************************************/
 
a7422 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_convolution_filter_data
 ** 
 ** @@param const xcb_glx_get_convolution_filter_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a7425 10

/*****************************************************************************
 **
 ** int xcb_glx_get_convolution_filter_data_length
 ** 
 ** @@param const xcb_glx_get_convolution_filter_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7428 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_convolution_filter_data_end
 ** 
 ** @@param const xcb_glx_get_convolution_filter_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7439 1
a7439 1
 * 
a7445 12

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_filter_reply_t * xcb_glx_get_convolution_filter_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_glx_get_convolution_filter_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_glx_get_convolution_filter_reply_t *
 **
 *****************************************************************************/
 
d7460 1
a7460 1
 * 
a7461 13

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_parameterfv_cookie_t xcb_glx_get_convolution_parameterfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_convolution_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d7474 1
a7474 1
 * 
a7478 13

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_parameterfv_cookie_t xcb_glx_get_convolution_parameterfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_convolution_parameterfv_cookie_t
 **
 *****************************************************************************/
 
a7484 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_convolution_parameterfv_data
 ** 
 ** @@param const xcb_glx_get_convolution_parameterfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a7487 10

/*****************************************************************************
 **
 ** int xcb_glx_get_convolution_parameterfv_data_length
 ** 
 ** @@param const xcb_glx_get_convolution_parameterfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7490 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_convolution_parameterfv_data_end
 ** 
 ** @@param const xcb_glx_get_convolution_parameterfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7501 1
a7501 1
 * 
a7507 12

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_parameterfv_reply_t * xcb_glx_get_convolution_parameterfv_reply
 ** 
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_glx_get_convolution_parameterfv_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_glx_get_convolution_parameterfv_reply_t *
 **
 *****************************************************************************/
 
d7522 1
a7522 1
 * 
a7523 13

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_parameteriv_cookie_t xcb_glx_get_convolution_parameteriv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_convolution_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d7536 1
a7536 1
 * 
a7540 13

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_parameteriv_cookie_t xcb_glx_get_convolution_parameteriv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_convolution_parameteriv_cookie_t
 **
 *****************************************************************************/
 
a7546 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_convolution_parameteriv_data
 ** 
 ** @@param const xcb_glx_get_convolution_parameteriv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a7549 10

/*****************************************************************************
 **
 ** int xcb_glx_get_convolution_parameteriv_data_length
 ** 
 ** @@param const xcb_glx_get_convolution_parameteriv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7552 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_convolution_parameteriv_data_end
 ** 
 ** @@param const xcb_glx_get_convolution_parameteriv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7563 1
a7563 1
 * 
a7569 12

/*****************************************************************************
 **
 ** xcb_glx_get_convolution_parameteriv_reply_t * xcb_glx_get_convolution_parameteriv_reply
 ** 
 ** @@param xcb_connection_t                              *c
 ** @@param xcb_glx_get_convolution_parameteriv_cookie_t   cookie
 ** @@param xcb_generic_error_t                          **e
 ** @@returns xcb_glx_get_convolution_parameteriv_reply_t *
 **
 *****************************************************************************/
 
d7584 1
a7584 1
 * 
a7585 15

/*****************************************************************************
 **
 ** xcb_glx_get_separable_filter_cookie_t xcb_glx_get_separable_filter
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_separable_filter_cookie_t
 **
 *****************************************************************************/
 
d7600 1
a7600 1
 * 
a7604 15

/*****************************************************************************
 **
 ** xcb_glx_get_separable_filter_cookie_t xcb_glx_get_separable_filter_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@returns xcb_glx_get_separable_filter_cookie_t
 **
 *****************************************************************************/
 
a7612 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_separable_filter_rows_and_cols
 ** 
 ** @@param const xcb_glx_get_separable_filter_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a7615 10

/*****************************************************************************
 **
 ** int xcb_glx_get_separable_filter_rows_and_cols_length
 ** 
 ** @@param const xcb_glx_get_separable_filter_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7618 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_separable_filter_rows_and_cols_end
 ** 
 ** @@param const xcb_glx_get_separable_filter_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7629 1
a7629 1
 * 
a7635 12

/*****************************************************************************
 **
 ** xcb_glx_get_separable_filter_reply_t * xcb_glx_get_separable_filter_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_glx_get_separable_filter_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_glx_get_separable_filter_reply_t *
 **
 *****************************************************************************/
 
d7650 1
a7650 1
 * 
a7651 16

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_cookie_t xcb_glx_get_histogram
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@param uint8_t                reset
 ** @@returns xcb_glx_get_histogram_cookie_t
 **
 *****************************************************************************/
 
d7667 1
a7667 1
 * 
a7671 16

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_cookie_t xcb_glx_get_histogram_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@param uint8_t                reset
 ** @@returns xcb_glx_get_histogram_cookie_t
 **
 *****************************************************************************/
 
a7680 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_histogram_data
 ** 
 ** @@param const xcb_glx_get_histogram_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a7683 10

/*****************************************************************************
 **
 ** int xcb_glx_get_histogram_data_length
 ** 
 ** @@param const xcb_glx_get_histogram_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7686 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_histogram_data_end
 ** 
 ** @@param const xcb_glx_get_histogram_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7697 1
a7697 1
 * 
a7703 12

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_reply_t * xcb_glx_get_histogram_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_glx_get_histogram_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_glx_get_histogram_reply_t *
 **
 *****************************************************************************/
 
d7718 1
a7718 1
 * 
a7719 13

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_parameterfv_cookie_t xcb_glx_get_histogram_parameterfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_histogram_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d7732 1
a7732 1
 * 
a7736 13

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_parameterfv_cookie_t xcb_glx_get_histogram_parameterfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_histogram_parameterfv_cookie_t
 **
 *****************************************************************************/
 
a7742 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_histogram_parameterfv_data
 ** 
 ** @@param const xcb_glx_get_histogram_parameterfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a7745 10

/*****************************************************************************
 **
 ** int xcb_glx_get_histogram_parameterfv_data_length
 ** 
 ** @@param const xcb_glx_get_histogram_parameterfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7748 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_histogram_parameterfv_data_end
 ** 
 ** @@param const xcb_glx_get_histogram_parameterfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7759 1
a7759 1
 * 
a7765 12

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_parameterfv_reply_t * xcb_glx_get_histogram_parameterfv_reply
 ** 
 ** @@param xcb_connection_t                            *c
 ** @@param xcb_glx_get_histogram_parameterfv_cookie_t   cookie
 ** @@param xcb_generic_error_t                        **e
 ** @@returns xcb_glx_get_histogram_parameterfv_reply_t *
 **
 *****************************************************************************/
 
d7780 1
a7780 1
 * 
a7781 13

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_parameteriv_cookie_t xcb_glx_get_histogram_parameteriv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_histogram_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d7794 1
a7794 1
 * 
a7798 13

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_parameteriv_cookie_t xcb_glx_get_histogram_parameteriv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_histogram_parameteriv_cookie_t
 **
 *****************************************************************************/
 
a7804 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_histogram_parameteriv_data
 ** 
 ** @@param const xcb_glx_get_histogram_parameteriv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a7807 10

/*****************************************************************************
 **
 ** int xcb_glx_get_histogram_parameteriv_data_length
 ** 
 ** @@param const xcb_glx_get_histogram_parameteriv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7810 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_histogram_parameteriv_data_end
 ** 
 ** @@param const xcb_glx_get_histogram_parameteriv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7821 1
a7821 1
 * 
a7827 12

/*****************************************************************************
 **
 ** xcb_glx_get_histogram_parameteriv_reply_t * xcb_glx_get_histogram_parameteriv_reply
 ** 
 ** @@param xcb_connection_t                            *c
 ** @@param xcb_glx_get_histogram_parameteriv_cookie_t   cookie
 ** @@param xcb_generic_error_t                        **e
 ** @@returns xcb_glx_get_histogram_parameteriv_reply_t *
 **
 *****************************************************************************/
 
d7842 1
a7842 1
 * 
a7843 16

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_cookie_t xcb_glx_get_minmax
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@param uint8_t                reset
 ** @@returns xcb_glx_get_minmax_cookie_t
 **
 *****************************************************************************/
 
d7859 1
a7859 1
 * 
a7863 16

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_cookie_t xcb_glx_get_minmax_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               format
 ** @@param uint32_t               type
 ** @@param uint8_t                swap_bytes
 ** @@param uint8_t                reset
 ** @@returns xcb_glx_get_minmax_cookie_t
 **
 *****************************************************************************/
 
a7872 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_minmax_data
 ** 
 ** @@param const xcb_glx_get_minmax_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a7875 10

/*****************************************************************************
 **
 ** int xcb_glx_get_minmax_data_length
 ** 
 ** @@param const xcb_glx_get_minmax_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7878 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_minmax_data_end
 ** 
 ** @@param const xcb_glx_get_minmax_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7889 1
a7889 1
 * 
a7895 12

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_reply_t * xcb_glx_get_minmax_reply
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_glx_get_minmax_cookie_t   cookie
 ** @@param xcb_generic_error_t         **e
 ** @@returns xcb_glx_get_minmax_reply_t *
 **
 *****************************************************************************/
 
d7910 1
a7910 1
 * 
a7911 13

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_parameterfv_cookie_t xcb_glx_get_minmax_parameterfv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_minmax_parameterfv_cookie_t
 **
 *****************************************************************************/
 
d7924 1
a7924 1
 * 
a7928 13

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_parameterfv_cookie_t xcb_glx_get_minmax_parameterfv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_minmax_parameterfv_cookie_t
 **
 *****************************************************************************/
 
a7934 10

/*****************************************************************************
 **
 ** xcb_glx_float32_t * xcb_glx_get_minmax_parameterfv_data
 ** 
 ** @@param const xcb_glx_get_minmax_parameterfv_reply_t *R
 ** @@returns xcb_glx_float32_t *
 **
 *****************************************************************************/
 
a7937 10

/*****************************************************************************
 **
 ** int xcb_glx_get_minmax_parameterfv_data_length
 ** 
 ** @@param const xcb_glx_get_minmax_parameterfv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a7940 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_minmax_parameterfv_data_end
 ** 
 ** @@param const xcb_glx_get_minmax_parameterfv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d7951 1
a7951 1
 * 
a7957 12

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_parameterfv_reply_t * xcb_glx_get_minmax_parameterfv_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_glx_get_minmax_parameterfv_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_glx_get_minmax_parameterfv_reply_t *
 **
 *****************************************************************************/
 
d7972 1
a7972 1
 * 
a7973 13

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_parameteriv_cookie_t xcb_glx_get_minmax_parameteriv
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_minmax_parameteriv_cookie_t
 **
 *****************************************************************************/
 
d7986 1
a7986 1
 * 
a7990 13

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_parameteriv_cookie_t xcb_glx_get_minmax_parameteriv_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_minmax_parameteriv_cookie_t
 **
 *****************************************************************************/
 
a7996 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_minmax_parameteriv_data
 ** 
 ** @@param const xcb_glx_get_minmax_parameteriv_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a7999 10

/*****************************************************************************
 **
 ** int xcb_glx_get_minmax_parameteriv_data_length
 ** 
 ** @@param const xcb_glx_get_minmax_parameteriv_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8002 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_minmax_parameteriv_data_end
 ** 
 ** @@param const xcb_glx_get_minmax_parameteriv_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d8013 1
a8013 1
 * 
a8019 12

/*****************************************************************************
 **
 ** xcb_glx_get_minmax_parameteriv_reply_t * xcb_glx_get_minmax_parameteriv_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_glx_get_minmax_parameteriv_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_glx_get_minmax_parameteriv_reply_t *
 **
 *****************************************************************************/
 
d8034 1
a8034 1
 * 
a8035 13

/*****************************************************************************
 **
 ** xcb_glx_get_compressed_tex_image_arb_cookie_t xcb_glx_get_compressed_tex_image_arb
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@returns xcb_glx_get_compressed_tex_image_arb_cookie_t
 **
 *****************************************************************************/
 
d8048 1
a8048 1
 * 
a8052 13

/*****************************************************************************
 **
 ** xcb_glx_get_compressed_tex_image_arb_cookie_t xcb_glx_get_compressed_tex_image_arb_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param int32_t                level
 ** @@returns xcb_glx_get_compressed_tex_image_arb_cookie_t
 **
 *****************************************************************************/
 
a8058 10

/*****************************************************************************
 **
 ** uint8_t * xcb_glx_get_compressed_tex_image_arb_data
 ** 
 ** @@param const xcb_glx_get_compressed_tex_image_arb_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a8061 10

/*****************************************************************************
 **
 ** int xcb_glx_get_compressed_tex_image_arb_data_length
 ** 
 ** @@param const xcb_glx_get_compressed_tex_image_arb_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8064 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_compressed_tex_image_arb_data_end
 ** 
 ** @@param const xcb_glx_get_compressed_tex_image_arb_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d8075 1
a8075 1
 * 
a8081 12

/*****************************************************************************
 **
 ** xcb_glx_get_compressed_tex_image_arb_reply_t * xcb_glx_get_compressed_tex_image_arb_reply
 ** 
 ** @@param xcb_connection_t                               *c
 ** @@param xcb_glx_get_compressed_tex_image_arb_cookie_t   cookie
 ** @@param xcb_generic_error_t                           **e
 ** @@returns xcb_glx_get_compressed_tex_image_arb_reply_t *
 **
 *****************************************************************************/
 
d8096 1
a8096 1
 * 
a8100 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_queries_arb_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@param const uint32_t        *ids
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8113 1
a8113 1
 * 
a8114 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_glx_delete_queries_arb
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@param const uint32_t        *ids
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d8130 1
a8130 1
 * 
a8131 12

/*****************************************************************************
 **
 ** xcb_glx_gen_queries_arb_cookie_t xcb_glx_gen_queries_arb
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@returns xcb_glx_gen_queries_arb_cookie_t
 **
 *****************************************************************************/
 
d8143 1
a8143 1
 * 
a8147 12

/*****************************************************************************
 **
 ** xcb_glx_gen_queries_arb_cookie_t xcb_glx_gen_queries_arb_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param int32_t                n
 ** @@returns xcb_glx_gen_queries_arb_cookie_t
 **
 *****************************************************************************/
 
a8152 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_gen_queries_arb_data
 ** 
 ** @@param const xcb_glx_gen_queries_arb_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a8155 10

/*****************************************************************************
 **
 ** int xcb_glx_gen_queries_arb_data_length
 ** 
 ** @@param const xcb_glx_gen_queries_arb_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8158 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_gen_queries_arb_data_end
 ** 
 ** @@param const xcb_glx_gen_queries_arb_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d8169 1
a8169 1
 * 
a8175 12

/*****************************************************************************
 **
 ** xcb_glx_gen_queries_arb_reply_t * xcb_glx_gen_queries_arb_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_glx_gen_queries_arb_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_glx_gen_queries_arb_reply_t *
 **
 *****************************************************************************/
 
d8187 1
a8187 1
 * 
a8188 12

/*****************************************************************************
 **
 ** xcb_glx_is_query_arb_cookie_t xcb_glx_is_query_arb
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               id
 ** @@returns xcb_glx_is_query_arb_cookie_t
 **
 *****************************************************************************/
 
d8200 1
a8200 1
 * 
a8204 12

/*****************************************************************************
 **
 ** xcb_glx_is_query_arb_cookie_t xcb_glx_is_query_arb_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               id
 ** @@returns xcb_glx_is_query_arb_cookie_t
 **
 *****************************************************************************/
 
d8217 1
a8217 1
 * 
a8223 12

/*****************************************************************************
 **
 ** xcb_glx_is_query_arb_reply_t * xcb_glx_is_query_arb_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_glx_is_query_arb_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_glx_is_query_arb_reply_t *
 **
 *****************************************************************************/
 
d8238 1
a8238 1
 * 
a8239 13

/*****************************************************************************
 **
 ** xcb_glx_get_queryiv_arb_cookie_t xcb_glx_get_queryiv_arb
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_queryiv_arb_cookie_t
 **
 *****************************************************************************/
 
d8252 1
a8252 1
 * 
a8256 13

/*****************************************************************************
 **
 ** xcb_glx_get_queryiv_arb_cookie_t xcb_glx_get_queryiv_arb_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               target
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_queryiv_arb_cookie_t
 **
 *****************************************************************************/
 
a8262 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_queryiv_arb_data
 ** 
 ** @@param const xcb_glx_get_queryiv_arb_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a8265 10

/*****************************************************************************
 **
 ** int xcb_glx_get_queryiv_arb_data_length
 ** 
 ** @@param const xcb_glx_get_queryiv_arb_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8268 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_queryiv_arb_data_end
 ** 
 ** @@param const xcb_glx_get_queryiv_arb_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d8279 1
a8279 1
 * 
a8285 12

/*****************************************************************************
 **
 ** xcb_glx_get_queryiv_arb_reply_t * xcb_glx_get_queryiv_arb_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_glx_get_queryiv_arb_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_glx_get_queryiv_arb_reply_t *
 **
 *****************************************************************************/
 
d8300 1
a8300 1
 * 
a8301 13

/*****************************************************************************
 **
 ** xcb_glx_get_query_objectiv_arb_cookie_t xcb_glx_get_query_objectiv_arb
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               id
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_query_objectiv_arb_cookie_t
 **
 *****************************************************************************/
 
d8314 1
a8314 1
 * 
a8318 13

/*****************************************************************************
 **
 ** xcb_glx_get_query_objectiv_arb_cookie_t xcb_glx_get_query_objectiv_arb_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               id
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_query_objectiv_arb_cookie_t
 **
 *****************************************************************************/
 
a8324 10

/*****************************************************************************
 **
 ** int32_t * xcb_glx_get_query_objectiv_arb_data
 ** 
 ** @@param const xcb_glx_get_query_objectiv_arb_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a8327 10

/*****************************************************************************
 **
 ** int xcb_glx_get_query_objectiv_arb_data_length
 ** 
 ** @@param const xcb_glx_get_query_objectiv_arb_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8330 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_query_objectiv_arb_data_end
 ** 
 ** @@param const xcb_glx_get_query_objectiv_arb_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d8341 1
a8341 1
 * 
a8347 12

/*****************************************************************************
 **
 ** xcb_glx_get_query_objectiv_arb_reply_t * xcb_glx_get_query_objectiv_arb_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_glx_get_query_objectiv_arb_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_glx_get_query_objectiv_arb_reply_t *
 **
 *****************************************************************************/
 
d8362 1
a8362 1
 * 
a8363 13

/*****************************************************************************
 **
 ** xcb_glx_get_query_objectuiv_arb_cookie_t xcb_glx_get_query_objectuiv_arb
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               id
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_query_objectuiv_arb_cookie_t
 **
 *****************************************************************************/
 
d8376 1
a8376 1
 * 
a8380 13

/*****************************************************************************
 **
 ** xcb_glx_get_query_objectuiv_arb_cookie_t xcb_glx_get_query_objectuiv_arb_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_glx_context_tag_t  context_tag
 ** @@param uint32_t               id
 ** @@param uint32_t               pname
 ** @@returns xcb_glx_get_query_objectuiv_arb_cookie_t
 **
 *****************************************************************************/
 
a8386 10

/*****************************************************************************
 **
 ** uint32_t * xcb_glx_get_query_objectuiv_arb_data
 ** 
 ** @@param const xcb_glx_get_query_objectuiv_arb_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a8389 10

/*****************************************************************************
 **
 ** int xcb_glx_get_query_objectuiv_arb_data_length
 ** 
 ** @@param const xcb_glx_get_query_objectuiv_arb_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a8392 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_glx_get_query_objectuiv_arb_data_end
 ** 
 ** @@param const xcb_glx_get_query_objectuiv_arb_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d8403 1
a8403 1
 * 
a8409 12

/*****************************************************************************
 **
 ** xcb_glx_get_query_objectuiv_arb_reply_t * xcb_glx_get_query_objectuiv_arb_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_glx_get_query_objectuiv_arb_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_glx_get_query_objectuiv_arb_reply_t *
 **
 *****************************************************************************/
 
@


1.3
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d23 1
a23 1
#define XCB_GLX_MINOR_VERSION 3
d245 20
@


1.2
log
@Update to libxcb 1.8.1. Tested by krw@@, mpi@@, shadchin@@
@
text
@d3529 4
d3534 1
a3534 1
 * Delivers a request to the X server
d3564 1
a3564 1
 * Delivers a request to the X server
d3590 3
d3594 1
a3594 1
 * Delivers a request to the X server
d3628 1
a3628 1
 * Delivers a request to the X server
d3659 1
a3659 1
 * Delivers a request to the X server
d3693 1
a3693 1
 * Delivers a request to the X server
d3724 1
a3724 1
 * Delivers a request to the X server
d3750 1
a3750 1
 * Delivers a request to the X server
d3773 1
a3773 1
 * Delivers a request to the X server
d3800 1
a3800 1
 * Delivers a request to the X server
d3861 1
a3861 1
 * Delivers a request to the X server
d3884 1
a3884 1
 * Delivers a request to the X server
d3941 1
a3941 1
 * Delivers a request to the X server
d3966 1
a3966 1
 * Delivers a request to the X server
d4025 1
a4025 1
 * Delivers a request to the X server
d4051 1
a4051 1
 * Delivers a request to the X server
d4074 1
a4074 1
 * Delivers a request to the X server
d4100 1
a4100 1
 * Delivers a request to the X server
d4123 1
a4123 1
 * Delivers a request to the X server
d4155 1
a4155 1
 * Delivers a request to the X server
d4184 1
a4184 1
 * Delivers a request to the X server
d4212 1
a4212 1
 * Delivers a request to the X server
d4237 1
a4237 1
 * Delivers a request to the X server
d4271 1
a4271 1
 * Delivers a request to the X server
d4302 1
a4302 1
 * Delivers a request to the X server
d4334 1
a4334 1
 * Delivers a request to the X server
d4362 3
d4366 1
a4366 1
 * Delivers a request to the X server
d4389 1
a4389 1
 * Delivers a request to the X server
d4485 1
a4485 1
 * Delivers a request to the X server
d4511 1
a4511 1
 * Delivers a request to the X server
d4533 4
d4538 1
a4538 1
 * Delivers a request to the X server
d4570 1
a4570 1
 * Delivers a request to the X server
d4598 4
d4603 1
a4603 1
 * Delivers a request to the X server
d4632 1
a4632 1
 * Delivers a request to the X server
d4734 1
a4734 1
 * Delivers a request to the X server
d4757 1
a4757 1
 * Delivers a request to the X server
d4813 3
d4817 1
a4817 1
 * Delivers a request to the X server
d4842 1
a4842 1
 * Delivers a request to the X server
d4939 3
d4943 1
a4943 1
 * Delivers a request to the X server
d4975 1
a4975 1
 * Delivers a request to the X server
d5003 3
d5007 1
a5007 1
 * Delivers a request to the X server
d5030 1
a5030 1
 * Delivers a request to the X server
d5125 3
d5129 1
a5129 1
 * Delivers a request to the X server
d5165 1
a5165 1
 * Delivers a request to the X server
d5198 1
a5198 1
 * Delivers a request to the X server
d5224 1
a5224 1
 * Delivers a request to the X server
d5247 1
a5247 1
 * Delivers a request to the X server
d5283 1
a5283 1
 * Delivers a request to the X server
d5315 3
d5319 1
a5319 1
 * Delivers a request to the X server
d5342 1
a5342 1
 * Delivers a request to the X server
d5438 1
a5438 1
 * Delivers a request to the X server
d5467 1
a5467 1
 * Delivers a request to the X server
d5529 3
d5533 1
a5533 1
 * Delivers a request to the X server
d5567 1
a5567 1
 * Delivers a request to the X server
d5598 1
a5598 1
 * Delivers a request to the X server
d5624 1
a5624 1
 * Delivers a request to the X server
d5646 3
d5650 1
a5650 1
 * Delivers a request to the X server
d5673 1
a5673 1
 * Delivers a request to the X server
d5768 3
d5772 1
a5772 1
 * Delivers a request to the X server
d5802 1
a5802 1
 * Delivers a request to the X server
d5828 3
d5832 1
a5832 1
 * Delivers a request to the X server
d5868 1
a5868 1
 * Delivers a request to the X server
d5901 1
a5901 1
 * Delivers a request to the X server
d5927 1
a5927 1
 * Delivers a request to the X server
d5949 3
d5953 1
a5953 1
 * Delivers a request to the X server
d5993 1
a5993 1
 * Delivers a request to the X server
d6029 3
d6033 1
a6033 1
 * Delivers a request to the X server
d6071 1
a6071 1
 * Delivers a request to the X server
d6105 3
d6109 1
a6109 1
 * Delivers a request to the X server
d6149 1
a6149 1
 * Delivers a request to the X server
d6186 1
a6186 1
 * Delivers a request to the X server
d6216 1
a6216 1
 * Delivers a request to the X server
d6243 1
a6243 1
 * Delivers a request to the X server
d6269 1
a6269 1
 * Delivers a request to the X server
d6292 1
a6292 1
 * Delivers a request to the X server
d6322 1
a6322 1
 * Delivers a request to the X server
d6349 1
a6349 1
 * Delivers a request to the X server
d6374 1
a6374 1
 * Delivers a request to the X server
d6433 1
a6433 1
 * Delivers a request to the X server
d6463 1
a6463 1
 * Delivers a request to the X server
d6490 1
a6490 1
 * Delivers a request to the X server
d6518 1
a6518 1
 * Delivers a request to the X server
d6542 3
d6546 1
a6546 1
 * Delivers a request to the X server
d6571 1
a6571 1
 * Delivers a request to the X server
d6669 1
a6669 1
 * Delivers a request to the X server
d6692 1
a6692 1
 * Delivers a request to the X server
d6749 1
a6749 1
 * Delivers a request to the X server
d6779 1
a6779 1
 * Delivers a request to the X server
d6806 1
a6806 1
 * Delivers a request to the X server
d6836 1
a6836 1
 * Delivers a request to the X server
d6862 3
d6866 1
a6866 1
 * Delivers a request to the X server
d6905 1
a6905 1
 * Delivers a request to the X server
d7016 3
d7020 1
a7020 1
 * Delivers a request to the X server
d7045 1
a7045 1
 * Delivers a request to the X server
d7142 3
d7146 1
a7146 1
 * Delivers a request to the X server
d7171 1
a7171 1
 * Delivers a request to the X server
d7268 3
d7272 1
a7272 1
 * Delivers a request to the X server
d7297 1
a7297 1
 * Delivers a request to the X server
d7395 1
a7395 1
 * Delivers a request to the X server
d7418 1
a7418 1
 * Delivers a request to the X server
d7474 3
d7478 1
a7478 1
 * Delivers a request to the X server
d7503 1
a7503 1
 * Delivers a request to the X server
d7600 3
d7604 1
a7604 1
 * Delivers a request to the X server
d7629 1
a7629 1
 * Delivers a request to the X server
d7726 3
d7730 1
a7730 1
 * Delivers a request to the X server
d7757 1
a7757 1
 * Delivers a request to the X server
d7856 3
d7860 1
a7860 1
 * Delivers a request to the X server
d7887 1
a7887 1
 * Delivers a request to the X server
d7986 3
d7990 1
a7990 1
 * Delivers a request to the X server
d8017 1
a8017 1
 * Delivers a request to the X server
d8116 3
d8120 1
a8120 1
 * Delivers a request to the X server
d8147 1
a8147 1
 * Delivers a request to the X server
d8246 3
d8250 1
a8250 1
 * Delivers a request to the X server
d8277 1
a8277 1
 * Delivers a request to the X server
d8376 3
d8380 1
a8380 1
 * Delivers a request to the X server
d8407 1
a8407 1
 * Delivers a request to the X server
d8506 3
d8510 1
a8510 1
 * Delivers a request to the X server
d8537 1
a8537 1
 * Delivers a request to the X server
d8636 3
d8640 1
a8640 1
 * Delivers a request to the X server
d8665 1
a8665 1
 * Delivers a request to the X server
d8762 3
d8766 1
a8766 1
 * Delivers a request to the X server
d8791 1
a8791 1
 * Delivers a request to the X server
d8888 3
d8892 1
a8892 1
 * Delivers a request to the X server
d8917 1
a8917 1
 * Delivers a request to the X server
d9014 3
d9018 1
a9018 1
 * Delivers a request to the X server
d9043 1
a9043 1
 * Delivers a request to the X server
d9140 3
d9144 1
a9144 1
 * Delivers a request to the X server
d9169 1
a9169 1
 * Delivers a request to the X server
d9266 3
d9270 1
a9270 1
 * Delivers a request to the X server
d9297 1
a9297 1
 * Delivers a request to the X server
d9396 3
d9400 1
a9400 1
 * Delivers a request to the X server
d9427 1
a9427 1
 * Delivers a request to the X server
d9526 3
d9530 1
a9530 1
 * Delivers a request to the X server
d9557 1
a9557 1
 * Delivers a request to the X server
d9656 3
d9660 1
a9660 1
 * Delivers a request to the X server
d9687 1
a9687 1
 * Delivers a request to the X server
d9786 3
d9790 1
a9790 1
 * Delivers a request to the X server
d9817 1
a9817 1
 * Delivers a request to the X server
d9916 3
d9920 1
a9920 1
 * Delivers a request to the X server
d9953 1
a9953 1
 * Delivers a request to the X server
d10058 3
d10062 1
a10062 1
 * Delivers a request to the X server
d10089 1
a10089 1
 * Delivers a request to the X server
d10188 3
d10192 1
a10192 1
 * Delivers a request to the X server
d10219 1
a10219 1
 * Delivers a request to the X server
d10318 3
d10322 1
a10322 1
 * Delivers a request to the X server
d10351 1
a10351 1
 * Delivers a request to the X server
d10452 3
d10456 1
a10456 1
 * Delivers a request to the X server
d10485 1
a10485 1
 * Delivers a request to the X server
d10587 1
a10587 1
 * Delivers a request to the X server
d10612 1
a10612 1
 * Delivers a request to the X server
d10671 1
a10671 1
 * Delivers a request to the X server
d10697 1
a10697 1
 * Delivers a request to the X server
d10719 3
d10723 1
a10723 1
 * Delivers a request to the X server
d10750 1
a10750 1
 * Delivers a request to the X server
d10849 3
d10853 1
a10853 1
 * Delivers a request to the X server
d10883 1
a10883 1
 * Delivers a request to the X server
d10909 3
d10913 1
a10913 1
 * Delivers a request to the X server
d10938 1
a10938 1
 * Delivers a request to the X server
d11036 1
a11036 1
 * Delivers a request to the X server
d11061 1
a11061 1
 * Delivers a request to the X server
d11119 3
d11123 1
a11123 1
 * Delivers a request to the X server
d11154 1
a11154 1
 * Delivers a request to the X server
d11257 3
d11261 1
a11261 1
 * Delivers a request to the X server
d11288 1
a11288 1
 * Delivers a request to the X server
d11387 3
d11391 1
a11391 1
 * Delivers a request to the X server
d11418 1
a11418 1
 * Delivers a request to the X server
d11517 3
d11521 1
a11521 1
 * Delivers a request to the X server
d11552 1
a11552 1
 * Delivers a request to the X server
d11655 3
d11659 1
a11659 1
 * Delivers a request to the X server
d11686 1
a11686 1
 * Delivers a request to the X server
d11785 3
d11789 1
a11789 1
 * Delivers a request to the X server
d11816 1
a11816 1
 * Delivers a request to the X server
d11915 3
d11919 1
a11919 1
 * Delivers a request to the X server
d11950 1
a11950 1
 * Delivers a request to the X server
d12053 3
d12057 1
a12057 1
 * Delivers a request to the X server
d12090 1
a12090 1
 * Delivers a request to the X server
d12195 3
d12199 1
a12199 1
 * Delivers a request to the X server
d12226 1
a12226 1
 * Delivers a request to the X server
d12325 3
d12329 1
a12329 1
 * Delivers a request to the X server
d12356 1
a12356 1
 * Delivers a request to the X server
d12455 3
d12459 1
a12459 1
 * Delivers a request to the X server
d12492 1
a12492 1
 * Delivers a request to the X server
d12597 3
d12601 1
a12601 1
 * Delivers a request to the X server
d12628 1
a12628 1
 * Delivers a request to the X server
d12727 3
d12731 1
a12731 1
 * Delivers a request to the X server
d12758 1
a12758 1
 * Delivers a request to the X server
d12857 3
d12861 1
a12861 1
 * Delivers a request to the X server
d12888 1
a12888 1
 * Delivers a request to the X server
d12987 3
d12991 1
a12991 1
 * Delivers a request to the X server
d13021 1
a13021 1
 * Delivers a request to the X server
d13047 3
d13051 1
a13051 1
 * Delivers a request to the X server
d13076 1
a13076 1
 * Delivers a request to the X server
d13174 1
a13174 1
 * Delivers a request to the X server
d13199 1
a13199 1
 * Delivers a request to the X server
d13257 3
d13261 1
a13261 1
 * Delivers a request to the X server
d13288 1
a13288 1
 * Delivers a request to the X server
d13387 3
d13391 1
a13391 1
 * Delivers a request to the X server
d13418 1
a13418 1
 * Delivers a request to the X server
d13517 3
d13521 1
a13521 1
 * Delivers a request to the X server
d13548 1
a13548 1
 * Delivers a request to the X server
@


1.1
log
@Initial revision
@
text
@d218 5
d744 8
a751 8
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    uint32_t         screen; /**<  */
    uint32_t         fbconfig; /**<  */
    xcb_pixmap_t     pixmap; /**<  */
    xcb_glx_pixmap_t glx_pixmap; /**<  */
    uint32_t         num_attribs; /**<  */
d774 10
a783 11
    uint8_t           major_opcode; /**<  */
    uint8_t           minor_opcode; /**<  */
    uint16_t          length; /**<  */
    xcb_glx_context_t context; /**<  */
    uint32_t          fbconfig; /**<  */
    uint32_t          screen; /**<  */
    uint32_t          render_type; /**<  */
    uint32_t          share_list; /**<  */
    uint8_t           is_direct; /**<  */
    uint8_t           reserved1; /**<  */
    uint16_t          reserved2; /**<  */
d958 53
d5114 7
a5120 7
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          fbconfig
 ** @@param xcb_pixmap_t      pixmap
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@param uint32_t          num_attribs
 ** @@param const uint32_t   *attribs
d5126 7
a5132 7
xcb_glx_create_pixmap_checked (xcb_connection_t *c  /**< */,
                               uint32_t          screen  /**< */,
                               uint32_t          fbconfig  /**< */,
                               xcb_pixmap_t      pixmap  /**< */,
                               xcb_glx_pixmap_t  glx_pixmap  /**< */,
                               uint32_t          num_attribs  /**< */,
                               const uint32_t   *attribs  /**< */);
d5147 7
a5153 7
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          fbconfig
 ** @@param xcb_pixmap_t      pixmap
 ** @@param xcb_glx_pixmap_t  glx_pixmap
 ** @@param uint32_t          num_attribs
 ** @@param const uint32_t   *attribs
d5159 7
a5165 7
xcb_glx_create_pixmap (xcb_connection_t *c  /**< */,
                       uint32_t          screen  /**< */,
                       uint32_t          fbconfig  /**< */,
                       xcb_pixmap_t      pixmap  /**< */,
                       xcb_glx_pixmap_t  glx_pixmap  /**< */,
                       uint32_t          num_attribs  /**< */,
                       const uint32_t   *attribs  /**< */);
d5232 7
a5238 9
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@param uint32_t           fbconfig
 ** @@param uint32_t           screen
 ** @@param uint32_t           render_type
 ** @@param uint32_t           share_list
 ** @@param uint8_t            is_direct
 ** @@param uint8_t            reserved1
 ** @@param uint16_t           reserved2
d5244 7
a5250 9
xcb_glx_create_new_context_checked (xcb_connection_t  *c  /**< */,
                                    xcb_glx_context_t  context  /**< */,
                                    uint32_t           fbconfig  /**< */,
                                    uint32_t           screen  /**< */,
                                    uint32_t           render_type  /**< */,
                                    uint32_t           share_list  /**< */,
                                    uint8_t            is_direct  /**< */,
                                    uint8_t            reserved1  /**< */,
                                    uint16_t           reserved2  /**< */);
d5265 7
a5271 9
 ** @@param xcb_connection_t  *c
 ** @@param xcb_glx_context_t  context
 ** @@param uint32_t           fbconfig
 ** @@param uint32_t           screen
 ** @@param uint32_t           render_type
 ** @@param uint32_t           share_list
 ** @@param uint8_t            is_direct
 ** @@param uint8_t            reserved1
 ** @@param uint16_t           reserved2
d5277 7
a5283 9
xcb_glx_create_new_context (xcb_connection_t  *c  /**< */,
                            xcb_glx_context_t  context  /**< */,
                            uint32_t           fbconfig  /**< */,
                            uint32_t           screen  /**< */,
                            uint32_t           render_type  /**< */,
                            uint32_t           share_list  /**< */,
                            uint8_t            is_direct  /**< */,
                            uint8_t            reserved1  /**< */,
                            uint16_t           reserved2  /**< */);
d5903 227
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
