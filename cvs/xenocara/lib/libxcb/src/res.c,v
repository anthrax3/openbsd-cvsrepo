head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.4
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	mKDGsTNpiR2zRHYQ;

1.4
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	01TEvO4uNHLqFv7N;

1.3
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.44;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.44;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from res.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "res.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"

xcb_extension_t xcb_res_id = { "X-Resource", 0 };

void
xcb_res_client_next (xcb_res_client_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_res_client_t);
}

xcb_generic_iterator_t
xcb_res_client_end (xcb_res_client_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_res_type_next (xcb_res_type_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_res_type_t);
}

xcb_generic_iterator_t
xcb_res_type_end (xcb_res_type_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_res_client_id_spec_next (xcb_res_client_id_spec_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_res_client_id_spec_t);
}

xcb_generic_iterator_t
xcb_res_client_id_spec_end (xcb_res_client_id_spec_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_res_client_id_value_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_res_client_id_value_t *_aux = (xcb_res_client_id_value_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_res_client_id_value_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* value */
    xcb_block_len += _aux->length * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint32_t *
xcb_res_client_id_value_value (const xcb_res_client_id_value_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_res_client_id_value_value_length (const xcb_res_client_id_value_t *R)
{
    return R->length;
}

xcb_generic_iterator_t
xcb_res_client_id_value_value_end (const xcb_res_client_id_value_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + (R->length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_res_client_id_value_next (xcb_res_client_id_value_iterator_t *i)
{
    xcb_res_client_id_value_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_res_client_id_value_t *)(((char *)R) + xcb_res_client_id_value_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_res_client_id_value_t *) child.data;
}

xcb_generic_iterator_t
xcb_res_client_id_value_end (xcb_res_client_id_value_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_res_client_id_value_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

void
xcb_res_resource_id_spec_next (xcb_res_resource_id_spec_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_res_resource_id_spec_t);
}

xcb_generic_iterator_t
xcb_res_resource_id_spec_end (xcb_res_resource_id_spec_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_res_resource_size_spec_next (xcb_res_resource_size_spec_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_res_resource_size_spec_t);
}

xcb_generic_iterator_t
xcb_res_resource_size_spec_end (xcb_res_resource_size_spec_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_res_resource_size_value_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_res_resource_size_value_t *_aux = (xcb_res_resource_size_value_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_res_resource_size_value_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* cross_references */
    xcb_block_len += _aux->num_cross_references * sizeof(xcb_res_resource_size_spec_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_res_resource_size_spec_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_res_resource_size_spec_t *
xcb_res_resource_size_value_cross_references (const xcb_res_resource_size_value_t *R)
{
    return (xcb_res_resource_size_spec_t *) (R + 1);
}

int
xcb_res_resource_size_value_cross_references_length (const xcb_res_resource_size_value_t *R)
{
    return R->num_cross_references;
}

xcb_res_resource_size_spec_iterator_t
xcb_res_resource_size_value_cross_references_iterator (const xcb_res_resource_size_value_t *R)
{
    xcb_res_resource_size_spec_iterator_t i;
    i.data = (xcb_res_resource_size_spec_t *) (R + 1);
    i.rem = R->num_cross_references;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_res_resource_size_value_next (xcb_res_resource_size_value_iterator_t *i)
{
    xcb_res_resource_size_value_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_res_resource_size_value_t *)(((char *)R) + xcb_res_resource_size_value_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_res_resource_size_value_t *) child.data;
}

xcb_generic_iterator_t
xcb_res_resource_size_value_end (xcb_res_resource_size_value_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_res_resource_size_value_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

xcb_res_query_version_cookie_t
xcb_res_query_version (xcb_connection_t *c,
                       uint8_t           client_major,
                       uint8_t           client_minor)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_res_id,
        .opcode = XCB_RES_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_res_query_version_cookie_t xcb_ret;
    xcb_res_query_version_request_t xcb_out;

    xcb_out.client_major = client_major;
    xcb_out.client_minor = client_minor;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_res_query_version_cookie_t
xcb_res_query_version_unchecked (xcb_connection_t *c,
                                 uint8_t           client_major,
                                 uint8_t           client_minor)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_res_id,
        .opcode = XCB_RES_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_res_query_version_cookie_t xcb_ret;
    xcb_res_query_version_request_t xcb_out;

    xcb_out.client_major = client_major;
    xcb_out.client_minor = client_minor;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_res_query_version_reply_t *
xcb_res_query_version_reply (xcb_connection_t                *c,
                             xcb_res_query_version_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_res_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_res_query_clients_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_res_query_clients_reply_t *_aux = (xcb_res_query_clients_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_res_query_clients_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* clients */
    xcb_block_len += _aux->num_clients * sizeof(xcb_res_client_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_res_client_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_res_query_clients_cookie_t
xcb_res_query_clients (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_res_id,
        .opcode = XCB_RES_QUERY_CLIENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_res_query_clients_cookie_t xcb_ret;
    xcb_res_query_clients_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_res_query_clients_cookie_t
xcb_res_query_clients_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_res_id,
        .opcode = XCB_RES_QUERY_CLIENTS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_res_query_clients_cookie_t xcb_ret;
    xcb_res_query_clients_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_res_client_t *
xcb_res_query_clients_clients (const xcb_res_query_clients_reply_t *R)
{
    return (xcb_res_client_t *) (R + 1);
}

int
xcb_res_query_clients_clients_length (const xcb_res_query_clients_reply_t *R)
{
    return R->num_clients;
}

xcb_res_client_iterator_t
xcb_res_query_clients_clients_iterator (const xcb_res_query_clients_reply_t *R)
{
    xcb_res_client_iterator_t i;
    i.data = (xcb_res_client_t *) (R + 1);
    i.rem = R->num_clients;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_res_query_clients_reply_t *
xcb_res_query_clients_reply (xcb_connection_t                *c,
                             xcb_res_query_clients_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_res_query_clients_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_res_query_client_resources_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_res_query_client_resources_reply_t *_aux = (xcb_res_query_client_resources_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_res_query_client_resources_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* types */
    xcb_block_len += _aux->num_types * sizeof(xcb_res_type_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_res_type_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_res_query_client_resources_cookie_t
xcb_res_query_client_resources (xcb_connection_t *c,
                                uint32_t          xid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_res_id,
        .opcode = XCB_RES_QUERY_CLIENT_RESOURCES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_res_query_client_resources_cookie_t xcb_ret;
    xcb_res_query_client_resources_request_t xcb_out;

    xcb_out.xid = xid;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_res_query_client_resources_cookie_t
xcb_res_query_client_resources_unchecked (xcb_connection_t *c,
                                          uint32_t          xid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_res_id,
        .opcode = XCB_RES_QUERY_CLIENT_RESOURCES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_res_query_client_resources_cookie_t xcb_ret;
    xcb_res_query_client_resources_request_t xcb_out;

    xcb_out.xid = xid;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_res_type_t *
xcb_res_query_client_resources_types (const xcb_res_query_client_resources_reply_t *R)
{
    return (xcb_res_type_t *) (R + 1);
}

int
xcb_res_query_client_resources_types_length (const xcb_res_query_client_resources_reply_t *R)
{
    return R->num_types;
}

xcb_res_type_iterator_t
xcb_res_query_client_resources_types_iterator (const xcb_res_query_client_resources_reply_t *R)
{
    xcb_res_type_iterator_t i;
    i.data = (xcb_res_type_t *) (R + 1);
    i.rem = R->num_types;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_res_query_client_resources_reply_t *
xcb_res_query_client_resources_reply (xcb_connection_t                         *c,
                                      xcb_res_query_client_resources_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e)
{
    return (xcb_res_query_client_resources_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_res_query_client_pixmap_bytes_cookie_t
xcb_res_query_client_pixmap_bytes (xcb_connection_t *c,
                                   uint32_t          xid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_res_id,
        .opcode = XCB_RES_QUERY_CLIENT_PIXMAP_BYTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_res_query_client_pixmap_bytes_cookie_t xcb_ret;
    xcb_res_query_client_pixmap_bytes_request_t xcb_out;

    xcb_out.xid = xid;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_res_query_client_pixmap_bytes_cookie_t
xcb_res_query_client_pixmap_bytes_unchecked (xcb_connection_t *c,
                                             uint32_t          xid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_res_id,
        .opcode = XCB_RES_QUERY_CLIENT_PIXMAP_BYTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_res_query_client_pixmap_bytes_cookie_t xcb_ret;
    xcb_res_query_client_pixmap_bytes_request_t xcb_out;

    xcb_out.xid = xid;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_res_query_client_pixmap_bytes_reply_t *
xcb_res_query_client_pixmap_bytes_reply (xcb_connection_t                            *c,
                                         xcb_res_query_client_pixmap_bytes_cookie_t   cookie  /**< */,
                                         xcb_generic_error_t                        **e)
{
    return (xcb_res_query_client_pixmap_bytes_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_res_query_client_ids_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_res_query_client_ids_request_t *_aux = (xcb_res_query_client_ids_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_res_query_client_ids_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* specs */
    xcb_block_len += _aux->num_specs * sizeof(xcb_res_client_id_spec_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_res_client_id_spec_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_res_query_client_ids_cookie_t
xcb_res_query_client_ids (xcb_connection_t               *c,
                          uint32_t                        num_specs,
                          const xcb_res_client_id_spec_t *specs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_res_id,
        .opcode = XCB_RES_QUERY_CLIENT_IDS,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_res_query_client_ids_cookie_t xcb_ret;
    xcb_res_query_client_ids_request_t xcb_out;

    xcb_out.num_specs = num_specs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_res_client_id_spec_t specs */
    xcb_parts[4].iov_base = (char *) specs;
    xcb_parts[4].iov_len = num_specs * sizeof(xcb_res_client_id_spec_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_res_query_client_ids_cookie_t
xcb_res_query_client_ids_unchecked (xcb_connection_t               *c,
                                    uint32_t                        num_specs,
                                    const xcb_res_client_id_spec_t *specs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_res_id,
        .opcode = XCB_RES_QUERY_CLIENT_IDS,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_res_query_client_ids_cookie_t xcb_ret;
    xcb_res_query_client_ids_request_t xcb_out;

    xcb_out.num_specs = num_specs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_res_client_id_spec_t specs */
    xcb_parts[4].iov_base = (char *) specs;
    xcb_parts[4].iov_len = num_specs * sizeof(xcb_res_client_id_spec_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_res_query_client_ids_ids_length (const xcb_res_query_client_ids_reply_t *R)
{
    return R->num_ids;
}

xcb_res_client_id_value_iterator_t
xcb_res_query_client_ids_ids_iterator (const xcb_res_query_client_ids_reply_t *R)
{
    xcb_res_client_id_value_iterator_t i;
    i.data = (xcb_res_client_id_value_t *) (R + 1);
    i.rem = R->num_ids;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_res_query_client_ids_reply_t *
xcb_res_query_client_ids_reply (xcb_connection_t                   *c,
                                xcb_res_query_client_ids_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_res_query_client_ids_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_res_query_resource_bytes_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_res_query_resource_bytes_request_t *_aux = (xcb_res_query_resource_bytes_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_res_query_resource_bytes_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* specs */
    xcb_block_len += _aux->num_specs * sizeof(xcb_res_resource_id_spec_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_res_resource_id_spec_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_res_query_resource_bytes_cookie_t
xcb_res_query_resource_bytes (xcb_connection_t                 *c,
                              uint32_t                          client,
                              uint32_t                          num_specs,
                              const xcb_res_resource_id_spec_t *specs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_res_id,
        .opcode = XCB_RES_QUERY_RESOURCE_BYTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_res_query_resource_bytes_cookie_t xcb_ret;
    xcb_res_query_resource_bytes_request_t xcb_out;

    xcb_out.client = client;
    xcb_out.num_specs = num_specs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_res_resource_id_spec_t specs */
    xcb_parts[4].iov_base = (char *) specs;
    xcb_parts[4].iov_len = num_specs * sizeof(xcb_res_resource_id_spec_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_res_query_resource_bytes_cookie_t
xcb_res_query_resource_bytes_unchecked (xcb_connection_t                 *c,
                                        uint32_t                          client,
                                        uint32_t                          num_specs,
                                        const xcb_res_resource_id_spec_t *specs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_res_id,
        .opcode = XCB_RES_QUERY_RESOURCE_BYTES,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_res_query_resource_bytes_cookie_t xcb_ret;
    xcb_res_query_resource_bytes_request_t xcb_out;

    xcb_out.client = client;
    xcb_out.num_specs = num_specs;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_res_resource_id_spec_t specs */
    xcb_parts[4].iov_base = (char *) specs;
    xcb_parts[4].iov_len = num_specs * sizeof(xcb_res_resource_id_spec_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_res_query_resource_bytes_sizes_length (const xcb_res_query_resource_bytes_reply_t *R)
{
    return R->num_sizes;
}

xcb_res_resource_size_value_iterator_t
xcb_res_query_resource_bytes_sizes_iterator (const xcb_res_query_resource_bytes_reply_t *R)
{
    xcb_res_resource_size_value_iterator_t i;
    i.data = (xcb_res_resource_size_value_t *) (R + 1);
    i.rem = R->num_sizes;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_res_query_resource_bytes_reply_t *
xcb_res_query_resource_bytes_reply (xcb_connection_t                       *c,
                                    xcb_res_query_resource_bytes_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e)
{
    return (xcb_res_query_resource_bytes_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

@


1.4
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d22 1
a22 1
xcb_res_client_next (xcb_res_client_iterator_t *i  /**< */)
d30 1
a30 1
xcb_res_client_end (xcb_res_client_iterator_t i  /**< */)
d40 1
a40 1
xcb_res_type_next (xcb_res_type_iterator_t *i  /**< */)
d48 1
a48 1
xcb_res_type_end (xcb_res_type_iterator_t i  /**< */)
d58 1
a58 1
xcb_res_client_id_spec_next (xcb_res_client_id_spec_iterator_t *i  /**< */)
d66 1
a66 1
xcb_res_client_id_spec_end (xcb_res_client_id_spec_iterator_t i  /**< */)
d76 1
a76 1
xcb_res_client_id_value_sizeof (const void  *_buffer  /**< */)
d107 1
a107 1
xcb_res_client_id_value_value (const xcb_res_client_id_value_t *R  /**< */)
d113 1
a113 1
xcb_res_client_id_value_value_length (const xcb_res_client_id_value_t *R  /**< */)
d119 1
a119 1
xcb_res_client_id_value_value_end (const xcb_res_client_id_value_t *R  /**< */)
d129 1
a129 1
xcb_res_client_id_value_next (xcb_res_client_id_value_iterator_t *i  /**< */)
d140 1
a140 1
xcb_res_client_id_value_end (xcb_res_client_id_value_iterator_t i  /**< */)
d152 1
a152 1
xcb_res_resource_id_spec_next (xcb_res_resource_id_spec_iterator_t *i  /**< */)
d160 1
a160 1
xcb_res_resource_id_spec_end (xcb_res_resource_id_spec_iterator_t i  /**< */)
d170 1
a170 1
xcb_res_resource_size_spec_next (xcb_res_resource_size_spec_iterator_t *i  /**< */)
d178 1
a178 1
xcb_res_resource_size_spec_end (xcb_res_resource_size_spec_iterator_t i  /**< */)
d188 1
a188 1
xcb_res_resource_size_value_sizeof (const void  *_buffer  /**< */)
d219 1
a219 1
xcb_res_resource_size_value_cross_references (const xcb_res_resource_size_value_t *R  /**< */)
d225 1
a225 1
xcb_res_resource_size_value_cross_references_length (const xcb_res_resource_size_value_t *R  /**< */)
d231 1
a231 1
xcb_res_resource_size_value_cross_references_iterator (const xcb_res_resource_size_value_t *R  /**< */)
d241 1
a241 1
xcb_res_resource_size_value_next (xcb_res_resource_size_value_iterator_t *i  /**< */)
d252 1
a252 1
xcb_res_resource_size_value_end (xcb_res_resource_size_value_iterator_t i  /**< */)
d264 3
a266 3
xcb_res_query_version (xcb_connection_t *c  /**< */,
                       uint8_t           client_major  /**< */,
                       uint8_t           client_minor  /**< */)
d269 4
a272 4
        /* count */ 2,
        /* ext */ &xcb_res_id,
        /* opcode */ XCB_RES_QUERY_VERSION,
        /* isvoid */ 0
d292 3
a294 3
xcb_res_query_version_unchecked (xcb_connection_t *c  /**< */,
                                 uint8_t           client_major  /**< */,
                                 uint8_t           client_minor  /**< */)
d297 4
a300 4
        /* count */ 2,
        /* ext */ &xcb_res_id,
        /* opcode */ XCB_RES_QUERY_VERSION,
        /* isvoid */ 0
d320 1
a320 1
xcb_res_query_version_reply (xcb_connection_t                *c  /**< */,
d322 1
a322 1
                             xcb_generic_error_t            **e  /**< */)
d328 1
a328 1
xcb_res_query_clients_sizeof (const void  *_buffer  /**< */)
d359 1
a359 1
xcb_res_query_clients (xcb_connection_t *c  /**< */)
d362 4
a365 4
        /* count */ 2,
        /* ext */ &xcb_res_id,
        /* opcode */ XCB_RES_QUERY_CLIENTS,
        /* isvoid */ 0
d383 1
a383 1
xcb_res_query_clients_unchecked (xcb_connection_t *c  /**< */)
d386 4
a389 4
        /* count */ 2,
        /* ext */ &xcb_res_id,
        /* opcode */ XCB_RES_QUERY_CLIENTS,
        /* isvoid */ 0
d407 1
a407 1
xcb_res_query_clients_clients (const xcb_res_query_clients_reply_t *R  /**< */)
d413 1
a413 1
xcb_res_query_clients_clients_length (const xcb_res_query_clients_reply_t *R  /**< */)
d419 1
a419 1
xcb_res_query_clients_clients_iterator (const xcb_res_query_clients_reply_t *R  /**< */)
d429 1
a429 1
xcb_res_query_clients_reply (xcb_connection_t                *c  /**< */,
d431 1
a431 1
                             xcb_generic_error_t            **e  /**< */)
d437 1
a437 1
xcb_res_query_client_resources_sizeof (const void  *_buffer  /**< */)
d468 2
a469 2
xcb_res_query_client_resources (xcb_connection_t *c  /**< */,
                                uint32_t          xid  /**< */)
d472 4
a475 4
        /* count */ 2,
        /* ext */ &xcb_res_id,
        /* opcode */ XCB_RES_QUERY_CLIENT_RESOURCES,
        /* isvoid */ 0
d494 2
a495 2
xcb_res_query_client_resources_unchecked (xcb_connection_t *c  /**< */,
                                          uint32_t          xid  /**< */)
d498 4
a501 4
        /* count */ 2,
        /* ext */ &xcb_res_id,
        /* opcode */ XCB_RES_QUERY_CLIENT_RESOURCES,
        /* isvoid */ 0
d520 1
a520 1
xcb_res_query_client_resources_types (const xcb_res_query_client_resources_reply_t *R  /**< */)
d526 1
a526 1
xcb_res_query_client_resources_types_length (const xcb_res_query_client_resources_reply_t *R  /**< */)
d532 1
a532 1
xcb_res_query_client_resources_types_iterator (const xcb_res_query_client_resources_reply_t *R  /**< */)
d542 1
a542 1
xcb_res_query_client_resources_reply (xcb_connection_t                         *c  /**< */,
d544 1
a544 1
                                      xcb_generic_error_t                     **e  /**< */)
d550 2
a551 2
xcb_res_query_client_pixmap_bytes (xcb_connection_t *c  /**< */,
                                   uint32_t          xid  /**< */)
d554 4
a557 4
        /* count */ 2,
        /* ext */ &xcb_res_id,
        /* opcode */ XCB_RES_QUERY_CLIENT_PIXMAP_BYTES,
        /* isvoid */ 0
d576 2
a577 2
xcb_res_query_client_pixmap_bytes_unchecked (xcb_connection_t *c  /**< */,
                                             uint32_t          xid  /**< */)
d580 4
a583 4
        /* count */ 2,
        /* ext */ &xcb_res_id,
        /* opcode */ XCB_RES_QUERY_CLIENT_PIXMAP_BYTES,
        /* isvoid */ 0
d602 1
a602 1
xcb_res_query_client_pixmap_bytes_reply (xcb_connection_t                            *c  /**< */,
d604 1
a604 1
                                         xcb_generic_error_t                        **e  /**< */)
d610 1
a610 1
xcb_res_query_client_ids_sizeof (const void  *_buffer  /**< */)
d641 3
a643 3
xcb_res_query_client_ids (xcb_connection_t               *c  /**< */,
                          uint32_t                        num_specs  /**< */,
                          const xcb_res_client_id_spec_t *specs  /**< */)
d646 4
a649 4
        /* count */ 4,
        /* ext */ &xcb_res_id,
        /* opcode */ XCB_RES_QUERY_CLIENT_IDS,
        /* isvoid */ 0
d673 3
a675 3
xcb_res_query_client_ids_unchecked (xcb_connection_t               *c  /**< */,
                                    uint32_t                        num_specs  /**< */,
                                    const xcb_res_client_id_spec_t *specs  /**< */)
d678 4
a681 4
        /* count */ 4,
        /* ext */ &xcb_res_id,
        /* opcode */ XCB_RES_QUERY_CLIENT_IDS,
        /* isvoid */ 0
d705 1
a705 1
xcb_res_query_client_ids_ids_length (const xcb_res_query_client_ids_reply_t *R  /**< */)
d711 1
a711 1
xcb_res_query_client_ids_ids_iterator (const xcb_res_query_client_ids_reply_t *R  /**< */)
d721 1
a721 1
xcb_res_query_client_ids_reply (xcb_connection_t                   *c  /**< */,
d723 1
a723 1
                                xcb_generic_error_t               **e  /**< */)
d729 1
a729 1
xcb_res_query_resource_bytes_sizeof (const void  *_buffer  /**< */)
d760 4
a763 4
xcb_res_query_resource_bytes (xcb_connection_t                 *c  /**< */,
                              uint32_t                          client  /**< */,
                              uint32_t                          num_specs  /**< */,
                              const xcb_res_resource_id_spec_t *specs  /**< */)
d766 4
a769 4
        /* count */ 4,
        /* ext */ &xcb_res_id,
        /* opcode */ XCB_RES_QUERY_RESOURCE_BYTES,
        /* isvoid */ 0
d794 4
a797 4
xcb_res_query_resource_bytes_unchecked (xcb_connection_t                 *c  /**< */,
                                        uint32_t                          client  /**< */,
                                        uint32_t                          num_specs  /**< */,
                                        const xcb_res_resource_id_spec_t *specs  /**< */)
d800 4
a803 4
        /* count */ 4,
        /* ext */ &xcb_res_id,
        /* opcode */ XCB_RES_QUERY_RESOURCE_BYTES,
        /* isvoid */ 0
d828 1
a828 1
xcb_res_query_resource_bytes_sizes_length (const xcb_res_query_resource_bytes_reply_t *R  /**< */)
d834 1
a834 1
xcb_res_query_resource_bytes_sizes_iterator (const xcb_res_query_resource_bytes_reply_t *R  /**< */)
d844 1
a844 1
xcb_res_query_resource_bytes_reply (xcb_connection_t                       *c  /**< */,
d846 1
a846 1
                                    xcb_generic_error_t                   **e  /**< */)
@


1.3
log
@Update build system and generated files for libxcb 1.10.
@
text
@a20 10

/*****************************************************************************
 **
 ** void xcb_res_client_next
 ** 
 ** @@param xcb_res_client_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a28 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_client_end
 ** 
 ** @@param xcb_res_client_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a38 10

/*****************************************************************************
 **
 ** void xcb_res_type_next
 ** 
 ** @@param xcb_res_type_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a46 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_type_end
 ** 
 ** @@param xcb_res_type_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a56 10

/*****************************************************************************
 **
 ** void xcb_res_client_id_spec_next
 ** 
 ** @@param xcb_res_client_id_spec_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a64 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_client_id_spec_end
 ** 
 ** @@param xcb_res_client_id_spec_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a105 10

/*****************************************************************************
 **
 ** uint32_t * xcb_res_client_id_value_value
 ** 
 ** @@param const xcb_res_client_id_value_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a111 10

/*****************************************************************************
 **
 ** int xcb_res_client_id_value_value_length
 ** 
 ** @@param const xcb_res_client_id_value_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a117 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_client_id_value_value_end
 ** 
 ** @@param const xcb_res_client_id_value_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a127 10

/*****************************************************************************
 **
 ** void xcb_res_client_id_value_next
 ** 
 ** @@param xcb_res_client_id_value_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a138 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_client_id_value_end
 ** 
 ** @@param xcb_res_client_id_value_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a150 10

/*****************************************************************************
 **
 ** void xcb_res_resource_id_spec_next
 ** 
 ** @@param xcb_res_resource_id_spec_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a158 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_resource_id_spec_end
 ** 
 ** @@param xcb_res_resource_id_spec_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a168 10

/*****************************************************************************
 **
 ** void xcb_res_resource_size_spec_next
 ** 
 ** @@param xcb_res_resource_size_spec_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a176 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_resource_size_spec_end
 ** 
 ** @@param xcb_res_resource_size_spec_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a217 10

/*****************************************************************************
 **
 ** xcb_res_resource_size_spec_t * xcb_res_resource_size_value_cross_references
 ** 
 ** @@param const xcb_res_resource_size_value_t *R
 ** @@returns xcb_res_resource_size_spec_t *
 **
 *****************************************************************************/
 
a223 10

/*****************************************************************************
 **
 ** int xcb_res_resource_size_value_cross_references_length
 ** 
 ** @@param const xcb_res_resource_size_value_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a229 10

/*****************************************************************************
 **
 ** xcb_res_resource_size_spec_iterator_t xcb_res_resource_size_value_cross_references_iterator
 ** 
 ** @@param const xcb_res_resource_size_value_t *R
 ** @@returns xcb_res_resource_size_spec_iterator_t
 **
 *****************************************************************************/
 
a239 10

/*****************************************************************************
 **
 ** void xcb_res_resource_size_value_next
 ** 
 ** @@param xcb_res_resource_size_value_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a250 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_res_resource_size_value_end
 ** 
 ** @@param xcb_res_resource_size_value_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a262 12

/*****************************************************************************
 **
 ** xcb_res_query_version_cookie_t xcb_res_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           client_major
 ** @@param uint8_t           client_minor
 ** @@returns xcb_res_query_version_cookie_t
 **
 *****************************************************************************/
 
d274 1
a274 1
    
d278 1
a278 1
    
d281 1
a281 1
    
d286 1
a286 1
    
a290 12

/*****************************************************************************
 **
 ** xcb_res_query_version_cookie_t xcb_res_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           client_major
 ** @@param uint8_t           client_minor
 ** @@returns xcb_res_query_version_cookie_t
 **
 *****************************************************************************/
 
d302 1
a302 1
    
d306 1
a306 1
    
d309 1
a309 1
    
d314 1
a314 1
    
a318 12

/*****************************************************************************
 **
 ** xcb_res_query_version_reply_t * xcb_res_query_version_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_res_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_res_query_version_reply_t *
 **
 *****************************************************************************/
 
a357 10

/*****************************************************************************
 **
 ** xcb_res_query_clients_cookie_t xcb_res_query_clients
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_res_query_clients_cookie_t
 **
 *****************************************************************************/
 
d367 1
a367 1
    
d371 2
a372 2
    
    
d377 1
a377 1
    
a381 10

/*****************************************************************************
 **
 ** xcb_res_query_clients_cookie_t xcb_res_query_clients_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_res_query_clients_cookie_t
 **
 *****************************************************************************/
 
d391 1
a391 1
    
d395 2
a396 2
    
    
d401 1
a401 1
    
a405 10

/*****************************************************************************
 **
 ** xcb_res_client_t * xcb_res_query_clients_clients
 ** 
 ** @@param const xcb_res_query_clients_reply_t *R
 ** @@returns xcb_res_client_t *
 **
 *****************************************************************************/
 
a411 10

/*****************************************************************************
 **
 ** int xcb_res_query_clients_clients_length
 ** 
 ** @@param const xcb_res_query_clients_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a417 10

/*****************************************************************************
 **
 ** xcb_res_client_iterator_t xcb_res_query_clients_clients_iterator
 ** 
 ** @@param const xcb_res_query_clients_reply_t *R
 ** @@returns xcb_res_client_iterator_t
 **
 *****************************************************************************/
 
a427 12

/*****************************************************************************
 **
 ** xcb_res_query_clients_reply_t * xcb_res_query_clients_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_res_query_clients_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_res_query_clients_reply_t *
 **
 *****************************************************************************/
 
a466 11

/*****************************************************************************
 **
 ** xcb_res_query_client_resources_cookie_t xcb_res_query_client_resources
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          xid
 ** @@returns xcb_res_query_client_resources_cookie_t
 **
 *****************************************************************************/
 
d477 1
a477 1
    
d481 1
a481 1
    
d483 1
a483 1
    
d488 1
a488 1
    
a492 11

/*****************************************************************************
 **
 ** xcb_res_query_client_resources_cookie_t xcb_res_query_client_resources_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          xid
 ** @@returns xcb_res_query_client_resources_cookie_t
 **
 *****************************************************************************/
 
d503 1
a503 1
    
d507 1
a507 1
    
d509 1
a509 1
    
d514 1
a514 1
    
a518 10

/*****************************************************************************
 **
 ** xcb_res_type_t * xcb_res_query_client_resources_types
 ** 
 ** @@param const xcb_res_query_client_resources_reply_t *R
 ** @@returns xcb_res_type_t *
 **
 *****************************************************************************/
 
a524 10

/*****************************************************************************
 **
 ** int xcb_res_query_client_resources_types_length
 ** 
 ** @@param const xcb_res_query_client_resources_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a530 10

/*****************************************************************************
 **
 ** xcb_res_type_iterator_t xcb_res_query_client_resources_types_iterator
 ** 
 ** @@param const xcb_res_query_client_resources_reply_t *R
 ** @@returns xcb_res_type_iterator_t
 **
 *****************************************************************************/
 
a540 12

/*****************************************************************************
 **
 ** xcb_res_query_client_resources_reply_t * xcb_res_query_client_resources_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_res_query_client_resources_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_res_query_client_resources_reply_t *
 **
 *****************************************************************************/
 
a548 11

/*****************************************************************************
 **
 ** xcb_res_query_client_pixmap_bytes_cookie_t xcb_res_query_client_pixmap_bytes
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          xid
 ** @@returns xcb_res_query_client_pixmap_bytes_cookie_t
 **
 *****************************************************************************/
 
d559 1
a559 1
    
d563 1
a563 1
    
d565 1
a565 1
    
d570 1
a570 1
    
a574 11

/*****************************************************************************
 **
 ** xcb_res_query_client_pixmap_bytes_cookie_t xcb_res_query_client_pixmap_bytes_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          xid
 ** @@returns xcb_res_query_client_pixmap_bytes_cookie_t
 **
 *****************************************************************************/
 
d585 1
a585 1
    
d589 1
a589 1
    
d591 1
a591 1
    
d596 1
a596 1
    
a600 12

/*****************************************************************************
 **
 ** xcb_res_query_client_pixmap_bytes_reply_t * xcb_res_query_client_pixmap_bytes_reply
 ** 
 ** @@param xcb_connection_t                            *c
 ** @@param xcb_res_query_client_pixmap_bytes_cookie_t   cookie
 ** @@param xcb_generic_error_t                        **e
 ** @@returns xcb_res_query_client_pixmap_bytes_reply_t *
 **
 *****************************************************************************/
 
a639 12

/*****************************************************************************
 **
 ** xcb_res_query_client_ids_cookie_t xcb_res_query_client_ids
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param uint32_t                        num_specs
 ** @@param const xcb_res_client_id_spec_t *specs
 ** @@returns xcb_res_query_client_ids_cookie_t
 **
 *****************************************************************************/
 
d651 1
a651 1
    
d655 1
a655 1
    
d657 1
a657 1
    
d667 1
a667 1
    
a671 12

/*****************************************************************************
 **
 ** xcb_res_query_client_ids_cookie_t xcb_res_query_client_ids_unchecked
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param uint32_t                        num_specs
 ** @@param const xcb_res_client_id_spec_t *specs
 ** @@returns xcb_res_query_client_ids_cookie_t
 **
 *****************************************************************************/
 
d683 1
a683 1
    
d687 1
a687 1
    
d689 1
a689 1
    
d699 1
a699 1
    
a703 10

/*****************************************************************************
 **
 ** int xcb_res_query_client_ids_ids_length
 ** 
 ** @@param const xcb_res_query_client_ids_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a709 10

/*****************************************************************************
 **
 ** xcb_res_client_id_value_iterator_t xcb_res_query_client_ids_ids_iterator
 ** 
 ** @@param const xcb_res_query_client_ids_reply_t *R
 ** @@returns xcb_res_client_id_value_iterator_t
 **
 *****************************************************************************/
 
a719 12

/*****************************************************************************
 **
 ** xcb_res_query_client_ids_reply_t * xcb_res_query_client_ids_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_res_query_client_ids_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_res_query_client_ids_reply_t *
 **
 *****************************************************************************/
 
a758 13

/*****************************************************************************
 **
 ** xcb_res_query_resource_bytes_cookie_t xcb_res_query_resource_bytes
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param uint32_t                          client
 ** @@param uint32_t                          num_specs
 ** @@param const xcb_res_resource_id_spec_t *specs
 ** @@returns xcb_res_query_resource_bytes_cookie_t
 **
 *****************************************************************************/
 
d771 1
a771 1
    
d775 1
a775 1
    
d778 1
a778 1
    
d788 1
a788 1
    
a792 13

/*****************************************************************************
 **
 ** xcb_res_query_resource_bytes_cookie_t xcb_res_query_resource_bytes_unchecked
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param uint32_t                          client
 ** @@param uint32_t                          num_specs
 ** @@param const xcb_res_resource_id_spec_t *specs
 ** @@returns xcb_res_query_resource_bytes_cookie_t
 **
 *****************************************************************************/
 
d805 1
a805 1
    
d809 1
a809 1
    
d812 1
a812 1
    
d822 1
a822 1
    
a826 10

/*****************************************************************************
 **
 ** int xcb_res_query_resource_bytes_sizes_length
 ** 
 ** @@param const xcb_res_query_resource_bytes_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a832 10

/*****************************************************************************
 **
 ** xcb_res_resource_size_value_iterator_t xcb_res_query_resource_bytes_sizes_iterator
 ** 
 ** @@param const xcb_res_query_resource_bytes_reply_t *R
 ** @@returns xcb_res_resource_size_value_iterator_t
 **
 *****************************************************************************/
 
a842 12

/*****************************************************************************
 **
 ** xcb_res_query_resource_bytes_reply_t * xcb_res_query_resource_bytes_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_res_query_resource_bytes_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_res_query_resource_bytes_reply_t *
 **
 *****************************************************************************/
 
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d100 366
d571 1
a571 1
    unsigned int xcb_align_to;
d576 2
d742 1
a742 1
    unsigned int xcb_align_to;
d747 2
d1003 356
@


1.1
log
@Initial revision
@
text
@d6 4
d12 1
d15 2
d132 1
d172 1
d197 29
d255 1
d289 1
d366 29
d427 1
d464 1
d573 1
d610 1
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
