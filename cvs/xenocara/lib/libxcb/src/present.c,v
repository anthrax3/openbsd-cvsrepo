head	1.3;
access;
symbols
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	mKDGsTNpiR2zRHYQ;

1.2
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.1;
commitid	01TEvO4uNHLqFv7N;

1.1
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from present.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "present.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"
#include "randr.h"
#include "xfixes.h"
#include "sync.h"

xcb_extension_t xcb_present_id = { "Present", 0 };

void
xcb_present_notify_next (xcb_present_notify_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_present_notify_t);
}

xcb_generic_iterator_t
xcb_present_notify_end (xcb_present_notify_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_present_query_version_cookie_t
xcb_present_query_version (xcb_connection_t *c,
                           uint32_t          major_version,
                           uint32_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_present_id,
        .opcode = XCB_PRESENT_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_present_query_version_cookie_t xcb_ret;
    xcb_present_query_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_present_query_version_cookie_t
xcb_present_query_version_unchecked (xcb_connection_t *c,
                                     uint32_t          major_version,
                                     uint32_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_present_id,
        .opcode = XCB_PRESENT_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_present_query_version_cookie_t xcb_ret;
    xcb_present_query_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_present_query_version_reply_t *
xcb_present_query_version_reply (xcb_connection_t                    *c,
                                 xcb_present_query_version_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_present_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_present_pixmap_sizeof (const void  *_buffer,
                           uint32_t     notifies_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_present_pixmap_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* notifies */
    xcb_block_len += notifies_len * sizeof(xcb_present_notify_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_present_notify_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_present_pixmap_checked (xcb_connection_t           *c,
                            xcb_window_t                window,
                            xcb_pixmap_t                pixmap,
                            uint32_t                    serial,
                            xcb_xfixes_region_t         valid,
                            xcb_xfixes_region_t         update,
                            int16_t                     x_off,
                            int16_t                     y_off,
                            xcb_randr_crtc_t            target_crtc,
                            xcb_sync_fence_t            wait_fence,
                            xcb_sync_fence_t            idle_fence,
                            uint32_t                    options,
                            uint64_t                    target_msc,
                            uint64_t                    divisor,
                            uint64_t                    remainder,
                            uint32_t                    notifies_len,
                            const xcb_present_notify_t *notifies)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_present_id,
        .opcode = XCB_PRESENT_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_present_pixmap_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.pixmap = pixmap;
    xcb_out.serial = serial;
    xcb_out.valid = valid;
    xcb_out.update = update;
    xcb_out.x_off = x_off;
    xcb_out.y_off = y_off;
    xcb_out.target_crtc = target_crtc;
    xcb_out.wait_fence = wait_fence;
    xcb_out.idle_fence = idle_fence;
    xcb_out.options = options;
    memset(xcb_out.pad0, 0, 4);
    xcb_out.target_msc = target_msc;
    xcb_out.divisor = divisor;
    xcb_out.remainder = remainder;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_present_notify_t notifies */
    xcb_parts[4].iov_base = (char *) notifies;
    xcb_parts[4].iov_len = notifies_len * sizeof(xcb_present_notify_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_present_pixmap (xcb_connection_t           *c,
                    xcb_window_t                window,
                    xcb_pixmap_t                pixmap,
                    uint32_t                    serial,
                    xcb_xfixes_region_t         valid,
                    xcb_xfixes_region_t         update,
                    int16_t                     x_off,
                    int16_t                     y_off,
                    xcb_randr_crtc_t            target_crtc,
                    xcb_sync_fence_t            wait_fence,
                    xcb_sync_fence_t            idle_fence,
                    uint32_t                    options,
                    uint64_t                    target_msc,
                    uint64_t                    divisor,
                    uint64_t                    remainder,
                    uint32_t                    notifies_len,
                    const xcb_present_notify_t *notifies)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_present_id,
        .opcode = XCB_PRESENT_PIXMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_present_pixmap_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.pixmap = pixmap;
    xcb_out.serial = serial;
    xcb_out.valid = valid;
    xcb_out.update = update;
    xcb_out.x_off = x_off;
    xcb_out.y_off = y_off;
    xcb_out.target_crtc = target_crtc;
    xcb_out.wait_fence = wait_fence;
    xcb_out.idle_fence = idle_fence;
    xcb_out.options = options;
    memset(xcb_out.pad0, 0, 4);
    xcb_out.target_msc = target_msc;
    xcb_out.divisor = divisor;
    xcb_out.remainder = remainder;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_present_notify_t notifies */
    xcb_parts[4].iov_base = (char *) notifies;
    xcb_parts[4].iov_len = notifies_len * sizeof(xcb_present_notify_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_present_notify_t *
xcb_present_pixmap_notifies (const xcb_present_pixmap_request_t *R)
{
    return (xcb_present_notify_t *) (R + 1);
}

int
xcb_present_pixmap_notifies_length (const xcb_present_pixmap_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_present_pixmap_request_t))/sizeof(xcb_present_notify_t));
}

xcb_present_notify_iterator_t
xcb_present_pixmap_notifies_iterator (const xcb_present_pixmap_request_t *R)
{
    xcb_present_notify_iterator_t i;
    i.data = (xcb_present_notify_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_present_pixmap_request_t))/sizeof(xcb_present_notify_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_present_notify_msc_checked (xcb_connection_t *c,
                                xcb_window_t      window,
                                uint32_t          serial,
                                uint64_t          target_msc,
                                uint64_t          divisor,
                                uint64_t          remainder)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_present_id,
        .opcode = XCB_PRESENT_NOTIFY_MSC,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_present_notify_msc_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.serial = serial;
    memset(xcb_out.pad0, 0, 4);
    xcb_out.target_msc = target_msc;
    xcb_out.divisor = divisor;
    xcb_out.remainder = remainder;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_present_notify_msc (xcb_connection_t *c,
                        xcb_window_t      window,
                        uint32_t          serial,
                        uint64_t          target_msc,
                        uint64_t          divisor,
                        uint64_t          remainder)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_present_id,
        .opcode = XCB_PRESENT_NOTIFY_MSC,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_present_notify_msc_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.serial = serial;
    memset(xcb_out.pad0, 0, 4);
    xcb_out.target_msc = target_msc;
    xcb_out.divisor = divisor;
    xcb_out.remainder = remainder;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void
xcb_present_event_next (xcb_present_event_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_present_event_t);
}

xcb_generic_iterator_t
xcb_present_event_end (xcb_present_event_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_void_cookie_t
xcb_present_select_input_checked (xcb_connection_t    *c,
                                  xcb_present_event_t  eid,
                                  xcb_window_t         window,
                                  uint32_t             event_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_present_id,
        .opcode = XCB_PRESENT_SELECT_INPUT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_present_select_input_request_t xcb_out;

    xcb_out.eid = eid;
    xcb_out.window = window;
    xcb_out.event_mask = event_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_present_select_input (xcb_connection_t    *c,
                          xcb_present_event_t  eid,
                          xcb_window_t         window,
                          uint32_t             event_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_present_id,
        .opcode = XCB_PRESENT_SELECT_INPUT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_present_select_input_request_t xcb_out;

    xcb_out.eid = eid;
    xcb_out.window = window;
    xcb_out.event_mask = event_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_present_query_capabilities_cookie_t
xcb_present_query_capabilities (xcb_connection_t *c,
                                uint32_t          target)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_present_id,
        .opcode = XCB_PRESENT_QUERY_CAPABILITIES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_present_query_capabilities_cookie_t xcb_ret;
    xcb_present_query_capabilities_request_t xcb_out;

    xcb_out.target = target;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_present_query_capabilities_cookie_t
xcb_present_query_capabilities_unchecked (xcb_connection_t *c,
                                          uint32_t          target)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_present_id,
        .opcode = XCB_PRESENT_QUERY_CAPABILITIES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_present_query_capabilities_cookie_t xcb_ret;
    xcb_present_query_capabilities_request_t xcb_out;

    xcb_out.target = target;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_present_query_capabilities_reply_t *
xcb_present_query_capabilities_reply (xcb_connection_t                         *c,
                                      xcb_present_query_capabilities_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e)
{
    return (xcb_present_query_capabilities_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_present_redirect_notify_sizeof (const void  *_buffer,
                                    uint32_t     notifies_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_present_redirect_notify_event_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* notifies */
    xcb_block_len += notifies_len * sizeof(xcb_present_notify_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_present_notify_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_present_notify_t *
xcb_present_redirect_notify_notifies (const xcb_present_redirect_notify_event_t *R)
{
    return (xcb_present_notify_t *) (R + 1);
}

int
xcb_present_redirect_notify_notifies_length (const xcb_present_redirect_notify_event_t *R)
{
    return (((R->length * 4) - sizeof(xcb_present_redirect_notify_event_t))/sizeof(xcb_present_notify_t));
}

xcb_present_notify_iterator_t
xcb_present_redirect_notify_notifies_iterator (const xcb_present_redirect_notify_event_t *R)
{
    xcb_present_notify_iterator_t i;
    i.data = (xcb_present_notify_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_present_redirect_notify_event_t))/sizeof(xcb_present_notify_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

@


1.2
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d25 1
a25 1
xcb_present_notify_next (xcb_present_notify_iterator_t *i  /**< */)
d33 1
a33 1
xcb_present_notify_end (xcb_present_notify_iterator_t i  /**< */)
d43 3
a45 3
xcb_present_query_version (xcb_connection_t *c  /**< */,
                           uint32_t          major_version  /**< */,
                           uint32_t          minor_version  /**< */)
d48 4
a51 4
        /* count */ 2,
        /* ext */ &xcb_present_id,
        /* opcode */ XCB_PRESENT_QUERY_VERSION,
        /* isvoid */ 0
d71 3
a73 3
xcb_present_query_version_unchecked (xcb_connection_t *c  /**< */,
                                     uint32_t          major_version  /**< */,
                                     uint32_t          minor_version  /**< */)
d76 4
a79 4
        /* count */ 2,
        /* ext */ &xcb_present_id,
        /* opcode */ XCB_PRESENT_QUERY_VERSION,
        /* isvoid */ 0
d99 1
a99 1
xcb_present_query_version_reply (xcb_connection_t                    *c  /**< */,
d101 1
a101 1
                                 xcb_generic_error_t                **e  /**< */)
d107 2
a108 2
xcb_present_pixmap_sizeof (const void  *_buffer  /**< */,
                           uint32_t     notifies_len  /**< */)
d138 17
a154 17
xcb_present_pixmap_checked (xcb_connection_t           *c  /**< */,
                            xcb_window_t                window  /**< */,
                            xcb_pixmap_t                pixmap  /**< */,
                            uint32_t                    serial  /**< */,
                            xcb_xfixes_region_t         valid  /**< */,
                            xcb_xfixes_region_t         update  /**< */,
                            int16_t                     x_off  /**< */,
                            int16_t                     y_off  /**< */,
                            xcb_randr_crtc_t            target_crtc  /**< */,
                            xcb_sync_fence_t            wait_fence  /**< */,
                            xcb_sync_fence_t            idle_fence  /**< */,
                            uint32_t                    options  /**< */,
                            uint64_t                    target_msc  /**< */,
                            uint64_t                    divisor  /**< */,
                            uint64_t                    remainder  /**< */,
                            uint32_t                    notifies_len  /**< */,
                            const xcb_present_notify_t *notifies  /**< */)
d157 4
a160 4
        /* count */ 4,
        /* ext */ &xcb_present_id,
        /* opcode */ XCB_PRESENT_PIXMAP,
        /* isvoid */ 1
d198 17
a214 17
xcb_present_pixmap (xcb_connection_t           *c  /**< */,
                    xcb_window_t                window  /**< */,
                    xcb_pixmap_t                pixmap  /**< */,
                    uint32_t                    serial  /**< */,
                    xcb_xfixes_region_t         valid  /**< */,
                    xcb_xfixes_region_t         update  /**< */,
                    int16_t                     x_off  /**< */,
                    int16_t                     y_off  /**< */,
                    xcb_randr_crtc_t            target_crtc  /**< */,
                    xcb_sync_fence_t            wait_fence  /**< */,
                    xcb_sync_fence_t            idle_fence  /**< */,
                    uint32_t                    options  /**< */,
                    uint64_t                    target_msc  /**< */,
                    uint64_t                    divisor  /**< */,
                    uint64_t                    remainder  /**< */,
                    uint32_t                    notifies_len  /**< */,
                    const xcb_present_notify_t *notifies  /**< */)
d217 4
a220 4
        /* count */ 4,
        /* ext */ &xcb_present_id,
        /* opcode */ XCB_PRESENT_PIXMAP,
        /* isvoid */ 1
d257 22
d280 6
a285 6
xcb_present_notify_msc_checked (xcb_connection_t *c  /**< */,
                                xcb_window_t      window  /**< */,
                                uint32_t          serial  /**< */,
                                uint64_t          target_msc  /**< */,
                                uint64_t          divisor  /**< */,
                                uint64_t          remainder  /**< */)
d288 4
a291 4
        /* count */ 2,
        /* ext */ &xcb_present_id,
        /* opcode */ XCB_PRESENT_NOTIFY_MSC,
        /* isvoid */ 1
d315 6
a320 6
xcb_present_notify_msc (xcb_connection_t *c  /**< */,
                        xcb_window_t      window  /**< */,
                        uint32_t          serial  /**< */,
                        uint64_t          target_msc  /**< */,
                        uint64_t          divisor  /**< */,
                        uint64_t          remainder  /**< */)
d323 4
a326 4
        /* count */ 2,
        /* ext */ &xcb_present_id,
        /* opcode */ XCB_PRESENT_NOTIFY_MSC,
        /* isvoid */ 1
d350 1
a350 1
xcb_present_event_next (xcb_present_event_iterator_t *i  /**< */)
d358 1
a358 1
xcb_present_event_end (xcb_present_event_iterator_t i  /**< */)
d368 4
a371 4
xcb_present_select_input_checked (xcb_connection_t    *c  /**< */,
                                  xcb_present_event_t  eid  /**< */,
                                  xcb_window_t         window  /**< */,
                                  uint32_t             event_mask  /**< */)
d374 4
a377 4
        /* count */ 2,
        /* ext */ &xcb_present_id,
        /* opcode */ XCB_PRESENT_SELECT_INPUT,
        /* isvoid */ 1
d398 4
a401 4
xcb_present_select_input (xcb_connection_t    *c  /**< */,
                          xcb_present_event_t  eid  /**< */,
                          xcb_window_t         window  /**< */,
                          uint32_t             event_mask  /**< */)
d404 4
a407 4
        /* count */ 2,
        /* ext */ &xcb_present_id,
        /* opcode */ XCB_PRESENT_SELECT_INPUT,
        /* isvoid */ 1
d428 2
a429 2
xcb_present_query_capabilities (xcb_connection_t *c  /**< */,
                                uint32_t          target  /**< */)
d432 4
a435 4
        /* count */ 2,
        /* ext */ &xcb_present_id,
        /* opcode */ XCB_PRESENT_QUERY_CAPABILITIES,
        /* isvoid */ 0
d454 2
a455 2
xcb_present_query_capabilities_unchecked (xcb_connection_t *c  /**< */,
                                          uint32_t          target  /**< */)
d458 4
a461 4
        /* count */ 2,
        /* ext */ &xcb_present_id,
        /* opcode */ XCB_PRESENT_QUERY_CAPABILITIES,
        /* isvoid */ 0
d480 1
a480 1
xcb_present_query_capabilities_reply (xcb_connection_t                         *c  /**< */,
d482 1
a482 1
                                      xcb_generic_error_t                     **e  /**< */)
d488 2
a489 2
xcb_present_redirect_notify_sizeof (const void  *_buffer  /**< */,
                                    uint32_t     notifies_len  /**< */)
d516 22
@


1.1
log
@Update build system and generated files for libxcb 1.10.
@
text
@a17 1
#include "render.h"
a18 1
#include "shape.h"
a23 10

/*****************************************************************************
 **
 ** void xcb_present_notify_next
 ** 
 ** @@param xcb_present_notify_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a31 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_present_notify_end
 ** 
 ** @@param xcb_present_notify_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a41 12

/*****************************************************************************
 **
 ** xcb_present_query_version_cookie_t xcb_present_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_present_query_version_cookie_t
 **
 *****************************************************************************/
 
d53 1
a53 1
    
d57 1
a57 1
    
d60 1
a60 1
    
d65 1
a65 1
    
a69 12

/*****************************************************************************
 **
 ** xcb_present_query_version_cookie_t xcb_present_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_present_query_version_cookie_t
 **
 *****************************************************************************/
 
d81 1
a81 1
    
d85 1
a85 1
    
d88 1
a88 1
    
d93 1
a93 1
    
a97 12

/*****************************************************************************
 **
 ** xcb_present_query_version_reply_t * xcb_present_query_version_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_present_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_present_query_version_reply_t *
 **
 *****************************************************************************/
 
a136 26

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_present_pixmap_checked
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_window_t                window
 ** @@param xcb_pixmap_t                pixmap
 ** @@param uint32_t                    serial
 ** @@param xcb_xfixes_region_t         valid
 ** @@param xcb_xfixes_region_t         update
 ** @@param int16_t                     x_off
 ** @@param int16_t                     y_off
 ** @@param xcb_randr_crtc_t            target_crtc
 ** @@param xcb_sync_fence_t            wait_fence
 ** @@param xcb_sync_fence_t            idle_fence
 ** @@param uint32_t                    options
 ** @@param uint64_t                    target_msc
 ** @@param uint64_t                    divisor
 ** @@param uint64_t                    remainder
 ** @@param uint32_t                    notifies_len
 ** @@param const xcb_present_notify_t *notifies
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d162 1
a162 1
    
d166 1
a166 1
    
d182 1
a182 1
    
d192 1
a192 1
    
a196 26

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_present_pixmap
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_window_t                window
 ** @@param xcb_pixmap_t                pixmap
 ** @@param uint32_t                    serial
 ** @@param xcb_xfixes_region_t         valid
 ** @@param xcb_xfixes_region_t         update
 ** @@param int16_t                     x_off
 ** @@param int16_t                     y_off
 ** @@param xcb_randr_crtc_t            target_crtc
 ** @@param xcb_sync_fence_t            wait_fence
 ** @@param xcb_sync_fence_t            idle_fence
 ** @@param uint32_t                    options
 ** @@param uint64_t                    target_msc
 ** @@param uint64_t                    divisor
 ** @@param uint64_t                    remainder
 ** @@param uint32_t                    notifies_len
 ** @@param const xcb_present_notify_t *notifies
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d222 1
a222 1
    
d226 1
a226 1
    
d242 1
a242 1
    
d252 1
a252 1
    
a256 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_present_notify_msc_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          serial
 ** @@param uint64_t          target_msc
 ** @@param uint64_t          divisor
 ** @@param uint64_t          remainder
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d271 1
a271 1
    
d275 1
a275 1
    
d282 1
a282 1
    
d287 1
a287 1
    
a291 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_present_notify_msc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          serial
 ** @@param uint64_t          target_msc
 ** @@param uint64_t          divisor
 ** @@param uint64_t          remainder
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d306 1
a306 1
    
d310 1
a310 1
    
d317 1
a317 1
    
d322 1
a322 1
    
a326 10

/*****************************************************************************
 **
 ** void xcb_present_event_next
 ** 
 ** @@param xcb_present_event_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a334 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_present_event_end
 ** 
 ** @@param xcb_present_event_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a344 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_present_select_input_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_present_event_t  eid
 ** @@param xcb_window_t         window
 ** @@param uint32_t             event_mask
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d357 1
a357 1
    
d361 1
a361 1
    
d365 1
a365 1
    
d370 1
a370 1
    
a374 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_present_select_input
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_present_event_t  eid
 ** @@param xcb_window_t         window
 ** @@param uint32_t             event_mask
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d387 1
a387 1
    
d391 1
a391 1
    
d395 1
a395 1
    
d400 1
a400 1
    
a404 11

/*****************************************************************************
 **
 ** xcb_present_query_capabilities_cookie_t xcb_present_query_capabilities
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          target
 ** @@returns xcb_present_query_capabilities_cookie_t
 **
 *****************************************************************************/
 
d415 1
a415 1
    
d419 1
a419 1
    
d421 1
a421 1
    
d426 1
a426 1
    
a430 11

/*****************************************************************************
 **
 ** xcb_present_query_capabilities_cookie_t xcb_present_query_capabilities_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          target
 ** @@returns xcb_present_query_capabilities_cookie_t
 **
 *****************************************************************************/
 
d441 1
a441 1
    
d445 1
a445 1
    
d447 1
a447 1
    
d452 1
a452 1
    
a456 12

/*****************************************************************************
 **
 ** xcb_present_query_capabilities_reply_t * xcb_present_query_capabilities_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_present_query_capabilities_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_present_query_capabilities_reply_t *
 **
 *****************************************************************************/
 
@

