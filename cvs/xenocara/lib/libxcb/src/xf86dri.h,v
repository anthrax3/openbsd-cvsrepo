head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.8
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.03.27.19.14.21;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.18.19.58.53;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.50;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.50;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xf86dri.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_XF86Dri_API XCB XF86Dri API
 * @@brief XF86Dri XCB Protocol Implementation.
 * @@{
 **/

#ifndef __XF86DRI_H
#define __XF86DRI_H

#include "xcb.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_XF86DRI_MAJOR_VERSION 4
#define XCB_XF86DRI_MINOR_VERSION 1

extern xcb_extension_t xcb_xf86dri_id;

/**
 * @@brief xcb_xf86dri_drm_clip_rect_t
 **/
typedef struct xcb_xf86dri_drm_clip_rect_t {
    int16_t x1;
    int16_t y1;
    int16_t x2;
    int16_t x3;
} xcb_xf86dri_drm_clip_rect_t;

/**
 * @@brief xcb_xf86dri_drm_clip_rect_iterator_t
 **/
typedef struct xcb_xf86dri_drm_clip_rect_iterator_t {
    xcb_xf86dri_drm_clip_rect_t *data;
    int                          rem;
    int                          index;
} xcb_xf86dri_drm_clip_rect_iterator_t;

/**
 * @@brief xcb_xf86dri_query_version_cookie_t
 **/
typedef struct xcb_xf86dri_query_version_cookie_t {
    unsigned int sequence;
} xcb_xf86dri_query_version_cookie_t;

/** Opcode for xcb_xf86dri_query_version. */
#define XCB_XF86DRI_QUERY_VERSION 0

/**
 * @@brief xcb_xf86dri_query_version_request_t
 **/
typedef struct xcb_xf86dri_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_xf86dri_query_version_request_t;

/**
 * @@brief xcb_xf86dri_query_version_reply_t
 **/
typedef struct xcb_xf86dri_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t dri_major_version;
    uint16_t dri_minor_version;
    uint32_t dri_minor_patch;
} xcb_xf86dri_query_version_reply_t;

/**
 * @@brief xcb_xf86dri_query_direct_rendering_capable_cookie_t
 **/
typedef struct xcb_xf86dri_query_direct_rendering_capable_cookie_t {
    unsigned int sequence;
} xcb_xf86dri_query_direct_rendering_capable_cookie_t;

/** Opcode for xcb_xf86dri_query_direct_rendering_capable. */
#define XCB_XF86DRI_QUERY_DIRECT_RENDERING_CAPABLE 1

/**
 * @@brief xcb_xf86dri_query_direct_rendering_capable_request_t
 **/
typedef struct xcb_xf86dri_query_direct_rendering_capable_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
} xcb_xf86dri_query_direct_rendering_capable_request_t;

/**
 * @@brief xcb_xf86dri_query_direct_rendering_capable_reply_t
 **/
typedef struct xcb_xf86dri_query_direct_rendering_capable_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  is_capable;
} xcb_xf86dri_query_direct_rendering_capable_reply_t;

/**
 * @@brief xcb_xf86dri_open_connection_cookie_t
 **/
typedef struct xcb_xf86dri_open_connection_cookie_t {
    unsigned int sequence;
} xcb_xf86dri_open_connection_cookie_t;

/** Opcode for xcb_xf86dri_open_connection. */
#define XCB_XF86DRI_OPEN_CONNECTION 2

/**
 * @@brief xcb_xf86dri_open_connection_request_t
 **/
typedef struct xcb_xf86dri_open_connection_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
} xcb_xf86dri_open_connection_request_t;

/**
 * @@brief xcb_xf86dri_open_connection_reply_t
 **/
typedef struct xcb_xf86dri_open_connection_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t sarea_handle_low;
    uint32_t sarea_handle_high;
    uint32_t bus_id_len;
    uint8_t  pad1[12];
} xcb_xf86dri_open_connection_reply_t;

/** Opcode for xcb_xf86dri_close_connection. */
#define XCB_XF86DRI_CLOSE_CONNECTION 3

/**
 * @@brief xcb_xf86dri_close_connection_request_t
 **/
typedef struct xcb_xf86dri_close_connection_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
} xcb_xf86dri_close_connection_request_t;

/**
 * @@brief xcb_xf86dri_get_client_driver_name_cookie_t
 **/
typedef struct xcb_xf86dri_get_client_driver_name_cookie_t {
    unsigned int sequence;
} xcb_xf86dri_get_client_driver_name_cookie_t;

/** Opcode for xcb_xf86dri_get_client_driver_name. */
#define XCB_XF86DRI_GET_CLIENT_DRIVER_NAME 4

/**
 * @@brief xcb_xf86dri_get_client_driver_name_request_t
 **/
typedef struct xcb_xf86dri_get_client_driver_name_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
} xcb_xf86dri_get_client_driver_name_request_t;

/**
 * @@brief xcb_xf86dri_get_client_driver_name_reply_t
 **/
typedef struct xcb_xf86dri_get_client_driver_name_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t client_driver_major_version;
    uint32_t client_driver_minor_version;
    uint32_t client_driver_patch_version;
    uint32_t client_driver_name_len;
    uint8_t  pad1[8];
} xcb_xf86dri_get_client_driver_name_reply_t;

/**
 * @@brief xcb_xf86dri_create_context_cookie_t
 **/
typedef struct xcb_xf86dri_create_context_cookie_t {
    unsigned int sequence;
} xcb_xf86dri_create_context_cookie_t;

/** Opcode for xcb_xf86dri_create_context. */
#define XCB_XF86DRI_CREATE_CONTEXT 5

/**
 * @@brief xcb_xf86dri_create_context_request_t
 **/
typedef struct xcb_xf86dri_create_context_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
    uint32_t visual;
    uint32_t context;
} xcb_xf86dri_create_context_request_t;

/**
 * @@brief xcb_xf86dri_create_context_reply_t
 **/
typedef struct xcb_xf86dri_create_context_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t hw_context;
} xcb_xf86dri_create_context_reply_t;

/** Opcode for xcb_xf86dri_destroy_context. */
#define XCB_XF86DRI_DESTROY_CONTEXT 6

/**
 * @@brief xcb_xf86dri_destroy_context_request_t
 **/
typedef struct xcb_xf86dri_destroy_context_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
    uint32_t context;
} xcb_xf86dri_destroy_context_request_t;

/**
 * @@brief xcb_xf86dri_create_drawable_cookie_t
 **/
typedef struct xcb_xf86dri_create_drawable_cookie_t {
    unsigned int sequence;
} xcb_xf86dri_create_drawable_cookie_t;

/** Opcode for xcb_xf86dri_create_drawable. */
#define XCB_XF86DRI_CREATE_DRAWABLE 7

/**
 * @@brief xcb_xf86dri_create_drawable_request_t
 **/
typedef struct xcb_xf86dri_create_drawable_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
    uint32_t drawable;
} xcb_xf86dri_create_drawable_request_t;

/**
 * @@brief xcb_xf86dri_create_drawable_reply_t
 **/
typedef struct xcb_xf86dri_create_drawable_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t hw_drawable_handle;
} xcb_xf86dri_create_drawable_reply_t;

/** Opcode for xcb_xf86dri_destroy_drawable. */
#define XCB_XF86DRI_DESTROY_DRAWABLE 8

/**
 * @@brief xcb_xf86dri_destroy_drawable_request_t
 **/
typedef struct xcb_xf86dri_destroy_drawable_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
    uint32_t drawable;
} xcb_xf86dri_destroy_drawable_request_t;

/**
 * @@brief xcb_xf86dri_get_drawable_info_cookie_t
 **/
typedef struct xcb_xf86dri_get_drawable_info_cookie_t {
    unsigned int sequence;
} xcb_xf86dri_get_drawable_info_cookie_t;

/** Opcode for xcb_xf86dri_get_drawable_info. */
#define XCB_XF86DRI_GET_DRAWABLE_INFO 9

/**
 * @@brief xcb_xf86dri_get_drawable_info_request_t
 **/
typedef struct xcb_xf86dri_get_drawable_info_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
    uint32_t drawable;
} xcb_xf86dri_get_drawable_info_request_t;

/**
 * @@brief xcb_xf86dri_get_drawable_info_reply_t
 **/
typedef struct xcb_xf86dri_get_drawable_info_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t drawable_table_index;
    uint32_t drawable_table_stamp;
    int16_t  drawable_origin_X;
    int16_t  drawable_origin_Y;
    int16_t  drawable_size_W;
    int16_t  drawable_size_H;
    uint32_t num_clip_rects;
    int16_t  back_x;
    int16_t  back_y;
    uint32_t num_back_clip_rects;
} xcb_xf86dri_get_drawable_info_reply_t;

/**
 * @@brief xcb_xf86dri_get_device_info_cookie_t
 **/
typedef struct xcb_xf86dri_get_device_info_cookie_t {
    unsigned int sequence;
} xcb_xf86dri_get_device_info_cookie_t;

/** Opcode for xcb_xf86dri_get_device_info. */
#define XCB_XF86DRI_GET_DEVICE_INFO 10

/**
 * @@brief xcb_xf86dri_get_device_info_request_t
 **/
typedef struct xcb_xf86dri_get_device_info_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
} xcb_xf86dri_get_device_info_request_t;

/**
 * @@brief xcb_xf86dri_get_device_info_reply_t
 **/
typedef struct xcb_xf86dri_get_device_info_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t framebuffer_handle_low;
    uint32_t framebuffer_handle_high;
    uint32_t framebuffer_origin_offset;
    uint32_t framebuffer_size;
    uint32_t framebuffer_stride;
    uint32_t device_private_size;
} xcb_xf86dri_get_device_info_reply_t;

/**
 * @@brief xcb_xf86dri_auth_connection_cookie_t
 **/
typedef struct xcb_xf86dri_auth_connection_cookie_t {
    unsigned int sequence;
} xcb_xf86dri_auth_connection_cookie_t;

/** Opcode for xcb_xf86dri_auth_connection. */
#define XCB_XF86DRI_AUTH_CONNECTION 11

/**
 * @@brief xcb_xf86dri_auth_connection_request_t
 **/
typedef struct xcb_xf86dri_auth_connection_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
    uint32_t magic;
} xcb_xf86dri_auth_connection_request_t;

/**
 * @@brief xcb_xf86dri_auth_connection_reply_t
 **/
typedef struct xcb_xf86dri_auth_connection_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t authenticated;
} xcb_xf86dri_auth_connection_reply_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xf86dri_drm_clip_rect_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xf86dri_drm_clip_rect_t)
 */
void
xcb_xf86dri_drm_clip_rect_next (xcb_xf86dri_drm_clip_rect_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xf86dri_drm_clip_rect_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xf86dri_drm_clip_rect_end (xcb_xf86dri_drm_clip_rect_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xf86dri_query_version_cookie_t
xcb_xf86dri_query_version (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xf86dri_query_version_cookie_t
xcb_xf86dri_query_version_unchecked (xcb_connection_t *c);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xf86dri_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xf86dri_query_version_reply_t *
xcb_xf86dri_query_version_reply (xcb_connection_t                    *c,
                                 xcb_xf86dri_query_version_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xf86dri_query_direct_rendering_capable_cookie_t
xcb_xf86dri_query_direct_rendering_capable (xcb_connection_t *c,
                                            uint32_t          screen);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xf86dri_query_direct_rendering_capable_cookie_t
xcb_xf86dri_query_direct_rendering_capable_unchecked (xcb_connection_t *c,
                                                      uint32_t          screen);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xf86dri_query_direct_rendering_capable_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xf86dri_query_direct_rendering_capable_reply_t *
xcb_xf86dri_query_direct_rendering_capable_reply (xcb_connection_t                                     *c,
                                                  xcb_xf86dri_query_direct_rendering_capable_cookie_t   cookie  /**< */,
                                                  xcb_generic_error_t                                 **e);

int
xcb_xf86dri_open_connection_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xf86dri_open_connection_cookie_t
xcb_xf86dri_open_connection (xcb_connection_t *c,
                             uint32_t          screen);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xf86dri_open_connection_cookie_t
xcb_xf86dri_open_connection_unchecked (xcb_connection_t *c,
                                       uint32_t          screen);

char *
xcb_xf86dri_open_connection_bus_id (const xcb_xf86dri_open_connection_reply_t *R);

int
xcb_xf86dri_open_connection_bus_id_length (const xcb_xf86dri_open_connection_reply_t *R);

xcb_generic_iterator_t
xcb_xf86dri_open_connection_bus_id_end (const xcb_xf86dri_open_connection_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xf86dri_open_connection_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xf86dri_open_connection_reply_t *
xcb_xf86dri_open_connection_reply (xcb_connection_t                      *c,
                                   xcb_xf86dri_open_connection_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xf86dri_close_connection_checked (xcb_connection_t *c,
                                      uint32_t          screen);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xf86dri_close_connection (xcb_connection_t *c,
                              uint32_t          screen);

int
xcb_xf86dri_get_client_driver_name_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xf86dri_get_client_driver_name_cookie_t
xcb_xf86dri_get_client_driver_name (xcb_connection_t *c,
                                    uint32_t          screen);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xf86dri_get_client_driver_name_cookie_t
xcb_xf86dri_get_client_driver_name_unchecked (xcb_connection_t *c,
                                              uint32_t          screen);

char *
xcb_xf86dri_get_client_driver_name_client_driver_name (const xcb_xf86dri_get_client_driver_name_reply_t *R);

int
xcb_xf86dri_get_client_driver_name_client_driver_name_length (const xcb_xf86dri_get_client_driver_name_reply_t *R);

xcb_generic_iterator_t
xcb_xf86dri_get_client_driver_name_client_driver_name_end (const xcb_xf86dri_get_client_driver_name_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xf86dri_get_client_driver_name_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xf86dri_get_client_driver_name_reply_t *
xcb_xf86dri_get_client_driver_name_reply (xcb_connection_t                             *c,
                                          xcb_xf86dri_get_client_driver_name_cookie_t   cookie  /**< */,
                                          xcb_generic_error_t                         **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xf86dri_create_context_cookie_t
xcb_xf86dri_create_context (xcb_connection_t *c,
                            uint32_t          screen,
                            uint32_t          visual,
                            uint32_t          context);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xf86dri_create_context_cookie_t
xcb_xf86dri_create_context_unchecked (xcb_connection_t *c,
                                      uint32_t          screen,
                                      uint32_t          visual,
                                      uint32_t          context);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xf86dri_create_context_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xf86dri_create_context_reply_t *
xcb_xf86dri_create_context_reply (xcb_connection_t                     *c,
                                  xcb_xf86dri_create_context_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xf86dri_destroy_context_checked (xcb_connection_t *c,
                                     uint32_t          screen,
                                     uint32_t          context);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xf86dri_destroy_context (xcb_connection_t *c,
                             uint32_t          screen,
                             uint32_t          context);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xf86dri_create_drawable_cookie_t
xcb_xf86dri_create_drawable (xcb_connection_t *c,
                             uint32_t          screen,
                             uint32_t          drawable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xf86dri_create_drawable_cookie_t
xcb_xf86dri_create_drawable_unchecked (xcb_connection_t *c,
                                       uint32_t          screen,
                                       uint32_t          drawable);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xf86dri_create_drawable_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xf86dri_create_drawable_reply_t *
xcb_xf86dri_create_drawable_reply (xcb_connection_t                      *c,
                                   xcb_xf86dri_create_drawable_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_xf86dri_destroy_drawable_checked (xcb_connection_t *c,
                                      uint32_t          screen,
                                      uint32_t          drawable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_xf86dri_destroy_drawable (xcb_connection_t *c,
                              uint32_t          screen,
                              uint32_t          drawable);

int
xcb_xf86dri_get_drawable_info_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xf86dri_get_drawable_info_cookie_t
xcb_xf86dri_get_drawable_info (xcb_connection_t *c,
                               uint32_t          screen,
                               uint32_t          drawable);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xf86dri_get_drawable_info_cookie_t
xcb_xf86dri_get_drawable_info_unchecked (xcb_connection_t *c,
                                         uint32_t          screen,
                                         uint32_t          drawable);

xcb_xf86dri_drm_clip_rect_t *
xcb_xf86dri_get_drawable_info_clip_rects (const xcb_xf86dri_get_drawable_info_reply_t *R);

int
xcb_xf86dri_get_drawable_info_clip_rects_length (const xcb_xf86dri_get_drawable_info_reply_t *R);

xcb_xf86dri_drm_clip_rect_iterator_t
xcb_xf86dri_get_drawable_info_clip_rects_iterator (const xcb_xf86dri_get_drawable_info_reply_t *R);

xcb_xf86dri_drm_clip_rect_t *
xcb_xf86dri_get_drawable_info_back_clip_rects (const xcb_xf86dri_get_drawable_info_reply_t *R);

int
xcb_xf86dri_get_drawable_info_back_clip_rects_length (const xcb_xf86dri_get_drawable_info_reply_t *R);

xcb_xf86dri_drm_clip_rect_iterator_t
xcb_xf86dri_get_drawable_info_back_clip_rects_iterator (const xcb_xf86dri_get_drawable_info_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xf86dri_get_drawable_info_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xf86dri_get_drawable_info_reply_t *
xcb_xf86dri_get_drawable_info_reply (xcb_connection_t                        *c,
                                     xcb_xf86dri_get_drawable_info_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e);

int
xcb_xf86dri_get_device_info_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xf86dri_get_device_info_cookie_t
xcb_xf86dri_get_device_info (xcb_connection_t *c,
                             uint32_t          screen);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xf86dri_get_device_info_cookie_t
xcb_xf86dri_get_device_info_unchecked (xcb_connection_t *c,
                                       uint32_t          screen);

uint32_t *
xcb_xf86dri_get_device_info_device_private (const xcb_xf86dri_get_device_info_reply_t *R);

int
xcb_xf86dri_get_device_info_device_private_length (const xcb_xf86dri_get_device_info_reply_t *R);

xcb_generic_iterator_t
xcb_xf86dri_get_device_info_device_private_end (const xcb_xf86dri_get_device_info_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xf86dri_get_device_info_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xf86dri_get_device_info_reply_t *
xcb_xf86dri_get_device_info_reply (xcb_connection_t                      *c,
                                   xcb_xf86dri_get_device_info_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xf86dri_auth_connection_cookie_t
xcb_xf86dri_auth_connection (xcb_connection_t *c,
                             uint32_t          screen,
                             uint32_t          magic);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xf86dri_auth_connection_cookie_t
xcb_xf86dri_auth_connection_unchecked (xcb_connection_t *c,
                                       uint32_t          screen,
                                       uint32_t          magic);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xf86dri_auth_connection_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xf86dri_auth_connection_reply_t *
xcb_xf86dri_auth_connection_reply (xcb_connection_t                      *c,
                                   xcb_xf86dri_auth_connection_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d30 4
a33 4
    int16_t x1; /**<  */
    int16_t y1; /**<  */
    int16_t x2; /**<  */
    int16_t x3; /**<  */
d40 3
a42 3
    xcb_xf86dri_drm_clip_rect_t *data; /**<  */
    int                          rem; /**<  */
    int                          index; /**<  */
d49 1
a49 1
    unsigned int sequence; /**<  */
d59 3
a61 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d68 7
a74 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t dri_major_version; /**<  */
    uint16_t dri_minor_version; /**<  */
    uint32_t dri_minor_patch; /**<  */
d81 1
a81 1
    unsigned int sequence; /**<  */
d91 4
a94 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
d101 5
a105 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  is_capable; /**<  */
d112 1
a112 1
    unsigned int sequence; /**<  */
d122 4
a125 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
d132 8
a139 8
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t sarea_handle_low; /**<  */
    uint32_t sarea_handle_high; /**<  */
    uint32_t bus_id_len; /**<  */
    uint8_t  pad1[12]; /**<  */
d149 4
a152 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
d159 1
a159 1
    unsigned int sequence; /**<  */
d169 4
a172 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
d179 9
a187 9
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t client_driver_major_version; /**<  */
    uint32_t client_driver_minor_version; /**<  */
    uint32_t client_driver_patch_version; /**<  */
    uint32_t client_driver_name_len; /**<  */
    uint8_t  pad1[8]; /**<  */
d194 1
a194 1
    unsigned int sequence; /**<  */
d204 6
a209 6
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
    uint32_t visual; /**<  */
    uint32_t context; /**<  */
d216 5
a220 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t hw_context; /**<  */
d230 5
a234 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
    uint32_t context; /**<  */
d241 1
a241 1
    unsigned int sequence; /**<  */
d251 5
a255 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
    uint32_t drawable; /**<  */
d262 5
a266 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t hw_drawable_handle; /**<  */
d276 5
a280 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
    uint32_t drawable; /**<  */
d287 1
a287 1
    unsigned int sequence; /**<  */
d297 5
a301 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
    uint32_t drawable; /**<  */
d308 14
a321 14
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t drawable_table_index; /**<  */
    uint32_t drawable_table_stamp; /**<  */
    int16_t  drawable_origin_X; /**<  */
    int16_t  drawable_origin_Y; /**<  */
    int16_t  drawable_size_W; /**<  */
    int16_t  drawable_size_H; /**<  */
    uint32_t num_clip_rects; /**<  */
    int16_t  back_x; /**<  */
    int16_t  back_y; /**<  */
    uint32_t num_back_clip_rects; /**<  */
d328 1
a328 1
    unsigned int sequence; /**<  */
d338 4
a341 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
d348 10
a357 10
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t framebuffer_handle_low; /**<  */
    uint32_t framebuffer_handle_high; /**<  */
    uint32_t framebuffer_origin_offset; /**<  */
    uint32_t framebuffer_size; /**<  */
    uint32_t framebuffer_stride; /**<  */
    uint32_t device_private_size; /**<  */
d364 1
a364 1
    unsigned int sequence; /**<  */
d374 5
a378 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
    uint32_t magic; /**<  */
d385 5
a389 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t authenticated; /**<  */
d401 1
a401 1
xcb_xf86dri_drm_clip_rect_next (xcb_xf86dri_drm_clip_rect_iterator_t *i  /**< */);
d413 1
a413 1
xcb_xf86dri_drm_clip_rect_end (xcb_xf86dri_drm_clip_rect_iterator_t i  /**< */);
d424 1
a424 1
xcb_xf86dri_query_version (xcb_connection_t *c  /**< */);
d438 1
a438 1
xcb_xf86dri_query_version_unchecked (xcb_connection_t *c  /**< */);
d455 1
a455 1
xcb_xf86dri_query_version_reply (xcb_connection_t                    *c  /**< */,
d457 1
a457 1
                                 xcb_generic_error_t                **e  /**< */);
d468 2
a469 2
xcb_xf86dri_query_direct_rendering_capable (xcb_connection_t *c  /**< */,
                                            uint32_t          screen  /**< */);
d483 2
a484 2
xcb_xf86dri_query_direct_rendering_capable_unchecked (xcb_connection_t *c  /**< */,
                                                      uint32_t          screen  /**< */);
d501 1
a501 1
xcb_xf86dri_query_direct_rendering_capable_reply (xcb_connection_t                                     *c  /**< */,
d503 1
a503 1
                                                  xcb_generic_error_t                                 **e  /**< */);
d506 1
a506 1
xcb_xf86dri_open_connection_sizeof (const void  *_buffer  /**< */);
d517 2
a518 2
xcb_xf86dri_open_connection (xcb_connection_t *c  /**< */,
                             uint32_t          screen  /**< */);
d532 2
a533 2
xcb_xf86dri_open_connection_unchecked (xcb_connection_t *c  /**< */,
                                       uint32_t          screen  /**< */);
d536 1
a536 1
xcb_xf86dri_open_connection_bus_id (const xcb_xf86dri_open_connection_reply_t *R  /**< */);
d539 1
a539 1
xcb_xf86dri_open_connection_bus_id_length (const xcb_xf86dri_open_connection_reply_t *R  /**< */);
d542 1
a542 1
xcb_xf86dri_open_connection_bus_id_end (const xcb_xf86dri_open_connection_reply_t *R  /**< */);
d559 1
a559 1
xcb_xf86dri_open_connection_reply (xcb_connection_t                      *c  /**< */,
d561 1
a561 1
                                   xcb_generic_error_t                  **e  /**< */);
d575 2
a576 2
xcb_xf86dri_close_connection_checked (xcb_connection_t *c  /**< */,
                                      uint32_t          screen  /**< */);
d587 2
a588 2
xcb_xf86dri_close_connection (xcb_connection_t *c  /**< */,
                              uint32_t          screen  /**< */);
d591 1
a591 1
xcb_xf86dri_get_client_driver_name_sizeof (const void  *_buffer  /**< */);
d602 2
a603 2
xcb_xf86dri_get_client_driver_name (xcb_connection_t *c  /**< */,
                                    uint32_t          screen  /**< */);
d617 2
a618 2
xcb_xf86dri_get_client_driver_name_unchecked (xcb_connection_t *c  /**< */,
                                              uint32_t          screen  /**< */);
d621 1
a621 1
xcb_xf86dri_get_client_driver_name_client_driver_name (const xcb_xf86dri_get_client_driver_name_reply_t *R  /**< */);
d624 1
a624 1
xcb_xf86dri_get_client_driver_name_client_driver_name_length (const xcb_xf86dri_get_client_driver_name_reply_t *R  /**< */);
d627 1
a627 1
xcb_xf86dri_get_client_driver_name_client_driver_name_end (const xcb_xf86dri_get_client_driver_name_reply_t *R  /**< */);
d644 1
a644 1
xcb_xf86dri_get_client_driver_name_reply (xcb_connection_t                             *c  /**< */,
d646 1
a646 1
                                          xcb_generic_error_t                         **e  /**< */);
d657 4
a660 4
xcb_xf86dri_create_context (xcb_connection_t *c  /**< */,
                            uint32_t          screen  /**< */,
                            uint32_t          visual  /**< */,
                            uint32_t          context  /**< */);
d674 4
a677 4
xcb_xf86dri_create_context_unchecked (xcb_connection_t *c  /**< */,
                                      uint32_t          screen  /**< */,
                                      uint32_t          visual  /**< */,
                                      uint32_t          context  /**< */);
d694 1
a694 1
xcb_xf86dri_create_context_reply (xcb_connection_t                     *c  /**< */,
d696 1
a696 1
                                  xcb_generic_error_t                 **e  /**< */);
d710 3
a712 3
xcb_xf86dri_destroy_context_checked (xcb_connection_t *c  /**< */,
                                     uint32_t          screen  /**< */,
                                     uint32_t          context  /**< */);
d723 3
a725 3
xcb_xf86dri_destroy_context (xcb_connection_t *c  /**< */,
                             uint32_t          screen  /**< */,
                             uint32_t          context  /**< */);
d736 3
a738 3
xcb_xf86dri_create_drawable (xcb_connection_t *c  /**< */,
                             uint32_t          screen  /**< */,
                             uint32_t          drawable  /**< */);
d752 3
a754 3
xcb_xf86dri_create_drawable_unchecked (xcb_connection_t *c  /**< */,
                                       uint32_t          screen  /**< */,
                                       uint32_t          drawable  /**< */);
d771 1
a771 1
xcb_xf86dri_create_drawable_reply (xcb_connection_t                      *c  /**< */,
d773 1
a773 1
                                   xcb_generic_error_t                  **e  /**< */);
d787 3
a789 3
xcb_xf86dri_destroy_drawable_checked (xcb_connection_t *c  /**< */,
                                      uint32_t          screen  /**< */,
                                      uint32_t          drawable  /**< */);
d800 3
a802 3
xcb_xf86dri_destroy_drawable (xcb_connection_t *c  /**< */,
                              uint32_t          screen  /**< */,
                              uint32_t          drawable  /**< */);
d805 1
a805 1
xcb_xf86dri_get_drawable_info_sizeof (const void  *_buffer  /**< */);
d816 3
a818 3
xcb_xf86dri_get_drawable_info (xcb_connection_t *c  /**< */,
                               uint32_t          screen  /**< */,
                               uint32_t          drawable  /**< */);
d832 3
a834 3
xcb_xf86dri_get_drawable_info_unchecked (xcb_connection_t *c  /**< */,
                                         uint32_t          screen  /**< */,
                                         uint32_t          drawable  /**< */);
d837 1
a837 1
xcb_xf86dri_get_drawable_info_clip_rects (const xcb_xf86dri_get_drawable_info_reply_t *R  /**< */);
d840 1
a840 1
xcb_xf86dri_get_drawable_info_clip_rects_length (const xcb_xf86dri_get_drawable_info_reply_t *R  /**< */);
d843 1
a843 1
xcb_xf86dri_get_drawable_info_clip_rects_iterator (const xcb_xf86dri_get_drawable_info_reply_t *R  /**< */);
d846 1
a846 1
xcb_xf86dri_get_drawable_info_back_clip_rects (const xcb_xf86dri_get_drawable_info_reply_t *R  /**< */);
d849 1
a849 1
xcb_xf86dri_get_drawable_info_back_clip_rects_length (const xcb_xf86dri_get_drawable_info_reply_t *R  /**< */);
d852 1
a852 1
xcb_xf86dri_get_drawable_info_back_clip_rects_iterator (const xcb_xf86dri_get_drawable_info_reply_t *R  /**< */);
d869 1
a869 1
xcb_xf86dri_get_drawable_info_reply (xcb_connection_t                        *c  /**< */,
d871 1
a871 1
                                     xcb_generic_error_t                    **e  /**< */);
d874 1
a874 1
xcb_xf86dri_get_device_info_sizeof (const void  *_buffer  /**< */);
d885 2
a886 2
xcb_xf86dri_get_device_info (xcb_connection_t *c  /**< */,
                             uint32_t          screen  /**< */);
d900 2
a901 2
xcb_xf86dri_get_device_info_unchecked (xcb_connection_t *c  /**< */,
                                       uint32_t          screen  /**< */);
d904 1
a904 1
xcb_xf86dri_get_device_info_device_private (const xcb_xf86dri_get_device_info_reply_t *R  /**< */);
d907 1
a907 1
xcb_xf86dri_get_device_info_device_private_length (const xcb_xf86dri_get_device_info_reply_t *R  /**< */);
d910 1
a910 1
xcb_xf86dri_get_device_info_device_private_end (const xcb_xf86dri_get_device_info_reply_t *R  /**< */);
d927 1
a927 1
xcb_xf86dri_get_device_info_reply (xcb_connection_t                      *c  /**< */,
d929 1
a929 1
                                   xcb_generic_error_t                  **e  /**< */);
d940 3
a942 3
xcb_xf86dri_auth_connection (xcb_connection_t *c  /**< */,
                             uint32_t          screen  /**< */,
                             uint32_t          magic  /**< */);
d956 3
a958 3
xcb_xf86dri_auth_connection_unchecked (xcb_connection_t *c  /**< */,
                                       uint32_t          screen  /**< */,
                                       uint32_t          magic  /**< */);
d975 1
a975 1
xcb_xf86dri_auth_connection_reply (xcb_connection_t                      *c  /**< */,
d977 1
a977 1
                                   xcb_generic_error_t                  **e  /**< */);
@


1.4
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d23 1
a23 1
  
a399 10

/*****************************************************************************
 **
 ** void xcb_xf86dri_drm_clip_rect_next
 ** 
 ** @@param xcb_xf86dri_drm_clip_rect_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a411 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xf86dri_drm_clip_rect_end
 ** 
 ** @@param xcb_xf86dri_drm_clip_rect_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d421 1
a421 1
 * 
a422 10

/*****************************************************************************
 **
 ** xcb_xf86dri_query_version_cookie_t xcb_xf86dri_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xf86dri_query_version_cookie_t
 **
 *****************************************************************************/
 
d432 1
a432 1
 * 
a436 10

/*****************************************************************************
 **
 ** xcb_xf86dri_query_version_cookie_t xcb_xf86dri_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xf86dri_query_version_cookie_t
 **
 *****************************************************************************/
 
d447 1
a447 1
 * 
a453 12

/*****************************************************************************
 **
 ** xcb_xf86dri_query_version_reply_t * xcb_xf86dri_query_version_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_xf86dri_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_xf86dri_query_version_reply_t *
 **
 *****************************************************************************/
 
d465 1
a465 1
 * 
a466 11

/*****************************************************************************
 **
 ** xcb_xf86dri_query_direct_rendering_capable_cookie_t xcb_xf86dri_query_direct_rendering_capable
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_query_direct_rendering_capable_cookie_t
 **
 *****************************************************************************/
 
d477 1
a477 1
 * 
a481 11

/*****************************************************************************
 **
 ** xcb_xf86dri_query_direct_rendering_capable_cookie_t xcb_xf86dri_query_direct_rendering_capable_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_query_direct_rendering_capable_cookie_t
 **
 *****************************************************************************/
 
d493 1
a493 1
 * 
a499 12

/*****************************************************************************
 **
 ** xcb_xf86dri_query_direct_rendering_capable_reply_t * xcb_xf86dri_query_direct_rendering_capable_reply
 ** 
 ** @@param xcb_connection_t                                     *c
 ** @@param xcb_xf86dri_query_direct_rendering_capable_cookie_t   cookie
 ** @@param xcb_generic_error_t                                 **e
 ** @@returns xcb_xf86dri_query_direct_rendering_capable_reply_t *
 **
 *****************************************************************************/
 
d514 1
a514 1
 * 
a515 11

/*****************************************************************************
 **
 ** xcb_xf86dri_open_connection_cookie_t xcb_xf86dri_open_connection
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_open_connection_cookie_t
 **
 *****************************************************************************/
 
d526 1
a526 1
 * 
a530 11

/*****************************************************************************
 **
 ** xcb_xf86dri_open_connection_cookie_t xcb_xf86dri_open_connection_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_open_connection_cookie_t
 **
 *****************************************************************************/
 
a534 10

/*****************************************************************************
 **
 ** char * xcb_xf86dri_open_connection_bus_id
 ** 
 ** @@param const xcb_xf86dri_open_connection_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a537 10

/*****************************************************************************
 **
 ** int xcb_xf86dri_open_connection_bus_id_length
 ** 
 ** @@param const xcb_xf86dri_open_connection_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a540 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xf86dri_open_connection_bus_id_end
 ** 
 ** @@param const xcb_xf86dri_open_connection_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d551 1
a551 1
 * 
a557 12

/*****************************************************************************
 **
 ** xcb_xf86dri_open_connection_reply_t * xcb_xf86dri_open_connection_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xf86dri_open_connection_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_xf86dri_open_connection_reply_t *
 **
 *****************************************************************************/
 
d569 1
a569 1
 * 
a573 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xf86dri_close_connection_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d584 1
a584 1
 * 
a585 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xf86dri_close_connection
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d599 1
a599 1
 * 
a600 11

/*****************************************************************************
 **
 ** xcb_xf86dri_get_client_driver_name_cookie_t xcb_xf86dri_get_client_driver_name
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_get_client_driver_name_cookie_t
 **
 *****************************************************************************/
 
d611 1
a611 1
 * 
a615 11

/*****************************************************************************
 **
 ** xcb_xf86dri_get_client_driver_name_cookie_t xcb_xf86dri_get_client_driver_name_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_get_client_driver_name_cookie_t
 **
 *****************************************************************************/
 
a619 10

/*****************************************************************************
 **
 ** char * xcb_xf86dri_get_client_driver_name_client_driver_name
 ** 
 ** @@param const xcb_xf86dri_get_client_driver_name_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a622 10

/*****************************************************************************
 **
 ** int xcb_xf86dri_get_client_driver_name_client_driver_name_length
 ** 
 ** @@param const xcb_xf86dri_get_client_driver_name_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a625 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xf86dri_get_client_driver_name_client_driver_name_end
 ** 
 ** @@param const xcb_xf86dri_get_client_driver_name_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d636 1
a636 1
 * 
a642 12

/*****************************************************************************
 **
 ** xcb_xf86dri_get_client_driver_name_reply_t * xcb_xf86dri_get_client_driver_name_reply
 ** 
 ** @@param xcb_connection_t                             *c
 ** @@param xcb_xf86dri_get_client_driver_name_cookie_t   cookie
 ** @@param xcb_generic_error_t                         **e
 ** @@returns xcb_xf86dri_get_client_driver_name_reply_t *
 **
 *****************************************************************************/
 
d654 1
a654 1
 * 
a655 13

/*****************************************************************************
 **
 ** xcb_xf86dri_create_context_cookie_t xcb_xf86dri_create_context
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          visual
 ** @@param uint32_t          context
 ** @@returns xcb_xf86dri_create_context_cookie_t
 **
 *****************************************************************************/
 
d668 1
a668 1
 * 
a672 13

/*****************************************************************************
 **
 ** xcb_xf86dri_create_context_cookie_t xcb_xf86dri_create_context_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          visual
 ** @@param uint32_t          context
 ** @@returns xcb_xf86dri_create_context_cookie_t
 **
 *****************************************************************************/
 
d686 1
a686 1
 * 
a692 12

/*****************************************************************************
 **
 ** xcb_xf86dri_create_context_reply_t * xcb_xf86dri_create_context_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_xf86dri_create_context_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_xf86dri_create_context_reply_t *
 **
 *****************************************************************************/
 
d704 1
a704 1
 * 
a708 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xf86dri_destroy_context_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d720 1
a720 1
 * 
a721 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xf86dri_destroy_context
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          context
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d733 1
a733 1
 * 
a734 12

/*****************************************************************************
 **
 ** xcb_xf86dri_create_drawable_cookie_t xcb_xf86dri_create_drawable
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          drawable
 ** @@returns xcb_xf86dri_create_drawable_cookie_t
 **
 *****************************************************************************/
 
d746 1
a746 1
 * 
a750 12

/*****************************************************************************
 **
 ** xcb_xf86dri_create_drawable_cookie_t xcb_xf86dri_create_drawable_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          drawable
 ** @@returns xcb_xf86dri_create_drawable_cookie_t
 **
 *****************************************************************************/
 
d763 1
a763 1
 * 
a769 12

/*****************************************************************************
 **
 ** xcb_xf86dri_create_drawable_reply_t * xcb_xf86dri_create_drawable_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xf86dri_create_drawable_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_xf86dri_create_drawable_reply_t *
 **
 *****************************************************************************/
 
d781 1
a781 1
 * 
a785 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xf86dri_destroy_drawable_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d797 1
a797 1
 * 
a798 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xf86dri_destroy_drawable
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d813 1
a813 1
 * 
a814 12

/*****************************************************************************
 **
 ** xcb_xf86dri_get_drawable_info_cookie_t xcb_xf86dri_get_drawable_info
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          drawable
 ** @@returns xcb_xf86dri_get_drawable_info_cookie_t
 **
 *****************************************************************************/
 
d826 1
a826 1
 * 
a830 12

/*****************************************************************************
 **
 ** xcb_xf86dri_get_drawable_info_cookie_t xcb_xf86dri_get_drawable_info_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          drawable
 ** @@returns xcb_xf86dri_get_drawable_info_cookie_t
 **
 *****************************************************************************/
 
a835 10

/*****************************************************************************
 **
 ** xcb_xf86dri_drm_clip_rect_t * xcb_xf86dri_get_drawable_info_clip_rects
 ** 
 ** @@param const xcb_xf86dri_get_drawable_info_reply_t *R
 ** @@returns xcb_xf86dri_drm_clip_rect_t *
 **
 *****************************************************************************/
 
a838 10

/*****************************************************************************
 **
 ** int xcb_xf86dri_get_drawable_info_clip_rects_length
 ** 
 ** @@param const xcb_xf86dri_get_drawable_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a841 10

/*****************************************************************************
 **
 ** xcb_xf86dri_drm_clip_rect_iterator_t xcb_xf86dri_get_drawable_info_clip_rects_iterator
 ** 
 ** @@param const xcb_xf86dri_get_drawable_info_reply_t *R
 ** @@returns xcb_xf86dri_drm_clip_rect_iterator_t
 **
 *****************************************************************************/
 
a844 10

/*****************************************************************************
 **
 ** xcb_xf86dri_drm_clip_rect_t * xcb_xf86dri_get_drawable_info_back_clip_rects
 ** 
 ** @@param const xcb_xf86dri_get_drawable_info_reply_t *R
 ** @@returns xcb_xf86dri_drm_clip_rect_t *
 **
 *****************************************************************************/
 
a847 10

/*****************************************************************************
 **
 ** int xcb_xf86dri_get_drawable_info_back_clip_rects_length
 ** 
 ** @@param const xcb_xf86dri_get_drawable_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a850 10

/*****************************************************************************
 **
 ** xcb_xf86dri_drm_clip_rect_iterator_t xcb_xf86dri_get_drawable_info_back_clip_rects_iterator
 ** 
 ** @@param const xcb_xf86dri_get_drawable_info_reply_t *R
 ** @@returns xcb_xf86dri_drm_clip_rect_iterator_t
 **
 *****************************************************************************/
 
d861 1
a861 1
 * 
a867 12

/*****************************************************************************
 **
 ** xcb_xf86dri_get_drawable_info_reply_t * xcb_xf86dri_get_drawable_info_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_xf86dri_get_drawable_info_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_xf86dri_get_drawable_info_reply_t *
 **
 *****************************************************************************/
 
d882 1
a882 1
 * 
a883 11

/*****************************************************************************
 **
 ** xcb_xf86dri_get_device_info_cookie_t xcb_xf86dri_get_device_info
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_get_device_info_cookie_t
 **
 *****************************************************************************/
 
d894 1
a894 1
 * 
a898 11

/*****************************************************************************
 **
 ** xcb_xf86dri_get_device_info_cookie_t xcb_xf86dri_get_device_info_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xf86dri_get_device_info_cookie_t
 **
 *****************************************************************************/
 
a902 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xf86dri_get_device_info_device_private
 ** 
 ** @@param const xcb_xf86dri_get_device_info_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a905 10

/*****************************************************************************
 **
 ** int xcb_xf86dri_get_device_info_device_private_length
 ** 
 ** @@param const xcb_xf86dri_get_device_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a908 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xf86dri_get_device_info_device_private_end
 ** 
 ** @@param const xcb_xf86dri_get_device_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d919 1
a919 1
 * 
a925 12

/*****************************************************************************
 **
 ** xcb_xf86dri_get_device_info_reply_t * xcb_xf86dri_get_device_info_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xf86dri_get_device_info_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_xf86dri_get_device_info_reply_t *
 **
 *****************************************************************************/
 
d937 1
a937 1
 * 
a938 12

/*****************************************************************************
 **
 ** xcb_xf86dri_auth_connection_cookie_t xcb_xf86dri_auth_connection
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          magic
 ** @@returns xcb_xf86dri_auth_connection_cookie_t
 **
 *****************************************************************************/
 
d950 1
a950 1
 * 
a954 12

/*****************************************************************************
 **
 ** xcb_xf86dri_auth_connection_cookie_t xcb_xf86dri_auth_connection_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@param uint32_t          magic
 ** @@returns xcb_xf86dri_auth_connection_cookie_t
 **
 *****************************************************************************/
 
d967 1
a967 1
 * 
a973 12

/*****************************************************************************
 **
 ** xcb_xf86dri_auth_connection_reply_t * xcb_xf86dri_auth_connection_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xf86dri_auth_connection_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_xf86dri_auth_connection_reply_t *
 **
 *****************************************************************************/
 
@


1.3
log
@Update to libxcb 1.8.1. Tested by krw@@, mpi@@, shadchin@@
@
text
@d436 1
a436 1
 * Delivers a request to the X server
d457 1
a457 1
 * Delivers a request to the X server
d512 1
a512 1
 * Delivers a request to the X server
d535 1
a535 1
 * Delivers a request to the X server
d591 3
d595 1
a595 1
 * Delivers a request to the X server
d618 1
a618 1
 * Delivers a request to the X server
d714 1
a714 1
 * Delivers a request to the X server
d740 1
a740 1
 * Delivers a request to the X server
d762 3
d766 1
a766 1
 * Delivers a request to the X server
d789 1
a789 1
 * Delivers a request to the X server
d885 1
a885 1
 * Delivers a request to the X server
d912 1
a912 1
 * Delivers a request to the X server
d973 1
a973 1
 * Delivers a request to the X server
d1001 1
a1001 1
 * Delivers a request to the X server
d1026 1
a1026 1
 * Delivers a request to the X server
d1051 1
a1051 1
 * Delivers a request to the X server
d1110 1
a1110 1
 * Delivers a request to the X server
d1138 1
a1138 1
 * Delivers a request to the X server
d1162 3
d1166 1
a1166 1
 * Delivers a request to the X server
d1191 1
a1191 1
 * Delivers a request to the X server
d1327 3
d1331 1
a1331 1
 * Delivers a request to the X server
d1354 1
a1354 1
 * Delivers a request to the X server
d1450 1
a1450 1
 * Delivers a request to the X server
d1475 1
a1475 1
 * Delivers a request to the X server
@


1.2
log
@regen for xcb-proto 1.6
@
text
@d319 3
a321 1
    uint8_t  pad1[4]; /**<  */
d1247 39
@


1.1
log
@Initial revision
@
text
@a135 2
    uint32_t drm_client_key_low; /**<  */
    uint32_t drm_client_key_high; /**<  */
d207 1
a208 1
    uint32_t screen; /**<  */
d890 1
a891 1
 ** @@param uint32_t          screen
d899 1
a900 1
                            uint32_t          screen  /**< */,
d920 1
a921 1
 ** @@param uint32_t          screen
d929 1
a930 1
                                      uint32_t          screen  /**< */,
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
