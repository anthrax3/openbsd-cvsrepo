head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.14
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.31.16.43.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.36;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.36;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from randr.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "randr.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"
#include "render.h"

xcb_extension_t xcb_randr_id = { "RANDR", 0 };

void
xcb_randr_mode_next (xcb_randr_mode_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_mode_t);
}

xcb_generic_iterator_t
xcb_randr_mode_end (xcb_randr_mode_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_randr_crtc_next (xcb_randr_crtc_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_crtc_t);
}

xcb_generic_iterator_t
xcb_randr_crtc_end (xcb_randr_crtc_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_randr_output_next (xcb_randr_output_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_output_t);
}

xcb_generic_iterator_t
xcb_randr_output_end (xcb_randr_output_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_randr_provider_next (xcb_randr_provider_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_provider_t);
}

xcb_generic_iterator_t
xcb_randr_provider_end (xcb_randr_provider_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_randr_screen_size_next (xcb_randr_screen_size_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_screen_size_t);
}

xcb_generic_iterator_t
xcb_randr_screen_size_end (xcb_randr_screen_size_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_randr_refresh_rates_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_refresh_rates_t *_aux = (xcb_randr_refresh_rates_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_refresh_rates_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* rates */
    xcb_block_len += _aux->nRates * sizeof(uint16_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint16_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

uint16_t *
xcb_randr_refresh_rates_rates (const xcb_randr_refresh_rates_t *R)
{
    return (uint16_t *) (R + 1);
}

int
xcb_randr_refresh_rates_rates_length (const xcb_randr_refresh_rates_t *R)
{
    return R->nRates;
}

xcb_generic_iterator_t
xcb_randr_refresh_rates_rates_end (const xcb_randr_refresh_rates_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint16_t *) (R + 1)) + (R->nRates);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_randr_refresh_rates_next (xcb_randr_refresh_rates_iterator_t *i)
{
    xcb_randr_refresh_rates_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_randr_refresh_rates_t *)(((char *)R) + xcb_randr_refresh_rates_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_randr_refresh_rates_t *) child.data;
}

xcb_generic_iterator_t
xcb_randr_refresh_rates_end (xcb_randr_refresh_rates_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_randr_refresh_rates_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

xcb_randr_query_version_cookie_t
xcb_randr_query_version (xcb_connection_t *c,
                         uint32_t          major_version,
                         uint32_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_query_version_cookie_t xcb_ret;
    xcb_randr_query_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_query_version_cookie_t
xcb_randr_query_version_unchecked (xcb_connection_t *c,
                                   uint32_t          major_version,
                                   uint32_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_query_version_cookie_t xcb_ret;
    xcb_randr_query_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_query_version_reply_t *
xcb_randr_query_version_reply (xcb_connection_t                  *c,
                               xcb_randr_query_version_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_randr_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_randr_set_screen_config_cookie_t
xcb_randr_set_screen_config (xcb_connection_t *c,
                             xcb_window_t      window,
                             xcb_timestamp_t   timestamp,
                             xcb_timestamp_t   config_timestamp,
                             uint16_t          sizeID,
                             uint16_t          rotation,
                             uint16_t          rate)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_SCREEN_CONFIG,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_set_screen_config_cookie_t xcb_ret;
    xcb_randr_set_screen_config_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.timestamp = timestamp;
    xcb_out.config_timestamp = config_timestamp;
    xcb_out.sizeID = sizeID;
    xcb_out.rotation = rotation;
    xcb_out.rate = rate;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_set_screen_config_cookie_t
xcb_randr_set_screen_config_unchecked (xcb_connection_t *c,
                                       xcb_window_t      window,
                                       xcb_timestamp_t   timestamp,
                                       xcb_timestamp_t   config_timestamp,
                                       uint16_t          sizeID,
                                       uint16_t          rotation,
                                       uint16_t          rate)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_SCREEN_CONFIG,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_set_screen_config_cookie_t xcb_ret;
    xcb_randr_set_screen_config_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.timestamp = timestamp;
    xcb_out.config_timestamp = config_timestamp;
    xcb_out.sizeID = sizeID;
    xcb_out.rotation = rotation;
    xcb_out.rate = rate;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_set_screen_config_reply_t *
xcb_randr_set_screen_config_reply (xcb_connection_t                      *c,
                                   xcb_randr_set_screen_config_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_randr_set_screen_config_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_randr_select_input_checked (xcb_connection_t *c,
                                xcb_window_t      window,
                                uint16_t          enable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SELECT_INPUT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_select_input_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.enable = enable;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_select_input (xcb_connection_t *c,
                        xcb_window_t      window,
                        uint16_t          enable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SELECT_INPUT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_select_input_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.enable = enable;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_randr_get_screen_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_get_screen_info_reply_t *_aux = (xcb_randr_get_screen_info_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_randr_get_screen_info_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* sizes */
    xcb_block_len += _aux->nSizes * sizeof(xcb_randr_screen_size_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_screen_size_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* rates */
    for(i=0; i<(_aux->nInfo - _aux->nSizes); i++) {
        xcb_tmp_len = xcb_randr_refresh_rates_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_randr_refresh_rates_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_get_screen_info_cookie_t
xcb_randr_get_screen_info (xcb_connection_t *c,
                           xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_SCREEN_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_screen_info_cookie_t xcb_ret;
    xcb_randr_get_screen_info_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_screen_info_cookie_t
xcb_randr_get_screen_info_unchecked (xcb_connection_t *c,
                                     xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_SCREEN_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_screen_info_cookie_t xcb_ret;
    xcb_randr_get_screen_info_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_screen_size_t *
xcb_randr_get_screen_info_sizes (const xcb_randr_get_screen_info_reply_t *R)
{
    return (xcb_randr_screen_size_t *) (R + 1);
}

int
xcb_randr_get_screen_info_sizes_length (const xcb_randr_get_screen_info_reply_t *R)
{
    return R->nSizes;
}

xcb_randr_screen_size_iterator_t
xcb_randr_get_screen_info_sizes_iterator (const xcb_randr_get_screen_info_reply_t *R)
{
    xcb_randr_screen_size_iterator_t i;
    i.data = (xcb_randr_screen_size_t *) (R + 1);
    i.rem = R->nSizes;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_randr_get_screen_info_rates_length (const xcb_randr_get_screen_info_reply_t *R)
{
    return (R->nInfo - R->nSizes);
}

xcb_randr_refresh_rates_iterator_t
xcb_randr_get_screen_info_rates_iterator (const xcb_randr_get_screen_info_reply_t *R)
{
    xcb_randr_refresh_rates_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_screen_size_end(xcb_randr_get_screen_info_sizes_iterator(R));
    i.data = (xcb_randr_refresh_rates_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_randr_refresh_rates_t, prev.index));
    i.rem = (R->nInfo - R->nSizes);
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_get_screen_info_reply_t *
xcb_randr_get_screen_info_reply (xcb_connection_t                    *c,
                                 xcb_randr_get_screen_info_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_randr_get_screen_info_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_randr_get_screen_size_range_cookie_t
xcb_randr_get_screen_size_range (xcb_connection_t *c,
                                 xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_SCREEN_SIZE_RANGE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_screen_size_range_cookie_t xcb_ret;
    xcb_randr_get_screen_size_range_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_screen_size_range_cookie_t
xcb_randr_get_screen_size_range_unchecked (xcb_connection_t *c,
                                           xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_SCREEN_SIZE_RANGE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_screen_size_range_cookie_t xcb_ret;
    xcb_randr_get_screen_size_range_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_screen_size_range_reply_t *
xcb_randr_get_screen_size_range_reply (xcb_connection_t                          *c,
                                       xcb_randr_get_screen_size_range_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e)
{
    return (xcb_randr_get_screen_size_range_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_randr_set_screen_size_checked (xcb_connection_t *c,
                                   xcb_window_t      window,
                                   uint16_t          width,
                                   uint16_t          height,
                                   uint32_t          mm_width,
                                   uint32_t          mm_height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_SCREEN_SIZE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_set_screen_size_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.mm_width = mm_width;
    xcb_out.mm_height = mm_height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_set_screen_size (xcb_connection_t *c,
                           xcb_window_t      window,
                           uint16_t          width,
                           uint16_t          height,
                           uint32_t          mm_width,
                           uint32_t          mm_height)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_SCREEN_SIZE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_set_screen_size_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.mm_width = mm_width;
    xcb_out.mm_height = mm_height;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void
xcb_randr_mode_info_next (xcb_randr_mode_info_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_mode_info_t);
}

xcb_generic_iterator_t
xcb_randr_mode_info_end (xcb_randr_mode_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_randr_get_screen_resources_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_get_screen_resources_reply_t *_aux = (xcb_randr_get_screen_resources_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_get_screen_resources_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* crtcs */
    xcb_block_len += _aux->num_crtcs * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_crtc_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* outputs */
    xcb_block_len += _aux->num_outputs * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_output_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* modes */
    xcb_block_len += _aux->num_modes * sizeof(xcb_randr_mode_info_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_mode_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* names */
    xcb_block_len += _aux->names_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_get_screen_resources_cookie_t
xcb_randr_get_screen_resources (xcb_connection_t *c,
                                xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_SCREEN_RESOURCES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_screen_resources_cookie_t xcb_ret;
    xcb_randr_get_screen_resources_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_screen_resources_cookie_t
xcb_randr_get_screen_resources_unchecked (xcb_connection_t *c,
                                          xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_SCREEN_RESOURCES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_screen_resources_cookie_t xcb_ret;
    xcb_randr_get_screen_resources_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_crtc_t *
xcb_randr_get_screen_resources_crtcs (const xcb_randr_get_screen_resources_reply_t *R)
{
    return (xcb_randr_crtc_t *) (R + 1);
}

int
xcb_randr_get_screen_resources_crtcs_length (const xcb_randr_get_screen_resources_reply_t *R)
{
    return R->num_crtcs;
}

xcb_generic_iterator_t
xcb_randr_get_screen_resources_crtcs_end (const xcb_randr_get_screen_resources_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_randr_crtc_t *) (R + 1)) + (R->num_crtcs);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_output_t *
xcb_randr_get_screen_resources_outputs (const xcb_randr_get_screen_resources_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_screen_resources_crtcs_end(R);
    return (xcb_randr_output_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_randr_output_t, prev.index) + 0);
}

int
xcb_randr_get_screen_resources_outputs_length (const xcb_randr_get_screen_resources_reply_t *R)
{
    return R->num_outputs;
}

xcb_generic_iterator_t
xcb_randr_get_screen_resources_outputs_end (const xcb_randr_get_screen_resources_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_screen_resources_crtcs_end(R);
    i.data = ((xcb_randr_output_t *) ((char*) prev.data + XCB_TYPE_PAD(xcb_randr_output_t, prev.index))) + (R->num_outputs);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_mode_info_t *
xcb_randr_get_screen_resources_modes (const xcb_randr_get_screen_resources_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_screen_resources_outputs_end(R);
    return (xcb_randr_mode_info_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_randr_mode_info_t, prev.index) + 0);
}

int
xcb_randr_get_screen_resources_modes_length (const xcb_randr_get_screen_resources_reply_t *R)
{
    return R->num_modes;
}

xcb_randr_mode_info_iterator_t
xcb_randr_get_screen_resources_modes_iterator (const xcb_randr_get_screen_resources_reply_t *R)
{
    xcb_randr_mode_info_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_screen_resources_outputs_end(R);
    i.data = (xcb_randr_mode_info_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_randr_mode_info_t, prev.index));
    i.rem = R->num_modes;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint8_t *
xcb_randr_get_screen_resources_names (const xcb_randr_get_screen_resources_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_mode_info_end(xcb_randr_get_screen_resources_modes_iterator(R));
    return (uint8_t *) ((char *) prev.data + XCB_TYPE_PAD(uint8_t, prev.index) + 0);
}

int
xcb_randr_get_screen_resources_names_length (const xcb_randr_get_screen_resources_reply_t *R)
{
    return R->names_len;
}

xcb_generic_iterator_t
xcb_randr_get_screen_resources_names_end (const xcb_randr_get_screen_resources_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_mode_info_end(xcb_randr_get_screen_resources_modes_iterator(R));
    i.data = ((uint8_t *) ((char*) prev.data + XCB_TYPE_PAD(uint8_t, prev.index))) + (R->names_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_get_screen_resources_reply_t *
xcb_randr_get_screen_resources_reply (xcb_connection_t                         *c,
                                      xcb_randr_get_screen_resources_cookie_t   cookie  /**< */,
                                      xcb_generic_error_t                     **e)
{
    return (xcb_randr_get_screen_resources_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_randr_get_output_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_get_output_info_reply_t *_aux = (xcb_randr_get_output_info_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_get_output_info_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* crtcs */
    xcb_block_len += _aux->num_crtcs * sizeof(xcb_randr_output_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_crtc_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* modes */
    xcb_block_len += _aux->num_modes * sizeof(xcb_randr_output_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_mode_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* clones */
    xcb_block_len += _aux->num_clones * sizeof(xcb_randr_output_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_output_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_get_output_info_cookie_t
xcb_randr_get_output_info (xcb_connection_t   *c,
                           xcb_randr_output_t  output,
                           xcb_timestamp_t     config_timestamp)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_OUTPUT_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_output_info_cookie_t xcb_ret;
    xcb_randr_get_output_info_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.config_timestamp = config_timestamp;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_output_info_cookie_t
xcb_randr_get_output_info_unchecked (xcb_connection_t   *c,
                                     xcb_randr_output_t  output,
                                     xcb_timestamp_t     config_timestamp)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_OUTPUT_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_output_info_cookie_t xcb_ret;
    xcb_randr_get_output_info_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.config_timestamp = config_timestamp;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_crtc_t *
xcb_randr_get_output_info_crtcs (const xcb_randr_get_output_info_reply_t *R)
{
    return (xcb_randr_crtc_t *) (R + 1);
}

int
xcb_randr_get_output_info_crtcs_length (const xcb_randr_get_output_info_reply_t *R)
{
    return R->num_crtcs;
}

xcb_generic_iterator_t
xcb_randr_get_output_info_crtcs_end (const xcb_randr_get_output_info_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_randr_crtc_t *) (R + 1)) + (R->num_crtcs);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_mode_t *
xcb_randr_get_output_info_modes (const xcb_randr_get_output_info_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_output_info_crtcs_end(R);
    return (xcb_randr_mode_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_randr_mode_t, prev.index) + 0);
}

int
xcb_randr_get_output_info_modes_length (const xcb_randr_get_output_info_reply_t *R)
{
    return R->num_modes;
}

xcb_generic_iterator_t
xcb_randr_get_output_info_modes_end (const xcb_randr_get_output_info_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_output_info_crtcs_end(R);
    i.data = ((xcb_randr_mode_t *) ((char*) prev.data + XCB_TYPE_PAD(xcb_randr_mode_t, prev.index))) + (R->num_modes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_output_t *
xcb_randr_get_output_info_clones (const xcb_randr_get_output_info_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_output_info_modes_end(R);
    return (xcb_randr_output_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_randr_output_t, prev.index) + 0);
}

int
xcb_randr_get_output_info_clones_length (const xcb_randr_get_output_info_reply_t *R)
{
    return R->num_clones;
}

xcb_generic_iterator_t
xcb_randr_get_output_info_clones_end (const xcb_randr_get_output_info_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_output_info_modes_end(R);
    i.data = ((xcb_randr_output_t *) ((char*) prev.data + XCB_TYPE_PAD(xcb_randr_output_t, prev.index))) + (R->num_clones);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint8_t *
xcb_randr_get_output_info_name (const xcb_randr_get_output_info_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_output_info_clones_end(R);
    return (uint8_t *) ((char *) prev.data + XCB_TYPE_PAD(uint8_t, prev.index) + 0);
}

int
xcb_randr_get_output_info_name_length (const xcb_randr_get_output_info_reply_t *R)
{
    return R->name_len;
}

xcb_generic_iterator_t
xcb_randr_get_output_info_name_end (const xcb_randr_get_output_info_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_output_info_clones_end(R);
    i.data = ((uint8_t *) ((char*) prev.data + XCB_TYPE_PAD(uint8_t, prev.index))) + (R->name_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_get_output_info_reply_t *
xcb_randr_get_output_info_reply (xcb_connection_t                    *c,
                                 xcb_randr_get_output_info_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_randr_get_output_info_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_randr_list_output_properties_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_list_output_properties_reply_t *_aux = (xcb_randr_list_output_properties_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_list_output_properties_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* atoms */
    xcb_block_len += _aux->num_atoms * sizeof(xcb_atom_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_atom_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_list_output_properties_cookie_t
xcb_randr_list_output_properties (xcb_connection_t   *c,
                                  xcb_randr_output_t  output)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_LIST_OUTPUT_PROPERTIES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_list_output_properties_cookie_t xcb_ret;
    xcb_randr_list_output_properties_request_t xcb_out;

    xcb_out.output = output;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_list_output_properties_cookie_t
xcb_randr_list_output_properties_unchecked (xcb_connection_t   *c,
                                            xcb_randr_output_t  output)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_LIST_OUTPUT_PROPERTIES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_list_output_properties_cookie_t xcb_ret;
    xcb_randr_list_output_properties_request_t xcb_out;

    xcb_out.output = output;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_atom_t *
xcb_randr_list_output_properties_atoms (const xcb_randr_list_output_properties_reply_t *R)
{
    return (xcb_atom_t *) (R + 1);
}

int
xcb_randr_list_output_properties_atoms_length (const xcb_randr_list_output_properties_reply_t *R)
{
    return R->num_atoms;
}

xcb_generic_iterator_t
xcb_randr_list_output_properties_atoms_end (const xcb_randr_list_output_properties_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_atom_t *) (R + 1)) + (R->num_atoms);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_list_output_properties_reply_t *
xcb_randr_list_output_properties_reply (xcb_connection_t                           *c,
                                        xcb_randr_list_output_properties_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e)
{
    return (xcb_randr_list_output_properties_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_randr_query_output_property_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_query_output_property_reply_t *_aux = (xcb_randr_query_output_property_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_query_output_property_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* validValues */
    xcb_block_len += _aux->length * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_query_output_property_cookie_t
xcb_randr_query_output_property (xcb_connection_t   *c,
                                 xcb_randr_output_t  output,
                                 xcb_atom_t          property)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_QUERY_OUTPUT_PROPERTY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_query_output_property_cookie_t xcb_ret;
    xcb_randr_query_output_property_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.property = property;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_query_output_property_cookie_t
xcb_randr_query_output_property_unchecked (xcb_connection_t   *c,
                                           xcb_randr_output_t  output,
                                           xcb_atom_t          property)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_QUERY_OUTPUT_PROPERTY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_query_output_property_cookie_t xcb_ret;
    xcb_randr_query_output_property_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.property = property;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_randr_query_output_property_valid_values (const xcb_randr_query_output_property_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_randr_query_output_property_valid_values_length (const xcb_randr_query_output_property_reply_t *R)
{
    return R->length;
}

xcb_generic_iterator_t
xcb_randr_query_output_property_valid_values_end (const xcb_randr_query_output_property_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_query_output_property_reply_t *
xcb_randr_query_output_property_reply (xcb_connection_t                          *c,
                                       xcb_randr_query_output_property_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e)
{
    return (xcb_randr_query_output_property_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_randr_configure_output_property_sizeof (const void  *_buffer,
                                            uint32_t     values_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_configure_output_property_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* values */
    xcb_block_len += values_len * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_randr_configure_output_property_checked (xcb_connection_t   *c,
                                             xcb_randr_output_t  output,
                                             xcb_atom_t          property,
                                             uint8_t             pending,
                                             uint8_t             range,
                                             uint32_t            values_len,
                                             const int32_t      *values)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_CONFIGURE_OUTPUT_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_configure_output_property_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.property = property;
    xcb_out.pending = pending;
    xcb_out.range = range;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* int32_t values */
    xcb_parts[4].iov_base = (char *) values;
    xcb_parts[4].iov_len = values_len * sizeof(int32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_configure_output_property (xcb_connection_t   *c,
                                     xcb_randr_output_t  output,
                                     xcb_atom_t          property,
                                     uint8_t             pending,
                                     uint8_t             range,
                                     uint32_t            values_len,
                                     const int32_t      *values)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_CONFIGURE_OUTPUT_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_configure_output_property_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.property = property;
    xcb_out.pending = pending;
    xcb_out.range = range;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* int32_t values */
    xcb_parts[4].iov_base = (char *) values;
    xcb_parts[4].iov_len = values_len * sizeof(int32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_randr_configure_output_property_values (const xcb_randr_configure_output_property_request_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_randr_configure_output_property_values_length (const xcb_randr_configure_output_property_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_randr_configure_output_property_request_t))/sizeof(int32_t));
}

xcb_generic_iterator_t
xcb_randr_configure_output_property_values_end (const xcb_randr_configure_output_property_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_randr_configure_output_property_request_t))/sizeof(int32_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_randr_change_output_property_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_change_output_property_request_t *_aux = (xcb_randr_change_output_property_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_change_output_property_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += ((_aux->num_units * _aux->format) / 8) * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_randr_change_output_property_checked (xcb_connection_t   *c,
                                          xcb_randr_output_t  output,
                                          xcb_atom_t          property,
                                          xcb_atom_t          type,
                                          uint8_t             format,
                                          uint8_t             mode,
                                          uint32_t            num_units,
                                          const void         *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_CHANGE_OUTPUT_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_change_output_property_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.format = format;
    xcb_out.mode = mode;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.num_units = num_units;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* void data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = ((num_units * format) / 8) * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_change_output_property (xcb_connection_t   *c,
                                  xcb_randr_output_t  output,
                                  xcb_atom_t          property,
                                  xcb_atom_t          type,
                                  uint8_t             format,
                                  uint8_t             mode,
                                  uint32_t            num_units,
                                  const void         *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_CHANGE_OUTPUT_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_change_output_property_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.format = format;
    xcb_out.mode = mode;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.num_units = num_units;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* void data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = ((num_units * format) / 8) * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void *
xcb_randr_change_output_property_data (const xcb_randr_change_output_property_request_t *R)
{
    return (void *) (R + 1);
}

int
xcb_randr_change_output_property_data_length (const xcb_randr_change_output_property_request_t *R)
{
    return ((R->num_units * R->format) / 8);
}

xcb_generic_iterator_t
xcb_randr_change_output_property_data_end (const xcb_randr_change_output_property_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (((R->num_units * R->format) / 8));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_randr_delete_output_property_checked (xcb_connection_t   *c,
                                          xcb_randr_output_t  output,
                                          xcb_atom_t          property)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_DELETE_OUTPUT_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_delete_output_property_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.property = property;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_delete_output_property (xcb_connection_t   *c,
                                  xcb_randr_output_t  output,
                                  xcb_atom_t          property)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_DELETE_OUTPUT_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_delete_output_property_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.property = property;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_randr_get_output_property_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_get_output_property_reply_t *_aux = (xcb_randr_get_output_property_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_get_output_property_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += (_aux->num_items * (_aux->format / 8)) * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_get_output_property_cookie_t
xcb_randr_get_output_property (xcb_connection_t   *c,
                               xcb_randr_output_t  output,
                               xcb_atom_t          property,
                               xcb_atom_t          type,
                               uint32_t            long_offset,
                               uint32_t            long_length,
                               uint8_t             _delete,
                               uint8_t             pending)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_OUTPUT_PROPERTY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_output_property_cookie_t xcb_ret;
    xcb_randr_get_output_property_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.long_offset = long_offset;
    xcb_out.long_length = long_length;
    xcb_out._delete = _delete;
    xcb_out.pending = pending;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_output_property_cookie_t
xcb_randr_get_output_property_unchecked (xcb_connection_t   *c,
                                         xcb_randr_output_t  output,
                                         xcb_atom_t          property,
                                         xcb_atom_t          type,
                                         uint32_t            long_offset,
                                         uint32_t            long_length,
                                         uint8_t             _delete,
                                         uint8_t             pending)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_OUTPUT_PROPERTY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_output_property_cookie_t xcb_ret;
    xcb_randr_get_output_property_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.long_offset = long_offset;
    xcb_out.long_length = long_length;
    xcb_out._delete = _delete;
    xcb_out.pending = pending;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint8_t *
xcb_randr_get_output_property_data (const xcb_randr_get_output_property_reply_t *R)
{
    return (uint8_t *) (R + 1);
}

int
xcb_randr_get_output_property_data_length (const xcb_randr_get_output_property_reply_t *R)
{
    return (R->num_items * (R->format / 8));
}

xcb_generic_iterator_t
xcb_randr_get_output_property_data_end (const xcb_randr_get_output_property_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint8_t *) (R + 1)) + ((R->num_items * (R->format / 8)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_get_output_property_reply_t *
xcb_randr_get_output_property_reply (xcb_connection_t                        *c,
                                     xcb_randr_get_output_property_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e)
{
    return (xcb_randr_get_output_property_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_randr_create_mode_sizeof (const void  *_buffer,
                              uint32_t     name_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_create_mode_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_create_mode_cookie_t
xcb_randr_create_mode (xcb_connection_t      *c,
                       xcb_window_t           window,
                       xcb_randr_mode_info_t  mode_info,
                       uint32_t               name_len,
                       const char            *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_CREATE_MODE,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_randr_create_mode_cookie_t xcb_ret;
    xcb_randr_create_mode_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.mode_info = mode_info;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_create_mode_cookie_t
xcb_randr_create_mode_unchecked (xcb_connection_t      *c,
                                 xcb_window_t           window,
                                 xcb_randr_mode_info_t  mode_info,
                                 uint32_t               name_len,
                                 const char            *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_CREATE_MODE,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_randr_create_mode_cookie_t xcb_ret;
    xcb_randr_create_mode_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.mode_info = mode_info;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = name_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_create_mode_reply_t *
xcb_randr_create_mode_reply (xcb_connection_t                *c,
                             xcb_randr_create_mode_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_randr_create_mode_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_randr_destroy_mode_checked (xcb_connection_t *c,
                                xcb_randr_mode_t  mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_DESTROY_MODE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_destroy_mode_request_t xcb_out;

    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_destroy_mode (xcb_connection_t *c,
                        xcb_randr_mode_t  mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_DESTROY_MODE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_destroy_mode_request_t xcb_out;

    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_add_output_mode_checked (xcb_connection_t   *c,
                                   xcb_randr_output_t  output,
                                   xcb_randr_mode_t    mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_ADD_OUTPUT_MODE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_add_output_mode_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_add_output_mode (xcb_connection_t   *c,
                           xcb_randr_output_t  output,
                           xcb_randr_mode_t    mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_ADD_OUTPUT_MODE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_add_output_mode_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_delete_output_mode_checked (xcb_connection_t   *c,
                                      xcb_randr_output_t  output,
                                      xcb_randr_mode_t    mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_DELETE_OUTPUT_MODE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_delete_output_mode_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_delete_output_mode (xcb_connection_t   *c,
                              xcb_randr_output_t  output,
                              xcb_randr_mode_t    mode)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_DELETE_OUTPUT_MODE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_delete_output_mode_request_t xcb_out;

    xcb_out.output = output;
    xcb_out.mode = mode;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_randr_get_crtc_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_get_crtc_info_reply_t *_aux = (xcb_randr_get_crtc_info_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_get_crtc_info_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* outputs */
    xcb_block_len += _aux->num_outputs * sizeof(xcb_randr_output_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_output_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* possible */
    xcb_block_len += _aux->num_possible_outputs * sizeof(xcb_randr_output_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_output_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_get_crtc_info_cookie_t
xcb_randr_get_crtc_info (xcb_connection_t *c,
                         xcb_randr_crtc_t  crtc,
                         xcb_timestamp_t   config_timestamp)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_CRTC_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_crtc_info_cookie_t xcb_ret;
    xcb_randr_get_crtc_info_request_t xcb_out;

    xcb_out.crtc = crtc;
    xcb_out.config_timestamp = config_timestamp;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_crtc_info_cookie_t
xcb_randr_get_crtc_info_unchecked (xcb_connection_t *c,
                                   xcb_randr_crtc_t  crtc,
                                   xcb_timestamp_t   config_timestamp)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_CRTC_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_crtc_info_cookie_t xcb_ret;
    xcb_randr_get_crtc_info_request_t xcb_out;

    xcb_out.crtc = crtc;
    xcb_out.config_timestamp = config_timestamp;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_output_t *
xcb_randr_get_crtc_info_outputs (const xcb_randr_get_crtc_info_reply_t *R)
{
    return (xcb_randr_output_t *) (R + 1);
}

int
xcb_randr_get_crtc_info_outputs_length (const xcb_randr_get_crtc_info_reply_t *R)
{
    return R->num_outputs;
}

xcb_generic_iterator_t
xcb_randr_get_crtc_info_outputs_end (const xcb_randr_get_crtc_info_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_randr_output_t *) (R + 1)) + (R->num_outputs);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_output_t *
xcb_randr_get_crtc_info_possible (const xcb_randr_get_crtc_info_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_crtc_info_outputs_end(R);
    return (xcb_randr_output_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_randr_output_t, prev.index) + 0);
}

int
xcb_randr_get_crtc_info_possible_length (const xcb_randr_get_crtc_info_reply_t *R)
{
    return R->num_possible_outputs;
}

xcb_generic_iterator_t
xcb_randr_get_crtc_info_possible_end (const xcb_randr_get_crtc_info_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_crtc_info_outputs_end(R);
    i.data = ((xcb_randr_output_t *) ((char*) prev.data + XCB_TYPE_PAD(xcb_randr_output_t, prev.index))) + (R->num_possible_outputs);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_get_crtc_info_reply_t *
xcb_randr_get_crtc_info_reply (xcb_connection_t                  *c,
                               xcb_randr_get_crtc_info_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_randr_get_crtc_info_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_randr_set_crtc_config_sizeof (const void  *_buffer,
                                  uint32_t     outputs_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_set_crtc_config_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* outputs */
    xcb_block_len += outputs_len * sizeof(xcb_randr_output_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_output_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_set_crtc_config_cookie_t
xcb_randr_set_crtc_config (xcb_connection_t         *c,
                           xcb_randr_crtc_t          crtc,
                           xcb_timestamp_t           timestamp,
                           xcb_timestamp_t           config_timestamp,
                           int16_t                   x,
                           int16_t                   y,
                           xcb_randr_mode_t          mode,
                           uint16_t                  rotation,
                           uint32_t                  outputs_len,
                           const xcb_randr_output_t *outputs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_CRTC_CONFIG,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_randr_set_crtc_config_cookie_t xcb_ret;
    xcb_randr_set_crtc_config_request_t xcb_out;

    xcb_out.crtc = crtc;
    xcb_out.timestamp = timestamp;
    xcb_out.config_timestamp = config_timestamp;
    xcb_out.x = x;
    xcb_out.y = y;
    xcb_out.mode = mode;
    xcb_out.rotation = rotation;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_randr_output_t outputs */
    xcb_parts[4].iov_base = (char *) outputs;
    xcb_parts[4].iov_len = outputs_len * sizeof(xcb_timestamp_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_set_crtc_config_cookie_t
xcb_randr_set_crtc_config_unchecked (xcb_connection_t         *c,
                                     xcb_randr_crtc_t          crtc,
                                     xcb_timestamp_t           timestamp,
                                     xcb_timestamp_t           config_timestamp,
                                     int16_t                   x,
                                     int16_t                   y,
                                     xcb_randr_mode_t          mode,
                                     uint16_t                  rotation,
                                     uint32_t                  outputs_len,
                                     const xcb_randr_output_t *outputs)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_CRTC_CONFIG,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_randr_set_crtc_config_cookie_t xcb_ret;
    xcb_randr_set_crtc_config_request_t xcb_out;

    xcb_out.crtc = crtc;
    xcb_out.timestamp = timestamp;
    xcb_out.config_timestamp = config_timestamp;
    xcb_out.x = x;
    xcb_out.y = y;
    xcb_out.mode = mode;
    xcb_out.rotation = rotation;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_randr_output_t outputs */
    xcb_parts[4].iov_base = (char *) outputs;
    xcb_parts[4].iov_len = outputs_len * sizeof(xcb_timestamp_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_set_crtc_config_reply_t *
xcb_randr_set_crtc_config_reply (xcb_connection_t                    *c,
                                 xcb_randr_set_crtc_config_cookie_t   cookie  /**< */,
                                 xcb_generic_error_t                **e)
{
    return (xcb_randr_set_crtc_config_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_randr_get_crtc_gamma_size_cookie_t
xcb_randr_get_crtc_gamma_size (xcb_connection_t *c,
                               xcb_randr_crtc_t  crtc)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_CRTC_GAMMA_SIZE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_crtc_gamma_size_cookie_t xcb_ret;
    xcb_randr_get_crtc_gamma_size_request_t xcb_out;

    xcb_out.crtc = crtc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_crtc_gamma_size_cookie_t
xcb_randr_get_crtc_gamma_size_unchecked (xcb_connection_t *c,
                                         xcb_randr_crtc_t  crtc)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_CRTC_GAMMA_SIZE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_crtc_gamma_size_cookie_t xcb_ret;
    xcb_randr_get_crtc_gamma_size_request_t xcb_out;

    xcb_out.crtc = crtc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_crtc_gamma_size_reply_t *
xcb_randr_get_crtc_gamma_size_reply (xcb_connection_t                        *c,
                                     xcb_randr_get_crtc_gamma_size_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e)
{
    return (xcb_randr_get_crtc_gamma_size_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_randr_get_crtc_gamma_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_get_crtc_gamma_reply_t *_aux = (xcb_randr_get_crtc_gamma_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_get_crtc_gamma_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* red */
    xcb_block_len += _aux->size * sizeof(uint16_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint16_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* green */
    xcb_block_len += _aux->size * sizeof(uint16_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint16_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* blue */
    xcb_block_len += _aux->size * sizeof(uint16_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint16_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_get_crtc_gamma_cookie_t
xcb_randr_get_crtc_gamma (xcb_connection_t *c,
                          xcb_randr_crtc_t  crtc)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_CRTC_GAMMA,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_crtc_gamma_cookie_t xcb_ret;
    xcb_randr_get_crtc_gamma_request_t xcb_out;

    xcb_out.crtc = crtc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_crtc_gamma_cookie_t
xcb_randr_get_crtc_gamma_unchecked (xcb_connection_t *c,
                                    xcb_randr_crtc_t  crtc)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_CRTC_GAMMA,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_crtc_gamma_cookie_t xcb_ret;
    xcb_randr_get_crtc_gamma_request_t xcb_out;

    xcb_out.crtc = crtc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint16_t *
xcb_randr_get_crtc_gamma_red (const xcb_randr_get_crtc_gamma_reply_t *R)
{
    return (uint16_t *) (R + 1);
}

int
xcb_randr_get_crtc_gamma_red_length (const xcb_randr_get_crtc_gamma_reply_t *R)
{
    return R->size;
}

xcb_generic_iterator_t
xcb_randr_get_crtc_gamma_red_end (const xcb_randr_get_crtc_gamma_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint16_t *) (R + 1)) + (R->size);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint16_t *
xcb_randr_get_crtc_gamma_green (const xcb_randr_get_crtc_gamma_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_crtc_gamma_red_end(R);
    return (uint16_t *) ((char *) prev.data + XCB_TYPE_PAD(uint16_t, prev.index) + 0);
}

int
xcb_randr_get_crtc_gamma_green_length (const xcb_randr_get_crtc_gamma_reply_t *R)
{
    return R->size;
}

xcb_generic_iterator_t
xcb_randr_get_crtc_gamma_green_end (const xcb_randr_get_crtc_gamma_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_crtc_gamma_red_end(R);
    i.data = ((uint16_t *) ((char*) prev.data + XCB_TYPE_PAD(uint16_t, prev.index))) + (R->size);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint16_t *
xcb_randr_get_crtc_gamma_blue (const xcb_randr_get_crtc_gamma_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_crtc_gamma_green_end(R);
    return (uint16_t *) ((char *) prev.data + XCB_TYPE_PAD(uint16_t, prev.index) + 0);
}

int
xcb_randr_get_crtc_gamma_blue_length (const xcb_randr_get_crtc_gamma_reply_t *R)
{
    return R->size;
}

xcb_generic_iterator_t
xcb_randr_get_crtc_gamma_blue_end (const xcb_randr_get_crtc_gamma_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_crtc_gamma_green_end(R);
    i.data = ((uint16_t *) ((char*) prev.data + XCB_TYPE_PAD(uint16_t, prev.index))) + (R->size);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_get_crtc_gamma_reply_t *
xcb_randr_get_crtc_gamma_reply (xcb_connection_t                   *c,
                                xcb_randr_get_crtc_gamma_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_randr_get_crtc_gamma_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_randr_set_crtc_gamma_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_set_crtc_gamma_request_t *_aux = (xcb_randr_set_crtc_gamma_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_set_crtc_gamma_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* red */
    xcb_block_len += _aux->size * sizeof(uint16_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint16_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* green */
    xcb_block_len += _aux->size * sizeof(uint16_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint16_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* blue */
    xcb_block_len += _aux->size * sizeof(uint16_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint16_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_randr_set_crtc_gamma_checked (xcb_connection_t *c,
                                  xcb_randr_crtc_t  crtc,
                                  uint16_t          size,
                                  const uint16_t   *red,
                                  const uint16_t   *green,
                                  const uint16_t   *blue)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 8,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_CRTC_GAMMA,
        .isvoid = 1
    };

    struct iovec xcb_parts[10];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_set_crtc_gamma_request_t xcb_out;

    xcb_out.crtc = crtc;
    xcb_out.size = size;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint16_t red */
    xcb_parts[4].iov_base = (char *) red;
    xcb_parts[4].iov_len = size * sizeof(uint16_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* uint16_t green */
    xcb_parts[6].iov_base = (char *) green;
    xcb_parts[6].iov_len = size * sizeof(uint16_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;
    /* uint16_t blue */
    xcb_parts[8].iov_base = (char *) blue;
    xcb_parts[8].iov_len = size * sizeof(uint16_t);
    xcb_parts[9].iov_base = 0;
    xcb_parts[9].iov_len = -xcb_parts[8].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_set_crtc_gamma (xcb_connection_t *c,
                          xcb_randr_crtc_t  crtc,
                          uint16_t          size,
                          const uint16_t   *red,
                          const uint16_t   *green,
                          const uint16_t   *blue)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 8,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_CRTC_GAMMA,
        .isvoid = 1
    };

    struct iovec xcb_parts[10];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_set_crtc_gamma_request_t xcb_out;

    xcb_out.crtc = crtc;
    xcb_out.size = size;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint16_t red */
    xcb_parts[4].iov_base = (char *) red;
    xcb_parts[4].iov_len = size * sizeof(uint16_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* uint16_t green */
    xcb_parts[6].iov_base = (char *) green;
    xcb_parts[6].iov_len = size * sizeof(uint16_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;
    /* uint16_t blue */
    xcb_parts[8].iov_base = (char *) blue;
    xcb_parts[8].iov_len = size * sizeof(uint16_t);
    xcb_parts[9].iov_base = 0;
    xcb_parts[9].iov_len = -xcb_parts[8].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint16_t *
xcb_randr_set_crtc_gamma_red (const xcb_randr_set_crtc_gamma_request_t *R)
{
    return (uint16_t *) (R + 1);
}

int
xcb_randr_set_crtc_gamma_red_length (const xcb_randr_set_crtc_gamma_request_t *R)
{
    return R->size;
}

xcb_generic_iterator_t
xcb_randr_set_crtc_gamma_red_end (const xcb_randr_set_crtc_gamma_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint16_t *) (R + 1)) + (R->size);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint16_t *
xcb_randr_set_crtc_gamma_green (const xcb_randr_set_crtc_gamma_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_set_crtc_gamma_red_end(R);
    return (uint16_t *) ((char *) prev.data + XCB_TYPE_PAD(uint16_t, prev.index) + 0);
}

int
xcb_randr_set_crtc_gamma_green_length (const xcb_randr_set_crtc_gamma_request_t *R)
{
    return R->size;
}

xcb_generic_iterator_t
xcb_randr_set_crtc_gamma_green_end (const xcb_randr_set_crtc_gamma_request_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_set_crtc_gamma_red_end(R);
    i.data = ((uint16_t *) ((char*) prev.data + XCB_TYPE_PAD(uint16_t, prev.index))) + (R->size);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint16_t *
xcb_randr_set_crtc_gamma_blue (const xcb_randr_set_crtc_gamma_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_set_crtc_gamma_green_end(R);
    return (uint16_t *) ((char *) prev.data + XCB_TYPE_PAD(uint16_t, prev.index) + 0);
}

int
xcb_randr_set_crtc_gamma_blue_length (const xcb_randr_set_crtc_gamma_request_t *R)
{
    return R->size;
}

xcb_generic_iterator_t
xcb_randr_set_crtc_gamma_blue_end (const xcb_randr_set_crtc_gamma_request_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_set_crtc_gamma_green_end(R);
    i.data = ((uint16_t *) ((char*) prev.data + XCB_TYPE_PAD(uint16_t, prev.index))) + (R->size);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_randr_get_screen_resources_current_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_get_screen_resources_current_reply_t *_aux = (xcb_randr_get_screen_resources_current_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_get_screen_resources_current_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* crtcs */
    xcb_block_len += _aux->num_crtcs * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_crtc_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* outputs */
    xcb_block_len += _aux->num_outputs * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_output_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* modes */
    xcb_block_len += _aux->num_modes * sizeof(xcb_randr_mode_info_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_mode_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* names */
    xcb_block_len += _aux->names_len * sizeof(uint8_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint8_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_get_screen_resources_current_cookie_t
xcb_randr_get_screen_resources_current (xcb_connection_t *c,
                                        xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_SCREEN_RESOURCES_CURRENT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_screen_resources_current_cookie_t xcb_ret;
    xcb_randr_get_screen_resources_current_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_screen_resources_current_cookie_t
xcb_randr_get_screen_resources_current_unchecked (xcb_connection_t *c,
                                                  xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_SCREEN_RESOURCES_CURRENT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_screen_resources_current_cookie_t xcb_ret;
    xcb_randr_get_screen_resources_current_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_crtc_t *
xcb_randr_get_screen_resources_current_crtcs (const xcb_randr_get_screen_resources_current_reply_t *R)
{
    return (xcb_randr_crtc_t *) (R + 1);
}

int
xcb_randr_get_screen_resources_current_crtcs_length (const xcb_randr_get_screen_resources_current_reply_t *R)
{
    return R->num_crtcs;
}

xcb_generic_iterator_t
xcb_randr_get_screen_resources_current_crtcs_end (const xcb_randr_get_screen_resources_current_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_randr_crtc_t *) (R + 1)) + (R->num_crtcs);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_output_t *
xcb_randr_get_screen_resources_current_outputs (const xcb_randr_get_screen_resources_current_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_screen_resources_current_crtcs_end(R);
    return (xcb_randr_output_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_randr_output_t, prev.index) + 0);
}

int
xcb_randr_get_screen_resources_current_outputs_length (const xcb_randr_get_screen_resources_current_reply_t *R)
{
    return R->num_outputs;
}

xcb_generic_iterator_t
xcb_randr_get_screen_resources_current_outputs_end (const xcb_randr_get_screen_resources_current_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_screen_resources_current_crtcs_end(R);
    i.data = ((xcb_randr_output_t *) ((char*) prev.data + XCB_TYPE_PAD(xcb_randr_output_t, prev.index))) + (R->num_outputs);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_mode_info_t *
xcb_randr_get_screen_resources_current_modes (const xcb_randr_get_screen_resources_current_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_screen_resources_current_outputs_end(R);
    return (xcb_randr_mode_info_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_randr_mode_info_t, prev.index) + 0);
}

int
xcb_randr_get_screen_resources_current_modes_length (const xcb_randr_get_screen_resources_current_reply_t *R)
{
    return R->num_modes;
}

xcb_randr_mode_info_iterator_t
xcb_randr_get_screen_resources_current_modes_iterator (const xcb_randr_get_screen_resources_current_reply_t *R)
{
    xcb_randr_mode_info_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_screen_resources_current_outputs_end(R);
    i.data = (xcb_randr_mode_info_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_randr_mode_info_t, prev.index));
    i.rem = R->num_modes;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint8_t *
xcb_randr_get_screen_resources_current_names (const xcb_randr_get_screen_resources_current_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_mode_info_end(xcb_randr_get_screen_resources_current_modes_iterator(R));
    return (uint8_t *) ((char *) prev.data + XCB_TYPE_PAD(uint8_t, prev.index) + 0);
}

int
xcb_randr_get_screen_resources_current_names_length (const xcb_randr_get_screen_resources_current_reply_t *R)
{
    return R->names_len;
}

xcb_generic_iterator_t
xcb_randr_get_screen_resources_current_names_end (const xcb_randr_get_screen_resources_current_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_mode_info_end(xcb_randr_get_screen_resources_current_modes_iterator(R));
    i.data = ((uint8_t *) ((char*) prev.data + XCB_TYPE_PAD(uint8_t, prev.index))) + (R->names_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_get_screen_resources_current_reply_t *
xcb_randr_get_screen_resources_current_reply (xcb_connection_t                                 *c,
                                              xcb_randr_get_screen_resources_current_cookie_t   cookie  /**< */,
                                              xcb_generic_error_t                             **e)
{
    return (xcb_randr_get_screen_resources_current_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_randr_set_crtc_transform_sizeof (const void  *_buffer,
                                     uint32_t     filter_params_len)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_set_crtc_transform_request_t *_aux = (xcb_randr_set_crtc_transform_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_set_crtc_transform_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* filter_name */
    xcb_block_len += _aux->filter_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* filter_params */
    xcb_block_len += filter_params_len * sizeof(xcb_render_fixed_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_fixed_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_randr_set_crtc_transform_checked (xcb_connection_t         *c,
                                      xcb_randr_crtc_t          crtc,
                                      xcb_render_transform_t    transform,
                                      uint16_t                  filter_len,
                                      const char               *filter_name,
                                      uint32_t                  filter_params_len,
                                      const xcb_render_fixed_t *filter_params)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_CRTC_TRANSFORM,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_set_crtc_transform_request_t xcb_out;

    xcb_out.crtc = crtc;
    xcb_out.transform = transform;
    xcb_out.filter_len = filter_len;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char filter_name */
    xcb_parts[4].iov_base = (char *) filter_name;
    xcb_parts[4].iov_len = filter_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_render_fixed_t filter_params */
    xcb_parts[6].iov_base = (char *) filter_params;
    xcb_parts[6].iov_len = filter_params_len * sizeof(xcb_render_fixed_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_set_crtc_transform (xcb_connection_t         *c,
                              xcb_randr_crtc_t          crtc,
                              xcb_render_transform_t    transform,
                              uint16_t                  filter_len,
                              const char               *filter_name,
                              uint32_t                  filter_params_len,
                              const xcb_render_fixed_t *filter_params)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 6,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_CRTC_TRANSFORM,
        .isvoid = 1
    };

    struct iovec xcb_parts[8];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_set_crtc_transform_request_t xcb_out;

    xcb_out.crtc = crtc;
    xcb_out.transform = transform;
    xcb_out.filter_len = filter_len;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char filter_name */
    xcb_parts[4].iov_base = (char *) filter_name;
    xcb_parts[4].iov_len = filter_len * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;
    /* xcb_render_fixed_t filter_params */
    xcb_parts[6].iov_base = (char *) filter_params;
    xcb_parts[6].iov_len = filter_params_len * sizeof(xcb_render_fixed_t);
    xcb_parts[7].iov_base = 0;
    xcb_parts[7].iov_len = -xcb_parts[6].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_randr_set_crtc_transform_filter_name (const xcb_randr_set_crtc_transform_request_t *R)
{
    return (char *) (R + 1);
}

int
xcb_randr_set_crtc_transform_filter_name_length (const xcb_randr_set_crtc_transform_request_t *R)
{
    return R->filter_len;
}

xcb_generic_iterator_t
xcb_randr_set_crtc_transform_filter_name_end (const xcb_randr_set_crtc_transform_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->filter_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_render_fixed_t *
xcb_randr_set_crtc_transform_filter_params (const xcb_randr_set_crtc_transform_request_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_set_crtc_transform_filter_name_end(R);
    return (xcb_render_fixed_t *) ((char *) prev.data + ((-prev.index) & (4 - 1)) + 0);
}

int
xcb_randr_set_crtc_transform_filter_params_length (const xcb_randr_set_crtc_transform_request_t *R)
{
    return ((((char*)R) + R->length * 4) - (char*)(xcb_randr_set_crtc_transform_filter_params(R))) / sizeof(xcb_render_fixed_t);
}

xcb_generic_iterator_t
xcb_randr_set_crtc_transform_filter_params_end (const xcb_randr_set_crtc_transform_request_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_set_crtc_transform_filter_name_end(R);
    i.data = ((xcb_render_fixed_t *) ((char*) prev.data + ((-prev.index) & (4 - 1)))) + (((((char*)R) + R->length * 4) - (char*)(xcb_randr_set_crtc_transform_filter_params(R))) / sizeof(xcb_render_fixed_t));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_randr_get_crtc_transform_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_get_crtc_transform_reply_t *_aux = (xcb_randr_get_crtc_transform_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_get_crtc_transform_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* pending_filter_name */
    xcb_block_len += _aux->pending_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* pending_params */
    xcb_block_len += _aux->pending_nparams * sizeof(xcb_render_fixed_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_fixed_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* current_filter_name */
    xcb_block_len += _aux->current_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    xcb_align_to = 4;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* current_params */
    xcb_block_len += _aux->current_nparams * sizeof(xcb_render_fixed_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_render_fixed_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_get_crtc_transform_cookie_t
xcb_randr_get_crtc_transform (xcb_connection_t *c,
                              xcb_randr_crtc_t  crtc)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_CRTC_TRANSFORM,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_crtc_transform_cookie_t xcb_ret;
    xcb_randr_get_crtc_transform_request_t xcb_out;

    xcb_out.crtc = crtc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_crtc_transform_cookie_t
xcb_randr_get_crtc_transform_unchecked (xcb_connection_t *c,
                                        xcb_randr_crtc_t  crtc)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_CRTC_TRANSFORM,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_crtc_transform_cookie_t xcb_ret;
    xcb_randr_get_crtc_transform_request_t xcb_out;

    xcb_out.crtc = crtc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_randr_get_crtc_transform_pending_filter_name (const xcb_randr_get_crtc_transform_reply_t *R)
{
    return (char *) (R + 1);
}

int
xcb_randr_get_crtc_transform_pending_filter_name_length (const xcb_randr_get_crtc_transform_reply_t *R)
{
    return R->pending_len;
}

xcb_generic_iterator_t
xcb_randr_get_crtc_transform_pending_filter_name_end (const xcb_randr_get_crtc_transform_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->pending_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_render_fixed_t *
xcb_randr_get_crtc_transform_pending_params (const xcb_randr_get_crtc_transform_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_crtc_transform_pending_filter_name_end(R);
    return (xcb_render_fixed_t *) ((char *) prev.data + ((-prev.index) & (4 - 1)) + 0);
}

int
xcb_randr_get_crtc_transform_pending_params_length (const xcb_randr_get_crtc_transform_reply_t *R)
{
    return R->pending_nparams;
}

xcb_generic_iterator_t
xcb_randr_get_crtc_transform_pending_params_end (const xcb_randr_get_crtc_transform_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_crtc_transform_pending_filter_name_end(R);
    i.data = ((xcb_render_fixed_t *) ((char*) prev.data + ((-prev.index) & (4 - 1)))) + (R->pending_nparams);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

char *
xcb_randr_get_crtc_transform_current_filter_name (const xcb_randr_get_crtc_transform_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_crtc_transform_pending_params_end(R);
    return (char *) ((char *) prev.data + XCB_TYPE_PAD(char, prev.index) + 0);
}

int
xcb_randr_get_crtc_transform_current_filter_name_length (const xcb_randr_get_crtc_transform_reply_t *R)
{
    return R->current_len;
}

xcb_generic_iterator_t
xcb_randr_get_crtc_transform_current_filter_name_end (const xcb_randr_get_crtc_transform_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_crtc_transform_pending_params_end(R);
    i.data = ((char *) ((char*) prev.data + XCB_TYPE_PAD(char, prev.index))) + (R->current_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_render_fixed_t *
xcb_randr_get_crtc_transform_current_params (const xcb_randr_get_crtc_transform_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_crtc_transform_current_filter_name_end(R);
    return (xcb_render_fixed_t *) ((char *) prev.data + ((-prev.index) & (4 - 1)) + 0);
}

int
xcb_randr_get_crtc_transform_current_params_length (const xcb_randr_get_crtc_transform_reply_t *R)
{
    return R->current_nparams;
}

xcb_generic_iterator_t
xcb_randr_get_crtc_transform_current_params_end (const xcb_randr_get_crtc_transform_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_crtc_transform_current_filter_name_end(R);
    i.data = ((xcb_render_fixed_t *) ((char*) prev.data + ((-prev.index) & (4 - 1)))) + (R->current_nparams);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_get_crtc_transform_reply_t *
xcb_randr_get_crtc_transform_reply (xcb_connection_t                       *c,
                                    xcb_randr_get_crtc_transform_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e)
{
    return (xcb_randr_get_crtc_transform_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_randr_get_panning_cookie_t
xcb_randr_get_panning (xcb_connection_t *c,
                       xcb_randr_crtc_t  crtc)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_PANNING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_panning_cookie_t xcb_ret;
    xcb_randr_get_panning_request_t xcb_out;

    xcb_out.crtc = crtc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_panning_cookie_t
xcb_randr_get_panning_unchecked (xcb_connection_t *c,
                                 xcb_randr_crtc_t  crtc)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_PANNING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_panning_cookie_t xcb_ret;
    xcb_randr_get_panning_request_t xcb_out;

    xcb_out.crtc = crtc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_panning_reply_t *
xcb_randr_get_panning_reply (xcb_connection_t                *c,
                             xcb_randr_get_panning_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_randr_get_panning_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_randr_set_panning_cookie_t
xcb_randr_set_panning (xcb_connection_t *c,
                       xcb_randr_crtc_t  crtc,
                       xcb_timestamp_t   timestamp,
                       uint16_t          left,
                       uint16_t          top,
                       uint16_t          width,
                       uint16_t          height,
                       uint16_t          track_left,
                       uint16_t          track_top,
                       uint16_t          track_width,
                       uint16_t          track_height,
                       int16_t           border_left,
                       int16_t           border_top,
                       int16_t           border_right,
                       int16_t           border_bottom)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_PANNING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_set_panning_cookie_t xcb_ret;
    xcb_randr_set_panning_request_t xcb_out;

    xcb_out.crtc = crtc;
    xcb_out.timestamp = timestamp;
    xcb_out.left = left;
    xcb_out.top = top;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.track_left = track_left;
    xcb_out.track_top = track_top;
    xcb_out.track_width = track_width;
    xcb_out.track_height = track_height;
    xcb_out.border_left = border_left;
    xcb_out.border_top = border_top;
    xcb_out.border_right = border_right;
    xcb_out.border_bottom = border_bottom;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_set_panning_cookie_t
xcb_randr_set_panning_unchecked (xcb_connection_t *c,
                                 xcb_randr_crtc_t  crtc,
                                 xcb_timestamp_t   timestamp,
                                 uint16_t          left,
                                 uint16_t          top,
                                 uint16_t          width,
                                 uint16_t          height,
                                 uint16_t          track_left,
                                 uint16_t          track_top,
                                 uint16_t          track_width,
                                 uint16_t          track_height,
                                 int16_t           border_left,
                                 int16_t           border_top,
                                 int16_t           border_right,
                                 int16_t           border_bottom)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_PANNING,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_set_panning_cookie_t xcb_ret;
    xcb_randr_set_panning_request_t xcb_out;

    xcb_out.crtc = crtc;
    xcb_out.timestamp = timestamp;
    xcb_out.left = left;
    xcb_out.top = top;
    xcb_out.width = width;
    xcb_out.height = height;
    xcb_out.track_left = track_left;
    xcb_out.track_top = track_top;
    xcb_out.track_width = track_width;
    xcb_out.track_height = track_height;
    xcb_out.border_left = border_left;
    xcb_out.border_top = border_top;
    xcb_out.border_right = border_right;
    xcb_out.border_bottom = border_bottom;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_set_panning_reply_t *
xcb_randr_set_panning_reply (xcb_connection_t                *c,
                             xcb_randr_set_panning_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_randr_set_panning_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_randr_set_output_primary_checked (xcb_connection_t   *c,
                                      xcb_window_t        window,
                                      xcb_randr_output_t  output)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_OUTPUT_PRIMARY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_set_output_primary_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.output = output;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_set_output_primary (xcb_connection_t   *c,
                              xcb_window_t        window,
                              xcb_randr_output_t  output)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_OUTPUT_PRIMARY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_set_output_primary_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.output = output;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_output_primary_cookie_t
xcb_randr_get_output_primary (xcb_connection_t *c,
                              xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_OUTPUT_PRIMARY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_output_primary_cookie_t xcb_ret;
    xcb_randr_get_output_primary_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_output_primary_cookie_t
xcb_randr_get_output_primary_unchecked (xcb_connection_t *c,
                                        xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_OUTPUT_PRIMARY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_output_primary_cookie_t xcb_ret;
    xcb_randr_get_output_primary_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_output_primary_reply_t *
xcb_randr_get_output_primary_reply (xcb_connection_t                       *c,
                                    xcb_randr_get_output_primary_cookie_t   cookie  /**< */,
                                    xcb_generic_error_t                   **e)
{
    return (xcb_randr_get_output_primary_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_randr_get_providers_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_get_providers_reply_t *_aux = (xcb_randr_get_providers_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_get_providers_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* providers */
    xcb_block_len += _aux->num_providers * sizeof(xcb_randr_provider_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_provider_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_get_providers_cookie_t
xcb_randr_get_providers (xcb_connection_t *c,
                         xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_PROVIDERS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_providers_cookie_t xcb_ret;
    xcb_randr_get_providers_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_providers_cookie_t
xcb_randr_get_providers_unchecked (xcb_connection_t *c,
                                   xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_PROVIDERS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_providers_cookie_t xcb_ret;
    xcb_randr_get_providers_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_provider_t *
xcb_randr_get_providers_providers (const xcb_randr_get_providers_reply_t *R)
{
    return (xcb_randr_provider_t *) (R + 1);
}

int
xcb_randr_get_providers_providers_length (const xcb_randr_get_providers_reply_t *R)
{
    return R->num_providers;
}

xcb_generic_iterator_t
xcb_randr_get_providers_providers_end (const xcb_randr_get_providers_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_randr_provider_t *) (R + 1)) + (R->num_providers);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_get_providers_reply_t *
xcb_randr_get_providers_reply (xcb_connection_t                  *c,
                               xcb_randr_get_providers_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_randr_get_providers_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_randr_get_provider_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_get_provider_info_reply_t *_aux = (xcb_randr_get_provider_info_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_get_provider_info_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* crtcs */
    xcb_block_len += _aux->num_crtcs * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_crtc_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* outputs */
    xcb_block_len += _aux->num_outputs * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_output_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* associated_providers */
    xcb_block_len += _aux->num_associated_providers * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_provider_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* associated_capability */
    xcb_block_len += _aux->num_associated_providers * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->name_len * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_get_provider_info_cookie_t
xcb_randr_get_provider_info (xcb_connection_t     *c,
                             xcb_randr_provider_t  provider,
                             xcb_timestamp_t       config_timestamp)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_PROVIDER_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_provider_info_cookie_t xcb_ret;
    xcb_randr_get_provider_info_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.config_timestamp = config_timestamp;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_provider_info_cookie_t
xcb_randr_get_provider_info_unchecked (xcb_connection_t     *c,
                                       xcb_randr_provider_t  provider,
                                       xcb_timestamp_t       config_timestamp)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_PROVIDER_INFO,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_provider_info_cookie_t xcb_ret;
    xcb_randr_get_provider_info_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.config_timestamp = config_timestamp;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_crtc_t *
xcb_randr_get_provider_info_crtcs (const xcb_randr_get_provider_info_reply_t *R)
{
    return (xcb_randr_crtc_t *) (R + 1);
}

int
xcb_randr_get_provider_info_crtcs_length (const xcb_randr_get_provider_info_reply_t *R)
{
    return R->num_crtcs;
}

xcb_generic_iterator_t
xcb_randr_get_provider_info_crtcs_end (const xcb_randr_get_provider_info_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_randr_crtc_t *) (R + 1)) + (R->num_crtcs);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_output_t *
xcb_randr_get_provider_info_outputs (const xcb_randr_get_provider_info_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_provider_info_crtcs_end(R);
    return (xcb_randr_output_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_randr_output_t, prev.index) + 0);
}

int
xcb_randr_get_provider_info_outputs_length (const xcb_randr_get_provider_info_reply_t *R)
{
    return R->num_outputs;
}

xcb_generic_iterator_t
xcb_randr_get_provider_info_outputs_end (const xcb_randr_get_provider_info_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_provider_info_crtcs_end(R);
    i.data = ((xcb_randr_output_t *) ((char*) prev.data + XCB_TYPE_PAD(xcb_randr_output_t, prev.index))) + (R->num_outputs);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_provider_t *
xcb_randr_get_provider_info_associated_providers (const xcb_randr_get_provider_info_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_provider_info_outputs_end(R);
    return (xcb_randr_provider_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_randr_provider_t, prev.index) + 0);
}

int
xcb_randr_get_provider_info_associated_providers_length (const xcb_randr_get_provider_info_reply_t *R)
{
    return R->num_associated_providers;
}

xcb_generic_iterator_t
xcb_randr_get_provider_info_associated_providers_end (const xcb_randr_get_provider_info_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_provider_info_outputs_end(R);
    i.data = ((xcb_randr_provider_t *) ((char*) prev.data + XCB_TYPE_PAD(xcb_randr_provider_t, prev.index))) + (R->num_associated_providers);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

uint32_t *
xcb_randr_get_provider_info_associated_capability (const xcb_randr_get_provider_info_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_provider_info_associated_providers_end(R);
    return (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
}

int
xcb_randr_get_provider_info_associated_capability_length (const xcb_randr_get_provider_info_reply_t *R)
{
    return R->num_associated_providers;
}

xcb_generic_iterator_t
xcb_randr_get_provider_info_associated_capability_end (const xcb_randr_get_provider_info_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_provider_info_associated_providers_end(R);
    i.data = ((uint32_t *) ((char*) prev.data + XCB_TYPE_PAD(uint32_t, prev.index))) + (R->num_associated_providers);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

char *
xcb_randr_get_provider_info_name (const xcb_randr_get_provider_info_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_randr_get_provider_info_associated_capability_end(R);
    return (char *) ((char *) prev.data + XCB_TYPE_PAD(char, prev.index) + 0);
}

int
xcb_randr_get_provider_info_name_length (const xcb_randr_get_provider_info_reply_t *R)
{
    return R->name_len;
}

xcb_generic_iterator_t
xcb_randr_get_provider_info_name_end (const xcb_randr_get_provider_info_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_randr_get_provider_info_associated_capability_end(R);
    i.data = ((char *) ((char*) prev.data + XCB_TYPE_PAD(char, prev.index))) + (R->name_len);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_get_provider_info_reply_t *
xcb_randr_get_provider_info_reply (xcb_connection_t                      *c,
                                   xcb_randr_get_provider_info_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_randr_get_provider_info_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_randr_set_provider_offload_sink_checked (xcb_connection_t     *c,
                                             xcb_randr_provider_t  provider,
                                             xcb_randr_provider_t  sink_provider,
                                             xcb_timestamp_t       config_timestamp)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_PROVIDER_OFFLOAD_SINK,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_set_provider_offload_sink_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.sink_provider = sink_provider;
    xcb_out.config_timestamp = config_timestamp;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_set_provider_offload_sink (xcb_connection_t     *c,
                                     xcb_randr_provider_t  provider,
                                     xcb_randr_provider_t  sink_provider,
                                     xcb_timestamp_t       config_timestamp)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_PROVIDER_OFFLOAD_SINK,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_set_provider_offload_sink_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.sink_provider = sink_provider;
    xcb_out.config_timestamp = config_timestamp;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_set_provider_output_source_checked (xcb_connection_t     *c,
                                              xcb_randr_provider_t  provider,
                                              xcb_randr_provider_t  source_provider,
                                              xcb_timestamp_t       config_timestamp)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_PROVIDER_OUTPUT_SOURCE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_set_provider_output_source_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.source_provider = source_provider;
    xcb_out.config_timestamp = config_timestamp;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_set_provider_output_source (xcb_connection_t     *c,
                                      xcb_randr_provider_t  provider,
                                      xcb_randr_provider_t  source_provider,
                                      xcb_timestamp_t       config_timestamp)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_PROVIDER_OUTPUT_SOURCE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_set_provider_output_source_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.source_provider = source_provider;
    xcb_out.config_timestamp = config_timestamp;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_randr_list_provider_properties_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_list_provider_properties_reply_t *_aux = (xcb_randr_list_provider_properties_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_list_provider_properties_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* atoms */
    xcb_block_len += _aux->num_atoms * sizeof(xcb_atom_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_atom_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_list_provider_properties_cookie_t
xcb_randr_list_provider_properties (xcb_connection_t     *c,
                                    xcb_randr_provider_t  provider)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_LIST_PROVIDER_PROPERTIES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_list_provider_properties_cookie_t xcb_ret;
    xcb_randr_list_provider_properties_request_t xcb_out;

    xcb_out.provider = provider;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_list_provider_properties_cookie_t
xcb_randr_list_provider_properties_unchecked (xcb_connection_t     *c,
                                              xcb_randr_provider_t  provider)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_LIST_PROVIDER_PROPERTIES,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_list_provider_properties_cookie_t xcb_ret;
    xcb_randr_list_provider_properties_request_t xcb_out;

    xcb_out.provider = provider;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_atom_t *
xcb_randr_list_provider_properties_atoms (const xcb_randr_list_provider_properties_reply_t *R)
{
    return (xcb_atom_t *) (R + 1);
}

int
xcb_randr_list_provider_properties_atoms_length (const xcb_randr_list_provider_properties_reply_t *R)
{
    return R->num_atoms;
}

xcb_generic_iterator_t
xcb_randr_list_provider_properties_atoms_end (const xcb_randr_list_provider_properties_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_atom_t *) (R + 1)) + (R->num_atoms);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_list_provider_properties_reply_t *
xcb_randr_list_provider_properties_reply (xcb_connection_t                             *c,
                                          xcb_randr_list_provider_properties_cookie_t   cookie  /**< */,
                                          xcb_generic_error_t                         **e)
{
    return (xcb_randr_list_provider_properties_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_randr_query_provider_property_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_query_provider_property_reply_t *_aux = (xcb_randr_query_provider_property_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_query_provider_property_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* valid_values */
    xcb_block_len += _aux->length * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_query_provider_property_cookie_t
xcb_randr_query_provider_property (xcb_connection_t     *c,
                                   xcb_randr_provider_t  provider,
                                   xcb_atom_t            property)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_QUERY_PROVIDER_PROPERTY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_query_provider_property_cookie_t xcb_ret;
    xcb_randr_query_provider_property_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.property = property;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_query_provider_property_cookie_t
xcb_randr_query_provider_property_unchecked (xcb_connection_t     *c,
                                             xcb_randr_provider_t  provider,
                                             xcb_atom_t            property)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_QUERY_PROVIDER_PROPERTY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_query_provider_property_cookie_t xcb_ret;
    xcb_randr_query_provider_property_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.property = property;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_randr_query_provider_property_valid_values (const xcb_randr_query_provider_property_reply_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_randr_query_provider_property_valid_values_length (const xcb_randr_query_provider_property_reply_t *R)
{
    return R->length;
}

xcb_generic_iterator_t
xcb_randr_query_provider_property_valid_values_end (const xcb_randr_query_provider_property_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + (R->length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_query_provider_property_reply_t *
xcb_randr_query_provider_property_reply (xcb_connection_t                            *c,
                                         xcb_randr_query_provider_property_cookie_t   cookie  /**< */,
                                         xcb_generic_error_t                        **e)
{
    return (xcb_randr_query_provider_property_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_randr_configure_provider_property_sizeof (const void  *_buffer,
                                              uint32_t     values_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_configure_provider_property_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* values */
    xcb_block_len += values_len * sizeof(int32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(int32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_randr_configure_provider_property_checked (xcb_connection_t     *c,
                                               xcb_randr_provider_t  provider,
                                               xcb_atom_t            property,
                                               uint8_t               pending,
                                               uint8_t               range,
                                               uint32_t              values_len,
                                               const int32_t        *values)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_CONFIGURE_PROVIDER_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_configure_provider_property_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.property = property;
    xcb_out.pending = pending;
    xcb_out.range = range;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* int32_t values */
    xcb_parts[4].iov_base = (char *) values;
    xcb_parts[4].iov_len = values_len * sizeof(int32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_configure_provider_property (xcb_connection_t     *c,
                                       xcb_randr_provider_t  provider,
                                       xcb_atom_t            property,
                                       uint8_t               pending,
                                       uint8_t               range,
                                       uint32_t              values_len,
                                       const int32_t        *values)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_CONFIGURE_PROVIDER_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_configure_provider_property_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.property = property;
    xcb_out.pending = pending;
    xcb_out.range = range;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* int32_t values */
    xcb_parts[4].iov_base = (char *) values;
    xcb_parts[4].iov_len = values_len * sizeof(int32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int32_t *
xcb_randr_configure_provider_property_values (const xcb_randr_configure_provider_property_request_t *R)
{
    return (int32_t *) (R + 1);
}

int
xcb_randr_configure_provider_property_values_length (const xcb_randr_configure_provider_property_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_randr_configure_provider_property_request_t))/sizeof(int32_t));
}

xcb_generic_iterator_t
xcb_randr_configure_provider_property_values_end (const xcb_randr_configure_provider_property_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((int32_t *) (R + 1)) + ((((R->length * 4) - sizeof(xcb_randr_configure_provider_property_request_t))/sizeof(int32_t)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_randr_change_provider_property_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_change_provider_property_request_t *_aux = (xcb_randr_change_provider_property_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_change_provider_property_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += (_aux->num_items * (_aux->format / 8)) * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_randr_change_provider_property_checked (xcb_connection_t     *c,
                                            xcb_randr_provider_t  provider,
                                            xcb_atom_t            property,
                                            xcb_atom_t            type,
                                            uint8_t               format,
                                            uint8_t               mode,
                                            uint32_t              num_items,
                                            const void           *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_CHANGE_PROVIDER_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_change_provider_property_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.format = format;
    xcb_out.mode = mode;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.num_items = num_items;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* void data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = (num_items * (format / 8)) * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_change_provider_property (xcb_connection_t     *c,
                                    xcb_randr_provider_t  provider,
                                    xcb_atom_t            property,
                                    xcb_atom_t            type,
                                    uint8_t               format,
                                    uint8_t               mode,
                                    uint32_t              num_items,
                                    const void           *data)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_CHANGE_PROVIDER_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_change_provider_property_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.format = format;
    xcb_out.mode = mode;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.num_items = num_items;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* void data */
    xcb_parts[4].iov_base = (char *) data;
    xcb_parts[4].iov_len = (num_items * (format / 8)) * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void *
xcb_randr_change_provider_property_data (const xcb_randr_change_provider_property_request_t *R)
{
    return (void *) (R + 1);
}

int
xcb_randr_change_provider_property_data_length (const xcb_randr_change_provider_property_request_t *R)
{
    return (R->num_items * (R->format / 8));
}

xcb_generic_iterator_t
xcb_randr_change_provider_property_data_end (const xcb_randr_change_provider_property_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + ((R->num_items * (R->format / 8)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_randr_delete_provider_property_checked (xcb_connection_t     *c,
                                            xcb_randr_provider_t  provider,
                                            xcb_atom_t            property)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_DELETE_PROVIDER_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_delete_provider_property_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.property = property;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_delete_provider_property (xcb_connection_t     *c,
                                    xcb_randr_provider_t  provider,
                                    xcb_atom_t            property)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_DELETE_PROVIDER_PROPERTY,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_delete_provider_property_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.property = property;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_randr_get_provider_property_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_get_provider_property_reply_t *_aux = (xcb_randr_get_provider_property_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_get_provider_property_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* data */
    xcb_block_len += (_aux->num_items * (_aux->format / 8)) * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_get_provider_property_cookie_t
xcb_randr_get_provider_property (xcb_connection_t     *c,
                                 xcb_randr_provider_t  provider,
                                 xcb_atom_t            property,
                                 xcb_atom_t            type,
                                 uint32_t              long_offset,
                                 uint32_t              long_length,
                                 uint8_t               _delete,
                                 uint8_t               pending)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_PROVIDER_PROPERTY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_provider_property_cookie_t xcb_ret;
    xcb_randr_get_provider_property_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.long_offset = long_offset;
    xcb_out.long_length = long_length;
    xcb_out._delete = _delete;
    xcb_out.pending = pending;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_provider_property_cookie_t
xcb_randr_get_provider_property_unchecked (xcb_connection_t     *c,
                                           xcb_randr_provider_t  provider,
                                           xcb_atom_t            property,
                                           xcb_atom_t            type,
                                           uint32_t              long_offset,
                                           uint32_t              long_length,
                                           uint8_t               _delete,
                                           uint8_t               pending)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_PROVIDER_PROPERTY,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_provider_property_cookie_t xcb_ret;
    xcb_randr_get_provider_property_request_t xcb_out;

    xcb_out.provider = provider;
    xcb_out.property = property;
    xcb_out.type = type;
    xcb_out.long_offset = long_offset;
    xcb_out.long_length = long_length;
    xcb_out._delete = _delete;
    xcb_out.pending = pending;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void *
xcb_randr_get_provider_property_data (const xcb_randr_get_provider_property_reply_t *R)
{
    return (void *) (R + 1);
}

int
xcb_randr_get_provider_property_data_length (const xcb_randr_get_provider_property_reply_t *R)
{
    return (R->num_items * (R->format / 8));
}

xcb_generic_iterator_t
xcb_randr_get_provider_property_data_end (const xcb_randr_get_provider_property_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + ((R->num_items * (R->format / 8)));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_get_provider_property_reply_t *
xcb_randr_get_provider_property_reply (xcb_connection_t                          *c,
                                       xcb_randr_get_provider_property_cookie_t   cookie  /**< */,
                                       xcb_generic_error_t                      **e)
{
    return (xcb_randr_get_provider_property_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

void
xcb_randr_crtc_change_next (xcb_randr_crtc_change_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_crtc_change_t);
}

xcb_generic_iterator_t
xcb_randr_crtc_change_end (xcb_randr_crtc_change_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_randr_output_change_next (xcb_randr_output_change_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_output_change_t);
}

xcb_generic_iterator_t
xcb_randr_output_change_end (xcb_randr_output_change_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_randr_output_property_next (xcb_randr_output_property_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_output_property_t);
}

xcb_generic_iterator_t
xcb_randr_output_property_end (xcb_randr_output_property_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_randr_provider_change_next (xcb_randr_provider_change_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_provider_change_t);
}

xcb_generic_iterator_t
xcb_randr_provider_change_end (xcb_randr_provider_change_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_randr_provider_property_next (xcb_randr_provider_property_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_provider_property_t);
}

xcb_generic_iterator_t
xcb_randr_provider_property_end (xcb_randr_provider_property_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_randr_resource_change_next (xcb_randr_resource_change_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_resource_change_t);
}

xcb_generic_iterator_t
xcb_randr_resource_change_end (xcb_randr_resource_change_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_randr_notify_data_next (xcb_randr_notify_data_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_notify_data_t);
}

xcb_generic_iterator_t
xcb_randr_notify_data_end (xcb_randr_notify_data_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_randr_monitor_info_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_monitor_info_t *_aux = (xcb_randr_monitor_info_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_monitor_info_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* outputs */
    xcb_block_len += _aux->nOutput * sizeof(xcb_randr_output_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_output_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_output_t *
xcb_randr_monitor_info_outputs (const xcb_randr_monitor_info_t *R)
{
    return (xcb_randr_output_t *) (R + 1);
}

int
xcb_randr_monitor_info_outputs_length (const xcb_randr_monitor_info_t *R)
{
    return R->nOutput;
}

xcb_generic_iterator_t
xcb_randr_monitor_info_outputs_end (const xcb_randr_monitor_info_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((xcb_randr_output_t *) (R + 1)) + (R->nOutput);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void
xcb_randr_monitor_info_next (xcb_randr_monitor_info_iterator_t *i)
{
    xcb_randr_monitor_info_t *R = i->data;
    xcb_generic_iterator_t child;
    child.data = (xcb_randr_monitor_info_t *)(((char *)R) + xcb_randr_monitor_info_sizeof(R));
    i->index = (char *) child.data - (char *) i->data;
    --i->rem;
    i->data = (xcb_randr_monitor_info_t *) child.data;
}

xcb_generic_iterator_t
xcb_randr_monitor_info_end (xcb_randr_monitor_info_iterator_t i)
{
    xcb_generic_iterator_t ret;
    while(i.rem > 0)
        xcb_randr_monitor_info_next(&i);
    ret.data = i.data;
    ret.rem = i.rem;
    ret.index = i.index;
    return ret;
}

int
xcb_randr_get_monitors_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_randr_get_monitors_reply_t *_aux = (xcb_randr_get_monitors_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;

    unsigned int i;
    unsigned int xcb_tmp_len;

    xcb_block_len += sizeof(xcb_randr_get_monitors_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* monitors */
    for(i=0; i<_aux->nMonitors; i++) {
        xcb_tmp_len = xcb_randr_monitor_info_sizeof(xcb_tmp);
        xcb_block_len += xcb_tmp_len;
        xcb_tmp += xcb_tmp_len;
    }
    xcb_align_to = ALIGNOF(xcb_randr_monitor_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_randr_get_monitors_cookie_t
xcb_randr_get_monitors (xcb_connection_t *c,
                        xcb_window_t      window,
                        uint8_t           get_active)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_MONITORS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_monitors_cookie_t xcb_ret;
    xcb_randr_get_monitors_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.get_active = get_active;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_get_monitors_cookie_t
xcb_randr_get_monitors_unchecked (xcb_connection_t *c,
                                  xcb_window_t      window,
                                  uint8_t           get_active)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_GET_MONITORS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_randr_get_monitors_cookie_t xcb_ret;
    xcb_randr_get_monitors_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.get_active = get_active;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_randr_get_monitors_monitors_length (const xcb_randr_get_monitors_reply_t *R)
{
    return R->nMonitors;
}

xcb_randr_monitor_info_iterator_t
xcb_randr_get_monitors_monitors_iterator (const xcb_randr_get_monitors_reply_t *R)
{
    xcb_randr_monitor_info_iterator_t i;
    i.data = (xcb_randr_monitor_info_t *) (R + 1);
    i.rem = R->nMonitors;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_randr_get_monitors_reply_t *
xcb_randr_get_monitors_reply (xcb_connection_t                 *c,
                              xcb_randr_get_monitors_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_randr_get_monitors_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_randr_set_monitor_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_randr_set_monitor_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* monitorinfo */
    xcb_block_len += xcb_randr_monitor_info_sizeof(xcb_tmp);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_randr_monitor_info_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_randr_set_monitor_checked (xcb_connection_t         *c,
                               xcb_window_t              window,
                               xcb_randr_monitor_info_t *monitorinfo)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_MONITOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_set_monitor_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_randr_monitor_info_t monitorinfo */
    xcb_parts[4].iov_base = (char *) monitorinfo;
    xcb_parts[4].iov_len =
      xcb_randr_monitor_info_sizeof (monitorinfo);

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_set_monitor (xcb_connection_t         *c,
                       xcb_window_t              window,
                       xcb_randr_monitor_info_t *monitorinfo)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_SET_MONITOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_set_monitor_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_randr_monitor_info_t monitorinfo */
    xcb_parts[4].iov_base = (char *) monitorinfo;
    xcb_parts[4].iov_len =
      xcb_randr_monitor_info_sizeof (monitorinfo);

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_randr_monitor_info_t *
xcb_randr_set_monitor_monitorinfo (const xcb_randr_set_monitor_request_t *R)
{
    return (xcb_randr_monitor_info_t *) (R + 1);
}

xcb_void_cookie_t
xcb_randr_delete_monitor_checked (xcb_connection_t *c,
                                  xcb_window_t      window,
                                  xcb_atom_t        name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_DELETE_MONITOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_delete_monitor_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.name = name;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_randr_delete_monitor (xcb_connection_t *c,
                          xcb_window_t      window,
                          xcb_atom_t        name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_randr_id,
        .opcode = XCB_RANDR_DELETE_MONITOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_randr_delete_monitor_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.name = name;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d23 1
a23 1
xcb_randr_mode_next (xcb_randr_mode_iterator_t *i  /**< */)
d31 1
a31 1
xcb_randr_mode_end (xcb_randr_mode_iterator_t i  /**< */)
d41 1
a41 1
xcb_randr_crtc_next (xcb_randr_crtc_iterator_t *i  /**< */)
d49 1
a49 1
xcb_randr_crtc_end (xcb_randr_crtc_iterator_t i  /**< */)
d59 1
a59 1
xcb_randr_output_next (xcb_randr_output_iterator_t *i  /**< */)
d67 1
a67 1
xcb_randr_output_end (xcb_randr_output_iterator_t i  /**< */)
d77 1
a77 1
xcb_randr_provider_next (xcb_randr_provider_iterator_t *i  /**< */)
d85 1
a85 1
xcb_randr_provider_end (xcb_randr_provider_iterator_t i  /**< */)
d95 1
a95 1
xcb_randr_screen_size_next (xcb_randr_screen_size_iterator_t *i  /**< */)
d103 1
a103 1
xcb_randr_screen_size_end (xcb_randr_screen_size_iterator_t i  /**< */)
d113 1
a113 1
xcb_randr_refresh_rates_sizeof (const void  *_buffer  /**< */)
d144 1
a144 1
xcb_randr_refresh_rates_rates (const xcb_randr_refresh_rates_t *R  /**< */)
d150 1
a150 1
xcb_randr_refresh_rates_rates_length (const xcb_randr_refresh_rates_t *R  /**< */)
d156 1
a156 1
xcb_randr_refresh_rates_rates_end (const xcb_randr_refresh_rates_t *R  /**< */)
d166 1
a166 1
xcb_randr_refresh_rates_next (xcb_randr_refresh_rates_iterator_t *i  /**< */)
d177 1
a177 1
xcb_randr_refresh_rates_end (xcb_randr_refresh_rates_iterator_t i  /**< */)
d189 3
a191 3
xcb_randr_query_version (xcb_connection_t *c  /**< */,
                         uint32_t          major_version  /**< */,
                         uint32_t          minor_version  /**< */)
d194 4
a197 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_QUERY_VERSION,
        /* isvoid */ 0
d217 3
a219 3
xcb_randr_query_version_unchecked (xcb_connection_t *c  /**< */,
                                   uint32_t          major_version  /**< */,
                                   uint32_t          minor_version  /**< */)
d222 4
a225 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_QUERY_VERSION,
        /* isvoid */ 0
d245 1
a245 1
xcb_randr_query_version_reply (xcb_connection_t                  *c  /**< */,
d247 1
a247 1
                               xcb_generic_error_t              **e  /**< */)
d253 7
a259 7
xcb_randr_set_screen_config (xcb_connection_t *c  /**< */,
                             xcb_window_t      window  /**< */,
                             xcb_timestamp_t   timestamp  /**< */,
                             xcb_timestamp_t   config_timestamp  /**< */,
                             uint16_t          sizeID  /**< */,
                             uint16_t          rotation  /**< */,
                             uint16_t          rate  /**< */)
d262 4
a265 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_SCREEN_CONFIG,
        /* isvoid */ 0
d290 7
a296 7
xcb_randr_set_screen_config_unchecked (xcb_connection_t *c  /**< */,
                                       xcb_window_t      window  /**< */,
                                       xcb_timestamp_t   timestamp  /**< */,
                                       xcb_timestamp_t   config_timestamp  /**< */,
                                       uint16_t          sizeID  /**< */,
                                       uint16_t          rotation  /**< */,
                                       uint16_t          rate  /**< */)
d299 4
a302 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_SCREEN_CONFIG,
        /* isvoid */ 0
d327 1
a327 1
xcb_randr_set_screen_config_reply (xcb_connection_t                      *c  /**< */,
d329 1
a329 1
                                   xcb_generic_error_t                  **e  /**< */)
d335 3
a337 3
xcb_randr_select_input_checked (xcb_connection_t *c  /**< */,
                                xcb_window_t      window  /**< */,
                                uint16_t          enable  /**< */)
d340 4
a343 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SELECT_INPUT,
        /* isvoid */ 1
d364 3
a366 3
xcb_randr_select_input (xcb_connection_t *c  /**< */,
                        xcb_window_t      window  /**< */,
                        uint16_t          enable  /**< */)
d369 4
a372 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SELECT_INPUT,
        /* isvoid */ 1
d393 1
a393 1
xcb_randr_get_screen_info_sizeof (const void  *_buffer  /**< */)
d441 2
a442 2
xcb_randr_get_screen_info (xcb_connection_t *c  /**< */,
                           xcb_window_t      window  /**< */)
d445 4
a448 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_SCREEN_INFO,
        /* isvoid */ 0
d467 2
a468 2
xcb_randr_get_screen_info_unchecked (xcb_connection_t *c  /**< */,
                                     xcb_window_t      window  /**< */)
d471 4
a474 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_SCREEN_INFO,
        /* isvoid */ 0
d493 1
a493 1
xcb_randr_get_screen_info_sizes (const xcb_randr_get_screen_info_reply_t *R  /**< */)
d499 1
a499 1
xcb_randr_get_screen_info_sizes_length (const xcb_randr_get_screen_info_reply_t *R  /**< */)
d505 1
a505 1
xcb_randr_get_screen_info_sizes_iterator (const xcb_randr_get_screen_info_reply_t *R  /**< */)
d515 1
a515 1
xcb_randr_get_screen_info_rates_length (const xcb_randr_get_screen_info_reply_t *R  /**< */)
d521 1
a521 1
xcb_randr_get_screen_info_rates_iterator (const xcb_randr_get_screen_info_reply_t *R  /**< */)
d532 1
a532 1
xcb_randr_get_screen_info_reply (xcb_connection_t                    *c  /**< */,
d534 1
a534 1
                                 xcb_generic_error_t                **e  /**< */)
d540 2
a541 2
xcb_randr_get_screen_size_range (xcb_connection_t *c  /**< */,
                                 xcb_window_t      window  /**< */)
d544 4
a547 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_SCREEN_SIZE_RANGE,
        /* isvoid */ 0
d566 2
a567 2
xcb_randr_get_screen_size_range_unchecked (xcb_connection_t *c  /**< */,
                                           xcb_window_t      window  /**< */)
d570 4
a573 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_SCREEN_SIZE_RANGE,
        /* isvoid */ 0
d592 1
a592 1
xcb_randr_get_screen_size_range_reply (xcb_connection_t                          *c  /**< */,
d594 1
a594 1
                                       xcb_generic_error_t                      **e  /**< */)
d600 6
a605 6
xcb_randr_set_screen_size_checked (xcb_connection_t *c  /**< */,
                                   xcb_window_t      window  /**< */,
                                   uint16_t          width  /**< */,
                                   uint16_t          height  /**< */,
                                   uint32_t          mm_width  /**< */,
                                   uint32_t          mm_height  /**< */)
d608 4
a611 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_SCREEN_SIZE,
        /* isvoid */ 1
d634 6
a639 6
xcb_randr_set_screen_size (xcb_connection_t *c  /**< */,
                           xcb_window_t      window  /**< */,
                           uint16_t          width  /**< */,
                           uint16_t          height  /**< */,
                           uint32_t          mm_width  /**< */,
                           uint32_t          mm_height  /**< */)
d642 4
a645 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_SCREEN_SIZE,
        /* isvoid */ 1
d668 1
a668 1
xcb_randr_mode_info_next (xcb_randr_mode_info_iterator_t *i  /**< */)
d676 1
a676 1
xcb_randr_mode_info_end (xcb_randr_mode_info_iterator_t i  /**< */)
d686 1
a686 1
xcb_randr_get_screen_resources_sizeof (const void  *_buffer  /**< */)
d753 2
a754 2
xcb_randr_get_screen_resources (xcb_connection_t *c  /**< */,
                                xcb_window_t      window  /**< */)
d757 4
a760 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_SCREEN_RESOURCES,
        /* isvoid */ 0
d779 2
a780 2
xcb_randr_get_screen_resources_unchecked (xcb_connection_t *c  /**< */,
                                          xcb_window_t      window  /**< */)
d783 4
a786 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_SCREEN_RESOURCES,
        /* isvoid */ 0
d805 1
a805 1
xcb_randr_get_screen_resources_crtcs (const xcb_randr_get_screen_resources_reply_t *R  /**< */)
d811 1
a811 1
xcb_randr_get_screen_resources_crtcs_length (const xcb_randr_get_screen_resources_reply_t *R  /**< */)
d817 1
a817 1
xcb_randr_get_screen_resources_crtcs_end (const xcb_randr_get_screen_resources_reply_t *R  /**< */)
d827 1
a827 1
xcb_randr_get_screen_resources_outputs (const xcb_randr_get_screen_resources_reply_t *R  /**< */)
d834 1
a834 1
xcb_randr_get_screen_resources_outputs_length (const xcb_randr_get_screen_resources_reply_t *R  /**< */)
d840 1
a840 1
xcb_randr_get_screen_resources_outputs_end (const xcb_randr_get_screen_resources_reply_t *R  /**< */)
d843 2
a844 2
    xcb_generic_iterator_t child = xcb_randr_get_screen_resources_crtcs_end(R);
    i.data = ((xcb_randr_output_t *) child.data) + (R->num_outputs);
d851 1
a851 1
xcb_randr_get_screen_resources_modes (const xcb_randr_get_screen_resources_reply_t *R  /**< */)
d858 1
a858 1
xcb_randr_get_screen_resources_modes_length (const xcb_randr_get_screen_resources_reply_t *R  /**< */)
d864 1
a864 1
xcb_randr_get_screen_resources_modes_iterator (const xcb_randr_get_screen_resources_reply_t *R  /**< */)
d875 1
a875 1
xcb_randr_get_screen_resources_names (const xcb_randr_get_screen_resources_reply_t *R  /**< */)
d882 1
a882 1
xcb_randr_get_screen_resources_names_length (const xcb_randr_get_screen_resources_reply_t *R  /**< */)
d888 1
a888 1
xcb_randr_get_screen_resources_names_end (const xcb_randr_get_screen_resources_reply_t *R  /**< */)
d891 2
a892 2
    xcb_generic_iterator_t child = xcb_randr_mode_info_end(xcb_randr_get_screen_resources_modes_iterator(R));
    i.data = ((uint8_t *) child.data) + (R->names_len);
d899 1
a899 1
xcb_randr_get_screen_resources_reply (xcb_connection_t                         *c  /**< */,
d901 1
a901 1
                                      xcb_generic_error_t                     **e  /**< */)
d907 1
a907 1
xcb_randr_get_output_info_sizeof (const void  *_buffer  /**< */)
d974 3
a976 3
xcb_randr_get_output_info (xcb_connection_t   *c  /**< */,
                           xcb_randr_output_t  output  /**< */,
                           xcb_timestamp_t     config_timestamp  /**< */)
d979 4
a982 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_OUTPUT_INFO,
        /* isvoid */ 0
d1002 3
a1004 3
xcb_randr_get_output_info_unchecked (xcb_connection_t   *c  /**< */,
                                     xcb_randr_output_t  output  /**< */,
                                     xcb_timestamp_t     config_timestamp  /**< */)
d1007 4
a1010 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_OUTPUT_INFO,
        /* isvoid */ 0
d1030 1
a1030 1
xcb_randr_get_output_info_crtcs (const xcb_randr_get_output_info_reply_t *R  /**< */)
d1036 1
a1036 1
xcb_randr_get_output_info_crtcs_length (const xcb_randr_get_output_info_reply_t *R  /**< */)
d1042 1
a1042 1
xcb_randr_get_output_info_crtcs_end (const xcb_randr_get_output_info_reply_t *R  /**< */)
d1052 1
a1052 1
xcb_randr_get_output_info_modes (const xcb_randr_get_output_info_reply_t *R  /**< */)
d1059 1
a1059 1
xcb_randr_get_output_info_modes_length (const xcb_randr_get_output_info_reply_t *R  /**< */)
d1065 1
a1065 1
xcb_randr_get_output_info_modes_end (const xcb_randr_get_output_info_reply_t *R  /**< */)
d1068 2
a1069 2
    xcb_generic_iterator_t child = xcb_randr_get_output_info_crtcs_end(R);
    i.data = ((xcb_randr_mode_t *) child.data) + (R->num_modes);
d1076 1
a1076 1
xcb_randr_get_output_info_clones (const xcb_randr_get_output_info_reply_t *R  /**< */)
d1083 1
a1083 1
xcb_randr_get_output_info_clones_length (const xcb_randr_get_output_info_reply_t *R  /**< */)
d1089 1
a1089 1
xcb_randr_get_output_info_clones_end (const xcb_randr_get_output_info_reply_t *R  /**< */)
d1092 2
a1093 2
    xcb_generic_iterator_t child = xcb_randr_get_output_info_modes_end(R);
    i.data = ((xcb_randr_output_t *) child.data) + (R->num_clones);
d1100 1
a1100 1
xcb_randr_get_output_info_name (const xcb_randr_get_output_info_reply_t *R  /**< */)
d1107 1
a1107 1
xcb_randr_get_output_info_name_length (const xcb_randr_get_output_info_reply_t *R  /**< */)
d1113 1
a1113 1
xcb_randr_get_output_info_name_end (const xcb_randr_get_output_info_reply_t *R  /**< */)
d1116 2
a1117 2
    xcb_generic_iterator_t child = xcb_randr_get_output_info_clones_end(R);
    i.data = ((uint8_t *) child.data) + (R->name_len);
d1124 1
a1124 1
xcb_randr_get_output_info_reply (xcb_connection_t                    *c  /**< */,
d1126 1
a1126 1
                                 xcb_generic_error_t                **e  /**< */)
d1132 1
a1132 1
xcb_randr_list_output_properties_sizeof (const void  *_buffer  /**< */)
d1163 2
a1164 2
xcb_randr_list_output_properties (xcb_connection_t   *c  /**< */,
                                  xcb_randr_output_t  output  /**< */)
d1167 4
a1170 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_LIST_OUTPUT_PROPERTIES,
        /* isvoid */ 0
d1189 2
a1190 2
xcb_randr_list_output_properties_unchecked (xcb_connection_t   *c  /**< */,
                                            xcb_randr_output_t  output  /**< */)
d1193 4
a1196 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_LIST_OUTPUT_PROPERTIES,
        /* isvoid */ 0
d1215 1
a1215 1
xcb_randr_list_output_properties_atoms (const xcb_randr_list_output_properties_reply_t *R  /**< */)
d1221 1
a1221 1
xcb_randr_list_output_properties_atoms_length (const xcb_randr_list_output_properties_reply_t *R  /**< */)
d1227 1
a1227 1
xcb_randr_list_output_properties_atoms_end (const xcb_randr_list_output_properties_reply_t *R  /**< */)
d1237 1
a1237 1
xcb_randr_list_output_properties_reply (xcb_connection_t                           *c  /**< */,
d1239 1
a1239 1
                                        xcb_generic_error_t                       **e  /**< */)
d1245 1
a1245 1
xcb_randr_query_output_property_sizeof (const void  *_buffer  /**< */)
d1276 3
a1278 3
xcb_randr_query_output_property (xcb_connection_t   *c  /**< */,
                                 xcb_randr_output_t  output  /**< */,
                                 xcb_atom_t          property  /**< */)
d1281 4
a1284 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_QUERY_OUTPUT_PROPERTY,
        /* isvoid */ 0
d1304 3
a1306 3
xcb_randr_query_output_property_unchecked (xcb_connection_t   *c  /**< */,
                                           xcb_randr_output_t  output  /**< */,
                                           xcb_atom_t          property  /**< */)
d1309 4
a1312 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_QUERY_OUTPUT_PROPERTY,
        /* isvoid */ 0
d1332 1
a1332 1
xcb_randr_query_output_property_valid_values (const xcb_randr_query_output_property_reply_t *R  /**< */)
d1338 1
a1338 1
xcb_randr_query_output_property_valid_values_length (const xcb_randr_query_output_property_reply_t *R  /**< */)
d1344 1
a1344 1
xcb_randr_query_output_property_valid_values_end (const xcb_randr_query_output_property_reply_t *R  /**< */)
d1354 1
a1354 1
xcb_randr_query_output_property_reply (xcb_connection_t                          *c  /**< */,
d1356 1
a1356 1
                                       xcb_generic_error_t                      **e  /**< */)
d1362 2
a1363 2
xcb_randr_configure_output_property_sizeof (const void  *_buffer  /**< */,
                                            uint32_t     values_len  /**< */)
d1393 7
a1399 7
xcb_randr_configure_output_property_checked (xcb_connection_t   *c  /**< */,
                                             xcb_randr_output_t  output  /**< */,
                                             xcb_atom_t          property  /**< */,
                                             uint8_t             pending  /**< */,
                                             uint8_t             range  /**< */,
                                             uint32_t            values_len  /**< */,
                                             const int32_t      *values  /**< */)
d1402 4
a1405 4
        /* count */ 4,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_CONFIGURE_OUTPUT_PROPERTY,
        /* isvoid */ 1
d1433 7
a1439 7
xcb_randr_configure_output_property (xcb_connection_t   *c  /**< */,
                                     xcb_randr_output_t  output  /**< */,
                                     xcb_atom_t          property  /**< */,
                                     uint8_t             pending  /**< */,
                                     uint8_t             range  /**< */,
                                     uint32_t            values_len  /**< */,
                                     const int32_t      *values  /**< */)
d1442 4
a1445 4
        /* count */ 4,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_CONFIGURE_OUTPUT_PROPERTY,
        /* isvoid */ 1
d1472 22
d1495 1
a1495 1
xcb_randr_change_output_property_sizeof (const void  *_buffer  /**< */)
d1526 8
a1533 8
xcb_randr_change_output_property_checked (xcb_connection_t   *c  /**< */,
                                          xcb_randr_output_t  output  /**< */,
                                          xcb_atom_t          property  /**< */,
                                          xcb_atom_t          type  /**< */,
                                          uint8_t             format  /**< */,
                                          uint8_t             mode  /**< */,
                                          uint32_t            num_units  /**< */,
                                          const void         *data  /**< */)
d1536 4
a1539 4
        /* count */ 4,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_CHANGE_OUTPUT_PROPERTY,
        /* isvoid */ 1
d1569 8
a1576 8
xcb_randr_change_output_property (xcb_connection_t   *c  /**< */,
                                  xcb_randr_output_t  output  /**< */,
                                  xcb_atom_t          property  /**< */,
                                  xcb_atom_t          type  /**< */,
                                  uint8_t             format  /**< */,
                                  uint8_t             mode  /**< */,
                                  uint32_t            num_units  /**< */,
                                  const void         *data  /**< */)
d1579 4
a1582 4
        /* count */ 4,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_CHANGE_OUTPUT_PROPERTY,
        /* isvoid */ 1
d1611 22
d1634 3
a1636 3
xcb_randr_delete_output_property_checked (xcb_connection_t   *c  /**< */,
                                          xcb_randr_output_t  output  /**< */,
                                          xcb_atom_t          property  /**< */)
d1639 4
a1642 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_DELETE_OUTPUT_PROPERTY,
        /* isvoid */ 1
d1662 3
a1664 3
xcb_randr_delete_output_property (xcb_connection_t   *c  /**< */,
                                  xcb_randr_output_t  output  /**< */,
                                  xcb_atom_t          property  /**< */)
d1667 4
a1670 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_DELETE_OUTPUT_PROPERTY,
        /* isvoid */ 1
d1690 1
a1690 1
xcb_randr_get_output_property_sizeof (const void  *_buffer  /**< */)
d1721 8
a1728 8
xcb_randr_get_output_property (xcb_connection_t   *c  /**< */,
                               xcb_randr_output_t  output  /**< */,
                               xcb_atom_t          property  /**< */,
                               xcb_atom_t          type  /**< */,
                               uint32_t            long_offset  /**< */,
                               uint32_t            long_length  /**< */,
                               uint8_t             _delete  /**< */,
                               uint8_t             pending  /**< */)
d1731 4
a1734 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_OUTPUT_PROPERTY,
        /* isvoid */ 0
d1760 8
a1767 8
xcb_randr_get_output_property_unchecked (xcb_connection_t   *c  /**< */,
                                         xcb_randr_output_t  output  /**< */,
                                         xcb_atom_t          property  /**< */,
                                         xcb_atom_t          type  /**< */,
                                         uint32_t            long_offset  /**< */,
                                         uint32_t            long_length  /**< */,
                                         uint8_t             _delete  /**< */,
                                         uint8_t             pending  /**< */)
d1770 4
a1773 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_OUTPUT_PROPERTY,
        /* isvoid */ 0
d1799 1
a1799 1
xcb_randr_get_output_property_data (const xcb_randr_get_output_property_reply_t *R  /**< */)
d1805 1
a1805 1
xcb_randr_get_output_property_data_length (const xcb_randr_get_output_property_reply_t *R  /**< */)
d1811 1
a1811 1
xcb_randr_get_output_property_data_end (const xcb_randr_get_output_property_reply_t *R  /**< */)
d1821 1
a1821 1
xcb_randr_get_output_property_reply (xcb_connection_t                        *c  /**< */,
d1823 1
a1823 1
                                     xcb_generic_error_t                    **e  /**< */)
d1829 2
a1830 2
xcb_randr_create_mode_sizeof (const void  *_buffer  /**< */,
                              uint32_t     name_len  /**< */)
d1860 5
a1864 5
xcb_randr_create_mode (xcb_connection_t      *c  /**< */,
                       xcb_window_t           window  /**< */,
                       xcb_randr_mode_info_t  mode_info  /**< */,
                       uint32_t               name_len  /**< */,
                       const char            *name  /**< */)
d1867 4
a1870 4
        /* count */ 4,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_CREATE_MODE,
        /* isvoid */ 0
d1895 5
a1899 5
xcb_randr_create_mode_unchecked (xcb_connection_t      *c  /**< */,
                                 xcb_window_t           window  /**< */,
                                 xcb_randr_mode_info_t  mode_info  /**< */,
                                 uint32_t               name_len  /**< */,
                                 const char            *name  /**< */)
d1902 4
a1905 4
        /* count */ 4,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_CREATE_MODE,
        /* isvoid */ 0
d1930 1
a1930 1
xcb_randr_create_mode_reply (xcb_connection_t                *c  /**< */,
d1932 1
a1932 1
                             xcb_generic_error_t            **e  /**< */)
d1938 2
a1939 2
xcb_randr_destroy_mode_checked (xcb_connection_t *c  /**< */,
                                xcb_randr_mode_t  mode  /**< */)
d1942 4
a1945 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_DESTROY_MODE,
        /* isvoid */ 1
d1964 2
a1965 2
xcb_randr_destroy_mode (xcb_connection_t *c  /**< */,
                        xcb_randr_mode_t  mode  /**< */)
d1968 4
a1971 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_DESTROY_MODE,
        /* isvoid */ 1
d1990 3
a1992 3
xcb_randr_add_output_mode_checked (xcb_connection_t   *c  /**< */,
                                   xcb_randr_output_t  output  /**< */,
                                   xcb_randr_mode_t    mode  /**< */)
d1995 4
a1998 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_ADD_OUTPUT_MODE,
        /* isvoid */ 1
d2018 3
a2020 3
xcb_randr_add_output_mode (xcb_connection_t   *c  /**< */,
                           xcb_randr_output_t  output  /**< */,
                           xcb_randr_mode_t    mode  /**< */)
d2023 4
a2026 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_ADD_OUTPUT_MODE,
        /* isvoid */ 1
d2046 3
a2048 3
xcb_randr_delete_output_mode_checked (xcb_connection_t   *c  /**< */,
                                      xcb_randr_output_t  output  /**< */,
                                      xcb_randr_mode_t    mode  /**< */)
d2051 4
a2054 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_DELETE_OUTPUT_MODE,
        /* isvoid */ 1
d2074 3
a2076 3
xcb_randr_delete_output_mode (xcb_connection_t   *c  /**< */,
                              xcb_randr_output_t  output  /**< */,
                              xcb_randr_mode_t    mode  /**< */)
d2079 4
a2082 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_DELETE_OUTPUT_MODE,
        /* isvoid */ 1
d2102 1
a2102 1
xcb_randr_get_crtc_info_sizeof (const void  *_buffer  /**< */)
d2145 3
a2147 3
xcb_randr_get_crtc_info (xcb_connection_t *c  /**< */,
                         xcb_randr_crtc_t  crtc  /**< */,
                         xcb_timestamp_t   config_timestamp  /**< */)
d2150 4
a2153 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_CRTC_INFO,
        /* isvoid */ 0
d2173 3
a2175 3
xcb_randr_get_crtc_info_unchecked (xcb_connection_t *c  /**< */,
                                   xcb_randr_crtc_t  crtc  /**< */,
                                   xcb_timestamp_t   config_timestamp  /**< */)
d2178 4
a2181 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_CRTC_INFO,
        /* isvoid */ 0
d2201 1
a2201 1
xcb_randr_get_crtc_info_outputs (const xcb_randr_get_crtc_info_reply_t *R  /**< */)
d2207 1
a2207 1
xcb_randr_get_crtc_info_outputs_length (const xcb_randr_get_crtc_info_reply_t *R  /**< */)
d2213 1
a2213 1
xcb_randr_get_crtc_info_outputs_end (const xcb_randr_get_crtc_info_reply_t *R  /**< */)
d2223 1
a2223 1
xcb_randr_get_crtc_info_possible (const xcb_randr_get_crtc_info_reply_t *R  /**< */)
d2230 1
a2230 1
xcb_randr_get_crtc_info_possible_length (const xcb_randr_get_crtc_info_reply_t *R  /**< */)
d2236 1
a2236 1
xcb_randr_get_crtc_info_possible_end (const xcb_randr_get_crtc_info_reply_t *R  /**< */)
d2239 2
a2240 2
    xcb_generic_iterator_t child = xcb_randr_get_crtc_info_outputs_end(R);
    i.data = ((xcb_randr_output_t *) child.data) + (R->num_possible_outputs);
d2247 1
a2247 1
xcb_randr_get_crtc_info_reply (xcb_connection_t                  *c  /**< */,
d2249 1
a2249 1
                               xcb_generic_error_t              **e  /**< */)
d2255 2
a2256 2
xcb_randr_set_crtc_config_sizeof (const void  *_buffer  /**< */,
                                  uint32_t     outputs_len  /**< */)
d2286 16
a2301 16
xcb_randr_set_crtc_config (xcb_connection_t         *c  /**< */,
                           xcb_randr_crtc_t          crtc  /**< */,
                           xcb_timestamp_t           timestamp  /**< */,
                           xcb_timestamp_t           config_timestamp  /**< */,
                           int16_t                   x  /**< */,
                           int16_t                   y  /**< */,
                           xcb_randr_mode_t          mode  /**< */,
                           uint16_t                  rotation  /**< */,
                           uint32_t                  outputs_len  /**< */,
                           const xcb_randr_output_t *outputs  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_CRTC_CONFIG,
        /* isvoid */ 0
d2332 16
a2347 16
xcb_randr_set_crtc_config_unchecked (xcb_connection_t         *c  /**< */,
                                     xcb_randr_crtc_t          crtc  /**< */,
                                     xcb_timestamp_t           timestamp  /**< */,
                                     xcb_timestamp_t           config_timestamp  /**< */,
                                     int16_t                   x  /**< */,
                                     int16_t                   y  /**< */,
                                     xcb_randr_mode_t          mode  /**< */,
                                     uint16_t                  rotation  /**< */,
                                     uint32_t                  outputs_len  /**< */,
                                     const xcb_randr_output_t *outputs  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_CRTC_CONFIG,
        /* isvoid */ 0
d2378 1
a2378 1
xcb_randr_set_crtc_config_reply (xcb_connection_t                    *c  /**< */,
d2380 1
a2380 1
                                 xcb_generic_error_t                **e  /**< */)
d2386 2
a2387 2
xcb_randr_get_crtc_gamma_size (xcb_connection_t *c  /**< */,
                               xcb_randr_crtc_t  crtc  /**< */)
d2390 4
a2393 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_CRTC_GAMMA_SIZE,
        /* isvoid */ 0
d2412 2
a2413 2
xcb_randr_get_crtc_gamma_size_unchecked (xcb_connection_t *c  /**< */,
                                         xcb_randr_crtc_t  crtc  /**< */)
d2416 4
a2419 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_CRTC_GAMMA_SIZE,
        /* isvoid */ 0
d2438 1
a2438 1
xcb_randr_get_crtc_gamma_size_reply (xcb_connection_t                        *c  /**< */,
d2440 1
a2440 1
                                     xcb_generic_error_t                    **e  /**< */)
d2446 1
a2446 1
xcb_randr_get_crtc_gamma_sizeof (const void  *_buffer  /**< */)
d2501 2
a2502 2
xcb_randr_get_crtc_gamma (xcb_connection_t *c  /**< */,
                          xcb_randr_crtc_t  crtc  /**< */)
d2505 4
a2508 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_CRTC_GAMMA,
        /* isvoid */ 0
d2527 2
a2528 2
xcb_randr_get_crtc_gamma_unchecked (xcb_connection_t *c  /**< */,
                                    xcb_randr_crtc_t  crtc  /**< */)
d2531 4
a2534 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_CRTC_GAMMA,
        /* isvoid */ 0
d2553 1
a2553 1
xcb_randr_get_crtc_gamma_red (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */)
d2559 1
a2559 1
xcb_randr_get_crtc_gamma_red_length (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */)
d2565 1
a2565 1
xcb_randr_get_crtc_gamma_red_end (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */)
d2575 1
a2575 1
xcb_randr_get_crtc_gamma_green (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */)
d2582 1
a2582 1
xcb_randr_get_crtc_gamma_green_length (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */)
d2588 1
a2588 1
xcb_randr_get_crtc_gamma_green_end (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */)
d2591 2
a2592 2
    xcb_generic_iterator_t child = xcb_randr_get_crtc_gamma_red_end(R);
    i.data = ((uint16_t *) child.data) + (R->size);
d2599 1
a2599 1
xcb_randr_get_crtc_gamma_blue (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */)
d2606 1
a2606 1
xcb_randr_get_crtc_gamma_blue_length (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */)
d2612 1
a2612 1
xcb_randr_get_crtc_gamma_blue_end (const xcb_randr_get_crtc_gamma_reply_t *R  /**< */)
d2615 2
a2616 2
    xcb_generic_iterator_t child = xcb_randr_get_crtc_gamma_green_end(R);
    i.data = ((uint16_t *) child.data) + (R->size);
d2623 1
a2623 1
xcb_randr_get_crtc_gamma_reply (xcb_connection_t                   *c  /**< */,
d2625 1
a2625 1
                                xcb_generic_error_t               **e  /**< */)
d2631 1
a2631 1
xcb_randr_set_crtc_gamma_sizeof (const void  *_buffer  /**< */)
d2686 6
a2691 6
xcb_randr_set_crtc_gamma_checked (xcb_connection_t *c  /**< */,
                                  xcb_randr_crtc_t  crtc  /**< */,
                                  uint16_t          size  /**< */,
                                  const uint16_t   *red  /**< */,
                                  const uint16_t   *green  /**< */,
                                  const uint16_t   *blue  /**< */)
d2694 4
a2697 4
        /* count */ 8,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_CRTC_GAMMA,
        /* isvoid */ 1
d2733 6
a2738 6
xcb_randr_set_crtc_gamma (xcb_connection_t *c  /**< */,
                          xcb_randr_crtc_t  crtc  /**< */,
                          uint16_t          size  /**< */,
                          const uint16_t   *red  /**< */,
                          const uint16_t   *green  /**< */,
                          const uint16_t   *blue  /**< */)
d2741 4
a2744 4
        /* count */ 8,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_CRTC_GAMMA,
        /* isvoid */ 1
d2779 29
d2809 42
a2850 1
xcb_randr_get_screen_resources_current_sizeof (const void  *_buffer  /**< */)
d2917 2
a2918 2
xcb_randr_get_screen_resources_current (xcb_connection_t *c  /**< */,
                                        xcb_window_t      window  /**< */)
d2921 4
a2924 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_SCREEN_RESOURCES_CURRENT,
        /* isvoid */ 0
d2943 2
a2944 2
xcb_randr_get_screen_resources_current_unchecked (xcb_connection_t *c  /**< */,
                                                  xcb_window_t      window  /**< */)
d2947 4
a2950 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_SCREEN_RESOURCES_CURRENT,
        /* isvoid */ 0
d2969 1
a2969 1
xcb_randr_get_screen_resources_current_crtcs (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */)
d2975 1
a2975 1
xcb_randr_get_screen_resources_current_crtcs_length (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */)
d2981 1
a2981 1
xcb_randr_get_screen_resources_current_crtcs_end (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */)
d2991 1
a2991 1
xcb_randr_get_screen_resources_current_outputs (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */)
d2998 1
a2998 1
xcb_randr_get_screen_resources_current_outputs_length (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */)
d3004 1
a3004 1
xcb_randr_get_screen_resources_current_outputs_end (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */)
d3007 2
a3008 2
    xcb_generic_iterator_t child = xcb_randr_get_screen_resources_current_crtcs_end(R);
    i.data = ((xcb_randr_output_t *) child.data) + (R->num_outputs);
d3015 1
a3015 1
xcb_randr_get_screen_resources_current_modes (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */)
d3022 1
a3022 1
xcb_randr_get_screen_resources_current_modes_length (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */)
d3028 1
a3028 1
xcb_randr_get_screen_resources_current_modes_iterator (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */)
d3039 1
a3039 1
xcb_randr_get_screen_resources_current_names (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */)
d3046 1
a3046 1
xcb_randr_get_screen_resources_current_names_length (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */)
d3052 1
a3052 1
xcb_randr_get_screen_resources_current_names_end (const xcb_randr_get_screen_resources_current_reply_t *R  /**< */)
d3055 2
a3056 2
    xcb_generic_iterator_t child = xcb_randr_mode_info_end(xcb_randr_get_screen_resources_current_modes_iterator(R));
    i.data = ((uint8_t *) child.data) + (R->names_len);
d3063 1
a3063 1
xcb_randr_get_screen_resources_current_reply (xcb_connection_t                                 *c  /**< */,
d3065 1
a3065 1
                                              xcb_generic_error_t                             **e  /**< */)
d3071 2
a3072 2
xcb_randr_set_crtc_transform_sizeof (const void  *_buffer  /**< */,
                                     uint32_t     filter_params_len  /**< */)
d3090 9
d3124 7
a3130 7
xcb_randr_set_crtc_transform_checked (xcb_connection_t         *c  /**< */,
                                      xcb_randr_crtc_t          crtc  /**< */,
                                      xcb_render_transform_t    transform  /**< */,
                                      uint16_t                  filter_len  /**< */,
                                      const char               *filter_name  /**< */,
                                      uint32_t                  filter_params_len  /**< */,
                                      const xcb_render_fixed_t *filter_params  /**< */)
d3133 4
a3136 4
        /* count */ 6,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_CRTC_TRANSFORM,
        /* isvoid */ 1
d3168 7
a3174 7
xcb_randr_set_crtc_transform (xcb_connection_t         *c  /**< */,
                              xcb_randr_crtc_t          crtc  /**< */,
                              xcb_render_transform_t    transform  /**< */,
                              uint16_t                  filter_len  /**< */,
                              const char               *filter_name  /**< */,
                              uint32_t                  filter_params_len  /**< */,
                              const xcb_render_fixed_t *filter_params  /**< */)
d3177 4
a3180 4
        /* count */ 6,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_CRTC_TRANSFORM,
        /* isvoid */ 1
d3211 29
d3241 18
a3258 1
xcb_randr_get_crtc_transform_sizeof (const void  *_buffer  /**< */)
d3276 9
d3309 9
d3343 2
a3344 2
xcb_randr_get_crtc_transform (xcb_connection_t *c  /**< */,
                              xcb_randr_crtc_t  crtc  /**< */)
d3347 4
a3350 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_CRTC_TRANSFORM,
        /* isvoid */ 0
d3369 2
a3370 2
xcb_randr_get_crtc_transform_unchecked (xcb_connection_t *c  /**< */,
                                        xcb_randr_crtc_t  crtc  /**< */)
d3373 4
a3376 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_CRTC_TRANSFORM,
        /* isvoid */ 0
d3395 1
a3395 1
xcb_randr_get_crtc_transform_pending_filter_name (const xcb_randr_get_crtc_transform_reply_t *R  /**< */)
d3401 1
a3401 1
xcb_randr_get_crtc_transform_pending_filter_name_length (const xcb_randr_get_crtc_transform_reply_t *R  /**< */)
d3407 1
a3407 1
xcb_randr_get_crtc_transform_pending_filter_name_end (const xcb_randr_get_crtc_transform_reply_t *R  /**< */)
d3417 1
a3417 1
xcb_randr_get_crtc_transform_pending_params (const xcb_randr_get_crtc_transform_reply_t *R  /**< */)
d3420 1
a3420 1
    return (xcb_render_fixed_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_render_fixed_t, prev.index) + 0);
d3424 1
a3424 1
xcb_randr_get_crtc_transform_pending_params_length (const xcb_randr_get_crtc_transform_reply_t *R  /**< */)
d3430 1
a3430 1
xcb_randr_get_crtc_transform_pending_params_end (const xcb_randr_get_crtc_transform_reply_t *R  /**< */)
d3433 2
a3434 2
    xcb_generic_iterator_t child = xcb_randr_get_crtc_transform_pending_filter_name_end(R);
    i.data = ((xcb_render_fixed_t *) child.data) + (R->pending_nparams);
d3441 1
a3441 1
xcb_randr_get_crtc_transform_current_filter_name (const xcb_randr_get_crtc_transform_reply_t *R  /**< */)
d3448 1
a3448 1
xcb_randr_get_crtc_transform_current_filter_name_length (const xcb_randr_get_crtc_transform_reply_t *R  /**< */)
d3454 1
a3454 1
xcb_randr_get_crtc_transform_current_filter_name_end (const xcb_randr_get_crtc_transform_reply_t *R  /**< */)
d3457 2
a3458 2
    xcb_generic_iterator_t child = xcb_randr_get_crtc_transform_pending_params_end(R);
    i.data = ((char *) child.data) + (R->current_len);
d3465 1
a3465 1
xcb_randr_get_crtc_transform_current_params (const xcb_randr_get_crtc_transform_reply_t *R  /**< */)
d3468 1
a3468 1
    return (xcb_render_fixed_t *) ((char *) prev.data + XCB_TYPE_PAD(xcb_render_fixed_t, prev.index) + 0);
d3472 1
a3472 1
xcb_randr_get_crtc_transform_current_params_length (const xcb_randr_get_crtc_transform_reply_t *R  /**< */)
d3478 1
a3478 1
xcb_randr_get_crtc_transform_current_params_end (const xcb_randr_get_crtc_transform_reply_t *R  /**< */)
d3481 2
a3482 2
    xcb_generic_iterator_t child = xcb_randr_get_crtc_transform_current_filter_name_end(R);
    i.data = ((xcb_render_fixed_t *) child.data) + (R->current_nparams);
d3489 1
a3489 1
xcb_randr_get_crtc_transform_reply (xcb_connection_t                       *c  /**< */,
d3491 1
a3491 1
                                    xcb_generic_error_t                   **e  /**< */)
d3497 2
a3498 2
xcb_randr_get_panning (xcb_connection_t *c  /**< */,
                       xcb_randr_crtc_t  crtc  /**< */)
d3501 4
a3504 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_PANNING,
        /* isvoid */ 0
d3523 2
a3524 2
xcb_randr_get_panning_unchecked (xcb_connection_t *c  /**< */,
                                 xcb_randr_crtc_t  crtc  /**< */)
d3527 4
a3530 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_PANNING,
        /* isvoid */ 0
d3549 1
a3549 1
xcb_randr_get_panning_reply (xcb_connection_t                *c  /**< */,
d3551 1
a3551 1
                             xcb_generic_error_t            **e  /**< */)
d3557 21
a3577 21
xcb_randr_set_panning (xcb_connection_t *c  /**< */,
                       xcb_randr_crtc_t  crtc  /**< */,
                       xcb_timestamp_t   timestamp  /**< */,
                       uint16_t          left  /**< */,
                       uint16_t          top  /**< */,
                       uint16_t          width  /**< */,
                       uint16_t          height  /**< */,
                       uint16_t          track_left  /**< */,
                       uint16_t          track_top  /**< */,
                       uint16_t          track_width  /**< */,
                       uint16_t          track_height  /**< */,
                       int16_t           border_left  /**< */,
                       int16_t           border_top  /**< */,
                       int16_t           border_right  /**< */,
                       int16_t           border_bottom  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_PANNING,
        /* isvoid */ 0
d3609 21
a3629 21
xcb_randr_set_panning_unchecked (xcb_connection_t *c  /**< */,
                                 xcb_randr_crtc_t  crtc  /**< */,
                                 xcb_timestamp_t   timestamp  /**< */,
                                 uint16_t          left  /**< */,
                                 uint16_t          top  /**< */,
                                 uint16_t          width  /**< */,
                                 uint16_t          height  /**< */,
                                 uint16_t          track_left  /**< */,
                                 uint16_t          track_top  /**< */,
                                 uint16_t          track_width  /**< */,
                                 uint16_t          track_height  /**< */,
                                 int16_t           border_left  /**< */,
                                 int16_t           border_top  /**< */,
                                 int16_t           border_right  /**< */,
                                 int16_t           border_bottom  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_PANNING,
        /* isvoid */ 0
d3661 1
a3661 1
xcb_randr_set_panning_reply (xcb_connection_t                *c  /**< */,
d3663 1
a3663 1
                             xcb_generic_error_t            **e  /**< */)
d3669 3
a3671 3
xcb_randr_set_output_primary_checked (xcb_connection_t   *c  /**< */,
                                      xcb_window_t        window  /**< */,
                                      xcb_randr_output_t  output  /**< */)
d3674 4
a3677 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_OUTPUT_PRIMARY,
        /* isvoid */ 1
d3697 3
a3699 3
xcb_randr_set_output_primary (xcb_connection_t   *c  /**< */,
                              xcb_window_t        window  /**< */,
                              xcb_randr_output_t  output  /**< */)
d3702 4
a3705 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_OUTPUT_PRIMARY,
        /* isvoid */ 1
d3725 2
a3726 2
xcb_randr_get_output_primary (xcb_connection_t *c  /**< */,
                              xcb_window_t      window  /**< */)
d3729 4
a3732 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_OUTPUT_PRIMARY,
        /* isvoid */ 0
d3751 2
a3752 2
xcb_randr_get_output_primary_unchecked (xcb_connection_t *c  /**< */,
                                        xcb_window_t      window  /**< */)
d3755 4
a3758 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_OUTPUT_PRIMARY,
        /* isvoid */ 0
d3777 1
a3777 1
xcb_randr_get_output_primary_reply (xcb_connection_t                       *c  /**< */,
d3779 1
a3779 1
                                    xcb_generic_error_t                   **e  /**< */)
d3785 1
a3785 1
xcb_randr_get_providers_sizeof (const void  *_buffer  /**< */)
d3816 2
a3817 2
xcb_randr_get_providers (xcb_connection_t *c  /**< */,
                         xcb_window_t      window  /**< */)
d3820 4
a3823 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_PROVIDERS,
        /* isvoid */ 0
d3842 2
a3843 2
xcb_randr_get_providers_unchecked (xcb_connection_t *c  /**< */,
                                   xcb_window_t      window  /**< */)
d3846 4
a3849 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_PROVIDERS,
        /* isvoid */ 0
d3868 1
a3868 1
xcb_randr_get_providers_providers (const xcb_randr_get_providers_reply_t *R  /**< */)
d3874 1
a3874 1
xcb_randr_get_providers_providers_length (const xcb_randr_get_providers_reply_t *R  /**< */)
d3880 1
a3880 1
xcb_randr_get_providers_providers_end (const xcb_randr_get_providers_reply_t *R  /**< */)
d3890 1
a3890 1
xcb_randr_get_providers_reply (xcb_connection_t                  *c  /**< */,
d3892 1
a3892 1
                               xcb_generic_error_t              **e  /**< */)
d3898 1
a3898 1
xcb_randr_get_provider_info_sizeof (const void  *_buffer  /**< */)
d3977 3
a3979 3
xcb_randr_get_provider_info (xcb_connection_t     *c  /**< */,
                             xcb_randr_provider_t  provider  /**< */,
                             xcb_timestamp_t       config_timestamp  /**< */)
d3982 4
a3985 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_PROVIDER_INFO,
        /* isvoid */ 0
d4005 3
a4007 3
xcb_randr_get_provider_info_unchecked (xcb_connection_t     *c  /**< */,
                                       xcb_randr_provider_t  provider  /**< */,
                                       xcb_timestamp_t       config_timestamp  /**< */)
d4010 4
a4013 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_PROVIDER_INFO,
        /* isvoid */ 0
d4033 1
a4033 1
xcb_randr_get_provider_info_crtcs (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4039 1
a4039 1
xcb_randr_get_provider_info_crtcs_length (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4045 1
a4045 1
xcb_randr_get_provider_info_crtcs_end (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4055 1
a4055 1
xcb_randr_get_provider_info_outputs (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4062 1
a4062 1
xcb_randr_get_provider_info_outputs_length (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4068 1
a4068 1
xcb_randr_get_provider_info_outputs_end (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4071 2
a4072 2
    xcb_generic_iterator_t child = xcb_randr_get_provider_info_crtcs_end(R);
    i.data = ((xcb_randr_output_t *) child.data) + (R->num_outputs);
d4079 1
a4079 1
xcb_randr_get_provider_info_associated_providers (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4086 1
a4086 1
xcb_randr_get_provider_info_associated_providers_length (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4092 1
a4092 1
xcb_randr_get_provider_info_associated_providers_end (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4095 2
a4096 2
    xcb_generic_iterator_t child = xcb_randr_get_provider_info_outputs_end(R);
    i.data = ((xcb_randr_provider_t *) child.data) + (R->num_associated_providers);
d4103 1
a4103 1
xcb_randr_get_provider_info_associated_capability (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4110 1
a4110 1
xcb_randr_get_provider_info_associated_capability_length (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4116 1
a4116 1
xcb_randr_get_provider_info_associated_capability_end (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4119 2
a4120 2
    xcb_generic_iterator_t child = xcb_randr_get_provider_info_associated_providers_end(R);
    i.data = ((uint32_t *) child.data) + (R->num_associated_providers);
d4127 1
a4127 1
xcb_randr_get_provider_info_name (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4134 1
a4134 1
xcb_randr_get_provider_info_name_length (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4140 1
a4140 1
xcb_randr_get_provider_info_name_end (const xcb_randr_get_provider_info_reply_t *R  /**< */)
d4143 2
a4144 2
    xcb_generic_iterator_t child = xcb_randr_get_provider_info_associated_capability_end(R);
    i.data = ((char *) child.data) + (R->name_len);
d4151 1
a4151 1
xcb_randr_get_provider_info_reply (xcb_connection_t                      *c  /**< */,
d4153 1
a4153 1
                                   xcb_generic_error_t                  **e  /**< */)
d4159 4
a4162 4
xcb_randr_set_provider_offload_sink_checked (xcb_connection_t     *c  /**< */,
                                             xcb_randr_provider_t  provider  /**< */,
                                             xcb_randr_provider_t  sink_provider  /**< */,
                                             xcb_timestamp_t       config_timestamp  /**< */)
d4165 4
a4168 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_PROVIDER_OFFLOAD_SINK,
        /* isvoid */ 1
d4189 4
a4192 4
xcb_randr_set_provider_offload_sink (xcb_connection_t     *c  /**< */,
                                     xcb_randr_provider_t  provider  /**< */,
                                     xcb_randr_provider_t  sink_provider  /**< */,
                                     xcb_timestamp_t       config_timestamp  /**< */)
d4195 4
a4198 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_PROVIDER_OFFLOAD_SINK,
        /* isvoid */ 1
d4219 4
a4222 4
xcb_randr_set_provider_output_source_checked (xcb_connection_t     *c  /**< */,
                                              xcb_randr_provider_t  provider  /**< */,
                                              xcb_randr_provider_t  source_provider  /**< */,
                                              xcb_timestamp_t       config_timestamp  /**< */)
d4225 4
a4228 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_PROVIDER_OUTPUT_SOURCE,
        /* isvoid */ 1
d4249 4
a4252 4
xcb_randr_set_provider_output_source (xcb_connection_t     *c  /**< */,
                                      xcb_randr_provider_t  provider  /**< */,
                                      xcb_randr_provider_t  source_provider  /**< */,
                                      xcb_timestamp_t       config_timestamp  /**< */)
d4255 4
a4258 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_SET_PROVIDER_OUTPUT_SOURCE,
        /* isvoid */ 1
d4279 1
a4279 1
xcb_randr_list_provider_properties_sizeof (const void  *_buffer  /**< */)
d4310 2
a4311 2
xcb_randr_list_provider_properties (xcb_connection_t     *c  /**< */,
                                    xcb_randr_provider_t  provider  /**< */)
d4314 4
a4317 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_LIST_PROVIDER_PROPERTIES,
        /* isvoid */ 0
d4336 2
a4337 2
xcb_randr_list_provider_properties_unchecked (xcb_connection_t     *c  /**< */,
                                              xcb_randr_provider_t  provider  /**< */)
d4340 4
a4343 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_LIST_PROVIDER_PROPERTIES,
        /* isvoid */ 0
d4362 1
a4362 1
xcb_randr_list_provider_properties_atoms (const xcb_randr_list_provider_properties_reply_t *R  /**< */)
d4368 1
a4368 1
xcb_randr_list_provider_properties_atoms_length (const xcb_randr_list_provider_properties_reply_t *R  /**< */)
d4374 1
a4374 1
xcb_randr_list_provider_properties_atoms_end (const xcb_randr_list_provider_properties_reply_t *R  /**< */)
d4384 1
a4384 1
xcb_randr_list_provider_properties_reply (xcb_connection_t                             *c  /**< */,
d4386 1
a4386 1
                                          xcb_generic_error_t                         **e  /**< */)
d4392 1
a4392 1
xcb_randr_query_provider_property_sizeof (const void  *_buffer  /**< */)
d4423 3
a4425 3
xcb_randr_query_provider_property (xcb_connection_t     *c  /**< */,
                                   xcb_randr_provider_t  provider  /**< */,
                                   xcb_atom_t            property  /**< */)
d4428 4
a4431 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_QUERY_PROVIDER_PROPERTY,
        /* isvoid */ 0
d4451 3
a4453 3
xcb_randr_query_provider_property_unchecked (xcb_connection_t     *c  /**< */,
                                             xcb_randr_provider_t  provider  /**< */,
                                             xcb_atom_t            property  /**< */)
d4456 4
a4459 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_QUERY_PROVIDER_PROPERTY,
        /* isvoid */ 0
d4479 1
a4479 1
xcb_randr_query_provider_property_valid_values (const xcb_randr_query_provider_property_reply_t *R  /**< */)
d4485 1
a4485 1
xcb_randr_query_provider_property_valid_values_length (const xcb_randr_query_provider_property_reply_t *R  /**< */)
d4491 1
a4491 1
xcb_randr_query_provider_property_valid_values_end (const xcb_randr_query_provider_property_reply_t *R  /**< */)
d4501 1
a4501 1
xcb_randr_query_provider_property_reply (xcb_connection_t                            *c  /**< */,
d4503 1
a4503 1
                                         xcb_generic_error_t                        **e  /**< */)
d4509 2
a4510 2
xcb_randr_configure_provider_property_sizeof (const void  *_buffer  /**< */,
                                              uint32_t     values_len  /**< */)
d4540 7
a4546 7
xcb_randr_configure_provider_property_checked (xcb_connection_t     *c  /**< */,
                                               xcb_randr_provider_t  provider  /**< */,
                                               xcb_atom_t            property  /**< */,
                                               uint8_t               pending  /**< */,
                                               uint8_t               range  /**< */,
                                               uint32_t              values_len  /**< */,
                                               const int32_t        *values  /**< */)
d4549 4
a4552 4
        /* count */ 4,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_CONFIGURE_PROVIDER_PROPERTY,
        /* isvoid */ 1
d4580 7
a4586 7
xcb_randr_configure_provider_property (xcb_connection_t     *c  /**< */,
                                       xcb_randr_provider_t  provider  /**< */,
                                       xcb_atom_t            property  /**< */,
                                       uint8_t               pending  /**< */,
                                       uint8_t               range  /**< */,
                                       uint32_t              values_len  /**< */,
                                       const int32_t        *values  /**< */)
d4589 4
a4592 4
        /* count */ 4,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_CONFIGURE_PROVIDER_PROPERTY,
        /* isvoid */ 1
d4619 22
d4642 1
a4642 1
xcb_randr_change_provider_property_sizeof (const void  *_buffer  /**< */)
d4673 8
a4680 8
xcb_randr_change_provider_property_checked (xcb_connection_t     *c  /**< */,
                                            xcb_randr_provider_t  provider  /**< */,
                                            xcb_atom_t            property  /**< */,
                                            xcb_atom_t            type  /**< */,
                                            uint8_t               format  /**< */,
                                            uint8_t               mode  /**< */,
                                            uint32_t              num_items  /**< */,
                                            const void           *data  /**< */)
d4683 4
a4686 4
        /* count */ 4,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_CHANGE_PROVIDER_PROPERTY,
        /* isvoid */ 1
d4716 8
a4723 8
xcb_randr_change_provider_property (xcb_connection_t     *c  /**< */,
                                    xcb_randr_provider_t  provider  /**< */,
                                    xcb_atom_t            property  /**< */,
                                    xcb_atom_t            type  /**< */,
                                    uint8_t               format  /**< */,
                                    uint8_t               mode  /**< */,
                                    uint32_t              num_items  /**< */,
                                    const void           *data  /**< */)
d4726 4
a4729 4
        /* count */ 4,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_CHANGE_PROVIDER_PROPERTY,
        /* isvoid */ 1
d4758 22
d4781 3
a4783 3
xcb_randr_delete_provider_property_checked (xcb_connection_t     *c  /**< */,
                                            xcb_randr_provider_t  provider  /**< */,
                                            xcb_atom_t            property  /**< */)
d4786 4
a4789 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_DELETE_PROVIDER_PROPERTY,
        /* isvoid */ 1
d4809 3
a4811 3
xcb_randr_delete_provider_property (xcb_connection_t     *c  /**< */,
                                    xcb_randr_provider_t  provider  /**< */,
                                    xcb_atom_t            property  /**< */)
d4814 4
a4817 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_DELETE_PROVIDER_PROPERTY,
        /* isvoid */ 1
d4837 1
a4837 1
xcb_randr_get_provider_property_sizeof (const void  *_buffer  /**< */)
d4868 8
a4875 8
xcb_randr_get_provider_property (xcb_connection_t     *c  /**< */,
                                 xcb_randr_provider_t  provider  /**< */,
                                 xcb_atom_t            property  /**< */,
                                 xcb_atom_t            type  /**< */,
                                 uint32_t              long_offset  /**< */,
                                 uint32_t              long_length  /**< */,
                                 uint8_t               _delete  /**< */,
                                 uint8_t               pending  /**< */)
d4878 4
a4881 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_PROVIDER_PROPERTY,
        /* isvoid */ 0
d4907 8
a4914 8
xcb_randr_get_provider_property_unchecked (xcb_connection_t     *c  /**< */,
                                           xcb_randr_provider_t  provider  /**< */,
                                           xcb_atom_t            property  /**< */,
                                           xcb_atom_t            type  /**< */,
                                           uint32_t              long_offset  /**< */,
                                           uint32_t              long_length  /**< */,
                                           uint8_t               _delete  /**< */,
                                           uint8_t               pending  /**< */)
d4917 4
a4920 4
        /* count */ 2,
        /* ext */ &xcb_randr_id,
        /* opcode */ XCB_RANDR_GET_PROVIDER_PROPERTY,
        /* isvoid */ 0
d4946 1
a4946 1
xcb_randr_get_provider_property_data (const xcb_randr_get_provider_property_reply_t *R  /**< */)
d4952 1
a4952 1
xcb_randr_get_provider_property_data_length (const xcb_randr_get_provider_property_reply_t *R  /**< */)
d4958 1
a4958 1
xcb_randr_get_provider_property_data_end (const xcb_randr_get_provider_property_reply_t *R  /**< */)
d4968 1
a4968 1
xcb_randr_get_provider_property_reply (xcb_connection_t                          *c  /**< */,
d4970 1
a4970 1
                                       xcb_generic_error_t                      **e  /**< */)
d4976 1
a4976 1
xcb_randr_crtc_change_next (xcb_randr_crtc_change_iterator_t *i  /**< */)
d4984 1
a4984 1
xcb_randr_crtc_change_end (xcb_randr_crtc_change_iterator_t i  /**< */)
d4994 1
a4994 1
xcb_randr_output_change_next (xcb_randr_output_change_iterator_t *i  /**< */)
d5002 1
a5002 1
xcb_randr_output_change_end (xcb_randr_output_change_iterator_t i  /**< */)
d5012 1
a5012 1
xcb_randr_output_property_next (xcb_randr_output_property_iterator_t *i  /**< */)
d5020 1
a5020 1
xcb_randr_output_property_end (xcb_randr_output_property_iterator_t i  /**< */)
d5030 1
a5030 1
xcb_randr_provider_change_next (xcb_randr_provider_change_iterator_t *i  /**< */)
d5038 1
a5038 1
xcb_randr_provider_change_end (xcb_randr_provider_change_iterator_t i  /**< */)
d5048 1
a5048 1
xcb_randr_provider_property_next (xcb_randr_provider_property_iterator_t *i  /**< */)
d5056 1
a5056 1
xcb_randr_provider_property_end (xcb_randr_provider_property_iterator_t i  /**< */)
d5066 1
a5066 1
xcb_randr_resource_change_next (xcb_randr_resource_change_iterator_t *i  /**< */)
d5074 1
a5074 1
xcb_randr_resource_change_end (xcb_randr_resource_change_iterator_t i  /**< */)
d5084 1
a5084 1
xcb_randr_notify_data_next (xcb_randr_notify_data_iterator_t *i  /**< */)
d5092 1
a5092 1
xcb_randr_notify_data_end (xcb_randr_notify_data_iterator_t i  /**< */)
d5099 346
@


1.4
log
@Update build system and generated files for libxcb 1.10.
@
text
@a21 10

/*****************************************************************************
 **
 ** void xcb_randr_mode_next
 ** 
 ** @@param xcb_randr_mode_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a29 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_mode_end
 ** 
 ** @@param xcb_randr_mode_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a39 10

/*****************************************************************************
 **
 ** void xcb_randr_crtc_next
 ** 
 ** @@param xcb_randr_crtc_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a47 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_crtc_end
 ** 
 ** @@param xcb_randr_crtc_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a57 10

/*****************************************************************************
 **
 ** void xcb_randr_output_next
 ** 
 ** @@param xcb_randr_output_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a65 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_output_end
 ** 
 ** @@param xcb_randr_output_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a75 10

/*****************************************************************************
 **
 ** void xcb_randr_provider_next
 ** 
 ** @@param xcb_randr_provider_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a83 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_provider_end
 ** 
 ** @@param xcb_randr_provider_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a93 10

/*****************************************************************************
 **
 ** void xcb_randr_screen_size_next
 ** 
 ** @@param xcb_randr_screen_size_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a101 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_screen_size_end
 ** 
 ** @@param xcb_randr_screen_size_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a142 10

/*****************************************************************************
 **
 ** uint16_t * xcb_randr_refresh_rates_rates
 ** 
 ** @@param const xcb_randr_refresh_rates_t *R
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a148 10

/*****************************************************************************
 **
 ** int xcb_randr_refresh_rates_rates_length
 ** 
 ** @@param const xcb_randr_refresh_rates_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a154 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_refresh_rates_rates_end
 ** 
 ** @@param const xcb_randr_refresh_rates_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a164 10

/*****************************************************************************
 **
 ** void xcb_randr_refresh_rates_next
 ** 
 ** @@param xcb_randr_refresh_rates_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a175 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_refresh_rates_end
 ** 
 ** @@param xcb_randr_refresh_rates_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a187 12

/*****************************************************************************
 **
 ** xcb_randr_query_version_cookie_t xcb_randr_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_randr_query_version_cookie_t
 **
 *****************************************************************************/
 
d199 1
a199 1
    
d203 1
a203 1
    
d206 1
a206 1
    
d211 1
a211 1
    
a215 12

/*****************************************************************************
 **
 ** xcb_randr_query_version_cookie_t xcb_randr_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_randr_query_version_cookie_t
 **
 *****************************************************************************/
 
d227 1
a227 1
    
d231 1
a231 1
    
d234 1
a234 1
    
d239 1
a239 1
    
a243 12

/*****************************************************************************
 **
 ** xcb_randr_query_version_reply_t * xcb_randr_query_version_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_randr_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_randr_query_version_reply_t *
 **
 *****************************************************************************/
 
a251 16

/*****************************************************************************
 **
 ** xcb_randr_set_screen_config_cookie_t xcb_randr_set_screen_config
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_timestamp_t   timestamp
 ** @@param xcb_timestamp_t   config_timestamp
 ** @@param uint16_t          sizeID
 ** @@param uint16_t          rotation
 ** @@param uint16_t          rate
 ** @@returns xcb_randr_set_screen_config_cookie_t
 **
 *****************************************************************************/
 
d267 1
a267 1
    
d271 1
a271 1
    
d279 1
a279 1
    
d284 1
a284 1
    
a288 16

/*****************************************************************************
 **
 ** xcb_randr_set_screen_config_cookie_t xcb_randr_set_screen_config_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_timestamp_t   timestamp
 ** @@param xcb_timestamp_t   config_timestamp
 ** @@param uint16_t          sizeID
 ** @@param uint16_t          rotation
 ** @@param uint16_t          rate
 ** @@returns xcb_randr_set_screen_config_cookie_t
 **
 *****************************************************************************/
 
d304 1
a304 1
    
d308 1
a308 1
    
d316 1
a316 1
    
d321 1
a321 1
    
a325 12

/*****************************************************************************
 **
 ** xcb_randr_set_screen_config_reply_t * xcb_randr_set_screen_config_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_randr_set_screen_config_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_randr_set_screen_config_reply_t *
 **
 *****************************************************************************/
 
a333 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_select_input_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint16_t          enable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d345 1
a345 1
    
d349 1
a349 1
    
d353 1
a353 1
    
d358 1
a358 1
    
a362 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_select_input
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint16_t          enable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d374 1
a374 1
    
d378 1
a378 1
    
d382 1
a382 1
    
d387 1
a387 1
    
a439 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_info_cookie_t xcb_randr_get_screen_info
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_info_cookie_t
 **
 *****************************************************************************/
 
d450 1
a450 1
    
d454 1
a454 1
    
d456 1
a456 1
    
d461 1
a461 1
    
a465 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_info_cookie_t xcb_randr_get_screen_info_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_info_cookie_t
 **
 *****************************************************************************/
 
d476 1
a476 1
    
d480 1
a480 1
    
d482 1
a482 1
    
d487 1
a487 1
    
a491 10

/*****************************************************************************
 **
 ** xcb_randr_screen_size_t * xcb_randr_get_screen_info_sizes
 ** 
 ** @@param const xcb_randr_get_screen_info_reply_t *R
 ** @@returns xcb_randr_screen_size_t *
 **
 *****************************************************************************/
 
a497 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_info_sizes_length
 ** 
 ** @@param const xcb_randr_get_screen_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a503 10

/*****************************************************************************
 **
 ** xcb_randr_screen_size_iterator_t xcb_randr_get_screen_info_sizes_iterator
 ** 
 ** @@param const xcb_randr_get_screen_info_reply_t *R
 ** @@returns xcb_randr_screen_size_iterator_t
 **
 *****************************************************************************/
 
a513 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_info_rates_length
 ** 
 ** @@param const xcb_randr_get_screen_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a519 10

/*****************************************************************************
 **
 ** xcb_randr_refresh_rates_iterator_t xcb_randr_get_screen_info_rates_iterator
 ** 
 ** @@param const xcb_randr_get_screen_info_reply_t *R
 ** @@returns xcb_randr_refresh_rates_iterator_t
 **
 *****************************************************************************/
 
a530 12

/*****************************************************************************
 **
 ** xcb_randr_get_screen_info_reply_t * xcb_randr_get_screen_info_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_randr_get_screen_info_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_randr_get_screen_info_reply_t *
 **
 *****************************************************************************/
 
a538 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_size_range_cookie_t xcb_randr_get_screen_size_range
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_size_range_cookie_t
 **
 *****************************************************************************/
 
d549 1
a549 1
    
d553 1
a553 1
    
d555 1
a555 1
    
d560 1
a560 1
    
a564 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_size_range_cookie_t xcb_randr_get_screen_size_range_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_size_range_cookie_t
 **
 *****************************************************************************/
 
d575 1
a575 1
    
d579 1
a579 1
    
d581 1
a581 1
    
d586 1
a586 1
    
a590 12

/*****************************************************************************
 **
 ** xcb_randr_get_screen_size_range_reply_t * xcb_randr_get_screen_size_range_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_randr_get_screen_size_range_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_randr_get_screen_size_range_reply_t *
 **
 *****************************************************************************/
 
a598 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_screen_size_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint32_t          mm_width
 ** @@param uint32_t          mm_height
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d613 1
a613 1
    
d617 1
a617 1
    
d623 1
a623 1
    
d628 1
a628 1
    
a632 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_screen_size
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint32_t          mm_width
 ** @@param uint32_t          mm_height
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d647 1
a647 1
    
d651 1
a651 1
    
d657 1
a657 1
    
d662 1
a662 1
    
a666 10

/*****************************************************************************
 **
 ** void xcb_randr_mode_info_next
 ** 
 ** @@param xcb_randr_mode_info_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a674 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_mode_info_end
 ** 
 ** @@param xcb_randr_mode_info_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a751 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_resources_cookie_t xcb_randr_get_screen_resources
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_resources_cookie_t
 **
 *****************************************************************************/
 
d762 1
a762 1
    
d766 1
a766 1
    
d768 1
a768 1
    
d773 1
a773 1
    
a777 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_resources_cookie_t xcb_randr_get_screen_resources_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_resources_cookie_t
 **
 *****************************************************************************/
 
d788 1
a788 1
    
d792 1
a792 1
    
d794 1
a794 1
    
d799 1
a799 1
    
a803 10

/*****************************************************************************
 **
 ** xcb_randr_crtc_t * xcb_randr_get_screen_resources_crtcs
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns xcb_randr_crtc_t *
 **
 *****************************************************************************/
 
a809 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_crtcs_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a815 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_screen_resources_crtcs_end
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a825 10

/*****************************************************************************
 **
 ** xcb_randr_output_t * xcb_randr_get_screen_resources_outputs
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns xcb_randr_output_t *
 **
 *****************************************************************************/
 
a832 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_outputs_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a838 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_screen_resources_outputs_end
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a849 10

/*****************************************************************************
 **
 ** xcb_randr_mode_info_t * xcb_randr_get_screen_resources_modes
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns xcb_randr_mode_info_t *
 **
 *****************************************************************************/
 
a856 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_modes_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a862 10

/*****************************************************************************
 **
 ** xcb_randr_mode_info_iterator_t xcb_randr_get_screen_resources_modes_iterator
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns xcb_randr_mode_info_iterator_t
 **
 *****************************************************************************/
 
a873 10

/*****************************************************************************
 **
 ** uint8_t * xcb_randr_get_screen_resources_names
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a880 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_names_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a886 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_screen_resources_names_end
 ** 
 ** @@param const xcb_randr_get_screen_resources_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a897 12

/*****************************************************************************
 **
 ** xcb_randr_get_screen_resources_reply_t * xcb_randr_get_screen_resources_reply
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_randr_get_screen_resources_cookie_t   cookie
 ** @@param xcb_generic_error_t                     **e
 ** @@returns xcb_randr_get_screen_resources_reply_t *
 **
 *****************************************************************************/
 
a972 12

/*****************************************************************************
 **
 ** xcb_randr_get_output_info_cookie_t xcb_randr_get_output_info
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_timestamp_t     config_timestamp
 ** @@returns xcb_randr_get_output_info_cookie_t
 **
 *****************************************************************************/
 
d984 1
a984 1
    
d988 1
a988 1
    
d991 1
a991 1
    
d996 1
a996 1
    
a1000 12

/*****************************************************************************
 **
 ** xcb_randr_get_output_info_cookie_t xcb_randr_get_output_info_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_timestamp_t     config_timestamp
 ** @@returns xcb_randr_get_output_info_cookie_t
 **
 *****************************************************************************/
 
d1012 1
a1012 1
    
d1016 1
a1016 1
    
d1019 1
a1019 1
    
d1024 1
a1024 1
    
a1028 10

/*****************************************************************************
 **
 ** xcb_randr_crtc_t * xcb_randr_get_output_info_crtcs
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns xcb_randr_crtc_t *
 **
 *****************************************************************************/
 
a1034 10

/*****************************************************************************
 **
 ** int xcb_randr_get_output_info_crtcs_length
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1040 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_output_info_crtcs_end
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1050 10

/*****************************************************************************
 **
 ** xcb_randr_mode_t * xcb_randr_get_output_info_modes
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns xcb_randr_mode_t *
 **
 *****************************************************************************/
 
a1057 10

/*****************************************************************************
 **
 ** int xcb_randr_get_output_info_modes_length
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1063 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_output_info_modes_end
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1074 10

/*****************************************************************************
 **
 ** xcb_randr_output_t * xcb_randr_get_output_info_clones
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns xcb_randr_output_t *
 **
 *****************************************************************************/
 
a1081 10

/*****************************************************************************
 **
 ** int xcb_randr_get_output_info_clones_length
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1087 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_output_info_clones_end
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1098 10

/*****************************************************************************
 **
 ** uint8_t * xcb_randr_get_output_info_name
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a1105 10

/*****************************************************************************
 **
 ** int xcb_randr_get_output_info_name_length
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1111 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_output_info_name_end
 ** 
 ** @@param const xcb_randr_get_output_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1122 12

/*****************************************************************************
 **
 ** xcb_randr_get_output_info_reply_t * xcb_randr_get_output_info_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_randr_get_output_info_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_randr_get_output_info_reply_t *
 **
 *****************************************************************************/
 
a1161 11

/*****************************************************************************
 **
 ** xcb_randr_list_output_properties_cookie_t xcb_randr_list_output_properties
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@returns xcb_randr_list_output_properties_cookie_t
 **
 *****************************************************************************/
 
d1172 1
a1172 1
    
d1176 1
a1176 1
    
d1178 1
a1178 1
    
d1183 1
a1183 1
    
a1187 11

/*****************************************************************************
 **
 ** xcb_randr_list_output_properties_cookie_t xcb_randr_list_output_properties_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@returns xcb_randr_list_output_properties_cookie_t
 **
 *****************************************************************************/
 
d1198 1
a1198 1
    
d1202 1
a1202 1
    
d1204 1
a1204 1
    
d1209 1
a1209 1
    
a1213 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_randr_list_output_properties_atoms
 ** 
 ** @@param const xcb_randr_list_output_properties_reply_t *R
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a1219 10

/*****************************************************************************
 **
 ** int xcb_randr_list_output_properties_atoms_length
 ** 
 ** @@param const xcb_randr_list_output_properties_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1225 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_list_output_properties_atoms_end
 ** 
 ** @@param const xcb_randr_list_output_properties_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1235 12

/*****************************************************************************
 **
 ** xcb_randr_list_output_properties_reply_t * xcb_randr_list_output_properties_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_randr_list_output_properties_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_randr_list_output_properties_reply_t *
 **
 *****************************************************************************/
 
a1274 12

/*****************************************************************************
 **
 ** xcb_randr_query_output_property_cookie_t xcb_randr_query_output_property
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@returns xcb_randr_query_output_property_cookie_t
 **
 *****************************************************************************/
 
d1286 1
a1286 1
    
d1290 1
a1290 1
    
d1293 1
a1293 1
    
d1298 1
a1298 1
    
a1302 12

/*****************************************************************************
 **
 ** xcb_randr_query_output_property_cookie_t xcb_randr_query_output_property_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@returns xcb_randr_query_output_property_cookie_t
 **
 *****************************************************************************/
 
d1314 1
a1314 1
    
d1318 1
a1318 1
    
d1321 1
a1321 1
    
d1326 1
a1326 1
    
a1330 10

/*****************************************************************************
 **
 ** int32_t * xcb_randr_query_output_property_valid_values
 ** 
 ** @@param const xcb_randr_query_output_property_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a1336 10

/*****************************************************************************
 **
 ** int xcb_randr_query_output_property_valid_values_length
 ** 
 ** @@param const xcb_randr_query_output_property_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1342 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_query_output_property_valid_values_end
 ** 
 ** @@param const xcb_randr_query_output_property_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1352 12

/*****************************************************************************
 **
 ** xcb_randr_query_output_property_reply_t * xcb_randr_query_output_property_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_randr_query_output_property_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_randr_query_output_property_reply_t *
 **
 *****************************************************************************/
 
a1391 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_configure_output_property_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@param uint8_t             pending
 ** @@param uint8_t             range
 ** @@param uint32_t            values_len
 ** @@param const int32_t      *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1407 1
a1407 1
    
d1411 1
a1411 1
    
d1417 1
a1417 1
    
d1427 1
a1427 1
    
a1431 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_configure_output_property
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@param uint8_t             pending
 ** @@param uint8_t             range
 ** @@param uint32_t            values_len
 ** @@param const int32_t      *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1447 1
a1447 1
    
d1451 1
a1451 1
    
d1457 1
a1457 1
    
d1467 1
a1467 1
    
a1502 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_change_output_property_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@param xcb_atom_t          type
 ** @@param uint8_t             format
 ** @@param uint8_t             mode
 ** @@param uint32_t            num_units
 ** @@param const void         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1519 1
a1519 1
    
d1523 1
a1523 1
    
d1531 1
a1531 1
    
d1541 1
a1541 1
    
a1545 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_change_output_property
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@param xcb_atom_t          type
 ** @@param uint8_t             format
 ** @@param uint8_t             mode
 ** @@param uint32_t            num_units
 ** @@param const void         *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1562 1
a1562 1
    
d1566 1
a1566 1
    
d1574 1
a1574 1
    
d1584 1
a1584 1
    
a1588 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_delete_output_property_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1600 1
a1600 1
    
d1604 1
a1604 1
    
d1607 1
a1607 1
    
d1612 1
a1612 1
    
a1616 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_delete_output_property
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1628 1
a1628 1
    
d1632 1
a1632 1
    
d1635 1
a1635 1
    
d1640 1
a1640 1
    
a1675 17

/*****************************************************************************
 **
 ** xcb_randr_get_output_property_cookie_t xcb_randr_get_output_property
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@param xcb_atom_t          type
 ** @@param uint32_t            long_offset
 ** @@param uint32_t            long_length
 ** @@param uint8_t             _delete
 ** @@param uint8_t             pending
 ** @@returns xcb_randr_get_output_property_cookie_t
 **
 *****************************************************************************/
 
d1692 1
a1692 1
    
d1696 1
a1696 1
    
d1705 1
a1705 1
    
d1710 1
a1710 1
    
a1714 17

/*****************************************************************************
 **
 ** xcb_randr_get_output_property_cookie_t xcb_randr_get_output_property_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_atom_t          property
 ** @@param xcb_atom_t          type
 ** @@param uint32_t            long_offset
 ** @@param uint32_t            long_length
 ** @@param uint8_t             _delete
 ** @@param uint8_t             pending
 ** @@returns xcb_randr_get_output_property_cookie_t
 **
 *****************************************************************************/
 
d1731 1
a1731 1
    
d1735 1
a1735 1
    
d1744 1
a1744 1
    
d1749 1
a1749 1
    
a1753 10

/*****************************************************************************
 **
 ** uint8_t * xcb_randr_get_output_property_data
 ** 
 ** @@param const xcb_randr_get_output_property_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a1759 10

/*****************************************************************************
 **
 ** int xcb_randr_get_output_property_data_length
 ** 
 ** @@param const xcb_randr_get_output_property_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1765 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_output_property_data_end
 ** 
 ** @@param const xcb_randr_get_output_property_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1775 12

/*****************************************************************************
 **
 ** xcb_randr_get_output_property_reply_t * xcb_randr_get_output_property_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_randr_get_output_property_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_randr_get_output_property_reply_t *
 **
 *****************************************************************************/
 
a1814 14

/*****************************************************************************
 **
 ** xcb_randr_create_mode_cookie_t xcb_randr_create_mode
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_randr_mode_info_t  mode_info
 ** @@param uint32_t               name_len
 ** @@param const char            *name
 ** @@returns xcb_randr_create_mode_cookie_t
 **
 *****************************************************************************/
 
d1828 1
a1828 1
    
d1832 1
a1832 1
    
d1835 1
a1835 1
    
d1845 1
a1845 1
    
a1849 14

/*****************************************************************************
 **
 ** xcb_randr_create_mode_cookie_t xcb_randr_create_mode_unchecked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_window_t           window
 ** @@param xcb_randr_mode_info_t  mode_info
 ** @@param uint32_t               name_len
 ** @@param const char            *name
 ** @@returns xcb_randr_create_mode_cookie_t
 **
 *****************************************************************************/
 
d1863 1
a1863 1
    
d1867 1
a1867 1
    
d1870 1
a1870 1
    
d1880 1
a1880 1
    
a1884 12

/*****************************************************************************
 **
 ** xcb_randr_create_mode_reply_t * xcb_randr_create_mode_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_randr_create_mode_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_randr_create_mode_reply_t *
 **
 *****************************************************************************/
 
a1892 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_destroy_mode_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_mode_t  mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1903 1
a1903 1
    
d1907 1
a1907 1
    
d1909 1
a1909 1
    
d1914 1
a1914 1
    
a1918 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_destroy_mode
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_mode_t  mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1929 1
a1929 1
    
d1933 1
a1933 1
    
d1935 1
a1935 1
    
d1940 1
a1940 1
    
a1944 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_add_output_mode_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_randr_mode_t    mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1956 1
a1956 1
    
d1960 1
a1960 1
    
d1963 1
a1963 1
    
d1968 1
a1968 1
    
a1972 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_add_output_mode
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_randr_mode_t    mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1984 1
a1984 1
    
d1988 1
a1988 1
    
d1991 1
a1991 1
    
d1996 1
a1996 1
    
a2000 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_delete_output_mode_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_randr_mode_t    mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2012 1
a2012 1
    
d2016 1
a2016 1
    
d2019 1
a2019 1
    
d2024 1
a2024 1
    
a2028 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_delete_output_mode
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_randr_output_t  output
 ** @@param xcb_randr_mode_t    mode
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2040 1
a2040 1
    
d2044 1
a2044 1
    
d2047 1
a2047 1
    
d2052 1
a2052 1
    
a2099 12

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_info_cookie_t xcb_randr_get_crtc_info
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@param xcb_timestamp_t   config_timestamp
 ** @@returns xcb_randr_get_crtc_info_cookie_t
 **
 *****************************************************************************/
 
d2111 1
a2111 1
    
d2115 1
a2115 1
    
d2118 1
a2118 1
    
d2123 1
a2123 1
    
a2127 12

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_info_cookie_t xcb_randr_get_crtc_info_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@param xcb_timestamp_t   config_timestamp
 ** @@returns xcb_randr_get_crtc_info_cookie_t
 **
 *****************************************************************************/
 
d2139 1
a2139 1
    
d2143 1
a2143 1
    
d2146 1
a2146 1
    
d2151 1
a2151 1
    
a2155 10

/*****************************************************************************
 **
 ** xcb_randr_output_t * xcb_randr_get_crtc_info_outputs
 ** 
 ** @@param const xcb_randr_get_crtc_info_reply_t *R
 ** @@returns xcb_randr_output_t *
 **
 *****************************************************************************/
 
a2161 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_info_outputs_length
 ** 
 ** @@param const xcb_randr_get_crtc_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2167 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_info_outputs_end
 ** 
 ** @@param const xcb_randr_get_crtc_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2177 10

/*****************************************************************************
 **
 ** xcb_randr_output_t * xcb_randr_get_crtc_info_possible
 ** 
 ** @@param const xcb_randr_get_crtc_info_reply_t *R
 ** @@returns xcb_randr_output_t *
 **
 *****************************************************************************/
 
a2184 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_info_possible_length
 ** 
 ** @@param const xcb_randr_get_crtc_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2190 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_info_possible_end
 ** 
 ** @@param const xcb_randr_get_crtc_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2201 12

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_info_reply_t * xcb_randr_get_crtc_info_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_randr_get_crtc_info_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_randr_get_crtc_info_reply_t *
 **
 *****************************************************************************/
 
a2240 19

/*****************************************************************************
 **
 ** xcb_randr_set_crtc_config_cookie_t xcb_randr_set_crtc_config
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_randr_crtc_t          crtc
 ** @@param xcb_timestamp_t           timestamp
 ** @@param xcb_timestamp_t           config_timestamp
 ** @@param int16_t                   x
 ** @@param int16_t                   y
 ** @@param xcb_randr_mode_t          mode
 ** @@param uint16_t                  rotation
 ** @@param uint32_t                  outputs_len
 ** @@param const xcb_randr_output_t *outputs
 ** @@returns xcb_randr_set_crtc_config_cookie_t
 **
 *****************************************************************************/
 
d2259 1
a2259 1
    
d2263 1
a2263 1
    
d2272 1
a2272 1
    
d2282 1
a2282 1
    
a2286 19

/*****************************************************************************
 **
 ** xcb_randr_set_crtc_config_cookie_t xcb_randr_set_crtc_config_unchecked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_randr_crtc_t          crtc
 ** @@param xcb_timestamp_t           timestamp
 ** @@param xcb_timestamp_t           config_timestamp
 ** @@param int16_t                   x
 ** @@param int16_t                   y
 ** @@param xcb_randr_mode_t          mode
 ** @@param uint16_t                  rotation
 ** @@param uint32_t                  outputs_len
 ** @@param const xcb_randr_output_t *outputs
 ** @@returns xcb_randr_set_crtc_config_cookie_t
 **
 *****************************************************************************/
 
d2305 1
a2305 1
    
d2309 1
a2309 1
    
d2318 1
a2318 1
    
d2328 1
a2328 1
    
a2332 12

/*****************************************************************************
 **
 ** xcb_randr_set_crtc_config_reply_t * xcb_randr_set_crtc_config_reply
 ** 
 ** @@param xcb_connection_t                    *c
 ** @@param xcb_randr_set_crtc_config_cookie_t   cookie
 ** @@param xcb_generic_error_t                **e
 ** @@returns xcb_randr_set_crtc_config_reply_t *
 **
 *****************************************************************************/
 
a2340 11

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_gamma_size_cookie_t xcb_randr_get_crtc_gamma_size
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_crtc_gamma_size_cookie_t
 **
 *****************************************************************************/
 
d2351 1
a2351 1
    
d2355 1
a2355 1
    
d2357 1
a2357 1
    
d2362 1
a2362 1
    
a2366 11

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_gamma_size_cookie_t xcb_randr_get_crtc_gamma_size_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_crtc_gamma_size_cookie_t
 **
 *****************************************************************************/
 
d2377 1
a2377 1
    
d2381 1
a2381 1
    
d2383 1
a2383 1
    
d2388 1
a2388 1
    
a2392 12

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_gamma_size_reply_t * xcb_randr_get_crtc_gamma_size_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_randr_get_crtc_gamma_size_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_randr_get_crtc_gamma_size_reply_t *
 **
 *****************************************************************************/
 
a2455 11

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_gamma_cookie_t xcb_randr_get_crtc_gamma
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_crtc_gamma_cookie_t
 **
 *****************************************************************************/
 
d2466 1
a2466 1
    
d2470 1
a2470 1
    
d2472 1
a2472 1
    
d2477 1
a2477 1
    
a2481 11

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_gamma_cookie_t xcb_randr_get_crtc_gamma_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_crtc_gamma_cookie_t
 **
 *****************************************************************************/
 
d2492 1
a2492 1
    
d2496 1
a2496 1
    
d2498 1
a2498 1
    
d2503 1
a2503 1
    
a2507 10

/*****************************************************************************
 **
 ** uint16_t * xcb_randr_get_crtc_gamma_red
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a2513 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_gamma_red_length
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2519 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_gamma_red_end
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2529 10

/*****************************************************************************
 **
 ** uint16_t * xcb_randr_get_crtc_gamma_green
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a2536 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_gamma_green_length
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2542 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_gamma_green_end
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2553 10

/*****************************************************************************
 **
 ** uint16_t * xcb_randr_get_crtc_gamma_blue
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns uint16_t *
 **
 *****************************************************************************/
 
a2560 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_gamma_blue_length
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2566 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_gamma_blue_end
 ** 
 ** @@param const xcb_randr_get_crtc_gamma_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2577 12

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_gamma_reply_t * xcb_randr_get_crtc_gamma_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_randr_get_crtc_gamma_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_randr_get_crtc_gamma_reply_t *
 **
 *****************************************************************************/
 
a2640 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_crtc_gamma_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@param uint16_t          size
 ** @@param const uint16_t   *red
 ** @@param const uint16_t   *green
 ** @@param const uint16_t   *blue
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2655 1
a2655 1
    
d2659 1
a2659 1
    
d2663 1
a2663 1
    
d2683 1
a2683 1
    
a2687 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_crtc_gamma
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@param uint16_t          size
 ** @@param const uint16_t   *red
 ** @@param const uint16_t   *green
 ** @@param const uint16_t   *blue
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2702 1
a2702 1
    
d2706 1
a2706 1
    
d2710 1
a2710 1
    
d2730 1
a2730 1
    
a2801 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_resources_current_cookie_t xcb_randr_get_screen_resources_current
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_resources_current_cookie_t
 **
 *****************************************************************************/
 
d2812 1
a2812 1
    
d2816 1
a2816 1
    
d2818 1
a2818 1
    
d2823 1
a2823 1
    
a2827 11

/*****************************************************************************
 **
 ** xcb_randr_get_screen_resources_current_cookie_t xcb_randr_get_screen_resources_current_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_screen_resources_current_cookie_t
 **
 *****************************************************************************/
 
d2838 1
a2838 1
    
d2842 1
a2842 1
    
d2844 1
a2844 1
    
d2849 1
a2849 1
    
a2853 10

/*****************************************************************************
 **
 ** xcb_randr_crtc_t * xcb_randr_get_screen_resources_current_crtcs
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns xcb_randr_crtc_t *
 **
 *****************************************************************************/
 
a2859 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_current_crtcs_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2865 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_screen_resources_current_crtcs_end
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2875 10

/*****************************************************************************
 **
 ** xcb_randr_output_t * xcb_randr_get_screen_resources_current_outputs
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns xcb_randr_output_t *
 **
 *****************************************************************************/
 
a2882 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_current_outputs_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2888 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_screen_resources_current_outputs_end
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2899 10

/*****************************************************************************
 **
 ** xcb_randr_mode_info_t * xcb_randr_get_screen_resources_current_modes
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns xcb_randr_mode_info_t *
 **
 *****************************************************************************/
 
a2906 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_current_modes_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2912 10

/*****************************************************************************
 **
 ** xcb_randr_mode_info_iterator_t xcb_randr_get_screen_resources_current_modes_iterator
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns xcb_randr_mode_info_iterator_t
 **
 *****************************************************************************/
 
a2923 10

/*****************************************************************************
 **
 ** uint8_t * xcb_randr_get_screen_resources_current_names
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns uint8_t *
 **
 *****************************************************************************/
 
a2930 10

/*****************************************************************************
 **
 ** int xcb_randr_get_screen_resources_current_names_length
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a2936 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_screen_resources_current_names_end
 ** 
 ** @@param const xcb_randr_get_screen_resources_current_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2947 12

/*****************************************************************************
 **
 ** xcb_randr_get_screen_resources_current_reply_t * xcb_randr_get_screen_resources_current_reply
 ** 
 ** @@param xcb_connection_t                                 *c
 ** @@param xcb_randr_get_screen_resources_current_cookie_t   cookie
 ** @@param xcb_generic_error_t                             **e
 ** @@returns xcb_randr_get_screen_resources_current_reply_t *
 **
 *****************************************************************************/
 
a2999 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_crtc_transform_checked
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_randr_crtc_t          crtc
 ** @@param xcb_render_transform_t    transform
 ** @@param uint16_t                  filter_len
 ** @@param const char               *filter_name
 ** @@param uint32_t                  filter_params_len
 ** @@param const xcb_render_fixed_t *filter_params
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3015 1
a3015 1
    
d3019 1
a3019 1
    
d3024 1
a3024 1
    
d3039 1
a3039 1
    
a3043 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_crtc_transform
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_randr_crtc_t          crtc
 ** @@param xcb_render_transform_t    transform
 ** @@param uint16_t                  filter_len
 ** @@param const char               *filter_name
 ** @@param uint32_t                  filter_params_len
 ** @@param const xcb_render_fixed_t *filter_params
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3059 1
a3059 1
    
d3063 1
a3063 1
    
d3068 1
a3068 1
    
d3083 1
a3083 1
    
a3154 11

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_transform_cookie_t xcb_randr_get_crtc_transform
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_crtc_transform_cookie_t
 **
 *****************************************************************************/
 
d3165 1
a3165 1
    
d3169 1
a3169 1
    
d3171 1
a3171 1
    
d3176 1
a3176 1
    
a3180 11

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_transform_cookie_t xcb_randr_get_crtc_transform_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_crtc_transform_cookie_t
 **
 *****************************************************************************/
 
d3191 1
a3191 1
    
d3195 1
a3195 1
    
d3197 1
a3197 1
    
d3202 1
a3202 1
    
a3206 10

/*****************************************************************************
 **
 ** char * xcb_randr_get_crtc_transform_pending_filter_name
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a3212 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_transform_pending_filter_name_length
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3218 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_transform_pending_filter_name_end
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3228 10

/*****************************************************************************
 **
 ** xcb_render_fixed_t * xcb_randr_get_crtc_transform_pending_params
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns xcb_render_fixed_t *
 **
 *****************************************************************************/
 
a3235 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_transform_pending_params_length
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3241 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_transform_pending_params_end
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3252 10

/*****************************************************************************
 **
 ** char * xcb_randr_get_crtc_transform_current_filter_name
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a3259 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_transform_current_filter_name_length
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3265 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_transform_current_filter_name_end
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3276 10

/*****************************************************************************
 **
 ** xcb_render_fixed_t * xcb_randr_get_crtc_transform_current_params
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns xcb_render_fixed_t *
 **
 *****************************************************************************/
 
a3283 10

/*****************************************************************************
 **
 ** int xcb_randr_get_crtc_transform_current_params_length
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3289 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_crtc_transform_current_params_end
 ** 
 ** @@param const xcb_randr_get_crtc_transform_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3300 12

/*****************************************************************************
 **
 ** xcb_randr_get_crtc_transform_reply_t * xcb_randr_get_crtc_transform_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_randr_get_crtc_transform_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_randr_get_crtc_transform_reply_t *
 **
 *****************************************************************************/
 
a3308 11

/*****************************************************************************
 **
 ** xcb_randr_get_panning_cookie_t xcb_randr_get_panning
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_panning_cookie_t
 **
 *****************************************************************************/
 
d3319 1
a3319 1
    
d3323 1
a3323 1
    
d3325 1
a3325 1
    
d3330 1
a3330 1
    
a3334 11

/*****************************************************************************
 **
 ** xcb_randr_get_panning_cookie_t xcb_randr_get_panning_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@returns xcb_randr_get_panning_cookie_t
 **
 *****************************************************************************/
 
d3345 1
a3345 1
    
d3349 1
a3349 1
    
d3351 1
a3351 1
    
d3356 1
a3356 1
    
a3360 12

/*****************************************************************************
 **
 ** xcb_randr_get_panning_reply_t * xcb_randr_get_panning_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_randr_get_panning_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_randr_get_panning_reply_t *
 **
 *****************************************************************************/
 
a3368 24

/*****************************************************************************
 **
 ** xcb_randr_set_panning_cookie_t xcb_randr_set_panning
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@param xcb_timestamp_t   timestamp
 ** @@param uint16_t          left
 ** @@param uint16_t          top
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint16_t          track_left
 ** @@param uint16_t          track_top
 ** @@param uint16_t          track_width
 ** @@param uint16_t          track_height
 ** @@param int16_t           border_left
 ** @@param int16_t           border_top
 ** @@param int16_t           border_right
 ** @@param int16_t           border_bottom
 ** @@returns xcb_randr_set_panning_cookie_t
 **
 *****************************************************************************/
 
d3392 1
a3392 1
    
d3396 1
a3396 1
    
d3411 1
a3411 1
    
d3416 1
a3416 1
    
a3420 24

/*****************************************************************************
 **
 ** xcb_randr_set_panning_cookie_t xcb_randr_set_panning_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_randr_crtc_t  crtc
 ** @@param xcb_timestamp_t   timestamp
 ** @@param uint16_t          left
 ** @@param uint16_t          top
 ** @@param uint16_t          width
 ** @@param uint16_t          height
 ** @@param uint16_t          track_left
 ** @@param uint16_t          track_top
 ** @@param uint16_t          track_width
 ** @@param uint16_t          track_height
 ** @@param int16_t           border_left
 ** @@param int16_t           border_top
 ** @@param int16_t           border_right
 ** @@param int16_t           border_bottom
 ** @@returns xcb_randr_set_panning_cookie_t
 **
 *****************************************************************************/
 
d3444 1
a3444 1
    
d3448 1
a3448 1
    
d3463 1
a3463 1
    
d3468 1
a3468 1
    
a3472 12

/*****************************************************************************
 **
 ** xcb_randr_set_panning_reply_t * xcb_randr_set_panning_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_randr_set_panning_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_randr_set_panning_reply_t *
 **
 *****************************************************************************/
 
a3480 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_output_primary_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_window_t        window
 ** @@param xcb_randr_output_t  output
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3492 1
a3492 1
    
d3496 1
a3496 1
    
d3499 1
a3499 1
    
d3504 1
a3504 1
    
a3508 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_output_primary
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_window_t        window
 ** @@param xcb_randr_output_t  output
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3520 1
a3520 1
    
d3524 1
a3524 1
    
d3527 1
a3527 1
    
d3532 1
a3532 1
    
a3536 11

/*****************************************************************************
 **
 ** xcb_randr_get_output_primary_cookie_t xcb_randr_get_output_primary
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_output_primary_cookie_t
 **
 *****************************************************************************/
 
d3547 1
a3547 1
    
d3551 1
a3551 1
    
d3553 1
a3553 1
    
d3558 1
a3558 1
    
a3562 11

/*****************************************************************************
 **
 ** xcb_randr_get_output_primary_cookie_t xcb_randr_get_output_primary_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_output_primary_cookie_t
 **
 *****************************************************************************/
 
d3573 1
a3573 1
    
d3577 1
a3577 1
    
d3579 1
a3579 1
    
d3584 1
a3584 1
    
a3588 12

/*****************************************************************************
 **
 ** xcb_randr_get_output_primary_reply_t * xcb_randr_get_output_primary_reply
 ** 
 ** @@param xcb_connection_t                       *c
 ** @@param xcb_randr_get_output_primary_cookie_t   cookie
 ** @@param xcb_generic_error_t                   **e
 ** @@returns xcb_randr_get_output_primary_reply_t *
 **
 *****************************************************************************/
 
a3627 11

/*****************************************************************************
 **
 ** xcb_randr_get_providers_cookie_t xcb_randr_get_providers
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_providers_cookie_t
 **
 *****************************************************************************/
 
d3638 1
a3638 1
    
d3642 1
a3642 1
    
d3644 1
a3644 1
    
d3649 1
a3649 1
    
a3653 11

/*****************************************************************************
 **
 ** xcb_randr_get_providers_cookie_t xcb_randr_get_providers_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_randr_get_providers_cookie_t
 **
 *****************************************************************************/
 
d3664 1
a3664 1
    
d3668 1
a3668 1
    
d3670 1
a3670 1
    
d3675 1
a3675 1
    
a3679 10

/*****************************************************************************
 **
 ** xcb_randr_provider_t * xcb_randr_get_providers_providers
 ** 
 ** @@param const xcb_randr_get_providers_reply_t *R
 ** @@returns xcb_randr_provider_t *
 **
 *****************************************************************************/
 
a3685 10

/*****************************************************************************
 **
 ** int xcb_randr_get_providers_providers_length
 ** 
 ** @@param const xcb_randr_get_providers_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3691 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_providers_providers_end
 ** 
 ** @@param const xcb_randr_get_providers_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3701 12

/*****************************************************************************
 **
 ** xcb_randr_get_providers_reply_t * xcb_randr_get_providers_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_randr_get_providers_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_randr_get_providers_reply_t *
 **
 *****************************************************************************/
 
a3788 12

/*****************************************************************************
 **
 ** xcb_randr_get_provider_info_cookie_t xcb_randr_get_provider_info
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_timestamp_t       config_timestamp
 ** @@returns xcb_randr_get_provider_info_cookie_t
 **
 *****************************************************************************/
 
d3800 1
a3800 1
    
d3804 1
a3804 1
    
d3807 1
a3807 1
    
d3812 1
a3812 1
    
a3816 12

/*****************************************************************************
 **
 ** xcb_randr_get_provider_info_cookie_t xcb_randr_get_provider_info_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_timestamp_t       config_timestamp
 ** @@returns xcb_randr_get_provider_info_cookie_t
 **
 *****************************************************************************/
 
d3828 1
a3828 1
    
d3832 1
a3832 1
    
d3835 1
a3835 1
    
d3840 1
a3840 1
    
a3844 10

/*****************************************************************************
 **
 ** xcb_randr_crtc_t * xcb_randr_get_provider_info_crtcs
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_randr_crtc_t *
 **
 *****************************************************************************/
 
a3850 10

/*****************************************************************************
 **
 ** int xcb_randr_get_provider_info_crtcs_length
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3856 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_provider_info_crtcs_end
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3866 10

/*****************************************************************************
 **
 ** xcb_randr_output_t * xcb_randr_get_provider_info_outputs
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_randr_output_t *
 **
 *****************************************************************************/
 
a3873 10

/*****************************************************************************
 **
 ** int xcb_randr_get_provider_info_outputs_length
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3879 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_provider_info_outputs_end
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3890 10

/*****************************************************************************
 **
 ** xcb_randr_provider_t * xcb_randr_get_provider_info_associated_providers
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_randr_provider_t *
 **
 *****************************************************************************/
 
a3897 10

/*****************************************************************************
 **
 ** int xcb_randr_get_provider_info_associated_providers_length
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3903 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_provider_info_associated_providers_end
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3914 10

/*****************************************************************************
 **
 ** uint32_t * xcb_randr_get_provider_info_associated_capability
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a3921 10

/*****************************************************************************
 **
 ** int xcb_randr_get_provider_info_associated_capability_length
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3927 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_provider_info_associated_capability_end
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3938 10

/*****************************************************************************
 **
 ** char * xcb_randr_get_provider_info_name
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a3945 10

/*****************************************************************************
 **
 ** int xcb_randr_get_provider_info_name_length
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a3951 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_provider_info_name_end
 ** 
 ** @@param const xcb_randr_get_provider_info_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a3962 12

/*****************************************************************************
 **
 ** xcb_randr_get_provider_info_reply_t * xcb_randr_get_provider_info_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_randr_get_provider_info_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_randr_get_provider_info_reply_t *
 **
 *****************************************************************************/
 
a3970 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_provider_offload_sink_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_randr_provider_t  sink_provider
 ** @@param xcb_timestamp_t       config_timestamp
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d3983 1
a3983 1
    
d3987 1
a3987 1
    
d3991 1
a3991 1
    
d3996 1
a3996 1
    
a4000 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_provider_offload_sink
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_randr_provider_t  sink_provider
 ** @@param xcb_timestamp_t       config_timestamp
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4013 1
a4013 1
    
d4017 1
a4017 1
    
d4021 1
a4021 1
    
d4026 1
a4026 1
    
a4030 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_provider_output_source_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_randr_provider_t  source_provider
 ** @@param xcb_timestamp_t       config_timestamp
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4043 1
a4043 1
    
d4047 1
a4047 1
    
d4051 1
a4051 1
    
d4056 1
a4056 1
    
a4060 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_set_provider_output_source
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_randr_provider_t  source_provider
 ** @@param xcb_timestamp_t       config_timestamp
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4073 1
a4073 1
    
d4077 1
a4077 1
    
d4081 1
a4081 1
    
d4086 1
a4086 1
    
a4121 11

/*****************************************************************************
 **
 ** xcb_randr_list_provider_properties_cookie_t xcb_randr_list_provider_properties
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@returns xcb_randr_list_provider_properties_cookie_t
 **
 *****************************************************************************/
 
d4132 1
a4132 1
    
d4136 1
a4136 1
    
d4138 1
a4138 1
    
d4143 1
a4143 1
    
a4147 11

/*****************************************************************************
 **
 ** xcb_randr_list_provider_properties_cookie_t xcb_randr_list_provider_properties_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@returns xcb_randr_list_provider_properties_cookie_t
 **
 *****************************************************************************/
 
d4158 1
a4158 1
    
d4162 1
a4162 1
    
d4164 1
a4164 1
    
d4169 1
a4169 1
    
a4173 10

/*****************************************************************************
 **
 ** xcb_atom_t * xcb_randr_list_provider_properties_atoms
 ** 
 ** @@param const xcb_randr_list_provider_properties_reply_t *R
 ** @@returns xcb_atom_t *
 **
 *****************************************************************************/
 
a4179 10

/*****************************************************************************
 **
 ** int xcb_randr_list_provider_properties_atoms_length
 ** 
 ** @@param const xcb_randr_list_provider_properties_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4185 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_list_provider_properties_atoms_end
 ** 
 ** @@param const xcb_randr_list_provider_properties_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4195 12

/*****************************************************************************
 **
 ** xcb_randr_list_provider_properties_reply_t * xcb_randr_list_provider_properties_reply
 ** 
 ** @@param xcb_connection_t                             *c
 ** @@param xcb_randr_list_provider_properties_cookie_t   cookie
 ** @@param xcb_generic_error_t                         **e
 ** @@returns xcb_randr_list_provider_properties_reply_t *
 **
 *****************************************************************************/
 
a4234 12

/*****************************************************************************
 **
 ** xcb_randr_query_provider_property_cookie_t xcb_randr_query_provider_property
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@returns xcb_randr_query_provider_property_cookie_t
 **
 *****************************************************************************/
 
d4246 1
a4246 1
    
d4250 1
a4250 1
    
d4253 1
a4253 1
    
d4258 1
a4258 1
    
a4262 12

/*****************************************************************************
 **
 ** xcb_randr_query_provider_property_cookie_t xcb_randr_query_provider_property_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@returns xcb_randr_query_provider_property_cookie_t
 **
 *****************************************************************************/
 
d4274 1
a4274 1
    
d4278 1
a4278 1
    
d4281 1
a4281 1
    
d4286 1
a4286 1
    
a4290 10

/*****************************************************************************
 **
 ** int32_t * xcb_randr_query_provider_property_valid_values
 ** 
 ** @@param const xcb_randr_query_provider_property_reply_t *R
 ** @@returns int32_t *
 **
 *****************************************************************************/
 
a4296 10

/*****************************************************************************
 **
 ** int xcb_randr_query_provider_property_valid_values_length
 ** 
 ** @@param const xcb_randr_query_provider_property_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4302 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_query_provider_property_valid_values_end
 ** 
 ** @@param const xcb_randr_query_provider_property_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4312 12

/*****************************************************************************
 **
 ** xcb_randr_query_provider_property_reply_t * xcb_randr_query_provider_property_reply
 ** 
 ** @@param xcb_connection_t                            *c
 ** @@param xcb_randr_query_provider_property_cookie_t   cookie
 ** @@param xcb_generic_error_t                        **e
 ** @@returns xcb_randr_query_provider_property_reply_t *
 **
 *****************************************************************************/
 
a4351 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_configure_provider_property_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@param uint8_t               pending
 ** @@param uint8_t               range
 ** @@param uint32_t              values_len
 ** @@param const int32_t        *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4367 1
a4367 1
    
d4371 1
a4371 1
    
d4377 1
a4377 1
    
d4387 1
a4387 1
    
a4391 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_configure_provider_property
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@param uint8_t               pending
 ** @@param uint8_t               range
 ** @@param uint32_t              values_len
 ** @@param const int32_t        *values
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4407 1
a4407 1
    
d4411 1
a4411 1
    
d4417 1
a4417 1
    
d4427 1
a4427 1
    
a4462 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_change_provider_property_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@param xcb_atom_t            type
 ** @@param uint8_t               format
 ** @@param uint8_t               mode
 ** @@param uint32_t              num_items
 ** @@param const void           *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4479 1
a4479 1
    
d4483 1
a4483 1
    
d4491 1
a4491 1
    
d4501 1
a4501 1
    
a4505 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_change_provider_property
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@param xcb_atom_t            type
 ** @@param uint8_t               format
 ** @@param uint8_t               mode
 ** @@param uint32_t              num_items
 ** @@param const void           *data
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4522 1
a4522 1
    
d4526 1
a4526 1
    
d4534 1
a4534 1
    
d4544 1
a4544 1
    
a4548 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_delete_provider_property_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4560 1
a4560 1
    
d4564 1
a4564 1
    
d4567 1
a4567 1
    
d4572 1
a4572 1
    
a4576 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_randr_delete_provider_property
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d4588 1
a4588 1
    
d4592 1
a4592 1
    
d4595 1
a4595 1
    
d4600 1
a4600 1
    
a4635 17

/*****************************************************************************
 **
 ** xcb_randr_get_provider_property_cookie_t xcb_randr_get_provider_property
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@param xcb_atom_t            type
 ** @@param uint32_t              long_offset
 ** @@param uint32_t              long_length
 ** @@param uint8_t               _delete
 ** @@param uint8_t               pending
 ** @@returns xcb_randr_get_provider_property_cookie_t
 **
 *****************************************************************************/
 
d4652 1
a4652 1
    
d4656 1
a4656 1
    
d4665 1
a4665 1
    
d4670 1
a4670 1
    
a4674 17

/*****************************************************************************
 **
 ** xcb_randr_get_provider_property_cookie_t xcb_randr_get_provider_property_unchecked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_randr_provider_t  provider
 ** @@param xcb_atom_t            property
 ** @@param xcb_atom_t            type
 ** @@param uint32_t              long_offset
 ** @@param uint32_t              long_length
 ** @@param uint8_t               _delete
 ** @@param uint8_t               pending
 ** @@returns xcb_randr_get_provider_property_cookie_t
 **
 *****************************************************************************/
 
d4691 1
a4691 1
    
d4695 1
a4695 1
    
d4704 1
a4704 1
    
d4709 1
a4709 1
    
a4713 10

/*****************************************************************************
 **
 ** void * xcb_randr_get_provider_property_data
 ** 
 ** @@param const xcb_randr_get_provider_property_reply_t *R
 ** @@returns void *
 **
 *****************************************************************************/
 
a4719 10

/*****************************************************************************
 **
 ** int xcb_randr_get_provider_property_data_length
 ** 
 ** @@param const xcb_randr_get_provider_property_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a4725 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_get_provider_property_data_end
 ** 
 ** @@param const xcb_randr_get_provider_property_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4735 12

/*****************************************************************************
 **
 ** xcb_randr_get_provider_property_reply_t * xcb_randr_get_provider_property_reply
 ** 
 ** @@param xcb_connection_t                          *c
 ** @@param xcb_randr_get_provider_property_cookie_t   cookie
 ** @@param xcb_generic_error_t                      **e
 ** @@returns xcb_randr_get_provider_property_reply_t *
 **
 *****************************************************************************/
 
a4743 10

/*****************************************************************************
 **
 ** void xcb_randr_crtc_change_next
 ** 
 ** @@param xcb_randr_crtc_change_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4751 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_crtc_change_end
 ** 
 ** @@param xcb_randr_crtc_change_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4761 10

/*****************************************************************************
 **
 ** void xcb_randr_output_change_next
 ** 
 ** @@param xcb_randr_output_change_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4769 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_output_change_end
 ** 
 ** @@param xcb_randr_output_change_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4779 10

/*****************************************************************************
 **
 ** void xcb_randr_output_property_next
 ** 
 ** @@param xcb_randr_output_property_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4787 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_output_property_end
 ** 
 ** @@param xcb_randr_output_property_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4797 10

/*****************************************************************************
 **
 ** void xcb_randr_provider_change_next
 ** 
 ** @@param xcb_randr_provider_change_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4805 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_provider_change_end
 ** 
 ** @@param xcb_randr_provider_change_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4815 10

/*****************************************************************************
 **
 ** void xcb_randr_provider_property_next
 ** 
 ** @@param xcb_randr_provider_property_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4823 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_provider_property_end
 ** 
 ** @@param xcb_randr_provider_property_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4833 10

/*****************************************************************************
 **
 ** void xcb_randr_resource_change_next
 ** 
 ** @@param xcb_randr_resource_change_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4841 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_resource_change_end
 ** 
 ** @@param xcb_randr_resource_change_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a4851 10

/*****************************************************************************
 **
 ** void xcb_randr_notify_data_next
 ** 
 ** @@param xcb_randr_notify_data_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a4859 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_randr_notify_data_end
 ** 
 ** @@param xcb_randr_notify_data_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
@


1.3
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d139 38
d220 1
a220 1
    unsigned int xcb_align_to;
d225 2
d654 1
a654 1
    unsigned int xcb_align_to;
d661 2
d1115 1
a1115 1
    unsigned int xcb_align_to;
d1120 2
d1490 1
a1490 1
    unsigned int xcb_align_to;
d1495 2
d1871 1
a1871 1
    unsigned int xcb_align_to;
d1876 2
d2048 1
a2048 1
    unsigned int xcb_align_to;
d2053 2
d2231 1
a2231 1
    unsigned int xcb_align_to;
d2236 2
d2374 1
a2374 1
    unsigned int xcb_align_to;
d2379 2
d2605 1
a2605 1
    unsigned int xcb_align_to;
d2610 2
d2820 1
a2820 1
    unsigned int xcb_align_to;
d2825 2
d3203 1
a3203 1
    unsigned int xcb_align_to;
d3208 2
d3452 1
a3452 1
    unsigned int xcb_align_to;
d3457 2
d3727 1
a3727 1
    unsigned int xcb_align_to;
d3732 2
d4036 1
a4036 1
    unsigned int xcb_align_to;
d4041 2
d4215 1
a4215 1
    unsigned int xcb_align_to;
d4220 2
d4591 1
a4591 1
    unsigned int xcb_align_to;
d4596 2
d4754 1
a4754 1
    unsigned int xcb_align_to;
d4759 2
d5561 68
d5632 1
a5632 1
 ** void xcb_randr_crtc_change_next
d5634 3
a5636 2
 ** @@param xcb_randr_crtc_change_iterator_t *i
 ** @@returns void
d5640 3
a5642 2
void
xcb_randr_crtc_change_next (xcb_randr_crtc_change_iterator_t *i  /**< */)
d5644 20
a5663 3
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_crtc_change_t);
d5669 1
a5669 1
 ** xcb_generic_iterator_t xcb_randr_crtc_change_end
d5671 2
a5672 2
 ** @@param xcb_randr_crtc_change_iterator_t i
 ** @@returns xcb_generic_iterator_t
d5676 2
a5677 2
xcb_generic_iterator_t
xcb_randr_crtc_change_end (xcb_randr_crtc_change_iterator_t i  /**< */)
d5679 1
a5679 5
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
d5685 1
a5685 1
 ** void xcb_randr_output_change_next
d5687 2
a5688 2
 ** @@param xcb_randr_output_change_iterator_t *i
 ** @@returns void
d5692 2
a5693 2
void
xcb_randr_output_change_next (xcb_randr_output_change_iterator_t *i  /**< */)
d5695 1
a5695 3
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_output_change_t);
d5701 1
a5701 1
 ** xcb_generic_iterator_t xcb_randr_output_change_end
d5703 1
a5703 1
 ** @@param xcb_randr_output_change_iterator_t i
d5709 1
a5709 1
xcb_randr_output_change_end (xcb_randr_output_change_iterator_t i  /**< */)
d5711 5
a5715 5
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
d5721 1
a5721 1
 ** void xcb_randr_output_property_next
d5723 4
a5726 2
 ** @@param xcb_randr_output_property_iterator_t *i
 ** @@returns void
d5730 10
a5739 2
void
xcb_randr_output_property_next (xcb_randr_output_property_iterator_t *i  /**< */)
d5741 74
a5814 3
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_randr_output_property_t);
d5820 1
a5820 1
 ** xcb_generic_iterator_t xcb_randr_output_property_end
d5822 1585
a7406 2
 ** @@param xcb_randr_output_property_iterator_t i
 ** @@returns xcb_generic_iterator_t
d7412 114
@


1.2
log
@regen for xcb-proto 1.5
@
text
@d6 4
d12 1
d15 2
d174 29
d269 3
a271 1
    xcb_generic_iterator_t child = xcb_randr_refresh_rates_rates_end(R);
a273 1
    i->index = child.index;
d333 1
d373 1
d446 1
d499 1
d560 1
d601 1
d606 46
d684 1
d721 1
d867 1
d904 1
d973 1
d1022 1
d1065 65
d1162 1
d1199 1
d1438 65
d1538 1
d1578 1
d1817 29
d1878 1
d1915 1
d1992 29
d2056 1
d2096 1
d2173 29
d2248 1
d2253 1
d2304 1
d2309 1
d2314 29
d2393 1
d2398 1
d2453 1
d2458 1
d2498 1
d2538 1
d2543 29
d2623 1
d2679 1
d2756 29
d2824 1
d2829 1
d2873 1
d2878 1
d2935 1
d2972 1
d3012 1
d3052 1
d3092 1
d3132 1
d3137 41
d3213 1
d3253 1
d3384 29
d3468 1
d3473 1
d3533 1
d3538 1
d3595 1
d3632 1
d3657 53
d3742 1
d3779 1
d3964 53
d4059 1
d4064 1
d4069 1
d4074 1
d4121 1
d4126 1
d4131 1
d4136 1
d4141 65
d4238 1
d4275 1
d4514 42
d4601 1
d4606 1
d4611 1
d4661 1
d4666 1
d4671 1
d4676 65
d4773 1
d4810 1
d5081 1
d5118 1
d5214 1
d5290 1
d5350 1
d5390 1
d5427 1
d5464 1
@


1.1
log
@Initial revision
@
text
@d11 1
d3516 1158
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
