head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.14
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.12
	OPENBSD_5_0:1.1.1.1.0.10
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	mKDGsTNpiR2zRHYQ;

1.4
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	01TEvO4uNHLqFv7N;

1.3
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.49;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.49;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xevie.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_Xevie_API XCB Xevie API
 * @@brief Xevie XCB Protocol Implementation.
 * @@{
 **/

#ifndef __XEVIE_H
#define __XEVIE_H

#include "xcb.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_XEVIE_MAJOR_VERSION 1
#define XCB_XEVIE_MINOR_VERSION 0

extern xcb_extension_t xcb_xevie_id;

/**
 * @@brief xcb_xevie_query_version_cookie_t
 **/
typedef struct xcb_xevie_query_version_cookie_t {
    unsigned int sequence;
} xcb_xevie_query_version_cookie_t;

/** Opcode for xcb_xevie_query_version. */
#define XCB_XEVIE_QUERY_VERSION 0

/**
 * @@brief xcb_xevie_query_version_request_t
 **/
typedef struct xcb_xevie_query_version_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint16_t client_major_version;
    uint16_t client_minor_version;
} xcb_xevie_query_version_request_t;

/**
 * @@brief xcb_xevie_query_version_reply_t
 **/
typedef struct xcb_xevie_query_version_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint16_t server_major_version;
    uint16_t server_minor_version;
    uint8_t  pad1[20];
} xcb_xevie_query_version_reply_t;

/**
 * @@brief xcb_xevie_start_cookie_t
 **/
typedef struct xcb_xevie_start_cookie_t {
    unsigned int sequence;
} xcb_xevie_start_cookie_t;

/** Opcode for xcb_xevie_start. */
#define XCB_XEVIE_START 1

/**
 * @@brief xcb_xevie_start_request_t
 **/
typedef struct xcb_xevie_start_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t screen;
} xcb_xevie_start_request_t;

/**
 * @@brief xcb_xevie_start_reply_t
 **/
typedef struct xcb_xevie_start_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[24];
} xcb_xevie_start_reply_t;

/**
 * @@brief xcb_xevie_end_cookie_t
 **/
typedef struct xcb_xevie_end_cookie_t {
    unsigned int sequence;
} xcb_xevie_end_cookie_t;

/** Opcode for xcb_xevie_end. */
#define XCB_XEVIE_END 2

/**
 * @@brief xcb_xevie_end_request_t
 **/
typedef struct xcb_xevie_end_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t cmap;
} xcb_xevie_end_request_t;

/**
 * @@brief xcb_xevie_end_reply_t
 **/
typedef struct xcb_xevie_end_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[24];
} xcb_xevie_end_reply_t;

typedef enum xcb_xevie_datatype_t {
    XCB_XEVIE_DATATYPE_UNMODIFIED = 0,
    XCB_XEVIE_DATATYPE_MODIFIED = 1
} xcb_xevie_datatype_t;

/**
 * @@brief xcb_xevie_event_t
 **/
typedef struct xcb_xevie_event_t {
    uint8_t pad0[32];
} xcb_xevie_event_t;

/**
 * @@brief xcb_xevie_event_iterator_t
 **/
typedef struct xcb_xevie_event_iterator_t {
    xcb_xevie_event_t *data;
    int                rem;
    int                index;
} xcb_xevie_event_iterator_t;

/**
 * @@brief xcb_xevie_send_cookie_t
 **/
typedef struct xcb_xevie_send_cookie_t {
    unsigned int sequence;
} xcb_xevie_send_cookie_t;

/** Opcode for xcb_xevie_send. */
#define XCB_XEVIE_SEND 3

/**
 * @@brief xcb_xevie_send_request_t
 **/
typedef struct xcb_xevie_send_request_t {
    uint8_t           major_opcode;
    uint8_t           minor_opcode;
    uint16_t          length;
    xcb_xevie_event_t event;
    uint32_t          data_type;
    uint8_t           pad0[64];
} xcb_xevie_send_request_t;

/**
 * @@brief xcb_xevie_send_reply_t
 **/
typedef struct xcb_xevie_send_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[24];
} xcb_xevie_send_reply_t;

/**
 * @@brief xcb_xevie_select_input_cookie_t
 **/
typedef struct xcb_xevie_select_input_cookie_t {
    unsigned int sequence;
} xcb_xevie_select_input_cookie_t;

/** Opcode for xcb_xevie_select_input. */
#define XCB_XEVIE_SELECT_INPUT 4

/**
 * @@brief xcb_xevie_select_input_request_t
 **/
typedef struct xcb_xevie_select_input_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t event_mask;
} xcb_xevie_select_input_request_t;

/**
 * @@brief xcb_xevie_select_input_reply_t
 **/
typedef struct xcb_xevie_select_input_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  pad1[24];
} xcb_xevie_select_input_reply_t;

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xevie_query_version_cookie_t
xcb_xevie_query_version (xcb_connection_t *c,
                         uint16_t          client_major_version,
                         uint16_t          client_minor_version);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xevie_query_version_cookie_t
xcb_xevie_query_version_unchecked (xcb_connection_t *c,
                                   uint16_t          client_major_version,
                                   uint16_t          client_minor_version);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xevie_query_version_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xevie_query_version_reply_t *
xcb_xevie_query_version_reply (xcb_connection_t                  *c,
                               xcb_xevie_query_version_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xevie_start_cookie_t
xcb_xevie_start (xcb_connection_t *c,
                 uint32_t          screen);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xevie_start_cookie_t
xcb_xevie_start_unchecked (xcb_connection_t *c,
                           uint32_t          screen);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xevie_start_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xevie_start_reply_t *
xcb_xevie_start_reply (xcb_connection_t          *c,
                       xcb_xevie_start_cookie_t   cookie  /**< */,
                       xcb_generic_error_t      **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xevie_end_cookie_t
xcb_xevie_end (xcb_connection_t *c,
               uint32_t          cmap);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xevie_end_cookie_t
xcb_xevie_end_unchecked (xcb_connection_t *c,
                         uint32_t          cmap);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xevie_end_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xevie_end_reply_t *
xcb_xevie_end_reply (xcb_connection_t        *c,
                     xcb_xevie_end_cookie_t   cookie  /**< */,
                     xcb_generic_error_t    **e);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_xevie_event_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_xevie_event_t)
 */
void
xcb_xevie_event_next (xcb_xevie_event_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_xevie_event_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_xevie_event_end (xcb_xevie_event_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xevie_send_cookie_t
xcb_xevie_send (xcb_connection_t  *c,
                xcb_xevie_event_t  event,
                uint32_t           data_type);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xevie_send_cookie_t
xcb_xevie_send_unchecked (xcb_connection_t  *c,
                          xcb_xevie_event_t  event,
                          uint32_t           data_type);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xevie_send_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xevie_send_reply_t *
xcb_xevie_send_reply (xcb_connection_t         *c,
                      xcb_xevie_send_cookie_t   cookie  /**< */,
                      xcb_generic_error_t     **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_xevie_select_input_cookie_t
xcb_xevie_select_input (xcb_connection_t *c,
                        uint32_t          event_mask);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_xevie_select_input_cookie_t
xcb_xevie_select_input_unchecked (xcb_connection_t *c,
                                  uint32_t          event_mask);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_xevie_select_input_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_xevie_select_input_reply_t *
xcb_xevie_select_input_reply (xcb_connection_t                 *c,
                              xcb_xevie_select_input_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.4
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d30 1
a30 1
    unsigned int sequence; /**<  */
d40 5
a44 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint16_t client_major_version; /**<  */
    uint16_t client_minor_version; /**<  */
d51 7
a57 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint16_t server_major_version; /**<  */
    uint16_t server_minor_version; /**<  */
    uint8_t  pad1[20]; /**<  */
d64 1
a64 1
    unsigned int sequence; /**<  */
d74 4
a77 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t screen; /**<  */
d84 5
a88 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[24]; /**<  */
d95 1
a95 1
    unsigned int sequence; /**<  */
d105 4
a108 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t cmap; /**<  */
d115 5
a119 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[24]; /**<  */
d131 1
a131 1
    uint8_t pad0[32]; /**<  */
d138 3
a140 3
    xcb_xevie_event_t *data; /**<  */
    int                rem; /**<  */
    int                index; /**<  */
d147 1
a147 1
    unsigned int sequence; /**<  */
d157 6
a162 6
    uint8_t           major_opcode; /**<  */
    uint8_t           minor_opcode; /**<  */
    uint16_t          length; /**<  */
    xcb_xevie_event_t event; /**<  */
    uint32_t          data_type; /**<  */
    uint8_t           pad0[64]; /**<  */
d169 5
a173 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[24]; /**<  */
d180 1
a180 1
    unsigned int sequence; /**<  */
d190 4
a193 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t event_mask; /**<  */
d200 5
a204 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  pad1[24]; /**<  */
d216 3
a218 3
xcb_xevie_query_version (xcb_connection_t *c  /**< */,
                         uint16_t          client_major_version  /**< */,
                         uint16_t          client_minor_version  /**< */);
d232 3
a234 3
xcb_xevie_query_version_unchecked (xcb_connection_t *c  /**< */,
                                   uint16_t          client_major_version  /**< */,
                                   uint16_t          client_minor_version  /**< */);
d251 1
a251 1
xcb_xevie_query_version_reply (xcb_connection_t                  *c  /**< */,
d253 1
a253 1
                               xcb_generic_error_t              **e  /**< */);
d264 2
a265 2
xcb_xevie_start (xcb_connection_t *c  /**< */,
                 uint32_t          screen  /**< */);
d279 2
a280 2
xcb_xevie_start_unchecked (xcb_connection_t *c  /**< */,
                           uint32_t          screen  /**< */);
d297 1
a297 1
xcb_xevie_start_reply (xcb_connection_t          *c  /**< */,
d299 1
a299 1
                       xcb_generic_error_t      **e  /**< */);
d310 2
a311 2
xcb_xevie_end (xcb_connection_t *c  /**< */,
               uint32_t          cmap  /**< */);
d325 2
a326 2
xcb_xevie_end_unchecked (xcb_connection_t *c  /**< */,
                         uint32_t          cmap  /**< */);
d343 1
a343 1
xcb_xevie_end_reply (xcb_connection_t        *c  /**< */,
d345 1
a345 1
                     xcb_generic_error_t    **e  /**< */);
d356 1
a356 1
xcb_xevie_event_next (xcb_xevie_event_iterator_t *i  /**< */);
d368 1
a368 1
xcb_xevie_event_end (xcb_xevie_event_iterator_t i  /**< */);
d379 3
a381 3
xcb_xevie_send (xcb_connection_t  *c  /**< */,
                xcb_xevie_event_t  event  /**< */,
                uint32_t           data_type  /**< */);
d395 3
a397 3
xcb_xevie_send_unchecked (xcb_connection_t  *c  /**< */,
                          xcb_xevie_event_t  event  /**< */,
                          uint32_t           data_type  /**< */);
d414 1
a414 1
xcb_xevie_send_reply (xcb_connection_t         *c  /**< */,
d416 1
a416 1
                      xcb_generic_error_t     **e  /**< */);
d427 2
a428 2
xcb_xevie_select_input (xcb_connection_t *c  /**< */,
                        uint32_t          event_mask  /**< */);
d442 2
a443 2
xcb_xevie_select_input_unchecked (xcb_connection_t *c  /**< */,
                                  uint32_t          event_mask  /**< */);
d460 1
a460 1
xcb_xevie_select_input_reply (xcb_connection_t                 *c  /**< */,
d462 1
a462 1
                              xcb_generic_error_t             **e  /**< */);
@


1.3
log
@Update build system and generated files for libxcb 1.10.
@
text
@d23 1
a23 1
  
d213 1
a213 1
 * 
a214 12

/*****************************************************************************
 **
 ** xcb_xevie_query_version_cookie_t xcb_xevie_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          client_major_version
 ** @@param uint16_t          client_minor_version
 ** @@returns xcb_xevie_query_version_cookie_t
 **
 *****************************************************************************/
 
d226 1
a226 1
 * 
a230 12

/*****************************************************************************
 **
 ** xcb_xevie_query_version_cookie_t xcb_xevie_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint16_t          client_major_version
 ** @@param uint16_t          client_minor_version
 ** @@returns xcb_xevie_query_version_cookie_t
 **
 *****************************************************************************/
 
d243 1
a243 1
 * 
a249 12

/*****************************************************************************
 **
 ** xcb_xevie_query_version_reply_t * xcb_xevie_query_version_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_xevie_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_xevie_query_version_reply_t *
 **
 *****************************************************************************/
 
d261 1
a261 1
 * 
a262 11

/*****************************************************************************
 **
 ** xcb_xevie_start_cookie_t xcb_xevie_start
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xevie_start_cookie_t
 **
 *****************************************************************************/
 
d273 1
a273 1
 * 
a277 11

/*****************************************************************************
 **
 ** xcb_xevie_start_cookie_t xcb_xevie_start_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          screen
 ** @@returns xcb_xevie_start_cookie_t
 **
 *****************************************************************************/
 
d289 1
a289 1
 * 
a295 12

/*****************************************************************************
 **
 ** xcb_xevie_start_reply_t * xcb_xevie_start_reply
 ** 
 ** @@param xcb_connection_t          *c
 ** @@param xcb_xevie_start_cookie_t   cookie
 ** @@param xcb_generic_error_t      **e
 ** @@returns xcb_xevie_start_reply_t *
 **
 *****************************************************************************/
 
d307 1
a307 1
 * 
a308 11

/*****************************************************************************
 **
 ** xcb_xevie_end_cookie_t xcb_xevie_end
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          cmap
 ** @@returns xcb_xevie_end_cookie_t
 **
 *****************************************************************************/
 
d319 1
a319 1
 * 
a323 11

/*****************************************************************************
 **
 ** xcb_xevie_end_cookie_t xcb_xevie_end_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          cmap
 ** @@returns xcb_xevie_end_cookie_t
 **
 *****************************************************************************/
 
d335 1
a335 1
 * 
a341 12

/*****************************************************************************
 **
 ** xcb_xevie_end_reply_t * xcb_xevie_end_reply
 ** 
 ** @@param xcb_connection_t        *c
 ** @@param xcb_xevie_end_cookie_t   cookie
 ** @@param xcb_generic_error_t    **e
 ** @@returns xcb_xevie_end_reply_t *
 **
 *****************************************************************************/
 
a354 10

/*****************************************************************************
 **
 ** void xcb_xevie_event_next
 ** 
 ** @@param xcb_xevie_event_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a366 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xevie_event_end
 ** 
 ** @@param xcb_xevie_event_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d376 1
a376 1
 * 
a377 12

/*****************************************************************************
 **
 ** xcb_xevie_send_cookie_t xcb_xevie_send
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_xevie_event_t  event
 ** @@param uint32_t           data_type
 ** @@returns xcb_xevie_send_cookie_t
 **
 *****************************************************************************/
 
d389 1
a389 1
 * 
a393 12

/*****************************************************************************
 **
 ** xcb_xevie_send_cookie_t xcb_xevie_send_unchecked
 ** 
 ** @@param xcb_connection_t  *c
 ** @@param xcb_xevie_event_t  event
 ** @@param uint32_t           data_type
 ** @@returns xcb_xevie_send_cookie_t
 **
 *****************************************************************************/
 
d406 1
a406 1
 * 
a412 12

/*****************************************************************************
 **
 ** xcb_xevie_send_reply_t * xcb_xevie_send_reply
 ** 
 ** @@param xcb_connection_t         *c
 ** @@param xcb_xevie_send_cookie_t   cookie
 ** @@param xcb_generic_error_t     **e
 ** @@returns xcb_xevie_send_reply_t *
 **
 *****************************************************************************/
 
d424 1
a424 1
 * 
a425 11

/*****************************************************************************
 **
 ** xcb_xevie_select_input_cookie_t xcb_xevie_select_input
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          event_mask
 ** @@returns xcb_xevie_select_input_cookie_t
 **
 *****************************************************************************/
 
d436 1
a436 1
 * 
a440 11

/*****************************************************************************
 **
 ** xcb_xevie_select_input_cookie_t xcb_xevie_select_input_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          event_mask
 ** @@returns xcb_xevie_select_input_cookie_t
 **
 *****************************************************************************/
 
d452 1
a452 1
 * 
a458 12

/*****************************************************************************
 **
 ** xcb_xevie_select_input_reply_t * xcb_xevie_select_input_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_xevie_select_input_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_xevie_select_input_reply_t *
 **
 *****************************************************************************/
 
@


1.2
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d123 2
a124 2
    XCB_XEVIE_DATATYPE_UNMODIFIED,
    XCB_XEVIE_DATATYPE_MODIFIED
@


1.1
log
@Initial revision
@
text
@d208 1
a208 1
 * Delivers a request to the X server
d233 1
a233 1
 * Delivers a request to the X server
d292 1
a292 1
 * Delivers a request to the X server
d315 1
a315 1
 * Delivers a request to the X server
d372 1
a372 1
 * Delivers a request to the X server
d395 1
a395 1
 * Delivers a request to the X server
d495 1
a495 1
 * Delivers a request to the X server
d520 1
a520 1
 * Delivers a request to the X server
d579 1
a579 1
 * Delivers a request to the X server
d602 1
a602 1
 * Delivers a request to the X server
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
