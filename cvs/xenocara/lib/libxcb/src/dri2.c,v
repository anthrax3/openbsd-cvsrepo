head	1.6;
access;
symbols
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2014.04.14.19.20.17;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.03.27.19.14.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.18.19.58.53;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from dri2.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "dri2.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"

xcb_extension_t xcb_dri2_id = { "DRI2", 0 };

void
xcb_dri2_dri2_buffer_next (xcb_dri2_dri2_buffer_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_dri2_dri2_buffer_t);
}

xcb_generic_iterator_t
xcb_dri2_dri2_buffer_end (xcb_dri2_dri2_buffer_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

void
xcb_dri2_attach_format_next (xcb_dri2_attach_format_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_dri2_attach_format_t);
}

xcb_generic_iterator_t
xcb_dri2_attach_format_end (xcb_dri2_attach_format_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

xcb_dri2_query_version_cookie_t
xcb_dri2_query_version (xcb_connection_t *c,
                        uint32_t          major_version,
                        uint32_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_query_version_cookie_t xcb_ret;
    xcb_dri2_query_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_query_version_cookie_t
xcb_dri2_query_version_unchecked (xcb_connection_t *c,
                                  uint32_t          major_version,
                                  uint32_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_query_version_cookie_t xcb_ret;
    xcb_dri2_query_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_query_version_reply_t *
xcb_dri2_query_version_reply (xcb_connection_t                 *c,
                              xcb_dri2_query_version_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e)
{
    return (xcb_dri2_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_dri2_connect_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_dri2_connect_reply_t *_aux = (xcb_dri2_connect_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_dri2_connect_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* driver_name */
    xcb_block_len += _aux->driver_name_length * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* alignment_pad */
    xcb_block_len += (((_aux->driver_name_length + 3) & (~3)) - _aux->driver_name_length) * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* device_name */
    xcb_block_len += _aux->device_name_length * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_dri2_connect_cookie_t
xcb_dri2_connect (xcb_connection_t *c,
                  xcb_window_t      window,
                  uint32_t          driver_type)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_CONNECT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_connect_cookie_t xcb_ret;
    xcb_dri2_connect_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.driver_type = driver_type;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_connect_cookie_t
xcb_dri2_connect_unchecked (xcb_connection_t *c,
                            xcb_window_t      window,
                            uint32_t          driver_type)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_CONNECT,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_connect_cookie_t xcb_ret;
    xcb_dri2_connect_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.driver_type = driver_type;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_dri2_connect_driver_name (const xcb_dri2_connect_reply_t *R)
{
    return (char *) (R + 1);
}

int
xcb_dri2_connect_driver_name_length (const xcb_dri2_connect_reply_t *R)
{
    return R->driver_name_length;
}

xcb_generic_iterator_t
xcb_dri2_connect_driver_name_end (const xcb_dri2_connect_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->driver_name_length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

void *
xcb_dri2_connect_alignment_pad (const xcb_dri2_connect_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_dri2_connect_driver_name_end(R);
    return (void *) ((char *) prev.data + XCB_TYPE_PAD(char, prev.index) + 0);
}

int
xcb_dri2_connect_alignment_pad_length (const xcb_dri2_connect_reply_t *R)
{
    return (((R->driver_name_length + 3) & (~3)) - R->driver_name_length);
}

xcb_generic_iterator_t
xcb_dri2_connect_alignment_pad_end (const xcb_dri2_connect_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_dri2_connect_driver_name_end(R);
    i.data = ((char *) ((char*) prev.data + XCB_TYPE_PAD(char, prev.index))) + ((((R->driver_name_length + 3) & (~3)) - R->driver_name_length));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

char *
xcb_dri2_connect_device_name (const xcb_dri2_connect_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_dri2_connect_alignment_pad_end(R);
    return (char *) ((char *) prev.data + XCB_TYPE_PAD(char, prev.index) + 0);
}

int
xcb_dri2_connect_device_name_length (const xcb_dri2_connect_reply_t *R)
{
    return R->device_name_length;
}

xcb_generic_iterator_t
xcb_dri2_connect_device_name_end (const xcb_dri2_connect_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_dri2_connect_alignment_pad_end(R);
    i.data = ((char *) ((char*) prev.data + XCB_TYPE_PAD(char, prev.index))) + (R->device_name_length);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_dri2_connect_reply_t *
xcb_dri2_connect_reply (xcb_connection_t           *c,
                        xcb_dri2_connect_cookie_t   cookie  /**< */,
                        xcb_generic_error_t       **e)
{
    return (xcb_dri2_connect_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_dri2_authenticate_cookie_t
xcb_dri2_authenticate (xcb_connection_t *c,
                       xcb_window_t      window,
                       uint32_t          magic)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_AUTHENTICATE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_authenticate_cookie_t xcb_ret;
    xcb_dri2_authenticate_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.magic = magic;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_authenticate_cookie_t
xcb_dri2_authenticate_unchecked (xcb_connection_t *c,
                                 xcb_window_t      window,
                                 uint32_t          magic)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_AUTHENTICATE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_authenticate_cookie_t xcb_ret;
    xcb_dri2_authenticate_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.magic = magic;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_authenticate_reply_t *
xcb_dri2_authenticate_reply (xcb_connection_t                *c,
                             xcb_dri2_authenticate_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_dri2_authenticate_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_dri2_create_drawable_checked (xcb_connection_t *c,
                                  xcb_drawable_t    drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_CREATE_DRAWABLE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dri2_create_drawable_request_t xcb_out;

    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_dri2_create_drawable (xcb_connection_t *c,
                          xcb_drawable_t    drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_CREATE_DRAWABLE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dri2_create_drawable_request_t xcb_out;

    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_dri2_destroy_drawable_checked (xcb_connection_t *c,
                                   xcb_drawable_t    drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_DESTROY_DRAWABLE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dri2_destroy_drawable_request_t xcb_out;

    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_dri2_destroy_drawable (xcb_connection_t *c,
                           xcb_drawable_t    drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_DESTROY_DRAWABLE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dri2_destroy_drawable_request_t xcb_out;

    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_dri2_get_buffers_sizeof (const void  *_buffer,
                             uint32_t     attachments_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_dri2_get_buffers_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* attachments */
    xcb_block_len += attachments_len * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_dri2_get_buffers_cookie_t
xcb_dri2_get_buffers (xcb_connection_t *c,
                      xcb_drawable_t    drawable,
                      uint32_t          count,
                      uint32_t          attachments_len,
                      const uint32_t   *attachments)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_GET_BUFFERS,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_dri2_get_buffers_cookie_t xcb_ret;
    xcb_dri2_get_buffers_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.count = count;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t attachments */
    xcb_parts[4].iov_base = (char *) attachments;
    xcb_parts[4].iov_len = attachments_len * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_get_buffers_cookie_t
xcb_dri2_get_buffers_unchecked (xcb_connection_t *c,
                                xcb_drawable_t    drawable,
                                uint32_t          count,
                                uint32_t          attachments_len,
                                const uint32_t   *attachments)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_GET_BUFFERS,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_dri2_get_buffers_cookie_t xcb_ret;
    xcb_dri2_get_buffers_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.count = count;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint32_t attachments */
    xcb_parts[4].iov_base = (char *) attachments;
    xcb_parts[4].iov_len = attachments_len * sizeof(uint32_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_dri2_buffer_t *
xcb_dri2_get_buffers_buffers (const xcb_dri2_get_buffers_reply_t *R)
{
    return (xcb_dri2_dri2_buffer_t *) (R + 1);
}

int
xcb_dri2_get_buffers_buffers_length (const xcb_dri2_get_buffers_reply_t *R)
{
    return R->count;
}

xcb_dri2_dri2_buffer_iterator_t
xcb_dri2_get_buffers_buffers_iterator (const xcb_dri2_get_buffers_reply_t *R)
{
    xcb_dri2_dri2_buffer_iterator_t i;
    i.data = (xcb_dri2_dri2_buffer_t *) (R + 1);
    i.rem = R->count;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_dri2_get_buffers_reply_t *
xcb_dri2_get_buffers_reply (xcb_connection_t               *c,
                            xcb_dri2_get_buffers_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e)
{
    return (xcb_dri2_get_buffers_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_dri2_copy_region_cookie_t
xcb_dri2_copy_region (xcb_connection_t *c,
                      xcb_drawable_t    drawable,
                      uint32_t          region,
                      uint32_t          dest,
                      uint32_t          src)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_COPY_REGION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_copy_region_cookie_t xcb_ret;
    xcb_dri2_copy_region_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.region = region;
    xcb_out.dest = dest;
    xcb_out.src = src;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_copy_region_cookie_t
xcb_dri2_copy_region_unchecked (xcb_connection_t *c,
                                xcb_drawable_t    drawable,
                                uint32_t          region,
                                uint32_t          dest,
                                uint32_t          src)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_COPY_REGION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_copy_region_cookie_t xcb_ret;
    xcb_dri2_copy_region_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.region = region;
    xcb_out.dest = dest;
    xcb_out.src = src;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_copy_region_reply_t *
xcb_dri2_copy_region_reply (xcb_connection_t               *c,
                            xcb_dri2_copy_region_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e)
{
    return (xcb_dri2_copy_region_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_dri2_get_buffers_with_format_sizeof (const void  *_buffer,
                                         uint32_t     attachments_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_dri2_get_buffers_with_format_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* attachments */
    xcb_block_len += attachments_len * sizeof(xcb_dri2_attach_format_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_dri2_attach_format_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_dri2_get_buffers_with_format_cookie_t
xcb_dri2_get_buffers_with_format (xcb_connection_t               *c,
                                  xcb_drawable_t                  drawable,
                                  uint32_t                        count,
                                  uint32_t                        attachments_len,
                                  const xcb_dri2_attach_format_t *attachments)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_GET_BUFFERS_WITH_FORMAT,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_dri2_get_buffers_with_format_cookie_t xcb_ret;
    xcb_dri2_get_buffers_with_format_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.count = count;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_dri2_attach_format_t attachments */
    xcb_parts[4].iov_base = (char *) attachments;
    xcb_parts[4].iov_len = attachments_len * sizeof(xcb_dri2_attach_format_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_get_buffers_with_format_cookie_t
xcb_dri2_get_buffers_with_format_unchecked (xcb_connection_t               *c,
                                            xcb_drawable_t                  drawable,
                                            uint32_t                        count,
                                            uint32_t                        attachments_len,
                                            const xcb_dri2_attach_format_t *attachments)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_GET_BUFFERS_WITH_FORMAT,
        .isvoid = 0
    };

    struct iovec xcb_parts[6];
    xcb_dri2_get_buffers_with_format_cookie_t xcb_ret;
    xcb_dri2_get_buffers_with_format_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.count = count;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_dri2_attach_format_t attachments */
    xcb_parts[4].iov_base = (char *) attachments;
    xcb_parts[4].iov_len = attachments_len * sizeof(xcb_dri2_attach_format_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_dri2_buffer_t *
xcb_dri2_get_buffers_with_format_buffers (const xcb_dri2_get_buffers_with_format_reply_t *R)
{
    return (xcb_dri2_dri2_buffer_t *) (R + 1);
}

int
xcb_dri2_get_buffers_with_format_buffers_length (const xcb_dri2_get_buffers_with_format_reply_t *R)
{
    return R->count;
}

xcb_dri2_dri2_buffer_iterator_t
xcb_dri2_get_buffers_with_format_buffers_iterator (const xcb_dri2_get_buffers_with_format_reply_t *R)
{
    xcb_dri2_dri2_buffer_iterator_t i;
    i.data = (xcb_dri2_dri2_buffer_t *) (R + 1);
    i.rem = R->count;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_dri2_get_buffers_with_format_reply_t *
xcb_dri2_get_buffers_with_format_reply (xcb_connection_t                           *c,
                                        xcb_dri2_get_buffers_with_format_cookie_t   cookie  /**< */,
                                        xcb_generic_error_t                       **e)
{
    return (xcb_dri2_get_buffers_with_format_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_dri2_swap_buffers_cookie_t
xcb_dri2_swap_buffers (xcb_connection_t *c,
                       xcb_drawable_t    drawable,
                       uint32_t          target_msc_hi,
                       uint32_t          target_msc_lo,
                       uint32_t          divisor_hi,
                       uint32_t          divisor_lo,
                       uint32_t          remainder_hi,
                       uint32_t          remainder_lo)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_SWAP_BUFFERS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_swap_buffers_cookie_t xcb_ret;
    xcb_dri2_swap_buffers_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.target_msc_hi = target_msc_hi;
    xcb_out.target_msc_lo = target_msc_lo;
    xcb_out.divisor_hi = divisor_hi;
    xcb_out.divisor_lo = divisor_lo;
    xcb_out.remainder_hi = remainder_hi;
    xcb_out.remainder_lo = remainder_lo;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_swap_buffers_cookie_t
xcb_dri2_swap_buffers_unchecked (xcb_connection_t *c,
                                 xcb_drawable_t    drawable,
                                 uint32_t          target_msc_hi,
                                 uint32_t          target_msc_lo,
                                 uint32_t          divisor_hi,
                                 uint32_t          divisor_lo,
                                 uint32_t          remainder_hi,
                                 uint32_t          remainder_lo)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_SWAP_BUFFERS,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_swap_buffers_cookie_t xcb_ret;
    xcb_dri2_swap_buffers_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.target_msc_hi = target_msc_hi;
    xcb_out.target_msc_lo = target_msc_lo;
    xcb_out.divisor_hi = divisor_hi;
    xcb_out.divisor_lo = divisor_lo;
    xcb_out.remainder_hi = remainder_hi;
    xcb_out.remainder_lo = remainder_lo;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_swap_buffers_reply_t *
xcb_dri2_swap_buffers_reply (xcb_connection_t                *c,
                             xcb_dri2_swap_buffers_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e)
{
    return (xcb_dri2_swap_buffers_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_dri2_get_msc_cookie_t
xcb_dri2_get_msc (xcb_connection_t *c,
                  xcb_drawable_t    drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_GET_MSC,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_get_msc_cookie_t xcb_ret;
    xcb_dri2_get_msc_request_t xcb_out;

    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_get_msc_cookie_t
xcb_dri2_get_msc_unchecked (xcb_connection_t *c,
                            xcb_drawable_t    drawable)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_GET_MSC,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_get_msc_cookie_t xcb_ret;
    xcb_dri2_get_msc_request_t xcb_out;

    xcb_out.drawable = drawable;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_get_msc_reply_t *
xcb_dri2_get_msc_reply (xcb_connection_t           *c,
                        xcb_dri2_get_msc_cookie_t   cookie  /**< */,
                        xcb_generic_error_t       **e)
{
    return (xcb_dri2_get_msc_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_dri2_wait_msc_cookie_t
xcb_dri2_wait_msc (xcb_connection_t *c,
                   xcb_drawable_t    drawable,
                   uint32_t          target_msc_hi,
                   uint32_t          target_msc_lo,
                   uint32_t          divisor_hi,
                   uint32_t          divisor_lo,
                   uint32_t          remainder_hi,
                   uint32_t          remainder_lo)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_WAIT_MSC,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_wait_msc_cookie_t xcb_ret;
    xcb_dri2_wait_msc_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.target_msc_hi = target_msc_hi;
    xcb_out.target_msc_lo = target_msc_lo;
    xcb_out.divisor_hi = divisor_hi;
    xcb_out.divisor_lo = divisor_lo;
    xcb_out.remainder_hi = remainder_hi;
    xcb_out.remainder_lo = remainder_lo;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_wait_msc_cookie_t
xcb_dri2_wait_msc_unchecked (xcb_connection_t *c,
                             xcb_drawable_t    drawable,
                             uint32_t          target_msc_hi,
                             uint32_t          target_msc_lo,
                             uint32_t          divisor_hi,
                             uint32_t          divisor_lo,
                             uint32_t          remainder_hi,
                             uint32_t          remainder_lo)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_WAIT_MSC,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_wait_msc_cookie_t xcb_ret;
    xcb_dri2_wait_msc_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.target_msc_hi = target_msc_hi;
    xcb_out.target_msc_lo = target_msc_lo;
    xcb_out.divisor_hi = divisor_hi;
    xcb_out.divisor_lo = divisor_lo;
    xcb_out.remainder_hi = remainder_hi;
    xcb_out.remainder_lo = remainder_lo;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_wait_msc_reply_t *
xcb_dri2_wait_msc_reply (xcb_connection_t            *c,
                         xcb_dri2_wait_msc_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e)
{
    return (xcb_dri2_wait_msc_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_dri2_wait_sbc_cookie_t
xcb_dri2_wait_sbc (xcb_connection_t *c,
                   xcb_drawable_t    drawable,
                   uint32_t          target_sbc_hi,
                   uint32_t          target_sbc_lo)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_WAIT_SBC,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_wait_sbc_cookie_t xcb_ret;
    xcb_dri2_wait_sbc_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.target_sbc_hi = target_sbc_hi;
    xcb_out.target_sbc_lo = target_sbc_lo;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_wait_sbc_cookie_t
xcb_dri2_wait_sbc_unchecked (xcb_connection_t *c,
                             xcb_drawable_t    drawable,
                             uint32_t          target_sbc_hi,
                             uint32_t          target_sbc_lo)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_WAIT_SBC,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_wait_sbc_cookie_t xcb_ret;
    xcb_dri2_wait_sbc_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.target_sbc_hi = target_sbc_hi;
    xcb_out.target_sbc_lo = target_sbc_lo;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_wait_sbc_reply_t *
xcb_dri2_wait_sbc_reply (xcb_connection_t            *c,
                         xcb_dri2_wait_sbc_cookie_t   cookie  /**< */,
                         xcb_generic_error_t        **e)
{
    return (xcb_dri2_wait_sbc_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_dri2_swap_interval_checked (xcb_connection_t *c,
                                xcb_drawable_t    drawable,
                                uint32_t          interval)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_SWAP_INTERVAL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dri2_swap_interval_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.interval = interval;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_dri2_swap_interval (xcb_connection_t *c,
                        xcb_drawable_t    drawable,
                        uint32_t          interval)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_SWAP_INTERVAL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_dri2_swap_interval_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.interval = interval;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_get_param_cookie_t
xcb_dri2_get_param (xcb_connection_t *c,
                    xcb_drawable_t    drawable,
                    uint32_t          param)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_GET_PARAM,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_get_param_cookie_t xcb_ret;
    xcb_dri2_get_param_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.param = param;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_get_param_cookie_t
xcb_dri2_get_param_unchecked (xcb_connection_t *c,
                              xcb_drawable_t    drawable,
                              uint32_t          param)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_dri2_id,
        .opcode = XCB_DRI2_GET_PARAM,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_dri2_get_param_cookie_t xcb_ret;
    xcb_dri2_get_param_request_t xcb_out;

    xcb_out.drawable = drawable;
    xcb_out.param = param;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_dri2_get_param_reply_t *
xcb_dri2_get_param_reply (xcb_connection_t             *c,
                          xcb_dri2_get_param_cookie_t   cookie  /**< */,
                          xcb_generic_error_t         **e)
{
    return (xcb_dri2_get_param_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d22 1
a22 1
xcb_dri2_dri2_buffer_next (xcb_dri2_dri2_buffer_iterator_t *i  /**< */)
d30 1
a30 1
xcb_dri2_dri2_buffer_end (xcb_dri2_dri2_buffer_iterator_t i  /**< */)
d40 1
a40 1
xcb_dri2_attach_format_next (xcb_dri2_attach_format_iterator_t *i  /**< */)
d48 1
a48 1
xcb_dri2_attach_format_end (xcb_dri2_attach_format_iterator_t i  /**< */)
d58 3
a60 3
xcb_dri2_query_version (xcb_connection_t *c  /**< */,
                        uint32_t          major_version  /**< */,
                        uint32_t          minor_version  /**< */)
d63 4
a66 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_QUERY_VERSION,
        /* isvoid */ 0
d86 3
a88 3
xcb_dri2_query_version_unchecked (xcb_connection_t *c  /**< */,
                                  uint32_t          major_version  /**< */,
                                  uint32_t          minor_version  /**< */)
d91 4
a94 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_QUERY_VERSION,
        /* isvoid */ 0
d114 1
a114 1
xcb_dri2_query_version_reply (xcb_connection_t                 *c  /**< */,
d116 1
a116 1
                              xcb_generic_error_t             **e  /**< */)
d122 1
a122 1
xcb_dri2_connect_sizeof (const void  *_buffer  /**< */)
d177 3
a179 3
xcb_dri2_connect (xcb_connection_t *c  /**< */,
                  xcb_window_t      window  /**< */,
                  uint32_t          driver_type  /**< */)
d182 4
a185 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_CONNECT,
        /* isvoid */ 0
d205 3
a207 3
xcb_dri2_connect_unchecked (xcb_connection_t *c  /**< */,
                            xcb_window_t      window  /**< */,
                            uint32_t          driver_type  /**< */)
d210 4
a213 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_CONNECT,
        /* isvoid */ 0
d233 1
a233 1
xcb_dri2_connect_driver_name (const xcb_dri2_connect_reply_t *R  /**< */)
d239 1
a239 1
xcb_dri2_connect_driver_name_length (const xcb_dri2_connect_reply_t *R  /**< */)
d245 1
a245 1
xcb_dri2_connect_driver_name_end (const xcb_dri2_connect_reply_t *R  /**< */)
d255 1
a255 1
xcb_dri2_connect_alignment_pad (const xcb_dri2_connect_reply_t *R  /**< */)
d262 1
a262 1
xcb_dri2_connect_alignment_pad_length (const xcb_dri2_connect_reply_t *R  /**< */)
d268 1
a268 1
xcb_dri2_connect_alignment_pad_end (const xcb_dri2_connect_reply_t *R  /**< */)
d271 2
a272 2
    xcb_generic_iterator_t child = xcb_dri2_connect_driver_name_end(R);
    i.data = ((char *) child.data) + ((((R->driver_name_length + 3) & (~3)) - R->driver_name_length));
d279 1
a279 1
xcb_dri2_connect_device_name (const xcb_dri2_connect_reply_t *R  /**< */)
d286 1
a286 1
xcb_dri2_connect_device_name_length (const xcb_dri2_connect_reply_t *R  /**< */)
d292 1
a292 1
xcb_dri2_connect_device_name_end (const xcb_dri2_connect_reply_t *R  /**< */)
d295 2
a296 2
    xcb_generic_iterator_t child = xcb_dri2_connect_alignment_pad_end(R);
    i.data = ((char *) child.data) + (R->device_name_length);
d303 1
a303 1
xcb_dri2_connect_reply (xcb_connection_t           *c  /**< */,
d305 1
a305 1
                        xcb_generic_error_t       **e  /**< */)
d311 3
a313 3
xcb_dri2_authenticate (xcb_connection_t *c  /**< */,
                       xcb_window_t      window  /**< */,
                       uint32_t          magic  /**< */)
d316 4
a319 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_AUTHENTICATE,
        /* isvoid */ 0
d339 3
a341 3
xcb_dri2_authenticate_unchecked (xcb_connection_t *c  /**< */,
                                 xcb_window_t      window  /**< */,
                                 uint32_t          magic  /**< */)
d344 4
a347 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_AUTHENTICATE,
        /* isvoid */ 0
d367 1
a367 1
xcb_dri2_authenticate_reply (xcb_connection_t                *c  /**< */,
d369 1
a369 1
                             xcb_generic_error_t            **e  /**< */)
d375 2
a376 2
xcb_dri2_create_drawable_checked (xcb_connection_t *c  /**< */,
                                  xcb_drawable_t    drawable  /**< */)
d379 4
a382 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_CREATE_DRAWABLE,
        /* isvoid */ 1
d401 2
a402 2
xcb_dri2_create_drawable (xcb_connection_t *c  /**< */,
                          xcb_drawable_t    drawable  /**< */)
d405 4
a408 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_CREATE_DRAWABLE,
        /* isvoid */ 1
d427 2
a428 2
xcb_dri2_destroy_drawable_checked (xcb_connection_t *c  /**< */,
                                   xcb_drawable_t    drawable  /**< */)
d431 4
a434 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_DESTROY_DRAWABLE,
        /* isvoid */ 1
d453 2
a454 2
xcb_dri2_destroy_drawable (xcb_connection_t *c  /**< */,
                           xcb_drawable_t    drawable  /**< */)
d457 4
a460 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_DESTROY_DRAWABLE,
        /* isvoid */ 1
d479 2
a480 2
xcb_dri2_get_buffers_sizeof (const void  *_buffer  /**< */,
                             uint32_t     attachments_len  /**< */)
d510 5
a514 5
xcb_dri2_get_buffers (xcb_connection_t *c  /**< */,
                      xcb_drawable_t    drawable  /**< */,
                      uint32_t          count  /**< */,
                      uint32_t          attachments_len  /**< */,
                      const uint32_t   *attachments  /**< */)
d517 4
a520 4
        /* count */ 4,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_GET_BUFFERS,
        /* isvoid */ 0
d545 5
a549 5
xcb_dri2_get_buffers_unchecked (xcb_connection_t *c  /**< */,
                                xcb_drawable_t    drawable  /**< */,
                                uint32_t          count  /**< */,
                                uint32_t          attachments_len  /**< */,
                                const uint32_t   *attachments  /**< */)
d552 4
a555 4
        /* count */ 4,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_GET_BUFFERS,
        /* isvoid */ 0
d580 1
a580 1
xcb_dri2_get_buffers_buffers (const xcb_dri2_get_buffers_reply_t *R  /**< */)
d586 1
a586 1
xcb_dri2_get_buffers_buffers_length (const xcb_dri2_get_buffers_reply_t *R  /**< */)
d592 1
a592 1
xcb_dri2_get_buffers_buffers_iterator (const xcb_dri2_get_buffers_reply_t *R  /**< */)
d602 1
a602 1
xcb_dri2_get_buffers_reply (xcb_connection_t               *c  /**< */,
d604 1
a604 1
                            xcb_generic_error_t           **e  /**< */)
d610 5
a614 5
xcb_dri2_copy_region (xcb_connection_t *c  /**< */,
                      xcb_drawable_t    drawable  /**< */,
                      uint32_t          region  /**< */,
                      uint32_t          dest  /**< */,
                      uint32_t          src  /**< */)
d617 4
a620 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_COPY_REGION,
        /* isvoid */ 0
d642 5
a646 5
xcb_dri2_copy_region_unchecked (xcb_connection_t *c  /**< */,
                                xcb_drawable_t    drawable  /**< */,
                                uint32_t          region  /**< */,
                                uint32_t          dest  /**< */,
                                uint32_t          src  /**< */)
d649 4
a652 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_COPY_REGION,
        /* isvoid */ 0
d674 1
a674 1
xcb_dri2_copy_region_reply (xcb_connection_t               *c  /**< */,
d676 1
a676 1
                            xcb_generic_error_t           **e  /**< */)
d682 2
a683 2
xcb_dri2_get_buffers_with_format_sizeof (const void  *_buffer  /**< */,
                                         uint32_t     attachments_len  /**< */)
d713 5
a717 5
xcb_dri2_get_buffers_with_format (xcb_connection_t               *c  /**< */,
                                  xcb_drawable_t                  drawable  /**< */,
                                  uint32_t                        count  /**< */,
                                  uint32_t                        attachments_len  /**< */,
                                  const xcb_dri2_attach_format_t *attachments  /**< */)
d720 4
a723 4
        /* count */ 4,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_GET_BUFFERS_WITH_FORMAT,
        /* isvoid */ 0
d748 5
a752 5
xcb_dri2_get_buffers_with_format_unchecked (xcb_connection_t               *c  /**< */,
                                            xcb_drawable_t                  drawable  /**< */,
                                            uint32_t                        count  /**< */,
                                            uint32_t                        attachments_len  /**< */,
                                            const xcb_dri2_attach_format_t *attachments  /**< */)
d755 4
a758 4
        /* count */ 4,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_GET_BUFFERS_WITH_FORMAT,
        /* isvoid */ 0
d783 1
a783 1
xcb_dri2_get_buffers_with_format_buffers (const xcb_dri2_get_buffers_with_format_reply_t *R  /**< */)
d789 1
a789 1
xcb_dri2_get_buffers_with_format_buffers_length (const xcb_dri2_get_buffers_with_format_reply_t *R  /**< */)
d795 1
a795 1
xcb_dri2_get_buffers_with_format_buffers_iterator (const xcb_dri2_get_buffers_with_format_reply_t *R  /**< */)
d805 1
a805 1
xcb_dri2_get_buffers_with_format_reply (xcb_connection_t                           *c  /**< */,
d807 1
a807 1
                                        xcb_generic_error_t                       **e  /**< */)
d813 8
a820 8
xcb_dri2_swap_buffers (xcb_connection_t *c  /**< */,
                       xcb_drawable_t    drawable  /**< */,
                       uint32_t          target_msc_hi  /**< */,
                       uint32_t          target_msc_lo  /**< */,
                       uint32_t          divisor_hi  /**< */,
                       uint32_t          divisor_lo  /**< */,
                       uint32_t          remainder_hi  /**< */,
                       uint32_t          remainder_lo  /**< */)
d823 4
a826 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_SWAP_BUFFERS,
        /* isvoid */ 0
d851 8
a858 8
xcb_dri2_swap_buffers_unchecked (xcb_connection_t *c  /**< */,
                                 xcb_drawable_t    drawable  /**< */,
                                 uint32_t          target_msc_hi  /**< */,
                                 uint32_t          target_msc_lo  /**< */,
                                 uint32_t          divisor_hi  /**< */,
                                 uint32_t          divisor_lo  /**< */,
                                 uint32_t          remainder_hi  /**< */,
                                 uint32_t          remainder_lo  /**< */)
d861 4
a864 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_SWAP_BUFFERS,
        /* isvoid */ 0
d889 1
a889 1
xcb_dri2_swap_buffers_reply (xcb_connection_t                *c  /**< */,
d891 1
a891 1
                             xcb_generic_error_t            **e  /**< */)
d897 2
a898 2
xcb_dri2_get_msc (xcb_connection_t *c  /**< */,
                  xcb_drawable_t    drawable  /**< */)
d901 4
a904 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_GET_MSC,
        /* isvoid */ 0
d923 2
a924 2
xcb_dri2_get_msc_unchecked (xcb_connection_t *c  /**< */,
                            xcb_drawable_t    drawable  /**< */)
d927 4
a930 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_GET_MSC,
        /* isvoid */ 0
d949 1
a949 1
xcb_dri2_get_msc_reply (xcb_connection_t           *c  /**< */,
d951 1
a951 1
                        xcb_generic_error_t       **e  /**< */)
d957 8
a964 8
xcb_dri2_wait_msc (xcb_connection_t *c  /**< */,
                   xcb_drawable_t    drawable  /**< */,
                   uint32_t          target_msc_hi  /**< */,
                   uint32_t          target_msc_lo  /**< */,
                   uint32_t          divisor_hi  /**< */,
                   uint32_t          divisor_lo  /**< */,
                   uint32_t          remainder_hi  /**< */,
                   uint32_t          remainder_lo  /**< */)
d967 4
a970 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_WAIT_MSC,
        /* isvoid */ 0
d995 8
a1002 8
xcb_dri2_wait_msc_unchecked (xcb_connection_t *c  /**< */,
                             xcb_drawable_t    drawable  /**< */,
                             uint32_t          target_msc_hi  /**< */,
                             uint32_t          target_msc_lo  /**< */,
                             uint32_t          divisor_hi  /**< */,
                             uint32_t          divisor_lo  /**< */,
                             uint32_t          remainder_hi  /**< */,
                             uint32_t          remainder_lo  /**< */)
d1005 4
a1008 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_WAIT_MSC,
        /* isvoid */ 0
d1033 1
a1033 1
xcb_dri2_wait_msc_reply (xcb_connection_t            *c  /**< */,
d1035 1
a1035 1
                         xcb_generic_error_t        **e  /**< */)
d1041 4
a1044 4
xcb_dri2_wait_sbc (xcb_connection_t *c  /**< */,
                   xcb_drawable_t    drawable  /**< */,
                   uint32_t          target_sbc_hi  /**< */,
                   uint32_t          target_sbc_lo  /**< */)
d1047 4
a1050 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_WAIT_SBC,
        /* isvoid */ 0
d1071 4
a1074 4
xcb_dri2_wait_sbc_unchecked (xcb_connection_t *c  /**< */,
                             xcb_drawable_t    drawable  /**< */,
                             uint32_t          target_sbc_hi  /**< */,
                             uint32_t          target_sbc_lo  /**< */)
d1077 4
a1080 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_WAIT_SBC,
        /* isvoid */ 0
d1101 1
a1101 1
xcb_dri2_wait_sbc_reply (xcb_connection_t            *c  /**< */,
d1103 1
a1103 1
                         xcb_generic_error_t        **e  /**< */)
d1109 3
a1111 3
xcb_dri2_swap_interval_checked (xcb_connection_t *c  /**< */,
                                xcb_drawable_t    drawable  /**< */,
                                uint32_t          interval  /**< */)
d1114 4
a1117 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_SWAP_INTERVAL,
        /* isvoid */ 1
d1137 3
a1139 3
xcb_dri2_swap_interval (xcb_connection_t *c  /**< */,
                        xcb_drawable_t    drawable  /**< */,
                        uint32_t          interval  /**< */)
d1142 4
a1145 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_SWAP_INTERVAL,
        /* isvoid */ 1
d1165 3
a1167 3
xcb_dri2_get_param (xcb_connection_t *c  /**< */,
                    xcb_drawable_t    drawable  /**< */,
                    uint32_t          param  /**< */)
d1170 4
a1173 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_GET_PARAM,
        /* isvoid */ 0
d1193 3
a1195 3
xcb_dri2_get_param_unchecked (xcb_connection_t *c  /**< */,
                              xcb_drawable_t    drawable  /**< */,
                              uint32_t          param  /**< */)
d1198 4
a1201 4
        /* count */ 2,
        /* ext */ &xcb_dri2_id,
        /* opcode */ XCB_DRI2_GET_PARAM,
        /* isvoid */ 0
d1221 1
a1221 1
xcb_dri2_get_param_reply (xcb_connection_t             *c  /**< */,
d1223 1
a1223 1
                          xcb_generic_error_t         **e  /**< */)
@


1.4
log
@Update build system and generated files for libxcb 1.10.
@
text
@a20 10

/*****************************************************************************
 **
 ** void xcb_dri2_dri2_buffer_next
 ** 
 ** @@param xcb_dri2_dri2_buffer_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a28 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_dri2_dri2_buffer_end
 ** 
 ** @@param xcb_dri2_dri2_buffer_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a38 10

/*****************************************************************************
 **
 ** void xcb_dri2_attach_format_next
 ** 
 ** @@param xcb_dri2_attach_format_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a46 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_dri2_attach_format_end
 ** 
 ** @@param xcb_dri2_attach_format_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a56 12

/*****************************************************************************
 **
 ** xcb_dri2_query_version_cookie_t xcb_dri2_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_dri2_query_version_cookie_t
 **
 *****************************************************************************/
 
d68 1
a68 1
    
d72 1
a72 1
    
d75 1
a75 1
    
d80 1
a80 1
    
a84 12

/*****************************************************************************
 **
 ** xcb_dri2_query_version_cookie_t xcb_dri2_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          major_version
 ** @@param uint32_t          minor_version
 ** @@returns xcb_dri2_query_version_cookie_t
 **
 *****************************************************************************/
 
d96 1
a96 1
    
d100 1
a100 1
    
d103 1
a103 1
    
d108 1
a108 1
    
a112 12

/*****************************************************************************
 **
 ** xcb_dri2_query_version_reply_t * xcb_dri2_query_version_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_dri2_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_dri2_query_version_reply_t *
 **
 *****************************************************************************/
 
a175 12

/*****************************************************************************
 **
 ** xcb_dri2_connect_cookie_t xcb_dri2_connect
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          driver_type
 ** @@returns xcb_dri2_connect_cookie_t
 **
 *****************************************************************************/
 
d187 1
a187 1
    
d191 1
a191 1
    
d194 1
a194 1
    
d199 1
a199 1
    
a203 12

/*****************************************************************************
 **
 ** xcb_dri2_connect_cookie_t xcb_dri2_connect_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          driver_type
 ** @@returns xcb_dri2_connect_cookie_t
 **
 *****************************************************************************/
 
d215 1
a215 1
    
d219 1
a219 1
    
d222 1
a222 1
    
d227 1
a227 1
    
a231 10

/*****************************************************************************
 **
 ** char * xcb_dri2_connect_driver_name
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a237 10

/*****************************************************************************
 **
 ** int xcb_dri2_connect_driver_name_length
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a243 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_dri2_connect_driver_name_end
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a253 10

/*****************************************************************************
 **
 ** void * xcb_dri2_connect_alignment_pad
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns void *
 **
 *****************************************************************************/
 
a260 10

/*****************************************************************************
 **
 ** int xcb_dri2_connect_alignment_pad_length
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a266 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_dri2_connect_alignment_pad_end
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a277 10

/*****************************************************************************
 **
 ** char * xcb_dri2_connect_device_name
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a284 10

/*****************************************************************************
 **
 ** int xcb_dri2_connect_device_name_length
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a290 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_dri2_connect_device_name_end
 ** 
 ** @@param const xcb_dri2_connect_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a301 12

/*****************************************************************************
 **
 ** xcb_dri2_connect_reply_t * xcb_dri2_connect_reply
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_dri2_connect_cookie_t   cookie
 ** @@param xcb_generic_error_t       **e
 ** @@returns xcb_dri2_connect_reply_t *
 **
 *****************************************************************************/
 
a309 12

/*****************************************************************************
 **
 ** xcb_dri2_authenticate_cookie_t xcb_dri2_authenticate
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          magic
 ** @@returns xcb_dri2_authenticate_cookie_t
 **
 *****************************************************************************/
 
d321 1
a321 1
    
d325 1
a325 1
    
d328 1
a328 1
    
d333 1
a333 1
    
a337 12

/*****************************************************************************
 **
 ** xcb_dri2_authenticate_cookie_t xcb_dri2_authenticate_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          magic
 ** @@returns xcb_dri2_authenticate_cookie_t
 **
 *****************************************************************************/
 
d349 1
a349 1
    
d353 1
a353 1
    
d356 1
a356 1
    
d361 1
a361 1
    
a365 12

/*****************************************************************************
 **
 ** xcb_dri2_authenticate_reply_t * xcb_dri2_authenticate_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_dri2_authenticate_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_dri2_authenticate_reply_t *
 **
 *****************************************************************************/
 
a373 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri2_create_drawable_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d384 1
a384 1
    
d388 1
a388 1
    
d390 1
a390 1
    
d395 1
a395 1
    
a399 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri2_create_drawable
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d410 1
a410 1
    
d414 1
a414 1
    
d416 1
a416 1
    
d421 1
a421 1
    
a425 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri2_destroy_drawable_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d436 1
a436 1
    
d440 1
a440 1
    
d442 1
a442 1
    
d447 1
a447 1
    
a451 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri2_destroy_drawable
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d462 1
a462 1
    
d466 1
a466 1
    
d468 1
a468 1
    
d473 1
a473 1
    
a508 14

/*****************************************************************************
 **
 ** xcb_dri2_get_buffers_cookie_t xcb_dri2_get_buffers
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          count
 ** @@param uint32_t          attachments_len
 ** @@param const uint32_t   *attachments
 ** @@returns xcb_dri2_get_buffers_cookie_t
 **
 *****************************************************************************/
 
d522 1
a522 1
    
d526 1
a526 1
    
d529 1
a529 1
    
d539 1
a539 1
    
a543 14

/*****************************************************************************
 **
 ** xcb_dri2_get_buffers_cookie_t xcb_dri2_get_buffers_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          count
 ** @@param uint32_t          attachments_len
 ** @@param const uint32_t   *attachments
 ** @@returns xcb_dri2_get_buffers_cookie_t
 **
 *****************************************************************************/
 
d557 1
a557 1
    
d561 1
a561 1
    
d564 1
a564 1
    
d574 1
a574 1
    
a578 10

/*****************************************************************************
 **
 ** xcb_dri2_dri2_buffer_t * xcb_dri2_get_buffers_buffers
 ** 
 ** @@param const xcb_dri2_get_buffers_reply_t *R
 ** @@returns xcb_dri2_dri2_buffer_t *
 **
 *****************************************************************************/
 
a584 10

/*****************************************************************************
 **
 ** int xcb_dri2_get_buffers_buffers_length
 ** 
 ** @@param const xcb_dri2_get_buffers_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a590 10

/*****************************************************************************
 **
 ** xcb_dri2_dri2_buffer_iterator_t xcb_dri2_get_buffers_buffers_iterator
 ** 
 ** @@param const xcb_dri2_get_buffers_reply_t *R
 ** @@returns xcb_dri2_dri2_buffer_iterator_t
 **
 *****************************************************************************/
 
a600 12

/*****************************************************************************
 **
 ** xcb_dri2_get_buffers_reply_t * xcb_dri2_get_buffers_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_dri2_get_buffers_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_dri2_get_buffers_reply_t *
 **
 *****************************************************************************/
 
a608 14

/*****************************************************************************
 **
 ** xcb_dri2_copy_region_cookie_t xcb_dri2_copy_region
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          region
 ** @@param uint32_t          dest
 ** @@param uint32_t          src
 ** @@returns xcb_dri2_copy_region_cookie_t
 **
 *****************************************************************************/
 
d622 1
a622 1
    
d626 1
a626 1
    
d631 1
a631 1
    
d636 1
a636 1
    
a640 14

/*****************************************************************************
 **
 ** xcb_dri2_copy_region_cookie_t xcb_dri2_copy_region_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          region
 ** @@param uint32_t          dest
 ** @@param uint32_t          src
 ** @@returns xcb_dri2_copy_region_cookie_t
 **
 *****************************************************************************/
 
d654 1
a654 1
    
d658 1
a658 1
    
d663 1
a663 1
    
d668 1
a668 1
    
a672 12

/*****************************************************************************
 **
 ** xcb_dri2_copy_region_reply_t * xcb_dri2_copy_region_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_dri2_copy_region_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_dri2_copy_region_reply_t *
 **
 *****************************************************************************/
 
a711 14

/*****************************************************************************
 **
 ** xcb_dri2_get_buffers_with_format_cookie_t xcb_dri2_get_buffers_with_format
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_drawable_t                  drawable
 ** @@param uint32_t                        count
 ** @@param uint32_t                        attachments_len
 ** @@param const xcb_dri2_attach_format_t *attachments
 ** @@returns xcb_dri2_get_buffers_with_format_cookie_t
 **
 *****************************************************************************/
 
d725 1
a725 1
    
d729 1
a729 1
    
d732 1
a732 1
    
d742 1
a742 1
    
a746 14

/*****************************************************************************
 **
 ** xcb_dri2_get_buffers_with_format_cookie_t xcb_dri2_get_buffers_with_format_unchecked
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_drawable_t                  drawable
 ** @@param uint32_t                        count
 ** @@param uint32_t                        attachments_len
 ** @@param const xcb_dri2_attach_format_t *attachments
 ** @@returns xcb_dri2_get_buffers_with_format_cookie_t
 **
 *****************************************************************************/
 
d760 1
a760 1
    
d764 1
a764 1
    
d767 1
a767 1
    
d777 1
a777 1
    
a781 10

/*****************************************************************************
 **
 ** xcb_dri2_dri2_buffer_t * xcb_dri2_get_buffers_with_format_buffers
 ** 
 ** @@param const xcb_dri2_get_buffers_with_format_reply_t *R
 ** @@returns xcb_dri2_dri2_buffer_t *
 **
 *****************************************************************************/
 
a787 10

/*****************************************************************************
 **
 ** int xcb_dri2_get_buffers_with_format_buffers_length
 ** 
 ** @@param const xcb_dri2_get_buffers_with_format_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a793 10

/*****************************************************************************
 **
 ** xcb_dri2_dri2_buffer_iterator_t xcb_dri2_get_buffers_with_format_buffers_iterator
 ** 
 ** @@param const xcb_dri2_get_buffers_with_format_reply_t *R
 ** @@returns xcb_dri2_dri2_buffer_iterator_t
 **
 *****************************************************************************/
 
a803 12

/*****************************************************************************
 **
 ** xcb_dri2_get_buffers_with_format_reply_t * xcb_dri2_get_buffers_with_format_reply
 ** 
 ** @@param xcb_connection_t                           *c
 ** @@param xcb_dri2_get_buffers_with_format_cookie_t   cookie
 ** @@param xcb_generic_error_t                       **e
 ** @@returns xcb_dri2_get_buffers_with_format_reply_t *
 **
 *****************************************************************************/
 
a811 17

/*****************************************************************************
 **
 ** xcb_dri2_swap_buffers_cookie_t xcb_dri2_swap_buffers
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          target_msc_hi
 ** @@param uint32_t          target_msc_lo
 ** @@param uint32_t          divisor_hi
 ** @@param uint32_t          divisor_lo
 ** @@param uint32_t          remainder_hi
 ** @@param uint32_t          remainder_lo
 ** @@returns xcb_dri2_swap_buffers_cookie_t
 **
 *****************************************************************************/
 
d828 1
a828 1
    
d832 1
a832 1
    
d840 1
a840 1
    
d845 1
a845 1
    
a849 17

/*****************************************************************************
 **
 ** xcb_dri2_swap_buffers_cookie_t xcb_dri2_swap_buffers_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          target_msc_hi
 ** @@param uint32_t          target_msc_lo
 ** @@param uint32_t          divisor_hi
 ** @@param uint32_t          divisor_lo
 ** @@param uint32_t          remainder_hi
 ** @@param uint32_t          remainder_lo
 ** @@returns xcb_dri2_swap_buffers_cookie_t
 **
 *****************************************************************************/
 
d866 1
a866 1
    
d870 1
a870 1
    
d878 1
a878 1
    
d883 1
a883 1
    
a887 12

/*****************************************************************************
 **
 ** xcb_dri2_swap_buffers_reply_t * xcb_dri2_swap_buffers_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_dri2_swap_buffers_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_dri2_swap_buffers_reply_t *
 **
 *****************************************************************************/
 
a895 11

/*****************************************************************************
 **
 ** xcb_dri2_get_msc_cookie_t xcb_dri2_get_msc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_dri2_get_msc_cookie_t
 **
 *****************************************************************************/
 
d906 1
a906 1
    
d910 1
a910 1
    
d912 1
a912 1
    
d917 1
a917 1
    
a921 11

/*****************************************************************************
 **
 ** xcb_dri2_get_msc_cookie_t xcb_dri2_get_msc_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@returns xcb_dri2_get_msc_cookie_t
 **
 *****************************************************************************/
 
d932 1
a932 1
    
d936 1
a936 1
    
d938 1
a938 1
    
d943 1
a943 1
    
a947 12

/*****************************************************************************
 **
 ** xcb_dri2_get_msc_reply_t * xcb_dri2_get_msc_reply
 ** 
 ** @@param xcb_connection_t           *c
 ** @@param xcb_dri2_get_msc_cookie_t   cookie
 ** @@param xcb_generic_error_t       **e
 ** @@returns xcb_dri2_get_msc_reply_t *
 **
 *****************************************************************************/
 
a955 17

/*****************************************************************************
 **
 ** xcb_dri2_wait_msc_cookie_t xcb_dri2_wait_msc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          target_msc_hi
 ** @@param uint32_t          target_msc_lo
 ** @@param uint32_t          divisor_hi
 ** @@param uint32_t          divisor_lo
 ** @@param uint32_t          remainder_hi
 ** @@param uint32_t          remainder_lo
 ** @@returns xcb_dri2_wait_msc_cookie_t
 **
 *****************************************************************************/
 
d972 1
a972 1
    
d976 1
a976 1
    
d984 1
a984 1
    
d989 1
a989 1
    
a993 17

/*****************************************************************************
 **
 ** xcb_dri2_wait_msc_cookie_t xcb_dri2_wait_msc_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          target_msc_hi
 ** @@param uint32_t          target_msc_lo
 ** @@param uint32_t          divisor_hi
 ** @@param uint32_t          divisor_lo
 ** @@param uint32_t          remainder_hi
 ** @@param uint32_t          remainder_lo
 ** @@returns xcb_dri2_wait_msc_cookie_t
 **
 *****************************************************************************/
 
d1010 1
a1010 1
    
d1014 1
a1014 1
    
d1022 1
a1022 1
    
d1027 1
a1027 1
    
a1031 12

/*****************************************************************************
 **
 ** xcb_dri2_wait_msc_reply_t * xcb_dri2_wait_msc_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_dri2_wait_msc_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_dri2_wait_msc_reply_t *
 **
 *****************************************************************************/
 
a1039 13

/*****************************************************************************
 **
 ** xcb_dri2_wait_sbc_cookie_t xcb_dri2_wait_sbc
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          target_sbc_hi
 ** @@param uint32_t          target_sbc_lo
 ** @@returns xcb_dri2_wait_sbc_cookie_t
 **
 *****************************************************************************/
 
d1052 1
a1052 1
    
d1056 1
a1056 1
    
d1060 1
a1060 1
    
d1065 1
a1065 1
    
a1069 13

/*****************************************************************************
 **
 ** xcb_dri2_wait_sbc_cookie_t xcb_dri2_wait_sbc_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          target_sbc_hi
 ** @@param uint32_t          target_sbc_lo
 ** @@returns xcb_dri2_wait_sbc_cookie_t
 **
 *****************************************************************************/
 
d1082 1
a1082 1
    
d1086 1
a1086 1
    
d1090 1
a1090 1
    
d1095 1
a1095 1
    
a1099 12

/*****************************************************************************
 **
 ** xcb_dri2_wait_sbc_reply_t * xcb_dri2_wait_sbc_reply
 ** 
 ** @@param xcb_connection_t            *c
 ** @@param xcb_dri2_wait_sbc_cookie_t   cookie
 ** @@param xcb_generic_error_t        **e
 ** @@returns xcb_dri2_wait_sbc_reply_t *
 **
 *****************************************************************************/
 
a1107 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri2_swap_interval_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          interval
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1119 1
a1119 1
    
d1123 1
a1123 1
    
d1126 1
a1126 1
    
d1131 1
a1131 1
    
a1135 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_dri2_swap_interval
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          interval
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1147 1
a1147 1
    
d1151 1
a1151 1
    
d1154 1
a1154 1
    
d1159 1
a1159 1
    
a1163 12

/*****************************************************************************
 **
 ** xcb_dri2_get_param_cookie_t xcb_dri2_get_param
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          param
 ** @@returns xcb_dri2_get_param_cookie_t
 **
 *****************************************************************************/
 
d1175 1
a1175 1
    
d1179 1
a1179 1
    
d1182 1
a1182 1
    
d1187 1
a1187 1
    
a1191 12

/*****************************************************************************
 **
 ** xcb_dri2_get_param_cookie_t xcb_dri2_get_param_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param uint32_t          param
 ** @@returns xcb_dri2_get_param_cookie_t
 **
 *****************************************************************************/
 
d1203 1
a1203 1
    
d1207 1
a1207 1
    
d1210 1
a1210 1
    
d1215 1
a1215 1
    
a1219 12

/*****************************************************************************
 **
 ** xcb_dri2_get_param_reply_t * xcb_dri2_get_param_reply
 ** 
 ** @@param xcb_connection_t             *c
 ** @@param xcb_dri2_get_param_cookie_t   cookie
 ** @@param xcb_generic_error_t         **e
 ** @@returns xcb_dri2_get_param_reply_t *
 **
 *****************************************************************************/
 
@


1.3
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d205 1
a205 1
    unsigned int xcb_align_to;
d210 2
d768 1
a768 1
    unsigned int xcb_align_to;
d773 2
d1081 1
a1081 1
    unsigned int xcb_align_to;
d1086 2
d1812 100
@


1.2
log
@Update to libxcb 1.8.1. Tested by krw@@, mpi@@, shadchin@@
@
text
@d6 4
d12 1
d15 2
d132 1
d172 1
d197 53
d285 1
d325 1
d396 1
a396 1
    return (void *) ((char *) prev.data + XCB_TYPE_PAD(void, prev.index) + 0);
d545 1
d585 1
d642 1
d679 1
d716 1
d753 1
d758 29
d826 1
d831 1
d875 1
d880 1
d998 1
d1044 1
d1069 29
d1137 1
d1142 1
d1186 1
d1191 1
d1318 1
d1373 1
d1430 1
d1467 1
d1542 1
d1597 1
d1660 1
d1703 1
d1763 1
d1803 1
@


1.1
log
@regen for xcb-proto 1.6
@
text
@d321 54
d385 1
a385 1
    xcb_generic_iterator_t prev = xcb_dri2_connect_driver_name_end(R);
d419 1
a419 1
    xcb_generic_iterator_t child = xcb_dri2_connect_driver_name_end(R);
d1128 530
@

