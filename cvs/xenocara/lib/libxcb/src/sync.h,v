head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	mKDGsTNpiR2zRHYQ;

1.6
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	01TEvO4uNHLqFv7N;

1.5
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.03.27.19.14.21;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.31.16.43.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.47;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.47;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from sync.xml by c_client.py.
 * Edit at your peril.
 */

/**
 * @@defgroup XCB_Sync_API XCB Sync API
 * @@brief Sync XCB Protocol Implementation.
 * @@{
 **/

#ifndef __SYNC_H
#define __SYNC_H

#include "xcb.h"
#include "xproto.h"

#ifdef __cplusplus
extern "C" {
#endif

#define XCB_SYNC_MAJOR_VERSION 3
#define XCB_SYNC_MINOR_VERSION 1

extern xcb_extension_t xcb_sync_id;

typedef uint32_t xcb_sync_alarm_t;

/**
 * @@brief xcb_sync_alarm_iterator_t
 **/
typedef struct xcb_sync_alarm_iterator_t {
    xcb_sync_alarm_t *data;
    int               rem;
    int               index;
} xcb_sync_alarm_iterator_t;

typedef enum xcb_sync_alarmstate_t {
    XCB_SYNC_ALARMSTATE_ACTIVE = 0,
    XCB_SYNC_ALARMSTATE_INACTIVE = 1,
    XCB_SYNC_ALARMSTATE_DESTROYED = 2
} xcb_sync_alarmstate_t;

typedef uint32_t xcb_sync_counter_t;

/**
 * @@brief xcb_sync_counter_iterator_t
 **/
typedef struct xcb_sync_counter_iterator_t {
    xcb_sync_counter_t *data;
    int                 rem;
    int                 index;
} xcb_sync_counter_iterator_t;

typedef uint32_t xcb_sync_fence_t;

/**
 * @@brief xcb_sync_fence_iterator_t
 **/
typedef struct xcb_sync_fence_iterator_t {
    xcb_sync_fence_t *data;
    int               rem;
    int               index;
} xcb_sync_fence_iterator_t;

typedef enum xcb_sync_testtype_t {
    XCB_SYNC_TESTTYPE_POSITIVE_TRANSITION = 0,
    XCB_SYNC_TESTTYPE_NEGATIVE_TRANSITION = 1,
    XCB_SYNC_TESTTYPE_POSITIVE_COMPARISON = 2,
    XCB_SYNC_TESTTYPE_NEGATIVE_COMPARISON = 3
} xcb_sync_testtype_t;

typedef enum xcb_sync_valuetype_t {
    XCB_SYNC_VALUETYPE_ABSOLUTE = 0,
    XCB_SYNC_VALUETYPE_RELATIVE = 1
} xcb_sync_valuetype_t;

typedef enum xcb_sync_ca_t {
    XCB_SYNC_CA_COUNTER = 1,
    XCB_SYNC_CA_VALUE_TYPE = 2,
    XCB_SYNC_CA_VALUE = 4,
    XCB_SYNC_CA_TEST_TYPE = 8,
    XCB_SYNC_CA_DELTA = 16,
    XCB_SYNC_CA_EVENTS = 32
} xcb_sync_ca_t;

/**
 * @@brief xcb_sync_int64_t
 **/
typedef struct xcb_sync_int64_t {
    int32_t  hi;
    uint32_t lo;
} xcb_sync_int64_t;

/**
 * @@brief xcb_sync_int64_iterator_t
 **/
typedef struct xcb_sync_int64_iterator_t {
    xcb_sync_int64_t *data;
    int               rem;
    int               index;
} xcb_sync_int64_iterator_t;

/**
 * @@brief xcb_sync_systemcounter_t
 **/
typedef struct xcb_sync_systemcounter_t {
    xcb_sync_counter_t counter;
    xcb_sync_int64_t   resolution;
    uint16_t           name_len;
} xcb_sync_systemcounter_t;

/**
 * @@brief xcb_sync_systemcounter_iterator_t
 **/
typedef struct xcb_sync_systemcounter_iterator_t {
    xcb_sync_systemcounter_t *data;
    int                       rem;
    int                       index;
} xcb_sync_systemcounter_iterator_t;

/**
 * @@brief xcb_sync_trigger_t
 **/
typedef struct xcb_sync_trigger_t {
    xcb_sync_counter_t counter;
    uint32_t           wait_type;
    xcb_sync_int64_t   wait_value;
    uint32_t           test_type;
} xcb_sync_trigger_t;

/**
 * @@brief xcb_sync_trigger_iterator_t
 **/
typedef struct xcb_sync_trigger_iterator_t {
    xcb_sync_trigger_t *data;
    int                 rem;
    int                 index;
} xcb_sync_trigger_iterator_t;

/**
 * @@brief xcb_sync_waitcondition_t
 **/
typedef struct xcb_sync_waitcondition_t {
    xcb_sync_trigger_t trigger;
    xcb_sync_int64_t   event_threshold;
} xcb_sync_waitcondition_t;

/**
 * @@brief xcb_sync_waitcondition_iterator_t
 **/
typedef struct xcb_sync_waitcondition_iterator_t {
    xcb_sync_waitcondition_t *data;
    int                       rem;
    int                       index;
} xcb_sync_waitcondition_iterator_t;

/** Opcode for xcb_sync_counter. */
#define XCB_SYNC_COUNTER 0

/**
 * @@brief xcb_sync_counter_error_t
 **/
typedef struct xcb_sync_counter_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
    uint32_t bad_counter;
    uint16_t minor_opcode;
    uint8_t  major_opcode;
} xcb_sync_counter_error_t;

/** Opcode for xcb_sync_alarm. */
#define XCB_SYNC_ALARM 1

/**
 * @@brief xcb_sync_alarm_error_t
 **/
typedef struct xcb_sync_alarm_error_t {
    uint8_t  response_type;
    uint8_t  error_code;
    uint16_t sequence;
    uint32_t bad_alarm;
    uint16_t minor_opcode;
    uint8_t  major_opcode;
} xcb_sync_alarm_error_t;

/**
 * @@brief xcb_sync_initialize_cookie_t
 **/
typedef struct xcb_sync_initialize_cookie_t {
    unsigned int sequence;
} xcb_sync_initialize_cookie_t;

/** Opcode for xcb_sync_initialize. */
#define XCB_SYNC_INITIALIZE 0

/**
 * @@brief xcb_sync_initialize_request_t
 **/
typedef struct xcb_sync_initialize_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint8_t  desired_major_version;
    uint8_t  desired_minor_version;
} xcb_sync_initialize_request_t;

/**
 * @@brief xcb_sync_initialize_reply_t
 **/
typedef struct xcb_sync_initialize_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  major_version;
    uint8_t  minor_version;
    uint8_t  pad1[22];
} xcb_sync_initialize_reply_t;

/**
 * @@brief xcb_sync_list_system_counters_cookie_t
 **/
typedef struct xcb_sync_list_system_counters_cookie_t {
    unsigned int sequence;
} xcb_sync_list_system_counters_cookie_t;

/** Opcode for xcb_sync_list_system_counters. */
#define XCB_SYNC_LIST_SYSTEM_COUNTERS 1

/**
 * @@brief xcb_sync_list_system_counters_request_t
 **/
typedef struct xcb_sync_list_system_counters_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_sync_list_system_counters_request_t;

/**
 * @@brief xcb_sync_list_system_counters_reply_t
 **/
typedef struct xcb_sync_list_system_counters_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint32_t counters_len;
    uint8_t  pad1[20];
} xcb_sync_list_system_counters_reply_t;

/** Opcode for xcb_sync_create_counter. */
#define XCB_SYNC_CREATE_COUNTER 2

/**
 * @@brief xcb_sync_create_counter_request_t
 **/
typedef struct xcb_sync_create_counter_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_sync_counter_t id;
    xcb_sync_int64_t   initial_value;
} xcb_sync_create_counter_request_t;

/** Opcode for xcb_sync_destroy_counter. */
#define XCB_SYNC_DESTROY_COUNTER 6

/**
 * @@brief xcb_sync_destroy_counter_request_t
 **/
typedef struct xcb_sync_destroy_counter_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_sync_counter_t counter;
} xcb_sync_destroy_counter_request_t;

/**
 * @@brief xcb_sync_query_counter_cookie_t
 **/
typedef struct xcb_sync_query_counter_cookie_t {
    unsigned int sequence;
} xcb_sync_query_counter_cookie_t;

/** Opcode for xcb_sync_query_counter. */
#define XCB_SYNC_QUERY_COUNTER 5

/**
 * @@brief xcb_sync_query_counter_request_t
 **/
typedef struct xcb_sync_query_counter_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_sync_counter_t counter;
} xcb_sync_query_counter_request_t;

/**
 * @@brief xcb_sync_query_counter_reply_t
 **/
typedef struct xcb_sync_query_counter_reply_t {
    uint8_t          response_type;
    uint8_t          pad0;
    uint16_t         sequence;
    uint32_t         length;
    xcb_sync_int64_t counter_value;
} xcb_sync_query_counter_reply_t;

/** Opcode for xcb_sync_await. */
#define XCB_SYNC_AWAIT 7

/**
 * @@brief xcb_sync_await_request_t
 **/
typedef struct xcb_sync_await_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_sync_await_request_t;

/** Opcode for xcb_sync_change_counter. */
#define XCB_SYNC_CHANGE_COUNTER 4

/**
 * @@brief xcb_sync_change_counter_request_t
 **/
typedef struct xcb_sync_change_counter_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_sync_counter_t counter;
    xcb_sync_int64_t   amount;
} xcb_sync_change_counter_request_t;

/** Opcode for xcb_sync_set_counter. */
#define XCB_SYNC_SET_COUNTER 3

/**
 * @@brief xcb_sync_set_counter_request_t
 **/
typedef struct xcb_sync_set_counter_request_t {
    uint8_t            major_opcode;
    uint8_t            minor_opcode;
    uint16_t           length;
    xcb_sync_counter_t counter;
    xcb_sync_int64_t   value;
} xcb_sync_set_counter_request_t;

/**
 * @@brief xcb_sync_create_alarm_value_list_t
 **/
typedef struct xcb_sync_create_alarm_value_list_t {
    xcb_sync_counter_t counter;
    uint32_t           valueType;
    xcb_sync_int64_t   value;
    uint32_t           testType;
    xcb_sync_int64_t   delta;
    uint32_t           events;
} xcb_sync_create_alarm_value_list_t;

/** Opcode for xcb_sync_create_alarm. */
#define XCB_SYNC_CREATE_ALARM 8

/**
 * @@brief xcb_sync_create_alarm_request_t
 **/
typedef struct xcb_sync_create_alarm_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_sync_alarm_t id;
    uint32_t         value_mask;
} xcb_sync_create_alarm_request_t;

/**
 * @@brief xcb_sync_change_alarm_value_list_t
 **/
typedef struct xcb_sync_change_alarm_value_list_t {
    xcb_sync_counter_t counter;
    uint32_t           valueType;
    xcb_sync_int64_t   value;
    uint32_t           testType;
    xcb_sync_int64_t   delta;
    uint32_t           events;
} xcb_sync_change_alarm_value_list_t;

/** Opcode for xcb_sync_change_alarm. */
#define XCB_SYNC_CHANGE_ALARM 9

/**
 * @@brief xcb_sync_change_alarm_request_t
 **/
typedef struct xcb_sync_change_alarm_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_sync_alarm_t id;
    uint32_t         value_mask;
} xcb_sync_change_alarm_request_t;

/** Opcode for xcb_sync_destroy_alarm. */
#define XCB_SYNC_DESTROY_ALARM 11

/**
 * @@brief xcb_sync_destroy_alarm_request_t
 **/
typedef struct xcb_sync_destroy_alarm_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_sync_alarm_t alarm;
} xcb_sync_destroy_alarm_request_t;

/**
 * @@brief xcb_sync_query_alarm_cookie_t
 **/
typedef struct xcb_sync_query_alarm_cookie_t {
    unsigned int sequence;
} xcb_sync_query_alarm_cookie_t;

/** Opcode for xcb_sync_query_alarm. */
#define XCB_SYNC_QUERY_ALARM 10

/**
 * @@brief xcb_sync_query_alarm_request_t
 **/
typedef struct xcb_sync_query_alarm_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_sync_alarm_t alarm;
} xcb_sync_query_alarm_request_t;

/**
 * @@brief xcb_sync_query_alarm_reply_t
 **/
typedef struct xcb_sync_query_alarm_reply_t {
    uint8_t            response_type;
    uint8_t            pad0;
    uint16_t           sequence;
    uint32_t           length;
    xcb_sync_trigger_t trigger;
    xcb_sync_int64_t   delta;
    uint8_t            events;
    uint8_t            state;
    uint8_t            pad1[2];
} xcb_sync_query_alarm_reply_t;

/** Opcode for xcb_sync_set_priority. */
#define XCB_SYNC_SET_PRIORITY 12

/**
 * @@brief xcb_sync_set_priority_request_t
 **/
typedef struct xcb_sync_set_priority_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t id;
    int32_t  priority;
} xcb_sync_set_priority_request_t;

/**
 * @@brief xcb_sync_get_priority_cookie_t
 **/
typedef struct xcb_sync_get_priority_cookie_t {
    unsigned int sequence;
} xcb_sync_get_priority_cookie_t;

/** Opcode for xcb_sync_get_priority. */
#define XCB_SYNC_GET_PRIORITY 13

/**
 * @@brief xcb_sync_get_priority_request_t
 **/
typedef struct xcb_sync_get_priority_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
    uint32_t id;
} xcb_sync_get_priority_request_t;

/**
 * @@brief xcb_sync_get_priority_reply_t
 **/
typedef struct xcb_sync_get_priority_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    int32_t  priority;
} xcb_sync_get_priority_reply_t;

/** Opcode for xcb_sync_create_fence. */
#define XCB_SYNC_CREATE_FENCE 14

/**
 * @@brief xcb_sync_create_fence_request_t
 **/
typedef struct xcb_sync_create_fence_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_drawable_t   drawable;
    xcb_sync_fence_t fence;
    uint8_t          initially_triggered;
} xcb_sync_create_fence_request_t;

/** Opcode for xcb_sync_trigger_fence. */
#define XCB_SYNC_TRIGGER_FENCE 15

/**
 * @@brief xcb_sync_trigger_fence_request_t
 **/
typedef struct xcb_sync_trigger_fence_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_sync_fence_t fence;
} xcb_sync_trigger_fence_request_t;

/** Opcode for xcb_sync_reset_fence. */
#define XCB_SYNC_RESET_FENCE 16

/**
 * @@brief xcb_sync_reset_fence_request_t
 **/
typedef struct xcb_sync_reset_fence_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_sync_fence_t fence;
} xcb_sync_reset_fence_request_t;

/** Opcode for xcb_sync_destroy_fence. */
#define XCB_SYNC_DESTROY_FENCE 17

/**
 * @@brief xcb_sync_destroy_fence_request_t
 **/
typedef struct xcb_sync_destroy_fence_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_sync_fence_t fence;
} xcb_sync_destroy_fence_request_t;

/**
 * @@brief xcb_sync_query_fence_cookie_t
 **/
typedef struct xcb_sync_query_fence_cookie_t {
    unsigned int sequence;
} xcb_sync_query_fence_cookie_t;

/** Opcode for xcb_sync_query_fence. */
#define XCB_SYNC_QUERY_FENCE 18

/**
 * @@brief xcb_sync_query_fence_request_t
 **/
typedef struct xcb_sync_query_fence_request_t {
    uint8_t          major_opcode;
    uint8_t          minor_opcode;
    uint16_t         length;
    xcb_sync_fence_t fence;
} xcb_sync_query_fence_request_t;

/**
 * @@brief xcb_sync_query_fence_reply_t
 **/
typedef struct xcb_sync_query_fence_reply_t {
    uint8_t  response_type;
    uint8_t  pad0;
    uint16_t sequence;
    uint32_t length;
    uint8_t  triggered;
    uint8_t  pad1[23];
} xcb_sync_query_fence_reply_t;

/** Opcode for xcb_sync_await_fence. */
#define XCB_SYNC_AWAIT_FENCE 19

/**
 * @@brief xcb_sync_await_fence_request_t
 **/
typedef struct xcb_sync_await_fence_request_t {
    uint8_t  major_opcode;
    uint8_t  minor_opcode;
    uint16_t length;
} xcb_sync_await_fence_request_t;

/** Opcode for xcb_sync_counter_notify. */
#define XCB_SYNC_COUNTER_NOTIFY 0

/**
 * @@brief xcb_sync_counter_notify_event_t
 **/
typedef struct xcb_sync_counter_notify_event_t {
    uint8_t            response_type;
    uint8_t            kind;
    uint16_t           sequence;
    xcb_sync_counter_t counter;
    xcb_sync_int64_t   wait_value;
    xcb_sync_int64_t   counter_value;
    xcb_timestamp_t    timestamp;
    uint16_t           count;
    uint8_t            destroyed;
    uint8_t            pad0;
} xcb_sync_counter_notify_event_t;

/** Opcode for xcb_sync_alarm_notify. */
#define XCB_SYNC_ALARM_NOTIFY 1

/**
 * @@brief xcb_sync_alarm_notify_event_t
 **/
typedef struct xcb_sync_alarm_notify_event_t {
    uint8_t          response_type;
    uint8_t          kind;
    uint16_t         sequence;
    xcb_sync_alarm_t alarm;
    xcb_sync_int64_t counter_value;
    xcb_sync_int64_t alarm_value;
    xcb_timestamp_t  timestamp;
    uint8_t          state;
    uint8_t          pad0[3];
} xcb_sync_alarm_notify_event_t;

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_sync_alarm_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_sync_alarm_t)
 */
void
xcb_sync_alarm_next (xcb_sync_alarm_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_sync_alarm_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_sync_alarm_end (xcb_sync_alarm_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_sync_counter_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_sync_counter_t)
 */
void
xcb_sync_counter_next (xcb_sync_counter_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_sync_counter_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_sync_counter_end (xcb_sync_counter_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_sync_fence_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_sync_fence_t)
 */
void
xcb_sync_fence_next (xcb_sync_fence_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_sync_fence_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_sync_fence_end (xcb_sync_fence_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_sync_int64_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_sync_int64_t)
 */
void
xcb_sync_int64_next (xcb_sync_int64_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_sync_int64_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_sync_int64_end (xcb_sync_int64_iterator_t i);

int
xcb_sync_systemcounter_sizeof (const void  *_buffer);

char *
xcb_sync_systemcounter_name (const xcb_sync_systemcounter_t *R);

int
xcb_sync_systemcounter_name_length (const xcb_sync_systemcounter_t *R);

xcb_generic_iterator_t
xcb_sync_systemcounter_name_end (const xcb_sync_systemcounter_t *R);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_sync_systemcounter_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_sync_systemcounter_t)
 */
void
xcb_sync_systemcounter_next (xcb_sync_systemcounter_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_sync_systemcounter_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_sync_systemcounter_end (xcb_sync_systemcounter_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_sync_trigger_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_sync_trigger_t)
 */
void
xcb_sync_trigger_next (xcb_sync_trigger_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_sync_trigger_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_sync_trigger_end (xcb_sync_trigger_iterator_t i);

/**
 * Get the next element of the iterator
 * @@param i Pointer to a xcb_sync_waitcondition_iterator_t
 *
 * Get the next element in the iterator. The member rem is
 * decreased by one. The member data points to the next
 * element. The member index is increased by sizeof(xcb_sync_waitcondition_t)
 */
void
xcb_sync_waitcondition_next (xcb_sync_waitcondition_iterator_t *i);

/**
 * Return the iterator pointing to the last element
 * @@param i An xcb_sync_waitcondition_iterator_t
 * @@return  The iterator pointing to the last element
 *
 * Set the current element in the iterator to the last element.
 * The member rem is set to 0. The member data points to the
 * last element.
 */
xcb_generic_iterator_t
xcb_sync_waitcondition_end (xcb_sync_waitcondition_iterator_t i);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_sync_initialize_cookie_t
xcb_sync_initialize (xcb_connection_t *c,
                     uint8_t           desired_major_version,
                     uint8_t           desired_minor_version);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_sync_initialize_cookie_t
xcb_sync_initialize_unchecked (xcb_connection_t *c,
                               uint8_t           desired_major_version,
                               uint8_t           desired_minor_version);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_sync_initialize_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_sync_initialize_reply_t *
xcb_sync_initialize_reply (xcb_connection_t              *c,
                           xcb_sync_initialize_cookie_t   cookie  /**< */,
                           xcb_generic_error_t          **e);

int
xcb_sync_list_system_counters_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_sync_list_system_counters_cookie_t
xcb_sync_list_system_counters (xcb_connection_t *c);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_sync_list_system_counters_cookie_t
xcb_sync_list_system_counters_unchecked (xcb_connection_t *c);

int
xcb_sync_list_system_counters_counters_length (const xcb_sync_list_system_counters_reply_t *R);

xcb_sync_systemcounter_iterator_t
xcb_sync_list_system_counters_counters_iterator (const xcb_sync_list_system_counters_reply_t *R);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_sync_list_system_counters_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_sync_list_system_counters_reply_t *
xcb_sync_list_system_counters_reply (xcb_connection_t                        *c,
                                     xcb_sync_list_system_counters_cookie_t   cookie  /**< */,
                                     xcb_generic_error_t                    **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_create_counter_checked (xcb_connection_t   *c,
                                 xcb_sync_counter_t  id,
                                 xcb_sync_int64_t    initial_value);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_create_counter (xcb_connection_t   *c,
                         xcb_sync_counter_t  id,
                         xcb_sync_int64_t    initial_value);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_destroy_counter_checked (xcb_connection_t   *c,
                                  xcb_sync_counter_t  counter);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_destroy_counter (xcb_connection_t   *c,
                          xcb_sync_counter_t  counter);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_sync_query_counter_cookie_t
xcb_sync_query_counter (xcb_connection_t   *c,
                        xcb_sync_counter_t  counter);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_sync_query_counter_cookie_t
xcb_sync_query_counter_unchecked (xcb_connection_t   *c,
                                  xcb_sync_counter_t  counter);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_sync_query_counter_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_sync_query_counter_reply_t *
xcb_sync_query_counter_reply (xcb_connection_t                 *c,
                              xcb_sync_query_counter_cookie_t   cookie  /**< */,
                              xcb_generic_error_t             **e);

int
xcb_sync_await_sizeof (const void  *_buffer,
                       uint32_t     wait_list_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_await_checked (xcb_connection_t               *c,
                        uint32_t                        wait_list_len,
                        const xcb_sync_waitcondition_t *wait_list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_await (xcb_connection_t               *c,
                uint32_t                        wait_list_len,
                const xcb_sync_waitcondition_t *wait_list);

xcb_sync_waitcondition_t *
xcb_sync_await_wait_list (const xcb_sync_await_request_t *R);

int
xcb_sync_await_wait_list_length (const xcb_sync_await_request_t *R);

xcb_sync_waitcondition_iterator_t
xcb_sync_await_wait_list_iterator (const xcb_sync_await_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_change_counter_checked (xcb_connection_t   *c,
                                 xcb_sync_counter_t  counter,
                                 xcb_sync_int64_t    amount);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_change_counter (xcb_connection_t   *c,
                         xcb_sync_counter_t  counter,
                         xcb_sync_int64_t    amount);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_set_counter_checked (xcb_connection_t   *c,
                              xcb_sync_counter_t  counter,
                              xcb_sync_int64_t    value);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_set_counter (xcb_connection_t   *c,
                      xcb_sync_counter_t  counter,
                      xcb_sync_int64_t    value);

int
xcb_sync_create_alarm_value_list_serialize (void                                     **_buffer,
                                            uint32_t                                   value_mask,
                                            const xcb_sync_create_alarm_value_list_t  *_aux);

int
xcb_sync_create_alarm_value_list_unpack (const void                          *_buffer,
                                         uint32_t                             value_mask,
                                         xcb_sync_create_alarm_value_list_t  *_aux);

int
xcb_sync_create_alarm_value_list_sizeof (const void  *_buffer,
                                         uint32_t     value_mask);

int
xcb_sync_create_alarm_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_create_alarm_checked (xcb_connection_t *c,
                               xcb_sync_alarm_t  id,
                               uint32_t          value_mask,
                               const void       *value_list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_create_alarm (xcb_connection_t *c,
                       xcb_sync_alarm_t  id,
                       uint32_t          value_mask,
                       const void       *value_list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_create_alarm_aux_checked (xcb_connection_t                         *c,
                                   xcb_sync_alarm_t                          id,
                                   uint32_t                                  value_mask,
                                   const xcb_sync_create_alarm_value_list_t *value_list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_create_alarm_aux (xcb_connection_t                         *c,
                           xcb_sync_alarm_t                          id,
                           uint32_t                                  value_mask,
                           const xcb_sync_create_alarm_value_list_t *value_list);

void *
xcb_sync_create_alarm_value_list (const xcb_sync_create_alarm_request_t *R);

int
xcb_sync_change_alarm_value_list_serialize (void                                     **_buffer,
                                            uint32_t                                   value_mask,
                                            const xcb_sync_change_alarm_value_list_t  *_aux);

int
xcb_sync_change_alarm_value_list_unpack (const void                          *_buffer,
                                         uint32_t                             value_mask,
                                         xcb_sync_change_alarm_value_list_t  *_aux);

int
xcb_sync_change_alarm_value_list_sizeof (const void  *_buffer,
                                         uint32_t     value_mask);

int
xcb_sync_change_alarm_sizeof (const void  *_buffer);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_change_alarm_checked (xcb_connection_t *c,
                               xcb_sync_alarm_t  id,
                               uint32_t          value_mask,
                               const void       *value_list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_change_alarm (xcb_connection_t *c,
                       xcb_sync_alarm_t  id,
                       uint32_t          value_mask,
                       const void       *value_list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_change_alarm_aux_checked (xcb_connection_t                         *c,
                                   xcb_sync_alarm_t                          id,
                                   uint32_t                                  value_mask,
                                   const xcb_sync_change_alarm_value_list_t *value_list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_change_alarm_aux (xcb_connection_t                         *c,
                           xcb_sync_alarm_t                          id,
                           uint32_t                                  value_mask,
                           const xcb_sync_change_alarm_value_list_t *value_list);

void *
xcb_sync_change_alarm_value_list (const xcb_sync_change_alarm_request_t *R);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_destroy_alarm_checked (xcb_connection_t *c,
                                xcb_sync_alarm_t  alarm);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_destroy_alarm (xcb_connection_t *c,
                        xcb_sync_alarm_t  alarm);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_sync_query_alarm_cookie_t
xcb_sync_query_alarm (xcb_connection_t *c,
                      xcb_sync_alarm_t  alarm);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_sync_query_alarm_cookie_t
xcb_sync_query_alarm_unchecked (xcb_connection_t *c,
                                xcb_sync_alarm_t  alarm);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_sync_query_alarm_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_sync_query_alarm_reply_t *
xcb_sync_query_alarm_reply (xcb_connection_t               *c,
                            xcb_sync_query_alarm_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_set_priority_checked (xcb_connection_t *c,
                               uint32_t          id,
                               int32_t           priority);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_set_priority (xcb_connection_t *c,
                       uint32_t          id,
                       int32_t           priority);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_sync_get_priority_cookie_t
xcb_sync_get_priority (xcb_connection_t *c,
                       uint32_t          id);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_sync_get_priority_cookie_t
xcb_sync_get_priority_unchecked (xcb_connection_t *c,
                                 uint32_t          id);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_sync_get_priority_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_sync_get_priority_reply_t *
xcb_sync_get_priority_reply (xcb_connection_t                *c,
                             xcb_sync_get_priority_cookie_t   cookie  /**< */,
                             xcb_generic_error_t            **e);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_create_fence_checked (xcb_connection_t *c,
                               xcb_drawable_t    drawable,
                               xcb_sync_fence_t  fence,
                               uint8_t           initially_triggered);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_create_fence (xcb_connection_t *c,
                       xcb_drawable_t    drawable,
                       xcb_sync_fence_t  fence,
                       uint8_t           initially_triggered);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_trigger_fence_checked (xcb_connection_t *c,
                                xcb_sync_fence_t  fence);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_trigger_fence (xcb_connection_t *c,
                        xcb_sync_fence_t  fence);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_reset_fence_checked (xcb_connection_t *c,
                              xcb_sync_fence_t  fence);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_reset_fence (xcb_connection_t *c,
                      xcb_sync_fence_t  fence);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_destroy_fence_checked (xcb_connection_t *c,
                                xcb_sync_fence_t  fence);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_destroy_fence (xcb_connection_t *c,
                        xcb_sync_fence_t  fence);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_sync_query_fence_cookie_t
xcb_sync_query_fence (xcb_connection_t *c,
                      xcb_sync_fence_t  fence);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will cause
 * a reply to be generated. Any returned error will be
 * placed in the event queue.
 */
xcb_sync_query_fence_cookie_t
xcb_sync_query_fence_unchecked (xcb_connection_t *c,
                                xcb_sync_fence_t  fence);

/**
 * Return the reply
 * @@param c      The connection
 * @@param cookie The cookie
 * @@param e      The xcb_generic_error_t supplied
 *
 * Returns the reply of the request asked by
 *
 * The parameter @@p e supplied to this function must be NULL if
 * xcb_sync_query_fence_unchecked(). is used.
 * Otherwise, it stores the error if any.
 *
 * The returned value must be freed by the caller using free().
 */
xcb_sync_query_fence_reply_t *
xcb_sync_query_fence_reply (xcb_connection_t               *c,
                            xcb_sync_query_fence_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e);

int
xcb_sync_await_fence_sizeof (const void  *_buffer,
                             uint32_t     fence_list_len);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 * This form can be used only if the request will not cause
 * a reply to be generated. Any returned error will be
 * saved for handling by xcb_request_check().
 */
xcb_void_cookie_t
xcb_sync_await_fence_checked (xcb_connection_t       *c,
                              uint32_t                fence_list_len,
                              const xcb_sync_fence_t *fence_list);

/**
 *
 * @@param c The connection
 * @@return A cookie
 *
 * Delivers a request to the X server.
 *
 */
xcb_void_cookie_t
xcb_sync_await_fence (xcb_connection_t       *c,
                      uint32_t                fence_list_len,
                      const xcb_sync_fence_t *fence_list);

xcb_sync_fence_t *
xcb_sync_await_fence_fence_list (const xcb_sync_await_fence_request_t *R);

int
xcb_sync_await_fence_fence_list_length (const xcb_sync_await_fence_request_t *R);

xcb_generic_iterator_t
xcb_sync_await_fence_fence_list_end (const xcb_sync_await_fence_request_t *R);


#ifdef __cplusplus
}
#endif

#endif

/**
 * @@}
 */
@


1.6
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d33 3
a35 3
    xcb_sync_alarm_t *data; /**<  */
    int               rem; /**<  */
    int               index; /**<  */
d50 3
a52 3
    xcb_sync_counter_t *data; /**<  */
    int                 rem; /**<  */
    int                 index; /**<  */
d61 3
a63 3
    xcb_sync_fence_t *data; /**<  */
    int               rem; /**<  */
    int               index; /**<  */
d91 2
a92 2
    int32_t  hi; /**<  */
    uint32_t lo; /**<  */
d99 3
a101 3
    xcb_sync_int64_t *data; /**<  */
    int               rem; /**<  */
    int               index; /**<  */
d108 3
a110 3
    xcb_sync_counter_t counter; /**<  */
    xcb_sync_int64_t   resolution; /**<  */
    uint16_t           name_len; /**<  */
d117 3
a119 3
    xcb_sync_systemcounter_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
d126 4
a129 4
    xcb_sync_counter_t counter; /**<  */
    uint32_t           wait_type; /**<  */
    xcb_sync_int64_t   wait_value; /**<  */
    uint32_t           test_type; /**<  */
d136 3
a138 3
    xcb_sync_trigger_t *data; /**<  */
    int                 rem; /**<  */
    int                 index; /**<  */
d145 2
a146 2
    xcb_sync_trigger_t trigger; /**<  */
    xcb_sync_int64_t   event_threshold; /**<  */
d153 3
a155 3
    xcb_sync_waitcondition_t *data; /**<  */
    int                       rem; /**<  */
    int                       index; /**<  */
d165 6
a170 6
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
    uint32_t bad_counter; /**<  */
    uint16_t minor_opcode; /**<  */
    uint8_t  major_opcode; /**<  */
d180 6
a185 6
    uint8_t  response_type; /**<  */
    uint8_t  error_code; /**<  */
    uint16_t sequence; /**<  */
    uint32_t bad_alarm; /**<  */
    uint16_t minor_opcode; /**<  */
    uint8_t  major_opcode; /**<  */
d192 1
a192 1
    unsigned int sequence; /**<  */
d202 5
a206 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint8_t  desired_major_version; /**<  */
    uint8_t  desired_minor_version; /**<  */
d213 7
a219 7
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  major_version; /**<  */
    uint8_t  minor_version; /**<  */
    uint8_t  pad1[22]; /**<  */
d226 1
a226 1
    unsigned int sequence; /**<  */
d236 3
a238 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d245 6
a250 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint32_t counters_len; /**<  */
    uint8_t  pad1[20]; /**<  */
d260 5
a264 5
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_sync_counter_t id; /**<  */
    xcb_sync_int64_t   initial_value; /**<  */
d274 4
a277 4
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_sync_counter_t counter; /**<  */
d284 1
a284 1
    unsigned int sequence; /**<  */
d294 4
a297 4
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_sync_counter_t counter; /**<  */
d304 5
a308 5
    uint8_t          response_type; /**<  */
    uint8_t          pad0; /**<  */
    uint16_t         sequence; /**<  */
    uint32_t         length; /**<  */
    xcb_sync_int64_t counter_value; /**<  */
d318 3
a320 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d330 5
a334 5
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_sync_counter_t counter; /**<  */
    xcb_sync_int64_t   amount; /**<  */
d344 5
a348 5
    uint8_t            major_opcode; /**<  */
    uint8_t            minor_opcode; /**<  */
    uint16_t           length; /**<  */
    xcb_sync_counter_t counter; /**<  */
    xcb_sync_int64_t   value; /**<  */
d355 6
a360 6
    xcb_sync_counter_t counter; /**<  */
    uint32_t           valueType; /**<  */
    xcb_sync_int64_t   value; /**<  */
    uint32_t           testType; /**<  */
    xcb_sync_int64_t   delta; /**<  */
    uint32_t           events; /**<  */
d370 5
a374 5
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_sync_alarm_t id; /**<  */
    uint32_t         value_mask; /**<  */
d381 6
a386 6
    xcb_sync_counter_t counter; /**<  */
    uint32_t           valueType; /**<  */
    xcb_sync_int64_t   value; /**<  */
    uint32_t           testType; /**<  */
    xcb_sync_int64_t   delta; /**<  */
    uint32_t           events; /**<  */
d396 5
a400 5
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_sync_alarm_t id; /**<  */
    uint32_t         value_mask; /**<  */
d410 4
a413 4
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_sync_alarm_t alarm; /**<  */
d420 1
a420 1
    unsigned int sequence; /**<  */
d430 4
a433 4
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_sync_alarm_t alarm; /**<  */
d440 9
a448 9
    uint8_t            response_type; /**<  */
    uint8_t            pad0; /**<  */
    uint16_t           sequence; /**<  */
    uint32_t           length; /**<  */
    xcb_sync_trigger_t trigger; /**<  */
    xcb_sync_int64_t   delta; /**<  */
    uint8_t            events; /**<  */
    uint8_t            state; /**<  */
    uint8_t            pad1[2]; /**<  */
d458 5
a462 5
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t id; /**<  */
    int32_t  priority; /**<  */
d469 1
a469 1
    unsigned int sequence; /**<  */
d479 4
a482 4
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
    uint32_t id; /**<  */
d489 5
a493 5
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    int32_t  priority; /**<  */
d503 6
a508 6
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_drawable_t   drawable; /**<  */
    xcb_sync_fence_t fence; /**<  */
    uint8_t          initially_triggered; /**<  */
d518 4
a521 4
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_sync_fence_t fence; /**<  */
d531 4
a534 4
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_sync_fence_t fence; /**<  */
d544 4
a547 4
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_sync_fence_t fence; /**<  */
d554 1
a554 1
    unsigned int sequence; /**<  */
d564 4
a567 4
    uint8_t          major_opcode; /**<  */
    uint8_t          minor_opcode; /**<  */
    uint16_t         length; /**<  */
    xcb_sync_fence_t fence; /**<  */
d574 6
a579 6
    uint8_t  response_type; /**<  */
    uint8_t  pad0; /**<  */
    uint16_t sequence; /**<  */
    uint32_t length; /**<  */
    uint8_t  triggered; /**<  */
    uint8_t  pad1[23]; /**<  */
d589 3
a591 3
    uint8_t  major_opcode; /**<  */
    uint8_t  minor_opcode; /**<  */
    uint16_t length; /**<  */
d601 10
a610 10
    uint8_t            response_type; /**<  */
    uint8_t            kind; /**<  */
    uint16_t           sequence; /**<  */
    xcb_sync_counter_t counter; /**<  */
    xcb_sync_int64_t   wait_value; /**<  */
    xcb_sync_int64_t   counter_value; /**<  */
    xcb_timestamp_t    timestamp; /**<  */
    uint16_t           count; /**<  */
    uint8_t            destroyed; /**<  */
    uint8_t            pad0; /**<  */
d620 9
a628 9
    uint8_t          response_type; /**<  */
    uint8_t          kind; /**<  */
    uint16_t         sequence; /**<  */
    xcb_sync_alarm_t alarm; /**<  */
    xcb_sync_int64_t counter_value; /**<  */
    xcb_sync_int64_t alarm_value; /**<  */
    xcb_timestamp_t  timestamp; /**<  */
    uint8_t          state; /**<  */
    uint8_t          pad0[3]; /**<  */
d640 1
a640 1
xcb_sync_alarm_next (xcb_sync_alarm_iterator_t *i  /**< */);
d652 1
a652 1
xcb_sync_alarm_end (xcb_sync_alarm_iterator_t i  /**< */);
d663 1
a663 1
xcb_sync_counter_next (xcb_sync_counter_iterator_t *i  /**< */);
d675 1
a675 1
xcb_sync_counter_end (xcb_sync_counter_iterator_t i  /**< */);
d686 1
a686 1
xcb_sync_fence_next (xcb_sync_fence_iterator_t *i  /**< */);
d698 1
a698 1
xcb_sync_fence_end (xcb_sync_fence_iterator_t i  /**< */);
d709 1
a709 1
xcb_sync_int64_next (xcb_sync_int64_iterator_t *i  /**< */);
d721 1
a721 1
xcb_sync_int64_end (xcb_sync_int64_iterator_t i  /**< */);
d724 1
a724 1
xcb_sync_systemcounter_sizeof (const void  *_buffer  /**< */);
d727 1
a727 1
xcb_sync_systemcounter_name (const xcb_sync_systemcounter_t *R  /**< */);
d730 1
a730 1
xcb_sync_systemcounter_name_length (const xcb_sync_systemcounter_t *R  /**< */);
d733 1
a733 1
xcb_sync_systemcounter_name_end (const xcb_sync_systemcounter_t *R  /**< */);
d744 1
a744 1
xcb_sync_systemcounter_next (xcb_sync_systemcounter_iterator_t *i  /**< */);
d756 1
a756 1
xcb_sync_systemcounter_end (xcb_sync_systemcounter_iterator_t i  /**< */);
d767 1
a767 1
xcb_sync_trigger_next (xcb_sync_trigger_iterator_t *i  /**< */);
d779 1
a779 1
xcb_sync_trigger_end (xcb_sync_trigger_iterator_t i  /**< */);
d790 1
a790 1
xcb_sync_waitcondition_next (xcb_sync_waitcondition_iterator_t *i  /**< */);
d802 1
a802 1
xcb_sync_waitcondition_end (xcb_sync_waitcondition_iterator_t i  /**< */);
d813 3
a815 3
xcb_sync_initialize (xcb_connection_t *c  /**< */,
                     uint8_t           desired_major_version  /**< */,
                     uint8_t           desired_minor_version  /**< */);
d829 3
a831 3
xcb_sync_initialize_unchecked (xcb_connection_t *c  /**< */,
                               uint8_t           desired_major_version  /**< */,
                               uint8_t           desired_minor_version  /**< */);
d848 1
a848 1
xcb_sync_initialize_reply (xcb_connection_t              *c  /**< */,
d850 1
a850 1
                           xcb_generic_error_t          **e  /**< */);
d853 1
a853 1
xcb_sync_list_system_counters_sizeof (const void  *_buffer  /**< */);
d864 1
a864 1
xcb_sync_list_system_counters (xcb_connection_t *c  /**< */);
d878 1
a878 1
xcb_sync_list_system_counters_unchecked (xcb_connection_t *c  /**< */);
d881 1
a881 1
xcb_sync_list_system_counters_counters_length (const xcb_sync_list_system_counters_reply_t *R  /**< */);
d884 1
a884 1
xcb_sync_list_system_counters_counters_iterator (const xcb_sync_list_system_counters_reply_t *R  /**< */);
d901 1
a901 1
xcb_sync_list_system_counters_reply (xcb_connection_t                        *c  /**< */,
d903 1
a903 1
                                     xcb_generic_error_t                    **e  /**< */);
d917 3
a919 3
xcb_sync_create_counter_checked (xcb_connection_t   *c  /**< */,
                                 xcb_sync_counter_t  id  /**< */,
                                 xcb_sync_int64_t    initial_value  /**< */);
d930 3
a932 3
xcb_sync_create_counter (xcb_connection_t   *c  /**< */,
                         xcb_sync_counter_t  id  /**< */,
                         xcb_sync_int64_t    initial_value  /**< */);
d946 2
a947 2
xcb_sync_destroy_counter_checked (xcb_connection_t   *c  /**< */,
                                  xcb_sync_counter_t  counter  /**< */);
d958 2
a959 2
xcb_sync_destroy_counter (xcb_connection_t   *c  /**< */,
                          xcb_sync_counter_t  counter  /**< */);
d970 2
a971 2
xcb_sync_query_counter (xcb_connection_t   *c  /**< */,
                        xcb_sync_counter_t  counter  /**< */);
d985 2
a986 2
xcb_sync_query_counter_unchecked (xcb_connection_t   *c  /**< */,
                                  xcb_sync_counter_t  counter  /**< */);
d1003 1
a1003 1
xcb_sync_query_counter_reply (xcb_connection_t                 *c  /**< */,
d1005 1
a1005 1
                              xcb_generic_error_t             **e  /**< */);
d1008 2
a1009 2
xcb_sync_await_sizeof (const void  *_buffer  /**< */,
                       uint32_t     wait_list_len  /**< */);
d1023 3
a1025 3
xcb_sync_await_checked (xcb_connection_t               *c  /**< */,
                        uint32_t                        wait_list_len  /**< */,
                        const xcb_sync_waitcondition_t *wait_list  /**< */);
d1036 12
a1047 3
xcb_sync_await (xcb_connection_t               *c  /**< */,
                uint32_t                        wait_list_len  /**< */,
                const xcb_sync_waitcondition_t *wait_list  /**< */);
d1061 3
a1063 3
xcb_sync_change_counter_checked (xcb_connection_t   *c  /**< */,
                                 xcb_sync_counter_t  counter  /**< */,
                                 xcb_sync_int64_t    amount  /**< */);
d1074 3
a1076 3
xcb_sync_change_counter (xcb_connection_t   *c  /**< */,
                         xcb_sync_counter_t  counter  /**< */,
                         xcb_sync_int64_t    amount  /**< */);
d1090 3
a1092 3
xcb_sync_set_counter_checked (xcb_connection_t   *c  /**< */,
                              xcb_sync_counter_t  counter  /**< */,
                              xcb_sync_int64_t    value  /**< */);
d1103 3
a1105 3
xcb_sync_set_counter (xcb_connection_t   *c  /**< */,
                      xcb_sync_counter_t  counter  /**< */,
                      xcb_sync_int64_t    value  /**< */);
d1108 3
a1110 3
xcb_sync_create_alarm_value_list_serialize (void                                     **_buffer  /**< */,
                                            uint32_t                                   value_mask  /**< */,
                                            const xcb_sync_create_alarm_value_list_t  *_aux  /**< */);
d1113 3
a1115 3
xcb_sync_create_alarm_value_list_unpack (const void                          *_buffer  /**< */,
                                         uint32_t                             value_mask  /**< */,
                                         xcb_sync_create_alarm_value_list_t  *_aux  /**< */);
d1118 5
a1122 2
xcb_sync_create_alarm_value_list_sizeof (const void  *_buffer  /**< */,
                                         uint32_t     value_mask  /**< */);
d1136 4
a1139 4
xcb_sync_create_alarm_checked (xcb_connection_t *c  /**< */,
                               xcb_sync_alarm_t  id  /**< */,
                               uint32_t          value_mask  /**< */,
                               const void       *value_list  /**< */);
d1150 4
a1153 4
xcb_sync_create_alarm (xcb_connection_t *c  /**< */,
                       xcb_sync_alarm_t  id  /**< */,
                       uint32_t          value_mask  /**< */,
                       const void       *value_list  /**< */);
d1167 4
a1170 4
xcb_sync_create_alarm_aux_checked (xcb_connection_t                         *c  /**< */,
                                   xcb_sync_alarm_t                          id  /**< */,
                                   uint32_t                                  value_mask  /**< */,
                                   const xcb_sync_create_alarm_value_list_t *value_list  /**< */);
d1181 7
a1187 4
xcb_sync_create_alarm_aux (xcb_connection_t                         *c  /**< */,
                           xcb_sync_alarm_t                          id  /**< */,
                           uint32_t                                  value_mask  /**< */,
                           const xcb_sync_create_alarm_value_list_t *value_list  /**< */);
d1190 3
a1192 3
xcb_sync_change_alarm_value_list_serialize (void                                     **_buffer  /**< */,
                                            uint32_t                                   value_mask  /**< */,
                                            const xcb_sync_change_alarm_value_list_t  *_aux  /**< */);
d1195 3
a1197 3
xcb_sync_change_alarm_value_list_unpack (const void                          *_buffer  /**< */,
                                         uint32_t                             value_mask  /**< */,
                                         xcb_sync_change_alarm_value_list_t  *_aux  /**< */);
d1200 5
a1204 2
xcb_sync_change_alarm_value_list_sizeof (const void  *_buffer  /**< */,
                                         uint32_t     value_mask  /**< */);
d1218 4
a1221 4
xcb_sync_change_alarm_checked (xcb_connection_t *c  /**< */,
                               xcb_sync_alarm_t  id  /**< */,
                               uint32_t          value_mask  /**< */,
                               const void       *value_list  /**< */);
d1232 4
a1235 4
xcb_sync_change_alarm (xcb_connection_t *c  /**< */,
                       xcb_sync_alarm_t  id  /**< */,
                       uint32_t          value_mask  /**< */,
                       const void       *value_list  /**< */);
d1249 4
a1252 4
xcb_sync_change_alarm_aux_checked (xcb_connection_t                         *c  /**< */,
                                   xcb_sync_alarm_t                          id  /**< */,
                                   uint32_t                                  value_mask  /**< */,
                                   const xcb_sync_change_alarm_value_list_t *value_list  /**< */);
d1263 7
a1269 4
xcb_sync_change_alarm_aux (xcb_connection_t                         *c  /**< */,
                           xcb_sync_alarm_t                          id  /**< */,
                           uint32_t                                  value_mask  /**< */,
                           const xcb_sync_change_alarm_value_list_t *value_list  /**< */);
d1283 2
a1284 2
xcb_sync_destroy_alarm_checked (xcb_connection_t *c  /**< */,
                                xcb_sync_alarm_t  alarm  /**< */);
d1295 2
a1296 2
xcb_sync_destroy_alarm (xcb_connection_t *c  /**< */,
                        xcb_sync_alarm_t  alarm  /**< */);
d1307 2
a1308 2
xcb_sync_query_alarm (xcb_connection_t *c  /**< */,
                      xcb_sync_alarm_t  alarm  /**< */);
d1322 2
a1323 2
xcb_sync_query_alarm_unchecked (xcb_connection_t *c  /**< */,
                                xcb_sync_alarm_t  alarm  /**< */);
d1340 1
a1340 1
xcb_sync_query_alarm_reply (xcb_connection_t               *c  /**< */,
d1342 1
a1342 1
                            xcb_generic_error_t           **e  /**< */);
d1356 3
a1358 3
xcb_sync_set_priority_checked (xcb_connection_t *c  /**< */,
                               uint32_t          id  /**< */,
                               int32_t           priority  /**< */);
d1369 3
a1371 3
xcb_sync_set_priority (xcb_connection_t *c  /**< */,
                       uint32_t          id  /**< */,
                       int32_t           priority  /**< */);
d1382 2
a1383 2
xcb_sync_get_priority (xcb_connection_t *c  /**< */,
                       uint32_t          id  /**< */);
d1397 2
a1398 2
xcb_sync_get_priority_unchecked (xcb_connection_t *c  /**< */,
                                 uint32_t          id  /**< */);
d1415 1
a1415 1
xcb_sync_get_priority_reply (xcb_connection_t                *c  /**< */,
d1417 1
a1417 1
                             xcb_generic_error_t            **e  /**< */);
d1431 4
a1434 4
xcb_sync_create_fence_checked (xcb_connection_t *c  /**< */,
                               xcb_drawable_t    drawable  /**< */,
                               xcb_sync_fence_t  fence  /**< */,
                               uint8_t           initially_triggered  /**< */);
d1445 4
a1448 4
xcb_sync_create_fence (xcb_connection_t *c  /**< */,
                       xcb_drawable_t    drawable  /**< */,
                       xcb_sync_fence_t  fence  /**< */,
                       uint8_t           initially_triggered  /**< */);
d1462 2
a1463 2
xcb_sync_trigger_fence_checked (xcb_connection_t *c  /**< */,
                                xcb_sync_fence_t  fence  /**< */);
d1474 2
a1475 2
xcb_sync_trigger_fence (xcb_connection_t *c  /**< */,
                        xcb_sync_fence_t  fence  /**< */);
d1489 2
a1490 2
xcb_sync_reset_fence_checked (xcb_connection_t *c  /**< */,
                              xcb_sync_fence_t  fence  /**< */);
d1501 2
a1502 2
xcb_sync_reset_fence (xcb_connection_t *c  /**< */,
                      xcb_sync_fence_t  fence  /**< */);
d1516 2
a1517 2
xcb_sync_destroy_fence_checked (xcb_connection_t *c  /**< */,
                                xcb_sync_fence_t  fence  /**< */);
d1528 2
a1529 2
xcb_sync_destroy_fence (xcb_connection_t *c  /**< */,
                        xcb_sync_fence_t  fence  /**< */);
d1540 2
a1541 2
xcb_sync_query_fence (xcb_connection_t *c  /**< */,
                      xcb_sync_fence_t  fence  /**< */);
d1555 2
a1556 2
xcb_sync_query_fence_unchecked (xcb_connection_t *c  /**< */,
                                xcb_sync_fence_t  fence  /**< */);
d1573 1
a1573 1
xcb_sync_query_fence_reply (xcb_connection_t               *c  /**< */,
d1575 1
a1575 1
                            xcb_generic_error_t           **e  /**< */);
d1578 2
a1579 2
xcb_sync_await_fence_sizeof (const void  *_buffer  /**< */,
                             uint32_t     fence_list_len  /**< */);
d1593 3
a1595 3
xcb_sync_await_fence_checked (xcb_connection_t       *c  /**< */,
                              uint32_t                fence_list_len  /**< */,
                              const xcb_sync_fence_t *fence_list  /**< */);
d1606 12
a1617 3
xcb_sync_await_fence (xcb_connection_t       *c  /**< */,
                      uint32_t                fence_list_len  /**< */,
                      const xcb_sync_fence_t *fence_list  /**< */);
@


1.5
log
@Update build system and generated files for libxcb 1.10.
@
text
@d24 1
a24 1
  
a638 10

/*****************************************************************************
 **
 ** void xcb_sync_alarm_next
 ** 
 ** @@param xcb_sync_alarm_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a650 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_alarm_end
 ** 
 ** @@param xcb_sync_alarm_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a661 10

/*****************************************************************************
 **
 ** void xcb_sync_counter_next
 ** 
 ** @@param xcb_sync_counter_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a673 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_counter_end
 ** 
 ** @@param xcb_sync_counter_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a684 10

/*****************************************************************************
 **
 ** void xcb_sync_fence_next
 ** 
 ** @@param xcb_sync_fence_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a696 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_fence_end
 ** 
 ** @@param xcb_sync_fence_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a707 10

/*****************************************************************************
 **
 ** void xcb_sync_int64_next
 ** 
 ** @@param xcb_sync_int64_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a719 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_int64_end
 ** 
 ** @@param xcb_sync_int64_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a725 10

/*****************************************************************************
 **
 ** char * xcb_sync_systemcounter_name
 ** 
 ** @@param const xcb_sync_systemcounter_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a728 10

/*****************************************************************************
 **
 ** int xcb_sync_systemcounter_name_length
 ** 
 ** @@param const xcb_sync_systemcounter_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a731 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_systemcounter_name_end
 ** 
 ** @@param const xcb_sync_systemcounter_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a742 10

/*****************************************************************************
 **
 ** void xcb_sync_systemcounter_next
 ** 
 ** @@param xcb_sync_systemcounter_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a754 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_systemcounter_end
 ** 
 ** @@param xcb_sync_systemcounter_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a765 10

/*****************************************************************************
 **
 ** void xcb_sync_trigger_next
 ** 
 ** @@param xcb_sync_trigger_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a777 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_trigger_end
 ** 
 ** @@param xcb_sync_trigger_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a788 10

/*****************************************************************************
 **
 ** void xcb_sync_waitcondition_next
 ** 
 ** @@param xcb_sync_waitcondition_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a800 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_sync_waitcondition_end
 ** 
 ** @@param xcb_sync_waitcondition_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
d810 1
a810 1
 * 
a811 12

/*****************************************************************************
 **
 ** xcb_sync_initialize_cookie_t xcb_sync_initialize
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           desired_major_version
 ** @@param uint8_t           desired_minor_version
 ** @@returns xcb_sync_initialize_cookie_t
 **
 *****************************************************************************/
 
d823 1
a823 1
 * 
a827 12

/*****************************************************************************
 **
 ** xcb_sync_initialize_cookie_t xcb_sync_initialize_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           desired_major_version
 ** @@param uint8_t           desired_minor_version
 ** @@returns xcb_sync_initialize_cookie_t
 **
 *****************************************************************************/
 
d840 1
a840 1
 * 
a846 12

/*****************************************************************************
 **
 ** xcb_sync_initialize_reply_t * xcb_sync_initialize_reply
 ** 
 ** @@param xcb_connection_t              *c
 ** @@param xcb_sync_initialize_cookie_t   cookie
 ** @@param xcb_generic_error_t          **e
 ** @@returns xcb_sync_initialize_reply_t *
 **
 *****************************************************************************/
 
d861 1
a861 1
 * 
a862 10

/*****************************************************************************
 **
 ** xcb_sync_list_system_counters_cookie_t xcb_sync_list_system_counters
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_sync_list_system_counters_cookie_t
 **
 *****************************************************************************/
 
d872 1
a872 1
 * 
a876 10

/*****************************************************************************
 **
 ** xcb_sync_list_system_counters_cookie_t xcb_sync_list_system_counters_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_sync_list_system_counters_cookie_t
 **
 *****************************************************************************/
 
a879 10

/*****************************************************************************
 **
 ** int xcb_sync_list_system_counters_counters_length
 ** 
 ** @@param const xcb_sync_list_system_counters_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a882 10

/*****************************************************************************
 **
 ** xcb_sync_systemcounter_iterator_t xcb_sync_list_system_counters_counters_iterator
 ** 
 ** @@param const xcb_sync_list_system_counters_reply_t *R
 ** @@returns xcb_sync_systemcounter_iterator_t
 **
 *****************************************************************************/
 
d893 1
a893 1
 * 
a899 12

/*****************************************************************************
 **
 ** xcb_sync_list_system_counters_reply_t * xcb_sync_list_system_counters_reply
 ** 
 ** @@param xcb_connection_t                        *c
 ** @@param xcb_sync_list_system_counters_cookie_t   cookie
 ** @@param xcb_generic_error_t                    **e
 ** @@returns xcb_sync_list_system_counters_reply_t *
 **
 *****************************************************************************/
 
d911 1
a911 1
 * 
a915 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_counter_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  id
 ** @@param xcb_sync_int64_t    initial_value
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d927 1
a927 1
 * 
a928 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_counter
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  id
 ** @@param xcb_sync_int64_t    initial_value
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d940 1
a940 1
 * 
a944 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_destroy_counter_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d955 1
a955 1
 * 
a956 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_destroy_counter
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d967 1
a967 1
 * 
a968 11

/*****************************************************************************
 **
 ** xcb_sync_query_counter_cookie_t xcb_sync_query_counter
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@returns xcb_sync_query_counter_cookie_t
 **
 *****************************************************************************/
 
d979 1
a979 1
 * 
a983 11

/*****************************************************************************
 **
 ** xcb_sync_query_counter_cookie_t xcb_sync_query_counter_unchecked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@returns xcb_sync_query_counter_cookie_t
 **
 *****************************************************************************/
 
d995 1
a995 1
 * 
a1001 12

/*****************************************************************************
 **
 ** xcb_sync_query_counter_reply_t * xcb_sync_query_counter_reply
 ** 
 ** @@param xcb_connection_t                 *c
 ** @@param xcb_sync_query_counter_cookie_t   cookie
 ** @@param xcb_generic_error_t             **e
 ** @@returns xcb_sync_query_counter_reply_t *
 **
 *****************************************************************************/
 
d1017 1
a1017 1
 * 
a1021 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_await_checked
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param uint32_t                        wait_list_len
 ** @@param const xcb_sync_waitcondition_t *wait_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1033 1
a1033 1
 * 
a1034 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_await
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param uint32_t                        wait_list_len
 ** @@param const xcb_sync_waitcondition_t *wait_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1046 1
a1046 1
 * 
a1050 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_change_counter_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@param xcb_sync_int64_t    amount
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1062 1
a1062 1
 * 
a1063 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_change_counter
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@param xcb_sync_int64_t    amount
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1075 1
a1075 1
 * 
a1079 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_set_counter_checked
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@param xcb_sync_int64_t    value
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1091 1
a1091 1
 * 
a1092 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_set_counter
 ** 
 ** @@param xcb_connection_t   *c
 ** @@param xcb_sync_counter_t  counter
 ** @@param xcb_sync_int64_t    value
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1118 1
a1118 1
 * 
a1122 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_alarm_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  id
 ** @@param uint32_t          value_mask
 ** @@param const void       *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1135 1
a1135 1
 * 
a1136 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_alarm
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  id
 ** @@param uint32_t          value_mask
 ** @@param const void       *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1149 1
a1149 1
 * 
a1153 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_alarm_aux_checked
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_sync_alarm_t                          id
 ** @@param uint32_t                                  value_mask
 ** @@param const xcb_sync_create_alarm_value_list_t *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1166 1
a1166 1
 * 
a1167 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_alarm_aux
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_sync_alarm_t                          id
 ** @@param uint32_t                                  value_mask
 ** @@param const xcb_sync_create_alarm_value_list_t *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1194 1
a1194 1
 * 
a1198 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_change_alarm_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  id
 ** @@param uint32_t          value_mask
 ** @@param const void       *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1211 1
a1211 1
 * 
a1212 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_change_alarm
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  id
 ** @@param uint32_t          value_mask
 ** @@param const void       *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1225 1
a1225 1
 * 
a1229 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_change_alarm_aux_checked
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_sync_alarm_t                          id
 ** @@param uint32_t                                  value_mask
 ** @@param const xcb_sync_change_alarm_value_list_t *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1242 1
a1242 1
 * 
a1243 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_change_alarm_aux
 ** 
 ** @@param xcb_connection_t                         *c
 ** @@param xcb_sync_alarm_t                          id
 ** @@param uint32_t                                  value_mask
 ** @@param const xcb_sync_change_alarm_value_list_t *value_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1256 1
a1256 1
 * 
a1260 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_destroy_alarm_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  alarm
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1271 1
a1271 1
 * 
a1272 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_destroy_alarm
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  alarm
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1283 1
a1283 1
 * 
a1284 11

/*****************************************************************************
 **
 ** xcb_sync_query_alarm_cookie_t xcb_sync_query_alarm
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  alarm
 ** @@returns xcb_sync_query_alarm_cookie_t
 **
 *****************************************************************************/
 
d1295 1
a1295 1
 * 
a1299 11

/*****************************************************************************
 **
 ** xcb_sync_query_alarm_cookie_t xcb_sync_query_alarm_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_alarm_t  alarm
 ** @@returns xcb_sync_query_alarm_cookie_t
 **
 *****************************************************************************/
 
d1311 1
a1311 1
 * 
a1317 12

/*****************************************************************************
 **
 ** xcb_sync_query_alarm_reply_t * xcb_sync_query_alarm_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_sync_query_alarm_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_sync_query_alarm_reply_t *
 **
 *****************************************************************************/
 
d1329 1
a1329 1
 * 
a1333 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_set_priority_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          id
 ** @@param int32_t           priority
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1345 1
a1345 1
 * 
a1346 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_set_priority
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          id
 ** @@param int32_t           priority
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1358 1
a1358 1
 * 
a1359 11

/*****************************************************************************
 **
 ** xcb_sync_get_priority_cookie_t xcb_sync_get_priority
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          id
 ** @@returns xcb_sync_get_priority_cookie_t
 **
 *****************************************************************************/
 
d1370 1
a1370 1
 * 
a1374 11

/*****************************************************************************
 **
 ** xcb_sync_get_priority_cookie_t xcb_sync_get_priority_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          id
 ** @@returns xcb_sync_get_priority_cookie_t
 **
 *****************************************************************************/
 
d1386 1
a1386 1
 * 
a1392 12

/*****************************************************************************
 **
 ** xcb_sync_get_priority_reply_t * xcb_sync_get_priority_reply
 ** 
 ** @@param xcb_connection_t                *c
 ** @@param xcb_sync_get_priority_cookie_t   cookie
 ** @@param xcb_generic_error_t            **e
 ** @@returns xcb_sync_get_priority_reply_t *
 **
 *****************************************************************************/
 
d1404 1
a1404 1
 * 
a1408 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_fence_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_sync_fence_t  fence
 ** @@param uint8_t           initially_triggered
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1421 1
a1421 1
 * 
a1422 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_create_fence
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_drawable_t    drawable
 ** @@param xcb_sync_fence_t  fence
 ** @@param uint8_t           initially_triggered
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1435 1
a1435 1
 * 
a1439 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_trigger_fence_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1450 1
a1450 1
 * 
a1451 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_trigger_fence
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1462 1
a1462 1
 * 
a1466 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_reset_fence_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1477 1
a1477 1
 * 
a1478 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_reset_fence
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1489 1
a1489 1
 * 
a1493 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_destroy_fence_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1504 1
a1504 1
 * 
a1505 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_destroy_fence
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1516 1
a1516 1
 * 
a1517 11

/*****************************************************************************
 **
 ** xcb_sync_query_fence_cookie_t xcb_sync_query_fence
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_sync_query_fence_cookie_t
 **
 *****************************************************************************/
 
d1528 1
a1528 1
 * 
a1532 11

/*****************************************************************************
 **
 ** xcb_sync_query_fence_cookie_t xcb_sync_query_fence_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_sync_fence_t  fence
 ** @@returns xcb_sync_query_fence_cookie_t
 **
 *****************************************************************************/
 
d1544 1
a1544 1
 * 
a1550 12

/*****************************************************************************
 **
 ** xcb_sync_query_fence_reply_t * xcb_sync_query_fence_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_sync_query_fence_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_sync_query_fence_reply_t *
 **
 *****************************************************************************/
 
d1566 1
a1566 1
 * 
a1570 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_await_fence_checked
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param uint32_t                fence_list_len
 ** @@param const xcb_sync_fence_t *fence_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1582 1
a1582 1
 * 
a1583 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_sync_await_fence
 ** 
 ** @@param xcb_connection_t       *c
 ** @@param uint32_t                fence_list_len
 ** @@param const xcb_sync_fence_t *fence_list
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
@


1.4
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d39 3
a41 3
    XCB_SYNC_ALARMSTATE_ACTIVE,
    XCB_SYNC_ALARMSTATE_INACTIVE,
    XCB_SYNC_ALARMSTATE_DESTROYED
d67 4
a70 4
    XCB_SYNC_TESTTYPE_POSITIVE_TRANSITION,
    XCB_SYNC_TESTTYPE_NEGATIVE_TRANSITION,
    XCB_SYNC_TESTTYPE_POSITIVE_COMPARISON,
    XCB_SYNC_TESTTYPE_NEGATIVE_COMPARISON
d74 2
a75 2
    XCB_SYNC_VALUETYPE_ABSOLUTE,
    XCB_SYNC_VALUETYPE_RELATIVE
d351 12
d377 12
d1509 12
a1520 1
xcb_sync_create_alarm_sizeof (const void  *_buffer  /**< */);
d1541 1
a1541 1
 ** @@param const uint32_t   *value_list
d1550 1
a1550 1
                               const uint32_t   *value_list  /**< */);
d1568 1
a1568 1
 ** @@param const uint32_t   *value_list
d1577 58
a1634 1
                       const uint32_t   *value_list  /**< */);
d1637 12
a1648 1
xcb_sync_change_alarm_sizeof (const void  *_buffer  /**< */);
d1669 1
a1669 1
 ** @@param const uint32_t   *value_list
d1678 1
a1678 1
                               const uint32_t   *value_list  /**< */);
d1696 1
a1696 1
 ** @@param const uint32_t   *value_list
d1705 58
a1762 1
                       const uint32_t   *value_list  /**< */);
@


1.3
log
@Update to libxcb 1.8.1. Tested by krw@@, mpi@@, shadchin@@
@
text
@d779 3
d951 1
a951 1
 * Delivers a request to the X server
d976 1
a976 1
 * Delivers a request to the X server
d1034 3
d1038 1
a1038 1
 * Delivers a request to the X server
d1059 1
a1059 1
 * Delivers a request to the X server
d1140 1
a1140 1
 * Delivers a request to the X server
d1168 1
a1168 1
 * Delivers a request to the X server
d1193 1
a1193 1
 * Delivers a request to the X server
d1219 1
a1219 1
 * Delivers a request to the X server
d1242 1
a1242 1
 * Delivers a request to the X server
d1265 1
a1265 1
 * Delivers a request to the X server
d1321 4
d1326 1
a1326 1
 * Delivers a request to the X server
d1354 1
a1354 1
 * Delivers a request to the X server
d1379 1
a1379 1
 * Delivers a request to the X server
d1407 1
a1407 1
 * Delivers a request to the X server
d1432 1
a1432 1
 * Delivers a request to the X server
d1460 1
a1460 1
 * Delivers a request to the X server
d1484 3
d1488 1
a1488 1
 * Delivers a request to the X server
d1518 1
a1518 1
 * Delivers a request to the X server
d1544 3
d1548 1
a1548 1
 * Delivers a request to the X server
d1578 1
a1578 1
 * Delivers a request to the X server
d1605 1
a1605 1
 * Delivers a request to the X server
d1631 1
a1631 1
 * Delivers a request to the X server
d1654 1
a1654 1
 * Delivers a request to the X server
d1677 1
a1677 1
 * Delivers a request to the X server
d1734 1
a1734 1
 * Delivers a request to the X server
d1762 1
a1762 1
 * Delivers a request to the X server
d1787 1
a1787 1
 * Delivers a request to the X server
d1810 1
a1810 1
 * Delivers a request to the X server
d1867 1
a1867 1
 * Delivers a request to the X server
d1897 1
a1897 1
 * Delivers a request to the X server
d1924 1
a1924 1
 * Delivers a request to the X server
d1950 1
a1950 1
 * Delivers a request to the X server
d1973 1
a1973 1
 * Delivers a request to the X server
d1999 1
a1999 1
 * Delivers a request to the X server
d2022 1
a2022 1
 * Delivers a request to the X server
d2048 1
a2048 1
 * Delivers a request to the X server
d2071 1
a2071 1
 * Delivers a request to the X server
d2094 1
a2094 1
 * Delivers a request to the X server
d2150 4
d2155 1
a2155 1
 * Delivers a request to the X server
d2183 1
a2183 1
 * Delivers a request to the X server
@


1.2
log
@regen for xcb-proto 1.5
@
text
@d23 1
a23 1
#define XCB_SYNC_MINOR_VERSION 0
d55 11
d472 98
d695 43
d1849 337
@


1.1
log
@Initial revision
@
text
@d494 2
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
