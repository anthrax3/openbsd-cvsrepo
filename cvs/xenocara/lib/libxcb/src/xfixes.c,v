head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.11;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2014.04.14.19.20.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.22.20.31.32;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.18.19.58.53;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.09.54;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.09.54;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xfixes.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "xfixes.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"
#include "render.h"
#include "shape.h"

xcb_extension_t xcb_xfixes_id = { "XFIXES", 0 };

xcb_xfixes_query_version_cookie_t
xcb_xfixes_query_version (xcb_connection_t *c,
                          uint32_t          client_major_version,
                          uint32_t          client_minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xfixes_query_version_cookie_t xcb_ret;
    xcb_xfixes_query_version_request_t xcb_out;

    xcb_out.client_major_version = client_major_version;
    xcb_out.client_minor_version = client_minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xfixes_query_version_cookie_t
xcb_xfixes_query_version_unchecked (xcb_connection_t *c,
                                    uint32_t          client_major_version,
                                    uint32_t          client_minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_QUERY_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xfixes_query_version_cookie_t xcb_ret;
    xcb_xfixes_query_version_request_t xcb_out;

    xcb_out.client_major_version = client_major_version;
    xcb_out.client_minor_version = client_minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xfixes_query_version_reply_t *
xcb_xfixes_query_version_reply (xcb_connection_t                   *c,
                                xcb_xfixes_query_version_cookie_t   cookie  /**< */,
                                xcb_generic_error_t               **e)
{
    return (xcb_xfixes_query_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_xfixes_change_save_set_checked (xcb_connection_t *c,
                                    uint8_t           mode,
                                    uint8_t           target,
                                    uint8_t           map,
                                    xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CHANGE_SAVE_SET,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_change_save_set_request_t xcb_out;

    xcb_out.mode = mode;
    xcb_out.target = target;
    xcb_out.map = map;
    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_change_save_set (xcb_connection_t *c,
                            uint8_t           mode,
                            uint8_t           target,
                            uint8_t           map,
                            xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CHANGE_SAVE_SET,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_change_save_set_request_t xcb_out;

    xcb_out.mode = mode;
    xcb_out.target = target;
    xcb_out.map = map;
    xcb_out.pad0 = 0;
    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_select_selection_input_checked (xcb_connection_t *c,
                                           xcb_window_t      window,
                                           xcb_atom_t        selection,
                                           uint32_t          event_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SELECT_SELECTION_INPUT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_select_selection_input_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.selection = selection;
    xcb_out.event_mask = event_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_select_selection_input (xcb_connection_t *c,
                                   xcb_window_t      window,
                                   xcb_atom_t        selection,
                                   uint32_t          event_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SELECT_SELECTION_INPUT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_select_selection_input_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.selection = selection;
    xcb_out.event_mask = event_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_select_cursor_input_checked (xcb_connection_t *c,
                                        xcb_window_t      window,
                                        uint32_t          event_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SELECT_CURSOR_INPUT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_select_cursor_input_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.event_mask = event_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_select_cursor_input (xcb_connection_t *c,
                                xcb_window_t      window,
                                uint32_t          event_mask)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SELECT_CURSOR_INPUT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_select_cursor_input_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.event_mask = event_mask;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xfixes_get_cursor_image_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xfixes_get_cursor_image_reply_t *_aux = (xcb_xfixes_get_cursor_image_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xfixes_get_cursor_image_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* cursor_image */
    xcb_block_len += (_aux->width * _aux->height) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xfixes_get_cursor_image_cookie_t
xcb_xfixes_get_cursor_image (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_GET_CURSOR_IMAGE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xfixes_get_cursor_image_cookie_t xcb_ret;
    xcb_xfixes_get_cursor_image_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xfixes_get_cursor_image_cookie_t
xcb_xfixes_get_cursor_image_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_GET_CURSOR_IMAGE,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xfixes_get_cursor_image_cookie_t xcb_ret;
    xcb_xfixes_get_cursor_image_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_xfixes_get_cursor_image_cursor_image (const xcb_xfixes_get_cursor_image_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_xfixes_get_cursor_image_cursor_image_length (const xcb_xfixes_get_cursor_image_reply_t *R)
{
    return (R->width * R->height);
}

xcb_generic_iterator_t
xcb_xfixes_get_cursor_image_cursor_image_end (const xcb_xfixes_get_cursor_image_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + ((R->width * R->height));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xfixes_get_cursor_image_reply_t *
xcb_xfixes_get_cursor_image_reply (xcb_connection_t                      *c,
                                   xcb_xfixes_get_cursor_image_cookie_t   cookie  /**< */,
                                   xcb_generic_error_t                  **e)
{
    return (xcb_xfixes_get_cursor_image_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

void
xcb_xfixes_region_next (xcb_xfixes_region_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xfixes_region_t);
}

xcb_generic_iterator_t
xcb_xfixes_region_end (xcb_xfixes_region_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_xfixes_create_region_sizeof (const void  *_buffer,
                                 uint32_t     rectangles_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xfixes_create_region_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* rectangles */
    xcb_block_len += rectangles_len * sizeof(xcb_rectangle_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_rectangle_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_xfixes_create_region_checked (xcb_connection_t      *c,
                                  xcb_xfixes_region_t    region,
                                  uint32_t               rectangles_len,
                                  const xcb_rectangle_t *rectangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CREATE_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_create_region_request_t xcb_out;

    xcb_out.region = region;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rectangles */
    xcb_parts[4].iov_base = (char *) rectangles;
    xcb_parts[4].iov_len = rectangles_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_create_region (xcb_connection_t      *c,
                          xcb_xfixes_region_t    region,
                          uint32_t               rectangles_len,
                          const xcb_rectangle_t *rectangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CREATE_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_create_region_request_t xcb_out;

    xcb_out.region = region;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rectangles */
    xcb_parts[4].iov_base = (char *) rectangles;
    xcb_parts[4].iov_len = rectangles_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_rectangle_t *
xcb_xfixes_create_region_rectangles (const xcb_xfixes_create_region_request_t *R)
{
    return (xcb_rectangle_t *) (R + 1);
}

int
xcb_xfixes_create_region_rectangles_length (const xcb_xfixes_create_region_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_xfixes_create_region_request_t))/sizeof(xcb_rectangle_t));
}

xcb_rectangle_iterator_t
xcb_xfixes_create_region_rectangles_iterator (const xcb_xfixes_create_region_request_t *R)
{
    xcb_rectangle_iterator_t i;
    i.data = (xcb_rectangle_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_xfixes_create_region_request_t))/sizeof(xcb_rectangle_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_xfixes_create_region_from_bitmap_checked (xcb_connection_t    *c,
                                              xcb_xfixes_region_t  region,
                                              xcb_pixmap_t         bitmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CREATE_REGION_FROM_BITMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_create_region_from_bitmap_request_t xcb_out;

    xcb_out.region = region;
    xcb_out.bitmap = bitmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_create_region_from_bitmap (xcb_connection_t    *c,
                                      xcb_xfixes_region_t  region,
                                      xcb_pixmap_t         bitmap)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CREATE_REGION_FROM_BITMAP,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_create_region_from_bitmap_request_t xcb_out;

    xcb_out.region = region;
    xcb_out.bitmap = bitmap;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_create_region_from_window_checked (xcb_connection_t    *c,
                                              xcb_xfixes_region_t  region,
                                              xcb_window_t         window,
                                              xcb_shape_kind_t     kind)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CREATE_REGION_FROM_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_create_region_from_window_request_t xcb_out;

    xcb_out.region = region;
    xcb_out.window = window;
    xcb_out.kind = kind;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_create_region_from_window (xcb_connection_t    *c,
                                      xcb_xfixes_region_t  region,
                                      xcb_window_t         window,
                                      xcb_shape_kind_t     kind)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CREATE_REGION_FROM_WINDOW,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_create_region_from_window_request_t xcb_out;

    xcb_out.region = region;
    xcb_out.window = window;
    xcb_out.kind = kind;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_create_region_from_gc_checked (xcb_connection_t    *c,
                                          xcb_xfixes_region_t  region,
                                          xcb_gcontext_t       gc)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CREATE_REGION_FROM_GC,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_create_region_from_gc_request_t xcb_out;

    xcb_out.region = region;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_create_region_from_gc (xcb_connection_t    *c,
                                  xcb_xfixes_region_t  region,
                                  xcb_gcontext_t       gc)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CREATE_REGION_FROM_GC,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_create_region_from_gc_request_t xcb_out;

    xcb_out.region = region;
    xcb_out.gc = gc;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_create_region_from_picture_checked (xcb_connection_t     *c,
                                               xcb_xfixes_region_t   region,
                                               xcb_render_picture_t  picture)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CREATE_REGION_FROM_PICTURE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_create_region_from_picture_request_t xcb_out;

    xcb_out.region = region;
    xcb_out.picture = picture;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_create_region_from_picture (xcb_connection_t     *c,
                                       xcb_xfixes_region_t   region,
                                       xcb_render_picture_t  picture)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CREATE_REGION_FROM_PICTURE,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_create_region_from_picture_request_t xcb_out;

    xcb_out.region = region;
    xcb_out.picture = picture;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_destroy_region_checked (xcb_connection_t    *c,
                                   xcb_xfixes_region_t  region)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_DESTROY_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_destroy_region_request_t xcb_out;

    xcb_out.region = region;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_destroy_region (xcb_connection_t    *c,
                           xcb_xfixes_region_t  region)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_DESTROY_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_destroy_region_request_t xcb_out;

    xcb_out.region = region;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xfixes_set_region_sizeof (const void  *_buffer,
                              uint32_t     rectangles_len)
{
    char *xcb_tmp = (char *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xfixes_set_region_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* rectangles */
    xcb_block_len += rectangles_len * sizeof(xcb_rectangle_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_rectangle_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_xfixes_set_region_checked (xcb_connection_t      *c,
                               xcb_xfixes_region_t    region,
                               uint32_t               rectangles_len,
                               const xcb_rectangle_t *rectangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SET_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_set_region_request_t xcb_out;

    xcb_out.region = region;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rectangles */
    xcb_parts[4].iov_base = (char *) rectangles;
    xcb_parts[4].iov_len = rectangles_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_set_region (xcb_connection_t      *c,
                       xcb_xfixes_region_t    region,
                       uint32_t               rectangles_len,
                       const xcb_rectangle_t *rectangles)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SET_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_set_region_request_t xcb_out;

    xcb_out.region = region;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* xcb_rectangle_t rectangles */
    xcb_parts[4].iov_base = (char *) rectangles;
    xcb_parts[4].iov_len = rectangles_len * sizeof(xcb_rectangle_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_rectangle_t *
xcb_xfixes_set_region_rectangles (const xcb_xfixes_set_region_request_t *R)
{
    return (xcb_rectangle_t *) (R + 1);
}

int
xcb_xfixes_set_region_rectangles_length (const xcb_xfixes_set_region_request_t *R)
{
    return (((R->length * 4) - sizeof(xcb_xfixes_set_region_request_t))/sizeof(xcb_rectangle_t));
}

xcb_rectangle_iterator_t
xcb_xfixes_set_region_rectangles_iterator (const xcb_xfixes_set_region_request_t *R)
{
    xcb_rectangle_iterator_t i;
    i.data = (xcb_rectangle_t *) (R + 1);
    i.rem = (((R->length * 4) - sizeof(xcb_xfixes_set_region_request_t))/sizeof(xcb_rectangle_t));
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_xfixes_copy_region_checked (xcb_connection_t    *c,
                                xcb_xfixes_region_t  source,
                                xcb_xfixes_region_t  destination)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_COPY_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_copy_region_request_t xcb_out;

    xcb_out.source = source;
    xcb_out.destination = destination;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_copy_region (xcb_connection_t    *c,
                        xcb_xfixes_region_t  source,
                        xcb_xfixes_region_t  destination)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_COPY_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_copy_region_request_t xcb_out;

    xcb_out.source = source;
    xcb_out.destination = destination;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_union_region_checked (xcb_connection_t    *c,
                                 xcb_xfixes_region_t  source1,
                                 xcb_xfixes_region_t  source2,
                                 xcb_xfixes_region_t  destination)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_UNION_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_union_region_request_t xcb_out;

    xcb_out.source1 = source1;
    xcb_out.source2 = source2;
    xcb_out.destination = destination;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_union_region (xcb_connection_t    *c,
                         xcb_xfixes_region_t  source1,
                         xcb_xfixes_region_t  source2,
                         xcb_xfixes_region_t  destination)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_UNION_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_union_region_request_t xcb_out;

    xcb_out.source1 = source1;
    xcb_out.source2 = source2;
    xcb_out.destination = destination;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_intersect_region_checked (xcb_connection_t    *c,
                                     xcb_xfixes_region_t  source1,
                                     xcb_xfixes_region_t  source2,
                                     xcb_xfixes_region_t  destination)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_INTERSECT_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_intersect_region_request_t xcb_out;

    xcb_out.source1 = source1;
    xcb_out.source2 = source2;
    xcb_out.destination = destination;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_intersect_region (xcb_connection_t    *c,
                             xcb_xfixes_region_t  source1,
                             xcb_xfixes_region_t  source2,
                             xcb_xfixes_region_t  destination)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_INTERSECT_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_intersect_region_request_t xcb_out;

    xcb_out.source1 = source1;
    xcb_out.source2 = source2;
    xcb_out.destination = destination;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_subtract_region_checked (xcb_connection_t    *c,
                                    xcb_xfixes_region_t  source1,
                                    xcb_xfixes_region_t  source2,
                                    xcb_xfixes_region_t  destination)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SUBTRACT_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_subtract_region_request_t xcb_out;

    xcb_out.source1 = source1;
    xcb_out.source2 = source2;
    xcb_out.destination = destination;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_subtract_region (xcb_connection_t    *c,
                            xcb_xfixes_region_t  source1,
                            xcb_xfixes_region_t  source2,
                            xcb_xfixes_region_t  destination)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SUBTRACT_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_subtract_region_request_t xcb_out;

    xcb_out.source1 = source1;
    xcb_out.source2 = source2;
    xcb_out.destination = destination;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_invert_region_checked (xcb_connection_t    *c,
                                  xcb_xfixes_region_t  source,
                                  xcb_rectangle_t      bounds,
                                  xcb_xfixes_region_t  destination)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_INVERT_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_invert_region_request_t xcb_out;

    xcb_out.source = source;
    xcb_out.bounds = bounds;
    xcb_out.destination = destination;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_invert_region (xcb_connection_t    *c,
                          xcb_xfixes_region_t  source,
                          xcb_rectangle_t      bounds,
                          xcb_xfixes_region_t  destination)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_INVERT_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_invert_region_request_t xcb_out;

    xcb_out.source = source;
    xcb_out.bounds = bounds;
    xcb_out.destination = destination;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_translate_region_checked (xcb_connection_t    *c,
                                     xcb_xfixes_region_t  region,
                                     int16_t              dx,
                                     int16_t              dy)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_TRANSLATE_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_translate_region_request_t xcb_out;

    xcb_out.region = region;
    xcb_out.dx = dx;
    xcb_out.dy = dy;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_translate_region (xcb_connection_t    *c,
                             xcb_xfixes_region_t  region,
                             int16_t              dx,
                             int16_t              dy)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_TRANSLATE_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_translate_region_request_t xcb_out;

    xcb_out.region = region;
    xcb_out.dx = dx;
    xcb_out.dy = dy;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_region_extents_checked (xcb_connection_t    *c,
                                   xcb_xfixes_region_t  source,
                                   xcb_xfixes_region_t  destination)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_REGION_EXTENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_region_extents_request_t xcb_out;

    xcb_out.source = source;
    xcb_out.destination = destination;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_region_extents (xcb_connection_t    *c,
                           xcb_xfixes_region_t  source,
                           xcb_xfixes_region_t  destination)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_REGION_EXTENTS,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_region_extents_request_t xcb_out;

    xcb_out.source = source;
    xcb_out.destination = destination;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xfixes_fetch_region_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xfixes_fetch_region_reply_t *_aux = (xcb_xfixes_fetch_region_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xfixes_fetch_region_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* rectangles */
    xcb_block_len += (_aux->length / 2) * sizeof(xcb_rectangle_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(xcb_rectangle_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xfixes_fetch_region_cookie_t
xcb_xfixes_fetch_region (xcb_connection_t    *c,
                         xcb_xfixes_region_t  region)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_FETCH_REGION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xfixes_fetch_region_cookie_t xcb_ret;
    xcb_xfixes_fetch_region_request_t xcb_out;

    xcb_out.region = region;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xfixes_fetch_region_cookie_t
xcb_xfixes_fetch_region_unchecked (xcb_connection_t    *c,
                                   xcb_xfixes_region_t  region)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_FETCH_REGION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xfixes_fetch_region_cookie_t xcb_ret;
    xcb_xfixes_fetch_region_request_t xcb_out;

    xcb_out.region = region;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_rectangle_t *
xcb_xfixes_fetch_region_rectangles (const xcb_xfixes_fetch_region_reply_t *R)
{
    return (xcb_rectangle_t *) (R + 1);
}

int
xcb_xfixes_fetch_region_rectangles_length (const xcb_xfixes_fetch_region_reply_t *R)
{
    return (R->length / 2);
}

xcb_rectangle_iterator_t
xcb_xfixes_fetch_region_rectangles_iterator (const xcb_xfixes_fetch_region_reply_t *R)
{
    xcb_rectangle_iterator_t i;
    i.data = (xcb_rectangle_t *) (R + 1);
    i.rem = (R->length / 2);
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xfixes_fetch_region_reply_t *
xcb_xfixes_fetch_region_reply (xcb_connection_t                  *c,
                               xcb_xfixes_fetch_region_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_xfixes_fetch_region_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_xfixes_set_gc_clip_region_checked (xcb_connection_t    *c,
                                       xcb_gcontext_t       gc,
                                       xcb_xfixes_region_t  region,
                                       int16_t              x_origin,
                                       int16_t              y_origin)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SET_GC_CLIP_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_set_gc_clip_region_request_t xcb_out;

    xcb_out.gc = gc;
    xcb_out.region = region;
    xcb_out.x_origin = x_origin;
    xcb_out.y_origin = y_origin;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_set_gc_clip_region (xcb_connection_t    *c,
                               xcb_gcontext_t       gc,
                               xcb_xfixes_region_t  region,
                               int16_t              x_origin,
                               int16_t              y_origin)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SET_GC_CLIP_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_set_gc_clip_region_request_t xcb_out;

    xcb_out.gc = gc;
    xcb_out.region = region;
    xcb_out.x_origin = x_origin;
    xcb_out.y_origin = y_origin;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_set_window_shape_region_checked (xcb_connection_t    *c,
                                            xcb_window_t         dest,
                                            xcb_shape_kind_t     dest_kind,
                                            int16_t              x_offset,
                                            int16_t              y_offset,
                                            xcb_xfixes_region_t  region)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SET_WINDOW_SHAPE_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_set_window_shape_region_request_t xcb_out;

    xcb_out.dest = dest;
    xcb_out.dest_kind = dest_kind;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.x_offset = x_offset;
    xcb_out.y_offset = y_offset;
    xcb_out.region = region;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_set_window_shape_region (xcb_connection_t    *c,
                                    xcb_window_t         dest,
                                    xcb_shape_kind_t     dest_kind,
                                    int16_t              x_offset,
                                    int16_t              y_offset,
                                    xcb_xfixes_region_t  region)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SET_WINDOW_SHAPE_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_set_window_shape_region_request_t xcb_out;

    xcb_out.dest = dest;
    xcb_out.dest_kind = dest_kind;
    memset(xcb_out.pad0, 0, 3);
    xcb_out.x_offset = x_offset;
    xcb_out.y_offset = y_offset;
    xcb_out.region = region;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_set_picture_clip_region_checked (xcb_connection_t     *c,
                                            xcb_render_picture_t  picture,
                                            xcb_xfixes_region_t   region,
                                            int16_t               x_origin,
                                            int16_t               y_origin)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SET_PICTURE_CLIP_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_set_picture_clip_region_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.region = region;
    xcb_out.x_origin = x_origin;
    xcb_out.y_origin = y_origin;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_set_picture_clip_region (xcb_connection_t     *c,
                                    xcb_render_picture_t  picture,
                                    xcb_xfixes_region_t   region,
                                    int16_t               x_origin,
                                    int16_t               y_origin)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SET_PICTURE_CLIP_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_set_picture_clip_region_request_t xcb_out;

    xcb_out.picture = picture;
    xcb_out.region = region;
    xcb_out.x_origin = x_origin;
    xcb_out.y_origin = y_origin;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xfixes_set_cursor_name_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xfixes_set_cursor_name_request_t *_aux = (xcb_xfixes_set_cursor_name_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xfixes_set_cursor_name_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->nbytes * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_xfixes_set_cursor_name_checked (xcb_connection_t *c,
                                    xcb_cursor_t      cursor,
                                    uint16_t          nbytes,
                                    const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SET_CURSOR_NAME,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_set_cursor_name_request_t xcb_out;

    xcb_out.cursor = cursor;
    xcb_out.nbytes = nbytes;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = nbytes * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_set_cursor_name (xcb_connection_t *c,
                            xcb_cursor_t      cursor,
                            uint16_t          nbytes,
                            const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SET_CURSOR_NAME,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_set_cursor_name_request_t xcb_out;

    xcb_out.cursor = cursor;
    xcb_out.nbytes = nbytes;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = nbytes * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_xfixes_set_cursor_name_name (const xcb_xfixes_set_cursor_name_request_t *R)
{
    return (char *) (R + 1);
}

int
xcb_xfixes_set_cursor_name_name_length (const xcb_xfixes_set_cursor_name_request_t *R)
{
    return R->nbytes;
}

xcb_generic_iterator_t
xcb_xfixes_set_cursor_name_name_end (const xcb_xfixes_set_cursor_name_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->nbytes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

int
xcb_xfixes_get_cursor_name_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xfixes_get_cursor_name_reply_t *_aux = (xcb_xfixes_get_cursor_name_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xfixes_get_cursor_name_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->nbytes * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xfixes_get_cursor_name_cookie_t
xcb_xfixes_get_cursor_name (xcb_connection_t *c,
                            xcb_cursor_t      cursor)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_GET_CURSOR_NAME,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xfixes_get_cursor_name_cookie_t xcb_ret;
    xcb_xfixes_get_cursor_name_request_t xcb_out;

    xcb_out.cursor = cursor;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xfixes_get_cursor_name_cookie_t
xcb_xfixes_get_cursor_name_unchecked (xcb_connection_t *c,
                                      xcb_cursor_t      cursor)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_GET_CURSOR_NAME,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xfixes_get_cursor_name_cookie_t xcb_ret;
    xcb_xfixes_get_cursor_name_request_t xcb_out;

    xcb_out.cursor = cursor;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_xfixes_get_cursor_name_name (const xcb_xfixes_get_cursor_name_reply_t *R)
{
    return (char *) (R + 1);
}

int
xcb_xfixes_get_cursor_name_name_length (const xcb_xfixes_get_cursor_name_reply_t *R)
{
    return R->nbytes;
}

xcb_generic_iterator_t
xcb_xfixes_get_cursor_name_name_end (const xcb_xfixes_get_cursor_name_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->nbytes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xfixes_get_cursor_name_reply_t *
xcb_xfixes_get_cursor_name_reply (xcb_connection_t                     *c,
                                  xcb_xfixes_get_cursor_name_cookie_t   cookie  /**< */,
                                  xcb_generic_error_t                 **e)
{
    return (xcb_xfixes_get_cursor_name_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

int
xcb_xfixes_get_cursor_image_and_name_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xfixes_get_cursor_image_and_name_reply_t *_aux = (xcb_xfixes_get_cursor_image_and_name_reply_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xfixes_get_cursor_image_and_name_reply_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* cursor_image */
    xcb_block_len += (_aux->width * _aux->height) * sizeof(uint32_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint32_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->nbytes * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_xfixes_get_cursor_image_and_name_cookie_t
xcb_xfixes_get_cursor_image_and_name (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_GET_CURSOR_IMAGE_AND_NAME,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xfixes_get_cursor_image_and_name_cookie_t xcb_ret;
    xcb_xfixes_get_cursor_image_and_name_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_xfixes_get_cursor_image_and_name_cookie_t
xcb_xfixes_get_cursor_image_and_name_unchecked (xcb_connection_t *c)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_GET_CURSOR_IMAGE_AND_NAME,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_xfixes_get_cursor_image_and_name_cookie_t xcb_ret;
    xcb_xfixes_get_cursor_image_and_name_request_t xcb_out;


    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint32_t *
xcb_xfixes_get_cursor_image_and_name_cursor_image (const xcb_xfixes_get_cursor_image_and_name_reply_t *R)
{
    return (uint32_t *) (R + 1);
}

int
xcb_xfixes_get_cursor_image_and_name_cursor_image_length (const xcb_xfixes_get_cursor_image_and_name_reply_t *R)
{
    return (R->width * R->height);
}

xcb_generic_iterator_t
xcb_xfixes_get_cursor_image_and_name_cursor_image_end (const xcb_xfixes_get_cursor_image_and_name_reply_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint32_t *) (R + 1)) + ((R->width * R->height));
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

char *
xcb_xfixes_get_cursor_image_and_name_name (const xcb_xfixes_get_cursor_image_and_name_reply_t *R)
{
    xcb_generic_iterator_t prev = xcb_xfixes_get_cursor_image_and_name_cursor_image_end(R);
    return (char *) ((char *) prev.data + XCB_TYPE_PAD(char, prev.index) + 0);
}

int
xcb_xfixes_get_cursor_image_and_name_name_length (const xcb_xfixes_get_cursor_image_and_name_reply_t *R)
{
    return R->nbytes;
}

xcb_generic_iterator_t
xcb_xfixes_get_cursor_image_and_name_name_end (const xcb_xfixes_get_cursor_image_and_name_reply_t *R)
{
    xcb_generic_iterator_t i;
    xcb_generic_iterator_t prev = xcb_xfixes_get_cursor_image_and_name_cursor_image_end(R);
    i.data = ((char *) ((char*) prev.data + XCB_TYPE_PAD(char, prev.index))) + (R->nbytes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_xfixes_get_cursor_image_and_name_reply_t *
xcb_xfixes_get_cursor_image_and_name_reply (xcb_connection_t                               *c,
                                            xcb_xfixes_get_cursor_image_and_name_cookie_t   cookie  /**< */,
                                            xcb_generic_error_t                           **e)
{
    return (xcb_xfixes_get_cursor_image_and_name_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_xfixes_change_cursor_checked (xcb_connection_t *c,
                                  xcb_cursor_t      source,
                                  xcb_cursor_t      destination)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CHANGE_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_change_cursor_request_t xcb_out;

    xcb_out.source = source;
    xcb_out.destination = destination;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_change_cursor (xcb_connection_t *c,
                          xcb_cursor_t      source,
                          xcb_cursor_t      destination)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CHANGE_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_change_cursor_request_t xcb_out;

    xcb_out.source = source;
    xcb_out.destination = destination;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

int
xcb_xfixes_change_cursor_by_name_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xfixes_change_cursor_by_name_request_t *_aux = (xcb_xfixes_change_cursor_by_name_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xfixes_change_cursor_by_name_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* name */
    xcb_block_len += _aux->nbytes * sizeof(char);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(char);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_xfixes_change_cursor_by_name_checked (xcb_connection_t *c,
                                          xcb_cursor_t      src,
                                          uint16_t          nbytes,
                                          const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CHANGE_CURSOR_BY_NAME,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_change_cursor_by_name_request_t xcb_out;

    xcb_out.src = src;
    xcb_out.nbytes = nbytes;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = nbytes * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_change_cursor_by_name (xcb_connection_t *c,
                                  xcb_cursor_t      src,
                                  uint16_t          nbytes,
                                  const char       *name)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CHANGE_CURSOR_BY_NAME,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_change_cursor_by_name_request_t xcb_out;

    xcb_out.src = src;
    xcb_out.nbytes = nbytes;
    memset(xcb_out.pad0, 0, 2);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* char name */
    xcb_parts[4].iov_base = (char *) name;
    xcb_parts[4].iov_len = nbytes * sizeof(char);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

char *
xcb_xfixes_change_cursor_by_name_name (const xcb_xfixes_change_cursor_by_name_request_t *R)
{
    return (char *) (R + 1);
}

int
xcb_xfixes_change_cursor_by_name_name_length (const xcb_xfixes_change_cursor_by_name_request_t *R)
{
    return R->nbytes;
}

xcb_generic_iterator_t
xcb_xfixes_change_cursor_by_name_name_end (const xcb_xfixes_change_cursor_by_name_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((char *) (R + 1)) + (R->nbytes);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_xfixes_expand_region_checked (xcb_connection_t    *c,
                                  xcb_xfixes_region_t  source,
                                  xcb_xfixes_region_t  destination,
                                  uint16_t             left,
                                  uint16_t             right,
                                  uint16_t             top,
                                  uint16_t             bottom)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_EXPAND_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_expand_region_request_t xcb_out;

    xcb_out.source = source;
    xcb_out.destination = destination;
    xcb_out.left = left;
    xcb_out.right = right;
    xcb_out.top = top;
    xcb_out.bottom = bottom;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_expand_region (xcb_connection_t    *c,
                          xcb_xfixes_region_t  source,
                          xcb_xfixes_region_t  destination,
                          uint16_t             left,
                          uint16_t             right,
                          uint16_t             top,
                          uint16_t             bottom)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_EXPAND_REGION,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_expand_region_request_t xcb_out;

    xcb_out.source = source;
    xcb_out.destination = destination;
    xcb_out.left = left;
    xcb_out.right = right;
    xcb_out.top = top;
    xcb_out.bottom = bottom;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_hide_cursor_checked (xcb_connection_t *c,
                                xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_HIDE_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_hide_cursor_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_hide_cursor (xcb_connection_t *c,
                        xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_HIDE_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_hide_cursor_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_show_cursor_checked (xcb_connection_t *c,
                                xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SHOW_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_show_cursor_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_show_cursor (xcb_connection_t *c,
                        xcb_window_t      window)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_SHOW_CURSOR,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_show_cursor_request_t xcb_out;

    xcb_out.window = window;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

void
xcb_xfixes_barrier_next (xcb_xfixes_barrier_iterator_t *i)
{
    --i->rem;
    ++i->data;
    i->index += sizeof(xcb_xfixes_barrier_t);
}

xcb_generic_iterator_t
xcb_xfixes_barrier_end (xcb_xfixes_barrier_iterator_t i)
{
    xcb_generic_iterator_t ret;
    ret.data = i.data + i.rem;
    ret.index = i.index + ((char *) ret.data - (char *) i.data);
    ret.rem = 0;
    return ret;
}

int
xcb_xfixes_create_pointer_barrier_sizeof (const void  *_buffer)
{
    char *xcb_tmp = (char *)_buffer;
    const xcb_xfixes_create_pointer_barrier_request_t *_aux = (xcb_xfixes_create_pointer_barrier_request_t *)_buffer;
    unsigned int xcb_buffer_len = 0;
    unsigned int xcb_block_len = 0;
    unsigned int xcb_pad = 0;
    unsigned int xcb_align_to = 0;


    xcb_block_len += sizeof(xcb_xfixes_create_pointer_barrier_request_t);
    xcb_tmp += xcb_block_len;
    xcb_buffer_len += xcb_block_len;
    xcb_block_len = 0;
    /* devices */
    xcb_block_len += _aux->num_devices * sizeof(uint16_t);
    xcb_tmp += xcb_block_len;
    xcb_align_to = ALIGNOF(uint16_t);
    /* insert padding */
    xcb_pad = -xcb_block_len & (xcb_align_to - 1);
    xcb_buffer_len += xcb_block_len + xcb_pad;
    if (0 != xcb_pad) {
        xcb_tmp += xcb_pad;
        xcb_pad = 0;
    }
    xcb_block_len = 0;

    return xcb_buffer_len;
}

xcb_void_cookie_t
xcb_xfixes_create_pointer_barrier_checked (xcb_connection_t     *c,
                                           xcb_xfixes_barrier_t  barrier,
                                           xcb_window_t          window,
                                           uint16_t              x1,
                                           uint16_t              y1,
                                           uint16_t              x2,
                                           uint16_t              y2,
                                           uint32_t              directions,
                                           uint16_t              num_devices,
                                           const uint16_t       *devices)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CREATE_POINTER_BARRIER,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_create_pointer_barrier_request_t xcb_out;

    xcb_out.barrier = barrier;
    xcb_out.window = window;
    xcb_out.x1 = x1;
    xcb_out.y1 = y1;
    xcb_out.x2 = x2;
    xcb_out.y2 = y2;
    xcb_out.directions = directions;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.num_devices = num_devices;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint16_t devices */
    xcb_parts[4].iov_base = (char *) devices;
    xcb_parts[4].iov_len = num_devices * sizeof(uint16_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_create_pointer_barrier (xcb_connection_t     *c,
                                   xcb_xfixes_barrier_t  barrier,
                                   xcb_window_t          window,
                                   uint16_t              x1,
                                   uint16_t              y1,
                                   uint16_t              x2,
                                   uint16_t              y2,
                                   uint32_t              directions,
                                   uint16_t              num_devices,
                                   const uint16_t       *devices)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 4,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_CREATE_POINTER_BARRIER,
        .isvoid = 1
    };

    struct iovec xcb_parts[6];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_create_pointer_barrier_request_t xcb_out;

    xcb_out.barrier = barrier;
    xcb_out.window = window;
    xcb_out.x1 = x1;
    xcb_out.y1 = y1;
    xcb_out.x2 = x2;
    xcb_out.y2 = y2;
    xcb_out.directions = directions;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.num_devices = num_devices;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;
    /* uint16_t devices */
    xcb_parts[4].iov_base = (char *) devices;
    xcb_parts[4].iov_len = num_devices * sizeof(uint16_t);
    xcb_parts[5].iov_base = 0;
    xcb_parts[5].iov_len = -xcb_parts[4].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

uint16_t *
xcb_xfixes_create_pointer_barrier_devices (const xcb_xfixes_create_pointer_barrier_request_t *R)
{
    return (uint16_t *) (R + 1);
}

int
xcb_xfixes_create_pointer_barrier_devices_length (const xcb_xfixes_create_pointer_barrier_request_t *R)
{
    return R->num_devices;
}

xcb_generic_iterator_t
xcb_xfixes_create_pointer_barrier_devices_end (const xcb_xfixes_create_pointer_barrier_request_t *R)
{
    xcb_generic_iterator_t i;
    i.data = ((uint16_t *) (R + 1)) + (R->num_devices);
    i.rem = 0;
    i.index = (char *) i.data - (char *) R;
    return i;
}

xcb_void_cookie_t
xcb_xfixes_delete_pointer_barrier_checked (xcb_connection_t     *c,
                                           xcb_xfixes_barrier_t  barrier)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_DELETE_POINTER_BARRIER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_delete_pointer_barrier_request_t xcb_out;

    xcb_out.barrier = barrier;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_xfixes_delete_pointer_barrier (xcb_connection_t     *c,
                                   xcb_xfixes_barrier_t  barrier)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_xfixes_id,
        .opcode = XCB_XFIXES_DELETE_POINTER_BARRIER,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_xfixes_delete_pointer_barrier_request_t xcb_out;

    xcb_out.barrier = barrier;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d24 3
a26 3
xcb_xfixes_query_version (xcb_connection_t *c  /**< */,
                          uint32_t          client_major_version  /**< */,
                          uint32_t          client_minor_version  /**< */)
d29 4
a32 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_QUERY_VERSION,
        /* isvoid */ 0
d52 3
a54 3
xcb_xfixes_query_version_unchecked (xcb_connection_t *c  /**< */,
                                    uint32_t          client_major_version  /**< */,
                                    uint32_t          client_minor_version  /**< */)
d57 4
a60 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_QUERY_VERSION,
        /* isvoid */ 0
d80 1
a80 1
xcb_xfixes_query_version_reply (xcb_connection_t                   *c  /**< */,
d82 1
a82 1
                                xcb_generic_error_t               **e  /**< */)
d88 5
a92 5
xcb_xfixes_change_save_set_checked (xcb_connection_t *c  /**< */,
                                    uint8_t           mode  /**< */,
                                    uint8_t           target  /**< */,
                                    uint8_t           map  /**< */,
                                    xcb_window_t      window  /**< */)
d95 4
a98 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CHANGE_SAVE_SET,
        /* isvoid */ 1
d121 5
a125 5
xcb_xfixes_change_save_set (xcb_connection_t *c  /**< */,
                            uint8_t           mode  /**< */,
                            uint8_t           target  /**< */,
                            uint8_t           map  /**< */,
                            xcb_window_t      window  /**< */)
d128 4
a131 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CHANGE_SAVE_SET,
        /* isvoid */ 1
d154 4
a157 4
xcb_xfixes_select_selection_input_checked (xcb_connection_t *c  /**< */,
                                           xcb_window_t      window  /**< */,
                                           xcb_atom_t        selection  /**< */,
                                           uint32_t          event_mask  /**< */)
d160 4
a163 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SELECT_SELECTION_INPUT,
        /* isvoid */ 1
d184 4
a187 4
xcb_xfixes_select_selection_input (xcb_connection_t *c  /**< */,
                                   xcb_window_t      window  /**< */,
                                   xcb_atom_t        selection  /**< */,
                                   uint32_t          event_mask  /**< */)
d190 4
a193 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SELECT_SELECTION_INPUT,
        /* isvoid */ 1
d214 3
a216 3
xcb_xfixes_select_cursor_input_checked (xcb_connection_t *c  /**< */,
                                        xcb_window_t      window  /**< */,
                                        uint32_t          event_mask  /**< */)
d219 4
a222 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SELECT_CURSOR_INPUT,
        /* isvoid */ 1
d242 3
a244 3
xcb_xfixes_select_cursor_input (xcb_connection_t *c  /**< */,
                                xcb_window_t      window  /**< */,
                                uint32_t          event_mask  /**< */)
d247 4
a250 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SELECT_CURSOR_INPUT,
        /* isvoid */ 1
d270 1
a270 1
xcb_xfixes_get_cursor_image_sizeof (const void  *_buffer  /**< */)
d301 1
a301 1
xcb_xfixes_get_cursor_image (xcb_connection_t *c  /**< */)
d304 4
a307 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_GET_CURSOR_IMAGE,
        /* isvoid */ 0
d325 1
a325 1
xcb_xfixes_get_cursor_image_unchecked (xcb_connection_t *c  /**< */)
d328 4
a331 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_GET_CURSOR_IMAGE,
        /* isvoid */ 0
d349 1
a349 1
xcb_xfixes_get_cursor_image_cursor_image (const xcb_xfixes_get_cursor_image_reply_t *R  /**< */)
d355 1
a355 1
xcb_xfixes_get_cursor_image_cursor_image_length (const xcb_xfixes_get_cursor_image_reply_t *R  /**< */)
d361 1
a361 1
xcb_xfixes_get_cursor_image_cursor_image_end (const xcb_xfixes_get_cursor_image_reply_t *R  /**< */)
d371 1
a371 1
xcb_xfixes_get_cursor_image_reply (xcb_connection_t                      *c  /**< */,
d373 1
a373 1
                                   xcb_generic_error_t                  **e  /**< */)
d379 1
a379 1
xcb_xfixes_region_next (xcb_xfixes_region_iterator_t *i  /**< */)
d387 1
a387 1
xcb_xfixes_region_end (xcb_xfixes_region_iterator_t i  /**< */)
d397 2
a398 2
xcb_xfixes_create_region_sizeof (const void  *_buffer  /**< */,
                                 uint32_t     rectangles_len  /**< */)
d428 4
a431 4
xcb_xfixes_create_region_checked (xcb_connection_t      *c  /**< */,
                                  xcb_xfixes_region_t    region  /**< */,
                                  uint32_t               rectangles_len  /**< */,
                                  const xcb_rectangle_t *rectangles  /**< */)
d434 4
a437 4
        /* count */ 4,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CREATE_REGION,
        /* isvoid */ 1
d461 4
a464 4
xcb_xfixes_create_region (xcb_connection_t      *c  /**< */,
                          xcb_xfixes_region_t    region  /**< */,
                          uint32_t               rectangles_len  /**< */,
                          const xcb_rectangle_t *rectangles  /**< */)
d467 4
a470 4
        /* count */ 4,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CREATE_REGION,
        /* isvoid */ 1
d493 22
d516 3
a518 3
xcb_xfixes_create_region_from_bitmap_checked (xcb_connection_t    *c  /**< */,
                                              xcb_xfixes_region_t  region  /**< */,
                                              xcb_pixmap_t         bitmap  /**< */)
d521 4
a524 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CREATE_REGION_FROM_BITMAP,
        /* isvoid */ 1
d544 3
a546 3
xcb_xfixes_create_region_from_bitmap (xcb_connection_t    *c  /**< */,
                                      xcb_xfixes_region_t  region  /**< */,
                                      xcb_pixmap_t         bitmap  /**< */)
d549 4
a552 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CREATE_REGION_FROM_BITMAP,
        /* isvoid */ 1
d572 4
a575 4
xcb_xfixes_create_region_from_window_checked (xcb_connection_t    *c  /**< */,
                                              xcb_xfixes_region_t  region  /**< */,
                                              xcb_window_t         window  /**< */,
                                              xcb_shape_kind_t     kind  /**< */)
d578 4
a581 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CREATE_REGION_FROM_WINDOW,
        /* isvoid */ 1
d603 4
a606 4
xcb_xfixes_create_region_from_window (xcb_connection_t    *c  /**< */,
                                      xcb_xfixes_region_t  region  /**< */,
                                      xcb_window_t         window  /**< */,
                                      xcb_shape_kind_t     kind  /**< */)
d609 4
a612 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CREATE_REGION_FROM_WINDOW,
        /* isvoid */ 1
d634 3
a636 3
xcb_xfixes_create_region_from_gc_checked (xcb_connection_t    *c  /**< */,
                                          xcb_xfixes_region_t  region  /**< */,
                                          xcb_gcontext_t       gc  /**< */)
d639 4
a642 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CREATE_REGION_FROM_GC,
        /* isvoid */ 1
d662 3
a664 3
xcb_xfixes_create_region_from_gc (xcb_connection_t    *c  /**< */,
                                  xcb_xfixes_region_t  region  /**< */,
                                  xcb_gcontext_t       gc  /**< */)
d667 4
a670 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CREATE_REGION_FROM_GC,
        /* isvoid */ 1
d690 3
a692 3
xcb_xfixes_create_region_from_picture_checked (xcb_connection_t     *c  /**< */,
                                               xcb_xfixes_region_t   region  /**< */,
                                               xcb_render_picture_t  picture  /**< */)
d695 4
a698 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CREATE_REGION_FROM_PICTURE,
        /* isvoid */ 1
d718 3
a720 3
xcb_xfixes_create_region_from_picture (xcb_connection_t     *c  /**< */,
                                       xcb_xfixes_region_t   region  /**< */,
                                       xcb_render_picture_t  picture  /**< */)
d723 4
a726 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CREATE_REGION_FROM_PICTURE,
        /* isvoid */ 1
d746 2
a747 2
xcb_xfixes_destroy_region_checked (xcb_connection_t    *c  /**< */,
                                   xcb_xfixes_region_t  region  /**< */)
d750 4
a753 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_DESTROY_REGION,
        /* isvoid */ 1
d772 2
a773 2
xcb_xfixes_destroy_region (xcb_connection_t    *c  /**< */,
                           xcb_xfixes_region_t  region  /**< */)
d776 4
a779 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_DESTROY_REGION,
        /* isvoid */ 1
d798 2
a799 2
xcb_xfixes_set_region_sizeof (const void  *_buffer  /**< */,
                              uint32_t     rectangles_len  /**< */)
d829 4
a832 4
xcb_xfixes_set_region_checked (xcb_connection_t      *c  /**< */,
                               xcb_xfixes_region_t    region  /**< */,
                               uint32_t               rectangles_len  /**< */,
                               const xcb_rectangle_t *rectangles  /**< */)
d835 4
a838 4
        /* count */ 4,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SET_REGION,
        /* isvoid */ 1
d862 4
a865 4
xcb_xfixes_set_region (xcb_connection_t      *c  /**< */,
                       xcb_xfixes_region_t    region  /**< */,
                       uint32_t               rectangles_len  /**< */,
                       const xcb_rectangle_t *rectangles  /**< */)
d868 4
a871 4
        /* count */ 4,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SET_REGION,
        /* isvoid */ 1
d894 22
d917 3
a919 3
xcb_xfixes_copy_region_checked (xcb_connection_t    *c  /**< */,
                                xcb_xfixes_region_t  source  /**< */,
                                xcb_xfixes_region_t  destination  /**< */)
d922 4
a925 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_COPY_REGION,
        /* isvoid */ 1
d945 3
a947 3
xcb_xfixes_copy_region (xcb_connection_t    *c  /**< */,
                        xcb_xfixes_region_t  source  /**< */,
                        xcb_xfixes_region_t  destination  /**< */)
d950 4
a953 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_COPY_REGION,
        /* isvoid */ 1
d973 4
a976 4
xcb_xfixes_union_region_checked (xcb_connection_t    *c  /**< */,
                                 xcb_xfixes_region_t  source1  /**< */,
                                 xcb_xfixes_region_t  source2  /**< */,
                                 xcb_xfixes_region_t  destination  /**< */)
d979 4
a982 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_UNION_REGION,
        /* isvoid */ 1
d1003 4
a1006 4
xcb_xfixes_union_region (xcb_connection_t    *c  /**< */,
                         xcb_xfixes_region_t  source1  /**< */,
                         xcb_xfixes_region_t  source2  /**< */,
                         xcb_xfixes_region_t  destination  /**< */)
d1009 4
a1012 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_UNION_REGION,
        /* isvoid */ 1
d1033 4
a1036 4
xcb_xfixes_intersect_region_checked (xcb_connection_t    *c  /**< */,
                                     xcb_xfixes_region_t  source1  /**< */,
                                     xcb_xfixes_region_t  source2  /**< */,
                                     xcb_xfixes_region_t  destination  /**< */)
d1039 4
a1042 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_INTERSECT_REGION,
        /* isvoid */ 1
d1063 4
a1066 4
xcb_xfixes_intersect_region (xcb_connection_t    *c  /**< */,
                             xcb_xfixes_region_t  source1  /**< */,
                             xcb_xfixes_region_t  source2  /**< */,
                             xcb_xfixes_region_t  destination  /**< */)
d1069 4
a1072 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_INTERSECT_REGION,
        /* isvoid */ 1
d1093 4
a1096 4
xcb_xfixes_subtract_region_checked (xcb_connection_t    *c  /**< */,
                                    xcb_xfixes_region_t  source1  /**< */,
                                    xcb_xfixes_region_t  source2  /**< */,
                                    xcb_xfixes_region_t  destination  /**< */)
d1099 4
a1102 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SUBTRACT_REGION,
        /* isvoid */ 1
d1123 4
a1126 4
xcb_xfixes_subtract_region (xcb_connection_t    *c  /**< */,
                            xcb_xfixes_region_t  source1  /**< */,
                            xcb_xfixes_region_t  source2  /**< */,
                            xcb_xfixes_region_t  destination  /**< */)
d1129 4
a1132 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SUBTRACT_REGION,
        /* isvoid */ 1
d1153 4
a1156 4
xcb_xfixes_invert_region_checked (xcb_connection_t    *c  /**< */,
                                  xcb_xfixes_region_t  source  /**< */,
                                  xcb_rectangle_t      bounds  /**< */,
                                  xcb_xfixes_region_t  destination  /**< */)
d1159 4
a1162 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_INVERT_REGION,
        /* isvoid */ 1
d1183 4
a1186 4
xcb_xfixes_invert_region (xcb_connection_t    *c  /**< */,
                          xcb_xfixes_region_t  source  /**< */,
                          xcb_rectangle_t      bounds  /**< */,
                          xcb_xfixes_region_t  destination  /**< */)
d1189 4
a1192 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_INVERT_REGION,
        /* isvoid */ 1
d1213 4
a1216 4
xcb_xfixes_translate_region_checked (xcb_connection_t    *c  /**< */,
                                     xcb_xfixes_region_t  region  /**< */,
                                     int16_t              dx  /**< */,
                                     int16_t              dy  /**< */)
d1219 4
a1222 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_TRANSLATE_REGION,
        /* isvoid */ 1
d1243 4
a1246 4
xcb_xfixes_translate_region (xcb_connection_t    *c  /**< */,
                             xcb_xfixes_region_t  region  /**< */,
                             int16_t              dx  /**< */,
                             int16_t              dy  /**< */)
d1249 4
a1252 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_TRANSLATE_REGION,
        /* isvoid */ 1
d1273 3
a1275 3
xcb_xfixes_region_extents_checked (xcb_connection_t    *c  /**< */,
                                   xcb_xfixes_region_t  source  /**< */,
                                   xcb_xfixes_region_t  destination  /**< */)
d1278 4
a1281 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_REGION_EXTENTS,
        /* isvoid */ 1
d1301 3
a1303 3
xcb_xfixes_region_extents (xcb_connection_t    *c  /**< */,
                           xcb_xfixes_region_t  source  /**< */,
                           xcb_xfixes_region_t  destination  /**< */)
d1306 4
a1309 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_REGION_EXTENTS,
        /* isvoid */ 1
d1329 1
a1329 1
xcb_xfixes_fetch_region_sizeof (const void  *_buffer  /**< */)
d1360 2
a1361 2
xcb_xfixes_fetch_region (xcb_connection_t    *c  /**< */,
                         xcb_xfixes_region_t  region  /**< */)
d1364 4
a1367 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_FETCH_REGION,
        /* isvoid */ 0
d1386 2
a1387 2
xcb_xfixes_fetch_region_unchecked (xcb_connection_t    *c  /**< */,
                                   xcb_xfixes_region_t  region  /**< */)
d1390 4
a1393 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_FETCH_REGION,
        /* isvoid */ 0
d1412 1
a1412 1
xcb_xfixes_fetch_region_rectangles (const xcb_xfixes_fetch_region_reply_t *R  /**< */)
d1418 1
a1418 1
xcb_xfixes_fetch_region_rectangles_length (const xcb_xfixes_fetch_region_reply_t *R  /**< */)
d1424 1
a1424 1
xcb_xfixes_fetch_region_rectangles_iterator (const xcb_xfixes_fetch_region_reply_t *R  /**< */)
d1434 1
a1434 1
xcb_xfixes_fetch_region_reply (xcb_connection_t                  *c  /**< */,
d1436 1
a1436 1
                               xcb_generic_error_t              **e  /**< */)
d1442 5
a1446 5
xcb_xfixes_set_gc_clip_region_checked (xcb_connection_t    *c  /**< */,
                                       xcb_gcontext_t       gc  /**< */,
                                       xcb_xfixes_region_t  region  /**< */,
                                       int16_t              x_origin  /**< */,
                                       int16_t              y_origin  /**< */)
d1449 4
a1452 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SET_GC_CLIP_REGION,
        /* isvoid */ 1
d1474 5
a1478 5
xcb_xfixes_set_gc_clip_region (xcb_connection_t    *c  /**< */,
                               xcb_gcontext_t       gc  /**< */,
                               xcb_xfixes_region_t  region  /**< */,
                               int16_t              x_origin  /**< */,
                               int16_t              y_origin  /**< */)
d1481 4
a1484 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SET_GC_CLIP_REGION,
        /* isvoid */ 1
d1506 6
a1511 6
xcb_xfixes_set_window_shape_region_checked (xcb_connection_t    *c  /**< */,
                                            xcb_window_t         dest  /**< */,
                                            xcb_shape_kind_t     dest_kind  /**< */,
                                            int16_t              x_offset  /**< */,
                                            int16_t              y_offset  /**< */,
                                            xcb_xfixes_region_t  region  /**< */)
d1514 4
a1517 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SET_WINDOW_SHAPE_REGION,
        /* isvoid */ 1
d1541 6
a1546 6
xcb_xfixes_set_window_shape_region (xcb_connection_t    *c  /**< */,
                                    xcb_window_t         dest  /**< */,
                                    xcb_shape_kind_t     dest_kind  /**< */,
                                    int16_t              x_offset  /**< */,
                                    int16_t              y_offset  /**< */,
                                    xcb_xfixes_region_t  region  /**< */)
d1549 4
a1552 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SET_WINDOW_SHAPE_REGION,
        /* isvoid */ 1
d1576 5
a1580 5
xcb_xfixes_set_picture_clip_region_checked (xcb_connection_t     *c  /**< */,
                                            xcb_render_picture_t  picture  /**< */,
                                            xcb_xfixes_region_t   region  /**< */,
                                            int16_t               x_origin  /**< */,
                                            int16_t               y_origin  /**< */)
d1583 4
a1586 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SET_PICTURE_CLIP_REGION,
        /* isvoid */ 1
d1608 5
a1612 5
xcb_xfixes_set_picture_clip_region (xcb_connection_t     *c  /**< */,
                                    xcb_render_picture_t  picture  /**< */,
                                    xcb_xfixes_region_t   region  /**< */,
                                    int16_t               x_origin  /**< */,
                                    int16_t               y_origin  /**< */)
d1615 4
a1618 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SET_PICTURE_CLIP_REGION,
        /* isvoid */ 1
d1640 1
a1640 1
xcb_xfixes_set_cursor_name_sizeof (const void  *_buffer  /**< */)
d1671 4
a1674 4
xcb_xfixes_set_cursor_name_checked (xcb_connection_t *c  /**< */,
                                    xcb_cursor_t      cursor  /**< */,
                                    uint16_t          nbytes  /**< */,
                                    const char       *name  /**< */)
d1677 4
a1680 4
        /* count */ 4,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SET_CURSOR_NAME,
        /* isvoid */ 1
d1706 4
a1709 4
xcb_xfixes_set_cursor_name (xcb_connection_t *c  /**< */,
                            xcb_cursor_t      cursor  /**< */,
                            uint16_t          nbytes  /**< */,
                            const char       *name  /**< */)
d1712 4
a1715 4
        /* count */ 4,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SET_CURSOR_NAME,
        /* isvoid */ 1
d1740 22
d1763 1
a1763 1
xcb_xfixes_get_cursor_name_sizeof (const void  *_buffer  /**< */)
d1794 2
a1795 2
xcb_xfixes_get_cursor_name (xcb_connection_t *c  /**< */,
                            xcb_cursor_t      cursor  /**< */)
d1798 4
a1801 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_GET_CURSOR_NAME,
        /* isvoid */ 0
d1820 2
a1821 2
xcb_xfixes_get_cursor_name_unchecked (xcb_connection_t *c  /**< */,
                                      xcb_cursor_t      cursor  /**< */)
d1824 4
a1827 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_GET_CURSOR_NAME,
        /* isvoid */ 0
d1846 1
a1846 1
xcb_xfixes_get_cursor_name_name (const xcb_xfixes_get_cursor_name_reply_t *R  /**< */)
d1852 1
a1852 1
xcb_xfixes_get_cursor_name_name_length (const xcb_xfixes_get_cursor_name_reply_t *R  /**< */)
d1858 1
a1858 1
xcb_xfixes_get_cursor_name_name_end (const xcb_xfixes_get_cursor_name_reply_t *R  /**< */)
d1868 1
a1868 1
xcb_xfixes_get_cursor_name_reply (xcb_connection_t                     *c  /**< */,
d1870 1
a1870 1
                                  xcb_generic_error_t                 **e  /**< */)
d1876 1
a1876 1
xcb_xfixes_get_cursor_image_and_name_sizeof (const void  *_buffer  /**< */)
d1890 2
a1891 2
    /* name */
    xcb_block_len += _aux->nbytes * sizeof(char);
d1893 1
a1893 1
    xcb_align_to = ALIGNOF(char);
d1902 2
a1903 2
    /* cursor_image */
    xcb_block_len += (_aux->width * _aux->height) * sizeof(uint32_t);
d1905 1
a1905 1
    xcb_align_to = ALIGNOF(uint32_t);
d1919 1
a1919 1
xcb_xfixes_get_cursor_image_and_name (xcb_connection_t *c  /**< */)
d1922 4
a1925 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_GET_CURSOR_IMAGE_AND_NAME,
        /* isvoid */ 0
d1943 1
a1943 1
xcb_xfixes_get_cursor_image_and_name_unchecked (xcb_connection_t *c  /**< */)
d1946 4
a1949 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_GET_CURSOR_IMAGE_AND_NAME,
        /* isvoid */ 0
d1966 2
a1967 2
char *
xcb_xfixes_get_cursor_image_and_name_name (const xcb_xfixes_get_cursor_image_and_name_reply_t *R  /**< */)
d1969 1
a1969 1
    return (char *) (R + 1);
d1973 1
a1973 1
xcb_xfixes_get_cursor_image_and_name_name_length (const xcb_xfixes_get_cursor_image_and_name_reply_t *R  /**< */)
d1975 1
a1975 1
    return R->nbytes;
d1979 1
a1979 1
xcb_xfixes_get_cursor_image_and_name_name_end (const xcb_xfixes_get_cursor_image_and_name_reply_t *R  /**< */)
d1982 1
a1982 1
    i.data = ((char *) (R + 1)) + (R->nbytes);
d1988 2
a1989 2
uint32_t *
xcb_xfixes_get_cursor_image_and_name_cursor_image (const xcb_xfixes_get_cursor_image_and_name_reply_t *R  /**< */)
d1991 2
a1992 2
    xcb_generic_iterator_t prev = xcb_xfixes_get_cursor_image_and_name_name_end(R);
    return (uint32_t *) ((char *) prev.data + XCB_TYPE_PAD(uint32_t, prev.index) + 0);
d1996 1
a1996 1
xcb_xfixes_get_cursor_image_and_name_cursor_image_length (const xcb_xfixes_get_cursor_image_and_name_reply_t *R  /**< */)
d1998 1
a1998 1
    return (R->width * R->height);
d2002 1
a2002 1
xcb_xfixes_get_cursor_image_and_name_cursor_image_end (const xcb_xfixes_get_cursor_image_and_name_reply_t *R  /**< */)
d2005 2
a2006 2
    xcb_generic_iterator_t child = xcb_xfixes_get_cursor_image_and_name_name_end(R);
    i.data = ((uint32_t *) child.data) + ((R->width * R->height));
d2013 1
a2013 1
xcb_xfixes_get_cursor_image_and_name_reply (xcb_connection_t                               *c  /**< */,
d2015 1
a2015 1
                                            xcb_generic_error_t                           **e  /**< */)
d2021 3
a2023 3
xcb_xfixes_change_cursor_checked (xcb_connection_t *c  /**< */,
                                  xcb_cursor_t      source  /**< */,
                                  xcb_cursor_t      destination  /**< */)
d2026 4
a2029 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CHANGE_CURSOR,
        /* isvoid */ 1
d2049 3
a2051 3
xcb_xfixes_change_cursor (xcb_connection_t *c  /**< */,
                          xcb_cursor_t      source  /**< */,
                          xcb_cursor_t      destination  /**< */)
d2054 4
a2057 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CHANGE_CURSOR,
        /* isvoid */ 1
d2077 1
a2077 1
xcb_xfixes_change_cursor_by_name_sizeof (const void  *_buffer  /**< */)
d2108 4
a2111 4
xcb_xfixes_change_cursor_by_name_checked (xcb_connection_t *c  /**< */,
                                          xcb_cursor_t      src  /**< */,
                                          uint16_t          nbytes  /**< */,
                                          const char       *name  /**< */)
d2114 4
a2117 4
        /* count */ 4,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CHANGE_CURSOR_BY_NAME,
        /* isvoid */ 1
d2143 4
a2146 4
xcb_xfixes_change_cursor_by_name (xcb_connection_t *c  /**< */,
                                  xcb_cursor_t      src  /**< */,
                                  uint16_t          nbytes  /**< */,
                                  const char       *name  /**< */)
d2149 4
a2152 4
        /* count */ 4,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CHANGE_CURSOR_BY_NAME,
        /* isvoid */ 1
d2177 22
d2200 7
a2206 7
xcb_xfixes_expand_region_checked (xcb_connection_t    *c  /**< */,
                                  xcb_xfixes_region_t  source  /**< */,
                                  xcb_xfixes_region_t  destination  /**< */,
                                  uint16_t             left  /**< */,
                                  uint16_t             right  /**< */,
                                  uint16_t             top  /**< */,
                                  uint16_t             bottom  /**< */)
d2209 4
a2212 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_EXPAND_REGION,
        /* isvoid */ 1
d2236 7
a2242 7
xcb_xfixes_expand_region (xcb_connection_t    *c  /**< */,
                          xcb_xfixes_region_t  source  /**< */,
                          xcb_xfixes_region_t  destination  /**< */,
                          uint16_t             left  /**< */,
                          uint16_t             right  /**< */,
                          uint16_t             top  /**< */,
                          uint16_t             bottom  /**< */)
d2245 4
a2248 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_EXPAND_REGION,
        /* isvoid */ 1
d2272 2
a2273 2
xcb_xfixes_hide_cursor_checked (xcb_connection_t *c  /**< */,
                                xcb_window_t      window  /**< */)
d2276 4
a2279 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_HIDE_CURSOR,
        /* isvoid */ 1
d2298 2
a2299 2
xcb_xfixes_hide_cursor (xcb_connection_t *c  /**< */,
                        xcb_window_t      window  /**< */)
d2302 4
a2305 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_HIDE_CURSOR,
        /* isvoid */ 1
d2324 2
a2325 2
xcb_xfixes_show_cursor_checked (xcb_connection_t *c  /**< */,
                                xcb_window_t      window  /**< */)
d2328 4
a2331 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SHOW_CURSOR,
        /* isvoid */ 1
d2350 2
a2351 2
xcb_xfixes_show_cursor (xcb_connection_t *c  /**< */,
                        xcb_window_t      window  /**< */)
d2354 4
a2357 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_SHOW_CURSOR,
        /* isvoid */ 1
d2376 1
a2376 1
xcb_xfixes_barrier_next (xcb_xfixes_barrier_iterator_t *i  /**< */)
d2384 1
a2384 1
xcb_xfixes_barrier_end (xcb_xfixes_barrier_iterator_t i  /**< */)
d2394 1
a2394 1
xcb_xfixes_create_pointer_barrier_sizeof (const void  *_buffer  /**< */)
d2425 16
a2440 16
xcb_xfixes_create_pointer_barrier_checked (xcb_connection_t     *c  /**< */,
                                           xcb_xfixes_barrier_t  barrier  /**< */,
                                           xcb_window_t          window  /**< */,
                                           uint16_t              x1  /**< */,
                                           uint16_t              y1  /**< */,
                                           uint16_t              x2  /**< */,
                                           uint16_t              y2  /**< */,
                                           uint32_t              directions  /**< */,
                                           uint16_t              num_devices  /**< */,
                                           const uint16_t       *devices  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CREATE_POINTER_BARRIER,
        /* isvoid */ 1
d2472 16
a2487 16
xcb_xfixes_create_pointer_barrier (xcb_connection_t     *c  /**< */,
                                   xcb_xfixes_barrier_t  barrier  /**< */,
                                   xcb_window_t          window  /**< */,
                                   uint16_t              x1  /**< */,
                                   uint16_t              y1  /**< */,
                                   uint16_t              x2  /**< */,
                                   uint16_t              y2  /**< */,
                                   uint32_t              directions  /**< */,
                                   uint16_t              num_devices  /**< */,
                                   const uint16_t       *devices  /**< */)
{
    static const xcb_protocol_request_t xcb_req = {
        /* count */ 4,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_CREATE_POINTER_BARRIER,
        /* isvoid */ 1
d2518 22
d2541 2
a2542 2
xcb_xfixes_delete_pointer_barrier_checked (xcb_connection_t     *c  /**< */,
                                           xcb_xfixes_barrier_t  barrier  /**< */)
d2545 4
a2548 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_DELETE_POINTER_BARRIER,
        /* isvoid */ 1
d2567 2
a2568 2
xcb_xfixes_delete_pointer_barrier (xcb_connection_t     *c  /**< */,
                                   xcb_xfixes_barrier_t  barrier  /**< */)
d2571 4
a2574 4
        /* count */ 2,
        /* ext */ &xcb_xfixes_id,
        /* opcode */ XCB_XFIXES_DELETE_POINTER_BARRIER,
        /* isvoid */ 1
@


1.4
log
@Update build system and generated files for libxcb 1.10.
@
text
@a22 12

/*****************************************************************************
 **
 ** xcb_xfixes_query_version_cookie_t xcb_xfixes_query_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          client_major_version
 ** @@param uint32_t          client_minor_version
 ** @@returns xcb_xfixes_query_version_cookie_t
 **
 *****************************************************************************/
 
d34 1
a34 1
    
d38 1
a38 1
    
d41 1
a41 1
    
d46 1
a46 1
    
a50 12

/*****************************************************************************
 **
 ** xcb_xfixes_query_version_cookie_t xcb_xfixes_query_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint32_t          client_major_version
 ** @@param uint32_t          client_minor_version
 ** @@returns xcb_xfixes_query_version_cookie_t
 **
 *****************************************************************************/
 
d62 1
a62 1
    
d66 1
a66 1
    
d69 1
a69 1
    
d74 1
a74 1
    
a78 12

/*****************************************************************************
 **
 ** xcb_xfixes_query_version_reply_t * xcb_xfixes_query_version_reply
 ** 
 ** @@param xcb_connection_t                   *c
 ** @@param xcb_xfixes_query_version_cookie_t   cookie
 ** @@param xcb_generic_error_t               **e
 ** @@returns xcb_xfixes_query_version_reply_t *
 **
 *****************************************************************************/
 
a86 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_change_save_set_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@param uint8_t           target
 ** @@param uint8_t           map
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d100 1
a100 1
    
d104 1
a104 1
    
d110 1
a110 1
    
d115 1
a115 1
    
a119 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_change_save_set
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           mode
 ** @@param uint8_t           target
 ** @@param uint8_t           map
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d133 1
a133 1
    
d137 1
a137 1
    
d143 1
a143 1
    
d148 1
a148 1
    
a152 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_select_selection_input_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_atom_t        selection
 ** @@param uint32_t          event_mask
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d165 1
a165 1
    
d169 1
a169 1
    
d173 1
a173 1
    
d178 1
a178 1
    
a182 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_select_selection_input
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_atom_t        selection
 ** @@param uint32_t          event_mask
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d195 1
a195 1
    
d199 1
a199 1
    
d203 1
a203 1
    
d208 1
a208 1
    
a212 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_select_cursor_input_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          event_mask
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d224 1
a224 1
    
d228 1
a228 1
    
d231 1
a231 1
    
d236 1
a236 1
    
a240 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_select_cursor_input
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param uint32_t          event_mask
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d252 1
a252 1
    
d256 1
a256 1
    
d259 1
a259 1
    
d264 1
a264 1
    
a299 10

/*****************************************************************************
 **
 ** xcb_xfixes_get_cursor_image_cookie_t xcb_xfixes_get_cursor_image
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xfixes_get_cursor_image_cookie_t
 **
 *****************************************************************************/
 
d309 1
a309 1
    
d313 2
a314 2
    
    
d319 1
a319 1
    
a323 10

/*****************************************************************************
 **
 ** xcb_xfixes_get_cursor_image_cookie_t xcb_xfixes_get_cursor_image_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xfixes_get_cursor_image_cookie_t
 **
 *****************************************************************************/
 
d333 1
a333 1
    
d337 2
a338 2
    
    
d343 1
a343 1
    
a347 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xfixes_get_cursor_image_cursor_image
 ** 
 ** @@param const xcb_xfixes_get_cursor_image_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a353 10

/*****************************************************************************
 **
 ** int xcb_xfixes_get_cursor_image_cursor_image_length
 ** 
 ** @@param const xcb_xfixes_get_cursor_image_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a359 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xfixes_get_cursor_image_cursor_image_end
 ** 
 ** @@param const xcb_xfixes_get_cursor_image_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a369 12

/*****************************************************************************
 **
 ** xcb_xfixes_get_cursor_image_reply_t * xcb_xfixes_get_cursor_image_reply
 ** 
 ** @@param xcb_connection_t                      *c
 ** @@param xcb_xfixes_get_cursor_image_cookie_t   cookie
 ** @@param xcb_generic_error_t                  **e
 ** @@returns xcb_xfixes_get_cursor_image_reply_t *
 **
 *****************************************************************************/
 
a377 10

/*****************************************************************************
 **
 ** void xcb_xfixes_region_next
 ** 
 ** @@param xcb_xfixes_region_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a385 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xfixes_region_end
 ** 
 ** @@param xcb_xfixes_region_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a426 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_create_region_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xfixes_region_t    region
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d439 1
a439 1
    
d443 1
a443 1
    
d445 1
a445 1
    
d455 1
a455 1
    
a459 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_create_region
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xfixes_region_t    region
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d472 1
a472 1
    
d476 1
a476 1
    
d478 1
a478 1
    
d488 1
a488 1
    
a492 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_create_region_from_bitmap_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  region
 ** @@param xcb_pixmap_t         bitmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d504 1
a504 1
    
d508 1
a508 1
    
d511 1
a511 1
    
d516 1
a516 1
    
a520 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_create_region_from_bitmap
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  region
 ** @@param xcb_pixmap_t         bitmap
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d532 1
a532 1
    
d536 1
a536 1
    
d539 1
a539 1
    
d544 1
a544 1
    
a548 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_create_region_from_window_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  region
 ** @@param xcb_window_t         window
 ** @@param xcb_shape_kind_t     kind
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d561 1
a561 1
    
d565 1
a565 1
    
d570 1
a570 1
    
d575 1
a575 1
    
a579 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_create_region_from_window
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  region
 ** @@param xcb_window_t         window
 ** @@param xcb_shape_kind_t     kind
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d592 1
a592 1
    
d596 1
a596 1
    
d601 1
a601 1
    
d606 1
a606 1
    
a610 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_create_region_from_gc_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  region
 ** @@param xcb_gcontext_t       gc
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d622 1
a622 1
    
d626 1
a626 1
    
d629 1
a629 1
    
d634 1
a634 1
    
a638 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_create_region_from_gc
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  region
 ** @@param xcb_gcontext_t       gc
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d650 1
a650 1
    
d654 1
a654 1
    
d657 1
a657 1
    
d662 1
a662 1
    
a666 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_create_region_from_picture_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_xfixes_region_t   region
 ** @@param xcb_render_picture_t  picture
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d678 1
a678 1
    
d682 1
a682 1
    
d685 1
a685 1
    
d690 1
a690 1
    
a694 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_create_region_from_picture
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_xfixes_region_t   region
 ** @@param xcb_render_picture_t  picture
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d706 1
a706 1
    
d710 1
a710 1
    
d713 1
a713 1
    
d718 1
a718 1
    
a722 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_destroy_region_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  region
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d733 1
a733 1
    
d737 1
a737 1
    
d739 1
a739 1
    
d744 1
a744 1
    
a748 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_destroy_region
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  region
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d759 1
a759 1
    
d763 1
a763 1
    
d765 1
a765 1
    
d770 1
a770 1
    
a805 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_set_region_checked
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xfixes_region_t    region
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d818 1
a818 1
    
d822 1
a822 1
    
d824 1
a824 1
    
d834 1
a834 1
    
a838 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_set_region
 ** 
 ** @@param xcb_connection_t      *c
 ** @@param xcb_xfixes_region_t    region
 ** @@param uint32_t               rectangles_len
 ** @@param const xcb_rectangle_t *rectangles
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d851 1
a851 1
    
d855 1
a855 1
    
d857 1
a857 1
    
d867 1
a867 1
    
a871 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_copy_region_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  source
 ** @@param xcb_xfixes_region_t  destination
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d883 1
a883 1
    
d887 1
a887 1
    
d890 1
a890 1
    
d895 1
a895 1
    
a899 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_copy_region
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  source
 ** @@param xcb_xfixes_region_t  destination
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d911 1
a911 1
    
d915 1
a915 1
    
d918 1
a918 1
    
d923 1
a923 1
    
a927 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_union_region_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  source1
 ** @@param xcb_xfixes_region_t  source2
 ** @@param xcb_xfixes_region_t  destination
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d940 1
a940 1
    
d944 1
a944 1
    
d948 1
a948 1
    
d953 1
a953 1
    
a957 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_union_region
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  source1
 ** @@param xcb_xfixes_region_t  source2
 ** @@param xcb_xfixes_region_t  destination
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d970 1
a970 1
    
d974 1
a974 1
    
d978 1
a978 1
    
d983 1
a983 1
    
a987 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_intersect_region_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  source1
 ** @@param xcb_xfixes_region_t  source2
 ** @@param xcb_xfixes_region_t  destination
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1000 1
a1000 1
    
d1004 1
a1004 1
    
d1008 1
a1008 1
    
d1013 1
a1013 1
    
a1017 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_intersect_region
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  source1
 ** @@param xcb_xfixes_region_t  source2
 ** @@param xcb_xfixes_region_t  destination
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1030 1
a1030 1
    
d1034 1
a1034 1
    
d1038 1
a1038 1
    
d1043 1
a1043 1
    
a1047 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_subtract_region_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  source1
 ** @@param xcb_xfixes_region_t  source2
 ** @@param xcb_xfixes_region_t  destination
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1060 1
a1060 1
    
d1064 1
a1064 1
    
d1068 1
a1068 1
    
d1073 1
a1073 1
    
a1077 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_subtract_region
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  source1
 ** @@param xcb_xfixes_region_t  source2
 ** @@param xcb_xfixes_region_t  destination
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1090 1
a1090 1
    
d1094 1
a1094 1
    
d1098 1
a1098 1
    
d1103 1
a1103 1
    
a1107 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_invert_region_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  source
 ** @@param xcb_rectangle_t      bounds
 ** @@param xcb_xfixes_region_t  destination
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1120 1
a1120 1
    
d1124 1
a1124 1
    
d1128 1
a1128 1
    
d1133 1
a1133 1
    
a1137 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_invert_region
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  source
 ** @@param xcb_rectangle_t      bounds
 ** @@param xcb_xfixes_region_t  destination
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1150 1
a1150 1
    
d1154 1
a1154 1
    
d1158 1
a1158 1
    
d1163 1
a1163 1
    
a1167 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_translate_region_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  region
 ** @@param int16_t              dx
 ** @@param int16_t              dy
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1180 1
a1180 1
    
d1184 1
a1184 1
    
d1188 1
a1188 1
    
d1193 1
a1193 1
    
a1197 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_translate_region
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  region
 ** @@param int16_t              dx
 ** @@param int16_t              dy
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1210 1
a1210 1
    
d1214 1
a1214 1
    
d1218 1
a1218 1
    
d1223 1
a1223 1
    
a1227 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_region_extents_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  source
 ** @@param xcb_xfixes_region_t  destination
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1239 1
a1239 1
    
d1243 1
a1243 1
    
d1246 1
a1246 1
    
d1251 1
a1251 1
    
a1255 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_region_extents
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  source
 ** @@param xcb_xfixes_region_t  destination
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1267 1
a1267 1
    
d1271 1
a1271 1
    
d1274 1
a1274 1
    
d1279 1
a1279 1
    
a1314 11

/*****************************************************************************
 **
 ** xcb_xfixes_fetch_region_cookie_t xcb_xfixes_fetch_region
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  region
 ** @@returns xcb_xfixes_fetch_region_cookie_t
 **
 *****************************************************************************/
 
d1325 1
a1325 1
    
d1329 1
a1329 1
    
d1331 1
a1331 1
    
d1336 1
a1336 1
    
a1340 11

/*****************************************************************************
 **
 ** xcb_xfixes_fetch_region_cookie_t xcb_xfixes_fetch_region_unchecked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  region
 ** @@returns xcb_xfixes_fetch_region_cookie_t
 **
 *****************************************************************************/
 
d1351 1
a1351 1
    
d1355 1
a1355 1
    
d1357 1
a1357 1
    
d1362 1
a1362 1
    
a1366 10

/*****************************************************************************
 **
 ** xcb_rectangle_t * xcb_xfixes_fetch_region_rectangles
 ** 
 ** @@param const xcb_xfixes_fetch_region_reply_t *R
 ** @@returns xcb_rectangle_t *
 **
 *****************************************************************************/
 
a1372 10

/*****************************************************************************
 **
 ** int xcb_xfixes_fetch_region_rectangles_length
 ** 
 ** @@param const xcb_xfixes_fetch_region_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1378 10

/*****************************************************************************
 **
 ** xcb_rectangle_iterator_t xcb_xfixes_fetch_region_rectangles_iterator
 ** 
 ** @@param const xcb_xfixes_fetch_region_reply_t *R
 ** @@returns xcb_rectangle_iterator_t
 **
 *****************************************************************************/
 
a1388 12

/*****************************************************************************
 **
 ** xcb_xfixes_fetch_region_reply_t * xcb_xfixes_fetch_region_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_xfixes_fetch_region_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_xfixes_fetch_region_reply_t *
 **
 *****************************************************************************/
 
a1396 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_set_gc_clip_region_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_gcontext_t       gc
 ** @@param xcb_xfixes_region_t  region
 ** @@param int16_t              x_origin
 ** @@param int16_t              y_origin
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1410 1
a1410 1
    
d1414 1
a1414 1
    
d1419 1
a1419 1
    
d1424 1
a1424 1
    
a1428 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_set_gc_clip_region
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_gcontext_t       gc
 ** @@param xcb_xfixes_region_t  region
 ** @@param int16_t              x_origin
 ** @@param int16_t              y_origin
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1442 1
a1442 1
    
d1446 1
a1446 1
    
d1451 1
a1451 1
    
d1456 1
a1456 1
    
a1460 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_set_window_shape_region_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_window_t         dest
 ** @@param xcb_shape_kind_t     dest_kind
 ** @@param int16_t              x_offset
 ** @@param int16_t              y_offset
 ** @@param xcb_xfixes_region_t  region
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1475 1
a1475 1
    
d1479 1
a1479 1
    
d1486 1
a1486 1
    
d1491 1
a1491 1
    
a1495 15

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_set_window_shape_region
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_window_t         dest
 ** @@param xcb_shape_kind_t     dest_kind
 ** @@param int16_t              x_offset
 ** @@param int16_t              y_offset
 ** @@param xcb_xfixes_region_t  region
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1510 1
a1510 1
    
d1514 1
a1514 1
    
d1521 1
a1521 1
    
d1526 1
a1526 1
    
a1530 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_set_picture_clip_region_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_render_picture_t  picture
 ** @@param xcb_xfixes_region_t   region
 ** @@param int16_t               x_origin
 ** @@param int16_t               y_origin
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1544 1
a1544 1
    
d1548 1
a1548 1
    
d1553 1
a1553 1
    
d1558 1
a1558 1
    
a1562 14

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_set_picture_clip_region
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_render_picture_t  picture
 ** @@param xcb_xfixes_region_t   region
 ** @@param int16_t               x_origin
 ** @@param int16_t               y_origin
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1576 1
a1576 1
    
d1580 1
a1580 1
    
d1585 1
a1585 1
    
d1590 1
a1590 1
    
a1625 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_set_cursor_name_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      cursor
 ** @@param uint16_t          nbytes
 ** @@param const char       *name
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1638 1
a1638 1
    
d1642 1
a1642 1
    
d1646 1
a1646 1
    
d1656 1
a1656 1
    
a1660 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_set_cursor_name
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      cursor
 ** @@param uint16_t          nbytes
 ** @@param const char       *name
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1673 1
a1673 1
    
d1677 1
a1677 1
    
d1681 1
a1681 1
    
d1691 1
a1691 1
    
a1726 11

/*****************************************************************************
 **
 ** xcb_xfixes_get_cursor_name_cookie_t xcb_xfixes_get_cursor_name
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      cursor
 ** @@returns xcb_xfixes_get_cursor_name_cookie_t
 **
 *****************************************************************************/
 
d1737 1
a1737 1
    
d1741 1
a1741 1
    
d1743 1
a1743 1
    
d1748 1
a1748 1
    
a1752 11

/*****************************************************************************
 **
 ** xcb_xfixes_get_cursor_name_cookie_t xcb_xfixes_get_cursor_name_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      cursor
 ** @@returns xcb_xfixes_get_cursor_name_cookie_t
 **
 *****************************************************************************/
 
d1763 1
a1763 1
    
d1767 1
a1767 1
    
d1769 1
a1769 1
    
d1774 1
a1774 1
    
a1778 10

/*****************************************************************************
 **
 ** char * xcb_xfixes_get_cursor_name_name
 ** 
 ** @@param const xcb_xfixes_get_cursor_name_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a1784 10

/*****************************************************************************
 **
 ** int xcb_xfixes_get_cursor_name_name_length
 ** 
 ** @@param const xcb_xfixes_get_cursor_name_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1790 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xfixes_get_cursor_name_name_end
 ** 
 ** @@param const xcb_xfixes_get_cursor_name_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1800 12

/*****************************************************************************
 **
 ** xcb_xfixes_get_cursor_name_reply_t * xcb_xfixes_get_cursor_name_reply
 ** 
 ** @@param xcb_connection_t                     *c
 ** @@param xcb_xfixes_get_cursor_name_cookie_t   cookie
 ** @@param xcb_generic_error_t                 **e
 ** @@returns xcb_xfixes_get_cursor_name_reply_t *
 **
 *****************************************************************************/
 
a1851 10

/*****************************************************************************
 **
 ** xcb_xfixes_get_cursor_image_and_name_cookie_t xcb_xfixes_get_cursor_image_and_name
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xfixes_get_cursor_image_and_name_cookie_t
 **
 *****************************************************************************/
 
d1861 1
a1861 1
    
d1865 2
a1866 2
    
    
d1871 1
a1871 1
    
a1875 10

/*****************************************************************************
 **
 ** xcb_xfixes_get_cursor_image_and_name_cookie_t xcb_xfixes_get_cursor_image_and_name_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@returns xcb_xfixes_get_cursor_image_and_name_cookie_t
 **
 *****************************************************************************/
 
d1885 1
a1885 1
    
d1889 2
a1890 2
    
    
d1895 1
a1895 1
    
a1899 10

/*****************************************************************************
 **
 ** char * xcb_xfixes_get_cursor_image_and_name_name
 ** 
 ** @@param const xcb_xfixes_get_cursor_image_and_name_reply_t *R
 ** @@returns char *
 **
 *****************************************************************************/
 
a1905 10

/*****************************************************************************
 **
 ** int xcb_xfixes_get_cursor_image_and_name_name_length
 ** 
 ** @@param const xcb_xfixes_get_cursor_image_and_name_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1911 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xfixes_get_cursor_image_and_name_name_end
 ** 
 ** @@param const xcb_xfixes_get_cursor_image_and_name_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1921 10

/*****************************************************************************
 **
 ** uint32_t * xcb_xfixes_get_cursor_image_and_name_cursor_image
 ** 
 ** @@param const xcb_xfixes_get_cursor_image_and_name_reply_t *R
 ** @@returns uint32_t *
 **
 *****************************************************************************/
 
a1928 10

/*****************************************************************************
 **
 ** int xcb_xfixes_get_cursor_image_and_name_cursor_image_length
 ** 
 ** @@param const xcb_xfixes_get_cursor_image_and_name_reply_t *R
 ** @@returns int
 **
 *****************************************************************************/
 
a1934 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xfixes_get_cursor_image_and_name_cursor_image_end
 ** 
 ** @@param const xcb_xfixes_get_cursor_image_and_name_reply_t *R
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a1945 12

/*****************************************************************************
 **
 ** xcb_xfixes_get_cursor_image_and_name_reply_t * xcb_xfixes_get_cursor_image_and_name_reply
 ** 
 ** @@param xcb_connection_t                               *c
 ** @@param xcb_xfixes_get_cursor_image_and_name_cookie_t   cookie
 ** @@param xcb_generic_error_t                           **e
 ** @@returns xcb_xfixes_get_cursor_image_and_name_reply_t *
 **
 *****************************************************************************/
 
a1953 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_change_cursor_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      source
 ** @@param xcb_cursor_t      destination
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1965 1
a1965 1
    
d1969 1
a1969 1
    
d1972 1
a1972 1
    
d1977 1
a1977 1
    
a1981 12

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_change_cursor
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      source
 ** @@param xcb_cursor_t      destination
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d1993 1
a1993 1
    
d1997 1
a1997 1
    
d2000 1
a2000 1
    
d2005 1
a2005 1
    
a2040 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_change_cursor_by_name_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      src
 ** @@param uint16_t          nbytes
 ** @@param const char       *name
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2053 1
a2053 1
    
d2057 1
a2057 1
    
d2061 1
a2061 1
    
d2071 1
a2071 1
    
a2075 13

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_change_cursor_by_name
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_cursor_t      src
 ** @@param uint16_t          nbytes
 ** @@param const char       *name
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2088 1
a2088 1
    
d2092 1
a2092 1
    
d2096 1
a2096 1
    
d2106 1
a2106 1
    
a2110 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_expand_region_checked
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  source
 ** @@param xcb_xfixes_region_t  destination
 ** @@param uint16_t             left
 ** @@param uint16_t             right
 ** @@param uint16_t             top
 ** @@param uint16_t             bottom
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2126 1
a2126 1
    
d2130 1
a2130 1
    
d2137 1
a2137 1
    
d2142 1
a2142 1
    
a2146 16

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_expand_region
 ** 
 ** @@param xcb_connection_t    *c
 ** @@param xcb_xfixes_region_t  source
 ** @@param xcb_xfixes_region_t  destination
 ** @@param uint16_t             left
 ** @@param uint16_t             right
 ** @@param uint16_t             top
 ** @@param uint16_t             bottom
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2162 1
a2162 1
    
d2166 1
a2166 1
    
d2173 1
a2173 1
    
d2178 1
a2178 1
    
a2182 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_hide_cursor_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2193 1
a2193 1
    
d2197 1
a2197 1
    
d2199 1
a2199 1
    
d2204 1
a2204 1
    
a2208 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_hide_cursor
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2219 1
a2219 1
    
d2223 1
a2223 1
    
d2225 1
a2225 1
    
d2230 1
a2230 1
    
a2234 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_show_cursor_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2245 1
a2245 1
    
d2249 1
a2249 1
    
d2251 1
a2251 1
    
d2256 1
a2256 1
    
a2260 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_show_cursor
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2271 1
a2271 1
    
d2275 1
a2275 1
    
d2277 1
a2277 1
    
d2282 1
a2282 1
    
a2286 10

/*****************************************************************************
 **
 ** void xcb_xfixes_barrier_next
 ** 
 ** @@param xcb_xfixes_barrier_iterator_t *i
 ** @@returns void
 **
 *****************************************************************************/
 
a2294 10

/*****************************************************************************
 **
 ** xcb_generic_iterator_t xcb_xfixes_barrier_end
 ** 
 ** @@param xcb_xfixes_barrier_iterator_t i
 ** @@returns xcb_generic_iterator_t
 **
 *****************************************************************************/
 
a2335 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_create_pointer_barrier_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_xfixes_barrier_t  barrier
 ** @@param xcb_window_t          window
 ** @@param uint16_t              x1
 ** @@param uint16_t              y1
 ** @@param uint16_t              x2
 ** @@param uint16_t              y2
 ** @@param uint32_t              directions
 ** @@param uint16_t              num_devices
 ** @@param const uint16_t       *devices
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2354 1
a2354 1
    
d2358 1
a2358 1
    
d2368 1
a2368 1
    
d2378 1
a2378 1
    
a2382 19

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_create_pointer_barrier
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_xfixes_barrier_t  barrier
 ** @@param xcb_window_t          window
 ** @@param uint16_t              x1
 ** @@param uint16_t              y1
 ** @@param uint16_t              x2
 ** @@param uint16_t              y2
 ** @@param uint32_t              directions
 ** @@param uint16_t              num_devices
 ** @@param const uint16_t       *devices
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2401 1
a2401 1
    
d2405 1
a2405 1
    
d2415 1
a2415 1
    
d2425 1
a2425 1
    
a2429 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_delete_pointer_barrier_checked
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_xfixes_barrier_t  barrier
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2440 1
a2440 1
    
d2444 1
a2444 1
    
d2446 1
a2446 1
    
d2451 1
a2451 1
    
a2455 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_xfixes_delete_pointer_barrier
 ** 
 ** @@param xcb_connection_t     *c
 ** @@param xcb_xfixes_barrier_t  barrier
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d2466 1
a2466 1
    
d2470 1
a2470 1
    
d2472 1
a2472 1
    
d2477 1
a2477 1
    
@


1.3
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@d391 1
a391 1
    unsigned int xcb_align_to;
d396 2
d600 1
a600 1
    unsigned int xcb_align_to;
d605 2
d1125 1
a1125 1
    unsigned int xcb_align_to;
d1130 2
d1838 1
a1838 1
    unsigned int xcb_align_to;
d1843 2
d2299 1
a2299 1
    unsigned int xcb_align_to;
d2304 2
d2426 1
a2426 1
    unsigned int xcb_align_to;
d2431 2
d2603 1
a2603 1
    unsigned int xcb_align_to;
d2608 2
d2920 1
a2920 1
    unsigned int xcb_align_to;
d2925 2
d3281 275
@


1.2
log
@regen for xcb-proto 1.6
@
text
@d6 4
d12 1
d15 2
d58 1
d98 1
d165 1
d212 1
d255 1
d298 1
d338 1
d378 1
d383 29
d441 1
d475 1
d590 29
d655 1
d660 1
d701 1
d706 1
d746 1
d786 1
d830 1
d874 1
d914 1
d954 1
d994 1
d1034 1
d1071 1
d1108 1
d1113 29
d1178 1
d1183 1
d1224 1
d1229 1
d1269 1
d1309 1
d1352 1
d1395 1
d1438 1
d1481 1
d1524 1
d1567 1
d1610 1
d1653 1
d1696 1
d1739 1
d1779 1
d1819 1
d1824 29
d1885 1
d1922 1
d2040 1
d2086 1
d2136 1
d2186 1
d2232 1
d2278 1
d2283 29
d2350 1
d2355 1
d2398 1
d2403 1
d2408 29
d2469 1
d2506 1
d2583 41
d2653 1
d2687 1
d2853 1
d2893 1
d2898 29
d2965 1
d2970 1
d3013 1
d3018 1
d3070 1
d3122 1
d3159 1
d3196 1
d3233 1
d3270 1
@


1.1
log
@Initial revision
@
text
@d1789 1
a1789 1
    return R->length;
d1807 1
a1807 1
    i.rem = R->length;
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
