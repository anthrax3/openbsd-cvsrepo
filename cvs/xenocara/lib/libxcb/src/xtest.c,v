head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.8
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	v1_2:1.1.1.1
	XENOCARA:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.09.02.10.09.44;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	mKDGsTNpiR2zRHYQ;

1.5
date	2015.01.26.21.32.12;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	01TEvO4uNHLqFv7N;

1.4
date	2012.11.22.20.31.33;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.03.27.19.14.21;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.31.16.43.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.22.16.10.13;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.05.22.16.10.13;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xcb-proto/libxcb 1.12. "Just commit it" naddy@@
@
text
@/*
 * This file generated automatically from xtest.xml by c_client.py.
 * Edit at your peril.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <stddef.h>  /* for offsetof() */
#include "xcbext.h"
#include "xtest.h"

#define ALIGNOF(type) offsetof(struct { char dummy; type member; }, member)
#include "xproto.h"

xcb_extension_t xcb_test_id = { "XTEST", 0 };

xcb_test_get_version_cookie_t
xcb_test_get_version (xcb_connection_t *c,
                      uint8_t           major_version,
                      uint16_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_test_id,
        .opcode = XCB_TEST_GET_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_test_get_version_cookie_t xcb_ret;
    xcb_test_get_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.pad0 = 0;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_test_get_version_cookie_t
xcb_test_get_version_unchecked (xcb_connection_t *c,
                                uint8_t           major_version,
                                uint16_t          minor_version)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_test_id,
        .opcode = XCB_TEST_GET_VERSION,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_test_get_version_cookie_t xcb_ret;
    xcb_test_get_version_request_t xcb_out;

    xcb_out.major_version = major_version;
    xcb_out.pad0 = 0;
    xcb_out.minor_version = minor_version;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_test_get_version_reply_t *
xcb_test_get_version_reply (xcb_connection_t               *c,
                            xcb_test_get_version_cookie_t   cookie  /**< */,
                            xcb_generic_error_t           **e)
{
    return (xcb_test_get_version_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_test_compare_cursor_cookie_t
xcb_test_compare_cursor (xcb_connection_t *c,
                         xcb_window_t      window,
                         xcb_cursor_t      cursor)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_test_id,
        .opcode = XCB_TEST_COMPARE_CURSOR,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_test_compare_cursor_cookie_t xcb_ret;
    xcb_test_compare_cursor_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.cursor = cursor;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_test_compare_cursor_cookie_t
xcb_test_compare_cursor_unchecked (xcb_connection_t *c,
                                   xcb_window_t      window,
                                   xcb_cursor_t      cursor)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_test_id,
        .opcode = XCB_TEST_COMPARE_CURSOR,
        .isvoid = 0
    };

    struct iovec xcb_parts[4];
    xcb_test_compare_cursor_cookie_t xcb_ret;
    xcb_test_compare_cursor_request_t xcb_out;

    xcb_out.window = window;
    xcb_out.cursor = cursor;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_test_compare_cursor_reply_t *
xcb_test_compare_cursor_reply (xcb_connection_t                  *c,
                               xcb_test_compare_cursor_cookie_t   cookie  /**< */,
                               xcb_generic_error_t              **e)
{
    return (xcb_test_compare_cursor_reply_t *) xcb_wait_for_reply(c, cookie.sequence, e);
}

xcb_void_cookie_t
xcb_test_fake_input_checked (xcb_connection_t *c,
                             uint8_t           type,
                             uint8_t           detail,
                             uint32_t          time,
                             xcb_window_t      root,
                             int16_t           rootX,
                             int16_t           rootY,
                             uint8_t           deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_test_id,
        .opcode = XCB_TEST_FAKE_INPUT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_test_fake_input_request_t xcb_out;

    xcb_out.type = type;
    xcb_out.detail = detail;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.time = time;
    xcb_out.root = root;
    memset(xcb_out.pad1, 0, 8);
    xcb_out.rootX = rootX;
    xcb_out.rootY = rootY;
    memset(xcb_out.pad2, 0, 7);
    xcb_out.deviceid = deviceid;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_test_fake_input (xcb_connection_t *c,
                     uint8_t           type,
                     uint8_t           detail,
                     uint32_t          time,
                     xcb_window_t      root,
                     int16_t           rootX,
                     int16_t           rootY,
                     uint8_t           deviceid)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_test_id,
        .opcode = XCB_TEST_FAKE_INPUT,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_test_fake_input_request_t xcb_out;

    xcb_out.type = type;
    xcb_out.detail = detail;
    memset(xcb_out.pad0, 0, 2);
    xcb_out.time = time;
    xcb_out.root = root;
    memset(xcb_out.pad1, 0, 8);
    xcb_out.rootX = rootX;
    xcb_out.rootY = rootY;
    memset(xcb_out.pad2, 0, 7);
    xcb_out.deviceid = deviceid;

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_test_grab_control_checked (xcb_connection_t *c,
                               uint8_t           impervious)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_test_id,
        .opcode = XCB_TEST_GRAB_CONTROL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_test_grab_control_request_t xcb_out;

    xcb_out.impervious = impervious;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, XCB_REQUEST_CHECKED, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

xcb_void_cookie_t
xcb_test_grab_control (xcb_connection_t *c,
                       uint8_t           impervious)
{
    static const xcb_protocol_request_t xcb_req = {
        .count = 2,
        .ext = &xcb_test_id,
        .opcode = XCB_TEST_GRAB_CONTROL,
        .isvoid = 1
    };

    struct iovec xcb_parts[4];
    xcb_void_cookie_t xcb_ret;
    xcb_test_grab_control_request_t xcb_out;

    xcb_out.impervious = impervious;
    memset(xcb_out.pad0, 0, 3);

    xcb_parts[2].iov_base = (char *) &xcb_out;
    xcb_parts[2].iov_len = sizeof(xcb_out);
    xcb_parts[3].iov_base = 0;
    xcb_parts[3].iov_len = -xcb_parts[2].iov_len & 3;

    xcb_ret.sequence = xcb_send_request(c, 0, xcb_parts + 2, &xcb_req);
    return xcb_ret;
}

@


1.5
log
@Update to libxcb and xcb-proto 1.11.
Tested on a bulk ports build by naddy@@.
Lots of churn due to white-space and comments changes in generated code.
@
text
@d22 3
a24 3
xcb_test_get_version (xcb_connection_t *c  /**< */,
                      uint8_t           major_version  /**< */,
                      uint16_t          minor_version  /**< */)
d27 4
a30 4
        /* count */ 2,
        /* ext */ &xcb_test_id,
        /* opcode */ XCB_TEST_GET_VERSION,
        /* isvoid */ 0
d51 3
a53 3
xcb_test_get_version_unchecked (xcb_connection_t *c  /**< */,
                                uint8_t           major_version  /**< */,
                                uint16_t          minor_version  /**< */)
d56 4
a59 4
        /* count */ 2,
        /* ext */ &xcb_test_id,
        /* opcode */ XCB_TEST_GET_VERSION,
        /* isvoid */ 0
d80 1
a80 1
xcb_test_get_version_reply (xcb_connection_t               *c  /**< */,
d82 1
a82 1
                            xcb_generic_error_t           **e  /**< */)
d88 3
a90 3
xcb_test_compare_cursor (xcb_connection_t *c  /**< */,
                         xcb_window_t      window  /**< */,
                         xcb_cursor_t      cursor  /**< */)
d93 4
a96 4
        /* count */ 2,
        /* ext */ &xcb_test_id,
        /* opcode */ XCB_TEST_COMPARE_CURSOR,
        /* isvoid */ 0
d116 3
a118 3
xcb_test_compare_cursor_unchecked (xcb_connection_t *c  /**< */,
                                   xcb_window_t      window  /**< */,
                                   xcb_cursor_t      cursor  /**< */)
d121 4
a124 4
        /* count */ 2,
        /* ext */ &xcb_test_id,
        /* opcode */ XCB_TEST_COMPARE_CURSOR,
        /* isvoid */ 0
d144 1
a144 1
xcb_test_compare_cursor_reply (xcb_connection_t                  *c  /**< */,
d146 1
a146 1
                               xcb_generic_error_t              **e  /**< */)
d152 8
a159 8
xcb_test_fake_input_checked (xcb_connection_t *c  /**< */,
                             uint8_t           type  /**< */,
                             uint8_t           detail  /**< */,
                             uint32_t          time  /**< */,
                             xcb_window_t      root  /**< */,
                             int16_t           rootX  /**< */,
                             int16_t           rootY  /**< */,
                             uint8_t           deviceid  /**< */)
d162 4
a165 4
        /* count */ 2,
        /* ext */ &xcb_test_id,
        /* opcode */ XCB_TEST_FAKE_INPUT,
        /* isvoid */ 1
d193 8
a200 8
xcb_test_fake_input (xcb_connection_t *c  /**< */,
                     uint8_t           type  /**< */,
                     uint8_t           detail  /**< */,
                     uint32_t          time  /**< */,
                     xcb_window_t      root  /**< */,
                     int16_t           rootX  /**< */,
                     int16_t           rootY  /**< */,
                     uint8_t           deviceid  /**< */)
d203 4
a206 4
        /* count */ 2,
        /* ext */ &xcb_test_id,
        /* opcode */ XCB_TEST_FAKE_INPUT,
        /* isvoid */ 1
d234 2
a235 2
xcb_test_grab_control_checked (xcb_connection_t *c  /**< */,
                               uint8_t           impervious  /**< */)
d238 4
a241 4
        /* count */ 2,
        /* ext */ &xcb_test_id,
        /* opcode */ XCB_TEST_GRAB_CONTROL,
        /* isvoid */ 1
d261 2
a262 2
xcb_test_grab_control (xcb_connection_t *c  /**< */,
                       uint8_t           impervious  /**< */)
d265 4
a268 4
        /* count */ 2,
        /* ext */ &xcb_test_id,
        /* opcode */ XCB_TEST_GRAB_CONTROL,
        /* isvoid */ 1
@


1.4
log
@Update to libxcb 1.9.0.
tested by ajacoutot@@ and naddy@@ on a full ports build
@
text
@a20 12

/*****************************************************************************
 **
 ** xcb_test_get_version_cookie_t xcb_test_get_version
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           major_version
 ** @@param uint16_t          minor_version
 ** @@returns xcb_test_get_version_cookie_t
 **
 *****************************************************************************/
 
d32 1
a32 1
    
d36 1
a36 1
    
d40 1
a40 1
    
d45 1
a45 1
    
a49 12

/*****************************************************************************
 **
 ** xcb_test_get_version_cookie_t xcb_test_get_version_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           major_version
 ** @@param uint16_t          minor_version
 ** @@returns xcb_test_get_version_cookie_t
 **
 *****************************************************************************/
 
d61 1
a61 1
    
d65 1
a65 1
    
d69 1
a69 1
    
d74 1
a74 1
    
a78 12

/*****************************************************************************
 **
 ** xcb_test_get_version_reply_t * xcb_test_get_version_reply
 ** 
 ** @@param xcb_connection_t               *c
 ** @@param xcb_test_get_version_cookie_t   cookie
 ** @@param xcb_generic_error_t           **e
 ** @@returns xcb_test_get_version_reply_t *
 **
 *****************************************************************************/
 
a86 12

/*****************************************************************************
 **
 ** xcb_test_compare_cursor_cookie_t xcb_test_compare_cursor
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_cursor_t      cursor
 ** @@returns xcb_test_compare_cursor_cookie_t
 **
 *****************************************************************************/
 
d98 1
a98 1
    
d102 1
a102 1
    
d105 1
a105 1
    
d110 1
a110 1
    
a114 12

/*****************************************************************************
 **
 ** xcb_test_compare_cursor_cookie_t xcb_test_compare_cursor_unchecked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param xcb_window_t      window
 ** @@param xcb_cursor_t      cursor
 ** @@returns xcb_test_compare_cursor_cookie_t
 **
 *****************************************************************************/
 
d126 1
a126 1
    
d130 1
a130 1
    
d133 1
a133 1
    
d138 1
a138 1
    
a142 12

/*****************************************************************************
 **
 ** xcb_test_compare_cursor_reply_t * xcb_test_compare_cursor_reply
 ** 
 ** @@param xcb_connection_t                  *c
 ** @@param xcb_test_compare_cursor_cookie_t   cookie
 ** @@param xcb_generic_error_t              **e
 ** @@returns xcb_test_compare_cursor_reply_t *
 **
 *****************************************************************************/
 
a150 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_test_fake_input_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           type
 ** @@param uint8_t           detail
 ** @@param uint32_t          time
 ** @@param xcb_window_t      root
 ** @@param int16_t           rootX
 ** @@param int16_t           rootY
 ** @@param uint8_t           deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d167 1
a167 1
    
d171 1
a171 1
    
d182 1
a182 1
    
d187 1
a187 1
    
a191 17

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_test_fake_input
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           type
 ** @@param uint8_t           detail
 ** @@param uint32_t          time
 ** @@param xcb_window_t      root
 ** @@param int16_t           rootX
 ** @@param int16_t           rootY
 ** @@param uint8_t           deviceid
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d208 1
a208 1
    
d212 1
a212 1
    
d223 1
a223 1
    
d228 1
a228 1
    
a232 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_test_grab_control_checked
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           impervious
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d243 1
a243 1
    
d247 1
a247 1
    
d250 1
a250 1
    
d255 1
a255 1
    
a259 11

/*****************************************************************************
 **
 ** xcb_void_cookie_t xcb_test_grab_control
 ** 
 ** @@param xcb_connection_t *c
 ** @@param uint8_t           impervious
 ** @@returns xcb_void_cookie_t
 **
 *****************************************************************************/
 
d270 1
a270 1
    
d274 1
a274 1
    
d277 1
a277 1
    
d282 1
a282 1
    
@


1.3
log
@Update to libxcb 1.8.1. Tested by krw@@, mpi@@, shadchin@@
@
text
@d6 4
d12 1
d15 2
d57 1
d98 1
d158 1
d198 1
d276 1
d334 1
d372 1
d410 1
@


1.2
log
@regen for xcb-proto 1.5
@
text
@d222 2
a223 2
 ** @@param uint16_t          rootX
 ** @@param uint16_t          rootY
d235 2
a236 2
                             uint16_t          rootX  /**< */,
                             uint16_t          rootY  /**< */,
d279 2
a280 2
 ** @@param uint16_t          rootX
 ** @@param uint16_t          rootY
d292 2
a293 2
                     uint16_t          rootX  /**< */,
                     uint16_t          rootY  /**< */,
@


1.1
log
@Initial revision
@
text
@d221 1
a221 1
 ** @@param xcb_window_t      window
d234 1
a234 1
                             xcb_window_t      window  /**< */,
d254 1
a254 1
    xcb_out.window = window;
d278 1
a278 1
 ** @@param xcb_window_t      window
d291 1
a291 1
                     xcb_window_t      window  /**< */,
d311 1
a311 1
    xcb_out.window = window;
@


1.1.1.1
log
@Xenocara build infrastructure for libxcb.

This includes a set of pre-generated sources files in src/ so that
python and xslt are not needed to build.
@
text
@@
