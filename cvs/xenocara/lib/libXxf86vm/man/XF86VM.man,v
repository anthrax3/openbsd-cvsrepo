head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.10
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.6
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.2
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_1:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@.\" @;


1.5
date	2015.04.06.13.27.36;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	DFEK7JZaS3eU7OPe;

1.4
date	2012.03.10.17.10.13;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.31.16.40.21;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.25.20.04.42;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.10.09;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.10.09;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@update to libXxf86vm 1.1.4
@
text
@.\"
.\" Copyright (c) 1996  Joe Moss, The XFree86 Project
.\"
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de EX
.RS
.nf
.sp 1
.ft CW
..
.de EE
.ft
.sp 1
.fi
.RE
..
.TH XF86VIDMODE __libmansuffix__ __vendorversion__
.SH NAME
XF86VidModeQueryExtension, XF86VidModeQueryVersion, XF86VidModeSetClientVersion, XF86VidModeGetModeLine, XF86VidModeGetAllModeLines, XF86VidModeAddModeLine, XF86VidModeDeleteModeLine, XF86VidModeModModeLine, XF86VidModeValidateModeLine, XF86VidModeSwitchMode, XF86VidModeSwitchToMode, XF86VidModeLockModeSwitch, XF86VidModeGetMonitor, XF86VidModeGetViewPort, XF86VidModeSetViewPort, XF86VidModeGetDotClocks, XF86VidModeGetGamma, XF86VidModeSetGamma, XF86VidModeGetGammaRamp, XF86VidModeSetGammaRamp, XF86VidModeGetGammaRampSize, XF86VidModeGetPermissions \- Extension library for the XFree86-VidMode X extension
.SH SYNOPSIS
.nf

\&#include <X11/extensions/xf86vmode.h>

Bool XF86VidModeQueryExtension(
    Display *\fIdisplay\fP\^,
    int *\fIevent_base_return\fP\^,
    int *\fIerror_base_return\fP\^);

Bool XF86VidModeQueryVersion(
    Display *\fIdisplay\fP\^,
    int *\fImajor_version_return\fP\^,
    int *\fIminor_version_return\fP\^);

Bool XF86VidModeSetClientVersion(
    Display *\fIdisplay\fP\^);

Bool XF86VidModeGetModeLine(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    int *\fIdotclock_return\fP\^,
    XF86VidModeModeLine *\fImodeline\fP\^);

Bool XF86VidModeGetAllModeLines(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    int *\fImodecount_return\fP\^,
    XF86VidModeModeInfo ***\fImodesinfo\fP\^);

Bool XF86VidModeAddModeLine(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    XF86VidModeModeInfo *\fImodeline\fP\,
    XF86VidModeModeInfo *\fIaftermode\fP\^);

Bool XF86VidModeDeleteModeLine(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    XF86VidModeModeInfo *\fImodeline\fP\^);

Bool XF86VidModeModModeLine(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    XF86VidModeModeLine *\fImodeline\fP\^);

Status XF86VidModeValidateModeLine(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    XF86VidModeModeLine *\fImodeline\fP\^);

Bool XF86VidModeSwitchMode(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    int \fIzoom\fP\^);

Bool XF86VidModeSwitchToMode(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    XF86VidModeModeInfo *\fImodeline\fP\^);

Bool XF86VidModeLockModeSwitch(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    int \fIlock\fP\^);

Bool XF86VidModeGetMonitor(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    XF86VidModeMonitor *\fImonitor\fP\^);

Bool XF86VidModeGetViewPort(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    int *\fIx_return\fP\^,
    int *\fIy_return\fP\^);

Bool XF86VidModeSetViewPort(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    int \fIx\fP\^,
    int \fIy\fP\^);

XF86VidModeGetDotClocks(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    int *\fIflags return\fP\^,
    int *\fInumber of clocks return\fP\^,
    int *\fImax dot clock return\fP\^,
    int **\fIclocks return\fP\^);

XF86VidModeGetGamma(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    XF86VidModeGamma *\fIGamma\fP\^);

XF86VidModeSetGamma(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    XF86VidModeGamma *\fIGamma\fP\^);

XF86VidModeGetGammaRamp(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    int \fIsize\fP\^,
    unsigned short *\fIred array\fP\^,
    unsigned short *\fIgreen array\fP\^,
    unsigned short *\fIblue array\fP\^);

XF86VidModeSetGammaRamp(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    int \fIsize\fP\^,
    unsigned short *\fIred array\fP\^,
    unsigned short *\fIgreen array\fP\^,
    unsigned short *\fIblue array\fP\^);

XF86VidModeGetGammaRampSize(
    Display *\fIdisplay\fP\^,
    int \fIscreen\fP\^,
    int *\fIsize\fP\^);
.fi
.SH ARGUMENTS
.IP \fIdisplay\fP 2i
Specifies the connection to the X server.
.IP \fIscreen\fP 2i
Specifies which screen number the setting apply to.
.IP \fIevent_base_return\fP 2i
Returns the base event number for the extension.
.IP \fIerror_base_return\fP 2i
Returns the base error number for the extension.
.IP \fImajor_version_return\fP 2i
Returns the major version number of the extension.
.IP \fIminor_version_return\fP 2i
Returns the minor version number of the extension.
.IP \fIdotclock_return\fP 2i
Returns the clock for the mode line.
.IP \fImodecount_return\fP 2i
Returns the number of video modes available in the server.
.IP \fIzoom\fP 2i
If greater than zero, indicates that the server should switch to
the next mode, otherwise switch to the previous mode.
.IP \fIlock\fP 2i
Indicates that mode switching should be locked, if non-zero.
.IP \fImodeline\fP 2i
Specifies or returns the timing values for a video mode.
.IP \fIaftermode\fP 2i
Specifies the timing values for the video mode after which the
new mode will added.
.IP \fImodesinfo\fP 2i
Returns the timing values and dotclocks for all of the available
video modes.
.IP \fImonitor\fP 2i
Returns information about the monitor.
.IP \fIx\fP 2i
Specifies the desired X location for the viewport.
.IP \fIx_return\fP 2i
Returns the current X location of the viewport.
.IP \fIy\fP 2i
Specifies the desired Y location for the viewport.
.IP \fIy_return\fP 2i
Returns the current Y location of the viewport.
.SH STRUCTURES
\fIVideo Mode Settings:\fP
.EX
typedef struct {
    unsigned short      hdisplay;       /\(** Number of display pixels horizontally */
    unsigned short      hsyncstart;     /\(** Horizontal sync start */
    unsigned short      hsyncend;       /\(** Horizontal sync end */
    unsigned short      htotal;         /\(** Total horizontal pixels */
    unsigned short      vdisplay;       /\(** Number of display pixels vertically */
    unsigned short      vsyncstart;     /\(** Vertical sync start */
    unsigned short      vsyncend;       /\(** Vertical sync start */
    unsigned short      vtotal;         /\(** Total vertical pixels */
    unsigned int        flags;          /\(** Mode flags */
    int privsize;                       /\(** Size of private */
    INT32       *private;               /\(** Server privates */
} XF86VidModeModeLine;

typedef struct {
    unsigned int        dotclock;       /\(** Pixel clock */
    unsigned short      hdisplay;       /\(** Number of display pixels horizontally */
    unsigned short      hsyncstart;     /\(** Horizontal sync start */
    unsigned short      hsyncend;       /\(** Horizontal sync end */
    unsigned short      htotal;         /\(** Total horizontal pixels */
    unsigned short      vdisplay;       /\(** Number of display pixels vertically */
    unsigned short      vsyncstart;     /\(** Vertical sync start */
    unsigned short      vsyncend;       /\(** Vertical sync start */
    unsigned short      vtotal;         /\(** Total vertical pixels */
    unsigned int        flags;          /\(** Mode flags */
    int privsize;                       /\(** Size of private */
    INT32       *private;               /\(** Server privates */
} XF86VidModeModeInfo;
.EE
.LP
\fIMonitor information:\fP
.EX
typedef struct {
    char*       vendor;                /\(** Name of manufacturer */
    char*       model;                 /\(** Model name */
    float       EMPTY;                 /\(** unused, for backward compatibility */
    unsigned char nhsync;              /\(** Number of horiz sync ranges */
    XF86VidModeSyncRange* hsync;       /\(** Horizontal sync ranges */
    unsigned char nvsync;              /\(** Number of vert sync ranges */
    XF86VidModeSyncRange* vsync;       /\(** Vertical sync ranges */
} XF86VidModeMonitor;

typedef struct {
    float       hi;     /\(** Top of range */
    float       lo;     /\(** Bottom of range */
} XF86VidModeSyncRange;

typedef struct {
    int type;                   /\(** of event */
    unsigned long serial;       /\(** # of last request processed by server */
    Bool send_event;            /\(** true if this came from a SendEvent req */
    Display *display;           /\(** Display the event was read from */
    Window root;                /\(** root window of event screen */
    int state;                  /\(** What happened */
    int kind;                   /\(** What happened */
    Bool forced;                /\(** extents of new region */
    Time time;                  /\(** event timestamp */
} XF86VidModeNotifyEvent;

typedef struct {
    float red;                  /\(** Red Gamma value */
    float green;                /\(** Green Gamma value */
    float blue;                 /\(** Blue Gamma value */
} XF86VidModeGamma;
.EE
.SH DESCRIPTION
These functions provide an interface to the server extension
\fIXFree86-VidModeExtension\fP
which allows the video modes to be
queried and adjusted dynamically and mode switching to be controlled.
Applications that use these functions must be linked with
.ZN -lXxf86vm
.SS "MODELINE FUNCTIONS"
The
.ZN XF86VidModeGetModeLine
function is used to query the settings for the currently selected
video mode.  The calling program should pass a pointer to a
.ZN XF86VidModeModeLine
structure that it has already allocated.  The function fills in
the fields of the structure.
.PP
If there are any server private values (currently only applicable to
the S3 server) the function will allocate storage for them.
Therefore, if the
.ZN privsize
field is non-zero, the calling program should call
.ZN Xfree(private)
to free the storage.
.PP
.ZN XF86VidModeGetAllModeLines
returns the settings for all video modes.
The calling program supplies the address of a pointer which will be
set by the function to point to an array of
.ZN XF86VidModeModeInfo
structures.  The memory occupied by the array is dynamically allocated
by the
.ZN XF86VidModeGetAllModeLines
function and should be freed by the caller.
The first element of the array corresponds to the current video mode.
.PP
The
.ZN XF86VidModeModModeLine
function can be used to change the settings of the current video mode
provided the requested settings are valid (e.g. they don't exceed the
capabilities of the monitor).
.PP
To add a mode to the list of available modes, the
.ZN XF86VidModeAddModeLine
function can be used.
Assuming the settings are valid, the video mode will be added after
the existing mode which matches the timings specified by the
.ZN aftermode
parameter.
To be considered a match, all of the fields of the given
.ZN XF86VidModeModeInfo
structure must match, except the
.ZN privsize
and
.ZN private
fields.
If the
.ZN aftermode
parameter is zero, the mode will be added
after the current mode.
.PP
Modes can be deleted with the
.ZN XF86VidModeDeleteModeLine
function.  The specified mode must match an existing mode.
To be considered a match, all of the fields of the given
.ZN XF86VidModeModeInfo
structure must match, except the
.ZN privsize
and
.ZN private
fields.
If the mode to be deleted is the current mode, a mode switch
to the next mode will occur first.  The last remaining mode can not
be deleted.
.PP
The validity of a mode can be checked with the
.ZN XF86VidModeValidateModeLine
function.
If the specified mode can be used by the server (i.e. meets all the
constraints placed upon a mode by the combination of the server, card,
and monitor) the function returns
.ZN MODE_OK ,
otherwise it returns a value indicating the reason why the mode is
invalid (as defined in \fIxf86.h\fP)
.SS "MODE SWITCH FUNCTIONS"
When the function
.ZN XF86VidModeSwitchMode
is called, the server will change the video mode to next (or previous)
video mode. The
.ZN XF86VidModeSwitchToMode
function can be used to switch directly to the specified mode.
Matching is as specified in the description of the
.ZN XF86VidModeAddModeLine
function above.
The
.ZN XF86VidModeLockModeSwitch
function can be used to allow or disallow mode switching whether
the request to switch modes comes from a call to the
.ZN XF86VidModeSwitchMode
or
.ZN XF86VidModeSwitchToMode
functions or from one of the mode switch key sequences.
.PP
.RB Note:
Because of the asynchronous nature of the X protocol, a call to
.ZN XFlush
is needed if the application wants to see the mode change immediately.
To be informed of the execution status of the request, a
custom error handler should be installed using
.ZN XSetErrorHandler
before calling the mode switching function.
.SS "MONITOR FUNCTIONS"
Information known to the server about the monitor is returned by the
.ZN XF86VidModeGetMonitor
function.  The
.ZN hsync
and
.ZN vsync
fields each point to an array of
.ZN XF86VidModeSyncRange
structures.  The arrays contain
.ZN nhsync
and
.ZN nvsync
elements, respectively.
The
.ZN hi
and
.ZN low
values will be equal if a discreate value was given in the
.ZN XF86Config
file.
.PP
The
.ZN vendor ,
.ZN model ,
.ZN hsync ,
and
.ZN vsync
fields point to dynamically allocated storage that should be freed
by the caller.
.SS "VIEWPORT FUNCTIONS"
The
.ZN XF86VidModeGetViewPort
and
.ZN XF86VidModeSetViewPort
functions can be used to, respectively, query and change the location
of the upper left corner of the viewport into the virtual screen.
.SS "OTHER FUNCTIONS"
The
.ZN XF86VidModeQueryVersion
function can be used to determine the version of the extension
built into the server.
.PP
The function
.ZN XF86VidModeQueryExtension
returns the lowest numbered error and event values
assigned to the extension.
.SH BUGS
The
XF86VidModeSetClientVersion,
XF86VidModeGetDotClocks,
XF86VidModeGetGamma,
XF86VidModeSetGamma,
XF86VidModeSetGammaRamp,
XF86VidModeGetGammaRamp,
XF86VidModeGetGammaRampSize,
and
XF86VidModeGetPermissions
functions need to be documented.  In the meantime, check the source
code for information about how to use them.
.SH SEE ALSO
__xservername__(__appmansuffix__), __xconfigfile__(__filemansuffix__), XFlush(__libmansuffix__), XSetErrorHandler(__libmansuffix__), xvidtune(__appmansuffix__)
.SH AUTHORS
Kaleb Keithley, Jon Tombs, David Dawes, and Joe Moss
@


1.4
log
@Update to libXxf86vm 1.1.2
@
text
@d8 12
d22 2
a23 2
XF86VidModeQueryExtension, XF86VidModeQueryVersion, XF86VidModeSetClientVersion, XF86VidModeGetModeLine, XF86VidModeGetAllModeLines, XF86VidModeDeleteModeLine, XF86VidModeModModeLine, XF86VidModeValidateModeLine, XF86VidModeSwitchMode, XF86VidModeSwitchToMode, XF86VidModeLockModeSwitch, XF86VidModeGetMonitor, XF86VidModeGetViewPort, XF86VidModeSetViewPort, XF86VidModeGetDotClocks, XF86VidModeGetGamma, XF86VidModeSetGamma, XF86VidModeGetGammaRamp, XF86VidModeSetGammaRamp, XF86VidModeGetGammaRampSize, XF86VidModeGetPermissions \- Extension library for the XFree86-VidMode X extension
.SH SYNTAX
d25 1
a25 1
.LP
d27 1
a27 1
.LP
d32 1
a32 1
.LP
d37 1
a37 1
.LP
d40 1
a40 1
.LP
d46 1
a46 1
.LP
d52 1
a52 2
.ig
.LP
d58 1
a58 2
..
.LP
d63 1
a63 1
.LP
d68 1
a68 1
.LP
d73 1
a73 1
.LP
d78 1
a78 1
.LP
d83 1
a83 1
.LP
d88 1
a88 1
.LP
d93 1
a93 1
.LP
d99 1
a99 1
.LP
d105 1
a105 1
.LP
d113 1
a113 1
.LP
d118 1
a118 1
.LP
d123 1
a123 1
.LP
d131 1
a131 1
.LP
d139 1
a139 1
.LP
a168 1
.ig
a171 1
..
a185 2
.nf
.ta 2.25i 3.5i
d187 1
d189 11
a199 11
    unsigned short	hdisplay;	/\(** Number of display pixels horizontally */
    unsigned short	hsyncstart;	/\(** Horizontal sync start */
    unsigned short	hsyncend;	/\(** Horizontal sync end */
    unsigned short	htotal;	/\(** Total horizontal pixels */
    unsigned short	vdisplay;	/\(** Number of display pixels vertically */
    unsigned short	vsyncstart;	/\(** Vertical sync start */
    unsigned short	vsyncend;	/\(** Vertical sync start */
    unsigned short	vtotal;	/\(** Total vertical pixels */
    unsigned int	flags;	/\(** Mode flags */
    int	privsize;	/\(** Size of private */
    INT32	*private;	/\(** Server privates */
d201 1
a201 1
.sp
d203 12
a214 12
    unsigned int	dotclock;	/\(** Pixel clock */
    unsigned short	hdisplay;	/\(** Number of display pixels horizontally */
    unsigned short	hsyncstart;	/\(** Horizontal sync start */
    unsigned short	hsyncend;	/\(** Horizontal sync end */
    unsigned short	htotal;	/\(** Total horizontal pixels */
    unsigned short	vdisplay;	/\(** Number of display pixels vertically */
    unsigned short	vsyncstart;	/\(** Vertical sync start */
    unsigned short	vsyncend;	/\(** Vertical sync start */
    unsigned short	vtotal;	/\(** Total vertical pixels */
    unsigned int	flags;	/\(** Mode flags */
    int	privsize;	/\(** Size of private */
    INT32	*private;	/\(** Server privates */
d216 1
d219 1
d221 7
a227 7
    char*	vendor;	/\(** Name of manufacturer */
    char*	model;	/\(** Model name */
    float	EMPTY;	/\(** unused, for backward compatibility */
    unsigned char	nhsync;	/\(** Number of horiz sync ranges */
    XF86VidModeSyncRange*	hsync;	/\(** Horizontal sync ranges */
    unsigned char	nvsync;	/\(** Number of vert sync ranges */
    XF86VidModeSyncRange*	vsync;	/\(** Vertical sync ranges */
d229 1
a229 1
.sp
d231 2
a232 2
    float	hi;	/\(** Top of range */
    float	lo;	/\(** Bottom of range */
d234 1
a234 1
.LP
d236 9
a244 9
    int type;			/\(** of event */
    unsigned long serial;	/\(** # of last request processed by server */
    Bool send_event;		/\(** true if this came from a SendEvent req */
    Display *display;		/\(** Display the event was read from */
    Window root;		/\(** root window of event screen */
    int state;			/\(** What happened */
    int kind;			/\(** What happened */
    Bool forced;		/\(** extents of new region */
    Time time;			/\(** event timestamp */
d246 1
a246 1
.LP
d248 3
a250 3
    float red;			/\(** Red Gamma value */
    float green;		/\(** Green Gamma value */
    float blue;			/\(** Blue Gamma value */
d252 1
a252 1
.fi
a293 1
.ig
a312 1
..
@


1.3
log
@Update to libXxf86vm 1.1.1. No functional change.
@
text
@d3 1
a3 1
.\" 
d255 1
a255 1
video mode.  The calling program should pass a pointer to a 
d349 1
a349 1
Because of the asynchronous nature of the X protocol, a call to 
d355 1
a355 1
before calling the mode switching function. 
@


1.2
log
@Update to libXxf86vm 1.1.0
@
text
@a0 5
.\" $XdotOrg: lib/Xxf86vm/man/XF86VM.man,v 1.2 2004/04/23 19:23:08 eich Exp $
.\" $TOG: XF86VM.man /main/6 1997/07/19 10:30:39 kaleb $
.\"
.\"
.\"
a2 1
.\" $XFree86: xc/programs/Xserver/hw/xfree86/doc/man/XF86VM.man,v 3.14 2003/10/02 13:29:56 eich Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
.\" $XdotOrg: lib/Xxf86vm/man/XF86VM.man,v 1.3 2006/04/20 23:44:33 reed Exp $
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@
