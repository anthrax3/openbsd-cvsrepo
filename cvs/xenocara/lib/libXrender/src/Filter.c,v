head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.4
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.14
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.12
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.10
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.8
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v0_9_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v0_9_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.10.04.15.03.48;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	URayJrmxhgIqrOCA;

1.5
date	2013.05.23.22.42.11;	author matthieu;	state Exp;
branches
	1.5.12.1
	1.5.14.1;
next	1.4;

1.4
date	2012.03.10.14.33.11;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.17.15.28.21;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.31.18.41.19;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.17.55.17;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.17.55.17;	author matthieu;	state Exp;
branches;
next	;

1.5.12.1
date	2016.10.04.18.55.14;	author matthieu;	state Exp;
branches;
next	;
commitid	PNaHexTGDQbxwlMB;

1.5.14.1
date	2016.10.04.18.54.01;	author matthieu;	state Exp;
branches;
next	;
commitid	b1RDOJn7dNqLwuaq;


desc
@@


1.6
log
@Avoid OOB write in XRenderQueryFilters

The memory for filter names is reserved right after receiving the reply.
After that, filters are iterated and each individual filter name is
stored in that reserved memory.

The individual name lengths are not checked for validity, which means
that a malicious server can reserve less memory than it will write to
during each iteration.

From Tobias Stoeckmann / X.Org security advisory Oct 4, 2016
@
text
@/*
 *
 * Copyright Â© 2002 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include "Xrenderint.h"
#include <limits.h>

XFilters *
XRenderQueryFilters (Display *dpy, Drawable drawable)
{
    XRenderExtDisplayInfo		*info = XRenderFindDisplay (dpy);
    XRenderInfo			*xri;
    xRenderQueryFiltersReq	*req;
    xRenderQueryFiltersReply	rep;
    XFilters			*filters;
    char			*name;
    char			len;
    int				i;
    unsigned long		nbytes, nbytesAlias, nbytesName, reply_left;

    if (!RenderHasExtension (info))
	return NULL;

    if (!XRenderQueryFormats (dpy))
	return NULL;

    xri = info->info;
    if (xri->minor_version < 6)
	return NULL;

    LockDisplay (dpy);
    GetReq (RenderQueryFilters, req);
    req->reqType = info->codes->major_opcode;
    req->renderReqType = X_RenderQueryFilters;
    req->drawable = drawable;
    if (!_XReply (dpy, (xReply *) &rep, 0, xFalse))
    {
	UnlockDisplay (dpy);
	SyncHandle ();
	return NULL;
    }

    /*
     * Limit each component of combined size to 1/4 the max, which is far
     * more than they should ever possibly need.
     */
    if ((rep.length < (INT_MAX >> 2)) &&
	(rep.numFilters < ((INT_MAX / 4) / sizeof (char *))) &&
	(rep.numAliases < ((INT_MAX / 4) / sizeof (short)))) {
	/*
	 * Compute total number of bytes for filter names
	 */
	nbytes = (unsigned long)rep.length << 2;
	nbytesAlias = rep.numAliases * 2;
	if (rep.numAliases & 1)
	    nbytesAlias += 2;
	nbytesName = nbytes - nbytesAlias;

	/*
	 * Allocate one giant block for the whole data structure
	 */
	filters = Xmalloc (sizeof (XFilters) +
			   (rep.numFilters * sizeof (char *)) +
			   (rep.numAliases * sizeof (short)) +
			   nbytesName);
    } else
	filters = NULL;

    if (!filters)
    {
	_XEatDataWords(dpy, rep.length);
	UnlockDisplay (dpy);
	SyncHandle ();
	return NULL;
    }

    /*
     * Layout:
     *	XFilters
     *	numFilters  char * pointers to filter names
     *	numAliases  short alias values
     *	nbytesName  char strings
     */

    filters->nfilter = rep.numFilters;
    filters->nalias = rep.numAliases;
    filters->filter = (char **) (filters + 1);
    filters->alias = (short *) (filters->filter + rep.numFilters);
    name = (char *) (filters->alias + rep.numAliases);

    /*
     * Read the filter aliases
     */
    _XRead16Pad (dpy, filters->alias, 2 * rep.numAliases);
    reply_left = 8 + rep.length - 2 * rep.numAliases;;

    /*
     * Read the filter names
     */
    for (i = 0; i < rep.numFilters; i++)
    {
	int	l;
	_XRead (dpy, &len, 1);
	reply_left--;
	l = len & 0xff;
	if ((unsigned long)l + 1 > nbytesName) {
            _XEatDataWords(dpy, reply_left);
	    Xfree(filters);
	    UnlockDisplay (dpy);
	    SyncHandle ();
	    return NULL;
	}
	nbytesName -= l + 1;
	filters->filter[i] = name;
	_XRead (dpy, name, l);
        reply_left -= l;
	name[l] = '\0';
	name += l + 1;
    }
    i = name - (char *) (filters->alias + rep.numAliases);

    if (i & 3)
	_XEatData (dpy, 4 - (i & 3));

    UnlockDisplay (dpy);
    SyncHandle ();
    return filters;
}

void
XRenderSetPictureFilter  (Display   *dpy,
			  Picture   picture,
			  const char *filter,
			  XFixed    *params,
			  int	    nparams)
{
    XRenderExtDisplayInfo		*info = XRenderFindDisplay (dpy);
    xRenderSetPictureFilterReq	*req;
    int				nbytes = strlen (filter);

    RenderSimpleCheckExtension (dpy, info);
    LockDisplay(dpy);
    GetReq(RenderSetPictureFilter, req);
    req->reqType = info->codes->major_opcode;
    req->renderReqType = X_RenderSetPictureFilter;
    req->picture = picture;
    req->nbytes = nbytes;
    req->length += ((nbytes + 3) >> 2) + nparams;
    Data (dpy, filter, nbytes);
    Data (dpy, (_Xconst char *)params, nparams << 2);
    UnlockDisplay(dpy);
    SyncHandle();
}
@


1.5
log
@Merge upstream fixes for several X libs vulnerabilities
discovered by Ilja van Sprundel.

CVE-2013-1981 X.org libX11 1.5.99.901 (1.6 RC1) integer overflows
CVE-2013-1982 X.org libXext 1.3.1 integer overflows
CVE-2013-1983 X.org libXfixes 5.0 integer overflows
CVE-2013-1984 X.org libXi 1.7.1 integer overflows
CVE-2013-1985 X.org libXinerama 1.1.2 integer overflows
CVE-2013-1986 X.org libXrandr 1.4.0 integer overflows
CVE-2013-1987 X.org libXrender 0.9.7 integer overflows
CVE-2013-1988 X.org libXRes 1.0.6 integer overflows
CVE-2013-1989 X.org libXv 1.0.7 integer overflows
CVE-2013-1990 X.org libXvMC 1.0.7 integer overflows
CVE-2013-1991 X.org libXxf86dga 1.1.3 integer overflows
CVE-2013-1992 X.org libdmx 1.1.2 integer overflows
CVE-2013-1994 X.org libchromeXvMC & libchromeXvMCPro in openChrome
0.3.2 integer overflows
CVE-2013-1995 X.org libXi 1.7.1 sign extension issues
CVE-2013-1996 X.org libFS 1.0.4 sign extension issues
CVE-2013-1997 X.org libX11 1.5.99.901 (1.6 RC1) buffer overflows
CVE-2013-1998 X.org libXi 1.7.1 buffer overflows
CVE-2013-1999 X.org libXvMC 1.0.7 buffer overflows
CVE-2013-2000 X.org libXxf86dga 1.1.3 buffer overflows
CVE-2013-2001 X.org libXxf86vm 1.1.2 buffer overflows
CVE-2013-2002 X.org libXt 1.1.3 buffer overflows
CVE-2013-2003 X.org libXcursor 1.1.13 integer overflows
CVE-2013-2004 X.org libX11 1.5.99.901 (1.6 RC1) unbounded recursion
CVE-2013-2005 X.org libXt 1.1.3 memory corruption
CVE-2013-2066 X.org libXv 1.0.7 buffer overflows
@
text
@d41 1
a41 1
    unsigned long		nbytes, nbytesAlias, nbytesName;
d117 1
d126 1
d128 8
d138 1
@


1.5.12.1
log
@Protocol handling issues in X Window System client libraries
X.Org security advisory: October 4, 2016

Fix a number of issues in the way various X client libraries handle
server responses.

Checked by tj@@
@
text
@d41 1
a41 1
    unsigned long		nbytes, nbytesAlias, nbytesName, reply_left;
a116 1
    reply_left = 8 + rep.length - 2 * rep.numAliases;;
a124 1
	reply_left--;
a125 8
	if ((unsigned long)l + 1 > nbytesName) {
            _XEatDataWords(dpy, reply_left);
	    Xfree(filters);
	    UnlockDisplay (dpy);
	    SyncHandle ();
	    return NULL;
	}
	nbytesName -= l + 1;
a127 1
        reply_left -= l;
@


1.5.14.1
log
@Protocol handling issues in X Window System client libraries
X.Org security advisory: October 4, 2016

Fix a number of issues in the way various X client libraries handle
server responses.

Checked by tj@@
@
text
@d41 1
a41 1
    unsigned long		nbytes, nbytesAlias, nbytesName, reply_left;
a116 1
    reply_left = 8 + rep.length - 2 * rep.numAliases;;
a124 1
	reply_left--;
a125 8
	if ((unsigned long)l + 1 > nbytesName) {
            _XEatDataWords(dpy, reply_left);
	    Xfree(filters);
	    UnlockDisplay (dpy);
	    SyncHandle ();
	    return NULL;
	}
	nbytesName -= l + 1;
a127 1
        reply_left -= l;
@


1.4
log
@update to libXrender 0.9.7
@
text
@d28 1
d41 1
a41 1
    long			nbytes, nbytesAlias, nbytesName;
a63 8
    /*
     * Compute total number of bytes for filter names
     */
    nbytes = (long)rep.length << 2;
    nbytesAlias = rep.numAliases * 2;
    if (rep.numAliases & 1)
	nbytesAlias += 2;
    nbytesName = nbytes - nbytesAlias;
d66 2
a67 1
     * Allocate one giant block for the whole data structure
d69 21
a89 4
    filters = Xmalloc (sizeof (XFilters) +
		       rep.numFilters * sizeof (char *) +
		       rep.numAliases * sizeof (short) +
		       nbytesName);
d93 1
a93 1
	_XEatData (dpy, (unsigned long) rep.length << 2);
@


1.3
log
@update to libXrender 0.9.6
@
text
@d28 1
a28 1
 
d41 1
a41 1
    
d51 1
a51 1
    
d71 1
a71 1
    
d95 1
a95 1
    
d124 1
a124 1
    
@


1.2
log
@update to libXrender 0.9.5
@
text
@d126 1
@


1.1
log
@Initial revision
@
text
@d43 1
a43 1
	return 0;
d46 1
a46 1
	return 0;
d50 1
a50 1
	return 0;
d61 1
a61 1
	return 0;
d85 1
a85 1
	return 0;
d149 1
a149 1
    Data32 (dpy, params, nparams << 2);
@


1.1.1.1
log
@import from X.Org 7.2RC1
@
text
@@
