head	1.14;
access;
symbols
	OPENBSD_6_0:1.13.0.6
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.2
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.2
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.2
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.8.0.6
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.7
	OPENBSD_4_3:1.1.1.7.0.2
	v1_3_1:1.1.1.7
	v1_3_0:1.1.1.6
	OPENBSD_4_2:1.1.1.5.0.2
	OPENBSD_4_2_BASE:1.1.1.5
	v1_2_8:1.1.1.5
	v1_2_7:1.1.1.4
	v1_2_6:1.1.1.3
	v1_2_5:1.1.1.2
	v1_2_3:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2016.09.02.11.00.05;	author matthieu;	state Exp;
branches;
next	1.13;
commitid	aM4WnEgH4GFFchOx;

1.13
date	2015.03.17.20.42.26;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	lBsElZ4DGe8MIjfG;

1.12
date	2014.09.27.17.42.14;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	i8vICzmreDEZmlS0;

1.11
date	2014.05.18.12.13.54;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2014.01.07.20.42.20;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2013.08.18.10.36.22;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.03.04.18.13.47;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.10.09.31.51;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.31.15.09.45;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.04.10.37.30;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.01.17.20.48.49;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.31.17.57.11;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.24.13.29.07;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.17.14.16;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.17.14.16;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.12.16.18.23.10;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.12.16.21.44.25;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.03.03.10.09.47;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.04.08.17.56.34;	author matthieu;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2007.09.08.16.14.05;	author matthieu;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2007.11.24.14.31.47;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Update to libXfont 1.5.2
@
text
@#  Copyright Â© 2003 Keith Packard
#
#  Permission to use, copy, modify, distribute, and sell this software and its
#  documentation for any purpose is hereby granted without fee, provided that
#  the above copyright notice appear in all copies and that both that
#  copyright notice and this permission notice appear in supporting
#  documentation, and that the name of Keith Packard not be used in
#  advertising or publicity pertaining to distribution of the software without
#  specific, written prior permission.  Keith Packard makes no
#  representations about the suitability of this software for any purpose.  It
#  is provided "as is" without express or implied warranty.
#
#  KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
#  INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
#  EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
#  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
#  DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
#  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
#  PERFORMANCE OF THIS SOFTWARE.
#

# Initialize Autoconf
AC_PREREQ([2.60])
AC_INIT([libXfont], [1.5.2],
	[https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], [libXfont])
AC_CONFIG_SRCDIR([Makefile.am])
AC_CONFIG_HEADERS([config.h include/X11/fonts/fontconf.h])

# Initialize Automake
AM_INIT_AUTOMAKE([foreign dist-bzip2])

# Set common system defines for POSIX extensions, such as _GNU_SOURCE
# Must be called before any macros that run the compiler (like
# AC_PROG_LIBTOOL) to avoid autoconf errors.
AC_USE_SYSTEM_EXTENSIONS

# Initialize libtool
AC_PROG_LIBTOOL

# Require xorg-macros minimum of 1.10 for DocBook XML documentation
m4_ifndef([XORG_MACROS_VERSION],
          [m4_fatal([must install xorg-macros 1.10 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.10)
XORG_DEFAULT_OPTIONS
XORG_ENABLE_DEVEL_DOCS
XORG_WITH_XMLTO(0.0.22)
XORG_WITH_FOP
XORG_CHECK_SGML_DOCTOOLS(1.7)

# Checks for header files.
AC_CHECK_HEADERS([endian.h poll.h sys/poll.h])

# Checks for library functions.
AC_CHECK_FUNCS([poll readlink])

# If the first PKG_CHECK_MODULES appears inside a conditional, pkg-config
# must first be located explicitly.
PKG_PROG_PKG_CONFIG

#
# select libraries to include
#

XFONT_FONTFILE=no

#
# FreeType for all scalable (OpenType, TrueType, PostScript) and
# some bitmap formats (BDF & PCF)
#
AC_ARG_ENABLE(freetype,
	AS_HELP_STRING([--disable-freetype],
		[Build freetype backend (default: enabled)]),
	[XFONT_FREETYPE=$enableval],[XFONT_FREETYPE=yes])
AM_CONDITIONAL(XFONT_FREETYPE, [test x$XFONT_FREETYPE = xyes])
if test x$XFONT_FREETYPE = xyes; then
	AC_DEFINE(XFONT_FREETYPE,1,[Support FreeType rasterizer for nearly all font file formats])
	AC_ARG_WITH(freetype-config,
		AS_HELP_STRING([--with-freetype-config=PROG],
			[Use FreeType configuration program PROG]),
		[freetype_config=$withval], [freetype_config=auto])

	if test "$freetype_config" = "auto" ; then
		PKG_CHECK_MODULES(FREETYPE, freetype2,
			freetype_config=no, freetype_config=yes)
	fi

	if test "$freetype_config" = "yes"; then
		AC_PATH_PROG(ft_config,freetype-config,no)
		if test "$ft_config" = "no"; then
			AC_MSG_ERROR([You must have freetype installed; see http://www.freetype.org/])
		fi
	else
		ft_config="$freetype_config"
	fi

	if test "$freetype_config" != "no"; then
		FREETYPE_CFLAGS="`$ft_config --cflags`"
		FREETYPE_LIBS="`$ft_config --libs`"
	fi
	FREETYPE_REQUIRES="freetype2"
	XFONT_FONTFILE=yes
else
	FREETYPE_CFLAGS=""
	FREETYPE_LIBS=""
	FREETYPE_REQUIRES=""
fi
AC_SUBST(FREETYPE_LIBS)
AC_SUBST(FREETYPE_CFLAGS)
AC_SUBST(FREETYPE_REQUIRES)

#
# Bitmap fonts in files:
#	Builtins (gzipped pcf format in .text segment)
#	PCF
#	BDF
#	SNF
#

AC_DEFINE(X_GZIP_FONT_COMPRESSION,1,[Support gzip for bitmap fonts])
X_GZIP_FONT_COMPRESSION=1
AC_SUBST(X_GZIP_FONT_COMPRESSION)
AC_CHECK_LIB(z, gzopen, [Z_LIBS=-lz], AC_MSG_ERROR([*** zlib is required]))

AC_ARG_WITH(bzip2,
	AS_HELP_STRING([--with-bzip2],
	  [Use libbz2 to support bzip2 compressed bitmap fonts (default: no)]),
	[], [with_bzip2=no])
if test "x$with_bzip2" = xyes; then
	AC_CHECK_LIB(bz2, BZ2_bzopen, [Z_LIBS="$Z_LIBS -lbz2"],
		AC_MSG_ERROR([*** libbz2 is required for bzip2 support]))
	AC_DEFINE(X_BZIP2_FONT_COMPRESSION,1,[Support bzip2 for bitmap fonts])
fi
AM_CONDITIONAL(X_BZIP2_FONT_COMPRESSION, [test "x$with_bzip2" = xyes ])
AC_SUBST(Z_LIBS)

AC_ARG_ENABLE(builtins,
	AS_HELP_STRING([--disable-builtins],
		[Support builtin fonts (default: enabled)]),
	[XFONT_BUILTINS=$enableval], [XFONT_BUILTINS=yes])
AM_CONDITIONAL(XFONT_BUILTINS, [test "x$XFONT_BUILTINS" = xyes ])
if test "x$XFONT_BUILTINS" = xyes; then
	AC_DEFINE(XFONT_BUILTINS,1,[Support built-in fonts])
	XFONT_BITMAP=yes
fi

AC_ARG_ENABLE(pcfformat,
	AS_HELP_STRING([--disable-pcfformat],
		[Support PCF format bitmap fonts (default: enabled)]),
	[XFONT_PCFFORMAT=$enableval], [XFONT_PCFFORMAT=yes])
AM_CONDITIONAL(XFONT_PCFFORMAT, [test "x$XFONT_PCFFORMAT" = xyes])
if test "x$XFONT_PCFFORMAT" = xyes; then
	AC_DEFINE(XFONT_PCFFORMAT,1,[Support pcf format bitmap font files])
	XFONT_BITMAP=yes
fi

AM_CONDITIONAL(XFONT_PCF_OR_BUILTIN,
	[test "x$XFONT_PCFFORMAT" = xyes -o "x$XFONT_BUILTINS" = xyes])

AC_ARG_ENABLE(bdfformat,
	AS_HELP_STRING([--disable-bdfformat],
		[Support BDF format bitmap fonts (default: enabled)]),
	[XFONT_BDFFORMAT=$enableval], [XFONT_BDFFORMAT=yes])
AM_CONDITIONAL(XFONT_BDFFORMAT, [test "x$XFONT_BDFFORMAT" = xyes])
if test "x$XFONT_BDFFORMAT" = xyes; then
	AC_DEFINE(XFONT_BDFFORMAT,1,[Support bdf format bitmap font files])
	XFONT_BITMAP=yes
fi

AC_ARG_ENABLE(snfformat,
	AS_HELP_STRING([--enable-snfformat],
		[Support SNF format bitmap fonts (default: disabled)]),
	[XFONT_SNFFORMAT=$enableval], [XFONT_SNFFORMAT=no])
AM_CONDITIONAL(XFONT_SNFFORMAT, [test "x$XFONT_SNFFORMAT" = xyes])
if test "x$XFONT_SNFFORMAT" = xyes; then
	AC_DEFINE(XFONT_SNFFORMAT,1,[Support snf format bitmap font files])
	XFONT_BITMAP=yes
fi

AM_CONDITIONAL(XFONT_BITMAP, [test "x$XFONT_BITMAP" = xyes ])
if test "x$XFONT_BITMAP" = xyes; then
	AC_DEFINE(XFONT_BITMAP,1,[Support bitmap font files])
	XFONT_FONTFILE=yes
fi

AM_CONDITIONAL(XFONT_FONTFILE, [test "x$XFONT_FONTFILE" = xyes])
if test "x$XFONT_FONTFILE" = xyes; then
	AC_DEFINE(XFONT_FONTFILE,1,[Support fonts in files])
fi

#
# Support connection to font servers?
#

AC_ARG_ENABLE(fc,
	AS_HELP_STRING([--disable-fc],
		[Support connections to xfs servers (default: enabled)]),
	[XFONT_FC=$enableval],[XFONT_FC=yes])
AM_CONDITIONAL(XFONT_FC, [test "x$XFONT_FC" = xyes])
if test "x$XFONT_FC" = xyes; then
	AC_DEFINE(XFONT_FC,1,[Support the X Font Services Protocol])
fi


AC_CHECK_LIB(m, hypot, [MATH_LIBS=-lm
AC_SUBST(MATH_LIBS)], AC_MSG_ERROR([*** libm is required]))

PKG_CHECK_MODULES(XFONT, [xproto xtrans fontsproto >= 2.1.3 fontenc])

# Transport selection macro from xtrans.m4
XTRANS_CONNECTION_FLAGS

case $host_os in
    linux*)
        OS_CFLAGS="-D_XOPEN_SOURCE"
        ;;
    *)
        OS_CFLAGS=
        ;;
esac
AC_SUBST([OS_CFLAGS])

AC_CONFIG_FILES([Makefile
		doc/Makefile
		src/Makefile
		src/fontfile/Makefile
		src/FreeType/Makefile
		src/builtins/Makefile
		src/bitmap/Makefile
		src/fc/Makefile
		src/util/Makefile
		src/stubs/Makefile
		xfont.pc])
AC_OUTPUT
@


1.13
log
@Update to libXfont 1.5.1.
Contains fixes for following issues:
CVE-2015-1802: bdfReadProperties: property count needs range check
CVE-2015-1803: bdfReadCharacters: bailout if a char's bitmap cannot be read
CVE-2015-1804: bdfReadCharacters: ensure metrics fit into xCharInfo struct
@
text
@d24 1
a24 1
AC_INIT([libXfont], [1.5.1],
a215 3
    darwin*)
        OS_CFLAGS="-Wl,-flat_namespace"
	;;
@


1.12
log
@Update to libXfont 1.5.0

Tested together with xserver 1.16.1 by naddy@@, jsg@@ & kettenis@@
@
text
@d24 1
a24 1
AC_INIT([libXfont], [1.5.0],
@


1.11
log
@Update to libXfont 1.4.8
@
text
@d24 1
a24 1
AC_INIT([libXfont], [1.4.8],
d70 4
a73 1
AC_ARG_ENABLE(freetype, [ --disable-freetype],[XFONT_FREETYPE=$enableval],[XFONT_FREETYPE=yes])
d77 4
a80 1
	AC_ARG_WITH(freetype-config, [  --with-freetype-config=PROG   Use FreeType configuration program PROG], freetype_config=$withval, freetype_config=auto)
d126 1
a126 1
			[Support bzip2 compressed bitmap fonts]),
d136 4
a139 1
AC_ARG_ENABLE(builtins, [ --disable-builtins ], [XFONT_BUILTINS=$enableval], [XFONT_BUILTINS=yes])
d146 4
a149 1
AC_ARG_ENABLE(pcfformat, [ --disable-pcfformat ], [XFONT_PCFFORMAT=$enableval], [XFONT_PCFFORMAT=yes])
d156 7
a162 1
AC_ARG_ENABLE(bdfformat, [ --disable-bdfformat ], [XFONT_BDFFORMAT=$enableval], [XFONT_BDFFORMAT=yes])
d169 4
a172 1
AC_ARG_ENABLE(snfformat, [ --disable-snfformat ], [XFONT_SNFFORMAT=$enableval], [XFONT_SNFFORMAT=yes])
d194 4
a197 1
AC_ARG_ENABLE(fc, [ --disable-fc ],[XFONT_FC=$enableval],[XFONT_FC=yes])
d207 1
a207 1
PKG_CHECK_MODULES(XFONT, [xproto xtrans fontsproto < 2.1.3 fontenc])
@


1.10
log
@Update to libXfont 1.4.7. Include fix for  CVE-2013-6462.
unlimited sscanf overflows stack buffer in bdfReadCharacters
@
text
@d24 1
a24 1
AC_INIT([libXfont], [1.4.7],
d67 2
a68 3
# Scalable fonts in files:
# 	FreeType
#	Bitstream Speedo rasterizer
d183 1
a183 1
PKG_CHECK_MODULES(XFONT, xproto xtrans fontsproto fontenc)
@


1.9
log
@Update to libXfont 1.4.6.
@
text
@d24 1
a24 1
AC_INIT([libXfont], [1.4.6],
d31 5
@


1.8
log
@Update to libXfont 1.4.5
@
text
@d24 1
a24 1
AC_INIT([libXfont], [1.4.5],
a30 1
AM_MAINTAINER_MODE
d49 1
a49 1
AC_CHECK_FUNCS([poll])
@


1.7
log
@Update to libXfont 1.4.4
@
text
@d24 1
a24 7
#
# This is the package version number, not the shared library
# version.  This same version number must appear in Xfont.h
# Yes, it is a pain to synchronize version numbers.  Unfortunately, it's
# not possible to extract the version number here from Xfont.h
#
AC_INIT([libXfont], [1.4.4],
d72 1
a72 1
	
d74 1
a74 1
		PKG_CHECK_MODULES(FREETYPE, freetype2, 
d78 1
a78 1
	if test "$freetype_config" = "yes"; then 
d87 1
a87 1
	if test "$freetype_config" != "no"; then 	
d115 2
a116 2
AC_ARG_WITH(bzip2, 
	AS_HELP_STRING([--with-bzip2], 
@


1.6
log
@Update to libXfont 1.4.3. No functional change.
@
text
@d1 20
a20 21
dnl  Copyright Â© 2003 Keith Packard
dnl 
dnl  Permission to use, copy, modify, distribute, and sell this software and its
dnl  documentation for any purpose is hereby granted without fee, provided that
dnl  the above copyright notice appear in all copies and that both that
dnl  copyright notice and this permission notice appear in supporting
dnl  documentation, and that the name of Keith Packard not be used in
dnl  advertising or publicity pertaining to distribution of the software without
dnl  specific, written prior permission.  Keith Packard makes no
dnl  representations about the suitability of this software for any purpose.  It
dnl  is provided "as is" without express or implied warranty.
dnl 
dnl  KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
dnl  INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
dnl  EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
dnl  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
dnl  DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
dnl  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
dnl  PERFORMANCE OF THIS SOFTWARE.
dnl
dnl Process this file with autoconf to create configure.
d22 1
d24 10
d35 1
a35 12
AC_INIT([libXfont],
	[1.4.3],
	[https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],
	libXfont)
# Autoheader generates config.h.in. No new lines allowed in the list.
AC_CONFIG_HEADERS([config.h include/X11/fonts/fontconf.h])
dnl
dnl This is the package version number, not the shared library
dnl version.  This same version number must appear in Xfont.h
dnl Yes, it is a pain to synchronize version numbers.  Unfortunately, it's
dnl not possible to extract the version number here from Xfont.h
dnl
d39 3
d48 1
a48 1
XORG_WITH_XMLTO(0.0.20)
d50 1
a50 1
XORG_CHECK_SGML_DOCTOOLS(1.5)
d52 2
a53 6
# Check for progs
AC_PROG_CC
AC_PROG_LIBTOOL
dnl If the first PKG_CHECK_MODULES appears inside a conditional, pkg-config
dnl must first be located explicitly.
PKG_PROG_PKG_CONFIG
d55 1
a55 2
# Look for headers
AC_CHECK_HEADERS([endian.h poll.h sys/poll.h])
d58 4
d204 12
a215 11
AC_OUTPUT([Makefile
	   doc/Makefile
	   src/Makefile
	   src/fontfile/Makefile
	   src/FreeType/Makefile
	   src/builtins/Makefile
	   src/bitmap/Makefile
	   src/fc/Makefile
	   src/util/Makefile
	   src/stubs/Makefile
           xfont.pc])
@


1.5
log
@Update to libXfont 1.4.2
@
text
@d26 1
a26 1
	1.4.2,
d40 1
a40 1
# Require xorg-macros: XORG_DEFAULT_OPTIONS
d42 2
a43 2
          [m4_fatal([must install xorg-macros 1.6 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.6)
d48 1
d204 1
@


1.4
log
@Use the new XORG_WITH_XMLTO macro in configure scripts and explicitely
disable it during Xenocara builds. Problem reported by kili@@ who also
tested this patch with an earlier version of the macro.
@
text
@d23 1
a23 1
AC_PREREQ([2.57])
d26 1
a26 1
	1.4.1,
d29 2
d38 1
a38 2
AM_CONFIG_HEADER(config.h)
AC_CONFIG_HEADERS([include/X11/fonts/fontconf.h])
d40 8
a47 3
# Require xorg-macros version >= 1.3.0 for XORG_DEFAULT_OPTIONS
m4_ifndef([XORG_MACROS_VERSION], [AC_FATAL([must install xorg-macros 1.2 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.3)
a55 12
XORG_DEFAULT_OPTIONS

# xmlto is used to convert doc/fontlib.xml from DocBook to PDF/HTML
XORG_WITH_XMLTO

# Option to enable support for building developer internals docs
AC_ARG_ENABLE(devel-docs,
	AS_HELP_STRING([--enable-devel-docs],
	    [Build internals documentation for developers (default: enabled)]),
	    [DEVEL_DOCS=$enableval], [DEVEL_DOCS=yes])
AM_CONDITIONAL([MAKE_DEVEL_DOCS], [test "x$DEVEL_DOCS" = "xyes"])

a58 2

m4_ifdef([AS_HELP_STRING], , [m4_define([AS_HELP_STRING], m4_defn([AC_HELP_STRING]))])
@


1.3
log
@Update to libXfont 1.4.1
@
text
@d53 1
a53 3
AC_ARG_VAR([XMLTO], [Path to xmlto command])
AC_PATH_PROG([XMLTO], [xmlto])
AM_CONDITIONAL([HAVE_XMLTO], [test "x$XMLTO" != "x"])
@


1.2
log
@merge libXfont 1.3.2. bump major since some symbols were removed.
@
text
@d26 1
a26 1
	1.3.2,
d39 4
d50 14
a69 7
DEFAULT_ENCODINGSDIR=${libdir}/X11/fonts/encodings
AC_ARG_WITH(encodingsdir,
	AS_HELP_STRING([--with-encodingsdir=ENCODINGSDIR], [Path to font encodings]),
	[ENCODINGSDIR="$withval"],
	[ENCODINGSDIR="$DEFAULT_ENCODINGSDIR"])
AC_SUBST(ENCODINGSDIR)

a78 1
#	IBM Type1 rasterizer
a115 14
AC_ARG_ENABLE(type1, [ --enable-type1 ], [XFONT_TYPE1=$enableval], [XFONT_TYPE1=yes])
if test "x$XFONT_TYPE1" = xyes; then
	AC_DEFINE(XFONT_TYPE1,1,[Support IBM Type 1 rasterizer for Type1 font files])
	XFONT_FONTFILE=yes
fi
AM_CONDITIONAL(XFONT_TYPE1, [test "x$XFONT_TYPE1" = xyes ])

AC_ARG_ENABLE(speedo, [ --disable-speedo ], [XFONT_SPEEDO=$enableval], [XFONT_SPEEDO=yes])
AM_CONDITIONAL(XFONT_SPEEDO, [test "x$XFONT_SPEEDO" = xyes ])
if test "x$XFONT_SPEEDO" = xyes; then
	AC_DEFINE(XFONT_SPEEDO,1,[Support Speedo font files])
	XFONT_FONTFILE=yes
fi

d127 13
a179 22
AC_ARG_ENABLE(loadable-font-modules, 
  AC_HELP_STRING([--disable-loadable-font-modules], 
       	 [support dynamically loaded font modules (default is enabled)]),
	[LOADABLE_FONTS=$enableval], [LOADABLE_FONTS=yes])
if test "x$LOADABLE_FONTS" = xyes; then
	AC_DEFINE(LOADABLEFONTS,1,[Support dynamically loaded font modules])
fi

#
# Font cache extension support?
#

AC_ARG_ENABLE(fontcache, [ --disable-fontcache ],[XFONT_FONTCACHE=$enableval],[XFONT_FONTCACHE=yes])
AM_CONDITIONAL(XFONT_FONTCACHE, [test "x$XFONT_FONTCACHE" = xyes])
if test "x$XFONT_FONTCACHE" = xyes; then
	AC_DEFINE(FONTCACHE,1,[Support the font caching extension])
	PKG_CHECK_MODULES(FONTCACHEPROTO, fontcacheproto)
else
	FONTCACHEPROTO_CFLAGS=""
fi
AC_SUBST(FONTCACHEPROTO_CFLAGS)

a189 3
AC_CHECK_LIB(z, gzopen, [Z_LIBS=-lz
AC_SUBST(Z_LIBS)], AC_MSG_ERROR([*** zlib is required]))

a198 7
if test "x$GCC" = "xyes"; then
	GCC_WARNINGS="-Wall -Wpointer-arith -Wstrict-prototypes \
	-Wmissing-prototypes -Wmissing-declarations \
	-Wnested-externs -fno-strict-aliasing"
	CFLAGS="$GCC_WARNINGS $CFLAGS"
fi

d210 1
a210 5

CFLAGS="$CFLAGS $XFONT_CFLAGS $OS_CFLAGS"
LIBS="$LIBS $XFONT_LIBS"

XORG_RELEASE_VERSION
a213 1
	   src/fontcache/Makefile
a217 2
	   src/Type1/Makefile
	   src/Speedo/Makefile
@


1.1
log
@Initial revision
@
text
@a0 3
dnl 
dnl  $Id$
dnl 
d26 1
a26 1
	1.2.3,
d106 1
a106 8
#
# A bit tricky here; CID font support uses the IBM Type1 rasterizer,
# but it's generally better to use FreeType for regular Type1 files,
# so we make CID build the IBM rasterizer, but not also make the Type1
# rasterizer used for normal Type1 files
#

AC_ARG_ENABLE(type1, [ --enable-type1 ], [XFONT_TYPE1=$enableval], [XFONT_TYPE1=no])
a110 9

AC_ARG_ENABLE(cid, [ --disable-cid ], [XFONT_CID=$enableval], [XFONT_CID=yes])
AM_CONDITIONAL(XFONT_CID, [test "x$XFONT_CID" = xyes ])
if test "x$XFONT_CID" = xyes; then
	AC_DEFINE(XFONT_CID,1,[Support Type 1 CID font files])
	XFONT_TYPE1=yes
	XFONT_FONTFILE=yes
fi

d171 8
d226 3
@


1.1.1.1
log
@import from X.Org 7.2RC1
@
text
@@


1.1.1.2
log
@libXfont 1.2.5 from X.Org 7.2RC3
@
text
@d29 1
a29 1
	1.2.5,
d109 7
d121 9
@


1.1.1.3
log
@libXfont 1.2.6
@
text
@d29 1
a29 1
	1.2.6,
d109 1
a109 1
AC_ARG_ENABLE(type1, [ --enable-type1 ], [XFONT_TYPE1=$enableval], [XFONT_TYPE1=yes])
@


1.1.1.4
log
@Import libXfont version 1.2.7
@
text
@d29 1
a29 1
	1.2.7,
@


1.1.1.5
log
@import libXfont 1.2.8
@
text
@d29 1
a29 1
	1.2.8,
a173 8
AC_ARG_ENABLE(loadable-font-modules, 
  AC_HELP_STRING([--disable-loadable-font-modules], 
       	 [support dynamically loaded font modules (default is enabled)]),
	[LOADABLE_FONTS=$enableval], [LOADABLE_FONTS=yes])
if test "x$LOADABLE_FONTS" = xyes; then
	AC_DEFINE(LOADABLEFONTS,1,[Support dynamically loaded font modules])
fi

a220 3
    darwin*)
        OS_CFLAGS="-Wl,-flat_namespace"
	;;
@


1.1.1.6
log
@import libXfont 1.3.0
@
text
@d29 1
a29 1
	1.3.0,
@


1.1.1.7
log
@libXfont 1.3.1
@
text
@d29 1
a29 1
	1.3.1,
@


