head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.6
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_3_1:1.1.1.1
	v1_3_0:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_8:1.1.1.1
	v1_2_7:1.1.1.1
	v1_2_6:1.1.1.1
	v1_2_5:1.1.1.1
	v1_2_3:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.09.02.11.00.05;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	aM4WnEgH4GFFchOx;

1.7
date	2014.09.27.17.42.15;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	i8vICzmreDEZmlS0;

1.6
date	2013.08.18.10.58.04;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.03.04.18.13.47;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.20.21.43.47;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2010.11.02.07.51.54;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.31.15.09.46;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.17.14.35;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.17.14.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to libXfont 1.5.2
@
text
@#include <stdio.h>
#include <X11/fonts/fntfilst.h>
#include <X11/fonts/font.h>

#ifndef True
#define True (-1)
#endif
#ifndef False
#define False (0)
#endif

/* this probably works for Mach-O too, but probably not for PE */
#if defined(__ELF__) && defined(__GNUC__) && (__GNUC__ >= 3)
#define weak __attribute__((weak))
#else
#define weak
#ifndef __SUNPRO_C /* Sun compilers use #pragma weak in .c files instead */
#define NO_WEAK_SYMBOLS
#endif
#endif

#if defined(NO_WEAK_SYMBOLS) && defined(PIC)
#include <stdarg.h>
extern int _font_init_stubs(void);
#define OVERRIDE_DATA(sym) \
    _font_init_stubs(); \
    if (__ptr_##sym && __ptr_##sym != &sym) \
      sym = *__ptr_##sym
#define OVERRIDE_SYMBOL(sym,...) \
    _font_init_stubs(); \
    if (__##sym && __##sym != sym) \
      return (*__##sym)(__VA_ARGS__)
#define OVERRIDE_VA_SYMBOL(sym,f) \
    va_list _args; \
    _font_init_stubs(); \
    va_start(_args, f); \
    if (__##sym) \
      (*__##sym)(f, _args); \
    va_end(_args)

extern int (*__client_auth_generation)(ClientPtr);
extern Bool (*__ClientSignal)(ClientPtr);
extern void (*__DeleteFontClientID)(Font);
extern void (*__VErrorF)(const char *, va_list);
extern FontPtr (*__find_old_font)(FSID);
extern FontResolutionPtr (*__GetClientResolutions)(int *);
extern int (*__GetDefaultPointSize)(void);
extern Font (*__GetNewFontClientID)(void);
extern unsigned long (*__GetTimeInMillis)(void);
extern int (*__init_fs_handlers)(FontPathElementPtr, BlockHandlerProcPtr);
extern int (*__RegisterFPEFunctions)(NameCheckFunc, InitFpeFunc, FreeFpeFunc,
            ResetFpeFunc, OpenFontFunc, CloseFontFunc, ListFontsFunc,
            StartLfwiFunc, NextLfwiFunc, WakeupFpeFunc, ClientDiedFunc,
            LoadGlyphsFunc, StartLaFunc, NextLaFunc, SetPathFunc);
extern void (*__remove_fs_handlers)(FontPathElementPtr, BlockHandlerProcPtr, Bool);
extern void **__ptr_serverClient;
extern int (*__set_font_authorizations)(char **, int *, ClientPtr);
extern int (*__StoreFontClientFont)(FontPtr, Font);
extern Atom (*__MakeAtom)(const char *, unsigned, int);
extern int (*__ValidAtom)(Atom);
extern char *(*__NameForAtom)(Atom);
extern unsigned long *__ptr_serverGeneration;
extern void (*__register_fpe_functions)(void);
#else /* NO_WEAK_SYMBOLS && PIC */
#define OVERRIDE_DATA(sym)
#define OVERRIDE_SYMBOL(sym,...)
#define OVERRIDE_VA_SYMBOL(sym,f)
#endif

extern FontPtr find_old_font ( FSID id );
extern int set_font_authorizations ( char **authorizations,
				     int *authlen,
				     ClientPtr client );

extern unsigned long GetTimeInMillis (void);

extern void ErrorF(const char *format, ...);

/* end of file */
@


1.7
log
@Update to libXfont 1.5.0

Tested together with xserver 1.16.1 by naddy@@, jsg@@ & kettenis@@
@
text
@d13 1
a13 1
#if (defined(__APPLE__) || defined(__ELF__)) && defined(__GNUC__) && (__GNUC__ >= 3)
d41 23
a63 23
int (*__client_auth_generation)(ClientPtr);
Bool (*__ClientSignal)(ClientPtr);
void (*__DeleteFontClientID)(Font);
void (*__VErrorF)(const char *, va_list);
FontPtr (*__find_old_font)(FSID);
FontResolutionPtr (*__GetClientResolutions)(int *);
int (*__GetDefaultPointSize)(void);
Font (*__GetNewFontClientID)(void);
unsigned long (*__GetTimeInMillis)(void);
int (*__init_fs_handlers)(FontPathElementPtr, BlockHandlerProcPtr);
int (*__RegisterFPEFunctions)(NameCheckFunc, InitFpeFunc, FreeFpeFunc,
     ResetFpeFunc, OpenFontFunc, CloseFontFunc, ListFontsFunc,
     StartLfwiFunc, NextLfwiFunc, WakeupFpeFunc, ClientDiedFunc,
     LoadGlyphsFunc, StartLaFunc, NextLaFunc, SetPathFunc);
void (*__remove_fs_handlers)(FontPathElementPtr, BlockHandlerProcPtr, Bool);
void **__ptr_serverClient;
int (*__set_font_authorizations)(char **, int *, ClientPtr);
int (*__StoreFontClientFont)(FontPtr, Font);
Atom (*__MakeAtom)(const char *, unsigned, int);
int (*__ValidAtom)(Atom);
char *(*__NameForAtom)(Atom);
unsigned long *__ptr_serverGeneration;
void (*__register_fpe_functions)(void);
a67 9
#endif

/* This is really just a hack for now... __APPLE__ really should be using
 * the weak symbols route above, but it's causing an as-yet unresolved issue,
 * so we're instead building with flat_namespace.
 */
#ifdef __APPLE__
#undef weak
#define weak
@


1.6
log
@A local change that can go now that vax is gcc 3 and ELF
@
text
@d22 48
a86 1
extern void FatalError(const char *format, ...);
@


1.5
log
@Update to libXfont 1.4.5
@
text
@d13 1
a13 2
#if (defined(__APPLE__) || defined(__ELF__) || defined(__OpenBSD__)) && \
	defined(__GNUC__) && ((__GNUC__ >= 3) || ((__GNUC__ == 2) && __GNUC_MINOR__ >= 95 ))
@


1.4
log
@Enable weak symbols under OpenBSD on non-ELF platforms, too.
ok matthieu@@ todd@@
@
text
@d33 2
a34 2
extern int set_font_authorizations ( char **authorizations, 
				     int *authlen, 
@


1.3
log
@Fix weak symbols declarations for gcc 2.95
@
text
@d13 1
a13 1
#if (defined(__APPLE__) || defined(__ELF__)) && \
@


1.2
log
@Update to libXfont 1.4.3. No functional change.
@
text
@d13 2
a14 1
#if (defined(__APPLE__) || defined(__ELF__)) && defined(__GNUC__) && (__GNUC__ >= 3)
@


1.1
log
@Initial revision
@
text
@a0 2
/* $XFree86: xc/lib/font/stubs/stubs.h,v 1.3 1999/12/15 01:14:36 robin Exp $ */

d13 1
a13 1
#if defined(__ELF__) && defined(__GNUC__) && (__GNUC__ >= 3)
d16 12
@


1.1.1.1
log
@import from X.Org 7.2RC1
@
text
@@
