head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.12
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.10
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.6
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	v1_3_1:1.1.1.3
	v1_3_0:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_8:1.1.1.1
	v1_2_7:1.1.1.1
	v1_2_6:1.1.1.1
	v1_2_5:1.1.1.1
	v1_2_3:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.09.27.17.42.14;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	i8vICzmreDEZmlS0;

1.6
date	2013.08.18.10.43.33;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.03.04.18.13.47;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.31.17.57.12;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.24.13.29.07;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.14.07.31.35;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.17.14.47;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.17.14.47;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.08.16.14.31;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.11.24.14.32.18;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to libXfont 1.5.0

Tested together with xserver 1.16.1 by naddy@@, jsg@@ & kettenis@@
@
text
@/*
 * Copyright 1999 SuSE, Inc.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of SuSE not be used in advertising or
 * publicity pertaining to distribution of the software without specific,
 * written prior permission.  SuSE makes no representations about the
 * suitability of this software for any purpose.  It is provided "as is"
 * without express or implied warranty.
 *
 * SuSE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL SuSE
 * BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Author:  Keith Packard, SuSE, Inc.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include "builtin.h"

static BuiltinDirPtr
BuiltinDirsDup (const BuiltinDirPtr a_dirs,
                int a_dirs_len)
{
    BuiltinDirPtr dirs=NULL ;
    int i=0 ;

    if (!a_dirs)
        return NULL ;

    dirs = calloc (a_dirs_len, sizeof (BuiltinDirRec)) ;
    if (!dirs)
        return NULL ;

    for (i=0; i < a_dirs_len; i++) {
	dirs[i].file_name = strdup(a_dirs[i].file_name);
	dirs[i].font_name = strdup(a_dirs[i].font_name);
    }
    return dirs ;
}

/**
 * Copy a_save back into a_cur
 * @@param a_cur the instance of BuiltinDir to restore
 * @@param a_saved the saved instance of BuiltinDir to copy into a_cur
 * @@return 0 if went okay, 1 otherwise.
 */
static int
BuiltinDirRestore (BuiltinDirPtr a_cur,
                   const BuiltinDirPtr a_saved)
{
    if (!a_cur)
        return 1 ;
    if (!a_saved)
        return 0 ;

    if (a_saved->font_name)
        memmove (a_cur->font_name, a_saved->font_name, strlen (a_saved->font_name)) ;
    return 0 ;
}


static int
BuiltinDirsRestore (BuiltinDirPtr a_cur_tab,
                    const BuiltinDirPtr a_saved_tab,
                    int a_tab_len)
{
    int i=0 ;

    if (!a_cur_tab)
        return 1 ;
    if (!a_saved_tab)
        return 0 ;

    for (i=0 ; i < a_tab_len; i++) {
        if (BuiltinDirRestore (&a_cur_tab[i], &a_saved_tab[i]))
            return 1 ;
    }
    return 0 ;
}

static BuiltinAliasPtr
BuiltinAliasesDup (const BuiltinAliasPtr a_aliases,
                   int a_aliases_len)
{
    BuiltinAliasPtr aliases=NULL ;
    int i=0 ;

    if (!a_aliases)
        return NULL ;

    aliases = calloc (a_aliases_len, sizeof (BuiltinAliasRec)) ;
    if (!aliases)
        return NULL ;

    for (i=0; i < a_aliases_len; i++) {
	aliases[i].font_name = strdup(a_aliases[i].font_name);
    }
    return aliases ;
}

/**
 * Copy a_save back into a_cur
 * @@param a_cur the instance of BuiltinAlias to restore
 * @@param a_saved the saved instance of BuiltinAlias to copy into a_cur
 * @@return 0 if went okay, 1 otherwise.
 */
static int
BuiltinAliasRestore (BuiltinAliasPtr a_cur,
                     const BuiltinAliasPtr a_save)
{
    if (!a_cur)
        return 1 ;
    if (!a_save)
        return 0 ;
    if (a_save->alias_name)
        memmove (a_cur->alias_name, a_save->alias_name, strlen (a_save->alias_name)) ;
    if (a_save->font_name)
        memmove (a_cur->font_name, a_save->font_name, strlen (a_save->font_name)) ;
    return 0 ;
}

static int
BuiltinAliasesRestore (BuiltinAliasPtr a_cur_tab,
                       const BuiltinAliasPtr a_saved_tab,
                       int a_tab_len)
{
    int i=0 ;

    if (!a_cur_tab)
        return 1 ;
    if (!a_saved_tab)
        return 0 ;

    for (i=0 ; i < a_tab_len; i++) {
        if (BuiltinAliasRestore (&a_cur_tab[i], &a_saved_tab[i]))
            return 1 ;
    }
    return 0 ;
}

int
BuiltinReadDirectory (const char *directory, FontDirectoryPtr *pdir)
{
    FontDirectoryPtr	dir;
    int			i;

    static BuiltinDirPtr saved_builtin_dir;
    static BuiltinAliasPtr saved_builtin_alias;

    dir = FontFileMakeDir ("", builtin_dir_count);

    if (saved_builtin_dir)
    {
        BuiltinDirsRestore ((BuiltinDirPtr) builtin_dir,
                            saved_builtin_dir,
                            builtin_dir_count) ;
    }
    else
    {
        saved_builtin_dir = BuiltinDirsDup ((const BuiltinDirPtr) builtin_dir,
                                            builtin_dir_count) ;
    }

    if (saved_builtin_alias)
    {
        BuiltinAliasesRestore ((BuiltinAliasPtr) builtin_alias,
                               saved_builtin_alias,
                               builtin_alias_count) ;
    }
    else
    {
        saved_builtin_alias = BuiltinAliasesDup ((const BuiltinAliasPtr) builtin_alias,
                                                 builtin_alias_count) ;
    }

    for (i = 0; i < builtin_dir_count; i++)
    {
	if (!FontFileAddFontFile (dir,
				  (char *) builtin_dir[i].font_name,
				  (char *) builtin_dir[i].file_name))
	{
	    FontFileFreeDir (dir);
	    return BadFontPath;
	}
    }
    for (i = 0; i < builtin_alias_count; i++)
    {
	if (!FontFileAddFontAlias (dir,
				   (char *) builtin_alias[i].alias_name,
				   (char *) builtin_alias[i].font_name))
	{
	    FontFileFreeDir (dir);
	    return BadFontPath;
	}
    }
    FontFileSortDir (dir);
    *pdir = dir;
    return Successful;
}
@


1.6
log
@Reduce diff with upstreams. (white space)
@
text
@d151 1
a151 1
BuiltinReadDirectory (char *directory, FontDirectoryPtr *pdir)
@


1.5
log
@Update to libXfont 1.4.5
@
text
@d156 2
a157 2
    static BuiltinDirPtr saved_builtin_dir ;
    static BuiltinAliasPtr saved_builtin_alias ;
@


1.4
log
@Update to libXfont 1.4.1
@
text
@d18 1
a18 1
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
d197 1
a197 1
	if (!FontFileAddFontAlias (dir, 
@


1.3
log
@merge libXfont 1.3.2. bump major since some symbols were removed.
@
text
@a1 2
 * Id: dir.c,v 1.2 1999/11/02 06:16:47 keithp Exp $
 *
a22 1
/* $XFree86: xc/lib/font/builtins/dir.c,v 1.3 1999/12/30 02:29:49 robin Exp $ */
d39 1
a39 1
    dirs = xcalloc (a_dirs_len, sizeof (BuiltinDirRec)) ;
d44 2
a45 6
        int len = strlen (a_dirs[i].file_name) ;
        dirs[i].file_name = xcalloc (1, len) ;
        memmove (dirs[i].file_name, a_dirs[i].file_name, len);
        len = strlen (a_dirs[i].font_name) ;
        dirs[i].font_name = xcalloc (1, len) ;
        memmove (dirs[i].font_name, a_dirs[i].font_name, len);
d100 1
a100 1
    aliases = xcalloc (a_aliases_len, sizeof (BuiltinAliasRec)) ;
d105 1
a105 3
        int len = strlen (a_aliases[i].font_name) ;
        aliases[i].font_name = xcalloc (1, len) ;
        memmove (aliases[i].font_name, a_aliases[i].font_name, len);
@


1.2
log
@Fix build with gcc 2.95.
@
text
@d32 1
a32 1
BuiltinDirPtr
d63 1
a63 1
int
d78 1
a78 1
int
d97 1
a97 1
BuiltinAliasPtr
d125 1
a125 1
int
d140 1
a140 1
int
@


1.1
log
@Initial revision
@
text
@d32 127
d160 1
a160 3
BuiltinReadDirectory (directory, pdir)
    char		*directory;
    FontDirectoryPtr	*pdir;
d165 3
d169 25
@


1.1.1.1
log
@import from X.Org 7.2RC1
@
text
@@


1.1.1.2
log
@import libXfont 1.3.0
@
text
@d33 3
a35 1
BuiltinReadDirectory (char *directory, FontDirectoryPtr *pdir)
@


1.1.1.3
log
@libXfont 1.3.1
@
text
@a31 127
BuiltinDirPtr
BuiltinDirsDup (const BuiltinDirPtr a_dirs,
                int a_dirs_len)
{
    BuiltinDirPtr dirs=NULL ;
    int i=0 ;

    if (!a_dirs)
        return NULL ;

    dirs = xcalloc (a_dirs_len, sizeof (BuiltinDirRec)) ;
    if (!dirs)
        return NULL ;

    for (i=0; i < a_dirs_len; i++) {
        int len = strlen (a_dirs[i].file_name) ;
        dirs[i].file_name = xcalloc (1, len) ;
        memmove (dirs[i].file_name, a_dirs[i].file_name, len);
        len = strlen (a_dirs[i].font_name) ;
        dirs[i].font_name = xcalloc (1, len) ;
        memmove (dirs[i].font_name, a_dirs[i].font_name, len);
    }
    return dirs ;
}

/**
 * Copy a_save back into a_cur
 * @@param a_cur the instance of BuiltinDir to restore
 * @@param a_saved the saved instance of BuiltinDir to copy into a_cur
 * @@return 0 if went okay, 1 otherwise.
 */
int
BuiltinDirRestore (BuiltinDirPtr a_cur,
                   const BuiltinDirPtr a_saved)
{
    if (!a_cur)
        return 1 ;
    if (!a_saved)
        return 0 ;

    if (a_saved->font_name)
        memmove (a_cur->font_name, a_saved->font_name, strlen (a_saved->font_name)) ;
    return 0 ;
}


int
BuiltinDirsRestore (BuiltinDirPtr a_cur_tab,
                    const BuiltinDirPtr a_saved_tab,
                    int a_tab_len)
{
    int i=0 ;

    if (!a_cur_tab)
        return 1 ;
    if (!a_saved_tab)
        return 0 ;

    for (i=0 ; i < a_tab_len; i++) {
        if (BuiltinDirRestore (&a_cur_tab[i], &a_saved_tab[i]))
            return 1 ;
    }
    return 0 ;
}

BuiltinAliasPtr
BuiltinAliasesDup (const BuiltinAliasPtr a_aliases,
                   int a_aliases_len)
{
    BuiltinAliasPtr aliases=NULL ;
    int i=0 ;

    if (!a_aliases)
        return NULL ;

    aliases = xcalloc (a_aliases_len, sizeof (BuiltinAliasRec)) ;
    if (!aliases)
        return NULL ;

    for (i=0; i < a_aliases_len; i++) {
        int len = strlen (a_aliases[i].font_name) ;
        aliases[i].font_name = xcalloc (1, len) ;
        memmove (aliases[i].font_name, a_aliases[i].font_name, len);
    }
    return aliases ;
}

/**
 * Copy a_save back into a_cur
 * @@param a_cur the instance of BuiltinAlias to restore
 * @@param a_saved the saved instance of BuiltinAlias to copy into a_cur
 * @@return 0 if went okay, 1 otherwise.
 */
int
BuiltinAliasRestore (BuiltinAliasPtr a_cur,
                     const BuiltinAliasPtr a_save)
{
    if (!a_cur)
        return 1 ;
    if (!a_save)
        return 0 ;
    if (a_save->alias_name)
        memmove (a_cur->alias_name, a_save->alias_name, strlen (a_save->alias_name)) ;
    if (a_save->font_name)
        memmove (a_cur->font_name, a_save->font_name, strlen (a_save->font_name)) ;
    return 0 ;
}

int
BuiltinAliasesRestore (BuiltinAliasPtr a_cur_tab,
                       const BuiltinAliasPtr a_saved_tab,
                       int a_tab_len)
{
    int i=0 ;

    if (!a_cur_tab)
        return 1 ;
    if (!a_saved_tab)
        return 0 ;

    for (i=0 ; i < a_tab_len; i++) {
        if (BuiltinAliasRestore (&a_cur_tab[i], &a_saved_tab[i]))
            return 1 ;
    }
    return 0 ;
}

a38 28
    static BuiltinDirPtr saved_builtin_dir ;
    static BuiltinAliasPtr saved_builtin_alias ;


    if (saved_builtin_dir)
    {
        BuiltinDirsRestore ((BuiltinDirPtr) builtin_dir,
                            saved_builtin_dir,
                            builtin_dir_count) ;
    }
    else
    {
        saved_builtin_dir = BuiltinDirsDup ((const BuiltinDirPtr) builtin_dir,
                                            builtin_dir_count) ;
    }

    if (saved_builtin_alias)
    {
        BuiltinAliasesRestore ((BuiltinAliasPtr) builtin_alias,
                               saved_builtin_alias,
                               builtin_alias_count) ;
    }
    else
    {
        saved_builtin_alias = BuiltinAliasesDup ((const BuiltinAliasPtr) builtin_alias,
                                                 builtin_alias_count) ;
    }

@


