head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.10
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.8
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.6
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.4
	v1_3_1:1.1.1.2
	v1_3_0:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v1_2_8:1.1.1.2
	v1_2_7:1.1.1.1
	v1_2_6:1.1.1.1
	v1_2_5:1.1.1.1
	v1_2_3:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.09.27.17.42.15;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	i8vICzmreDEZmlS0;

1.5
date	2014.01.07.20.42.20;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.03.04.18.13.47;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.31.15.09.46;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.31.17.57.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.17.14.56;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.17.14.56;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.04.08.17.57.10;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to libXfont 1.5.0

Tested together with xserver 1.16.1 by naddy@@, jsg@@ & kettenis@@
@
text
@/*

Copyright 1990, 1994, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

*/

/*
 * Author:  Keith Packard, MIT X Consortium
 */

/* lame atom replacement routines for font applications */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <X11/fonts/fontmisc.h>
#include "stubs.h"

typedef struct _AtomList {
    char		*name;
    int			len;
    int			hash;
    Atom		atom;
} AtomListRec, *AtomListPtr;

static AtomListPtr  *hashTable;

static int	    hashSize, hashUsed;
static int	    hashMask;
static int	    rehash;

static AtomListPtr  *reverseMap;
static int	    reverseMapSize;
static Atom	    lastAtom;

static int
Hash(const char *string, int len)
{
    int	h;

    h = 0;
    while (len--)
	h = (h << 3) ^ *string++;
    if (h < 0)
	return -h;
    return h;
}

static int
ResizeHashTable (void)
{
    int		newHashSize;
    int		newHashMask;
    AtomListPtr	*newHashTable;
    int		i;
    int		h;
    int		newRehash;
    int		r;

    if (hashSize == 0)
	newHashSize = 1024;
    else
	newHashSize = hashSize * 2;
    newHashTable = calloc (newHashSize, sizeof (AtomListPtr));
    if (!newHashTable) {
	fprintf(stderr, "ResizeHashTable(): Error: Couldn't allocate"
		" newHashTable (%ld)\n",
		newHashSize * (unsigned long)sizeof (AtomListPtr));
	return FALSE;
    }
    newHashMask = newHashSize - 1;
    newRehash = (newHashMask - 2);
    for (i = 0; i < hashSize; i++)
    {
	if (hashTable[i])
	{
	    h = (hashTable[i]->hash) & newHashMask;
	    if (newHashTable[h])
	    {
		r = hashTable[i]->hash % newRehash | 1;
		do {
		    h += r;
		    if (h >= newHashSize)
			h -= newHashSize;
		} while (newHashTable[h]);
	    }
	    newHashTable[h] = hashTable[i];
	}
    }
    free (hashTable);
    hashTable = newHashTable;
    hashSize = newHashSize;
    hashMask = newHashMask;
    rehash = newRehash;
    return TRUE;
}

static int
ResizeReverseMap (void)
{
    AtomListPtr *newMap;
    int newMapSize;

    if (reverseMapSize == 0)
	newMapSize = 1000;
    else
	newMapSize = reverseMapSize * 2;
    newMap = realloc (reverseMap, newMapSize * sizeof (AtomListPtr));
    if (newMap == NULL) {
	fprintf(stderr, "ResizeReverseMap(): Error: Couldn't reallocate"
		" reverseMap (%ld)\n",
		newMapSize * (unsigned long)sizeof(AtomListPtr));
	return FALSE;
    }
    reverseMap = newMap;
    reverseMapSize = newMapSize;
    return TRUE;
}

static int
NameEqual (const char *a, const char *b, int l)
{
    while (l--)
	if (*a++ != *b++)
	    return FALSE;
    return TRUE;
}

#ifdef __SUNPRO_C
#pragma weak MakeAtom
#endif

weak Atom
MakeAtom(const char *string, unsigned len, int makeit)
{
    AtomListPtr	a;
    int		hash;
    int		h = 0;
    int		r;

    OVERRIDE_SYMBOL(MakeAtom, string, len, makeit);

    hash = Hash (string, len);
    if (hashTable)
    {
    	h = hash & hashMask;
	if (hashTable[h])
	{
	    if (hashTable[h]->hash == hash && hashTable[h]->len == len &&
	    	NameEqual (hashTable[h]->name, string, len))
	    {
	    	return hashTable[h]->atom;
	    }
	    r = (hash % rehash) | 1;
	    for (;;)
	    {
		h += r;
		if (h >= hashSize)
		    h -= hashSize;
		if (!hashTable[h])
		    break;
		if (hashTable[h]->hash == hash && hashTable[h]->len == len &&
		    NameEqual (hashTable[h]->name, string, len))
		{
		    return hashTable[h]->atom;
		}
	    }
    	}
    }
    if (!makeit)
	return None;
    a = malloc (sizeof (AtomListRec) + len + 1);
    if (a == NULL) {
	fprintf(stderr, "MakeAtom(): Error: Couldn't allocate AtomListRec"
		" (%ld)\n", (unsigned long)sizeof (AtomListRec) + len + 1);
	return None;
    }
    a->name = (char *) (a + 1);
    a->len = len;
    strncpy (a->name, string, len);
    a->name[len] = '\0';
    a->atom = ++lastAtom;
    a->hash = hash;
    if (hashUsed >= hashSize / 2)
    {
	ResizeHashTable ();
	h = hash & hashMask;
	if (hashTable[h])
	{
	    r = (hash % rehash) | 1;
	    do {
		h += r;
		if (h >= hashSize)
		    h -= hashSize;
	    } while (hashTable[h]);
	}
    }
    hashTable[h] = a;
    hashUsed++;
    if (reverseMapSize <= a->atom) {
	if (!ResizeReverseMap())
	    return None;
    }
    reverseMap[a->atom] = a;
    return a->atom;
}

#ifdef __SUNPRO_C
#pragma weak ValidAtom
#endif

weak int
ValidAtom(Atom atom)
{
    OVERRIDE_SYMBOL(ValidAtom, atom);
    return (atom != None) && (atom <= lastAtom);
}

#ifdef __SUNPRO_C
#pragma weak NameForAtom
#endif

weak char *
NameForAtom(Atom atom)
{
    OVERRIDE_SYMBOL(NameForAtom, atom);
    if (atom != None && atom <= lastAtom)
	return reverseMap[atom]->name;
    return NULL;
}
@


1.5
log
@Update to libXfont 1.4.7. Include fix for  CVE-2013-6462.
unlimited sscanf overflows stack buffer in bdfReadCharacters
@
text
@d161 2
d235 1
d246 1
@


1.4
log
@Update to libXfont 1.4.5
@
text
@d121 3
a123 1
    int ret = TRUE;
d125 1
a125 1
	reverseMapSize = 1000;
d127 3
a129 3
	reverseMapSize *= 2;
    reverseMap = realloc (reverseMap, reverseMapSize * sizeof (AtomListPtr));
    if (!reverseMap) {
d132 2
a133 2
		reverseMapSize * (unsigned long)sizeof(AtomListPtr));
	ret = FALSE;
d135 3
a137 1
    return ret;
@


1.3
log
@Update to libXfont 1.4.3. No functional change.
@
text
@d57 1
a57 1
Hash(char *string, int len)
d149 2
a150 2
weak Atom 
MakeAtom(char *string, unsigned len, int makeit)
d226 1
a226 1
weak int 
@


1.2
log
@Update to libXfont 1.4.1
@
text
@a0 2
/* $Xorg: atom.c,v 1.5 2001/02/09 02:04:04 xorgcvs Exp $ */

a25 1
/* $XFree86: xc/lib/font/util/atom.c,v 1.9 2002/09/19 13:22:00 tsi Exp $ */
@


1.1
log
@Initial revision
@
text
@d87 1
a87 1
    newHashTable = (AtomListPtr *) xalloc (newHashSize * sizeof (AtomListPtr));
a93 1
    bzero ((char *) newHashTable, newHashSize * sizeof (AtomListPtr));
d113 1
a113 1
    xfree (hashTable);
d129 1
a129 1
    reverseMap = (AtomListPtr *) xrealloc (reverseMap, reverseMapSize * sizeof (AtomListPtr));
d148 4
d189 1
a189 1
    a = (AtomListPtr) xalloc (sizeof (AtomListRec) + len + 1);
d225 4
d234 4
@


1.1.1.1
log
@import from X.Org 7.2RC1
@
text
@@


1.1.1.2
log
@import libXfont 1.2.8
@
text
@a148 4
#ifdef __SUNPRO_C
#pragma weak MakeAtom
#endif

a221 4
#ifdef __SUNPRO_C
#pragma weak ValidAtom
#endif

a226 4

#ifdef __SUNPRO_C
#pragma weak NameForAtom
#endif
@

