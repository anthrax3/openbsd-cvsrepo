head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	mesa-17_1_6:1.1.1.4
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.08.26.16.59.17;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2015.11.22.02.37.20;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.37.20;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.12.28;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.25.44;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.08.14.09.30.20;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Compiling and Installing</title>
  <link rel="stylesheet" type="text/css" href="mesa.css">
</head>
<body>

<div class="header">
  <h1>The Mesa 3D Graphics Library</h1>
</div>

<iframe src="contents.html"></iframe>
<div class="content">

<h1>Compiling and Installing</h1>

<ol>
<li><a href="#prereq-general">Prerequisites for building</a>
  <ul>
  <li><a href="#prereq-general">General prerequisites</a>
  <li><a href="#prereq-dri">For DRI and hardware acceleration</a>
  </ul>
<li><a href="#autoconf">Building with autoconf (Linux/Unix/X11)</a>
<li><a href="#scons">Building with SCons (Windows/Linux)</a>
<li><a href="#other">Building for other systems</a>
<li><a href="#libs">Library Information</a>
<li><a href="#pkg-config">Building OpenGL programs with pkg-config</a>
</ol>


<h1 id="prereq-general">1. Prerequisites for building</h1>

<h2>1.1 General</h2>
<ul>
<li><a href="http://www.python.org/">Python</a> - Python is required.
Version 2.6.4 or later should work.
</li>
<br>
<li><a href="http://www.makotemplates.org/">Python Mako module</a> -
Python Mako module is required. Version 0.3.4 or later should work.
</li>
</br>
<li><a href="http://www.scons.org/">SCons</a> is required for building on
Windows and optional for Linux (it's an alternative to autoconf/automake.)
</li>
<br>
<li>lex / yacc - for building the GLSL compiler.
<br>
<br>
On Linux systems, flex and bison are used.
Versions 2.5.35 and 2.4.1, respectively, (or later) should work.
<br>
<br>
On Windows with MinGW, install flex and bison with:
<pre>mingw-get install msys-flex msys-bison</pre>
For MSVC on Windows, install
<a href="http://winflexbison.sourceforge.net/">Win flex-bison</a>.
</li>
<br>
<li>For building on Windows, Microsoft Visual Studio 2013 or later is required.
</li>
</ul>


<h3 id="prereq-dri">1.2 For DRI and hardware acceleration</h3>

<p>
The following are required for DRI-based hardware acceleration with Mesa:
</p>

<ul>
<li><a href="http://xorg.freedesktop.org/releases/individual/proto/">
dri2proto</a> version 2.6 or later
<li><a href="http://dri.freedesktop.org/libdrm/">libDRM</a> latest version
<li>Xorg server version 1.5 or later
<li>Linux 2.6.28 or later
</ul>
<p>
If you're using a fedora distro the following command should install all
the needed dependencies:
</p>
<pre>
  sudo yum install flex bison imake libtool xorg-x11-proto-devel libdrm-devel \
  gcc-c++ xorg-x11-server-devel libXi-devel libXmu-devel libXdamage-devel git \
  expat-devel llvm-devel python-mako
</pre>



<h1 id="autoconf">2. Building with autoconf (Linux/Unix/X11)</h1>

<p>
The primary method to build Mesa on Unix systems is with autoconf.
</p>

<p>
The general approach is the standard:
</p>
<pre>
  ./configure
  make
  sudo make install
</pre>
<p>
But please read the <a href="autoconf.html">detailed autoconf instructions</a>
for more details.
</p>



<h1 id="scons">3. Building with SCons (Windows/Linux)</h1>

<p>
To build Mesa with SCons on Linux or Windows do
</p>
<pre>
    scons
</pre>
<p>
The build output will be placed in
build/<i>platform</i>-<i>machine</i>-<i>debug</i>/..., where <i>platform</i> is for
example linux or windows, <i>machine</i> is x86 or x86_64, optionally followed
by -debug for debug builds.
</p>

<p>
To build Mesa with SCons for Windows on Linux using the MinGW crosscompiler toolchain do
</p>
<pre>
    scons platform=windows toolchain=crossmingw machine=x86 libgl-gdi
</pre>
<p>
This will create:
</p>
<ul>
<li>build/windows-x86-debug/gallium/targets/libgl-gdi/opengl32.dll &mdash; Mesa + Gallium + softpipe (or llvmpipe), binary compatible with Windows's opengl32.dll
</ul>
<p>
Put them all in the same directory to test them.
</p>



<h1 id="other">4. Building for other systems</h1>

<p>
Documentation for other environments (some may be very out of date):
</p>

<ul>
<li><a href="README.VMS">README.VMS</a> - VMS
<li><a href="README.CYGWIN">README.CYGWIN</a> - Cygwin
<li><a href="README.WIN32">README.WIN32</a> - Win32
</ul>



<h1 id="libs">5. Library Information</h1>

<p>
When compilation has finished, look in the top-level <code>lib/</code>
(or <code>lib64/</code>) directory.
You'll see a set of library files similar to this:
</p>
<pre>
lrwxrwxrwx    1 brian    users          10 Mar 26 07:53 libGL.so -> libGL.so.1*
lrwxrwxrwx    1 brian    users          19 Mar 26 07:53 libGL.so.1 -> libGL.so.1.5.060100*
-rwxr-xr-x    1 brian    users     3375861 Mar 26 07:53 libGL.so.1.5.060100*
lrwxrwxrwx    1 brian    users          14 Mar 26 07:53 libOSMesa.so -> libOSMesa.so.6*
lrwxrwxrwx    1 brian    users          23 Mar 26 07:53 libOSMesa.so.6 -> libOSMesa.so.6.1.060100*
-rwxr-xr-x    1 brian    users       23871 Mar 26 07:53 libOSMesa.so.6.1.060100*
</pre>

<p>
<b>libGL</b> is the main OpenGL library (i.e. Mesa).
<br>
<b>libOSMesa</b> is the OSMesa (Off-Screen) interface library.
</p>

<p>
If you built the DRI hardware drivers, you'll also see the DRI drivers:
</p>
<pre>
-rwxr-xr-x   1 brian users 16895413 Jul 21 12:11 i915_dri.so
-rwxr-xr-x   1 brian users 16895413 Jul 21 12:11 i965_dri.so
-rwxr-xr-x   1 brian users 11849858 Jul 21 12:12 r200_dri.so
-rwxr-xr-x   1 brian users 11757388 Jul 21 12:12 radeon_dri.so
</pre>

<p>
If you built with Gallium support, look in lib/gallium/ for Gallium-based
versions of libGL and device drivers.
</p>


<h1 id="pkg-config">6. Building OpenGL programs with pkg-config</h1>

<p>
Running <code>make install</code> will install package configuration files
for the pkg-config utility.
</p>

<p>
When compiling your OpenGL application you can use pkg-config to determine
the proper compiler and linker flags.
</p>

<p>
For example, compiling and linking a GLUT application can be done with:
</p>
<pre>
   gcc `pkg-config --cflags --libs glut` mydemo.c -o mydemo
</pre>

<br>

</div>
</body>
</html>
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
Python Mako module is required. Version 0.7.3 or later should work.
d61 3
d76 1
a76 2
<li><a href="http://dri.freedesktop.org/libdrm/">libDRM</a>
version 2.4.33 or later
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d42 1
a42 1
Python Mako module is required. Version 0.3.4 or later should work.
a59 3
</li>
<br>
<li>For building on Windows, Microsoft Visual Studio 2013 or later is required.
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@d76 2
a77 1
<li><a href="http://dri.freedesktop.org/libdrm/">libDRM</a> latest version
@


1.1.1.4
log
@Import Mesa 17.1.6
@
text
@d27 1
a27 1
<li><a href="#android">Building with AOSP (Android)</a>
a35 5

<p>
Build system.
</p>

d37 2
a38 6
<li>Autoconf is required when building on *nix platforms.
<li><a href="http://www.scons.org/">SCons</a> is required for building on
Windows and optional for Linux (it's an alternative to autoconf/automake.)
</li>
<li>Android Build system when building as native Android component. Autoconf
is used when when building ARC.
a39 17
</ul>


<p>
The following compilers are known to work, if you know of others or you're
willing to maintain support for other compiler get in touch.
</p>

<ul>
<li>GCC 4.2.0 or later (some parts of Mesa may require later versions)
<li>clang - exact minimum requirement is currently unknown.
<li>Microsoft Visual Studio 2013 Update 4 or later is required, for building on Windows.
</ul>


<p>
Third party/extra tools.
a40 10
<strong>Note</strong>: These should not be required, when building from a release tarball. If
you think you've spotted a bug let developers know by filing a
<a href="bugs.html">bug report</a>.
</p>


<ul>
<li><a href="https://www.python.org/">Python</a> - Python is required.
Version 2.6.4 or later should work.
</li>
d44 12
a55 4
<li>lex / yacc - for building the Mesa IR and GLSL compiler.
<div>
On Linux systems, flex and bison versions 2.5.35 and 2.4.1, respectively,
(or later) should work.
d60 4
a63 1
</div>
a64 1
<p><strong>Note</strong>: Some versions can be buggy (eg. flex 2.6.2) so do try others if things fail.</p>
d67 1
a67 1
<h3 id="prereq-dri">1.2 Requirements</h3>
d70 1
a70 3
The requirements depends on the features selected at configure stage.
Check/install the respective -devel package as prompted by the configure error
message.
d73 7
d81 2
a82 2
Here are some common ways to retrieve most/all of the dependencies based on
the packaging tool used by your distro.
a83 1

d85 3
a87 5
  zypper source-install --build-deps-only Mesa # openSUSE/SLED/SLES
  yum-builddep mesa # yum Fedora, OpenSuse(?)
  dnf builddep mesa # dnf Fedora
  apt-get build-dep mesa # Debian and derivatives
  ... # others
d91 1
a141 3

Additional information is available in <a href="README.WIN32">README.WIN32</a>.

d146 1
a146 1
<h1 id="android">4. Building with AOSP (Android)</h1>
d149 1
a149 2
Currently one can build Mesa for Android as part of the AOSP project, yet
your experience might vary.
d152 5
a156 5
<p>
In order to achieve that one should update their local manifest to point to the
upstream repo, set the appropriate BOARD_GPU_DRIVERS and build the
libGLES_mesa library.
</p>
a157 4
<p>
FINISHME: Improve on the instructions add references to Rob H repos/Jenkins,
Android-x86 and/or other resources.
</p>
@


