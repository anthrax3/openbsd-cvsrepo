head	1.1;
branch	1.1.1;
access;
symbols
	mesa-17_1_6:1.1.1.4
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.11.22.02.41.39;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.41.39;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.17.06;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.31.18;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.08.14.09.35.57;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright © 2008 Jérôme Glisse
 * Copyright © 2011 Marek Olšák <maraeo@@gmail.com>
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, AUTHORS
 * AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 */
/*
 * Authors:
 *      Jérôme Glisse <glisse@@freedesktop.org>
 *      Marek Olšák <maraeo@@gmail.com>
 */
#ifndef RADEON_DRM_BO_H
#define RADEON_DRM_BO_H

#include "radeon_drm_winsys.h"
#include "pipebuffer/pb_bufmgr.h"
#include "os/os_thread.h"

struct radeon_bomgr;

struct radeon_bo_desc {
    struct pb_desc base;

    unsigned initial_domains;
    unsigned flags;
};

struct radeon_bo {
    struct pb_buffer base;

    struct radeon_bomgr *mgr;
    struct radeon_drm_winsys *rws;
    void *user_ptr; /* from buffer_from_ptr */

    void *ptr;
    pipe_mutex map_mutex;
    unsigned map_count;

    uint32_t handle;
    uint32_t flink_name;
    uint64_t va;
    enum radeon_bo_domain initial_domain;

    /* how many command streams is this bo referenced in? */
    int num_cs_references;

    /* how many command streams, which are being emitted in a separate
     * thread, is this bo referenced in? */
    int num_active_ioctls;
};

struct pb_manager *radeon_bomgr_create(struct radeon_drm_winsys *rws);
void radeon_bomgr_init_functions(struct radeon_drm_winsys *ws);

static inline
void radeon_bo_reference(struct radeon_bo **dst, struct radeon_bo *src)
{
    pb_reference((struct pb_buffer**)dst, (struct pb_buffer*)src);
}

void *radeon_bo_do_map(struct radeon_bo *bo);

#endif
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d39 9
a49 1
    struct pb_cache_entry cache_entry;
d51 1
a62 1
    bool use_reusable_pool;
d72 2
a73 3
void radeon_bo_destroy(struct pb_buffer *_buf);
bool radeon_bo_can_reclaim(struct pb_buffer *_buf);
void radeon_drm_bo_init_functions(struct radeon_drm_winsys *ws);
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@d36 1
a37 1
#include "pipebuffer/pb_slab.h"
d41 1
a41 18
    union {
        struct {
            struct pb_cache_entry cache_entry;

            void *ptr;
            pipe_mutex map_mutex;
            unsigned map_count;
            bool use_reusable_pool;
        } real;
        struct {
            struct pb_slab_entry entry;
            struct radeon_bo *real;

            unsigned num_fences;
            unsigned max_fences;
            struct radeon_bo **fences;
        } slab;
    } u;
d46 5
a50 1
    uint32_t handle; /* 0 for slab entries */
a52 1
    uint32_t hash;
d54 1
a63 6
struct radeon_slab {
    struct pb_slab base;
    struct radeon_bo *buffer;
    struct radeon_bo *entries;
};

a66 6

bool radeon_bo_can_reclaim_slab(void *priv, struct pb_slab_entry *entry);
struct pb_slab *radeon_bo_slab_alloc(void *priv, unsigned heap,
                                     unsigned entry_size,
                                     unsigned group_index);
void radeon_bo_slab_free(void *priv, struct pb_slab *slab);
@


1.1.1.4
log
@Import Mesa 17.1.6
@
text
@d46 1
a46 1
            mtx_t map_mutex;
@


