head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.2.0.2
	OPENBSD_6_1_BASE:1.1.1.2
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.11.22.02.41.56;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.41.56;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.17.24;	author jsg;	state Exp;
branches;
next	;
commitid	OwGfrJACrYJkCVJ4;


desc
@@


1.1
log
@Initial revision
@
text
@/**************************************************************************
 *
 * Copyright 2013 Advanced Micro Devices, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

/*
 * Authors:
 *      Christian KÃ¶nig <christian.koenig@@amd.com>
 *
 */

#include <assert.h>
#include <string.h>

#include <X11/Xlib.h>

#include "os/os_thread.h"
#include "util/u_memory.h"

#include "entrypoint.h"
#include "vid_dec.h"
#include "vid_enc.h"

pipe_static_mutex(omx_lock);
static Display *omx_display = NULL;
static struct vl_screen *omx_screen = NULL;
static unsigned omx_usecount = 0;

int omx_component_library_Setup(stLoaderComponentType **stComponents)
{
   OMX_ERRORTYPE r;

   if (stComponents == NULL)
      return 2;

   /* component 0 - video decoder */
   r = vid_dec_LoaderComponent(stComponents[0]);
   if (r != OMX_ErrorNone)
      return OMX_ErrorInsufficientResources;

   /* component 1 - video encoder */
   r = vid_enc_LoaderComponent(stComponents[1]);
   if (r != OMX_ErrorNone)
      return OMX_ErrorInsufficientResources;

   return 2;
}

struct vl_screen *omx_get_screen(void)
{
   pipe_mutex_lock(omx_lock);

   if (!omx_display) {
      omx_display = XOpenDisplay(NULL);
      if (!omx_display) {
         pipe_mutex_unlock(omx_lock);
         return NULL;
      }
   }

   if (!omx_screen) {
      omx_screen = vl_screen_create(omx_display, 0);
      if (!omx_screen) {
         pipe_mutex_unlock(omx_lock);
         return NULL;
      }
   }

   ++omx_usecount;

   pipe_mutex_unlock(omx_lock);
   return omx_screen;
}

void omx_put_screen(void)
{
   pipe_mutex_lock(omx_lock);
   if ((--omx_usecount) == 0) {
      vl_screen_destroy(omx_screen);
      XCloseDisplay(omx_display);
      omx_screen = NULL;
      omx_display = NULL;
   }
   pipe_mutex_unlock(omx_lock);
}

OMX_ERRORTYPE omx_workaround_Destructor(OMX_COMPONENTTYPE *comp)
{
   omx_base_component_PrivateType* priv = (omx_base_component_PrivateType*)comp->pComponentPrivate;

   priv->state = OMX_StateInvalid;
   tsem_up(priv->messageSem);

   /* wait for thread to exit */;
   pthread_join(priv->messageHandlerThread, NULL);

   return omx_base_component_Destructor(comp);
}
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@a35 1
#include <stdbool.h>
a40 1
#include "loader/loader.h"
a49 2
static const char *omx_render_node = NULL;
static int drm_fd;
a72 1
   static bool first_time = true;
d75 8
d84 4
a87 24
      if (first_time) {
         omx_render_node = debug_get_option("OMX_RENDER_NODE", NULL);
         first_time = false;
      }
      if (omx_render_node) {
         drm_fd = loader_open_device(omx_render_node);
         if (drm_fd < 0)
            goto error;

         omx_screen = vl_drm_screen_create(drm_fd);
         if (!omx_screen) {
            close(drm_fd);
            goto error;
         }
      } else {
         omx_display = XOpenDisplay(NULL);
         if (!omx_display)
            goto error;

         omx_screen = vl_dri2_screen_create(omx_display, 0);
         if (!omx_screen) {
            XCloseDisplay(omx_display);
            goto error;
         }
a94 4

error:
   pipe_mutex_unlock(omx_lock);
   return NULL;
d101 2
a102 1
      omx_screen->destroy(omx_screen);
d104 1
a104 5

      if (omx_render_node)
         close(drm_fd);
      else
         XCloseDisplay(omx_display);
d116 1
a116 1
   /* wait for thread to exit */
@

