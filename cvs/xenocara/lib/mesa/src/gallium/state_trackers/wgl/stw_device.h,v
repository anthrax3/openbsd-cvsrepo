head	1.2;
access;
symbols
	mesa-17_1_6:1.1.1.4
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.08.26.16.59.30;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2015.11.22.02.42.06;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.42.06;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.17.36;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.31.15;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.08.14.09.35.54;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/**************************************************************************
 *
 * Copyright 2008 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#ifndef STW_DEVICE_H_
#define STW_DEVICE_H_


#include "pipe/p_compiler.h"
#include "util/u_handle_table.h"
#include "stw_icd.h"
#include "stw_pixelformat.h"


#define STW_MAX_PIXELFORMATS   256


struct pipe_screen;
struct st_api;
struct st_manager;
struct stw_framebuffer;

struct stw_device
{
   const struct stw_winsys *stw_winsys;
   
   struct pipe_screen *screen;
   
   /* Cache some PIPE_CAP_* */
   unsigned max_2d_levels;
   unsigned max_2d_length;

   struct st_api *stapi;
   struct st_manager *smapi;

   LUID AdapterLuid;

   struct stw_pixelformat_info pixelformats[STW_MAX_PIXELFORMATS];
   unsigned pixelformat_count;
   unsigned pixelformat_extended_count;

   GLCALLBACKTABLE callbacks;

   CRITICAL_SECTION ctx_mutex;
   struct handle_table *ctx_table;
   
   /* TODO: use an atomic counter to track the number of locked
    * stw_framebuffer objects.  Assert that the counter is zero when
    * trying to lock this mutex.
    */
   CRITICAL_SECTION fb_mutex;
   struct stw_framebuffer *fb_head;
   
#ifdef DEBUG
   unsigned long memdbg_no;
#endif

   bool initialized;
};


extern struct stw_device *stw_dev;


static inline struct stw_context *
stw_lookup_context_locked( DHGLRC dhglrc )
{
   if (dhglrc == 0 || stw_dev == NULL)
      return NULL;
   return (struct stw_context *) handle_table_get(stw_dev->ctx_table, dhglrc);
}


static inline void
stw_lock_contexts(struct stw_device *stw_dev)
{
   EnterCriticalSection(&stw_dev->ctx_mutex);
}


static inline void
stw_unlock_contexts(struct stw_device *stw_dev)
{
   LeaveCriticalSection(&stw_dev->ctx_mutex);
}


static inline void
stw_lock_framebuffers(struct stw_device *stw_dev)
{
   EnterCriticalSection(&stw_dev->fb_mutex);
}


static inline void
stw_unlock_framebuffers(struct stw_device *stw_dev)
{
   LeaveCriticalSection(&stw_dev->fb_mutex);
}


#endif /* STW_DEVICE_H_ */
@


1.1
log
@Initial revision
@
text
@a32 1
#include "os/os_thread.h"
d67 1
a67 1
   pipe_mutex ctx_mutex;
d70 5
a74 1
   pipe_mutex fb_mutex;
d80 2
d94 28
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d33 1
d68 1
a68 1
   CRITICAL_SECTION ctx_mutex;
d71 1
a71 1
   CRITICAL_SECTION fb_mutex;
a88 28
}


static inline void
stw_lock_contexts(struct stw_device *stw_dev)
{
   EnterCriticalSection(&stw_dev->ctx_mutex);
}


static inline void
stw_unlock_contexts(struct stw_device *stw_dev)
{
   LeaveCriticalSection(&stw_dev->ctx_mutex);
}


static inline void
stw_lock_framebuffers(struct stw_device *stw_dev)
{
   EnterCriticalSection(&stw_dev->fb_mutex);
}


static inline void
stw_unlock_framebuffers(struct stw_device *stw_dev)
{
   LeaveCriticalSection(&stw_dev->fb_mutex);
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@a69 4
   /* TODO: use an atomic counter to track the number of locked
    * stw_framebuffer objects.  Assert that the counter is zero when
    * trying to lock this mutex.
    */
a75 2

   bool initialized;
@


1.1.1.4
log
@Import Mesa 17.1.6
@
text
@a80 4
   /** WGL_EXT_swap_control */
   int refresh_rate;
   int swap_interval;

@


