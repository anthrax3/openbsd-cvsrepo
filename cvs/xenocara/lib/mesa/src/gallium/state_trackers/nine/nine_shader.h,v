head	1.1;
branch	1.1.1;
access;
symbols
	mesa-17_1_6:1.1.1.4
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.11.22.02.42.10;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.42.10;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.17.39;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.31.06;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.08.14.09.35.45;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright 2011 Joakim Sindholt <opensource@@zhasha.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHOR(S) AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE. */

#ifndef _NINE_SHADER_H_
#define _NINE_SHADER_H_

#include "d3d9types.h"
#include "d3d9caps.h"
#include "nine_defines.h"
#include "pipe/p_state.h" /* PIPE_MAX_ATTRIBS */
#include "util/u_memory.h"

struct NineDevice9;

struct nine_lconstf /* NOTE: both pointers should be FREE'd by the user */
{
    struct nine_range *ranges; /* single MALLOC, but next-pointers valid */
    float *data;
};

struct nine_shader_info
{
    unsigned type; /* in, PIPE_SHADER_x */

    uint8_t version; /* (major << 4) | minor */

    const DWORD *byte_code; /* in, pointer to shader tokens */
    DWORD        byte_size; /* out, size of data at byte_code */

    void *cso; /* out, pipe cso for bind_vs,fs_state */

    uint16_t input_map[PIPE_MAX_ATTRIBS]; /* VS input -> NINE_DECLUSAGE_x */
    uint8_t num_inputs; /* there may be unused inputs (NINE_DECLUSAGE_NONE) */

    boolean position_t; /* out, true if VP writes pre-transformed position */
    boolean point_size; /* out, true if VP writes point size */

    uint32_t sampler_ps1xtypes; /* 2 bits per sampler */
    uint16_t sampler_mask; /* out, which samplers are being used */
    uint16_t sampler_mask_shadow; /* in, which samplers use depth compare */
    uint8_t rt_mask; /* out, which render targets are being written */

    uint8_t fog_enable;
    uint8_t fog_mode;
    uint16_t projected; /* ps 1.1 to 1.3 */

    unsigned const_i_base; /* in vec4 (16 byte) units */
    unsigned const_b_base; /* in vec4 (16 byte) units */
    unsigned const_used_size;

    unsigned const_float_slots;
    unsigned const_int_slots;
    unsigned const_bool_slots;

    struct nine_lconstf lconstf; /* out, NOTE: members to be free'd by user */
    uint8_t bumpenvmat_needed;
};

static inline void
nine_info_mark_const_f_used(struct nine_shader_info *info, int idx)
{
    if (info->const_float_slots < (idx + 1))
        info->const_float_slots = idx + 1;
}
static inline void
nine_info_mark_const_i_used(struct nine_shader_info *info, int idx)
{
    if (info->const_int_slots < (idx + 1))
        info->const_int_slots = idx + 1;
}
static inline void
nine_info_mark_const_b_used(struct nine_shader_info *info, int idx)
{
    if (info->const_bool_slots < (idx + 1))
        info->const_bool_slots = idx + 1;
}

HRESULT
nine_translate_shader(struct NineDevice9 *device, struct nine_shader_info *);


struct nine_shader_variant
{
    struct nine_shader_variant *next;
    void *cso;
    uint32_t key;
};

static inline void *
nine_shader_variant_get(struct nine_shader_variant *list, uint32_t key)
{
    while (list->key != key && list->next)
        list = list->next;
    if (list->key == key)
        return list->cso;
    return NULL;
}

static inline boolean
nine_shader_variant_add(struct nine_shader_variant *list,
                        uint32_t key, void *cso)
{
    while (list->next) {
        assert(list->key != key);
        list = list->next;
    }
    list->next = MALLOC_STRUCT(nine_shader_variant);
    if (!list->next)
        return FALSE;
    list->next->next = NULL;
    list->next->key = key;
    list->next->cso = cso;
    return TRUE;
}

static inline void
nine_shader_variants_free(struct nine_shader_variant *list)
{
    while (list->next) {
        struct nine_shader_variant *ptr = list->next;
        list->next = ptr->next;
        FREE(ptr);
    }
}

struct nine_shader_variant64
{
    struct nine_shader_variant64 *next;
    void *cso;
    uint64_t key;
};

static inline void *
nine_shader_variant_get64(struct nine_shader_variant64 *list, uint64_t key)
{
    while (list->key != key && list->next)
        list = list->next;
    if (list->key == key)
        return list->cso;
    return NULL;
}

static inline boolean
nine_shader_variant_add64(struct nine_shader_variant64 *list,
                          uint64_t key, void *cso)
{
    while (list->next) {
        assert(list->key != key);
        list = list->next;
    }
    list->next = MALLOC_STRUCT(nine_shader_variant64);
    if (!list->next)
        return FALSE;
    list->next->next = NULL;
    list->next->key = key;
    list->next->cso = cso;
    return TRUE;
}

static inline void
nine_shader_variants_free64(struct nine_shader_variant64 *list)
{
    while (list->next) {
        struct nine_shader_variant64 *ptr = list->next;
        list->next = ptr->next;
        FREE(ptr);
    }
}

#endif /* _NINE_SHADER_H_ */
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@a63 1
    uint8_t force_color_in_centroid;
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@a28 1
#include "nine_helpers.h"
a32 1
struct NineVertexDeclaration9;
a55 2
    float point_size_min;
    float point_size_max;
a76 14

    boolean swvp_on;

    boolean process_vertices;
    struct NineVertexDeclaration9 *vdecl_out;
    struct pipe_stream_output_info so;
};

struct nine_vs_output_info
{
    BYTE output_semantic;
    int output_semantic_index;
    int mask;
    int output_index;
d106 1
a106 1
    uint64_t key;
d110 1
a110 1
nine_shader_variant_get(struct nine_shader_variant *list, uint64_t key)
d121 1
a121 1
                          uint64_t key, void *cso)
d146 1
a146 1
struct nine_shader_variant_so
d148 1
a148 3
    struct nine_shader_variant_so *next;
    struct NineVertexDeclaration9 *vdecl;
    struct pipe_stream_output_info so;
d150 1
d154 1
a154 3
nine_shader_variant_so_get(struct nine_shader_variant_so *list,
                           struct NineVertexDeclaration9 *vdecl,
                           struct pipe_stream_output_info *so)
d156 1
a156 1
    while (list->vdecl != vdecl && list->next)
d158 1
a158 2
    if (list->vdecl == vdecl) {
        *so = list->so;
a159 1
    }
d164 3
a166 11
nine_shader_variant_so_add(struct nine_shader_variant_so *list,
                           struct NineVertexDeclaration9 *vdecl,
                           struct pipe_stream_output_info *so, void *cso)
{
    if (list->vdecl == NULL) { /* first shader */
        list->next = NULL;
        nine_bind(&list->vdecl, vdecl);
        list->so = *so;
        list->cso = cso;
        return TRUE;
    }
d168 1
a168 1
        assert(list->vdecl != vdecl);
d171 1
a171 1
    list->next = MALLOC_STRUCT(nine_shader_variant_so);
d175 1
a175 2
    nine_bind(&list->vdecl, vdecl);
    list->next->so = *so;
d181 1
a181 1
nine_shader_variants_so_free(struct nine_shader_variant_so *list)
d184 1
a184 1
        struct nine_shader_variant_so *ptr = list->next;
a185 1
        nine_bind(&ptr->vdecl, NULL);
a187 2
    if (list->vdecl)
        nine_bind(&list->vdecl, NULL);
@


1.1.1.4
log
@Import Mesa 17.1.6
@
text
@d117 1
a117 3
nine_translate_shader(struct NineDevice9 *device,
                      struct nine_shader_info *,
                      struct pipe_context *);
@


