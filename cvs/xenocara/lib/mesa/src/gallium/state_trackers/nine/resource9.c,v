head	1.2;
access;
symbols
	mesa-17_1_6:1.1.1.4
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.08.26.16.59.30;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2015.11.22.02.42.08;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.42.08;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.17.37;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.31.13;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.08.14.09.35.51;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/*
 * Copyright 2011 Joakim Sindholt <opensource@@zhasha.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHOR(S) AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE. */

#include "resource9.h"
#include "device9.h"
#include "nine_helpers.h"
#include "nine_defines.h"

#include "util/u_inlines.h"
#include "util/u_resource.h"

#include "pipe/p_screen.h"

#define DBG_CHANNEL DBG_RESOURCE

HRESULT
NineResource9_ctor( struct NineResource9 *This,
                    struct NineUnknownParams *pParams,
                    struct pipe_resource *initResource,
                    BOOL Allocate,
                    D3DRESOURCETYPE Type,
                    D3DPOOL Pool,
                    DWORD Usage)
{
    struct pipe_screen *screen;
    HRESULT hr;

    DBG("This=%p pParams=%p initResource=%p Allocate=%d "
        "Type=%d Pool=%d Usage=%d\n",
        This, pParams, initResource, (int) Allocate,
        Type, Pool, Usage);

    hr = NineUnknown_ctor(&This->base, pParams);
    if (FAILED(hr))
        return hr;

    This->info.screen = screen = This->base.device->screen;
    if (initResource)
        pipe_resource_reference(&This->resource, initResource);

    if (Allocate) {
        assert(!initResource);

        /* On Windows it is possible allocation fails when
         * IDirect3DDevice9::GetAvailableTextureMem() still reports
         * enough free space.
         *
         * Some games allocate surfaces
         * in a loop until they receive D3DERR_OUTOFVIDEOMEMORY to measure
         * the available texture memory size.
         *
         * We are not using the drivers VRAM statistics because:
         *  * This would add overhead to each resource allocation.
         *  * Freeing memory is lazy and takes some time, but applications
         *    expects the memory counter to change immediately after allocating
         *    or freeing memory.
         *
         * Vertexbuffers and indexbuffers are not accounted !
         */
        if (This->info.target != PIPE_BUFFER) {
            This->size = util_resource_size(&This->info);

            This->base.device->available_texture_mem -= This->size;
            if (This->base.device->available_texture_mem <=
                    This->base.device->available_texture_limit) {
                return D3DERR_OUTOFVIDEOMEMORY;
            }
        }

        DBG("(%p) Creating pipe_resource.\n", This);
        This->resource = screen->resource_create(screen, &This->info);
        if (!This->resource)
            return D3DERR_OUTOFVIDEOMEMORY;
    }

    This->type = Type;
    This->pool = Pool;
    This->usage = Usage;
    This->priority = 0;

    return D3D_OK;
}

void
NineResource9_dtor( struct NineResource9 *This )
{
    DBG("This=%p\n", This);

    /* NOTE: We do have to use refcounting, the driver might
     * still hold a reference. */
    pipe_resource_reference(&This->resource, NULL);

    /* NOTE: size is 0, unless something has actually been allocated */
    if (This->base.device)
        This->base.device->available_texture_mem += This->size;

    NineUnknown_dtor(&This->base);
}

struct pipe_resource *
NineResource9_GetResource( struct NineResource9 *This )
{
    return This->resource;
}

D3DPOOL
NineResource9_GetPool( struct NineResource9 *This )
{
    return This->pool;
}

DWORD NINE_WINAPI
NineResource9_SetPriority( struct NineResource9 *This,
                           DWORD PriorityNew )
{
    DWORD prev;
    DBG("This=%p, PriorityNew=%d\n", This, PriorityNew);

    if (This->pool != D3DPOOL_MANAGED || This->type == D3DRTYPE_SURFACE)
        return 0;

    prev = This->priority;
    This->priority = PriorityNew;
    return prev;
}

DWORD NINE_WINAPI
NineResource9_GetPriority( struct NineResource9 *This )
{
    if (This->pool != D3DPOOL_MANAGED || This->type == D3DRTYPE_SURFACE)
        return 0;

    return This->priority;
}

/* NOTE: Don't forget to adjust locked vtable if you change this ! */
void NINE_WINAPI
NineResource9_PreLoad( struct NineResource9 *This )
{
    if (This->pool != D3DPOOL_MANAGED)
        return;
    /* We don't treat managed vertex or index buffers different from
     * default ones (are managed vertex buffers even allowed ?), and
     * the PreLoad for textures is overridden by superclass.
     */
}

D3DRESOURCETYPE NINE_WINAPI
NineResource9_GetType( struct NineResource9 *This )
{
    return This->type;
}
@


1.1
log
@Initial revision
@
text
@a27 3
#include "pipe/p_screen.h"

#include "util/u_hash_table.h"
d29 1
d31 1
a31 1
#include "nine_pdata.h"
a34 1

d62 27
a99 4
    This->pdata = util_hash_table_create(ht_guid_hash, ht_guid_compare);
    if (!This->pdata)
        return E_OUTOFMEMORY;

d106 1
a106 4
    if (This->pdata) {
        util_hash_table_foreach(This->pdata, ht_guid_delete, NULL);
        util_hash_table_destroy(This->pdata);
    }
d112 4
d131 1
a131 98
HRESULT WINAPI
NineResource9_SetPrivateData( struct NineResource9 *This,
                              REFGUID refguid,
                              const void *pData,
                              DWORD SizeOfData,
                              DWORD Flags )
{
    enum pipe_error err;
    struct pheader *header;
    const void *user_data = pData;

    DBG("This=%p refguid=%p pData=%p SizeOfData=%u Flags=%x\n",
        This, refguid, pData, SizeOfData, Flags);

    if (Flags & D3DSPD_IUNKNOWN)
        user_assert(SizeOfData == sizeof(IUnknown *), D3DERR_INVALIDCALL);

    /* data consists of a header and the actual data. avoiding 2 mallocs */
    header = CALLOC_VARIANT_LENGTH_STRUCT(pheader, SizeOfData-1);
    if (!header) { return E_OUTOFMEMORY; }
    header->unknown = (Flags & D3DSPD_IUNKNOWN) ? TRUE : FALSE;

    /* if the refguid already exists, delete it */
    NineResource9_FreePrivateData(This, refguid);

    /* IUnknown special case */
    if (header->unknown) {
        /* here the pointer doesn't point to the data we want, so point at the
         * pointer making what we eventually copy is the pointer itself */
        user_data = &pData;
    }

    header->size = SizeOfData;
    memcpy(header->data, user_data, header->size);

    err = util_hash_table_set(This->pdata, refguid, header);
    if (err == PIPE_OK) {
        if (header->unknown) { IUnknown_AddRef(*(IUnknown **)header->data); }
        return D3D_OK;
    }

    FREE(header);
    if (err == PIPE_ERROR_OUT_OF_MEMORY) { return E_OUTOFMEMORY; }

    return D3DERR_DRIVERINTERNALERROR;
}

HRESULT WINAPI
NineResource9_GetPrivateData( struct NineResource9 *This,
                              REFGUID refguid,
                              void *pData,
                              DWORD *pSizeOfData )
{
    struct pheader *header;
    DWORD sizeofdata;

    DBG("This=%p refguid=%p pData=%p pSizeOfData=%p\n",
        This, refguid, pData, pSizeOfData);

    header = util_hash_table_get(This->pdata, refguid);
    if (!header) { return D3DERR_NOTFOUND; }

    user_assert(pSizeOfData, E_POINTER);
    sizeofdata = *pSizeOfData;
    *pSizeOfData = header->size;

    if (!pData) {
        return D3D_OK;
    }
    if (sizeofdata < header->size) {
        return D3DERR_MOREDATA;
    }

    if (header->unknown) { IUnknown_AddRef(*(IUnknown **)header->data); }
    memcpy(pData, header->data, header->size);

    return D3D_OK;
}

HRESULT WINAPI
NineResource9_FreePrivateData( struct NineResource9 *This,
                               REFGUID refguid )
{
    struct pheader *header;

    DBG("This=%p refguid=%p\n", This, refguid);

    header = util_hash_table_get(This->pdata, refguid);
    if (!header)
        return D3DERR_NOTFOUND;

    ht_guid_delete(NULL, header, NULL);
    util_hash_table_remove(This->pdata, refguid);

    return D3D_OK;
}

DWORD WINAPI
d146 1
a146 1
DWORD WINAPI
d156 1
a156 1
void WINAPI
d167 1
a167 1
D3DRESOURCETYPE WINAPI
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@a31 1
#include "util/u_resource.h"
d37 1
a64 27

        /* On Windows it is possible allocation fails when
         * IDirect3DDevice9::GetAvailableTextureMem() still reports
         * enough free space.
         *
         * Some games allocate surfaces
         * in a loop until they receive D3DERR_OUTOFVIDEOMEMORY to measure
         * the available texture memory size.
         *
         * We are not using the drivers VRAM statistics because:
         *  * This would add overhead to each resource allocation.
         *  * Freeing memory is lazy and takes some time, but applications
         *    expects the memory counter to change immediately after allocating
         *    or freeing memory.
         *
         * Vertexbuffers and indexbuffers are not accounted !
         */
        if (This->info.target != PIPE_BUFFER) {
            This->size = util_resource_size(&This->info);

            This->base.device->available_texture_mem -= This->size;
            if (This->base.device->available_texture_mem <=
                    This->base.device->available_texture_limit) {
                return D3DERR_OUTOFVIDEOMEMORY;
            }
        }

a94 4
    /* NOTE: size is 0, unless something has actually been allocated */
    if (This->base.device)
        This->base.device->available_texture_mem += This->size;

d110 1
a110 1
HRESULT NINE_WINAPI
a119 1
    char guid_str[64];
d121 2
a122 2
    DBG("This=%p GUID=%s pData=%p SizeOfData=%u Flags=%x\n",
        This, GUID_sprintf(guid_str, refguid), pData, SizeOfData, Flags);
a143 1
    memcpy(&header->guid, refguid, sizeof(header->guid));
d145 1
a145 1
    err = util_hash_table_set(This->pdata, &header->guid, header);
d157 1
a157 1
HRESULT NINE_WINAPI
a164 1
    char guid_str[64];
d166 2
a167 2
    DBG("This=%p GUID=%s pData=%p pSizeOfData=%p\n",
        This, GUID_sprintf(guid_str, refguid), pData, pSizeOfData);
d189 1
a189 1
HRESULT NINE_WINAPI
a193 1
    char guid_str[64];
d195 1
a195 1
    DBG("This=%p GUID=%s\n", This, GUID_sprintf(guid_str, refguid));
d207 1
a207 1
DWORD NINE_WINAPI
d222 1
a222 1
DWORD NINE_WINAPI
d232 1
a232 1
void NINE_WINAPI
d243 1
a243 1
D3DRESOURCETYPE NINE_WINAPI
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@d28 3
d34 1
a34 1
#include "pipe/p_screen.h"
d103 4
d113 4
a116 1
    DBG("This=%p\n", This);
d139 101
@


1.1.1.4
log
@Import Mesa 17.1.6
@
text
@d82 1
a82 1
            p_atomic_add(&This->base.device->available_texture_mem, -This->size);
d114 1
a114 1
        p_atomic_add(&This->base.device->available_texture_mem, This->size);
@


