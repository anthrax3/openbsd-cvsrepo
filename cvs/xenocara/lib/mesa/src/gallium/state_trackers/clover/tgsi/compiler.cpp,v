head	1.2;
access;
symbols
	mesa-17_1_6:1.1.1.4
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.2
date	2017.08.26.16.59.29;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2015.11.22.02.41.59;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.41.59;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.17.27;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.30.58;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.08.14.09.35.36;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#include <sstream>

#include "tgsi/invocation.hpp"
#include "core/error.hpp"

#include "tgsi/tgsi_parse.h"
#include "tgsi/tgsi_text.h"
#include "util/u_memory.h"

using namespace clover;

namespace {
   void
   read_header(const std::string &header, module &m, std::string &r_log) {
      std::istringstream ls(header);
      std::string line;

      while (getline(ls, line)) {
         std::istringstream ts(line);
         std::string name, tok;
         module::size_t offset;
         std::vector<module::argument> args;

         if (!(ts >> name))
            continue;

         if (!(ts >> offset)) {
            r_log = "invalid kernel start address";
            throw build_error();
         }

         while (ts >> tok) {
            if (tok == "scalar")
               args.push_back({ module::argument::scalar, 4 });
            else if (tok == "global")
               args.push_back({ module::argument::global, 4 });
            else if (tok == "local")
               args.push_back({ module::argument::local, 4 });
            else if (tok == "constant")
               args.push_back({ module::argument::constant, 4 });
            else if (tok == "image2d_rd")
               args.push_back({ module::argument::image2d_rd, 4 });
            else if (tok == "image2d_wr")
               args.push_back({ module::argument::image2d_wr, 4 });
            else if (tok == "image3d_rd")
               args.push_back({ module::argument::image3d_rd, 4 });
            else if (tok == "image3d_wr")
               args.push_back({ module::argument::image3d_wr, 4 });
            else if (tok == "sampler")
               args.push_back({ module::argument::sampler, 0 });
            else {
               r_log = "invalid kernel argument";
               throw build_error();
            }
         }

         m.syms.push_back({ name, 0, offset, args });
      }
   }

   void
   read_body(const char *source, module &m, std::string &r_log) {
      tgsi_token prog[1024];

      if (!tgsi_text_translate(source, prog, ARRAY_SIZE(prog))) {
         r_log = "translate failed";
         throw build_error();
      }

      unsigned sz = tgsi_num_tokens(prog) * sizeof(tgsi_token);
      std::vector<char> data( (char *)prog, (char *)prog + sz );
      m.secs.push_back({ 0, module::section::text, sz, data });
   }
}

module
clover::tgsi::compile_program(const std::string &source, std::string &r_log) {
   const size_t body_pos = source.find("COMP\n");
   if (body_pos == std::string::npos) {
      r_log = "invalid source";
      throw build_error();
   }

   const char *body = &source[body_pos];
   module m;

   read_header({ source.begin(), source.begin() + body_pos }, m, r_log);
   read_body(body, m, r_log);

   return m;
}

module
clover::tgsi::link_program(const std::vector<module> &modules)
{
   assert(modules.size() == 1 && "Not implemented");
   return modules[0];
}
@


1.1
log
@Initial revision
@
text
@d25 2
a26 1
#include "core/compiler.hpp"
d51 1
a51 1
            throw compile_error();
d75 1
a75 1
               throw compile_error();
d87 1
a87 1
      if (!tgsi_text_translate(source, prog, Elements(prog))) {
d89 1
a89 1
         throw compile_error();
d99 1
a99 1
clover::compile_program_tgsi(const std::string &source, std::string &r_log) {
d101 5
d113 7
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@a99 5
   if (body_pos == std::string::npos) {
      r_log = "invalid source";
      throw compile_error();
   }

@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@d25 1
a25 2
#include "tgsi/invocation.hpp"
#include "core/error.hpp"
d50 1
a50 1
            throw build_error();
d74 1
a74 1
               throw build_error();
d86 1
a86 1
      if (!tgsi_text_translate(source, prog, ARRAY_SIZE(prog))) {
d88 1
a88 1
         throw build_error();
d98 1
a98 1
clover::tgsi::compile_program(const std::string &source, std::string &r_log) {
d102 1
a102 1
      throw build_error();
a111 7
}

module
clover::tgsi::link_program(const std::vector<module> &modules)
{
   assert(modules.size() == 1 && "Not implemented");
   return modules[0];
@


1.1.1.4
log
@Import Mesa 17.1.6
@
text
@d94 1
a94 1
      m.secs.push_back({ 0, module::section::text_executable, sz, data });
@


