head	1.1;
branch	1.1.1;
access;
symbols
	mesa-17_1_6:1.1.1.3
	OPENBSD_6_1:1.1.1.2.0.2
	OPENBSD_6_1_BASE:1.1.1.2
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.1.1.1.0.6
	OPENBSD_6_0_BASE:1.1.1.1
	mesa-11_2_2:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2015.11.22.02.42.01;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.42.01;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.12.11.08.30.58;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	uuv5VTS15jglEDZU;

1.1.1.3
date	2017.08.14.09.35.36;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.1
log
@Initial revision
@
text
@//
// Copyright 2012 Francisco Jerez
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

#include "core/program.hpp"

using namespace clover;

program::program(clover::context &ctx, const std::string &source) :
   has_source(true), context(ctx), _source(source), _kernel_ref_counter(0) {
}

program::program(clover::context &ctx,
                 const ref_vector<device> &devs,
                 const std::vector<module> &binaries) :
   has_source(false), context(ctx),
   _devices(devs), _kernel_ref_counter(0) {
   for_each([&](device &dev, const module &bin) {
         _binaries.insert({ &dev, bin });
      },
      devs, binaries);
}

void
program::build(const ref_vector<device> &devs, const char *opts,
               const header_map &headers) {
   if (has_source) {
      _devices = devs;

      for (auto &dev : devs) {
         _binaries.erase(&dev);
         _logs.erase(&dev);
         _opts.erase(&dev);

         _opts.insert({ &dev, opts });

         std::string log;

         try {
            auto module = (dev.ir_format() == PIPE_SHADER_IR_TGSI ?
                           compile_program_tgsi(_source, log) :
                           compile_program_llvm(_source, headers,
                                                dev.ir_format(),
                                                dev.ir_target(), build_opts(dev),
                                                log));
            _binaries.insert({ &dev, module });
            _logs.insert({ &dev, log });
         } catch (const error &) {
            _logs.insert({ &dev, log });
            throw;
         }
      }
   }
}

const std::string &
program::source() const {
   return _source;
}

program::device_range
program::devices() const {
   return map(evals(), _devices);
}

const module &
program::binary(const device &dev) const {
   return _binaries.find(&dev)->second;
}

cl_build_status
program::build_status(const device &dev) const {
   if (_binaries.count(&dev))
      return CL_BUILD_SUCCESS;
   else if (_logs.count(&dev))
      return CL_BUILD_ERROR;
   else
      return CL_BUILD_NONE;
}

std::string
program::build_opts(const device &dev) const {
   return _opts.count(&dev) ? _opts.find(&dev)->second : "";
}

std::string
program::build_log(const device &dev) const {
   return _logs.count(&dev) ? _logs.find(&dev)->second : "";
}

const std::vector<module::symbol> &
program::symbols() const {
   if (_binaries.empty())
      throw error(CL_INVALID_PROGRAM_EXECUTABLE);

   return _binaries.begin()->second.syms;
}

unsigned
program::kernel_ref_count() const {
   return _kernel_ref_counter.ref_count();
}
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 13.0.2
@
text
@a23 2
#include "llvm/invocation.hpp"
#include "tgsi/invocation.hpp"
d37 1
a37 1
         _builds[&dev] = { bin };
d43 2
a44 2
program::compile(const ref_vector<device> &devs, const std::string &opts,
                 const header_map &headers) {
d49 6
d58 10
a67 7
            const module m = (dev.ir_format() == PIPE_SHADER_IR_TGSI ?
                              tgsi::compile_program(_source, log) :
                              llvm::compile_program(_source, headers,
                                                    dev.ir_target(), opts, log));
            _builds[&dev] = { m, opts, log };
         } catch (...) {
            _builds[&dev] = { module(), opts, log };
a73 24
void
program::link(const ref_vector<device> &devs, const std::string &opts,
              const ref_vector<program> &progs) {
   _devices = devs;

   for (auto &dev : devs) {
      const std::vector<module> ms = map([&](const program &prog) {
         return prog.build(dev).binary;
         }, progs);
      std::string log = _builds[&dev].log;

      try {
         const module m = (dev.ir_format() == PIPE_SHADER_IR_TGSI ?
                           tgsi::link_program(ms) :
                           llvm::link_program(ms, dev.ir_format(),
                                              dev.ir_target(), opts, log));
         _builds[&dev] = { m, opts, log };
      } catch (...) {
         _builds[&dev] = { module(), opts, log };
         throw;
      }
   }
}

d84 5
d90 2
a91 2
program::build::status() const {
   if (!binary.secs.empty())
d93 1
a93 1
   else if (log.size())
d99 8
a106 4
const struct program::build &
program::build(const device &dev) const {
   static const struct build null;
   return _builds.count(&dev) ? _builds.find(&dev)->second : null;
d111 1
a111 1
   if (_builds.empty())
d114 1
a114 1
   return _builds.begin()->second.binary.syms;
@


1.1.1.3
log
@Import Mesa 17.1.6
@
text
@a110 12
cl_program_binary_type
program::build::binary_type() const {
   if (any_of(type_equals(module::section::text_intermediate), binary.secs))
      return CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT;
   else if (any_of(type_equals(module::section::text_library), binary.secs))
      return CL_PROGRAM_BINARY_TYPE_LIBRARY;
   else if (any_of(type_equals(module::section::text_executable), binary.secs))
      return CL_PROGRAM_BINARY_TYPE_EXECUTABLE;
   else
      return CL_PROGRAM_BINARY_TYPE_NONE;
}

@


