head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.11.22.02.45.39;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.45.39;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.21.29;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.30.46;	author jsg;	state Exp;
branches;
next	;
commitid	uuv5VTS15jglEDZU;


desc
@@


1.1
log
@Initial revision
@
text
@
#include "pipe/p_compiler.h"
#include "pipe/p_context.h"
#include "pipe/p_shader_tokens.h"
#include "pipe/p_state.h"
#include "tgsi/tgsi_text.h"
#include "util/u_debug.h"
#include "util/u_memory.h"
#include "state_tracker/graw.h"


/* Helper functions.  These are the same for all graw implementations.
 */
PUBLIC void *
graw_parse_geometry_shader(struct pipe_context *pipe,
                           const char *text)
{
   struct tgsi_token tokens[1024];
   struct pipe_shader_state state;

   if (!tgsi_text_translate(text, tokens, Elements(tokens)))
      return NULL;

   memset(&state, 0, sizeof state);
   state.tokens = tokens;
   return pipe->create_gs_state(pipe, &state);
}

PUBLIC void *
graw_parse_vertex_shader(struct pipe_context *pipe,
                         const char *text)
{
   struct tgsi_token tokens[1024];
   struct pipe_shader_state state;

   if (!tgsi_text_translate(text, tokens, Elements(tokens)))
      return NULL;

   memset(&state, 0, sizeof state);
   state.tokens = tokens;
   return pipe->create_vs_state(pipe, &state);
}

PUBLIC void *
graw_parse_fragment_shader(struct pipe_context *pipe,
                           const char *text)
{
   struct tgsi_token tokens[1024];
   struct pipe_shader_state state;

   if (!tgsi_text_translate(text, tokens, Elements(tokens)))
      return NULL;

   memset(&state, 0, sizeof state);
   state.tokens = tokens;
   return pipe->create_fs_state(pipe, &state);
}

static char out_filename[256] = "";

PUBLIC boolean
graw_parse_args(int *argi,
                int argc,
                char *argv[])
{
   if (strcmp(argv[*argi], "-o") == 0) {
      if (*argi + 1 >= argc) {
         return FALSE;
      }

      strncpy(out_filename, argv[*argi + 1], sizeof(out_filename) - 1);
      out_filename[sizeof(out_filename) - 1] = '\0';
      *argi += 2;
      return TRUE;
   }

   return FALSE;
}

PUBLIC boolean
graw_save_surface_to_file(struct pipe_context *pipe,
                          struct pipe_surface *surface,
                          const char *filename)
{
   if (!filename || !*filename) {
      filename = out_filename;
      if (!filename || !*filename) {
         return FALSE;
      }
   }

   /* XXX: Make that working in release builds.
    */
   debug_dump_surface_bmp(pipe, filename, surface);
   return TRUE;
}
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@a7 1
#include "util/u_debug_image.h"
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@d22 1
a22 1
   if (!tgsi_text_translate(text, tokens, ARRAY_SIZE(tokens)))
d37 1
a37 1
   if (!tgsi_text_translate(text, tokens, ARRAY_SIZE(tokens)))
d52 1
a52 1
   if (!tgsi_text_translate(text, tokens, ARRAY_SIZE(tokens)))
@


