head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2015.11.22.02.45.41;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.45.41;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.21.30;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.30.43;	author jsg;	state Exp;
branches;
next	;
commitid	uuv5VTS15jglEDZU;


desc
@@


1.1
log
@Initial revision
@
text
@Import('*')

env = env.Clone()

env.Prepend(CPPPATH = [
    '#src/mapi',
    '#src/mesa',
    #Dir('../../../mapi'), # src/mapi build path for python-generated GL API files/headers
])

env.Prepend(LIBS = [
    st_osmesa,
    ws_null,
    glapi,
    mesa,
    gallium,
    trace,
    glsl,
    mesautil,
    softpipe
])

env.Append(CPPDEFINES = ['GALLIUM_TRACE', 'GALLIUM_SOFTPIPE'])

sources = ['target.c']

if env['llvm']:
    env.Append(CPPDEFINES = 'GALLIUM_LLVMPIPE')
    env.Prepend(LIBS = [llvmpipe])

if env['platform'] == 'windows':
    if env['gcc'] and env['machine'] != 'x86_64':
        sources += ['osmesa.mingw.def']
    else:
        sources += ['osmesa.def']

gallium_osmesa = env.SharedLibrary(
    target ='osmesa',
    source = sources,
    LIBS = env['LIBS'],
)

env.Alias('osmesa', gallium_osmesa)
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@a14 1
    compiler,
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@a19 1
    nir,
@


