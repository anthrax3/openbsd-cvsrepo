head	1.1;
branch	1.1.1;
access;
symbols
	mesa-17_1_6:1.1.1.4
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.11.22.02.42.35;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.42.35;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.18.06;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.31.37;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.08.14.09.36.16;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.1
log
@Initial revision
@
text
@/**************************************************************************
 *
 * Copyright 2007-2008 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


#ifndef CSO_CONTEXT_H
#define CSO_CONTEXT_H

#include "pipe/p_context.h"
#include "pipe/p_state.h"
#include "pipe/p_defines.h"


#ifdef	__cplusplus
extern "C" {
#endif

struct cso_context;
struct u_vbuf;

struct cso_context *cso_create_context( struct pipe_context *pipe );
void cso_destroy_context( struct cso_context *cso );


enum pipe_error cso_set_blend( struct cso_context *cso,
                               const struct pipe_blend_state *blend );
void cso_save_blend(struct cso_context *cso);
void cso_restore_blend(struct cso_context *cso);



enum pipe_error cso_set_depth_stencil_alpha( struct cso_context *cso,
                                             const struct pipe_depth_stencil_alpha_state *dsa );
void cso_save_depth_stencil_alpha(struct cso_context *cso);
void cso_restore_depth_stencil_alpha(struct cso_context *cso);



enum pipe_error cso_set_rasterizer( struct cso_context *cso,
                                    const struct pipe_rasterizer_state *rasterizer );
void cso_save_rasterizer(struct cso_context *cso);
void cso_restore_rasterizer(struct cso_context *cso);


enum pipe_error
cso_set_samplers(struct cso_context *cso,
                 unsigned shader_stage,
                 unsigned count,
                 const struct pipe_sampler_state **states);

void
cso_save_fragment_samplers(struct cso_context *cso);

void
cso_restore_fragment_samplers(struct cso_context *cso);

/* Alternate interface to support state trackers that like to modify
 * samplers one at a time:
 */
enum pipe_error
cso_single_sampler(struct cso_context *cso, unsigned shader_stage,
                   unsigned idx, const struct pipe_sampler_state *states);

void
cso_single_sampler_done(struct cso_context *cso, unsigned shader_stage);


enum pipe_error cso_set_vertex_elements(struct cso_context *ctx,
                                        unsigned count,
                                        const struct pipe_vertex_element *states);
void cso_save_vertex_elements(struct cso_context *ctx);
void cso_restore_vertex_elements(struct cso_context *ctx);


void cso_set_vertex_buffers(struct cso_context *ctx,
                            unsigned start_slot, unsigned count,
                            const struct pipe_vertex_buffer *buffers);

/* One vertex buffer slot is provided with the save/restore functionality.
 * cso_context chooses the slot, it can be non-zero. */
void cso_save_aux_vertex_buffer_slot(struct cso_context *ctx);
void cso_restore_aux_vertex_buffer_slot(struct cso_context *ctx);
unsigned cso_get_aux_vertex_buffer_slot(struct cso_context *ctx);


void cso_set_stream_outputs(struct cso_context *ctx,
                            unsigned num_targets,
                            struct pipe_stream_output_target **targets,
                            const unsigned *offsets);
void cso_save_stream_outputs(struct cso_context *ctx);
void cso_restore_stream_outputs(struct cso_context *ctx);


/*
 * We don't provide shader caching in CSO.  Most of the time the api provides
 * object semantics for shaders anyway, and the cases where it doesn't
 * (eg mesa's internally-generated texenv programs), it will be up to
 * the state tracker to implement their own specialized caching.
 */

void cso_set_fragment_shader_handle(struct cso_context *ctx, void *handle);
void cso_delete_fragment_shader(struct cso_context *ctx, void *handle );
void cso_save_fragment_shader(struct cso_context *cso);
void cso_restore_fragment_shader(struct cso_context *cso);


void cso_set_vertex_shader_handle(struct cso_context *ctx, void *handle);
void cso_delete_vertex_shader(struct cso_context *ctx, void *handle );
void cso_save_vertex_shader(struct cso_context *cso);
void cso_restore_vertex_shader(struct cso_context *cso);


void cso_set_geometry_shader_handle(struct cso_context *ctx, void *handle);
void cso_delete_geometry_shader(struct cso_context *ctx, void *handle);
void cso_save_geometry_shader(struct cso_context *cso);
void cso_restore_geometry_shader(struct cso_context *cso);


void cso_set_tessctrl_shader_handle(struct cso_context *ctx, void *handle);
void cso_delete_tessctrl_shader(struct cso_context *ctx, void *handle);
void cso_save_tessctrl_shader(struct cso_context *cso);
void cso_restore_tessctrl_shader(struct cso_context *cso);


void cso_set_tesseval_shader_handle(struct cso_context *ctx, void *handle);
void cso_delete_tesseval_shader(struct cso_context *ctx, void *handle);
void cso_save_tesseval_shader(struct cso_context *cso);
void cso_restore_tesseval_shader(struct cso_context *cso);


void cso_set_framebuffer(struct cso_context *cso,
                         const struct pipe_framebuffer_state *fb);
void cso_save_framebuffer(struct cso_context *cso);
void cso_restore_framebuffer(struct cso_context *cso);


void cso_set_viewport(struct cso_context *cso,
                      const struct pipe_viewport_state *vp);
void cso_save_viewport(struct cso_context *cso);
void cso_restore_viewport(struct cso_context *cso);


void cso_set_blend_color(struct cso_context *cso,
                         const struct pipe_blend_color *bc);

void cso_set_sample_mask(struct cso_context *cso, unsigned stencil_mask);
void cso_save_sample_mask(struct cso_context *ctx);
void cso_restore_sample_mask(struct cso_context *ctx);

void cso_set_min_samples(struct cso_context *cso, unsigned min_samples);
void cso_save_min_samples(struct cso_context *ctx);
void cso_restore_min_samples(struct cso_context *ctx);

void cso_set_stencil_ref(struct cso_context *cso,
                         const struct pipe_stencil_ref *sr);
void cso_save_stencil_ref(struct cso_context *cso);
void cso_restore_stencil_ref(struct cso_context *cso);

void cso_set_render_condition(struct cso_context *cso,
                              struct pipe_query *query,
                              boolean condition, uint mode);
void cso_save_render_condition(struct cso_context *cso);
void cso_restore_render_condition(struct cso_context *cso);


/* sampler view state */

void
cso_set_sampler_views(struct cso_context *cso,
                      unsigned shader_stage,
                      unsigned count,
                      struct pipe_sampler_view **views);

void
cso_save_fragment_sampler_views(struct cso_context *ctx);

void
cso_restore_fragment_sampler_views(struct cso_context *ctx);


/* constant buffers */

void cso_set_constant_buffer(struct cso_context *cso, unsigned shader_stage,
                             unsigned index, struct pipe_constant_buffer *cb);
void cso_set_constant_buffer_resource(struct cso_context *cso,
                                      unsigned shader_stage,
                                      unsigned index,
                                      struct pipe_resource *buffer);
void cso_save_constant_buffer_slot0(struct cso_context *cso,
                                    unsigned shader_stage);
void cso_restore_constant_buffer_slot0(struct cso_context *cso,
                                       unsigned shader_stage);


/* drawing */

void
cso_set_index_buffer(struct cso_context *cso,
                     const struct pipe_index_buffer *ib);

void
cso_draw_vbo(struct cso_context *cso,
             const struct pipe_draw_info *info);

void
cso_draw_arrays_instanced(struct cso_context *cso, uint mode,
                          uint start, uint count,
                          uint start_instance, uint instance_count);

/* helper drawing function */
void
cso_draw_arrays(struct cso_context *cso, uint mode, uint start, uint count);

#ifdef	__cplusplus
}
#endif

#endif
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d50 3
d57 2
d64 2
d74 5
d94 3
d104 2
d113 2
d126 2
d132 2
d138 2
d144 2
d150 2
a151 4


void cso_set_compute_shader_handle(struct cso_context *ctx, void *handle);
void cso_delete_compute_shader(struct cso_context *ctx, void *handle);
d156 2
d162 2
a163 2
void cso_set_viewport_dims(struct cso_context *ctx,
                           float width, float height, boolean invert);
d170 2
d174 2
d179 2
d185 2
a186 30


#define CSO_BIT_AUX_VERTEX_BUFFER_SLOT    0x1
#define CSO_BIT_BLEND                     0x2
#define CSO_BIT_DEPTH_STENCIL_ALPHA       0x4
#define CSO_BIT_FRAGMENT_SAMPLERS         0x8
#define CSO_BIT_FRAGMENT_SAMPLER_VIEWS   0x10
#define CSO_BIT_FRAGMENT_SHADER          0x20
#define CSO_BIT_FRAMEBUFFER              0x40
#define CSO_BIT_GEOMETRY_SHADER          0x80
#define CSO_BIT_MIN_SAMPLES             0x100
#define CSO_BIT_RASTERIZER              0x200
#define CSO_BIT_RENDER_CONDITION        0x400
#define CSO_BIT_SAMPLE_MASK             0x800
#define CSO_BIT_STENCIL_REF            0x1000
#define CSO_BIT_STREAM_OUTPUTS         0x2000
#define CSO_BIT_TESSCTRL_SHADER        0x4000
#define CSO_BIT_TESSEVAL_SHADER        0x8000
#define CSO_BIT_VERTEX_ELEMENTS       0x10000
#define CSO_BIT_VERTEX_SHADER         0x20000
#define CSO_BIT_VIEWPORT              0x40000

#define CSO_BITS_ALL_SHADERS (CSO_BIT_VERTEX_SHADER | \
                              CSO_BIT_FRAGMENT_SHADER | \
                              CSO_BIT_GEOMETRY_SHADER | \
                              CSO_BIT_TESSCTRL_SHADER | \
                              CSO_BIT_TESSEVAL_SHADER)

void cso_save_state(struct cso_context *cso, unsigned state_mask);
void cso_restore_state(struct cso_context *cso);
d197 6
d233 1
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@d63 1
a63 1
                 enum pipe_shader_type shader_stage,
d76 1
a76 2
cso_single_sampler_done(struct cso_context *cso,
                        enum pipe_shader_type shader_stage);
a172 2
#define CSO_BIT_PAUSE_QUERIES         0x80000
#define CSO_BIT_FRAGMENT_IMAGE0      0x100000
d188 1
a188 1
                      enum pipe_shader_type shader_stage,
a190 9


/* shader images */

void
cso_set_shader_images(struct cso_context *cso,
                      enum pipe_shader_type shader_stage,
                      unsigned start, unsigned count,
                      struct pipe_image_view *views);
@


1.1.1.4
log
@Import Mesa 17.1.6
@
text
@d44 1
a44 2
struct cso_context *cso_create_context(struct pipe_context *pipe,
                                       unsigned u_vbuf_flags);
d72 1
a72 1
cso_single_sampler(struct cso_context *cso, enum pipe_shader_type shader_stage,
d152 1
a152 2
                              boolean condition,
                              enum pipe_render_cond_flag mode);
d207 1
a207 2
void cso_set_constant_buffer(struct cso_context *cso,
                             enum pipe_shader_type shader_stage,
d210 1
a210 1
                                      enum pipe_shader_type shader_stage,
d214 1
a214 1
                                    enum pipe_shader_type shader_stage);
d216 1
a216 1
                                       enum pipe_shader_type shader_stage);
@


