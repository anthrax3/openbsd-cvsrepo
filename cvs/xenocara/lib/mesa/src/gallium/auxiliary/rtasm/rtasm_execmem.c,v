head	1.3;
access;
symbols
	mesa-17_1_6:1.1.1.2
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	mesa-13_0_6:1.1.1.1
	mesa-13_0_5:1.1.1.1
	mesa-13_0_3:1.1.1.1
	mesa-13_0_2:1.1.1.1
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	mesa-11_2_2:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2017.08.14.09.57.57;	author jsg;	state Exp;
branches;
next	1.2;
commitid	bC4bLqwWTo4kLw82;

1.2
date	2016.07.25.20.12.06;	author kettenis;	state Exp;
branches;
next	1.1;
commitid	uw6qYL7bimYWks8R;

1.1
date	2015.11.22.02.43.24;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.43.24;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2017.08.14.09.36.14;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.3
log
@Merge Mesa 17.1.6
@
text
@/**************************************************************************
 *
 * Copyright (C) 1999-2005  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


/**
 * \file exemem.c
 * Functions for allocating executable memory.
 *
 * \author Keith Whitwell
 */


#include "pipe/p_compiler.h"
#include "util/u_debug.h"
#include "os/os_thread.h"
#include "util/u_memory.h"

#include "rtasm_execmem.h"

#ifndef MAP_ANONYMOUS
#define MAP_ANONYMOUS MAP_ANON
#endif

#if defined(PIPE_OS_WINDOWS)
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN 1
#endif
#include <windows.h>
#endif

#if defined(PIPE_OS_UNIX)


/*
 * Allocate a large block of memory which can hold code then dole it out
 * in pieces by means of the generic memory manager code.
 */

#include <unistd.h>
#include <sys/mman.h>
#include "util/u_mm.h"

#define EXEC_HEAP_SIZE (10*1024*1024)

static mtx_t exec_mutex = _MTX_INITIALIZER_NP;

static struct mem_block *exec_heap = NULL;
static unsigned char *exec_mem = NULL;


#ifdef __OpenBSD__

static int
init_heap(void)
{
   return 0;
}

#else

static int
init_heap(void)
{
   if (!exec_heap)
      exec_heap = u_mmInit( 0, EXEC_HEAP_SIZE );
   
   if (!exec_mem)
      exec_mem = (unsigned char *) mmap(0, EXEC_HEAP_SIZE, 
					PROT_EXEC | PROT_READ | PROT_WRITE, 
					MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);

   return (exec_mem != MAP_FAILED);
}

#endif


void *
rtasm_exec_malloc(size_t size)
{
   struct mem_block *block = NULL;
   void *addr = NULL;

   mtx_lock(&exec_mutex);

   if (!init_heap())
      goto bail;

   if (exec_heap) {
      size = (size + 31) & ~31;  /* next multiple of 32 bytes */
      block = u_mmAllocMem( exec_heap, size, 5, 0 ); /* 5 -> 32-byte alignment */
   }

   if (block)
      addr = exec_mem + block->ofs;
   else 
      debug_printf("rtasm_exec_malloc failed\n");

bail:
   mtx_unlock(&exec_mutex);
   
   return addr;
}

 
void 
rtasm_exec_free(void *addr)
{
   mtx_lock(&exec_mutex);

   if (exec_heap) {
      struct mem_block *block = u_mmFindBlock(exec_heap, (unsigned char *)addr - exec_mem);
   
      if (block)
	 u_mmFreeMem(block);
   }

   mtx_unlock(&exec_mutex);
}


#elif defined(PIPE_OS_WINDOWS)


/*
 * Avoid Data Execution Prevention.
 */

void *
rtasm_exec_malloc(size_t size)
{
   return VirtualAlloc(NULL, size, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
}


void
rtasm_exec_free(void *addr)
{
   VirtualFree(addr, 0, MEM_RELEASE);
}


#else


/*
 * Just use regular memory.
 */

void *
rtasm_exec_malloc(size_t size)
{
   return MALLOC( size );
}

 
void 
rtasm_exec_free(void *addr)
{
   FREE(addr);
}


#endif
@


1.2
log
@Disable the code that allocates W|X memory.  There is fallback code that
gets used if allocating W|X memory fails, which is probably a bit slower.
However, that is much better than commit a W^X violation which currently
gets you killed.

ok jca@@
@
text
@d66 1
a66 1
pipe_static_mutex(exec_mutex);
d105 1
a105 1
   pipe_mutex_lock(exec_mutex);
d121 1
a121 1
   pipe_mutex_unlock(exec_mutex);
d130 1
a130 1
   pipe_mutex_lock(exec_mutex);
d139 1
a139 1
   pipe_mutex_unlock(exec_mutex);
@


1.1
log
@Initial revision
@
text
@d72 10
d95 2
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 17.1.6
@
text
@d66 1
a66 1
static mtx_t exec_mutex = _MTX_INITIALIZER_NP;
d93 1
a93 1
   mtx_lock(&exec_mutex);
d109 1
a109 1
   mtx_unlock(&exec_mutex);
d118 1
a118 1
   mtx_lock(&exec_mutex);
d127 1
a127 1
   mtx_unlock(&exec_mutex);
@

