head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.11.22.02.42.27;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.42.27;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.17.57;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.32.30;	author jsg;	state Exp;
branches;
next	;
commitid	uuv5VTS15jglEDZU;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * VMWARE AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include "u_indices.h"
#include "u_indices_priv.h"


static void translate_ubyte_ushort( const void *in,
                                    unsigned start,
                                    unsigned in_nr,
                                    unsigned out_nr,
                                    unsigned restart_index,
                                    void *out )
{
   const ubyte *in_ub = (const ubyte *)in;
   ushort *out_us = (ushort *)out;
   unsigned i;
   for (i = 0; i < out_nr; i++)
      out_us[i] = (ushort) in_ub[i+start];
}

static void translate_memcpy_ushort( const void *in,
                                     unsigned start,
                                     unsigned in_nr,
                                     unsigned out_nr,
                                     unsigned restart_index,
                                     void *out )
{
   memcpy(out, &((short *)in)[start], out_nr*sizeof(short));
}
                              
static void translate_memcpy_uint( const void *in,
                                   unsigned start,
                                   unsigned in_nr,
                                   unsigned out_nr,
                                   unsigned restart_index,
                                   void *out )
{
   memcpy(out, &((int *)in)[start], out_nr*sizeof(int));
}


static void generate_linear_ushort( unsigned start,
                                    unsigned nr,
                                    void *out )
{
   ushort *out_us = (ushort *)out;
   unsigned i;
   for (i = 0; i < nr; i++)
      out_us[i] = (ushort)(i + start);
}
                              
static void generate_linear_uint( unsigned start,
                                  unsigned nr,
                                  void *out )
{
   unsigned *out_ui = (unsigned *)out;
   unsigned i;
   for (i = 0; i < nr; i++)
      out_ui[i] = i + start;
}


/**
 * Given a primitive type and number of vertices, return the number of vertices
 * needed to draw the primitive with fill mode = PIPE_POLYGON_MODE_LINE using
 * separate lines (PIPE_PRIM_LINES).
 */
static unsigned nr_lines( unsigned prim,
                          unsigned nr )
{
   switch (prim) {
   case PIPE_PRIM_TRIANGLES:
      return (nr / 3) * 6; 
   case PIPE_PRIM_TRIANGLE_STRIP:
      return (nr - 2) * 6;
   case PIPE_PRIM_TRIANGLE_FAN:
      return (nr - 2)  * 6;
   case PIPE_PRIM_QUADS:
      return (nr / 4) * 8;
   case PIPE_PRIM_QUAD_STRIP:
      return (nr - 2) / 2 * 8;
   case PIPE_PRIM_POLYGON:
      return 2 * nr; /* a line (two verts) for each polygon edge */
   default:
      assert(0);
      return 0;
   }
}
                              


int u_unfilled_translator( unsigned prim,
                        unsigned in_index_size,
                        unsigned nr,
                        unsigned unfilled_mode,
                        unsigned *out_prim,
                        unsigned *out_index_size,
                        unsigned *out_nr,
                        u_translate_func *out_translate )
{
   unsigned in_idx;
   unsigned out_idx;

   u_unfilled_init();

   in_idx = in_size_idx(in_index_size);
   *out_index_size = (in_index_size == 4) ? 4 : 2;
   out_idx = out_size_idx(*out_index_size);

   if (unfilled_mode == PIPE_POLYGON_MODE_POINT) 
   {
      *out_prim = PIPE_PRIM_POINTS;
      *out_nr = nr;

      switch (in_index_size)
      {
      case 1:
         *out_translate = translate_ubyte_ushort;
         return U_TRANSLATE_NORMAL;
      case 2:
         *out_translate = translate_memcpy_uint;
         return U_TRANSLATE_MEMCPY;
      case 4:
         *out_translate = translate_memcpy_ushort;
         return U_TRANSLATE_MEMCPY;
      default:
         *out_translate = translate_memcpy_uint;
         *out_nr = 0;
         assert(0);
         return U_TRANSLATE_ERROR;
      }
   }
   else {
      assert(unfilled_mode == PIPE_POLYGON_MODE_LINE);
      *out_prim = PIPE_PRIM_LINES;
      *out_translate = translate_line[in_idx][out_idx][prim];
      *out_nr = nr_lines( prim, nr );
      return U_TRANSLATE_NORMAL;
   }
}


/**
 * Utility for converting unfilled polygons into points, lines, triangles.
 * Few drivers have direct support for OpenGL's glPolygonMode.
 * This function helps with converting triangles into points or lines
 * when the front and back fill modes are the same.  When there's
 * different front/back fill modes, that can be handled with the
 * 'draw' module.
 */
int u_unfilled_generator( unsigned prim,
                          unsigned start,
                          unsigned nr,
                          unsigned unfilled_mode,
                          unsigned *out_prim,
                          unsigned *out_index_size,
                          unsigned *out_nr,
                          u_generate_func *out_generate )
{
   unsigned out_idx;

   u_unfilled_init();

   *out_index_size = ((start + nr) > 0xfffe) ? 4 : 2;
   out_idx = out_size_idx(*out_index_size);

   if (unfilled_mode == PIPE_POLYGON_MODE_POINT) {

      if (*out_index_size == 4)
         *out_generate = generate_linear_uint;
      else
         *out_generate = generate_linear_ushort;

      *out_prim = PIPE_PRIM_POINTS;
      *out_nr = nr;
      return U_GENERATE_LINEAR;
   }
   else {
      assert(unfilled_mode == PIPE_POLYGON_MODE_LINE);
      *out_prim = PIPE_PRIM_LINES;
      *out_generate = generate_line[out_idx][prim];
      *out_nr = nr_lines( prim, nr );

      return U_GENERATE_REUSABLE;
   }
}

@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d114 8
a121 9
enum indices_mode
u_unfilled_translator(unsigned prim,
                      unsigned in_index_size,
                      unsigned nr,
                      unsigned unfilled_mode,
                      unsigned *out_prim,
                      unsigned *out_index_size,
                      unsigned *out_nr,
                      u_translate_func *out_translate)
d173 8
a180 9
enum indices_mode
u_unfilled_generator(unsigned prim,
                     unsigned start,
                     unsigned nr,
                     unsigned unfilled_mode,
                     unsigned *out_prim,
                     unsigned *out_index_size,
                     unsigned *out_nr,
                     u_generate_func *out_generate)
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@a24 6

/*
 * NOTE: This file is not compiled by itself.  It's actually #included
 * by the generated u_unfilled_gen.c file!
 */

a26 1
#include "util/u_prim.h"
d52 1
a52 1

d73 1
a73 1

d90 2
a91 2
static unsigned
nr_lines(enum pipe_prim_type prim, unsigned nr)
d95 1
a95 1
      return (nr / 3) * 6;
a105 8
   /* Note: these cases can't really be handled since drawing lines instead
    * of triangles would also require changing the GS.  But if there's no GS,
    * this should work.
    */
   case PIPE_PRIM_TRIANGLES_ADJACENCY:
      return (nr / 6) * 6;
   case PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY:
      return ((nr - 4) / 2) * 6;
d111 1
d115 1
a115 1
u_unfilled_translator(enum pipe_prim_type prim,
d119 1
a119 1
                      enum pipe_prim_type *out_prim,
a126 2
   assert(u_reduced_prim(prim) == PIPE_PRIM_TRIANGLES);

d133 2
a134 1
   if (unfilled_mode == PIPE_POLYGON_MODE_POINT) {
d138 2
a139 1
      switch (in_index_size) {
d175 1
a175 1
u_unfilled_generator(enum pipe_prim_type prim,
d179 1
a179 1
                     enum pipe_prim_type *out_prim,
a185 2
   assert(u_reduced_prim(prim) == PIPE_PRIM_TRIANGLES);

d192 1
d211 1
@


