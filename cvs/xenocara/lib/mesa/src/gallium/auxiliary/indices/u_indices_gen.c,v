head	1.2;
access;
symbols
	mesa-17_1_6:1.1.1.3
	OPENBSD_6_1:1.1.1.2.0.2
	OPENBSD_6_1_BASE:1.1.1.2
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.1.1.1.0.6
	OPENBSD_6_0_BASE:1.1.1.1
	mesa-11_2_2:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.08.26.16.59.22;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2015.11.22.02.42.27;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.42.27;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.12.11.08.32.30;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	uuv5VTS15jglEDZU;

1.1.1.3
date	2017.08.14.09.37.09;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/* File automatically generated by indices.py */

/*
 * Copyright 2009 VMware, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * VMWARE AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * @@file
 * Functions to translate and generate index lists
 */

#include "indices/u_indices.h"
#include "indices/u_indices_priv.h"
#include "pipe/p_compiler.h"
#include "util/u_debug.h"
#include "pipe/p_defines.h"
#include "util/u_memory.h"


static unsigned out_size_idx( unsigned index_size )
{
   switch (index_size) {
   case 4: return OUT_UINT;
   case 2: return OUT_USHORT;
   default: assert(0); return OUT_USHORT;
   }
}

static unsigned in_size_idx( unsigned index_size )
{
   switch (index_size) {
   case 4: return IN_UINT;
   case 2: return IN_USHORT;
   case 1: return IN_UBYTE;
   default: assert(0); return IN_UBYTE;
   }
}


static u_translate_func translate[IN_COUNT][OUT_COUNT][PV_COUNT][PV_COUNT][PR_COUNT][PRIM_COUNT];
static u_generate_func  generate[OUT_COUNT][PV_COUNT][PV_COUNT][PRIM_COUNT];



static void generate_points_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)(i);
   }
}
static void generate_lines_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)(i);
      (out+i)[1] = (ushort)(i+1);
   }
}
static void generate_linestrip_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(i+1);
   }
}
static void generate_lineloop_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(i+1);
   }
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(start);
}
static void generate_tris_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)(i);
      (out+i)[1] = (ushort)(i+1);
      (out+i)[2] = (ushort)(i+2);
   }
}
static void generate_tristrip_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(i+1+(i&1));
      (out+j)[2] = (ushort)(i+2-(i&1));
   }
}
static void generate_trifan_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(start);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
   }
}
static void generate_quads_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)(i+0);
      (out+j+0)[1] = (ushort)(i+1);
      (out+j+0)[2] = (ushort)(i+2);
      (out+j+3)[0] = (ushort)(i+0);
      (out+j+3)[1] = (ushort)(i+2);
      (out+j+3)[2] = (ushort)(i+3);
   }
}
static void generate_quadstrip_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)(i+0);
      (out+j+0)[1] = (ushort)(i+1);
      (out+j+0)[2] = (ushort)(i+3);
      (out+j+3)[0] = (ushort)(i+0);
      (out+j+3)[1] = (ushort)(i+3);
      (out+j+3)[2] = (ushort)(i+2);
   }
}
static void generate_polygon_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(start);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
   }
}
static void generate_linesadj_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)(i+0);
      (out+i)[1] = (ushort)(i+1);
      (out+i)[2] = (ushort)(i+2);
      (out+i)[3] = (ushort)(i+3);
  }
}
static void generate_linestripadj_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)(i+0);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
      (out+j)[3] = (ushort)(i+3);
  }
}
static void generate_trisadj_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)(i+0);
      (out+i)[1] = (ushort)(i+1);
      (out+i)[2] = (ushort)(i+2);
      (out+i)[3] = (ushort)(i+3);
      (out+i)[4] = (ushort)(i+4);
      (out+i)[5] = (ushort)(i+5);
  }
}
static void generate_tristripadj_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)(i+0);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
      (out+j)[3] = (ushort)(i+3);
      (out+j)[4] = (ushort)(i+4);
      (out+j)[5] = (ushort)(i+5);
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)(i+2);
      (out+j)[1] = (ushort)(i-2);
      (out+j)[2] = (ushort)(i+0);
      (out+j)[3] = (ushort)(i+3);
      (out+j)[4] = (ushort)(i+4);
      (out+j)[5] = (ushort)(i+6);
    }
  }
}
static void generate_points_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)(i);
   }
}
static void generate_lines_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)(i+1);
      (out+i)[1] = (ushort)(i);
   }
}
static void generate_linestrip_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)(i+1);
      (out+j)[1] = (ushort)(i);
   }
}
static void generate_lineloop_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)(i+1);
      (out+j)[1] = (ushort)(i);
   }
      (out+j)[0] = (ushort)(start);
      (out+j)[1] = (ushort)(i);
}
static void generate_tris_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)(i+1);
      (out+i)[1] = (ushort)(i+2);
      (out+i)[2] = (ushort)(i);
   }
}
static void generate_tristrip_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i+1+(i&1));
      (out+j)[1] = (ushort)(i+2-(i&1));
      (out+j)[2] = (ushort)(i);
   }
}
static void generate_trifan_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i+1);
      (out+j)[1] = (ushort)(i+2);
      (out+j)[2] = (ushort)(start);
   }
}
static void generate_quads_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)(i+1);
      (out+j+0)[1] = (ushort)(i+2);
      (out+j+0)[2] = (ushort)(i+0);
      (out+j+3)[0] = (ushort)(i+2);
      (out+j+3)[1] = (ushort)(i+3);
      (out+j+3)[2] = (ushort)(i+0);
   }
}
static void generate_quadstrip_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)(i+1);
      (out+j+0)[1] = (ushort)(i+3);
      (out+j+0)[2] = (ushort)(i+0);
      (out+j+3)[0] = (ushort)(i+3);
      (out+j+3)[1] = (ushort)(i+2);
      (out+j+3)[2] = (ushort)(i+0);
   }
}
static void generate_polygon_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i+1);
      (out+j)[1] = (ushort)(i+2);
      (out+j)[2] = (ushort)(start);
   }
}
static void generate_linesadj_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)(i+3);
      (out+i)[1] = (ushort)(i+2);
      (out+i)[2] = (ushort)(i+1);
      (out+i)[3] = (ushort)(i+0);
  }
}
static void generate_linestripadj_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)(i+3);
      (out+j)[1] = (ushort)(i+2);
      (out+j)[2] = (ushort)(i+1);
      (out+j)[3] = (ushort)(i+0);
  }
}
static void generate_trisadj_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)(i+4);
      (out+i)[1] = (ushort)(i+5);
      (out+i)[2] = (ushort)(i+0);
      (out+i)[3] = (ushort)(i+1);
      (out+i)[4] = (ushort)(i+2);
      (out+i)[5] = (ushort)(i+3);
  }
}
static void generate_tristripadj_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)(i+4);
      (out+j)[1] = (ushort)(i+5);
      (out+j)[2] = (ushort)(i+0);
      (out+j)[3] = (ushort)(i+1);
      (out+j)[4] = (ushort)(i+2);
      (out+j)[5] = (ushort)(i+3);
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)(i+4);
      (out+j)[1] = (ushort)(i+6);
      (out+j)[2] = (ushort)(i+2);
      (out+j)[3] = (ushort)(i-2);
      (out+j)[4] = (ushort)(i+0);
      (out+j)[5] = (ushort)(i+3);
    }
  }
}
static void generate_points_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)(i);
   }
}
static void generate_lines_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)(i+1);
      (out+i)[1] = (ushort)(i);
   }
}
static void generate_linestrip_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)(i+1);
      (out+j)[1] = (ushort)(i);
   }
}
static void generate_lineloop_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)(i+1);
      (out+j)[1] = (ushort)(i);
   }
      (out+j)[0] = (ushort)(start);
      (out+j)[1] = (ushort)(i);
}
static void generate_tris_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)(i+2);
      (out+i)[1] = (ushort)(i);
      (out+i)[2] = (ushort)(i+1);
   }
}
static void generate_tristrip_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i+2);
      (out+j)[1] = (ushort)(i+(i&1));
      (out+j)[2] = (ushort)(i+1-(i&1));
   }
}
static void generate_trifan_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i+2);
      (out+j)[1] = (ushort)(start);
      (out+j)[2] = (ushort)(i+1);
   }
}
static void generate_quads_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)(i+3);
      (out+j+0)[1] = (ushort)(i+0);
      (out+j+0)[2] = (ushort)(i+1);
      (out+j+3)[0] = (ushort)(i+3);
      (out+j+3)[1] = (ushort)(i+1);
      (out+j+3)[2] = (ushort)(i+2);
   }
}
static void generate_quadstrip_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)(i+3);
      (out+j+0)[1] = (ushort)(i+2);
      (out+j+0)[2] = (ushort)(i+0);
      (out+j+3)[0] = (ushort)(i+3);
      (out+j+3)[1] = (ushort)(i+0);
      (out+j+3)[2] = (ushort)(i+1);
   }
}
static void generate_polygon_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(start);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
   }
}
static void generate_linesadj_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)(i+3);
      (out+i)[1] = (ushort)(i+2);
      (out+i)[2] = (ushort)(i+1);
      (out+i)[3] = (ushort)(i+0);
  }
}
static void generate_linestripadj_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)(i+3);
      (out+j)[1] = (ushort)(i+2);
      (out+j)[2] = (ushort)(i+1);
      (out+j)[3] = (ushort)(i+0);
  }
}
static void generate_trisadj_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)(i+4);
      (out+i)[1] = (ushort)(i+5);
      (out+i)[2] = (ushort)(i+0);
      (out+i)[3] = (ushort)(i+1);
      (out+i)[4] = (ushort)(i+2);
      (out+i)[5] = (ushort)(i+3);
  }
}
static void generate_tristripadj_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)(i+4);
      (out+j)[1] = (ushort)(i+5);
      (out+j)[2] = (ushort)(i+0);
      (out+j)[3] = (ushort)(i+1);
      (out+j)[4] = (ushort)(i+2);
      (out+j)[5] = (ushort)(i+3);
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)(i+4);
      (out+j)[1] = (ushort)(i+6);
      (out+j)[2] = (ushort)(i+2);
      (out+j)[3] = (ushort)(i-2);
      (out+j)[4] = (ushort)(i+0);
      (out+j)[5] = (ushort)(i+3);
    }
  }
}
static void generate_points_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)(i);
   }
}
static void generate_lines_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)(i);
      (out+i)[1] = (ushort)(i+1);
   }
}
static void generate_linestrip_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(i+1);
   }
}
static void generate_lineloop_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(i+1);
   }
      (out+j)[0] = (ushort)(i);
      (out+j)[1] = (ushort)(start);
}
static void generate_tris_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)(i);
      (out+i)[1] = (ushort)(i+1);
      (out+i)[2] = (ushort)(i+2);
   }
}
static void generate_tristrip_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i+(i&1));
      (out+j)[1] = (ushort)(i+1-(i&1));
      (out+j)[2] = (ushort)(i+2);
   }
}
static void generate_trifan_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(start);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
   }
}
static void generate_quads_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)(i+0);
      (out+j+0)[1] = (ushort)(i+1);
      (out+j+0)[2] = (ushort)(i+3);
      (out+j+3)[0] = (ushort)(i+1);
      (out+j+3)[1] = (ushort)(i+2);
      (out+j+3)[2] = (ushort)(i+3);
   }
}
static void generate_quadstrip_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)(i+2);
      (out+j+0)[1] = (ushort)(i+0);
      (out+j+0)[2] = (ushort)(i+3);
      (out+j+3)[0] = (ushort)(i+0);
      (out+j+3)[1] = (ushort)(i+1);
      (out+j+3)[2] = (ushort)(i+3);
   }
}
static void generate_polygon_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)(i+1);
      (out+j)[1] = (ushort)(i+2);
      (out+j)[2] = (ushort)(start);
   }
}
static void generate_linesadj_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)(i+0);
      (out+i)[1] = (ushort)(i+1);
      (out+i)[2] = (ushort)(i+2);
      (out+i)[3] = (ushort)(i+3);
  }
}
static void generate_linestripadj_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)(i+0);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
      (out+j)[3] = (ushort)(i+3);
  }
}
static void generate_trisadj_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)(i+0);
      (out+i)[1] = (ushort)(i+1);
      (out+i)[2] = (ushort)(i+2);
      (out+i)[3] = (ushort)(i+3);
      (out+i)[4] = (ushort)(i+4);
      (out+i)[5] = (ushort)(i+5);
  }
}
static void generate_tristripadj_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)(i+0);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
      (out+j)[3] = (ushort)(i+3);
      (out+j)[4] = (ushort)(i+4);
      (out+j)[5] = (ushort)(i+5);
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)(i+2);
      (out+j)[1] = (ushort)(i-2);
      (out+j)[2] = (ushort)(i+0);
      (out+j)[3] = (ushort)(i+3);
      (out+j)[4] = (ushort)(i+4);
      (out+j)[5] = (ushort)(i+6);
    }
  }
}
static void generate_points_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)(i);
   }
}
static void generate_lines_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)(i);
      (out+i)[1] = (uint)(i+1);
   }
}
static void generate_linestrip_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1);
   }
}
static void generate_lineloop_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1);
   }
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(start);
}
static void generate_tris_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)(i);
      (out+i)[1] = (uint)(i+1);
      (out+i)[2] = (uint)(i+2);
   }
}
static void generate_tristrip_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1+(i&1));
      (out+j)[2] = (uint)(i+2-(i&1));
   }
}
static void generate_trifan_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)(start);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
   }
}
static void generate_quads_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)(i+0);
      (out+j+0)[1] = (uint)(i+1);
      (out+j+0)[2] = (uint)(i+2);
      (out+j+3)[0] = (uint)(i+0);
      (out+j+3)[1] = (uint)(i+2);
      (out+j+3)[2] = (uint)(i+3);
   }
}
static void generate_quadstrip_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)(i+0);
      (out+j+0)[1] = (uint)(i+1);
      (out+j+0)[2] = (uint)(i+3);
      (out+j+3)[0] = (uint)(i+0);
      (out+j+3)[1] = (uint)(i+3);
      (out+j+3)[2] = (uint)(i+2);
   }
}
static void generate_polygon_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)(start);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
   }
}
static void generate_linesadj_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)(i+0);
      (out+i)[1] = (uint)(i+1);
      (out+i)[2] = (uint)(i+2);
      (out+i)[3] = (uint)(i+3);
  }
}
static void generate_linestripadj_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)(i+0);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
      (out+j)[3] = (uint)(i+3);
  }
}
static void generate_trisadj_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)(i+0);
      (out+i)[1] = (uint)(i+1);
      (out+i)[2] = (uint)(i+2);
      (out+i)[3] = (uint)(i+3);
      (out+i)[4] = (uint)(i+4);
      (out+i)[5] = (uint)(i+5);
  }
}
static void generate_tristripadj_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)(i+0);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
      (out+j)[3] = (uint)(i+3);
      (out+j)[4] = (uint)(i+4);
      (out+j)[5] = (uint)(i+5);
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)(i+2);
      (out+j)[1] = (uint)(i-2);
      (out+j)[2] = (uint)(i+0);
      (out+j)[3] = (uint)(i+3);
      (out+j)[4] = (uint)(i+4);
      (out+j)[5] = (uint)(i+6);
    }
  }
}
static void generate_points_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)(i);
   }
}
static void generate_lines_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)(i+1);
      (out+i)[1] = (uint)(i);
   }
}
static void generate_linestrip_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)(i+1);
      (out+j)[1] = (uint)(i);
   }
}
static void generate_lineloop_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)(i+1);
      (out+j)[1] = (uint)(i);
   }
      (out+j)[0] = (uint)(start);
      (out+j)[1] = (uint)(i);
}
static void generate_tris_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)(i+1);
      (out+i)[1] = (uint)(i+2);
      (out+i)[2] = (uint)(i);
   }
}
static void generate_tristrip_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i+1+(i&1));
      (out+j)[1] = (uint)(i+2-(i&1));
      (out+j)[2] = (uint)(i);
   }
}
static void generate_trifan_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i+1);
      (out+j)[1] = (uint)(i+2);
      (out+j)[2] = (uint)(start);
   }
}
static void generate_quads_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)(i+1);
      (out+j+0)[1] = (uint)(i+2);
      (out+j+0)[2] = (uint)(i+0);
      (out+j+3)[0] = (uint)(i+2);
      (out+j+3)[1] = (uint)(i+3);
      (out+j+3)[2] = (uint)(i+0);
   }
}
static void generate_quadstrip_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)(i+1);
      (out+j+0)[1] = (uint)(i+3);
      (out+j+0)[2] = (uint)(i+0);
      (out+j+3)[0] = (uint)(i+3);
      (out+j+3)[1] = (uint)(i+2);
      (out+j+3)[2] = (uint)(i+0);
   }
}
static void generate_polygon_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i+1);
      (out+j)[1] = (uint)(i+2);
      (out+j)[2] = (uint)(start);
   }
}
static void generate_linesadj_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)(i+3);
      (out+i)[1] = (uint)(i+2);
      (out+i)[2] = (uint)(i+1);
      (out+i)[3] = (uint)(i+0);
  }
}
static void generate_linestripadj_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)(i+3);
      (out+j)[1] = (uint)(i+2);
      (out+j)[2] = (uint)(i+1);
      (out+j)[3] = (uint)(i+0);
  }
}
static void generate_trisadj_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)(i+4);
      (out+i)[1] = (uint)(i+5);
      (out+i)[2] = (uint)(i+0);
      (out+i)[3] = (uint)(i+1);
      (out+i)[4] = (uint)(i+2);
      (out+i)[5] = (uint)(i+3);
  }
}
static void generate_tristripadj_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)(i+4);
      (out+j)[1] = (uint)(i+5);
      (out+j)[2] = (uint)(i+0);
      (out+j)[3] = (uint)(i+1);
      (out+j)[4] = (uint)(i+2);
      (out+j)[5] = (uint)(i+3);
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)(i+4);
      (out+j)[1] = (uint)(i+6);
      (out+j)[2] = (uint)(i+2);
      (out+j)[3] = (uint)(i-2);
      (out+j)[4] = (uint)(i+0);
      (out+j)[5] = (uint)(i+3);
    }
  }
}
static void generate_points_uint_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)(i);
   }
}
static void generate_lines_uint_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)(i+1);
      (out+i)[1] = (uint)(i);
   }
}
static void generate_linestrip_uint_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)(i+1);
      (out+j)[1] = (uint)(i);
   }
}
static void generate_lineloop_uint_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)(i+1);
      (out+j)[1] = (uint)(i);
   }
      (out+j)[0] = (uint)(start);
      (out+j)[1] = (uint)(i);
}
static void generate_tris_uint_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)(i+2);
      (out+i)[1] = (uint)(i);
      (out+i)[2] = (uint)(i+1);
   }
}
static void generate_tristrip_uint_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i+2);
      (out+j)[1] = (uint)(i+(i&1));
      (out+j)[2] = (uint)(i+1-(i&1));
   }
}
static void generate_trifan_uint_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i+2);
      (out+j)[1] = (uint)(start);
      (out+j)[2] = (uint)(i+1);
   }
}
static void generate_quads_uint_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)(i+3);
      (out+j+0)[1] = (uint)(i+0);
      (out+j+0)[2] = (uint)(i+1);
      (out+j+3)[0] = (uint)(i+3);
      (out+j+3)[1] = (uint)(i+1);
      (out+j+3)[2] = (uint)(i+2);
   }
}
static void generate_quadstrip_uint_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)(i+3);
      (out+j+0)[1] = (uint)(i+2);
      (out+j+0)[2] = (uint)(i+0);
      (out+j+3)[0] = (uint)(i+3);
      (out+j+3)[1] = (uint)(i+0);
      (out+j+3)[2] = (uint)(i+1);
   }
}
static void generate_polygon_uint_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)(start);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
   }
}
static void generate_linesadj_uint_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)(i+3);
      (out+i)[1] = (uint)(i+2);
      (out+i)[2] = (uint)(i+1);
      (out+i)[3] = (uint)(i+0);
  }
}
static void generate_linestripadj_uint_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)(i+3);
      (out+j)[1] = (uint)(i+2);
      (out+j)[2] = (uint)(i+1);
      (out+j)[3] = (uint)(i+0);
  }
}
static void generate_trisadj_uint_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)(i+4);
      (out+i)[1] = (uint)(i+5);
      (out+i)[2] = (uint)(i+0);
      (out+i)[3] = (uint)(i+1);
      (out+i)[4] = (uint)(i+2);
      (out+i)[5] = (uint)(i+3);
  }
}
static void generate_tristripadj_uint_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)(i+4);
      (out+j)[1] = (uint)(i+5);
      (out+j)[2] = (uint)(i+0);
      (out+j)[3] = (uint)(i+1);
      (out+j)[4] = (uint)(i+2);
      (out+j)[5] = (uint)(i+3);
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)(i+4);
      (out+j)[1] = (uint)(i+6);
      (out+j)[2] = (uint)(i+2);
      (out+j)[3] = (uint)(i-2);
      (out+j)[4] = (uint)(i+0);
      (out+j)[5] = (uint)(i+3);
    }
  }
}
static void generate_points_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)(i);
   }
}
static void generate_lines_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)(i);
      (out+i)[1] = (uint)(i+1);
   }
}
static void generate_linestrip_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1);
   }
}
static void generate_lineloop_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1);
   }
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(start);
}
static void generate_tris_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)(i);
      (out+i)[1] = (uint)(i+1);
      (out+i)[2] = (uint)(i+2);
   }
}
static void generate_tristrip_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i+(i&1));
      (out+j)[1] = (uint)(i+1-(i&1));
      (out+j)[2] = (uint)(i+2);
   }
}
static void generate_trifan_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)(start);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
   }
}
static void generate_quads_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)(i+0);
      (out+j+0)[1] = (uint)(i+1);
      (out+j+0)[2] = (uint)(i+3);
      (out+j+3)[0] = (uint)(i+1);
      (out+j+3)[1] = (uint)(i+2);
      (out+j+3)[2] = (uint)(i+3);
   }
}
static void generate_quadstrip_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)(i+2);
      (out+j+0)[1] = (uint)(i+0);
      (out+j+0)[2] = (uint)(i+3);
      (out+j+3)[0] = (uint)(i+0);
      (out+j+3)[1] = (uint)(i+1);
      (out+j+3)[2] = (uint)(i+3);
   }
}
static void generate_polygon_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)(i+1);
      (out+j)[1] = (uint)(i+2);
      (out+j)[2] = (uint)(start);
   }
}
static void generate_linesadj_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)(i+0);
      (out+i)[1] = (uint)(i+1);
      (out+i)[2] = (uint)(i+2);
      (out+i)[3] = (uint)(i+3);
  }
}
static void generate_linestripadj_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)(i+0);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
      (out+j)[3] = (uint)(i+3);
  }
}
static void generate_trisadj_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)(i+0);
      (out+i)[1] = (uint)(i+1);
      (out+i)[2] = (uint)(i+2);
      (out+i)[3] = (uint)(i+3);
      (out+i)[4] = (uint)(i+4);
      (out+i)[5] = (uint)(i+5);
  }
}
static void generate_tristripadj_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)(i+0);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
      (out+j)[3] = (uint)(i+3);
      (out+j)[4] = (uint)(i+4);
      (out+j)[5] = (uint)(i+5);
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)(i+2);
      (out+j)[1] = (uint)(i-2);
      (out+j)[2] = (uint)(i+0);
      (out+j)[3] = (uint)(i+3);
      (out+j)[4] = (uint)(i+4);
      (out+j)[5] = (uint)(i+6);
    }
  }
}
static void translate_points_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[start];
}
static void translate_tris_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1+(i&1)];
      (out+j)[2] = (ushort)in[i+2-(i&1)];
   }
}
static void translate_trifan_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+2];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_polygon_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_linesadj_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
static void translate_points_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[start];
}
static void translate_tris_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1+(i&1)];
      (out+j)[2] = (ushort)in[i+2-(i&1)];
   }
}
static void translate_trifan_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+2];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_polygon_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_linesadj_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
static void translate_points_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i];
   }
}
static void translate_tristrip_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1+(i&1)];
      (out+j)[1] = (ushort)in[i+2-(i&1)];
      (out+j)[2] = (ushort)in[i];
   }
}
static void translate_trifan_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_quads_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+2];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_quadstrip_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+3];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_polygon_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
static void translate_points_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i];
   }
}
static void translate_tristrip_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1+(i&1)];
      (out+j)[1] = (ushort)in[i+2-(i&1)];
      (out+j)[2] = (ushort)in[i];
   }
}
static void translate_trifan_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_quads_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+2];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_quadstrip_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+3];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_polygon_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
static void translate_points_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+2];
      (out+i)[1] = (ushort)in[i];
      (out+i)[2] = (ushort)in[i+1];
   }
}
static void translate_tristrip_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i+(i&1)];
      (out+j)[2] = (ushort)in[i+1-(i&1)];
   }
}
static void translate_trifan_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[start];
      (out+j)[2] = (ushort)in[i+1];
   }
}
static void translate_quads_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+1];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_quadstrip_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+0];
      (out+j+3)[2] = (ushort)in[i+1];
   }
}
static void translate_polygon_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_linesadj_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
static void translate_points_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+2];
      (out+i)[1] = (ushort)in[i];
      (out+i)[2] = (ushort)in[i+1];
   }
}
static void translate_tristrip_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i+(i&1)];
      (out+j)[2] = (ushort)in[i+1-(i&1)];
   }
}
static void translate_trifan_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[start];
      (out+j)[2] = (ushort)in[i+1];
   }
}
static void translate_quads_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+1];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_quadstrip_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+0];
      (out+j+3)[2] = (ushort)in[i+1];
   }
}
static void translate_polygon_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_linesadj_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
static void translate_points_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[start];
}
static void translate_tris_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+(i&1)];
      (out+j)[1] = (ushort)in[i+1-(i&1)];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_trifan_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+2];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_polygon_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
static void translate_points_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[start];
}
static void translate_tris_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+(i&1)];
      (out+j)[1] = (ushort)in[i+1-(i&1)];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_trifan_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+2];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_polygon_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
static void translate_points_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[start];
}
static void translate_tris_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1+(i&1)];
      (out+j)[2] = (uint)in[i+2-(i&1)];
   }
}
static void translate_trifan_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+2];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_polygon_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_linesadj_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
static void translate_points_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[start];
}
static void translate_tris_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1+(i&1)];
      (out+j)[2] = (uint)in[i+2-(i&1)];
   }
}
static void translate_trifan_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+2];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_polygon_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_linesadj_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
static void translate_points_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i];
   }
}
static void translate_tristrip_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1+(i&1)];
      (out+j)[1] = (uint)in[i+2-(i&1)];
      (out+j)[2] = (uint)in[i];
   }
}
static void translate_trifan_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_quads_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+2];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_quadstrip_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+3];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_polygon_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
static void translate_points_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i];
   }
}
static void translate_tristrip_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1+(i&1)];
      (out+j)[1] = (uint)in[i+2-(i&1)];
      (out+j)[2] = (uint)in[i];
   }
}
static void translate_trifan_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_quads_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+2];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_quadstrip_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+3];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_polygon_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
static void translate_points_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+2];
      (out+i)[1] = (uint)in[i];
      (out+i)[2] = (uint)in[i+1];
   }
}
static void translate_tristrip_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i+(i&1)];
      (out+j)[2] = (uint)in[i+1-(i&1)];
   }
}
static void translate_trifan_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[start];
      (out+j)[2] = (uint)in[i+1];
   }
}
static void translate_quads_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+1];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_quadstrip_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+0];
      (out+j+3)[2] = (uint)in[i+1];
   }
}
static void translate_polygon_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_linesadj_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
static void translate_points_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+2];
      (out+i)[1] = (uint)in[i];
      (out+i)[2] = (uint)in[i+1];
   }
}
static void translate_tristrip_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i+(i&1)];
      (out+j)[2] = (uint)in[i+1-(i&1)];
   }
}
static void translate_trifan_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[start];
      (out+j)[2] = (uint)in[i+1];
   }
}
static void translate_quads_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+1];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_quadstrip_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+0];
      (out+j+3)[2] = (uint)in[i+1];
   }
}
static void translate_polygon_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_linesadj_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
static void translate_points_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[start];
}
static void translate_tris_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+(i&1)];
      (out+j)[1] = (uint)in[i+1-(i&1)];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_trifan_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+2];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_polygon_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
static void translate_points_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[start];
}
static void translate_tris_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+(i&1)];
      (out+j)[1] = (uint)in[i+1-(i&1)];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_trifan_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+2];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_polygon_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
static void translate_points_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[start];
}
static void translate_tris_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1+(i&1)];
      (out+j)[2] = (ushort)in[i+2-(i&1)];
   }
}
static void translate_trifan_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+2];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_polygon_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_linesadj_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
static void translate_points_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[start];
}
static void translate_tris_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1+(i&1)];
      (out+j)[2] = (ushort)in[i+2-(i&1)];
   }
}
static void translate_trifan_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+2];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_polygon_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_linesadj_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
static void translate_points_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i];
   }
}
static void translate_tristrip_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1+(i&1)];
      (out+j)[1] = (ushort)in[i+2-(i&1)];
      (out+j)[2] = (ushort)in[i];
   }
}
static void translate_trifan_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_quads_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+2];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_quadstrip_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+3];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_polygon_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
static void translate_points_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i];
   }
}
static void translate_tristrip_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1+(i&1)];
      (out+j)[1] = (ushort)in[i+2-(i&1)];
      (out+j)[2] = (ushort)in[i];
   }
}
static void translate_trifan_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_quads_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+2];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_quadstrip_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+3];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_polygon_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
static void translate_points_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+2];
      (out+i)[1] = (ushort)in[i];
      (out+i)[2] = (ushort)in[i+1];
   }
}
static void translate_tristrip_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i+(i&1)];
      (out+j)[2] = (ushort)in[i+1-(i&1)];
   }
}
static void translate_trifan_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[start];
      (out+j)[2] = (ushort)in[i+1];
   }
}
static void translate_quads_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+1];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_quadstrip_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+0];
      (out+j+3)[2] = (ushort)in[i+1];
   }
}
static void translate_polygon_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_linesadj_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
static void translate_points_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+2];
      (out+i)[1] = (ushort)in[i];
      (out+i)[2] = (ushort)in[i+1];
   }
}
static void translate_tristrip_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i+(i&1)];
      (out+j)[2] = (ushort)in[i+1-(i&1)];
   }
}
static void translate_trifan_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[start];
      (out+j)[2] = (ushort)in[i+1];
   }
}
static void translate_quads_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+1];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_quadstrip_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+0];
      (out+j+3)[2] = (ushort)in[i+1];
   }
}
static void translate_polygon_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_linesadj_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
static void translate_points_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[start];
}
static void translate_tris_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+(i&1)];
      (out+j)[1] = (ushort)in[i+1-(i&1)];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_trifan_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+2];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_polygon_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
static void translate_points_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[start];
}
static void translate_tris_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+(i&1)];
      (out+j)[1] = (ushort)in[i+1-(i&1)];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_trifan_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+2];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_polygon_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
static void translate_points_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[start];
}
static void translate_tris_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1+(i&1)];
      (out+j)[2] = (uint)in[i+2-(i&1)];
   }
}
static void translate_trifan_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+2];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_polygon_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_linesadj_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
static void translate_points_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[start];
}
static void translate_tris_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1+(i&1)];
      (out+j)[2] = (uint)in[i+2-(i&1)];
   }
}
static void translate_trifan_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+2];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_polygon_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_linesadj_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
static void translate_points_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i];
   }
}
static void translate_tristrip_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1+(i&1)];
      (out+j)[1] = (uint)in[i+2-(i&1)];
      (out+j)[2] = (uint)in[i];
   }
}
static void translate_trifan_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_quads_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+2];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_quadstrip_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+3];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_polygon_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
static void translate_points_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i];
   }
}
static void translate_tristrip_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1+(i&1)];
      (out+j)[1] = (uint)in[i+2-(i&1)];
      (out+j)[2] = (uint)in[i];
   }
}
static void translate_trifan_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_quads_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+2];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_quadstrip_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+3];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_polygon_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
static void translate_points_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+2];
      (out+i)[1] = (uint)in[i];
      (out+i)[2] = (uint)in[i+1];
   }
}
static void translate_tristrip_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i+(i&1)];
      (out+j)[2] = (uint)in[i+1-(i&1)];
   }
}
static void translate_trifan_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[start];
      (out+j)[2] = (uint)in[i+1];
   }
}
static void translate_quads_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+1];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_quadstrip_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+0];
      (out+j+3)[2] = (uint)in[i+1];
   }
}
static void translate_polygon_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_linesadj_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
static void translate_points_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+2];
      (out+i)[1] = (uint)in[i];
      (out+i)[2] = (uint)in[i+1];
   }
}
static void translate_tristrip_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i+(i&1)];
      (out+j)[2] = (uint)in[i+1-(i&1)];
   }
}
static void translate_trifan_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[start];
      (out+j)[2] = (uint)in[i+1];
   }
}
static void translate_quads_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+1];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_quadstrip_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+0];
      (out+j+3)[2] = (uint)in[i+1];
   }
}
static void translate_polygon_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_linesadj_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
static void translate_points_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[start];
}
static void translate_tris_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+(i&1)];
      (out+j)[1] = (uint)in[i+1-(i&1)];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_trifan_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+2];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_polygon_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
static void translate_points_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[start];
}
static void translate_tris_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+(i&1)];
      (out+j)[1] = (uint)in[i+1-(i&1)];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_trifan_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+2];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_polygon_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
static void translate_points_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[start];
}
static void translate_tris_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1+(i&1)];
      (out+j)[2] = (ushort)in[i+2-(i&1)];
   }
}
static void translate_trifan_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+2];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_polygon_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_linesadj_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
static void translate_points_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[start];
}
static void translate_tris_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1+(i&1)];
      (out+j)[2] = (ushort)in[i+2-(i&1)];
   }
}
static void translate_trifan_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+2];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_polygon_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_linesadj_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
static void translate_points_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i];
   }
}
static void translate_tristrip_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1+(i&1)];
      (out+j)[1] = (ushort)in[i+2-(i&1)];
      (out+j)[2] = (ushort)in[i];
   }
}
static void translate_trifan_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_quads_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+2];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_quadstrip_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+3];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_polygon_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
static void translate_points_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i];
   }
}
static void translate_tristrip_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1+(i&1)];
      (out+j)[1] = (ushort)in[i+2-(i&1)];
      (out+j)[2] = (ushort)in[i];
   }
}
static void translate_trifan_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_quads_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+2];
      (out+j+3)[1] = (ushort)in[i+3];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_quadstrip_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+1];
      (out+j+0)[1] = (ushort)in[i+3];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+0];
   }
}
static void translate_polygon_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
static void translate_points_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+2];
      (out+i)[1] = (ushort)in[i];
      (out+i)[2] = (ushort)in[i+1];
   }
}
static void translate_tristrip_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i+(i&1)];
      (out+j)[2] = (ushort)in[i+1-(i&1)];
   }
}
static void translate_trifan_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[start];
      (out+j)[2] = (ushort)in[i+1];
   }
}
static void translate_quads_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+1];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_quadstrip_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+0];
      (out+j+3)[2] = (ushort)in[i+1];
   }
}
static void translate_polygon_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_linesadj_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
static void translate_points_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
}
static void translate_linestrip_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
}
static void translate_lineloop_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i];
}
static void translate_tris_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i+2];
      (out+i)[1] = (ushort)in[i];
      (out+i)[2] = (ushort)in[i+1];
   }
}
static void translate_tristrip_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i+(i&1)];
      (out+j)[2] = (ushort)in[i+1-(i&1)];
   }
}
static void translate_trifan_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[start];
      (out+j)[2] = (ushort)in[i+1];
   }
}
static void translate_quads_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+1];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+2];
   }
}
static void translate_quadstrip_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+3];
      (out+j+0)[1] = (ushort)in[i+2];
      (out+j+0)[2] = (ushort)in[i+0];
      (out+j+3)[0] = (ushort)in[i+3];
      (out+j+3)[1] = (ushort)in[i+0];
      (out+j+3)[2] = (ushort)in[i+1];
   }
}
static void translate_polygon_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_linesadj_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
static void translate_points_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[start];
}
static void translate_tris_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+(i&1)];
      (out+j)[1] = (ushort)in[i+1-(i&1)];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_trifan_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (ushort)in[i+2];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_polygon_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
static void translate_points_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
}
static void translate_lines_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
}
static void translate_linestrip_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
}
static void translate_lineloop_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[start];
}
static void translate_tris_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
   }
}
static void translate_tristrip_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[i+(i&1)];
      (out+j)[1] = (ushort)in[i+1-(i&1)];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_trifan_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
   }
}
static void translate_quads_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+0];
      (out+j+0)[1] = (ushort)in[i+1];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+1];
      (out+j+3)[1] = (ushort)in[i+2];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_quadstrip_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (ushort)in[i+2];
      (out+j+0)[1] = (ushort)in[i+0];
      (out+j+0)[2] = (ushort)in[i+3];
      (out+j+3)[0] = (ushort)in[i+0];
      (out+j+3)[1] = (ushort)in[i+1];
      (out+j+3)[2] = (ushort)in[i+3];
   }
}
static void translate_polygon_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
static void translate_points_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[start];
}
static void translate_tris_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1+(i&1)];
      (out+j)[2] = (uint)in[i+2-(i&1)];
   }
}
static void translate_trifan_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+2];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_polygon_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_linesadj_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
static void translate_points_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[start];
}
static void translate_tris_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1+(i&1)];
      (out+j)[2] = (uint)in[i+2-(i&1)];
   }
}
static void translate_trifan_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+2];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_polygon_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_linesadj_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
static void translate_points_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i];
   }
}
static void translate_tristrip_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1+(i&1)];
      (out+j)[1] = (uint)in[i+2-(i&1)];
      (out+j)[2] = (uint)in[i];
   }
}
static void translate_trifan_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_quads_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+2];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_quadstrip_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+3];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_polygon_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
static void translate_points_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i];
   }
}
static void translate_tristrip_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1+(i&1)];
      (out+j)[1] = (uint)in[i+2-(i&1)];
      (out+j)[2] = (uint)in[i];
   }
}
static void translate_trifan_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_quads_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+2];
      (out+j+3)[1] = (uint)in[i+3];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_quadstrip_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+3];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+0];
   }
}
static void translate_polygon_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
static void translate_points_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+2];
      (out+i)[1] = (uint)in[i];
      (out+i)[2] = (uint)in[i+1];
   }
}
static void translate_tristrip_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i+(i&1)];
      (out+j)[2] = (uint)in[i+1-(i&1)];
   }
}
static void translate_trifan_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[start];
      (out+j)[2] = (uint)in[i+1];
   }
}
static void translate_quads_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+1];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_quadstrip_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+0];
      (out+j+3)[2] = (uint)in[i+1];
   }
}
static void translate_polygon_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_linesadj_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
static void translate_points_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
}
static void translate_linestrip_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
}
static void translate_lineloop_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i];
}
static void translate_tris_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i+2];
      (out+i)[1] = (uint)in[i];
      (out+i)[2] = (uint)in[i+1];
   }
}
static void translate_tristrip_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i+(i&1)];
      (out+j)[2] = (uint)in[i+1-(i&1)];
   }
}
static void translate_trifan_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[start];
      (out+j)[2] = (uint)in[i+1];
   }
}
static void translate_quads_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+1];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+2];
   }
}
static void translate_quadstrip_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+3];
      (out+j+0)[1] = (uint)in[i+2];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+0];
      (out+j+3)[2] = (uint)in[i+1];
   }
}
static void translate_polygon_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_linesadj_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
static void translate_points_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[start];
}
static void translate_tris_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+(i&1)];
      (out+j)[1] = (uint)in[i+1-(i&1)];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_trifan_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
      (out+j+0)[0] = (uint)in[i+2];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_polygon_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
static void translate_points_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
}
static void translate_lines_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
}
static void translate_linestrip_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
}
static void translate_lineloop_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[start];
}
static void translate_tris_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=3) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
   }
}
static void translate_tristrip_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[i+(i&1)];
      (out+j)[1] = (uint)in[i+1-(i&1)];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_trifan_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
      (out+j)[0] = (uint)in[start];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
   }
}
static void translate_quads_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=4) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+0];
      (out+j+0)[1] = (uint)in[i+1];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+1];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_quadstrip_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=6, i+=2) { 
restart:
      if (i + 4 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         (out+j+3)[0] = restart_index;
         (out+j+3)[1] = restart_index;
         (out+j+3)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         goto restart;
      }
      if (in[i + 3] == restart_index) {
         i += 4;
         goto restart;
      }
      (out+j+0)[0] = (uint)in[i+2];
      (out+j+0)[1] = (uint)in[i+0];
      (out+j+0)[2] = (uint)in[i+3];
      (out+j+3)[0] = (uint)in[i+0];
      (out+j+3)[1] = (uint)in[i+1];
      (out+j+3)[2] = (uint)in[i+3];
   }
}
static void translate_polygon_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
void u_index_init( void )
{
  static int firsttime = 1;
  if (!firsttime) return;
  firsttime = 0;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_POINTS] = generate_points_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES] = generate_lines_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES] = generate_tris_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUADS] = generate_quads_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_POLYGON] = generate_polygon_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_POINTS] = generate_points_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES] = generate_lines_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES] = generate_tris_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUADS] = generate_quads_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_POLYGON] = generate_polygon_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_POINTS] = generate_points_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES] = generate_lines_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES] = generate_tris_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_QUADS] = generate_quads_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_POLYGON] = generate_polygon_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_POINTS] = generate_points_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES] = generate_lines_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES] = generate_tris_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_QUADS] = generate_quads_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_POLYGON] = generate_polygon_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_first2last;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_POINTS] = generate_points_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES] = generate_lines_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES] = generate_tris_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_QUADS] = generate_quads_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_POLYGON] = generate_polygon_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_POINTS] = generate_points_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES] = generate_lines_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES] = generate_tris_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_QUADS] = generate_quads_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_POLYGON] = generate_polygon_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_POINTS] = generate_points_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINES] = generate_lines_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES] = generate_tris_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_QUADS] = generate_quads_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_POLYGON] = generate_polygon_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_POINTS] = generate_points_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINES] = generate_lines_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES] = generate_tris_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_QUADS] = generate_quads_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_POLYGON] = generate_polygon_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_last2last;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_POINTS] = generate_points_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES] = generate_lines_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES] = generate_tris_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUADS] = generate_quads_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_POLYGON] = generate_polygon_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_POINTS] = generate_points_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES] = generate_lines_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES] = generate_tris_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUADS] = generate_quads_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_POLYGON] = generate_polygon_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_POINTS] = generate_points_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES] = generate_lines_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES] = generate_tris_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_QUADS] = generate_quads_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_POLYGON] = generate_polygon_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_POINTS] = generate_points_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES] = generate_lines_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES] = generate_tris_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_QUADS] = generate_quads_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_POLYGON] = generate_polygon_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_first2last;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_POINTS] = generate_points_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES] = generate_lines_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES] = generate_tris_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_QUADS] = generate_quads_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_POLYGON] = generate_polygon_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_POINTS] = generate_points_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES] = generate_lines_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES] = generate_tris_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_QUADS] = generate_quads_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_POLYGON] = generate_polygon_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_POINTS] = generate_points_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINES] = generate_lines_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES] = generate_tris_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_QUADS] = generate_quads_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_POLYGON] = generate_polygon_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_POINTS] = generate_points_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINES] = generate_lines_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP] = generate_linestrip_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_LOOP] = generate_lineloop_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES] = generate_tris_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_FAN] = generate_trifan_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP] = generate_tristrip_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_QUADS] = generate_quads_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_QUAD_STRIP] = generate_quadstrip_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_POLYGON] = generate_polygon_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_last2last;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_POINTS] = translate_points_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES] = translate_lines_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUADS] = translate_quads_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_POINTS] = translate_points_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES] = translate_lines_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP] = translate_linestrip_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_LOOP] = translate_lineloop_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES] = translate_tris_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_FAN] = translate_trifan_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP] = translate_tristrip_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUADS] = translate_quads_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_QUAD_STRIP] = translate_quadstrip_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_POLYGON] = translate_polygon_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_last2last_prenable;
}
#include "indices/u_indices.c"
@


1.1
log
@Initial revision
@
text
@d210 75
d428 75
d646 75
d864 75
d1082 75
d1300 75
d1518 1
a1518 1
static void generate_points_uint_last2last(
d1526 6
a1531 3
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)(i);
   }
d1533 1
a1533 1
static void generate_lines_uint_last2last(
d1541 6
a1546 4
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)(i);
      (out+i)[1] = (uint)(i+1);
   }
d1548 1
a1548 1
static void generate_linestrip_uint_last2last(
d1556 8
a1563 4
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1);
   }
d1565 67
a1631 1
static void generate_lineloop_uint_last2last(
d1736 75
d1994 91
d2342 91
d2616 91
d2964 92
a3055 1
static void translate_points_ubyte2ushort_last2first_prdisable(
d3238 91
d3586 91
d3860 91
d4208 1
a4208 1
static void translate_points_ubyte2uint_first2first_prdisable(
d4217 1
a4217 1
  uint *out = (uint*)_out;
d4220 6
a4225 3
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
d4227 1
a4227 1
static void translate_lines_ubyte2uint_first2first_prdisable(
d4236 1
a4236 1
  uint *out = (uint*)_out;
d4239 6
a4244 4
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
d4246 1
a4246 1
static void translate_linestrip_ubyte2uint_first2first_prdisable(
d4255 1
a4255 1
  uint *out = (uint*)_out;
d4258 8
a4265 4
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
d4267 1
a4267 1
static void translate_lineloop_ubyte2uint_first2first_prdisable(
d4276 1
a4276 1
  uint *out = (uint*)_out;
d4279 19
a4297 6
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[start];
d4299 70
a4368 1
static void translate_tris_ubyte2uint_first2first_prdisable(
d4482 91
d4830 91
d5104 91
d5452 1
a5452 1
static void translate_points_ubyte2uint_last2first_prdisable(
d5464 6
a5469 3
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
d5471 1
a5471 1
static void translate_lines_ubyte2uint_last2first_prdisable(
d5483 6
a5488 4
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
d5490 1
a5490 1
static void translate_linestrip_ubyte2uint_last2first_prdisable(
d5502 8
a5509 4
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
d5511 83
a5593 1
static void translate_lineloop_ubyte2uint_last2first_prdisable(
d5726 91
d6074 91
d6348 91
d6696 1
a6696 1
static void translate_points_ushort2ushort_first2first_prdisable(
d6704 2
a6705 2
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
d6708 6
a6713 3
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
d6715 1
a6715 1
static void translate_lines_ushort2ushort_first2first_prdisable(
d6723 2
a6724 2
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
d6727 6
a6732 4
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
d6734 1
a6734 1
static void translate_linestrip_ushort2ushort_first2first_prdisable(
d6742 88
a6829 2
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
d6970 91
d7318 91
d7592 91
d7940 1
a7940 1
static void translate_points_ushort2ushort_last2first_prdisable(
d7952 6
a7957 3
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
d7959 1
a7959 1
static void translate_lines_ushort2ushort_last2first_prdisable(
d7971 6
a7976 4
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
d7978 1
a7978 1
static void translate_linestrip_ushort2ushort_last2first_prdisable(
d7990 8
a7997 4
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
d7999 1
a7999 1
static void translate_lineloop_ushort2ushort_last2first_prdisable(
d8011 19
a8029 6
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
      (out+j)[0] = (ushort)in[start];
      (out+j)[1] = (ushort)in[i];
d8031 70
a8100 1
static void translate_tris_ushort2ushort_last2first_prdisable(
d8214 91
d8562 91
d8836 91
d9184 1
a9184 1
static void translate_points_ushort2uint_first2first_prdisable(
d9193 1
a9193 1
  uint *out = (uint*)_out;
d9196 6
a9201 3
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
d9203 1
a9203 1
static void translate_lines_ushort2uint_first2first_prdisable(
d9212 1
a9212 1
  uint *out = (uint*)_out;
d9215 6
a9220 4
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
d9222 1
a9222 1
static void translate_linestrip_ushort2uint_first2first_prdisable(
d9231 1
a9231 1
  uint *out = (uint*)_out;
d9234 8
a9241 4
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
d9243 83
a9325 1
static void translate_lineloop_ushort2uint_first2first_prdisable(
d9458 91
d9806 91
d10080 91
d10428 1
a10428 1
static void translate_points_ushort2uint_last2first_prdisable(
d10440 6
a10445 3
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
d10447 1
a10447 1
static void translate_lines_ushort2uint_last2first_prdisable(
d10459 6
a10464 4
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i+1];
      (out+i)[1] = (uint)in[i];
   }
d10466 1
a10466 1
static void translate_linestrip_ushort2uint_last2first_prdisable(
d10478 8
a10485 4
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i];
   }
d10487 83
a10569 1
static void translate_lineloop_ushort2uint_last2first_prdisable(
d10702 91
d11050 91
d11324 91
d11672 1
a11672 1
static void translate_points_uint2ushort_first2first_prdisable(
d11680 2
a11681 2
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
d11684 6
a11689 3
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
d11691 1
a11691 1
static void translate_lines_uint2ushort_first2first_prdisable(
d11699 2
a11700 2
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
d11703 6
a11708 4
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i];
      (out+i)[1] = (ushort)in[i+1];
   }
d11710 1
a11710 1
static void translate_linestrip_uint2ushort_first2first_prdisable(
d11718 2
a11719 2
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
d11722 8
a11729 4
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i];
      (out+j)[1] = (ushort)in[i+1];
   }
d11731 83
a11813 1
static void translate_lineloop_uint2ushort_first2first_prdisable(
d11946 91
d12294 91
d12568 91
d12916 1
a12916 1
static void translate_points_uint2ushort_last2first_prdisable(
d12928 6
a12933 3
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (ushort)in[i];
   }
d12935 1
a12935 1
static void translate_lines_uint2ushort_last2first_prdisable(
d12947 6
a12952 4
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (ushort)in[i+1];
      (out+i)[1] = (ushort)in[i];
   }
d12954 1
a12954 1
static void translate_linestrip_uint2ushort_last2first_prdisable(
d12966 8
a12973 4
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i];
   }
d12975 83
a13057 1
static void translate_lineloop_uint2ushort_last2first_prdisable(
d13190 91
d13538 91
d13812 91
d14160 1
a14160 1
static void translate_points_uint2uint_first2first_prdisable(
d14169 1
a14169 1
  uint *out = (uint*)_out;
d14172 6
a14177 3
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)in[i];
   }
d14179 1
a14179 1
static void translate_lines_uint2uint_first2first_prdisable(
d14188 1
a14188 1
  uint *out = (uint*)_out;
d14191 6
a14196 4
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)in[i];
      (out+i)[1] = (uint)in[i+1];
   }
d14198 1
a14198 1
static void translate_linestrip_uint2uint_first2first_prdisable(
d14207 1
a14207 1
  uint *out = (uint*)_out;
d14210 8
a14217 4
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)in[i];
      (out+j)[1] = (uint)in[i+1];
   }
d14219 1
a14219 1
static void translate_lineloop_uint2uint_first2first_prdisable(
d14228 83
a14310 1
  uint *out = (uint*)_out;
d14434 91
d14782 91
d15056 91
d15356 106
a15461 7
      (out+j+0)[0] = (uint)in[i+1];
      (out+j+0)[1] = (uint)in[i+3];
      (out+j+0)[2] = (uint)in[i+0];
      (out+j+3)[0] = (uint)in[i+3];
      (out+j+3)[1] = (uint)in[i+2];
      (out+j+3)[2] = (uint)in[i+0];
   }
d15463 1
a15463 1
static void translate_polygon_uint2uint_first2last_prenable(
d15475 19
a15493 27
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
d15678 91
d16026 91
d16300 91
d16648 91
d16754 4
d16768 4
d16782 4
d16796 4
d16810 4
d16824 4
d16838 4
d16852 4
d16866 4
d16880 4
d16894 4
d16908 4
d16922 4
d16936 4
d16950 4
d16964 4
d16978 4
d16992 4
d17006 4
d17020 4
d17034 4
d17048 4
d17062 4
d17076 4
d17090 4
d17104 4
d17118 4
d17132 4
d17146 4
d17160 4
d17174 4
d17188 4
d17202 4
d17216 4
d17230 4
d17244 4
d17258 4
d17272 4
d17286 4
d17300 4
d17314 4
d17328 4
d17342 4
d17356 4
d17370 4
d17384 4
d17398 4
d17412 4
d17426 4
d17440 4
d17454 4
d17468 4
d17482 4
d17496 4
d17510 4
d17524 4
d17538 4
d17552 4
d17566 4
d17580 4
d17594 4
d17608 4
d17622 4
d17636 4
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 13.0.2
@
text
@a209 75
static void generate_linesadj_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)(i+0);
      (out+i)[1] = (ushort)(i+1);
      (out+i)[2] = (ushort)(i+2);
      (out+i)[3] = (ushort)(i+3);
  }
}
static void generate_linestripadj_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)(i+0);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
      (out+j)[3] = (ushort)(i+3);
  }
}
static void generate_trisadj_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)(i+0);
      (out+i)[1] = (ushort)(i+1);
      (out+i)[2] = (ushort)(i+2);
      (out+i)[3] = (ushort)(i+3);
      (out+i)[4] = (ushort)(i+4);
      (out+i)[5] = (ushort)(i+5);
  }
}
static void generate_tristripadj_ushort_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)(i+0);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
      (out+j)[3] = (ushort)(i+3);
      (out+j)[4] = (ushort)(i+4);
      (out+j)[5] = (ushort)(i+5);
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)(i+2);
      (out+j)[1] = (ushort)(i-2);
      (out+j)[2] = (ushort)(i+0);
      (out+j)[3] = (ushort)(i+3);
      (out+j)[4] = (ushort)(i+4);
      (out+j)[5] = (ushort)(i+6);
    }
  }
}
a352 75
static void generate_linesadj_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)(i+3);
      (out+i)[1] = (ushort)(i+2);
      (out+i)[2] = (ushort)(i+1);
      (out+i)[3] = (ushort)(i+0);
  }
}
static void generate_linestripadj_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)(i+3);
      (out+j)[1] = (ushort)(i+2);
      (out+j)[2] = (ushort)(i+1);
      (out+j)[3] = (ushort)(i+0);
  }
}
static void generate_trisadj_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)(i+4);
      (out+i)[1] = (ushort)(i+5);
      (out+i)[2] = (ushort)(i+0);
      (out+i)[3] = (ushort)(i+1);
      (out+i)[4] = (ushort)(i+2);
      (out+i)[5] = (ushort)(i+3);
  }
}
static void generate_tristripadj_ushort_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)(i+4);
      (out+j)[1] = (ushort)(i+5);
      (out+j)[2] = (ushort)(i+0);
      (out+j)[3] = (ushort)(i+1);
      (out+j)[4] = (ushort)(i+2);
      (out+j)[5] = (ushort)(i+3);
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)(i+4);
      (out+j)[1] = (ushort)(i+6);
      (out+j)[2] = (ushort)(i+2);
      (out+j)[3] = (ushort)(i-2);
      (out+j)[4] = (ushort)(i+0);
      (out+j)[5] = (ushort)(i+3);
    }
  }
}
a495 75
static void generate_linesadj_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)(i+3);
      (out+i)[1] = (ushort)(i+2);
      (out+i)[2] = (ushort)(i+1);
      (out+i)[3] = (ushort)(i+0);
  }
}
static void generate_linestripadj_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)(i+3);
      (out+j)[1] = (ushort)(i+2);
      (out+j)[2] = (ushort)(i+1);
      (out+j)[3] = (ushort)(i+0);
  }
}
static void generate_trisadj_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)(i+4);
      (out+i)[1] = (ushort)(i+5);
      (out+i)[2] = (ushort)(i+0);
      (out+i)[3] = (ushort)(i+1);
      (out+i)[4] = (ushort)(i+2);
      (out+i)[5] = (ushort)(i+3);
  }
}
static void generate_tristripadj_ushort_last2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)(i+4);
      (out+j)[1] = (ushort)(i+5);
      (out+j)[2] = (ushort)(i+0);
      (out+j)[3] = (ushort)(i+1);
      (out+j)[4] = (ushort)(i+2);
      (out+j)[5] = (ushort)(i+3);
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)(i+4);
      (out+j)[1] = (ushort)(i+6);
      (out+j)[2] = (ushort)(i+2);
      (out+j)[3] = (ushort)(i-2);
      (out+j)[4] = (ushort)(i+0);
      (out+j)[5] = (ushort)(i+3);
    }
  }
}
a638 75
static void generate_linesadj_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)(i+0);
      (out+i)[1] = (ushort)(i+1);
      (out+i)[2] = (ushort)(i+2);
      (out+i)[3] = (ushort)(i+3);
  }
}
static void generate_linestripadj_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)(i+0);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
      (out+j)[3] = (ushort)(i+3);
  }
}
static void generate_trisadj_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)(i+0);
      (out+i)[1] = (ushort)(i+1);
      (out+i)[2] = (ushort)(i+2);
      (out+i)[3] = (ushort)(i+3);
      (out+i)[4] = (ushort)(i+4);
      (out+i)[5] = (ushort)(i+5);
  }
}
static void generate_tristripadj_ushort_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)(i+0);
      (out+j)[1] = (ushort)(i+1);
      (out+j)[2] = (ushort)(i+2);
      (out+j)[3] = (ushort)(i+3);
      (out+j)[4] = (ushort)(i+4);
      (out+j)[5] = (ushort)(i+5);
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)(i+2);
      (out+j)[1] = (ushort)(i-2);
      (out+j)[2] = (ushort)(i+0);
      (out+j)[3] = (ushort)(i+3);
      (out+j)[4] = (ushort)(i+4);
      (out+j)[5] = (ushort)(i+6);
    }
  }
}
a781 75
static void generate_linesadj_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)(i+0);
      (out+i)[1] = (uint)(i+1);
      (out+i)[2] = (uint)(i+2);
      (out+i)[3] = (uint)(i+3);
  }
}
static void generate_linestripadj_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)(i+0);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
      (out+j)[3] = (uint)(i+3);
  }
}
static void generate_trisadj_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)(i+0);
      (out+i)[1] = (uint)(i+1);
      (out+i)[2] = (uint)(i+2);
      (out+i)[3] = (uint)(i+3);
      (out+i)[4] = (uint)(i+4);
      (out+i)[5] = (uint)(i+5);
  }
}
static void generate_tristripadj_uint_first2first(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)(i+0);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
      (out+j)[3] = (uint)(i+3);
      (out+j)[4] = (uint)(i+4);
      (out+j)[5] = (uint)(i+5);
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)(i+2);
      (out+j)[1] = (uint)(i-2);
      (out+j)[2] = (uint)(i+0);
      (out+j)[3] = (uint)(i+3);
      (out+j)[4] = (uint)(i+4);
      (out+j)[5] = (uint)(i+6);
    }
  }
}
a924 75
static void generate_linesadj_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)(i+3);
      (out+i)[1] = (uint)(i+2);
      (out+i)[2] = (uint)(i+1);
      (out+i)[3] = (uint)(i+0);
  }
}
static void generate_linestripadj_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)(i+3);
      (out+j)[1] = (uint)(i+2);
      (out+j)[2] = (uint)(i+1);
      (out+j)[3] = (uint)(i+0);
  }
}
static void generate_trisadj_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)(i+4);
      (out+i)[1] = (uint)(i+5);
      (out+i)[2] = (uint)(i+0);
      (out+i)[3] = (uint)(i+1);
      (out+i)[4] = (uint)(i+2);
      (out+i)[5] = (uint)(i+3);
  }
}
static void generate_tristripadj_uint_first2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)(i+4);
      (out+j)[1] = (uint)(i+5);
      (out+j)[2] = (uint)(i+0);
      (out+j)[3] = (uint)(i+1);
      (out+j)[4] = (uint)(i+2);
      (out+j)[5] = (uint)(i+3);
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)(i+4);
      (out+j)[1] = (uint)(i+6);
      (out+j)[2] = (uint)(i+2);
      (out+j)[3] = (uint)(i-2);
      (out+j)[4] = (uint)(i+0);
      (out+j)[5] = (uint)(i+3);
    }
  }
}
d1068 1
a1068 1
static void generate_linesadj_uint_last2first(
d1076 3
a1078 6
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)(i+3);
      (out+i)[1] = (uint)(i+2);
      (out+i)[2] = (uint)(i+1);
      (out+i)[3] = (uint)(i+0);
  }
d1080 1
a1080 1
static void generate_linestripadj_uint_last2first(
d1088 4
a1091 6
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)(i+3);
      (out+j)[1] = (uint)(i+2);
      (out+j)[2] = (uint)(i+1);
      (out+j)[3] = (uint)(i+0);
  }
d1093 1
a1093 1
static void generate_trisadj_uint_last2first(
d1101 4
a1104 8
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)(i+4);
      (out+i)[1] = (uint)(i+5);
      (out+i)[2] = (uint)(i+0);
      (out+i)[3] = (uint)(i+1);
      (out+i)[4] = (uint)(i+2);
      (out+i)[5] = (uint)(i+3);
  }
d1106 1
a1106 1
static void generate_tristripadj_uint_last2first(
d1114 3
a1116 69
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)(i+4);
      (out+j)[1] = (uint)(i+5);
      (out+j)[2] = (uint)(i+0);
      (out+j)[3] = (uint)(i+1);
      (out+j)[4] = (uint)(i+2);
      (out+j)[5] = (uint)(i+3);
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)(i+4);
      (out+j)[1] = (uint)(i+6);
      (out+j)[2] = (uint)(i+2);
      (out+j)[3] = (uint)(i-2);
      (out+j)[4] = (uint)(i+0);
      (out+j)[5] = (uint)(i+3);
    }
  }
}
static void generate_points_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i++) { 
      (out+i)[0] = (uint)(i);
   }
}
static void generate_lines_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=2) { 
      (out+i)[0] = (uint)(i);
      (out+i)[1] = (uint)(i+1);
   }
}
static void generate_linestrip_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=2, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1);
   }
}
static void generate_lineloop_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr - 2; j+=2, i++) { 
      (out+j)[0] = (uint)(i);
      (out+j)[1] = (uint)(i+1);
a1210 75
static void generate_linesadj_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)(i+0);
      (out+i)[1] = (uint)(i+1);
      (out+i)[2] = (uint)(i+2);
      (out+i)[3] = (uint)(i+3);
  }
}
static void generate_linestripadj_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)(i+0);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
      (out+j)[3] = (uint)(i+3);
  }
}
static void generate_trisadj_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)(i+0);
      (out+i)[1] = (uint)(i+1);
      (out+i)[2] = (uint)(i+2);
      (out+i)[3] = (uint)(i+3);
      (out+i)[4] = (uint)(i+4);
      (out+i)[5] = (uint)(i+5);
  }
}
static void generate_tristripadj_uint_last2last(
    unsigned start,
    unsigned out_nr,
    void *_out )
{
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)(i+0);
      (out+j)[1] = (uint)(i+1);
      (out+j)[2] = (uint)(i+2);
      (out+j)[3] = (uint)(i+3);
      (out+j)[4] = (uint)(i+4);
      (out+j)[5] = (uint)(i+5);
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)(i+2);
      (out+j)[1] = (uint)(i-2);
      (out+j)[2] = (uint)(i+0);
      (out+j)[3] = (uint)(i+3);
      (out+j)[4] = (uint)(i+4);
      (out+j)[5] = (uint)(i+6);
    }
  }
}
a1393 91
static void translate_linesadj_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ubyte2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
a1650 91
static void translate_linesadj_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ubyte2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
a1833 91
static void translate_linesadj_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ubyte2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
a2090 91
static void translate_linesadj_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ubyte2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
a2273 91
static void translate_linesadj_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ubyte2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
a2530 91
static void translate_linesadj_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ubyte2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
a2713 91
static void translate_linesadj_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ubyte2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
a2970 91
static void translate_linesadj_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ubyte2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
a3153 91
static void translate_linesadj_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ubyte2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
a3410 91
static void translate_linesadj_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ubyte2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
a3593 91
static void translate_linesadj_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ubyte2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
d3811 1
a3811 79
static void translate_polygon_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ubyte2uint_first2last_prenable(
d3823 27
a3849 40
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ubyte2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
a4033 91
static void translate_linesadj_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ubyte2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
a4290 91
static void translate_linesadj_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ubyte2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
a4473 91
static void translate_linesadj_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ubyte2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
a4730 91
static void translate_linesadj_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ubyte2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ubyte*in = (const ubyte*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
a4913 91
static void translate_linesadj_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ushort2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
a5170 91
static void translate_linesadj_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ushort2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
a5353 91
static void translate_linesadj_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ushort2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
d5571 1
a5571 100
static void translate_polygon_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ushort2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ushort2ushort_first2last_prenable(
d5583 27
a5609 19
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
a5793 91
static void translate_linesadj_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ushort2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
a6050 91
static void translate_linesadj_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_ushort2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
a6233 91
static void translate_linesadj_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ushort2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
d6451 1
a6451 79
static void translate_polygon_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_ushort2ushort_last2last_prenable(
d6463 27
a6489 40
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_ushort2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
a6673 91
static void translate_linesadj_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ushort2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
a6930 91
static void translate_linesadj_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ushort2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
a7113 91
static void translate_linesadj_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ushort2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
a7370 91
static void translate_linesadj_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ushort2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
a7553 91
static void translate_linesadj_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ushort2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
a7810 91
static void translate_linesadj_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_ushort2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
a7993 91
static void translate_linesadj_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ushort2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
d8211 1
a8211 100
static void translate_polygon_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_ushort2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const ushort*in = (const ushort*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_ushort2uint_last2last_prenable(
d8223 27
a8249 19
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
a8433 91
static void translate_linesadj_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_uint2ushort_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
a8690 91
static void translate_linesadj_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_uint2ushort_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
a8873 91
static void translate_linesadj_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_uint2ushort_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
d9103 24
a9126 61
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (ushort)in[i+1];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[start];
   }
}
static void translate_linesadj_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
d9128 2
a9129 56
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_uint2ushort_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
a9313 91
static void translate_linesadj_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_uint2ushort_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
a9570 91
static void translate_linesadj_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+3];
      (out+i)[1] = (ushort)in[i+2];
      (out+i)[2] = (ushort)in[i+1];
      (out+i)[3] = (ushort)in[i+0];
  }
}
static void translate_linestripadj_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+3];
      (out+j)[1] = (ushort)in[i+2];
      (out+j)[2] = (ushort)in[i+1];
      (out+j)[3] = (ushort)in[i+0];
  }
}
static void translate_trisadj_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+4];
      (out+i)[1] = (ushort)in[i+5];
      (out+i)[2] = (ushort)in[i+0];
      (out+i)[3] = (ushort)in[i+1];
      (out+i)[4] = (ushort)in[i+2];
      (out+i)[5] = (ushort)in[i+3];
  }
}
static void translate_tristripadj_uint2ushort_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+5];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+1];
      (out+j)[4] = (ushort)in[i+2];
      (out+j)[5] = (ushort)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+4];
      (out+j)[1] = (ushort)in[i+6];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i-2];
      (out+j)[4] = (ushort)in[i+0];
      (out+j)[5] = (ushort)in[i+3];
    }
  }
}
a9753 91
static void translate_linesadj_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_uint2ushort_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
a10010 91
static void translate_linesadj_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
  }
}
static void translate_linestripadj_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
  }
}
static void translate_trisadj_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (ushort)in[i+0];
      (out+i)[1] = (ushort)in[i+1];
      (out+i)[2] = (ushort)in[i+2];
      (out+i)[3] = (ushort)in[i+3];
      (out+i)[4] = (ushort)in[i+4];
      (out+i)[5] = (ushort)in[i+5];
  }
}
static void translate_tristripadj_uint2ushort_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  ushort *out = (ushort*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (ushort)in[i+0];
      (out+j)[1] = (ushort)in[i+1];
      (out+j)[2] = (ushort)in[i+2];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (ushort)in[i+2];
      (out+j)[1] = (ushort)in[i-2];
      (out+j)[2] = (ushort)in[i+0];
      (out+j)[3] = (ushort)in[i+3];
      (out+j)[4] = (ushort)in[i+4];
      (out+j)[5] = (ushort)in[i+6];
    }
  }
}
a10193 91
static void translate_linesadj_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_uint2uint_first2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
a10450 91
static void translate_linesadj_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_uint2uint_first2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
a10633 91
static void translate_linesadj_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_uint2uint_first2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
d10851 1
a10851 100
static void translate_polygon_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=3, i++) { 
restart:
      if (i + 3 > in_nr) {
         (out+j+0)[0] = restart_index;
         (out+j+0)[1] = restart_index;
         (out+j+0)[2] = restart_index;
         continue;
      }
      if (in[i + 0] == restart_index) {
         i += 1;
         start = i;
         goto restart;
      }
      if (in[i + 1] == restart_index) {
         i += 2;
         start = i;
         goto restart;
      }
      if (in[i + 2] == restart_index) {
         i += 3;
         start = i;
         goto restart;
      }
      (out+j)[0] = (uint)in[i+1];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[start];
   }
}
static void translate_linesadj_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_uint2uint_first2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_uint2uint_first2last_prenable(
d10863 27
a10889 19
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
a11073 91
static void translate_linesadj_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_uint2uint_last2first_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
a11330 91
static void translate_linesadj_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+3];
      (out+i)[1] = (uint)in[i+2];
      (out+i)[2] = (uint)in[i+1];
      (out+i)[3] = (uint)in[i+0];
  }
}
static void translate_linestripadj_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+3];
      (out+j)[1] = (uint)in[i+2];
      (out+j)[2] = (uint)in[i+1];
      (out+j)[3] = (uint)in[i+0];
  }
}
static void translate_trisadj_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+4];
      (out+i)[1] = (uint)in[i+5];
      (out+i)[2] = (uint)in[i+0];
      (out+i)[3] = (uint)in[i+1];
      (out+i)[4] = (uint)in[i+2];
      (out+i)[5] = (uint)in[i+3];
  }
}
static void translate_tristripadj_uint2uint_last2first_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+5];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+1];
      (out+j)[4] = (uint)in[i+2];
      (out+j)[5] = (uint)in[i+3];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+4];
      (out+j)[1] = (uint)in[i+6];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i-2];
      (out+j)[4] = (uint)in[i+0];
      (out+j)[5] = (uint)in[i+3];
    }
  }
}
a11513 91
static void translate_linesadj_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_uint2uint_last2last_prdisable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
a11770 91
static void translate_linesadj_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=4) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
  }
}
static void translate_linestripadj_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; j+=4, i++) {
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
  }
}
static void translate_trisadj_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start; i < (out_nr+start); i+=6) { 
      (out+i)[0] = (uint)in[i+0];
      (out+i)[1] = (uint)in[i+1];
      (out+i)[2] = (uint)in[i+2];
      (out+i)[3] = (uint)in[i+3];
      (out+i)[4] = (uint)in[i+4];
      (out+i)[5] = (uint)in[i+5];
  }
}
static void translate_tristripadj_uint2uint_last2last_prenable(
    const void * _in,
    unsigned start,
    unsigned in_nr,
    unsigned out_nr,
    unsigned restart_index,
    void *_out )
{
  const uint*in = (const uint*)_in;
  uint *out = (uint*)_out;
  unsigned i, j;
  (void)j;
  for (i = start, j = 0; j < out_nr; i+=2, j+=6) { 
    if (i % 4 == 0) {
      /* even triangle */
      (out+j)[0] = (uint)in[i+0];
      (out+j)[1] = (uint)in[i+1];
      (out+j)[2] = (uint)in[i+2];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+5];
    } else {
      /* odd triangle */
      (out+j)[0] = (uint)in[i+2];
      (out+j)[1] = (uint)in[i-2];
      (out+j)[2] = (uint)in[i+0];
      (out+j)[3] = (uint)in[i+3];
      (out+j)[4] = (uint)in[i+4];
      (out+j)[5] = (uint)in[i+6];
    }
  }
}
a11785 4
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_first2first;
a11795 4
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_first2first;
generate[OUT_USHORT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_first2first;
a11805 4
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_first2last;
a11815 4
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_first2last;
generate[OUT_USHORT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_first2last;
a11825 4
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_last2first;
a11835 4
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_last2first;
generate[OUT_USHORT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_last2first;
a11845 4
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_last2last;
a11855 4
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_ushort_last2last;
generate[OUT_USHORT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_ushort_last2last;
a11865 4
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_first2first;
a11875 4
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_first2first;
generate[OUT_UINT][PV_FIRST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_first2first;
a11885 4
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_first2last;
a11895 4
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_first2last;
generate[OUT_UINT][PV_FIRST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_first2last;
a11905 4
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_last2first;
a11915 4
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_last2first;
generate[OUT_UINT][PV_LAST][PV_FIRST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_last2first;
a11925 4
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_last2last;
a11935 4
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINES_ADJACENCY] = generate_linesadj_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_LINE_STRIP_ADJACENCY] = generate_linestripadj_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLES_ADJACENCY] = generate_trisadj_uint_last2last;
generate[OUT_UINT][PV_LAST][PV_LAST][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = generate_tristripadj_uint_last2last;
a11945 4
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_first2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_first2first_prdisable;
a11955 4
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_first2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_first2first_prenable;
a11965 4
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_first2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_first2last_prdisable;
a11975 4
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_first2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_first2last_prenable;
a11985 4
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_last2first_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_last2first_prdisable;
a11995 4
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_last2first_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_last2first_prenable;
a12005 4
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_last2last_prdisable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_last2last_prdisable;
a12015 4
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2ushort_last2last_prenable;
translate[IN_UBYTE][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2ushort_last2last_prenable;
a12025 4
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_first2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_first2first_prdisable;
a12035 4
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_first2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_first2first_prenable;
a12045 4
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_first2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_first2last_prdisable;
a12055 4
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_first2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_first2last_prenable;
a12065 4
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_last2first_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_last2first_prdisable;
a12075 4
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_last2first_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_last2first_prenable;
a12085 4
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_last2last_prdisable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_last2last_prdisable;
a12095 4
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ubyte2uint_last2last_prenable;
translate[IN_UBYTE][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ubyte2uint_last2last_prenable;
a12105 4
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_first2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_first2first_prdisable;
a12115 4
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_first2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_first2first_prenable;
a12125 4
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_first2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_first2last_prdisable;
a12135 4
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_first2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_first2last_prenable;
a12145 4
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_last2first_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_last2first_prdisable;
a12155 4
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_last2first_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_last2first_prenable;
a12165 4
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_last2last_prdisable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_last2last_prdisable;
a12175 4
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2ushort_last2last_prenable;
translate[IN_USHORT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2ushort_last2last_prenable;
a12185 4
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_first2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_first2first_prdisable;
a12195 4
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_first2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_first2first_prenable;
a12205 4
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_first2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_first2last_prdisable;
a12215 4
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_first2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_first2last_prenable;
a12225 4
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_last2first_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_last2first_prdisable;
a12235 4
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_last2first_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_last2first_prenable;
a12245 4
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_last2last_prdisable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_last2last_prdisable;
a12255 4
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_ushort2uint_last2last_prenable;
translate[IN_USHORT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_ushort2uint_last2last_prenable;
a12265 4
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_first2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_first2first_prdisable;
a12275 4
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_first2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_first2first_prenable;
a12285 4
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_first2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_first2last_prdisable;
a12295 4
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_first2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_first2last_prenable;
a12305 4
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_last2first_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_last2first_prdisable;
a12315 4
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_last2first_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_last2first_prenable;
a12325 4
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_last2last_prdisable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_last2last_prdisable;
a12335 4
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2ushort_last2last_prenable;
translate[IN_UINT][OUT_USHORT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2ushort_last2last_prenable;
a12345 4
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_first2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_first2first_prdisable;
a12355 4
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_first2first_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_first2first_prenable;
a12365 4
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_first2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_first2last_prdisable;
a12375 4
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_first2last_prenable;
translate[IN_UINT][OUT_UINT][PV_FIRST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_first2last_prenable;
a12385 4
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_last2first_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_last2first_prdisable;
a12395 4
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_last2first_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_FIRST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_last2first_prenable;
a12405 4
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_last2last_prdisable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_DISABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_last2last_prdisable;
a12415 4
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINES_ADJACENCY] = translate_linesadj_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_LINE_STRIP_ADJACENCY] = translate_linestripadj_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLES_ADJACENCY] = translate_trisadj_uint2uint_last2last_prenable;
translate[IN_UINT][OUT_UINT][PV_LAST][PV_LAST][PR_ENABLE][PIPE_PRIM_TRIANGLE_STRIP_ADJACENCY] = translate_tristripadj_uint2uint_last2last_prenable;
@


1.1.1.3
log
@Import Mesa 17.1.6
@
text
@d1 1
a1 1
/* File automatically generated by u_indices_gen.py */
d34 1
d36 1
d38 1
@


