head	1.2;
access;
symbols
	mesa-17_1_6:1.1.1.3
	OPENBSD_6_1:1.1.1.2.0.2
	OPENBSD_6_1_BASE:1.1.1.2
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.1.1.1.0.6
	OPENBSD_6_0_BASE:1.1.1.1
	mesa-11_2_2:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.08.26.16.59.23;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2015.11.22.02.43.13;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.43.13;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.12.11.08.32.07;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	uuv5VTS15jglEDZU;

1.1.1.3
date	2017.08.14.09.36.46;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/**************************************************************************
 * 
 * Copyright 2009 VMware, Inc.
 * Copyright 2012 Marek Olšák <maraeo@@gmail.com>
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 **************************************************************************/

/* A simple allocator that suballocates memory from a large buffer. */

#include "pipe/p_defines.h"
#include "util/u_inlines.h"
#include "pipe/p_context.h"
#include "util/u_memory.h"
#include "util/u_math.h"

#include "u_suballoc.h"


struct u_suballocator {
   struct pipe_context *pipe;

   unsigned size;          /* Size of the whole buffer, in bytes. */
   unsigned bind;          /* Bitmask of PIPE_BIND_* flags. */
   enum pipe_resource_usage usage;
   boolean zero_buffer_memory; /* If the buffer contents should be zeroed. */

   struct pipe_resource *buffer;   /* The buffer we suballocate from. */
   unsigned offset; /* Aligned offset pointing at the first unused byte. */
};


/**
 * Create a suballocator.
 *
 * \p zero_buffer_memory determines whether the buffer contents should be
 * cleared to 0 after the allocation.
 */
struct u_suballocator *
u_suballocator_create(struct pipe_context *pipe, unsigned size, unsigned bind,
                      enum pipe_resource_usage usage,
		      boolean zero_buffer_memory)
{
   struct u_suballocator *allocator = CALLOC_STRUCT(u_suballocator);
   if (!allocator)
      return NULL;

   allocator->pipe = pipe;
   allocator->size = size;
   allocator->bind = bind;
   allocator->usage = usage;
   allocator->zero_buffer_memory = zero_buffer_memory;
   return allocator;
}

void
u_suballocator_destroy(struct u_suballocator *allocator)
{
   pipe_resource_reference(&allocator->buffer, NULL);
   FREE(allocator);
}

void
u_suballocator_alloc(struct u_suballocator *allocator, unsigned size,
                     unsigned alignment, unsigned *out_offset,
                     struct pipe_resource **outbuf)
{
   allocator->offset = align(allocator->offset, alignment);

   /* Don't allow allocations larger than the buffer size. */
   if (size > allocator->size)
      goto fail;

   /* Make sure we have enough space in the buffer. */
   if (!allocator->buffer ||
       allocator->offset + size > allocator->size) {
      /* Allocate a new buffer. */
      pipe_resource_reference(&allocator->buffer, NULL);
      allocator->offset = 0;
      allocator->buffer =
         pipe_buffer_create(allocator->pipe->screen, allocator->bind,
                            allocator->usage, allocator->size);
      if (!allocator->buffer)
         goto fail;

      /* Clear the memory if needed. */
      if (allocator->zero_buffer_memory) {
         struct pipe_transfer *transfer = NULL;
         void *ptr;

         ptr = pipe_buffer_map(allocator->pipe, allocator->buffer,
			       PIPE_TRANSFER_WRITE, &transfer);
         memset(ptr, 0, allocator->size);
         pipe_buffer_unmap(allocator->pipe, transfer);
      }
   }

   assert(allocator->offset % alignment == 0);
   assert(allocator->offset < allocator->buffer->width0);
   assert(allocator->offset + size <= allocator->buffer->width0);

   /* Return the buffer. */
   *out_offset = allocator->offset;
   pipe_resource_reference(outbuf, allocator->buffer);

   allocator->offset += size;
   return;

fail:
   pipe_resource_reference(outbuf, NULL);
}
@


1.1
log
@Initial revision
@
text
@a43 1
   unsigned alignment;     /* Alignment of each sub-allocation. */
d45 1
a45 1
   unsigned usage;         /* One of PIPE_USAGE_* flags. */
d60 2
a61 2
u_suballocator_create(struct pipe_context *pipe, unsigned size,
                      unsigned alignment, unsigned bind, unsigned usage,
d69 1
a69 2
   allocator->size = align(size, alignment);
   allocator->alignment = alignment;
d85 2
a86 1
                     unsigned *out_offset, struct pipe_resource **outbuf)
d88 1
a88 1
   unsigned alloc_size = align(size, allocator->alignment);
d91 1
a91 1
   if (alloc_size > allocator->size)
d96 1
a96 1
       allocator->offset + alloc_size > allocator->size) {
d118 1
a118 1
   assert(allocator->offset % allocator->alignment == 0);
d120 1
a120 1
   assert(allocator->offset + alloc_size <= allocator->buffer->width0);
d126 1
a126 1
   allocator->offset += alloc_size;
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 13.0.2
@
text
@d44 1
d46 1
a46 1
   enum pipe_resource_usage usage;
d61 2
a62 2
u_suballocator_create(struct pipe_context *pipe, unsigned size, unsigned bind,
                      enum pipe_resource_usage usage,
d70 2
a71 1
   allocator->size = size;
d87 1
a87 2
                     unsigned alignment, unsigned *out_offset,
                     struct pipe_resource **outbuf)
d89 1
a89 1
   allocator->offset = align(allocator->offset, alignment);
d92 1
a92 1
   if (size > allocator->size)
d97 1
a97 1
       allocator->offset + size > allocator->size) {
d119 1
a119 1
   assert(allocator->offset % alignment == 0);
d121 1
a121 1
   assert(allocator->offset + size <= allocator->buffer->width0);
d127 1
a127 1
   allocator->offset += size;
@


1.1.1.3
log
@Import Mesa 17.1.6
@
text
@a45 1
   unsigned flags;         /* bitmask of PIPE_RESOURCE_FLAG_x */
d56 2
a57 4
 * \param flags               bitmask of PIPE_RESOURCE_FLAG_x
 * \param zero_buffer_memory  determines whether the buffer contents should be
 *                            cleared to 0 after the allocation.
 *
d61 1
a61 1
                      enum pipe_resource_usage usage, unsigned flags,
a71 1
   allocator->flags = flags;
d100 3
a102 15

      struct pipe_resource templ;
      memset(&templ, 0, sizeof(templ));
      templ.target = PIPE_BUFFER;
      templ.format = PIPE_FORMAT_R8_UNORM;
      templ.bind = allocator->bind;
      templ.usage = allocator->usage;
      templ.flags = allocator->flags;
      templ.width0 = allocator->size;
      templ.height0 = 1;
      templ.depth0 = 1;
      templ.array_size = 1;

      struct pipe_screen *screen = allocator->pipe->screen;
      allocator->buffer = screen->resource_create(screen, &templ);
d108 2
a109 4
         struct pipe_context *pipe = allocator->pipe;

         if (pipe->clear_buffer) {
            unsigned clear_value = 0;
d111 4
a114 9
            pipe->clear_buffer(pipe, allocator->buffer, 0, allocator->size,
                               &clear_value, 4);
         } else {
            struct pipe_transfer *transfer = NULL;
            void *ptr = pipe_buffer_map(pipe, allocator->buffer,
                                        PIPE_TRANSFER_WRITE, &transfer);
            memset(ptr, 0, allocator->size);
            pipe_buffer_unmap(pipe, transfer);
         }
@


