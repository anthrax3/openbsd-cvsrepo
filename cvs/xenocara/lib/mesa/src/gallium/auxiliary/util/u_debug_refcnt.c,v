head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.11.22.02.42.52;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.42.52;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.18.24;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.31.59;	author jsg;	state Exp;
branches;
next	;
commitid	uuv5VTS15jglEDZU;


desc
@@


1.1
log
@Initial revision
@
text
@/**************************************************************************
 *
 * Copyright 2010 Luca Barbieri
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER(S) AND/OR ITS SUPPLIERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#if defined(DEBUG)

/* see http://www.mozilla.org/performance/refcnt-balancer.html for what do with the output
 * on Linux, use tools/addr2line.sh to postprocess it before anything else
 **/

#include <stdio.h>

#include "util/u_debug.h"
#include "util/u_debug_refcnt.h"
#include "util/u_debug_stack.h"
#include "util/u_debug_symbol.h"
#include "util/u_string.h"
#include "util/u_hash_table.h"
#include "os/os_thread.h"

int debug_refcnt_state;

FILE* stream;

/* TODO: maybe move this serial machinery to a stand-alone module and expose it? */
pipe_static_mutex(serials_mutex);

static struct util_hash_table* serials_hash;
static unsigned serials_last;

static unsigned hash_ptr(void* p)
{
   return (unsigned)(uintptr_t)p;
}

static int compare_ptr(void* a, void* b)
{
   if(a == b)
      return 0;
   else if(a < b)
      return -1;
   else
      return 1;
}

static boolean debug_serial(void* p, unsigned* pserial)
{
   unsigned serial;
   boolean found = TRUE;
#ifdef PIPE_SUBSYSTEM_WINDOWS_USER
   static boolean first = TRUE;

   if (first) {
      pipe_mutex_init(serials_mutex);
      first = FALSE;
   }
#endif

   pipe_mutex_lock(serials_mutex);
   if(!serials_hash)
      serials_hash = util_hash_table_create(hash_ptr, compare_ptr);
   serial = (unsigned)(uintptr_t)util_hash_table_get(serials_hash, p);
   if(!serial)
   {
      /* time to stop logging... (you'll have a 100 GB logfile at least at this point)
       * TODO: avoid this
       */
      serial = ++serials_last;
      if(!serial)
      {
         debug_error("More than 2^32 objects detected, aborting.\n");
         os_abort();
      }

      util_hash_table_set(serials_hash, p, (void*)(uintptr_t)serial);
      found = FALSE;
   }
   pipe_mutex_unlock(serials_mutex);
   *pserial = serial;
   return found;
}

static void debug_serial_delete(void* p)
{
   pipe_mutex_lock(serials_mutex);
   util_hash_table_remove(serials_hash, p);
   pipe_mutex_unlock(serials_mutex);
}

#define STACK_LEN 64

static void dump_stack(const char* symbols[STACK_LEN])
{
   unsigned i;
   for(i = 0; i < STACK_LEN; ++i)
   {
      if(symbols[i])
         fprintf(stream, "%s\n", symbols[i]);
   }
   fprintf(stream, "\n");
}

void debug_reference_slowpath(const struct pipe_reference* p, debug_reference_descriptor get_desc, int change)
{
   if(debug_refcnt_state < 0)
      return;

   if(!debug_refcnt_state)
   {
      const char* filename = debug_get_option("GALLIUM_REFCNT_LOG", NULL);
      if(filename && filename[0])
         stream = fopen(filename, "wt");

      if(stream)
         debug_refcnt_state = 1;
      else
         debug_refcnt_state = -1;
   }

   if(debug_refcnt_state > 0)
   {
      struct debug_stack_frame frames[STACK_LEN];
      const char* symbols[STACK_LEN];
      char buf[1024];

      unsigned i;
      unsigned refcnt = p->count;
      unsigned serial;
      boolean existing = debug_serial((void*)p, &serial);

      debug_backtrace_capture(frames, 1, STACK_LEN);
      for(i = 0; i < STACK_LEN; ++i)
      {
         if(frames[i].function)
            symbols[i] = debug_symbol_name_cached(frames[i].function);
         else
            symbols[i] = 0;
      }

      get_desc(buf, p);

      if(!existing)
      {
         fprintf(stream, "<%s> %p %u Create\n", buf, (void *) p, serial);
         dump_stack(symbols);

         /* this is there to provide a gradual change even if we don't see the initialization */
         for(i = 1; i <= refcnt - change; ++i)
         {
            fprintf(stream, "<%s> %p %u AddRef %u\n", buf, (void *) p,
                    serial, i);
            dump_stack(symbols);
         }
      }

      if(change)
      {
         fprintf(stream, "<%s> %p %u %s %u\n", buf, (void *) p, serial,
                 change > 0 ? "AddRef" : "Release", refcnt);
         dump_stack(symbols);
      }

      if(!refcnt)
      {
         debug_serial_delete((void*)p);
         fprintf(stream, "<%s> %p %u Destroy\n", buf, (void *) p, serial);
         dump_stack(symbols);
      }

      fflush(stream);
   }
}
#endif
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d82 1
a82 1
   if (!serials_hash)
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@d29 3
a31 8
/**
 * If the GALLIUM_REFCNT_LOG env var is defined as a filename, gallium
 * reference counting will be logged to the file.
 *
 * See http://www-archive.mozilla.org/performance/refcnt-balancer.html
 * for what to do with the output on Linux, use tools/addr2line.sh to
 * postprocess it before anything else.
 */
d45 1
a45 1
static FILE *stream;
d47 1
a47 3
/* TODO: maybe move this serial machinery to a stand-alone module and
 * expose it?
 */
d50 1
a50 1
static struct util_hash_table *serials_hash;
d53 1
a53 3

static unsigned
hash_ptr(void *p)
d55 1
a55 1
   return (unsigned) (uintptr_t) p;
d58 1
a58 3

static int
compare_ptr(void *a, void *b)
d60 1
a60 1
   if (a == b)
d62 1
a62 1
   else if (a < b)
d68 1
a68 6

/**
 * Return a small integer serial number for the given pointer.
 */
static boolean
debug_serial(void *p, unsigned *pserial)
d84 5
a88 5

   serial = (unsigned) (uintptr_t) util_hash_table_get(serials_hash, p);
   if (!serial) {
      /* time to stop logging... (you'll have a 100 GB logfile at least at
       * this point)  TODO: avoid this
d91 2
a92 1
      if (!serial) {
d97 1
a97 1
      util_hash_table_set(serials_hash, p, (void *) (uintptr_t) serial);
a100 1

a101 1

d105 1
a105 6

/**
 * Free the serial number for the given pointer.
 */
static void
debug_serial_delete(void *p)
a111 1

d114 1
a114 2
static void
dump_stack(const char *symbols[STACK_LEN])
d117 3
a119 2
   for (i = 0; i < STACK_LEN; ++i) {
      if (symbols[i])
d125 1
a125 15

/**
 * Log a reference count change to the log file (if enabled).
 * This is called via the pipe_reference() and debug_reference() functions,
 * basically whenever a reference count is initialized or changed.
 *
 * \param p  the refcount being changed (the value is not changed here)
 * \param get_desc  a function which will be called to print an object's
 *                  name/pointer into a string buffer during logging
 * \param change  the reference count change which must be +/-1 or 0 when
 *                creating the object and initializing the refcount.
 */
void
debug_reference_slowpath(const struct pipe_reference *p,
                         debug_reference_descriptor get_desc, int change)
d127 1
a127 4
   assert(change >= -1);
   assert(change <= 1);

   if (debug_refcnt_state < 0)
d130 4
a133 3
   if (!debug_refcnt_state) {
      const char *filename = debug_get_option("GALLIUM_REFCNT_LOG", NULL);
      if (filename && filename[0])
d136 1
a136 1
      if (stream)
d142 2
a143 1
   if (debug_refcnt_state > 0) {
d145 1
a145 1
      const char *symbols[STACK_LEN];
d147 1
d151 1
a151 1
      boolean existing = debug_serial((void *) p, &serial);
d154 3
a156 2
      for (i = 0; i < STACK_LEN; ++i) {
         if (frames[i].function)
d164 2
a165 1
      if (!existing) {
d169 3
a171 4
         /* this is here to provide a gradual change even if we don't see
          * the initialization
          */
         for (i = 1; i <= refcnt - change; ++i) {
d178 2
a179 1
      if (change) {
d185 3
a187 2
      if (!refcnt) {
         debug_serial_delete((void *) p);
d195 1
a195 2

#endif /* DEBUG */
@


