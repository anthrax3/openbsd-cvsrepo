head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	mesa-17_1_6:1.1.1.3
	OPENBSD_6_1:1.1.1.2.0.2
	OPENBSD_6_1_BASE:1.1.1.2
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.08.26.16.59.24;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2015.11.22.02.45.16;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.45.16;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.20.57;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2017.08.14.09.34.36;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/* -*- mode: C; c-file-style: "k&r"; tab-width 4; indent-tabs-mode: t; -*- */

/*
 * Copyright (C) 2014 Rob Clark <robclark@@freedesktop.org>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Authors:
 *    Rob Clark <robclark@@freedesktop.org>
 */

#include "pipe/p_state.h"
#include "util/u_blend.h"
#include "util/u_string.h"
#include "util/u_memory.h"

#include "fd4_blend.h"
#include "fd4_context.h"
#include "fd4_format.h"

static enum a4xx_rb_blend_opcode
blend_func(unsigned func)
{
	switch (func) {
	case PIPE_BLEND_ADD:
		return BLEND_DST_PLUS_SRC;
	case PIPE_BLEND_MIN:
		return BLEND_MIN_DST_SRC;
	case PIPE_BLEND_MAX:
		return BLEND_MAX_DST_SRC;
	case PIPE_BLEND_SUBTRACT:
		return BLEND_SRC_MINUS_DST;
	case PIPE_BLEND_REVERSE_SUBTRACT:
		return BLEND_DST_MINUS_SRC;
	default:
		DBG("invalid blend func: %x", func);
		return 0;
	}
}

void *
fd4_blend_state_create(struct pipe_context *pctx,
		const struct pipe_blend_state *cso)
{
	struct fd4_blend_stateobj *so;
	enum a3xx_rop_code rop = ROP_COPY;
	bool reads_dest = false;
	unsigned i, mrt_blend = 0;

	if (cso->logicop_enable) {
		rop = cso->logicop_func;  /* maps 1:1 */

		switch (cso->logicop_func) {
		case PIPE_LOGICOP_NOR:
		case PIPE_LOGICOP_AND_INVERTED:
		case PIPE_LOGICOP_AND_REVERSE:
		case PIPE_LOGICOP_INVERT:
		case PIPE_LOGICOP_XOR:
		case PIPE_LOGICOP_NAND:
		case PIPE_LOGICOP_AND:
		case PIPE_LOGICOP_EQUIV:
		case PIPE_LOGICOP_NOOP:
		case PIPE_LOGICOP_OR_INVERTED:
		case PIPE_LOGICOP_OR_REVERSE:
		case PIPE_LOGICOP_OR:
			reads_dest = true;
			break;
		}
	}

	so = CALLOC_STRUCT(fd4_blend_stateobj);
	if (!so)
		return NULL;

	so->base = *cso;

	for (i = 0; i < ARRAY_SIZE(so->rb_mrt); i++) {
		const struct pipe_rt_blend_state *rt;

		if (cso->independent_blend_enable)
			rt = &cso->rt[i];
		else
			rt = &cso->rt[0];

		so->rb_mrt[i].blend_control_rgb =
				A4XX_RB_MRT_BLEND_CONTROL_RGB_SRC_FACTOR(fd_blend_factor(rt->rgb_src_factor)) |
				A4XX_RB_MRT_BLEND_CONTROL_RGB_BLEND_OPCODE(blend_func(rt->rgb_func)) |
				A4XX_RB_MRT_BLEND_CONTROL_RGB_DEST_FACTOR(fd_blend_factor(rt->rgb_dst_factor));

		so->rb_mrt[i].blend_control_alpha =
				A4XX_RB_MRT_BLEND_CONTROL_ALPHA_SRC_FACTOR(fd_blend_factor(rt->alpha_src_factor)) |
				A4XX_RB_MRT_BLEND_CONTROL_ALPHA_BLEND_OPCODE(blend_func(rt->alpha_func)) |
				A4XX_RB_MRT_BLEND_CONTROL_ALPHA_DEST_FACTOR(fd_blend_factor(rt->alpha_dst_factor));

		so->rb_mrt[i].blend_control_no_alpha_rgb =
				A4XX_RB_MRT_BLEND_CONTROL_RGB_SRC_FACTOR(fd_blend_factor(util_blend_dst_alpha_to_one(rt->rgb_src_factor))) |
				A4XX_RB_MRT_BLEND_CONTROL_RGB_BLEND_OPCODE(blend_func(rt->rgb_func)) |
				A4XX_RB_MRT_BLEND_CONTROL_RGB_DEST_FACTOR(fd_blend_factor(util_blend_dst_alpha_to_one(rt->rgb_dst_factor)));


		so->rb_mrt[i].control =
				A4XX_RB_MRT_CONTROL_ROP_CODE(rop) |
				COND(cso->logicop_enable, A4XX_RB_MRT_CONTROL_ROP_ENABLE) |
				A4XX_RB_MRT_CONTROL_COMPONENT_ENABLE(rt->colormask);

		if (rt->blend_enable) {
			so->rb_mrt[i].control |=
					A4XX_RB_MRT_CONTROL_READ_DEST_ENABLE |
					A4XX_RB_MRT_CONTROL_BLEND |
					A4XX_RB_MRT_CONTROL_BLEND2;
			mrt_blend |= (1 << i);
		}

		if (reads_dest) {
			so->rb_mrt[i].control |= A4XX_RB_MRT_CONTROL_READ_DEST_ENABLE;
			mrt_blend |= (1 << i);
		}

		if (cso->dither)
			so->rb_mrt[i].buf_info |= A4XX_RB_MRT_BUF_INFO_DITHER_MODE(DITHER_ALWAYS);
	}

	so->rb_fs_output = A4XX_RB_FS_OUTPUT_ENABLE_BLEND(mrt_blend) |
		COND(cso->independent_blend_enable, A4XX_RB_FS_OUTPUT_INDEPENDENT_BLEND);

	return so;
}
@


1.1
log
@Initial revision
@
text
@d30 1
d63 1
a63 1
//	enum a3xx_rop_code rop = ROP_COPY;
d68 1
a68 1
//		rop = cso->logicop_func;  /* maps 1:1 */
d102 1
a102 1
		so->rb_mrt[i].blend_control =
d105 3
a107 1
				A4XX_RB_MRT_BLEND_CONTROL_RGB_DEST_FACTOR(fd_blend_factor(rt->rgb_dst_factor)) |
d112 6
d119 2
a120 1
				0xc00 | /* XXX ROP_CODE ?? */
d131 1
a131 1
		if (reads_dest)
d133 2
d140 2
a141 1
	so->rb_fs_output = A4XX_RB_FS_OUTPUT_ENABLE_BLEND(mrt_blend);
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@a29 1
#include "util/u_blend.h"
d62 1
a62 1
	enum a3xx_rop_code rop = ROP_COPY;
d67 1
a67 1
		rop = cso->logicop_func;  /* maps 1:1 */
d101 1
a101 1
		so->rb_mrt[i].blend_control_rgb =
d104 1
a104 3
				A4XX_RB_MRT_BLEND_CONTROL_RGB_DEST_FACTOR(fd_blend_factor(rt->rgb_dst_factor));

		so->rb_mrt[i].blend_control_alpha =
a108 6
		so->rb_mrt[i].blend_control_no_alpha_rgb =
				A4XX_RB_MRT_BLEND_CONTROL_RGB_SRC_FACTOR(fd_blend_factor(util_blend_dst_alpha_to_one(rt->rgb_src_factor))) |
				A4XX_RB_MRT_BLEND_CONTROL_RGB_BLEND_OPCODE(blend_func(rt->rgb_func)) |
				A4XX_RB_MRT_BLEND_CONTROL_RGB_DEST_FACTOR(fd_blend_factor(util_blend_dst_alpha_to_one(rt->rgb_dst_factor)));


d110 1
a110 2
				A4XX_RB_MRT_CONTROL_ROP_CODE(rop) |
				COND(cso->logicop_enable, A4XX_RB_MRT_CONTROL_ROP_ENABLE) |
d121 1
a121 1
		if (reads_dest) {
a122 2
			mrt_blend |= (1 << i);
		}
d128 1
a128 2
	so->rb_fs_output = A4XX_RB_FS_OUTPUT_ENABLE_BLEND(mrt_blend) |
		COND(cso->independent_blend_enable, A4XX_RB_FS_OUTPUT_INDEPENDENT_BLEND);
@


1.1.1.3
log
@Import Mesa 17.1.6
@
text
@d38 1
a38 1
static enum a3xx_rb_blend_opcode
@


