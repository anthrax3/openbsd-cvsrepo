head	1.2;
access;
symbols
	mesa-17_1_6:1.1.1.4
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.08.26.16.59.24;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2015.11.22.02.45.14;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.45.14;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.20.54;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.29.51;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.08.14.09.34.20;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/* -*- mode: C; c-file-style: "k&r"; tab-width 4; indent-tabs-mode: t; -*- */

/*
 * Copyright (C) 2012 Rob Clark <robclark@@freedesktop.org>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Authors:
 *    Rob Clark <robclark@@freedesktop.org>
 */

#include "pipe/p_state.h"
#include "util/u_string.h"
#include "util/u_memory.h"
#include "util/u_prim.h"
#include "util/u_format.h"

#include "freedreno_draw.h"
#include "freedreno_context.h"
#include "freedreno_state.h"
#include "freedreno_resource.h"
#include "freedreno_query_hw.h"
#include "freedreno_util.h"

static void
resource_read(struct fd_batch *batch, struct pipe_resource *prsc)
{
	if (!prsc)
		return;
	fd_batch_resource_used(batch, fd_resource(prsc), false);
}

static void
resource_written(struct fd_batch *batch, struct pipe_resource *prsc)
{
	if (!prsc)
		return;
	fd_batch_resource_used(batch, fd_resource(prsc), true);
}

static void
fd_draw_vbo(struct pipe_context *pctx, const struct pipe_draw_info *info)
{
	struct fd_context *ctx = fd_context(pctx);
	struct fd_batch *batch = ctx->batch;
	struct pipe_framebuffer_state *pfb = &batch->framebuffer;
	struct pipe_scissor_state *scissor = fd_context_get_scissor(ctx);
	unsigned i, prims, buffers = 0;

	/* if we supported transform feedback, we'd have to disable this: */
	if (((scissor->maxx - scissor->minx) *
			(scissor->maxy - scissor->miny)) == 0) {
		return;
	}

	/* TODO: push down the region versions into the tiles */
	if (!fd_render_condition_check(pctx))
		return;

	/* emulate unsupported primitives: */
	if (!fd_supported_prim(ctx, info->mode)) {
		if (ctx->streamout.num_targets > 0)
			debug_error("stream-out with emulated prims");
		util_primconvert_save_index_buffer(ctx->primconvert, &ctx->indexbuf);
		util_primconvert_save_rasterizer_state(ctx->primconvert, ctx->rasterizer);
		util_primconvert_draw_vbo(ctx->primconvert, info);
		return;
	}

	if (ctx->in_blit) {
		fd_batch_reset(batch);
		ctx->dirty = ~0;
	}

	batch->blit = ctx->in_blit;
	batch->back_blit = ctx->in_shadow;

	/* NOTE: needs to be before resource_written(batch->query_buf), otherwise
	 * query_buf may not be created yet.
	 */
	fd_hw_query_set_stage(batch, batch->draw, FD_STAGE_DRAW);

	/*
	 * Figure out the buffers/features we need:
	 */

	pipe_mutex_lock(ctx->screen->lock);

	if (fd_depth_enabled(ctx)) {
		buffers |= FD_BUFFER_DEPTH;
		resource_written(batch, pfb->zsbuf->texture);
		batch->gmem_reason |= FD_GMEM_DEPTH_ENABLED;
	}

	if (fd_stencil_enabled(ctx)) {
		buffers |= FD_BUFFER_STENCIL;
		resource_written(batch, pfb->zsbuf->texture);
		batch->gmem_reason |= FD_GMEM_STENCIL_ENABLED;
	}

	if (fd_logicop_enabled(ctx))
		batch->gmem_reason |= FD_GMEM_LOGICOP_ENABLED;

	for (i = 0; i < pfb->nr_cbufs; i++) {
		struct pipe_resource *surf;

		if (!pfb->cbufs[i])
			continue;

		surf = pfb->cbufs[i]->texture;

		resource_written(batch, surf);
		buffers |= PIPE_CLEAR_COLOR0 << i;

		if (surf->nr_samples > 1)
			batch->gmem_reason |= FD_GMEM_MSAA_ENABLED;

		if (fd_blend_enabled(ctx, i))
			batch->gmem_reason |= FD_GMEM_BLEND_ENABLED;
	}

	foreach_bit(i, ctx->constbuf[PIPE_SHADER_VERTEX].enabled_mask)
		resource_read(batch, ctx->constbuf[PIPE_SHADER_VERTEX].cb[i].buffer);
	foreach_bit(i, ctx->constbuf[PIPE_SHADER_FRAGMENT].enabled_mask)
		resource_read(batch, ctx->constbuf[PIPE_SHADER_FRAGMENT].cb[i].buffer);

	/* Mark VBOs as being read */
	foreach_bit(i, ctx->vtx.vertexbuf.enabled_mask) {
		assert(!ctx->vtx.vertexbuf.vb[i].user_buffer);
		resource_read(batch, ctx->vtx.vertexbuf.vb[i].buffer);
	}

	/* Mark index buffer as being read */
	resource_read(batch, ctx->indexbuf.buffer);

	/* Mark textures as being read */
	foreach_bit(i, ctx->verttex.valid_textures)
		resource_read(batch, ctx->verttex.textures[i]->texture);
	foreach_bit(i, ctx->fragtex.valid_textures)
		resource_read(batch, ctx->fragtex.textures[i]->texture);

	/* Mark streamout buffers as being written.. */
	for (i = 0; i < ctx->streamout.num_targets; i++)
		if (ctx->streamout.targets[i])
			resource_written(batch, ctx->streamout.targets[i]->buffer);

	resource_written(batch, batch->query_buf);

	pipe_mutex_unlock(ctx->screen->lock);

	batch->num_draws++;

	prims = u_reduced_prims_for_vertices(info->mode, info->count);

	ctx->stats.draw_calls++;

	/* TODO prims_emitted should be clipped when the stream-out buffer is
	 * not large enough.  See max_tf_vtx().. probably need to move that
	 * into common code.  Although a bit more annoying since a2xx doesn't
	 * use ir3 so no common way to get at the pipe_stream_output_info
	 * which is needed for this calculation.
	 */
	if (ctx->streamout.num_targets > 0)
		ctx->stats.prims_emitted += prims;
	ctx->stats.prims_generated += prims;

	/* any buffers that haven't been cleared yet, we need to restore: */
	batch->restore |= buffers & (FD_BUFFER_ALL & ~batch->cleared);
	/* and any buffers used, need to be resolved: */
	batch->resolve |= buffers;

	DBG("%p: %x %ux%u num_draws=%u (%s/%s)", batch, buffers,
		pfb->width, pfb->height, batch->num_draws,
		util_format_short_name(pipe_surface_format(pfb->cbufs[0])),
		util_format_short_name(pipe_surface_format(pfb->zsbuf)));

	if (ctx->draw_vbo(ctx, info))
		batch->needs_flush = true;

	for (i = 0; i < ctx->streamout.num_targets; i++)
		ctx->streamout.offsets[i] += info->count;

	if (fd_mesa_debug & FD_DBG_DDRAW)
		ctx->dirty = 0xffffffff;

	fd_batch_check_size(batch);
}

/* Generic clear implementation (partially) using u_blitter: */
static void
fd_blitter_clear(struct pipe_context *pctx, unsigned buffers,
		const union pipe_color_union *color, double depth, unsigned stencil)
{
	struct fd_context *ctx = fd_context(pctx);
	struct pipe_framebuffer_state *pfb = &ctx->batch->framebuffer;
	struct blitter_context *blitter = ctx->blitter;

	fd_blitter_pipe_begin(ctx, false, true, FD_STAGE_CLEAR);

	util_blitter_common_clear_setup(blitter, pfb->width, pfb->height,
			buffers, NULL, NULL);

	struct pipe_stencil_ref sr = {
		.ref_value = { stencil & 0xff }
	};
	pctx->set_stencil_ref(pctx, &sr);

	struct pipe_constant_buffer cb = {
		.buffer_size = 16,
		.user_buffer = &color->ui,
	};
	pctx->set_constant_buffer(pctx, PIPE_SHADER_FRAGMENT, 0, &cb);

	if (!ctx->clear_rs_state) {
		const struct pipe_rasterizer_state tmpl = {
			.cull_face = PIPE_FACE_NONE,
			.half_pixel_center = 1,
			.bottom_edge_rule = 1,
			.flatshade = 1,
			.depth_clip = 1,
		};
		ctx->clear_rs_state = pctx->create_rasterizer_state(pctx, &tmpl);
	}
	pctx->bind_rasterizer_state(pctx, ctx->clear_rs_state);

	struct pipe_viewport_state vp = {
		.scale     = { 0.5f * pfb->width, -0.5f * pfb->height, depth },
		.translate = { 0.5f * pfb->width,  0.5f * pfb->height, 0.0f },
	};
	pctx->set_viewport_states(pctx, 0, 1, &vp);

	pctx->bind_vertex_elements_state(pctx, ctx->solid_vbuf_state.vtx);
	pctx->set_vertex_buffers(pctx, blitter->vb_slot, 1,
			&ctx->solid_vbuf_state.vertexbuf.vb[0]);
	pctx->set_stream_output_targets(pctx, 0, NULL, NULL);
	pctx->bind_vs_state(pctx, ctx->solid_prog.vp);
	pctx->bind_fs_state(pctx, ctx->solid_prog.fp);

	struct pipe_draw_info info = {
		.mode = PIPE_PRIM_MAX,    /* maps to DI_PT_RECTLIST */
		.count = 2,
		.max_index = 1,
		.instance_count = 1,
	};
	ctx->draw_vbo(ctx, &info);

	util_blitter_restore_constant_buffer_state(blitter);
	util_blitter_restore_vertex_states(blitter);
	util_blitter_restore_fragment_states(blitter);
	util_blitter_restore_render_cond(blitter);
	util_blitter_unset_running_flag(blitter);

	fd_blitter_pipe_end(ctx);
}

/* TODO figure out how to make better use of existing state mechanism
 * for clear (and possibly gmem->mem / mem->gmem) so we can (a) keep
 * track of what state really actually changes, and (b) reduce the code
 * in the a2xx/a3xx parts.
 */

static void
fd_clear(struct pipe_context *pctx, unsigned buffers,
		const union pipe_color_union *color, double depth, unsigned stencil)
{
	struct fd_context *ctx = fd_context(pctx);
	struct fd_batch *batch = ctx->batch;
	struct pipe_framebuffer_state *pfb = &batch->framebuffer;
	struct pipe_scissor_state *scissor = fd_context_get_scissor(ctx);
	unsigned cleared_buffers;
	int i;

	/* TODO: push down the region versions into the tiles */
	if (!fd_render_condition_check(pctx))
		return;

	if (ctx->in_blit) {
		fd_batch_reset(batch);
		ctx->dirty = ~0;
	}

	/* for bookkeeping about which buffers have been cleared (and thus
	 * can fully or partially skip mem2gmem) we need to ignore buffers
	 * that have already had a draw, in case apps do silly things like
	 * clear after draw (ie. if you only clear the color buffer, but
	 * something like alpha-test causes side effects from the draw in
	 * the depth buffer, etc)
	 */
	cleared_buffers = buffers & (FD_BUFFER_ALL & ~batch->restore);

	/* do we have full-screen scissor? */
	if (!memcmp(scissor, &ctx->disabled_scissor, sizeof(*scissor))) {
		batch->cleared |= cleared_buffers;
	} else {
		batch->partial_cleared |= cleared_buffers;
		if (cleared_buffers & PIPE_CLEAR_COLOR)
			batch->cleared_scissor.color = *scissor;
		if (cleared_buffers & PIPE_CLEAR_DEPTH)
			batch->cleared_scissor.depth = *scissor;
		if (cleared_buffers & PIPE_CLEAR_STENCIL)
			batch->cleared_scissor.stencil = *scissor;
	}
	batch->resolve |= buffers;
	batch->needs_flush = true;

	pipe_mutex_lock(ctx->screen->lock);

	if (buffers & PIPE_CLEAR_COLOR)
		for (i = 0; i < pfb->nr_cbufs; i++)
			if (buffers & (PIPE_CLEAR_COLOR0 << i))
				resource_written(batch, pfb->cbufs[i]->texture);

	if (buffers & (PIPE_CLEAR_DEPTH | PIPE_CLEAR_STENCIL)) {
		resource_written(batch, pfb->zsbuf->texture);
		batch->gmem_reason |= FD_GMEM_CLEARS_DEPTH_STENCIL;
	}

	resource_written(batch, batch->query_buf);

	pipe_mutex_unlock(ctx->screen->lock);

	DBG("%p: %x %ux%u depth=%f, stencil=%u (%s/%s)", batch, buffers,
		pfb->width, pfb->height, depth, stencil,
		util_format_short_name(pipe_surface_format(pfb->cbufs[0])),
		util_format_short_name(pipe_surface_format(pfb->zsbuf)));

	/* if per-gen backend doesn't implement ctx->clear() generic
	 * blitter clear:
	 */
	if (!ctx->clear) {
		fd_blitter_clear(pctx, buffers, color, depth, stencil);
		return;
	}

	fd_hw_query_set_stage(batch, batch->draw, FD_STAGE_CLEAR);

	ctx->clear(ctx, buffers, color, depth, stencil);

	ctx->dirty |= FD_DIRTY_ZSA |
			FD_DIRTY_VIEWPORT |
			FD_DIRTY_RASTERIZER |
			FD_DIRTY_SAMPLE_MASK |
			FD_DIRTY_PROG |
			FD_DIRTY_CONSTBUF |
			FD_DIRTY_BLEND |
			FD_DIRTY_FRAMEBUFFER;

	if (fd_mesa_debug & FD_DBG_DCLEAR)
		ctx->dirty = 0xffffffff;
}

static void
fd_clear_render_target(struct pipe_context *pctx, struct pipe_surface *ps,
		const union pipe_color_union *color,
		unsigned x, unsigned y, unsigned w, unsigned h,
		bool render_condition_enabled)
{
	DBG("TODO: x=%u, y=%u, w=%u, h=%u", x, y, w, h);
}

static void
fd_clear_depth_stencil(struct pipe_context *pctx, struct pipe_surface *ps,
		unsigned buffers, double depth, unsigned stencil,
		unsigned x, unsigned y, unsigned w, unsigned h,
		bool render_condition_enabled)
{
	DBG("TODO: buffers=%u, depth=%f, stencil=%u, x=%u, y=%u, w=%u, h=%u",
			buffers, depth, stencil, x, y, w, h);
}

void
fd_draw_init(struct pipe_context *pctx)
{
	pctx->draw_vbo = fd_draw_vbo;
	pctx->clear = fd_clear;
	pctx->clear_render_target = fd_clear_render_target;
	pctx->clear_depth_stencil = fd_clear_depth_stencil;
}
@


1.1
log
@Initial revision
@
text
@d43 1
a43 2
resource_used(struct fd_context *ctx, struct pipe_resource *prsc,
		enum fd_resource_status status)
a44 2
	struct fd_resource *rsc;

d47 1
a47 13

	rsc = fd_resource(prsc);
	rsc->status |= status;
	if (rsc->stencil)
		rsc->stencil->status |= status;

	/* TODO resources can actually be shared across contexts,
	 * so I'm not sure a single list-head will do the trick?
	 */
	debug_assert((rsc->pending_ctx == ctx) || !rsc->pending_ctx);
	list_delinit(&rsc->list);
	list_addtail(&rsc->list, &ctx->used_resources);
	rsc->pending_ctx = ctx;
d51 1
a51 1
resource_read(struct fd_context *ctx, struct pipe_resource *prsc)
d53 3
a55 7
	resource_used(ctx, prsc, FD_PENDING_READ);
}

static void
resource_written(struct fd_context *ctx, struct pipe_resource *prsc)
{
	resource_used(ctx, prsc, FD_PENDING_WRITE);
d62 2
a63 1
	struct pipe_framebuffer_state *pfb = &ctx->framebuffer;
d73 4
d87 12
a98 1
	ctx->needs_flush = true;
d104 2
d108 2
a109 2
		resource_written(ctx, pfb->zsbuf->texture);
		ctx->gmem_reason |= FD_GMEM_DEPTH_ENABLED;
d114 2
a115 2
		resource_written(ctx, pfb->zsbuf->texture);
		ctx->gmem_reason |= FD_GMEM_STENCIL_ENABLED;
d119 1
a119 1
		ctx->gmem_reason |= FD_GMEM_LOGICOP_ENABLED;
d129 1
a129 1
		resource_written(ctx, surf);
d133 1
a133 1
			ctx->gmem_reason |= FD_GMEM_MSAA_ENABLED;
d136 1
a136 1
			ctx->gmem_reason |= FD_GMEM_BLEND_ENABLED;
d139 4
a142 5
	/* Skip over buffer 0, that is sent along with the command stream */
	for (i = 1; i < PIPE_MAX_CONSTANT_BUFFERS; i++) {
		resource_read(ctx, ctx->constbuf[PIPE_SHADER_VERTEX].cb[i].buffer);
		resource_read(ctx, ctx->constbuf[PIPE_SHADER_FRAGMENT].cb[i].buffer);
	}
d145 1
a145 1
	for (i = 0; i < ctx->vtx.vertexbuf.count; i++) {
d147 1
a147 1
		resource_read(ctx, ctx->vtx.vertexbuf.vb[i].buffer);
d151 1
a151 1
	resource_read(ctx, ctx->indexbuf.buffer);
d154 4
a157 6
	for (i = 0; i < ctx->verttex.num_textures; i++)
		if (ctx->verttex.textures[i])
			resource_read(ctx, ctx->verttex.textures[i]->texture);
	for (i = 0; i < ctx->fragtex.num_textures; i++)
		if (ctx->fragtex.textures[i])
			resource_read(ctx, ctx->fragtex.textures[i]->texture);
d162 3
a164 1
			resource_written(ctx, ctx->streamout.targets[i]->buffer);
d166 3
a168 1
	ctx->num_draws++;
d173 10
a182 1
	ctx->stats.prims_emitted += prims;
d185 1
a185 1
	ctx->restore |= buffers & (FD_BUFFER_ALL & ~ctx->cleared);
d187 1
a187 1
	ctx->resolve |= buffers;
d189 2
a190 1
	DBG("%x num_draws=%u (%s/%s)", buffers, ctx->num_draws,
d194 2
a195 2
	fd_hw_query_set_stage(ctx, ctx->ring, FD_STAGE_DRAW);
	ctx->draw_vbo(ctx, info);
d198 1
a198 1
		ctx->streamout.offsets[i] += prims;
d200 71
a270 12
	/* if an app (or, well, piglit test) does many thousands of draws
	 * without flush (or anything which implicitly flushes, like
	 * changing render targets), we can exceed the ringbuffer size.
	 * Since we don't currently have a sane way to wrapparound, and
	 * we use the same buffer for both draw and tiling commands, for
	 * now we need to do this hack and trigger flush if we are running
	 * low on remaining space for cmds:
	 */
	if (((ctx->ring->cur - ctx->ring->start) >
				(ctx->ring->size/4 - FD_TILING_COMMANDS_DWORDS)) ||
			(fd_mesa_debug & FD_DBG_FLUSH))
		fd_context_render(pctx);
d284 2
a285 1
	struct pipe_framebuffer_state *pfb = &ctx->framebuffer;
d290 9
d306 1
a306 1
	cleared_buffers = buffers & (FD_BUFFER_ALL & ~ctx->restore);
d310 1
a310 1
		ctx->cleared |= cleared_buffers;
d312 1
a312 1
		ctx->partial_cleared |= cleared_buffers;
d314 1
a314 1
			ctx->cleared_scissor.color = *scissor;
d316 1
a316 1
			ctx->cleared_scissor.depth = *scissor;
d318 1
a318 1
			ctx->cleared_scissor.stencil = *scissor;
d320 4
a323 2
	ctx->resolve |= buffers;
	ctx->needs_flush = true;
d328 1
a328 1
				resource_written(ctx, pfb->cbufs[i]->texture);
d331 2
a332 2
		resource_written(ctx, pfb->zsbuf->texture);
		ctx->gmem_reason |= FD_GMEM_CLEARS_DEPTH_STENCIL;
d335 6
a340 1
	DBG("%x depth=%f, stencil=%u (%s/%s)", buffers, depth, stencil,
d344 9
a352 1
	fd_hw_query_set_stage(ctx, ctx->ring, FD_STAGE_CLEAR);
d372 2
a373 1
		unsigned x, unsigned y, unsigned w, unsigned h)
d381 2
a382 1
		unsigned x, unsigned y, unsigned w, unsigned h)
a390 2
	list_inithead(&fd_context(pctx)->used_resources);

@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@a90 4
	/* TODO: push down the region versions into the tiles */
	if (!fd_render_condition_check(pctx))
		return;

a189 3
	if (fd_mesa_debug & FD_DBG_DDRAW)
		ctx->dirty = 0xffffffff;

a218 4

	/* TODO: push down the region versions into the tiles */
	if (!fd_render_condition_check(pctx))
		return;
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@d43 2
a44 1
resource_read(struct fd_batch *batch, struct pipe_resource *prsc)
d46 2
d50 13
a62 1
	fd_batch_resource_used(batch, fd_resource(prsc), false);
d66 1
a66 1
resource_written(struct fd_batch *batch, struct pipe_resource *prsc)
d68 7
a74 3
	if (!prsc)
		return;
	fd_batch_resource_used(batch, fd_resource(prsc), true);
d81 1
a81 2
	struct fd_batch *batch = ctx->batch;
	struct pipe_framebuffer_state *pfb = &batch->framebuffer;
d105 1
a105 12
	if (ctx->in_blit) {
		fd_batch_reset(batch);
		ctx->dirty = ~0;
	}

	batch->blit = ctx->in_blit;
	batch->back_blit = ctx->in_shadow;

	/* NOTE: needs to be before resource_written(batch->query_buf), otherwise
	 * query_buf may not be created yet.
	 */
	fd_hw_query_set_stage(batch, batch->draw, FD_STAGE_DRAW);
a110 2
	pipe_mutex_lock(ctx->screen->lock);

d113 2
a114 2
		resource_written(batch, pfb->zsbuf->texture);
		batch->gmem_reason |= FD_GMEM_DEPTH_ENABLED;
d119 2
a120 2
		resource_written(batch, pfb->zsbuf->texture);
		batch->gmem_reason |= FD_GMEM_STENCIL_ENABLED;
d124 1
a124 1
		batch->gmem_reason |= FD_GMEM_LOGICOP_ENABLED;
d134 1
a134 1
		resource_written(batch, surf);
d138 1
a138 1
			batch->gmem_reason |= FD_GMEM_MSAA_ENABLED;
d141 1
a141 1
			batch->gmem_reason |= FD_GMEM_BLEND_ENABLED;
d144 5
a148 4
	foreach_bit(i, ctx->constbuf[PIPE_SHADER_VERTEX].enabled_mask)
		resource_read(batch, ctx->constbuf[PIPE_SHADER_VERTEX].cb[i].buffer);
	foreach_bit(i, ctx->constbuf[PIPE_SHADER_FRAGMENT].enabled_mask)
		resource_read(batch, ctx->constbuf[PIPE_SHADER_FRAGMENT].cb[i].buffer);
d151 1
a151 1
	foreach_bit(i, ctx->vtx.vertexbuf.enabled_mask) {
d153 1
a153 1
		resource_read(batch, ctx->vtx.vertexbuf.vb[i].buffer);
d157 1
a157 1
	resource_read(batch, ctx->indexbuf.buffer);
d160 6
a165 4
	foreach_bit(i, ctx->verttex.valid_textures)
		resource_read(batch, ctx->verttex.textures[i]->texture);
	foreach_bit(i, ctx->fragtex.valid_textures)
		resource_read(batch, ctx->fragtex.textures[i]->texture);
d170 1
a170 3
			resource_written(batch, ctx->streamout.targets[i]->buffer);

	resource_written(batch, batch->query_buf);
d172 1
a172 3
	pipe_mutex_unlock(ctx->screen->lock);

	batch->num_draws++;
d177 1
a177 10

	/* TODO prims_emitted should be clipped when the stream-out buffer is
	 * not large enough.  See max_tf_vtx().. probably need to move that
	 * into common code.  Although a bit more annoying since a2xx doesn't
	 * use ir3 so no common way to get at the pipe_stream_output_info
	 * which is needed for this calculation.
	 */
	if (ctx->streamout.num_targets > 0)
		ctx->stats.prims_emitted += prims;
	ctx->stats.prims_generated += prims;
d180 1
a180 1
	batch->restore |= buffers & (FD_BUFFER_ALL & ~batch->cleared);
d182 1
a182 1
	batch->resolve |= buffers;
d184 1
a184 2
	DBG("%p: %x %ux%u num_draws=%u (%s/%s)", batch, buffers,
		pfb->width, pfb->height, batch->num_draws,
d188 2
a189 2
	if (ctx->draw_vbo(ctx, info))
		batch->needs_flush = true;
d192 1
a192 1
		ctx->streamout.offsets[i] += info->count;
d197 12
a208 68
	fd_batch_check_size(batch);
}

/* Generic clear implementation (partially) using u_blitter: */
static void
fd_blitter_clear(struct pipe_context *pctx, unsigned buffers,
		const union pipe_color_union *color, double depth, unsigned stencil)
{
	struct fd_context *ctx = fd_context(pctx);
	struct pipe_framebuffer_state *pfb = &ctx->batch->framebuffer;
	struct blitter_context *blitter = ctx->blitter;

	fd_blitter_pipe_begin(ctx, false, true, FD_STAGE_CLEAR);

	util_blitter_common_clear_setup(blitter, pfb->width, pfb->height,
			buffers, NULL, NULL);

	struct pipe_stencil_ref sr = {
		.ref_value = { stencil & 0xff }
	};
	pctx->set_stencil_ref(pctx, &sr);

	struct pipe_constant_buffer cb = {
		.buffer_size = 16,
		.user_buffer = &color->ui,
	};
	pctx->set_constant_buffer(pctx, PIPE_SHADER_FRAGMENT, 0, &cb);

	if (!ctx->clear_rs_state) {
		const struct pipe_rasterizer_state tmpl = {
			.cull_face = PIPE_FACE_NONE,
			.half_pixel_center = 1,
			.bottom_edge_rule = 1,
			.flatshade = 1,
			.depth_clip = 1,
		};
		ctx->clear_rs_state = pctx->create_rasterizer_state(pctx, &tmpl);
	}
	pctx->bind_rasterizer_state(pctx, ctx->clear_rs_state);

	struct pipe_viewport_state vp = {
		.scale     = { 0.5f * pfb->width, -0.5f * pfb->height, depth },
		.translate = { 0.5f * pfb->width,  0.5f * pfb->height, 0.0f },
	};
	pctx->set_viewport_states(pctx, 0, 1, &vp);

	pctx->bind_vertex_elements_state(pctx, ctx->solid_vbuf_state.vtx);
	pctx->set_vertex_buffers(pctx, blitter->vb_slot, 1,
			&ctx->solid_vbuf_state.vertexbuf.vb[0]);
	pctx->set_stream_output_targets(pctx, 0, NULL, NULL);
	pctx->bind_vs_state(pctx, ctx->solid_prog.vp);
	pctx->bind_fs_state(pctx, ctx->solid_prog.fp);

	struct pipe_draw_info info = {
		.mode = PIPE_PRIM_MAX,    /* maps to DI_PT_RECTLIST */
		.count = 2,
		.max_index = 1,
		.instance_count = 1,
	};
	ctx->draw_vbo(ctx, &info);

	util_blitter_restore_constant_buffer_state(blitter);
	util_blitter_restore_vertex_states(blitter);
	util_blitter_restore_fragment_states(blitter);
	util_blitter_restore_render_cond(blitter);
	util_blitter_unset_running_flag(blitter);

	fd_blitter_pipe_end(ctx);
d222 1
a222 2
	struct fd_batch *batch = ctx->batch;
	struct pipe_framebuffer_state *pfb = &batch->framebuffer;
a230 5
	if (ctx->in_blit) {
		fd_batch_reset(batch);
		ctx->dirty = ~0;
	}

d238 1
a238 1
	cleared_buffers = buffers & (FD_BUFFER_ALL & ~batch->restore);
d242 1
a242 1
		batch->cleared |= cleared_buffers;
d244 1
a244 1
		batch->partial_cleared |= cleared_buffers;
d246 1
a246 1
			batch->cleared_scissor.color = *scissor;
d248 1
a248 1
			batch->cleared_scissor.depth = *scissor;
d250 1
a250 1
			batch->cleared_scissor.stencil = *scissor;
d252 2
a253 4
	batch->resolve |= buffers;
	batch->needs_flush = true;

	pipe_mutex_lock(ctx->screen->lock);
d258 1
a258 1
				resource_written(batch, pfb->cbufs[i]->texture);
d261 2
a262 2
		resource_written(batch, pfb->zsbuf->texture);
		batch->gmem_reason |= FD_GMEM_CLEARS_DEPTH_STENCIL;
d265 1
a265 6
	resource_written(batch, batch->query_buf);

	pipe_mutex_unlock(ctx->screen->lock);

	DBG("%p: %x %ux%u depth=%f, stencil=%u (%s/%s)", batch, buffers,
		pfb->width, pfb->height, depth, stencil,
d269 1
a269 9
	/* if per-gen backend doesn't implement ctx->clear() generic
	 * blitter clear:
	 */
	if (!ctx->clear) {
		fd_blitter_clear(pctx, buffers, color, depth, stencil);
		return;
	}

	fd_hw_query_set_stage(batch, batch->draw, FD_STAGE_CLEAR);
d289 1
a289 2
		unsigned x, unsigned y, unsigned w, unsigned h,
		bool render_condition_enabled)
d297 1
a297 2
		unsigned x, unsigned y, unsigned w, unsigned h,
		bool render_condition_enabled)
d306 2
@


1.1.1.4
log
@Import Mesa 17.1.6
@
text
@a33 1
#include "util/u_helpers.h"
a86 8
	/* Upload a user index buffer. */
	struct pipe_index_buffer ibuffer_saved = {};
	if (info->indexed && ctx->indexbuf.user_buffer &&
	    !util_save_and_upload_index_buffer(pctx, info, &ctx->indexbuf,
					       &ibuffer_saved)) {
		return;
	}

d104 1
a104 1
	mtx_lock(&ctx->screen->lock);
d166 1
a166 1
	mtx_unlock(&ctx->screen->lock);
a203 3

	if (info->indexed && ibuffer_saved.user_buffer)
           pctx->set_index_buffer(pctx, &ibuffer_saved);
a266 2
	util_blitter_restore_textures(blitter);
	util_blitter_restore_fb_state(blitter);
d323 1
a323 1
	mtx_lock(&ctx->screen->lock);
d337 1
a337 1
	mtx_unlock(&ctx->screen->lock);
@


