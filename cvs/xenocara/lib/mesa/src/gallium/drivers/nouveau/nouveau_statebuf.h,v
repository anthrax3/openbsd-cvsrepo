head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.6
	OPENBSD_6_2_BASE:1.1.1.2
	mesa-17_1_6:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.2
	OPENBSD_6_1_BASE:1.1.1.2
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.11.22.02.44.49;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.44.49;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.20.27;	author jsg;	state Exp;
branches;
next	;
commitid	OwGfrJACrYJkCVJ4;


desc
@@


1.1
log
@Initial revision
@
text
@#ifndef __NOUVEAU_STATEBUF_H__
#define __NOUVEAU_STATEBUF_H__

/* state buffers: lightweight state objects interface */
/* relocations are not supported, but Gallium CSOs don't require them */

struct nouveau_statebuf_builder
{
	uint32_t* p;
#ifdef DEBUG
	uint32_t* pend;
#endif
};

#ifdef DEBUG
#define sb_init(var) {var, var + sizeof(var) / sizeof((var)[0])}
#define sb_data(sb, v) do {assert((sb).p != (sb).pend);  *(sb).p++ = (v);} while(0)
#else
#define sb_init(var) {var}
#define sb_data(sb, v) *(sb).p++ = (v)
#endif

static inline uint32_t sb_header(unsigned subc, unsigned mthd, unsigned size)
{
	return (size << 18) | (subc << 13) | mthd;
}

#define sb_method(sb, v, n)  sb_data(sb, sb_header(SUBC_3D(v), n));

#define sb_len(sb, var) ((sb).p - (var))
#define sb_emit(push, sb_buf, sb_len) do {PUSH_SPACE((push), (sb_len)); PUSH_DATAp((push), (sb_buf), (sb_len)); } while(0)
#endif
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d9 1
a9 1
   uint32_t* p;
d11 1
a11 1
   uint32_t* pend;
d25 1
a25 1
   return (size << 18) | (subc << 13) | mthd;
@

