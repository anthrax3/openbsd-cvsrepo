head	1.1;
branch	1.1.1;
access;
symbols
	mesa-13_0_6:1.1.1.1
	mesa-13_0_5:1.1.1.1
	mesa-13_0_3:1.1.1.1
	mesa-13_0_2:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.6
	OPENBSD_6_0_BASE:1.1.1.1
	mesa-11_2_2:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2015.11.22.02.45.25;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.45.25;	author jsg;	state Exp;
branches;
next	;
commitid	bJUptkbooQfJPk5r;


desc
@@


1.1
log
@Initial revision
@
text
@                              RBUG PIPE DRIVER


= About =

This directory contains a Gallium3D remote debugger pipe driver.
It provides remote debugging functionality.


= Usage =

Do

   GALLIUM_RBUG=true progs/trivial/tri

which should open gallium remote debugging session. While the program is running
you can launch the small remote debugging application from progs/rbug. More
information is in that directory. Also for a gui see:

   http://cgit.freedesktop.org/mesa/rbug-gui


= Integrating =

You can integrate the rbug pipe driver either inside the state tracker or the 
target. The procedure on both cases is the same. Let's assume you have a 
pipe_screen obtained by the usual means (variable and function names are just
for illustration purposes):

  real_screen = real_screen_create(...);

The rbug screen is then created by doing

  rbug_screen = rbug_screen_create(real_screen);

You can then simply use rbug_screen instead of real_screen.

You can create as many contexts you wish from rbug_screen::context_create they
are automatically wrapped by rbug_screen.


--
Jose Fonseca <jfonseca@@vmware.com>
Jakob Bornecrantz <jakob@@vmware.com>
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@
