head	1.4;
access;
symbols
	mesa-17_1_6:1.1.1.2
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	mesa-13_0_6:1.1.1.1
	mesa-13_0_5:1.1.1.1
	mesa-13_0_3:1.1.1.1
	mesa-13_0_2:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2017.08.26.16.59.27;	author jsg;	state Exp;
branches;
next	1.3;
commitid	D0k2io1oY8gcsQ2S;

1.3
date	2017.08.14.09.57.58;	author jsg;	state Exp;
branches;
next	1.2;
commitid	bC4bLqwWTo4kLw82;

1.2
date	2016.12.11.10.03.01;	author jsg;	state Exp;
branches;
next	1.1;
commitid	0LaPpmB69Niq7Ylz;

1.1
date	2016.12.11.08.29.09;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	uuv5VTS15jglEDZU;

1.1.1.1
date	2016.12.11.08.29.09;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	uuv5VTS15jglEDZU;

1.1.1.2
date	2017.08.14.09.33.37;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.4
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@# Copyright (C) 2015 Intel Corporation.   All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

include Makefile.sources
include $(top_srcdir)/src/gallium/Automake.inc

AM_CXXFLAGS = $(GALLIUM_DRIVER_CFLAGS) $(SWR_CXX11_CXXFLAGS)

noinst_LTLIBRARIES = libmesaswr.la

libmesaswr_la_SOURCES = $(LOADER_SOURCES)

COMMON_CXXFLAGS = \
	-fno-strict-aliasing \
	$(GALLIUM_DRIVER_CFLAGS) \
	$(LLVM_CXXFLAGS) \
	$(SWR_CXX11_CXXFLAGS) \
	-I$(builddir)/rasterizer/scripts \
	-I$(builddir)/rasterizer/jitter \
	-I$(builddir)/rasterizer/archrast \
	-I$(srcdir)/rasterizer \
	-I$(srcdir)/rasterizer/core \
	-I$(srcdir)/rasterizer/scripts \
	-I$(srcdir)/rasterizer/jitter \
	-I$(srcdir)/rasterizer/archrast

COMMON_SOURCES = \
	$(CXX_SOURCES) \
	$(ARCHRAST_CXX_SOURCES) \
	$(COMMON_CXX_SOURCES) \
	$(CORE_CXX_SOURCES) \
	$(JITTER_CXX_SOURCES) \
	$(MEMORY_CXX_SOURCES) \
	$(BUILT_SOURCES)

BUILT_SOURCES = \
	swr_context_llvm.h \
	rasterizer/scripts/gen_knobs.cpp \
	rasterizer/scripts/gen_knobs.h \
	rasterizer/jitter/state_llvm.h \
	rasterizer/jitter/builder_x86.h \
	rasterizer/jitter/builder_x86.cpp \
	rasterizer/archrast/gen_ar_event.h \
	rasterizer/archrast/gen_ar_event.cpp \
	rasterizer/archrast/gen_ar_eventhandler.h \
	rasterizer/archrast/gen_ar_eventhandlerfile.h

if REGEN_SOURCES
MKDIR_GEN = $(AM_V_at)$(MKDIR_P) $(@@D)
PYTHON_GEN = $(AM_V_GEN)$(PYTHON2) $(PYTHON_FLAGS)
swr_context_llvm.h: rasterizer/jitter/scripts/gen_llvm_types.py swr_context.h
	$(PYTHON_GEN) \
		$(srcdir)/rasterizer/jitter/scripts/gen_llvm_types.py \
		--input $(srcdir)/swr_context.h \
		--output swr_context_llvm.h

rasterizer/scripts/gen_knobs.cpp rasterizer/scripts/gen_knobs.h: rasterizer/scripts/gen_knobs.py rasterizer/scripts/knob_defs.py rasterizer/scripts/templates/knobs.template
	$(MKDIR_GEN)
	$(PYTHON_GEN) \
		$(srcdir)/rasterizer/scripts/gen_knobs.py \
		rasterizer/scripts

rasterizer/jitter/state_llvm.h: rasterizer/jitter/scripts/gen_llvm_types.py rasterizer/core/state.h
	$(MKDIR_GEN)
	$(PYTHON_GEN) \
		$(srcdir)/rasterizer/jitter/scripts/gen_llvm_types.py \
		--input $(srcdir)/rasterizer/core/state.h \
		--output rasterizer/jitter/state_llvm.h

rasterizer/jitter/builder_gen.h: rasterizer/jitter/scripts/gen_llvm_ir_macros.py
	$(MKDIR_GEN)
	$(PYTHON_GEN) \
		$(srcdir)/rasterizer/jitter/scripts/gen_llvm_ir_macros.py \
		--input $(LLVM_INCLUDEDIR)/llvm/IR/IRBuilder.h \
		--output rasterizer/jitter/builder_gen.h \
		--gen_h

rasterizer/jitter/builder_gen.cpp: rasterizer/jitter/scripts/gen_llvm_ir_macros.py
	$(MKDIR_GEN)
	$(PYTHON_GEN) \
		$(srcdir)/rasterizer/jitter/scripts/gen_llvm_ir_macros.py \
		--input $(LLVM_INCLUDEDIR)/llvm/IR/IRBuilder.h \
		--output rasterizer/jitter/builder_gen.cpp \
		--gen_cpp

rasterizer/jitter/builder_x86.h: rasterizer/jitter/scripts/gen_llvm_ir_macros.py
	$(MKDIR_GEN)
	$(PYTHON_GEN) \
		$(srcdir)/rasterizer/jitter/scripts/gen_llvm_ir_macros.py \
		--output rasterizer/jitter/builder_x86.h \
		--gen_x86_h

rasterizer/jitter/builder_x86.cpp: rasterizer/jitter/scripts/gen_llvm_ir_macros.py
	$(MKDIR_GEN)
	$(PYTHON_GEN) \
		$(srcdir)/rasterizer/jitter/scripts/gen_llvm_ir_macros.py \
		--output rasterizer/jitter/builder_x86.cpp \
		--gen_x86_cpp

rasterizer/archrast/gen_ar_event.h: rasterizer/scripts/gen_archrast.py rasterizer/scripts/templates/ar_event_h.template rasterizer/archrast/events.proto
	$(MKDIR_GEN)
	$(PYTHON_GEN) \
		$(srcdir)/rasterizer/scripts/gen_archrast.py \
		--proto $(srcdir)/rasterizer/archrast/events.proto \
		--output rasterizer/archrast/gen_ar_event.h \
		--gen_event_h

rasterizer/archrast/gen_ar_event.cpp: rasterizer/scripts/gen_archrast.py rasterizer/scripts/templates/ar_event_cpp.template rasterizer/archrast/events.proto
	$(MKDIR_GEN)
	$(PYTHON_GEN) \
		$(srcdir)/rasterizer/scripts/gen_archrast.py \
		--proto $(srcdir)/rasterizer/archrast/events.proto \
		--output rasterizer/archrast/gen_ar_event.cpp \
		--gen_event_cpp

rasterizer/archrast/gen_ar_eventhandler.h: rasterizer/scripts/gen_archrast.py rasterizer/scripts/templates/ar_eventhandler_h.template rasterizer/archrast/events.proto
	$(MKDIR_GEN)
	$(PYTHON_GEN) \
		$(srcdir)/rasterizer/scripts/gen_archrast.py \
		--proto $(srcdir)/rasterizer/archrast/events.proto \
		--output rasterizer/archrast/gen_ar_eventhandler.h \
		--gen_eventhandler_h

rasterizer/archrast/gen_ar_eventhandlerfile.h: rasterizer/scripts/gen_archrast.py rasterizer/scripts/templates/ar_eventhandlerfile_h.template rasterizer/archrast/events.proto
	$(MKDIR_GEN)
	$(PYTHON_GEN) \
		$(srcdir)/rasterizer/scripts/gen_archrast.py \
		--proto $(srcdir)/rasterizer/archrast/events.proto \
		--output rasterizer/archrast/gen_ar_eventhandlerfile.h \
		--gen_eventhandlerfile_h
endif

COMMON_LIBADD = \
	$(top_builddir)/src/gallium/auxiliary/libgallium.la \
	$(top_builddir)/src/mesa/libmesagallium.la \
	$(LLVM_LIBS)

COMMON_LDFLAGS = \
	-shared \
	-module \
	-no-undefined \
	$(GC_SECTIONS) \
	$(NO_UNDEFINED) \
	$(LLVM_LDFLAGS)


# XXX: As we cannot use BUILT_SOURCES (the files will end up in the dist
# tarball) just annotate the dependency directly.
# As the single direct user of builder_gen.h is a header (builder.h) trace all
# the translusive users (one that use the latter header).
rasterizer/jitter/blend_jit.cpp: rasterizer/jitter/builder_gen.h
rasterizer/jitter/builder.cpp: rasterizer/jitter/builder_gen.h
rasterizer/jitter/builder_gen.cpp: rasterizer/jitter/builder_gen.h
rasterizer/jitter/builder_x86.cpp: rasterizer/jitter/builder_gen.h
rasterizer/jitter/builder_misc.cpp: rasterizer/jitter/builder_gen.h
rasterizer/jitter/fetch_jit.cpp: rasterizer/jitter/builder_gen.h
rasterizer/jitter/streamout_jit.cpp: rasterizer/jitter/builder_gen.h
swr_shader.cpp: rasterizer/jitter/builder_gen.h

CLEANFILES = \
	rasterizer/jitter/builder_gen.h \
	rasterizer/jitter/builder_gen.cpp

# XXX: Due to the funky dependencies above, the builder_x86.cpp file gets
# generated (copied) into builddir when building from release tarball.
# Add a temporary workaround to remove it, until the above issue is resolved.
distclean-local:
	( test $(top_srcdir) != $(top_builddir) && \
		rm $(builddir)/rasterizer/jitter/builder_x86.cpp ) || true

lib_LTLIBRARIES = libswrAVX.la libswrAVX2.la

libswrAVX_la_CXXFLAGS = \
	$(SWR_AVX_CXXFLAGS) \
	-DKNOB_ARCH=KNOB_ARCH_AVX \
	$(COMMON_CXXFLAGS)

libswrAVX_la_SOURCES = \
	$(COMMON_SOURCES)

# XXX: Don't ship these generated sources for now, since they are specific
# to the LLVM version they are generated from. Thus a release tarball
# containing the said files, generated against eg. LLVM 3.8 will fail to build
# on systems with other versions of LLVM eg. 3.7 or 3.6.
# Move these back to BUILT_SOURCES once that is resolved.
nodist_libswrAVX_la_SOURCES = \
	rasterizer/jitter/builder_gen.h \
	rasterizer/jitter/builder_gen.cpp

libswrAVX_la_LIBADD = \
	$(COMMON_LIBADD)

libswrAVX_la_LDFLAGS = \
	$(COMMON_LDFLAGS)

libswrAVX2_la_CXXFLAGS = \
	$(SWR_AVX2_CXXFLAGS) \
	-DKNOB_ARCH=KNOB_ARCH_AVX2 \
	$(COMMON_CXXFLAGS)

libswrAVX2_la_SOURCES = \
	$(COMMON_SOURCES)

# XXX: Don't ship these generated sources for now, since they are specific
# to the LLVM version they are generated from. Thus a release tarball
# containing the said files, generated against eg. LLVM 3.8 will fail to build
# on systems with other versions of LLVM eg. 3.7 or 3.6.
# Move these back to BUILT_SOURCES once that is resolved.
nodist_libswrAVX2_la_SOURCES = \
	rasterizer/jitter/builder_gen.h \
	rasterizer/jitter/builder_gen.cpp

libswrAVX2_la_LIBADD = \
	$(COMMON_LIBADD)

libswrAVX2_la_LDFLAGS = \
	$(COMMON_LDFLAGS)

include $(top_srcdir)/install-gallium-links.mk

EXTRA_DIST = \
	rasterizer/archrast/events.proto \
	rasterizer/jitter/scripts/gen_llvm_ir_macros.py \
	rasterizer/jitter/scripts/gen_llvm_types.py \
	rasterizer/scripts/gen_archrast.py \
	rasterizer/scripts/gen_knobs.py \
	rasterizer/scripts/knob_defs.py \
	rasterizer/scripts/mako/ast.py \
	rasterizer/scripts/mako/_ast_util.py \
	rasterizer/scripts/mako/cache.py \
	rasterizer/scripts/mako/cmd.py \
	rasterizer/scripts/mako/codegen.py \
	rasterizer/scripts/mako/compat.py \
	rasterizer/scripts/mako/exceptions.py \
	rasterizer/scripts/mako/filters.py \
	rasterizer/scripts/mako/__init__.py \
	rasterizer/scripts/mako/lexer.py \
	rasterizer/scripts/mako/lookup.py \
	rasterizer/scripts/mako/parsetree.py \
	rasterizer/scripts/mako/pygen.py \
	rasterizer/scripts/mako/pyparser.py \
	rasterizer/scripts/mako/runtime.py \
	rasterizer/scripts/mako/template.py \
	rasterizer/scripts/mako/util.py \
	rasterizer/scripts/templates/knobs.template \
	rasterizer/scripts/templates/ar_event_h.template \
	rasterizer/scripts/templates/ar_event_cpp.template \
	rasterizer/scripts/templates/ar_eventhandler_h.template \
	rasterizer/scripts/templates/ar_eventhandlerfile_h.template
@


1.3
log
@Merge Mesa 17.1.6
@
text
@d36 1
a36 1
	-I$(builddir)/rasterizer/codegen \
d41 1
a41 1
	-I$(srcdir)/rasterizer/codegen \
d55 7
a61 7
	gen_swr_context_llvm.h \
	rasterizer/codegen/gen_knobs.cpp \
	rasterizer/codegen/gen_knobs.h \
	rasterizer/jitter/gen_state_llvm.h \
	rasterizer/jitter/gen_builder.hpp \
	rasterizer/jitter/gen_builder_x86.hpp \
	rasterizer/archrast/gen_ar_event.hpp \
d63 2
a64 3
	rasterizer/archrast/gen_ar_eventhandler.hpp \
	rasterizer/archrast/gen_ar_eventhandlerfile.hpp \
	rasterizer/core/gen_BackendPixelRate0.cpp
d69 1
a69 1
gen_swr_context_llvm.h: rasterizer/codegen/gen_llvm_types.py rasterizer/codegen/templates/gen_llvm.hpp swr_context.h
d71 1
a71 1
		$(srcdir)/rasterizer/codegen/gen_llvm_types.py \
d73 1
a73 1
		--output ./gen_swr_context_llvm.h
d75 1
a75 1
rasterizer/codegen/gen_knobs.cpp: rasterizer/codegen/gen_knobs.py rasterizer/codegen/knob_defs.py rasterizer/codegen/templates/gen_knobs.cpp rasterizer/codegen/gen_common.py
d78 2
a79 3
		$(srcdir)/rasterizer/codegen/gen_knobs.py \
		--output rasterizer/codegen/gen_knobs.cpp \
		--gen_cpp
d81 1
a81 1
rasterizer/codegen/gen_knobs.h: rasterizer/codegen/gen_knobs.py rasterizer/codegen/knob_defs.py rasterizer/codegen/templates/gen_knobs.cpp rasterizer/codegen/gen_common.py
d84 3
a86 3
		$(srcdir)/rasterizer/codegen/gen_knobs.py \
		--output rasterizer/codegen/gen_knobs.h \
		--gen_h
d88 1
a88 1
rasterizer/jitter/gen_state_llvm.h: rasterizer/codegen/gen_llvm_types.py rasterizer/codegen/templates/gen_llvm.hpp rasterizer/core/state.h rasterizer/codegen/gen_common.py
d91 4
a94 3
		$(srcdir)/rasterizer/codegen/gen_llvm_types.py \
		--input $(srcdir)/rasterizer/core/state.h \
		--output rasterizer/jitter/gen_state_llvm.h
d96 1
a96 1
rasterizer/jitter/gen_builder.hpp: rasterizer/codegen/gen_llvm_ir_macros.py rasterizer/codegen/templates/gen_builder.hpp rasterizer/codegen/gen_common.py
d99 1
a99 1
		$(srcdir)/rasterizer/codegen/gen_llvm_ir_macros.py \
d101 2
a102 2
		--output rasterizer/jitter \
		--gen_h
d104 1
a104 1
rasterizer/jitter/gen_builder_x86.hpp: rasterizer/codegen/gen_llvm_ir_macros.py rasterizer/codegen/templates/gen_builder.hpp rasterizer/codegen/gen_common.py
d107 2
a108 2
		$(srcdir)/rasterizer/codegen/gen_llvm_ir_macros.py \
		--output rasterizer/jitter \
d111 1
a111 1
rasterizer/archrast/gen_ar_event.hpp: rasterizer/codegen/gen_archrast.py rasterizer/codegen/templates/gen_ar_event.hpp rasterizer/archrast/events.proto rasterizer/codegen/gen_common.py
d114 8
a121 1
		$(srcdir)/rasterizer/codegen/gen_archrast.py \
d123 1
a123 1
		--output rasterizer/archrast/gen_ar_event.hpp \
d126 1
a126 1
rasterizer/archrast/gen_ar_event.cpp: rasterizer/codegen/gen_archrast.py rasterizer/codegen/templates/gen_ar_event.cpp rasterizer/archrast/events.proto rasterizer/codegen/gen_common.py
d129 1
a129 1
		$(srcdir)/rasterizer/codegen/gen_archrast.py \
d134 1
a134 1
rasterizer/archrast/gen_ar_eventhandler.hpp: rasterizer/codegen/gen_archrast.py rasterizer/codegen/templates/gen_ar_eventhandler.hpp rasterizer/archrast/events.proto rasterizer/codegen/gen_common.py
d137 1
a137 1
		$(srcdir)/rasterizer/codegen/gen_archrast.py \
d139 1
a139 1
		--output rasterizer/archrast/gen_ar_eventhandler.hpp \
d142 1
a142 1
rasterizer/archrast/gen_ar_eventhandlerfile.hpp: rasterizer/codegen/gen_archrast.py rasterizer/codegen/templates/gen_ar_eventhandlerfile.hpp rasterizer/archrast/events.proto rasterizer/codegen/gen_common.py
d145 1
a145 1
		$(srcdir)/rasterizer/codegen/gen_archrast.py \
d147 1
a147 1
		--output rasterizer/archrast/gen_ar_eventhandlerfile.hpp \
a150 15
# 5 SWR_MULTISAMPLE_TYPE_COUNT
# 2 SWR_MSAA_SAMPLE_PATTERN_COUNT
# 3 SWR_INPUT_COVERAGE_COUNT
# 2 centroid
# 2 forcedSampleCount
# 2 canEarlyZ
rasterizer/core/gen_BackendPixelRate0.cpp: rasterizer/codegen/gen_backends.py rasterizer/codegen/templates/gen_backend.cpp
	$(MKDIR_GEN)
	$(PYTHON_GEN) \
		$(srcdir)/rasterizer/codegen/gen_backends.py \
		--outdir rasterizer/core \
		--dim 5 2 3 2 2 2 \
		--split 0 \
		--cpp

d154 1
a154 2
	$(LLVM_LIBS) \
	$(PTHREAD_LIBS)
d165 24
a191 1
	$(PTHREAD_CFLAGS) \
d199 9
a214 1
	$(PTHREAD_CFLAGS) \
d222 9
a238 10
# Generated gen_builder.hpp is not backwards compatible. So ship only one
# created with the oldest supported version of LLVM.
dist-hook:
if SWR_INVALID_LLVM_VERSION
	@@echo "*******************************************************"
	@@echo "LLVM 3.9.0 or LLVM 3.9.1 required to create the tarball"
	@@echo "*******************************************************"
	@@test
endif

a239 1
	SConscript \
d241 27
a267 15
	rasterizer/codegen/gen_llvm_ir_macros.py \
	rasterizer/codegen/gen_llvm_types.py \
	rasterizer/codegen/gen_archrast.py \
	rasterizer/codegen/gen_backends.py \
	rasterizer/codegen/gen_common.py \
	rasterizer/codegen/gen_knobs.py \
	rasterizer/codegen/knob_defs.py \
	rasterizer/codegen/templates/gen_ar_event.cpp \
	rasterizer/codegen/templates/gen_ar_event.hpp \
	rasterizer/codegen/templates/gen_ar_eventhandler.hpp \
	rasterizer/codegen/templates/gen_ar_eventhandlerfile.hpp \
	rasterizer/codegen/templates/gen_backend.cpp \
	rasterizer/codegen/templates/gen_builder.hpp \
	rasterizer/codegen/templates/gen_knobs.cpp \
	rasterizer/codegen/templates/gen_llvm.hpp
@


1.2
log
@disable additional rules to regen sources when python is not found

After a cvs import timestamps change which triggers rules that attempt
to call python to regenerate files.  When python is not found this
generates empty files that override those from the distfile, breaking
the build.

When building inside xenocara python is never found as the pkg paths
are not searched.
@
text
@d36 1
a36 1
	-I$(builddir)/rasterizer/scripts \
d41 1
a41 1
	-I$(srcdir)/rasterizer/scripts \
d55 7
a61 7
	swr_context_llvm.h \
	rasterizer/scripts/gen_knobs.cpp \
	rasterizer/scripts/gen_knobs.h \
	rasterizer/jitter/state_llvm.h \
	rasterizer/jitter/builder_x86.h \
	rasterizer/jitter/builder_x86.cpp \
	rasterizer/archrast/gen_ar_event.h \
d63 3
a65 2
	rasterizer/archrast/gen_ar_eventhandler.h \
	rasterizer/archrast/gen_ar_eventhandlerfile.h
d70 1
a70 1
swr_context_llvm.h: rasterizer/jitter/scripts/gen_llvm_types.py swr_context.h
d72 1
a72 1
		$(srcdir)/rasterizer/jitter/scripts/gen_llvm_types.py \
d74 1
a74 1
		--output swr_context_llvm.h
d76 1
a76 1
rasterizer/scripts/gen_knobs.cpp rasterizer/scripts/gen_knobs.h: rasterizer/scripts/gen_knobs.py rasterizer/scripts/knob_defs.py rasterizer/scripts/templates/knobs.template
d79 3
a81 2
		$(srcdir)/rasterizer/scripts/gen_knobs.py \
		rasterizer/scripts
d83 1
a83 1
rasterizer/jitter/state_llvm.h: rasterizer/jitter/scripts/gen_llvm_types.py rasterizer/core/state.h
d86 3
a88 3
		$(srcdir)/rasterizer/jitter/scripts/gen_llvm_types.py \
		--input $(srcdir)/rasterizer/core/state.h \
		--output rasterizer/jitter/state_llvm.h
d90 1
a90 1
rasterizer/jitter/builder_gen.h: rasterizer/jitter/scripts/gen_llvm_ir_macros.py
d93 3
a95 4
		$(srcdir)/rasterizer/jitter/scripts/gen_llvm_ir_macros.py \
		--input $(LLVM_INCLUDEDIR)/llvm/IR/IRBuilder.h \
		--output rasterizer/jitter/builder_gen.h \
		--gen_h
d97 1
a97 1
rasterizer/jitter/builder_gen.cpp: rasterizer/jitter/scripts/gen_llvm_ir_macros.py
d100 1
a100 1
		$(srcdir)/rasterizer/jitter/scripts/gen_llvm_ir_macros.py \
d102 2
a103 2
		--output rasterizer/jitter/builder_gen.cpp \
		--gen_cpp
d105 1
a105 1
rasterizer/jitter/builder_x86.h: rasterizer/jitter/scripts/gen_llvm_ir_macros.py
d108 2
a109 2
		$(srcdir)/rasterizer/jitter/scripts/gen_llvm_ir_macros.py \
		--output rasterizer/jitter/builder_x86.h \
d112 1
a112 1
rasterizer/jitter/builder_x86.cpp: rasterizer/jitter/scripts/gen_llvm_ir_macros.py
d115 1
a115 8
		$(srcdir)/rasterizer/jitter/scripts/gen_llvm_ir_macros.py \
		--output rasterizer/jitter/builder_x86.cpp \
		--gen_x86_cpp

rasterizer/archrast/gen_ar_event.h: rasterizer/scripts/gen_archrast.py rasterizer/scripts/templates/ar_event_h.template rasterizer/archrast/events.proto
	$(MKDIR_GEN)
	$(PYTHON_GEN) \
		$(srcdir)/rasterizer/scripts/gen_archrast.py \
d117 1
a117 1
		--output rasterizer/archrast/gen_ar_event.h \
d120 1
a120 1
rasterizer/archrast/gen_ar_event.cpp: rasterizer/scripts/gen_archrast.py rasterizer/scripts/templates/ar_event_cpp.template rasterizer/archrast/events.proto
d123 1
a123 1
		$(srcdir)/rasterizer/scripts/gen_archrast.py \
d128 1
a128 1
rasterizer/archrast/gen_ar_eventhandler.h: rasterizer/scripts/gen_archrast.py rasterizer/scripts/templates/ar_eventhandler_h.template rasterizer/archrast/events.proto
d131 1
a131 1
		$(srcdir)/rasterizer/scripts/gen_archrast.py \
d133 1
a133 1
		--output rasterizer/archrast/gen_ar_eventhandler.h \
d136 1
a136 1
rasterizer/archrast/gen_ar_eventhandlerfile.h: rasterizer/scripts/gen_archrast.py rasterizer/scripts/templates/ar_eventhandlerfile_h.template rasterizer/archrast/events.proto
d139 1
a139 1
		$(srcdir)/rasterizer/scripts/gen_archrast.py \
d141 1
a141 1
		--output rasterizer/archrast/gen_ar_eventhandlerfile.h \
d145 15
d163 2
a164 1
	$(LLVM_LIBS)
a174 24
# XXX: As we cannot use BUILT_SOURCES (the files will end up in the dist
# tarball) just annotate the dependency directly.
# As the single direct user of builder_gen.h is a header (builder.h) trace all
# the translusive users (one that use the latter header).
rasterizer/jitter/blend_jit.cpp: rasterizer/jitter/builder_gen.h
rasterizer/jitter/builder.cpp: rasterizer/jitter/builder_gen.h
rasterizer/jitter/builder_gen.cpp: rasterizer/jitter/builder_gen.h
rasterizer/jitter/builder_x86.cpp: rasterizer/jitter/builder_gen.h
rasterizer/jitter/builder_misc.cpp: rasterizer/jitter/builder_gen.h
rasterizer/jitter/fetch_jit.cpp: rasterizer/jitter/builder_gen.h
rasterizer/jitter/streamout_jit.cpp: rasterizer/jitter/builder_gen.h
swr_shader.cpp: rasterizer/jitter/builder_gen.h

CLEANFILES = \
	rasterizer/jitter/builder_gen.h \
	rasterizer/jitter/builder_gen.cpp

# XXX: Due to the funky dependencies above, the builder_x86.cpp file gets
# generated (copied) into builddir when building from release tarball.
# Add a temporary workaround to remove it, until the above issue is resolved.
distclean-local:
	( test $(top_srcdir) != $(top_builddir) && \
		rm $(builddir)/rasterizer/jitter/builder_x86.cpp ) || true

d178 1
a185 9
# XXX: Don't ship these generated sources for now, since they are specific
# to the LLVM version they are generated from. Thus a release tarball
# containing the said files, generated against eg. LLVM 3.8 will fail to build
# on systems with other versions of LLVM eg. 3.7 or 3.6.
# Move these back to BUILT_SOURCES once that is resolved.
nodist_libswrAVX_la_SOURCES = \
	rasterizer/jitter/builder_gen.h \
	rasterizer/jitter/builder_gen.cpp

d193 1
a200 9
# XXX: Don't ship these generated sources for now, since they are specific
# to the LLVM version they are generated from. Thus a release tarball
# containing the said files, generated against eg. LLVM 3.8 will fail to build
# on systems with other versions of LLVM eg. 3.7 or 3.6.
# Move these back to BUILT_SOURCES once that is resolved.
nodist_libswrAVX2_la_SOURCES = \
	rasterizer/jitter/builder_gen.h \
	rasterizer/jitter/builder_gen.cpp

d209 10
d220 1
d222 15
a236 27
	rasterizer/jitter/scripts/gen_llvm_ir_macros.py \
	rasterizer/jitter/scripts/gen_llvm_types.py \
	rasterizer/scripts/gen_archrast.py \
	rasterizer/scripts/gen_knobs.py \
	rasterizer/scripts/knob_defs.py \
	rasterizer/scripts/mako/ast.py \
	rasterizer/scripts/mako/_ast_util.py \
	rasterizer/scripts/mako/cache.py \
	rasterizer/scripts/mako/cmd.py \
	rasterizer/scripts/mako/codegen.py \
	rasterizer/scripts/mako/compat.py \
	rasterizer/scripts/mako/exceptions.py \
	rasterizer/scripts/mako/filters.py \
	rasterizer/scripts/mako/__init__.py \
	rasterizer/scripts/mako/lexer.py \
	rasterizer/scripts/mako/lookup.py \
	rasterizer/scripts/mako/parsetree.py \
	rasterizer/scripts/mako/pygen.py \
	rasterizer/scripts/mako/pyparser.py \
	rasterizer/scripts/mako/runtime.py \
	rasterizer/scripts/mako/template.py \
	rasterizer/scripts/mako/util.py \
	rasterizer/scripts/templates/knobs.template \
	rasterizer/scripts/templates/ar_event_h.template \
	rasterizer/scripts/templates/ar_event_cpp.template \
	rasterizer/scripts/templates/ar_eventhandler_h.template \
	rasterizer/scripts/templates/ar_eventhandlerfile_h.template
@


1.1
log
@Initial revision
@
text
@d66 1
d149 1
@


1.1.1.1
log
@Import Mesa 13.0.2
@
text
@@


1.1.1.2
log
@Import Mesa 17.1.6
@
text
@d36 1
a36 1
	-I$(builddir)/rasterizer/codegen \
d41 1
a41 1
	-I$(srcdir)/rasterizer/codegen \
d55 7
a61 7
	gen_swr_context_llvm.h \
	rasterizer/codegen/gen_knobs.cpp \
	rasterizer/codegen/gen_knobs.h \
	rasterizer/jitter/gen_state_llvm.h \
	rasterizer/jitter/gen_builder.hpp \
	rasterizer/jitter/gen_builder_x86.hpp \
	rasterizer/archrast/gen_ar_event.hpp \
d63 2
a64 3
	rasterizer/archrast/gen_ar_eventhandler.hpp \
	rasterizer/archrast/gen_ar_eventhandlerfile.hpp \
	rasterizer/core/gen_BackendPixelRate0.cpp
d68 1
a68 1
gen_swr_context_llvm.h: rasterizer/codegen/gen_llvm_types.py rasterizer/codegen/templates/gen_llvm.hpp swr_context.h
d70 1
a70 1
		$(srcdir)/rasterizer/codegen/gen_llvm_types.py \
d72 1
a72 1
		--output ./gen_swr_context_llvm.h
d74 1
a74 1
rasterizer/codegen/gen_knobs.cpp: rasterizer/codegen/gen_knobs.py rasterizer/codegen/knob_defs.py rasterizer/codegen/templates/gen_knobs.cpp rasterizer/codegen/gen_common.py
d77 2
a78 3
		$(srcdir)/rasterizer/codegen/gen_knobs.py \
		--output rasterizer/codegen/gen_knobs.cpp \
		--gen_cpp
d80 1
a80 1
rasterizer/codegen/gen_knobs.h: rasterizer/codegen/gen_knobs.py rasterizer/codegen/knob_defs.py rasterizer/codegen/templates/gen_knobs.cpp rasterizer/codegen/gen_common.py
d83 3
a85 3
		$(srcdir)/rasterizer/codegen/gen_knobs.py \
		--output rasterizer/codegen/gen_knobs.h \
		--gen_h
d87 1
a87 1
rasterizer/jitter/gen_state_llvm.h: rasterizer/codegen/gen_llvm_types.py rasterizer/codegen/templates/gen_llvm.hpp rasterizer/core/state.h rasterizer/codegen/gen_common.py
d90 4
a93 3
		$(srcdir)/rasterizer/codegen/gen_llvm_types.py \
		--input $(srcdir)/rasterizer/core/state.h \
		--output rasterizer/jitter/gen_state_llvm.h
d95 1
a95 1
rasterizer/jitter/gen_builder.hpp: rasterizer/codegen/gen_llvm_ir_macros.py rasterizer/codegen/templates/gen_builder.hpp rasterizer/codegen/gen_common.py
d98 1
a98 1
		$(srcdir)/rasterizer/codegen/gen_llvm_ir_macros.py \
d100 2
a101 2
		--output rasterizer/jitter \
		--gen_h
d103 1
a103 1
rasterizer/jitter/gen_builder_x86.hpp: rasterizer/codegen/gen_llvm_ir_macros.py rasterizer/codegen/templates/gen_builder.hpp rasterizer/codegen/gen_common.py
d106 2
a107 2
		$(srcdir)/rasterizer/codegen/gen_llvm_ir_macros.py \
		--output rasterizer/jitter \
d110 8
a117 1
rasterizer/archrast/gen_ar_event.hpp: rasterizer/codegen/gen_archrast.py rasterizer/codegen/templates/gen_ar_event.hpp rasterizer/archrast/events.proto rasterizer/codegen/gen_common.py
d120 1
a120 1
		$(srcdir)/rasterizer/codegen/gen_archrast.py \
d122 1
a122 1
		--output rasterizer/archrast/gen_ar_event.hpp \
d125 1
a125 1
rasterizer/archrast/gen_ar_event.cpp: rasterizer/codegen/gen_archrast.py rasterizer/codegen/templates/gen_ar_event.cpp rasterizer/archrast/events.proto rasterizer/codegen/gen_common.py
d128 1
a128 1
		$(srcdir)/rasterizer/codegen/gen_archrast.py \
d133 1
a133 1
rasterizer/archrast/gen_ar_eventhandler.hpp: rasterizer/codegen/gen_archrast.py rasterizer/codegen/templates/gen_ar_eventhandler.hpp rasterizer/archrast/events.proto rasterizer/codegen/gen_common.py
d136 1
a136 1
		$(srcdir)/rasterizer/codegen/gen_archrast.py \
d138 1
a138 1
		--output rasterizer/archrast/gen_ar_eventhandler.hpp \
d141 1
a141 1
rasterizer/archrast/gen_ar_eventhandlerfile.hpp: rasterizer/codegen/gen_archrast.py rasterizer/codegen/templates/gen_ar_eventhandlerfile.hpp rasterizer/archrast/events.proto rasterizer/codegen/gen_common.py
d144 1
a144 1
		$(srcdir)/rasterizer/codegen/gen_archrast.py \
d146 1
a146 1
		--output rasterizer/archrast/gen_ar_eventhandlerfile.hpp \
a148 15
# 5 SWR_MULTISAMPLE_TYPE_COUNT
# 2 SWR_MSAA_SAMPLE_PATTERN_COUNT
# 3 SWR_INPUT_COVERAGE_COUNT
# 2 centroid
# 2 forcedSampleCount
# 2 canEarlyZ
rasterizer/core/gen_BackendPixelRate0.cpp: rasterizer/codegen/gen_backends.py rasterizer/codegen/templates/gen_backend.cpp
	$(MKDIR_GEN)
	$(PYTHON_GEN) \
		$(srcdir)/rasterizer/codegen/gen_backends.py \
		--outdir rasterizer/core \
		--dim 5 2 3 2 2 2 \
		--split 0 \
		--cpp

d152 1
a152 2
	$(LLVM_LIBS) \
	$(PTHREAD_LIBS)
d163 24
a189 1
	$(PTHREAD_CFLAGS) \
d197 9
a212 1
	$(PTHREAD_CFLAGS) \
d220 9
a236 10
# Generated gen_builder.hpp is not backwards compatible. So ship only one
# created with the oldest supported version of LLVM.
dist-hook:
if SWR_INVALID_LLVM_VERSION
	@@echo "*******************************************************"
	@@echo "LLVM 3.9.0 or LLVM 3.9.1 required to create the tarball"
	@@echo "*******************************************************"
	@@test
endif

a237 1
	SConscript \
d239 27
a265 15
	rasterizer/codegen/gen_llvm_ir_macros.py \
	rasterizer/codegen/gen_llvm_types.py \
	rasterizer/codegen/gen_archrast.py \
	rasterizer/codegen/gen_backends.py \
	rasterizer/codegen/gen_common.py \
	rasterizer/codegen/gen_knobs.py \
	rasterizer/codegen/knob_defs.py \
	rasterizer/codegen/templates/gen_ar_event.cpp \
	rasterizer/codegen/templates/gen_ar_event.hpp \
	rasterizer/codegen/templates/gen_ar_eventhandler.hpp \
	rasterizer/codegen/templates/gen_ar_eventhandlerfile.hpp \
	rasterizer/codegen/templates/gen_backend.cpp \
	rasterizer/codegen/templates/gen_builder.hpp \
	rasterizer/codegen/templates/gen_knobs.cpp \
	rasterizer/codegen/templates/gen_llvm.hpp
@

