head	1.2;
access;
symbols
	mesa-17_1_6:1.1.1.2
	OPENBSD_6_1:1.1.1.1.0.2
	OPENBSD_6_1_BASE:1.1.1.1
	mesa-13_0_6:1.1.1.1
	mesa-13_0_5:1.1.1.1
	mesa-13_0_3:1.1.1.1
	mesa-13_0_2:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2017.08.26.16.59.27;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2016.12.11.08.29.23;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	uuv5VTS15jglEDZU;

1.1.1.1
date	2016.12.11.08.29.23;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	uuv5VTS15jglEDZU;

1.1.1.2
date	2017.08.14.09.33.53;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/****************************************************************************
* Copyright (C) 2016 Intel Corporation.   All Rights Reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice (including the next
* paragraph) shall be included in all copies or substantial portions of the
* Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* @@file archrast.h
*
* @@brief Definitions for the event manager.
*
******************************************************************************/
#pragma once

#include "common/os.h"

#include "gen_ar_event.h"
#include "gen_ar_eventhandler.h"

#include <vector>

namespace ArchRast
{
    //////////////////////////////////////////////////////////////////////////
    /// EventManager - interface to dispatch events to handlers.
    /// Event handling occurs only on a single thread.
    //////////////////////////////////////////////////////////////////////////
    class EventManager
    {
    public:
        void attach(EventHandler* pHandler)
        {
            mHandlers.push_back(pHandler);
        }

        void dispatch(Event& event)
        {
            ///@@todo Add event filter check here.

            for (auto pHandler : mHandlers)
            {
                event.accept(pHandler);
            }
        }
    private:

        // Handlers stay registered for life
        void detach(EventHandler* pHandler) { SWR_ASSERT(0); }

        std::vector<EventHandler*> mHandlers;
    };
};

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import Mesa 13.0.2
@
text
@@


1.1.1.2
log
@Import Mesa 17.1.6
@
text
@d32 2
a33 2
#include "gen_ar_event.hpp"
#include "gen_ar_eventhandler.hpp"
d46 1
a46 13
        EventManager() {}

        ~EventManager()
        {
            // Event manager owns destroying handler objects once attached.
            ///@@note See comment for Detach.
            for (auto pHandler : mHandlers)
            {
                delete pHandler;
            }
        }

        void Attach(EventHandler* pHandler)
d51 1
a51 1
        void Dispatch(const Event& event)
d57 1
a57 9
                event.Accept(pHandler);
            }
        }

        void FlushDraw(uint32_t drawId)
        {
            for (auto pHandler : mHandlers)
            {
                pHandler->FlushDraw(drawId);
d63 1
a63 1
        void Detach(EventHandler* pHandler) { SWR_INVALID("Should not be called"); }
@

