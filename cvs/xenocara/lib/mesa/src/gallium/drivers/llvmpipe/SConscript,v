head	1.1;
branch	1.1.1;
access;
symbols
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2015.11.22.02.44.04;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.44.04;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.19.38;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.27.47;	author jsg;	state Exp;
branches;
next	;
commitid	uuv5VTS15jglEDZU;


desc
@@


1.1
log
@Initial revision
@
text
@from sys import executable as python_cmd
import distutils.version

Import('*')

if not env['llvm']:
    print 'warning: LLVM disabled: not building llvmpipe'
    Return()

env = env.Clone()

env.MSVC2008Compat()

llvmpipe = env.ConvenienceLibrary(
	target = 'llvmpipe',
	source = env.ParseSourceList('Makefile.sources', 'C_SOURCES')
	)

env.Alias('llvmpipe', llvmpipe)


if not env['embedded']:
    env = env.Clone()

    env.Prepend(LIBS = [llvmpipe, gallium, mesautil])

    tests = [
        'format',
        'blend',
        'conv',
        'printf',
    ]

    if not env['msvc']:
        tests.append('arit')

    for test in tests:
        testname = 'lp_test_' + test
        target = env.Program(
            target = testname,
            source = [testname + '.c', 'lp_test_main.c'],
        )
        env.InstallProgram(target)
        
        # http://www.scons.org/wiki/UnitTests
        alias = env.Alias(testname, [target], target[0].abspath)
        AlwaysBuild(alias)

Export('llvmpipe')
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d12 1
a12 1
env.MSVC2013Compat()
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@a27 1
        'arit',
d34 3
d43 5
a47 1
        env.UnitTest(testname, target)
@


