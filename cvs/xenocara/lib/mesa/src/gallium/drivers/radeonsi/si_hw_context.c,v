head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	mesa-17_1_6:1.1.1.4
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.08.26.16.59.26;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2015.11.22.02.44.43;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.44.43;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.20.21;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.28.10;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.08.14.09.32.56;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/*
 * Copyright 2010 Jerome Glisse <glisse@@freedesktop.org>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHOR(S) AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *      Jerome Glisse
 */

#include "si_pipe.h"
#include "radeon/r600_cs.h"

static unsigned si_descriptor_list_cs_space(unsigned count, unsigned element_size)
{
	/* Ensure we have enough space to start a new range in a hole */
	assert(element_size >= 3);

	/* 5 dwords for possible load to reinitialize when we have no preamble
	 * IB + 5 dwords for write to L2 + 3 bytes for every range written to
	 * CE RAM.
	 */
	return 5 + 5 + 3 + count * element_size;
}

static unsigned si_ce_needed_cs_space(void)
{
	unsigned space = 0;

	space += si_descriptor_list_cs_space(SI_NUM_CONST_BUFFERS, 4);
	space += si_descriptor_list_cs_space(SI_NUM_SHADER_BUFFERS, 4);
	space += si_descriptor_list_cs_space(SI_NUM_SAMPLERS, 16);
	space += si_descriptor_list_cs_space(SI_NUM_IMAGES, 8);
	space *= SI_NUM_SHADERS;

	space += si_descriptor_list_cs_space(SI_NUM_RW_BUFFERS, 4);

	/* Increment CE counter packet */
	space += 2;

	return space;
}

/* initialize */
void si_need_cs_space(struct si_context *ctx)
{
	struct radeon_winsys_cs *cs = ctx->b.gfx.cs;
	struct radeon_winsys_cs *ce_ib = ctx->ce_ib;
	struct radeon_winsys_cs *dma = ctx->b.dma.cs;

	/* Flush the DMA IB if it's not empty. */
	if (radeon_emitted(dma, 0))
		ctx->b.dma.flush(ctx, RADEON_FLUSH_ASYNC, NULL);

	/* There are two memory usage counters in the winsys for all buffers
	 * that have been added (cs_add_buffer) and two counters in the pipe
	 * driver for those that haven't been added yet.
	 */
	if (unlikely(!radeon_cs_memory_below_limit(ctx->b.screen, ctx->b.gfx.cs,
						   ctx->b.vram, ctx->b.gtt))) {
		ctx->b.gtt = 0;
		ctx->b.vram = 0;
		ctx->b.gfx.flush(ctx, RADEON_FLUSH_ASYNC, NULL);
		return;
	}
	ctx->b.gtt = 0;
	ctx->b.vram = 0;

	/* If the CS is sufficiently large, don't count the space needed
	 * and just flush if there is not enough space left.
	 */
	if (!ctx->b.ws->cs_check_space(cs, 2048) ||
	    (ce_ib && !ctx->b.ws->cs_check_space(ce_ib, si_ce_needed_cs_space())))
		ctx->b.gfx.flush(ctx, RADEON_FLUSH_ASYNC, NULL);
}

void si_context_gfx_flush(void *context, unsigned flags,
			  struct pipe_fence_handle **fence)
{
	struct si_context *ctx = context;
	struct radeon_winsys_cs *cs = ctx->b.gfx.cs;
	struct radeon_winsys *ws = ctx->b.ws;

	if (ctx->gfx_flush_in_progress)
		return;

	if (!radeon_emitted(cs, ctx->b.initial_gfx_cs_size))
		return;

	if (r600_check_device_reset(&ctx->b))
		return;

	ctx->gfx_flush_in_progress = true;

	r600_preflush_suspend_features(&ctx->b);

	ctx->b.flags |= SI_CONTEXT_CS_PARTIAL_FLUSH |
			SI_CONTEXT_PS_PARTIAL_FLUSH;

	/* DRM 3.1.0 doesn't flush TC for VI correctly. */
	if (ctx->b.chip_class == VI && ctx->b.screen->info.drm_minor <= 1)
		ctx->b.flags |= SI_CONTEXT_INV_GLOBAL_L2 |
				SI_CONTEXT_INV_VMEM_L1;

	si_emit_cache_flush(ctx);

	if (ctx->trace_buf)
		si_trace_emit(ctx);

	if (ctx->is_debug) {
		/* Save the IB for debug contexts. */
		radeon_clear_saved_cs(&ctx->last_gfx);
		radeon_save_cs(ws, cs, &ctx->last_gfx);
		r600_resource_reference(&ctx->last_trace_buf, ctx->trace_buf);
		r600_resource_reference(&ctx->trace_buf, NULL);
	}

	/* Flush the CS. */
	ws->cs_flush(cs, flags, &ctx->b.last_gfx_fence);
	if (fence)
		ws->fence_reference(fence, ctx->b.last_gfx_fence);
	ctx->b.num_gfx_cs_flushes++;

	/* Check VM faults if needed. */
	if (ctx->screen->b.debug_flags & DBG_CHECK_VM) {
		/* Use conservative timeout 800ms, after which we won't wait any
		 * longer and assume the GPU is hung.
		 */
		ctx->b.ws->fence_wait(ctx->b.ws, ctx->b.last_gfx_fence, 800*1000*1000);

		si_check_vm_faults(&ctx->b, &ctx->last_gfx, RING_GFX);
	}

	si_begin_new_cs(ctx);
	ctx->gfx_flush_in_progress = false;
}

void si_begin_new_cs(struct si_context *ctx)
{
	if (ctx->is_debug) {
		uint32_t zero = 0;

		/* Create a buffer used for writing trace IDs and initialize it to 0. */
		assert(!ctx->trace_buf);
		ctx->trace_buf = (struct r600_resource*)
				 pipe_buffer_create(ctx->b.b.screen, PIPE_BIND_CUSTOM,
						    PIPE_USAGE_STAGING, 4);
		if (ctx->trace_buf)
			pipe_buffer_write_nooverlap(&ctx->b.b, &ctx->trace_buf->b.b,
						    0, sizeof(zero), &zero);
		ctx->trace_id = 0;
	}

	if (ctx->trace_buf)
		si_trace_emit(ctx);

	/* Flush read caches at the beginning of CS not flushed by the kernel. */
	if (ctx->b.chip_class >= CIK)
		ctx->b.flags |= SI_CONTEXT_INV_SMEM_L1 |
				SI_CONTEXT_INV_ICACHE;

	ctx->b.flags |= R600_CONTEXT_START_PIPELINE_STATS;

	/* set all valid group as dirty so they get reemited on
	 * next draw command
	 */
	si_pm4_reset_emitted(ctx);

	/* The CS initialization should be emitted before everything else. */
	si_pm4_emit(ctx, ctx->init_config);
	if (ctx->init_config_gs_rings)
		si_pm4_emit(ctx, ctx->init_config_gs_rings);

	if (ctx->ce_preamble_ib)
		si_ce_enable_loads(ctx->ce_preamble_ib);
	else if (ctx->ce_ib)
		si_ce_enable_loads(ctx->ce_ib);

	if (ctx->ce_preamble_ib)
		si_ce_reinitialize_all_descriptors(ctx);

	ctx->framebuffer.dirty_cbufs = (1 << 8) - 1;
	ctx->framebuffer.dirty_zsbuf = true;
	si_mark_atom_dirty(ctx, &ctx->framebuffer.atom);

	si_mark_atom_dirty(ctx, &ctx->clip_regs);
	si_mark_atom_dirty(ctx, &ctx->clip_state.atom);
	ctx->msaa_sample_locs.nr_samples = 0;
	si_mark_atom_dirty(ctx, &ctx->msaa_sample_locs.atom);
	si_mark_atom_dirty(ctx, &ctx->msaa_config);
	si_mark_atom_dirty(ctx, &ctx->sample_mask.atom);
	si_mark_atom_dirty(ctx, &ctx->cb_render_state);
	si_mark_atom_dirty(ctx, &ctx->blend_color.atom);
	si_mark_atom_dirty(ctx, &ctx->db_render_state);
	si_mark_atom_dirty(ctx, &ctx->stencil_ref.atom);
	si_mark_atom_dirty(ctx, &ctx->spi_map);
	si_mark_atom_dirty(ctx, &ctx->b.streamout.enable_atom);
	si_mark_atom_dirty(ctx, &ctx->b.render_cond_atom);
	si_all_descriptors_begin_new_cs(ctx);

	ctx->b.scissors.dirty_mask = (1 << R600_MAX_VIEWPORTS) - 1;
	ctx->b.viewports.dirty_mask = (1 << R600_MAX_VIEWPORTS) - 1;
	ctx->b.viewports.depth_range_dirty_mask = (1 << R600_MAX_VIEWPORTS) - 1;
	si_mark_atom_dirty(ctx, &ctx->b.scissors.atom);
	si_mark_atom_dirty(ctx, &ctx->b.viewports.atom);

	r600_postflush_resume_features(&ctx->b);

	assert(!ctx->b.gfx.cs->prev_dw);
	ctx->b.initial_gfx_cs_size = ctx->b.gfx.cs->current.cdw;

	/* Invalidate various draw states so that they are emitted before
	 * the first draw call. */
	si_invalidate_draw_sh_constants(ctx);
	ctx->last_index_size = -1;
	ctx->last_primitive_restart_en = -1;
	ctx->last_restart_index = SI_RESTART_INDEX_UNKNOWN;
	ctx->last_gs_out_prim = -1;
	ctx->last_prim = -1;
	ctx->last_multi_vgt_param = -1;
	ctx->last_rast_prim = -1;
	ctx->last_sc_line_stipple = ~0;
	ctx->last_vtx_reuse_depth = -1;
	ctx->emit_scratch_reloc = true;
	ctx->last_ls = NULL;
	ctx->last_tcs = NULL;
	ctx->last_tes_sh_base = -1;
	ctx->last_num_tcs_input_cp = -1;

	ctx->cs_shader_state.initialized = false;
}
@


1.1
log
@Initial revision
@
text
@d28 31
d61 1
a61 2
void si_need_cs_space(struct si_context *ctx, unsigned num_dw,
			boolean count_draw_in)
d63 7
a69 2
	struct radeon_winsys_cs *cs = ctx->b.rings.gfx.cs;
	int i;
d72 1
a72 1
	 * that have been added (cs_add_reloc) and two counters in the pipe
d74 3
a76 2
	 * */
	if (!ctx->b.ws->cs_memory_below_limit(ctx->b.rings.gfx.cs, ctx->b.vram, ctx->b.gtt)) {
d79 1
a79 1
		ctx->b.rings.gfx.flush(ctx, RADEON_FLUSH_ASYNC, NULL);
d86 1
a86 1
	 * and just flush if there is less than 8096 dwords left.
d88 3
a90 50
	if (cs->max_dw >= 24 * 1024) {
		if (cs->cdw > cs->max_dw - 8 * 1024)
			ctx->b.rings.gfx.flush(ctx, RADEON_FLUSH_ASYNC, NULL);
		return;
	}

	/* The number of dwords we already used in the CS so far. */
	num_dw += cs->cdw;

	if (count_draw_in) {
		for (i = 0; i < SI_NUM_ATOMS(ctx); i++) {
			if (ctx->atoms.array[i]->dirty) {
				num_dw += ctx->atoms.array[i]->num_dw;
			}
		}

		/* The number of dwords all the dirty states would take. */
		num_dw += si_pm4_dirty_dw(ctx);

		/* The upper-bound of how much a draw command would take. */
		num_dw += SI_MAX_DRAW_CS_DWORDS;
	}

	/* Count in queries_suspend. */
	num_dw += ctx->b.num_cs_dw_nontimer_queries_suspend +
		  ctx->b.num_cs_dw_timer_queries_suspend;

	/* Count in streamout_end at the end of CS. */
	if (ctx->b.streamout.begin_emitted) {
		num_dw += ctx->b.streamout.num_dw_for_end;
	}

	/* Count in render_condition(NULL) at the end of CS. */
	if (ctx->b.predicate_drawing) {
		num_dw += 3;
	}

	/* Count in framebuffer cache flushes at the end of CS. */
	num_dw += ctx->atoms.s.cache_flush->num_dw;

#if SI_TRACE_CS
	if (ctx->screen->b.trace_bo) {
		num_dw += SI_TRACE_CS_DWORDS;
	}
#endif

	/* Flush if there's not enough space. */
	if (num_dw > cs->max_dw) {
		ctx->b.rings.gfx.flush(ctx, RADEON_FLUSH_ASYNC, NULL);
	}
d97 1
a97 1
	struct radeon_winsys_cs *cs = ctx->b.rings.gfx.cs;
d100 7
a106 6
	if (cs->cdw == ctx->b.initial_gfx_cs_size &&
	    (!fence || ctx->last_gfx_fence)) {
		if (fence)
			ws->fence_reference(fence, ctx->last_gfx_fence);
		if (!(flags & RADEON_FLUSH_ASYNC))
			ws->cs_sync_flush(cs);
a107 1
	}
d109 1
a109 1
	ctx->b.rings.gfx.flushing = true;
d113 1
a113 4
	ctx->b.flags |= SI_CONTEXT_FLUSH_AND_INV_FRAMEBUFFER |
			SI_CONTEXT_INV_TC_L1 |
			SI_CONTEXT_INV_TC_L2 |
			/* this is probably not needed anymore */
a114 1
	si_emit_cache_flush(&ctx->b, NULL);
d116 17
a132 2
	/* force to keep tiling flags */
	flags |= RADEON_FLUSH_KEEP_TILING_FLAGS;
d135 4
a138 3
	ws->cs_flush(cs, flags, &ctx->last_gfx_fence,
		     ctx->screen->b.cs_count++);
	ctx->b.rings.gfx.flushing = false;
d140 6
a145 2
	if (fence)
		ws->fence_reference(fence, ctx->last_gfx_fence);
d147 1
a147 17
#if SI_TRACE_CS
	if (ctx->screen->b.trace_bo) {
		struct si_screen *sscreen = ctx->screen;
		unsigned i;

		for (i = 0; i < 10; i++) {
			usleep(5);
			if (!ws->buffer_is_busy(sscreen->b.trace_bo->buf, RADEON_USAGE_READWRITE)) {
				break;
			}
		}
		if (i == 10) {
			fprintf(stderr, "timeout on cs lockup likely happen at cs %d dw %d\n",
				sscreen->b.trace_ptr[1], sscreen->b.trace_ptr[0]);
		} else {
			fprintf(stderr, "cs %d executed in %dms\n", sscreen->b.trace_ptr[1], i * 5);
		}
a148 1
#endif
d151 1
d156 23
a178 6
	/* Flush read caches at the beginning of CS. */
	ctx->b.flags |= SI_CONTEXT_FLUSH_AND_INV_FRAMEBUFFER |
			SI_CONTEXT_INV_TC_L1 |
			SI_CONTEXT_INV_TC_L2 |
			SI_CONTEXT_INV_KCACHE |
			SI_CONTEXT_INV_ICACHE;
d187 14
d203 3
a205 2
	si_mark_atom_dirty(ctx, &ctx->framebuffer.atom);
	si_mark_atom_dirty(ctx, &ctx->msaa_sample_locs);
d207 3
d211 2
d214 1
d217 6
d225 2
a226 1
	ctx->b.initial_gfx_cs_size = ctx->b.rings.gfx.cs->cdw;
d231 1
a236 1
	ctx->last_ls_hs_config = -1;
d239 1
d245 2
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d30 2
a31 1
void si_need_cs_space(struct si_context *ctx)
d33 2
a34 6
	struct radeon_winsys_cs *cs = ctx->b.gfx.cs;
	struct radeon_winsys_cs *dma = ctx->b.dma.cs;

	/* Flush the DMA IB if it's not empty. */
	if (dma && dma->cdw)
		ctx->b.dma.flush(ctx, RADEON_FLUSH_ASYNC, NULL);
d37 1
a37 1
	 * that have been added (cs_add_buffer) and two counters in the pipe
d39 2
a40 3
	 */
	if (unlikely(!ctx->b.ws->cs_memory_below_limit(ctx->b.gfx.cs,
						       ctx->b.vram, ctx->b.gtt))) {
d43 1
a43 1
		ctx->b.gfx.flush(ctx, RADEON_FLUSH_ASYNC, NULL);
d50 1
a50 1
	 * and just flush if there is not enough space left.
d52 50
a101 2
	if (unlikely(cs->cdw > cs->max_dw - 2048))
		ctx->b.gfx.flush(ctx, RADEON_FLUSH_ASYNC, NULL);
d108 1
a108 1
	struct radeon_winsys_cs *cs = ctx->b.gfx.cs;
a110 5
	if (ctx->gfx_flush_in_progress)
		return;

	ctx->gfx_flush_in_progress = true;

a116 1
		ctx->gfx_flush_in_progress = false;
d120 2
d125 2
a126 2
			SI_CONTEXT_INV_VMEM_L1 |
			SI_CONTEXT_INV_GLOBAL_L2 |
d129 1
a129 1
	si_emit_cache_flush(ctx, NULL);
a133 26
	if (ctx->trace_buf)
		si_trace_emit(ctx);

	if (ctx->is_debug) {
		unsigned i;

		/* Save the IB for debug contexts. */
		free(ctx->last_ib);
		ctx->last_ib_dw_size = cs->cdw;
		ctx->last_ib = malloc(cs->cdw * 4);
		memcpy(ctx->last_ib, cs->buf, cs->cdw * 4);
		r600_resource_reference(&ctx->last_trace_buf, ctx->trace_buf);
		r600_resource_reference(&ctx->trace_buf, NULL);

		/* Save the buffer list. */
		if (ctx->last_bo_list) {
			for (i = 0; i < ctx->last_bo_count; i++)
				pb_reference(&ctx->last_bo_list[i].buf, NULL);
			free(ctx->last_bo_list);
		}
		ctx->last_bo_count = ws->cs_get_buffer_list(cs, NULL);
		ctx->last_bo_list = calloc(ctx->last_bo_count,
					   sizeof(ctx->last_bo_list[0]));
		ws->cs_get_buffer_list(cs, ctx->last_bo_list);
	}

d137 1
d142 19
a160 3
	/* Check VM faults if needed. */
	if (ctx->screen->b.debug_flags & DBG_CHECK_VM)
		si_check_vm_faults(ctx);
a162 1
	ctx->gfx_flush_in_progress = false;
a166 17
	if (ctx->is_debug) {
		uint32_t zero = 0;

		/* Create a buffer used for writing trace IDs and initialize it to 0. */
		assert(!ctx->trace_buf);
		ctx->trace_buf = (struct r600_resource*)
				 pipe_buffer_create(ctx->b.b.screen, PIPE_BIND_CUSTOM,
						    PIPE_USAGE_STAGING, 4);
		if (ctx->trace_buf)
			pipe_buffer_write_nooverlap(&ctx->b.b, &ctx->trace_buf->b.b,
						    0, sizeof(zero), &zero);
		ctx->trace_id = 0;
	}

	if (ctx->trace_buf)
		si_trace_emit(ctx);

d169 3
a171 3
			SI_CONTEXT_INV_VMEM_L1 |
			SI_CONTEXT_INV_GLOBAL_L2 |
			SI_CONTEXT_INV_SMEM_L1 |
a180 2
	if (ctx->init_config_gs_rings)
		si_pm4_emit(ctx, ctx->init_config_gs_rings);
d182 1
a182 2
	ctx->framebuffer.dirty_cbufs = (1 << 8) - 1;
	ctx->framebuffer.dirty_zsbuf = true;
a183 3

	si_mark_atom_dirty(ctx, &ctx->clip_regs);
	si_mark_atom_dirty(ctx, &ctx->clip_state.atom);
a185 3
	si_mark_atom_dirty(ctx, &ctx->sample_mask.atom);
	si_mark_atom_dirty(ctx, &ctx->cb_render_state);
	si_mark_atom_dirty(ctx, &ctx->blend_color.atom);
a186 2
	si_mark_atom_dirty(ctx, &ctx->stencil_ref.atom);
	si_mark_atom_dirty(ctx, &ctx->spi_map);
a187 1
	si_mark_atom_dirty(ctx, &ctx->b.render_cond_atom);
a189 5
	ctx->scissors.dirty_mask = (1 << SI_MAX_VIEWPORTS) - 1;
	ctx->viewports.dirty_mask = (1 << SI_MAX_VIEWPORTS) - 1;
	si_mark_atom_dirty(ctx, &ctx->scissors.atom);
	si_mark_atom_dirty(ctx, &ctx->viewports.atom);

d192 1
a192 1
	ctx->b.initial_gfx_cs_size = ctx->b.gfx.cs->cdw;
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@a27 31
#include "radeon/r600_cs.h"

static unsigned si_descriptor_list_cs_space(unsigned count, unsigned element_size)
{
	/* Ensure we have enough space to start a new range in a hole */
	assert(element_size >= 3);

	/* 5 dwords for possible load to reinitialize when we have no preamble
	 * IB + 5 dwords for write to L2 + 3 bytes for every range written to
	 * CE RAM.
	 */
	return 5 + 5 + 3 + count * element_size;
}

static unsigned si_ce_needed_cs_space(void)
{
	unsigned space = 0;

	space += si_descriptor_list_cs_space(SI_NUM_CONST_BUFFERS, 4);
	space += si_descriptor_list_cs_space(SI_NUM_SHADER_BUFFERS, 4);
	space += si_descriptor_list_cs_space(SI_NUM_SAMPLERS, 16);
	space += si_descriptor_list_cs_space(SI_NUM_IMAGES, 8);
	space *= SI_NUM_SHADERS;

	space += si_descriptor_list_cs_space(SI_NUM_RW_BUFFERS, 4);

	/* Increment CE counter packet */
	space += 2;

	return space;
}
a32 1
	struct radeon_winsys_cs *ce_ib = ctx->ce_ib;
d36 1
a36 1
	if (radeon_emitted(dma, 0))
d43 2
a44 2
	if (unlikely(!radeon_cs_memory_below_limit(ctx->b.screen, ctx->b.gfx.cs,
						   ctx->b.vram, ctx->b.gtt))) {
d56 1
a56 2
	if (!ctx->b.ws->cs_check_space(cs, 2048) ||
	    (ce_ib && !ctx->b.ws->cs_check_space(ce_ib, si_ce_needed_cs_space())))
d70 1
a70 2
	if (!radeon_emitted(cs, ctx->b.initial_gfx_cs_size))
		return;
d72 7
a78 1
	if (r600_check_device_reset(&ctx->b))
d80 1
a80 2

	ctx->gfx_flush_in_progress = true;
d84 4
a87 1
	ctx->b.flags |= SI_CONTEXT_CS_PARTIAL_FLUSH |
d89 1
d91 2
a92 6
	/* DRM 3.1.0 doesn't flush TC for VI correctly. */
	if (ctx->b.chip_class == VI && ctx->b.screen->info.drm_minor <= 1)
		ctx->b.flags |= SI_CONTEXT_INV_GLOBAL_L2 |
				SI_CONTEXT_INV_VMEM_L1;

	si_emit_cache_flush(ctx);
d98 2
d101 4
a104 2
		radeon_clear_saved_cs(&ctx->last_gfx);
		radeon_save_cs(ws, cs, &ctx->last_gfx);
d107 11
d121 3
a123 1
	ws->cs_flush(cs, flags, &ctx->b.last_gfx_fence);
d125 1
a125 2
		ws->fence_reference(fence, ctx->b.last_gfx_fence);
	ctx->b.num_gfx_cs_flushes++;
d128 2
a129 8
	if (ctx->screen->b.debug_flags & DBG_CHECK_VM) {
		/* Use conservative timeout 800ms, after which we won't wait any
		 * longer and assume the GPU is hung.
		 */
		ctx->b.ws->fence_wait(ctx->b.ws, ctx->b.last_gfx_fence, 800*1000*1000);

		si_check_vm_faults(&ctx->b, &ctx->last_gfx, RING_GFX);
	}
d154 6
a159 6
	/* Flush read caches at the beginning of CS not flushed by the kernel. */
	if (ctx->b.chip_class >= CIK)
		ctx->b.flags |= SI_CONTEXT_INV_SMEM_L1 |
				SI_CONTEXT_INV_ICACHE;

	ctx->b.flags |= R600_CONTEXT_START_PIPELINE_STATS;
a170 8
	if (ctx->ce_preamble_ib)
		si_ce_enable_loads(ctx->ce_preamble_ib);
	else if (ctx->ce_ib)
		si_ce_enable_loads(ctx->ce_ib);

	if (ctx->ce_preamble_ib)
		si_ce_reinitialize_all_descriptors(ctx);

d177 1
a177 2
	ctx->msaa_sample_locs.nr_samples = 0;
	si_mark_atom_dirty(ctx, &ctx->msaa_sample_locs.atom);
d189 4
a192 5
	ctx->b.scissors.dirty_mask = (1 << R600_MAX_VIEWPORTS) - 1;
	ctx->b.viewports.dirty_mask = (1 << R600_MAX_VIEWPORTS) - 1;
	ctx->b.viewports.depth_range_dirty_mask = (1 << R600_MAX_VIEWPORTS) - 1;
	si_mark_atom_dirty(ctx, &ctx->b.scissors.atom);
	si_mark_atom_dirty(ctx, &ctx->b.viewports.atom);
d196 1
a196 2
	assert(!ctx->b.gfx.cs->prev_dw);
	ctx->b.initial_gfx_cs_size = ctx->b.gfx.cs->current.cdw;
a200 1
	ctx->last_index_size = -1;
d206 1
a208 1
	ctx->last_vtx_reuse_depth = -1;
a213 2

	ctx->cs_shader_state.initialized = false;
@


1.1.1.4
log
@Import Mesa 17.1.6
@
text
@d65 1
d67 3
a69 6
	/* There is no need to flush the DMA IB here, because
	 * r600_need_dma_space always flushes the GFX IB if there is
	 * a conflict, which means any unflushed DMA commands automatically
	 * precede the GFX IB (= they had no dependency on the GFX IB when
	 * they were submitted).
	 */
a108 13
	if (ctx->screen->b.debug_flags & DBG_CHECK_VM)
		flags &= ~RADEON_FLUSH_ASYNC;

	/* If the state tracker is flushing the GFX IB, r600_flush_from_st is
	 * responsible for flushing the DMA IB and merging the fences from both.
	 * This code is only needed when the driver flushes the GFX IB
	 * internally, and it never asks for a fence handle.
	 */
	if (radeon_emitted(ctx->b.dma.cs, 0)) {
		assert(fence == NULL); /* internal flushes only */
		ctx->b.dma.flush(ctx, flags, NULL);
	}

d162 1
a162 1
				 pipe_buffer_create(ctx->b.b.screen, 0,
a197 3
	if (ctx->b.chip_class >= CIK)
		si_mark_atom_dirty(ctx, &ctx->prefetch_L2);

a222 6
	si_mark_atom_dirty(ctx, &ctx->scratch_state);
	if (ctx->scratch_buffer) {
		r600_context_add_resource_size(&ctx->b.b,
					       &ctx->scratch_buffer->b.b);
	}

d239 2
a240 1
	ctx->last_vs_state = ~0;
@


