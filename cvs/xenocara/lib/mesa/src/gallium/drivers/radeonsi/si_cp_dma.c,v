head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	mesa-17_1_6:1.1.1.4
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.08.26.16.59.26;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2015.11.22.02.44.42;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.44.42;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.20.20;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.28.10;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.08.14.09.32.56;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/*
 * Copyright 2013 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHOR(S) AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *      Marek Olšák <maraeo@@gmail.com>
 */

#include "si_pipe.h"
#include "sid.h"
#include "radeon/r600_cs.h"

/* Alignment for optimal performance. */
#define CP_DMA_ALIGNMENT	32
/* The max number of bytes to copy per packet. */
#define CP_DMA_MAX_BYTE_COUNT	((1 << 21) - CP_DMA_ALIGNMENT)

/* Set this if you want the ME to wait until CP DMA is done.
 * It should be set on the last CP DMA packet. */
#define CP_DMA_SYNC		(1 << 0)

/* Set this if the source data was used as a destination in a previous CP DMA
 * packet. It's for preventing a read-after-write (RAW) hazard between two
 * CP DMA packets. */
#define CP_DMA_RAW_WAIT		(1 << 1)
#define CP_DMA_USE_L2		(1 << 2) /* CIK+ */
#define CP_DMA_CLEAR		(1 << 3)

/* Emit a CP DMA packet to do a copy from one buffer to another, or to clear
 * a buffer. The size must fit in bits [20:0]. If CP_DMA_CLEAR is set, src_va is a 32-bit
 * clear value.
 */
static void si_emit_cp_dma(struct si_context *sctx, uint64_t dst_va,
			   uint64_t src_va, unsigned size, unsigned flags,
			   enum r600_coherency coher)
{
	struct radeon_winsys_cs *cs = sctx->b.gfx.cs;
	uint32_t header = 0, command = S_414_BYTE_COUNT(size);

	assert(size);
	assert(size <= CP_DMA_MAX_BYTE_COUNT);

	/* Sync flags. */
	if (flags & CP_DMA_SYNC)
		header |= S_411_CP_SYNC(1);
	else
		command |= S_414_DISABLE_WR_CONFIRM(1);

	if (flags & CP_DMA_RAW_WAIT)
		command |= S_414_RAW_WAIT(1);

	/* Src and dst flags. */
	if (flags & CP_DMA_USE_L2)
		header |= S_411_DSL_SEL(V_411_DST_ADDR_TC_L2);

	if (flags & CP_DMA_CLEAR)
		header |= S_411_SRC_SEL(V_411_DATA);
	else if (flags & CP_DMA_USE_L2)
		header |= S_411_SRC_SEL(V_411_SRC_ADDR_TC_L2);

	if (sctx->b.chip_class >= CIK) {
		radeon_emit(cs, PKT3(PKT3_DMA_DATA, 5, 0));
		radeon_emit(cs, header);
		radeon_emit(cs, src_va);	/* SRC_ADDR_LO [31:0] */
		radeon_emit(cs, src_va >> 32);	/* SRC_ADDR_HI [31:0] */
		radeon_emit(cs, dst_va);	/* DST_ADDR_LO [31:0] */
		radeon_emit(cs, dst_va >> 32);	/* DST_ADDR_HI [31:0] */
		radeon_emit(cs, command);
	} else {
		header |= S_411_SRC_ADDR_HI(src_va >> 32);

		radeon_emit(cs, PKT3(PKT3_CP_DMA, 4, 0));
		radeon_emit(cs, src_va);	/* SRC_ADDR_LO [31:0] */
		radeon_emit(cs, header);	/* SRC_ADDR_HI [15:0] + flags. */
		radeon_emit(cs, dst_va);	/* DST_ADDR_LO [31:0] */
		radeon_emit(cs, (dst_va >> 32) & 0xffff); /* DST_ADDR_HI [15:0] */
		radeon_emit(cs, command);
	}

	/* CP DMA is executed in ME, but index buffers are read by PFP.
	 * This ensures that ME (CP DMA) is idle before PFP starts fetching
	 * indices. If we wanted to execute CP DMA in PFP, this packet
	 * should precede it.
	 */
	if (coher == R600_COHERENCY_SHADER && flags & CP_DMA_SYNC) {
		radeon_emit(cs, PKT3(PKT3_PFP_SYNC_ME, 0, 0));
		radeon_emit(cs, 0);
	}
}

static unsigned get_flush_flags(struct si_context *sctx, enum r600_coherency coher)
{
	switch (coher) {
	default:
	case R600_COHERENCY_NONE:
		return 0;
	case R600_COHERENCY_SHADER:
		return SI_CONTEXT_INV_SMEM_L1 |
		       SI_CONTEXT_INV_VMEM_L1 |
		       (sctx->b.chip_class == SI ? SI_CONTEXT_INV_GLOBAL_L2 : 0);
	case R600_COHERENCY_CB_META:
		return SI_CONTEXT_FLUSH_AND_INV_CB |
		       SI_CONTEXT_FLUSH_AND_INV_CB_META;
	}
}

static unsigned get_tc_l2_flag(struct si_context *sctx, enum r600_coherency coher)
{
	return coher == R600_COHERENCY_SHADER &&
	       sctx->b.chip_class >= CIK ? CP_DMA_USE_L2 : 0;
}

static void si_cp_dma_prepare(struct si_context *sctx, struct pipe_resource *dst,
			      struct pipe_resource *src, unsigned byte_count,
			      uint64_t remaining_size, unsigned *flags)
{
	/* Count memory usage in so that need_cs_space can take it into account. */
	r600_context_add_resource_size(&sctx->b.b, dst);
	if (src)
		r600_context_add_resource_size(&sctx->b.b, src);

	si_need_cs_space(sctx);

	/* This must be done after need_cs_space. */
	radeon_add_to_buffer_list(&sctx->b, &sctx->b.gfx,
				  (struct r600_resource*)dst,
				  RADEON_USAGE_WRITE, RADEON_PRIO_CP_DMA);
	if (src)
		radeon_add_to_buffer_list(&sctx->b, &sctx->b.gfx,
					  (struct r600_resource*)src,
					  RADEON_USAGE_READ, RADEON_PRIO_CP_DMA);

	/* Flush the caches for the first copy only.
	 * Also wait for the previous CP DMA operations.
	 */
	if (sctx->b.flags) {
		si_emit_cache_flush(sctx);
		*flags |= CP_DMA_RAW_WAIT;
	}

	/* Do the synchronization after the last dma, so that all data
	 * is written to memory.
	 */
	if (byte_count == remaining_size)
		*flags |= CP_DMA_SYNC;
}

static void si_clear_buffer(struct pipe_context *ctx, struct pipe_resource *dst,
			    uint64_t offset, uint64_t size, unsigned value,
			    enum r600_coherency coher)
{
	struct si_context *sctx = (struct si_context*)ctx;
	unsigned tc_l2_flag = get_tc_l2_flag(sctx, coher);
	unsigned flush_flags = get_flush_flags(sctx, coher);

	if (!size)
		return;

	/* Mark the buffer range of destination as valid (initialized),
	 * so that transfer_map knows it should wait for the GPU when mapping
	 * that range. */
	util_range_add(&r600_resource(dst)->valid_buffer_range, offset,
		       offset + size);

	/* Fallback for unaligned clears. */
	if (offset % 4 != 0 || size % 4 != 0) {
		uint8_t *map = sctx->b.ws->buffer_map(r600_resource(dst)->buf,
						      sctx->b.gfx.cs,
						      PIPE_TRANSFER_WRITE);
		map += offset;
		for (uint64_t i = 0; i < size; i++) {
			unsigned byte_within_dword = (offset + i) % 4;
			*map++ = (value >> (byte_within_dword * 8)) & 0xff;
		}
		return;
	}

	uint64_t va = r600_resource(dst)->gpu_address + offset;

	/* Flush the caches. */
	sctx->b.flags |= SI_CONTEXT_PS_PARTIAL_FLUSH |
	                 SI_CONTEXT_CS_PARTIAL_FLUSH | flush_flags;

	while (size) {
		unsigned byte_count = MIN2(size, CP_DMA_MAX_BYTE_COUNT);
		unsigned dma_flags = tc_l2_flag  | CP_DMA_CLEAR;

		si_cp_dma_prepare(sctx, dst, NULL, byte_count, size, &dma_flags);

		/* Emit the clear packet. */
		si_emit_cp_dma(sctx, va, value, byte_count, dma_flags, coher);

		size -= byte_count;
		va += byte_count;
	}

	if (tc_l2_flag)
		r600_resource(dst)->TC_L2_dirty = true;
}

/**
 * Realign the CP DMA engine. This must be done after a copy with an unaligned
 * size.
 *
 * \param size  Remaining size to the CP DMA alignment.
 */
static void si_cp_dma_realign_engine(struct si_context *sctx, unsigned size)
{
	uint64_t va;
	unsigned dma_flags = 0;
	unsigned scratch_size = CP_DMA_ALIGNMENT * 2;

	assert(size < CP_DMA_ALIGNMENT);

	/* Use the scratch buffer as the dummy buffer. The 3D engine should be
	 * idle at this point.
	 */
	if (!sctx->scratch_buffer ||
	    sctx->scratch_buffer->b.b.width0 < scratch_size) {
		r600_resource_reference(&sctx->scratch_buffer, NULL);
		sctx->scratch_buffer =
			si_resource_create_custom(&sctx->screen->b.b,
						  PIPE_USAGE_DEFAULT,
						  scratch_size);
		if (!sctx->scratch_buffer)
			return;
		sctx->emit_scratch_reloc = true;
	}

	si_cp_dma_prepare(sctx, &sctx->scratch_buffer->b.b,
			  &sctx->scratch_buffer->b.b, size, size, &dma_flags);

	va = sctx->scratch_buffer->gpu_address;
	si_emit_cp_dma(sctx, va, va + CP_DMA_ALIGNMENT, size, dma_flags,
		       R600_COHERENCY_SHADER);
}

void si_copy_buffer(struct si_context *sctx,
		    struct pipe_resource *dst, struct pipe_resource *src,
		    uint64_t dst_offset, uint64_t src_offset, unsigned size)
{
	uint64_t main_dst_offset, main_src_offset;
	unsigned skipped_size = 0;
	unsigned realign_size = 0;
	unsigned tc_l2_flag = get_tc_l2_flag(sctx, R600_COHERENCY_SHADER);
	unsigned flush_flags = get_flush_flags(sctx, R600_COHERENCY_SHADER);

	if (!size)
		return;

	/* Mark the buffer range of destination as valid (initialized),
	 * so that transfer_map knows it should wait for the GPU when mapping
	 * that range. */
	util_range_add(&r600_resource(dst)->valid_buffer_range, dst_offset,
		       dst_offset + size);

	dst_offset += r600_resource(dst)->gpu_address;
	src_offset += r600_resource(src)->gpu_address;

	/* The workarounds aren't needed on Fiji and beyond. */
	if (sctx->b.family <= CHIP_CARRIZO ||
	    sctx->b.family == CHIP_STONEY) {
		/* If the size is not aligned, we must add a dummy copy at the end
		 * just to align the internal counter. Otherwise, the DMA engine
		 * would slow down by an order of magnitude for following copies.
		 */
		if (size % CP_DMA_ALIGNMENT)
			realign_size = CP_DMA_ALIGNMENT - (size % CP_DMA_ALIGNMENT);

		/* If the copy begins unaligned, we must start copying from the next
		 * aligned block and the skipped part should be copied after everything
		 * else has been copied. Only the src alignment matters, not dst.
		 */
		if (src_offset % CP_DMA_ALIGNMENT) {
			skipped_size = CP_DMA_ALIGNMENT - (src_offset % CP_DMA_ALIGNMENT);
			/* The main part will be skipped if the size is too small. */
			skipped_size = MIN2(skipped_size, size);
			size -= skipped_size;
		}
	}

	/* Flush the caches. */
	sctx->b.flags |= SI_CONTEXT_PS_PARTIAL_FLUSH |
	                 SI_CONTEXT_CS_PARTIAL_FLUSH | flush_flags;

	/* This is the main part doing the copying. Src is always aligned. */
	main_dst_offset = dst_offset + skipped_size;
	main_src_offset = src_offset + skipped_size;

	while (size) {
		unsigned dma_flags = tc_l2_flag;
		unsigned byte_count = MIN2(size, CP_DMA_MAX_BYTE_COUNT);

		si_cp_dma_prepare(sctx, dst, src, byte_count,
				  size + skipped_size + realign_size,
				  &dma_flags);

		si_emit_cp_dma(sctx, main_dst_offset, main_src_offset,
			       byte_count, dma_flags, R600_COHERENCY_SHADER);

		size -= byte_count;
		main_src_offset += byte_count;
		main_dst_offset += byte_count;
	}

	/* Copy the part we skipped because src wasn't aligned. */
	if (skipped_size) {
		unsigned dma_flags = tc_l2_flag;

		si_cp_dma_prepare(sctx, dst, src, skipped_size,
				  skipped_size + realign_size,
				  &dma_flags);

		si_emit_cp_dma(sctx, dst_offset, src_offset, skipped_size,
			       dma_flags, R600_COHERENCY_SHADER);
	}

	/* Finally, realign the engine if the size wasn't aligned. */
	if (realign_size)
		si_cp_dma_realign_engine(sctx, realign_size);

	if (tc_l2_flag)
		r600_resource(dst)->TC_L2_dirty = true;
}

void si_init_cp_dma_functions(struct si_context *sctx)
{
	sctx->b.clear_buffer = si_clear_buffer;
}
@


1.1
log
@Initial revision
@
text
@d31 4
d36 1
a36 1
/* Set this if you want the 3D engine to wait until CP DMA is done.
d38 1
a38 1
#define R600_CP_DMA_SYNC	(1 << 0) /* R600+ */
d43 7
a49 5
#define SI_CP_DMA_RAW_WAIT	(1 << 1) /* SI+ */
#define CIK_CP_DMA_USE_L2	(1 << 2)

/* Emit a CP DMA packet to do a copy from one buffer to another.
 * The size must fit in bits [20:0].
d51 6
a56 9
static void si_emit_cp_dma_copy_buffer(struct si_context *sctx,
				       uint64_t dst_va, uint64_t src_va,
				       unsigned size, unsigned flags)
{
	struct radeon_winsys_cs *cs = sctx->b.rings.gfx.cs;
	uint32_t sync_flag = flags & R600_CP_DMA_SYNC ? PKT3_CP_DMA_CP_SYNC : 0;
	uint32_t raw_wait = flags & SI_CP_DMA_RAW_WAIT ? PKT3_CP_DMA_CMD_RAW_WAIT : 0;
	uint32_t sel = flags & CIK_CP_DMA_USE_L2 ?
			   PKT3_CP_DMA_SRC_SEL(3) | PKT3_CP_DMA_DST_SEL(3) : 0;
d59 19
a77 1
	assert((size & ((1<<21)-1)) == size);
d81 6
a86 6
		radeon_emit(cs, sync_flag | sel);	/* CP_SYNC [31] */
		radeon_emit(cs, src_va);		/* SRC_ADDR_LO [31:0] */
		radeon_emit(cs, src_va >> 32);		/* SRC_ADDR_HI [31:0] */
		radeon_emit(cs, dst_va);		/* DST_ADDR_LO [31:0] */
		radeon_emit(cs, dst_va >> 32);		/* DST_ADDR_HI [31:0] */
		radeon_emit(cs, size | raw_wait);	/* COMMAND [29:22] | BYTE_COUNT [20:0] */
d88 2
d91 15
a105 5
		radeon_emit(cs, src_va);			/* SRC_ADDR_LO [31:0] */
		radeon_emit(cs, sync_flag | ((src_va >> 32) & 0xffff)); /* CP_SYNC [31] | SRC_ADDR_HI [15:0] */
		radeon_emit(cs, dst_va);			/* DST_ADDR_LO [31:0] */
		radeon_emit(cs, (dst_va >> 32) & 0xffff);	/* DST_ADDR_HI [15:0] */
		radeon_emit(cs, size | raw_wait);		/* COMMAND [29:22] | BYTE_COUNT [20:0] */
d109 15
a123 9
/* Emit a CP DMA packet to clear a buffer. The size must fit in bits [20:0]. */
static void si_emit_cp_dma_clear_buffer(struct si_context *sctx,
					uint64_t dst_va, unsigned size,
					uint32_t clear_value, unsigned flags)
{
	struct radeon_winsys_cs *cs = sctx->b.rings.gfx.cs;
	uint32_t sync_flag = flags & R600_CP_DMA_SYNC ? PKT3_CP_DMA_CP_SYNC : 0;
	uint32_t raw_wait = flags & SI_CP_DMA_RAW_WAIT ? PKT3_CP_DMA_CMD_RAW_WAIT : 0;
	uint32_t dst_sel = flags & CIK_CP_DMA_USE_L2 ? PKT3_CP_DMA_DST_SEL(3) : 0;
d125 5
a129 2
	assert(size);
	assert((size & ((1<<21)-1)) == size);
d131 26
a156 15
	if (sctx->b.chip_class >= CIK) {
		radeon_emit(cs, PKT3(PKT3_DMA_DATA, 5, 0));
		radeon_emit(cs, sync_flag | dst_sel | PKT3_CP_DMA_SRC_SEL(2)); /* CP_SYNC [31] | SRC_SEL[30:29] */
		radeon_emit(cs, clear_value);		/* DATA [31:0] */
		radeon_emit(cs, 0);
		radeon_emit(cs, dst_va);		/* DST_ADDR_LO [31:0] */
		radeon_emit(cs, dst_va >> 32);		/* DST_ADDR_HI [15:0] */
		radeon_emit(cs, size | raw_wait);	/* COMMAND [29:22] | BYTE_COUNT [20:0] */
	} else {
		radeon_emit(cs, PKT3(PKT3_CP_DMA, 4, 0));
		radeon_emit(cs, clear_value);		/* DATA [31:0] */
		radeon_emit(cs, sync_flag | PKT3_CP_DMA_SRC_SEL(2)); /* CP_SYNC [31] | SRC_SEL[30:29] */
		radeon_emit(cs, dst_va);			/* DST_ADDR_LO [31:0] */
		radeon_emit(cs, (dst_va >> 32) & 0xffff);	/* DST_ADDR_HI [15:0] */
		radeon_emit(cs, size | raw_wait);		/* COMMAND [29:22] | BYTE_COUNT [20:0] */
d158 6
a165 3
/* The max number of bytes to copy per packet. */
#define CP_DMA_MAX_BYTE_COUNT ((1 << 21) - 8)

d167 2
a168 2
			    unsigned offset, unsigned size, unsigned value,
			    bool is_framebuffer)
d171 2
a172 1
	unsigned flush_flags, tc_l2_flag;
d185 8
a192 6
		uint32_t *map = sctx->b.ws->buffer_map(r600_resource(dst)->cs_buf,
						       sctx->b.rings.gfx.cs,
						       PIPE_TRANSFER_WRITE);
		size /= 4;
		for (unsigned i = 0; i < size; i++)
			*map++ = value;
d198 1
a198 11
	/* Flush the caches where the resource is bound. */
	if (is_framebuffer) {
		flush_flags = SI_CONTEXT_FLUSH_AND_INV_FRAMEBUFFER;
		tc_l2_flag = 0;
	} else {
		flush_flags = SI_CONTEXT_INV_TC_L1 |
			      (sctx->b.chip_class == SI ? SI_CONTEXT_INV_TC_L2 : 0) |
			      SI_CONTEXT_INV_KCACHE;
		tc_l2_flag = sctx->b.chip_class == SI ? 0 : CIK_CP_DMA_USE_L2;
	}

d200 1
a200 1
			 flush_flags;
d204 1
a204 16
		unsigned dma_flags = tc_l2_flag;

		si_need_cs_space(sctx, 7 + (sctx->b.flags ? sctx->cache_flush.num_dw : 0),
				 FALSE);

		/* This must be done after need_cs_space. */
		r600_context_bo_reloc(&sctx->b, &sctx->b.rings.gfx,
				      (struct r600_resource*)dst, RADEON_USAGE_WRITE,
				      RADEON_PRIO_MIN);

		/* Flush the caches for the first copy only.
		 * Also wait for the previous CP DMA operations. */
		if (sctx->b.flags) {
			si_emit_cache_flush(&sctx->b, NULL);
			dma_flags |= SI_CP_DMA_RAW_WAIT; /* same as WAIT_UNTIL=CP_DMA_IDLE */
		}
d206 1
a206 3
		/* Do the synchronization after the last copy, so that all data is written to memory. */
		if (size == byte_count)
			dma_flags |= R600_CP_DMA_SYNC;
d209 1
a209 1
		si_emit_cp_dma_clear_buffer(sctx, va, byte_count, value, dma_flags);
a214 4
	/* Flush the caches again in case the 3D engine has been prefetching
	 * the resource. */
	sctx->b.flags |= flush_flags;

d219 37
d258 1
a258 2
		    uint64_t dst_offset, uint64_t src_offset, unsigned size,
		    bool is_framebuffer)
d260 5
a264 1
	unsigned flush_flags, tc_l2_flag;
d278 20
a297 9
	/* Flush the caches where the resource is bound. */
	if (is_framebuffer) {
		flush_flags = SI_CONTEXT_FLUSH_AND_INV_FRAMEBUFFER;
		tc_l2_flag = 0;
	} else {
		flush_flags = SI_CONTEXT_INV_TC_L1 |
			      (sctx->b.chip_class == SI ? SI_CONTEXT_INV_TC_L2 : 0) |
			      SI_CONTEXT_INV_KCACHE;
		tc_l2_flag = sctx->b.chip_class == SI ? 0 : CIK_CP_DMA_USE_L2;
d300 1
d302 5
a306 1
			 flush_flags;
d309 1
a309 1
		unsigned sync_flags = tc_l2_flag;
d312 3
a314 1
		si_need_cs_space(sctx, 7 + (sctx->b.flags ? sctx->cache_flush.num_dw : 0), FALSE);
d316 2
a317 5
		/* Flush the caches for the first copy only. Also wait for old CP DMA packets to complete. */
		if (sctx->b.flags) {
			si_emit_cache_flush(&sctx->b, NULL);
			sync_flags |= SI_CP_DMA_RAW_WAIT;
		}
d319 4
a322 4
		/* Do the synchronization after the last copy, so that all data is written to memory. */
		if (size == byte_count) {
			sync_flags |= R600_CP_DMA_SYNC;
		}
d324 3
a326 5
		/* This must be done after r600_need_cs_space. */
		r600_context_bo_reloc(&sctx->b, &sctx->b.rings.gfx, (struct r600_resource*)src,
				      RADEON_USAGE_READ, RADEON_PRIO_MIN);
		r600_context_bo_reloc(&sctx->b, &sctx->b.rings.gfx, (struct r600_resource*)dst,
				      RADEON_USAGE_WRITE, RADEON_PRIO_MIN);
d328 3
a330 1
		si_emit_cp_dma_copy_buffer(sctx, dst_offset, src_offset, byte_count, sync_flags);
d332 2
a333 3
		size -= byte_count;
		src_offset += byte_count;
		dst_offset += byte_count;
d336 3
a338 3
	/* Flush the caches again in case the 3D engine has been prefetching
	 * the resource. */
	sctx->b.flags |= flush_flags;
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d49 3
a51 4
	struct radeon_winsys_cs *cs = sctx->b.gfx.cs;
	uint32_t sync_flag = flags & R600_CP_DMA_SYNC ? S_411_CP_SYNC(1) : 0;
	uint32_t wr_confirm = !(flags & R600_CP_DMA_SYNC) ? S_414_DISABLE_WR_CONFIRM(1) : 0;
	uint32_t raw_wait = flags & SI_CP_DMA_RAW_WAIT ? S_414_RAW_WAIT(1) : 0;
d53 1
a53 2
			   S_411_SRC_SEL(V_411_SRC_ADDR_TC_L2) |
			   S_411_DSL_SEL(V_411_DST_ADDR_TC_L2) : 0;
d65 1
a65 1
		radeon_emit(cs, size | wr_confirm | raw_wait);	/* COMMAND [29:22] | BYTE_COUNT [20:0] */
d72 1
a72 1
		radeon_emit(cs, size | wr_confirm | raw_wait);	/* COMMAND [29:22] | BYTE_COUNT [20:0] */
d81 4
a84 5
	struct radeon_winsys_cs *cs = sctx->b.gfx.cs;
	uint32_t sync_flag = flags & R600_CP_DMA_SYNC ? S_411_CP_SYNC(1) : 0;
	uint32_t wr_confirm = !(flags & R600_CP_DMA_SYNC) ? S_414_DISABLE_WR_CONFIRM(1) : 0;
	uint32_t raw_wait = flags & SI_CP_DMA_RAW_WAIT ? S_414_RAW_WAIT(1) : 0;
	uint32_t dst_sel = flags & CIK_CP_DMA_USE_L2 ? S_411_DSL_SEL(V_411_DST_ADDR_TC_L2) : 0;
d91 1
a91 1
		radeon_emit(cs, sync_flag | dst_sel | S_411_SRC_SEL(V_411_DATA)); /* CP_SYNC [31] | SRC_SEL[30:29] */
d96 1
a96 1
		radeon_emit(cs, size | wr_confirm | raw_wait);	/* COMMAND [29:22] | BYTE_COUNT [20:0] */
d100 1
a100 1
		radeon_emit(cs, sync_flag | S_411_SRC_SEL(V_411_DATA)); /* CP_SYNC [31] | SRC_SEL[30:29] */
d103 1
a103 1
		radeon_emit(cs, size | wr_confirm | raw_wait);	/* COMMAND [29:22] | BYTE_COUNT [20:0] */
a106 47
static unsigned get_flush_flags(struct si_context *sctx, bool is_framebuffer)
{
	if (is_framebuffer)
		return SI_CONTEXT_FLUSH_AND_INV_FRAMEBUFFER;

	return SI_CONTEXT_INV_SMEM_L1 |
	       SI_CONTEXT_INV_VMEM_L1 |
	       (sctx->b.chip_class == SI ? SI_CONTEXT_INV_GLOBAL_L2 : 0);
}

static unsigned get_tc_l2_flag(struct si_context *sctx, bool is_framebuffer)
{
	return is_framebuffer || sctx->b.chip_class == SI ? 0 : CIK_CP_DMA_USE_L2;
}

static void si_cp_dma_prepare(struct si_context *sctx, struct pipe_resource *dst,
			      struct pipe_resource *src, unsigned byte_count,
			      unsigned remaining_size, unsigned *flags)
{
	si_need_cs_space(sctx);

	/* This must be done after need_cs_space. */
	radeon_add_to_buffer_list(&sctx->b, &sctx->b.gfx,
				  (struct r600_resource*)dst,
				  RADEON_USAGE_WRITE, RADEON_PRIO_CP_DMA);
	if (src)
		radeon_add_to_buffer_list(&sctx->b, &sctx->b.gfx,
					  (struct r600_resource*)src,
					  RADEON_USAGE_READ, RADEON_PRIO_CP_DMA);

	/* Flush the caches for the first copy only.
	 * Also wait for the previous CP DMA operations.
	 */
	if (sctx->b.flags) {
		si_emit_cache_flush(sctx, NULL);
		*flags |= SI_CP_DMA_RAW_WAIT;
	}

	/* Do the synchronization after the last dma, so that all data
	 * is written to memory.
	 */
	if (byte_count == remaining_size)
		*flags |= R600_CP_DMA_SYNC;
}

/* Alignment for optimal performance. */
#define CP_DMA_ALIGNMENT	32
d108 1
a108 1
#define CP_DMA_MAX_BYTE_COUNT	((1 << 21) - CP_DMA_ALIGNMENT)
d115 1
a115 2
	unsigned tc_l2_flag = get_tc_l2_flag(sctx, is_framebuffer);
	unsigned flush_flags = get_flush_flags(sctx, is_framebuffer);
d128 6
a133 8
		uint8_t *map = sctx->b.ws->buffer_map(r600_resource(dst)->buf,
						      sctx->b.gfx.cs,
						      PIPE_TRANSFER_WRITE);
		map += offset;
		for (unsigned i = 0; i < size; i++) {
			unsigned byte_within_dword = (offset + i) % 4;
			*map++ = (value >> (byte_within_dword * 8)) & 0xff;
		}
d139 13
a151 2
	/* Flush the caches. */
	sctx->b.flags |= SI_CONTEXT_PS_PARTIAL_FLUSH | flush_flags;
d157 18
a174 1
		si_cp_dma_prepare(sctx, dst, NULL, byte_count, size, &dma_flags);
a190 37
/**
 * Realign the CP DMA engine. This must be done after a copy with an unaligned
 * size.
 *
 * \param size  Remaining size to the CP DMA alignment.
 */
static void si_cp_dma_realign_engine(struct si_context *sctx, unsigned size)
{
	uint64_t va;
	unsigned dma_flags = 0;
	unsigned scratch_size = CP_DMA_ALIGNMENT * 2;

	assert(size < CP_DMA_ALIGNMENT);

	/* Use the scratch buffer as the dummy buffer. The 3D engine should be
	 * idle at this point.
	 */
	if (!sctx->scratch_buffer ||
	    sctx->scratch_buffer->b.b.width0 < scratch_size) {
		r600_resource_reference(&sctx->scratch_buffer, NULL);
		sctx->scratch_buffer =
			si_resource_create_custom(&sctx->screen->b.b,
						  PIPE_USAGE_DEFAULT,
						  scratch_size);
		if (!sctx->scratch_buffer)
			return;
		sctx->emit_scratch_reloc = true;
	}

	si_cp_dma_prepare(sctx, &sctx->scratch_buffer->b.b,
			  &sctx->scratch_buffer->b.b, size, size, &dma_flags);

	va = sctx->scratch_buffer->gpu_address;
	si_emit_cp_dma_copy_buffer(sctx, va, va + CP_DMA_ALIGNMENT, size,
				   dma_flags);
}

d196 1
a196 5
	uint64_t main_dst_offset, main_src_offset;
	unsigned skipped_size = 0;
	unsigned realign_size = 0;
	unsigned tc_l2_flag = get_tc_l2_flag(sctx, is_framebuffer);
	unsigned flush_flags = get_flush_flags(sctx, is_framebuffer);
d210 9
a218 20
	/* The workarounds aren't needed on Fiji and beyond. */
	if (sctx->b.family <= CHIP_CARRIZO ||
	    sctx->b.family == CHIP_STONEY) {
		/* If the size is not aligned, we must add a dummy copy at the end
		 * just to align the internal counter. Otherwise, the DMA engine
		 * would slow down by an order of magnitude for following copies.
		 */
		if (size % CP_DMA_ALIGNMENT)
			realign_size = CP_DMA_ALIGNMENT - (size % CP_DMA_ALIGNMENT);

		/* If the copy begins unaligned, we must start copying from the next
		 * aligned block and the skipped part should be copied after everything
		 * else has been copied. Only the src alignment matters, not dst.
		 */
		if (src_offset % CP_DMA_ALIGNMENT) {
			skipped_size = CP_DMA_ALIGNMENT - (src_offset % CP_DMA_ALIGNMENT);
			/* The main part will be skipped if the size is too small. */
			skipped_size = MIN2(skipped_size, size);
			size -= skipped_size;
		}
d221 2
a222 6
	/* Flush the caches. */
	sctx->b.flags |= SI_CONTEXT_PS_PARTIAL_FLUSH | flush_flags;

	/* This is the main part doing the copying. Src is always aligned. */
	main_dst_offset = dst_offset + skipped_size;
	main_src_offset = src_offset + skipped_size;
d225 1
a225 1
		unsigned dma_flags = tc_l2_flag;
d228 1
a228 3
		si_cp_dma_prepare(sctx, dst, src, byte_count,
				  size + skipped_size + realign_size,
				  &dma_flags);
d230 5
a234 2
		si_emit_cp_dma_copy_buffer(sctx, main_dst_offset, main_src_offset,
					   byte_count, dma_flags);
d236 4
a239 4
		size -= byte_count;
		main_src_offset += byte_count;
		main_dst_offset += byte_count;
	}
d241 5
a245 3
	/* Copy the part we skipped because src wasn't aligned. */
	if (skipped_size) {
		unsigned dma_flags = tc_l2_flag;
d247 1
a247 3
		si_cp_dma_prepare(sctx, dst, src, skipped_size,
				  skipped_size + realign_size,
				  &dma_flags);
d249 3
a251 2
		si_emit_cp_dma_copy_buffer(sctx, dst_offset, src_offset,
					   skipped_size, dma_flags);
a252 4

	/* Finally, realign the engine if the size wasn't aligned. */
	if (realign_size)
		si_cp_dma_realign_engine(sctx, realign_size);
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@a30 4
/* Alignment for optimal performance. */
#define CP_DMA_ALIGNMENT	32
/* The max number of bytes to copy per packet. */
#define CP_DMA_MAX_BYTE_COUNT	((1 << 21) - CP_DMA_ALIGNMENT)
d32 1
a32 1
/* Set this if you want the ME to wait until CP DMA is done.
d34 1
a34 1
#define CP_DMA_SYNC		(1 << 0)
d39 5
a43 7
#define CP_DMA_RAW_WAIT		(1 << 1)
#define CP_DMA_USE_L2		(1 << 2) /* CIK+ */
#define CP_DMA_CLEAR		(1 << 3)

/* Emit a CP DMA packet to do a copy from one buffer to another, or to clear
 * a buffer. The size must fit in bits [20:0]. If CP_DMA_CLEAR is set, src_va is a 32-bit
 * clear value.
d45 3
a47 3
static void si_emit_cp_dma(struct si_context *sctx, uint64_t dst_va,
			   uint64_t src_va, unsigned size, unsigned flags,
			   enum r600_coherency coher)
d50 6
a55 1
	uint32_t header = 0, command = S_414_BYTE_COUNT(size);
d58 1
a58 19
	assert(size <= CP_DMA_MAX_BYTE_COUNT);

	/* Sync flags. */
	if (flags & CP_DMA_SYNC)
		header |= S_411_CP_SYNC(1);
	else
		command |= S_414_DISABLE_WR_CONFIRM(1);

	if (flags & CP_DMA_RAW_WAIT)
		command |= S_414_RAW_WAIT(1);

	/* Src and dst flags. */
	if (flags & CP_DMA_USE_L2)
		header |= S_411_DSL_SEL(V_411_DST_ADDR_TC_L2);

	if (flags & CP_DMA_CLEAR)
		header |= S_411_SRC_SEL(V_411_DATA);
	else if (flags & CP_DMA_USE_L2)
		header |= S_411_SRC_SEL(V_411_SRC_ADDR_TC_L2);
d62 6
a67 6
		radeon_emit(cs, header);
		radeon_emit(cs, src_va);	/* SRC_ADDR_LO [31:0] */
		radeon_emit(cs, src_va >> 32);	/* SRC_ADDR_HI [31:0] */
		radeon_emit(cs, dst_va);	/* DST_ADDR_LO [31:0] */
		radeon_emit(cs, dst_va >> 32);	/* DST_ADDR_HI [31:0] */
		radeon_emit(cs, command);
a68 2
		header |= S_411_SRC_ADDR_HI(src_va >> 32);

d70 5
a74 5
		radeon_emit(cs, src_va);	/* SRC_ADDR_LO [31:0] */
		radeon_emit(cs, header);	/* SRC_ADDR_HI [15:0] + flags. */
		radeon_emit(cs, dst_va);	/* DST_ADDR_LO [31:0] */
		radeon_emit(cs, (dst_va >> 32) & 0xffff); /* DST_ADDR_HI [15:0] */
		radeon_emit(cs, command);
d76 1
d78 18
a95 7
	/* CP DMA is executed in ME, but index buffers are read by PFP.
	 * This ensures that ME (CP DMA) is idle before PFP starts fetching
	 * indices. If we wanted to execute CP DMA in PFP, this packet
	 * should precede it.
	 */
	if (coher == R600_COHERENCY_SHADER && flags & CP_DMA_SYNC) {
		radeon_emit(cs, PKT3(PKT3_PFP_SYNC_ME, 0, 0));
d97 10
d110 1
a110 1
static unsigned get_flush_flags(struct si_context *sctx, enum r600_coherency coher)
d112 6
a117 12
	switch (coher) {
	default:
	case R600_COHERENCY_NONE:
		return 0;
	case R600_COHERENCY_SHADER:
		return SI_CONTEXT_INV_SMEM_L1 |
		       SI_CONTEXT_INV_VMEM_L1 |
		       (sctx->b.chip_class == SI ? SI_CONTEXT_INV_GLOBAL_L2 : 0);
	case R600_COHERENCY_CB_META:
		return SI_CONTEXT_FLUSH_AND_INV_CB |
		       SI_CONTEXT_FLUSH_AND_INV_CB_META;
	}
d120 1
a120 1
static unsigned get_tc_l2_flag(struct si_context *sctx, enum r600_coherency coher)
d122 1
a122 2
	return coher == R600_COHERENCY_SHADER &&
	       sctx->b.chip_class >= CIK ? CP_DMA_USE_L2 : 0;
d127 1
a127 1
			      uint64_t remaining_size, unsigned *flags)
a128 5
	/* Count memory usage in so that need_cs_space can take it into account. */
	r600_context_add_resource_size(&sctx->b.b, dst);
	if (src)
		r600_context_add_resource_size(&sctx->b.b, src);

d144 2
a145 2
		si_emit_cache_flush(sctx);
		*flags |= CP_DMA_RAW_WAIT;
d152 1
a152 1
		*flags |= CP_DMA_SYNC;
d155 5
d161 2
a162 2
			    uint64_t offset, uint64_t size, unsigned value,
			    enum r600_coherency coher)
d165 2
a166 2
	unsigned tc_l2_flag = get_tc_l2_flag(sctx, coher);
	unsigned flush_flags = get_flush_flags(sctx, coher);
d183 1
a183 1
		for (uint64_t i = 0; i < size; i++) {
d193 1
a193 2
	sctx->b.flags |= SI_CONTEXT_PS_PARTIAL_FLUSH |
	                 SI_CONTEXT_CS_PARTIAL_FLUSH | flush_flags;
d197 1
a197 1
		unsigned dma_flags = tc_l2_flag  | CP_DMA_CLEAR;
d202 1
a202 1
		si_emit_cp_dma(sctx, va, value, byte_count, dma_flags, coher);
d208 4
d249 2
a250 2
	si_emit_cp_dma(sctx, va, va + CP_DMA_ALIGNMENT, size, dma_flags,
		       R600_COHERENCY_SHADER);
d255 2
a256 1
		    uint64_t dst_offset, uint64_t src_offset, unsigned size)
d261 2
a262 2
	unsigned tc_l2_flag = get_tc_l2_flag(sctx, R600_COHERENCY_SHADER);
	unsigned flush_flags = get_flush_flags(sctx, R600_COHERENCY_SHADER);
d299 1
a299 2
	sctx->b.flags |= SI_CONTEXT_PS_PARTIAL_FLUSH |
	                 SI_CONTEXT_CS_PARTIAL_FLUSH | flush_flags;
d313 2
a314 2
		si_emit_cp_dma(sctx, main_dst_offset, main_src_offset,
			       byte_count, dma_flags, R600_COHERENCY_SHADER);
d329 2
a330 2
		si_emit_cp_dma(sctx, dst_offset, src_offset, skipped_size,
			       dma_flags, R600_COHERENCY_SHADER);
d336 4
@


1.1.1.4
log
@Import Mesa 17.1.6
@
text
@d31 5
a46 12
/* The max number of bytes that can be copied per packet. */
static inline unsigned cp_dma_max_byte_count(struct si_context *sctx)
{
	unsigned max = sctx->b.chip_class >= GFX9 ?
			       S_414_BYTE_COUNT_GFX9(~0u) :
			       S_414_BYTE_COUNT_GFX6(~0u);

	/* make it aligned for optimal performance */
	return max & ~(SI_CPDMA_ALIGNMENT - 1);
}


d56 1
a56 1
	uint32_t header = 0, command = 0;
d59 1
a59 6
	assert(size <= cp_dma_max_byte_count(sctx));

	if (sctx->b.chip_class >= GFX9)
		command |= S_414_BYTE_COUNT_GFX9(size);
	else
		command |= S_414_BYTE_COUNT_GFX6(size);
d64 2
a65 6
	else {
		if (sctx->b.chip_class >= GFX9)
			command |= S_414_DISABLE_WR_CONFIRM_GFX9(1);
		else
			command |= S_414_DISABLE_WR_CONFIRM_GFX6(1);
	}
d71 1
a71 4
	if (sctx->b.chip_class >= GFX9 && !(flags & CP_DMA_CLEAR) &&
	    src_va == dst_va)
		header |= S_411_DSL_SEL(V_411_NOWHERE); /* prefetch only */
	else if (flags & CP_DMA_USE_L2)
d120 2
a121 1
		return SI_CONTEXT_FLUSH_AND_INV_CB;
d133 1
a133 2
			      uint64_t remaining_size, unsigned user_flags,
			      bool *is_first, unsigned *packet_flags)
d135 4
a138 12
	/* Fast exit for a CPDMA prefetch. */
	if ((user_flags & SI_CPDMA_SKIP_ALL) == SI_CPDMA_SKIP_ALL) {
		*is_first = false;
		return;
	}

	if (!(user_flags & SI_CPDMA_SKIP_BO_LIST_UPDATE)) {
		/* Count memory usage in so that need_cs_space can take it into account. */
		r600_context_add_resource_size(&sctx->b.b, dst);
		if (src)
			r600_context_add_resource_size(&sctx->b.b, src);
	}
d140 1
a140 2
	if (!(user_flags & SI_CPDMA_SKIP_CHECK_CS_SPACE))
		si_need_cs_space(sctx);
d143 4
a146 1
	if (!(user_flags & SI_CPDMA_SKIP_BO_LIST_UPDATE)) {
d148 2
a149 7
					  (struct r600_resource*)dst,
					  RADEON_USAGE_WRITE, RADEON_PRIO_CP_DMA);
		if (src)
			radeon_add_to_buffer_list(&sctx->b, &sctx->b.gfx,
						  (struct r600_resource*)src,
						  RADEON_USAGE_READ, RADEON_PRIO_CP_DMA);
	}
d154 1
a154 1
	if (!(user_flags & SI_CPDMA_SKIP_GFX_SYNC) && sctx->b.flags)
d156 2
a157 5

	if (!(user_flags & SI_CPDMA_SKIP_SYNC_BEFORE) && *is_first)
		*packet_flags |= CP_DMA_RAW_WAIT;

	*is_first = false;
d162 2
a163 3
	if (!(user_flags & SI_CPDMA_SKIP_SYNC_AFTER) &&
	    byte_count == remaining_size)
		*packet_flags |= CP_DMA_SYNC;
a170 2
	struct radeon_winsys *ws = sctx->b.ws;
	struct r600_resource *rdst = r600_resource(dst);
a172 2
	uint64_t dma_clear_size;
	bool is_first = true;
a176 2
	dma_clear_size = size & ~3llu;

d180 15
a194 2
	util_range_add(&rdst->valid_buffer_range, offset,
		       offset + dma_clear_size);
d196 1
a196 33
	/* dma_clear_buffer can use clear_buffer on failure. Make sure that
	 * doesn't happen. We don't want an infinite recursion: */
	if (sctx->b.dma.cs &&
	    !(dst->flags & PIPE_RESOURCE_FLAG_SPARSE) &&
	    (offset % 4 == 0) &&
	    /* CP DMA is very slow. Always use SDMA for big clears. This
	     * alone improves DeusEx:MD performance by 70%. */
	    (size > 128 * 1024 ||
	     /* Buffers not used by the GFX IB yet will be cleared by SDMA.
	      * This happens to move most buffer clears to SDMA, including
	      * DCC and CMASK clears, because pipe->clear clears them before
	      * si_emit_framebuffer_state (in a draw call) adds them.
	      * For example, DeusEx:MD has 21 buffer clears per frame and all
	      * of them are moved to SDMA thanks to this. */
	     !ws->cs_is_buffer_referenced(sctx->b.gfx.cs, rdst->buf,
				          RADEON_USAGE_READWRITE))) {
		sctx->b.dma_clear_buffer(ctx, dst, offset, dma_clear_size, value);

		offset += dma_clear_size;
		size -= dma_clear_size;
	} else if (dma_clear_size >= 4) {
		uint64_t va = rdst->gpu_address + offset;

		offset += dma_clear_size;
		size -= dma_clear_size;

		/* Flush the caches. */
		sctx->b.flags |= SI_CONTEXT_PS_PARTIAL_FLUSH |
				 SI_CONTEXT_CS_PARTIAL_FLUSH | flush_flags;

		while (dma_clear_size) {
			unsigned byte_count = MIN2(dma_clear_size, cp_dma_max_byte_count(sctx));
			unsigned dma_flags = tc_l2_flag  | CP_DMA_CLEAR;
d198 3
a200 2
			si_cp_dma_prepare(sctx, dst, NULL, byte_count, dma_clear_size, 0,
					  &is_first, &dma_flags);
d202 3
a204 2
			/* Emit the clear packet. */
			si_emit_cp_dma(sctx, va, value, byte_count, dma_flags, coher);
d206 1
a206 3
			dma_clear_size -= byte_count;
			va += byte_count;
		}
d208 2
a209 2
		if (tc_l2_flag)
			rdst->TC_L2_dirty = true;
d211 2
a212 3
		/* If it's not a framebuffer fast clear... */
		if (coher == R600_COHERENCY_SHADER)
			sctx->b.num_cp_dma_calls++;
d215 2
a216 10
	if (size) {
		/* Handle non-dword alignment.
		 *
		 * This function is called for embedded texture metadata clears,
		 * but those should always be properly aligned. */
		assert(dst->target == PIPE_BUFFER);
		assert(size < 4);

		pipe_buffer_write(ctx, dst, offset, size, &value);
	}
d225 1
a225 2
static void si_cp_dma_realign_engine(struct si_context *sctx, unsigned size,
				     unsigned user_flags, bool *is_first)
d229 1
a229 1
	unsigned scratch_size = SI_CPDMA_ALIGNMENT * 2;
d231 1
a231 1
	assert(size < SI_CPDMA_ALIGNMENT);
d239 4
a242 5
		sctx->scratch_buffer = (struct r600_resource*)
			r600_aligned_buffer_create(&sctx->screen->b.b,
						   R600_RESOURCE_FLAG_UNMAPPABLE,
						   PIPE_USAGE_DEFAULT,
						   scratch_size, 256);
d245 1
a245 2

		si_mark_atom_dirty(sctx, &sctx->scratch_state);
d249 1
a249 2
			  &sctx->scratch_buffer->b.b, size, size, user_flags,
			  is_first, &dma_flags);
d252 1
a252 1
	si_emit_cp_dma(sctx, va, va + SI_CPDMA_ALIGNMENT, size, dma_flags,
a255 5
/**
 * Do memcpy between buffers using CP DMA.
 *
 * \param user_flags	bitmask of SI_CPDMA_*
 */
d258 1
a258 2
		    uint64_t dst_offset, uint64_t src_offset, unsigned size,
		    unsigned user_flags)
a264 1
	bool is_first = true;
d269 5
a273 7
	if (dst != src || dst_offset != src_offset) {
		/* Mark the buffer range of destination as valid (initialized),
		 * so that transfer_map knows it should wait for the GPU when mapping
		 * that range. */
		util_range_add(&r600_resource(dst)->valid_buffer_range, dst_offset,
			       dst_offset + size);
	}
d285 2
a286 2
		if (size % SI_CPDMA_ALIGNMENT)
			realign_size = SI_CPDMA_ALIGNMENT - (size % SI_CPDMA_ALIGNMENT);
d292 2
a293 2
		if (src_offset % SI_CPDMA_ALIGNMENT) {
			skipped_size = SI_CPDMA_ALIGNMENT - (src_offset % SI_CPDMA_ALIGNMENT);
d301 2
a302 3
	if (!(user_flags & SI_CPDMA_SKIP_GFX_SYNC))
		sctx->b.flags |= SI_CONTEXT_PS_PARTIAL_FLUSH |
				 SI_CONTEXT_CS_PARTIAL_FLUSH | flush_flags;
d310 1
a310 1
		unsigned byte_count = MIN2(size, cp_dma_max_byte_count(sctx));
d314 1
a314 1
				  user_flags, &is_first, &dma_flags);
d329 2
a330 2
				  skipped_size + realign_size, user_flags,
				  &is_first, &dma_flags);
d338 1
a338 2
		si_cp_dma_realign_engine(sctx, realign_size, user_flags,
					 &is_first);
a341 48

	/* If it's not a prefetch... */
	if (dst_offset != src_offset)
		sctx->b.num_cp_dma_calls++;
}

void cik_prefetch_TC_L2_async(struct si_context *sctx, struct pipe_resource *buf,
			      uint64_t offset, unsigned size)
{
	assert(sctx->b.chip_class >= CIK);

	si_copy_buffer(sctx, buf, buf, offset, offset, size, SI_CPDMA_SKIP_ALL);
}

static void cik_prefetch_shader_async(struct si_context *sctx,
				      struct si_pm4_state *state)
{
	if (state) {
		struct pipe_resource *bo = &state->bo[0]->b.b;
		assert(state->nbo == 1);

		cik_prefetch_TC_L2_async(sctx, bo, 0, bo->width0);
	}
}

static void cik_emit_prefetch_L2(struct si_context *sctx, struct r600_atom *atom)
{
	/* Prefetch shaders and VBO descriptors to TC L2. */
	if (si_pm4_state_changed(sctx, ls))
		cik_prefetch_shader_async(sctx, sctx->queued.named.ls);
	if (si_pm4_state_changed(sctx, hs))
		cik_prefetch_shader_async(sctx, sctx->queued.named.hs);
	if (si_pm4_state_changed(sctx, es))
		cik_prefetch_shader_async(sctx, sctx->queued.named.es);
	if (si_pm4_state_changed(sctx, gs))
		cik_prefetch_shader_async(sctx, sctx->queued.named.gs);
	if (si_pm4_state_changed(sctx, vs))
		cik_prefetch_shader_async(sctx, sctx->queued.named.vs);

	/* Vertex buffer descriptors are uploaded uncached, so prefetch
	 * them right after the VS binary. */
	if (sctx->vertex_buffer_pointer_dirty) {
		cik_prefetch_TC_L2_async(sctx, &sctx->vertex_buffers.buffer->b.b,
					 sctx->vertex_buffers.buffer_offset,
					 sctx->vertex_elements->desc_list_byte_size);
	}
	if (si_pm4_state_changed(sctx, ps))
		cik_prefetch_shader_async(sctx, sctx->queued.named.ps);
a346 3

	si_init_atom(sctx, &sctx->prefetch_L2, &sctx->atoms.s.prefetch_L2,
		     cik_emit_prefetch_L2);
@


