head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.4
	OPENBSD_6_2_BASE:1.1.1.2
	mesa-17_1_6:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.2
	OPENBSD_6_1_BASE:1.1.1.2
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.1.1.1.0.6
	OPENBSD_6_0_BASE:1.1.1.1
	mesa-11_2_2:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2015.11.22.02.42.20;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.42.20;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.12.11.08.30.38;	author jsg;	state Exp;
branches;
next	;
commitid	uuv5VTS15jglEDZU;


desc
@@


1.1
log
@Initial revision
@
text
@Import('*')

env = env.Clone()

env.Prepend(LIBS = [mesautil, gallium])

if env['platform'] in ('freebsd8', 'sunos'):
    env.Append(LIBS = ['m'])

if env['platform'] == 'freebsd8':
    env.Append(LIBS = ['pthread'])

progs = [
    'pipe_barrier_test',
    'u_cache_test',
    'u_format_test',
    'u_format_compatible_test',
    'u_half_test',
    'translate_test'
]

for progname in progs:
    prog = env.Program(
        target = progname,
        source = progname + '.c',
    )
    
    env.Alias(progname, env.InstallProgram(prog))

    # http://www.scons.org/wiki/UnitTests
    test_alias = env.Alias('unit', [prog], prog[0].abspath)
    AlwaysBuild(test_alias)

@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 13.0.2
@
text
@d27 7
a33 5
    if progname not in [
        'u_cache_test', # too long
        'translate_test', # unreliable
    ]:
       env.UnitTest(progname, prog)
@

