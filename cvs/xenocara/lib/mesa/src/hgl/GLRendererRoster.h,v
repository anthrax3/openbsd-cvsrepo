head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.4
	OPENBSD_6_1_BASE:1.1.1.1
	mesa-13_0_6:1.1.1.1
	mesa-13_0_5:1.1.1.1
	mesa-13_0_3:1.1.1.1
	mesa-13_0_2:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.6
	OPENBSD_6_0_BASE:1.1.1.1
	mesa-11_2_2:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.11.22.02.41.36;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.41.36;	author jsg;	state Exp;
branches;
next	;
commitid	bJUptkbooQfJPk5r;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright 2006-2012, Haiku, Inc. All Rights Reserved.
 * Distributed under the terms of the MIT License.
 *
 * Authors:
 *		Philippe Houdoin <philippe.houdoin@@free.fr>
 */
#ifndef _GLRENDERER_ROSTER_H
#define _GLRENDERER_ROSTER_H


#include <GLRenderer.h>

#include <map>


struct renderer_item {
	BGLRenderer* renderer;
	entry_ref	ref;
	ino_t		node;
	image_id	image;
};

typedef std::map<renderer_id, renderer_item> RendererMap;


class GLRendererRoster {
	public:
		GLRendererRoster(BGLView* view, ulong options);
		virtual ~GLRendererRoster();

		BGLRenderer* GetRenderer(int32 id = 0);

	private:
		void AddDefaultPaths();
		status_t AddPath(const char* path);
		status_t AddRenderer(BGLRenderer* renderer,
			image_id image, const entry_ref* ref, ino_t node);
		status_t CreateRenderer(const entry_ref& ref);

		RendererMap	fRenderers;
		int32		fNextID;
		BGLView*	fView;
		ulong		fOptions;
		bool		fSafeMode;
		const char*	fABISubDirectory;

};


#endif	/* _GLRENDERER_ROSTER_H */
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@
