head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.4.0.2
	OPENBSD_6_1_BASE:1.1.1.4
	mesa-13_0_6:1.1.1.4
	mesa-13_0_5:1.1.1.4
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.11.22.02.45.44;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.45.44;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.21.34;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.26.04;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.02.26.12.06.38;	author jsg;	state Exp;
branches;
next	;
commitid	xZcdklZavddTKAf1;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 2010 LunarG Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Authors:
 *    Chia-I Wu <olv@@lunarg.com>
 */


__asm__(".text\n"
        ".balign 32\n"
        "x86_64_entry_start:");

#define STUB_ASM_ENTRY(func)                             \
   ".globl " func "\n"                                   \
   ".type " func ", @@function\n"                         \
   ".balign 32\n"                                        \
   func ":"

#define STUB_ASM_CODE(slot)                              \
   "movq " ENTRY_CURRENT_TABLE "@@GOTTPOFF(%rip), %rax\n\t"  \
   "movq %fs:(%rax), %r11\n\t"                           \
   "jmp *(8 * " slot ")(%r11)"

#define MAPI_TMP_STUB_ASM_GCC
#include "mapi_tmp.h"

#ifndef MAPI_MODE_BRIDGE

__asm__("x86_64_current_tls:\n\t"
	"movq " ENTRY_CURRENT_TABLE "@@GOTTPOFF(%rip), %rax\n\t"
	"ret");

extern unsigned long
x86_64_current_tls();

#include <string.h>
#include "u_execmem.h"

void
entry_patch_public(void)
{
}

static char
x86_64_entry_start[];

mapi_func
entry_get_public(int slot)
{
   return (mapi_func) (x86_64_entry_start + slot * 32);
}

void
entry_patch(mapi_func entry, int slot)
{
   char *code = (char *) entry;
   *((unsigned int *) (code + 12)) = slot * sizeof(mapi_func);
}

mapi_func
entry_generate(int slot)
{
   const char code_templ[16] = {
      /* movq %fs:0, %r11 */
      0x64, 0x4c, 0x8b, 0x1c, 0x25, 0x00, 0x00, 0x00, 0x00,
      /* jmp *0x1234(%r11) */
      0x41, 0xff, 0xa3, 0x34, 0x12, 0x00, 0x00,
   };
   unsigned long addr;
   char *code;
   mapi_func entry;

   addr = x86_64_current_tls();
   if ((addr >> 32) != 0xffffffff)
      return NULL;
   addr &= 0xffffffff;

   code = u_execmem_alloc(sizeof(code_templ));
   if (!code)
      return NULL;

   memcpy(code, code_templ, sizeof(code_templ));

   *((unsigned int *) (code + 5)) = addr;
   entry = (mapi_func) code;
   entry_patch(entry, slot);

   return entry;
}

#endif /* MAPI_MODE_BRIDGE */
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d49 7
d93 1
a93 2
   __asm__("movq " ENTRY_CURRENT_TABLE "@@GOTTPOFF(%%rip), %0"
           : "=r" (addr));
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@a27 5
#ifdef HAVE_FUNC_ATTRIBUTE_VISIBILITY
#define HIDDEN __attribute__((visibility("hidden")))
#else
#define HIDDEN
#endif
d57 2
a58 2
extern char
x86_64_entry_start[] HIDDEN;
@


1.1.1.4
log
@Import Mesa 13.0.5
@
text
@a43 2
#ifndef __ILP32__

a48 10
#else

#define STUB_ASM_CODE(slot)                              \
   "movq " ENTRY_CURRENT_TABLE "@@GOTTPOFF(%rip), %rax\n\t"  \
   "movl %fs:(%rax), %r11d\n\t"                          \
   "movl 4*" slot "(%r11d), %r11d\n\t"                   \
   "jmp *%r11"

#endif

d75 1
a75 5
   int offset = 12;
#ifdef __ILP32__
   offset = 13;
#endif
   *((unsigned int *) (code + offset)) = slot * sizeof(mapi_func);
d81 1
a81 2
   const char code_templ[] = {
#ifndef __ILP32__
a85 8
#else
      /* movl %fs:0, %r11d */
      0x64, 0x44, 0x8b, 0x1c, 0x25, 0x00, 0x00, 0x00, 0x00,
      /* movl 0x1234(%r11d), %r11d */
      0x67, 0x45, 0x8b, 0x9b, 0x34, 0x12, 0x00, 0x00,
      /* jmp *%r11 */
      0x41, 0xff, 0xe3,
#endif
d87 1
a87 1
   unsigned long long addr;
@


