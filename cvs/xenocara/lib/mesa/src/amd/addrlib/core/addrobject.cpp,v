head	1.1;
branch	1.1.1;
access;
symbols
	mesa-17_1_6:1.1.1.2
	OPENBSD_6_1:1.1.1.1.0.2
	OPENBSD_6_1_BASE:1.1.1.1
	mesa-13_0_6:1.1.1.1
	mesa-13_0_5:1.1.1.1
	mesa-13_0_3:1.1.1.1
	mesa-13_0_2:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;
expand	@o@;


1.1
date	2016.12.11.08.35.53;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	uuv5VTS15jglEDZU;

1.1.1.1
date	2016.12.11.08.35.53;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	uuv5VTS15jglEDZU;

1.1.1.2
date	2017.08.14.09.41.16;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright Â© 2014 Advanced Micro Devices, Inc.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, AUTHORS
 * AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 */

/**
***************************************************************************************************
* @@file  addrobject.cpp
* @@brief Contains the AddrObject base class implementation.
***************************************************************************************************
*/

#include "addrinterface.h"
#include "addrobject.h"

/**
***************************************************************************************************
*   AddrObject::AddrObject
*
*   @@brief
*       Constructor for the AddrObject class.
***************************************************************************************************
*/
AddrObject::AddrObject()
{
    m_client.handle = NULL;
    m_client.callbacks.allocSysMem = NULL;
    m_client.callbacks.freeSysMem = NULL;
    m_client.callbacks.debugPrint = NULL;
}

/**
***************************************************************************************************
*   AddrObject::AddrObject
*
*   @@brief
*       Constructor for the AddrObject class.
***************************************************************************************************
*/
AddrObject::AddrObject(const AddrClient* pClient)
{
    m_client = *pClient;
}

/**
***************************************************************************************************
*   AddrObject::~AddrObject
*
*   @@brief
*       Destructor for the AddrObject class.
***************************************************************************************************
*/
AddrObject::~AddrObject()
{
}

/**
***************************************************************************************************
*   AddrObject::ClientAlloc
*
*   @@brief
*       Calls instanced allocSysMem inside AddrClient
***************************************************************************************************
*/
VOID* AddrObject::ClientAlloc(
    size_t             objSize,    ///< [in] Size to allocate
    const AddrClient*  pClient)    ///< [in] Client pointer
{
    VOID* pObjMem = NULL;

    if (pClient->callbacks.allocSysMem != NULL)
    {
        ADDR_ALLOCSYSMEM_INPUT allocInput = {0};

        allocInput.size        = sizeof(ADDR_ALLOCSYSMEM_INPUT);
        allocInput.flags.value = 0;
        allocInput.sizeInBytes = static_cast<UINT_32>(objSize);
        allocInput.hClient     = pClient->handle;

        pObjMem = pClient->callbacks.allocSysMem(&allocInput);
    }

    return pObjMem;
}

/**
***************************************************************************************************
*   AddrObject::AddrMalloc
*
*   @@brief
*       A wrapper of ClientAlloc
***************************************************************************************************
*/
VOID* AddrObject::AddrMalloc(
    size_t objSize) const   ///< [in] Size to allocate
{
    return ClientAlloc(objSize, &m_client);
}

/**
***************************************************************************************************
*   AddrObject::ClientFree
*
*   @@brief
*       Calls freeSysMem inside AddrClient
***************************************************************************************************
*/
VOID AddrObject::ClientFree(
    VOID*              pObjMem,    ///< [in] User virtual address to free.
    const AddrClient*  pClient)    ///< [in] Client pointer
{
    if (pClient->callbacks.freeSysMem != NULL)
    {
        if (pObjMem != NULL)
        {
            ADDR_FREESYSMEM_INPUT freeInput = {0};

            freeInput.size      = sizeof(ADDR_FREESYSMEM_INPUT);
            freeInput.hClient   = pClient->handle;
            freeInput.pVirtAddr = pObjMem;

            pClient->callbacks.freeSysMem(&freeInput);
        }
    }
}

/**
***************************************************************************************************
*   AddrObject::AddrFree
*
*   @@brief
*       A wrapper of ClientFree
***************************************************************************************************
*/
VOID AddrObject::AddrFree(
    VOID* pObjMem) const                 ///< [in] User virtual address to free.
{
    ClientFree(pObjMem, &m_client);
}

/**
***************************************************************************************************
*   AddrObject::operator new
*
*   @@brief
*       Allocates memory needed for AddrObject object. (with ADDR_CLIENT_HANDLE)
*
*   @@return
*       Returns NULL if unsuccessful.
***************************************************************************************************
*/
VOID* AddrObject::operator new(
    size_t             objSize,    ///< [in] Size to allocate
    const AddrClient*  pClient)    ///< [in] Client pointer
{
    return ClientAlloc(objSize, pClient);
}


/**
***************************************************************************************************
*   AddrObject::operator delete
*
*   @@brief
*       Frees AddrObject object memory.
***************************************************************************************************
*/
VOID AddrObject::operator delete(
    VOID* pObjMem,              ///< [in] User virtual address to free.
    const AddrClient* pClient)  ///< [in] Client handle
{
    ClientFree(pObjMem, pClient);
}

/**
***************************************************************************************************
*   AddrObject::operator delete
*
*   @@brief
*       Frees AddrObject object memory.
***************************************************************************************************
*/
VOID AddrObject::operator delete(
    VOID* pObjMem)                  ///< [in] User virtual address to free.
{
    AddrObject* pObj = static_cast<AddrObject*>(pObjMem);
    ClientFree(pObjMem, &pObj->m_client);
}

/**
***************************************************************************************************
*   AddrObject::DebugPrint
*
*   @@brief
*       Print debug message
*
*   @@return
*       N/A
***************************************************************************************************
*/
VOID AddrObject::DebugPrint(
    const CHAR* pDebugString,     ///< [in] Debug string
    ...) const
{
#if DEBUG
    if (m_client.callbacks.debugPrint != NULL)
    {
        va_list ap;

        va_start(ap, pDebugString);

        ADDR_DEBUGPRINT_INPUT debugPrintInput = {0};

        debugPrintInput.size         = sizeof(ADDR_DEBUGPRINT_INPUT);
        debugPrintInput.pDebugString = const_cast<CHAR*>(pDebugString);
        debugPrintInput.hClient      = m_client.handle;
        va_copy(debugPrintInput.ap, ap);

        m_client.callbacks.debugPrint(&debugPrintInput);

        va_end(ap);
    }
#endif
}

@


1.1.1.1
log
@Import Mesa 13.0.2
@
text
@@


1.1.1.2
log
@Import Mesa 17.1.6
@
text
@d28 1
a28 1
****************************************************************************************************
d30 2
a31 2
* @@brief Contains the Object base class implementation.
****************************************************************************************************
a36 3
namespace Addr
{

d38 2
a39 2
****************************************************************************************************
*   Object::Object
d42 2
a43 2
*       Constructor for the Object class.
****************************************************************************************************
d45 1
a45 1
Object::Object()
d54 2
a55 2
****************************************************************************************************
*   Object::Object
d58 2
a59 2
*       Constructor for the Object class.
****************************************************************************************************
d61 1
a61 1
Object::Object(const Client* pClient)
d67 2
a68 2
****************************************************************************************************
*   Object::~Object
d71 2
a72 2
*       Destructor for the Object class.
****************************************************************************************************
d74 1
a74 1
Object::~Object()
d79 2
a80 2
****************************************************************************************************
*   Object::ClientAlloc
d83 2
a84 2
*       Calls instanced allocSysMem inside Client
****************************************************************************************************
d86 3
a88 3
VOID* Object::ClientAlloc(
    size_t         objSize,    ///< [in] Size to allocate
    const Client*  pClient)    ///< [in] Client pointer
d108 2
a109 2
****************************************************************************************************
*   Object::Alloc
d113 1
a113 1
****************************************************************************************************
d115 2
a116 3
VOID* Object::Alloc(
    size_t objSize      ///< [in] Size to allocate
    ) const
d122 2
a123 2
****************************************************************************************************
*   Object::ClientFree
d126 2
a127 2
*       Calls freeSysMem inside Client
****************************************************************************************************
d129 3
a131 3
VOID Object::ClientFree(
    VOID*          pObjMem,    ///< [in] User virtual address to free.
    const Client*  pClient)    ///< [in] Client pointer
d149 2
a150 2
****************************************************************************************************
*   Object::Free
d154 1
a154 1
****************************************************************************************************
d156 2
a157 3
VOID Object::Free(
    VOID* pObjMem       ///< [in] User virtual address to free.
    ) const
d163 2
a164 2
****************************************************************************************************
*   Object::operator new
d167 1
a167 1
*       Placement new operator. (with pre-allocated memory pointer)
d170 18
a187 2
*       Returns pre-allocated memory pointer.
****************************************************************************************************
d189 3
a191 3
VOID* Object::operator new(
    size_t objSize,     ///< [in] Size to allocate
    VOID*  pMem)        ///< [in] Pre-allocated pointer
d193 1
a193 1
    return pMem;
d197 2
a198 2
****************************************************************************************************
*   Object::operator delete
d201 2
a202 2
*       Frees Object object memory.
****************************************************************************************************
d204 2
a205 2
VOID Object::operator delete(
    VOID* pObjMem)      ///< [in] User virtual address to free.
d207 1
a207 1
    Object* pObj = static_cast<Object*>(pObjMem);
d212 2
a213 2
****************************************************************************************************
*   Object::DebugPrint
d220 1
a220 1
****************************************************************************************************
d222 1
a222 1
VOID Object::DebugPrint(
d224 1
a224 2
    ...
    ) const
a246 1
} // Addr
@

