head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.2
	OPENBSD_6_2_BASE:1.5
	mesa-17_1_6:1.1.1.3
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	mesa-11_2_2:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2017.08.26.16.59.19;	author jsg;	state Exp;
branches;
next	1.4;
commitid	D0k2io1oY8gcsQ2S;

1.4
date	2017.08.14.09.57.57;	author jsg;	state Exp;
branches;
next	1.3;
commitid	bC4bLqwWTo4kLw82;

1.3
date	2016.12.11.08.53.19;	author jsg;	state Exp;
branches;
next	1.2;
commitid	96stMNxtiPBiO554;

1.2
date	2016.05.29.10.40.20;	author jsg;	state Exp;
branches;
next	1.1;
commitid	lFAjX4nNEOTq8hSb;

1.1
date	2016.05.29.10.16.20;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.1
date	2016.05.29.10.16.20;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.2
date	2016.12.11.08.32.54;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	uuv5VTS15jglEDZU;

1.1.1.3
date	2017.08.14.09.37.35;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.5
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@#
# Copyright Â© 2012 Jon TURNEY
# Copyright (C) 2015 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

include Makefile.sources

AM_CPPFLAGS = \
	-I$(top_srcdir)/include \
	-I$(top_srcdir)/src \
	-I$(top_srcdir)/src/mapi \
	-I$(top_srcdir)/src/mesa/ \
	-I$(top_builddir)/src/compiler/glsl\
	-I$(top_srcdir)/src/compiler/glsl\
	-I$(top_srcdir)/src/compiler/glsl/glcpp\
	-I$(top_builddir)/src/compiler/nir \
	-I$(top_srcdir)/src/compiler/nir \
	-I$(top_srcdir)/src/gallium/include \
	-I$(top_srcdir)/src/gallium/auxiliary \
	-I$(top_srcdir)/src/gtest/include \
	$(DEFINES)

AM_CFLAGS = \
	$(VISIBILITY_CFLAGS) \
	$(MSVC2013_COMPAT_CFLAGS)

AM_CXXFLAGS = \
	$(VISIBILITY_CXXFLAGS) \
	$(MSVC2013_COMPAT_CXXFLAGS)

noinst_LTLIBRARIES = libcompiler.la

libcompiler_la_SOURCES = $(LIBCOMPILER_FILES)

check_PROGRAMS =
TESTS =
BUILT_SOURCES =
CLEANFILES =
EXTRA_DIST = SConscript

MKDIR_GEN = $(AM_V_at)$(MKDIR_P) $(@@D)

include Makefile.glsl.am

include Makefile.nir.am
@


1.4
log
@Merge Mesa 17.1.6
@
text
@a59 1
PYTHON_GEN = $(AM_V_GEN)$(PYTHON2) $(PYTHON_FLAGS)
@


1.3
log
@Merge Mesa 13.0.2
@
text
@d60 1
@


1.2
log
@Merge Mesa 11.2.2
@
text
@d34 2
a58 152

EXTRA_DIST += glsl/tests glsl/glcpp/tests glsl/README	\
	glsl/TODO glsl/glcpp/README			\
	glsl/glsl_lexer.ll				\
	glsl/glsl_parser.yy				\
	glsl/glcpp/glcpp-lex.l				\
	glsl/glcpp/glcpp-parse.y			\
	glsl/Makefile.sources				\
	glsl/SConscript

TESTS += glsl/glcpp/tests/glcpp-test			\
	glsl/glcpp/tests/glcpp-test-cr-lf		\
	glsl/tests/blob-test				\
	glsl/tests/general-ir-test			\
	glsl/tests/optimization-test			\
	glsl/tests/sampler-types-test			\
	glsl/tests/uniform-initializer-test

TESTS_ENVIRONMENT= \
	export PYTHON2=$(PYTHON2); \
	export PYTHON_FLAGS=$(PYTHON_FLAGS);

check_PROGRAMS +=					\
	glsl/glcpp/glcpp				\
	glsl/glsl_test					\
	glsl/tests/blob-test				\
	glsl/tests/general-ir-test			\
	glsl/tests/sampler-types-test			\
	glsl/tests/uniform-initializer-test

noinst_PROGRAMS = glsl_compiler

glsl_tests_blob_test_SOURCES =				\
	glsl/tests/blob_test.c
glsl_tests_blob_test_LDADD =				\
	glsl/libglsl.la

glsl_tests_general_ir_test_SOURCES =			\
	glsl/standalone_scaffolding.cpp			\
	glsl/tests/builtin_variable_test.cpp		\
	glsl/tests/invalidate_locations_test.cpp	\
	glsl/tests/general_ir_test.cpp			\
	glsl/tests/varyings_test.cpp
glsl_tests_general_ir_test_CFLAGS =			\
	$(PTHREAD_CFLAGS)
glsl_tests_general_ir_test_LDADD =			\
	$(top_builddir)/src/gtest/libgtest.la		\
	glsl/libglsl.la		\
	$(top_builddir)/src/libglsl_util.la		\
	$(PTHREAD_LIBS)

glsl_tests_uniform_initializer_test_SOURCES =		\
	glsl/tests/copy_constant_to_storage_tests.cpp	\
	glsl/tests/set_uniform_initializer_tests.cpp	\
	glsl/tests/uniform_initializer_utils.cpp	\
	glsl/tests/uniform_initializer_utils.h
glsl_tests_uniform_initializer_test_CFLAGS =		\
	$(PTHREAD_CFLAGS)
glsl_tests_uniform_initializer_test_LDADD =		\
	$(top_builddir)/src/gtest/libgtest.la		\
	glsl/libglsl.la		\
	$(top_builddir)/src/libglsl_util.la		\
	$(PTHREAD_LIBS)

glsl_tests_sampler_types_test_SOURCES =			\
	glsl/tests/sampler_types_test.cpp
glsl_tests_sampler_types_test_CFLAGS =			\
	$(PTHREAD_CFLAGS)
glsl_tests_sampler_types_test_LDADD =			\
	$(top_builddir)/src/gtest/libgtest.la		\
	glsl/libglsl.la					\
	$(top_builddir)/src/libglsl_util.la		\
	$(PTHREAD_LIBS)

noinst_LTLIBRARIES += glsl/libglsl.la glsl/libglcpp.la

glsl_libglcpp_la_LIBADD =				\
	$(top_builddir)/src/util/libmesautil.la
glsl_libglcpp_la_SOURCES =				\
	glsl/glcpp/glcpp-lex.c				\
	glsl/glcpp/glcpp-parse.c			\
	glsl/glcpp/glcpp-parse.h			\
	$(LIBGLCPP_FILES)

glsl_glcpp_glcpp_SOURCES =				\
	glsl/glcpp/glcpp.c
glsl_glcpp_glcpp_LDADD =				\
	glsl/libglcpp.la	\
	$(top_builddir)/src/libglsl_util.la		\
	-lm

glsl_libglsl_la_LIBADD = \
	nir/libnir.la \
	glsl/libglcpp.la

glsl_libglsl_la_SOURCES =				\
	glsl/glsl_lexer.cpp				\
	glsl/glsl_parser.cpp				\
	glsl/glsl_parser.h				\
	$(LIBGLSL_FILES)


glsl_compiler_SOURCES = \
	$(GLSL_COMPILER_CXX_FILES)

glsl_compiler_LDADD =					\
	glsl/libglsl.la					\
	$(top_builddir)/src/libglsl_util.la		\
	$(top_builddir)/src/util/libmesautil.la		\
	$(PTHREAD_LIBS)

glsl_glsl_test_SOURCES = \
	glsl/standalone_scaffolding.cpp \
	glsl/test.cpp \
	glsl/test_optpass.cpp \
	glsl/test_optpass.h

glsl_glsl_test_LDADD =					\
	glsl/libglsl.la					\
	$(top_builddir)/src/libglsl_util.la		\
	$(PTHREAD_LIBS)

# We write our own rules for yacc and lex below. We'd rather use automake,
# but automake makes it especially difficult for a number of reasons:
#
#  * < automake-1.12 generates .h files from .yy and .ypp files, but
#    >=automake-1.12 generates .hh and .hpp files respectively. There's no
#    good way of making a project that uses C++ yacc files compatible with
#    both versions of automake. Strong work automake developers.
#
#  * Since we're generating code from .l/.y files in a subdirectory (glcpp/)
#    we'd like the resulting generated code to also go in glcpp/ for purposes
#    of distribution. Automake gives no way to do this.
#
#  * Since we're building multiple yacc parsers into one library (and via one
#    Makefile) we have to use per-target YFLAGS. Using per-target YFLAGS causes
#    automake to name the resulting generated code as <library-name>_filename.c.
#    Frankly, that's ugly and we don't want a libglcpp_glcpp_parser.h file.

# In order to make build output print "LEX" and "YACC", we reproduce the
# automake variables below.

AM_V_LEX = $(am__v_LEX_$(V))
am__v_LEX_ = $(am__v_LEX_$(AM_DEFAULT_VERBOSITY))
am__v_LEX_0 = @@echo "  LEX     " $@@;
am__v_LEX_1 =

AM_V_YACC = $(am__v_YACC_$(V))
am__v_YACC_ = $(am__v_YACC_$(AM_DEFAULT_VERBOSITY))
am__v_YACC_0 = @@echo "  YACC    " $@@;
am__v_YACC_1 =

a59 105
YACC_GEN = $(AM_V_YACC)$(YACC) $(YFLAGS)
LEX_GEN = $(AM_V_LEX)$(LEX) $(LFLAGS)

if REGEN_SOURCES
glsl/glsl_parser.cpp glsl/glsl_parser.h: glsl/glsl_parser.yy
	$(MKDIR_GEN)
	$(YACC_GEN) -o $@@ -p "_mesa_glsl_" --defines=$(builddir)/glsl/glsl_parser.h $(srcdir)/glsl/glsl_parser.yy

glsl/glsl_lexer.cpp: glsl/glsl_lexer.ll
	$(MKDIR_GEN)
	$(LEX_GEN) -o $@@ $(srcdir)/glsl/glsl_lexer.ll

glsl/glcpp/glcpp-parse.c glsl/glcpp/glcpp-parse.h: glsl/glcpp/glcpp-parse.y
	$(MKDIR_GEN)
	$(YACC_GEN) -o $@@ -p "glcpp_parser_" --defines=$(builddir)/glsl/glcpp/glcpp-parse.h $(srcdir)/glsl/glcpp/glcpp-parse.y

glsl/glcpp/glcpp-lex.c: glsl/glcpp/glcpp-lex.l
	$(MKDIR_GEN)
	$(LEX_GEN) -o $@@ $(srcdir)/glsl/glcpp/glcpp-lex.l
endif

# Only the parsers (specifically the header files generated at the same time)
# need to be in BUILT_SOURCES. Though if we list the parser headers YACC is
# called for the .c/.cpp file and the .h files. By listing the .c/.cpp files
# YACC is only executed once for each parser. The rest of the generated code
# will be created at the appropriate times according to standard automake
# dependency rules.
BUILT_SOURCES +=					\
	glsl/glsl_parser.cpp				\
	glsl/glsl_lexer.cpp				\
	glsl/glcpp/glcpp-parse.c			\
	glsl/glcpp/glcpp-lex.c
CLEANFILES +=						\
	glsl/glcpp/glcpp-parse.h			\
	glsl/glsl_parser.h				\
	glsl/glsl_parser.cpp				\
	glsl/glsl_lexer.cpp				\
	glsl/glcpp/glcpp-parse.c			\
	glsl/glcpp/glcpp-lex.c

clean-local:
	$(RM) -r subtest-cr subtest-cr-lf subtest-lf subtest-lf-cr

dist-hook:
	$(RM) glsl/glcpp/tests/*.out
	$(RM) glsl/glcpp/tests/subtest*/*.out

noinst_LTLIBRARIES += nir/libnir.la

nir_libnir_la_CPPFLAGS = \
	$(AM_CPPFLAGS) \
	-I$(top_builddir)/src/compiler/nir \
	-I$(top_srcdir)/src/compiler/nir

nir_libnir_la_LIBADD = \
	libcompiler.la

nir_libnir_la_SOURCES =					\
	$(NIR_FILES)					\
	$(NIR_GENERATED_FILES)

if REGEN_SOURCES
PYTHON_GEN = $(AM_V_GEN)$(PYTHON2) $(PYTHON_FLAGS)

nir/nir_builder_opcodes.h: nir/nir_opcodes.py nir/nir_builder_opcodes_h.py
	$(MKDIR_GEN)
	$(PYTHON_GEN) $(srcdir)/nir/nir_builder_opcodes_h.py > $@@ || ($(RM) $@@; false)

nir/nir_constant_expressions.c: nir/nir_opcodes.py nir/nir_constant_expressions.py
	$(MKDIR_GEN)
	$(PYTHON_GEN) $(srcdir)/nir/nir_constant_expressions.py > $@@ || ($(RM) $@@; false)

nir/nir_opcodes.h: nir/nir_opcodes.py nir/nir_opcodes_h.py
	$(MKDIR_GEN)
	$(PYTHON_GEN) $(srcdir)/nir/nir_opcodes_h.py > $@@ || ($(RM) $@@; false)

nir/nir_opcodes.c: nir/nir_opcodes.py nir/nir_opcodes_c.py
	$(MKDIR_GEN)
	$(PYTHON_GEN) $(srcdir)/nir/nir_opcodes_c.py > $@@ || ($(RM) $@@; false)

nir/nir_opt_algebraic.c: nir/nir_opt_algebraic.py nir/nir_algebraic.py
	$(MKDIR_GEN)
	$(PYTHON_GEN) $(srcdir)/nir/nir_opt_algebraic.py > $@@ || ($(RM) $@@; false)
endif

check_PROGRAMS += nir/tests/control_flow_tests

nir_tests_control_flow_tests_CPPFLAGS = \
	$(AM_CPPFLAGS) \
	-I$(top_builddir)/src/compiler/nir \
	-I$(top_srcdir)/src/compiler/nir

nir_tests_control_flow_tests_SOURCES =			\
	nir/tests/control_flow_tests.cpp
nir_tests_control_flow_tests_CFLAGS =			\
	$(PTHREAD_CFLAGS)
nir_tests_control_flow_tests_LDADD =			\
	$(top_builddir)/src/gtest/libgtest.la		\
	nir/libnir.la	\
	$(top_builddir)/src/util/libmesautil.la		\
	$(PTHREAD_LIBS)


TESTS += nir/tests/control_flow_tests

d61 1
a61 2
BUILT_SOURCES += $(NIR_GENERATED_FILES)
CLEANFILES += $(NIR_GENERATED_FILES)
d63 1
a63 10
EXTRA_DIST += \
	nir/nir_algebraic.py				\
	nir/nir_builder_opcodes_h.py			\
	nir/nir_constant_expressions.py			\
	nir/nir_opcodes.py				\
	nir/nir_opcodes_c.py				\
	nir/nir_opcodes_h.py				\
	nir/nir_opt_algebraic.py			\
	nir/tests					\
	nir/Makefile.sources
@


1.1
log
@Initial revision
@
text
@d213 1
d229 1
d271 1
d293 1
a293 1

@


1.1.1.1
log
@Import Mesa 11.2.2
@
text
@@


1.1.1.2
log
@Import Mesa 13.0.2
@
text
@a33 2
	-I$(top_builddir)/src/compiler/nir \
	-I$(top_srcdir)/src/compiler/nir \
d57 152
d210 102
d313 2
a314 1
include Makefile.glsl.am
d316 10
a325 1
include Makefile.nir.am
@


1.1.1.3
log
@Import Mesa 17.1.6
@
text
@a59 1
PYTHON_GEN = $(AM_V_GEN)$(PYTHON2) $(PYTHON_FLAGS)
@


