head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	mesa-17_1_6:1.1.1.3
	OPENBSD_6_1:1.1.1.2.0.2
	OPENBSD_6_1_BASE:1.1.1.2
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.1.1.1.0.4
	OPENBSD_6_0_BASE:1.1.1.1
	mesa-11_2_2:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2017.08.26.16.59.21;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2016.05.29.10.16.22;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.1
date	2016.05.29.10.16.22;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.2
date	2016.12.11.08.33.41;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	uuv5VTS15jglEDZU;

1.1.1.3
date	2017.08.14.09.38.27;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/*
 * Copyright Â© 2014-2015 Broadcom
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#include "nir.h"
#include "nir_builder.h"

/** @@file nir_lower_alu_to_scalar.c
 *
 * Replaces nir_alu_instr operations with more than one channel used in the
 * arguments with individual per-channel operations.
 */

static void
nir_alu_ssa_dest_init(nir_alu_instr *instr, unsigned num_components,
                      unsigned bit_size)
{
   nir_ssa_dest_init(&instr->instr, &instr->dest.dest, num_components,
                     bit_size, NULL);
   instr->dest.write_mask = (1 << num_components) - 1;
}

static void
lower_reduction(nir_alu_instr *instr, nir_op chan_op, nir_op merge_op,
                nir_builder *builder)
{
   unsigned num_components = nir_op_infos[instr->op].input_sizes[0];

   nir_ssa_def *last = NULL;
   for (unsigned i = 0; i < num_components; i++) {
      nir_alu_instr *chan = nir_alu_instr_create(builder->shader, chan_op);
      nir_alu_ssa_dest_init(chan, 1, instr->dest.dest.ssa.bit_size);
      nir_alu_src_copy(&chan->src[0], &instr->src[0], chan);
      chan->src[0].swizzle[0] = chan->src[0].swizzle[i];
      if (nir_op_infos[chan_op].num_inputs > 1) {
         assert(nir_op_infos[chan_op].num_inputs == 2);
         nir_alu_src_copy(&chan->src[1], &instr->src[1], chan);
         chan->src[1].swizzle[0] = chan->src[1].swizzle[i];
      }
      chan->exact = instr->exact;

      nir_builder_instr_insert(builder, &chan->instr);

      if (i == 0) {
         last = &chan->dest.dest.ssa;
      } else {
         last = nir_build_alu(builder, merge_op,
                              last, &chan->dest.dest.ssa, NULL, NULL);
      }
   }

   assert(instr->dest.write_mask == 1);
   nir_ssa_def_rewrite_uses(&instr->dest.dest.ssa, nir_src_for_ssa(last));
   nir_instr_remove(&instr->instr);
}

static bool
lower_alu_instr_scalar(nir_alu_instr *instr, nir_builder *b)
{
   unsigned num_src = nir_op_infos[instr->op].num_inputs;
   unsigned i, chan;

   assert(instr->dest.dest.is_ssa);
   assert(instr->dest.write_mask != 0);

   b->cursor = nir_before_instr(&instr->instr);
   b->exact = instr->exact;

#define LOWER_REDUCTION(name, chan, merge) \
   case name##2: \
   case name##3: \
   case name##4: \
      lower_reduction(instr, chan, merge, b); \
      return true;

   switch (instr->op) {
   case nir_op_vec4:
   case nir_op_vec3:
   case nir_op_vec2:
      /* We don't need to scalarize these ops, they're the ones generated to
       * group up outputs into a value that can be SSAed.
       */
      return false;

   case nir_op_pack_half_2x16:
      if (!b->shader->options->lower_pack_half_2x16)
         return false;

      nir_ssa_def *val =
         nir_pack_half_2x16_split(b, nir_channel(b, instr->src[0].src.ssa,
                                                 instr->src[0].swizzle[0]),
                                     nir_channel(b, instr->src[0].src.ssa,
                                                 instr->src[0].swizzle[1]));

      nir_ssa_def_rewrite_uses(&instr->dest.dest.ssa, nir_src_for_ssa(val));
      nir_instr_remove(&instr->instr);
      return true;

   case nir_op_unpack_unorm_4x8:
   case nir_op_unpack_snorm_4x8:
   case nir_op_unpack_unorm_2x16:
   case nir_op_unpack_snorm_2x16:
      /* There is no scalar version of these ops, unless we were to break it
       * down to bitshifts and math (which is definitely not intended).
       */
      return false;

   case nir_op_unpack_half_2x16: {
      if (!b->shader->options->lower_unpack_half_2x16)
         return false;

      nir_ssa_def *comps[2];
      comps[0] = nir_unpack_half_2x16_split_x(b, instr->src[0].src.ssa);
      comps[1] = nir_unpack_half_2x16_split_y(b, instr->src[0].src.ssa);
      nir_ssa_def *vec = nir_vec(b, comps, 2);

      nir_ssa_def_rewrite_uses(&instr->dest.dest.ssa, nir_src_for_ssa(vec));
      nir_instr_remove(&instr->instr);
      return true;
   }

   case nir_op_pack_uvec2_to_uint: {
      assert(b->shader->options->lower_pack_snorm_2x16 ||
             b->shader->options->lower_pack_unorm_2x16);

      nir_ssa_def *word =
         nir_extract_u16(b, instr->src[0].src.ssa, nir_imm_int(b, 0));
      nir_ssa_def *val =
         nir_ior(b, nir_ishl(b, nir_channel(b, word, 1), nir_imm_int(b, 16)),
                                nir_channel(b, word, 0));

      nir_ssa_def_rewrite_uses(&instr->dest.dest.ssa, nir_src_for_ssa(val));
      nir_instr_remove(&instr->instr);
      break;
   }

   case nir_op_pack_uvec4_to_uint: {
      assert(b->shader->options->lower_pack_snorm_4x8 ||
             b->shader->options->lower_pack_unorm_4x8);

      nir_ssa_def *byte =
         nir_extract_u8(b, instr->src[0].src.ssa, nir_imm_int(b, 0));
      nir_ssa_def *val =
         nir_ior(b, nir_ior(b, nir_ishl(b, nir_channel(b, byte, 3), nir_imm_int(b, 24)),
                               nir_ishl(b, nir_channel(b, byte, 2), nir_imm_int(b, 16))),
                    nir_ior(b, nir_ishl(b, nir_channel(b, byte, 1), nir_imm_int(b, 8)),
                               nir_channel(b, byte, 0)));

      nir_ssa_def_rewrite_uses(&instr->dest.dest.ssa, nir_src_for_ssa(val));
      nir_instr_remove(&instr->instr);
      break;
   }

   case nir_op_fdph: {
      nir_ssa_def *sum[4];
      for (unsigned i = 0; i < 3; i++) {
         sum[i] = nir_fmul(b, nir_channel(b, instr->src[0].src.ssa,
                                          instr->src[0].swizzle[i]),
                              nir_channel(b, instr->src[1].src.ssa,
                                          instr->src[1].swizzle[i]));
      }
      sum[3] = nir_channel(b, instr->src[1].src.ssa, instr->src[1].swizzle[3]);

      nir_ssa_def *val = nir_fadd(b, nir_fadd(b, sum[0], sum[1]),
                                     nir_fadd(b, sum[2], sum[3]));

      nir_ssa_def_rewrite_uses(&instr->dest.dest.ssa, nir_src_for_ssa(val));
      nir_instr_remove(&instr->instr);
      return true;
   }

   case nir_op_unpack_double_2x32:
      return false;

      LOWER_REDUCTION(nir_op_fdot, nir_op_fmul, nir_op_fadd);
      LOWER_REDUCTION(nir_op_ball_fequal, nir_op_feq, nir_op_iand);
      LOWER_REDUCTION(nir_op_ball_iequal, nir_op_ieq, nir_op_iand);
      LOWER_REDUCTION(nir_op_bany_fnequal, nir_op_fne, nir_op_ior);
      LOWER_REDUCTION(nir_op_bany_inequal, nir_op_ine, nir_op_ior);
      LOWER_REDUCTION(nir_op_fall_equal, nir_op_seq, nir_op_fand);
      LOWER_REDUCTION(nir_op_fany_nequal, nir_op_sne, nir_op_for);

   default:
      break;
   }

   if (instr->dest.dest.ssa.num_components == 1)
      return false;

   unsigned num_components = instr->dest.dest.ssa.num_components;
   nir_ssa_def *comps[] = { NULL, NULL, NULL, NULL };

   for (chan = 0; chan < 4; chan++) {
      if (!(instr->dest.write_mask & (1 << chan)))
         continue;

      nir_alu_instr *lower = nir_alu_instr_create(b->shader, instr->op);
      for (i = 0; i < num_src; i++) {
         /* We only handle same-size-as-dest (input_sizes[] == 0) or scalar
          * args (input_sizes[] == 1).
          */
         assert(nir_op_infos[instr->op].input_sizes[i] < 2);
         unsigned src_chan = (nir_op_infos[instr->op].input_sizes[i] == 1 ?
                              0 : chan);

         nir_alu_src_copy(&lower->src[i], &instr->src[i], lower);
         for (int j = 0; j < 4; j++)
            lower->src[i].swizzle[j] = instr->src[i].swizzle[src_chan];
      }

      nir_alu_ssa_dest_init(lower, 1, instr->dest.dest.ssa.bit_size);
      lower->dest.saturate = instr->dest.saturate;
      comps[chan] = &lower->dest.dest.ssa;
      lower->exact = instr->exact;

      nir_builder_instr_insert(b, &lower->instr);
   }

   nir_ssa_def *vec = nir_vec(b, comps, num_components);

   nir_ssa_def_rewrite_uses(&instr->dest.dest.ssa, nir_src_for_ssa(vec));

   nir_instr_remove(&instr->instr);
   return true;
}

static bool
nir_lower_alu_to_scalar_impl(nir_function_impl *impl)
{
   nir_builder builder;
   nir_builder_init(&builder, impl);
   bool progress = false;

   nir_foreach_block(block, impl) {
      nir_foreach_instr_safe(instr, block) {
         if (instr->type == nir_instr_type_alu) {
            progress = lower_alu_instr_scalar(nir_instr_as_alu(instr),
                                              &builder) || progress;
         }
      }
   }

   nir_metadata_preserve(impl, nir_metadata_block_index |
                               nir_metadata_dominance);

   return progress;
}

bool
nir_lower_alu_to_scalar(nir_shader *shader)
{
   bool progress = false;

   nir_foreach_function(function, shader) {
      if (function->impl)
         progress = nir_lower_alu_to_scalar_impl(function->impl) || progress;
   }

   return progress;
}
@


1.1
log
@Initial revision
@
text
@d34 2
a35 1
nir_alu_ssa_dest_init(nir_alu_instr *instr, unsigned num_components)
d37 2
a38 1
   nir_ssa_dest_init(&instr->instr, &instr->dest.dest, num_components, NULL);
d51 1
a51 1
      nir_alu_ssa_dest_init(chan, 1);
d59 1
d76 1
a76 1
static void
d86 1
d93 1
a93 1
      return;
d102 1
a102 1
      return;
d106 1
a106 1
         return;
d116 1
a116 1
      return;
d125 1
a125 1
      return;
d129 1
a129 1
         return;
d138 1
a138 1
      return;
d188 1
a188 1
      return;
d191 3
d207 1
a207 1
      return;
d230 1
a230 1
      nir_alu_ssa_dest_init(lower, 1);
d233 1
d243 1
a246 11
lower_alu_to_scalar_block(nir_block *block, void *builder)
{
   nir_foreach_instr_safe(block, instr) {
      if (instr->type == nir_instr_type_alu)
         lower_alu_instr_scalar(nir_instr_as_alu(instr), builder);
   }

   return true;
}

static void
d251 13
d265 1
a265 1
   nir_foreach_block(impl, lower_alu_to_scalar_block, &builder);
d268 1
a268 1
void
d271 3
a273 1
   nir_foreach_function(shader, function) {
d275 1
a275 1
         nir_lower_alu_to_scalar_impl(function->impl);
d277 2
@


1.1.1.1
log
@Import Mesa 11.2.2
@
text
@@


1.1.1.2
log
@Import Mesa 13.0.2
@
text
@d34 1
a34 2
nir_alu_ssa_dest_init(nir_alu_instr *instr, unsigned num_components,
                      unsigned bit_size)
d36 1
a36 2
   nir_ssa_dest_init(&instr->instr, &instr->dest.dest, num_components,
                     bit_size, NULL);
d49 1
a49 1
      nir_alu_ssa_dest_init(chan, 1, instr->dest.dest.ssa.bit_size);
a56 1
      chan->exact = instr->exact;
d73 1
a73 1
static bool
a82 1
   b->exact = instr->exact;
d89 1
a89 1
      return true;
d98 1
a98 1
      return false;
d102 1
a102 1
         return false;
d112 1
a112 1
      return true;
d121 1
a121 1
      return false;
d125 1
a125 1
         return false;
d134 1
a134 1
      return true;
d184 1
a184 1
      return true;
a186 3
   case nir_op_unpack_double_2x32:
      return false;

d200 1
a200 1
      return false;
d223 1
a223 1
      nir_alu_ssa_dest_init(lower, 1, instr->dest.dest.ssa.bit_size);
a225 1
      lower->exact = instr->exact;
d235 10
d248 1
a248 1
static bool
a252 13
   bool progress = false;

   nir_foreach_block(block, impl) {
      nir_foreach_instr_safe(instr, block) {
         if (instr->type == nir_instr_type_alu) {
            progress = lower_alu_instr_scalar(nir_instr_as_alu(instr),
                                              &builder) || progress;
         }
      }
   }

   nir_metadata_preserve(impl, nir_metadata_block_index |
                               nir_metadata_dominance);
d254 1
a254 1
   return progress;
d257 1
a257 1
bool
d260 1
a260 3
   bool progress = false;

   nir_foreach_function(function, shader) {
d262 1
a262 1
         progress = nir_lower_alu_to_scalar_impl(function->impl) || progress;
a263 2

   return progress;
@


1.1.1.3
log
@Import Mesa 17.1.6
@
text
@d191 1
a191 1
   case nir_op_unpack_64_2x32:
@


