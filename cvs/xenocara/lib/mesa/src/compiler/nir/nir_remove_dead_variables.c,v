head	1.2;
access;
symbols
	mesa-17_1_6:1.1.1.3
	OPENBSD_6_1:1.1.1.2.0.2
	OPENBSD_6_1_BASE:1.1.1.2
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.1.1.1.0.4
	OPENBSD_6_0_BASE:1.1.1.1
	mesa-11_2_2:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2017.08.26.16.59.21;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2016.05.29.10.16.22;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.1
date	2016.05.29.10.16.22;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.2
date	2016.12.11.08.33.43;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	uuv5VTS15jglEDZU;

1.1.1.3
date	2017.08.14.09.38.29;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/*
 * Copyright Â© 2014 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Authors:
 *    Connor Abbott (cwabbott0@@gmail.com)
 *
 */

#include "nir.h"

static void
add_var_use_intrinsic(nir_intrinsic_instr *instr, struct set *live)
{
   unsigned num_vars = nir_intrinsic_infos[instr->intrinsic].num_variables;
   for (unsigned i = 0; i < num_vars; i++) {
      nir_variable *var = instr->variables[i]->var;
      _mesa_set_add(live, var);
   }
}

static void
add_var_use_call(nir_call_instr *instr, struct set *live)
{
   if (instr->return_deref != NULL) {
      nir_variable *var = instr->return_deref->var;
      _mesa_set_add(live, var);
   }

   for (unsigned i = 0; i < instr->num_params; i++) {
      nir_variable *var = instr->params[i]->var;
      _mesa_set_add(live, var);
   }
}

static void
add_var_use_tex(nir_tex_instr *instr, struct set *live)
{
   if (instr->texture != NULL) {
      nir_variable *var = instr->texture->var;
      _mesa_set_add(live, var);
   }

   if (instr->sampler != NULL) {
      nir_variable *var = instr->sampler->var;
      _mesa_set_add(live, var);
   }
}

static void
add_var_use_shader(nir_shader *shader, struct set *live)
{
   nir_foreach_function(function, shader) {
      if (function->impl) {
         nir_foreach_block(block, function->impl) {
            nir_foreach_instr(instr, block) {
               switch(instr->type) {
               case nir_instr_type_intrinsic:
                  add_var_use_intrinsic(nir_instr_as_intrinsic(instr), live);
                  break;

               case nir_instr_type_call:
                  add_var_use_call(nir_instr_as_call(instr), live);
                  break;

               case nir_instr_type_tex:
                  add_var_use_tex(nir_instr_as_tex(instr), live);
                  break;

               default:
                  break;
               }
            }
         }
      }
   }
}

static bool
remove_dead_vars(struct exec_list *var_list, struct set *live)
{
   bool progress = false;

   foreach_list_typed_safe(nir_variable, var, node, var_list) {
      struct set_entry *entry = _mesa_set_search(live, var);
      if (entry == NULL) {
         exec_node_remove(&var->node);
         ralloc_free(var);
         progress = true;
      }
   }

   return progress;
}

bool
nir_remove_dead_variables(nir_shader *shader, nir_variable_mode modes)
{
   bool progress = false;
   struct set *live =
      _mesa_set_create(NULL, _mesa_hash_pointer, _mesa_key_pointer_equal);

   add_var_use_shader(shader, live);

   if (modes & nir_var_uniform)
      progress = remove_dead_vars(&shader->uniforms, live) || progress;

   if (modes & nir_var_shader_in)
      progress = remove_dead_vars(&shader->inputs, live) || progress;

   if (modes & nir_var_shader_out)
      progress = remove_dead_vars(&shader->outputs, live) || progress;

   if (modes & nir_var_global)
      progress = remove_dead_vars(&shader->globals, live) || progress;

   if (modes & nir_var_system_value)
      progress = remove_dead_vars(&shader->system_values, live) || progress;

   if (modes & nir_var_local) {
      nir_foreach_function(function, shader) {
         if (function->impl) {
            if (remove_dead_vars(&function->impl->locals, live)) {
               nir_metadata_preserve(function->impl, nir_metadata_block_index |
                                                     nir_metadata_dominance |
                                                     nir_metadata_live_ssa_defs);
               progress = true;
            }
         }
      }
   }

   _mesa_set_destroy(live, NULL);
   return progress;
}
@


1.1
log
@Initial revision
@
text
@a67 27
static bool
add_var_use_block(nir_block *block, void *state)
{
   struct set *live = state;

   nir_foreach_instr(block, instr) {
      switch(instr->type) {
      case nir_instr_type_intrinsic:
         add_var_use_intrinsic(nir_instr_as_intrinsic(instr), live);
         break;

      case nir_instr_type_call:
         add_var_use_call(nir_instr_as_call(instr), live);
         break;

      case nir_instr_type_tex:
         add_var_use_tex(nir_instr_as_tex(instr), live);
         break;

      default:
         break;
      }
   }

   return true;
}

d71 1
a71 1
   nir_foreach_function(shader, function) {
d73 20
a92 1
         nir_foreach_block(function->impl, add_var_use_block, live);
d115 1
a115 1
nir_remove_dead_variables(nir_shader *shader)
d123 2
a124 1
   progress = remove_dead_vars(&shader->globals, live) || progress;
d126 21
a146 7
   nir_foreach_function(shader, function) {
      if (function->impl) {
         if (remove_dead_vars(&function->impl->locals, live)) {
            nir_metadata_preserve(function->impl, nir_metadata_block_index |
                                                  nir_metadata_dominance |
                                                  nir_metadata_live_ssa_defs);
            progress = true;
@


1.1.1.1
log
@Import Mesa 11.2.2
@
text
@@


1.1.1.2
log
@Import Mesa 13.0.2
@
text
@d68 27
d98 1
a98 1
   nir_foreach_function(function, shader) {
d100 1
a100 20
         nir_foreach_block(block, function->impl) {
            nir_foreach_instr(instr, block) {
               switch(instr->type) {
               case nir_instr_type_intrinsic:
                  add_var_use_intrinsic(nir_instr_as_intrinsic(instr), live);
                  break;

               case nir_instr_type_call:
                  add_var_use_call(nir_instr_as_call(instr), live);
                  break;

               case nir_instr_type_tex:
                  add_var_use_tex(nir_instr_as_tex(instr), live);
                  break;

               default:
                  break;
               }
            }
         }
d123 1
a123 1
nir_remove_dead_variables(nir_shader *shader, nir_variable_mode modes)
d131 1
a131 2
   if (modes & nir_var_uniform)
      progress = remove_dead_vars(&shader->uniforms, live) || progress;
d133 7
a139 21
   if (modes & nir_var_shader_in)
      progress = remove_dead_vars(&shader->inputs, live) || progress;

   if (modes & nir_var_shader_out)
      progress = remove_dead_vars(&shader->outputs, live) || progress;

   if (modes & nir_var_global)
      progress = remove_dead_vars(&shader->globals, live) || progress;

   if (modes & nir_var_system_value)
      progress = remove_dead_vars(&shader->system_values, live) || progress;

   if (modes & nir_var_local) {
      nir_foreach_function(function, shader) {
         if (function->impl) {
            if (remove_dead_vars(&function->impl->locals, live)) {
               nir_metadata_preserve(function->impl, nir_metadata_block_index |
                                                     nir_metadata_dominance |
                                                     nir_metadata_live_ssa_defs);
               progress = true;
            }
@


1.1.1.3
log
@Import Mesa 17.1.6
@
text
@d34 3
a36 21

   switch (instr->intrinsic) {
   case nir_intrinsic_copy_var:
      _mesa_set_add(live, instr->variables[1]->var);
      /* Fall through */
   case nir_intrinsic_store_var: {
      /* The first source in both copy_var and store_var is the destination.
       * If the variable is a local that never escapes the shader, then we
       * don't mark it as live for just a store.
       */
      nir_variable_mode mode = instr->variables[0]->var->data.mode;
      if (!(mode & (nir_var_local | nir_var_global | nir_var_shared)))
         _mesa_set_add(live, instr->variables[0]->var);
      break;
   }

   default:
      for (unsigned i = 0; i < num_vars; i++) {
         _mesa_set_add(live, instr->variables[i]->var);
      }
      break;
a96 25
static void
remove_dead_var_writes(nir_shader *shader, struct set *live)
{
   nir_foreach_function(function, shader) {
      if (!function->impl)
         continue;

      nir_foreach_block(block, function->impl) {
         nir_foreach_instr_safe(instr, block) {
            if (instr->type != nir_instr_type_intrinsic)
               continue;

            nir_intrinsic_instr *intrin = nir_instr_as_intrinsic(instr);
            if (intrin->intrinsic != nir_intrinsic_copy_var &&
                intrin->intrinsic != nir_intrinsic_store_var)
               continue;

            /* Stores to dead variables need to be removed */
            if (intrin->variables[0]->var->data.mode == 0)
               nir_instr_remove(instr);
         }
      }
   }
}

a104 2
         /* Mark this variable as used by setting the mode to 0 */
         var->data.mode = 0;
d106 1
a137 3
   if (modes & nir_var_shared)
      progress = remove_dead_vars(&shader->shared, live) || progress;

d141 4
a144 1
            if (remove_dead_vars(&function->impl->locals, live))
d146 1
a146 11
         }
      }
   }

   if (progress) {
      remove_dead_var_writes(shader, live);

      nir_foreach_function(function, shader) {
         if (function->impl) {
            nir_metadata_preserve(function->impl, nir_metadata_block_index |
                                                  nir_metadata_dominance);
@


