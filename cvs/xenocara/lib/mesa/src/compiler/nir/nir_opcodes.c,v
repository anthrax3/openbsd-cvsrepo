head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	mesa-17_1_6:1.1.1.3
	OPENBSD_6_1:1.1.1.2.0.2
	OPENBSD_6_1_BASE:1.1.1.2
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.1.1.1.0.4
	OPENBSD_6_0_BASE:1.1.1.1
	mesa-11_2_2:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2017.08.26.16.59.21;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2016.05.29.10.16.31;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.1
date	2016.05.29.10.16.31;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.2
date	2016.12.11.08.33.45;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	uuv5VTS15jglEDZU;

1.1.1.3
date	2017.08.14.09.38.31;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@
#include "nir.h"

const nir_op_info nir_op_infos[nir_num_opcodes] = {
{
   .name = "b2f",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_bool32
   },
   .algebraic_properties =
      0
},
{
   .name = "b2i",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_bool32
   },
   .algebraic_properties =
      0
},
{
   .name = "ball_fequal2",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_bool32,
   .input_sizes = {
      2, 2
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "ball_fequal3",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_bool32,
   .input_sizes = {
      3, 3
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "ball_fequal4",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_bool32,
   .input_sizes = {
      4, 4
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "ball_iequal2",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_bool32,
   .input_sizes = {
      2, 2
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "ball_iequal3",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_bool32,
   .input_sizes = {
      3, 3
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "ball_iequal4",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_bool32,
   .input_sizes = {
      4, 4
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "bany_fnequal2",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_bool32,
   .input_sizes = {
      2, 2
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "bany_fnequal3",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_bool32,
   .input_sizes = {
      3, 3
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "bany_fnequal4",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_bool32,
   .input_sizes = {
      4, 4
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "bany_inequal2",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_bool32,
   .input_sizes = {
      2, 2
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "bany_inequal3",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_bool32,
   .input_sizes = {
      3, 3
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "bany_inequal4",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_bool32,
   .input_sizes = {
      4, 4
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "bcsel",
   .num_inputs = 3,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0, 0
   },
   .input_types = {
      nir_type_bool32, nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "bfi",
   .num_inputs = 3,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0, 0, 0
   },
   .input_types = {
      nir_type_uint32, nir_type_uint32, nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "bfm",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int32, nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "bit_count",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "bitfield_insert",
   .num_inputs = 4,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0, 0, 0, 0
   },
   .input_types = {
      nir_type_uint32, nir_type_uint32, nir_type_int32, nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "bitfield_reverse",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "d2b",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_bool32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float64
   },
   .algebraic_properties =
      0
},
{
   .name = "d2f",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float64
   },
   .algebraic_properties =
      0
},
{
   .name = "d2i",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float64
   },
   .algebraic_properties =
      0
},
{
   .name = "d2u",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float64
   },
   .algebraic_properties =
      0
},
{
   .name = "extract_i16",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "extract_i8",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "extract_u16",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "extract_u8",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "f2b",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_bool32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float32
   },
   .algebraic_properties =
      0
},
{
   .name = "f2d",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float64,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float32
   },
   .algebraic_properties =
      0
},
{
   .name = "f2i",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float32
   },
   .algebraic_properties =
      0
},
{
   .name = "f2u",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float32
   },
   .algebraic_properties =
      0
},
{
   .name = "fabs",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fadd",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "fall_equal2",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_float32,
   .input_sizes = {
      2, 2
   },
   .input_types = {
      nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fall_equal3",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_float32,
   .input_sizes = {
      3, 3
   },
   .input_types = {
      nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fall_equal4",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_float32,
   .input_sizes = {
      4, 4
   },
   .input_types = {
      nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fand",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fany_nequal2",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_float32,
   .input_sizes = {
      2, 2
   },
   .input_types = {
      nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fany_nequal3",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_float32,
   .input_sizes = {
      3, 3
   },
   .input_types = {
      nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fany_nequal4",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_float32,
   .input_sizes = {
      4, 4
   },
   .input_types = {
      nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fceil",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fcos",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fcsel",
   .num_inputs = 3,
   .output_size = 0,
   .output_type = nir_type_float32,
   .input_sizes = {
      0, 0, 0
   },
   .input_types = {
      nir_type_float32, nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      0
},
{
   .name = "fddx",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fddx_coarse",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fddx_fine",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fddy",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fddy_coarse",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fddy_fine",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fdiv",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fdot2",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_float,
   .input_sizes = {
      2, 2
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fdot3",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_float,
   .input_sizes = {
      3, 3
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fdot4",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_float,
   .input_sizes = {
      4, 4
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fdot_replicated2",
   .num_inputs = 2,
   .output_size = 4,
   .output_type = nir_type_float,
   .input_sizes = {
      2, 2
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fdot_replicated3",
   .num_inputs = 2,
   .output_size = 4,
   .output_type = nir_type_float,
   .input_sizes = {
      3, 3
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fdot_replicated4",
   .num_inputs = 2,
   .output_size = 4,
   .output_type = nir_type_float,
   .input_sizes = {
      4, 4
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fdph",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_float,
   .input_sizes = {
      3, 4
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fdph_replicated",
   .num_inputs = 2,
   .output_size = 4,
   .output_type = nir_type_float,
   .input_sizes = {
      3, 4
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "feq",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_bool32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fexp2",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "ffloor",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "ffma",
   .num_inputs = 3,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0, 0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float, nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "ffract",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fge",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_bool32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "find_lsb",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "flog2",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "flrp",
   .num_inputs = 3,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0, 0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float, nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "flt",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_bool32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fmax",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fmin",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fmod",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fmov",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fmul",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "fne",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_bool32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fneg",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise1_1",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_float,
   .input_sizes = {
      1
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise1_2",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_float,
   .input_sizes = {
      2
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise1_3",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_float,
   .input_sizes = {
      3
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise1_4",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_float,
   .input_sizes = {
      4
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise2_1",
   .num_inputs = 1,
   .output_size = 2,
   .output_type = nir_type_float,
   .input_sizes = {
      1
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise2_2",
   .num_inputs = 1,
   .output_size = 2,
   .output_type = nir_type_float,
   .input_sizes = {
      2
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise2_3",
   .num_inputs = 1,
   .output_size = 2,
   .output_type = nir_type_float,
   .input_sizes = {
      3
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise2_4",
   .num_inputs = 1,
   .output_size = 2,
   .output_type = nir_type_float,
   .input_sizes = {
      4
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise3_1",
   .num_inputs = 1,
   .output_size = 3,
   .output_type = nir_type_float,
   .input_sizes = {
      1
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise3_2",
   .num_inputs = 1,
   .output_size = 3,
   .output_type = nir_type_float,
   .input_sizes = {
      2
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise3_3",
   .num_inputs = 1,
   .output_size = 3,
   .output_type = nir_type_float,
   .input_sizes = {
      3
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise3_4",
   .num_inputs = 1,
   .output_size = 3,
   .output_type = nir_type_float,
   .input_sizes = {
      4
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise4_1",
   .num_inputs = 1,
   .output_size = 4,
   .output_type = nir_type_float,
   .input_sizes = {
      1
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise4_2",
   .num_inputs = 1,
   .output_size = 4,
   .output_type = nir_type_float,
   .input_sizes = {
      2
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise4_3",
   .num_inputs = 1,
   .output_size = 4,
   .output_type = nir_type_float,
   .input_sizes = {
      3
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnoise4_4",
   .num_inputs = 1,
   .output_size = 4,
   .output_type = nir_type_float,
   .input_sizes = {
      4
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fnot",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "for",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "fpow",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fquantize2f16",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "frcp",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "frem",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fround_even",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "frsq",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fsat",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fsign",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fsin",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fsqrt",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fsub",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "ftrunc",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
   .name = "fxor",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "i2b",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_bool32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "i2d",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float64,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "i2f",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "iabs",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "iadd",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "iand",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "ibfe",
   .num_inputs = 3,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0, 0, 0
   },
   .input_types = {
      nir_type_int32, nir_type_int32, nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "ibitfield_extract",
   .num_inputs = 3,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0, 0, 0
   },
   .input_types = {
      nir_type_int32, nir_type_int32, nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "idiv",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "ieq",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_bool32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "ifind_msb",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "ige",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_bool32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "ilt",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_bool32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "imax",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "imin",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "imod",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "imov",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "imul",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "imul_high",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int32, nir_type_int32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "ine",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_bool32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "ineg",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "inot",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "ior",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "irem",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "ishl",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "ishr",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "isign",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "isub",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "ixor",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "ldexp",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "pack_double_2x32",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_uint64,
   .input_sizes = {
      2
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "pack_double_2x32_split",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint64,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint32, nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "pack_half_2x16",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_uint32,
   .input_sizes = {
      2
   },
   .input_types = {
      nir_type_float32
   },
   .algebraic_properties =
      0
},
{
   .name = "pack_half_2x16_split",
   .num_inputs = 2,
   .output_size = 1,
   .output_type = nir_type_uint32,
   .input_sizes = {
      1, 1
   },
   .input_types = {
      nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      0
},
{
   .name = "pack_snorm_2x16",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_uint32,
   .input_sizes = {
      2
   },
   .input_types = {
      nir_type_float32
   },
   .algebraic_properties =
      0
},
{
   .name = "pack_snorm_4x8",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_uint32,
   .input_sizes = {
      4
   },
   .input_types = {
      nir_type_float32
   },
   .algebraic_properties =
      0
},
{
   .name = "pack_unorm_2x16",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_uint32,
   .input_sizes = {
      2
   },
   .input_types = {
      nir_type_float32
   },
   .algebraic_properties =
      0
},
{
   .name = "pack_unorm_4x8",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_uint32,
   .input_sizes = {
      4
   },
   .input_types = {
      nir_type_float32
   },
   .algebraic_properties =
      0
},
{
   .name = "pack_uvec2_to_uint",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_uint32,
   .input_sizes = {
      2
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "pack_uvec4_to_uint",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_uint32,
   .input_sizes = {
      4
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "seq",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "sge",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      0
},
{
   .name = "slt",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      0
},
{
   .name = "sne",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float32, nir_type_float32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "u2d",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float64,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "u2f",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "uadd_carry",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "ubfe",
   .num_inputs = 3,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0, 0, 0
   },
   .input_types = {
      nir_type_uint32, nir_type_int32, nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "ubitfield_extract",
   .num_inputs = 3,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0, 0, 0
   },
   .input_types = {
      nir_type_uint32, nir_type_int32, nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "udiv",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "ufind_msb",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "uge",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_bool32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "ult",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_bool32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "umax",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "umax_4x8",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int32, nir_type_int32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "umin",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "umin_4x8",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int32, nir_type_int32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "umod",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "umul_high",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint32, nir_type_uint32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE
},
{
   .name = "umul_unorm_4x8",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int32, nir_type_int32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "unpack_double_2x32",
   .num_inputs = 1,
   .output_size = 2,
   .output_type = nir_type_uint32,
   .input_sizes = {
      1
   },
   .input_types = {
      nir_type_uint64
   },
   .algebraic_properties =
      0
},
{
   .name = "unpack_double_2x32_split_x",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint64
   },
   .algebraic_properties =
      0
},
{
   .name = "unpack_double_2x32_split_y",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint64
   },
   .algebraic_properties =
      0
},
{
   .name = "unpack_half_2x16",
   .num_inputs = 1,
   .output_size = 2,
   .output_type = nir_type_float32,
   .input_sizes = {
      1
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "unpack_half_2x16_split_x",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_float32,
   .input_sizes = {
      1
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "unpack_half_2x16_split_y",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_float32,
   .input_sizes = {
      1
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "unpack_snorm_2x16",
   .num_inputs = 1,
   .output_size = 2,
   .output_type = nir_type_float32,
   .input_sizes = {
      1
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "unpack_snorm_4x8",
   .num_inputs = 1,
   .output_size = 4,
   .output_type = nir_type_float32,
   .input_sizes = {
      1
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "unpack_unorm_2x16",
   .num_inputs = 1,
   .output_size = 2,
   .output_type = nir_type_float32,
   .input_sizes = {
      1
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "unpack_unorm_4x8",
   .num_inputs = 1,
   .output_size = 4,
   .output_type = nir_type_float32,
   .input_sizes = {
      1
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "usadd_4x8",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int32, nir_type_int32
   },
   .algebraic_properties =
      NIR_OP_IS_COMMUTATIVE | NIR_OP_IS_ASSOCIATIVE
},
{
   .name = "ushr",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "ussub_4x8",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int32, nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "usub_borrow",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "vec2",
   .num_inputs = 2,
   .output_size = 2,
   .output_type = nir_type_uint,
   .input_sizes = {
      1, 1
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "vec3",
   .num_inputs = 3,
   .output_size = 3,
   .output_type = nir_type_uint,
   .input_sizes = {
      1, 1, 1
   },
   .input_types = {
      nir_type_uint, nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "vec4",
   .num_inputs = 4,
   .output_size = 4,
   .output_type = nir_type_uint,
   .input_sizes = {
      1, 1, 1, 1
   },
   .input_types = {
      nir_type_uint, nir_type_uint, nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      0
},
};

@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
   .output_type = nir_type_float,
d14 1
a14 1
      nir_type_bool
d23 1
a23 1
   .output_type = nir_type_int,
d28 1
a28 1
      nir_type_bool
d37 1
a37 1
   .output_type = nir_type_bool,
d51 1
a51 1
   .output_type = nir_type_bool,
d65 1
a65 1
   .output_type = nir_type_bool,
d79 1
a79 1
   .output_type = nir_type_bool,
d93 1
a93 1
   .output_type = nir_type_bool,
d107 1
a107 1
   .output_type = nir_type_bool,
d121 1
a121 1
   .output_type = nir_type_bool,
d135 1
a135 1
   .output_type = nir_type_bool,
d149 1
a149 1
   .output_type = nir_type_bool,
d163 1
a163 1
   .output_type = nir_type_bool,
d177 1
a177 1
   .output_type = nir_type_bool,
d191 1
a191 1
   .output_type = nir_type_bool,
d210 1
a210 1
      nir_type_bool, nir_type_uint, nir_type_uint
d219 1
a219 1
   .output_type = nir_type_uint,
d224 1
a224 1
      nir_type_uint, nir_type_uint, nir_type_uint
d233 1
a233 1
   .output_type = nir_type_uint,
d238 1
a238 1
      nir_type_int, nir_type_int
d247 1
a247 1
   .output_type = nir_type_uint,
d252 1
a252 1
      nir_type_uint
d261 1
a261 1
   .output_type = nir_type_uint,
d266 1
a266 1
      nir_type_uint, nir_type_uint, nir_type_int, nir_type_int
d275 57
a331 1
   .output_type = nir_type_uint,
d336 1
a336 1
      nir_type_uint
d401 1
a401 1
   .output_type = nir_type_bool,
d406 15
a420 1
      nir_type_float
d429 1
a429 1
   .output_type = nir_type_int,
d434 1
a434 1
      nir_type_float
d443 1
a443 1
   .output_type = nir_type_uint,
d448 1
a448 1
      nir_type_float
d485 1
a485 1
   .output_type = nir_type_float,
d490 1
a490 1
      nir_type_float, nir_type_float
d499 1
a499 1
   .output_type = nir_type_float,
d504 1
a504 1
      nir_type_float, nir_type_float
d513 1
a513 1
   .output_type = nir_type_float,
d518 1
a518 1
      nir_type_float, nir_type_float
d527 1
a527 1
   .output_type = nir_type_float,
d532 1
a532 1
      nir_type_float, nir_type_float
d541 1
a541 1
   .output_type = nir_type_float,
d546 1
a546 1
      nir_type_float, nir_type_float
d555 1
a555 1
   .output_type = nir_type_float,
d560 1
a560 1
      nir_type_float, nir_type_float
d569 1
a569 1
   .output_type = nir_type_float,
d574 1
a574 1
      nir_type_float, nir_type_float
d611 1
a611 1
   .output_type = nir_type_float,
d616 1
a616 1
      nir_type_float, nir_type_float, nir_type_float
d835 1
a835 1
   .output_type = nir_type_bool,
d905 1
a905 1
   .output_type = nir_type_bool,
d919 1
a919 1
   .output_type = nir_type_int,
d924 1
a924 1
      nir_type_int
d961 1
a961 1
   .output_type = nir_type_bool,
d1045 1
a1045 1
   .output_type = nir_type_bool,
d1311 1
a1311 1
   .output_type = nir_type_float,
d1316 1
a1316 1
      nir_type_float, nir_type_float
d1336 14
d1364 14
d1493 1
a1493 1
   .output_type = nir_type_float,
d1498 1
a1498 1
      nir_type_float, nir_type_float
d1507 15
a1521 1
   .output_type = nir_type_bool,
d1526 1
a1526 1
      nir_type_int
d1535 1
a1535 1
   .output_type = nir_type_float,
d1540 1
a1540 1
      nir_type_int
d1591 1
a1591 1
   .output_type = nir_type_int,
d1596 1
a1596 1
      nir_type_int, nir_type_int, nir_type_int
d1605 1
a1605 1
   .output_type = nir_type_int,
d1610 1
a1610 1
      nir_type_int, nir_type_int, nir_type_int
d1633 1
a1633 1
   .output_type = nir_type_bool,
d1647 1
a1647 1
   .output_type = nir_type_int,
d1652 1
a1652 1
      nir_type_int
d1661 1
a1661 1
   .output_type = nir_type_bool,
d1675 1
a1675 1
   .output_type = nir_type_bool,
d1714 14
d1759 1
a1759 1
   .output_type = nir_type_int,
d1764 1
a1764 1
      nir_type_int, nir_type_int
d1773 1
a1773 1
   .output_type = nir_type_bool,
d1826 14
d1918 29
a1946 1
      nir_type_float, nir_type_int
d1955 1
a1955 1
   .output_type = nir_type_uint,
d1960 1
a1960 1
      nir_type_float
d1969 1
a1969 1
   .output_type = nir_type_uint,
d1974 1
a1974 1
      nir_type_float, nir_type_float
d1983 1
a1983 1
   .output_type = nir_type_uint,
d1988 1
a1988 1
      nir_type_float
d1997 1
a1997 1
   .output_type = nir_type_uint,
d2002 1
a2002 1
      nir_type_float
d2011 1
a2011 1
   .output_type = nir_type_uint,
d2016 1
a2016 1
      nir_type_float
d2025 1
a2025 1
   .output_type = nir_type_uint,
d2030 1
a2030 1
      nir_type_float
d2039 1
a2039 1
   .output_type = nir_type_uint,
d2044 1
a2044 1
      nir_type_uint
d2053 1
a2053 1
   .output_type = nir_type_uint,
d2058 1
a2058 1
      nir_type_uint
d2067 1
a2067 1
   .output_type = nir_type_float,
d2072 1
a2072 1
      nir_type_float, nir_type_float
d2081 1
a2081 1
   .output_type = nir_type_float,
d2086 1
a2086 1
      nir_type_float, nir_type_float
d2095 1
a2095 1
   .output_type = nir_type_float,
d2100 1
a2100 1
      nir_type_float, nir_type_float
d2109 1
a2109 1
   .output_type = nir_type_float,
d2114 1
a2114 1
      nir_type_float, nir_type_float
d2120 14
d2137 1
a2137 1
   .output_type = nir_type_float,
d2142 1
a2142 1
      nir_type_uint
d2165 1
a2165 1
   .output_type = nir_type_uint,
d2170 1
a2170 1
      nir_type_uint, nir_type_int, nir_type_int
d2179 1
a2179 1
   .output_type = nir_type_uint,
d2184 1
a2184 1
      nir_type_uint, nir_type_int, nir_type_int
d2207 1
a2207 1
   .output_type = nir_type_int,
d2212 1
a2212 1
      nir_type_uint
d2221 1
a2221 1
   .output_type = nir_type_bool,
d2235 1
a2235 1
   .output_type = nir_type_bool,
d2263 1
a2263 1
   .output_type = nir_type_int,
d2268 1
a2268 1
      nir_type_int, nir_type_int
d2291 1
a2291 1
   .output_type = nir_type_int,
d2296 1
a2296 1
      nir_type_int, nir_type_int
d2319 1
a2319 1
   .output_type = nir_type_uint,
d2324 1
a2324 1
      nir_type_uint, nir_type_uint
d2333 1
a2333 1
   .output_type = nir_type_int,
d2338 1
a2338 1
      nir_type_int, nir_type_int
d2344 42
d2389 1
a2389 1
   .output_type = nir_type_float,
d2394 1
a2394 1
      nir_type_uint
d2403 1
a2403 1
   .output_type = nir_type_float,
d2408 1
a2408 1
      nir_type_uint
d2417 1
a2417 1
   .output_type = nir_type_float,
d2422 1
a2422 1
      nir_type_uint
d2431 1
a2431 1
   .output_type = nir_type_float,
d2436 1
a2436 1
      nir_type_uint
d2445 1
a2445 1
   .output_type = nir_type_float,
d2450 1
a2450 1
      nir_type_uint
d2459 1
a2459 1
   .output_type = nir_type_float,
d2464 1
a2464 1
      nir_type_uint
d2473 1
a2473 1
   .output_type = nir_type_float,
d2478 1
a2478 1
      nir_type_uint
d2487 1
a2487 1
   .output_type = nir_type_int,
d2492 1
a2492 1
      nir_type_int, nir_type_int
d2515 1
a2515 1
   .output_type = nir_type_int,
d2520 1
a2520 1
      nir_type_int, nir_type_int
@


1.1.1.1
log
@Import Mesa 11.2.2
@
text
@@


1.1.1.2
log
@Import Mesa 13.0.2
@
text
@d9 1
a9 1
   .output_type = nir_type_float32,
d14 1
a14 1
      nir_type_bool32
d23 1
a23 1
   .output_type = nir_type_int32,
d28 1
a28 1
      nir_type_bool32
d37 1
a37 1
   .output_type = nir_type_bool32,
d51 1
a51 1
   .output_type = nir_type_bool32,
d65 1
a65 1
   .output_type = nir_type_bool32,
d79 1
a79 1
   .output_type = nir_type_bool32,
d93 1
a93 1
   .output_type = nir_type_bool32,
d107 1
a107 1
   .output_type = nir_type_bool32,
d121 1
a121 1
   .output_type = nir_type_bool32,
d135 1
a135 1
   .output_type = nir_type_bool32,
d149 1
a149 1
   .output_type = nir_type_bool32,
d163 1
a163 1
   .output_type = nir_type_bool32,
d177 1
a177 1
   .output_type = nir_type_bool32,
d191 1
a191 1
   .output_type = nir_type_bool32,
d210 1
a210 1
      nir_type_bool32, nir_type_uint, nir_type_uint
d219 1
a219 1
   .output_type = nir_type_uint32,
d224 1
a224 1
      nir_type_uint32, nir_type_uint32, nir_type_uint32
d233 1
a233 1
   .output_type = nir_type_uint32,
d238 1
a238 1
      nir_type_int32, nir_type_int32
d247 1
a247 1
   .output_type = nir_type_uint32,
d252 1
a252 1
      nir_type_uint32
d261 1
a261 1
   .output_type = nir_type_uint32,
d266 1
a266 1
      nir_type_uint32, nir_type_uint32, nir_type_int32, nir_type_int32
d275 1
a275 1
   .output_type = nir_type_uint32,
d280 1
a280 57
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "d2b",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_bool32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float64
   },
   .algebraic_properties =
      0
},
{
   .name = "d2f",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float64
   },
   .algebraic_properties =
      0
},
{
   .name = "d2i",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float64
   },
   .algebraic_properties =
      0
},
{
   .name = "d2u",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float64
d345 1
a345 1
   .output_type = nir_type_bool32,
d350 1
a350 15
      nir_type_float32
   },
   .algebraic_properties =
      0
},
{
   .name = "f2d",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float64,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float32
d359 1
a359 1
   .output_type = nir_type_int32,
d364 1
a364 1
      nir_type_float32
d373 1
a373 1
   .output_type = nir_type_uint32,
d378 1
a378 1
      nir_type_float32
d415 1
a415 1
   .output_type = nir_type_float32,
d420 1
a420 1
      nir_type_float32, nir_type_float32
d429 1
a429 1
   .output_type = nir_type_float32,
d434 1
a434 1
      nir_type_float32, nir_type_float32
d443 1
a443 1
   .output_type = nir_type_float32,
d448 1
a448 1
      nir_type_float32, nir_type_float32
d457 1
a457 1
   .output_type = nir_type_float32,
d462 1
a462 1
      nir_type_float32, nir_type_float32
d471 1
a471 1
   .output_type = nir_type_float32,
d476 1
a476 1
      nir_type_float32, nir_type_float32
d485 1
a485 1
   .output_type = nir_type_float32,
d490 1
a490 1
      nir_type_float32, nir_type_float32
d499 1
a499 1
   .output_type = nir_type_float32,
d504 1
a504 1
      nir_type_float32, nir_type_float32
d541 1
a541 1
   .output_type = nir_type_float32,
d546 1
a546 1
      nir_type_float32, nir_type_float32, nir_type_float32
d765 1
a765 1
   .output_type = nir_type_bool32,
d835 1
a835 1
   .output_type = nir_type_bool32,
d849 1
a849 1
   .output_type = nir_type_int32,
d854 1
a854 1
      nir_type_int32
d891 1
a891 1
   .output_type = nir_type_bool32,
d975 1
a975 1
   .output_type = nir_type_bool32,
d1241 1
a1241 1
   .output_type = nir_type_float32,
d1246 1
a1246 1
      nir_type_float32, nir_type_float32
a1265 14
   .name = "fquantize2f16",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_float
   },
   .algebraic_properties =
      0
},
{
a1279 14
   .name = "frem",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_float,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_float, nir_type_float
   },
   .algebraic_properties =
      0
},
{
d1395 1
a1395 1
   .output_type = nir_type_float32,
d1400 1
a1400 1
      nir_type_float32, nir_type_float32
d1409 1
a1409 1
   .output_type = nir_type_bool32,
d1414 1
a1414 15
      nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "i2d",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float64,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int32
d1423 1
a1423 1
   .output_type = nir_type_float32,
d1428 1
a1428 1
      nir_type_int32
d1479 1
a1479 1
   .output_type = nir_type_int32,
d1484 1
a1484 1
      nir_type_int32, nir_type_int32, nir_type_int32
d1493 1
a1493 1
   .output_type = nir_type_int32,
d1498 1
a1498 1
      nir_type_int32, nir_type_int32, nir_type_int32
d1521 1
a1521 1
   .output_type = nir_type_bool32,
d1535 1
a1535 1
   .output_type = nir_type_int32,
d1540 1
a1540 1
      nir_type_int32
d1549 1
a1549 1
   .output_type = nir_type_bool32,
d1563 1
a1563 1
   .output_type = nir_type_bool32,
a1601 14
   .name = "imod",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      0
},
{
d1633 1
a1633 1
   .output_type = nir_type_int32,
d1638 1
a1638 1
      nir_type_int32, nir_type_int32
d1647 1
a1647 1
   .output_type = nir_type_bool32,
a1699 14
   .name = "irem",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      0
},
{
d1778 1
a1778 29
      nir_type_float, nir_type_int32
   },
   .algebraic_properties =
      0
},
{
   .name = "pack_double_2x32",
   .num_inputs = 1,
   .output_size = 1,
   .output_type = nir_type_uint64,
   .input_sizes = {
      2
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
   .name = "pack_double_2x32_split",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint64,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint32, nir_type_uint32
d1787 1
a1787 1
   .output_type = nir_type_uint32,
d1792 1
a1792 1
      nir_type_float32
d1801 1
a1801 1
   .output_type = nir_type_uint32,
d1806 1
a1806 1
      nir_type_float32, nir_type_float32
d1815 1
a1815 1
   .output_type = nir_type_uint32,
d1820 1
a1820 1
      nir_type_float32
d1829 1
a1829 1
   .output_type = nir_type_uint32,
d1834 1
a1834 1
      nir_type_float32
d1843 1
a1843 1
   .output_type = nir_type_uint32,
d1848 1
a1848 1
      nir_type_float32
d1857 1
a1857 1
   .output_type = nir_type_uint32,
d1862 1
a1862 1
      nir_type_float32
d1871 1
a1871 1
   .output_type = nir_type_uint32,
d1876 1
a1876 1
      nir_type_uint32
d1885 1
a1885 1
   .output_type = nir_type_uint32,
d1890 1
a1890 1
      nir_type_uint32
d1899 1
a1899 1
   .output_type = nir_type_float32,
d1904 1
a1904 1
      nir_type_float32, nir_type_float32
d1913 1
a1913 1
   .output_type = nir_type_float32,
d1918 1
a1918 1
      nir_type_float32, nir_type_float32
d1927 1
a1927 1
   .output_type = nir_type_float32,
d1932 1
a1932 1
      nir_type_float32, nir_type_float32
d1941 1
a1941 1
   .output_type = nir_type_float32,
d1946 1
a1946 1
      nir_type_float32, nir_type_float32
a1951 14
   .name = "u2d",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float64,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint32
   },
   .algebraic_properties =
      0
},
{
d1955 1
a1955 1
   .output_type = nir_type_float32,
d1960 1
a1960 1
      nir_type_uint32
d1983 1
a1983 1
   .output_type = nir_type_uint32,
d1988 1
a1988 1
      nir_type_uint32, nir_type_int32, nir_type_int32
d1997 1
a1997 1
   .output_type = nir_type_uint32,
d2002 1
a2002 1
      nir_type_uint32, nir_type_int32, nir_type_int32
d2025 1
a2025 1
   .output_type = nir_type_int32,
d2030 1
a2030 1
      nir_type_uint32
d2039 1
a2039 1
   .output_type = nir_type_bool32,
d2053 1
a2053 1
   .output_type = nir_type_bool32,
d2081 1
a2081 1
   .output_type = nir_type_int32,
d2086 1
a2086 1
      nir_type_int32, nir_type_int32
d2109 1
a2109 1
   .output_type = nir_type_int32,
d2114 1
a2114 1
      nir_type_int32, nir_type_int32
d2137 1
a2137 1
   .output_type = nir_type_uint32,
d2142 1
a2142 1
      nir_type_uint32, nir_type_uint32
d2151 1
a2151 1
   .output_type = nir_type_int32,
d2156 1
a2156 1
      nir_type_int32, nir_type_int32
a2161 42
   .name = "unpack_double_2x32",
   .num_inputs = 1,
   .output_size = 2,
   .output_type = nir_type_uint32,
   .input_sizes = {
      1
   },
   .input_types = {
      nir_type_uint64
   },
   .algebraic_properties =
      0
},
{
   .name = "unpack_double_2x32_split_x",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint64
   },
   .algebraic_properties =
      0
},
{
   .name = "unpack_double_2x32_split_y",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint64
   },
   .algebraic_properties =
      0
},
{
d2165 1
a2165 1
   .output_type = nir_type_float32,
d2170 1
a2170 1
      nir_type_uint32
d2179 1
a2179 1
   .output_type = nir_type_float32,
d2184 1
a2184 1
      nir_type_uint32
d2193 1
a2193 1
   .output_type = nir_type_float32,
d2198 1
a2198 1
      nir_type_uint32
d2207 1
a2207 1
   .output_type = nir_type_float32,
d2212 1
a2212 1
      nir_type_uint32
d2221 1
a2221 1
   .output_type = nir_type_float32,
d2226 1
a2226 1
      nir_type_uint32
d2235 1
a2235 1
   .output_type = nir_type_float32,
d2240 1
a2240 1
      nir_type_uint32
d2249 1
a2249 1
   .output_type = nir_type_float32,
d2254 1
a2254 1
      nir_type_uint32
d2263 1
a2263 1
   .output_type = nir_type_int32,
d2268 1
a2268 1
      nir_type_int32, nir_type_int32
d2291 1
a2291 1
   .output_type = nir_type_int32,
d2296 1
a2296 1
      nir_type_int32, nir_type_int32
@


1.1.1.3
log
@Import Mesa 17.1.6
@
text
@a3 123
nir_op
nir_type_conversion_op(nir_alu_type src, nir_alu_type dst)
{
   nir_alu_type src_base = (nir_alu_type) nir_alu_type_get_base_type(src);
   nir_alu_type dst_base = (nir_alu_type) nir_alu_type_get_base_type(dst);
   unsigned src_bit_size = nir_alu_type_get_type_size(src);
   unsigned dst_bit_size = nir_alu_type_get_type_size(dst);

   if (src == dst && src_base == nir_type_float) {
      return nir_op_fmov;
   } else if ((src_base == nir_type_int || src_base == nir_type_uint) &&
              (dst_base == nir_type_int || dst_base == nir_type_uint) &&
              src_bit_size == dst_bit_size) {
      /* Integer <-> integer conversions with the same bit-size on both
       * ends are just no-op moves.
       */
      return nir_op_imov;
   }

   switch (src_base) {
      case nir_type_int:
         switch (dst_base) {
            case nir_type_int:
            case nir_type_uint:

               switch (dst_bit_size) {
                  case 32:
                     return nir_op_i2i32;
                  case 64:
                     return nir_op_i2i64;
                  default:
                     unreachable("Invalid nir alu bit size");
               }
            case nir_type_float:
               switch (dst_bit_size) {
                  case 32:
                     return nir_op_i2f32;
                  case 64:
                     return nir_op_i2f64;
                  default:
                     unreachable("Invalid nir alu bit size");
               }
            case nir_type_bool:
                  return nir_op_i2b;
            default:
               unreachable("Invalid nir alu base type");
         }
      case nir_type_uint:
         switch (dst_base) {
            case nir_type_int:
            case nir_type_uint:

               switch (dst_bit_size) {
                  case 32:
                     return nir_op_u2u32;
                  case 64:
                     return nir_op_u2u64;
                  default:
                     unreachable("Invalid nir alu bit size");
               }
            case nir_type_float:
               switch (dst_bit_size) {
                  case 32:
                     return nir_op_u2f32;
                  case 64:
                     return nir_op_u2f64;
                  default:
                     unreachable("Invalid nir alu bit size");
               }
            case nir_type_bool:
                  return nir_op_i2b;
            default:
               unreachable("Invalid nir alu base type");
         }
      case nir_type_float:
         switch (dst_base) {
            case nir_type_int:
               switch (dst_bit_size) {
                  case 32:
                     return nir_op_f2i32;
                  case 64:
                     return nir_op_f2i64;
                  default:
                     unreachable("Invalid nir alu bit size");
               }
            case nir_type_uint:
               switch (dst_bit_size) {
                  case 32:
                     return nir_op_f2u32;
                  case 64:
                     return nir_op_f2u64;
                  default:
                     unreachable("Invalid nir alu bit size");
               }
            case nir_type_float:
               switch (dst_bit_size) {
                  case 32:
                     return nir_op_f2f32;
                  case 64:
                     return nir_op_f2f64;
                  default:
                     unreachable("Invalid nir alu bit size");
               }
            case nir_type_bool:
                  return nir_op_f2b;
            default:
               unreachable("Invalid nir alu base type");
         }
      case nir_type_bool:
         switch (dst_base) {
            case nir_type_int:
            case nir_type_uint:
               return nir_op_b2i;
            case nir_type_float:
               return nir_op_b2f;
            default:
               unreachable("Invalid nir alu base type");
         }
      default:
         unreachable("Invalid nir alu base type");
   }
}

d9 1
a9 1
   .output_type = nir_type_float,
d23 1
a23 1
   .output_type = nir_type_int,
d286 1
a286 57
   .name = "extract_i16",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "extract_i8",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_int,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_int, nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "extract_u16",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "extract_u8",
   .num_inputs = 2,
   .output_size = 0,
   .output_type = nir_type_uint,
   .input_sizes = {
      0, 0
   },
   .input_types = {
      nir_type_uint, nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "f2b",
d294 1
a294 1
      nir_type_float
d300 1
a300 1
   .name = "f2f16",
d303 1
a303 1
   .output_type = nir_type_float16,
d308 1
a308 1
      nir_type_float
d314 1
a314 1
   .name = "f2f32",
d317 1
a317 1
   .output_type = nir_type_float32,
d322 1
a322 1
      nir_type_float
d328 1
a328 1
   .name = "f2f64",
d331 1
a331 1
   .output_type = nir_type_float64,
d336 1
a336 1
      nir_type_float
d342 2
a343 2
   .name = "f2i16",
   .num_inputs = 1,
d345 1
a345 1
   .output_type = nir_type_int16,
d347 1
a347 1
      0
d350 1
a350 1
      nir_type_float
d356 2
a357 2
   .name = "f2i32",
   .num_inputs = 1,
d359 1
a359 1
   .output_type = nir_type_int32,
d361 1
a361 1
      0
d364 1
a364 1
      nir_type_float
d370 2
a371 2
   .name = "f2i64",
   .num_inputs = 1,
d373 1
a373 1
   .output_type = nir_type_int64,
d375 1
a375 1
      0
d378 1
a378 1
      nir_type_float
d384 2
a385 2
   .name = "f2i8",
   .num_inputs = 1,
d387 1
a387 1
   .output_type = nir_type_int8,
d389 1
a389 1
      0
d392 1
a392 1
      nir_type_float
d398 1
a398 1
   .name = "f2u16",
d401 1
a401 1
   .output_type = nir_type_uint16,
d406 1
a406 1
      nir_type_float
d412 1
a412 1
   .name = "f2u32",
d415 1
a415 1
   .output_type = nir_type_uint32,
d420 1
a420 1
      nir_type_float
d426 1
a426 1
   .name = "f2u64",
d429 1
a429 1
   .output_type = nir_type_uint64,
d434 1
a434 1
      nir_type_float
d440 1
a440 1
   .name = "f2u8",
d443 1
a443 1
   .output_type = nir_type_uint8,
d448 1
a448 1
      nir_type_float
d1512 1
a1512 1
      nir_type_int
d1518 1
a1518 1
   .name = "i2f16",
d1521 1
a1521 1
   .output_type = nir_type_float16,
d1526 1
a1526 1
      nir_type_int
d1532 1
a1532 1
   .name = "i2f32",
d1540 1
a1540 71
      nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "i2f64",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float64,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "i2i16",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int16,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "i2i32",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "i2i64",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int64,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int
   },
   .algebraic_properties =
      0
},
{
   .name = "i2i8",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_int8,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_int
d1848 1
a1848 1
      nir_type_int, nir_type_uint32
d1862 1
a1862 1
      nir_type_int, nir_type_uint32
d1924 1
a1924 1
   .name = "pack_64_2x32",
d1938 1
a1938 1
   .name = "pack_64_2x32_split",
d2120 1
a2120 1
   .name = "u2f16",
d2123 1
a2123 1
   .output_type = nir_type_float16,
d2128 1
a2128 1
      nir_type_uint
d2134 1
a2134 1
   .name = "u2f32",
d2142 1
a2142 71
      nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "u2f64",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_float64,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "u2u16",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_uint16,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "u2u32",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_uint32,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "u2u64",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_uint64,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint
   },
   .algebraic_properties =
      0
},
{
   .name = "u2u8",
   .num_inputs = 1,
   .output_size = 0,
   .output_type = nir_type_uint8,
   .input_sizes = {
      0
   },
   .input_types = {
      nir_type_uint
d2344 1
a2344 1
   .name = "unpack_64_2x32",
d2358 1
a2358 1
   .name = "unpack_64_2x32_split_x",
d2372 1
a2372 1
   .name = "unpack_64_2x32_split_y",
d2506 1
a2506 1
      nir_type_uint, nir_type_uint32
@


