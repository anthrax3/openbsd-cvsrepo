head	1.1;
branch	1.1.1;
access;
symbols
	mesa-17_1_6:1.1.1.4
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.11.22.02.38.18;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.38.18;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.13.28;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.38.01;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.08.14.09.43.27;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.1
log
@Initial revision
@
text
@/**************************************************************************
 *
 * Copyright 2011 Marek Ol코치k <maraeo@@gmail.com>
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/


/**
 * glTextureBarrierNV function
 *
 * \author Marek Ol코치k
 */


#include "main/imports.h"
#include "main/context.h"

#include "pipe/p_context.h"
#include "pipe/p_defines.h"
#include "st_context.h"
#include "st_cb_texturebarrier.h"


/**
 * Called via ctx->Driver.TextureBarrier()
 */
static void
st_TextureBarrier(struct gl_context *ctx)
{
   struct pipe_context *pipe = st_context(ctx)->pipe;

   pipe->texture_barrier(pipe);
}


/**
 * Called via ctx->Driver.MemoryBarrier()
 */
static void
st_MemoryBarrier(struct gl_context *ctx, GLbitfield barriers)
{
   struct pipe_context *pipe = st_context(ctx)->pipe;
   unsigned flags = 0;

   if (barriers & GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT)
      flags |= PIPE_BARRIER_MAPPED_BUFFER;

   if (flags && pipe->memory_barrier)
      pipe->memory_barrier(pipe, flags);
}

void st_init_texture_barrier_functions(struct dd_function_table *functions)
{
   functions->TextureBarrier = st_TextureBarrier;
   functions->MemoryBarrier = st_MemoryBarrier;
}
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@a67 7
   if (barriers & GL_ATOMIC_COUNTER_BARRIER_BIT)
      flags |= PIPE_BARRIER_SHADER_BUFFER;
   if (barriers & GL_SHADER_STORAGE_BARRIER_BIT)
      flags |= PIPE_BARRIER_SHADER_BUFFER;

   if (barriers & GL_QUERY_BUFFER_BARRIER_BIT)
      flags |= PIPE_BARRIER_QUERY_BUFFER;
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@a65 35
   if (barriers & GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT)
      flags |= PIPE_BARRIER_VERTEX_BUFFER;
   if (barriers & GL_ELEMENT_ARRAY_BARRIER_BIT)
      flags |= PIPE_BARRIER_INDEX_BUFFER;
   if (barriers & GL_UNIFORM_BARRIER_BIT)
      flags |= PIPE_BARRIER_CONSTANT_BUFFER;
   if (barriers & GL_TEXTURE_FETCH_BARRIER_BIT)
      flags |= PIPE_BARRIER_TEXTURE;
   if (barriers & GL_SHADER_IMAGE_ACCESS_BARRIER_BIT)
      flags |= PIPE_BARRIER_IMAGE;
   if (barriers & GL_COMMAND_BARRIER_BIT)
      flags |= PIPE_BARRIER_INDIRECT_BUFFER;
   if (barriers & GL_PIXEL_BUFFER_BARRIER_BIT) {
      /* The PBO may be
       *  (1) bound as a texture for PBO uploads, or
       *  (2) accessed by the CPU via transfer ops.
       * For case (2), we assume automatic flushing by the driver.
       */
      flags |= PIPE_BARRIER_TEXTURE;
   }
   /* GL_TEXTURE_UPDATE_BARRIER_BIT:
    * Texture updates translate to:
    *  (1) texture transfers to/from the CPU,
    *  (2) texture as blit destination, or
    *  (3) texture as framebuffer.
    * In all cases, we assume the driver does the required flushing
    * automatically.
    */
   /* GL_BUFFER_UPDATE_BARRIER_BIT:
    * Buffer updates translate to
    *  (1) buffer transfers to/from the CPU,
    *  (2) resource copies and clears.
    * In all cases, we assume the driver does the required flushing
    * automatically.
    */
a67 6
   if (barriers & GL_QUERY_BUFFER_BARRIER_BIT)
      flags |= PIPE_BARRIER_QUERY_BUFFER;
   if (barriers & GL_FRAMEBUFFER_BARRIER_BIT)
      flags |= PIPE_BARRIER_FRAMEBUFFER;
   if (barriers & GL_TRANSFORM_FEEDBACK_BARRIER_BIT)
      flags |= PIPE_BARRIER_STREAMOUT_BUFFER;
d72 3
@


1.1.1.4
log
@Import Mesa 17.1.6
@
text
@d53 1
a53 13
   pipe->texture_barrier(pipe, PIPE_TEXTURE_BARRIER_SAMPLER);
}


/**
 * Called via ctx->Driver.BlendBarrier()
 */
static void
st_BlendBarrier(struct gl_context *ctx)
{
   struct pipe_context *pipe = st_context(ctx)->pipe;

   pipe->texture_barrier(pipe, PIPE_TEXTURE_BARRIER_FRAMEBUFFER);
a120 1
   functions->BlendBarrier = st_BlendBarrier;
@


