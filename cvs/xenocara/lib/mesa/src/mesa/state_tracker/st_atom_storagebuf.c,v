head	1.2;
access;
symbols
	mesa-17_1_6:1.1.1.3
	OPENBSD_6_1:1.1.1.2.0.2
	OPENBSD_6_1_BASE:1.1.1.2
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.1.1.1.0.4
	OPENBSD_6_0_BASE:1.1.1.1
	mesa-11_2_2:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2017.08.26.16.59.40;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2016.05.29.10.13.31;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.1
date	2016.05.29.10.13.31;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.2
date	2016.12.11.08.38.07;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	uuv5VTS15jglEDZU;

1.1.1.3
date	2017.08.14.09.43.32;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/**************************************************************************
 *
 * Copyright 2014 Ilia Mirkin. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
 * IN NO EVENT SHALL VMWARE AND/OR ITS SUPPLIERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **************************************************************************/

#include "main/imports.h"
#include "program/prog_parameter.h"
#include "program/prog_print.h"
#include "compiler/glsl/ir_uniform.h"

#include "pipe/p_context.h"
#include "pipe/p_defines.h"
#include "util/u_inlines.h"
#include "util/u_surface.h"

#include "st_debug.h"
#include "st_cb_bufferobjects.h"
#include "st_context.h"
#include "st_atom.h"
#include "st_program.h"

static void
st_bind_ssbos(struct st_context *st, struct gl_linked_shader *shader,
              enum pipe_shader_type shader_type)
{
   unsigned i;
   struct pipe_shader_buffer buffers[MAX_SHADER_STORAGE_BUFFERS];
   struct gl_program_constants *c;

   if (!shader || !st->pipe->set_shader_buffers)
      return;

   c = &st->ctx->Const.Program[shader->Stage];

   for (i = 0; i < shader->NumShaderStorageBlocks; i++) {
      struct gl_shader_storage_buffer_binding *binding;
      struct st_buffer_object *st_obj;
      struct pipe_shader_buffer *sb = &buffers[i];

      binding = &st->ctx->ShaderStorageBufferBindings[
            shader->ShaderStorageBlocks[i]->Binding];
      st_obj = st_buffer_object(binding->BufferObject);

      sb->buffer = st_obj->buffer;

      if (sb->buffer) {
         sb->buffer_offset = binding->Offset;
         sb->buffer_size = sb->buffer->width0 - binding->Offset;

         /* AutomaticSize is FALSE if the buffer was set with BindBufferRange.
          * Take the minimum just to be sure.
          */
         if (!binding->AutomaticSize)
            sb->buffer_size = MIN2(sb->buffer_size, (unsigned) binding->Size);
      }
      else {
         sb->buffer_offset = 0;
         sb->buffer_size = 0;
      }
   }
   st->pipe->set_shader_buffers(st->pipe, shader_type, c->MaxAtomicBuffers,
                                shader->NumShaderStorageBlocks, buffers);
   /* clear out any stale shader buffers */
   if (shader->NumShaderStorageBlocks < c->MaxShaderStorageBlocks)
      st->pipe->set_shader_buffers(
            st->pipe, shader_type,
            c->MaxAtomicBuffers + shader->NumShaderStorageBlocks,
            c->MaxShaderStorageBlocks - shader->NumShaderStorageBlocks,
            NULL);
}

static void bind_vs_ssbos(struct st_context *st)
{
   struct gl_shader_program *prog =
      st->ctx->_Shader->CurrentProgram[MESA_SHADER_VERTEX];

   if (!prog)
      return;

   st_bind_ssbos(st, prog->_LinkedShaders[MESA_SHADER_VERTEX],
                 PIPE_SHADER_VERTEX);
}

const struct st_tracked_state st_bind_vs_ssbos = {
   bind_vs_ssbos
};

static void bind_fs_ssbos(struct st_context *st)
{
   struct gl_shader_program *prog =
      st->ctx->_Shader->CurrentProgram[MESA_SHADER_FRAGMENT];

   if (!prog)
      return;

   st_bind_ssbos(st, prog->_LinkedShaders[MESA_SHADER_FRAGMENT],
                 PIPE_SHADER_FRAGMENT);
}

const struct st_tracked_state st_bind_fs_ssbos = {
   bind_fs_ssbos
};

static void bind_gs_ssbos(struct st_context *st)
{
   struct gl_shader_program *prog =
      st->ctx->_Shader->CurrentProgram[MESA_SHADER_GEOMETRY];

   if (!prog)
      return;

   st_bind_ssbos(st, prog->_LinkedShaders[MESA_SHADER_GEOMETRY],
                 PIPE_SHADER_GEOMETRY);
}

const struct st_tracked_state st_bind_gs_ssbos = {
   bind_gs_ssbos
};

static void bind_tcs_ssbos(struct st_context *st)
{
   struct gl_shader_program *prog =
      st->ctx->_Shader->CurrentProgram[MESA_SHADER_TESS_CTRL];

   if (!prog)
      return;

   st_bind_ssbos(st, prog->_LinkedShaders[MESA_SHADER_TESS_CTRL],
                 PIPE_SHADER_TESS_CTRL);
}

const struct st_tracked_state st_bind_tcs_ssbos = {
   bind_tcs_ssbos
};

static void bind_tes_ssbos(struct st_context *st)
{
   struct gl_shader_program *prog =
      st->ctx->_Shader->CurrentProgram[MESA_SHADER_TESS_EVAL];

   if (!prog)
      return;

   st_bind_ssbos(st, prog->_LinkedShaders[MESA_SHADER_TESS_EVAL],
                 PIPE_SHADER_TESS_EVAL);
}

const struct st_tracked_state st_bind_tes_ssbos = {
   bind_tes_ssbos
};

static void bind_cs_ssbos(struct st_context *st)
{
   struct gl_shader_program *prog =
      st->ctx->_Shader->CurrentProgram[MESA_SHADER_COMPUTE];

   if (!prog)
      return;

   st_bind_ssbos(st, prog->_LinkedShaders[MESA_SHADER_COMPUTE],
                 PIPE_SHADER_COMPUTE);
}

const struct st_tracked_state st_bind_cs_ssbos = {
   bind_cs_ssbos
};
@


1.1
log
@Initial revision
@
text
@d44 2
a45 2
st_bind_ssbos(struct st_context *st, struct gl_shader *shader,
              unsigned shader_type)
a105 5
   "st_bind_vs_ssbos",
   {
      0,
      ST_NEW_VERTEX_PROGRAM | ST_NEW_STORAGE_BUFFER,
   },
a121 5
   "st_bind_fs_ssbos",
   {
      0,
      ST_NEW_FRAGMENT_PROGRAM | ST_NEW_STORAGE_BUFFER,
   },
a137 5
   "st_bind_gs_ssbos",
   {
      0,
      ST_NEW_GEOMETRY_PROGRAM | ST_NEW_STORAGE_BUFFER,
   },
a153 5
   "st_bind_tcs_ssbos",
   {
      0,
      ST_NEW_TESSCTRL_PROGRAM | ST_NEW_STORAGE_BUFFER,
   },
a169 5
   "st_bind_tes_ssbos",
   {
      0,
      ST_NEW_TESSEVAL_PROGRAM | ST_NEW_STORAGE_BUFFER,
   },
a185 5
   "st_bind_cs_ssbos",
   {
      0,
      ST_NEW_COMPUTE_PROGRAM | ST_NEW_STORAGE_BUFFER,
   },
@


1.1.1.1
log
@Import Mesa 11.2.2
@
text
@@


1.1.1.2
log
@Import Mesa 13.0.2
@
text
@d44 2
a45 2
st_bind_ssbos(struct st_context *st, struct gl_linked_shader *shader,
              enum pipe_shader_type shader_type)
d106 5
d127 5
d148 5
d169 5
d190 5
d211 5
@


1.1.1.3
log
@Import Mesa 17.1.6
@
text
@d44 1
a44 1
st_bind_ssbos(struct st_context *st, struct gl_program *prog,
d51 1
a51 1
   if (!prog || !st->pipe->set_shader_buffers)
d54 1
a54 1
   c = &st->ctx->Const.Program[prog->info.stage];
d56 1
a56 1
   for (i = 0; i < prog->info.num_ssbos; i++) {
d62 1
a62 1
            prog->sh.ShaderStorageBlocks[i]->Binding];
d83 1
a83 1
                                prog->info.num_ssbos, buffers);
d85 1
a85 1
   if (prog->info.num_ssbos < c->MaxShaderStorageBlocks)
d88 2
a89 2
            c->MaxAtomicBuffers + prog->info.num_ssbos,
            c->MaxShaderStorageBlocks - prog->info.num_ssbos,
d95 1
a95 1
   struct gl_program *prog =
d98 5
a102 1
   st_bind_ssbos(st, prog, PIPE_SHADER_VERTEX);
d111 1
a111 1
   struct gl_program *prog =
d114 5
a118 1
   st_bind_ssbos(st, prog, PIPE_SHADER_FRAGMENT);
d127 1
a127 1
   struct gl_program *prog =
d130 5
a134 1
   st_bind_ssbos(st, prog, PIPE_SHADER_GEOMETRY);
d143 1
a143 1
   struct gl_program *prog =
d146 5
a150 1
   st_bind_ssbos(st, prog, PIPE_SHADER_TESS_CTRL);
d159 1
a159 1
   struct gl_program *prog =
d162 5
a166 1
   st_bind_ssbos(st, prog, PIPE_SHADER_TESS_EVAL);
d175 1
a175 1
   struct gl_program *prog =
d178 5
a182 1
   st_bind_ssbos(st, prog, PIPE_SHADER_COMPUTE);
@


