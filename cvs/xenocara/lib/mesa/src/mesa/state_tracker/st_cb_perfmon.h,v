head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.2
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.11.22.02.38.16;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.38.16;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.13.25;	author jsg;	state Exp;
branches;
next	;
commitid	OwGfrJACrYJkCVJ4;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright (C) 2013 Christoph Bumiller
 * Copyright (C) 2015 Samuel Pitoiset
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef ST_CB_PERFMON_H
#define ST_CB_PERFMON_H

#include "util/list.h"

/**
 * Subclass of gl_perf_monitor_object
 */
struct st_perf_monitor_object
{
   struct gl_perf_monitor_object base;
   struct list_head active_counters;
};

struct st_perf_counter_object
{
   struct list_head list;
   struct pipe_query *query;
   int id;
   int group_id;
};

/**
 * Cast wrapper
 */
static inline struct st_perf_monitor_object *
st_perf_monitor_object(struct gl_perf_monitor_object *q)
{
   return (struct st_perf_monitor_object *)q;
}

bool
st_init_perfmon(struct st_context *st);

void
st_destroy_perfmon(struct st_context *st);

extern void
st_init_perfmon_functions(struct dd_function_table *functions);

#endif
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@a28 8
struct st_perf_counter_object
{
   struct pipe_query *query;
   int id;
   int group_id;
   unsigned batch_index;
};

d35 1
a35 5
   unsigned num_active_counters;
   struct st_perf_counter_object *active_counters;

   struct pipe_query *batch_query;
   union pipe_query_result *batch_result;
d38 1
a38 5
/**
 * Extra data per counter, supplementing gl_perf_monitor_counter with
 * driver-specific information.
 */
struct st_perf_monitor_counter
d40 4
a43 8
   unsigned query_type;
   unsigned flags;
};

struct st_perf_monitor_group
{
   struct st_perf_monitor_counter *counters;
   bool has_batch;
d56 1
a56 1
st_have_perfmon(struct st_context *st);
@

