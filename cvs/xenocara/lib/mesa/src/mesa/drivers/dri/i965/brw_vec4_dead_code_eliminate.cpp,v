head	1.3;
access;
symbols
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.3
date	2017.08.26.16.59.37;	author jsg;	state Exp;
branches;
next	1.2;
commitid	D0k2io1oY8gcsQ2S;

1.2
date	2017.08.14.09.58.01;	author jsg;	state dead;
branches;
next	1.1;
commitid	bC4bLqwWTo4kLw82;

1.1
date	2015.11.22.02.40.15;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.40.15;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.15.34;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.36.29;	author jsg;	state Exp;
branches;
next	;
commitid	uuv5VTS15jglEDZU;


desc
@@


1.3
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/*
 * Copyright Â© 2014 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#include "brw_vec4.h"
#include "brw_vec4_live_variables.h"
#include "brw_cfg.h"

/** @@file brw_vec4_dead_code_eliminate.cpp
 *
 * Dataflow-aware dead code elimination.
 *
 * Walks the instruction list from the bottom, removing instructions that
 * have results that both aren't used in later blocks and haven't been read
 * yet in the tail end of this block.
 */

using namespace brw;

bool
vec4_visitor::dead_code_eliminate()
{
   bool progress = false;

   calculate_live_intervals();

   int num_vars = live_intervals->num_vars;
   BITSET_WORD *live = ralloc_array(NULL, BITSET_WORD, BITSET_WORDS(num_vars));
   BITSET_WORD *flag_live = ralloc_array(NULL, BITSET_WORD, 1);

   foreach_block_reverse_safe(block, cfg) {
      memcpy(live, live_intervals->block_data[block->num].liveout,
             sizeof(BITSET_WORD) * BITSET_WORDS(num_vars));
      memcpy(flag_live, live_intervals->block_data[block->num].flag_liveout,
             sizeof(BITSET_WORD));

      foreach_inst_in_block_reverse_safe(vec4_instruction, inst, block) {
         if ((inst->dst.file == VGRF && !inst->has_side_effects()) ||
             (inst->dst.is_null() && inst->writes_flag())){
            bool result_live[4] = { false };

            if (inst->dst.file == VGRF) {
               for (unsigned i = 0; i < regs_written(inst); i++) {
                  for (int c = 0; c < 4; c++)
                     result_live[c] |= BITSET_TEST(
                        live, var_from_reg(alloc, offset(inst->dst, i), c));
               }
            } else {
               for (unsigned c = 0; c < 4; c++)
                  result_live[c] = BITSET_TEST(flag_live, c);
            }

            /* If the instruction can't do writemasking, then it's all or
             * nothing.
             */
            if (!inst->can_do_writemask(devinfo)) {
               bool result = result_live[0] | result_live[1] |
                             result_live[2] | result_live[3];
               result_live[0] = result;
               result_live[1] = result;
               result_live[2] = result;
               result_live[3] = result;
            }

            for (int c = 0; c < 4; c++) {
               if (!result_live[c] && inst->dst.writemask & (1 << c)) {
                  inst->dst.writemask &= ~(1 << c);
                  progress = true;

                  if (inst->dst.writemask == 0) {
                     if (inst->writes_accumulator || inst->writes_flag()) {
                        inst->dst = dst_reg(retype(brw_null_reg(), inst->dst.type));
                     } else {
                        inst->opcode = BRW_OPCODE_NOP;
                        break;
                     }
                  }
               }
            }
         }

         if (inst->dst.is_null() && inst->writes_flag()) {
            bool combined_live = false;
            for (unsigned c = 0; c < 4; c++)
               combined_live |= BITSET_TEST(flag_live, c);

            if (!combined_live) {
               inst->opcode = BRW_OPCODE_NOP;
               progress = true;
            }
         }

         if (inst->dst.file == VGRF && !inst->predicate) {
            for (unsigned i = 0; i < regs_written(inst); i++) {
               for (int c = 0; c < 4; c++) {
                  if (inst->dst.writemask & (1 << c)) {
                     BITSET_CLEAR(live, var_from_reg(alloc,
                                                     offset(inst->dst, i), c));
                  }
               }
            }
         }

         if (inst->writes_flag() && !inst->predicate) {
            for (unsigned c = 0; c < 4; c++)
               BITSET_CLEAR(flag_live, c);
         }

         if (inst->opcode == BRW_OPCODE_NOP) {
            inst->remove(block);
            continue;
         }

         for (int i = 0; i < 3; i++) {
            if (inst->src[i].file == VGRF) {
               for (unsigned j = 0; j < regs_read(inst, i); j++) {
                  for (int c = 0; c < 4; c++) {
                     BITSET_SET(live, var_from_reg(alloc,
                                                   offset(inst->src[i], j), c));
                  }
               }
            }
         }

         for (unsigned c = 0; c < 4; c++) {
            if (inst->reads_flag(c)) {
               BITSET_SET(flag_live, c);
            }
         }
      }
   }

   ralloc_free(live);
   ralloc_free(flag_live);

   if (progress)
      invalidate_live_intervals();

   return progress;
}
@


1.2
log
@Merge Mesa 17.1.6
@
text
@a38 24
static bool
can_do_writemask(const struct brw_device_info *devinfo,
                 const vec4_instruction *inst)
{
   switch (inst->opcode) {
   case SHADER_OPCODE_GEN4_SCRATCH_READ:
   case VS_OPCODE_PULL_CONSTANT_LOAD:
   case VS_OPCODE_PULL_CONSTANT_LOAD_GEN7:
   case VS_OPCODE_SET_SIMD4X2_HEADER_GEN9:
      return false;
   default:
      /* The MATH instruction on Gen6 only executes in align1 mode, which does
       * not support writemasking.
       */
      if (devinfo->gen == 6 && inst->is_math())
         return false;

      if (inst->is_tex())
         return false;

      return true;
   }
}

d50 1
a50 1
   foreach_block(block, cfg) {
d56 3
a58 2
      foreach_inst_in_block_reverse(vec4_instruction, inst, block) {
         if (inst->dst.file == GRF && !inst->has_side_effects()) {
d61 9
a69 4
            for (unsigned i = 0; i < inst->regs_written; i++) {
               for (int c = 0; c < 4; c++)
                  result_live[c] |= BITSET_TEST(
                     live, var_from_reg(alloc, offset(inst->dst, i), c));
d75 1
a75 1
            if (!can_do_writemask(devinfo, inst)) {
d94 1
a94 1
                        continue;
d102 5
a106 1
            if (!BITSET_TEST(flag_live, 0)) {
a108 1
               continue;
d112 2
a113 2
         if (inst->dst.file == GRF && !inst->predicate) {
            for (unsigned i = 0; i < inst->regs_written; i++) {
d123 8
a130 2
         if (inst->writes_flag()) {
            BITSET_CLEAR(flag_live, 0);
d134 2
a135 2
            if (inst->src[i].file == GRF) {
               for (unsigned j = 0; j < inst->regs_read(i); j++) {
d144 4
a147 2
         if (inst->reads_flag()) {
            BITSET_SET(flag_live, 0);
d155 1
a155 7
   if (progress) {
      foreach_block_and_inst_safe(block, backend_instruction, inst, cfg) {
         if (inst->opcode == BRW_OPCODE_NOP) {
            inst->remove(block);
         }
      }

a156 1
   }
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@a47 5
   case TCS_OPCODE_SET_INPUT_URB_OFFSETS:
   case TCS_OPCODE_SET_OUTPUT_URB_OFFSETS:
   case TES_OPCODE_CREATE_INPUT_READ_HEADER:
   case TES_OPCODE_ADD_INDIRECT_URB_OFFSET:
   case VEC4_OPCODE_URB_READ:
d74 1
a74 1
   foreach_block_reverse_safe(block, cfg) {
d80 2
a81 3
      foreach_inst_in_block_reverse_safe(vec4_instruction, inst, block) {
         if ((inst->dst.file == VGRF && !inst->has_side_effects()) ||
             (inst->dst.is_null() && inst->writes_flag())){
d84 4
a87 9
            if (inst->dst.file == VGRF) {
               for (unsigned i = 0; i < inst->regs_written; i++) {
                  for (int c = 0; c < 4; c++)
                     result_live[c] |= BITSET_TEST(
                        live, var_from_reg(alloc, offset(inst->dst, i), c));
               }
            } else {
               for (unsigned c = 0; c < 4; c++)
                  result_live[c] = BITSET_TEST(flag_live, c);
d112 1
a112 1
                        break;
d120 1
a120 5
            bool combined_live = false;
            for (unsigned c = 0; c < 4; c++)
               combined_live |= BITSET_TEST(flag_live, c);

            if (!combined_live) {
d123 1
d127 1
a127 1
         if (inst->dst.file == VGRF && !inst->predicate) {
d138 2
a139 8
         if (inst->writes_flag() && !inst->predicate) {
            for (unsigned c = 0; c < 4; c++)
               BITSET_CLEAR(flag_live, c);
         }

         if (inst->opcode == BRW_OPCODE_NOP) {
            inst->remove(block);
            continue;
d143 1
a143 1
            if (inst->src[i].file == VGRF) {
d153 2
a154 4
         for (unsigned c = 0; c < 4; c++) {
            if (inst->reads_flag(c)) {
               BITSET_SET(flag_live, c);
            }
d162 7
a168 1
   if (progress)
d170 1
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@d39 29
d91 1
a91 1
               for (unsigned i = 0; i < regs_written(inst); i++) {
d104 1
a104 1
            if (!inst->can_do_writemask(devinfo)) {
d142 1
a142 1
            for (unsigned i = 0; i < regs_written(inst); i++) {
d164 1
a164 1
               for (unsigned j = 0; j < regs_read(inst, i); j++) {
@


