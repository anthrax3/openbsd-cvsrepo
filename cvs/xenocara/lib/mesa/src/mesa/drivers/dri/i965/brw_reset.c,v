head	1.2;
access;
symbols
	mesa-17_1_6:1.1.1.3
	OPENBSD_6_1:1.1.1.2.0.2
	OPENBSD_6_1_BASE:1.1.1.2
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.1.1.1.0.6
	OPENBSD_6_0_BASE:1.1.1.1
	mesa-11_2_2:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.08.26.16.59.37;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2015.11.22.02.40.09;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.40.09;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.12.11.08.36.43;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	uuv5VTS15jglEDZU;

1.1.1.3
date	2017.08.14.09.42.16;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/*
 * Copyright Â© 2012 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include "main/context.h"

#include "brw_context.h"

/**
 * Query information about GPU resets observed by this context
 *
 * Called via \c dd_function_table::GetGraphicsResetStatus.
 */
GLenum
brw_get_graphics_reset_status(struct gl_context *ctx)
{
   struct brw_context *brw = brw_context(ctx);
   int err;
   uint32_t reset_count;
   uint32_t active;
   uint32_t pending;

   /* If hardware contexts are not being used (or
    * DRM_IOCTL_I915_GET_RESET_STATS is not supported), this function should
    * not be accessible.
    */
   assert(brw->hw_ctx != NULL);

   /* A reset status other than NO_ERROR was returned last time. I915 returns
    * nonzero active/pending only if reset has been encountered and completed.
    * Return NO_ERROR from now on.
    */
   if (brw->reset_count != 0)
      return GL_NO_ERROR;

   err = drm_intel_get_reset_stats(brw->hw_ctx, &reset_count, &active,
                                   &pending);
   if (err)
      return GL_NO_ERROR;

   /* A reset was observed while a batch from this context was executing.
    * Assume that this context was at fault.
    */
   if (active != 0) {
      brw->reset_count = reset_count;
      return GL_GUILTY_CONTEXT_RESET_ARB;
   }

   /* A reset was observed while a batch from this context was in progress,
    * but the batch was not executing.  In this case, assume that the context
    * was not at fault.
    */
   if (pending != 0) {
      brw->reset_count = reset_count;
      return GL_INNOCENT_CONTEXT_RESET_ARB;
   }

   return GL_NO_ERROR;
}

void
brw_check_for_reset(struct brw_context *brw)
{
   uint32_t reset_count;
   uint32_t active;
   uint32_t pending;
   int err;

   err = drm_intel_get_reset_stats(brw->hw_ctx, &reset_count, &active,
                                   &pending);
   if (err)
      return;

   if (active > 0 || pending > 0)
      _mesa_set_context_lost_dispatch(&brw->ctx);
}
@


1.1
log
@Initial revision
@
text
@d23 3
d78 17
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 13.0.2
@
text
@a22 3

#include "main/context.h"

a74 17
}

void
brw_check_for_reset(struct brw_context *brw)
{
   uint32_t reset_count;
   uint32_t active;
   uint32_t pending;
   int err;

   err = drm_intel_get_reset_stats(brw->hw_ctx, &reset_count, &active,
                                   &pending);
   if (err)
      return;

   if (active > 0 || pending > 0)
      _mesa_set_context_lost_dispatch(&brw->ctx);
@


1.1.1.3
log
@Import Mesa 17.1.6
@
text
@a25 1
#include <xf86drm.h>
d37 4
a40 2
   __DRIscreen *dri_screen = brw->screen->driScrnPriv;
   struct drm_i915_reset_stats stats = { .ctx_id = brw->hw_ctx };
d46 1
a46 1
   assert(brw->hw_ctx != 0);
d55 3
a57 1
   if (drmIoctl(dri_screen->fd, DRM_IOCTL_I915_GET_RESET_STATS, &stats) != 0)
d63 2
a64 2
   if (stats.batch_active != 0) {
      brw->reset_count = stats.reset_count;
d72 2
a73 2
   if (stats.batch_pending != 0) {
      brw->reset_count = stats.reset_count;
d83 8
a90 4
   __DRIscreen *dri_screen = brw->screen->driScrnPriv;
   struct drm_i915_reset_stats stats = { .ctx_id = brw->hw_ctx };

   if (drmIoctl(dri_screen->fd, DRM_IOCTL_I915_GET_RESET_STATS, &stats) != 0)
d93 1
a93 1
   if (stats.batch_active > 0 || stats.batch_pending > 0)
@


