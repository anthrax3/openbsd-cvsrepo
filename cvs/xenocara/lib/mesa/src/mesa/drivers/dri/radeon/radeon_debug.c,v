head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.6
	OPENBSD_6_2_BASE:1.1.1.2
	mesa-17_1_6:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.2
	OPENBSD_6_1_BASE:1.1.1.2
	mesa-13_0_6:1.1.1.2
	mesa-13_0_5:1.1.1.2
	mesa-13_0_3:1.1.1.2
	mesa-13_0_2:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.11.22.02.39.49;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.39.49;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.15.04;	author jsg;	state Exp;
branches;
next	;
commitid	OwGfrJACrYJkCVJ4;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright Â© 2009 Pauli Nieminen
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 */
/*
 * Authors:
 *      Pauli Nieminen <suokkos@@gmail.com>
 */

#include "utils.h"

#include "radeon_common_context.h"
#include "radeon_debug.h"

#include <stdarg.h>
#include <stdio.h>

static const struct dri_debug_control debug_control[] = {
	{"fall", RADEON_FALLBACKS},
	{"tex", RADEON_TEXTURE},
	{"ioctl", RADEON_IOCTL},
	{"verts", RADEON_VERTS},
	{"render", RADEON_RENDER},
	{"swrender", RADEON_SWRENDER},
	{"state", RADEON_STATE},
	{"shader", RADEON_SHADER},
	{"vfmt", RADEON_VFMT},
	{"vtxf", RADEON_VFMT},
	{"dri", RADEON_DRI},
	{"dma", RADEON_DMA},
	{"sanity", RADEON_SANITY},
	{"sync", RADEON_SYNC},
	{"pixel", RADEON_PIXEL},
	{"mem", RADEON_MEMORY},
	{"cs", RADEON_CS},
	{"allmsg", ~RADEON_SYNC}, /* avoid the term "sync" because the parser uses strstr */
	{NULL, 0}
};

radeon_debug_type_t radeon_enabled_debug_types;

void radeon_init_debug(void)
{
	radeon_enabled_debug_types = driParseDebugString(getenv("RADEON_DEBUG"), debug_control);

	radeon_enabled_debug_types |= RADEON_GENERAL;
}

void _radeon_debug_add_indent(void)
{
	GET_CURRENT_CONTEXT(ctx);
	radeonContextPtr radeon = RADEON_CONTEXT(ctx);
	const size_t length = sizeof(radeon->debug.indent)
		/ sizeof(radeon->debug.indent[0]);
	if (radeon->debug.indent_depth < length - 1) {
		radeon->debug.indent[radeon->debug.indent_depth] = '\t';
		++radeon->debug.indent_depth;
	};
}

void _radeon_debug_remove_indent(void)
{
	GET_CURRENT_CONTEXT(ctx);
	radeonContextPtr radeon = RADEON_CONTEXT(ctx);
	if (radeon->debug.indent_depth > 0) {
		radeon->debug.indent[radeon->debug.indent_depth] = '\0';
		--radeon->debug.indent_depth;
	}
}

void _radeon_print(const radeon_debug_type_t type,
	   const radeon_debug_level_t level,
	   const char* message,
	   ...)
{
	va_list values;

	GET_CURRENT_CONTEXT(ctx);
	if (ctx) {
		radeonContextPtr radeon = RADEON_CONTEXT(ctx);
		// FIXME: Make this multi thread safe
		if (radeon->debug.indent_depth)
			fprintf(stderr, "%s", radeon->debug.indent);
	}
	va_start( values, message );
	vfprintf(stderr, message, values);
	va_end( values );
}
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d30 1
a30 1
#include "util/debug.h"
d38 1
a38 1
static const struct debug_control debug_control[] = {
d64 1
a64 1
	radeon_enabled_debug_types = parse_debug_string(getenv("RADEON_DEBUG"), debug_control);
@

