head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2015.11.22.02.40.10;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.40.10;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.15.28;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.36.42;	author jsg;	state Exp;
branches;
next	;
commitid	uuv5VTS15jglEDZU;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright Â© 2014 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#include "brw_fs.h"
#include "brw_fs_live_variables.h"
#include "brw_cfg.h"

/** @@file brw_fs_dead_code_eliminate.cpp
 *
 * Dataflow-aware dead code elimination.
 *
 * Walks the instruction list from the bottom, removing instructions that
 * have results that both aren't used in later blocks and haven't been read
 * yet in the tail end of this block.
 */

bool
fs_visitor::dead_code_eliminate()
{
   bool progress = false;

   calculate_live_intervals();

   int num_vars = live_intervals->num_vars;
   BITSET_WORD *live = ralloc_array(NULL, BITSET_WORD, BITSET_WORDS(num_vars));
   BITSET_WORD *flag_live = ralloc_array(NULL, BITSET_WORD, 1);

   foreach_block (block, cfg) {
      memcpy(live, live_intervals->block_data[block->num].liveout,
             sizeof(BITSET_WORD) * BITSET_WORDS(num_vars));
      memcpy(flag_live, live_intervals->block_data[block->num].flag_liveout,
             sizeof(BITSET_WORD));

      foreach_inst_in_block_reverse(fs_inst, inst, block) {
         if (inst->dst.file == GRF && !inst->has_side_effects()) {
            bool result_live = false;

            if (inst->regs_written == 1) {
               int var = live_intervals->var_from_reg(inst->dst);
               result_live = BITSET_TEST(live, var);
            } else {
               int var = live_intervals->var_from_reg(inst->dst);
               for (int i = 0; i < inst->regs_written; i++) {
                  result_live = result_live || BITSET_TEST(live, var + i);
               }
            }

            if (!result_live) {
               progress = true;

               if (inst->writes_accumulator || inst->writes_flag()) {
                  inst->dst = fs_reg(retype(brw_null_reg(), inst->dst.type));
               } else {
                  inst->opcode = BRW_OPCODE_NOP;
                  continue;
               }
            }
         }

         if (inst->dst.is_null() && inst->writes_flag()) {
            if (!BITSET_TEST(flag_live, inst->flag_subreg)) {
               inst->opcode = BRW_OPCODE_NOP;
               progress = true;
               continue;
            }
         }

         if ((inst->opcode != BRW_OPCODE_IF &&
              inst->opcode != BRW_OPCODE_WHILE) &&
             inst->dst.is_null() &&
             !inst->has_side_effects() &&
             !inst->writes_flag() &&
             !inst->writes_accumulator) {
            inst->opcode = BRW_OPCODE_NOP;
            progress = true;
            continue;
         }

         if (inst->dst.file == GRF) {
            if (!inst->is_partial_write()) {
               int var = live_intervals->var_from_reg(inst->dst);
               for (int i = 0; i < inst->regs_written; i++) {
                  BITSET_CLEAR(live, var + i);
               }
            }
         }

         if (inst->writes_flag()) {
            BITSET_CLEAR(flag_live, inst->flag_subreg);
         }

         for (int i = 0; i < inst->sources; i++) {
            if (inst->src[i].file == GRF) {
               int var = live_intervals->var_from_reg(inst->src[i]);

               for (int j = 0; j < inst->regs_read(i); j++) {
                  BITSET_SET(live, var + j);
               }
            }
         }

         if (inst->reads_flag()) {
            BITSET_SET(flag_live, inst->flag_subreg);
         }
      }
   }

   ralloc_free(live);
   ralloc_free(flag_live);

   if (progress) {
      foreach_block_and_inst_safe (block, backend_instruction, inst, cfg) {
         if (inst->opcode == BRW_OPCODE_NOP) {
            inst->remove(block);
         }
      }

      invalidate_live_intervals();
   }

   return progress;
}
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d48 1
a48 1
   foreach_block_reverse_safe(block, cfg) {
d54 2
a55 2
      foreach_inst_in_block_reverse_safe(fs_inst, inst, block) {
         if (inst->dst.file == VGRF && !inst->has_side_effects()) {
d75 1
d84 1
d96 1
d99 1
a99 1
         if (inst->dst.file == VGRF) {
d108 1
a108 1
         if (inst->writes_flag() && !inst->predicate) {
a111 5
         if (inst->opcode == BRW_OPCODE_NOP) {
            inst->remove(block);
            continue;
         }

d113 1
a113 1
            if (inst->src[i].file == VGRF) {
d131 7
a137 1
   if (progress)
d139 1
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@a55 1
            const unsigned var = live_intervals->var_from_reg(inst->dst);
d58 9
a66 2
            for (unsigned i = 0; i < regs_written(inst); i++)
               result_live |= BITSET_TEST(live, var + i);
d71 1
a71 1
               if (inst->writes_accumulator || inst->flags_written()) {
d79 2
a80 2
         if (inst->dst.is_null() && inst->flags_written()) {
            if (!(flag_live[0] & inst->flags_written())) {
d90 1
a90 1
             !inst->flags_written() &&
d99 1
a99 1
               for (unsigned i = 0; i < regs_written(inst); i++) {
d105 3
a107 2
         if (!inst->predicate && inst->exec_size >= 8)
            flag_live[0] &= ~inst->flags_written();
d118 1
a118 1
               for (unsigned j = 0; j < regs_read(inst, i); j++) {
d124 3
a126 1
         flag_live[0] |= inst->flags_read(devinfo);
@


