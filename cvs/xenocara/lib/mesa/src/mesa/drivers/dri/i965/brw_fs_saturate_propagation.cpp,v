head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@// @;


1.1
date	2015.11.22.02.40.09;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.40.09;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.15.27;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.36.34;	author jsg;	state Exp;
branches;
next	;
commitid	uuv5VTS15jglEDZU;


desc
@@


1.1
log
@Initial revision
@
text
@/*
 * Copyright Â© 2013 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

#include "brw_fs.h"
#include "brw_fs_live_variables.h"
#include "brw_cfg.h"

/** @@file brw_fs_saturate_propagation.cpp
 *
 * Implements a pass that propagates the SAT modifier from a MOV.SAT into the
 * instruction that produced the source of the MOV.SAT, thereby allowing the
 * MOV's src and dst to be coalesced and the MOV removed.
 *
 * For instance,
 *
 *    ADD     tmp, src0, src1
 *    MOV.SAT dst, tmp
 *
 * would be transformed into
 *
 *    ADD.SAT tmp, src0, src1
 *    MOV     dst, tmp
 */

static bool
opt_saturate_propagation_local(fs_visitor *v, bblock_t *block)
{
   bool progress = false;
   int ip = block->end_ip + 1;

   foreach_inst_in_block_reverse(fs_inst, inst, block) {
      ip--;

      if (inst->opcode != BRW_OPCODE_MOV ||
          inst->dst.file != GRF ||
          inst->src[0].file != GRF ||
          inst->src[0].abs ||
          inst->src[0].negate ||
          !inst->saturate)
         continue;

      int src_var = v->live_intervals->var_from_reg(inst->src[0]);
      int src_end_ip = v->live_intervals->end[src_var];

      bool interfered = false;
      foreach_inst_in_block_reverse_starting_from(fs_inst, scan_inst, inst, block) {
         if (scan_inst->overwrites_reg(inst->src[0])) {
            if (scan_inst->is_partial_write())
               break;

            if (scan_inst->saturate) {
               inst->saturate = false;
               progress = true;
            } else if (src_end_ip <= ip || inst->dst.equals(inst->src[0])) {
               if (scan_inst->can_do_saturate()) {
                  scan_inst->saturate = true;
                  inst->saturate = false;
                  progress = true;
               }
            }
            break;
         }
         for (int i = 0; i < scan_inst->sources; i++) {
            if (scan_inst->src[i].file == GRF &&
                scan_inst->src[i].reg == inst->src[0].reg &&
                scan_inst->src[i].reg_offset == inst->src[0].reg_offset) {
               if (scan_inst->opcode != BRW_OPCODE_MOV ||
                   !scan_inst->saturate ||
                   scan_inst->src[0].abs ||
                   scan_inst->src[0].negate) {
                  interfered = true;
                  break;
               }
            }
         }

         if (interfered)
            break;
      }
   }

   return progress;
}

bool
fs_visitor::opt_saturate_propagation()
{
   bool progress = false;

   calculate_live_intervals();

   foreach_block (block, cfg) {
      progress = opt_saturate_propagation_local(this, block) || progress;
   }

   /* Live intervals are still valid. */

   return progress;
}
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d55 2
a56 4
          !inst->saturate ||
          inst->dst.file != VGRF ||
          inst->dst.type != inst->src[0].type ||
          inst->src[0].file != VGRF ||
d58 2
a59 1
          inst->src[0].negate)
d66 1
a66 1
      foreach_inst_in_block_reverse_starting_from(fs_inst, scan_inst, inst) {
d68 1
a68 3
            if (scan_inst->is_partial_write() ||
                (scan_inst->dst.type != inst->dst.type &&
                 !scan_inst->can_change_types()))
a75 6
                  if (scan_inst->dst.type != inst->dst.type) {
                     scan_inst->dst.type = inst->dst.type;
                     for (int i = 0; i < scan_inst->sources; i++) {
                        scan_inst->src[i].type = inst->dst.type;
                     }
                  }
d84 2
a85 2
            if (scan_inst->src[i].file == VGRF &&
                scan_inst->src[i].nr == inst->src[0].nr &&
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@d59 2
a60 1
          inst->src[0].abs)
d68 1
a68 2
         if (regions_overlap(scan_inst->dst, scan_inst->size_written,
                             inst->src[0], inst->size_read(0))) {
d77 1
a77 1
            } else if (src_end_ip == ip || inst->dst.equals(inst->src[0])) {
a84 25

                  if (inst->src[0].negate) {
                     if (scan_inst->opcode == BRW_OPCODE_MUL) {
                        scan_inst->src[0].negate = !scan_inst->src[0].negate;
                        inst->src[0].negate = false;
                     } else if (scan_inst->opcode == BRW_OPCODE_MAD) {
                        scan_inst->src[0].negate = !scan_inst->src[0].negate;
                        scan_inst->src[1].negate = !scan_inst->src[1].negate;
                        inst->src[0].negate = false;
                     } else if (scan_inst->opcode == BRW_OPCODE_ADD) {
                        if (scan_inst->src[1].file == IMM) {
                           if (!brw_negate_immediate(scan_inst->src[1].type,
                                                     &scan_inst->src[1].as_brw_reg())) {
                              break;
                           }
                        } else {
                           scan_inst->src[1].negate = !scan_inst->src[1].negate;
                        }
                        scan_inst->src[0].negate = !scan_inst->src[0].negate;
                        inst->src[0].negate = false;
                     } else {
                        break;
                     }
                  }

d95 1
a95 2
                scan_inst->src[i].offset / REG_SIZE ==
                 inst->src[0].offset / REG_SIZE) {
d99 1
a99 3
                   scan_inst->src[0].negate ||
                   scan_inst->src[0].abs != inst->src[0].abs ||
                   scan_inst->src[0].negate != inst->src[0].negate) {
@


