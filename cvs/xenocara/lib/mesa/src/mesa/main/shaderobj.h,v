head	1.2;
access;
symbols
	mesa-17_1_6:1.1.1.4
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.08.26.16.59.39;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2015.11.22.02.38.51;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.38.51;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.14.01;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.39.03;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.08.14.09.44.43;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/*
 * Mesa 3-D graphics library
 *
 * Copyright (C) 2004-2007  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


#ifndef SHADEROBJ_H
#define SHADEROBJ_H


#include "main/compiler.h"
#include "main/glheader.h"
#include "main/mtypes.h"
#include "program/ir_to_mesa.h"


#ifdef __cplusplus
extern "C" {
#endif


/**
 * Internal functions
 */

extern void
_mesa_init_shader_state(struct gl_context * ctx);

extern void
_mesa_free_shader_state(struct gl_context *ctx);


extern void
_mesa_reference_shader(struct gl_context *ctx, struct gl_shader **ptr,
                       struct gl_shader *sh);

extern struct gl_shader *
_mesa_lookup_shader(struct gl_context *ctx, GLuint name);

extern struct gl_shader *
_mesa_lookup_shader_err(struct gl_context *ctx, GLuint name, const char *caller);



extern void
_mesa_reference_shader_program_(struct gl_context *ctx,
                               struct gl_shader_program **ptr,
                               struct gl_shader_program *shProg);

static inline void
_mesa_reference_shader_program(struct gl_context *ctx,
                               struct gl_shader_program **ptr,
                               struct gl_shader_program *shProg)
{
   if (*ptr != shProg)
      _mesa_reference_shader_program_(ctx, ptr, shProg);
}

extern struct gl_shader *
_mesa_new_shader(GLuint name, gl_shader_stage type);

extern struct gl_linked_shader *
_mesa_new_linked_shader(gl_shader_stage type);

extern void
_mesa_delete_shader(struct gl_context *ctx, struct gl_shader *sh);

extern void
_mesa_delete_linked_shader(struct gl_context *ctx,
                           struct gl_linked_shader *sh);

extern struct gl_shader_program *
_mesa_lookup_shader_program(struct gl_context *ctx, GLuint name);

extern struct gl_shader_program *
_mesa_lookup_shader_program_err(struct gl_context *ctx, GLuint name,
                                const char *caller);

extern struct gl_shader_program *
_mesa_new_shader_program(GLuint name);

extern void
_mesa_clear_shader_program_data(struct gl_context *ctx,
                                struct gl_shader_program *shProg);

extern void
_mesa_free_shader_program_data(struct gl_context *ctx,
                               struct gl_shader_program *shProg);

extern void
_mesa_delete_shader_program(struct gl_context *ctx,
                            struct gl_shader_program *shProg);


extern void
_mesa_init_shader_object_functions(struct dd_function_table *driver);

static inline gl_shader_stage
_mesa_shader_enum_to_shader_stage(GLenum v)
{
   switch (v) {
   case GL_VERTEX_SHADER:
      return MESA_SHADER_VERTEX;
   case GL_FRAGMENT_SHADER:
      return MESA_SHADER_FRAGMENT;
   case GL_GEOMETRY_SHADER:
      return MESA_SHADER_GEOMETRY;
   case GL_TESS_CONTROL_SHADER:
      return MESA_SHADER_TESS_CTRL;
   case GL_TESS_EVALUATION_SHADER:
      return MESA_SHADER_TESS_EVAL;
   case GL_COMPUTE_SHADER:
      return MESA_SHADER_COMPUTE;
   default:
      unreachable("bad value in _mesa_shader_enum_to_shader_stage()");
   }
}

/* 8 bytes + another underscore */
#define MESA_SUBROUTINE_PREFIX_LEN 9
static inline const char *
_mesa_shader_stage_to_subroutine_prefix(gl_shader_stage stage)
{
  switch (stage) {
  case MESA_SHADER_VERTEX:
    return "__subu_v";
  case MESA_SHADER_GEOMETRY:
    return "__subu_g";
  case MESA_SHADER_FRAGMENT:
    return "__subu_f";
  case MESA_SHADER_COMPUTE:
    return "__subu_c";
  case MESA_SHADER_TESS_CTRL:
    return "__subu_t";
  case MESA_SHADER_TESS_EVAL:
    return "__subu_e";
  default:
    return NULL;
  }
}

static inline gl_shader_stage
_mesa_shader_stage_from_subroutine_uniform(GLenum subuniform)
{
   switch (subuniform) {
   case GL_VERTEX_SUBROUTINE_UNIFORM:
      return MESA_SHADER_VERTEX;
   case GL_GEOMETRY_SUBROUTINE_UNIFORM:
      return MESA_SHADER_GEOMETRY;
   case GL_FRAGMENT_SUBROUTINE_UNIFORM:
      return MESA_SHADER_FRAGMENT;
   case GL_COMPUTE_SUBROUTINE_UNIFORM:
      return MESA_SHADER_COMPUTE;
   case GL_TESS_CONTROL_SUBROUTINE_UNIFORM:
      return MESA_SHADER_TESS_CTRL;
   case GL_TESS_EVALUATION_SUBROUTINE_UNIFORM:
      return MESA_SHADER_TESS_EVAL;
   }
   unreachable("not reached");
}

static inline gl_shader_stage
_mesa_shader_stage_from_subroutine(GLenum subroutine)
{
   switch (subroutine) {
   case GL_VERTEX_SUBROUTINE:
      return MESA_SHADER_VERTEX;
   case GL_GEOMETRY_SUBROUTINE:
      return MESA_SHADER_GEOMETRY;
   case GL_FRAGMENT_SUBROUTINE:
      return MESA_SHADER_FRAGMENT;
   case GL_COMPUTE_SUBROUTINE:
      return MESA_SHADER_COMPUTE;
   case GL_TESS_CONTROL_SUBROUTINE:
      return MESA_SHADER_TESS_CTRL;
   case GL_TESS_EVALUATION_SUBROUTINE:
      return MESA_SHADER_TESS_EVAL;
   }
   unreachable("not reached");
}

static inline GLenum
_mesa_shader_stage_to_subroutine(gl_shader_stage stage)
{
   switch (stage) {
   case MESA_SHADER_VERTEX:
      return GL_VERTEX_SUBROUTINE;
   case MESA_SHADER_GEOMETRY:
      return GL_GEOMETRY_SUBROUTINE;
   case MESA_SHADER_FRAGMENT:
      return GL_FRAGMENT_SUBROUTINE;
   case MESA_SHADER_COMPUTE:
      return GL_COMPUTE_SUBROUTINE;
   case MESA_SHADER_TESS_CTRL:
      return GL_TESS_CONTROL_SUBROUTINE;
   case MESA_SHADER_TESS_EVAL:
      return GL_TESS_EVALUATION_SUBROUTINE;
   }
   unreachable("not reached");
}

static inline GLenum
_mesa_shader_stage_to_subroutine_uniform(gl_shader_stage stage)
{
   switch (stage) {
   case MESA_SHADER_VERTEX:
      return GL_VERTEX_SUBROUTINE_UNIFORM;
   case MESA_SHADER_GEOMETRY:
      return GL_GEOMETRY_SUBROUTINE_UNIFORM;
   case MESA_SHADER_FRAGMENT:
      return GL_FRAGMENT_SUBROUTINE_UNIFORM;
   case MESA_SHADER_COMPUTE:
      return GL_COMPUTE_SUBROUTINE_UNIFORM;
   case MESA_SHADER_TESS_CTRL:
      return GL_TESS_CONTROL_SUBROUTINE_UNIFORM;
   case MESA_SHADER_TESS_EVAL:
      return GL_TESS_EVALUATION_SUBROUTINE_UNIFORM;
   }
   unreachable("not reached");
}

extern bool
_mesa_validate_pipeline_io(struct gl_pipeline_object *);

#ifdef __cplusplus
}
#endif

#endif /* SHADEROBJ_H */
@


1.1
log
@Initial revision
@
text
@d78 5
d85 1
a85 1
_mesa_init_shader(struct gl_context *ctx, struct gl_shader *shader);
d87 3
a89 2
extern struct gl_shader *
_mesa_new_shader(struct gl_context *ctx, GLuint name, GLenum type);
d98 3
d102 2
a103 1
_mesa_clear_shader_program_data(struct gl_shader_program *shProg);
d109 3
d134 1
a134 2
      assert(0 && "bad value in _mesa_shader_enum_to_shader_stage()");
      return MESA_SHADER_VERTEX;
a164 1
   default:
d178 1
d198 1
a204 1
   default:
d218 1
a224 1
   default:
d238 1
d240 3
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@a84 3
extern void
_mesa_delete_shader(struct gl_context *ctx, struct gl_shader *sh);

a91 3
extern struct gl_shader_program *
_mesa_new_shader_program(GLuint name);

a98 3
extern void
_mesa_delete_shader_program(struct gl_context *ctx,
                            struct gl_shader_program *shProg);
d121 2
a122 1
      unreachable("bad value in _mesa_shader_enum_to_shader_stage()");
d153 1
a166 1
   unreachable("not reached");
a185 1
   unreachable("not reached");
d192 1
a205 1
   unreachable("not reached");
d212 1
a225 1
   unreachable("not reached");
a226 3

extern bool
_mesa_validate_pipeline_io(struct gl_pipeline_object *);
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@d78 4
d83 1
a83 4
_mesa_new_shader(GLuint name, gl_shader_stage type);

extern struct gl_linked_shader *
_mesa_new_linked_shader(gl_shader_stage type);
a87 4
extern void
_mesa_delete_linked_shader(struct gl_context *ctx,
                           struct gl_linked_shader *sh);

d99 1
a99 2
_mesa_clear_shader_program_data(struct gl_context *ctx,
                                struct gl_shader_program *shProg);
@


1.1.1.4
log
@Import Mesa 17.1.6
@
text
@a68 5
void
_mesa_reference_shader_program_data(struct gl_context *ctx,
                                    struct gl_shader_program_data **ptr,
                                    struct gl_shader_program_data *data);

d80 3
@


