head	1.1;
branch	1.1.1;
access;
symbols
	mesa-17_1_6:1.1.1.6
	OPENBSD_6_1:1.1.1.5.0.2
	OPENBSD_6_1_BASE:1.1.1.5
	mesa-13_0_6:1.1.1.5
	mesa-13_0_5:1.1.1.4
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2015.11.22.02.38.30;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.38.30;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.13.40;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.39.28;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.02.26.12.19.57;	author jsg;	state Exp;
branches;
next	1.1.1.5;
commitid	xZcdklZavddTKAf1;

1.1.1.5
date	2017.03.25.00.18.59;	author jsg;	state Exp;
branches;
next	1.1.1.6;
commitid	YgkKuQ9hssScckR1;

1.1.1.6
date	2017.08.14.09.45.09;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.1
log
@Initial revision
@
text
@#line 2 "program/lex.yy.c"

#line 4 "program/lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE _mesa_program_lexer_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via _mesa_program_lexer_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void _mesa_program_lexer_restart (FILE *input_file ,yyscan_t yyscanner );
void _mesa_program_lexer__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_program_lexer__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void _mesa_program_lexer__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_program_lexer__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void _mesa_program_lexer_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void _mesa_program_lexer_pop_buffer_state (yyscan_t yyscanner );

static void _mesa_program_lexer_ensure_buffer_stack (yyscan_t yyscanner );
static void _mesa_program_lexer__load_buffer_state (yyscan_t yyscanner );
static void _mesa_program_lexer__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER _mesa_program_lexer__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE _mesa_program_lexer__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_program_lexer__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_program_lexer__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *_mesa_program_lexer_alloc (yy_size_t ,yyscan_t yyscanner );
void *_mesa_program_lexer_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void _mesa_program_lexer_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer _mesa_program_lexer__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        _mesa_program_lexer_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_program_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        _mesa_program_lexer_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _mesa_program_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define _mesa_program_lexer_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 158
#define YY_END_OF_BUFFER 159
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[779] =
    {   0,
        0,    0,  159,  157,  155,  154,  157,  157,  127,  153,
      129,  129,  129,  129,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  155,    0,    0,  156,  127,    0,
      128,  130,  150,  150,    0,    0,    0,    0,  150,    0,
        0,    0,    0,    0,    0,    0,  107,  151,  108,  109,
      141,  141,  141,  141,    0,  129,    0,  115,  116,  117,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  149,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  148,  148,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  147,  147,  147,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  138,  138,  138,  139,
      139,  140,  131,  130,  131,    0,  132,   11,   12,  127,
       13,  127,  127,   14,   15,  127,   16,   17,   18,   19,
       20,   21,    6,   22,   23,   24,   25,   26,   28,   27,

       29,   30,   31,   32,   33,   34,   35,  127,  127,  127,
       36,   37,  127,   38,   39,   40,   41,   42,  127,   43,
       44,   45,   46,   47,   48,  127,   49,   50,   51,   52,
       53,  127,  127,  127,  127,  127,  127,    0,    0,    0,
        0,  130,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   68,   69,   71,    0,  146,    0,    0,    0,
        0,    0,    0,   85,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  145,  144,  144,   97,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  135,  135,
      136,  137,    0,  133,   11,   11,  127,   12,   12,   12,

      127,  127,  127,  127,  127,   15,   15,  127,  118,   16,
       16,  127,   17,   17,  127,   18,   18,  127,   19,   19,
      127,   20,   20,  127,   21,   21,  127,   22,   22,  127,
       24,   24,  127,   25,   25,  127,   28,   28,  127,   27,
       27,  127,   30,   30,  127,   31,   31,  127,   32,   32,
      127,   33,   33,  127,   34,   34,  127,   35,   35,  127,
      127,  127,  127,   36,   36,  127,   37,   37,  127,  119,
       38,   38,  127,  127,   40,   40,  127,   41,   41,  127,
       42,   42,  127,  127,   43,   43,  127,   44,   44,  127,
       45,   45,  127,   46,   46,  127,   47,   47,  127,  127,

       10,   49,  127,   50,  127,   51,  127,   52,  127,  127,
      127,  127,  127,  127,  127,  127,    0,  152,    0,    0,
        0,   61,   62,    0,    0,    0,    0,    0,    0,    0,
       73,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  143,
        0,    0,    0,  101,    0,  103,    0,    0,    0,    0,
        0,    0,  142,  134,  127,  127,  127,    4,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,    9,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,   57,  127,  127,    0,    0,    0,
        0,    0,   63,   64,    0,    0,    0,    0,   72,    0,
        0,   76,   79,    0,    0,    0,    0,    0,    0,    0,
       90,   91,    0,    0,    0,    0,   96,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  127,  127,  127,
      127,  127,  127,    5,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,    7,    8,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,   58,  127,   54,    0,
        0,    0,    0,  112,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   82,    0,   86,   87,    0,   89,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  105,
      106,    0,    0,  113,   11,    3,   12,  123,  124,  127,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   24,
       25,   28,   27,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,  127,  127,  127,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
      127,   56,  114,    0,    0,   59,    0,   65,    0,    0,

        0,   74,    0,    0,    0,    0,    0,    0,   88,    0,
        0,   94,   81,    0,    0,    0,    0,    0,    0,  110,
        0,  127,  120,  121,  127,   55,    0,    0,    0,    0,
       67,   70,   75,    0,    0,   80,    0,    0,    0,   93,
        0,    0,    0,    0,  102,  104,    0,  127,  127,    2,
        1,    0,   66,    0,   78,    0,   84,   92,    0,    0,
       99,  100,  111,  127,  122,    0,   77,    0,   95,   98,
      127,   60,   83,  127,  127,  125,  126,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    7,    1,    1,    1,    1,
        1,    1,    8,    1,    8,    9,    1,   10,   11,   12,
       13,   14,   15,   15,   15,   15,   15,    1,    1,    1,
        1,    1,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,    7,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
        1,    1,    1,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    1,    3,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[782] =
    {   0,
        0,    0, 1207, 1208,   66, 1208, 1201, 1202,    0,   69,
       85,  128,  140,  152,  151,   58,   56,   63,   76, 1180,
      158,  160,   39,   61,  155,  179,   68, 1173, 1143, 1142,
     1154, 1138, 1152, 1151,  105, 1180, 1192, 1208,    0,  215,
     1208,  198,  177,  180,   20,  146,   66,  122,  184, 1152,
     1138,   54,  137, 1136, 1148,  192, 1208,  207,  234,   98,
      221,  228,  232,  236,  294,  306,  317, 1208, 1208, 1208,
     1157, 1170, 1164,  189, 1153, 1156, 1152, 1167,  107,  233,
     1149, 1163,  194, 1149, 1162, 1153, 1166, 1143, 1154, 1145,
      214, 1146, 1137, 1146, 1137, 1136, 1137, 1131, 1137, 1148,

     1134, 1131, 1132,  220, 1146, 1133,  290, 1140, 1142, 1118,
       65,  139, 1138, 1114, 1099, 1094, 1111, 1087, 1092, 1118,
      176, 1107,  280, 1102,  331,  305, 1104, 1085,  307, 1095,
     1091, 1086,  182, 1092, 1078, 1094, 1091, 1082,  314,  317,
     1084, 1073, 1087, 1090, 1072, 1087, 1074, 1071, 1078,  308,
     1086,  144,  313,  329,  332,  339, 1063, 1080, 1081, 1074,
     1056,  267, 1057, 1079, 1070,  328,  335,  339,  343,  347,
      351,  355, 1208,  413,  424,  430,  436,  434,  435, 1103,
        0, 1102, 1085, 1075,  437, 1095,  438,  445,  462,  464,
      466,  465,    0,  490,    0,  491,  492,    0,  493,  494,

        0,  518,  519,  520,  530,  531,  547, 1090, 1083, 1096,
      555,  557, 1077,  558, 1069,  559,  583,  584, 1090,  585,
      591,  595,  612,  616, 1067, 1077,  271,  293,  317,  413,
     1065, 1057, 1056, 1041, 1041, 1040, 1039, 1082, 1054, 1042,
      648,  654,  628, 1046,  231, 1043, 1037, 1037, 1031, 1044,
     1044, 1029, 1208, 1208, 1044, 1032,  630, 1039,  322, 1036,
     1042,  481, 1037, 1208, 1028, 1035, 1034, 1037, 1023, 1022,
     1026, 1021,  338, 1026,  632,  640,  642, 1208, 1018, 1016,
     1016, 1024, 1025, 1007,  594, 1012, 1018,  426,  454,  480,
      528,  628,  692,  698, 1024,  587, 1031, 1022,  602,  659,

     1029, 1028, 1021, 1035, 1025, 1016,  678, 1023,    0, 1014,
      679, 1021, 1012,  680, 1019, 1010,  696, 1017, 1008,  697,
     1015, 1006,  698, 1013, 1004,  699, 1011, 1002,  700, 1009,
     1000,  704, 1007,  998,  705, 1005,  996,  706, 1003,  994,
      707, 1001,  992,  708,  999,  990,  709,  997,  988,  710,
      995,  986,  711,  993,  984,  712,  991,  982,  713,  989,
      992,  985,  992,  977,  714,  984,  975,  715,  982,    0,
      973,  716,  980,  979,  970,  717,  977,  968,  718,  975,
      966,  724,  973,  976,  963,  725,  970,  961,  726,  968,
      959,  742,  966,  957,  743,  964,  955,  744,  962,  961,

        0,  952,  959,  950,  957,  948,  955,  946,  953,  952,
      930,  924,  929,  935,  918,  933,  291, 1208,  932,  922,
      926, 1208, 1208,  916,  925,  911,  928,  911,  914,  908,
     1208,  909,  908,  905,  912,  905,  913,  909,  919,  916,
      898,  904,  911,  895,  894,  912,  894,  906,  905, 1208,
      904,  894,  898, 1208,  885, 1208,  890,  890,  898,  881,
      882,  892, 1208, 1208,  924,  906,  922,    0,  757,  920,
      920,  919,  918,  917,  916,  915,  914,  913,  912,  911,
      910,  909,  908,  907,  906,  905,  904,  903,  902,  889,
      882,    0,  899,  898,  897,  896,  895,  894,  893,  871,

      891,  890,  889,  888,  887,  886,  885,  884,  883,  882,
      881,  850,  853,  833,    0,  834,  827,  834,  833,  834,
      826,  844, 1208, 1208,  826,  824,  834,  827, 1208,  822,
      839,  408, 1208,  830,  814,  815,  824,  815,  814,  814,
     1208,  813,  822,  812,  828,  825, 1208,  824,  822,  811,
      812,  808,  800,  807,  802,  803,  798,  824,  824,  822,
      836,  835,  830,    0,  818,  817,  816,  815,  814,  813,
      812,  811,  810,  809,  808,  807,  806,  805,  804,  803,
      802,  801,  800,    0,    0,  799,  798,  797,  796,  795,
      794,  793,  572,  792,  791,  790,  789,  788,  787,  786,

      785,  784,  783,  782,  760,  760,    0,  767,    0,  801,
      800,  749,  767, 1208,  762,  757,  750,  746,  758,  748,
      746,  742,  758,  749,  748, 1208, 1208,  751, 1208,  746,
      733,  722,  733,  725,  726,  739,  734,  737,  719, 1208,
     1208,  731,  720, 1208,    0,    0,    0,    0,    0,  759,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  755,  754,  752,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      710,    0,    0,  761,  755, 1208,  702, 1208,  630,  626,

      611, 1208,  592,  606,  593,  594,  591,  599, 1208,  574,
      582, 1208, 1208,  581,  566,  553,  551,  551,  541, 1208,
      514,  548,    0,    0,  548,    0,  554,  545,  489,  473,
     1208, 1208, 1208,  455,  454, 1208,  450,  417,  428, 1208,
      415,  408,  364,  369, 1208, 1208,  351,  367,  356, 1208,
     1208,  329, 1208,  326, 1208,  332, 1208, 1208,  315,  278,
     1208, 1208, 1208,  296,    0,  198, 1208,  177, 1208, 1208,
      270, 1208, 1208,  216,  172,    0,    0, 1208,  790,   70,
      793
    } ;

static yyconst flex_int16_t yy_def[782] =
    {   0,
      778,    1,  778,  778,  778,  778,  778,  779,  780,  778,
      778,  778,  778,  778,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  778,  778,  779,  778,  780,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  781,  778,  778,  778,  778,  778,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,

      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,

      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  780,  780,  780,  780,  780,  780,

      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,

      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,

      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,

      780,  780,  780,  780,  780,  780,  780,  780,  780,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  778,  778,  778,  778,  778,  778,  778,

      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  780,  780,  780,  780,  780,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  780,  780,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  780,  780,  778,  778,  778,  778,  778,
      780,  778,  778,  780,  780,  780,  780,    0,  778,  778,
      778
    } ;

static yyconst flex_int16_t yy_nxt[1276] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,   10,   11,
       12,   13,   14,   11,   11,   15,    9,   16,   17,   18,
       19,    9,    9,    9,   20,   21,   22,    9,   23,   24,
        9,   25,   26,   27,    9,    9,    9,   28,    9,    9,
        9,    9,    9,    9,    9,    9,   29,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   30,    9,   31,   32,
       33,    9,   34,    9,    9,    9,    9,   35,   95,   35,
       40,   39,  130,   96,   79,  131,   97,   41,   42,   42,
       42,   42,   42,   42,   76,   80,   77,  111,   81,   98,
       82,  226,   78,   65,   66,   66,   66,   66,   66,   66,

       83,   84,  227,  143,   67,  112,   35,   85,   35,  144,
       43,   44,   45,   46,   47,   48,   49,   50,   51,  134,
      135,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       67,  136,   61,   62,   63,   64,   65,   66,   66,   66,
       66,   66,   66,  163,  187,  188,   68,   67,   65,   66,
       66,   66,   66,   66,   66,  228,  164,  229,   69,   67,
       65,   66,   66,   66,   66,   66,   66,   71,  230,   72,
       70,   67,   99,   67,  100,   91,   73,  137,  145,   87,
      138,   88,   74,   92,   75,   67,   89,  101,   93,   90,
      777,  132,  146,  270,   94,  133,  102,   67,  103,  147,

      104,  105,  106,  271,  107,  194,  108,   42,   42,   42,
       42,   42,   42,  109,  181,  110,   40,  125,  126,  126,
      182,  129,  126,  195,  126,  139,  140,  126,  250,  127,
      127,  126,  203,  150,  776,  126,  128,  128,  126,  217,
      251,  773,  126,  125,  151,  189,  190,  152,  154,  155,
      153,  204,  772,  218,  156,  191,  121,  122,   45,   46,
       47,   48,  157,   50,   51,  126,  165,   52,   53,   54,
       55,   56,   57,  123,   59,   60,  420,  158,  124,  159,
      774,  775,  160,  161,  166,  166,  166,  166,  402,  421,
      162,  167,  166,  168,  169,  170,  166,  166,  171,  172,

      166,  166,  166,  174,  174,  174,  174,  174,  174,  221,
      404,  403,  283,  175,   65,   66,   66,   66,   66,   66,
       66,  240,  284,  222,  176,   67,  177,  177,  177,  177,
      177,  177,  771,  405,  406,  157,  770,  518,  241,  175,
      242,  242,  242,  242,  242,  242,  243,  243,  243,  243,
      246,   67,  243,  519,  243,  243,  243,  407,  257,  243,
      267,  243,  272,  243,  243,  243,  268,  432,  273,  769,
      243,  243,  243,  275,  243,  243,  243,  768,  767,  243,
      276,  277,  433,  274,  766,  447,  243,  243,  448,  765,
      243,  288,  288,  288,  288,  764,  763,  243,  288,  288,

      288,  288,  289,  288,  288,  290,  291,  288,  288,  288,
      288,  288,  288,  288,  292,  288,  288,  288,  288,  288,
      288,  288,   42,   42,   42,   42,   42,   42,  762,  761,
      408,  293,  125,  294,  294,  294,  294,  294,  294,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  295,  298,  409,  306,  310,  296,  299,  125,  307,
      311,  621,  313,  760,  622,  296,  300,  314,  307,  311,
      759,  296,  299,  758,  297,  301,  314,  308,  312,  316,
      757,  319,  325,  322,  317,  315,  320,  326,  323,  463,
      463,  463,  463,  317,  756,  320,  326,  323,  755,  317,

      754,  320,  318,  323,  321,  327,  324,  328,  331,  334,
      337,  340,  329,  332,  335,  338,  341,  463,  463,  463,
      463,  329,  332,  335,  338,  341,  436,  753,  332,  335,
      330,  333,  336,  339,  342,  343,  346,  349,  752,  437,
      344,  347,  350,  464,  463,  463,  463,  352,  355,  344,
      347,  350,  353,  356,  751,  344,  347,  350,  345,  348,
      351,  353,  356,  750,  358,  749,  748,  353,  356,  359,
      354,  357,  364,  747,  367,  371,  375,  365,  359,  368,
      372,  376,  677,  678,  359,  746,  365,  360,  368,  372,
      376,  463,  463,  463,  463,  366,  376,  369,  373,  377,

      378,  381,  385,  679,  295,  379,  382,  386,  388,  745,
      744,  743,  391,  389,  379,  382,  386,  392,  742,  298,
      379,  382,  389,  380,  383,  387,  392,  297,  389,  394,
      741,  390,  392,  397,  395,  393,  740,  457,  398,  458,
      739,  459,  301,  395,  738,  737,  736,  398,  735,  395,
      734,  733,  396,  398,  460,  732,  399,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  418,
      418,  418,  418,  418,  418,  418,  298,  418,  466,  418,
      731,  418,  418,  450,  418,  730,  418,  418,  418,  418,
      418,  463,  463,  463,  463,  306,  310,  313,  418,  301,

      418,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      294,  294,  294,  316,  319,  322,  325,  328,  308,  312,
      315,  331,  334,  337,  340,  343,  346,  349,  352,  355,
      358,  364,  367,  371,  375,  378,  318,  321,  324,  327,
      330,  381,  385,  388,  333,  336,  339,  342,  345,  348,
      351,  354,  357,  360,  366,  369,  373,  377,  380,  391,
      394,  397,  729,  728,  383,  387,  390,  561,  562,  727,
      726,  725,  724,  723,  722,  721,  720,  719,  718,  717,
      716,  715,  393,  396,  399,  714,  713,  712,  711,  563,
       37,   37,   37,  173,  173,  710,  709,  708,  707,  706,

      705,  704,  703,  702,  701,  700,  699,  698,  697,  696,
      695,  694,  693,  692,  691,  690,  689,  688,  687,  686,
      685,  684,  683,  682,  681,  680,  676,  675,  674,  673,
      672,  671,  670,  669,  668,  667,  666,  665,  664,  663,
      662,  661,  660,  659,  658,  657,  656,  655,  654,  653,
      652,  651,  650,  649,  648,  647,  646,  645,  644,  643,
      642,  641,  640,  639,  638,  637,  636,  635,  634,  633,
      632,  631,  630,  629,  628,  627,  626,  625,  624,  623,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  605,  604,  603,  602,  601,

      600,  599,  598,  597,  596,  595,  594,  593,  592,  591,
      590,  589,  588,  587,  586,  585,  584,  583,  582,  581,
      580,  579,  578,  577,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  560,  559,  558,
      557,  556,  555,  554,  553,  552,  551,  550,  549,  548,
      547,  546,  545,  544,  543,  542,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  517,  516,
      515,  514,  513,  512,  511,  510,  409,  509,  407,  508,
      405,  507,  403,  506,  505,  399,  504,  396,  503,  393,

      502,  390,  501,  387,  500,  499,  383,  498,  380,  497,
      377,  496,  495,  373,  494,  369,  493,  366,  492,  491,
      490,  489,  360,  488,  357,  487,  354,  486,  351,  485,
      348,  484,  345,  483,  342,  482,  339,  481,  336,  480,
      333,  479,  330,  478,  327,  477,  324,  476,  321,  475,
      318,  474,  315,  473,  312,  472,  308,  471,  470,  469,
      468,  467,  301,  465,  297,  462,  461,  456,  455,  454,
      453,  452,  451,  449,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  435,  434,  431,  430,  429,  428,  427,
      426,  425,  424,  423,  422,  419,  274,  246,  417,  416,

      415,  414,  413,  412,  411,  410,  401,  400,  384,  374,
      370,  363,  362,  361,  309,  305,  304,  303,  302,  287,
      286,  285,  282,  281,  280,  279,  278,  269,  266,  265,
      264,  263,  262,  261,  260,  259,  258,  256,  255,  254,
      253,  252,  249,  248,  247,  245,  244,  165,  239,  238,
      237,  236,  235,  234,  233,  232,  231,  225,  224,  223,
      220,  219,  216,  215,  214,  213,  212,  211,  210,  209,
      208,  207,  206,  205,  202,  201,  200,  199,  198,  197,
      196,  193,  192,  186,  185,  184,  183,  180,  179,  178,
      149,  148,  142,  141,   38,  120,  119,  118,  117,  116,

      115,  114,  113,   86,   38,   36,  778,    3,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778
    } ;

static yyconst flex_int16_t yy_chk[1276] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,   23,    5,
       10,  780,   45,   23,   17,   45,   24,   10,   10,   10,
       10,   10,   10,   10,   16,   17,   16,   27,   17,   24,
       18,  111,   16,   11,   11,   11,   11,   11,   11,   11,

       18,   19,  111,   52,   11,   27,   35,   19,   35,   52,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   47,
       47,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       11,   47,   10,   10,   10,   10,   12,   12,   12,   12,
       12,   12,   12,   60,   79,   79,   12,   12,   13,   13,
       13,   13,   13,   13,   13,  112,   60,  112,   13,   13,
       14,   14,   14,   14,   14,   14,   14,   15,  112,   15,
       14,   14,   25,   12,   25,   22,   15,   48,   53,   21,
       48,   21,   15,   22,   15,   13,   21,   25,   22,   21,
      775,   46,   53,  152,   22,   46,   26,   14,   26,   53,

       26,   26,   26,  152,   26,   83,   26,   42,   42,   42,
       42,   42,   42,   26,   74,   26,   40,   42,   43,   43,
       74,   44,   44,   83,   43,   49,   49,   44,  133,  121,
       43,   49,   91,   56,  774,   43,  121,   43,   44,  104,
      133,  768,   49,   42,   56,   80,   80,   56,   58,   58,
       56,   91,  766,  104,   58,   80,   40,   40,   40,   40,
       40,   40,   58,   40,   40,   58,   61,   40,   40,   40,
       40,   40,   40,   40,   40,   40,  245,   59,   40,   59,
      771,  771,   59,   59,   61,   61,   61,   61,  227,  245,
       59,   62,   62,   62,   62,   63,   63,   63,   63,   64,

       64,   64,   64,   65,   65,   65,   65,   65,   65,  107,
      228,  227,  162,   65,   66,   66,   66,   66,   66,   66,
       66,  123,  162,  107,   67,   66,   67,   67,   67,   67,
       67,   67,  764,  228,  229,  123,  760,  417,  125,   65,
      125,  125,  125,  125,  125,  125,  126,  126,  129,  129,
      129,   66,  126,  417,  129,  139,  139,  229,  140,  140,
      150,  139,  153,  126,  140,  129,  150,  259,  153,  759,
      154,  154,  139,  155,  155,  140,  154,  756,  754,  155,
      156,  156,  259,  154,  752,  273,  156,  154,  273,  749,
      155,  166,  166,  166,  166,  748,  747,  156,  167,  167,

      167,  167,  168,  168,  168,  168,  169,  169,  169,  169,
      170,  170,  170,  170,  171,  171,  171,  171,  172,  172,
      172,  172,  174,  174,  174,  174,  174,  174,  744,  743,
      230,  175,  174,  175,  175,  175,  175,  175,  175,  176,
      176,  176,  176,  176,  176,  177,  177,  177,  177,  177,
      177,  178,  179,  230,  185,  187,  178,  179,  174,  185,
      187,  532,  188,  742,  532,  178,  179,  188,  185,  187,
      741,  178,  179,  739,  178,  179,  188,  185,  187,  189,
      738,  190,  192,  191,  189,  188,  190,  192,  191,  288,
      288,  288,  288,  189,  737,  190,  192,  191,  735,  189,

      734,  190,  189,  191,  190,  192,  191,  194,  196,  197,
      199,  200,  194,  196,  197,  199,  200,  289,  289,  289,
      289,  194,  196,  197,  199,  200,  262,  730,  196,  197,
      194,  196,  197,  199,  200,  202,  203,  204,  729,  262,
      202,  203,  204,  290,  290,  290,  290,  205,  206,  202,
      203,  204,  205,  206,  728,  202,  203,  204,  202,  203,
      204,  205,  206,  727,  207,  725,  722,  205,  206,  207,
      205,  206,  211,  721,  212,  214,  216,  211,  207,  212,
      214,  216,  593,  593,  207,  719,  211,  207,  212,  214,
      216,  291,  291,  291,  291,  211,  216,  212,  214,  216,

      217,  218,  220,  593,  296,  217,  218,  220,  221,  718,
      717,  716,  222,  221,  217,  218,  220,  222,  715,  299,
      217,  218,  221,  217,  218,  220,  222,  296,  221,  223,
      714,  221,  222,  224,  223,  222,  711,  285,  224,  285,
      710,  285,  299,  223,  708,  707,  706,  224,  705,  223,
      704,  703,  223,  224,  285,  701,  224,  241,  241,  241,
      241,  241,  241,  242,  242,  242,  242,  242,  242,  243,
      243,  257,  257,  275,  275,  243,  300,  257,  300,  275,
      700,  276,  276,  277,  277,  699,  243,  276,  257,  277,
      275,  292,  292,  292,  292,  307,  311,  314,  276,  300,

      277,  293,  293,  293,  293,  293,  293,  294,  294,  294,
      294,  294,  294,  317,  320,  323,  326,  329,  307,  311,
      314,  332,  335,  338,  341,  344,  347,  350,  353,  356,
      359,  365,  368,  372,  376,  379,  317,  320,  323,  326,
      329,  382,  386,  389,  332,  335,  338,  341,  344,  347,
      350,  353,  356,  359,  365,  368,  372,  376,  379,  392,
      395,  398,  697,  695,  382,  386,  389,  469,  469,  694,
      691,  679,  678,  677,  650,  643,  642,  639,  638,  637,
      636,  635,  392,  395,  398,  634,  633,  632,  631,  469,
      779,  779,  779,  781,  781,  630,  628,  625,  624,  623,

      622,  621,  620,  619,  618,  617,  616,  615,  613,  612,
      611,  610,  608,  606,  605,  604,  603,  602,  601,  600,
      599,  598,  597,  596,  595,  594,  592,  591,  590,  589,
      588,  587,  586,  583,  582,  581,  580,  579,  578,  577,
      576,  575,  574,  573,  572,  571,  570,  569,  568,  567,
      566,  565,  563,  562,  561,  560,  559,  558,  557,  556,
      555,  554,  553,  552,  551,  550,  549,  548,  546,  545,
      544,  543,  542,  540,  539,  538,  537,  536,  535,  534,
      531,  530,  528,  527,  526,  525,  522,  521,  520,  519,
      518,  517,  516,  514,  513,  512,  511,  510,  509,  508,

      507,  506,  505,  504,  503,  502,  501,  500,  499,  498,
      497,  496,  495,  494,  493,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  467,  466,  465,
      462,  461,  460,  459,  458,  457,  455,  453,  452,  451,
      449,  448,  447,  446,  445,  444,  443,  442,  441,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  430,  429,
      428,  427,  426,  425,  424,  421,  420,  419,  416,  415,
      414,  413,  412,  411,  410,  409,  408,  407,  406,  405,
      404,  403,  402,  400,  399,  397,  396,  394,  393,  391,

      390,  388,  387,  385,  384,  383,  381,  380,  378,  377,
      375,  374,  373,  371,  369,  367,  366,  364,  363,  362,
      361,  360,  358,  357,  355,  354,  352,  351,  349,  348,
      346,  345,  343,  342,  340,  339,  337,  336,  334,  333,
      331,  330,  328,  327,  325,  324,  322,  321,  319,  318,
      316,  315,  313,  312,  310,  308,  306,  305,  304,  303,
      302,  301,  298,  297,  295,  287,  286,  284,  283,  282,
      281,  280,  279,  274,  272,  271,  270,  269,  268,  267,
      266,  265,  263,  261,  260,  258,  256,  255,  252,  251,
      250,  249,  248,  247,  246,  244,  240,  239,  238,  237,

      236,  235,  234,  233,  232,  231,  226,  225,  219,  215,
      213,  210,  209,  208,  186,  184,  183,  182,  180,  165,
      164,  163,  161,  160,  159,  158,  157,  151,  149,  148,
      147,  146,  145,  144,  143,  142,  141,  138,  137,  136,
      135,  134,  132,  131,  130,  128,  127,  124,  122,  120,
      119,  118,  117,  116,  115,  114,  113,  110,  109,  108,
      106,  105,  103,  102,  101,  100,   99,   98,   97,   96,
       95,   94,   93,   92,   90,   89,   88,   87,   86,   85,
       84,   82,   81,   78,   77,   76,   75,   73,   72,   71,
       55,   54,   51,   50,   37,   36,   34,   33,   32,   31,

       30,   29,   28,   20,    8,    7,    3,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../../../src/mesa/program/program_lexer.l"
#line 2 "../../../src/mesa/program/program_lexer.l"
/*
 * Copyright © 2009 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "main/glheader.h"
#include "main/imports.h"
#include "program/prog_instruction.h"
#include "program/prog_statevars.h"
#include "program/symbol_table.h"
#include "program/program_parser.h"
#include "program/program_parse.tab.h"
#include "util/strtod.h"

#define require_ARB_vp (yyextra->mode == ARB_vertex)
#define require_ARB_fp (yyextra->mode == ARB_fragment)
#define require_NV_fp  (yyextra->option.NV_fragment)
#define require_shadow (yyextra->option.Shadow)
#define require_rect   (yyextra->option.TexRect)
#define require_texarray        (yyextra->option.TexArray)

#ifndef HAVE_UNISTD_H
#define YY_NO_UNISTD_H
#endif

#define return_token_or_IDENTIFIER(condition, token)	\
   do {							\
      if (condition) {					\
	 return token;					\
      } else {						\
	 return handle_ident(yyextra, yytext, yylval);	\
      }							\
   } while (0)

#define return_token_or_DOT(condition, token)		\
   do {							\
      if (condition) {					\
	 return token;					\
      } else {						\
	 yyless(1);					\
	 return DOT;					\
      }							\
   } while (0)


#define return_opcode(condition, token, opcode, len)	\
   do {							\
      if (condition &&					\
	  _mesa_parse_instruction_suffix(yyextra,	\
					 yytext + len,	\
					 & yylval->temp_inst)) {	\
	 yylval->temp_inst.Opcode = OPCODE_ ## opcode;	\
	 return token;					\
      } else {						\
	 return handle_ident(yyextra, yytext, yylval);	\
      }							\
   } while (0)

#define SWIZZLE_INVAL  MAKE_SWIZZLE4(SWIZZLE_NIL, SWIZZLE_NIL, \
				     SWIZZLE_NIL, SWIZZLE_NIL)

static unsigned
mask_from_char(char c)
{
   switch (c) {
   case 'x':
   case 'r':
      return WRITEMASK_X;
   case 'y':
   case 'g':
      return WRITEMASK_Y;
   case 'z':
   case 'b':
      return WRITEMASK_Z;
   case 'w':
   case 'a':
      return WRITEMASK_W;
   }

   return 0;
}

static unsigned
swiz_from_char(char c)
{
   switch (c) {
   case 'x':
   case 'r':
      return SWIZZLE_X;
   case 'y':
   case 'g':
      return SWIZZLE_Y;
   case 'z':
   case 'b':
      return SWIZZLE_Z;
   case 'w':
   case 'a':
      return SWIZZLE_W;
   }

   return 0;
}

static int
handle_ident(struct asm_parser_state *state, const char *text, YYSTYPE *lval)
{
   lval->string = strdup(text);

   return (_mesa_symbol_table_find_symbol(state->st, 0, text) == NULL)
      ? IDENTIFIER : USED_IDENTIFIER;
}

#define YY_USER_ACTION							\
   do {									\
      yylloc->first_column = yylloc->last_column;			\
      yylloc->last_column += yyleng;					\
      if ((yylloc->first_line == 1)					\
	  && (yylloc->first_column == 1)) {				\
	 yylloc->position = 1;						\
      } else {								\
	 yylloc->position += yylloc->last_column - yylloc->first_column; \
      }									\
   } while(0);

#define YY_NO_INPUT

/* Yes, this is intentionally doing nothing. We have this line of code
here only to avoid the compiler complaining about an unput function
that is defined, but never called. */
#define YY_USER_INIT while (0) { unput(0); }

#define YY_EXTRA_TYPE struct asm_parser_state *

/* Flex defines a couple of functions with no declarations nor the
static keyword. Declare them here to avoid a compiler warning. */
int _mesa_program_lexer_get_column  (yyscan_t yyscanner);
void _mesa_program_lexer_set_column (int  column_no , yyscan_t yyscanner);

#line 1128 "program/lex.yy.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int _mesa_program_lexer_lex_init (yyscan_t* scanner);

int _mesa_program_lexer_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int _mesa_program_lexer_lex_destroy (yyscan_t yyscanner );

int _mesa_program_lexer_get_debug (yyscan_t yyscanner );

void _mesa_program_lexer_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE _mesa_program_lexer_get_extra (yyscan_t yyscanner );

void _mesa_program_lexer_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *_mesa_program_lexer_get_in (yyscan_t yyscanner );

void _mesa_program_lexer_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *_mesa_program_lexer_get_out (yyscan_t yyscanner );

void _mesa_program_lexer_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t _mesa_program_lexer_get_leng (yyscan_t yyscanner );

char *_mesa_program_lexer_get_text (yyscan_t yyscanner );

int _mesa_program_lexer_get_lineno (yyscan_t yyscanner );

void _mesa_program_lexer_set_lineno (int line_number ,yyscan_t yyscanner );

int _mesa_program_lexer_get_column  (yyscan_t yyscanner );

void _mesa_program_lexer_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * _mesa_program_lexer_get_lval (yyscan_t yyscanner );

void _mesa_program_lexer_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *_mesa_program_lexer_get_lloc (yyscan_t yyscanner );
    
        void _mesa_program_lexer_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int _mesa_program_lexer_wrap (yyscan_t yyscanner );
#else
extern int _mesa_program_lexer_wrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int _mesa_program_lexer_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int _mesa_program_lexer_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			_mesa_program_lexer_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				_mesa_program_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		_mesa_program_lexer__load_buffer_state(yyscanner );
		}

	{
#line 171 "../../../src/mesa/program/program_lexer.l"


#line 1407 "program/lex.yy.c"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 779 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1208 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 173 "../../../src/mesa/program/program_lexer.l"
{ return ARBvp_10; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 174 "../../../src/mesa/program/program_lexer.l"
{ return ARBfp_10; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 175 "../../../src/mesa/program/program_lexer.l"
{
   yylval->integer = at_address;
   return_token_or_IDENTIFIER(require_ARB_vp, ADDRESS);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 179 "../../../src/mesa/program/program_lexer.l"
{ return ALIAS; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 180 "../../../src/mesa/program/program_lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 181 "../../../src/mesa/program/program_lexer.l"
{ return END; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 182 "../../../src/mesa/program/program_lexer.l"
{ return OPTION; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 183 "../../../src/mesa/program/program_lexer.l"
{ return OUTPUT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 184 "../../../src/mesa/program/program_lexer.l"
{ return PARAM; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 185 "../../../src/mesa/program/program_lexer.l"
{ yylval->integer = at_temp; return TEMP; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 187 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, VECTOR_OP, ABS, 3); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 188 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, BIN_OP, ADD, 3); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 189 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_ARB_vp, ARL, ARL, 3); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 191 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_ARB_fp, TRI_OP, CMP, 3); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 192 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_ARB_fp, SCALAR_OP, COS, 3); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 194 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_NV_fp,  VECTOR_OP, DDX, 3); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 195 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_NV_fp,  VECTOR_OP, DDY, 3); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 196 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, BIN_OP, DP3, 3); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 197 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, BIN_OP, DP4, 3); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 198 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, BIN_OP, DPH, 3); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 199 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, BIN_OP, DST, 3); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 201 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, SCALAR_OP, EX2, 3); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 202 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_ARB_vp, SCALAR_OP, EXP, 3); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 204 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, VECTOR_OP, FLR, 3); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 205 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, VECTOR_OP, FRC, 3); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 207 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_ARB_fp, KIL, KIL, 3); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 209 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, VECTOR_OP, LIT, 3); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 210 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, SCALAR_OP, LG2, 3); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 211 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_ARB_vp, SCALAR_OP, LOG, 3); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 212 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_ARB_fp, TRI_OP, LRP, 3); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 214 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, TRI_OP, MAD, 3); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 215 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, BIN_OP, MAX, 3); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 216 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, BIN_OP, MIN, 3); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 217 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, VECTOR_OP, MOV, 3); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 218 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, BIN_OP, MUL, 3); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 220 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, BINSC_OP, POW, 3); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 222 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, SCALAR_OP, RCP, 3); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 223 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, SCALAR_OP, RSQ, 3); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 225 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_ARB_fp, SCALAR_OP, SCS, 3); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 226 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_NV_fp,  BIN_OP, SEQ, 3); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 227 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, BIN_OP, SGE, 3); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 228 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_NV_fp,  BIN_OP, SGT, 3); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 229 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_ARB_fp, SCALAR_OP, SIN, 3); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 230 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_NV_fp,  BIN_OP, SLE, 3); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 231 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, BIN_OP, SLT, 3); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 232 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_NV_fp,  BIN_OP, SNE, 3); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 233 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, BIN_OP, SUB, 3); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 234 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, SWZ, SWZ, 3); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 236 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_ARB_fp, SAMPLE_OP, TEX, 3); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 237 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_ARB_fp, SAMPLE_OP, TXB, 3); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 238 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_NV_fp,  TXD_OP, TXD, 3); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 239 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(require_ARB_fp, SAMPLE_OP, TXP, 3); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 241 "../../../src/mesa/program/program_lexer.l"
{ return_opcode(             1, BIN_OP, XPD, 3); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 243 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_vp, VERTEX); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 244 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_fp, FRAGMENT); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 245 "../../../src/mesa/program/program_lexer.l"
{ return PROGRAM; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 246 "../../../src/mesa/program/program_lexer.l"
{ return STATE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 247 "../../../src/mesa/program/program_lexer.l"
{ return RESULT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 249 "../../../src/mesa/program/program_lexer.l"
{ return AMBIENT; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 250 "../../../src/mesa/program/program_lexer.l"
{ return ATTENUATION; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 251 "../../../src/mesa/program/program_lexer.l"
{ return BACK; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 252 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_vp, CLIP); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 253 "../../../src/mesa/program/program_lexer.l"
{ return COLOR; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 254 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_fp, DEPTH); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 255 "../../../src/mesa/program/program_lexer.l"
{ return DIFFUSE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 256 "../../../src/mesa/program/program_lexer.l"
{ return DIRECTION; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 257 "../../../src/mesa/program/program_lexer.l"
{ return EMISSION; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 258 "../../../src/mesa/program/program_lexer.l"
{ return ENV; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 259 "../../../src/mesa/program/program_lexer.l"
{ return EYE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 260 "../../../src/mesa/program/program_lexer.l"
{ return FOGCOORD; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 261 "../../../src/mesa/program/program_lexer.l"
{ return FOG; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 262 "../../../src/mesa/program/program_lexer.l"
{ return FRONT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 263 "../../../src/mesa/program/program_lexer.l"
{ return HALF; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 264 "../../../src/mesa/program/program_lexer.l"
{ return INVERSE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 265 "../../../src/mesa/program/program_lexer.l"
{ return INVTRANS; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 266 "../../../src/mesa/program/program_lexer.l"
{ return LIGHT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 267 "../../../src/mesa/program/program_lexer.l"
{ return LIGHTMODEL; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 268 "../../../src/mesa/program/program_lexer.l"
{ return LIGHTPROD; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 269 "../../../src/mesa/program/program_lexer.l"
{ return LOCAL; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 270 "../../../src/mesa/program/program_lexer.l"
{ return MATERIAL; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 271 "../../../src/mesa/program/program_lexer.l"
{ return MAT_PROGRAM; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 272 "../../../src/mesa/program/program_lexer.l"
{ return MATRIX; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 273 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_vp, MATRIXINDEX); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 274 "../../../src/mesa/program/program_lexer.l"
{ return MODELVIEW; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 275 "../../../src/mesa/program/program_lexer.l"
{ return MVP; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 276 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_vp, NORMAL); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 277 "../../../src/mesa/program/program_lexer.l"
{ return OBJECT; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 278 "../../../src/mesa/program/program_lexer.l"
{ return PALETTE; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 279 "../../../src/mesa/program/program_lexer.l"
{ return PARAMS; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 280 "../../../src/mesa/program/program_lexer.l"
{ return PLANE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 281 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_vp, POINT_TOK); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 282 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_vp, POINTSIZE); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 283 "../../../src/mesa/program/program_lexer.l"
{ return POSITION; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 284 "../../../src/mesa/program/program_lexer.l"
{ return PRIMARY; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 285 "../../../src/mesa/program/program_lexer.l"
{ return PROJECTION; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 286 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_fp, RANGE); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 287 "../../../src/mesa/program/program_lexer.l"
{ return ROW; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 288 "../../../src/mesa/program/program_lexer.l"
{ return SCENECOLOR; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 289 "../../../src/mesa/program/program_lexer.l"
{ return SECONDARY; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 290 "../../../src/mesa/program/program_lexer.l"
{ return SHININESS; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 291 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_vp, SIZE_TOK); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 292 "../../../src/mesa/program/program_lexer.l"
{ return SPECULAR; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 293 "../../../src/mesa/program/program_lexer.l"
{ return SPOT; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 294 "../../../src/mesa/program/program_lexer.l"
{ return TEXCOORD; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 295 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_fp, TEXENV); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 296 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_vp, TEXGEN); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 297 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_vp, TEXGEN_Q); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 298 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_vp, TEXGEN_S); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 299 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_vp, TEXGEN_T); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 300 "../../../src/mesa/program/program_lexer.l"
{ return TEXTURE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 301 "../../../src/mesa/program/program_lexer.l"
{ return TRANSPOSE; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 302 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_vp, VTXATTRIB); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 303 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_DOT(require_ARB_vp, WEIGHT); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 305 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_fp, TEXTURE_UNIT); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 306 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_fp, TEX_1D); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 307 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_fp, TEX_2D); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 308 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_fp, TEX_3D); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 309 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_fp, TEX_CUBE); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 310 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_fp && require_rect, TEX_RECT); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 311 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_fp && require_shadow, TEX_SHADOW1D); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 312 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_fp && require_shadow, TEX_SHADOW2D); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 313 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_fp && require_shadow && require_rect, TEX_SHADOWRECT); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 314 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_fp && require_texarray, TEX_ARRAY1D); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 315 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_fp && require_texarray, TEX_ARRAY2D); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 316 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_fp && require_shadow && require_texarray, TEX_ARRAYSHADOW1D); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 317 "../../../src/mesa/program/program_lexer.l"
{ return_token_or_IDENTIFIER(require_ARB_fp && require_shadow && require_texarray, TEX_ARRAYSHADOW2D); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 319 "../../../src/mesa/program/program_lexer.l"
{ return handle_ident(yyextra, yytext, yylval); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 321 "../../../src/mesa/program/program_lexer.l"
{ return DOT_DOT; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 323 "../../../src/mesa/program/program_lexer.l"
{
   yylval->integer = strtol(yytext, NULL, 10);
   return INTEGER;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 327 "../../../src/mesa/program/program_lexer.l"
{
   yylval->real = _mesa_strtof(yytext, NULL);
   return REAL;
}
	YY_BREAK
case 131:
/* rule 131 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 331 "../../../src/mesa/program/program_lexer.l"
{
   yylval->real = _mesa_strtof(yytext, NULL);
   return REAL;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 335 "../../../src/mesa/program/program_lexer.l"
{
   yylval->real = _mesa_strtof(yytext, NULL);
   return REAL;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 339 "../../../src/mesa/program/program_lexer.l"
{
   yylval->real = _mesa_strtof(yytext, NULL);
   return REAL;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 344 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = SWIZZLE_NOOP;
   yylval->swiz_mask.mask = WRITEMASK_XYZW;
   return MASK4;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 350 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = SWIZZLE_INVAL;
   yylval->swiz_mask.mask = WRITEMASK_XY
      | mask_from_char(yytext[3]);
   return MASK3;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 356 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = SWIZZLE_INVAL;
   yylval->swiz_mask.mask = WRITEMASK_XZW;
   return MASK3;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 361 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = SWIZZLE_INVAL;
   yylval->swiz_mask.mask = WRITEMASK_YZW;
   return MASK3;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 367 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = SWIZZLE_INVAL;
   yylval->swiz_mask.mask = WRITEMASK_X
      | mask_from_char(yytext[2]);
   return MASK2;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 373 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = SWIZZLE_INVAL;
   yylval->swiz_mask.mask = WRITEMASK_Y
      | mask_from_char(yytext[2]);
   return MASK2;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 379 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = SWIZZLE_INVAL;
   yylval->swiz_mask.mask = WRITEMASK_ZW;
   return MASK2;
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 385 "../../../src/mesa/program/program_lexer.l"
{
   const unsigned s = swiz_from_char(yytext[1]);
   yylval->swiz_mask.swizzle = MAKE_SWIZZLE4(s, s, s, s);
   yylval->swiz_mask.mask = mask_from_char(yytext[1]);
   return MASK1; 
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 392 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = MAKE_SWIZZLE4(swiz_from_char(yytext[1]),
					    swiz_from_char(yytext[2]),
					    swiz_from_char(yytext[3]),
					    swiz_from_char(yytext[4]));
   yylval->swiz_mask.mask = 0;
   return SWIZZLE;
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 401 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = SWIZZLE_NOOP;
   yylval->swiz_mask.mask = WRITEMASK_XYZW;
   return_token_or_DOT(require_ARB_fp, MASK4);
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 407 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = SWIZZLE_INVAL;
   yylval->swiz_mask.mask = WRITEMASK_XY
      | mask_from_char(yytext[3]);
   return_token_or_DOT(require_ARB_fp, MASK3);
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 413 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = SWIZZLE_INVAL;
   yylval->swiz_mask.mask = WRITEMASK_XZW;
   return_token_or_DOT(require_ARB_fp, MASK3);
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 418 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = SWIZZLE_INVAL;
   yylval->swiz_mask.mask = WRITEMASK_YZW;
   return_token_or_DOT(require_ARB_fp, MASK3);
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 424 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = SWIZZLE_INVAL;
   yylval->swiz_mask.mask = WRITEMASK_X
      | mask_from_char(yytext[2]);
   return_token_or_DOT(require_ARB_fp, MASK2);
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 430 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = SWIZZLE_INVAL;
   yylval->swiz_mask.mask = WRITEMASK_Y
      | mask_from_char(yytext[2]);
   return_token_or_DOT(require_ARB_fp, MASK2);
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 436 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = SWIZZLE_INVAL;
   yylval->swiz_mask.mask = WRITEMASK_ZW;
   return_token_or_DOT(require_ARB_fp, MASK2);
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 442 "../../../src/mesa/program/program_lexer.l"
{
   const unsigned s = swiz_from_char(yytext[1]);
   yylval->swiz_mask.swizzle = MAKE_SWIZZLE4(s, s, s, s);
   yylval->swiz_mask.mask = mask_from_char(yytext[1]);
   return_token_or_DOT(require_ARB_fp, MASK1);
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 450 "../../../src/mesa/program/program_lexer.l"
{
   if (require_ARB_vp) {
      return TEXGEN_R;
   } else {
      yylval->swiz_mask.swizzle = MAKE_SWIZZLE4(SWIZZLE_X, SWIZZLE_X,
						SWIZZLE_X, SWIZZLE_X);
      yylval->swiz_mask.mask = WRITEMASK_X;
      return MASK1;
   }
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 461 "../../../src/mesa/program/program_lexer.l"
{
   yylval->swiz_mask.swizzle = MAKE_SWIZZLE4(swiz_from_char(yytext[1]),
					    swiz_from_char(yytext[2]),
					    swiz_from_char(yytext[3]),
					    swiz_from_char(yytext[4]));
   yylval->swiz_mask.mask = 0;
   return_token_or_DOT(require_ARB_fp, SWIZZLE);
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 470 "../../../src/mesa/program/program_lexer.l"
{ return DOT; }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 472 "../../../src/mesa/program/program_lexer.l"
{
   yylloc->first_line++;
   yylloc->first_column = 1;
   yylloc->last_line++;
   yylloc->last_column = 1;
   yylloc->position++;
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 479 "../../../src/mesa/program/program_lexer.l"
/* eat whitespace */ ;
	YY_BREAK
case 156:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 480 "../../../src/mesa/program/program_lexer.l"
/* eat comments */ ;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 481 "../../../src/mesa/program/program_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 482 "../../../src/mesa/program/program_lexer.l"
ECHO;
	YY_BREAK
#line 2382 "program/lex.yy.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * _mesa_program_lexer_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( _mesa_program_lexer_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of _mesa_program_lexer_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					_mesa_program_lexer_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			_mesa_program_lexer_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _mesa_program_lexer_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 779 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 779 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 778);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					_mesa_program_lexer_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( _mesa_program_lexer_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @@param input_file A readable stream.
 * @@param yyscanner The scanner object.
 * @@note This function does not reset the start condition to @@c INITIAL .
 */
    void _mesa_program_lexer_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        _mesa_program_lexer_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            _mesa_program_lexer__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	_mesa_program_lexer__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	_mesa_program_lexer__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @@param new_buffer The new input buffer.
 * @@param yyscanner The scanner object.
 */
    void _mesa_program_lexer__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		_mesa_program_lexer_pop_buffer_state();
	 *		_mesa_program_lexer_push_buffer_state(new_buffer);
     */
	_mesa_program_lexer_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	_mesa_program_lexer__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (_mesa_program_lexer_wrap()) processing, but the only time this flag
	 * is looked at is after _mesa_program_lexer_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void _mesa_program_lexer__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @@param file A readable stream.
 * @@param size The character buffer size in bytes. When in doubt, use @@c YY_BUF_SIZE.
 * @@param yyscanner The scanner object.
 * @@return the allocated buffer state.
 */
    YY_BUFFER_STATE _mesa_program_lexer__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) _mesa_program_lexer_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_program_lexer__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) _mesa_program_lexer_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_program_lexer__create_buffer()" );

	b->yy_is_our_buffer = 1;

	_mesa_program_lexer__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @@param b a buffer created with _mesa_program_lexer__create_buffer()
 * @@param yyscanner The scanner object.
 */
    void _mesa_program_lexer__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		_mesa_program_lexer_free((void *) b->yy_ch_buf ,yyscanner );

	_mesa_program_lexer_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a _mesa_program_lexer_restart() or at EOF.
 */
    static void _mesa_program_lexer__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	_mesa_program_lexer__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then _mesa_program_lexer__init_buffer was _probably_
     * called from _mesa_program_lexer_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @@param b the buffer state to be flushed, usually @@c YY_CURRENT_BUFFER.
 * @@param yyscanner The scanner object.
 */
    void _mesa_program_lexer__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		_mesa_program_lexer__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @@param new_buffer The new state.
 *  @@param yyscanner The scanner object.
 */
void _mesa_program_lexer_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	_mesa_program_lexer_ensure_buffer_stack(yyscanner);

	/* This block is copied from _mesa_program_lexer__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from _mesa_program_lexer__switch_to_buffer. */
	_mesa_program_lexer__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @@param yyscanner The scanner object.
 */
void _mesa_program_lexer_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	_mesa_program_lexer__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		_mesa_program_lexer__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void _mesa_program_lexer_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_program_lexer_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_program_lexer_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)_mesa_program_lexer_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in _mesa_program_lexer_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @@param base the character buffer
 * @@param size the size in bytes of the character buffer
 * @@param yyscanner The scanner object.
 * @@return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE _mesa_program_lexer__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) _mesa_program_lexer_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_program_lexer__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	_mesa_program_lexer__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to _mesa_program_lexer_lex() will
 * scan from a @@e copy of @@a str.
 * @@param yystr a NUL-terminated string to scan
 * @@param yyscanner The scanner object.
 * @@return the newly allocated buffer state object.
 * @@note If you want to scan bytes that may contain NUL values, then use
 *       _mesa_program_lexer__scan_bytes() instead.
 */
YY_BUFFER_STATE _mesa_program_lexer__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return _mesa_program_lexer__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to _mesa_program_lexer_lex() will
 * scan from a @@e copy of @@a bytes.
 * @@param yybytes the byte buffer to scan
 * @@param _yybytes_len the number of bytes in the buffer pointed to by @@a bytes.
 * @@param yyscanner The scanner object.
 * @@return the newly allocated buffer state object.
 */
YY_BUFFER_STATE _mesa_program_lexer__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) _mesa_program_lexer_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in _mesa_program_lexer__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = _mesa_program_lexer__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in _mesa_program_lexer__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @@param yyscanner The scanner object.
 */
YY_EXTRA_TYPE _mesa_program_lexer_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @@param yyscanner The scanner object.
 */
int _mesa_program_lexer_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @@param yyscanner The scanner object.
 */
int _mesa_program_lexer_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @@param yyscanner The scanner object.
 */
FILE *_mesa_program_lexer_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @@param yyscanner The scanner object.
 */
FILE *_mesa_program_lexer_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @@param yyscanner The scanner object.
 */
yy_size_t _mesa_program_lexer_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @@param yyscanner The scanner object.
 */

char *_mesa_program_lexer_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @@param user_defined The data to be associated with this scanner.
 * @@param yyscanner The scanner object.
 */
void _mesa_program_lexer_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @@param line_number
 * @@param yyscanner The scanner object.
 */
void _mesa_program_lexer_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "_mesa_program_lexer_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @@param line_number
 * @@param yyscanner The scanner object.
 */
void _mesa_program_lexer_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "_mesa_program_lexer_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @@param in_str A readable stream.
 * @@param yyscanner The scanner object.
 * @@see _mesa_program_lexer__switch_to_buffer
 */
void _mesa_program_lexer_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void _mesa_program_lexer_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int _mesa_program_lexer_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void _mesa_program_lexer_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * _mesa_program_lexer_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void _mesa_program_lexer_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *_mesa_program_lexer_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void _mesa_program_lexer_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* _mesa_program_lexer_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int _mesa_program_lexer_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) _mesa_program_lexer_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* _mesa_program_lexer_lex_init_extra has the same functionality as _mesa_program_lexer_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to _mesa_program_lexer_alloc in
 * the yyextra field.
 */

int _mesa_program_lexer_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    _mesa_program_lexer_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) _mesa_program_lexer_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    _mesa_program_lexer_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from _mesa_program_lexer_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * _mesa_program_lexer_lex_init()
     */
    return 0;
}

/* _mesa_program_lexer_lex_destroy is for both reentrant and non-reentrant scanners. */
int _mesa_program_lexer_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		_mesa_program_lexer__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		_mesa_program_lexer_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	_mesa_program_lexer_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        _mesa_program_lexer_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * _mesa_program_lexer_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    _mesa_program_lexer_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *_mesa_program_lexer_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *_mesa_program_lexer_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void _mesa_program_lexer_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see _mesa_program_lexer_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 482 "../../../src/mesa/program/program_lexer.l"



void
_mesa_program_lexer_ctor(void **scanner, struct asm_parser_state *state,
			 const char *string, size_t len)
{
   _mesa_program_lexer_lex_init_extra(state,scanner);
   _mesa_program_lexer__scan_bytes(string,len,*scanner);
}

void
_mesa_program_lexer_dtor(void *scanner)
{
   _mesa_program_lexer_lex_destroy(scanner);
}

@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d11 2
a12 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
a161 7
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
a162 1
#endif /* __ia64__ */
d330 1
a330 1
#define _mesa_program_lexer_wrap(yyscanner) (/*CONSTCOND*/1)
a341 3
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
d452 1
a452 1
static yyconst YY_CHAR yy_ec[256] =
d484 1
a484 1
static yyconst YY_CHAR yy_meta[68] =
d495 1
a495 1
static yyconst flex_uint16_t yy_base[782] =
d675 1
a675 1
static yyconst flex_uint16_t yy_nxt[1276] =
d970 2
a971 2
#line 1 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
#line 2 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1127 1
a1127 1
#line 1139 "program/lex.yy.c"
d1208 1
a1208 1
void _mesa_program_lexer_set_in  (FILE * _in_str ,yyscan_t yyscanner );
d1212 1
a1212 1
void _mesa_program_lexer_set_out  (FILE * _out_str ,yyscan_t yyscanner );
d1220 1
a1220 1
void _mesa_program_lexer_set_lineno (int _line_number ,yyscan_t yyscanner );
d1224 1
a1224 1
void _mesa_program_lexer_set_column (int _column_no ,yyscan_t yyscanner );
a1245 2
#ifndef YY_NO_UNPUT
    
a1247 2
#endif

a1267 4
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
a1268 1
#endif /* __ia64__ */
d1357 1
a1357 1
#define YY_BREAK /*LINTED*/break;
d1367 3
a1369 3
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
d1403 1
a1403 1
#line 171 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1406 1
a1406 1
#line 1427 "program/lex.yy.c"
d1408 1
a1408 1
	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
d1424 1
a1424 1
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
d1465 1
a1465 1
#line 173 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1470 1
a1470 1
#line 174 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1475 1
a1475 1
#line 175 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1483 1
a1483 1
#line 179 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1488 1
a1488 1
#line 180 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1493 1
a1493 1
#line 181 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1498 1
a1498 1
#line 182 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1503 1
a1503 1
#line 183 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1508 1
a1508 1
#line 184 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1513 1
a1513 1
#line 185 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1518 1
a1518 1
#line 187 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1523 1
a1523 1
#line 188 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1528 1
a1528 1
#line 189 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1533 1
a1533 1
#line 191 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1538 1
a1538 1
#line 192 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1543 1
a1543 1
#line 194 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1548 1
a1548 1
#line 195 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1553 1
a1553 1
#line 196 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1558 1
a1558 1
#line 197 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1563 1
a1563 1
#line 198 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1568 1
a1568 1
#line 199 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1573 1
a1573 1
#line 201 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1578 1
a1578 1
#line 202 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1583 1
a1583 1
#line 204 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1588 1
a1588 1
#line 205 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1593 1
a1593 1
#line 207 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1598 1
a1598 1
#line 209 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1603 1
a1603 1
#line 210 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1608 1
a1608 1
#line 211 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1613 1
a1613 1
#line 212 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1618 1
a1618 1
#line 214 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1623 1
a1623 1
#line 215 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1628 1
a1628 1
#line 216 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1633 1
a1633 1
#line 217 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1638 1
a1638 1
#line 218 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1643 1
a1643 1
#line 220 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1648 1
a1648 1
#line 222 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1653 1
a1653 1
#line 223 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1658 1
a1658 1
#line 225 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1663 1
a1663 1
#line 226 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1668 1
a1668 1
#line 227 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1673 1
a1673 1
#line 228 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1678 1
a1678 1
#line 229 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1683 1
a1683 1
#line 230 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1688 1
a1688 1
#line 231 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1693 1
a1693 1
#line 232 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1698 1
a1698 1
#line 233 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1703 1
a1703 1
#line 234 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1708 1
a1708 1
#line 236 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1713 1
a1713 1
#line 237 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1718 1
a1718 1
#line 238 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1723 1
a1723 1
#line 239 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1728 1
a1728 1
#line 241 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1733 1
a1733 1
#line 243 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1738 1
a1738 1
#line 244 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1743 1
a1743 1
#line 245 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1748 1
a1748 1
#line 246 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1753 1
a1753 1
#line 247 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1758 1
a1758 1
#line 249 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1763 1
a1763 1
#line 250 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1768 1
a1768 1
#line 251 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1773 1
a1773 1
#line 252 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1778 1
a1778 1
#line 253 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1783 1
a1783 1
#line 254 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1788 1
a1788 1
#line 255 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1793 1
a1793 1
#line 256 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1798 1
a1798 1
#line 257 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1803 1
a1803 1
#line 258 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1808 1
a1808 1
#line 259 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1813 1
a1813 1
#line 260 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1818 1
a1818 1
#line 261 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1823 1
a1823 1
#line 262 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1828 1
a1828 1
#line 263 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1833 1
a1833 1
#line 264 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1838 1
a1838 1
#line 265 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1843 1
a1843 1
#line 266 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1848 1
a1848 1
#line 267 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1853 1
a1853 1
#line 268 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1858 1
a1858 1
#line 269 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1863 1
a1863 1
#line 270 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1868 1
a1868 1
#line 271 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1873 1
a1873 1
#line 272 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1878 1
a1878 1
#line 273 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1883 1
a1883 1
#line 274 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1888 1
a1888 1
#line 275 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1893 1
a1893 1
#line 276 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1898 1
a1898 1
#line 277 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1903 1
a1903 1
#line 278 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1908 1
a1908 1
#line 279 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1913 1
a1913 1
#line 280 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1918 1
a1918 1
#line 281 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1923 1
a1923 1
#line 282 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1928 1
a1928 1
#line 283 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1933 1
a1933 1
#line 284 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1938 1
a1938 1
#line 285 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1943 1
a1943 1
#line 286 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1948 1
a1948 1
#line 287 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1953 1
a1953 1
#line 288 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1958 1
a1958 1
#line 289 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1963 1
a1963 1
#line 290 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1968 1
a1968 1
#line 291 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1973 1
a1973 1
#line 292 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1978 1
a1978 1
#line 293 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1983 1
a1983 1
#line 294 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1988 1
a1988 1
#line 295 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1993 1
a1993 1
#line 296 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d1998 1
a1998 1
#line 297 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2003 1
a2003 1
#line 298 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2008 1
a2008 1
#line 299 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2013 1
a2013 1
#line 300 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2018 1
a2018 1
#line 301 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2023 1
a2023 1
#line 302 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2028 1
a2028 1
#line 303 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2033 1
a2033 1
#line 305 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2038 1
a2038 1
#line 306 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2043 1
a2043 1
#line 307 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2048 1
a2048 1
#line 308 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2053 1
a2053 1
#line 309 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2058 1
a2058 1
#line 310 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2063 1
a2063 1
#line 311 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2068 1
a2068 1
#line 312 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2073 1
a2073 1
#line 313 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2078 1
a2078 1
#line 314 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2083 1
a2083 1
#line 315 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2088 1
a2088 1
#line 316 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2093 1
a2093 1
#line 317 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2098 1
a2098 1
#line 319 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2103 1
a2103 1
#line 321 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2108 1
a2108 1
#line 323 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2116 1
a2116 1
#line 327 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2129 1
a2129 1
#line 331 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2137 1
a2137 1
#line 335 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2145 1
a2145 1
#line 339 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2153 1
a2153 1
#line 344 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2162 1
a2162 1
#line 350 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2172 1
a2172 1
#line 356 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2181 1
a2181 1
#line 361 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2190 1
a2190 1
#line 367 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2200 1
a2200 1
#line 373 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2210 1
a2210 1
#line 379 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2219 1
a2219 1
#line 385 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2229 1
a2229 1
#line 392 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2241 1
a2241 1
#line 401 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2250 1
a2250 1
#line 407 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2260 1
a2260 1
#line 413 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2269 1
a2269 1
#line 418 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2278 1
a2278 1
#line 424 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2288 1
a2288 1
#line 430 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2298 1
a2298 1
#line 436 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2307 1
a2307 1
#line 442 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2317 1
a2317 1
#line 450 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2331 1
a2331 1
#line 461 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2343 1
a2343 1
#line 470 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2349 1
a2349 1
#line 472 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2360 1
a2360 1
#line 479 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2368 1
a2368 1
#line 480 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2373 1
a2373 1
#line 481 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2378 1
a2378 1
#line 482 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
d2381 1
a2381 1
#line 2402 "program/lex.yy.c"
d2525 3
a2527 3
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
d2556 1
a2556 1
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;
d2659 2
a2660 2
	yy_state_type yy_current_state;
	char *yy_cp;
d2667 1
a2667 1
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
d2692 1
a2692 1
	int yy_is_jam;
d2694 1
a2694 1
	char *yy_cp = yyg->yy_c_buf_p;
d2696 1
a2696 1
	YY_CHAR yy_c = 1;
d2715 1
a2715 3
#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
d2717 1
a2717 1
	char *yy_cp;
d2728 2
a2729 2
		yy_size_t number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
d2731 1
a2731 1
		char *source =
a2752 2
#endif

d2906 1
a2906 1
	b->yy_buf_size = (yy_size_t)size;
d3067 1
a3067 1
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
d3084 1
a3084 1
		yy_size_t grow_size = 8 /* arbitrary grow size */;
d3192 1
a3192 3
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
d3298 1
a3298 1
 * @@param _line_number line number
d3301 1
a3301 1
void _mesa_program_lexer_set_lineno (int  _line_number , yyscan_t yyscanner)
d3309 1
a3309 1
    yylineno = _line_number;
d3313 1
a3313 1
 * @@param _column_no column number
d3316 1
a3316 1
void _mesa_program_lexer_set_column (int  _column_no , yyscan_t yyscanner)
d3324 1
a3324 1
    yycolumn = _column_no;
d3329 1
a3329 1
 * @@param _in_str A readable stream.
d3333 1
a3333 1
void _mesa_program_lexer_set_in (FILE *  _in_str , yyscan_t yyscanner)
d3336 1
a3336 1
    yyin = _in_str ;
d3339 1
a3339 1
void _mesa_program_lexer_set_out (FILE *  _out_str , yyscan_t yyscanner)
d3342 1
a3342 1
    yyout = _out_str ;
d3351 1
a3351 1
void _mesa_program_lexer_set_debug (int  _bdebug , yyscan_t yyscanner)
d3354 1
a3354 1
    yy_flex_debug = _bdebug ;
d3517 1
a3517 4
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
d3526 1
a3526 1
	int n;
a3535 2
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
a3540 3
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

a3552 2
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
d3558 1
a3558 1
#line 482 "/home/emil/development/mesa/src/mesa/program/program_lexer.l"
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@d12 1
a12 1
#define YY_FLEX_SUBMINOR_VERSION 1
d91 16
a106 1
/* TODO: this is always defined, so inline it */
a107 3

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
d109 1
a109 1
#define yynoreturn
d222 1
a222 1
	int yy_buf_size;
d227 1
a227 1
	int yy_n_chars;
d306 1
a306 1
YY_BUFFER_STATE _mesa_program_lexer__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );
d350 4
a353 1
static void yynoreturn yy_fatal_error (yyconst char* msg ,yyscan_t yyscanner );
d360 1
a360 1
	yyleng = (int) (yy_cp - yy_bp); \
d365 2
a366 2
#define YY_NUM_RULES 151
#define YY_END_OF_BUFFER 152
d374 1
a374 1
static yyconst flex_int16_t yy_accept[675] =
d376 15
a390 38
        0,    0,  152,  150,  148,  147,  150,  150,  120,  146,
      122,  122,  122,  122,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  148,    0,    0,  149,  120,    0,
      121,  123,  143,  143,    0,    0,    0,    0,  143,    0,
        0,    0,    0,    0,    0,    0,  100,  144,  101,  102,
      134,  134,  134,  134,    0,  122,    0,  108,  109,  110,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  142,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  141,  141,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      140,  140,  140,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  131,  131,  131,  132,  132,  133,  124,
      123,  124,    0,  125,   11,   12,  120,   13,  120,  120,
       14,   15,  120,   16,   17,   18,   19,    6,   20,   21,
       22,   23,   24,   26,   25,   27,   28,   29,   30,   31,

       32,   33,  120,  120,  120,   34,   35,  120,   36,   37,
       38,  120,   39,   40,   41,   42,  120,   43,   44,   45,
       46,  120,  120,  120,  120,  120,  120,    0,    0,    0,
        0,  123,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   61,   62,   64,    0,  139,    0,    0,    0,
        0,    0,    0,   78,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  138,  137,  137,   90,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  128,  128,
      129,  130,    0,  126,  120,  120,  120,  120,  120,  120,
      120,  120,  111,  120,  120,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  112,  120,  120,  120,  120,  120,  120,
      120,  120,   10,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,    0,  145,    0,    0,    0,   54,   55,
        0,    0,    0,    0,    0,    0,    0,   66,    0,    0,
d392 69
a460 35
        0,    0,    0,    0,    0,    0,  136,    0,    0,    0,
       94,    0,   96,    0,    0,    0,    0,    0,    0,  135,
      127,  120,  120,  120,    4,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,    9,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,   50,  120,  120,    0,    0,    0,
        0,    0,   56,   57,    0,    0,    0,    0,   65,    0,
        0,   69,   72,    0,    0,    0,    0,    0,    0,    0,
       83,   84,    0,    0,    0,    0,   89,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  120,  120,  120,
      120,  120,  120,    5,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,    7,    8,  120,  120,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  120,   51,
      120,   47,    0,    0,    0,    0,  105,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   75,    0,   79,   80,
        0,   82,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   98,   99,    0,    0,  106,   11,    3,   12,
      116,  117,  120,   14,   15,   16,   17,   18,   19,   20,
       22,   23,   26,   25,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,  120,  120,  120,   39,   40,
       41,   42,   43,   44,   45,   46,  120,   49,  107,    0,
        0,   52,    0,   58,    0,    0,    0,   67,    0,    0,

        0,    0,    0,    0,   81,    0,    0,   87,   74,    0,
        0,    0,    0,    0,    0,  103,    0,  120,  113,  114,
      120,   48,    0,    0,    0,    0,   60,   63,   68,    0,
        0,   73,    0,    0,    0,   86,    0,    0,    0,    0,
       95,   97,    0,  120,  120,    2,    1,    0,   59,    0,
       71,    0,   77,   85,    0,    0,   92,   93,  104,  120,
      115,    0,   70,    0,   88,   91,  120,   53,   76,  120,
      120,  118,  119,    0
d506 1
a506 1
static yyconst flex_uint16_t yy_base[678] =
d508 76
a583 54
        0,    0,  954,  955,   66,  955,  948,  949,    0,   69,
       85,  128,  140,  152,  151,   58,   39,   48,   75,  927,
      158,  160,   73,   59,   71,  170,   54,  920,  890,  889,
      901,  885,  899,  898,  142,  927,  939,  955,    0,  206,
      955,  189,  168,  171,   53,   27,   66,  119,  175,  899,
      885,  123,  170,  883,  895,  183,  955,  198,  225,   99,
      212,  219,  223,  227,  285,  297,  308,  955,  955,  955,
      904,  917,  911,  165,  900,  903,  899,  914,  224,  896,
      910,  194,  896,  909,  900,  913,  890,  901,  892,  294,
      893,  884,  893,  884,  883,  884,  878,  884,  895,  881,

      878,  890,  893,  880,  873,  889,  865,  193,  139,  885,
      861,  846,  841,  858,  834,  839,  865,  167,  854,  259,
      849,  325,  282,  851,  832,  302,  842,  838,  833,   43,
      839,  825,  841,  838,  829,  305,  309,  831,  820,  834,
      837,  819,  834,  821,  818,  825,  275,  833,  254,  299,
      317,  327,  331,  810,  827,  828,  821,  803,  310,  804,
      826,  817,  316,  327,  331,  335,  339,  343,  347,  955,
      405,  416,  422,  428,  825,  240,  849,    0,  848,  831,
      821,  820,  840,  818,  817,  816,  815,    0,  814,    0,
      813,  812,    0,  811,  810,    0,  809,  808,  807,  806,

      805,  804,  820,  813,  826,  800,  799,  805,  797,  796,
      795,  816,  793,  792,  791,  790,  800,  788,  787,  786,
      785,  777,  776,  761,  761,  760,  759,  802,  774,  762,
      434,  442,  416,  766,  186,  763,  757,  757,  751,  764,
      764,  749,  955,  955,  764,  752,  418,  759,  281,  756,
      762,  308,  757,  955,  748,  755,  754,  757,  743,  742,
      746,  741,  278,  746,  420,  428,  430,  955,  738,  736,
      736,  744,  745,  727,  421,  732,  738,  419,  426,  430,
      434,  438,  496,  502,  752,  764,  750,  749,  742,  756,
      746,  745,    0,  744,  743,  742,  741,  740,  739,  738,

      737,  736,  735,  734,  733,  732,  731,  730,  733,  726,
      733,  726,  725,    0,  724,  723,  722,  725,  720,  719,
      718,  717,    0,  716,  715,  714,  713,  691,  685,  690,
      696,  679,  694,  315,  955,  693,  683,  687,  955,  955,
      677,  686,  672,  689,  672,  675,  669,  955,  670,  669,
      666,  673,  666,  674,  670,  680,  677,  659,  665,  672,
      656,  655,  673,  655,  667,  666,  955,  665,  655,  659,
      955,  646,  955,  651,  651,  659,  642,  643,  653,  955,
      955,  685,  667,  683,    0,  507,  681,  681,  680,  679,
      678,  677,  676,  675,  674,  673,  672,  671,  670,  669,

      668,  667,  666,  665,  652,  645,    0,  662,  661,  660,
      659,  658,  636,  656,  655,  654,  653,  652,  651,  650,
      649,  618,  621,  601,    0,  602,  595,  602,  601,  602,
      594,  612,  955,  955,  594,  592,  602,  595,  955,  590,
      607,  330,  955,  598,  582,  583,  592,  583,  582,  582,
      955,  581,  590,  580,  596,  593,  955,  592,  590,  579,
      580,  576,  568,  575,  570,  571,  566,  592,  592,  590,
      604,  603,  598,    0,  586,  585,  584,  583,  582,  581,
      580,  579,  578,  577,  576,  575,  574,  573,  572,  571,
      570,    0,    0,  569,  568,  567,  566,  565,  509,  564,
d585 9
a593 19
      563,  562,  561,  560,  559,  558,  557,  535,  535,    0,
      542,    0,  576,  575,  524,  542,  955,  537,  532,  525,
      521,  533,  523,  521,  517,  533,  524,  523,  955,  955,
      526,  955,  521,  514,  503,  514,  506,  510,  523,  518,
      521,  503,  955,  955,  515,  504,  955,    0,    0,    0,
        0,    0,  543,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  539,  538,  536,    0,    0,
        0,    0,    0,    0,    0,    0,  494,    0,    0,  545,
      544,  955,  491,  955,  495,  495,  504,  955,  488,  502,

      483,  485,  482,  490,  955,  468,  479,  955,  955,  483,
      479,  472,  470,  470,  483,  955,  467,  507,    0,    0,
      507,    0,  514,  513,  472,  433,  955,  955,  955,  435,
      435,  955,  429,  386,  377,  955,  366,  365,  323,  328,
      955,  955,  339,  348,  337,  955,  955,  307,  955,  305,
      955,  257,  955,  955,  247,  221,  955,  955,  955,  236,
        0,  213,  955,  150,  955,  955,  232,  955,  955,  162,
      138,    0,    0,  955,  541,  108,  544
d596 1
a596 1
static yyconst flex_int16_t yy_def[678] =
d598 86
a683 74
      674,    1,  674,  674,  674,  674,  674,  675,  676,  674,
      674,  674,  674,  674,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  674,  674,  675,  674,  676,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  677,  674,  674,  674,  674,  674,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  676,  676,  676,
      676,  676,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  676,  676,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  676,
      676,  674,  674,  674,  674,  674,  676,  674,  674,  676,
      676,  676,  676,    0,  674,  674,  674
d686 1
a686 1
static yyconst flex_uint16_t yy_nxt[1023] =
d694 134
a827 107
       33,    9,   34,    9,    9,    9,    9,   35,   79,   35,
       40,   80,  129,  108,   96,   81,  130,   41,   42,   42,
       42,   42,   42,   42,   76,   82,   77,   97,   98,  240,
       99,  109,   78,   65,   66,   66,   66,   66,   66,   66,

       83,  241,   94,  100,   67,  127,   84,   95,  128,   39,
       43,   44,   45,   46,   47,   48,   49,   50,   51,  131,
      132,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       67,  133,   61,   62,   63,   64,   65,   66,   66,   66,
       66,   66,   66,   35,  160,   35,   68,   67,   65,   66,
       66,   66,   66,   66,   66,  219,  673,  161,   69,   67,
       65,   66,   66,   66,   66,   66,   66,   71,  220,   72,
       70,   67,  140,   67,  134,   90,   73,  135,  141,   86,
      672,   87,   74,   91,   75,   67,   88,  101,   92,   89,
      178,  102,  103,  104,   93,  105,  179,   67,   42,   42,

       42,   42,   42,   42,  106,  189,  107,   40,  122,  123,
      123,  142,  126,  123,  669,  123,  136,  137,  123,  217,
      124,  124,  123,  190,  147,  143,  123,  125,  125,  123,
      218,  337,  144,  123,  122,  148,  184,  185,  149,  151,
      152,  150,  670,  671,  338,  153,  186,  118,  119,   45,
       46,   47,   48,  154,   50,   51,  123,  162,   52,   53,
       54,   55,   56,   57,  120,   59,   60,  668,  155,  121,
      156,  286,  667,  157,  158,  163,  163,  163,  163,  666,
      287,  159,  164,  163,  165,  166,  167,  163,  163,  168,
      169,  163,  163,  163,  171,  171,  171,  171,  171,  171,

      230,  665,  664,  260,  172,   65,   66,   66,   66,   66,
       66,   66,  198,  261,  154,  173,   67,  174,  174,  174,
      174,  174,  174,  233,  233,  364,  349,  257,  365,  233,
      172,  199,  231,  258,  232,  232,  232,  232,  232,  232,
      233,  350,   67,  233,  233,  236,  233,  233,  262,  233,
      247,  233,  233,  353,  263,  273,  233,  663,  233,  233,
      233,  428,  662,  233,  233,  274,  354,  233,  265,  233,
      661,  264,  266,  267,  233,  233,  660,  429,  233,  278,
      278,  278,  278,  524,  659,  233,  525,  658,  657,  233,
      278,  278,  278,  278,  279,  278,  278,  280,  281,  278,

      278,  278,  278,  278,  278,  278,  282,  278,  278,  278,
      278,  278,  278,  278,   42,   42,   42,   42,   42,   42,
      656,  655,  654,  283,  122,  284,  284,  284,  284,  284,
      284,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  232,  232,  232,  232,  232,  232,  653,
      122,  232,  232,  232,  232,  232,  232,  335,  335,  335,
      335,  335,  335,  335,  374,  335,  375,  335,  376,  335,
      335,  367,  335,  652,  335,  335,  335,  335,  335,  651,
      650,  377,  380,  380,  380,  380,  335,  649,  335,  380,
      380,  380,  380,  381,  380,  380,  380,  380,  380,  380,

      380,  380,  380,  380,  380,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  471,  472,  576,
      577,  648,  647,  646,  645,  644,  643,  642,  641,  640,
      639,  638,  637,  636,  635,  634,  633,  632,  631,  473,
      578,   37,   37,   37,  170,  170,  630,  629,  628,  627,
      626,  625,  624,  623,  622,  621,  620,  619,  618,  617,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  603,  602,  601,  600,  599,  598,  597,
      596,  595,  594,  593,  592,  591,  590,  589,  588,  587,
      586,  585,  584,  583,  582,  581,  580,  579,  575,  574,

      573,  572,  571,  570,  569,  568,  567,  566,  565,  564,
      563,  562,  561,  560,  559,  558,  557,  556,  555,  554,
      553,  552,  551,  550,  549,  548,  547,  546,  545,  544,
      543,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  527,  526,  523,  522,
      521,  520,  519,  518,  517,  516,  515,  514,  513,  512,
      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,
      491,  490,  489,  488,  487,  486,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  470,  469,

      468,  467,  466,  465,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  455,  454,  453,  452,  451,  450,  449,
      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  430,  427,
      426,  425,  424,  423,  422,  421,  420,  419,  418,  417,
      416,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  379,  378,  373,  372,  371,
      370,  369,  368,  366,  363,  362,  361,  360,  359,  358,

      357,  356,  355,  352,  351,  348,  347,  346,  345,  344,
      343,  342,  341,  340,  339,  336,  264,  236,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  325,  324,  323,
      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  285,  277,  276,  275,  272,
      271,  270,  269,  268,  259,  256,  255,  254,  253,  252,
      251,  250,  249,  248,  246,  245,  244,  243,  242,  239,
      238,  237,  235,  234,  162,  229,  228,  227,  226,  225,

      224,  223,  222,  221,  216,  215,  214,  213,  212,  211,
      210,  209,  208,  207,  206,  205,  204,  203,  202,  201,
      200,  197,  196,  195,  194,  193,  192,  191,  188,  187,
      183,  182,  181,  180,  177,  176,  175,  146,  145,  139,
      138,   38,  117,  116,  115,  114,  113,  112,  111,  110,
       85,   38,   36,  674,    3,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674
d830 1
a830 1
static yyconst flex_int16_t yy_chk[1023] =
d838 4
a841 4
        1,    1,    1,    1,    1,    1,    1,    5,   17,    5,
       10,   17,   46,   27,   24,   18,   46,   10,   10,   10,
       10,   10,   10,   10,   16,   18,   16,   24,   25,  130,
       25,   27,   16,   11,   11,   11,   11,   11,   11,   11,
d843 1
a843 1
       19,  130,   23,   25,   11,   45,   19,   23,   45,  676,
d847 125
a971 98
       12,   12,   12,   35,   60,   35,   12,   12,   13,   13,
       13,   13,   13,   13,   13,  109,  671,   60,   13,   13,
       14,   14,   14,   14,   14,   14,   14,   15,  109,   15,
       14,   14,   52,   12,   48,   22,   15,   48,   52,   21,
      670,   21,   15,   22,   15,   13,   21,   26,   22,   21,
       74,   26,   26,   26,   22,   26,   74,   14,   42,   42,

       42,   42,   42,   42,   26,   82,   26,   40,   42,   43,
       43,   53,   44,   44,  664,   43,   49,   49,   44,  108,
      118,   43,   49,   82,   56,   53,   43,  118,   43,   44,
      108,  235,   53,   49,   42,   56,   79,   79,   56,   58,
       58,   56,  667,  667,  235,   58,   79,   40,   40,   40,
       40,   40,   40,   58,   40,   40,   58,   61,   40,   40,
       40,   40,   40,   40,   40,   40,   40,  662,   59,   40,
       59,  176,  660,   59,   59,   61,   61,   61,   61,  656,
      176,   59,   62,   62,   62,   62,   63,   63,   63,   63,
       64,   64,   64,   64,   65,   65,   65,   65,   65,   65,

      120,  655,  652,  149,   65,   66,   66,   66,   66,   66,
       66,   66,   90,  149,  120,   67,   66,   67,   67,   67,
       67,   67,   67,  123,  123,  263,  249,  147,  263,  123,
       65,   90,  122,  147,  122,  122,  122,  122,  122,  122,
      123,  249,   66,  126,  126,  126,  136,  136,  150,  126,
      137,  137,  136,  252,  150,  159,  137,  650,  151,  151,
      126,  334,  648,  136,  151,  159,  252,  137,  152,  152,
      645,  151,  153,  153,  152,  151,  644,  334,  153,  163,
      163,  163,  163,  442,  643,  152,  442,  640,  639,  153,
      164,  164,  164,  164,  165,  165,  165,  165,  166,  166,

      166,  166,  167,  167,  167,  167,  168,  168,  168,  168,
      169,  169,  169,  169,  171,  171,  171,  171,  171,  171,
      638,  637,  635,  172,  171,  172,  172,  172,  172,  172,
      172,  173,  173,  173,  173,  173,  173,  174,  174,  174,
      174,  174,  174,  231,  231,  231,  231,  231,  231,  634,
      171,  232,  232,  232,  232,  232,  232,  233,  233,  247,
      247,  265,  265,  233,  275,  247,  275,  265,  275,  266,
      266,  267,  267,  633,  233,  266,  247,  267,  265,  631,
      630,  275,  278,  278,  278,  278,  266,  626,  267,  279,
      279,  279,  279,  280,  280,  280,  280,  281,  281,  281,

      281,  282,  282,  282,  282,  283,  283,  283,  283,  283,
      283,  284,  284,  284,  284,  284,  284,  386,  386,  499,
      499,  625,  624,  623,  621,  618,  617,  615,  614,  613,
      612,  611,  610,  607,  606,  604,  603,  602,  601,  386,
      499,  675,  675,  675,  677,  677,  600,  599,  597,  596,
      595,  593,  591,  590,  587,  578,  577,  576,  553,  546,
      545,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  531,  528,  527,  526,  525,  524,  523,  522,  521,
      520,  519,  518,  516,  515,  514,  513,  511,  509,  508,
      507,  506,  505,  504,  503,  502,  501,  500,  498,  497,

      496,  495,  494,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      473,  472,  471,  470,  469,  468,  467,  466,  465,  464,
      463,  462,  461,  460,  459,  458,  456,  455,  454,  453,
      452,  450,  449,  448,  447,  446,  445,  444,  441,  440,
      438,  437,  436,  435,  432,  431,  430,  429,  428,  427,
      426,  424,  423,  422,  421,  420,  419,  418,  417,  416,
      415,  414,  413,  412,  411,  410,  409,  408,  406,  405,
      404,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  387,  384,  383,

      382,  379,  378,  377,  376,  375,  374,  372,  370,  369,
      368,  366,  365,  364,  363,  362,  361,  360,  359,  358,
      357,  356,  355,  354,  353,  352,  351,  350,  349,  347,
      346,  345,  344,  343,  342,  341,  338,  337,  336,  333,
      332,  331,  330,  329,  328,  327,  326,  325,  324,  322,
      321,  320,  319,  318,  317,  316,  315,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  294,  292,  291,  290,
      289,  288,  287,  286,  285,  277,  276,  274,  273,  272,
      271,  270,  269,  264,  262,  261,  260,  259,  258,  257,

      256,  255,  253,  251,  250,  248,  246,  245,  242,  241,
      240,  239,  238,  237,  236,  234,  230,  229,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  209,  208,  207,
      206,  205,  204,  203,  202,  201,  200,  199,  198,  197,
      195,  194,  192,  191,  189,  187,  186,  185,  184,  183,
      182,  181,  180,  179,  177,  175,  162,  161,  160,  158,
      157,  156,  155,  154,  148,  146,  145,  144,  143,  142,
      141,  140,  139,  138,  135,  134,  133,  132,  131,  129,
      128,  127,  125,  124,  121,  119,  117,  116,  115,  114,

      113,  112,  111,  110,  107,  106,  105,  104,  103,  102,
      101,  100,   99,   98,   97,   96,   95,   94,   93,   92,
       91,   89,   88,   87,   86,   85,   84,   83,   81,   80,
       78,   77,   76,   75,   73,   72,   71,   55,   54,   51,
       50,   37,   36,   34,   33,   32,   31,   30,   29,   28,
       20,    8,    7,    3,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674
d981 2
a982 2
#line 1 "../../../src/mesa/program/program_lexer.l"
#line 2 "../../../src/mesa/program/program_lexer.l"
d1016 1
d1108 1
a1108 1
   return (_mesa_symbol_table_find_symbol(state->st, text) == NULL)
d1138 1
a1138 1
#line 1034 "program/lex.yy.c"
d1167 2
a1168 2
    int yy_n_chars;
    int yyleng_r;
d1225 1
a1225 1
			int _mesa_program_lexer_get_leng (yyscan_t yyscanner );
d1296 1
a1296 1
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
d1320 1
a1320 1
		while ( (result = (int) fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
d1423 1
a1423 1
#line 167 "../../../src/mesa/program/program_lexer.l"
d1426 1
a1426 1
#line 1322 "program/lex.yy.c"
d1453 1
a1453 1
				if ( yy_current_state >= 675 )
d1456 1
a1456 1
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
d1459 1
a1459 1
		while ( yy_base[yy_current_state] != 955 );
d1485 1
a1485 1
#line 169 "../../../src/mesa/program/program_lexer.l"
d1490 1
a1490 1
#line 170 "../../../src/mesa/program/program_lexer.l"
d1495 1
a1495 1
#line 171 "../../../src/mesa/program/program_lexer.l"
d1503 1
a1503 1
#line 175 "../../../src/mesa/program/program_lexer.l"
d1508 1
a1508 1
#line 176 "../../../src/mesa/program/program_lexer.l"
d1513 1
a1513 1
#line 177 "../../../src/mesa/program/program_lexer.l"
d1518 1
a1518 1
#line 178 "../../../src/mesa/program/program_lexer.l"
d1523 1
a1523 1
#line 179 "../../../src/mesa/program/program_lexer.l"
d1528 1
a1528 1
#line 180 "../../../src/mesa/program/program_lexer.l"
d1533 1
a1533 1
#line 181 "../../../src/mesa/program/program_lexer.l"
d1538 1
a1538 1
#line 183 "../../../src/mesa/program/program_lexer.l"
d1543 1
a1543 1
#line 184 "../../../src/mesa/program/program_lexer.l"
d1548 1
a1548 1
#line 185 "../../../src/mesa/program/program_lexer.l"
d1553 1
a1553 1
#line 187 "../../../src/mesa/program/program_lexer.l"
d1558 1
a1558 1
#line 188 "../../../src/mesa/program/program_lexer.l"
d1563 11
a1573 1
#line 190 "../../../src/mesa/program/program_lexer.l"
d1576 1
a1576 1
case 17:
d1578 1
a1578 1
#line 191 "../../../src/mesa/program/program_lexer.l"
d1581 1
a1581 1
case 18:
d1583 1
a1583 1
#line 192 "../../../src/mesa/program/program_lexer.l"
d1586 1
a1586 1
case 19:
d1588 1
a1588 1
#line 193 "../../../src/mesa/program/program_lexer.l"
d1591 1
a1591 1
case 20:
d1593 1
a1593 1
#line 195 "../../../src/mesa/program/program_lexer.l"
d1596 1
a1596 1
case 21:
d1598 1
a1598 1
#line 196 "../../../src/mesa/program/program_lexer.l"
d1601 1
a1601 1
case 22:
d1603 1
a1603 1
#line 198 "../../../src/mesa/program/program_lexer.l"
d1606 1
a1606 1
case 23:
d1608 1
a1608 1
#line 199 "../../../src/mesa/program/program_lexer.l"
d1611 1
a1611 1
case 24:
d1613 1
a1613 1
#line 201 "../../../src/mesa/program/program_lexer.l"
d1616 1
a1616 1
case 25:
d1618 1
a1618 1
#line 203 "../../../src/mesa/program/program_lexer.l"
d1621 1
a1621 1
case 26:
d1623 1
a1623 1
#line 204 "../../../src/mesa/program/program_lexer.l"
d1626 1
a1626 1
case 27:
d1628 1
a1628 1
#line 205 "../../../src/mesa/program/program_lexer.l"
d1631 1
a1631 1
case 28:
d1633 1
a1633 1
#line 206 "../../../src/mesa/program/program_lexer.l"
d1636 1
a1636 1
case 29:
d1638 1
a1638 1
#line 208 "../../../src/mesa/program/program_lexer.l"
d1641 1
a1641 1
case 30:
d1643 1
a1643 1
#line 209 "../../../src/mesa/program/program_lexer.l"
d1646 1
a1646 1
case 31:
d1648 1
a1648 1
#line 210 "../../../src/mesa/program/program_lexer.l"
d1651 1
a1651 1
case 32:
d1653 1
a1653 1
#line 211 "../../../src/mesa/program/program_lexer.l"
d1656 1
a1656 1
case 33:
d1658 1
a1658 1
#line 212 "../../../src/mesa/program/program_lexer.l"
d1661 1
a1661 1
case 34:
d1663 1
a1663 1
#line 214 "../../../src/mesa/program/program_lexer.l"
d1666 1
a1666 1
case 35:
d1668 1
a1668 1
#line 216 "../../../src/mesa/program/program_lexer.l"
d1671 1
a1671 1
case 36:
d1673 1
a1673 1
#line 217 "../../../src/mesa/program/program_lexer.l"
d1676 1
a1676 1
case 37:
d1678 1
a1678 1
#line 219 "../../../src/mesa/program/program_lexer.l"
d1681 6
a1686 1
case 38:
d1688 1
a1688 1
#line 220 "../../../src/mesa/program/program_lexer.l"
d1691 6
a1696 1
case 39:
d1698 1
a1698 1
#line 221 "../../../src/mesa/program/program_lexer.l"
d1701 6
a1706 1
case 40:
d1708 1
a1708 1
#line 222 "../../../src/mesa/program/program_lexer.l"
d1711 6
a1716 1
case 41:
d1718 1
a1718 1
#line 223 "../../../src/mesa/program/program_lexer.l"
d1721 1
a1721 1
case 42:
d1723 1
a1723 1
#line 224 "../../../src/mesa/program/program_lexer.l"
d1726 1
a1726 1
case 43:
d1728 1
a1728 1
#line 226 "../../../src/mesa/program/program_lexer.l"
d1731 1
a1731 1
case 44:
d1733 1
a1733 1
#line 227 "../../../src/mesa/program/program_lexer.l"
d1736 6
a1741 1
case 45:
d1743 1
a1743 1
#line 228 "../../../src/mesa/program/program_lexer.l"
d1746 1
a1746 1
case 46:
d1748 1
a1748 1
#line 230 "../../../src/mesa/program/program_lexer.l"
d1751 1
a1751 1
case 47:
d1753 1
a1753 1
#line 232 "../../../src/mesa/program/program_lexer.l"
d1756 1
a1756 1
case 48:
d1758 1
a1758 1
#line 233 "../../../src/mesa/program/program_lexer.l"
d1761 1
a1761 1
case 49:
d1763 1
a1763 1
#line 234 "../../../src/mesa/program/program_lexer.l"
d1766 1
a1766 1
case 50:
d1768 1
a1768 1
#line 235 "../../../src/mesa/program/program_lexer.l"
d1771 1
a1771 1
case 51:
d1773 1
a1773 1
#line 236 "../../../src/mesa/program/program_lexer.l"
d1776 1
a1776 1
case 52:
d1778 1
a1778 1
#line 238 "../../../src/mesa/program/program_lexer.l"
d1781 1
a1781 1
case 53:
d1783 1
a1783 1
#line 239 "../../../src/mesa/program/program_lexer.l"
d1786 1
a1786 1
case 54:
d1788 1
a1788 1
#line 240 "../../../src/mesa/program/program_lexer.l"
d1791 1
a1791 1
case 55:
d1793 1
a1793 1
#line 241 "../../../src/mesa/program/program_lexer.l"
d1796 1
a1796 1
case 56:
d1798 1
a1798 1
#line 242 "../../../src/mesa/program/program_lexer.l"
d1801 1
a1801 1
case 57:
d1803 1
a1803 1
#line 243 "../../../src/mesa/program/program_lexer.l"
d1806 1
a1806 1
case 58:
d1808 1
a1808 1
#line 244 "../../../src/mesa/program/program_lexer.l"
d1811 1
a1811 1
case 59:
d1813 1
a1813 1
#line 245 "../../../src/mesa/program/program_lexer.l"
d1816 1
a1816 1
case 60:
d1818 1
a1818 1
#line 246 "../../../src/mesa/program/program_lexer.l"
d1821 1
a1821 1
case 61:
d1823 1
a1823 1
#line 247 "../../../src/mesa/program/program_lexer.l"
d1826 1
a1826 1
case 62:
d1828 1
a1828 1
#line 248 "../../../src/mesa/program/program_lexer.l"
d1831 1
a1831 1
case 63:
d1833 1
a1833 1
#line 249 "../../../src/mesa/program/program_lexer.l"
d1836 1
a1836 1
case 64:
d1838 1
a1838 1
#line 250 "../../../src/mesa/program/program_lexer.l"
d1841 1
a1841 1
case 65:
d1843 1
a1843 1
#line 251 "../../../src/mesa/program/program_lexer.l"
d1846 1
a1846 1
case 66:
d1848 1
a1848 1
#line 252 "../../../src/mesa/program/program_lexer.l"
d1851 1
a1851 1
case 67:
d1853 1
a1853 1
#line 253 "../../../src/mesa/program/program_lexer.l"
d1856 1
a1856 1
case 68:
d1858 1
a1858 1
#line 254 "../../../src/mesa/program/program_lexer.l"
d1861 1
a1861 1
case 69:
d1863 1
a1863 1
#line 255 "../../../src/mesa/program/program_lexer.l"
d1866 1
a1866 1
case 70:
d1868 1
a1868 1
#line 256 "../../../src/mesa/program/program_lexer.l"
d1871 1
a1871 1
case 71:
d1873 1
a1873 1
#line 257 "../../../src/mesa/program/program_lexer.l"
d1876 1
a1876 1
case 72:
d1878 1
a1878 1
#line 258 "../../../src/mesa/program/program_lexer.l"
d1881 1
a1881 1
case 73:
d1883 1
a1883 1
#line 259 "../../../src/mesa/program/program_lexer.l"
d1886 1
a1886 1
case 74:
d1888 1
a1888 1
#line 260 "../../../src/mesa/program/program_lexer.l"
d1891 1
a1891 1
case 75:
d1893 1
a1893 1
#line 261 "../../../src/mesa/program/program_lexer.l"
d1896 1
a1896 1
case 76:
d1898 1
a1898 1
#line 262 "../../../src/mesa/program/program_lexer.l"
d1901 1
a1901 1
case 77:
d1903 1
a1903 1
#line 263 "../../../src/mesa/program/program_lexer.l"
d1906 1
a1906 1
case 78:
d1908 1
a1908 1
#line 264 "../../../src/mesa/program/program_lexer.l"
d1911 1
a1911 1
case 79:
d1913 1
a1913 1
#line 265 "../../../src/mesa/program/program_lexer.l"
d1916 1
a1916 1
case 80:
d1918 1
a1918 1
#line 266 "../../../src/mesa/program/program_lexer.l"
d1921 1
a1921 1
case 81:
d1923 1
a1923 1
#line 267 "../../../src/mesa/program/program_lexer.l"
d1926 1
a1926 1
case 82:
d1928 1
a1928 1
#line 268 "../../../src/mesa/program/program_lexer.l"
d1931 1
a1931 1
case 83:
d1933 1
a1933 1
#line 269 "../../../src/mesa/program/program_lexer.l"
d1936 1
a1936 1
case 84:
d1938 1
a1938 1
#line 270 "../../../src/mesa/program/program_lexer.l"
d1941 1
a1941 1
case 85:
d1943 1
a1943 1
#line 271 "../../../src/mesa/program/program_lexer.l"
d1946 1
a1946 1
case 86:
d1948 1
a1948 1
#line 272 "../../../src/mesa/program/program_lexer.l"
d1951 1
a1951 1
case 87:
d1953 1
a1953 1
#line 273 "../../../src/mesa/program/program_lexer.l"
d1956 1
a1956 1
case 88:
d1958 1
a1958 1
#line 274 "../../../src/mesa/program/program_lexer.l"
d1961 1
a1961 1
case 89:
d1963 1
a1963 1
#line 275 "../../../src/mesa/program/program_lexer.l"
d1966 1
a1966 1
case 90:
d1968 1
a1968 1
#line 276 "../../../src/mesa/program/program_lexer.l"
d1971 1
a1971 1
case 91:
d1973 1
a1973 1
#line 277 "../../../src/mesa/program/program_lexer.l"
d1976 1
a1976 1
case 92:
d1978 1
a1978 1
#line 278 "../../../src/mesa/program/program_lexer.l"
d1981 1
a1981 1
case 93:
d1983 1
a1983 1
#line 279 "../../../src/mesa/program/program_lexer.l"
d1986 1
a1986 1
case 94:
d1988 1
a1988 1
#line 280 "../../../src/mesa/program/program_lexer.l"
d1991 1
a1991 1
case 95:
d1993 1
a1993 1
#line 281 "../../../src/mesa/program/program_lexer.l"
d1996 1
a1996 1
case 96:
d1998 1
a1998 1
#line 282 "../../../src/mesa/program/program_lexer.l"
d2001 1
a2001 1
case 97:
d2003 1
a2003 1
#line 283 "../../../src/mesa/program/program_lexer.l"
d2006 1
a2006 1
case 98:
d2008 1
a2008 1
#line 284 "../../../src/mesa/program/program_lexer.l"
d2011 1
a2011 1
case 99:
d2013 1
a2013 1
#line 285 "../../../src/mesa/program/program_lexer.l"
d2016 1
a2016 1
case 100:
d2018 1
a2018 1
#line 286 "../../../src/mesa/program/program_lexer.l"
d2021 1
a2021 1
case 101:
d2023 1
a2023 1
#line 287 "../../../src/mesa/program/program_lexer.l"
d2026 1
a2026 1
case 102:
d2028 1
a2028 1
#line 288 "../../../src/mesa/program/program_lexer.l"
d2031 1
a2031 1
case 103:
d2033 1
a2033 1
#line 289 "../../../src/mesa/program/program_lexer.l"
d2036 1
a2036 1
case 104:
d2038 1
a2038 1
#line 290 "../../../src/mesa/program/program_lexer.l"
d2041 1
a2041 1
case 105:
d2043 1
a2043 1
#line 291 "../../../src/mesa/program/program_lexer.l"
d2046 1
a2046 1
case 106:
d2048 1
a2048 1
#line 292 "../../../src/mesa/program/program_lexer.l"
d2051 1
a2051 1
case 107:
d2053 1
a2053 1
#line 294 "../../../src/mesa/program/program_lexer.l"
d2056 1
a2056 1
case 108:
d2058 1
a2058 1
#line 295 "../../../src/mesa/program/program_lexer.l"
d2061 1
a2061 1
case 109:
d2063 1
a2063 1
#line 296 "../../../src/mesa/program/program_lexer.l"
d2066 1
a2066 1
case 110:
d2068 1
a2068 1
#line 297 "../../../src/mesa/program/program_lexer.l"
d2071 1
a2071 1
case 111:
d2073 1
a2073 1
#line 298 "../../../src/mesa/program/program_lexer.l"
d2076 1
a2076 1
case 112:
d2078 1
a2078 1
#line 299 "../../../src/mesa/program/program_lexer.l"
d2081 1
a2081 1
case 113:
d2083 1
a2083 1
#line 300 "../../../src/mesa/program/program_lexer.l"
d2086 1
a2086 1
case 114:
d2088 1
a2088 1
#line 301 "../../../src/mesa/program/program_lexer.l"
d2091 1
a2091 1
case 115:
d2093 1
a2093 1
#line 302 "../../../src/mesa/program/program_lexer.l"
d2096 1
a2096 1
case 116:
d2098 1
a2098 1
#line 303 "../../../src/mesa/program/program_lexer.l"
d2101 1
a2101 1
case 117:
d2103 1
a2103 1
#line 304 "../../../src/mesa/program/program_lexer.l"
d2106 1
a2106 1
case 118:
d2108 1
a2108 1
#line 305 "../../../src/mesa/program/program_lexer.l"
d2111 1
a2111 1
case 119:
d2113 1
a2113 1
#line 306 "../../../src/mesa/program/program_lexer.l"
d2116 1
a2116 1
case 120:
d2118 1
a2118 1
#line 308 "../../../src/mesa/program/program_lexer.l"
d2121 1
a2121 1
case 121:
d2123 1
a2123 1
#line 310 "../../../src/mesa/program/program_lexer.l"
d2126 1
a2126 1
case 122:
d2128 1
a2128 1
#line 312 "../../../src/mesa/program/program_lexer.l"
d2134 1
a2134 1
case 123:
d2136 1
a2136 1
#line 316 "../../../src/mesa/program/program_lexer.l"
d2142 2
a2143 2
case 124:
/* rule 124 can match eol */
d2149 1
a2149 1
#line 320 "../../../src/mesa/program/program_lexer.l"
d2155 1
a2155 1
case 125:
d2157 1
a2157 1
#line 324 "../../../src/mesa/program/program_lexer.l"
d2163 1
a2163 1
case 126:
d2165 1
a2165 1
#line 328 "../../../src/mesa/program/program_lexer.l"
d2171 1
a2171 1
case 127:
d2173 1
a2173 1
#line 333 "../../../src/mesa/program/program_lexer.l"
d2180 1
a2180 1
case 128:
d2182 1
a2182 1
#line 339 "../../../src/mesa/program/program_lexer.l"
d2190 1
a2190 1
case 129:
d2192 1
a2192 1
#line 345 "../../../src/mesa/program/program_lexer.l"
d2199 1
a2199 1
case 130:
d2201 1
a2201 1
#line 350 "../../../src/mesa/program/program_lexer.l"
d2208 1
a2208 1
case 131:
d2210 1
a2210 1
#line 356 "../../../src/mesa/program/program_lexer.l"
d2218 1
a2218 1
case 132:
d2220 1
a2220 1
#line 362 "../../../src/mesa/program/program_lexer.l"
d2228 1
a2228 1
case 133:
d2230 1
a2230 1
#line 368 "../../../src/mesa/program/program_lexer.l"
d2237 1
a2237 1
case 134:
d2239 1
a2239 1
#line 374 "../../../src/mesa/program/program_lexer.l"
d2247 1
a2247 1
case 135:
d2249 1
a2249 1
#line 381 "../../../src/mesa/program/program_lexer.l"
d2259 1
a2259 1
case 136:
d2261 1
a2261 1
#line 390 "../../../src/mesa/program/program_lexer.l"
d2268 1
a2268 1
case 137:
d2270 1
a2270 1
#line 396 "../../../src/mesa/program/program_lexer.l"
d2278 1
a2278 1
case 138:
d2280 1
a2280 1
#line 402 "../../../src/mesa/program/program_lexer.l"
d2287 1
a2287 1
case 139:
d2289 1
a2289 1
#line 407 "../../../src/mesa/program/program_lexer.l"
d2296 1
a2296 1
case 140:
d2298 1
a2298 1
#line 413 "../../../src/mesa/program/program_lexer.l"
d2306 1
a2306 1
case 141:
d2308 1
a2308 1
#line 419 "../../../src/mesa/program/program_lexer.l"
d2316 1
a2316 1
case 142:
d2318 1
a2318 1
#line 425 "../../../src/mesa/program/program_lexer.l"
d2325 1
a2325 1
case 143:
d2327 1
a2327 1
#line 431 "../../../src/mesa/program/program_lexer.l"
d2335 1
a2335 1
case 144:
d2337 1
a2337 1
#line 439 "../../../src/mesa/program/program_lexer.l"
d2349 1
a2349 1
case 145:
d2351 1
a2351 1
#line 450 "../../../src/mesa/program/program_lexer.l"
d2361 1
a2361 1
case 146:
d2363 1
a2363 1
#line 459 "../../../src/mesa/program/program_lexer.l"
d2366 2
a2367 2
case 147:
/* rule 147 can match eol */
d2369 1
a2369 1
#line 461 "../../../src/mesa/program/program_lexer.l"
d2378 1
a2378 1
case 148:
d2380 1
a2380 1
#line 468 "../../../src/mesa/program/program_lexer.l"
d2383 1
a2383 1
case 149:
d2388 1
a2388 1
#line 469 "../../../src/mesa/program/program_lexer.l"
d2391 1
a2391 1
case 150:
d2393 1
a2393 1
#line 470 "../../../src/mesa/program/program_lexer.l"
d2396 1
a2396 1
case 151:
d2398 1
a2398 1
#line 471 "../../../src/mesa/program/program_lexer.l"
d2401 1
a2401 1
#line 2262 "program/lex.yy.c"
d2589 1
a2589 1
			int num_to_read =
d2603 1
a2603 1
				int new_size = b->yy_buf_size * 2;
d2616 1
a2616 1
				b->yy_ch_buf = NULL;
d2658 1
a2658 1
	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
d2660 1
a2660 1
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
d2696 1
a2696 1
			if ( yy_current_state >= 675 )
d2699 1
a2699 1
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
d2725 1
a2725 1
		if ( yy_current_state >= 675 )
d2728 2
a2729 2
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 674);
d2750 1
a2750 1
		int number_to_move = yyg->yy_n_chars + 2;
d2762 1
a2762 1
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
d2802 1
a2802 1
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
d2826 1
a2826 1
						return 0;
d3082 1
a3082 1
	int num_to_alloc;
d3138 1
a3138 1
		return NULL;
d3147 1
a3147 1
	b->yy_input_file = NULL;
d3170 1
a3170 1
	return _mesa_program_lexer__scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
d3180 1
a3180 1
YY_BUFFER_STATE _mesa_program_lexer__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
d3188 1
a3188 1
	n = (yy_size_t) _yybytes_len + 2;
d3214 1
a3214 1
static void yynoreturn yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
d3297 1
a3297 1
int _mesa_program_lexer_get_leng  (yyscan_t yyscanner)
d3480 1
a3480 1
    yyg->yy_buffer_stack = NULL;
d3483 1
a3483 1
    yyg->yy_c_buf_p = NULL;
d3496 2
a3497 2
    yyin = NULL;
    yyout = NULL;
d3567 1
a3567 1
	return malloc(size);
d3582 1
a3582 1
	return realloc(ptr, size);
d3594 1
a3594 1
#line 471 "../../../src/mesa/program/program_lexer.l"
@


1.1.1.4
log
@Import Mesa 13.0.5
@
text
@d877 2
a878 2
#line 1 "./program/program_lexer.l"
#line 2 "./program/program_lexer.l"
d1318 1
a1318 1
#line 167 "./program/program_lexer.l"
d1380 1
a1380 1
#line 169 "./program/program_lexer.l"
d1385 1
a1385 1
#line 170 "./program/program_lexer.l"
d1390 1
a1390 1
#line 171 "./program/program_lexer.l"
d1398 1
a1398 1
#line 175 "./program/program_lexer.l"
d1403 1
a1403 1
#line 176 "./program/program_lexer.l"
d1408 1
a1408 1
#line 177 "./program/program_lexer.l"
d1413 1
a1413 1
#line 178 "./program/program_lexer.l"
d1418 1
a1418 1
#line 179 "./program/program_lexer.l"
d1423 1
a1423 1
#line 180 "./program/program_lexer.l"
d1428 1
a1428 1
#line 181 "./program/program_lexer.l"
d1433 1
a1433 1
#line 183 "./program/program_lexer.l"
d1438 1
a1438 1
#line 184 "./program/program_lexer.l"
d1443 1
a1443 1
#line 185 "./program/program_lexer.l"
d1448 1
a1448 1
#line 187 "./program/program_lexer.l"
d1453 1
a1453 1
#line 188 "./program/program_lexer.l"
d1458 1
a1458 1
#line 190 "./program/program_lexer.l"
d1463 1
a1463 1
#line 191 "./program/program_lexer.l"
d1468 1
a1468 1
#line 192 "./program/program_lexer.l"
d1473 1
a1473 1
#line 193 "./program/program_lexer.l"
d1478 1
a1478 1
#line 195 "./program/program_lexer.l"
d1483 1
a1483 1
#line 196 "./program/program_lexer.l"
d1488 1
a1488 1
#line 198 "./program/program_lexer.l"
d1493 1
a1493 1
#line 199 "./program/program_lexer.l"
d1498 1
a1498 1
#line 201 "./program/program_lexer.l"
d1503 1
a1503 1
#line 203 "./program/program_lexer.l"
d1508 1
a1508 1
#line 204 "./program/program_lexer.l"
d1513 1
a1513 1
#line 205 "./program/program_lexer.l"
d1518 1
a1518 1
#line 206 "./program/program_lexer.l"
d1523 1
a1523 1
#line 208 "./program/program_lexer.l"
d1528 1
a1528 1
#line 209 "./program/program_lexer.l"
d1533 1
a1533 1
#line 210 "./program/program_lexer.l"
d1538 1
a1538 1
#line 211 "./program/program_lexer.l"
d1543 1
a1543 1
#line 212 "./program/program_lexer.l"
d1548 1
a1548 1
#line 214 "./program/program_lexer.l"
d1553 1
a1553 1
#line 216 "./program/program_lexer.l"
d1558 1
a1558 1
#line 217 "./program/program_lexer.l"
d1563 1
a1563 1
#line 219 "./program/program_lexer.l"
d1568 1
a1568 1
#line 220 "./program/program_lexer.l"
d1573 1
a1573 1
#line 221 "./program/program_lexer.l"
d1578 1
a1578 1
#line 222 "./program/program_lexer.l"
d1583 1
a1583 1
#line 223 "./program/program_lexer.l"
d1588 1
a1588 1
#line 224 "./program/program_lexer.l"
d1593 1
a1593 1
#line 226 "./program/program_lexer.l"
d1598 1
a1598 1
#line 227 "./program/program_lexer.l"
d1603 1
a1603 1
#line 228 "./program/program_lexer.l"
d1608 1
a1608 1
#line 230 "./program/program_lexer.l"
d1613 1
a1613 1
#line 232 "./program/program_lexer.l"
d1618 1
a1618 1
#line 233 "./program/program_lexer.l"
d1623 1
a1623 1
#line 234 "./program/program_lexer.l"
d1628 1
a1628 1
#line 235 "./program/program_lexer.l"
d1633 1
a1633 1
#line 236 "./program/program_lexer.l"
d1638 1
a1638 1
#line 238 "./program/program_lexer.l"
d1643 1
a1643 1
#line 239 "./program/program_lexer.l"
d1648 1
a1648 1
#line 240 "./program/program_lexer.l"
d1653 1
a1653 1
#line 241 "./program/program_lexer.l"
d1658 1
a1658 1
#line 242 "./program/program_lexer.l"
d1663 1
a1663 1
#line 243 "./program/program_lexer.l"
d1668 1
a1668 1
#line 244 "./program/program_lexer.l"
d1673 1
a1673 1
#line 245 "./program/program_lexer.l"
d1678 1
a1678 1
#line 246 "./program/program_lexer.l"
d1683 1
a1683 1
#line 247 "./program/program_lexer.l"
d1688 1
a1688 1
#line 248 "./program/program_lexer.l"
d1693 1
a1693 1
#line 249 "./program/program_lexer.l"
d1698 1
a1698 1
#line 250 "./program/program_lexer.l"
d1703 1
a1703 1
#line 251 "./program/program_lexer.l"
d1708 1
a1708 1
#line 252 "./program/program_lexer.l"
d1713 1
a1713 1
#line 253 "./program/program_lexer.l"
d1718 1
a1718 1
#line 254 "./program/program_lexer.l"
d1723 1
a1723 1
#line 255 "./program/program_lexer.l"
d1728 1
a1728 1
#line 256 "./program/program_lexer.l"
d1733 1
a1733 1
#line 257 "./program/program_lexer.l"
d1738 1
a1738 1
#line 258 "./program/program_lexer.l"
d1743 1
a1743 1
#line 259 "./program/program_lexer.l"
d1748 1
a1748 1
#line 260 "./program/program_lexer.l"
d1753 1
a1753 1
#line 261 "./program/program_lexer.l"
d1758 1
a1758 1
#line 262 "./program/program_lexer.l"
d1763 1
a1763 1
#line 263 "./program/program_lexer.l"
d1768 1
a1768 1
#line 264 "./program/program_lexer.l"
d1773 1
a1773 1
#line 265 "./program/program_lexer.l"
d1778 1
a1778 1
#line 266 "./program/program_lexer.l"
d1783 1
a1783 1
#line 267 "./program/program_lexer.l"
d1788 1
a1788 1
#line 268 "./program/program_lexer.l"
d1793 1
a1793 1
#line 269 "./program/program_lexer.l"
d1798 1
a1798 1
#line 270 "./program/program_lexer.l"
d1803 1
a1803 1
#line 271 "./program/program_lexer.l"
d1808 1
a1808 1
#line 272 "./program/program_lexer.l"
d1813 1
a1813 1
#line 273 "./program/program_lexer.l"
d1818 1
a1818 1
#line 274 "./program/program_lexer.l"
d1823 1
a1823 1
#line 275 "./program/program_lexer.l"
d1828 1
a1828 1
#line 276 "./program/program_lexer.l"
d1833 1
a1833 1
#line 277 "./program/program_lexer.l"
d1838 1
a1838 1
#line 278 "./program/program_lexer.l"
d1843 1
a1843 1
#line 279 "./program/program_lexer.l"
d1848 1
a1848 1
#line 280 "./program/program_lexer.l"
d1853 1
a1853 1
#line 281 "./program/program_lexer.l"
d1858 1
a1858 1
#line 282 "./program/program_lexer.l"
d1863 1
a1863 1
#line 283 "./program/program_lexer.l"
d1868 1
a1868 1
#line 284 "./program/program_lexer.l"
d1873 1
a1873 1
#line 285 "./program/program_lexer.l"
d1878 1
a1878 1
#line 286 "./program/program_lexer.l"
d1883 1
a1883 1
#line 287 "./program/program_lexer.l"
d1888 1
a1888 1
#line 288 "./program/program_lexer.l"
d1893 1
a1893 1
#line 289 "./program/program_lexer.l"
d1898 1
a1898 1
#line 290 "./program/program_lexer.l"
d1903 1
a1903 1
#line 291 "./program/program_lexer.l"
d1908 1
a1908 1
#line 292 "./program/program_lexer.l"
d1913 1
a1913 1
#line 294 "./program/program_lexer.l"
d1918 1
a1918 1
#line 295 "./program/program_lexer.l"
d1923 1
a1923 1
#line 296 "./program/program_lexer.l"
d1928 1
a1928 1
#line 297 "./program/program_lexer.l"
d1933 1
a1933 1
#line 298 "./program/program_lexer.l"
d1938 1
a1938 1
#line 299 "./program/program_lexer.l"
d1943 1
a1943 1
#line 300 "./program/program_lexer.l"
d1948 1
a1948 1
#line 301 "./program/program_lexer.l"
d1953 1
a1953 1
#line 302 "./program/program_lexer.l"
d1958 1
a1958 1
#line 303 "./program/program_lexer.l"
d1963 1
a1963 1
#line 304 "./program/program_lexer.l"
d1968 1
a1968 1
#line 305 "./program/program_lexer.l"
d1973 1
a1973 1
#line 306 "./program/program_lexer.l"
d1978 1
a1978 1
#line 308 "./program/program_lexer.l"
d1983 1
a1983 1
#line 310 "./program/program_lexer.l"
d1988 1
a1988 1
#line 312 "./program/program_lexer.l"
d1996 1
a1996 1
#line 316 "./program/program_lexer.l"
d2009 1
a2009 1
#line 320 "./program/program_lexer.l"
d2017 1
a2017 1
#line 324 "./program/program_lexer.l"
d2025 1
a2025 1
#line 328 "./program/program_lexer.l"
d2033 1
a2033 1
#line 333 "./program/program_lexer.l"
d2042 1
a2042 1
#line 339 "./program/program_lexer.l"
d2052 1
a2052 1
#line 345 "./program/program_lexer.l"
d2061 1
a2061 1
#line 350 "./program/program_lexer.l"
d2070 1
a2070 1
#line 356 "./program/program_lexer.l"
d2080 1
a2080 1
#line 362 "./program/program_lexer.l"
d2090 1
a2090 1
#line 368 "./program/program_lexer.l"
d2099 1
a2099 1
#line 374 "./program/program_lexer.l"
d2109 1
a2109 1
#line 381 "./program/program_lexer.l"
d2121 1
a2121 1
#line 390 "./program/program_lexer.l"
d2130 1
a2130 1
#line 396 "./program/program_lexer.l"
d2140 1
a2140 1
#line 402 "./program/program_lexer.l"
d2149 1
a2149 1
#line 407 "./program/program_lexer.l"
d2158 1
a2158 1
#line 413 "./program/program_lexer.l"
d2168 1
a2168 1
#line 419 "./program/program_lexer.l"
d2178 1
a2178 1
#line 425 "./program/program_lexer.l"
d2187 1
a2187 1
#line 431 "./program/program_lexer.l"
d2197 1
a2197 1
#line 439 "./program/program_lexer.l"
d2211 1
a2211 1
#line 450 "./program/program_lexer.l"
d2223 1
a2223 1
#line 459 "./program/program_lexer.l"
d2229 1
a2229 1
#line 461 "./program/program_lexer.l"
d2240 1
a2240 1
#line 468 "./program/program_lexer.l"
d2248 1
a2248 1
#line 469 "./program/program_lexer.l"
d2253 1
a2253 1
#line 470 "./program/program_lexer.l"
d2258 1
a2258 1
#line 471 "./program/program_lexer.l"
d3454 1
a3454 1
#line 471 "./program/program_lexer.l"
@


1.1.1.5
log
@Import Mesa 13.0.6
@
text
@d1 1
a1 1
#line 1 "program/lex.yy.c"
d3 1
a3 1
#line 3 "program/lex.yy.c"
d12 1
a12 1
#define YY_FLEX_SUBMINOR_VERSION 3
a16 78
    #define yy_create_buffer _mesa_program_lexer__create_buffer

    #define yy_delete_buffer _mesa_program_lexer__delete_buffer

    #define yy_scan_buffer _mesa_program_lexer__scan_buffer

    #define yy_scan_string _mesa_program_lexer__scan_string

    #define yy_scan_bytes _mesa_program_lexer__scan_bytes

    #define yy_init_buffer _mesa_program_lexer__init_buffer

    #define yy_flush_buffer _mesa_program_lexer__flush_buffer

    #define yy_load_buffer_state _mesa_program_lexer__load_buffer_state

    #define yy_switch_to_buffer _mesa_program_lexer__switch_to_buffer

    #define yypush_buffer_state _mesa_program_lexer_push_buffer_state

    #define yypop_buffer_state _mesa_program_lexer_pop_buffer_state

    #define yyensure_buffer_stack _mesa_program_lexer_ensure_buffer_stack

    #define yylex _mesa_program_lexer_lex

    #define yyrestart _mesa_program_lexer_restart

    #define yylex_init _mesa_program_lexer_lex_init

    #define yylex_init_extra _mesa_program_lexer_lex_init_extra

    #define yylex_destroy _mesa_program_lexer_lex_destroy

    #define yyget_debug _mesa_program_lexer_get_debug

    #define yyset_debug _mesa_program_lexer_set_debug

    #define yyget_extra _mesa_program_lexer_get_extra

    #define yyset_extra _mesa_program_lexer_set_extra

    #define yyget_in _mesa_program_lexer_get_in

    #define yyset_in _mesa_program_lexer_set_in

    #define yyget_out _mesa_program_lexer_get_out

    #define yyset_out _mesa_program_lexer_set_out

    #define yyget_leng _mesa_program_lexer_get_leng

    #define yyget_text _mesa_program_lexer_get_text

    #define yyget_lineno _mesa_program_lexer_get_lineno

    #define yyset_lineno _mesa_program_lexer_set_lineno

        #define yyget_column _mesa_program_lexer_get_column

        #define yyset_column _mesa_program_lexer_set_column

    #define yywrap _mesa_program_lexer_wrap

    #define yyget_lval _mesa_program_lexer_get_lval

    #define yyset_lval _mesa_program_lexer_set_lval

    #define yyget_lloc _mesa_program_lexer_get_lloc

    #define yyset_lloc _mesa_program_lexer_set_lloc

    #define yyalloc _mesa_program_lexer_alloc

    #define yyrealloc _mesa_program_lexer_realloc

    #define yyfree _mesa_program_lexer_free

d103 4
a106 2
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
d108 1
a108 1
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
d132 1
d139 1
d142 1
d145 1
d178 1
a178 1
    
d195 1
d238 1
a238 1

d272 1
d278 12
a289 11
void _mesa_program_lexer_restart ( FILE *input_file , yyscan_t yyscanner );
void _mesa_program_lexer__switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_program_lexer__create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void _mesa_program_lexer__delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void _mesa_program_lexer__flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void _mesa_program_lexer_push_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void _mesa_program_lexer_pop_buffer_state ( yyscan_t yyscanner );

static void _mesa_program_lexer_ensure_buffer_stack ( yyscan_t yyscanner );
static void _mesa_program_lexer__load_buffer_state ( yyscan_t yyscanner );
static void _mesa_program_lexer__init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
d292 7
a298 7
YY_BUFFER_STATE _mesa_program_lexer__scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_program_lexer__scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE _mesa_program_lexer__scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *_mesa_program_lexer_alloc ( yy_size_t , yyscan_t yyscanner );
void *_mesa_program_lexer_realloc ( void *, yy_size_t , yyscan_t yyscanner );
void _mesa_program_lexer_free ( void * , yyscan_t yyscanner );
d301 1
d311 1
d321 1
d328 2
a329 1
typedef flex_uint8_t YY_CHAR;
d335 4
a338 4
static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );
d349 1
d359 1
a359 1
static const flex_int16_t yy_accept[675] =
d437 1
a437 1
static const YY_CHAR yy_ec[256] =
d469 1
a469 1
static const YY_CHAR yy_meta[68] =
d480 1
a480 1
static const flex_int16_t yy_base[678] =
d558 1
a558 1
static const flex_int16_t yy_def[678] =
d636 1
a636 1
static const flex_int16_t yy_nxt[1023] =
d753 1
a753 1
static const flex_int16_t yy_chk[1023] =
d1030 2
a1031 2
int yyget_column  (yyscan_t yyscanner);
void yyset_column (int  column_no , yyscan_t yyscanner);
d1033 1
a1033 2
#line 1097 "program/lex.yy.c"
#line 1098 "program/lex.yy.c"
d1087 1
a1087 1
static int yy_init_globals ( yyscan_t yyscanner );
d1097 1
a1097 1
int _mesa_program_lexer_lex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);
d1102 1
a1102 1
int _mesa_program_lexer_lex_destroy ( yyscan_t yyscanner );
d1104 1
a1104 1
int _mesa_program_lexer_get_debug ( yyscan_t yyscanner );
d1106 1
a1106 1
void _mesa_program_lexer_set_debug ( int debug_flag , yyscan_t yyscanner );
d1108 1
a1108 1
YY_EXTRA_TYPE _mesa_program_lexer_get_extra ( yyscan_t yyscanner );
d1110 1
a1110 1
void _mesa_program_lexer_set_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );
d1112 1
a1112 1
FILE *_mesa_program_lexer_get_in ( yyscan_t yyscanner );
d1114 1
a1114 1
void _mesa_program_lexer_set_in  ( FILE * _in_str , yyscan_t yyscanner );
d1116 1
a1116 1
FILE *_mesa_program_lexer_get_out ( yyscan_t yyscanner );
d1118 1
a1118 1
void _mesa_program_lexer_set_out  ( FILE * _out_str , yyscan_t yyscanner );
d1120 1
a1120 1
			int _mesa_program_lexer_get_leng ( yyscan_t yyscanner );
d1122 1
a1122 1
char *_mesa_program_lexer_get_text ( yyscan_t yyscanner );
d1124 1
a1124 1
int _mesa_program_lexer_get_lineno ( yyscan_t yyscanner );
d1126 1
a1126 1
void _mesa_program_lexer_set_lineno ( int _line_number , yyscan_t yyscanner );
d1128 1
a1128 1
int _mesa_program_lexer_get_column  ( yyscan_t yyscanner );
d1130 1
a1130 1
void _mesa_program_lexer_set_column ( int _column_no , yyscan_t yyscanner );
d1132 1
a1132 1
YYSTYPE * _mesa_program_lexer_get_lval ( yyscan_t yyscanner );
d1134 1
a1134 1
void _mesa_program_lexer_set_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );
d1136 1
a1136 1
       YYLTYPE *_mesa_program_lexer_get_lloc ( yyscan_t yyscanner );
d1138 1
a1138 1
        void _mesa_program_lexer_set_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
d1146 1
a1146 1
extern "C" int _mesa_program_lexer_wrap ( yyscan_t yyscanner );
d1148 1
a1148 1
extern int _mesa_program_lexer_wrap ( yyscan_t yyscanner );
d1154 1
a1154 1
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
d1159 1
a1159 1
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
d1163 1
a1163 1
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
d1167 1
d1169 1
a1169 1
static int yyinput ( yyscan_t yyscanner );
d1171 1
a1171 1
static int input ( yyscan_t yyscanner );
d1202 1
a1202 1
		int n; \
d1215 1
a1215 1
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
d1257 1
a1257 1
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);
d1321 1
a1321 1
#line 1385 "program/lex.yy.c"
d1349 1
a1349 1
					yy_c = yy_meta[yy_c];
d1351 1
a1351 1
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
d2261 1
a2261 1
#line 2325 "program/lex.yy.c"
d2407 1
a2407 1
	int number_to_move, i;
d2436 1
a2436 1
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);
d2472 1
a2472 1
					_mesa_program_lexer_realloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
d2518 1
a2518 1
	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
d2521 1
a2521 1
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _mesa_program_lexer_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size ,yyscanner );
d2557 1
a2557 1
				yy_c = yy_meta[yy_c];
d2559 1
a2559 1
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
d2586 1
a2586 1
			yy_c = yy_meta[yy_c];
d2588 1
a2588 1
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
d2662 1
a2662 1
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
d2790 1
a2790 1
	b->yy_buf_size = size;
d2795 1
a2795 1
	b->yy_ch_buf = (char *) _mesa_program_lexer_alloc((yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
d2942 1
a2942 1
	yy_size_t num_to_alloc;
d2957 1
a2957 1

d2959 1
a2959 1

d2988 1
a2988 1
 * @@return the newly allocated buffer state object.
d3004 1
a3004 1
	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
d3027 1
a3027 1
YY_BUFFER_STATE _mesa_program_lexer__scan_string (const char * yystr , yyscan_t yyscanner)
d3040 1
a3040 1
YY_BUFFER_STATE _mesa_program_lexer__scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
d3045 1
a3045 1
	int i;
d3048 1
a3048 1
	n = (yy_size_t) (_yybytes_len + 2);
d3074 1
a3074 1
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
d3116 1
a3116 1

d3129 1
a3129 1

d3275 1
d3277 1
d3304 1
d3306 1
d3316 1
a3316 1

d3318 1
a3318 1

d3323 1
a3323 1

d3327 1
a3327 1

d3329 1
a3329 1

d3401 1
a3401 1
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
d3413 1
a3413 1
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
d3457 1
d3462 2
a3463 2
   yylex_init_extra(state, scanner);
   yy_scan_bytes(string, len, *scanner);
d3469 1
a3469 1
   yylex_destroy(scanner);
@


1.1.1.6
log
@Import Mesa 17.1.6
@
text
@d12 1
a12 1
#define YY_FLEX_SUBMINOR_VERSION 4
d17 1
a17 5
#ifdef yy_create_buffer
#define _mesa_program_lexer__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer _mesa_program_lexer__create_buffer
#endif
d19 1
a19 5
#ifdef yy_delete_buffer
#define _mesa_program_lexer__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer _mesa_program_lexer__delete_buffer
#endif
d21 1
a21 5
#ifdef yy_scan_buffer
#define _mesa_program_lexer__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer _mesa_program_lexer__scan_buffer
#endif
d23 1
a23 5
#ifdef yy_scan_string
#define _mesa_program_lexer__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string _mesa_program_lexer__scan_string
#endif
d25 1
a25 5
#ifdef yy_scan_bytes
#define _mesa_program_lexer__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes _mesa_program_lexer__scan_bytes
#endif
d27 1
a27 5
#ifdef yy_init_buffer
#define _mesa_program_lexer__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer _mesa_program_lexer__init_buffer
#endif
d29 1
a29 5
#ifdef yy_flush_buffer
#define _mesa_program_lexer__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer _mesa_program_lexer__flush_buffer
#endif
d31 1
a31 5
#ifdef yy_load_buffer_state
#define _mesa_program_lexer__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state _mesa_program_lexer__load_buffer_state
#endif
d33 1
a33 5
#ifdef yy_switch_to_buffer
#define _mesa_program_lexer__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer _mesa_program_lexer__switch_to_buffer
#endif
d35 1
a35 5
#ifdef yypush_buffer_state
#define _mesa_program_lexer_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state _mesa_program_lexer_push_buffer_state
#endif
d37 1
a37 5
#ifdef yypop_buffer_state
#define _mesa_program_lexer_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state _mesa_program_lexer_pop_buffer_state
#endif
d39 1
a39 5
#ifdef yyensure_buffer_stack
#define _mesa_program_lexer_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack _mesa_program_lexer_ensure_buffer_stack
#endif
d41 1
a41 5
#ifdef yylex
#define _mesa_program_lexer_lex_ALREADY_DEFINED
#else
#define yylex _mesa_program_lexer_lex
#endif
d43 1
a43 5
#ifdef yyrestart
#define _mesa_program_lexer_restart_ALREADY_DEFINED
#else
#define yyrestart _mesa_program_lexer_restart
#endif
d45 1
a45 5
#ifdef yylex_init
#define _mesa_program_lexer_lex_init_ALREADY_DEFINED
#else
#define yylex_init _mesa_program_lexer_lex_init
#endif
d47 1
a47 5
#ifdef yylex_init_extra
#define _mesa_program_lexer_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra _mesa_program_lexer_lex_init_extra
#endif
d49 1
a49 5
#ifdef yylex_destroy
#define _mesa_program_lexer_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy _mesa_program_lexer_lex_destroy
#endif
d51 1
a51 5
#ifdef yyget_debug
#define _mesa_program_lexer_get_debug_ALREADY_DEFINED
#else
#define yyget_debug _mesa_program_lexer_get_debug
#endif
d53 1
a53 5
#ifdef yyset_debug
#define _mesa_program_lexer_set_debug_ALREADY_DEFINED
#else
#define yyset_debug _mesa_program_lexer_set_debug
#endif
d55 1
a55 5
#ifdef yyget_extra
#define _mesa_program_lexer_get_extra_ALREADY_DEFINED
#else
#define yyget_extra _mesa_program_lexer_get_extra
#endif
d57 1
a57 5
#ifdef yyset_extra
#define _mesa_program_lexer_set_extra_ALREADY_DEFINED
#else
#define yyset_extra _mesa_program_lexer_set_extra
#endif
d59 1
a59 5
#ifdef yyget_in
#define _mesa_program_lexer_get_in_ALREADY_DEFINED
#else
#define yyget_in _mesa_program_lexer_get_in
#endif
d61 1
a61 5
#ifdef yyset_in
#define _mesa_program_lexer_set_in_ALREADY_DEFINED
#else
#define yyset_in _mesa_program_lexer_set_in
#endif
d63 1
a63 5
#ifdef yyget_out
#define _mesa_program_lexer_get_out_ALREADY_DEFINED
#else
#define yyget_out _mesa_program_lexer_get_out
#endif
d65 1
a65 5
#ifdef yyset_out
#define _mesa_program_lexer_set_out_ALREADY_DEFINED
#else
#define yyset_out _mesa_program_lexer_set_out
#endif
d67 1
a67 5
#ifdef yyget_leng
#define _mesa_program_lexer_get_leng_ALREADY_DEFINED
#else
#define yyget_leng _mesa_program_lexer_get_leng
#endif
d69 1
a69 5
#ifdef yyget_text
#define _mesa_program_lexer_get_text_ALREADY_DEFINED
#else
#define yyget_text _mesa_program_lexer_get_text
#endif
d71 1
a71 5
#ifdef yyget_lineno
#define _mesa_program_lexer_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno _mesa_program_lexer_get_lineno
#endif
d73 1
a73 5
#ifdef yyset_lineno
#define _mesa_program_lexer_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno _mesa_program_lexer_set_lineno
#endif
d75 1
a75 5
#ifdef yyget_column
#define _mesa_program_lexer_get_column_ALREADY_DEFINED
#else
#define yyget_column _mesa_program_lexer_get_column
#endif
d77 1
a77 5
#ifdef yyset_column
#define _mesa_program_lexer_set_column_ALREADY_DEFINED
#else
#define yyset_column _mesa_program_lexer_set_column
#endif
d79 1
a79 5
#ifdef yywrap
#define _mesa_program_lexer_wrap_ALREADY_DEFINED
#else
#define yywrap _mesa_program_lexer_wrap
#endif
d81 1
a81 5
#ifdef yyget_lval
#define _mesa_program_lexer_get_lval_ALREADY_DEFINED
#else
#define yyget_lval _mesa_program_lexer_get_lval
#endif
d83 1
a83 5
#ifdef yyset_lval
#define _mesa_program_lexer_set_lval_ALREADY_DEFINED
#else
#define yyset_lval _mesa_program_lexer_set_lval
#endif
d85 1
a85 5
#ifdef yyget_lloc
#define _mesa_program_lexer_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc _mesa_program_lexer_get_lloc
#endif
d87 1
a87 5
#ifdef yyset_lloc
#define _mesa_program_lexer_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc _mesa_program_lexer_set_lloc
#endif
d89 1
a89 5
#ifdef yyalloc
#define _mesa_program_lexer_alloc_ALREADY_DEFINED
#else
#define yyalloc _mesa_program_lexer_alloc
#endif
d91 1
a91 5
#ifdef yyrealloc
#define _mesa_program_lexer_realloc_ALREADY_DEFINED
#else
#define yyrealloc _mesa_program_lexer_realloc
#endif
d93 1
a93 5
#ifdef yyfree
#define _mesa_program_lexer_free_ALREADY_DEFINED
#else
#define yyfree _mesa_program_lexer_free
#endif
a164 4
#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

a168 2
/* begin standard C++ headers. */

d217 1
a217 1
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
d326 1
a326 1
	 * (via yyrestart()), so that the user can continue scanning by
d348 20
a367 20
void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );
d369 1
a369 1
#define yy_new_buffer yy_create_buffer
d373 1
a373 1
        yyensure_buffer_stack (yyscanner); \
d375 1
a375 1
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
d382 1
a382 1
        yyensure_buffer_stack (yyscanner); \
d384 1
a384 1
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
d1097 2
a1098 2
#line 1259 "program/lex.yy.c"
#line 1260 "program/lex.yy.c"
d1160 1
a1160 1
int yylex_init (yyscan_t* scanner);
d1162 1
a1162 1
int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);
d1167 1
a1167 1
int yylex_destroy ( yyscan_t yyscanner );
d1169 1
a1169 1
int yyget_debug ( yyscan_t yyscanner );
d1171 1
a1171 1
void yyset_debug ( int debug_flag , yyscan_t yyscanner );
d1173 1
a1173 1
YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );
d1175 1
a1175 1
void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );
d1177 1
a1177 1
FILE *yyget_in ( yyscan_t yyscanner );
d1179 1
a1179 1
void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );
d1181 1
a1181 1
FILE *yyget_out ( yyscan_t yyscanner );
d1183 1
a1183 1
void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );
d1185 1
a1185 1
			int yyget_leng ( yyscan_t yyscanner );
d1187 1
a1187 1
char *yyget_text ( yyscan_t yyscanner );
d1189 1
a1189 1
int yyget_lineno ( yyscan_t yyscanner );
d1191 1
a1191 1
void yyset_lineno ( int _line_number , yyscan_t yyscanner );
d1193 1
a1193 1
int yyget_column  ( yyscan_t yyscanner );
d1195 1
a1195 1
void yyset_column ( int _column_no , yyscan_t yyscanner );
d1197 1
a1197 1
YYSTYPE * yyget_lval ( yyscan_t yyscanner );
d1199 1
a1199 1
void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );
d1201 1
a1201 1
       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
d1203 1
a1203 1
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
d1211 1
a1211 1
extern "C" int yywrap ( yyscan_t yyscanner );
d1213 1
a1213 1
extern int yywrap ( yyscan_t yyscanner );
d1320 1
a1320 1
extern int yylex \
d1323 1
a1323 1
#define YY_DECL int yylex \
d1373 1
a1373 1
			yyensure_buffer_stack (yyscanner);
d1375 1
a1375 1
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
d1378 1
a1378 1
		yy_load_buffer_state( yyscanner );
d1385 1
a1385 1
#line 1547 "program/lex.yy.c"
d2325 1
a2325 1
#line 2487 "program/lex.yy.c"
d2343 1
a2343 1
			 * yylex().  If so, then we have to assure
d2403 1
a2403 1
				if ( yywrap( yyscanner ) )
d2457 1
a2457 1
} /* end of yylex */
d2536 1
a2536 2
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
d2568 1
a2568 1
			yyrestart( yyin  , yyscanner);
d2585 1
a2585 2
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
a2587 2
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
d2743 1
a2743 1
					yyrestart( yyin , yyscanner);
d2749 1
a2749 1
					if ( yywrap( yyscanner ) )
d2781 1
a2781 1
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
d2786 1
a2786 1
        yyensure_buffer_stack (yyscanner);
d2788 1
a2788 1
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
d2791 2
a2792 2
	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
d2799 1
a2799 1
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
d2805 2
a2806 2
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
d2808 1
a2808 1
	yyensure_buffer_stack (yyscanner);
d2821 1
a2821 1
	yy_load_buffer_state( yyscanner );
d2824 2
a2825 2
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
d2831 1
a2831 1
static void yy_load_buffer_state  (yyscan_t yyscanner)
d2846 1
a2846 1
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
d2850 1
a2850 1
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
d2852 1
a2852 1
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
d2859 1
a2859 1
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
d2861 1
a2861 1
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
d2865 1
a2865 1
	yy_init_buffer( b, file , yyscanner);
d2871 1
a2871 1
 * @@param b a buffer created with yy_create_buffer()
d2874 1
a2874 1
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
d2885 1
a2885 1
		yyfree( (void *) b->yy_ch_buf , yyscanner );
d2887 1
a2887 1
	yyfree( (void *) b , yyscanner );
d2892 1
a2892 1
 * such as during a yyrestart() or at EOF.
d2894 1
a2894 1
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
d2900 1
a2900 1
	yy_flush_buffer( b , yyscanner);
d2905 2
a2906 2
    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
d2923 1
a2923 1
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
d2944 1
a2944 1
		yy_load_buffer_state( yyscanner );
d2953 1
a2953 1
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
d2959 1
a2959 1
	yyensure_buffer_stack(yyscanner);
d2961 1
a2961 1
	/* This block is copied from yy_switch_to_buffer. */
d2975 2
a2976 2
	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
d2984 1
a2984 1
void yypop_buffer_state (yyscan_t yyscanner)
d2990 1
a2990 1
	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
d2996 1
a2996 1
		yy_load_buffer_state( yyscanner );
d3004 1
a3004 1
static void yyensure_buffer_stack (yyscan_t yyscanner)
d3016 1
a3016 1
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
d3020 1
a3020 1
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
d3035 1
a3035 1
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
d3040 1
a3040 1
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
d3054 1
a3054 1
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
d3064 1
a3064 1
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
d3066 1
a3066 1
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
d3078 1
a3078 1
	yy_switch_to_buffer( b , yyscanner );
d3083 1
a3083 1
/** Setup the input buffer state to scan a string. The next call to yylex() will
d3089 1
a3089 1
 *       yy_scan_bytes() instead.
d3091 1
a3091 1
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
d3094 1
a3094 1
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
d3097 1
a3097 1
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
d3104 1
a3104 1
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
d3113 1
a3113 1
	buf = (char *) yyalloc( n , yyscanner );
d3115 1
a3115 1
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
d3122 1
a3122 1
	b = yy_scan_buffer( buf, n , yyscanner);
d3124 1
a3124 1
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
d3142 1
a3142 1
	fprintf( stderr, "%s\n", msg );
d3168 1
a3168 1
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
d3177 1
a3177 1
int yyget_lineno  (yyscan_t yyscanner)
d3190 1
a3190 1
int yyget_column  (yyscan_t yyscanner)
d3203 1
a3203 1
FILE *yyget_in  (yyscan_t yyscanner)
d3212 1
a3212 1
FILE *yyget_out  (yyscan_t yyscanner)
d3221 1
a3221 1
int yyget_leng  (yyscan_t yyscanner)
d3231 1
a3231 1
char *yyget_text  (yyscan_t yyscanner)
d3241 1
a3241 1
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
d3251 1
a3251 1
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
d3257 1
a3257 1
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
d3266 1
a3266 1
void yyset_column (int  _column_no , yyscan_t yyscanner)
d3272 1
a3272 1
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
d3281 1
a3281 1
 * @@see yy_switch_to_buffer
d3283 1
a3283 1
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
d3289 1
a3289 1
void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
d3295 1
a3295 1
int yyget_debug  (yyscan_t yyscanner)
d3301 1
a3301 1
void yyset_debug (int  _bdebug , yyscan_t yyscanner)
d3309 1
a3309 1
YYSTYPE * yyget_lval  (yyscan_t yyscanner)
d3315 1
a3315 1
void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
d3321 1
a3321 1
YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
d3327 1
a3327 1
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
d3335 1
a3335 1
/* yylex_init is special because it creates the scanner itself, so it is
d3339 1
a3339 1
int yylex_init(yyscan_t* ptr_yy_globals)
d3346 1
a3346 1
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );
d3359 1
a3359 1
/* yylex_init_extra has the same functionality as yylex_init, but follows the
d3363 1
a3363 1
 * The user defined value in the first argument will be available to yyalloc in
d3366 1
a3366 1
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
d3370 1
a3370 1
    yyset_extra (yy_user_defined, &dummy_yyguts);
d3377 1
a3377 1
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
d3388 1
a3388 1
    yyset_extra (yy_user_defined, *ptr_yy_globals);
d3397 1
a3397 1
     * This function is called from yylex_destroy(), so don't allocate here.
d3421 1
a3421 1
     * yylex_init()
d3426 2
a3427 2
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
d3433 1
a3433 1
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
d3435 1
a3435 1
		yypop_buffer_state(yyscanner);
d3439 1
a3439 1
	yyfree(yyg->yy_buffer_stack , yyscanner);
d3443 1
a3443 1
        yyfree( yyg->yy_start_stack , yyscanner );
d3447 1
a3447 1
     * yylex() is called, initialization will occur. */
d3451 1
a3451 1
    yyfree ( yyscanner , yyscanner );
d3483 1
a3483 1
void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
d3490 1
a3490 1
void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
d3505 1
a3505 1
void yyfree (void * ptr , yyscan_t yyscanner)
d3509 1
a3509 1
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
@


