head	1.2;
access;
symbols
	mesa-17_1_6:1.1.1.4
	OPENBSD_6_1:1.1.1.3.0.2
	OPENBSD_6_1_BASE:1.1.1.3
	mesa-13_0_6:1.1.1.3
	mesa-13_0_5:1.1.1.3
	mesa-13_0_3:1.1.1.3
	mesa-13_0_2:1.1.1.3
	OPENBSD_6_0:1.1.1.2.0.4
	OPENBSD_6_0_BASE:1.1.1.2
	mesa-11_2_2:1.1.1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	mesa-11_0_9:1.1.1.1
	mesa-11_0_8:1.1.1.1
	mesa-11_0_6:1.1.1.1
	mesa:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2017.08.26.16.59.40;	author jsg;	state Exp;
branches;
next	1.1;
commitid	D0k2io1oY8gcsQ2S;

1.1
date	2015.11.22.02.38.12;	author jsg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	bJUptkbooQfJPk5r;

1.1.1.1
date	2015.11.22.02.38.12;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	bJUptkbooQfJPk5r;

1.1.1.2
date	2016.05.29.10.13.21;	author jsg;	state Exp;
branches;
next	1.1.1.3;
commitid	OwGfrJACrYJkCVJ4;

1.1.1.3
date	2016.12.11.08.37.57;	author jsg;	state Exp;
branches;
next	1.1.1.4;
commitid	uuv5VTS15jglEDZU;

1.1.1.4
date	2017.08.14.09.43.23;	author jsg;	state Exp;
branches;
next	;
commitid	enNyoMGkcgwM3Ww6;


desc
@@


1.2
log
@Revert to Mesa 13.0.6 to hopefully address rendering issues a handful of
people have reported with xpdf/fvwm on ivy bridge with modesetting driver.
@
text
@/**************************************************************************

Copyright 2002 VMware, Inc.

All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
on the rights to use, copy, modify, merge, publish, distribute, sub
license, and/or sell copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice (including the next
paragraph) shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
VMWARE AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

/*
 * Authors:
 *   Keith Whitwell <keithw@@vmware.com>
 *
 */

#ifndef __VBO_EXEC_H__
#define __VBO_EXEC_H__

#include "main/mtypes.h"
#include "vbo.h"
#include "vbo_attrib.h"

#include "main/imports.h"

/**
 * Max number of primitives (number of glBegin/End pairs) per VBO.
 */
#define VBO_MAX_PRIM 64


/**
 * Size of the VBO to use for glBegin/glVertex/glEnd-style rendering.
 */
#define VBO_VERT_BUFFER_SIZE (1024*64)	/* bytes */


/** Current vertex program mode */
enum vp_mode {
   VP_NONE,   /**< fixed function */
   VP_ARB     /**< ARB vertex program or GLSL vertex shader */
};


struct vbo_exec_eval1_map {
   struct gl_1d_map *map;
   GLuint sz;
};

struct vbo_exec_eval2_map {
   struct gl_2d_map *map;
   GLuint sz;
};



struct vbo_exec_copied_vtx {
   fi_type buffer[VBO_ATTRIB_MAX * 4 * VBO_MAX_COPIED_VERTS];
   GLuint nr;
};


struct vbo_exec_context
{
   struct gl_context *ctx;
   GLvertexformat vtxfmt;
   GLvertexformat vtxfmt_noop;
   GLboolean validating; /**< if we're in the middle of state validation */

   struct {
      struct gl_buffer_object *bufferobj;

      GLuint vertex_size;       /* in dwords */

      struct _mesa_prim prim[VBO_MAX_PRIM];
      GLuint prim_count;

      fi_type *buffer_map;
      fi_type *buffer_ptr;              /* cursor, points into buffer */
      GLuint   buffer_used;             /* in bytes */
      fi_type vertex[VBO_ATTRIB_MAX*4]; /* current vertex */

      GLuint vert_count;   /**< Number of vertices currently in buffer */
      GLuint max_vert;     /**< Max number of vertices allowed in buffer */
      struct vbo_exec_copied_vtx copied;

      GLbitfield64 enabled;             /**< mask of enabled vbo arrays. */
      GLubyte attrsz[VBO_ATTRIB_MAX];   /**< nr. of attrib components (1..4) */
      GLenum attrtype[VBO_ATTRIB_MAX];  /**< GL_FLOAT, GL_DOUBLE, GL_INT, etc */
      GLubyte active_sz[VBO_ATTRIB_MAX];  /**< attrib size (nr. 32-bit words) */

      /** pointers into the current 'vertex' array, declared above */
      fi_type *attrptr[VBO_ATTRIB_MAX];

      struct gl_client_array arrays[VERT_ATTRIB_MAX];

      /* According to program mode, the values above plus current
       * values are squashed down to the 32 attributes passed to the
       * vertex program below:
       */
      const struct gl_client_array *inputs[VERT_ATTRIB_MAX];
   } vtx;

   struct {
      GLboolean recalculate_maps;
      struct vbo_exec_eval1_map map1[VERT_ATTRIB_MAX];
      struct vbo_exec_eval2_map map2[VERT_ATTRIB_MAX];
   } eval;

   struct {
      /* Arrays and current values manipulated according to program
       * mode, etc.  These are the attributes as seen by vertex
       * programs:
       */
      const struct gl_client_array *inputs[VERT_ATTRIB_MAX];
      GLboolean recalculate_inputs;
   } array;

   /* Which flags to set in vbo_exec_begin_vertices() */
   GLbitfield begin_vertices_flags;

#ifdef DEBUG
   GLint flush_call_depth;
#endif
};



/* External API:
 */
void vbo_exec_init( struct gl_context *ctx );
void vbo_exec_destroy( struct gl_context *ctx );
void vbo_exec_invalidate_state( struct gl_context *ctx, GLbitfield new_state );


/* Internal functions:
 */
void vbo_reset_attr(struct vbo_exec_context *exec, GLuint attr);

void vbo_exec_vtx_init( struct vbo_exec_context *exec );
void vbo_exec_vtx_destroy( struct vbo_exec_context *exec );


void vbo_exec_vtx_flush( struct vbo_exec_context *exec, GLboolean unmap );
void vbo_exec_vtx_map( struct vbo_exec_context *exec );


void vbo_exec_eval_update( struct vbo_exec_context *exec );

void vbo_exec_do_EvalCoord2f( struct vbo_exec_context *exec, 
				     GLfloat u, GLfloat v );

void vbo_exec_do_EvalCoord1f( struct vbo_exec_context *exec,
				     GLfloat u);

#endif
@


1.1
log
@Initial revision
@
text
@d82 1
a82 1
   struct gl_context *ctx;   
d100 2
a101 2
      GLuint vert_count;
      GLuint max_vert;
d104 4
a107 3
      GLubyte attrsz[VBO_ATTRIB_MAX];
      GLenum attrtype[VBO_ATTRIB_MAX];
      GLubyte active_sz[VBO_ATTRIB_MAX];
d109 1
d111 1
a120 1
   
d136 1
a136 1
   /* Which flags to set in vbo_exec_BeginVertices() */
d150 1
a150 4
void vbo_exec_invalidate_state( struct gl_context *ctx, GLuint new_state );

void vbo_exec_BeginVertices( struct gl_context *ctx );
void vbo_exec_FlushVertices( struct gl_context *ctx, GLuint flags );
d155 1
a163 2

void vbo_exec_vtx_wrap( struct vbo_exec_context *exec );
@


1.1.1.1
log
@import Mesa 11.0.6
@
text
@@


1.1.1.2
log
@Import Mesa 11.2.2
@
text
@d82 1
a82 1
   struct gl_context *ctx;
d100 2
a101 2
      GLuint vert_count;   /**< Number of vertices currently in buffer */
      GLuint max_vert;     /**< Max number of vertices allowed in buffer */
d104 3
a106 3
      GLubyte attrsz[VBO_ATTRIB_MAX];   /**< nr. of attrib components (1..4) */
      GLenum attrtype[VBO_ATTRIB_MAX];  /**< GL_FLOAT, GL_DOUBLE, GL_INT, etc */
      GLubyte active_sz[VBO_ATTRIB_MAX];  /**< attrib size (nr. 32-bit words) */
a107 1
      /** pointers into the current 'vertex' array, declared above */
a108 1

d118 1
d134 1
a134 1
   /* Which flags to set in vbo_exec_begin_vertices() */
d148 4
a151 1
void vbo_exec_invalidate_state( struct gl_context *ctx, GLbitfield new_state );
d164 2
@


1.1.1.3
log
@Import Mesa 13.0.2
@
text
@a103 1
      GLbitfield64 enabled;             /**< mask of enabled vbo arrays. */
a153 1
void vbo_reset_attr(struct vbo_exec_context *exec, GLuint attr);
@


1.1.1.4
log
@Import Mesa 17.1.6
@
text
@d112 1
a112 1
      struct gl_vertex_array arrays[VERT_ATTRIB_MAX];
d118 1
a118 1
      const struct gl_vertex_array *inputs[VERT_ATTRIB_MAX];
d132 1
a132 1
      const struct gl_vertex_array *inputs[VERT_ATTRIB_MAX];
d155 2
@


