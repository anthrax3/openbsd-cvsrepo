head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.12
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.2.0.16
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.14
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.6
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v1_2_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.11.03.10.48.03;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	zqyTNx59tzFXjFL4;

1.6
date	2016.10.04.15.02.31;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	NCLOmmyYBlSjSh3b;

1.5
date	2016.03.06.13.37.21;	author matthieu;	state Exp;
branches
	1.5.2.1;
next	1.4;
commitid	lveYUhu3JlpVTSbB;

1.4
date	2013.05.23.22.42.10;	author matthieu;	state Exp;
branches
	1.4.12.1;
next	1.3;

1.3
date	2013.03.09.16.34.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.02.15.20.43;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.16.39.04;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.16.39.04;	author matthieu;	state Exp;
branches;
next	;

1.4.12.1
date	2016.10.04.18.55.14;	author matthieu;	state Exp;
branches;
next	;
commitid	PNaHexTGDQbxwlMB;

1.5.2.1
date	2016.10.04.18.54.01;	author matthieu;	state Exp;
branches;
next	;
commitid	b1RDOJn7dNqLwuaq;


desc
@@


1.7
log
@Update to libXrandr 1.5.1
@
text
@/*
 * Copyright Â© 2006 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that copyright
 * notice and this permission notice appear in supporting documentation, and
 * that the name of the copyright holders not be used in advertising or
 * publicity pertaining to distribution of the software without specific,
 * written prior permission.  The copyright holders make no representations
 * about the suitability of this software for any purpose.  It is provided "as
 * is" without express or implied warranty.
 *
 * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
 * OF THIS SOFTWARE.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <limits.h>
#include <stdio.h>
#include <X11/Xlib.h>
/* we need to be able to manipulate the Display structure on events */
#include <X11/Xlibint.h>
#include <X11/extensions/render.h>
#include <X11/extensions/Xrender.h>
#include "Xrandrint.h"

/*
 * this is cheating on the knowledge that the two requests are identical
 * but for the request number.
 */
static XRRScreenResources *
doGetScreenResources (Display *dpy, Window window, int poll)
{
    XExtDisplayInfo		*info = XRRFindDisplay(dpy);
    xRRGetScreenResourcesReply  rep;
    xRRGetScreenResourcesReq	*req;
    _XAsyncHandler		async;
    _XRRVersionState		async_state;
    int				nbytes, nbytesRead, rbytes;
    int				i;
    xRRQueryVersionReq		*vreq;
    XRRScreenResources		*xrsr;
    char			*names;
    char			*wire_names, *wire_name;
    Bool			getting_version = False;
    XRandRInfo			*xrri;

    RRCheckExtension (dpy, info, NULL);

    LockDisplay (dpy);
    xrri = (XRandRInfo *) info->data;

    if (xrri->major_version == -1)
    {
	/* hide a version query in the request */
	GetReq (RRQueryVersion, vreq);
	vreq->reqType = info->codes->major_opcode;
	vreq->randrReqType = X_RRQueryVersion;
	vreq->majorVersion = RANDR_MAJOR;
	vreq->minorVersion = RANDR_MINOR;

	async_state.version_seq = dpy->request;
	async_state.error = False;
	async.next = dpy->async_handlers;
	async.handler = _XRRVersionHandler;
	async.data = (XPointer) &async_state;
	dpy->async_handlers = &async;

	getting_version = True;
    }

    GetReq (RRGetScreenResources, req);
    req->reqType = info->codes->major_opcode;
    req->randrReqType = poll ? X_RRGetScreenResources
			     : X_RRGetScreenResourcesCurrent;
    req->window = window;

    if (!_XReply (dpy, (xReply *) &rep, 0, xFalse))
    {
	if (getting_version)
	    DeqAsyncHandler (dpy, &async);
	UnlockDisplay (dpy);
	SyncHandle ();
	return NULL;
    }
    if (getting_version)
    {
	DeqAsyncHandler (dpy, &async);
	if (async_state.error)
	{
	    UnlockDisplay (dpy);
	    SyncHandle();
	    LockDisplay (dpy);
	}
	xrri->major_version = async_state.major_version;
	xrri->minor_version = async_state.minor_version;
	xrri->has_rates = _XRRHasRates (xrri->minor_version, xrri->major_version);
    }

    if (rep.length < INT_MAX >> 2) {
	nbytes = (long) rep.length << 2;

	nbytesRead = (long) (rep.nCrtcs * 4 +
			     rep.nOutputs * 4 +
			     rep.nModes * SIZEOF (xRRModeInfo) +
			     ((rep.nbytesNames + 3) & ~3));

	/*
	 * first we must compute how much space to allocate for
	 * randr library's use; we'll allocate the structures in a single
	 * allocation, on cleanlyness grounds.
	 */

	rbytes = (sizeof (XRRScreenResources) +
		  rep.nCrtcs * sizeof (RRCrtc) +
		  rep.nOutputs * sizeof (RROutput) +
		  rep.nModes * sizeof (XRRModeInfo) +
		  rep.nbytesNames + rep.nModes);    /* '\0' terminate names */

	xrsr = (XRRScreenResources *) Xmalloc(rbytes);
	wire_names = (char *) Xmalloc (rep.nbytesNames);
    } else {
	nbytes = 0;
	nbytesRead = 0;
	rbytes = 0;
	xrsr = NULL;
	wire_names = NULL;
    }

    if (xrsr == NULL || wire_names == NULL) {
	Xfree (xrsr);
	Xfree (wire_names);
	_XEatDataWords (dpy, rep.length);
	UnlockDisplay (dpy);
	SyncHandle ();
	return NULL;
    }

    xrsr->timestamp = rep.timestamp;
    xrsr->configTimestamp = rep.configTimestamp;
    xrsr->ncrtc = rep.nCrtcs;
    xrsr->crtcs = (RRCrtc *) (xrsr + 1);
    xrsr->noutput = rep.nOutputs;
    xrsr->outputs = (RROutput *) (xrsr->crtcs + rep.nCrtcs);
    xrsr->nmode = rep.nModes;
    xrsr->modes = (XRRModeInfo *) (xrsr->outputs + rep.nOutputs);
    names = (char *) (xrsr->modes + rep.nModes);

    _XRead32 (dpy, (long *) xrsr->crtcs, rep.nCrtcs << 2);
    _XRead32 (dpy, (long *) xrsr->outputs, rep.nOutputs << 2);

    for (i = 0; i < rep.nModes; i++)  {
	xRRModeInfo modeInfo;

	_XReadPad (dpy, (char *) &modeInfo, SIZEOF (xRRModeInfo));
	xrsr->modes[i].id = modeInfo.id;
	xrsr->modes[i].width = modeInfo.width;
	xrsr->modes[i].height = modeInfo.height;
	xrsr->modes[i].dotClock = modeInfo.dotClock;
	xrsr->modes[i].hSyncStart = modeInfo.hSyncStart;
	xrsr->modes[i].hSyncEnd = modeInfo.hSyncEnd;
	xrsr->modes[i].hTotal = modeInfo.hTotal;
	xrsr->modes[i].hSkew = modeInfo.hSkew;
	xrsr->modes[i].vSyncStart = modeInfo.vSyncStart;
	xrsr->modes[i].vSyncEnd = modeInfo.vSyncEnd;
	xrsr->modes[i].vTotal = modeInfo.vTotal;
	xrsr->modes[i].nameLength = modeInfo.nameLength;
	xrsr->modes[i].modeFlags = modeInfo.modeFlags;
    }

    /*
     * Read names and '\0' pad each one
     */
    _XReadPad (dpy, wire_names, rep.nbytesNames);
    wire_name = wire_names;
    for (i = 0; i < rep.nModes; i++)  {
	xrsr->modes[i].name = names;
	if (xrsr->modes[i].nameLength > rep.nbytesNames) {
	    Xfree (xrsr);
	    Xfree (wire_names);
	    UnlockDisplay (dpy);
	    SyncHandle ();
	    return NULL;
	}
	rep.nbytesNames -= xrsr->modes[i].nameLength;
	memcpy (names, wire_name, xrsr->modes[i].nameLength);
	names[xrsr->modes[i].nameLength] = '\0';
	names += xrsr->modes[i].nameLength + 1;
	wire_name += xrsr->modes[i].nameLength;
    }
    Xfree (wire_names);

    /*
     * Skip any extra data
     */
    if (nbytes > nbytesRead)
	_XEatData (dpy, (unsigned long) (nbytes - nbytesRead));

    UnlockDisplay (dpy);
    SyncHandle();
    return (XRRScreenResources *) xrsr;
}

XRRScreenResources *
XRRGetScreenResources(Display *dpy, Window window)
{
    return doGetScreenResources(dpy, window, 1);
}

XRRScreenResources *
XRRGetScreenResourcesCurrent(Display *dpy, Window window)
{
    return doGetScreenResources(dpy, window, 0);
}

void
XRRFreeScreenResources (XRRScreenResources *resources)
{
    Xfree (resources);
}

Status
XRRGetScreenSizeRange (Display *dpy, Window window,
		       int *minWidth, int *minHeight,
		       int *maxWidth, int *maxHeight)
{
    XExtDisplayInfo		*info = XRRFindDisplay(dpy);
    xRRGetScreenSizeRangeReq	*req;
    xRRGetScreenSizeRangeReply	rep;

    RRCheckExtension (dpy, info, 0);
    LockDisplay (dpy);
    GetReq (RRGetScreenSizeRange, req);
    req->reqType = info->codes->major_opcode;
    req->randrReqType = X_RRGetScreenSizeRange;
    req->window = window;
    if (!_XReply (dpy, (xReply *) &rep, 0, xFalse))
    {
	UnlockDisplay (dpy);
	SyncHandle ();
	return False;
    }
    UnlockDisplay (dpy);
    SyncHandle ();
    *minWidth = rep.minWidth;
    *minHeight = rep.minHeight;
    *maxWidth = rep.maxWidth;
    *maxHeight = rep.maxHeight;
   return True;
}

void
XRRSetScreenSize (Display *dpy, Window window,
		  int width, int height,
		  int mmWidth, int mmHeight)
{
    XExtDisplayInfo		*info = XRRFindDisplay(dpy);
    xRRSetScreenSizeReq		*req;

    RRSimpleCheckExtension (dpy, info);
    LockDisplay (dpy);
    GetReq (RRSetScreenSize, req);
    req->reqType = info->codes->major_opcode;
    req->randrReqType = X_RRSetScreenSize;
    req->window = window;
    req->width = width;
    req->height = height;
    req->widthInMillimeters = mmWidth;
    req->heightInMillimeters = mmHeight;
    UnlockDisplay (dpy);
    SyncHandle ();
}
@


1.6
log
@Avoid out of boundary accesses on illegal responses

The responses of the connected X server have to be properly checked
to avoid out of boundary accesses that could otherwise be triggered
by a malicious server.

From Tobias Stoeckmann / X.Org security advisory Oct 4, 2016
@
text
@d140 2
a141 2
	if (xrsr) Xfree (xrsr);
	if (wire_names) Xfree (wire_names);
@


1.5
log
@Update to libXrandr 1.5.0
@
text
@d27 1
d109 2
a110 1
    nbytes = (long) rep.length << 2;
d112 26
a137 10
    nbytesRead = (long) (rep.nCrtcs * 4 +
			 rep.nOutputs * 4 +
			 rep.nModes * SIZEOF (xRRModeInfo) +
			 ((rep.nbytesNames + 3) & ~3));

    /*
     * first we must compute how much space to allocate for
     * randr library's use; we'll allocate the structures in a single
     * allocation, on cleanlyness grounds.
     */
a138 8
    rbytes = (sizeof (XRRScreenResources) +
	      rep.nCrtcs * sizeof (RRCrtc) +
	      rep.nOutputs * sizeof (RROutput) +
	      rep.nModes * sizeof (XRRModeInfo) +
	      rep.nbytesNames + rep.nModes);	/* '\0' terminate names */

    xrsr = (XRRScreenResources *) Xmalloc(rbytes);
    wire_names = (char *) Xmalloc (rep.nbytesNames);
d187 8
@


1.5.2.1
log
@Protocol handling issues in X Window System client libraries
X.Org security advisory: October 4, 2016

Fix a number of issues in the way various X client libraries handle
server responses.

Checked by tj@@
@
text
@a26 1
#include <limits.h>
d108 1
a108 2
    if (rep.length < INT_MAX >> 2) {
	nbytes = (long) rep.length << 2;
d110 16
a125 26
	nbytesRead = (long) (rep.nCrtcs * 4 +
			     rep.nOutputs * 4 +
			     rep.nModes * SIZEOF (xRRModeInfo) +
			     ((rep.nbytesNames + 3) & ~3));

	/*
	 * first we must compute how much space to allocate for
	 * randr library's use; we'll allocate the structures in a single
	 * allocation, on cleanlyness grounds.
	 */

	rbytes = (sizeof (XRRScreenResources) +
		  rep.nCrtcs * sizeof (RRCrtc) +
		  rep.nOutputs * sizeof (RROutput) +
		  rep.nModes * sizeof (XRRModeInfo) +
		  rep.nbytesNames + rep.nModes);    /* '\0' terminate names */

	xrsr = (XRRScreenResources *) Xmalloc(rbytes);
	wire_names = (char *) Xmalloc (rep.nbytesNames);
    } else {
	nbytes = 0;
	nbytesRead = 0;
	rbytes = 0;
	xrsr = NULL;
	wire_names = NULL;
    }
d127 2
a176 8
	if (xrsr->modes[i].nameLength > rep.nbytesNames) {
	    Xfree (xrsr);
	    Xfree (wire_names);
	    UnlockDisplay (dpy);
	    SyncHandle ();
	    return NULL;
	}
	rep.nbytesNames -= xrsr->modes[i].nameLength;
@


1.4
log
@Merge upstream fixes for several X libs vulnerabilities
discovered by Ilja van Sprundel.

CVE-2013-1981 X.org libX11 1.5.99.901 (1.6 RC1) integer overflows
CVE-2013-1982 X.org libXext 1.3.1 integer overflows
CVE-2013-1983 X.org libXfixes 5.0 integer overflows
CVE-2013-1984 X.org libXi 1.7.1 integer overflows
CVE-2013-1985 X.org libXinerama 1.1.2 integer overflows
CVE-2013-1986 X.org libXrandr 1.4.0 integer overflows
CVE-2013-1987 X.org libXrender 0.9.7 integer overflows
CVE-2013-1988 X.org libXRes 1.0.6 integer overflows
CVE-2013-1989 X.org libXv 1.0.7 integer overflows
CVE-2013-1990 X.org libXvMC 1.0.7 integer overflows
CVE-2013-1991 X.org libXxf86dga 1.1.3 integer overflows
CVE-2013-1992 X.org libdmx 1.1.2 integer overflows
CVE-2013-1994 X.org libchromeXvMC & libchromeXvMCPro in openChrome
0.3.2 integer overflows
CVE-2013-1995 X.org libXi 1.7.1 sign extension issues
CVE-2013-1996 X.org libFS 1.0.4 sign extension issues
CVE-2013-1997 X.org libX11 1.5.99.901 (1.6 RC1) buffer overflows
CVE-2013-1998 X.org libXi 1.7.1 buffer overflows
CVE-2013-1999 X.org libXvMC 1.0.7 buffer overflows
CVE-2013-2000 X.org libXxf86dga 1.1.3 buffer overflows
CVE-2013-2001 X.org libXxf86vm 1.1.2 buffer overflows
CVE-2013-2002 X.org libXt 1.1.3 buffer overflows
CVE-2013-2003 X.org libXcursor 1.1.13 integer overflows
CVE-2013-2004 X.org libX11 1.5.99.901 (1.6 RC1) unbounded recursion
CVE-2013-2005 X.org libXt 1.1.3 memory corruption
CVE-2013-2066 X.org libXv 1.0.7 buffer overflows
@
text
@d148 2
a149 2
    _XRead32 (dpy, xrsr->crtcs, rep.nCrtcs << 2);
    _XRead32 (dpy, xrsr->outputs, rep.nOutputs << 2);
@


1.4.12.1
log
@Protocol handling issues in X Window System client libraries
X.Org security advisory: October 4, 2016

Fix a number of issues in the way various X client libraries handle
server responses.

Checked by tj@@
@
text
@a26 1
#include <limits.h>
d108 1
a108 2
    if (rep.length < INT_MAX >> 2) {
	nbytes = (long) rep.length << 2;
d110 16
a125 26
	nbytesRead = (long) (rep.nCrtcs * 4 +
			     rep.nOutputs * 4 +
			     rep.nModes * SIZEOF (xRRModeInfo) +
			     ((rep.nbytesNames + 3) & ~3));

	/*
	 * first we must compute how much space to allocate for
	 * randr library's use; we'll allocate the structures in a single
	 * allocation, on cleanlyness grounds.
	 */

	rbytes = (sizeof (XRRScreenResources) +
		  rep.nCrtcs * sizeof (RRCrtc) +
		  rep.nOutputs * sizeof (RROutput) +
		  rep.nModes * sizeof (XRRModeInfo) +
		  rep.nbytesNames + rep.nModes);    /* '\0' terminate names */

	xrsr = (XRRScreenResources *) Xmalloc(rbytes);
	wire_names = (char *) Xmalloc (rep.nbytesNames);
    } else {
	nbytes = 0;
	nbytesRead = 0;
	rbytes = 0;
	xrsr = NULL;
	wire_names = NULL;
    }
d127 2
a176 8
	if (xrsr->modes[i].nameLength > rep.nbytesNames) {
	    Xfree (xrsr);
	    Xfree (wire_names);
	    UnlockDisplay (dpy);
	    SyncHandle ();
	    return NULL;
	}
	rep.nbytesNames -= xrsr->modes[i].nameLength;
@


1.3
log
@Update to libXrandr 1.4.0
@
text
@d132 1
a132 1
	_XEatData (dpy, (unsigned long) nbytes);
@


1.2
log
@update to libXrandr 1.3.0
@
text
@d69 1
a69 1
    
d115 2
a116 2
    /* 
     * first we must compute how much space to allocate for 
d150 1
a150 1
    
d153 1
a153 1
	
d183 1
a183 1
    
d189 1
a189 1
    
@


1.1
log
@Initial revision
@
text
@d35 6
a40 2
XRRScreenResources *
XRRGetScreenResources (Display *dpy, Window window)
d56 1
a56 1
    RRCheckExtension (dpy, info, 0);
d82 2
a83 1
    req->randrReqType = X_RRGetScreenResources;
d193 12
@


1.1.1.1
log
@libXrandr 1.2.2
@
text
@@
