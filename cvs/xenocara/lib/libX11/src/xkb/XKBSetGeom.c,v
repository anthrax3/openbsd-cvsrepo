head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.16
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.14
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.12
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.10
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.8
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_1_3:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_1_1:1.1.1.1
	v1_0_99_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.09.28.17.03.22;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.30.19.19.38;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.18.19.37.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.03.12.59.11;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.16.37.35;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.37.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to libX11 1.6.2. No API change.
@
text
@/************************************************************
Copyright (c) 1993 by Silicon Graphics Computer Systems, Inc.

Permission to use, copy, modify, and distribute this
software and its documentation for any purpose and without
fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting
documentation, and that the name of Silicon Graphics not be
used in advertising or publicity pertaining to distribution
of the software without specific prior written permission.
Silicon Graphics makes no representation about the suitability
of this software for any purpose. It is provided "as is"
without any express or implied warranty.

SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
THE USE OR PERFORMANCE OF THIS SOFTWARE.

********************************************************/

#ifdef DEBUG
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <stdio.h>
#endif

#include "Xlibint.h"
#include "XKBlibint.h"
#include <X11/extensions/XKBgeom.h>
#include <X11/extensions/XKBproto.h>

#ifndef MINSHORT
#define	MINSHORT	-32768
#endif
#ifndef MAXSHORT
#define	MAXSHORT	32767
#endif

/***====================================================================***/

#define	_SizeCountedString(s)  ((s)?XkbPaddedSize(2+strlen(s)):4)

static char *
_WriteCountedString(char *wire, char *str)
{
    CARD16 len, *pLen;

    len = (str ? strlen(str) : 0);
    pLen = (CARD16 *) wire;
    *pLen = len;
    if (len && str)
        memcpy(&wire[2], str, len);
    wire += XkbPaddedSize(len + 2);
    return wire;
}

static int
_SizeGeomProperties(XkbGeometryPtr geom)
{
    register int i, size;
    XkbPropertyPtr prop;

    for (size = i = 0, prop = geom->properties; i < geom->num_properties;
         i++, prop++) {
        size += _SizeCountedString(prop->name);
        size += _SizeCountedString(prop->value);
    }
    return size;
}

static int
_SizeGeomColors(XkbGeometryPtr geom)
{
    register int i, size;
    register XkbColorPtr color;

    for (i = size = 0, color = geom->colors; i < geom->num_colors; i++, color++) {
        size += _SizeCountedString(color->spec);
    }
    return size;
}

static int
_SizeGeomShapes(XkbGeometryPtr geom)
{
    register int i, size;
    register XkbShapePtr shape;

    for (i = size = 0, shape = geom->shapes; i < geom->num_shapes; i++, shape++) {
        register int n;
        register XkbOutlinePtr ol;

        size += SIZEOF(xkbShapeWireDesc);
        for (n = 0, ol = shape->outlines; n < shape->num_outlines; n++, ol++) {
            size += SIZEOF(xkbOutlineWireDesc);
            size += ol->num_points * SIZEOF(xkbPointWireDesc);
        }
    }
    return size;
}

static int
_SizeGeomDoodads(int num_doodads, XkbDoodadPtr doodad)
{
    register int i, size;

    for (i = size = 0; i < num_doodads; i++, doodad++) {
        size += SIZEOF(xkbAnyDoodadWireDesc);
        if (doodad->any.type == XkbTextDoodad) {
            size += _SizeCountedString(doodad->text.text);
            size += _SizeCountedString(doodad->text.font);
        }
        else if (doodad->any.type == XkbLogoDoodad) {
            size += _SizeCountedString(doodad->logo.logo_name);
        }
    }
    return size;
}

static int
_SizeGeomSections(XkbGeometryPtr geom)
{
    register int i, size;
    XkbSectionPtr section;

    for (i = size = 0, section = geom->sections; i < geom->num_sections;
         i++, section++) {
        size += SIZEOF(xkbSectionWireDesc);
        if (section->rows) {
            int r;
            XkbRowPtr row;

            for (r = 0, row = section->rows; r < section->num_rows; row++, r++) {
                size += SIZEOF(xkbRowWireDesc);
                size += row->num_keys * SIZEOF(xkbKeyWireDesc);
            }
        }
        if (section->doodads)
            size += _SizeGeomDoodads(section->num_doodads, section->doodads);
        if (section->overlays) {
            int o;
            XkbOverlayPtr ol;

            for (o = 0, ol = section->overlays; o < section->num_overlays;
                 o++, ol++) {
                int r;
                XkbOverlayRowPtr row;

                size += SIZEOF(xkbOverlayWireDesc);
                for (r = 0, row = ol->rows; r < ol->num_rows; r++, row++) {
                    size += SIZEOF(xkbOverlayRowWireDesc);
                    size += row->num_keys * SIZEOF(xkbOverlayKeyWireDesc);
                }
            }
        }
    }
    return size;
}

static int
_SizeGeomKeyAliases(XkbGeometryPtr geom)
{
    return geom->num_key_aliases * (2 * XkbKeyNameLength);
}

/***====================================================================***/

static char *
_WriteGeomProperties(char *wire, XkbGeometryPtr geom)
{
    register int i;
    register XkbPropertyPtr prop;

    for (i = 0, prop = geom->properties; i < geom->num_properties; i++, prop++) {
        wire = _WriteCountedString(wire, prop->name);
        wire = _WriteCountedString(wire, prop->value);
    }
    return wire;
}

static char *
_WriteGeomColors(char *wire, XkbGeometryPtr geom)
{
    register int i;
    register XkbColorPtr color;

    for (i = 0, color = geom->colors; i < geom->num_colors; i++, color++) {
        wire = _WriteCountedString(wire, color->spec);
    }
    return wire;
}

static char *
_WriteGeomShapes(char *wire, XkbGeometryPtr geom)
{
    int i;
    XkbShapePtr shape;
    xkbShapeWireDesc *shapeWire;

    for (i = 0, shape = geom->shapes; i < geom->num_shapes; i++, shape++) {
        register int o;
        XkbOutlinePtr ol;
        xkbOutlineWireDesc *olWire;

        shapeWire = (xkbShapeWireDesc *) wire;
        shapeWire->name = shape->name;
        shapeWire->nOutlines = shape->num_outlines;
        if (shape->primary != NULL)
            shapeWire->primaryNdx = XkbOutlineIndex(shape, shape->primary);
        else
            shapeWire->primaryNdx = XkbNoShape;
        if (shape->approx != NULL)
            shapeWire->approxNdx = XkbOutlineIndex(shape, shape->approx);
        else
            shapeWire->approxNdx = XkbNoShape;
        wire = (char *) &shapeWire[1];
        for (o = 0, ol = shape->outlines; o < shape->num_outlines; o++, ol++) {
            register int p;
            XkbPointPtr pt;
            xkbPointWireDesc *ptWire;

            olWire = (xkbOutlineWireDesc *) wire;
            olWire->nPoints = ol->num_points;
            olWire->cornerRadius = ol->corner_radius;
            wire = (char *) &olWire[1];
            ptWire = (xkbPointWireDesc *) wire;
            for (p = 0, pt = ol->points; p < ol->num_points; p++, pt++) {
                ptWire[p].x = pt->x;
                ptWire[p].y = pt->y;
            }
            wire = (char *) &ptWire[ol->num_points];
        }
    }
    return wire;
}

static char *
_WriteGeomDoodads(char *wire, int num_doodads, XkbDoodadPtr doodad)
{
    register int i;

    for (i = 0; i < num_doodads; i++, doodad++) {
        xkbDoodadWireDesc *doodadWire = (xkbDoodadWireDesc *) wire;

        wire = (char *) &doodadWire[1];
        bzero(doodadWire, SIZEOF(xkbDoodadWireDesc));
        doodadWire->any.name = doodad->any.name;
        doodadWire->any.type = doodad->any.type;
        doodadWire->any.priority = doodad->any.priority;
        doodadWire->any.top = doodad->any.top;
        doodadWire->any.left = doodad->any.left;
        doodadWire->any.angle = doodad->any.angle;
        switch (doodad->any.type) {
        case XkbOutlineDoodad:
        case XkbSolidDoodad:
            doodadWire->shape.colorNdx = doodad->shape.color_ndx;
            doodadWire->shape.shapeNdx = doodad->shape.shape_ndx;
            break;
        case XkbTextDoodad:
            doodadWire->text.width = doodad->text.width;
            doodadWire->text.height = doodad->text.height;
            doodadWire->text.colorNdx = doodad->text.color_ndx;
            wire = _WriteCountedString(wire, doodad->text.text);
            wire = _WriteCountedString(wire, doodad->text.font);
            break;
        case XkbIndicatorDoodad:
            doodadWire->indicator.shapeNdx = doodad->indicator.shape_ndx;
            doodadWire->indicator.onColorNdx = doodad->indicator.on_color_ndx;
            doodadWire->indicator.offColorNdx = doodad->indicator.off_color_ndx;
            break;
        case XkbLogoDoodad:
            doodadWire->logo.colorNdx = doodad->logo.color_ndx;
            doodadWire->logo.shapeNdx = doodad->logo.shape_ndx;
            wire = _WriteCountedString(wire, doodad->logo.logo_name);
            break;
        default:
            break;
        }
    }
    return wire;
}

static char *
_WriteGeomOverlay(char *wire, XkbOverlayPtr ol)
{
    register int r;
    XkbOverlayRowPtr row;
    xkbOverlayWireDesc *olWire = (xkbOverlayWireDesc *) wire;

    olWire->name = ol->name;
    olWire->nRows = ol->num_rows;
    wire = (char *) &olWire[1];
    for (r = 0, row = ol->rows; r < ol->num_rows; r++, row++) {
        unsigned int k;
        XkbOverlayKeyPtr key;
        xkbOverlayRowWireDesc *rowWire = (xkbOverlayRowWireDesc *) wire;

        rowWire->rowUnder = row->row_under;
        rowWire->nKeys = row->num_keys;
        wire = (char *) &rowWire[1];
        for (k = 0, key = row->keys; k < row->num_keys; k++, key++) {
            xkbOverlayKeyWireDesc *keyWire = (xkbOverlayKeyWireDesc *) wire;

            memcpy(keyWire->over, key->over.name, XkbKeyNameLength);
            memcpy(keyWire->under, key->under.name, XkbKeyNameLength);
            wire = (char *) &keyWire[1];
        }
    }
    return wire;
}

static char *
_WriteGeomSections(char *wire, XkbGeometryPtr geom)
{
    register int i;
    XkbSectionPtr section;

    for (i = 0, section = geom->sections; i < geom->num_sections;
         i++, section++) {
        xkbSectionWireDesc *sectionWire = (xkbSectionWireDesc *) wire;

        sectionWire->name = section->name;
        sectionWire->top = section->top;
        sectionWire->left = section->left;
        sectionWire->width = section->width;
        sectionWire->height = section->height;
        sectionWire->angle = section->angle;
        sectionWire->priority = section->priority;
        sectionWire->nRows = section->num_rows;
        sectionWire->nDoodads = section->num_doodads;
        sectionWire->nOverlays = section->num_overlays;
        sectionWire->pad = 0;
        wire = (char *) &sectionWire[1];
        if (section->rows) {
            int r;
            XkbRowPtr row;

            for (r = 0, row = section->rows; r < section->num_rows; r++, row++) {
                xkbRowWireDesc *rowWire = (xkbRowWireDesc *) wire;

                rowWire->top = row->top;
                rowWire->left = row->left;
                rowWire->nKeys = row->num_keys;
                rowWire->vertical = row->vertical;
                rowWire->pad = 0;
                wire = (char *) &rowWire[1];
                if (row->keys) {
                    int k;
                    XkbKeyPtr key;
                    xkbKeyWireDesc *keyWire = (xkbKeyWireDesc *) wire;

                    for (k = 0, key = row->keys; k < row->num_keys; k++, key++) {
                        memcpy(keyWire[k].name, key->name.name,
                               XkbKeyNameLength);
                        keyWire[k].gap = key->gap;
                        keyWire[k].shapeNdx = key->shape_ndx;
                        keyWire[k].colorNdx = key->color_ndx;
                    }
                    wire = (char *) &keyWire[row->num_keys];
                }
            }
        }
        if (section->doodads) {
            wire = _WriteGeomDoodads(wire,
                                     section->num_doodads, section->doodads);
        }
        if (section->overlays) {
            register int o;

            for (o = 0; o < section->num_overlays; o++) {
                wire = _WriteGeomOverlay(wire, &section->overlays[o]);
            }
        }
    }
    return wire;
}

static char *
_WriteGeomKeyAliases(char *wire, XkbGeometryPtr geom)
{
    register int sz;

    sz = geom->num_key_aliases * (XkbKeyNameLength * 2);
    if (sz > 0) {
        memcpy(wire, (char *) geom->key_aliases, sz);
        wire += sz;
    }
    return wire;
}

/***====================================================================***/

static Status
_SendSetGeometry(Display *dpy, XkbGeometryPtr geom, xkbSetGeometryReq *req)
{
    int sz;
    char *wire, *tbuf;

    sz = 0;
    sz += _SizeCountedString(geom->label_font);
    sz += _SizeGeomProperties(geom);
    sz += _SizeGeomColors(geom);
    sz += _SizeGeomShapes(geom);
    sz += _SizeGeomSections(geom);
    sz += _SizeGeomDoodads(geom->num_doodads, geom->doodads);
    sz += _SizeGeomKeyAliases(geom);
    req->length += (sz / 4);
    if (sz < (dpy->bufmax - dpy->buffer)) {
        BufAlloc(char *, wire, sz);
        tbuf = NULL;
    }
    else {
        tbuf = _XAllocTemp(dpy, sz);
        if (!tbuf)
            return BadAlloc;
        wire = tbuf;
    }
    wire = _WriteCountedString(wire, geom->label_font);
    if (geom->num_properties > 0)
        wire = _WriteGeomProperties(wire, geom);
    if (geom->num_colors > 0)
        wire = _WriteGeomColors(wire, geom);
    if (geom->num_shapes > 0)
        wire = _WriteGeomShapes(wire, geom);
    if (geom->num_sections > 0)
        wire = _WriteGeomSections(wire, geom);
    if (geom->num_doodads > 0)
        wire = _WriteGeomDoodads(wire, geom->num_doodads, geom->doodads);
    if (geom->num_key_aliases > 0)
        wire = _WriteGeomKeyAliases(wire, geom);
    if (tbuf != NULL) {
        Data(dpy, tbuf, sz);
        _XFreeTemp(dpy, tbuf, sz);
    }
    return Success;
}

/***====================================================================***/

Status
XkbSetGeometry(Display *dpy, unsigned deviceSpec, XkbGeometryPtr geom)
{
    xkbSetGeometryReq *req;
    Status ret;

    if ((!geom) || (dpy->flags & XlibDisplayNoXkb) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return BadAccess;

    LockDisplay(dpy);
    GetReq(kbSetGeometry, req);
    req->reqType = dpy->xkb_info->codes->major_opcode;
    req->xkbReqType = X_kbSetGeometry;
    req->deviceSpec = deviceSpec;
    req->nShapes = geom->num_shapes;
    req->nSections = geom->num_sections;
    req->name = geom->name;
    req->widthMM = geom->width_mm;
    req->heightMM = geom->height_mm;
    req->nProperties = geom->num_properties;
    req->nColors = geom->num_colors;
    req->nDoodads = geom->num_doodads;
    req->nKeyAliases = geom->num_key_aliases;
    req->baseColorNdx = (geom->base_color - geom->colors);
    req->labelColorNdx = (geom->label_color - geom->colors);

    ret = _SendSetGeometry(dpy, geom, req);
    UnlockDisplay(dpy);
    SyncHandle();
    return ret;
}
@


1.4
log
@Update to libx11 1.4.2. Tested by ajacoutot@@, jasper@@ krw@@, landry@@,
shadchin@@ on various architectures.
Bump major.
@
text
@d51 1
a51 1
_WriteCountedString(char *wire,char *str)
d53 1
a53 1
CARD16	len,*pLen;
d55 3
a57 3
    len= (str?strlen(str):0);
    pLen= (CARD16 *)wire;
    *pLen= len;
d59 2
a60 2
	memcpy(&wire[2],str,len);
    wire+= XkbPaddedSize(len+2);
d67 2
a68 2
register int 	i,size;
XkbPropertyPtr	prop;
d70 4
a73 3
    for (size=i=0,prop=geom->properties;i<geom->num_properties;i++,prop++) {
	size+= _SizeCountedString(prop->name);
	size+= _SizeCountedString(prop->value);
d81 2
a82 2
register int 		i,size;
register XkbColorPtr	color;
d84 2
a85 2
    for (i=size=0,color=geom->colors;i<geom->num_colors;i++,color++) {
	size+= _SizeCountedString(color->spec);
d93 2
a94 2
register int		i,size;
register XkbShapePtr	shape;
d96 9
a104 8
    for (i=size=0,shape=geom->shapes;i<geom->num_shapes;i++,shape++) {
	register int		n;
	register XkbOutlinePtr	ol;
	size+= SIZEOF(xkbShapeWireDesc);
	for (n=0,ol=shape->outlines;n<shape->num_outlines;n++,ol++) {
	    size+= SIZEOF(xkbOutlineWireDesc);
	    size+= ol->num_points*SIZEOF(xkbPointWireDesc);
	}
d110 1
a110 1
_SizeGeomDoodads(int num_doodads,XkbDoodadPtr doodad)
d112 1
a112 1
register int	i,size;
d114 9
a122 9
    for (i=size=0;i<num_doodads;i++,doodad++) {
	size+= SIZEOF(xkbAnyDoodadWireDesc);
	if (doodad->any.type==XkbTextDoodad) {
	    size+= _SizeCountedString(doodad->text.text);
	    size+= _SizeCountedString(doodad->text.font);
	}
	else if (doodad->any.type==XkbLogoDoodad) {
	    size+= _SizeCountedString(doodad->logo.logo_name);
	}
d130 2
a131 2
register int 	i,size;
XkbSectionPtr	section;
d133 30
a162 25
    for (i=size=0,section=geom->sections;i<geom->num_sections;i++,section++) {
	size+= SIZEOF(xkbSectionWireDesc);
	if (section->rows) {
	    int		r;
	    XkbRowPtr	row;
	    for (r=0,row=section->rows;r<section->num_rows;row++,r++) {
		size+= SIZEOF(xkbRowWireDesc);
		size+= row->num_keys*SIZEOF(xkbKeyWireDesc);
	    }
	}
	if (section->doodads)
	    size+= _SizeGeomDoodads(section->num_doodads,section->doodads);
	if (section->overlays) {
	    int			o;
	    XkbOverlayPtr	ol;
	    for (o=0,ol=section->overlays;o<section->num_overlays;o++,ol++) {
		int			r;
		XkbOverlayRowPtr	row;
		size+= SIZEOF(xkbOverlayWireDesc);
		for (r=0,row=ol->rows;r<ol->num_rows;r++,row++) {
		   size+= SIZEOF(xkbOverlayRowWireDesc);
		   size+= row->num_keys*SIZEOF(xkbOverlayKeyWireDesc);
		}
	    }
	}
d170 1
a170 1
    return geom->num_key_aliases*(2*XkbKeyNameLength);
d176 1
a176 1
_WriteGeomProperties(char *wire,XkbGeometryPtr geom)
d178 2
a179 2
register int 	i;
register XkbPropertyPtr	prop;
d181 3
a183 3
    for (i=0,prop=geom->properties;i<geom->num_properties;i++,prop++) {
	wire= _WriteCountedString(wire,prop->name);
	wire= _WriteCountedString(wire,prop->value);
d189 1
a189 1
_WriteGeomColors(char *wire,XkbGeometryPtr geom)
d191 2
a192 2
register int		i;
register XkbColorPtr	color;
d194 2
a195 2
    for (i=0,color=geom->colors;i<geom->num_colors;i++,color++) {
	wire= _WriteCountedString(wire,color->spec);
d201 1
a201 1
_WriteGeomShapes(char *wire,XkbGeometryPtr geom)
d203 37
a239 33
int			i;
XkbShapePtr		shape;
xkbShapeWireDesc *	shapeWire;

    for (i=0,shape=geom->shapes;i<geom->num_shapes;i++,shape++) {
	register int 		o;
	XkbOutlinePtr		ol;
	xkbOutlineWireDesc *	olWire;
	shapeWire= (xkbShapeWireDesc *)wire;
	shapeWire->name= shape->name;
	shapeWire->nOutlines= shape->num_outlines;
	if (shape->primary!=NULL)
	     shapeWire->primaryNdx= XkbOutlineIndex(shape,shape->primary);
	else shapeWire->primaryNdx= XkbNoShape;
	if (shape->approx!=NULL)
	     shapeWire->approxNdx= XkbOutlineIndex(shape,shape->approx);
	else shapeWire->approxNdx= XkbNoShape;
	wire= (char *)&shapeWire[1];
	for (o=0,ol=shape->outlines;o<shape->num_outlines;o++,ol++) {
	    register int	p;
	    XkbPointPtr		pt;
	    xkbPointWireDesc *	ptWire;
	    olWire= (xkbOutlineWireDesc *)wire;
	    olWire->nPoints= ol->num_points;
	    olWire->cornerRadius= ol->corner_radius;
	    wire= (char *)&olWire[1];
	    ptWire= (xkbPointWireDesc *)wire;
	    for (p=0,pt=ol->points;p<ol->num_points;p++,pt++) {
		ptWire[p].x= pt->x;
		ptWire[p].y= pt->y;
	    }
	    wire= (char *)&ptWire[ol->num_points];
	}
d245 1
a245 1
_WriteGeomDoodads(char *wire,int num_doodads,XkbDoodadPtr doodad)
d247 1
a247 2
register int		i;
xkbDoodadWireDesc *	doodadWire;
d249 37
a285 37
    for (i=0;i<num_doodads;i++,doodad++) {
	doodadWire= (xkbDoodadWireDesc *)wire;
	wire= (char *)&doodadWire[1];
	bzero(doodadWire,SIZEOF(xkbDoodadWireDesc));
	doodadWire->any.name= doodad->any.name;
	doodadWire->any.type= doodad->any.type;
	doodadWire->any.priority= doodad->any.priority;
	doodadWire->any.top= doodad->any.top;
	doodadWire->any.left= doodad->any.left;
	doodadWire->any.angle= doodad->any.angle;
	switch (doodad->any.type) {
	    case XkbOutlineDoodad:
	    case XkbSolidDoodad:
		doodadWire->shape.colorNdx= doodad->shape.color_ndx;
		doodadWire->shape.shapeNdx= doodad->shape.shape_ndx;
		break;
	    case XkbTextDoodad:
		doodadWire->text.width= doodad->text.width;
		doodadWire->text.height= doodad->text.height;
		doodadWire->text.colorNdx= doodad->text.color_ndx;
		wire= _WriteCountedString(wire,doodad->text.text);
		wire= _WriteCountedString(wire,doodad->text.font);
		break;
	    case XkbIndicatorDoodad:
		doodadWire->indicator.shapeNdx= doodad->indicator.shape_ndx;
		doodadWire->indicator.onColorNdx=doodad->indicator.on_color_ndx;
		doodadWire->indicator.offColorNdx=
						doodad->indicator.off_color_ndx;
		break;
	    case XkbLogoDoodad:
		doodadWire->logo.colorNdx= doodad->logo.color_ndx;
		doodadWire->logo.shapeNdx= doodad->logo.shape_ndx;
		wire= _WriteCountedString(wire,doodad->logo.logo_name);
		break;
	    default:
		break;
	}
d291 1
a291 1
_WriteGeomOverlay(char *wire,XkbOverlayPtr ol)
d293 24
a316 25
register int		r;
XkbOverlayRowPtr	row;
xkbOverlayWireDesc *	olWire;

   olWire= (xkbOverlayWireDesc *)wire;
   olWire->name= ol->name;
   olWire->nRows= ol->num_rows;
   wire= (char *)&olWire[1];
   for (r=0,row=ol->rows;r<ol->num_rows;r++,row++) {
   	unsigned int		k;
	XkbOverlayKeyPtr	key;
	xkbOverlayRowWireDesc *	rowWire;
	rowWire= (xkbOverlayRowWireDesc *)wire;
	rowWire->rowUnder= row->row_under;
	rowWire->nKeys= row->num_keys;
	wire= (char *)&rowWire[1];
	for (k=0,key=row->keys;k<row->num_keys;k++,key++) {
	    xkbOverlayKeyWireDesc *	keyWire;
	    keyWire= (xkbOverlayKeyWireDesc *)wire;
	    memcpy(keyWire->over,key->over.name,XkbKeyNameLength);
	    memcpy(keyWire->under,key->under.name,XkbKeyNameLength);
	    wire= (char *)&keyWire[1];
	}
   }
   return wire;
d320 1
a320 1
_WriteGeomSections(char *wire,XkbGeometryPtr geom)
d322 59
a380 55
register int		i;
XkbSectionPtr		section;
xkbSectionWireDesc *	sectionWire;

    for (i=0,section=geom->sections;i<geom->num_sections;i++,section++) {
	sectionWire= (xkbSectionWireDesc *)wire;
	sectionWire->name= section->name;
	sectionWire->top= section->top;
	sectionWire->left= section->left;
	sectionWire->width= section->width;
	sectionWire->height= section->height;
	sectionWire->angle= section->angle;
	sectionWire->priority= section->priority;
	sectionWire->nRows= section->num_rows;
	sectionWire->nDoodads= section->num_doodads;
	sectionWire->nOverlays= section->num_overlays;
	sectionWire->pad= 0;
	wire= (char *)&sectionWire[1];
	if (section->rows) {
	    int			r;
	    XkbRowPtr		row;
	    xkbRowWireDesc *	rowWire;
	    for (r=0,row=section->rows;r<section->num_rows;r++,row++) {
		rowWire= (xkbRowWireDesc *)wire;
		rowWire->top= row->top;
		rowWire->left= row->left;
		rowWire->nKeys= row->num_keys;
		rowWire->vertical= row->vertical;
		rowWire->pad= 0;
		wire= (char *)&rowWire[1];
		if (row->keys) {
		    int			k;
		    XkbKeyPtr		key;
		    xkbKeyWireDesc *	keyWire;
		    keyWire= (xkbKeyWireDesc *)wire;
		    for (k=0,key=row->keys;k<row->num_keys;k++,key++) {
			memcpy(keyWire[k].name,key->name.name,XkbKeyNameLength);
			keyWire[k].gap= key->gap;
			keyWire[k].shapeNdx= key->shape_ndx;
			keyWire[k].colorNdx= key->color_ndx;
		    }
		    wire= (char *)&keyWire[row->num_keys];
		}
	    }
	}
	if (section->doodads) {
	    wire= _WriteGeomDoodads(wire,
	    			      section->num_doodads,section->doodads);
	}
	if (section->overlays) {
	    register int o;
	    for (o=0;o<section->num_overlays;o++) {
		wire= _WriteGeomOverlay(wire,&section->overlays[o]);
	    }
	}
d386 1
a386 1
_WriteGeomKeyAliases(char *wire,XkbGeometryPtr geom)
d388 1
a388 1
register int sz;
d390 4
a393 4
    sz= geom->num_key_aliases*(XkbKeyNameLength*2);
    if (sz>0) {
	memcpy(wire,(char *)geom->key_aliases,sz);
	wire+= sz;
d401 1
a401 1
_SendSetGeometry(Display *dpy,XkbGeometryPtr geom,xkbSetGeometryReq *req)
d403 2
a404 2
int			sz;
char *			wire,*tbuf;
d406 9
a414 9
    sz= 0;
    sz+= _SizeCountedString(geom->label_font);
    sz+= _SizeGeomProperties(geom);
    sz+= _SizeGeomColors(geom);
    sz+= _SizeGeomShapes(geom);
    sz+= _SizeGeomSections(geom);
    sz+= _SizeGeomDoodads(geom->num_doodads,geom->doodads);
    sz+= _SizeGeomKeyAliases(geom);
    req->length+= (sz/4);
d416 2
a417 2
	BufAlloc(char *,wire,sz);
	tbuf= NULL;
d420 21
a440 21
	tbuf= _XAllocTemp(dpy,sz);
	if (!tbuf)
	    return BadAlloc;
	wire= tbuf;
    }
    wire= _WriteCountedString(wire,geom->label_font);
    if (geom->num_properties>0)
	wire= _WriteGeomProperties(wire,geom);
    if (geom->num_colors>0)
	wire= _WriteGeomColors(wire,geom);
    if (geom->num_shapes>0)
	wire= _WriteGeomShapes(wire,geom);
    if (geom->num_sections>0)
	wire= _WriteGeomSections(wire,geom);
    if (geom->num_doodads>0)
	wire= _WriteGeomDoodads(wire,geom->num_doodads,geom->doodads);
    if (geom->num_key_aliases>0)
	wire= _WriteGeomKeyAliases(wire,geom);
    if (tbuf!=NULL) {
	Data(dpy,tbuf,sz);
	_XFreeTemp(dpy,tbuf,sz);
d448 1
a448 1
XkbSetGeometry(Display *dpy,unsigned deviceSpec,XkbGeometryPtr geom)
d450 2
a451 2
xkbSetGeometryReq	*req;
Status ret;
d453 3
a455 3
    if ( (!geom) || (dpy->flags & XlibDisplayNoXkb) ||
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)))
	return BadAccess;
d462 11
a472 11
    req->nShapes= geom->num_shapes;
    req->nSections= geom->num_sections;
    req->name= geom->name;
    req->widthMM= geom->width_mm;
    req->heightMM= geom->height_mm;
    req->nProperties= geom->num_properties;
    req->nColors= geom->num_colors;
    req->nDoodads= geom->num_doodads;
    req->nKeyAliases= geom->num_key_aliases;
    req->baseColorNdx= (geom->base_color-geom->colors);
    req->labelColorNdx= (geom->label_color-geom->colors);
d474 1
a474 1
    ret = _SendSetGeometry(dpy,geom,req);
a478 1

@


1.3
log
@Update to libX11 1.3.3. Tested on a bulk ports build by naddy@@.
@
text
@a33 2
#define NEED_EVENTS
#define NEED_REPLIES
@


1.2
log
@update to libX11 1.2.1
@
text
@a0 2
/* $Xorg: XKBSetGeom.c,v 1.3 2000/08/17 19:45:03 cpqbld Exp $ */
/* $XdotOrg: lib/X11/src/xkb/XKBSetGeom.c,v 1.5 2005-07-03 07:00:55 daniels Exp $ */
a25 1
/* $XFree86: xc/lib/X11/XKBSetGeom.c,v 3.5 2003/05/27 22:26:25 tsi Exp $ */
@


1.1
log
@Initial revision
@
text
@d11 2
a12 2
documentation, and that the name of Silicon Graphics not be 
used in advertising or publicity pertaining to distribution 
d14 1
a14 1
Silicon Graphics makes no representation about the suitability 
d18 2
a19 2
SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d21 3
a23 3
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
d74 1
a74 1
    
d178 1
a178 1
    
d381 1
a381 1
    
d448 1
a448 1
    
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@
