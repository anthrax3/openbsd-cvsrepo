head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.4
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.12
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.10
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.8
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_1_3:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_1_1:1.1.1.1
	v1_0_99_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.11.03.10.21.31;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	EvOPnI31yB1tDGgg;

1.5
date	2013.09.28.17.03.22;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.30.19.19.38;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.18.19.37.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.03.12.59.11;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.16.37.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.37.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to libX11 1.6.4
@
text
@/************************************************************
Copyright (c) 1993 by Silicon Graphics Computer Systems, Inc.

Permission to use, copy, modify, and distribute this
software and its documentation for any purpose and without
fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting
documentation, and that the name of Silicon Graphics not be
used in advertising or publicity pertaining to distribution
of the software without specific prior written permission.
Silicon Graphics makes no representation about the suitability
of this software for any purpose. It is provided "as is"
without any express or implied warranty.

SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
THE USE OR PERFORMANCE OF THIS SOFTWARE.

********************************************************/

#define	NEED_MAP_READERS
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include "Xlibint.h"
#include <X11/extensions/XKBproto.h>
#include "XKBlibint.h"

/***====================================================================***/

XkbDescPtr
XkbGetKeyboardByName(Display *dpy,
                     unsigned deviceSpec,
                     XkbComponentNamesPtr names,
                     unsigned want,
                     unsigned need,
                     Bool load)
{
    register xkbGetKbdByNameReq *req;
    xkbGetKbdByNameReply rep;
    int len, extraLen = 0;
    char *str;
    XkbDescPtr xkb;
    int mapLen, codesLen, typesLen, compatLen;
    int symsLen, geomLen;
    XkbInfoPtr xkbi;

    if ((dpy == NULL) || (dpy->flags & XlibDisplayNoXkb) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return NULL;

    xkbi = dpy->xkb_info;
    xkb = (XkbDescRec *) _XkbCalloc(1, sizeof(XkbDescRec));
    if (!xkb)
        return NULL;
    xkb->device_spec = deviceSpec;
    xkb->map = (XkbClientMapRec *) _XkbCalloc(1, sizeof(XkbClientMapRec));
    xkb->dpy = dpy;

    LockDisplay(dpy);
    GetReq(kbGetKbdByName, req);
    req->reqType = xkbi->codes->major_opcode;
    req->xkbReqType = X_kbGetKbdByName;
    req->deviceSpec = xkb->device_spec;
    req->want = want;
    req->need = need;
    req->load = load;

    mapLen = codesLen = typesLen = compatLen = symsLen = geomLen = 0;
    if (names) {
        if (names->keymap)
            mapLen = (int) strlen(names->keymap);
        if (names->keycodes)
            codesLen = (int) strlen(names->keycodes);
        if (names->types)
            typesLen = (int) strlen(names->types);
        if (names->compat)
            compatLen = (int) strlen(names->compat);
        if (names->symbols)
            symsLen = (int) strlen(names->symbols);
        if (names->geometry)
            geomLen = (int) strlen(names->geometry);
        if (mapLen > 255)
            mapLen = 255;
        if (codesLen > 255)
            codesLen = 255;
        if (typesLen > 255)
            typesLen = 255;
        if (compatLen > 255)
            compatLen = 255;
        if (symsLen > 255)
            symsLen = 255;
        if (geomLen > 255)
            geomLen = 255;
    }
    else
        mapLen = codesLen = typesLen = compatLen = symsLen = geomLen = 0;

    len = mapLen + codesLen + typesLen + compatLen + symsLen + geomLen + 6;
    len = XkbPaddedSize(len);
    req->length += len / 4;
    BufAlloc(char *, str, len);

    *str++ = mapLen;
    if (mapLen > 0) {
        memcpy(str, names->keymap, mapLen);
        str += mapLen;
    }
    *str++ = codesLen;
    if (codesLen > 0) {
        memcpy(str, names->keycodes, codesLen);
        str += codesLen;
    }
    *str++ = typesLen;
    if (typesLen > 0) {
        memcpy(str, names->types, typesLen);
        str += typesLen;
    }
    *str++ = compatLen;
    if (compatLen > 0) {
        memcpy(str, names->compat, compatLen);
        str += compatLen;
    }
    *str++ = symsLen;
    if (symsLen > 0) {
        memcpy(str, names->symbols, symsLen);
        str += symsLen;
    }
    *str++ = geomLen;
    if (geomLen > 0) {
        memcpy(str, names->geometry, geomLen);
        str += geomLen;
    }
    if ((!_XReply(dpy, (xReply *) &rep, 0, xFalse)) || (!rep.reported))
        goto BAILOUT;
    extraLen = (int) rep.length * 4;

    xkb->device_spec = rep.deviceID;
    xkb->min_key_code = rep.minKeyCode;
    xkb->max_key_code = rep.maxKeyCode;
    if (rep.reported & (XkbGBN_SymbolsMask | XkbGBN_TypesMask)) {
        xkbGetMapReply mrep;
        Status status;
        int nread = 0;

        _XRead(dpy, (char *) &mrep, SIZEOF(xkbGetMapReply));
        extraLen -= SIZEOF(xkbGetMapReply);
        status = _XkbReadGetMapReply(dpy, &mrep, xkb, &nread);
        extraLen -= nread;
        if (status != Success)
            goto BAILOUT;
    }
    if (rep.reported & XkbGBN_CompatMapMask) {
        xkbGetCompatMapReply crep;
        Status status;
        int nread = 0;

        _XRead(dpy, (char *) &crep, SIZEOF(xkbGetCompatMapReply));
        extraLen -= SIZEOF(xkbGetCompatMapReply);
        status = _XkbReadGetCompatMapReply(dpy, &crep, xkb, &nread);
        extraLen -= nread;
        if (status != Success)
            goto BAILOUT;
    }
    if (rep.reported & XkbGBN_IndicatorMapMask) {
        xkbGetIndicatorMapReply irep;
        Status status;
        int nread = 0;

        _XRead(dpy, (char *) &irep, SIZEOF(xkbGetIndicatorMapReply));
        extraLen -= SIZEOF(xkbGetIndicatorMapReply);
        status = _XkbReadGetIndicatorMapReply(dpy, &irep, xkb, &nread);
        extraLen -= nread;
        if (status != Success)
            goto BAILOUT;
    }
    if (rep.reported & (XkbGBN_KeyNamesMask | XkbGBN_OtherNamesMask)) {
        xkbGetNamesReply nrep;
        Status status;
        int nread = 0;

        _XRead(dpy, (char *) &nrep, SIZEOF(xkbGetNamesReply));
        extraLen -= SIZEOF(xkbGetNamesReply);
        status = _XkbReadGetNamesReply(dpy, &nrep, xkb, &nread);
        extraLen -= nread;
        if (status != Success)
            goto BAILOUT;
    }
    if (rep.reported & XkbGBN_GeometryMask) {
        xkbGetGeometryReply grep;
        Status status;
        int nread = 0;

        _XRead(dpy, (char *) &grep, SIZEOF(xkbGetGeometryReply));
        extraLen -= SIZEOF(xkbGetGeometryReply);
        status = _XkbReadGetGeometryReply(dpy, &grep, xkb, &nread);
        extraLen -= nread;
        if (status != Success)
            goto BAILOUT;
    }
    if (extraLen > 0)
        goto BAILOUT;
    UnlockDisplay(dpy);
    SyncHandle();
    return xkb;
 BAILOUT:
    if (xkb != NULL)
        XkbFreeKeyboard(xkb, XkbAllComponentsMask, xTrue);
    if (extraLen > 0)
        _XEatData(dpy, extraLen);
    UnlockDisplay(dpy);
    SyncHandle();
    return NULL;
}

XkbDescPtr
XkbGetKeyboard(Display *dpy, unsigned which, unsigned deviceSpec)
{
    return XkbGetKeyboardByName(dpy, deviceSpec, NULL, which, which, False);
}
@


1.5
log
@Update to libX11 1.6.2. No API change.
@
text
@d47 1
a47 1
    int len, extraLen;
d207 2
d215 2
@


1.4
log
@Update to libx11 1.4.2. Tested by ajacoutot@@, jasper@@ krw@@, landry@@,
shadchin@@ on various architectures.
Bump major.
@
text
@d38 6
a43 6
XkbGetKeyboardByName(	Display *		dpy,
			unsigned		deviceSpec,
			XkbComponentNamesPtr	names,
			unsigned		want,
			unsigned		need,
			Bool			load)
d45 12
a56 12
    register xkbGetKbdByNameReq	*	req;
    xkbGetKbdByNameReply 		rep;
    int					len,extraLen;
    char *				str;
    XkbDescPtr				xkb;
    int					mapLen,codesLen,typesLen,compatLen;
    int					symsLen,geomLen;
    XkbInfoPtr 				xkbi;

    if ( (dpy==NULL) || (dpy->flags & XlibDisplayNoXkb) ||
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)) )
	return NULL;
d58 2
a59 2
    xkbi= dpy->xkb_info;
    xkb = (XkbDescRec *)_XkbCalloc(1,sizeof(XkbDescRec));
d61 1
a61 1
	return NULL;
d63 1
a63 1
    xkb->map = (XkbClientMapRec *)_XkbCalloc(1,sizeof(XkbClientMapRec));
d71 3
a73 3
    req->want= want;
    req->need= need;
    req->load= load;
d75 1
a75 1
    mapLen= codesLen= typesLen= compatLen= symsLen= geomLen= 0;
d77 66
a142 58
	if (names->keymap)
	    mapLen= (int)strlen(names->keymap);
	if (names->keycodes)
	    codesLen= (int)strlen(names->keycodes);
	if (names->types)
	    typesLen= (int)strlen(names->types);
	if (names->compat)
	    compatLen= (int)strlen(names->compat);
	if (names->symbols)
	    symsLen= (int)strlen(names->symbols);
	if (names->geometry)
	    geomLen= (int)strlen(names->geometry);
	if (mapLen>255)		mapLen= 255;
	if (codesLen>255)	codesLen= 255;
	if (typesLen>255)	typesLen= 255;
	if (compatLen>255)	compatLen= 255;
	if (symsLen>255)	symsLen= 255;
	if (geomLen>255)	geomLen= 255;
    }
    else mapLen= codesLen= typesLen= compatLen= symsLen= geomLen= 0;

    len= mapLen+codesLen+typesLen+compatLen+symsLen+geomLen+6;
    len= XkbPaddedSize(len);
    req->length+= len/4;
    BufAlloc(char *,str,len);
    *str++= mapLen;
    if (mapLen>0) {
	 memcpy(str,names->keymap,mapLen);
	 str+= mapLen;
    }
    *str++= codesLen;
    if (codesLen>0) {
	 memcpy(str,names->keycodes,codesLen);
	 str+= codesLen;
    }
    *str++= typesLen;
    if (typesLen>0) {
	 memcpy(str,names->types,typesLen);
	 str+= typesLen;
    }
    *str++= compatLen;
    if (compatLen>0) {
	 memcpy(str,names->compat,compatLen);
	 str+= compatLen;
    }
    *str++= symsLen;
    if (symsLen>0) {
	 memcpy(str,names->symbols,symsLen);
	 str+= symsLen;
    }
    *str++= geomLen;
    if (geomLen>0) {
	 memcpy(str,names->geometry,geomLen);
	 str+= geomLen;
    }
    if ((!_XReply(dpy, (xReply *)&rep, 0, xFalse))||(!rep.reported))
	goto BAILOUT;
    extraLen= (int)rep.length*4;
d144 1
a144 1
    xkb->device_spec= rep.deviceID;
d147 59
a205 59
    if (rep.reported&(XkbGBN_SymbolsMask|XkbGBN_TypesMask)) {
	xkbGetMapReply 	mrep;
	Status		status;
	int		nread= 0;

	_XRead(dpy, (char *)&mrep, SIZEOF(xkbGetMapReply));
	extraLen-= SIZEOF(xkbGetMapReply);
	status= _XkbReadGetMapReply(dpy,&mrep,xkb,&nread);
	extraLen-= nread;
	if (status!=Success)
	    goto BAILOUT;
    }
    if (rep.reported&XkbGBN_CompatMapMask) {
	xkbGetCompatMapReply 	crep;
	Status			status;
	int			nread= 0;

	_XRead(dpy, (char *)&crep, SIZEOF(xkbGetCompatMapReply));
	extraLen-= SIZEOF(xkbGetCompatMapReply);
	status= _XkbReadGetCompatMapReply(dpy,&crep,xkb,&nread);
	extraLen-= nread;
	if (status!=Success)
	    goto BAILOUT;
    }
    if (rep.reported&XkbGBN_IndicatorMapMask) {
	xkbGetIndicatorMapReply irep;
	Status			status;
	int			nread= 0;

	_XRead(dpy, (char *)&irep, SIZEOF(xkbGetIndicatorMapReply));
	extraLen-= SIZEOF(xkbGetIndicatorMapReply);
	status= _XkbReadGetIndicatorMapReply(dpy,&irep,xkb,&nread);
	extraLen-= nread;
	if (status!=Success)
	    goto BAILOUT;
    }
    if (rep.reported&(XkbGBN_KeyNamesMask|XkbGBN_OtherNamesMask)) {
	xkbGetNamesReply	nrep;
	Status			status;
	int			nread= 0;

	_XRead(dpy, (char *)&nrep, SIZEOF(xkbGetNamesReply));
	extraLen-= SIZEOF(xkbGetNamesReply);
	status= _XkbReadGetNamesReply(dpy,&nrep,xkb,&nread);
	extraLen-= nread;
	if (status!=Success)
	    goto BAILOUT;
    }
    if (rep.reported&XkbGBN_GeometryMask) {
	xkbGetGeometryReply	grep;
	Status			status;
	int			nread= 0;

	_XRead(dpy, (char *)&grep, SIZEOF(xkbGetGeometryReply));
	extraLen-= SIZEOF(xkbGetGeometryReply);
	status= _XkbReadGetGeometryReply(dpy,&grep,xkb,&nread);
	extraLen-= nread;
	if (status!=Success)
	    goto BAILOUT;
d210 3
a212 3
BAILOUT:
    if (xkb!=NULL)
	XkbFreeKeyboard(xkb,XkbAllComponentsMask,xTrue);
d219 1
a219 1
XkbGetKeyboard(Display *dpy,unsigned which,unsigned deviceSpec)
d221 1
a221 1
    return XkbGetKeyboardByName(dpy,deviceSpec,NULL,which,which,False);
@


1.3
log
@Update to libX11 1.3.3. Tested on a bulk ports build by naddy@@.
@
text
@a26 2
#define NEED_REPLIES
#define NEED_EVENTS
@


1.2
log
@update to libX11 1.2.1
@
text
@a0 1
/* $Xorg: XKBGetByName.c,v 1.3 2000/08/17 19:45:02 cpqbld Exp $ */
a25 1
/* $XFree86$ */
@


1.1
log
@Initial revision
@
text
@d10 2
a11 2
documentation, and that the name of Silicon Graphics not be 
used in advertising or publicity pertaining to distribution 
d13 1
a13 1
Silicon Graphics makes no representation about the suitability 
d17 2
a18 2
SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d20 3
a22 3
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@
