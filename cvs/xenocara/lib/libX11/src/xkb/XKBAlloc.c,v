head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.10
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.8
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.2
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.8
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_1_3:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_1_1:1.1.1.1
	v1_0_99_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.04.06.20.57.59;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	L5f7tv2EiGjtzoSu;

1.6
date	2013.09.28.17.03.21;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2013.04.28.16.55.57;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.30.19.19.38;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.18.19.37.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.03.12.59.11;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.16.37.36;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.37.36;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@update to libX11 1.6.3
@
text
@/************************************************************
Copyright (c) 1993 by Silicon Graphics Computer Systems, Inc.

Permission to use, copy, modify, and distribute this
software and its documentation for any purpose and without
fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting
documentation, and that the name of Silicon Graphics not be
used in advertising or publicity pertaining to distribution
of the software without specific prior written permission.
Silicon Graphics makes no representation about the suitability
of this software for any purpose. It is provided "as is"
without any express or implied warranty.

SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
THE USE OR PERFORMANCE OF THIS SOFTWARE.

********************************************************/

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif


#include <stdio.h>
#include "Xlibint.h"
#include "XKBlibint.h"
#include <X11/extensions/XKBgeom.h>
#include <X11/extensions/XKBproto.h>
#include "XKBlibint.h"


/***===================================================================***/

/*ARGSUSED*/
Status
XkbAllocCompatMap(XkbDescPtr xkb, unsigned which, unsigned nSI)
{
    XkbCompatMapPtr compat;
    XkbSymInterpretRec *prev_interpret;

    if (!xkb)
        return BadMatch;
    if (xkb->compat) {
        if (xkb->compat->size_si >= nSI)
            return Success;
        compat = xkb->compat;
        compat->size_si = nSI;
        if (compat->sym_interpret == NULL)
            compat->num_si = 0;
        prev_interpret = compat->sym_interpret;
        compat->sym_interpret = _XkbTypedRealloc(compat->sym_interpret,
                                                 nSI, XkbSymInterpretRec);
        if (compat->sym_interpret == NULL) {
            _XkbFree(prev_interpret);
            compat->size_si = compat->num_si = 0;
            return BadAlloc;
        }
        if (compat->num_si != 0) {
            _XkbClearElems(compat->sym_interpret, compat->num_si,
                           compat->size_si - 1, XkbSymInterpretRec);
        }
        return Success;
    }
    compat = _XkbTypedCalloc(1, XkbCompatMapRec);
    if (compat == NULL)
        return BadAlloc;
    if (nSI > 0) {
        compat->sym_interpret = _XkbTypedCalloc(nSI, XkbSymInterpretRec);
        if (!compat->sym_interpret) {
            _XkbFree(compat);
            return BadAlloc;
        }
    }
    compat->size_si = nSI;
    compat->num_si = 0;
    bzero((char *) &compat->groups[0], XkbNumKbdGroups * sizeof(XkbModsRec));
    xkb->compat = compat;
    return Success;
}


void
XkbFreeCompatMap(XkbDescPtr xkb, unsigned which, Bool freeMap)
{
    register XkbCompatMapPtr compat;

    if ((xkb == NULL) || (xkb->compat == NULL))
        return;
    compat = xkb->compat;
    if (freeMap)
        which = XkbAllCompatMask;
    if (which & XkbGroupCompatMask)
        bzero(&compat->groups[0], XkbNumKbdGroups * sizeof(XkbModsRec));
    if (which & XkbSymInterpMask) {
        if ((compat->sym_interpret) && (compat->size_si > 0))
            _XkbFree(compat->sym_interpret);
        compat->size_si = compat->num_si = 0;
        compat->sym_interpret = NULL;
    }
    if (freeMap) {
        _XkbFree(compat);
        xkb->compat = NULL;
    }
    return;
}

/***===================================================================***/

Status
XkbAllocNames(XkbDescPtr xkb, unsigned which, int nTotalRG, int nTotalAliases)
{
    XkbNamesPtr names;

    if (xkb == NULL)
        return BadMatch;
    if (xkb->names == NULL) {
        xkb->names = _XkbTypedCalloc(1, XkbNamesRec);
        if (xkb->names == NULL)
            return BadAlloc;
    }
    names = xkb->names;
    if ((which & XkbKTLevelNamesMask) && (xkb->map != NULL) &&
        (xkb->map->types != NULL)) {
        register int i;
        XkbKeyTypePtr type = xkb->map->types;

        for (i = 0; i < xkb->map->num_types; i++, type++) {
            if (type->level_names == NULL) {
                type->level_names = _XkbTypedCalloc(type->num_levels, Atom);
                if (type->level_names == NULL)
                    return BadAlloc;
            }
        }
    }
    if ((which & XkbKeyNamesMask) && (names->keys == NULL)) {
        if ((!XkbIsLegalKeycode(xkb->min_key_code)) ||
            (!XkbIsLegalKeycode(xkb->max_key_code)) ||
            (xkb->max_key_code < xkb->min_key_code))
            return BadValue;
        names->keys = _XkbTypedCalloc((xkb->max_key_code + 1), XkbKeyNameRec);
        if (names->keys == NULL)
            return BadAlloc;
    }
    if ((which & XkbKeyAliasesMask) && (nTotalAliases > 0)) {
        if (names->key_aliases == NULL) {
            names->key_aliases = _XkbTypedCalloc(nTotalAliases, XkbKeyAliasRec);
        }
        else if (nTotalAliases > names->num_key_aliases) {
            XkbKeyAliasRec *prev_aliases = names->key_aliases;

            names->key_aliases = _XkbTypedRealloc(names->key_aliases,
                                                  nTotalAliases,
                                                  XkbKeyAliasRec);
            if (names->key_aliases != NULL) {
                _XkbClearElems(names->key_aliases, names->num_key_aliases,
                               nTotalAliases - 1, XkbKeyAliasRec);
            }
            else {
                _XkbFree(prev_aliases);
            }
        }
        if (names->key_aliases == NULL) {
            names->num_key_aliases = 0;
            return BadAlloc;
        }
        names->num_key_aliases = nTotalAliases;
    }
    if ((which & XkbRGNamesMask) && (nTotalRG > 0)) {
        if (names->radio_groups == NULL) {
            names->radio_groups = _XkbTypedCalloc(nTotalRG, Atom);
        }
        else if (nTotalRG > names->num_rg) {
            Atom *prev_radio_groups = names->radio_groups;

            names->radio_groups =
                _XkbTypedRealloc(names->radio_groups, nTotalRG, Atom);
            if (names->radio_groups != NULL) {
                _XkbClearElems(names->radio_groups, names->num_rg, nTotalRG - 1,
                               Atom);
            }
            else {
                _XkbFree(prev_radio_groups);
            }
        }
        if (names->radio_groups == NULL)
            return BadAlloc;
        names->num_rg = nTotalRG;
    }
    return Success;
}

void
XkbFreeNames(XkbDescPtr xkb, unsigned which, Bool freeMap)
{
    XkbNamesPtr names;

    if ((xkb == NULL) || (xkb->names == NULL))
        return;
    names = xkb->names;
    if (freeMap)
        which = XkbAllNamesMask;
    if (which & XkbKTLevelNamesMask) {
        XkbClientMapPtr map = xkb->map;

        if ((map != NULL) && (map->types != NULL)) {
            register int i;
            register XkbKeyTypePtr type;

            type = map->types;
            for (i = 0; i < map->num_types; i++, type++) {
                if (type->level_names != NULL) {
                    _XkbFree(type->level_names);
                    type->level_names = NULL;
                }
            }
        }
    }
    if ((which & XkbKeyNamesMask) && (names->keys != NULL)) {
        _XkbFree(names->keys);
        names->keys = NULL;
        names->num_keys = 0;
    }
    if ((which & XkbKeyAliasesMask) && (names->key_aliases)) {
        _XkbFree(names->key_aliases);
        names->key_aliases = NULL;
        names->num_key_aliases = 0;
    }
    if ((which & XkbRGNamesMask) && (names->radio_groups)) {
        _XkbFree(names->radio_groups);
        names->radio_groups = NULL;
        names->num_rg = 0;
    }
    if (freeMap) {
        _XkbFree(names);
        xkb->names = NULL;
    }
    return;
}

/***===================================================================***/

/*ARGSUSED*/
Status
XkbAllocControls(XkbDescPtr xkb, unsigned which)
{
    if (xkb == NULL)
        return BadMatch;

    if (xkb->ctrls == NULL) {
        xkb->ctrls = _XkbTypedCalloc(1, XkbControlsRec);
        if (!xkb->ctrls)
            return BadAlloc;
    }
    return Success;
}

/*ARGSUSED*/
void
XkbFreeControls(XkbDescPtr xkb, unsigned which, Bool freeMap)
{
    if (freeMap && (xkb != NULL) && (xkb->ctrls != NULL)) {
        _XkbFree(xkb->ctrls);
        xkb->ctrls = NULL;
    }
    return;
}

/***===================================================================***/

Status
XkbAllocIndicatorMaps(XkbDescPtr xkb)
{
    if (xkb == NULL)
        return BadMatch;
    if (xkb->indicators == NULL) {
        xkb->indicators = _XkbTypedCalloc(1, XkbIndicatorRec);
        if (!xkb->indicators)
            return BadAlloc;
    }
    return Success;
}

void
XkbFreeIndicatorMaps(XkbDescPtr xkb)
{
    if ((xkb != NULL) && (xkb->indicators != NULL)) {
        _XkbFree(xkb->indicators);
        xkb->indicators = NULL;
    }
    return;
}

/***====================================================================***/

XkbDescRec *
XkbAllocKeyboard(void)
{
    XkbDescRec *xkb;

    xkb = _XkbTypedCalloc(1, XkbDescRec);
    if (xkb)
        xkb->device_spec = XkbUseCoreKbd;
    return xkb;
}

void
XkbFreeKeyboard(XkbDescPtr xkb, unsigned which, Bool freeAll)
{
    if (xkb == NULL)
        return;
    if (freeAll)
        which = XkbAllComponentsMask;
    if (which & XkbClientMapMask)
        XkbFreeClientMap(xkb, XkbAllClientInfoMask, True);
    if (which & XkbServerMapMask)
        XkbFreeServerMap(xkb, XkbAllServerInfoMask, True);
    if (which & XkbCompatMapMask)
        XkbFreeCompatMap(xkb, XkbAllCompatMask, True);
    if (which & XkbIndicatorMapMask)
        XkbFreeIndicatorMaps(xkb);
    if (which & XkbNamesMask)
        XkbFreeNames(xkb, XkbAllNamesMask, True);
    if ((which & XkbGeometryMask) && (xkb->geom != NULL))
        XkbFreeGeometry(xkb->geom, XkbGeomAllMask, True);
    if (which & XkbControlsMask)
        XkbFreeControls(xkb, XkbAllControlsMask, True);
    if (freeAll)
        _XkbFree(xkb);
    return;
}

/***====================================================================***/

XkbDeviceLedInfoPtr
XkbAddDeviceLedInfo(XkbDeviceInfoPtr devi, unsigned ledClass, unsigned ledId)
{
    XkbDeviceLedInfoPtr devli;
    register int i;

    if ((!devi) || (!XkbSingleXIClass(ledClass)) || (!XkbSingleXIId(ledId)))
        return NULL;
    for (i = 0, devli = devi->leds; i < devi->num_leds; i++, devli++) {
        if ((devli->led_class == ledClass) && (devli->led_id == ledId))
            return devli;
    }
    if (devi->num_leds >= devi->sz_leds) {
        XkbDeviceLedInfoRec *prev_leds = devi->leds;

        if (devi->sz_leds > 0)
            devi->sz_leds *= 2;
        else
            devi->sz_leds = 1;
        devi->leds = _XkbTypedRealloc(devi->leds, devi->sz_leds,
                                      XkbDeviceLedInfoRec);
        if (!devi->leds) {
            _XkbFree(prev_leds);
            devi->sz_leds = devi->num_leds = 0;
            return NULL;
        }
        i = devi->num_leds;
        for (devli = &devi->leds[i]; i < devi->sz_leds; i++, devli++) {
            bzero(devli, sizeof(XkbDeviceLedInfoRec));
            devli->led_class = XkbXINone;
            devli->led_id = XkbXINone;
        }
    }
    devli = &devi->leds[devi->num_leds++];
    bzero(devli, sizeof(XkbDeviceLedInfoRec));
    devli->led_class = ledClass;
    devli->led_id = ledId;
    return devli;
}

Status
XkbResizeDeviceButtonActions(XkbDeviceInfoPtr devi, unsigned newTotal)
{
    XkbAction *prev_btn_acts;

    if ((!devi) || (newTotal > 255))
        return BadValue;
    if ((devi->btn_acts != NULL) && (newTotal == devi->num_btns))
        return Success;
    if (newTotal == 0) {
        if (devi->btn_acts != NULL) {
            _XkbFree(devi->btn_acts);
            devi->btn_acts = NULL;
        }
        devi->num_btns = 0;
        return Success;
    }
    prev_btn_acts = devi->btn_acts;
    devi->btn_acts = _XkbTypedRealloc(devi->btn_acts, newTotal, XkbAction);
    if (devi->btn_acts == NULL) {
        _XkbFree(prev_btn_acts);
        devi->num_btns = 0;
        return BadAlloc;
    }
    if (newTotal > devi->num_btns) {
        XkbAction *act;

        act = &devi->btn_acts[devi->num_btns];
        bzero((char *) act, (newTotal - devi->num_btns) * sizeof(XkbAction));
    }
    devi->num_btns = newTotal;
    return Success;
}

/*ARGSUSED*/
XkbDeviceInfoPtr
XkbAllocDeviceInfo(unsigned deviceSpec, unsigned nButtons, unsigned szLeds)
{
    XkbDeviceInfoPtr devi;

    devi = _XkbTypedCalloc(1, XkbDeviceInfoRec);
    if (devi != NULL) {
        devi->device_spec = deviceSpec;
        devi->has_own_state = False;
        devi->num_btns = 0;
        devi->btn_acts = NULL;
        if (nButtons > 0) {
            devi->num_btns = nButtons;
            devi->btn_acts = _XkbTypedCalloc(nButtons, XkbAction);
            if (!devi->btn_acts) {
                _XkbFree(devi);
                return NULL;
            }
        }
        devi->dflt_kbd_fb = XkbXINone;
        devi->dflt_led_fb = XkbXINone;
        devi->num_leds = 0;
        devi->sz_leds = 0;
        devi->leds = NULL;
        if (szLeds > 0) {
            devi->sz_leds = szLeds;
            devi->leds = _XkbTypedCalloc(szLeds, XkbDeviceLedInfoRec);
            if (!devi->leds) {
                _XkbFree(devi->btn_acts);
                _XkbFree(devi);
                return NULL;
            }
        }
    }
    return devi;
}


void
XkbFreeDeviceInfo(XkbDeviceInfoPtr devi, unsigned which, Bool freeDevI)
{
    if (devi) {
        if (freeDevI) {
            which = XkbXI_AllDeviceFeaturesMask;
            if (devi->name) {
                _XkbFree(devi->name);
                devi->name = NULL;
            }
        }
        if ((which & XkbXI_ButtonActionsMask) && (devi->btn_acts)) {
            _XkbFree(devi->btn_acts);
            devi->num_btns = 0;
            devi->btn_acts = NULL;
        }
        if ((which & XkbXI_IndicatorsMask) && (devi->leds)) {
            register int i;

            if ((which & XkbXI_IndicatorsMask) == XkbXI_IndicatorsMask) {
                _XkbFree(devi->leds);
                devi->sz_leds = devi->num_leds = 0;
                devi->leds = NULL;
            }
            else {
                XkbDeviceLedInfoPtr devli;

                for (i = 0, devli = devi->leds; i < devi->num_leds;
                     i++, devli++) {
                    if (which & XkbXI_IndicatorMapsMask)
                        bzero((char *) &devli->maps[0], sizeof(devli->maps));
                    else
                        bzero((char *) &devli->names[0], sizeof(devli->names));
                }
            }
        }
        if (freeDevI)
            _XkbFree(devi);
    }
    return;
}
@


1.6
log
@Update to libX11 1.6.2. No API change.
@
text
@d445 1
a445 2
                if (devi->btn_acts)
                    _XkbFree(devi->btn_acts);
@


1.5
log
@Update to libX11 1.6RC. No bump needed.
@
text
@d27 1
a27 3
#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#elif defined(HAVE_CONFIG_H)
d44 1
a44 1
XkbAllocCompatMap(XkbDescPtr xkb,unsigned which,unsigned nSI)
d46 2
a47 2
XkbCompatMapPtr	compat;
XkbSymInterpretRec *prev_interpret;
d50 1
a50 1
	return BadMatch;
d52 34
a85 34
	if (xkb->compat->size_si>=nSI)
	    return Success;
	compat= xkb->compat;
	compat->size_si= nSI;
	if (compat->sym_interpret==NULL)
	    compat->num_si= 0;
	prev_interpret = compat->sym_interpret;
	compat->sym_interpret= _XkbTypedRealloc(compat->sym_interpret,
						     nSI,XkbSymInterpretRec);
	if (compat->sym_interpret==NULL) {
	    _XkbFree(prev_interpret);
	    compat->size_si= compat->num_si= 0;
	    return BadAlloc;
	}
	if (compat->num_si!=0) {
	    _XkbClearElems(compat->sym_interpret,compat->num_si,
					compat->size_si-1,XkbSymInterpretRec);
	}
	return Success;
    }
    compat= _XkbTypedCalloc(1,XkbCompatMapRec);
    if (compat==NULL)
	return BadAlloc;
    if (nSI>0) {
	compat->sym_interpret= _XkbTypedCalloc(nSI,XkbSymInterpretRec);
	if (!compat->sym_interpret) {
	    _XkbFree(compat);
	    return BadAlloc;
	}
    }
    compat->size_si= nSI;
    compat->num_si= 0;
    bzero((char *)&compat->groups[0],XkbNumKbdGroups*sizeof(XkbModsRec));
    xkb->compat= compat;
d91 1
a91 1
XkbFreeCompatMap(XkbDescPtr xkb,unsigned which,Bool freeMap)
d93 1
a93 1
register XkbCompatMapPtr compat;
d95 3
a97 3
    if ((xkb==NULL)||(xkb->compat==NULL))
	return;
    compat= xkb->compat;
d99 8
a106 8
	which= XkbAllCompatMask;
    if (which&XkbGroupCompatMask)
	bzero((char *)&compat->groups[0],XkbNumKbdGroups*sizeof(XkbModsRec));
    if (which&XkbSymInterpMask) {
	if ((compat->sym_interpret)&&(compat->size_si>0))
	    _XkbFree(compat->sym_interpret);
	compat->size_si= compat->num_si= 0;
	compat->sym_interpret= NULL;
d109 2
a110 2
	_XkbFree(compat);
	xkb->compat= NULL;
d118 1
a118 1
XkbAllocNames(XkbDescPtr xkb,unsigned which,int nTotalRG,int nTotalAliases)
d120 1
a120 1
XkbNamesPtr	names;
d122 74
a195 71
    if (xkb==NULL)
	return BadMatch;
    if (xkb->names==NULL) {
	xkb->names = _XkbTypedCalloc(1,XkbNamesRec);
	if (xkb->names==NULL)
	    return BadAlloc;
    }
    names= xkb->names;
    if ((which&XkbKTLevelNamesMask)&&(xkb->map!=NULL)&&(xkb->map->types!=NULL)){
	register int	i;
	XkbKeyTypePtr	type;

	type= xkb->map->types;
	for (i=0;i<xkb->map->num_types;i++,type++) {
	    if (type->level_names==NULL) {
		type->level_names= _XkbTypedCalloc(type->num_levels,Atom);
		if (type->level_names==NULL)
		    return BadAlloc;
	    }
	}
    }
    if ((which&XkbKeyNamesMask)&&(names->keys==NULL)) {
	if ((!XkbIsLegalKeycode(xkb->min_key_code))||
	    (!XkbIsLegalKeycode(xkb->max_key_code))||
	    (xkb->max_key_code<xkb->min_key_code))
	    return BadValue;
	names->keys= _XkbTypedCalloc((xkb->max_key_code+1),XkbKeyNameRec);
	if (names->keys==NULL)
	    return BadAlloc;
    }
    if ((which&XkbKeyAliasesMask)&&(nTotalAliases>0)) {
	if (names->key_aliases==NULL) {
	    names->key_aliases= _XkbTypedCalloc(nTotalAliases,XkbKeyAliasRec);
	}
	else if (nTotalAliases>names->num_key_aliases) {
	    XkbKeyAliasRec *prev_aliases = names->key_aliases;

	    names->key_aliases= _XkbTypedRealloc(names->key_aliases,
						nTotalAliases,XkbKeyAliasRec);
	    if (names->key_aliases!=NULL) {
		_XkbClearElems(names->key_aliases,names->num_key_aliases,
						nTotalAliases-1,XkbKeyAliasRec);
	    } else {
		_XkbFree(prev_aliases);
	    }
	}
	if (names->key_aliases==NULL) {
	    names->num_key_aliases= 0;
	    return BadAlloc;
	}
	names->num_key_aliases= nTotalAliases;
    }
    if ((which&XkbRGNamesMask)&&(nTotalRG>0)) {
	if (names->radio_groups==NULL) {
	    names->radio_groups= _XkbTypedCalloc(nTotalRG,Atom);
	}
	else if (nTotalRG>names->num_rg) {
	    Atom *prev_radio_groups = names->radio_groups;

	    names->radio_groups= _XkbTypedRealloc(names->radio_groups,nTotalRG,
									Atom);
	    if (names->radio_groups!=NULL) {
		_XkbClearElems(names->radio_groups,names->num_rg,nTotalRG-1,
									Atom);
	    } else {
		_XkbFree(prev_radio_groups);
	    }
	}
	if (names->radio_groups==NULL)
	    return BadAlloc;
	names->num_rg= nTotalRG;
d201 1
a201 1
XkbFreeNames(XkbDescPtr xkb,unsigned which,Bool freeMap)
d203 1
a203 1
XkbNamesPtr	names;
d205 3
a207 3
    if ((xkb==NULL)||(xkb->names==NULL))
	return;
    names= xkb->names;
d209 31
a239 29
	which= XkbAllNamesMask;
    if (which&XkbKTLevelNamesMask) {
	XkbClientMapPtr	map= xkb->map;
	if ((map!=NULL)&&(map->types!=NULL)) {
	    register int 		i;
	    register XkbKeyTypePtr	type;
	    type= map->types;
	    for (i=0;i<map->num_types;i++,type++) {
		if (type->level_names!=NULL) {
		    _XkbFree(type->level_names);
		    type->level_names= NULL;
		}
	    }
	}
    }
    if ((which&XkbKeyNamesMask)&&(names->keys!=NULL)) {
	_XkbFree(names->keys);
	names->keys= NULL;
	names->num_keys= 0;
    }
    if ((which&XkbKeyAliasesMask)&&(names->key_aliases)){
	_XkbFree(names->key_aliases);
	names->key_aliases=NULL;
	names->num_key_aliases=0;
    }
    if ((which&XkbRGNamesMask)&&(names->radio_groups)) {
	_XkbFree(names->radio_groups);
	names->radio_groups= NULL;
	names->num_rg= 0;
d242 2
a243 2
	_XkbFree(names);
	xkb->names= NULL;
d252 1
a252 1
XkbAllocControls(XkbDescPtr xkb,unsigned which)
d254 2
a255 2
    if (xkb==NULL)
	return BadMatch;
d257 4
a260 4
    if (xkb->ctrls==NULL) {
	xkb->ctrls= _XkbTypedCalloc(1,XkbControlsRec);
	if (!xkb->ctrls)
	    return BadAlloc;
d267 1
a267 1
XkbFreeControls(XkbDescPtr xkb,unsigned which,Bool freeMap)
d269 3
a271 3
    if (freeMap && (xkb!=NULL) && (xkb->ctrls!=NULL)) {
	_XkbFree(xkb->ctrls);
	xkb->ctrls= NULL;
d281 6
a286 6
    if (xkb==NULL)
	return BadMatch;
    if (xkb->indicators==NULL) {
	xkb->indicators= _XkbTypedCalloc(1,XkbIndicatorRec);
	if (!xkb->indicators)
	    return BadAlloc;
d294 3
a296 3
    if ((xkb!=NULL)&&(xkb->indicators!=NULL)) {
	_XkbFree(xkb->indicators);
	xkb->indicators= NULL;
d303 1
a303 1
XkbDescRec	*
d306 1
a306 1
XkbDescRec *xkb;
d308 1
a308 1
    xkb = _XkbTypedCalloc(1,XkbDescRec);
d310 1
a310 1
	xkb->device_spec= XkbUseCoreKbd;
d315 1
a315 1
XkbFreeKeyboard(XkbDescPtr xkb,unsigned which,Bool freeAll)
d317 2
a318 2
    if (xkb==NULL)
	return;
d320 15
a334 15
	which= XkbAllComponentsMask;
    if (which&XkbClientMapMask)
	XkbFreeClientMap(xkb,XkbAllClientInfoMask,True);
    if (which&XkbServerMapMask)
	XkbFreeServerMap(xkb,XkbAllServerInfoMask,True);
    if (which&XkbCompatMapMask)
	XkbFreeCompatMap(xkb,XkbAllCompatMask,True);
    if (which&XkbIndicatorMapMask)
	XkbFreeIndicatorMaps(xkb);
    if (which&XkbNamesMask)
	XkbFreeNames(xkb,XkbAllNamesMask,True);
    if ((which&XkbGeometryMask) && (xkb->geom!=NULL))
	XkbFreeGeometry(xkb->geom,XkbGeomAllMask,True);
    if (which&XkbControlsMask)
	XkbFreeControls(xkb,XkbAllControlsMask,True);
d336 1
a336 1
	_XkbFree(xkb);
d343 1
a343 1
XkbAddDeviceLedInfo(XkbDeviceInfoPtr devi,unsigned ledClass,unsigned ledId)
d345 2
a346 2
XkbDeviceLedInfoPtr	devli;
register int		i;
d348 31
a378 29
    if ((!devi)||(!XkbSingleXIClass(ledClass))||(!XkbSingleXIId(ledId)))
	return NULL;
    for (i=0,devli=devi->leds;i<devi->num_leds;i++,devli++) {
	if ((devli->led_class==ledClass)&&(devli->led_id==ledId))
	    return devli;
    }
    if (devi->num_leds>=devi->sz_leds) {
	XkbDeviceLedInfoRec *prev_leds = devi->leds;

	if (devi->sz_leds>0)	devi->sz_leds*= 2;
	else			devi->sz_leds= 1;
	devi->leds= _XkbTypedRealloc(devi->leds,devi->sz_leds,
							XkbDeviceLedInfoRec);
	if (!devi->leds) {
	    _XkbFree(prev_leds);
	    devi->sz_leds= devi->num_leds= 0;
	    return NULL;
	}
	i= devi->num_leds;
	for (devli=&devi->leds[i];i<devi->sz_leds;i++,devli++) {
	    bzero(devli,sizeof(XkbDeviceLedInfoRec));
	    devli->led_class= XkbXINone;
	    devli->led_id= XkbXINone;
	}
    }
    devli= &devi->leds[devi->num_leds++];
    bzero(devli,sizeof(XkbDeviceLedInfoRec));
    devli->led_class= ledClass;
    devli->led_id= ledId;
d383 1
a383 1
XkbResizeDeviceButtonActions(XkbDeviceInfoPtr devi,unsigned newTotal)
d387 11
a397 11
    if ((!devi)||(newTotal>255))
	return BadValue;
    if ((devi->btn_acts!=NULL)&&(newTotal==devi->num_btns))
	return Success;
    if (newTotal==0) {
	if (devi->btn_acts!=NULL) {
	    _XkbFree(devi->btn_acts);
	    devi->btn_acts= NULL;
	}
	devi->num_btns= 0;
	return Success;
d400 5
a404 10
    devi->btn_acts= _XkbTypedRealloc(devi->btn_acts,newTotal,XkbAction);
    if (devi->btn_acts==NULL) {
	_XkbFree(prev_btn_acts);
	devi->num_btns= 0;
	return BadAlloc;
    }
    if (newTotal>devi->num_btns) {
	XkbAction *act;
	act= &devi->btn_acts[devi->num_btns];
	bzero((char *)act,(newTotal-devi->num_btns)*sizeof(XkbAction));
d406 7
a412 1
    devi->num_btns= newTotal;
d418 1
a418 1
XkbAllocDeviceInfo(unsigned deviceSpec,unsigned nButtons,unsigned szLeds)
d420 1
a420 1
XkbDeviceInfoPtr	devi;
d422 29
a450 29
    devi= _XkbTypedCalloc(1,XkbDeviceInfoRec);
    if (devi!=NULL) {
	devi->device_spec= deviceSpec;
	devi->has_own_state= False;
	devi->num_btns= 0;
	devi->btn_acts= NULL;
	if (nButtons>0) {
	    devi->num_btns= nButtons;
	    devi->btn_acts= _XkbTypedCalloc(nButtons,XkbAction);
	    if (!devi->btn_acts) {
		_XkbFree(devi);
		return NULL;
	    }
	}
	devi->dflt_kbd_fb= XkbXINone;
	devi->dflt_led_fb= XkbXINone;
	devi->num_leds= 0;
	devi->sz_leds= 0;
	devi->leds= NULL;
	if (szLeds>0) {
	    devi->sz_leds= szLeds;
	    devi->leds= _XkbTypedCalloc(szLeds,XkbDeviceLedInfoRec);
	    if (!devi->leds) {
		if (devi->btn_acts)
		    _XkbFree(devi->btn_acts);
		_XkbFree(devi);
		return NULL;
	    }
	}
d457 1
a457 1
XkbFreeDeviceInfo(XkbDeviceInfoPtr devi,unsigned which,Bool freeDevI)
d460 34
a493 30
	if (freeDevI) {
	    which= XkbXI_AllDeviceFeaturesMask;
	    if (devi->name) {
		_XkbFree(devi->name);
		devi->name= NULL;
	    }
	}
	if ((which&XkbXI_ButtonActionsMask)&&(devi->btn_acts)) {
	    _XkbFree(devi->btn_acts);
	    devi->num_btns= 0;
	    devi->btn_acts= NULL;
	}
	if ((which&XkbXI_IndicatorsMask)&&(devi->leds)) {
	    register int i;
	    if ((which&XkbXI_IndicatorsMask)==XkbXI_IndicatorsMask) {
		_XkbFree(devi->leds);
		devi->sz_leds= devi->num_leds= 0;
		devi->leds= NULL;
	    }
	    else {
		XkbDeviceLedInfoPtr	devli;
		for (i=0,devli=devi->leds;i<devi->num_leds;i++,devli++) {
		    if (which&XkbXI_IndicatorMapsMask)
			 bzero((char *)&devli->maps[0],sizeof(devli->maps));
		    else bzero((char *)&devli->names[0],sizeof(devli->names));
		}
	    }
	}
	if (freeDevI)
	    _XkbFree(devi);
@


1.4
log
@Update to libx11 1.4.2. Tested by ajacoutot@@, jasper@@ krw@@, landry@@,
shadchin@@ on various architectures.
Bump major.
@
text
@a32 1
#ifndef XKB_IN_SERVER
a40 11
#else

#include <stdio.h>
#include <X11/X.h>
#include <X11/Xproto.h>
#include "misc.h"
#include "inputstr.h"
#include <X11/extensions/XKBsrv.h>
#include <X11/extensions/XKBgeom.h>

#endif /* XKB_IN_SERVER */
@


1.3
log
@Update to libX11 1.3.3. Tested on a bulk ports build by naddy@@.
@
text
@a35 2
#define NEED_REPLIES
#define NEED_EVENTS
a45 2
#define	NEED_EVENTS
#define	NEED_REPLIES
@


1.2
log
@update to libX11 1.2.1
@
text
@a0 1
/* $Xorg: XKBAlloc.c,v 1.4 2000/08/17 19:44:59 cpqbld Exp $ */
a25 1
/* $XFree86: xc/lib/X11/XKBAlloc.c,v 3.5 2001/01/17 19:41:48 dawes Exp $ */
@


1.1
log
@Initial revision
@
text
@d10 2
a11 2
documentation, and that the name of Silicon Graphics not be 
used in advertising or publicity pertaining to distribution 
d13 1
a13 1
Silicon Graphics makes no representation about the suitability 
d17 2
a18 2
SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d20 3
a22 3
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
d46 1
a46 1
#else 
d166 1
a166 1
	    (xkb->max_key_code<xkb->min_key_code)) 
d226 1
a226 1
	which= XkbAllNamesMask; 
d293 1
a293 1
Status 
d371 1
a371 1
	
d468 1
a468 1
void 
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@
