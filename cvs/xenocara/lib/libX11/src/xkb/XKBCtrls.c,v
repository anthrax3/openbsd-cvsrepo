head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.14
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.12
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.10
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.8
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_1_3:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_1_1:1.1.1.1
	v1_0_99_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.09.28.17.03.21;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.30.19.19.38;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.18.19.37.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.03.12.59.11;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.16.37.32;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.37.32;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to libX11 1.6.2. No API change.
@
text
@/************************************************************
Copyright (c) 1993 by Silicon Graphics Computer Systems, Inc.

Permission to use, copy, modify, and distribute this
software and its documentation for any purpose and without
fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting
documentation, and that the name of Silicon Graphics not be
used in advertising or publicity pertaining to distribution
of the software without specific prior written permission.
Silicon Graphics makes no representation about the suitability
of this software for any purpose. It is provided "as is"
without any express or implied warranty.

SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
THE USE OR PERFORMANCE OF THIS SOFTWARE.

********************************************************/

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <stdio.h>
#include "Xlibint.h"
#include <X11/extensions/XKBproto.h>
#include "XKBlibint.h"


static xkbSetControlsReq *
_XkbGetSetControlsReq(Display *dpy, XkbInfoPtr xkbi, unsigned int deviceSpec)
{
    xkbSetControlsReq *req;

    GetReq(kbSetControls, req);
    bzero(req, SIZEOF(xkbSetControlsReq));
    req->reqType = xkbi->codes->major_opcode;
    req->length = (SIZEOF(xkbSetControlsReq) >> 2);
    req->xkbReqType = X_kbSetControls;
    req->deviceSpec = deviceSpec;
    return req;
}

Bool
XkbSetAutoRepeatRate(Display *dpy,
                     unsigned int deviceSpec,
                     unsigned int timeout,
                     unsigned int interval)
{
    register xkbSetControlsReq *req;

    if ((dpy->flags & XlibDisplayNoXkb) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return False;
    LockDisplay(dpy);
    req = _XkbGetSetControlsReq(dpy, dpy->xkb_info, deviceSpec);
    req->changeCtrls = XkbRepeatKeysMask;
    req->repeatDelay = timeout;
    req->repeatInterval = interval;
    UnlockDisplay(dpy);
    SyncHandle();
    return True;
}

Bool
XkbGetAutoRepeatRate(Display *dpy,
                     unsigned int deviceSpec,
                     unsigned int *timeoutp,
                     unsigned int *intervalp)
{
    register xkbGetControlsReq *req;
    xkbGetControlsReply rep;
    XkbInfoPtr xkbi;

    if ((dpy->flags & XlibDisplayNoXkb) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return False;
    LockDisplay(dpy);
    xkbi = dpy->xkb_info;
    GetReq(kbGetControls, req);
    req->reqType = xkbi->codes->major_opcode;
    req->xkbReqType = X_kbGetControls;
    req->deviceSpec = deviceSpec;
    if (!_XReply(dpy, (xReply *) &rep,
                 (SIZEOF(xkbGetControlsReply) - SIZEOF(xReply)) >> 2, xFalse)) {
        UnlockDisplay(dpy);
        SyncHandle();
        return False;
    }
    UnlockDisplay(dpy);
    SyncHandle();
    *timeoutp = rep.repeatDelay;
    *intervalp = rep.repeatInterval;
    return True;
}

Bool
XkbSetServerInternalMods(Display *dpy,
                         unsigned deviceSpec,
                         unsigned affectReal,
                         unsigned realValues,
                         unsigned affectVirtual,
                         unsigned virtualValues)
{
    register xkbSetControlsReq *req;

    if ((dpy->flags & XlibDisplayNoXkb) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return False;
    LockDisplay(dpy);
    req = _XkbGetSetControlsReq(dpy, dpy->xkb_info, deviceSpec);
    req->affectInternalMods = affectReal;
    req->internalMods = realValues;
    req->affectInternalVMods = affectVirtual;
    req->internalVMods = virtualValues;
    req->changeCtrls = XkbInternalModsMask;
    UnlockDisplay(dpy);
    SyncHandle();
    return True;
}

Bool
XkbSetIgnoreLockMods(Display *dpy,
                     unsigned int deviceSpec,
                     unsigned affectReal,
                     unsigned realValues,
                     unsigned affectVirtual,
                     unsigned virtualValues)
{
    register xkbSetControlsReq *req;

    if ((dpy->flags & XlibDisplayNoXkb) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return False;
    LockDisplay(dpy);
    req = _XkbGetSetControlsReq(dpy, dpy->xkb_info, deviceSpec);
    req->affectIgnoreLockMods = affectReal;
    req->ignoreLockMods = realValues;
    req->affectIgnoreLockVMods = affectVirtual;
    req->ignoreLockVMods = virtualValues;
    req->changeCtrls = XkbIgnoreLockModsMask;
    UnlockDisplay(dpy);
    SyncHandle();
    return True;
}

Bool
XkbChangeEnabledControls(Display *dpy,
                         unsigned deviceSpec,
                         unsigned affect,
                         unsigned values)
{
    register xkbSetControlsReq *req;

    if ((dpy->flags & XlibDisplayNoXkb) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return False;
    LockDisplay(dpy);
    req = _XkbGetSetControlsReq(dpy, dpy->xkb_info, deviceSpec);
    req->affectEnabledCtrls = affect;
    req->enabledCtrls = (affect & values);
    req->changeCtrls = XkbControlsEnabledMask;
    UnlockDisplay(dpy);
    SyncHandle();
    return True;
}

Status
XkbGetControls(Display *dpy, unsigned long which, XkbDescPtr xkb)
{
    register xkbGetControlsReq *req;
    xkbGetControlsReply rep;
    XkbControlsPtr ctrls;
    XkbInfoPtr xkbi;

    if ((dpy->flags & XlibDisplayNoXkb) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return BadAccess;
    if ((!xkb) || (!which))
        return BadMatch;

    LockDisplay(dpy);
    xkbi = dpy->xkb_info;
    GetReq(kbGetControls, req);
    if (!xkb->ctrls) {
        xkb->ctrls = _XkbTypedCalloc(1, XkbControlsRec);
        if (!xkb->ctrls) {
            UnlockDisplay(dpy);
            SyncHandle();
            return BadAlloc;
        }
    }
    req->reqType = xkbi->codes->major_opcode;
    req->xkbReqType = X_kbGetControls;
    req->deviceSpec = xkb->device_spec;
    if (!_XReply(dpy, (xReply *) &rep,
                 (SIZEOF(xkbGetControlsReply) - SIZEOF(xReply)) >> 2, xFalse)) {
        UnlockDisplay(dpy);
        SyncHandle();
        return BadImplementation;
    }
    if (xkb->device_spec == XkbUseCoreKbd)
        xkb->device_spec = rep.deviceID;
    ctrls = xkb->ctrls;
    if (which & XkbControlsEnabledMask)
        ctrls->enabled_ctrls = rep.enabledCtrls;
    ctrls->num_groups = rep.numGroups;
    if (which & XkbGroupsWrapMask)
        ctrls->groups_wrap = rep.groupsWrap;
    if (which & XkbInternalModsMask) {
        ctrls->internal.mask = rep.internalMods;
        ctrls->internal.real_mods = rep.internalRealMods;
        ctrls->internal.vmods = rep.internalVMods;
    }
    if (which & XkbIgnoreLockModsMask) {
        ctrls->ignore_lock.mask = rep.ignoreLockMods;
        ctrls->ignore_lock.real_mods = rep.ignoreLockRealMods;
        ctrls->ignore_lock.vmods = rep.ignoreLockVMods;
    }
    if (which & XkbRepeatKeysMask) {
        ctrls->repeat_delay = rep.repeatDelay;
        ctrls->repeat_interval = rep.repeatInterval;
    }
    if (which & XkbSlowKeysMask)
        ctrls->slow_keys_delay = rep.slowKeysDelay;
    if (which & XkbBounceKeysMask)
        ctrls->debounce_delay = rep.debounceDelay;
    if (which & XkbMouseKeysMask) {
        ctrls->mk_dflt_btn = rep.mkDfltBtn;
    }
    if (which & XkbMouseKeysAccelMask) {
        ctrls->mk_delay = rep.mkDelay;
        ctrls->mk_interval = rep.mkInterval;
        ctrls->mk_time_to_max = rep.mkTimeToMax;
        ctrls->mk_max_speed = rep.mkMaxSpeed;
        ctrls->mk_curve = rep.mkCurve;
    }
    if (which & XkbAccessXKeysMask)
        ctrls->ax_options = rep.axOptions;
    if (which & XkbStickyKeysMask) {
        ctrls->ax_options &= ~XkbAX_SKOptionsMask;
        ctrls->ax_options |= rep.axOptions & XkbAX_SKOptionsMask;
    }
    if (which & XkbAccessXFeedbackMask) {
        ctrls->ax_options &= ~XkbAX_FBOptionsMask;
        ctrls->ax_options |= rep.axOptions & XkbAX_FBOptionsMask;
    }
    if (which & XkbAccessXTimeoutMask) {
        ctrls->ax_timeout = rep.axTimeout;
        ctrls->axt_ctrls_mask = rep.axtCtrlsMask;
        ctrls->axt_ctrls_values = rep.axtCtrlsValues;
        ctrls->axt_opts_mask = rep.axtOptsMask;
        ctrls->axt_opts_values = rep.axtOptsValues;
    }
    if (which & XkbPerKeyRepeatMask) {
        memcpy(ctrls->per_key_repeat, rep.perKeyRepeat, XkbPerKeyBitArraySize);
    }
    UnlockDisplay(dpy);
    SyncHandle();
    return Success;
}

Bool
XkbSetControls(Display *dpy, unsigned long which, XkbDescPtr xkb)
{
    register xkbSetControlsReq *req;
    XkbControlsPtr ctrls;

    if ((dpy->flags & XlibDisplayNoXkb) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return False;
    if ((!xkb) || (!xkb->ctrls))
        return False;

    ctrls = xkb->ctrls;
    LockDisplay(dpy);
    req = _XkbGetSetControlsReq(dpy, dpy->xkb_info, xkb->device_spec);
    req->changeCtrls = (CARD32) which;
    if (which & XkbInternalModsMask) {
        req->affectInternalMods = ~0;
        req->internalMods = ctrls->internal.real_mods;
        req->affectInternalVMods = ~0;
        req->internalVMods = ctrls->internal.vmods;
    }
    if (which & XkbIgnoreLockModsMask) {
        req->affectIgnoreLockMods = ~0;
        req->ignoreLockMods = ctrls->ignore_lock.real_mods;
        req->affectIgnoreLockVMods = ~0;
        req->ignoreLockVMods = ctrls->ignore_lock.vmods;
    }
    if (which & XkbControlsEnabledMask) {
        req->affectEnabledCtrls = XkbAllBooleanCtrlsMask;
        req->enabledCtrls = ctrls->enabled_ctrls;
    }
    if (which & XkbRepeatKeysMask) {
        req->repeatDelay = ctrls->repeat_delay;
        req->repeatInterval = ctrls->repeat_interval;
    }
    if (which & XkbSlowKeysMask)
        req->slowKeysDelay = ctrls->slow_keys_delay;
    if (which & XkbBounceKeysMask)
        req->debounceDelay = ctrls->debounce_delay;
    if (which & XkbMouseKeysMask) {
        req->mkDfltBtn = ctrls->mk_dflt_btn;
    }
    if (which & XkbGroupsWrapMask)
        req->groupsWrap = ctrls->groups_wrap;
    if (which &
        (XkbAccessXKeysMask | XkbStickyKeysMask | XkbAccessXFeedbackMask))
        req->axOptions = ctrls->ax_options;
    if (which & XkbMouseKeysAccelMask) {
        req->mkDelay = ctrls->mk_delay;
        req->mkInterval = ctrls->mk_interval;
        req->mkTimeToMax = ctrls->mk_time_to_max;
        req->mkMaxSpeed = ctrls->mk_max_speed;
        req->mkCurve = ctrls->mk_curve;
    }
    if (which & XkbAccessXTimeoutMask) {
        req->axTimeout = ctrls->ax_timeout;
        req->axtCtrlsMask = ctrls->axt_ctrls_mask;
        req->axtCtrlsValues = ctrls->axt_ctrls_values;
        req->axtOptsMask = ctrls->axt_opts_mask;
        req->axtOptsValues = ctrls->axt_opts_values;
    }
    if (which & XkbPerKeyRepeatMask) {
        memcpy(req->perKeyRepeat, ctrls->per_key_repeat, XkbPerKeyBitArraySize);
    }
    UnlockDisplay(dpy);
    SyncHandle();
    return True;
}

/***====================================================================***/

void
XkbNoteControlsChanges(XkbControlsChangesPtr old,
                       XkbControlsNotifyEvent *new,
                       unsigned int wanted)
{
    old->changed_ctrls |= (new->changed_ctrls & wanted);
    if (new->changed_ctrls & XkbControlsEnabledMask & wanted)
        old->enabled_ctrls_changes ^= new->enabled_ctrl_changes;
    /* num_groups_changed?? */
    return;
}
@


1.4
log
@Update to libx11 1.4.2. Tested by ajacoutot@@, jasper@@ krw@@, landry@@,
shadchin@@ on various architectures.
Bump major.
@
text
@d37 1
a37 1
_XkbGetSetControlsReq(Display *dpy,XkbInfoPtr xkbi,unsigned int deviceSpec)
d39 1
a39 1
xkbSetControlsReq *req;
d41 2
a42 2
    GetReq(kbSetControls,req);
    bzero(req,SIZEOF(xkbSetControlsReq));
d44 1
a44 1
    req->length = (SIZEOF(xkbSetControlsReq)>>2);
d51 4
a54 4
XkbSetAutoRepeatRate(	Display *dpy,
			unsigned int deviceSpec,
			unsigned int timeout,
			unsigned int interval)
d59 2
a60 2
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)))
	return False;
d62 1
a62 1
    req= _XkbGetSetControlsReq(dpy,dpy->xkb_info,deviceSpec);
d72 4
a75 4
XkbGetAutoRepeatRate(	Display *	dpy,
			unsigned int 	deviceSpec,
			unsigned int *	timeoutp,
			unsigned int *	intervalp)
d82 2
a83 2
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)))
	return False;
d90 5
a94 5
    if (!_XReply(dpy, (xReply *)&rep,
		(SIZEOF(xkbGetControlsReply)-SIZEOF(xReply))>>2, xFalse)) {
	UnlockDisplay(dpy);
	SyncHandle();
	return False;
d104 6
a109 6
XkbSetServerInternalMods(	Display *	dpy,
				unsigned 	deviceSpec,
				unsigned 	affectReal,
				unsigned 	realValues,
				unsigned 	affectVirtual,
				unsigned 	virtualValues)
d114 2
a115 2
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)))
	return False;
d117 1
a117 1
    req= _XkbGetSetControlsReq(dpy,dpy->xkb_info,deviceSpec);
d120 2
a121 2
    req->affectInternalVMods= affectVirtual;
    req->internalVMods= virtualValues;
d129 6
a134 6
XkbSetIgnoreLockMods(	Display *	dpy,
			unsigned int 	deviceSpec,
			unsigned 	affectReal,
			unsigned 	realValues,
			unsigned 	affectVirtual,
			unsigned 	virtualValues)
d139 2
a140 2
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)))
	return False;
d142 2
a143 2
    req= _XkbGetSetControlsReq(dpy,dpy->xkb_info,deviceSpec);
    req->affectIgnoreLockMods= affectReal;
d145 2
a146 2
    req->affectIgnoreLockVMods= affectVirtual;
    req->ignoreLockVMods= virtualValues;
d154 4
a157 4
XkbChangeEnabledControls(	Display *	dpy,
				unsigned	deviceSpec,
				unsigned	affect,
				unsigned	values)
d162 2
a163 2
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)))
	return False;
d165 3
a167 3
    req= _XkbGetSetControlsReq(dpy,dpy->xkb_info,deviceSpec);
    req->affectEnabledCtrls= affect;
    req->enabledCtrls= (affect&values);
d179 1
a179 1
    XkbControlsPtr	ctrls;
d183 2
a184 2
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)))
	return BadAccess;
d186 1
a186 1
	return BadMatch;
d191 7
a197 7
    if (!xkb->ctrls)  {
	xkb->ctrls = _XkbTypedCalloc(1,XkbControlsRec);
	if (!xkb->ctrls) {
	    UnlockDisplay(dpy);
	    SyncHandle();
	    return BadAlloc;
	}
d202 61
a262 62
    if (!_XReply(dpy, (xReply *)&rep,
		(SIZEOF(xkbGetControlsReply)-SIZEOF(xReply))>>2, xFalse)) {
	UnlockDisplay(dpy);
	SyncHandle();
	return BadImplementation;
    }
    if (xkb->device_spec==XkbUseCoreKbd)
	xkb->device_spec= rep.deviceID;
    ctrls= xkb->ctrls;
    if (which&XkbControlsEnabledMask)
	ctrls->enabled_ctrls = rep.enabledCtrls;
    ctrls->num_groups= rep.numGroups;
    if (which&XkbGroupsWrapMask)
	ctrls->groups_wrap= rep.groupsWrap;
    if (which&XkbInternalModsMask) {
	ctrls->internal.mask = rep.internalMods;
	ctrls->internal.real_mods = rep.internalRealMods;
	ctrls->internal.vmods = rep.internalVMods;
    }
    if (which&XkbIgnoreLockModsMask) {
	ctrls->ignore_lock.mask = rep.ignoreLockMods;
	ctrls->ignore_lock.real_mods = rep.ignoreLockRealMods;
	ctrls->ignore_lock.vmods = rep.ignoreLockVMods;
    }
    if (which&XkbRepeatKeysMask) {
	ctrls->repeat_delay = rep.repeatDelay;
	ctrls->repeat_interval = rep.repeatInterval;
    }
    if (which&XkbSlowKeysMask)
	ctrls->slow_keys_delay = rep.slowKeysDelay;
    if (which&XkbBounceKeysMask)
	ctrls->debounce_delay = rep.debounceDelay;
    if (which&XkbMouseKeysMask) {
	ctrls->mk_dflt_btn = rep.mkDfltBtn;
    }
    if (which&XkbMouseKeysAccelMask) {
	ctrls->mk_delay = rep.mkDelay;
	ctrls->mk_interval = rep.mkInterval;
	ctrls->mk_time_to_max = rep.mkTimeToMax;
	ctrls->mk_max_speed = rep.mkMaxSpeed;
	ctrls->mk_curve = rep.mkCurve;
    }
    if (which&XkbAccessXKeysMask)
	ctrls->ax_options= rep.axOptions;
    if (which&XkbStickyKeysMask) {
	ctrls->ax_options &= ~XkbAX_SKOptionsMask;
	ctrls->ax_options |= rep.axOptions & XkbAX_SKOptionsMask;
    }
    if (which&XkbAccessXFeedbackMask) {
	ctrls->ax_options &= ~XkbAX_FBOptionsMask;
	ctrls->ax_options |= rep.axOptions & XkbAX_FBOptionsMask;
    }
    if (which&XkbAccessXTimeoutMask) {
	ctrls->ax_timeout = rep.axTimeout;
	ctrls->axt_ctrls_mask = rep.axtCtrlsMask;
	ctrls->axt_ctrls_values = rep.axtCtrlsValues;
	ctrls->axt_opts_mask = rep.axtOptsMask;
	ctrls->axt_opts_values= rep.axtOptsValues;
    }
    if (which&XkbPerKeyRepeatMask) {
   	memcpy(ctrls->per_key_repeat,rep.perKeyRepeat,
					  XkbPerKeyBitArraySize);
d273 1
a273 1
    XkbControlsPtr	ctrls;
d276 4
a279 4
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)))
	return False;
    if ((!xkb)||(!xkb->ctrls))
	return False;
d281 1
a281 1
    ctrls= xkb->ctrls;
d283 50
a332 50
    req= _XkbGetSetControlsReq(dpy,dpy->xkb_info,xkb->device_spec);
    req->changeCtrls = (CARD32)which;
    if (which&XkbInternalModsMask) {
	req->affectInternalMods= ~0;
	req->internalMods= ctrls->internal.real_mods;
	req->affectInternalVMods = ~0;
	req->internalVMods= ctrls->internal.vmods;
    }
    if (which&XkbIgnoreLockModsMask) {
	req->affectIgnoreLockMods= ~0;
	req->ignoreLockMods= ctrls->ignore_lock.real_mods;
	req->affectIgnoreLockVMods= ~0;
	req->ignoreLockVMods= ctrls->ignore_lock.vmods;
    }
    if (which&XkbControlsEnabledMask) {
	req->affectEnabledCtrls= XkbAllBooleanCtrlsMask;
	req->enabledCtrls= ctrls->enabled_ctrls;
    }
    if (which&XkbRepeatKeysMask) {
	req->repeatDelay = ctrls->repeat_delay;
	req->repeatInterval = ctrls->repeat_interval;
    }
    if (which&XkbSlowKeysMask)
	 req->slowKeysDelay = ctrls->slow_keys_delay;
    if (which&XkbBounceKeysMask)
	 req->debounceDelay = ctrls->debounce_delay;
    if (which&XkbMouseKeysMask) {
	req->mkDfltBtn = ctrls->mk_dflt_btn;
    }
    if (which&XkbGroupsWrapMask)
	req->groupsWrap= ctrls->groups_wrap;
    if (which&(XkbAccessXKeysMask|XkbStickyKeysMask|XkbAccessXFeedbackMask))
	req->axOptions= ctrls->ax_options;
    if (which&XkbMouseKeysAccelMask) {
	req->mkDelay = ctrls->mk_delay;
	req->mkInterval = ctrls->mk_interval;
	req->mkTimeToMax = ctrls->mk_time_to_max;
	req->mkMaxSpeed = ctrls->mk_max_speed;
	req->mkCurve = ctrls->mk_curve;
    }
    if (which&XkbAccessXTimeoutMask) {
	 req->axTimeout = ctrls->ax_timeout;
	 req->axtCtrlsMask = ctrls->axt_ctrls_mask;
	 req->axtCtrlsValues = ctrls->axt_ctrls_values;
	 req->axtOptsMask = ctrls->axt_opts_mask;
	 req->axtOptsValues=ctrls->axt_opts_values;
    }
    if (which&XkbPerKeyRepeatMask) {
	memcpy(req->perKeyRepeat,ctrls->per_key_repeat,
					XkbPerKeyBitArraySize);
d342 3
a344 3
XkbNoteControlsChanges(	XkbControlsChangesPtr		old,
			XkbControlsNotifyEvent *	new,
			unsigned int	 		wanted)
d346 3
a348 3
    old->changed_ctrls|= (new->changed_ctrls&wanted);
    if (new->changed_ctrls&XkbControlsEnabledMask&wanted)
	old->enabled_ctrls_changes^= new->enabled_ctrl_changes;
@


1.3
log
@Update to libX11 1.3.3. Tested on a bulk ports build by naddy@@.
@
text
@a30 2
#define NEED_REPLIES
#define NEED_EVENTS
@


1.2
log
@update to libX11 1.2.1
@
text
@a0 1
/* $Xorg: XKBCtrls.c,v 1.3 2000/08/17 19:45:00 cpqbld Exp $ */
a25 1
/* $XFree86: xc/lib/X11/XKBCtrls.c,v 1.4 2002/12/10 04:33:48 dawes Exp $ */
@


1.1
log
@Initial revision
@
text
@d10 2
a11 2
documentation, and that the name of Silicon Graphics not be 
used in advertising or publicity pertaining to distribution 
d13 1
a13 1
Silicon Graphics makes no representation about the suitability 
d17 2
a18 2
SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d20 3
a22 3
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
d54 1
a54 1
Bool 
d56 2
a57 2
			unsigned int deviceSpec, 
			unsigned int timeout, 
d75 1
a75 1
Bool 
d94 1
a94 1
    if (!_XReply(dpy, (xReply *)&rep, 
d178 1
a178 1
Status 
d201 1
a201 1
	} 
d206 1
a206 1
    if (!_XReply(dpy, (xReply *)&rep, 
d267 1
a267 1
					  XkbPerKeyBitArraySize); 
d274 1
a274 1
Bool 
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@
