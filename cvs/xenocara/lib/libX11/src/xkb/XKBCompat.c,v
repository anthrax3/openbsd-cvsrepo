head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.12
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.10
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.8
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_1_3:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_1_1:1.1.1.1
	v1_0_99_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.09.28.17.03.21;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.30.19.19.38;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.18.19.37.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.03.12.59.11;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.16.37.32;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.37.32;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to libX11 1.6.2. No API change.
@
text
@/************************************************************
Copyright (c) 1993 by Silicon Graphics Computer Systems, Inc.

Permission to use, copy, modify, and distribute this
software and its documentation for any purpose and without
fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting
documentation, and that the name of Silicon Graphics not be
used in advertising or publicity pertaining to distribution
of the software without specific prior written permission.
Silicon Graphics makes no representation about the suitability
of this software for any purpose. It is provided "as is"
without any express or implied warranty.

SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
THE USE OR PERFORMANCE OF THIS SOFTWARE.

********************************************************/

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <stdio.h>
#define	NEED_MAP_READERS
#include "Xlibint.h"
#include <X11/extensions/XKBproto.h>
#include "XKBlibint.h"

Status
_XkbReadGetCompatMapReply(Display *dpy,
                          xkbGetCompatMapReply *rep,
                          XkbDescPtr xkb,
                          int *nread_rtrn)
{
    register int i;
    XkbReadBufferRec buf;

    if (!_XkbInitReadBuffer(dpy, &buf, (int) rep->length * 4))
        return BadAlloc;

    if (nread_rtrn)
        *nread_rtrn = (int) rep->length * 4;

    i = rep->firstSI + rep->nSI;
    if ((!xkb->compat) &&
        (XkbAllocCompatMap(xkb, XkbAllCompatMask, i) != Success))
        return BadAlloc;

    if (rep->nSI != 0) {
        XkbSymInterpretRec *syms;
        xkbSymInterpretWireDesc *wire;

        wire = (xkbSymInterpretWireDesc *) _XkbGetReadBufferPtr(&buf,
            rep->nSI * SIZEOF (xkbSymInterpretWireDesc));
        if (wire == NULL)
            goto BAILOUT;
        syms = &xkb->compat->sym_interpret[rep->firstSI];

        for (i = 0; i < rep->nSI; i++, syms++, wire++) {
            syms->sym = wire->sym;
            syms->mods = wire->mods;
            syms->match = wire->match;
            syms->virtual_mod = wire->virtualMod;
            syms->flags = wire->flags;
            syms->act = *((XkbAnyAction *) &wire->act);
        }
        xkb->compat->num_si += rep->nSI;
    }

    if (rep->groups & XkbAllGroupsMask) {
        register unsigned bit, nGroups;
        xkbModsWireDesc *wire;

        for (i = 0, nGroups = 0, bit = 1; i < XkbNumKbdGroups; i++, bit <<= 1) {
            if (rep->groups & bit)
                nGroups++;
        }
        wire = (xkbModsWireDesc *)
            _XkbGetReadBufferPtr(&buf, nGroups * SIZEOF(xkbModsWireDesc));
        if (wire == NULL)
            goto BAILOUT;
        for (i = 0, bit = 1; i < XkbNumKbdGroups; i++, bit <<= 1) {
            if ((rep->groups & bit) == 0)
                continue;
            xkb->compat->groups[i].mask = wire->mask;
            xkb->compat->groups[i].real_mods = wire->realMods;
            xkb->compat->groups[i].vmods = wire->virtualMods;
            wire++;
        }
    }
    i = _XkbFreeReadBuffer(&buf);
    if (i)
        fprintf(stderr, "CompatMapReply! Bad length (%d extra bytes)\n", i);
    if (i || buf.error)
        return BadLength;
    return Success;
 BAILOUT:
    _XkbFreeReadBuffer(&buf);
    return BadLength;
}

Status
XkbGetCompatMap(Display *dpy, unsigned which, XkbDescPtr xkb)
{
    register xkbGetCompatMapReq *req;
    xkbGetCompatMapReply rep;
    Status status;
    XkbInfoPtr xkbi;

    if ((!dpy) || (!xkb) || (dpy->flags & XlibDisplayNoXkb) ||
        ((xkb->dpy != NULL) && (xkb->dpy != dpy)) ||
        (!dpy->xkb_info && (!XkbUseExtension(dpy, NULL, NULL))))
        return BadAccess;
    LockDisplay(dpy);
    xkbi = dpy->xkb_info;
    GetReq(kbGetCompatMap, req);
    req->reqType = xkbi->codes->major_opcode;
    req->xkbReqType = X_kbGetCompatMap;
    req->deviceSpec = xkb->device_spec;
    if (which & XkbSymInterpMask)
        req->getAllSI = True;
    else
        req->getAllSI = False;
    req->firstSI = req->nSI = 0;

    if (which & XkbGroupCompatMask)
        req->groups = XkbAllGroupsMask;
    else
        req->groups = 0;

    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
        UnlockDisplay(dpy);
        SyncHandle();
        return BadLength;
    }
    if (xkb->dpy == NULL)
        xkb->dpy = dpy;
    if (xkb->device_spec == XkbUseCoreKbd)
        xkb->device_spec = rep.deviceID;

    status = _XkbReadGetCompatMapReply(dpy, &rep, xkb, NULL);
    UnlockDisplay(dpy);
    SyncHandle();
    return status;
}

static Bool
_XkbWriteSetCompatMap(Display *dpy, xkbSetCompatMapReq *req, XkbDescPtr xkb)
{
    CARD16 firstSI;
    CARD16 nSI;
    int size;
    register int i, nGroups;
    register unsigned bit;
    unsigned groups;
    char *buf;

    firstSI = req->firstSI;
    nSI = req->nSI;
    size = nSI * SIZEOF(xkbSymInterpretWireDesc);
    nGroups = 0;
    groups = req->groups;
    if (groups & XkbAllGroupsMask) {
        for (i = 0, bit = 1; i < XkbNumKbdGroups; i++, bit <<= 1) {
            if (groups & bit)
                nGroups++;
        }
        size += SIZEOF(xkbModsWireDesc) * nGroups;
    }
    req->length += size / 4;
    BufAlloc(char *, buf, size);

    if (!buf)
        return False;

    if (nSI) {
        XkbSymInterpretPtr sym = &xkb->compat->sym_interpret[firstSI];
        xkbSymInterpretWireDesc *wire = (xkbSymInterpretWireDesc *) buf;

        for (i = 0; i < nSI; i++, wire++, sym++) {
            wire->sym = (CARD32) sym->sym;
            wire->mods = sym->mods;
            wire->match = sym->match;
            wire->flags = sym->flags;
            wire->virtualMod = sym->virtual_mod;
            memcpy(&wire->act, &sym->act, sz_xkbActionWireDesc);
        }
        buf += nSI * SIZEOF(xkbSymInterpretWireDesc);
    }
    if (groups & XkbAllGroupsMask) {
        xkbModsWireDesc *out = (xkbModsWireDesc *) buf;

        for (i = 0, bit = 1; i < XkbNumKbdGroups; i++, bit <<= 1) {
            if ((groups & bit) != 0) {
                out->mask = xkb->compat->groups[i].mask;
                out->realMods = xkb->compat->groups[i].real_mods;
                out->virtualMods = xkb->compat->groups[i].vmods;
                out++;
            }
        }
        buf += nGroups * SIZEOF(xkbModsWireDesc);
    }
    return True;
}

Bool
XkbSetCompatMap(Display *dpy, unsigned which, XkbDescPtr xkb,
                Bool updateActions)
{
    register xkbSetCompatMapReq *req;
    Status ok;
    XkbInfoPtr xkbi;

    if ((dpy->flags & XlibDisplayNoXkb) || (dpy != xkb->dpy) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return False;
    if ((!xkb->compat) ||
        ((which & XkbSymInterpMask) && (!xkb->compat->sym_interpret)))
        return False;
    LockDisplay(dpy);
    xkbi = dpy->xkb_info;
    GetReq(kbSetCompatMap, req);
    req->reqType = xkbi->codes->major_opcode;
    req->xkbReqType = X_kbSetCompatMap;
    req->deviceSpec = xkb->device_spec;
    req->recomputeActions = updateActions;
    if (which & XkbSymInterpMask) {
        req->truncateSI = True;
        req->firstSI = 0;
        req->nSI = xkb->compat->num_si;
    }
    else {
        req->truncateSI = False;
        req->firstSI = 0;
        req->nSI = 0;
    }
    if (which & XkbGroupCompatMask)
        req->groups = XkbAllGroupsMask;
    else
        req->groups = 0;
    ok = _XkbWriteSetCompatMap(dpy, req, xkb);
    UnlockDisplay(dpy);
    SyncHandle();
    return ok;
}
@


1.4
log
@Update to libx11 1.4.2. Tested by ajacoutot@@, jasper@@ krw@@, landry@@,
shadchin@@ on various architectures.
Bump major.
@
text
@d37 4
a40 4
_XkbReadGetCompatMapReply(	Display *		dpy,
				xkbGetCompatMapReply *	rep,
				XkbDescPtr		xkb,
				int	*		nread_rtrn)
d42 2
a43 2
register int 		i;
XkbReadBufferRec	buf;
d45 2
a46 2
    if (!_XkbInitReadBuffer(dpy,&buf,(int)rep->length*4))
	return BadAlloc;
d49 1
a49 1
	*nread_rtrn= (int)rep->length*4;
d51 46
a96 45
    i= rep->firstSI+rep->nSI;
    if ((!xkb->compat)&&
	(XkbAllocCompatMap(xkb,XkbAllCompatMask,i)!=Success))
	return BadAlloc;

    if (rep->nSI!=0) {
	XkbSymInterpretRec *syms;
	xkbSymInterpretWireDesc *wire;

	wire= (xkbSymInterpretWireDesc *)_XkbGetReadBufferPtr(&buf,
				   rep->nSI*SIZEOF(xkbSymInterpretWireDesc));
	if (wire==NULL)
	    goto BAILOUT;
	syms= &xkb->compat->sym_interpret[rep->firstSI];

	for (i=0;i<rep->nSI;i++,syms++,wire++) {
	    syms->sym= wire->sym;
	    syms->mods= wire->mods;
	    syms->match= wire->match;
	    syms->virtual_mod= wire->virtualMod;
	    syms->flags= wire->flags;
	    syms->act= *((XkbAnyAction *)&wire->act);
	}
	xkb->compat->num_si+= rep->nSI;
    }

    if (rep->groups&XkbAllGroupsMask) {
	register unsigned	bit,nGroups;
	xkbModsWireDesc * 	wire;
	for (i=0,nGroups=0,bit=1;i<XkbNumKbdGroups;i++,bit<<=1) {
	    if (rep->groups&bit)
		nGroups++;
	}
	wire= (xkbModsWireDesc *)_XkbGetReadBufferPtr(&buf,
				  nGroups*SIZEOF(xkbModsWireDesc));
	if (wire==NULL)
	    goto BAILOUT;
	for (i=0,bit=1;i<XkbNumKbdGroups;i++,bit<<=1) {
	    if ((rep->groups&bit)==0)
		continue;
	    xkb->compat->groups[i].mask= wire->mask;
	    xkb->compat->groups[i].real_mods= wire->realMods;
	    xkb->compat->groups[i].vmods= wire->virtualMods;
	    wire++;
	}
d98 1
a98 1
    i= _XkbFreeReadBuffer(&buf);
d100 1
a100 1
	fprintf(stderr,"CompatMapReply! Bad length (%d extra bytes)\n",i);
d102 1
a102 1
	return BadLength;
d104 1
a104 1
BAILOUT:
d110 1
a110 1
XkbGetCompatMap(Display *dpy,unsigned which,XkbDescPtr xkb)
d113 2
a114 2
    xkbGetCompatMapReply	 rep;
    Status			status;
d117 4
a120 4
    if ( (!dpy) || (!xkb) || (dpy->flags & XlibDisplayNoXkb) ||
	((xkb->dpy!=NULL)&&(xkb->dpy!=dpy)) ||
	(!dpy->xkb_info && (!XkbUseExtension(dpy,NULL,NULL))))
	return BadAccess;
d127 20
a146 18
    if (which&XkbSymInterpMask)
	 req->getAllSI= True;
    else req->getAllSI= False;
    req->firstSI= req->nSI= 0;

    if (which&XkbGroupCompatMask)
	 req->groups= XkbAllGroupsMask;
    else req->groups=  0;

    if (!_XReply(dpy, (xReply *)&rep, 0, xFalse)) {
	UnlockDisplay(dpy);
	SyncHandle();
	return BadLength;
    }
    if (xkb->dpy==NULL)
	xkb->dpy= dpy;
    if (xkb->device_spec==XkbUseCoreKbd)
	xkb->device_spec= rep.deviceID;
d148 1
a148 1
    status = _XkbReadGetCompatMapReply(dpy,&rep,xkb,NULL);
d155 1
a155 1
_XkbWriteSetCompatMap(Display *dpy,xkbSetCompatMapReq *req,XkbDescPtr xkb)
d157 7
a163 7
CARD16			firstSI;
CARD16			nSI;
int			size;
register int 		i,nGroups;
register unsigned	bit;
unsigned		groups;
char *			buf;
d167 9
a175 9
    size= nSI*SIZEOF(xkbSymInterpretWireDesc);
    nGroups= 0;
    groups= req->groups;
    if (groups&XkbAllGroupsMask) {
	for (i=0,bit=1;i<XkbNumKbdGroups;i++,bit<<=1) {
	    if (groups&bit)
		nGroups++;
	}
	size+= SIZEOF(xkbModsWireDesc)*nGroups;
d177 3
a179 2
    req->length+= size/4;
    BufAlloc(char *,buf,size);
d181 1
a181 1
	return False;
d184 25
a208 25
	XkbSymInterpretPtr sym= &xkb->compat->sym_interpret[firstSI];
	xkbSymInterpretWireDesc *wire= (xkbSymInterpretWireDesc *)buf;
	for (i=0;i<nSI;i++,wire++,sym++) {
	    wire->sym= (CARD32)sym->sym;
	    wire->mods= sym->mods;
	    wire->match= sym->match;
	    wire->flags= sym->flags;
	    wire->virtualMod= sym->virtual_mod;
	    memcpy(&wire->act,&sym->act,sz_xkbActionWireDesc);
	}
	buf+= nSI*SIZEOF(xkbSymInterpretWireDesc);
    }
    if (groups&XkbAllGroupsMask) {
	xkbModsWireDesc *	out;

	out= (xkbModsWireDesc *)buf;
	for (i=0,bit=1;i<XkbNumKbdGroups;i++,bit<<=1) {
	    if ((groups&bit)!=0) {
		out->mask= xkb->compat->groups[i].mask;
		out->realMods= xkb->compat->groups[i].real_mods;
		out->virtualMods=  xkb->compat->groups[i].vmods;
		out++;
	    }
	}
	buf+= nGroups*SIZEOF(xkbModsWireDesc);
d214 2
a215 1
XkbSetCompatMap(Display *dpy,unsigned which,XkbDescPtr xkb,Bool updateActions)
d218 1
a218 1
    Status		     ok;
d221 3
a223 3
    if ((dpy->flags & XlibDisplayNoXkb) || (dpy!=xkb->dpy) ||
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)))
	return False;
d225 2
a226 2
	((which&XkbSymInterpMask)&&(!xkb->compat->sym_interpret)))
	return False;
d234 4
a237 4
    if (which&XkbSymInterpMask) {
	req->truncateSI = True;
	req->firstSI= 0;
	req->nSI= xkb->compat->num_si;
d240 9
a248 8
	req->truncateSI = False;
	req->firstSI= 0;
	req->nSI= 0;
    }
    if (which&XkbGroupCompatMask)
	 req->groups= XkbAllGroupsMask;
    else req->groups=  0;
    ok= _XkbWriteSetCompatMap(dpy,req,xkb);
a252 1

@


1.3
log
@Update to libX11 1.3.3. Tested on a bulk ports build by naddy@@.
@
text
@a30 2
#define NEED_REPLIES
#define NEED_EVENTS
@


1.2
log
@update to libX11 1.2.1
@
text
@a0 1
/* $Xorg: XKBCompat.c,v 1.3 2000/08/17 19:45:00 cpqbld Exp $ */
a25 1
/* $XFree86$ */
@


1.1
log
@Initial revision
@
text
@d10 2
a11 2
documentation, and that the name of Silicon Graphics not be 
used in advertising or publicity pertaining to distribution 
d13 1
a13 1
Silicon Graphics makes no representation about the suitability 
d17 2
a18 2
SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d20 3
a22 3
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
d49 1
a49 1
    if (!_XkbInitReadBuffer(dpy,&buf,(int)rep->length*4)) 
d102 1
a102 1
    if (i) 
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@
