head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.12
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_1_3:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_1_1:1.1.1.1
	v1_0_99_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.09.28.17.03.22;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2013.04.28.16.55.57;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.18.19.37.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.03.12.59.11;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.16.37.36;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.37.36;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.30.10.13.10;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to libX11 1.6.2. No API change.
@
text
@/************************************************************
Copyright (c) 1993 by Silicon Graphics Computer Systems, Inc.

Permission to use, copy, modify, and distribute this
software and its documentation for any purpose and without
fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting
documentation, and that the name of Silicon Graphics not be
used in advertising or publicity pertaining to distribution
of the software without specific prior written permission.
Silicon Graphics makes no representation about the suitability
of this software for any purpose. It is provided "as is"
without any express or implied warranty.

SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
THE USE OR PERFORMANCE OF THIS SOFTWARE.

********************************************************/

#ifndef _XKBLIBINT_H_
#define _XKBLIBINT_H_

#include <X11/Xutil.h>
#include <X11/XKBlib.h>

#define XkbMapPending           (1<<0)
#define XkbXlibNewKeyboard      (1<<1)

typedef int     (*XkbKSToMBFunc)(
        XPointer        /* priv */,
        KeySym          /* sym */,
        char *          /* buf */,
        int             /* len */,
        int *           /* extra_rtrn */
);

typedef KeySym  (*XkbMBToKSFunc)(
        XPointer        /* priv */,
        char *          /* buf */,
        int             /* len */,
        Status *        /* status */
);

typedef KeySym  (*XkbToUpperFunc)(
        KeySym          /* sym */
);

typedef struct _XkbConverters {
        XkbKSToMBFunc    KSToMB;
        XPointer         KSToMBPriv;
        XkbMBToKSFunc    MBToKS;
        XPointer         MBToKSPriv;
        XkbToUpperFunc   KSToUpper;
} XkbConverters;

extern  XkbInternAtomFunc       _XkbInternAtomFunc;
extern  XkbGetAtomNameFunc      _XkbGetAtomNameFunc;

typedef struct _XkbInfoRec {
        unsigned         flags;
        unsigned         xlib_ctrls;
        XExtCodes        *codes;
        int              srv_major;
        int              srv_minor;
        unsigned         selected_events;
        unsigned short   selected_nkn_details;
        unsigned short   selected_map_details;
        XkbDescRec      *desc;
        XkbMapChangesRec changes;
        Atom             composeLED;
        XkbConverters    cvt;
        XkbConverters    latin1cvt;
} XkbInfoRec, *XkbInfoPtr;


#define _XkbUnavailable(d) \
        (((d)->flags&XlibDisplayNoXkb) || \
         ((!(d)->xkb_info || (!(d)->xkb_info->desc)) && !_XkbLoadDpy(d)))

#define _XkbCheckPendingRefresh(d,xi) { \
    if ((xi)->flags&XkbXlibNewKeyboard) \
        _XkbReloadDpy((d)); \
    else if ((xi)->flags&XkbMapPending) { \
        if (XkbGetMapChanges((d),(xi)->desc, &(xi)->changes)==Success) { \
            LockDisplay((d)); \
            (xi)->changes.changed= 0; \
            UnlockDisplay((d)); \
        } \
    } \
}

#define _XkbNeedModmap(i)    ((!(i)->desc->map)||(!(i)->desc->map->modmap))

        /*
         * mask of the events that the "invisible" XKB support in Xlib needs
         */
#define XKB_XLIB_MAP_MASK (XkbAllClientInfoMask)

        /*
         * Handy helper macros
         */

typedef struct _XkbReadBuffer {
        int      error;
        int      size;
        char    *start;
        char    *data;
} XkbReadBufferRec, *XkbReadBufferPtr;

#define _XkbAlloc(s)            Xmalloc((s))
#define _XkbCalloc(n,s)         Xcalloc((n),(s))
#define _XkbRealloc(o,s)        Xrealloc((o),(s))
#define _XkbTypedAlloc(t)       ((t *)Xmalloc(sizeof(t)))
#define _XkbTypedCalloc(n,t)    ((t *)Xcalloc((n),sizeof(t)))
#define _XkbTypedRealloc(o,n,t) \
        ((o) ? (t *)Xrealloc((o), (n)*sizeof(t)) : _XkbTypedCalloc(n,t))
#define _XkbClearElems(a,f,l,t) bzero(&(a)[f], ((l)-(f)+1) * sizeof(t))
#define _XkbFree(p)             Xfree(p)

_XFUNCPROTOBEGIN

extern  void _XkbReloadDpy(
    Display *           /* dpy */
);

extern KeySym _XKeycodeToKeysym(
    Display *           /* display */,
#if NeedWidePrototypes
    unsigned int        /* keycode */,
#else
    KeyCode             /* keycode */,
#endif
    int                 /* index */
);

extern KeyCode _XKeysymToKeycode(
    Display *           /* display */,
    KeySym              /* keysym */
);

extern KeySym _XLookupKeysym(
    XKeyEvent *         /* key_event */,
    int                 /* index */
);

extern int _XRefreshKeyboardMapping(
    XMappingEvent *     /* event_map */
);

extern unsigned _XKeysymToModifiers(
    Display *           /* dpy */,
    KeySym              /* ks */
);

extern int _XTranslateKey(
    register Display *  /* dpy */,
    KeyCode             /* keycode */,
    register unsigned int /* modifiers */,
    unsigned int *      /* modifiers_return */,
    KeySym *            /* keysym_return */
);

extern int      _XTranslateKeySym(
    Display *           /* dpy */,
    register KeySym     /* symbol */,
    unsigned int        /* modifiers */,
    char *              /* buffer */,
    int                 /* nbytes */
);

extern  int _XLookupString(
    register XKeyEvent *        /* event */,
    char *                      /* buffer */,
    int                         /* nbytes */,
    KeySym *                    /* keysym */,
    XComposeStatus *            /* status */
);

extern void _XkbNoteCoreMapChanges(
    XkbMapChangesRec *          /* old */,
    XMappingEvent *             /* new */,
    unsigned int                /* wanted */
);

extern  int _XkbInitReadBuffer(
    Display *           /* dpy */,
    XkbReadBufferPtr    /* buf */,
    int                 /* size */
);

extern int _XkbSkipReadBufferData(
    XkbReadBufferPtr    /* from */,
    int                 /* size */
);

extern int _XkbCopyFromReadBuffer(
    XkbReadBufferPtr    /* from */,
    char *              /* to */,
    int                 /* size */
);


#ifdef LONG64
extern  int _XkbReadCopyData32(
    int *               /* from */,
    long *              /* to */,
    int                 /* num_words */
);

extern  int _XkbWriteCopyData32(
    unsigned long *     /* from */,
    CARD32 *            /* to */,
    int                 /* num_words */
);

extern int _XkbReadBufferCopy32(
    XkbReadBufferPtr    /* from */,
    long *              /* to */,
    int                 /* size */
);
#else
#define _XkbReadCopyData32(f,t,s)    memcpy((char *)(t), (char *)(f), (s)*4)
#define _XkbWriteCopyData32(f,t,s)   memcpy((char *)(t), (char *)(f), (s)*4)
#define _XkbReadBufferCopy32(f,t,s) _XkbCopyFromReadBuffer(f, (char *)t, (s)*4)
#endif

#ifndef NO_DEC_BINARY_COMPATIBILITY
#define XKB_FORCE_INT_KEYSYM 1
#endif

#ifdef XKB_FORCE_INT_KEYSYM
extern int _XkbReadCopyKeySyms(
    int *               /* from */,
    KeySym *            /* to */,
    int                 /* num_words */
);

extern  int _XkbWriteCopyKeySyms(
    KeySym *            /* from */,
    CARD32 *            /* to */,
    int                 /* num_words */
);

extern int _XkbReadBufferCopyKeySyms(
    XkbReadBufferPtr    /* from */,
#ifndef NO_DEC_BUG_FIX
    KeySym *            /* to */,
#else
    long *              /* to */,
#endif
    int                 /* size */
);
#else
#define _XkbReadCopyKeySyms(f,t,n)              _XkbReadCopyData32(f,t,n)
#define _XkbWriteCopyKeySyms(f,t,n)             _XkbWriteCopyData32(f,t,n)
#define _XkbReadBufferCopyKeySyms(f,t,s)        _XkbReadBufferCopy32(f,t,s)
#endif

extern char *_XkbPeekAtReadBuffer(
    XkbReadBufferPtr    /* from */,
    int                 /*  size */
);

extern char *_XkbGetReadBufferPtr(
    XkbReadBufferPtr    /* from */,
    int                 /* size */
);
#define _XkbGetTypedRdBufPtr(b,n,t) ((t *)_XkbGetReadBufferPtr(b,(n)*SIZEOF(t)))

extern int _XkbFreeReadBuffer(
    XkbReadBufferPtr    /* buf */
);

extern Bool
_XkbGetReadBufferCountedString(
    XkbReadBufferPtr    /* buf */,
    char **             /* rtrn */
);

extern char *_XkbGetCharset(
    void
);

extern int       _XkbGetConverters(
    const char *       /* encoding_name */,
    XkbConverters *    /* cvt_rtrn */
);

#ifdef  NEED_MAP_READERS

extern  Status  _XkbReadGetMapReply(
    Display *           /* dpy */,
    xkbGetMapReply *    /* rep */,
    XkbDescRec *        /* xkb */,
    int *               /* nread_rtrn */
);

extern  Status  _XkbReadGetCompatMapReply(
    Display *                   /* dpy */,
    xkbGetCompatMapReply *      /* rep */,
    XkbDescPtr                  /* xkb */,
    int *                       /* nread_rtrn */
);

extern  Status  _XkbReadGetIndicatorMapReply(
    Display *                   /* dpy */,
    xkbGetIndicatorMapReply *   /* rep */,
    XkbDescPtr                  /* xkb */,
    int *                       /* nread_rtrn */
);

extern  Status  _XkbReadGetNamesReply(
    Display *                   /* dpy */,
    xkbGetNamesReply *          /* rep */,
    XkbDescPtr                  /* xkb */,
    int *                       /* nread_rtrn */
);

extern  Status  _XkbReadGetGeometryReply(
    Display *                   /* dpy */,
    xkbGetGeometryReply *       /* rep */,
    XkbDescPtr                  /* xkb */,
    int *                       /* nread_rtrn */
);

#endif

_XFUNCPROTOEND

#endif /* _XKBLIBINT_H_ */
@


1.4
log
@Update to libX11 1.6RC. No bump needed.
@
text
@d28 1
a28 1
#define	_XKBLIBINT_H_
d33 2
a34 2
#define	XkbMapPending		(1<<0)
#define	XkbXlibNewKeyboard	(1<<1)
d36 13
a48 13
typedef int	(*XkbKSToMBFunc)(
	XPointer	/* priv */,
	KeySym		/* sym */,
	char *		/* buf */,
	int		/* len */,
	int *		/* extra_rtrn */
);

typedef KeySym	(*XkbMBToKSFunc)(
	XPointer	/* priv */,
	char *		/* buf */,
	int		/* len */,
	Status *	/* status */
d51 2
a52 2
typedef KeySym	(*XkbToUpperFunc)(
	KeySym		/* sym */
d56 5
a60 5
	XkbKSToMBFunc	 KSToMB;
	XPointer	 KSToMBPriv;
	XkbMBToKSFunc	 MBToKS;
	XPointer	 MBToKSPriv;
	XkbToUpperFunc	 KSToUpper;
d63 2
a64 2
extern	XkbInternAtomFunc	_XkbInternAtomFunc;
extern	XkbGetAtomNameFunc	_XkbGetAtomNameFunc;
d67 13
a79 13
	unsigned	 flags;
	unsigned	 xlib_ctrls;
	XExtCodes	 *codes;
	int		 srv_major;
	int		 srv_minor;
	unsigned	 selected_events;
	unsigned short	 selected_nkn_details;
	unsigned short	 selected_map_details;
	XkbDescRec	*desc;
	XkbMapChangesRec changes;
	Atom		 composeLED;
	XkbConverters	 cvt;
	XkbConverters	 latin1cvt;
d83 14
a96 14
#define	_XkbUnavailable(d) \
	(((d)->flags&XlibDisplayNoXkb) ||\
	 ((!(d)->xkb_info || (!(d)->xkb_info->desc)) && !_XkbLoadDpy(d)))

#define	_XkbCheckPendingRefresh(d,xi) {\
    if ((xi)->flags&XkbXlibNewKeyboard)\
	_XkbReloadDpy((d));\
    else if ((xi)->flags&XkbMapPending) {\
	if (XkbGetMapChanges((d),(xi)->desc, &(xi)->changes)==Success) {\
	    LockDisplay((d));\
	    (xi)->changes.changed= 0;\
	    UnlockDisplay((d));\
	}\
    }\
d99 1
a99 1
#define	_XkbNeedModmap(i)    ((!(i)->desc->map)||(!(i)->desc->map->modmap))
d101 3
a103 3
	/*
	 * mask of the events that the "invisible" XKB support in Xlib needs
	 */
d106 3
a108 9
	/*
	 * Handy helper macros
	 */
#define	XKB_INSURE_SIZE(f,t,nNum,oNum)	{\
	if ((f)==NULL)	\
	     (f)=(t *)Xmalloc(sizeof(t)*(nNum));\
	else if ((nNum)<(oNum))\
	     (f)=(t *)Xrealloc((f),sizeof(t)*(nNum));\
	}
d111 15
a125 15
	int	 error;
	int	 size;
	char	*start;
	char	*data;
} XkbReadBufferRec,*XkbReadBufferPtr;

#define	_XkbAlloc(s)		Xmalloc((s))
#define	_XkbCalloc(n,s)		Xcalloc((n),(s))
#define	_XkbRealloc(o,s)	Xrealloc((o),(s))
#define	_XkbTypedAlloc(t)	((t *)Xmalloc(sizeof(t)))
#define	_XkbTypedCalloc(n,t)	((t *)Xcalloc((n),sizeof(t)))
#define	_XkbTypedRealloc(o,n,t) \
	((o)?(t *)Xrealloc((o),(n)*sizeof(t)):_XkbTypedCalloc(n,t))
#define	_XkbClearElems(a,f,l,t)	bzero(&(a)[f],((l)-(f)+1)*sizeof(t))
#define	_XkbFree(p)		Xfree(p)
d129 2
a130 2
extern	void _XkbReloadDpy(
    Display *		/* dpy */
d134 1
a134 1
    Display*		/* display */,
d136 1
a136 1
    unsigned int	/* keycode */,
d138 1
a138 1
    KeyCode		/* keycode */,
d140 1
a140 1
    int			/* index */
d144 2
a145 2
    Display*		/* display */,
    KeySym		/* keysym */
d149 2
a150 2
    XKeyEvent*		/* key_event */,
    int			/* index */
d154 1
a154 1
    XMappingEvent*	/* event_map */
d157 3
a159 3
extern unsigned	_XKeysymToModifiers(
    Display *		/* dpy */,
    KeySym 		/* ks */
d163 2
a164 2
    register Display *	/* dpy */,
    KeyCode 		/* keycode */,
d166 2
a167 2
    unsigned int *	/* modifiers_return */,
    KeySym *		/* keysym_return */
d170 14
a183 14
extern int	_XTranslateKeySym(
    Display *		/* dpy */,
    register KeySym 	/* symbol */,
    unsigned int 	/* modifiers */,
    char *		/* buffer */,
    int 		/* nbytes */
);

extern	int _XLookupString(
    register XKeyEvent *	/* event */,
    char *			/* buffer */,
    int 			/* nbytes */,
    KeySym *			/* keysym */,
    XComposeStatus *		/* status */
d187 3
a189 3
    XkbMapChangesRec * 		/* old */,
    XMappingEvent * 		/* new */,
    unsigned int 		/* wanted */
d192 4
a195 4
extern	int _XkbInitReadBuffer(
    Display *		/* dpy */,
    XkbReadBufferPtr	/* buf */,
    int			/* size */
d199 2
a200 2
    XkbReadBufferPtr	/* from */,
    int			/* size */
d204 3
a206 3
    XkbReadBufferPtr	/* from */,
    char *		/* to */,
    int			/* size */
d211 4
a214 4
extern	int _XkbReadCopyData32(
    int *		/* from */,
    long *		/* to */,
    int			/* num_words */
d217 4
a220 4
extern	int _XkbWriteCopyData32(
    unsigned long *	/* from */,
    CARD32 *		/* to */,
    int			/* num_words */
d224 3
a226 3
    XkbReadBufferPtr	/* from */,
    long *		/* to */,
    int			/* size */
d229 3
a231 3
#define	_XkbReadCopyData32(f,t,s)    memcpy((char *)(t),(char *)(f),(s)*4)
#define	_XkbWriteCopyData32(f,t,s)   memcpy((char *)(t),(char *)(f),(s)*4)
#define	_XkbReadBufferCopy32(f,t,s) _XkbCopyFromReadBuffer(f,(char *)t,(s)*4)
d240 3
a242 3
    int *		/* from */,
    KeySym *		/* to */,
    int			/* num_words */
d245 4
a248 4
extern	int _XkbWriteCopyKeySyms(
    KeySym *		/* from */,
    CARD32 *		/* to */,
    int			/* num_words */
d252 1
a252 1
    XkbReadBufferPtr	/* from */,
d254 1
a254 1
    KeySym *		/* to */,
d256 1
a256 1
    long *		/* to */,
d258 1
a258 1
    int			/* size */
d261 3
a263 3
#define	_XkbReadCopyKeySyms(f,t,n)		_XkbReadCopyData32(f,t,n)
#define	_XkbWriteCopyKeySyms(f,t,n)		_XkbWriteCopyData32(f,t,n)
#define	_XkbReadBufferCopyKeySyms(f,t,s)	_XkbReadBufferCopy32(f,t,s)
d267 2
a268 2
    XkbReadBufferPtr	/* from */,
    int			/*  size */
d272 2
a273 2
    XkbReadBufferPtr	/* from */,
    int			/* size */
d275 1
a275 1
#define	_XkbGetTypedRdBufPtr(b,n,t) ((t *)_XkbGetReadBufferPtr(b,(n)*SIZEOF(t)))
d278 1
a278 1
    XkbReadBufferPtr	/* buf */
d283 2
a284 2
    XkbReadBufferPtr	/* buf */,
    char **		/* rtrn */
d287 1
a287 1
extern char	*_XkbGetCharset(
d291 1
a291 1
extern int	 _XkbGetConverters(
d296 1
a296 1
#ifdef	NEED_MAP_READERS
d298 5
a302 5
extern	Status	_XkbReadGetMapReply(
    Display *		/* dpy */,
    xkbGetMapReply * 	/* rep */,
    XkbDescRec *	/* xkb */,
    int *		/* nread_rtrn */
d305 5
a309 5
extern	Status	_XkbReadGetCompatMapReply(
    Display *			/* dpy */,
    xkbGetCompatMapReply *	/* rep */,
    XkbDescPtr			/* xkb */,
    int	*			/* nread_rtrn */
d312 5
a316 5
extern	Status	_XkbReadGetIndicatorMapReply(
    Display *			/* dpy */,
    xkbGetIndicatorMapReply *	/* rep */,
    XkbDescPtr			/* xkb */,
    int	*			/* nread_rtrn */
d319 5
a323 5
extern	Status	_XkbReadGetNamesReply(
    Display *			/* dpy */,
    xkbGetNamesReply *		/* rep */,
    XkbDescPtr 			/* xkb */,
    int *			/* nread_rtrn */
d326 5
a330 5
extern	Status	_XkbReadGetGeometryReply(
    Display *			/* dpy */,
    xkbGetGeometryReply *	/* rep */,
    XkbDescPtr 			/* xkb */,
    int *			/* nread_rtrn */
@


1.3
log
@Update to libX11 1.3.3. Tested on a bulk ports build by naddy@@.
@
text
@d216 1
a216 1
#if defined(WORD64) || defined(LONG64)
@


1.2
log
@update to libX11 1.2.1
@
text
@a0 1
/* $Xorg: XKBlibint.h,v 1.3 2000/08/17 19:45:04 cpqbld Exp $ */
a25 1
/* $XFree86: xc/lib/X11/XKBlibint.h,v 3.5 2003/04/18 18:21:45 torrey Exp $ */
@


1.1
log
@Initial revision
@
text
@d10 2
a11 2
documentation, and that the name of Silicon Graphics not be 
used in advertising or publicity pertaining to distribution 
d13 1
a13 1
Silicon Graphics makes no representation about the suitability 
d17 2
a18 2
SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d20 3
a22 3
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
d109 1
a109 1
	 * Handy helper macros 
d162 1
a162 1
    XMappingEvent*	/* event_map */    
d170 1
a170 1
extern int _XTranslateKey(	
d300 2
a301 2
    char *		/* encoding_name */,
    XkbConverters *	/* cvt_rtrn */
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@libX11 1.1.3
@
text
@d300 2
a301 2
    const char *       /* encoding_name */,
    XkbConverters *    /* cvt_rtrn */
@

