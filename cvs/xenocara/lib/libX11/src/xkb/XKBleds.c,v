head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.12
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.10
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.8
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_1_3:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_1_1:1.1.1.1
	v1_0_99_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.09.28.17.03.22;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.05.30.19.19.38;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.18.19.37.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.03.12.59.11;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.16.37.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.37.34;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to libX11 1.6.2. No API change.
@
text
@/************************************************************
Copyright (c) 1993 by Silicon Graphics Computer Systems, Inc.

Permission to use, copy, modify, and distribute this
software and its documentation for any purpose and without
fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting
documentation, and that the name of Silicon Graphics not be
used in advertising or publicity pertaining to distribution
of the software without specific prior written permission.
Silicon Graphics makes no representation about the suitability
of this software for any purpose. It is provided "as is"
without any express or implied warranty.

SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
THE USE OR PERFORMANCE OF THIS SOFTWARE.

********************************************************/

#define NEED_MAP_READERS
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include "Xlibint.h"
#include <X11/extensions/XKBproto.h>
#include "XKBlibint.h"

Status
XkbGetIndicatorState(Display *dpy, unsigned deviceSpec, unsigned *pStateRtrn)
{
    register xkbGetIndicatorStateReq *req;
    xkbGetIndicatorStateReply rep;
    XkbInfoPtr xkbi;
    Bool ok;

    if ((dpy->flags & XlibDisplayNoXkb) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return BadAccess;
    LockDisplay(dpy);
    xkbi = dpy->xkb_info;
    GetReq(kbGetIndicatorState, req);
    req->reqType = xkbi->codes->major_opcode;
    req->xkbReqType = X_kbGetIndicatorState;
    req->deviceSpec = deviceSpec;
    ok = _XReply(dpy, (xReply *) &rep, 0, xFalse);
    if (ok && (pStateRtrn != NULL))
        *pStateRtrn = rep.state;
    UnlockDisplay(dpy);
    SyncHandle();
    return (ok ? Success : BadImplementation);
}

Status
_XkbReadGetIndicatorMapReply(Display *dpy,
                             xkbGetIndicatorMapReply *rep,
                             XkbDescPtr xkb,
                             int *nread_rtrn)
{
    XkbIndicatorPtr leds;
    XkbReadBufferRec buf;

    if ((!xkb->indicators) && (XkbAllocIndicatorMaps(xkb) != Success))
        return BadAlloc;
    leds = xkb->indicators;

    leds->phys_indicators = rep->realIndicators;
    if (rep->length > 0) {
        register int left;

        if (!_XkbInitReadBuffer(dpy, &buf, (int) rep->length * 4))
            return BadAlloc;
        if (nread_rtrn)
            *nread_rtrn = (int) rep->length * 4;
        if (rep->which) {
            register int i, bit;

            left = (int) rep->which;
            for (i = 0, bit = 1; (i < XkbNumIndicators) && (left);
                 i++, bit <<= 1) {
                if (left & bit) {
                    xkbIndicatorMapWireDesc *wire;

                    wire = (xkbIndicatorMapWireDesc *)
                        _XkbGetReadBufferPtr(&buf,
                                             SIZEOF(xkbIndicatorMapWireDesc));
                    if (wire == NULL) {
                        _XkbFreeReadBuffer(&buf);
                        return BadAlloc;
                    }
                    leds->maps[i].flags = wire->flags;
                    leds->maps[i].which_groups = wire->whichGroups;
                    leds->maps[i].groups = wire->groups;
                    leds->maps[i].which_mods = wire->whichMods;
                    leds->maps[i].mods.mask = wire->mods;
                    leds->maps[i].mods.real_mods = wire->realMods;
                    leds->maps[i].mods.vmods = wire->virtualMods;
                    leds->maps[i].ctrls = wire->ctrls;
                    left &= ~bit;
                }
            }
        }
        left = _XkbFreeReadBuffer(&buf);
    }
    return Success;
}

Bool
XkbGetIndicatorMap(Display *dpy, unsigned long which, XkbDescPtr xkb)
{
    register xkbGetIndicatorMapReq *req;
    xkbGetIndicatorMapReply rep;
    XkbInfoPtr xkbi;
    Status status;

    if ((dpy->flags & XlibDisplayNoXkb) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return BadAccess;
    if ((!which) || (!xkb))
        return BadValue;

    LockDisplay(dpy);
    xkbi = dpy->xkb_info;
    if (!xkb->indicators) {
        xkb->indicators = _XkbTypedCalloc(1, XkbIndicatorRec);
        if (!xkb->indicators) {
            UnlockDisplay(dpy);
            SyncHandle();
            return BadAlloc;
        }
    }
    GetReq(kbGetIndicatorMap, req);
    req->reqType = xkbi->codes->major_opcode;
    req->xkbReqType = X_kbGetIndicatorMap;
    req->deviceSpec = xkb->device_spec;
    req->which = (CARD32) which;
    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
        UnlockDisplay(dpy);
        SyncHandle();
        return BadValue;
    }
    status = _XkbReadGetIndicatorMapReply(dpy, &rep, xkb, NULL);
    UnlockDisplay(dpy);
    SyncHandle();
    return status;
}

Bool
XkbSetIndicatorMap(Display *dpy, unsigned long which, XkbDescPtr xkb)
{
    register xkbSetIndicatorMapReq *req;
    register int i, bit;
    int nMaps;
    xkbIndicatorMapWireDesc *wire;
    XkbInfoPtr xkbi;

    if ((dpy->flags & XlibDisplayNoXkb) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return False;
    if ((!xkb) || (!which) || (!xkb->indicators))
        return False;
    LockDisplay(dpy);
    xkbi = dpy->xkb_info;
    GetReq(kbSetIndicatorMap, req);
    req->reqType = xkbi->codes->major_opcode;
    req->xkbReqType = X_kbSetIndicatorMap;
    req->deviceSpec = xkb->device_spec;
    req->which = (CARD32) which;
    for (i = nMaps = 0, bit = 1; i < 32; i++, bit <<= 1) {
        if (which & bit)
            nMaps++;
    }
    req->length += (nMaps * sizeof(XkbIndicatorMapRec)) / 4;
    BufAlloc(xkbIndicatorMapWireDesc *, wire,
             (nMaps * SIZEOF(xkbIndicatorMapWireDesc)));
    for (i = 0, bit = 1; i < 32; i++, bit <<= 1) {
        if (which & bit) {
            wire->flags = xkb->indicators->maps[i].flags;
            wire->whichGroups = xkb->indicators->maps[i].which_groups;
            wire->groups = xkb->indicators->maps[i].groups;
            wire->whichMods = xkb->indicators->maps[i].which_mods;
            wire->mods = xkb->indicators->maps[i].mods.real_mods;
            wire->virtualMods = xkb->indicators->maps[i].mods.vmods;
            wire->ctrls = xkb->indicators->maps[i].ctrls;
            wire++;
        }
    }
    UnlockDisplay(dpy);
    SyncHandle();
    return True;
}

Bool
XkbGetNamedDeviceIndicator(Display *dpy,
                           unsigned device,
                           unsigned class,
                           unsigned id,
                           Atom name,
                           int *pNdxRtrn,
                           Bool *pStateRtrn,
                           XkbIndicatorMapPtr pMapRtrn,
                           Bool *pRealRtrn)
{
    register xkbGetNamedIndicatorReq *req;
    xkbGetNamedIndicatorReply rep;
    XkbInfoPtr xkbi;

    if ((dpy->flags & XlibDisplayNoXkb) || (name == None) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return False;
    LockDisplay(dpy);
    xkbi = dpy->xkb_info;
    GetReq(kbGetNamedIndicator, req);
    req->reqType = xkbi->codes->major_opcode;
    req->xkbReqType = X_kbGetNamedIndicator;
    req->deviceSpec = device;
    req->ledClass = class;
    req->ledID = id;
    req->indicator = (CARD32) name;
    if (!_XReply(dpy, (xReply *) &rep, 0, xFalse)) {
        UnlockDisplay(dpy);
        SyncHandle();
        return False;
    }
    UnlockDisplay(dpy);
    SyncHandle();
    if ((!rep.found) || (!rep.supported))
        return False;
    if (pNdxRtrn != NULL)
        *pNdxRtrn = rep.ndx;
    if (pStateRtrn != NULL)
        *pStateRtrn = rep.on;
    if (pMapRtrn != NULL) {
        pMapRtrn->flags = rep.flags;
        pMapRtrn->which_groups = rep.whichGroups;
        pMapRtrn->groups = rep.groups;
        pMapRtrn->which_mods = rep.whichMods;
        pMapRtrn->mods.mask = rep.mods;
        pMapRtrn->mods.real_mods = rep.realMods;
        pMapRtrn->mods.vmods = rep.virtualMods;
        pMapRtrn->ctrls = rep.ctrls;
    }
    if (pRealRtrn != NULL)
        *pRealRtrn = rep.realIndicator;
    return True;
}

Bool
XkbGetNamedIndicator(Display *dpy,
                     Atom name,
                     int *pNdxRtrn,
                     Bool *pStateRtrn,
                     XkbIndicatorMapPtr pMapRtrn,
                     Bool *pRealRtrn)
{
    return XkbGetNamedDeviceIndicator(dpy, XkbUseCoreKbd,
                                      XkbDfltXIClass, XkbDfltXIId,
                                      name, pNdxRtrn, pStateRtrn,
                                      pMapRtrn, pRealRtrn);
}

Bool
XkbSetNamedDeviceIndicator(Display *dpy,
                           unsigned device,
                           unsigned class,
                           unsigned id,
                           Atom name,
                           Bool changeState,
                           Bool state,
                           Bool createNewMap,
                           XkbIndicatorMapPtr pMap)
{
    register xkbSetNamedIndicatorReq *req;
    XkbInfoPtr xkbi;

    if ((dpy->flags & XlibDisplayNoXkb) || (name == None) ||
        (!dpy->xkb_info && !XkbUseExtension(dpy, NULL, NULL)))
        return False;
    LockDisplay(dpy);
    xkbi = dpy->xkb_info;
    GetReq(kbSetNamedIndicator, req);
    req->reqType = xkbi->codes->major_opcode;
    req->xkbReqType = X_kbSetNamedIndicator;
    req->deviceSpec = device;
    req->ledClass = class;
    req->ledID = id;
    req->indicator = (CARD32) name;
    req->setState = changeState;
    if (req->setState)
        req->on = state;
    else
        req->on = False;
    if (pMap != NULL) {
        req->setMap = True;
        req->createMap = createNewMap;
        req->flags = pMap->flags;
        req->whichGroups = pMap->which_groups;
        req->groups = pMap->groups;
        req->whichMods = pMap->which_mods;
        req->realMods = pMap->mods.real_mods;
        req->virtualMods = pMap->mods.vmods;
        req->ctrls = pMap->ctrls;
    }
    else {
        req->setMap = False;
        req->createMap = False;
        req->flags = 0;
        req->whichGroups = 0;
        req->groups = 0;
        req->whichMods = 0;
        req->realMods = 0;
        req->virtualMods = 0;
        req->ctrls = 0;
    }
    UnlockDisplay(dpy);
    SyncHandle();
    return True;
}

Bool
XkbSetNamedIndicator(Display *dpy,
                     Atom name,
                     Bool changeState,
                     Bool state,
                     Bool createNewMap,
                     XkbIndicatorMapPtr pMap)
{
    return XkbSetNamedDeviceIndicator(dpy, XkbUseCoreKbd,
                                      XkbDfltXIClass, XkbDfltXIId,
                                      name, changeState, state,
                                      createNewMap, pMap);
}
@


1.4
log
@Update to libx11 1.4.2. Tested by ajacoutot@@, jasper@@ krw@@, landry@@,
shadchin@@ on various architectures.
Bump major.
@
text
@d36 1
a36 1
XkbGetIndicatorState(Display *dpy,unsigned deviceSpec,unsigned *pStateRtrn)
d39 1
a39 1
    xkbGetIndicatorStateReply	rep;
d44 2
a45 2
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)))
	return BadAccess;
d52 3
a54 3
    ok=_XReply(dpy, (xReply *)&rep, 0, xFalse);
    if (ok && (pStateRtrn!=NULL))
	*pStateRtrn= rep.state;
d57 1
a57 1
    return (ok?Success:BadImplementation);
d61 4
a64 4
_XkbReadGetIndicatorMapReply(	Display *			dpy,
				xkbGetIndicatorMapReply *	rep,
				XkbDescPtr			xkb,
				int	*			nread_rtrn)
d66 2
a67 2
XkbIndicatorPtr		leds;
XkbReadBufferRec	buf;
d69 3
a71 3
    if ((!xkb->indicators)&&(XkbAllocIndicatorMaps(xkb)!=Success))
	return BadAlloc;
    leds= xkb->indicators;
d74 36
a109 32
    if (rep->length>0) {
	register int left;
	if (!_XkbInitReadBuffer(dpy,&buf,(int)rep->length*4))
	    return BadAlloc;
	if (nread_rtrn)
	    *nread_rtrn= (int)rep->length*4;
	if (rep->which) {
	    register int i,bit;
	    left= (int)rep->which;
	    for (i=0,bit=1;(i<XkbNumIndicators)&&(left);i++,bit<<=1) {
		if (left&bit) {
		    xkbIndicatorMapWireDesc *wire;
		    wire= (xkbIndicatorMapWireDesc *)
			  _XkbGetReadBufferPtr(&buf,
					SIZEOF(xkbIndicatorMapWireDesc));
		    if (wire==NULL) {
			_XkbFreeReadBuffer(&buf);
			return BadAlloc;
		    }
		    leds->maps[i].flags= wire->flags;
		    leds->maps[i].which_groups= wire->whichGroups;
		    leds->maps[i].groups= wire->groups;
		    leds->maps[i].which_mods= wire->whichMods;
		    leds->maps[i].mods.mask= wire->mods;
		    leds->maps[i].mods.real_mods= wire->realMods;
		    leds->maps[i].mods.vmods= wire->virtualMods;
		    leds->maps[i].ctrls= wire->ctrls;
		    left&= ~bit;
		}
	    }
	}
	left= _XkbFreeReadBuffer(&buf);
d115 1
a115 1
XkbGetIndicatorMap(Display *dpy,unsigned long which,XkbDescPtr xkb)
d117 4
a120 4
    register xkbGetIndicatorMapReq *	req;
    xkbGetIndicatorMapReply 		rep;
    XkbInfoPtr 				xkbi;
    Status				status;
d123 4
a126 4
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)))
	return BadAccess;
    if ((!which)||(!xkb))
	return BadValue;
d131 6
a136 6
	xkb->indicators = _XkbTypedCalloc(1,XkbIndicatorRec);
	if (!xkb->indicators) {
	    UnlockDisplay(dpy);
	    SyncHandle();
	    return BadAlloc;
	}
d142 5
a146 5
    req->which = (CARD32)which;
    if (!_XReply(dpy, (xReply *)&rep, 0, xFalse)) {
	UnlockDisplay(dpy);
	SyncHandle();
	return BadValue;
d148 1
a148 1
    status= _XkbReadGetIndicatorMapReply(dpy,&rep,xkb,NULL);
d155 1
a155 1
XkbSetIndicatorMap(Display *dpy,unsigned long which,XkbDescPtr xkb)
d157 2
a158 2
    register xkbSetIndicatorMapReq	*req;
    register int i,bit;
d164 4
a167 4
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)))
	return False;
    if ((!xkb)||(!which)||(!xkb->indicators))
	return False;
d174 4
a177 4
    req->which = (CARD32)which;
    for (i=nMaps=0,bit=1;i<32;i++,bit<<=1) {
	if (which&bit)
	    nMaps++;
d179 14
a192 14
    req->length+= (nMaps*sizeof(XkbIndicatorMapRec))/4;
    BufAlloc(xkbIndicatorMapWireDesc *,wire,
				       (nMaps*SIZEOF(xkbIndicatorMapWireDesc)));
    for (i=0,bit=1;i<32;i++,bit<<=1) {
	if (which&bit) {
	    wire->flags= xkb->indicators->maps[i].flags;
	    wire->whichGroups= xkb->indicators->maps[i].which_groups;
	    wire->groups= xkb->indicators->maps[i].groups;
	    wire->whichMods= xkb->indicators->maps[i].which_mods;
	    wire->mods= xkb->indicators->maps[i].mods.real_mods;
	    wire->virtualMods= xkb->indicators->maps[i].mods.vmods;
	    wire->ctrls= xkb->indicators->maps[i].ctrls;
	    wire++;
	}
d200 9
a208 9
XkbGetNamedDeviceIndicator(	Display *		dpy,
				unsigned		device,
				unsigned		class,
				unsigned		id,
				Atom			name,
				int	*		pNdxRtrn,
    				Bool *			pStateRtrn,
				XkbIndicatorMapPtr	pMapRtrn,
				Bool *			pRealRtrn)
d211 1
a211 1
    xkbGetNamedIndicatorReply	rep;
d214 3
a216 3
    if ((dpy->flags & XlibDisplayNoXkb) || (name==None) ||
	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)))
	return False;
d225 5
a229 5
    req->indicator = (CARD32)name;
    if (!_XReply(dpy, (xReply *)&rep, 0, xFalse)) {
	UnlockDisplay(dpy);
	SyncHandle();
	return False;
d233 15
a247 15
    if ((!rep.found)||(!rep.supported))
	return False;
    if (pNdxRtrn!=NULL)
	*pNdxRtrn= rep.ndx;
    if (pStateRtrn!=NULL)
	*pStateRtrn= rep.on;
    if (pMapRtrn!=NULL) {
	pMapRtrn->flags= rep.flags;
	pMapRtrn->which_groups= rep.whichGroups;
	pMapRtrn->groups= rep.groups;
	pMapRtrn->which_mods= rep.whichMods;
	pMapRtrn->mods.mask= rep.mods;
	pMapRtrn->mods.real_mods= rep.realMods;
	pMapRtrn->mods.vmods= rep.virtualMods;
	pMapRtrn->ctrls= rep.ctrls;
d249 2
a250 2
    if (pRealRtrn!=NULL)
	*pRealRtrn= rep.realIndicator;
d255 6
a260 6
XkbGetNamedIndicator(	Display *		dpy,
			Atom			name,
			int	*		pNdxRtrn,
    			Bool *			pStateRtrn,
			XkbIndicatorMapPtr	pMapRtrn,
			Bool *			pRealRtrn)
d262 4
a265 4
    return XkbGetNamedDeviceIndicator(dpy,XkbUseCoreKbd,
					  XkbDfltXIClass,XkbDfltXIId,
					  name,pNdxRtrn,pStateRtrn,
					  pMapRtrn,pRealRtrn);
d269 9
a277 9
XkbSetNamedDeviceIndicator(	Display *		dpy,
				unsigned		device,
				unsigned		class,
				unsigned		id,
				Atom			name,
				Bool			changeState,
				Bool			state,
				Bool			createNewMap,
				XkbIndicatorMapPtr	pMap)
d279 1
a279 1
    register xkbSetNamedIndicatorReq	*req;
d282 3
a284 3
    if ((dpy->flags & XlibDisplayNoXkb) || (name==None) ||
 	(!dpy->xkb_info && !XkbUseExtension(dpy,NULL,NULL)))
	return False;
d293 2
a294 2
    req->indicator= (CARD32)name;
    req->setState= changeState;
d296 13
a308 12
	 req->on= state;
    else req->on= False;
    if (pMap!=NULL) {
	req->setMap= True;
	req->createMap= createNewMap;
	req->flags= pMap->flags;
	req->whichGroups= pMap->which_groups;
	req->groups= pMap->groups;
	req->whichMods= pMap->which_mods;
	req->realMods= pMap->mods.real_mods;
	req->virtualMods= pMap->mods.vmods;
	req->ctrls= pMap->ctrls;
d311 9
a319 9
	req->setMap= 		False;
	req->createMap= 	False;
	req->flags= 		0;
	req->whichGroups= 	0;
	req->groups= 		0;
	req->whichMods= 	0;
	req->realMods= 		0;
	req->virtualMods= 	0;
	req->ctrls=		0;
d327 6
a332 6
XkbSetNamedIndicator(	Display *		dpy,
			Atom			name,
			Bool			changeState,
			Bool			state,
			Bool			createNewMap,
			XkbIndicatorMapPtr	pMap)
d334 4
a337 4
    return XkbSetNamedDeviceIndicator(dpy,XkbUseCoreKbd,
					  XkbDfltXIClass,XkbDfltXIId,
					  name,changeState,state,
					  createNewMap,pMap);
@


1.3
log
@Update to libX11 1.3.3. Tested on a bulk ports build by naddy@@.
@
text
@a26 2
#define NEED_REPLIES
#define NEED_EVENTS
@


1.2
log
@update to libX11 1.2.1
@
text
@a0 1
/* $Xorg: XKBleds.c,v 1.3 2000/08/17 19:45:03 cpqbld Exp $ */
a25 1
/* $XFree86: xc/lib/X11/XKBleds.c,v 1.4 2003/04/13 19:22:18 dawes Exp $ */
@


1.1
log
@Initial revision
@
text
@d10 2
a11 2
documentation, and that the name of Silicon Graphics not be 
used in advertising or publicity pertaining to distribution 
d13 1
a13 1
Silicon Graphics makes no representation about the suitability 
d17 2
a18 2
SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d20 3
a22 3
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
d46 1
a46 1
    
d64 1
a64 1
Status	
d213 1
a213 1
    
d249 1
a249 1
    if (pRealRtrn!=NULL) 
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@
