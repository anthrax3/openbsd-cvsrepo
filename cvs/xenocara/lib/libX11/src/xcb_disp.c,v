head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.26
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.24
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.22
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.20
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.18
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.16
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.14
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.12
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_1_3:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_1_1:1.1.1.1
	v1_0_99_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2011.05.30.19.19.38;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.04.10.33.18;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.03.12.59.11;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.20.55.44;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.16.37.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.37.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to libx11 1.4.2. Tested by ajacoutot@@, jasper@@ krw@@, landry@@,
shadchin@@ on various architectures.
Bump major.
@
text
@/* Copyright (C) 2003-2006 Jamey Sharp, Josh Triplett
 * This file is licensed under the MIT license. See the file COPYING. */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include "Xlibint.h"
#include "Xxcbint.h"
#include <xcb/xcbext.h>
#include <X11/Xatom.h>
#include <X11/Xresource.h>
#include <stdio.h>

static xcb_auth_info_t xauth;

static void *alloc_copy(const void *src, int *dstn, size_t n)
{
	void *dst;
	if(n <= 0)
	{
		*dstn = 0;
		return NULL;
	}
	dst = Xmalloc(n);
	if(!dst)
		return NULL;
	memcpy(dst, src, n);
	*dstn = n;
	return dst;
}

void XSetAuthorization(char *name, int namelen, char *data, int datalen)
{
	_XLockMutex(_Xglobal_lock);
	Xfree(xauth.name);
	Xfree(xauth.data);

	/* if either of these allocs fail, _XConnectXCB won't use this auth
	 * data, so we don't need to check it here. */
	xauth.name = alloc_copy(name, &xauth.namelen, namelen);
	xauth.data = alloc_copy(data, &xauth.datalen, datalen);

#if 0 /* but, for the paranoid among us: */
	if((namelen > 0 && !xauth.name) || (datalen > 0 && !xauth.data))
	{
		Xfree(xauth.name);
		Xfree(xauth.data);
		xauth.name = xauth.data = 0;
		xauth.namelen = xauth.datalen = 0;
	}
#endif

	_XUnlockMutex(_Xglobal_lock);
}

int _XConnectXCB(Display *dpy, _Xconst char *display, int *screenp)
{
	char *host;
	int n = 0;
	xcb_connection_t *c;

	dpy->fd = -1;

	dpy->xcb = Xcalloc(1, sizeof(_X11XCBPrivate));
	if(!dpy->xcb)
		return 0;

	if(!xcb_parse_display(display, &host, &n, screenp))
		return 0;
	/* host and n are unused, but xcb_parse_display requires them */
	free(host);

	_XLockMutex(_Xglobal_lock);
	if(xauth.name && xauth.data)
		c = xcb_connect_to_display_with_auth_info(display, &xauth, NULL);
	else
		c = xcb_connect(display, NULL);
	_XUnlockMutex(_Xglobal_lock);

	dpy->fd = xcb_get_file_descriptor(c);

	dpy->xcb->connection = c;
	dpy->xcb->next_xid = xcb_generate_id(dpy->xcb->connection);

	dpy->xcb->event_notify = xcondition_malloc();
	dpy->xcb->reply_notify = xcondition_malloc();
	if (!dpy->xcb->event_notify || !dpy->xcb->reply_notify)
		return 0;
	xcondition_init(dpy->xcb->event_notify);
	xcondition_init(dpy->xcb->reply_notify);
	return !xcb_connection_has_error(c);
}

void _XFreeX11XCBStructure(Display *dpy)
{
	/* reply_data was allocated by system malloc, not Xmalloc */
	free(dpy->xcb->reply_data);
	while(dpy->xcb->pending_requests)
	{
		PendingRequest *tmp = dpy->xcb->pending_requests;
		dpy->xcb->pending_requests = tmp->next;
		free(tmp);
	}
	xcondition_free(dpy->xcb->event_notify);
	xcondition_free(dpy->xcb->reply_notify);
	Xfree(dpy->xcb);
}
@


1.4
log
@Update to libX11 1.3.5
@
text
@d57 1
a57 1
int _XConnectXCB(Display *dpy, _Xconst char *display, char **fullnamep, int *screenp)
a60 1
	int len;
d71 1
a71 14

	len = strlen(host) + (1 + 20 + 1 + 20 + 1);
	*fullnamep = Xmalloc(len);
	if (!*fullnamep) {
		free(host);
		return 0;
	}

#ifdef HAVE_LAUNCHD
	if(strncmp(host, "/tmp/launch", 11) == 0)
		snprintf(*fullnamep, len, "%s:%d", host, n);
	else
#endif
		snprintf(*fullnamep, len, "%s:%d.%d", host, n, *screenp);
@


1.3
log
@update to libX11 1.2.1
@
text
@d4 4
d70 10
d81 3
a83 5
	if(!display || !*display) display = getenv("DISPLAY");

	if(display && strlen(display)>11 && !strncmp(display, "/tmp/launch", 11)) {
		/* do nothing -- the magic happens inside of xcb_connect */
	} else
a84 11
	{
		if(!xcb_parse_display(display, &host, &n, screenp))
			return 0;

		len = strlen(host) + (1 + 20 + 1 + 20 + 1);
		*fullnamep = Xmalloc(len);
		if (!*fullnamep) {
			free(host);
			return 0;
		}

d86 1
a86 2
		free(host);
	}
a97 1
	dpy->xcb->pending_requests_tail = &dpy->xcb->pending_requests;
d101 2
a102 1
	if (!dpy->xcb->event_notify)
d105 1
d120 1
@


1.2
log
@Update to libX11 1.1.4. I've carefully checked that there's no API/ABI
change in this version. Only small bug fixes, manual page fixes and
some more data in the i18n tables.
@
text
@d19 1
a19 1
		return 0;
d23 1
a23 1
		return 0;
d68 1
a68 1
	
d79 5
d90 1
a90 1
		c = xcb_connect_to_display_with_auth_info(display, &xauth, 0);
d92 1
a92 1
		c = xcb_connect(display, 0);
d101 4
d118 1
@


1.1
log
@Initial revision
@
text
@d66 10
a75 2
	if(!xcb_parse_display(display, &host, &n, screenp))
		return 0;
d77 5
a81 4
	len = strlen(host) + (1 + 20 + 1 + 20 + 1);
	*fullnamep = Xmalloc(len);
	snprintf(*fullnamep, len, "%s:%d.%d", host, n, *screenp);
	free(host);
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@
