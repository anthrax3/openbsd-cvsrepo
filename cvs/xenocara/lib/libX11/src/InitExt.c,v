head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.10
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.8
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.2
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_1_3:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_1_1:1.1.1.1
	v1_0_99_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.04.06.20.57.59;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	L5f7tv2EiGjtzoSu;

1.6
date	2013.09.28.17.03.19;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2013.05.31.21.17.11;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.08.27.15.34.15;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.05.18.19.37.35;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.03.12.59.11;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.16.37.19;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.37.19;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.30.10.12.50;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@update to libX11 1.6.3
@
text
@/*

Copyright 1987, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.

*/

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <X11/Xlibint.h>
#include <X11/Xos.h>
#include <stdio.h>

/*
 * This routine is used to link a extension in so it will be called
 * at appropriate times.
 */

XExtCodes *XInitExtension (
	Display *dpy,
	_Xconst char *name)
{
	XExtCodes codes;	/* temp. place for extension information. */
	register _XExtension *ext;/* need a place to build it all */
	if (!XQueryExtension(dpy, name,
		&codes.major_opcode, &codes.first_event,
		&codes.first_error)) return (NULL);

	LockDisplay (dpy);
	if (! (ext = Xcalloc (1, sizeof (_XExtension))) ||
	    ! (ext->name = strdup(name))) {
	    Xfree(ext);
	    UnlockDisplay(dpy);
	    return (XExtCodes *) NULL;
	}
	codes.extension = dpy->ext_number++;
	ext->codes = codes;

	/* chain it onto the display list */
	ext->next = dpy->ext_procs;
	dpy->ext_procs = ext;
	UnlockDisplay (dpy);

	return (&ext->codes);		/* tell him which extension */
}

XExtCodes *XAddExtension (Display *dpy)
{
    register _XExtension *ext;

    LockDisplay (dpy);
    if (! (ext = Xcalloc (1, sizeof (_XExtension)))) {
	UnlockDisplay(dpy);
	return (XExtCodes *) NULL;
    }
    ext->codes.extension = dpy->ext_number++;

    /* chain it onto the display list */
    ext->next = dpy->ext_procs;
    dpy->ext_procs = ext;
    UnlockDisplay (dpy);

    return (&ext->codes);		/* tell him which extension */
}

static _XExtension *XLookupExtension (
	register Display *dpy,	/* display */
	register int extension)	/* extension number */
{
	register _XExtension *ext;
	for (ext = dpy->ext_procs; ext; ext = ext->next)
	    if (ext->codes.extension == extension) return (ext);
	return (NULL);
}

XExtData **XEHeadOfExtensionList(XEDataObject object)
{
    return *(XExtData ***)&object;
}

int
XAddToExtensionList(
    XExtData **structure,
    XExtData *ext_data)
{
    ext_data->next = *structure;
    *structure = ext_data;
    return 1;
}

XExtData *XFindOnExtensionList(
    XExtData **structure,
    int number)
{
    XExtData *ext;

    ext = *structure;
    while (ext && (ext->number != number))
	ext = ext->next;
    return ext;
}

/*
 * Routines to hang procs on the extension structure.
 */
CreateGCType XESetCreateGC(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	CreateGCType proc)	/* routine to call when GC created */
{
	register _XExtension *e;	/* for lookup of extension */
	register CreateGCType oldproc;
	if ((e = XLookupExtension (dpy, extension)) == NULL) return (NULL);
	LockDisplay(dpy);
	oldproc = e->create_GC;
	e->create_GC = proc;
	UnlockDisplay(dpy);
	return (CreateGCType)oldproc;
}

CopyGCType XESetCopyGC(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	CopyGCType proc)	/* routine to call when GC copied */
{
	register _XExtension *e;	/* for lookup of extension */
	register CopyGCType oldproc;
	if ((e = XLookupExtension (dpy, extension)) == NULL) return (NULL);
	LockDisplay(dpy);
	oldproc = e->copy_GC;
	e->copy_GC = proc;
	UnlockDisplay(dpy);
	return (CopyGCType)oldproc;
}

FlushGCType XESetFlushGC(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	FlushGCType proc)	/* routine to call when GC copied */
{
	register _XExtension *e;	/* for lookup of extension */
	register FlushGCType oldproc;
	if ((e = XLookupExtension (dpy, extension)) == NULL) return (NULL);
	LockDisplay(dpy);
	oldproc = e->flush_GC;
	e->flush_GC = proc;
	UnlockDisplay(dpy);
	return (FlushGCType)oldproc;
}

FreeGCType XESetFreeGC(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	FreeGCType proc)	/* routine to call when GC freed */
{
	register _XExtension *e;	/* for lookup of extension */
	register FreeGCType oldproc;
	if ((e = XLookupExtension (dpy, extension)) == NULL) return (NULL);
	LockDisplay(dpy);
	oldproc = e->free_GC;
	e->free_GC = proc;
	UnlockDisplay(dpy);
	return (FreeGCType)oldproc;
}

CreateFontType XESetCreateFont(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	CreateFontType proc)	/* routine to call when font created */
{
	register _XExtension *e;	/* for lookup of extension */
	register CreateFontType oldproc;
	if ((e = XLookupExtension (dpy, extension)) == NULL) return (NULL);
	LockDisplay(dpy);
	oldproc = e->create_Font;
	e->create_Font = proc;
	UnlockDisplay(dpy);
	return (CreateFontType)oldproc;
}

FreeFontType XESetFreeFont(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	FreeFontType proc)	/* routine to call when font freed */
{
	register _XExtension *e;	/* for lookup of extension */
	register FreeFontType oldproc;
	if ((e = XLookupExtension (dpy, extension)) == NULL) return (NULL);
	LockDisplay(dpy);
	oldproc = e->free_Font;
	e->free_Font = proc;
	UnlockDisplay(dpy);
	return (FreeFontType)oldproc;
}

CloseDisplayType XESetCloseDisplay(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	CloseDisplayType proc)	/* routine to call when display closed */
{
	register _XExtension *e;	/* for lookup of extension */
	register CloseDisplayType oldproc;
	if ((e = XLookupExtension (dpy, extension)) == NULL) return (NULL);
	LockDisplay(dpy);
	oldproc = e->close_display;
	e->close_display = proc;
	UnlockDisplay(dpy);
	return (CloseDisplayType)oldproc;
}

typedef Bool (*WireToEventType) (
    Display*	/* display */,
    XEvent*	/* re */,
    xEvent*	/* event */
);

WireToEventType XESetWireToEvent(
	Display *dpy,		/* display */
	int event_number,	/* event routine to replace */
	WireToEventType proc)	/* routine to call when converting event */
{
	register WireToEventType oldproc;
	if (proc == NULL) proc = (WireToEventType)_XUnknownWireEvent;
	LockDisplay (dpy);
	oldproc = dpy->event_vec[event_number];
	dpy->event_vec[event_number] = proc;
	UnlockDisplay (dpy);
	return (WireToEventType)oldproc;
}

typedef Bool (*WireToEventCookieType) (
    Display*	/* display */,
    XGenericEventCookie*	/* re */,
    xEvent*	/* event */
);

WireToEventCookieType XESetWireToEventCookie(
    Display *dpy,       /* display */
    int extension,      /* extension major opcode */
    WireToEventCookieType proc /* routine to call for generic events */
    )
{
	WireToEventCookieType oldproc;
	if (proc == NULL) proc = (WireToEventCookieType)_XUnknownWireEventCookie;
	LockDisplay (dpy);
	oldproc = dpy->generic_event_vec[extension & 0x7F];
	dpy->generic_event_vec[extension & 0x7F] = proc;
	UnlockDisplay (dpy);
	return (WireToEventCookieType)oldproc;
}

typedef Bool (*CopyEventCookieType) (
    Display*	/* display */,
    XGenericEventCookie*	/* in */,
    XGenericEventCookie*	/* out */
);

CopyEventCookieType XESetCopyEventCookie(
    Display *dpy,       /* display */
    int extension,      /* extension major opcode */
    CopyEventCookieType proc /* routine to copy generic events */
    )
{
	CopyEventCookieType oldproc;
	if (proc == NULL) proc = (CopyEventCookieType)_XUnknownCopyEventCookie;
	LockDisplay (dpy);
	oldproc = dpy->generic_event_copy_vec[extension & 0x7F];
	dpy->generic_event_copy_vec[extension & 0x7F] = proc;
	UnlockDisplay (dpy);
	return (CopyEventCookieType)oldproc;
}


typedef Status (*EventToWireType) (
    Display*	/* display */,
    XEvent*	/* re */,
    xEvent*	/* event */
);

EventToWireType XESetEventToWire(
	Display *dpy,		/* display */
	int event_number,	/* event routine to replace */
	EventToWireType proc)	/* routine to call when converting event */
{
	register EventToWireType oldproc;
	if (proc == NULL) proc = (EventToWireType) _XUnknownNativeEvent;
	LockDisplay (dpy);
	oldproc = dpy->wire_vec[event_number];
	dpy->wire_vec[event_number] = proc;
	UnlockDisplay(dpy);
	return (EventToWireType)oldproc;
}

typedef Bool (*WireToErrorType) (
    Display*	/* display */,
    XErrorEvent* /* he */,
    xError*	/* we */
);

WireToErrorType XESetWireToError(
	Display *dpy,		/* display */
	int error_number,	/* error routine to replace */
	WireToErrorType proc)	/* routine to call when converting error */
{
	register WireToErrorType oldproc = NULL;
	if (proc == NULL) proc = (WireToErrorType)_XDefaultWireError;
	LockDisplay (dpy);
	if (!dpy->error_vec) {
	    int i;
	    dpy->error_vec = Xmalloc(256 * sizeof(oldproc));
	    for (i = 1; i < 256; i++)
		dpy->error_vec[i] = _XDefaultWireError;
	}
	if (dpy->error_vec) {
	    oldproc = dpy->error_vec[error_number];
	    dpy->error_vec[error_number] = proc;
	}
	UnlockDisplay (dpy);
	return (WireToErrorType)oldproc;
}

ErrorType XESetError(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	ErrorType proc)		/* routine to call when X error happens */
{
	register _XExtension *e;	/* for lookup of extension */
	register ErrorType oldproc;
	if ((e = XLookupExtension (dpy, extension)) == NULL) return (NULL);
	LockDisplay(dpy);
	oldproc = e->error;
	e->error = proc;
	UnlockDisplay(dpy);
	return (ErrorType)oldproc;
}

ErrorStringType XESetErrorString(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	ErrorStringType proc)	/* routine to call when I/O error happens */
{
	register _XExtension *e;	/* for lookup of extension */
	register ErrorStringType oldproc;
	if ((e = XLookupExtension (dpy, extension)) == NULL) return (NULL);
	LockDisplay(dpy);
	oldproc = e->error_string;
	e->error_string = proc;
	UnlockDisplay(dpy);
	return (ErrorStringType)oldproc;
}

PrintErrorType XESetPrintErrorValues(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	PrintErrorType proc)	/* routine to call to print */
{
	register _XExtension *e;	/* for lookup of extension */
	register PrintErrorType oldproc;
	if ((e = XLookupExtension (dpy, extension)) == NULL) return (NULL);
	LockDisplay(dpy);
	oldproc = e->error_values;
	e->error_values = proc;
	UnlockDisplay(dpy);
	return (PrintErrorType)oldproc;
}

BeforeFlushType XESetBeforeFlush(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	BeforeFlushType proc)	/* routine to call on flush */
{
	register _XExtension *e;	/* for lookup of extension */
	register BeforeFlushType oldproc;
	register _XExtension *ext;
	if ((e = XLookupExtension (dpy, extension)) == NULL) return (NULL);
	LockDisplay(dpy);
	oldproc = e->before_flush;
	e->before_flush = proc;
	for (ext = dpy->flushes; ext && ext != e; ext = ext->next)
	    ;
	if (!ext) {
	    e->next_flush = dpy->flushes;
	    dpy->flushes = e;
	}
	UnlockDisplay(dpy);
	return (BeforeFlushType)oldproc;
}
@


1.6
log
@Update to libX11 1.6.2. No API change.
@
text
@d54 1
a54 1
	    if (ext) Xfree(ext);
@


1.5
log
@Update to libX11 1.5.99.902 aka 1.6rc2
@
text
@d54 1
a54 1
	    if (ext) Xfree((char *) ext);
@


1.4
log
@Update to libX11 1.4.4. Tested by ajacoutot@@, shadchin@@.
@
text
@d52 1
a52 1
	if (! (ext = (_XExtension *) Xcalloc (1, sizeof (_XExtension))) ||
d74 1
a74 1
    if (! (ext = (_XExtension *) Xcalloc (1, sizeof (_XExtension)))) {
@


1.3
log
@Update to libX11 1.3.3. Tested on a bulk ports build by naddy@@.
@
text
@d53 1
a53 1
	    ! (ext->name = Xmalloc((unsigned) strlen(name) + 1))) {
a59 1
	(void) strcpy(ext->name, name);
@


1.2
log
@update to libX11 1.2.1
@
text
@a0 1
/* $Xorg: InitExt.c,v 1.4 2001/02/09 02:03:34 xorgcvs Exp $ */
a27 1
/* $XFree86: xc/lib/X11/InitExt.c,v 1.7 2001/12/14 19:54:02 dawes Exp $ */
d253 43
@


1.1
log
@Initial revision
@
text
@d49 1
a49 1
	if (!XQueryExtension(dpy, name, 
d64 1
a64 1
	/* chain it onto the display list */	
d72 1
a72 2
XExtCodes *XAddExtension (dpy)
    Display *dpy;
d101 1
a101 2
XExtData **XEHeadOfExtensionList(object)
    XEDataObject object;
d107 3
a109 3
XAddToExtensionList(structure, ext_data)
    XExtData **structure;
    XExtData *ext_data;
d116 3
a118 3
XExtData *XFindOnExtensionList(structure, number)
    XExtData **structure;
    int number;
d131 4
a134 4
CreateGCType XESetCreateGC(dpy, extension, proc)
	Display *dpy;		/* display */
	int extension;		/* extension number */
	CreateGCType proc;	/* routine to call when GC created */
d146 4
a149 4
CopyGCType XESetCopyGC(dpy, extension, proc)
	Display *dpy;		/* display */
	int extension;		/* extension number */
	CopyGCType proc;	/* routine to call when GC copied */
d161 4
a164 4
FlushGCType XESetFlushGC(dpy, extension, proc)
	Display *dpy;		/* display */
	int extension;		/* extension number */
	FlushGCType proc;	/* routine to call when GC copied */
d176 4
a179 4
FreeGCType XESetFreeGC(dpy, extension, proc)
	Display *dpy;		/* display */
	int extension;		/* extension number */
	FreeGCType proc;	/* routine to call when GC freed */
d191 4
a194 4
CreateFontType XESetCreateFont(dpy, extension, proc)
	Display *dpy;		/* display */
	int extension;		/* extension number */
	CreateFontType proc;	/* routine to call when font created */
d206 4
a209 4
FreeFontType XESetFreeFont(dpy, extension, proc)
	Display *dpy;		/* display */
	int extension;		/* extension number */
	FreeFontType proc;	/* routine to call when font freed */
d221 4
a224 4
CloseDisplayType XESetCloseDisplay(dpy, extension, proc)
	Display *dpy;		/* display */
	int extension;		/* extension number */
	CloseDisplayType proc;	/* routine to call when display closed */
d242 4
a245 4
WireToEventType XESetWireToEvent(dpy, event_number, proc)
	Display *dpy;		/* display */
	WireToEventType proc;	/* routine to call when converting event */
	int event_number;	/* event routine to replace */
d262 4
a265 4
EventToWireType XESetEventToWire(dpy, event_number, proc)
	Display *dpy;		/* display */
	EventToWireType proc;	/* routine to call when converting event */
	int event_number;	/* event routine to replace */
d282 4
a285 4
WireToErrorType XESetWireToError(dpy, error_number, proc)
	Display *dpy;		/* display */
	WireToErrorType proc;	/* routine to call when converting error */
	int error_number;	/* error routine to replace */
d304 4
a307 4
ErrorType XESetError(dpy, extension, proc)
	Display *dpy;		/* display */
	int extension;		/* extension number */
	ErrorType proc;		/* routine to call when X error happens */
d319 4
a322 4
ErrorStringType XESetErrorString(dpy, extension, proc)
	Display *dpy;		/* display */
	int extension;		/* extension number */
	ErrorStringType proc;	/* routine to call when I/O error happens */
d334 4
a337 4
PrintErrorType XESetPrintErrorValues(dpy, extension, proc)
	Display *dpy;		/* display */
	int extension;		/* extension number */
	PrintErrorType proc;	/* routine to call to print */
d349 4
a352 4
BeforeFlushType XESetBeforeFlush(dpy, extension, proc)
	Display *dpy;		/* display */
	int extension;		/* extension number */
	BeforeFlushType proc;	/* routine to call on flush */
d366 1
a366 1
	}	    
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@libX11 1.1.3
@
text
@d72 2
a73 1
XExtCodes *XAddExtension (Display *dpy)
d102 2
a103 1
XExtData **XEHeadOfExtensionList(XEDataObject object)
d109 3
a111 3
XAddToExtensionList(
    XExtData **structure,
    XExtData *ext_data)
d118 3
a120 3
XExtData *XFindOnExtensionList(
    XExtData **structure,
    int number)
d133 4
a136 4
CreateGCType XESetCreateGC(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	CreateGCType proc)	/* routine to call when GC created */
d148 4
a151 4
CopyGCType XESetCopyGC(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	CopyGCType proc)	/* routine to call when GC copied */
d163 4
a166 4
FlushGCType XESetFlushGC(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	FlushGCType proc)	/* routine to call when GC copied */
d178 4
a181 4
FreeGCType XESetFreeGC(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	FreeGCType proc)	/* routine to call when GC freed */
d193 4
a196 4
CreateFontType XESetCreateFont(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	CreateFontType proc)	/* routine to call when font created */
d208 4
a211 4
FreeFontType XESetFreeFont(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	FreeFontType proc)	/* routine to call when font freed */
d223 4
a226 4
CloseDisplayType XESetCloseDisplay(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	CloseDisplayType proc)	/* routine to call when display closed */
d244 4
a247 4
WireToEventType XESetWireToEvent(
	Display *dpy,		/* display */
	int event_number,	/* event routine to replace */
	WireToEventType proc)	/* routine to call when converting event */
d264 4
a267 4
EventToWireType XESetEventToWire(
	Display *dpy,		/* display */
	int event_number,	/* event routine to replace */
	EventToWireType proc)	/* routine to call when converting event */
d284 4
a287 4
WireToErrorType XESetWireToError(
	Display *dpy,		/* display */
	int error_number,	/* error routine to replace */
	WireToErrorType proc)	/* routine to call when converting error */
d306 4
a309 4
ErrorType XESetError(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	ErrorType proc)		/* routine to call when X error happens */
d321 4
a324 4
ErrorStringType XESetErrorString(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	ErrorStringType proc)	/* routine to call when I/O error happens */
d336 4
a339 4
PrintErrorType XESetPrintErrorValues(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	PrintErrorType proc)	/* routine to call to print */
d351 4
a354 4
BeforeFlushType XESetBeforeFlush(
	Display *dpy,		/* display */
	int extension,		/* extension number */
	BeforeFlushType proc)	/* routine to call on flush */
@

