head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.18
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.16
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.14
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.12
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.10
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.8
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.6
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.4
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.2
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	v1_1_3:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_1_1:1.1.1.1
	v1_0_99_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2012.03.27.19.19.38;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2011.09.19.20.21.37;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2010.05.18.19.37.35;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2009.05.03.12.59.11;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.10.22.01.31;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.10.21.24.16;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.04.17.20.25.05;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.03.30.15.54.33;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.26.15.10.19;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.16.37.30;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.37.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Upate to libX11 1.5rc1. Tested by krw@@, mpi@@, shadchin@@.
@
text
@/*
 *
 * Copyright (c) 1995 David E. Wexelblat.  All rights reserved
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL DAVID E. WEXELBLAT BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of David E. Wexelblat shall
 * not be used in advertising or otherwise to promote the sale, use or
 * other dealings in this Software without prior written authorization
 * from David E. Wexelblat.
 *
 */

/*
 * Stubs for thread functions needed by the X library.  Supports
 * UnixWare 2.x threads; may support Solaris 2 threads as well, but not
 * tested.  Defining things this way removes the dependency of the X
 * library on the threads library, but still supports threads if the user
 * specificies the thread library on the link line.
 */

/*
 * Modifications by Carlos A M dos Santos, XFree86 Project, November 1999.
 *
 * Explanation from <X11/Xos_r.h>:
 * The structure below is complicated, mostly because P1003.1c (the
 * IEEE POSIX Threads spec) went through lots of drafts, and some
 * vendors shipped systems based on draft API that were changed later.
 * Unfortunately POSIX did not provide a feature-test macro for
 * distinguishing each of the drafts.
 */

#include <stdlib.h>

static int _Xthr_once_stub_(void *, void (*)(void));
static int _Xthr_key_create_stub_(unsigned int *, void (*)(void *));
static int _Xthr_setspecific_stub_(unsigned int, const void *);
static void *_Xthr_getspecific_stub_(unsigned int);

#ifdef CTHREADS
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <cthreads.h>
typedef cthread_t xthread_t;
#define xthread_self cthread_self
#pragma weak cthread_self = _Xthr_self_stub_
#define xmutex_init mutex_init
#pragma weak mutex_init = _Xthr_zero_stub_
#pragma weak mutex_clear = _Xthr_zero_stub_
#pragma weak mutex_lock = _Xthr_zero_stub_
#pragma weak mutex_unlock = _Xthr_zero_stub_
#pragma weak condition_init = _Xthr_zero_stub_
#pragma weak condition_clear = _Xthr_zero_stub_
#pragma weak condition_wait = _Xthr_zero_stub_
#pragma weak condition_signal = _Xthr_zero_stub_
#pragma weak condition_broadcast = _Xthr_zero_stub_
#else /* !CTHREADS */
#if defined(SVR4) && !defined(__sgi)
#include <thread.h>
typedef thread_t xthread_t;
#pragma weak thr_self = _Xthr_self_stub_
#pragma weak mutex_init = _Xthr_zero_stub_
#pragma weak mutex_destroy = _Xthr_zero_stub_
#pragma weak mutex_lock = _Xthr_zero_stub_
#pragma weak mutex_unlock = _Xthr_zero_stub_
#pragma weak cond_init = _Xthr_zero_stub_
#pragma weak cond_destroy = _Xthr_zero_stub_
#pragma weak cond_wait = _Xthr_zero_stub_
#pragma weak cond_signal = _Xthr_zero_stub_
#pragma weak cond_broadcast = _Xthr_zero_stub_
#else /* !SVR4 */
#ifdef WIN32
#include <X11/Xthreads.h>
#else /* !WIN32 */
#ifdef USE_TIS_SUPPORT
#include <tis.h>
typedef pthread_t xthread_t;
#pragma weak tis_self = _Xthr_self_stub_
#pragma weak tis_mutex_init = _Xthr_zero_stub_
#pragma weak tis_mutex_destroy = _Xthr_zero_stub_
#pragma weak tis_mutex_lock = _Xthr_zero_stub_
#pragma weak tis_mutex_unlock = _Xthr_zero_stub_
#pragma weak tis_cond_init = _Xthr_zero_stub_
#pragma weak tis_cond_destroy = _Xthr_zero_stub_
#pragma weak tis_cond_wait = _Xthr_zero_stub_
#pragma weak tis_cond_signal = _Xthr_zero_stub_
#pragma weak tis_cond_broadcast = _Xthr_zero_stub_
#else
#include <pthread.h>
typedef pthread_t xthread_t;
#if __GNUC__ >= 3 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
xthread_t pthread_self()    __attribute__ ((weak, alias ("_Xthr_self_stub_")));
int pthread_mutex_init()    __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_mutex_destroy() __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_mutex_lock()    __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_mutex_unlock()  __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_cond_init()     __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_cond_destroy()  __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_cond_wait()     __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_cond_signal()   __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_cond_broadcast() __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_key_create()    __attribute__ ((weak, alias ("_Xthr_key_create_stub_")));
void *pthread_getspecific()  __attribute__ ((weak, alias ("_Xthr_getspecific_stub_")));
int pthread_setspecific()   __attribute__ ((weak, alias ("_Xthr_setspecific_stub_")));
int pthread_once() __attribute__ ((weak, alias ("_Xthr_once_stub_")));
#else	/* __GNUC__ */
#pragma weak pthread_self = _Xthr_self_stub_
#pragma weak pthread_mutex_init = _Xthr_zero_stub_
#pragma weak pthread_mutex_destroy = _Xthr_zero_stub_
#pragma weak pthread_mutex_lock = _Xthr_zero_stub_
#pragma weak pthread_mutex_unlock = _Xthr_zero_stub_
#pragma weak pthread_cond_init = _Xthr_zero_stub_
#pragma weak pthread_cond_destroy = _Xthr_zero_stub_
#pragma weak pthread_cond_wait = _Xthr_zero_stub_
#pragma weak pthread_cond_signal = _Xthr_zero_stub_
#pragma weak pthread_cond_broadcast = _Xthr_zero_stub_
/* These are added for libGL */
#pragma weak pthread_key_create = _Xthr_key_create_stub_
#pragma weak pthread_getspecific = _Xthr_getspecific_stub_
#pragma weak pthread_setspecific = _Xthr_setspecific_stub_
#pragam weak pthread_once = _Xthr_once_stub_
#endif	/* __GNUC__ */
#if defined(_DECTHREADS_) || defined(linux)
#pragma weak pthread_equal = _Xthr_equal_stub_	/* See Xthreads.h! */
int
_Xthr_equal_stub_()
{
    return(1);
}
#endif /* _DECTHREADS_ || linux */
#endif /* USE_TIS_SUPPORT */
#endif /* WIN32 */
#endif /* SVR4 */
#endif /* CTHREADS */

static xthread_t
_Xthr_self_stub_()
{
    static xthread_t _X_no_thread_id;

    return(_X_no_thread_id);	/* defined by <X11/Xthreads.h> */
}

static int
_Xthr_zero_stub_()
{
    return(0);
}

#include <errno.h>

#define XTHR_ONCE_KEYS_CHUNK 100
static void**_Xthr_once_keys_ = NULL;
static unsigned int _Xthr_once_last_key_ = 0;

static int 
_Xthr_once_stub_(void *id, void (*routine)(void))
{
    void **tmp;
    unsigned int i;

    /* look for the id */
    for (i = 0; i < _Xthr_once_last_key_; i++)
	if (_Xthr_once_keys_[i] == id) 
	    return 0;
    /* allocate more room if needed */
    if ((_Xthr_once_last_key_ % XTHR_ONCE_KEYS_CHUNK) == 0) {
	tmp = realloc(_Xthr_once_keys_,
	      (_Xthr_once_last_key_ + XTHR_ONCE_KEYS_CHUNK)*sizeof(void *));
	if (tmp == NULL) {
	    return ENOMEM;
	}
	for (i = 0; i < XTHR_ONCE_KEYS_CHUNK; i++)
	    tmp[_Xthr_once_last_key_ + i] = NULL;
	_Xthr_once_keys_ = tmp;
    }
    /* call the routine */
    routine();
    /* Mark it */
    _Xthr_once_keys_[_Xthr_once_last_key_++] = id;
    return 0;
}

#define XTHR_KEYS_CHUNK 100

static void **_Xthr_keys_ = NULL;
static unsigned int _Xthr_last_key_ = 0;

static int
_Xthr_key_create_stub_(unsigned int *key, void (*destructor)(void *))
{
    void **tmp;
    unsigned int i;

    if ((_Xthr_last_key_ % XTHR_KEYS_CHUNK) == 0) {
	tmp = realloc(_Xthr_keys_,
	    (_Xthr_last_key_ + XTHR_KEYS_CHUNK)*sizeof(void *));
	if (tmp == NULL) {
	    return ENOMEM;
	}
	for (i = 0; i < XTHR_KEYS_CHUNK; i++)
	    tmp[_Xthr_last_key_ + i] = NULL;
	_Xthr_keys_ = tmp;
    }
    *key = _Xthr_last_key_++;
    return 0;
}

static int
_Xthr_setspecific_stub_(unsigned int key, const void *value)
{
    if (_Xthr_last_key_ == 0 || key >= _Xthr_last_key_)
	return EINVAL;
    _Xthr_keys_[key] = value;
    return 0;
}

static void *
_Xthr_getspecific_stub_(unsigned int key)
{
    if (_Xthr_last_key_ == 0 || key >= _Xthr_last_key_)
	return NULL;
    return(_Xthr_keys_[key]);
}
@


1.9
log
@Fix _Xthr_once_stub_() to call the init routine for each different id.

With tweaks from and ok ariane@@
@
text
@d91 1
a91 3
    /*
     * Don't know what to do here. Is there something do be done at all?
     */
@


1.8
log
@Update to libX11 1.3.3. Tested on a bulk ports build by naddy@@.
@
text
@d170 6
d179 17
a195 5
    static int done = 0;
    
    if (!done) {
	routine();
	done++;
d197 4
a203 2
#include <errno.h>

a218 1
	    free(_Xthr_keys_);
d222 1
a222 1
	    tmp[_Xthr_last_key_ + i] = 0;
@


1.7
log
@update to libX11 1.2.1
@
text
@a1 1
 * $XFree86: xc/lib/XThrStub/UIThrStubs.c,v 3.3 2001/11/18 21:13:26 herrb Exp $
@


1.6
log
@- actually zero the memory returned by realloc().
- set the return value for the pthread_once() stub.
@
text
@d13 1
a13 1
 * 
d16 1
a16 1
 * 
d24 1
a24 1
 * 
d29 1
a29 1
 * 
d33 1
a33 1
 * Stubs for thread functions needed by the X library.  Supports 
d157 1
a157 1
static xthread_t 
d165 1
a165 1
static int 
@


1.5
log
@Include stdlib.h so we have the prototype for realloc. This means that we don't
assume realloc returns an int. This causes problems...

This took me hours to find.

Ok matthieu@@.
@
text
@d180 1
d203 2
a204 2
	for (i =_Xthr_last_key_; i<XTHR_KEYS_CHUNK; i++)
	    tmp[i] = 0;
@


1.4
log
@pthread_key_create(3) explicitely says that the value associated
with a new key is NULL. So set the allocated memory to zero.
@
text
@d51 2
@


1.3
log
@- get rid of recalloc() that got introduced here.
- while there fix the computation of the new allocated size.
Issue reported by naddy@@, ok naddy@@.
@
text
@d191 1
d200 2
a223 1

@


1.2
log
@Re-enable pthread support in libGL, by providing proper weak stubs in
libX11 (together with other pthread stubs, already there for libX11).
ok kurt@@, art@@, kettenis@@
@
text
@d193 2
a194 2
	tmp = recalloc(_Xthr_keys_, 1, 
		       _Xthr_last_key_ + XTHR_KEYS_CHUNK*sizeof(void *));
@


1.1
log
@Initial revision
@
text
@d51 5
d121 4
a124 3
int pthread_key_create()    __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
void *pthread_getspecific()  __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_setspecific()   __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
d137 4
a140 3
#pragma weak pthread_key_create = _Xthr_zero_stub_
#pragma weak pthread_getspecific = _Xthr_zero_stub_
#pragma weak pthread_setspecific = _Xthr_zero_stub_
d168 54
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@
