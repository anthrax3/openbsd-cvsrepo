head	1.20;
access;
symbols
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.18.0.6
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.4
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.2
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.17.0.6
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.4
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.2
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.2
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v1_1_3:1.1.1.3
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v1_1_1:1.1.1.2
	v1_0_99_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.20
date	2017.02.28.18.44.56;	author matthieu;	state Exp;
branches;
next	1.19;
commitid	ZtHcePqyefEMgw1S;

1.19
date	2016.11.03.10.21.31;	author matthieu;	state Exp;
branches;
next	1.18;
commitid	EvOPnI31yB1tDGgg;

1.18
date	2015.04.06.20.57.56;	author matthieu;	state Exp;
branches;
next	1.17;
commitid	L5f7tv2EiGjtzoSu;

1.17
date	2013.09.28.17.03.14;	author matthieu;	state Exp;
branches;
next	1.16;

1.16
date	2013.08.26.19.57.23;	author matthieu;	state Exp;
branches;
next	1.15;

1.15
date	2013.06.04.03.19.34;	author matthieu;	state Exp;
branches;
next	1.14;

1.14
date	2013.05.31.21.17.09;	author matthieu;	state Exp;
branches;
next	1.13;

1.13
date	2013.04.28.16.55.55;	author matthieu;	state Exp;
branches;
next	1.12;

1.12
date	2012.06.11.19.18.56;	author matthieu;	state Exp;
branches;
next	1.11;

1.11
date	2012.03.27.19.19.37;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2011.08.27.15.34.14;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.14.12.33.19;	author dcoppa;	state Exp;
branches;
next	1.8;

1.8
date	2011.05.30.20.52.47;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.30.19.19.29;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.05.19.50.57;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.04.10.33.11;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.18.19.37.30;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.03.12.59.09;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.20.55.41;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.16.36.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.36.31;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.12.16.16.39.39;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.09.30.10.11.57;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Update to libX11 1.6.5
@
text
@
# Initialize Autoconf
AC_PREREQ([2.60])
AC_INIT([libX11], [1.6.5],
        [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], [libX11])
AC_CONFIG_SRCDIR([Makefile.am])
AC_CONFIG_HEADERS([src/config.h include/X11/XlibConf.h])
AC_CONFIG_MACRO_DIR([m4])
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
# Set common system defines for POSIX extensions, such as _GNU_SOURCE
# Must be called before any macros that run the compiler (like AC_PROG_LIBTOOL)
# to avoid autoconf errors.
AC_USE_SYSTEM_EXTENSIONS

# Initialize Automake
AM_INIT_AUTOMAKE([foreign dist-bzip2])

# Initialize libtool
AC_PROG_LIBTOOL

# Require xorg-macros minimum of 1.15 for fop minimum version
m4_ifndef([XORG_MACROS_VERSION],
          [m4_fatal([must install xorg-macros 1.15 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.15)
XORG_DEFAULT_OPTIONS
XORG_ENABLE_SPECS
XORG_WITH_XMLTO(0.0.22)
XORG_WITH_FOP([],[no])
XORG_WITH_XSLTPROC
XORG_CHECK_SGML_DOCTOOLS(1.10)
XORG_PROG_RAWCPP
XORG_WITH_PERL

# Required when PKG_CHECK_MODULES called within an if statement
PKG_PROG_PKG_CONFIG

if test x"$CC_FOR_BUILD" = x; then
	if test x"$cross_compiling" = xyes; then
	       AC_CHECK_PROGS(CC_FOR_BUILD, gcc cc)
	else
	       CC_FOR_BUILD="$CC"
	fi
fi
AC_SUBST([CC_FOR_BUILD])

if test x"$CPPFLAGS_FOR_BUILD" = x; then
	if test ! x"$cross_compiling" = xyes; then
		CPPFLAGS_FOR_BUILD=${CPPFLAGS}
	fi
fi
AC_SUBST(CPPFLAGS_FOR_BUILD)

if test x"$CFLAGS_FOR_BUILD" = x; then
	if test ! x"$cross_compiling" = xyes; then
		CFLAGS_FOR_BUILD=${CFLAGS}
	fi
fi
AC_SUBST(CFLAGS_FOR_BUILD)

if test x"$LDFLAGS_FOR_BUILD" = x; then
	if test ! x"$cross_compiling" = xyes; then
		LDFLAGS_FOR_BUILD=${LDFLAGS}
	fi
fi
AC_SUBST(LDFLAGS_FOR_BUILD)

# Checks for pkg-config packages

# Always required
X11_REQUIRES='xproto >= 7.0.17 xextproto xtrans xcb >= 1.11.1'
X11_EXTRA_DEPS="xcb >= 1.11.1"

PKG_PROG_PKG_CONFIG()

AC_SUBST(X11_EXTRA_DEPS)

# Issue an error if xtrans.m4 was not found and XTRANS_CONNECTION_FLAGS macro
# was not expanded, since libX11 with no transport types is rather useless.
#
# If you're seeing an error here, be sure you installed the lib/xtrans module
# first and if it's not in the default location, that you set the ACLOCAL
# environment variable to find it, such as:
#	ACLOCAL="aclocal -I ${PREFIX}/share/aclocal"
m4_pattern_forbid([^XTRANS_CONNECTION_FLAGS$])

# Transport selection macro from xtrans.m4
XTRANS_CONNECTION_FLAGS

# Check for dlopen
AC_MSG_CHECKING([if run-time linking is supported])
AC_SEARCH_LIBS(dlopen,[dl svld])
if test "x$ac_cv_search_dlopen" = xno; then
	AC_SEARCH_LIBS(shl_load,[dld])
	if test "x$ac_cv_search_shl_load" != xno; then
		AC_DEFINE(HAVE_SHL_LOAD,1,
			  [Use shl_load to load shared libraries])
		AC_CHECK_HEADERS([dl.h])
	fi
else
	AC_DEFINE(HAVE_DLOPEN,1,[Use dlopen to load shared libraries])
	AC_CHECK_HEADERS([dlfcn.h])
fi
if test "x$ac_cv_header_dlfcn_h" = xyes -o "x$ac_cv_header_dl_h" = xyes; then
	HAVE_LOADABLE_MODULES=yes
else
	HAVE_LOADABLE_MODULES=no
fi
AC_MSG_RESULT($HAVE_LOADABLE_MODULES)

AC_MSG_CHECKING([if loadable i18n module support should be enabled])
AC_ARG_ENABLE(loadable-i18n,
	      AS_HELP_STRING([--enable-loadable-i18n],
	       [Controls loadable i18n module support]),
	       [XLIB_LOADABLE_I18N=$enableval],
	       [XLIB_LOADABLE_I18N="no"])
if test x$XLIB_LOADABLE_I18N = xyes; then
	if test x$HAVE_LOADABLE_MODULES = xno; then
		AC_MSG_ERROR([Loadable module support is required to enable loadable i18n module support])
	fi
	AC_DEFINE(USE_DYNAMIC_LC,1,
		  [Split some i18n functions into loadable modules])
	AC_SUBST(I18N_MODULE_LIBS,'${top_builddir}/src/libX11.la')
fi
AC_MSG_RESULT($XLIB_LOADABLE_I18N)

AM_CONDITIONAL(XLIB_LOADABLE_I18N, test x$XLIB_LOADABLE_I18N = xyes)

AC_MSG_CHECKING([if loadable Xcursor library support should be enabled])
AC_ARG_ENABLE(loadable-xcursor,
	      AS_HELP_STRING([--disable-loadable-xcursor],
	       [Controls loadable xcursor library support]),
	       [XLIB_LOADABLE_XCURSOR=$enableval],
	       [XLIB_LOADABLE_XCURSOR=$HAVE_LOADABLE_MODULES])
if test x$XLIB_LOADABLE_XCURSOR = xyes; then
	AC_DEFINE(USE_DYNAMIC_XCURSOR,1,
		  [Use the X cursor library to load cursors])
fi
AC_MSG_RESULT($XLIB_LOADABLE_XCURSOR)

# Checks for header files.
AC_CHECK_HEADERS([sys/select.h])

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.
AC_CHECK_FUNCS([strtol seteuid])
# Used in lcFile.c (see also --enable-xlocaledir settings below)
XLOCALEDIR_IS_SAFE="no"
AC_CHECK_DECL([issetugid])
AC_CHECK_FUNC([issetugid])
if test "$ac_cv_have_decl_issetugid" = yes && test "$ac_cv_func_issetugid" = yes; then
    XLOCALEDIR_IS_SAFE="yes"
    AC_DEFINE(HASSETUGID,1,[Has issetugid() function])
fi
AC_CHECK_FUNC([getresuid], [XLOCALEDIR_IS_SAFE="yes"]
	AC_DEFINE(HASGETRESUID,1,[Has getresuid() & getresgid() functions]))
# Used in Font.c
AC_CHECK_FUNC([shmat], AC_DEFINE(HAS_SHM,1,[Has shm*() functions]))

# Checks for system services
# AC_PATH_XTRA

# arch specific things
WCHAR32="1"
case $host_os in
  os2*) os2="true" ; WCHAR32="0" ;;
  *) ;;
esac
AC_SUBST(WCHAR32)

AM_CONDITIONAL(OS2, test x$os2 = xtrue)

AC_ARG_WITH(launchd, AS_HELP_STRING([--with-launchd], [Build with support for Apple's launchd (default: auto)]), [LAUNCHD=$withval], [LAUNCHD=auto])
if test "x$LAUNCHD" = xauto; then
	unset LAUNCHD
	AC_CHECK_PROG(LAUNCHD, [launchd], [yes], [no], [$PATH$PATH_SEPARATOR/sbin])
fi

if test "x$LAUNCHD" = xyes ; then
	AC_DEFINE(HAVE_LAUNCHD, 1, [launchd support available])
	AC_DEFINE(TRANS_REOPEN, 1, [launchd support available])
fi

AC_ARG_ENABLE(xthreads,
              AS_HELP_STRING([--disable-xthreads],
                [Disable Xlib support for Multithreading]),
              [xthreads=$enableval],[xthreads=yes])

AC_CHECK_LIB(c, getpwuid_r, [mtsafeapi="yes"], [mtsafeapi="no"])

case x$xthreads in
xyes)
	AC_DEFINE(XTHREADS,1,[Whether libX11 is compiled with thread support])
	if test x$mtsafeapi = xyes
	then
	AC_DEFINE(XUSE_MTSAFE_API,1,[Whether libX11 needs to use MT safe API's])
	fi
	;;
*)
	;;
esac

AC_CHECK_LIB(c, pthread_self, [thrstubs="no"], [thrstubs="yes"])
AM_CONDITIONAL(THRSTUBS, test x$thrstubs = xyes)

# XXX incomplete, please fill this in
if test x$xthreads = xyes ; then
    case $host_os in
    linux*|gnu*|k*bsd*-gnu)
        XTHREADLIB=-lpthread ;;
    netbsd*)
	XTHREAD_CFLAGS="-D_POSIX_THREAD_SAFE_FUNCTIONS"
	XTHREADLIB="-lpthread" ;;
    freebsd*)
        XTHREAD_CFLAGS="-D_THREAD_SAFE"
        XTHREADLIB="-pthread" ;;
    dragonfly*|openbsd*)
        XTHREADLIB="-pthread" ;;
    solaris*)
	XTHREAD_CFLAGS="-D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS" ;;
    esac
fi
AC_SUBST(XTHREADLIB)
AC_SUBST(XTHREAD_CFLAGS)

AC_CHECK_FUNC(poll, [AC_DEFINE(USE_POLL, 1, [poll() function is available])], )

#
# Find keysymdef.h
#
AC_MSG_CHECKING([keysym definitions])
AC_ARG_WITH([keysymdefdir],
        [AC_HELP_STRING([--with-keysymdefdir=DIR], [The location of keysymdef.h (defaults to xproto include dir)])],
        [KEYSYMDEFDIR=$withval],
        [KEYSYMDEFDIR=`$PKG_CONFIG --variable=includedir xproto`/X11])

if test ! -d "$KEYSYMDEFDIR"; then
	AC_MSG_ERROR([$KEYSYMDEFDIR doesn't exist or isn't a directory])
fi

FILES="keysymdef.h XF86keysym.h Sunkeysym.h DECkeysym.h HPkeysym.h"
for i in $FILES; do
    if test -f "$KEYSYMDEFDIR/$i"; then
            KEYSYMDEFS="$KEYSYMDEFS $KEYSYMDEFDIR/$i"
    elif test "x$i" = "xkeysymdef.h"; then
	    AC_MSG_ERROR([Cannot find keysymdef.h])
    fi
done
AC_MSG_RESULT([$KEYSYMDEFS])
AC_SUBST(KEYSYMDEFS)

AC_ARG_ENABLE(xcms,
              AS_HELP_STRING([--disable-xcms],
                [Disable Xlib support for CMS *EXPERIMENTAL*]),
              [XCMS=$enableval],[XCMS=yes])
AM_CONDITIONAL(XCMS, [test x$XCMS = xyes ])
if test x"$XCMS" = "xyes"; then
	AC_DEFINE(XCMS,1,[Include support for XCMS])
fi

AC_ARG_ENABLE(xlocale,
              AS_HELP_STRING([--disable-xlocale],
                [Disable Xlib locale implementation *EXPERIMENTAL*]),
              [XLOCALE=$enableval],[XLOCALE=yes])

AM_CONDITIONAL(XLOCALE, [ test x$XLOCALE = xyes ])
if test x"$XLOCALE" = "xyes"; then
	AC_DEFINE(XLOCALE,1,[support for X Locales])
fi

# This disables XLOCALEDIR.  Set it if you're using BuildLoadableXlibI18n,
# don't have either issetugid() or getresuid(), and you need to protect
# clients that are setgid or setuid to an id other than 0.
AC_MSG_CHECKING([if XLOCALEDIR support should be enabled])
AC_ARG_ENABLE(xlocaledir,
	      AS_HELP_STRING([--enable-xlocaledir],
		[Enable XLOCALEDIR environment variable support]),
	      [ENABLE_XLOCALEDIR=$enableval],[ENABLE_XLOCALEDIR=$XLOCALEDIR_IS_SAFE])
if test "x$ENABLE_XLOCALEDIR" = "xno"; then
	AC_DEFINE(NO_XLOCALEDIR,1,[Disable XLOCALEDIR environment variable])
fi
AC_MSG_RESULT($ENABLE_XLOCALEDIR)

AC_ARG_ENABLE(xf86bigfont,
	      AS_HELP_STRING([--disable-xf86bigfont],
		[Disable XF86BigFont extension support]),
	      [XF86BIGFONT=$enableval],[XF86BIGFONT="yes"])
if test "x$XF86BIGFONT" = "xyes"; then
    PKG_CHECK_MODULES(BIGFONT, [xf86bigfontproto >= 1.2.0],
         AC_DEFINE(XF86BIGFONT,1,[Enable XF86BIGFONT extension]),XF86BIGFONT="no")
fi

AC_ARG_ENABLE(xkb,
              AS_HELP_STRING([--disable-xkb],
                [Disable XKB support *EXPERIMENTAL*]),
              [XKB=$enableval],[XKB=yes])

AM_CONDITIONAL(XKB, [ test x$XKB = xyes ])
if test x"$XKB" = "xyes"; then
   XKBPROTO_REQUIRES="kbproto"
   X11_REQUIRES="${X11_REQUIRES} kbproto inputproto"
   AC_DEFINE(XKB,1,[Use XKB])
else
   XKBPROTO_REQUIRES=""
fi
AC_SUBST(XKBPROTO_REQUIRES)

AC_FUNC_MMAP()
composecache_default=$ac_cv_func_mmap_fixed_mapped
AC_CHECK_FUNC(nl_langinfo, , [composecache_default=no])
AC_ARG_ENABLE(composecache,
              AS_HELP_STRING([--disable-composecache],
                [Disable compose table cache support]),
              [COMPOSECACHE=$enableval],[COMPOSECACHE=$composecache_default])
if test x"$COMPOSECACHE" = "xyes"; then
	AC_DEFINE(COMPOSECACHE,1,[Include compose table cache support])
fi

# Allow checking code with lint, sparse, etc.
XORG_WITH_LINT
XORG_LINT_LIBRARY([X11])

X11_DATADIR="${datadir}/X11"
AX_DEFINE_DIR(X11_DATADIR, X11_DATADIR, [Location of libX11 data])
AC_SUBST(X11_DATADIR)

X11_LIBDIR="${libdir}/X11"
AX_DEFINE_DIR(X11_LIBDIR, X11_LIBDIR, [Location of libX11 library data])
AC_SUBST(X11_LIBDIR)

PKG_CHECK_MODULES(X11, [$X11_REQUIRES])
X11_CFLAGS="$X11_CFLAGS $XTHREAD_CFLAGS"

#
# Yes, it would be nice to put the locale data in
# /usr/share, but the locale stuff includes loadable
# libraries which must be located in the same directory
# as the other locale data, so for now, everything lives
# in ${libdir}
#

X11_LOCALEDATADIR="${X11_DATADIR}/locale"
AX_DEFINE_DIR(XLOCALEDATADIR, X11_LOCALEDATADIR, [Location of libX11 locale data])
AC_SUBST(X11_LOCALEDATADIR)

AC_ARG_WITH(locale-lib-dir,	AS_HELP_STRING([--with-locale-lib-dir=DIR],
 [Directory where locale libraries files are installed (default: $libdir/X11/locale)]),
				[ X11_LOCALELIBDIR="$withval" ],
				[ X11_LOCALELIBDIR="${X11_LIBDIR}/locale" ])
AX_DEFINE_DIR(XLOCALELIBDIR, X11_LOCALELIBDIR, [Location of libX11 locale libraries])
AC_SUBST(X11_LOCALELIBDIR)

X11_LOCALEDIR="${X11_LOCALEDATADIR}"
AX_DEFINE_DIR(XLOCALEDIR, X11_LOCALEDIR, [Location of libX11 locale data])
AC_SUBST(X11_LOCALEDIR)

locales="\
 am_ET.UTF-8  armscii-8   C           cs_CZ.UTF-8  el_GR.UTF-8  en_US.UTF-8 \
 fi_FI.UTF-8  georgian-academy        georgian-ps  ibm-cp1133   iscii-dev \
 isiri-3342   iso8859-1   iso8859-10  iso8859-11   iso8859-13   iso8859-14 \
 iso8859-15   iso8859-2   iso8859-3   iso8859-4    iso8859-5    iso8859-6 \
 iso8859-7    iso8859-8   iso8859-9   iso8859-9e   ja           ja.JIS \
 ja_JP.UTF-8  ja.SJIS     km_KH.UTF-8 ko           koi8-c       koi8-r \
 koi8-u       ko_KR.UTF-8 microsoft-cp1251         microsoft-cp1255 \
 microsoft-cp1256         mulelao-1   nokhchi-1    pt_BR.UTF-8  pt_PT.UTF-8 \
 ru_RU.UTF-8  sr_CS.UTF-8 tatar-cyr   th_TH        th_TH.UTF-8  tscii-0 \
 vi_VN.tcvn   vi_VN.viscii            zh_CN        zh_CN.gb18030 \
 zh_CN.gbk    zh_CN.UTF-8 zh_HK.big5  zh_HK.big5hkscs           zh_HK.UTF-8 \
 zh_TW        zh_TW.big5  zh_TW.UTF-8"
AC_SUBST(locales)

XKEYSYMDB="${X11_DATADIR}/XKeysymDB"
AX_DEFINE_DIR(XKEYSYMDB, XKEYSYMDB, [Location of keysym database])

XERRORDB="${X11_DATADIR}/XErrorDB"
AX_DEFINE_DIR(XERRORDB, XERRORDB, [Location of error message database])

XORG_CHECK_MALLOC_ZERO

AC_CONFIG_FILES([Makefile
		include/Makefile
		man/Makefile
		man/xkb/Makefile
		src/Makefile
		src/util/Makefile
		src/xcms/Makefile
		src/xlibi18n/Makefile
		modules/Makefile
		modules/im/Makefile
		modules/im/ximcp/Makefile
		modules/lc/Makefile
		modules/lc/def/Makefile
		modules/lc/gen/Makefile
		modules/lc/Utf8/Makefile
		modules/om/Makefile
		modules/om/generic/Makefile
		src/xkb/Makefile
		nls/Makefile
		specs/Makefile
		specs/i18n/Makefile
		specs/i18n/compose/Makefile
		specs/i18n/framework/Makefile
		specs/i18n/localedb/Makefile
		specs/i18n/trans/Makefile
		specs/libX11/Makefile
		specs/XIM/Makefile
		specs/XKB/Makefile
		x11.pc
		x11-xcb.pc])
AC_OUTPUT

echo ""
echo "X11 will be built with the following settings:"
echo " Loadable i18n module support:            "$XLIB_LOADABLE_I18N
echo " Loadable xcursor library support:        "$XLIB_LOADABLE_XCURSOR
echo " Threading support:                       "$xthreads
echo " Use Threads safe API:                    "$mtsafeapi
echo " Threads stubs in libX11:                 "$thrstubs
echo " XCMS:                                    "$XCMS
echo " Internationalization support:            "$XLOCALE
echo " XF86BigFont support:                     "$XF86BIGFONT
echo " XKB support:                             "$XKB
echo " XLOCALEDIR environment variable support: "$ENABLE_XLOCALEDIR
echo " Compose table cache enabled:             "$COMPOSECACHE
echo " Functional specs building enabled:       "$build_specs
echo ""
@


1.19
log
@Update to libX11 1.6.4
@
text
@d4 1
a4 1
AC_INIT([libX11], [1.6.4],
@


1.18
log
@update to libX11 1.6.3
@
text
@d4 1
a4 1
AC_INIT([libX11], [1.6.3],
d71 2
a72 2
X11_REQUIRES='xproto >= 7.0.17 xextproto xtrans xcb >= 1.1.92'
X11_EXTRA_DEPS="xcb >= 1.1.92"
a89 75
# Secure RPC detection macro from xtrans.m4
XTRANS_SECURE_RPC_FLAGS

# Preferred order to try transports for local connections
AC_MSG_CHECKING([what order to try transports in for local connections])
DEFAULT_LOCAL_TRANS=""
case $host_os in
	solaris*)
		# On Solaris 2.6 through 9, named pipes (LOCAL_TRANS) were
		# faster than Unix domain sockets, but on Solaris 10 & later,
		# Unix domain sockets are faster now.
		if test "$UNIXCONN" = "yes" ; then
			if test ! "x$DEFAULT_LOCAL_TRANS" = "x" ; then
				DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS},"
			fi
			DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS}UNIX_TRANS"
		fi
		if test "$LOCALCONN" = "yes" ; then
			if test ! "x$DEFAULT_LOCAL_TRANS" = "x" ; then
				DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS},"
			fi
			DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS}LOCAL_TRANS"
		fi
		if test "$TCPCONN" = "yes" ; then
			if test ! "x$DEFAULT_LOCAL_TRANS" = "x" ; then
				DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS},"
			fi
			DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS}TCP_TRANS"
		fi
		;;
	linux*)
		# LOCAL_TRANS is used for abstract sockets.
		if test "$UNIXCONN" = "yes" ; then
			if test ! "x$DEFAULT_LOCAL_TRANS" = "x" ; then
				DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS},"
			fi
			DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS}LOCAL_TRANS,UNIX_TRANS"
		fi
		if test "$TCPCONN" = "yes" ; then
			if test ! "x$DEFAULT_LOCAL_TRANS" = "x" ; then
				DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS},"
			fi
			DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS}TCP_TRANS"
		fi
		;;
	*)
		if test "$LOCALCONN" = "yes" ; then
			if test ! "x$DEFAULT_LOCAL_TRANS" = "x" ; then
				DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS},"
			fi
			DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS}LOCAL_TRANS"
		fi
		if test "$UNIXCONN" = "yes" ; then
			if test ! "x$DEFAULT_LOCAL_TRANS" = "x" ; then
				DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS},"
			fi
			DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS}UNIX_TRANS"
		fi
		if test "$TCPCONN" = "yes" ; then
			if test ! "x$DEFAULT_LOCAL_TRANS" = "x" ; then
				DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS},"
			fi
			DEFAULT_LOCAL_TRANS="${DEFAULT_LOCAL_TRANS}TCP_TRANS"
		fi
		;;
esac

AC_ARG_WITH(local-transport-order,
	AS_HELP_STRING([--with-local-transport-order=LIST], [preference sorted list of transport types to try for local connections]),
	[LOCAL_TRANSPORT_LIST=$withval],
	[LOCAL_TRANSPORT_LIST=$DEFAULT_LOCAL_TRANS])
AC_DEFINE_UNQUOTED([LOCAL_TRANSPORT_LIST], [$LOCAL_TRANSPORT_LIST],
   [preference sorted list of transport types to try for local connections])
AC_MSG_RESULT([$LOCAL_TRANSPORT_LIST])

d366 5
a370 5
 microsoft-cp1256         mulelao-1   nokhchi-1    pt_BR.UTF-8  ru_RU.UTF-8 \
 sr_CS.UTF-8  tatar-cyr   th_TH       th_TH.UTF-8  tscii-0      vi_VN.tcvn \
 vi_VN.viscii zh_CN       zh_CN.gb18030            zh_CN.gbk    zh_CN.UTF-8 \
 zh_HK.big5   zh_HK.big5hkscs         zh_HK.UTF-8  zh_TW        zh_TW.big5 \
 zh_TW.UTF-8"
@


1.17
log
@Update to libX11 1.6.2. No API change.
@
text
@d4 1
a4 1
AC_INIT([libX11], [1.6.2],
d434 12
a445 11
 am_ET.UTF-8  armscii-8   C           el_GR.UTF-8  en_US.UTF-8  fi_FI.UTF-8 \
 georgian-academy         georgian-ps ibm-cp1133   iscii-dev    isiri-3342 \
 iso8859-1    iso8859-10  iso8859-11  iso8859-13   iso8859-14   iso8859-15 \
 iso8859-2    iso8859-3   iso8859-4   iso8859-5    iso8859-6    iso8859-7 \
 iso8859-8    iso8859-9   iso8859-9e  ja           ja.JIS       ja_JP.UTF-8\
 ja.SJIS      km_KH.UTF-8 ko          koi8-c       koi8-r       koi8-u     \
 ko_KR.UTF-8  microsoft-cp1251        microsoft-cp1255     microsoft-cp1256 \
 mulelao-1    nokhchi-1   pt_BR.UTF-8 ru_RU.UTF-8  sr_CS.UTF-8              \
 tatar-cyr    th_TH       th_TH.UTF-8 tscii-0      vi_VN.tcvn   vi_VN.viscii \
 zh_CN        zh_CN.gb18030           zh_CN.gbk    zh_CN.UTF-8  zh_HK.big5 \
 zh_HK.big5hkscs          zh_HK.UTF-8 zh_TW        zh_TW.big5   zh_TW.UTF-8"
a470 1
		modules/lc/xlocale/Makefile
@


1.16
log
@Update to libX11 1.6.1.
@
text
@d4 1
a4 1
AC_INIT([libX11], [1.6.1],
a327 2
AM_CONDITIONAL(UDC, test xfalse = xtrue)

d439 3
a441 3
 ja.SJIS      ko          koi8-c      koi8-r                                  \
 koi8-u       ko_KR.UTF-8 microsoft-cp1251         microsoft-cp1255 \
 microsoft-cp1256         mulelao-1   nokhchi-1    pt_BR.UTF-8  ru_RU.UTF-8 \
@


1.15
log
@Update to libX11 1.6.0
@
text
@d4 1
a4 1
AC_INIT([libX11], [1.6.0],
@


1.14
log
@Update to libX11 1.5.99.902 aka 1.6rc2
@
text
@d4 1
a4 1
AC_INIT([libX11], [1.5.99.902],
@


1.13
log
@Update to libX11 1.6RC. No bump needed.
@
text
@d4 1
a4 1
AC_INIT([libX11], [1.5.99.901],
@


1.12
log
@Update to libX11 1.5.0
@
text
@d4 1
a4 1
AC_INIT([libX11], [1.5.0],
a17 1
AM_MAINTAINER_MODE
d179 1
a179 1
if test x$ac_cv_header_dlcfn_h -o x$ac_cv_header_dl_h; then
d308 9
a316 1
KEYSYMDEFDIR=`$PKG_CONFIG --variable=includedir xproto`/X11
d441 1
a441 1
 ja.S90       ja.SJIS     ja.U90      ko           koi8-c       koi8-r \
@


1.11
log
@Upate to libX11 1.5rc1. Tested by krw@@, mpi@@, shadchin@@.
@
text
@d4 1
a4 1
AC_INIT([libX11], [1.4.99.901],
d226 6
a231 2
AC_CHECK_FUNC([issetugid], [XLOCALEDIR_IS_SAFE="yes"]
	AC_DEFINE(HASSETUGID,1,[Has issetugid() function]))
@


1.10
log
@Update to libX11 1.4.4. Tested by ajacoutot@@, shadchin@@.
@
text
@d4 1
a4 1
AC_INIT([libX11], [1.4.4],
d32 1
a32 1
XORG_CHECK_SGML_DOCTOOLS(1.8)
d223 1
a223 1
AC_CHECK_FUNCS([strtol])
d424 14
d468 1
@


1.9
log
@Fix libpthread linkage

OK matthieu@@
@
text
@d4 1
a4 1
AC_INIT([libX11], [1.4.3],
d23 1
a23 1
# Require xorg-macros minimum of 1.12 for DocBook external references
d25 2
a26 2
          [m4_fatal([must install xorg-macros 1.12 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.12)
d30 1
a30 1
XORG_WITH_FOP([no])
d32 1
a32 1
XORG_CHECK_SGML_DOCTOOLS(1.7)
d34 1
a68 9
# Find perl for "make check" tests in nls/Makefile.am
AC_ARG_WITH(perl,
	AS_HELP_STRING([--with-perl=<path>],
			[path to perl interpreter for build-time tests]),
	[PERL=$withval ; AC_MSG_CHECKING([perl]) ;
	 AC_MSG_RESULT([(from --with-perl) $PERL])],
	AC_CHECK_PROGS([PERL], [perl], [no]))
AM_CONDITIONAL(HAVE_PERL, test x$PERL != xno)

d72 1
a72 1
X11_REQUIRES='xproto >= 7.0.13 xextproto xtrans xcb >= 1.1.92'
@


1.8
log
@Update to libX11 1.4.3 which was released during the 1.4.2 tests.
Mostly churn in the doc build system, which is disabled on Xenocara
for now.
@
text
@d290 1
a290 1
    linux*|openbsd*|gnu*|k*bsd*-gnu)
d298 1
a298 1
    dragonfly*)
@


1.7
log
@Update to libx11 1.4.2. Tested by ajacoutot@@, jasper@@ krw@@, landry@@,
shadchin@@ on various architectures.
Bump major.
@
text
@d4 1
a4 1
AC_INIT([libX11], [1.4.2],
d23 1
a23 1
# Require xorg-macros minimum of 1.11 for disabling fop by default
d25 2
a26 2
          [m4_fatal([must install xorg-macros 1.11 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.11)
d29 1
a29 1
XORG_WITH_XMLTO(0.0.20)
d31 2
a32 1
XORG_CHECK_SGML_DOCTOOLS(1.5)
@


1.6
log
@Update to libX11 1.3.6.

Tested by ajacoutot@@, jasper@@ and krw@@.
@
text
@a0 2
#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
d2 4
a5 5
AC_PREREQ(2.60)
AC_INIT([libX11],
        [1.3.6],
        [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],
        libX11)
d7 1
d11 4
d16 1
a18 2
AM_CONFIG_HEADER([src/config.h])
AC_CONFIG_HEADER([include/X11/XlibConf.h])
d20 4
a23 1
# Require xorg-macros: XORG_DEFAULT_OPTIONS
d25 2
a26 7
          [m4_fatal([must install xorg-macros 1.6 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.6)

# Set common system defines for POSIX extensions, such as _GNU_SOURCE
# Must be called before any macros that run the compiler (like AC_PROG_LIBTOOL)
# to avoid autoconf errors.
AC_USE_SYSTEM_EXTENSIONS
d29 4
a32 2
XORG_WITH_GROFF
XORG_WITH_PS2PDF
d34 1
a34 4
# Checks for programs.
AC_PROG_LIBTOOL
DOLT
AC_PROG_CC
d67 1
a67 3
XORG_PROG_RAWCPP

# Find perl for "make check" tests in nls/localerules.in
d69 1
a69 1
	AC_HELP_STRING([--with-perl=<path>],
a75 7
# Build with XCB support?
AC_ARG_WITH(xcb,
	AC_HELP_STRING([--with-xcb], [use XCB for low-level protocol implementation]),
	[ac_cv_use_xcb=$withval], [ac_cv_use_xcb=yes])
AC_CACHE_CHECK([whether to use XCB], [ac_cv_use_xcb], [ac_cv_use_xcb=yes])
AM_CONDITIONAL(XCB, test x$ac_cv_use_xcb != xno)

d79 2
a80 1
X11_REQUIRES='xproto >= 7.0.13 xextproto xtrans'
a83 24
case "$ac_cv_use_xcb" in
no)
	X11_REQUIRES="${X11_REQUIRES} xau xcmiscproto bigreqsproto"
	X11_EXTRA_DEPS="xau"
	PKG_CHECK_MODULES(XDMCP, xdmcp,
		AC_CHECK_LIB(Xdmcp, XdmcpWrap,
			[
			AC_CHECK_LIB(Xdmcp, XdmcpWrap, [xdmauth="yes"], [xdmauth="no"], [$XDMCP_LIBS])
			X11_EXTRA_DEPS="$X11_EXTRA_DEPS xdmcp"
			],
			[
			XDMCP_CFLAGS=
			XDMCP_LIBS=
			], [$XDMCP_LIBS]),
		[AC_MSG_RESULT(no)])
	AC_DEFINE(USE_XCB, 0, [Use XCB for low-level protocol implementation])
	;;
*)
	X11_REQUIRES="${X11_REQUIRES} xcb >= 1.1.92"
	X11_EXTRA_DEPS="xcb >= 1.1.92"
	xdmauth="no" # XCB handles all auth
	AC_DEFINE(USE_XCB, 1, [Use XCB for low-level protocol implementation])
	;;
esac
d86 7
a92 7
dnl Issue an error if xtrans.m4 was not found and XTRANS_CONNECTION_FLAGS macro
dnl was not expanded, since libX11 with no transport types is rather useless.
dnl
dnl If you're seeing an error here, be sure you installed the lib/xtrans module
dnl first and if it's not in the default location, that you set the ACLOCAL
dnl environment variable to find it, such as:
dnl	ACLOCAL="aclocal -I ${PREFIX}/share/aclocal"
d166 1
a166 1
	AC_HELP_STRING([--with-local-transport-order=LIST], [preference sorted list of transport types to try for local connections]),
d196 1
a196 1
	      AC_HELP_STRING([--enable-loadable-i18n],
d214 1
a214 1
	      AC_HELP_STRING([--disable-loadable-xcursor],
a224 1
AC_HEADER_STDC
d241 1
a241 1
dnl AC_PATH_XTRA
d245 2
a246 2
case $target_alias in
  *os2*) os2="true" ; WCHAR32="0" ;;
d265 1
a265 1
              AC_HELP_STRING([--disable-xthreads],
d286 1
a286 1
dnl XXX incomplete, please fill this in
a305 11
case x$xdmauth in
xyes)
	XDMCP_CFLAGS="$XDMCP_CFLAGS -DHASXDMAUTH"
	;;
xno)
	XDMCP_LIBS=""
	;;
esac
AC_SUBST(XDMCP_CFLAGS)
AC_SUBST(XDMCP_LIBS)

d327 1
a327 1
              AC_HELP_STRING([--disable-xcms],
d336 1
a336 1
              AC_HELP_STRING([--disable-xlocale],
d350 1
a350 1
	      AC_HELP_STRING([--enable-xlocaledir],
d359 1
a359 1
	      AC_HELP_STRING([--disable-xf86bigfont],
d363 1
a363 1
    PKG_CHECK_MODULES(BIGFONT, xf86bigfontproto,
a364 2
    AC_SUBST(BIGFONT_CFLAGS)
    AC_SUBST(BIGFONT_LIBS)
d368 1
a368 1
              AC_HELP_STRING([--disable-xkb],
a371 11
AC_ARG_ENABLE(man-pages,
	      AC_HELP_STRING([--enable-man-pages=section],
			     [Choose manual section for installing man pages]),
		[LIBMAN=$enableval],[LIBMAN=yes])

if test "x$LIBMAN" != "xyes"; then
	LIB_MAN_SUFFIX=$LIBMAN
fi

AM_CONDITIONAL(MANPAGES, [ test x$LIBMAN '!=' xno ])

d386 1
a386 1
              AC_HELP_STRING([--disable-composecache],
d393 1
a393 1
dnl Allow checking code with lint, sparse, etc.
d398 1
a398 1
AC_DEFINE_DIR(X11_DATADIR, X11_DATADIR, [Location of libX11 data])
d417 1
a417 1
AC_DEFINE_DIR(XLOCALEDATADIR, X11_LOCALEDATADIR, [Location of libX11 locale data])
d424 1
a424 1
AC_DEFINE_DIR(XLOCALELIBDIR, X11_LOCALELIBDIR, [Location of libX11 locale libraries])
d428 1
a428 1
AC_DEFINE_DIR(XLOCALEDIR, X11_LOCALEDIR, [Location of libX11 locale data])
d432 1
a432 1
AC_DEFINE_DIR(XKEYSYMDB, XKEYSYMDB, [Location of keysym database])
d435 1
a435 1
AC_DEFINE_DIR(XERRORDB, XERRORDB, [Location of error message database])
d439 31
a469 91
AC_OUTPUT([Makefile
           include/Makefile
	   man/Makefile
           man/xkb/Makefile
           src/Makefile
           src/util/Makefile
	   src/xcms/Makefile
	   src/xlibi18n/Makefile
	   modules/Makefile
	   modules/im/Makefile
	   modules/im/ximcp/Makefile
	   modules/lc/Makefile
	   modules/lc/def/Makefile
	   modules/lc/gen/Makefile
	   modules/lc/Utf8/Makefile
	   modules/lc/xlocale/Makefile
	   modules/om/Makefile
	   modules/om/generic/Makefile
	   src/xkb/Makefile
	   nls/Makefile
	   nls/am_ET.UTF-8/Makefile
	   nls/armscii-8/Makefile
	   nls/C/Makefile
	   nls/el_GR.UTF-8/Makefile
	   nls/en_US.UTF-8/Makefile
	   nls/fi_FI.UTF-8/Makefile
	   nls/georgian-academy/Makefile
	   nls/georgian-ps/Makefile
	   nls/ibm-cp1133/Makefile
	   nls/iscii-dev/Makefile
	   nls/isiri-3342/Makefile
	   nls/iso8859-1/Makefile
	   nls/iso8859-10/Makefile
	   nls/iso8859-11/Makefile
	   nls/iso8859-13/Makefile
	   nls/iso8859-14/Makefile
	   nls/iso8859-15/Makefile
	   nls/iso8859-2/Makefile
	   nls/iso8859-3/Makefile
	   nls/iso8859-4/Makefile
	   nls/iso8859-5/Makefile
	   nls/iso8859-6/Makefile
	   nls/iso8859-7/Makefile
	   nls/iso8859-8/Makefile
	   nls/iso8859-9/Makefile
	   nls/iso8859-9e/Makefile
	   nls/ja/Makefile
	   nls/ja.JIS/Makefile
	   nls/ja_JP.UTF-8/Makefile
	   nls/ja.S90/Makefile
	   nls/ja.SJIS/Makefile
	   nls/ja.U90/Makefile
	   nls/ko/Makefile
	   nls/koi8-c/Makefile
	   nls/koi8-r/Makefile
	   nls/koi8-u/Makefile
	   nls/ko_KR.UTF-8/Makefile
	   nls/microsoft-cp1251/Makefile
	   nls/microsoft-cp1255/Makefile
	   nls/microsoft-cp1256/Makefile
	   nls/mulelao-1/Makefile
	   nls/nokhchi-1/Makefile
	   nls/pt_BR.UTF-8/Makefile
	   nls/ru_RU.UTF-8/Makefile
	   nls/tatar-cyr/Makefile
	   nls/th_TH/Makefile
	   nls/th_TH.UTF-8/Makefile
	   nls/tscii-0/Makefile
	   nls/vi_VN.tcvn/Makefile
	   nls/vi_VN.viscii/Makefile
	   nls/zh_CN/Makefile
	   nls/zh_CN.gb18030/Makefile
	   nls/zh_CN.gbk/Makefile
	   nls/zh_CN.UTF-8/Makefile
	   nls/zh_HK.big5/Makefile
	   nls/zh_HK.big5hkscs/Makefile
	   nls/zh_HK.UTF-8/Makefile
	   nls/zh_TW/Makefile
	   nls/zh_TW.big5/Makefile
	   nls/zh_TW.UTF-8/Makefile
	   specs/Makefile
	   specs/i18n/Makefile
	   specs/libX11/Makefile
	   specs/XIM/Makefile
	   x11.pc
	   x11-xcb.pc])

man_pages_suffix=$LIB_MAN_SUFFIX
if test -z "$man_pages_suffix"; then
    man_pages_suffix=none
fi
a474 1
echo " Use XCB:                                 "$ac_cv_use_xcb
a482 1
echo " Manual pages suffix:                     "$man_pages_suffix
@


1.5
log
@Update to libX11 1.3.5
@
text
@d6 1
a6 1
        [1.3.5],
d357 12
a368 9
AC_MSG_CHECKING([keysymdef.h])
dir=`$PKG_CONFIG --variable=includedir xproto`
KEYSYMDEF="$dir/X11/keysymdef.h"
if test -f "$KEYSYMDEF"; then
        AC_MSG_RESULT([$KEYSYMDEF])
else
	AC_MSG_ERROR([Cannot find keysymdef.h])
fi
AC_SUBST(KEYSYMDEF)
@


1.4
log
@Update to libX11 1.3.3. Tested on a bulk ports build by naddy@@.
@
text
@d6 1
a6 1
        1.3.3,
d10 4
a14 1

a15 1

d21 2
a22 2
          [m4_fatal([must install xorg-macros 1.4 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.4)
d29 3
d37 1
d48 21
d137 1
d143 33
a175 1
		DEFAULT_LOCAL_TRANS="UNIX_TRANS,LOCAL_TRANS,TCP_TRANS"
d178 17
a194 4
		if test "$LOCALCONN" = "yes"; then
			DEFAULT_LOCAL_TRANS="LOCAL_TRANS,UNIX_TRANS,TCP_TRANS"
		else
			DEFAULT_LOCAL_TRANS="UNIX_TRANS,TCP_TRANS"
d291 1
a291 1
	AC_CHECK_PROG(LAUNCHD, [launchd], [yes], [no])
d358 1
a358 1
dir=`pkg-config --variable=includedir xproto`
d458 1
a458 1
AC_DEFINE_DIR(X11_LIBDIR, X11_LIBDIR, [Location of libX11 library data])
d462 1
a462 3
X11_CFLAGS="$CWARNFLAGS $X11_CFLAGS $XTHREAD_CFLAGS"
AC_SUBST(X11_CFLAGS)
AC_SUBST(X11_LIBS)
a494 39
# Specification documents are currently provided in troff format
AC_ARG_VAR([GROFF], [Path to a groff executable that supports -ms])
AC_PATH_PROGS([GROFF], [groff], [none], [$PATH:/usr/gnu/bin])

AC_ARG_VAR([PS2PDF], [Path to a ps2pdf executable])
AC_PATH_PROGS([PS2PDF], [ps2pdf], [none], [$PATH:/usr/gnu/bin])

if test "x${GROFF}" != xnone ; then
    AC_MSG_CHECKING([whether ${GROFF} -ms works])
    if ${GROFF} -ms -I. /dev/null >/dev/null 2>&1 ; then
        groff_ms_works=yes
    else
        groff_ms_works=no
        GROFF=none
    fi
    AC_MSG_RESULT([${groff_ms_works}])
fi

AC_MSG_CHECKING([whether to build specifications])
AC_ARG_ENABLE(specs, AC_HELP_STRING([--enable-specs],
                                   [Enable building of specification docs]),
              [build_specs="${enableval}"], [build_specs="auto"])

if test "x${build_specs}" = xauto; then
    if test "x${GROFF}" = xnone ; then
        build_specs=no
    else
        build_specs=yes
    fi
fi
AC_MSG_RESULT([${build_specs}])
if test "x${build_specs}" = xyes && test "x${GROFF}" = xnone ; then
    AC_MSG_ERROR([can't build documentation without groff])
fi

AM_CONDITIONAL(BUILD_SPECS, [test x$build_specs = xyes])
AM_CONDITIONAL(HAVE_PS2PDF, [test x$PS2PDF != xnone])


d582 1
a582 1
man_pages_suffix=$LIBMAN_SUFFIX
d602 1
@


1.3
log
@update to libX11 1.2.1
@
text
@d4 1
a4 1
AC_PREREQ(2.57)
d6 1
a6 1
        1.2.1,
d10 1
a10 1
AM_INIT_AUTOMAKE([dist-bzip2 foreign])
d17 10
a26 3
# Require xorg-macros: XORG_CWARNFLAGS, XORG_CHANGELOG, XORG_WITH_LINT
m4_ifndef([XORG_MACROS_VERSION], [AC_FATAL([must install xorg-macros 1.2 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.2)
a31 1
XORG_CWARNFLAGS
d44 9
d61 5
a65 2
PKG_CHECK_MODULES(XPROTO, [xproto >= 7.0.13])
AC_SUBST(XPROTO_CFLAGS)
d69 13
a81 4
	X11_REQUIRES="xau xcmiscproto bigreqsproto"
	X11_EXTRA_DEPS="xau xdmcp"
	PKG_CHECK_MODULES(XDMCP, xdmcp)
	AC_CHECK_LIB(Xdmcp, XdmcpWrap, [xdmauth="yes"], [xdmauth="no"], [$XDMCP_LIBS])
d85 1
a85 1
	X11_REQUIRES="xcb >= 1.1.92"
a91 1
PKG_CHECK_MODULES(X11, xextproto xtrans $X11_REQUIRES)
d100 1
a100 1
m4_pattern_forbid(XTRANS_CONNECTION_FLAGS)
d187 1
a187 1
dnl AC_CHECK_HEADERS([stdio.h stdlib.h math.h])
a266 1
X11_CFLAGS="$X11_CFLAGS $XTHREAD_CFLAGS"
a343 2
XORG_MANPAGE_SECTIONS

d358 1
a358 1
   PKG_CHECK_MODULES(XKBPROTO, kbproto inputproto)
a359 2
   X11_CFLAGS="$X11_CFLAGS $XKBPROTO_CFLAGS"
   X11_LIBS="$X11_LIBS $XKBPROTO_LIBS"
a378 16
LINT_FLAGS="${LINT_FLAGS} ${X11_CFLAGS} ${XPROTO_CFLAGS}"

if test "x$GCC" = "xyes"; then
	GCC_WARNINGS="-Wall -Wpointer-arith -Wstrict-prototypes \
	-Wmissing-prototypes -Wmissing-declarations \
	-Wnested-externs -fno-strict-aliasing"
	X11_CFLAGS="$GCC_WARNINGS $X11_CFLAGS"
fi

AC_TRY_COMPILE([
#include <features.h>
#ifndef __GLIBC__
#error not glibc
#endif
], [], [AC_DEFINE(_GNU_SOURCE, 1,
    [ Enable GNU and other extensions to the C environment for glibc])])
d388 2
a389 1
X11_CFLAGS="$CWARNFLAGS $X11_CFLAGS $XPROTO_CFLAGS"
d422 39
a461 3
XORG_CHECK_MALLOC_ZERO
XORG_RELEASE_VERSION
XORG_CHANGELOG
d543 4
@


1.2
log
@Update to libX11 1.1.4. I've carefully checked that there's no API/ABI
change in this version. Only small bug fixes, manual page fixes and
some more data in the i18n tables.
@
text
@d6 1
a6 1
        1.1.4,
d17 3
a19 3
# Require xorg-macros version 1.1.0 or newer for XORG_WITH_LINT macro
m4_ifndef([XORG_MACROS_VERSION], [AC_FATAL([must install xorg-macros 1.1 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.1)
d23 1
d25 10
d46 1
a46 1
PKG_CHECK_MODULES(XPROTO, [xproto >= 7.0.6])
d52 1
d58 2
a59 2
	X11_REQUIRES="xcb-xlib >= 0.9.92"
	X11_EXTRA_DEPS="xcb-xlib"
d82 26
d144 1
a144 1
	       
d158 1
a158 1
		  
d209 1
a209 1
	AC_DEFINE(XTHREADS,[],[Whether libX11 is compiled with thread support])
d212 1
a212 1
	AC_DEFINE(XUSE_MTSAFE_API,[],[Whether libX11 needs to use MT safe API's])
a217 2
AC_SUBST(XTHREADS)
AC_SUBST(XUSE_MTSAFE_API)
a258 1
KEYSYMDEF=""
d260 5
a264 17
for flag in $XPROTO_CFLAGS -I/usr/include; do
	case "$KEYSYMDEF" in
	"")
		case "$flag" in
		*-I*)
			dir=`echo "$flag" | sed 's/ *-I//'`
			file="$dir/X11/keysymdef.h"
			if test -f "$file"; then
				KEYSYMDEF="$file"
			fi
			;;
		esac
		;;
	esac
done
case "$KEYSYMDEF" in
"")
d266 1
a266 5
	;;
*)
	AC_MSG_RESULT([$KEYSYMDEF])
        ;;
esac
d271 1
a271 1
AC_ARG_ENABLE(xcms, 
d314 1
a314 1
AC_ARG_ENABLE(xkb, 
d321 2
a322 2
AC_ARG_ENABLE(man-pages, 
	      AC_HELP_STRING([--enable-man-pages=section], 
d325 1
a325 1
		
d347 1
a347 1
AC_ARG_ENABLE(composecache, 
d383 1
a383 2
X11_CFLAGS="$X11_CFLAGS $XPROTO_CFLAGS"

d399 4
a402 1
X11_LOCALELIBDIR="${X11_LIBDIR}/locale"
d419 1
d424 1
a424 1
           man/xkb/Makefile	   
d446 1
d484 1
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
        1.0.99.2,
d17 4
d47 1
d52 1
d151 11
d191 3
d315 2
a316 2
   XKBPROTO_REQUIRES="kbproto inputproto"
   PKG_CHECK_MODULES(XKBPROTO, $XKBPROTO_REQUIRES)
d338 1
d348 8
d365 1
d402 1
d419 1
d480 5
d498 1
a498 1
echo " Manual pages installed:                  "$LIBMAN_SUFFIX
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@Import libX11 1.1.1 from X.Org 7.2RC3
@
text
@d6 1
a6 1
        1.1.1,
a42 1
	X11_EXTRA_DEPS="xcb-xlib"
a46 1
AC_SUBST(X11_EXTRA_DEPS)
d295 2
a296 2
   XKBPROTO_REQUIRES="kbproto"
   PKG_CHECK_MODULES(XKBPROTO, kbproto inputproto)
@


1.1.1.3
log
@libX11 1.1.3
@
text
@d6 1
a6 1
        1.1.3,
a175 3
    netbsd*)
	XTHREAD_CFLAGS="-D_POSIX_THREAD_SAFE_FUNCTIONS"
	XTHREADLIB="-lpthread" ;;
a328 8
AC_TRY_COMPILE([
#include <features.h>
#ifndef __GLIBC__
#error not glibc
#endif
], [], [AC_DEFINE(_GNU_SOURCE, 1,
    [ Enable GNU and other extensions to the C environment for glibc])])

a373 1
           man/xkb/Makefile	   
a449 5
man_pages_suffix=$LIBMAN_SUFFIX
if test -z "$man_pages_suffix"; then
    man_pages_suffix=none
fi

d463 1
a463 1
echo " Manual pages suffix:                     "$man_pages_suffix
@


