head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.2
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2015.04.06.20.57.58;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	L5f7tv2EiGjtzoSu;

1.2
date	2012.03.27.19.19.38;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.30.19.19.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to libX11 1.6.3
@
text
@<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
	  "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<chapter id='Initialization_and_General_Programming_Information'>
<title>Initialization and General Programming Information</title>
<sect1 id='Extension_Header_Files'>
<title>Extension Header Files</title>
<para>
The following include files are part of the Xkb standard:
</para>
<itemizedlist>
  <listitem>
    <para>
<filename class="headerfile">&lt;X11/XKBlib.h&gt;</filename>
    </para>
    <para><filename class="headerfile">XKBlib.h</filename>
is the main header file for Xkb; it declares constants, types, and
functions.
    </para>
  </listitem>
  <listitem>
    <para>
<filename class="headerfile">&lt;X11/extensions/XKBstr.h&gt;</filename>
    </para>
    <para>
<filename class="headerfile">XKBstr.h</filename> declares types and
constants for Xkb. It is included automatically from
<filename class="headerfile">&lt;X11/XKBlib.h&gt;</filename>;
you should never need to reference it directly in your application code.
    </para>
  </listitem>
  <listitem>
    <para>
<filename class="headerfile">&lt;X11/extensions/XKB.h&gt;</filename>
    </para>
    <para>
<filename class="headerfile">XKB.h</filename>
defines constants for Xkb. It is included automatically from
<filename class="headerfile">&lt;X11/XKBstr.h&gt;</filename>;
you should never need to reference it directly in your application code.
    </para>
  </listitem>
  <listitem>
    <para>
<filename class="headerfile">&lt;X11/extensions/XKBgeom.h&gt;</filename>
   </para>
   <para><filename class="headerfile">XKBgeom.h</filename>
declares types, symbolic constants, and functions for manipulating
keyboard geometry descriptions.
    </para>
  </listitem>
</itemizedlist>
</sect1>
<sect1 id='Extension_Name'>
<title>Extension Name</title>
<indexterm significance="preferred" zone="Extension_Name"><primary><symbol>XkbName</symbol></primary></indexterm>
<para>
The name of the Xkb extension is given in
<filename class="headerfile">&lt;X11/extensions/Xkb.h&gt;</filename>:

<programlisting>
#define XkbName "XKEYBOARD"
</programlisting>
</para>

<para>
Most extensions to the X protocol are initialized by calling
<function>XInitExtension</function>
and passing the extension name. However, as explained in <link linkend="Initializing_the_Keyboard_Extension">section 2.4</link>, Xkb
requires a more complex initialization sequence, and a client program should
not call
<function>XInitExtension</function>
directly.
</para>
</sect1>
<sect1 id='Determining_Library_Compatibility'>
<title>Determining Library Compatibility</title>
<para>
If an application is dynamically linked, both the X server and the client-side
X library must contain the Xkb extension in order for the client to use the Xkb
extension capabilities. Therefore a dynamically linked application must check
both the library and the server for compatibility before using Xkb function
calls. A properly written program must check for compatibility between the
version of the Xkb library that is dynamically loaded and the one used when the
application was built. It must then check the server version for compatibility
with the version of Xkb in the library.
</para>
<para>
If your application is statically linked, you must still check for server
compatibility and may check library compatibility. (It is possible to compile
against one set of header files and link against a different, incompatible,
version of the library, although this should not normally occur.)
</para>
<para>
To determine the compatibility of a library at runtime, call
<function>XkbLibraryVersion</function>.
</para>
<indexterm significance="preferred" zone="XkbLibraryVersion"><primary><function>XkbLibraryVersion</function></primary></indexterm>
<funcsynopsis id="XkbLibraryVersion">
  <funcprototype>
    <funcdef>Bool <function>XkbLibraryVersion</function></funcdef>
<!-- (
<parameter>lib_major_in_out</parameter>,
<parameter>lib_minor_in_out</parameter>
) -->

    <paramdef>int *<parameter>lib_major_in_out</parameter></paramdef>
    <paramdef>int *<parameter>lib_minor_in_out</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>lib_major_in_out</parameter>
    </term>
    <listitem>
      <para>
        specifies and returns the major Xkb library version.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>lib_minor_in_out</parameter>
    </term>
    <listitem>
      <para>
        specifies and returns the minor Xkb library version.
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
Pass the symbolic value
<symbol>XkbMajorVersion</symbol>
in
<parameter>lib_major_in_out</parameter>
and
<symbol>XkbMinorVersion</symbol>
in
<parameter>lib_minor_in_out</parameter>.
These arguments represent the version of the library used at compile time.
The
<function>XkbLibraryVersion</function>
function backfills the major and minor version numbers of the library used at
run time in
<parameter>lib_major_in_out</parameter>
and
<parameter>lib_minor_in_out</parameter>.
If the versions of the compile time and run time libraries are compatible,
<function>XkbLibraryVersion</function>
returns
<symbol>True</symbol>,
otherwise, it returns
<symbol>False</symbol>.
</para>

<para>
In addition, in order to use the Xkb extension, you must ensure that the
extension is present in the server and that the server supports the version of
the extension expected by the client. Use
<function>XkbQueryExtension</function>
to do this, as described in the next section.
</para>

</sect1>
<sect1 id='Initializing_the_Keyboard_Extension'>
<title>Initializing the Keyboard Extension</title>
<para>
Call
<function>XkbQueryExtension</function>
to check for the presence and compatibility of the extension in the server and
to initialize the extension. Because of potential version mismatches, you
cannot use the generic extension mechanism functions
(<function>XQueryExtension</function>
and
<function>XInitExtension</function>)
for checking for the presence of, and initializing the Xkb extension.
</para>

<para>
You must call
<function>XkbQueryExtension</function>
or
<function>XkbOpenDisplay</function>
before using any other Xkb library interfaces, unless such usage is explicitly
allowed in the interface description in this document. The exceptions are:
<function>XkbIgnoreExtension</function>,
<function>XkbLibraryVersion</function>,
and a handful of audible-bell functions. You should not use any other Xkb
functions if the extension is not present or is uninitialized. In general,
calls to Xkb library functions made prior to initializing the Xkb extension
cause
<errorname>BadAccess</errorname>
protocol errors.
<indexterm zone="Initializing_the_Keyboard_Extension"><primary>errors</primary>
<secondary><errorname>BadAccess</errorname></secondary></indexterm>
<indexterm zone="Initializing_the_Keyboard_Extension">
<primary><errorname>BadAccess</errorname></primary></indexterm>
</para>

<para>
<function>XkbQueryExtension</function>
both determines whether a compatible Xkb extension is present in the X server
and initializes the extension when it is present.
</para>

<indexterm significance="preferred" zone="XkbQueryExtension"><primary><function>XkbQueryExtension</function></primary></indexterm>
<funcsynopsis id="XkbQueryExtension">
  <funcprototype>
    <funcdef>Bool <function>XkbQueryExtension</function></funcdef>
<!-- (
<parameter>dpy, opcode_rtrn, event_rtrn, error_rtrn, major_in_out, minor_in_out</parameter>
) -->

    <paramdef>Display *<parameter>dpy</parameter></paramdef>
    <paramdef>int *<parameter>opcode_rtrn</parameter></paramdef>
    <paramdef>int *<parameter>event_rtrn</parameter></paramdef>
    <paramdef>int *<parameter>error_rtrn</parameter></paramdef>
    <paramdef>int *<parameter>major_in_out</parameter></paramdef>
    <paramdef>int *<parameter>minor_in_out</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>dpy</parameter>
    </term>
    <listitem>
      <para>
        connection to the X server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>opcode_rtrn</parameter>
    </term>
    <listitem>
      <para>
        backfilled with the major extension opcode
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>event_rtrn</parameter>
    </term>
    <listitem>
      <para>
        backfilled with the extension base event code
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>error_rtrn</parameter>
    </term>
    <listitem>
      <para>
        backfilled with the extension base error code
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>major_in_out</parameter>
    </term>
    <listitem>
      <para>
        compile time lib major version in, server major version out
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>minor_in_out</parameter>
    </term>
    <listitem>
      <para>
        compile time lib min version in, server minor version out
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
The
<function>XkbQueryExtension</function>
function determines whether a compatible version of the X Keyboard Extension
is present in the server. If a compatible extension is present,
<function>XkbQueryExtension</function>
returns
<symbol>True</symbol>;
otherwise, it returns
<symbol>False</symbol>.
</para>

<para>
If a compatible version of Xkb is present,
<function>XkbQueryExtension</function>
initializes the extension. It backfills the major opcode for the keyboard
extension in
<parameter>opcode_rtrn</parameter>,
the base event code in
<parameter>event_rtrn</parameter>,
the base error code in
<parameter>error_rtrn</parameter>,
and the major and minor version numbers of the extension in
<parameter>major_in_out</parameter>
and
<parameter>minor_in_out</parameter>.
The major opcode is reported in the
<structfield>req_major</structfield>
fields of some Xkb events. For a discussion of the base event code, see
<link linkend="Xkb_Event_Types">section 4.1</link>.
</para>

<para>
As a convenience, you can use the function
<function>XkbOpenDisplay</function>
to perform these three tasks at once: open a connection to an X server, check
for a compatible version of the Xkb extension in both the library and the
server, and initialize the extension for use.
</para>

<indexterm significance="preferred" zone="XkbOpenDisplay"><primary><function>XkbOpenDisplay</function></primary></indexterm>
<funcsynopsis id="XkbOpenDisplay">
  <funcprototype>
    <funcdef>Display *<function>XkbOpenDisplay</function></funcdef>
<!-- (
<parameter>display_name, event_rtrn, error_rtrn, major_in_out, minor_in_out,
reason_rtrn)</parameter> -->

    <paramdef>char *<parameter>display_name</parameter></paramdef>
    <paramdef>int *<parameter>event_rtrn</parameter></paramdef>
    <paramdef>int *<parameter>error_rtrn</parameter></paramdef>
    <paramdef>int *<parameter>major_in_out</parameter></paramdef>
    <paramdef>int *<parameter>minor_in_out</parameter></paramdef>
    <paramdef>int *<parameter>reason_rtrn</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>display_name</parameter>
    </term>
    <listitem>
      <para>
        hardware display name, which determines the display and
        communications domain to be used
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>event_rtrn</parameter>
    </term>
    <listitem>
      <para>
        backfilled with the extension base event code
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>error_rtrn</parameter>
    </term>
    <listitem>
      <para>
        backfilled with the extension base error code
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>major_in_out</parameter>
    </term>
    <listitem>
      <para>
        compile time lib major version in, server major version out
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>minor_in_out</parameter>
    </term>
    <listitem>
      <para>
        compile time lib minor version in, server minor version out
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>reason_rtrn</parameter>
    </term>
    <listitem>
      <para>
        backfilled with a status code
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
<function>XkbOpenDisplay</function>
is a convenience function that opens an X display connection and initializes
the X keyboard extension. In all cases, upon return
<parameter>reason_rtrn</parameter>
contains a status value indicating success or the type of failure. If
<parameter>major_in_out</parameter>
and
<parameter>minor_in_out</parameter>
are not
<symbol>NULL</symbol>,
<function>XkbOpenDisplay</function>
first calls
<function>XkbLibraryVersion</function>
to determine whether the client library is compatible, passing it the values
pointed to by
<parameter>major_in_out</parameter>
and
<parameter>minor_in_out</parameter>.
If the library is incompatible,
<function>XkbOpenDisplay</function>
backfills
<parameter>major_in_out</parameter>
and
<parameter>minor_in_out</parameter>
with the major and minor extension versions of the library being used and
returns
<symbol>NULL</symbol>.
If the library is compatible,
<function>XkbOpenDisplay</function>
next calls
<function>XOpenDisplay</function>
with the
<parameter>display_name</parameter>.
If this fails, the function returns
<symbol>NULL</symbol>.
If successful,
<function>XkbOpenDisplay</function>
calls
<function>XkbQueryExtension</function>
and
backfills the major and minor Xkb server extension version numbers in
<parameter>major_in_out</parameter>
and
<parameter>minor_in_out</parameter>.
If the server extension version is not compatible with the library extension
version or if the server extension is not present,
<function>XkbOpenDisplay</function>
closes the display and returns
<symbol>NULL</symbol>.
When successful, the function returns the display connection.
</para>

<para>
The possible values for
<parameter>reason_rtrn</parameter> are:
</para>

<itemizedlist>
<listitem>
  <para>
<errorname>XkbOD_BadLibraryVersion</errorname>
indicates
<function>XkbLibraryVersion</function>
returned
<symbol>False</symbol>.
  </para>
</listitem>
<listitem>
  <para>
<errorname>XkbOD_ConnectionRefused</errorname>
indicates the display could not be opened.
  </para>
</listitem>
<listitem>
  <para>
<errorname>XkbOD_BadServerVersion</errorname>
indicates the library and the server have incompatible extension versions.
  </para>
</listitem>
<listitem>
  <para>
<errorname>XkbOD_NonXkbServer</errorname>
indicates the extension is not present in the X server.
  </para>
</listitem>
<listitem>
  <para>
<errorname>XkbOD_Success</errorname>
indicates that the function succeeded.
  </para>
</listitem>
</itemizedlist>
</sect1>

<sect1 id='Disabling_the_Keyboard_Extension'>
<title>Disabling the Keyboard Extension</title>
<para>
If a server supports the Xkb extension, the X library normally implements
preXkb keyboard functions using the Xkb keyboard description and state. The
server Xkb keyboard state may differ from the preXkb keyboard state. This
difference does not affect most clients, but there are exceptions. To allow
these clients to work properly, you may instruct the extension not to use Xkb
functionality.
</para>

<para>
Call
<function>XkbIgnoreExtension</function>
to prevent core X library keyboard functions from using the X Keyboard
Extension. You must call
<function>XkbIgnoreExtension</function>
before you open a server connection; Xkb does not provide a way to enable or
disable use of the extension once a connection is established.
</para>

<indexterm significance="preferred" zone="XkbIgnoreExtension"><primary><function>XkbIgnoreExtension</function></primary></indexterm>
<funcsynopsis id="XkbIgnoreExtension">
  <funcprototype>
    <funcdef>Bool <function>XkbIgnoreExtension</function></funcdef>
<!-- (
<parameter>ignore</parameter>
) -->

    <paramdef>Bool <parameter>ignore</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>ignore</parameter>
    </term>
    <listitem>
      <para>
        <symbol>True</symbol> means ignore the extension
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
<function>XkbIgnoreExtension</function>
tells the X library whether to use the X Keyboard Extension on any
subsequently opened X display connections. If ignore is
<symbol>True</symbol>,
the library does not initialize the Xkb extension when it opens a new
display. This forces the X server to use compatibility mode and communicate
with the client using only core protocol requests and events. If ignore is
<symbol>False</symbol>,
the library treats subsequent calls to
<function>XOpenDisplay</function>
normally and uses Xkb extension requests, events, and state. Do not explicitly
use Xkb on a connection for which it is disabled.
<function>XkbIgnoreExtension</function>
returns
<symbol>False</symbol>
if it was unable to apply the ignore request.
</para>

</sect1>
<sect1 id='Protocol_Errors'>
<title>Protocol Errors</title>
<indexterm significance="preferred" zone="Protocol_Errors">
<primary>errors</primary></indexterm>

<para>
Many of the Xkb extension library functions described in this document can
cause the X server to report an error, referred to in this document as a
<errorname>Bad<replaceable>Xxx</replaceable></errorname>
protocol error, where
<replaceable>Xxx</replaceable>
is some name. These errors are fielded in the normal manner, by the default
Xlib error handler or one replacing it. Note that X protocol errors are not
necessarily reported immediately because of the buffering of X protocol
requests in Xlib and the server.
</para>

<para>
<link linkend="table2.1">Table 2.1</link>
lists the protocol errors that can be generated, and their causes.
</para>

<table id='table2.1' frame='topbot'>
<title>Xkb Protocol Errors</title>
<?dbfo keep-together="always" ?>
<tgroup cols='2' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<colspec colname='c2' colwidth='3.0*'/>
<thead>
  <row rowsep='1'>
    <entry>Error</entry>
    <entry>Cause</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry><errorname>BadAccess</errorname></entry>
    <entry>
<para>
The Xkb extension has not been properly initialized
</para>
    </entry>
  </row>
  <row>
    <entry><errorname>BadKeyboard</errorname></entry>
    <entry>
<para>
The device specified was not a valid core or input extension device
</para>
    </entry>
  </row>
  <row>
    <entry><errorname>BadImplementation</errorname></entry>
    <entry>
<para>
Invalid reply from server
</para>
    </entry>
  </row>
  <row>
    <entry><errorname>BadAlloc</errorname></entry>
    <entry>
<para>
Unable to allocate storage
</para>
    </entry>
  </row>
  <row>
    <entry><errorname>BadMatch</errorname></entry>
    <entry>
<para>
A compatible version of Xkb was not available in the server or an argument has
correct type and range, but is otherwise invalid
</para>
    </entry>
  </row>
  <row>
    <entry><errorname>BadValue</errorname></entry>
    <entry>
<para>
An argument is out of range
</para>
    </entry>
  </row>
  <row>
    <entry><errorname>BadAtom</errorname></entry>
    <entry>
<para>
A name is neither a valid Atom or
<symbol>None</symbol>
</para>
    </entry>
  </row>
  <row>
    <entry><errorname>BadDevice</errorname></entry>
    <entry>
<para>
Device, Feedback Class, or Feedback ID invalid
</para>
    </entry>
  </row>
</tbody>
</tgroup>
</table>

<para id='BadKeyboard'>
<indexterm zone="BadKeyboard"><primary>errors</primary>
<secondary><errorname>BadKeyboard</errorname></secondary></indexterm>
<indexterm zone="BadKeyboard">
<primary><errorname>BadKeyboard</errorname></primary></indexterm>
The Xkb extension adds a single protocol error,
<errorname>BadKeyboard</errorname>,
to the core protocol error set. This error code will be reported as the
<parameter>error_rtrn</parameter>
when
<function>XkbQueryExtension</function>
is called. When a
<errorname>BadKeyboard</errorname>
error is reported in an
<structname>XErrorEvent</structname>,
additional information is reported in the
<structfield>resourceid</structfield>
field. The most significant byte of the
<structfield>resource_id</structfield>
is a further refinement of the error cause, as defined in
<link linkend="table2.2">Table 2.2</link>. The least
significant byte will contain the device, class, or feedback ID as indicated in
the table.
</para>

<table id='table2.2' frame='topbot'>
<title><errorname>BadKeyboard</errorname> Protocol Error resource_id Values</title>
<?dbfo keep-together="always" ?>
<tgroup cols='4' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='2.0*'/>
<colspec colname='c2' colwidth='1.0*'/>
<colspec colname='c3' colwidth='3.0*'/>
<colspec colname='c4' colwidth='2.0*'/>
<thead>
  <row rowsep='1'>
    <entry>high-order byte</entry>
    <entry>value</entry>
    <entry>meaning</entry>
    <entry>low-order byte</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry><errorname>XkbErr_BadDevice</errorname></entry>
    <entry>0xff</entry>
    <entry>
<para>
device not found
</para>
    </entry>
    <entry>device ID</entry>
  </row>
  <row>
    <entry><errorname>XkbErr_BadClass</errorname></entry>
    <entry>0xfe</entry>
    <entry>
<para>
device found, but it is of the wrong class
</para>
    </entry>
    <entry>class ID</entry>
  </row>
  <row>
    <entry><errorname>XkbErr_BadId</errorname></entry>
    <entry>0xfd</entry>
    <entry>
<para>
device found, class ok, but device does not contain a feedback with the
indicated ID
</para>
    </entry>
    <entry>feedback ID</entry>
  </row>
</tbody>
</tgroup>
</table>
</sect1>

<sect1 id='Display_and_Device_Specifications_in_Function_Calls'>
<title>Display and Device Specifications in Function Calls</title>
<para>
Where a connection to the server is passed as an argument (Display*) and an
<type>XkbDescPtr</type>
is also passed as an argument, the Display* argument must match the
<structfield>dpy</structfield>
field of the
<structname>XkbDescRec</structname>
pointed to by the
<type>XkbDescPtr</type>
argument, or else the
<structfield>dpy</structfield>
field of the
<structname>XkbDescRec</structname>
must be
<symbol>NULL</symbol>.
If they don’t match or the
<structfield>dpy</structfield>
field is not
<symbol>NULL</symbol>,
a
<errorname>BadMatch</errorname>
error is returned (either in the return value or a backfilled
<type>Status</type>
variable). Upon successful return, the
<structfield>dpy</structfield>
field of the
<structname>XkbDescRec</structname>
always contains the Display* value passed in.
</para>

<para>
The Xkb extension can communicate with the X input extension if it is present.
Consequently, there can potentially be more than one input device connected to
the server. Most Xkb library calls that require communicating with the server
involve both a server connection (Display *
<structfield>dpy</structfield>)
and a device identifier (unsigned int
<structfield>device_spec</structfield>).
In some cases, the device identifier is implicit and is taken as the
<structfield>device_spec</structfield>
field of an
<structname>XkbDescRec</structname>
structure passed as an argument.
</para>

<para id='XkbUseCoreKbd'>
<indexterm significance="preferred" zone="XkbUseCoreKbd"><primary><symbol>XkbUseCoreKbd</symbol></primary></indexterm>
The device identifier can specify any X input extension device with a
<symbol>KeyClass</symbol>
component, or it can specify the constant,
<symbol>XkbUseCoreKbd</symbol>.
The use of
<symbol>XkbUseCoreKbd</symbol>
allows applications to indicate the core keyboard without having to determine
its device identifier.
</para>

<para>
Where an Xkb device identifier is passed as an argument and an
<type>XkbDescPtr</type>
is also passed as an argument, if either the argument or the
<structname>XkbDescRec</structname>
<structfield>device_spec</structfield>
field is
<symbol>XkbUseCoreKbd</symbol>,
and if the function returns successfully, the
<type>XkbDescPtr</type>
<structfield>device_spec</structfield>
field will have been converted from
<symbol>XkbUseCoreKbd</symbol>
to a real Xkb device ID. If the function does not complete successfully, the
<structfield>device_spec</structfield>
field remains unchanged. Subsequently, the device id argument must match the
<structfield>device_spec</structfield>
field of the
<type>XkbDescPtr</type>
argument. If they don’t match, a
<errorname>BadMatch</errorname>
error is returned (either in the return value or a backfilled
<type>Status</type>
variable).
</para>

<para>
When the Xkb extension in the server hands an application a device identifier
to use for the keyboard, that ID is the input extension identifier for the
device if the server supports the X Input Extension. If the server does not
support the input extension, the meaning of the identifier is undefined — the
only guarantee is that when you use
<symbol>XkbUseCoreKbd</symbol>,
<symbol>XkbUseCoreKbd</symbol>
will work and the identifier returned by the server will refer to the core
keyboard device.
</para>
</sect1>
</chapter>
@


1.2
log
@Upate to libX11 1.5rc1. Tested by krw@@, mpi@@, shadchin@@.
@
text
@d1 3
d14 1
a14 1
<emphasis>&lt;X11/XKBlib.h&gt;</emphasis>
d16 1
a16 1
    <para><emphasis>XKBlib.h</emphasis>
d23 1
a23 1
<emphasis>&lt;X11/extensions/XKBstr.h&gt;</emphasis>
d26 1
a26 1
<emphasis>XKBstr.h</emphasis> declares types and
d28 2
a29 2
<emphasis>&lt;X11/XKBlib.h&gt;</emphasis>
; you should never need to reference it directly in your application code.
d34 1
a34 1
<emphasis>&lt;X11/extensions/XKB.h&gt;</emphasis>
d37 4
a40 4
<emphasis>XKB.h</emphasis>
defines constants for Xkb. It is included automatically from <emphasis>
&lt;X11/XKBstr.h&gt;</emphasis>
; you should never need to reference it directly in your application code.
d45 1
a45 1
<emphasis>&lt;X11/extensions/XKBgeom.h&gt;</emphasis>
d47 1
a47 1
   <para><emphasis>XKBgeom.h</emphasis>
d56 1
d58 2
a59 3
The name of the Xkb extension is given in <emphasis>
&lt;X11/extensions/Xkb.h&gt;:</emphasis>
</para>
d61 3
a63 3
<para>
<emphasis>
#define XkbName "XKEYBOARD"</emphasis>
d67 3
a69 3
Most extensions to the X protocol are initialized by calling <emphasis>
XInitExtension</emphasis>
 and passing the extension name. However, as explained in section 2.4, Xkb
d71 3
a73 3
not call <emphasis>
XInitExtension</emphasis>
 directly.
d95 2
a96 2
To determine the compatibility of a library at runtime, call <emphasis>
XkbLibraryVersion</emphasis>.
d98 48
a145 46
<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Bool <emphasis>
XkbLibraryVersion</emphasis>
(<emphasis>
lib_major_in_out</emphasis>
, <emphasis>
lib_minor_in_out</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int *      <emphasis>
lib_major_in_out;</emphasis>
                  /* specifies and returns the major Xkb library version. */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int *      <emphasis>
lib_minor_in_out;</emphasis>
                  /* specifies and returns the minor Xkb library version. */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
Pass the symbolic value <emphasis>
XkbMajorVersion</emphasis>
 in <emphasis>
lib_major_in_out</emphasis>
 and <emphasis>
XkbMinorVersion</emphasis>
 in <emphasis>
lib_minor_in_out</emphasis>
. These arguments represent the version of the library used at compile time.
The <emphasis>
XkbLibraryVersion </emphasis>
d147 10
a156 11
run time in <emphasis>
lib_major_in_out</emphasis>
 and <emphasis>
lib_minor_in_out</emphasis>
. If the versions of the compile time and run time libraries are compatible,
<emphasis>
XkbLibraryVersion </emphasis>
returns <emphasis>
True</emphasis>
, otherwise, it returns <emphasis>
False.</emphasis>
d162 3
a164 3
the extension expected by the client. Use <emphasis>
XkbQueryExtension</emphasis>
 to do this, as described in the next section.
d171 3
a173 3
Call <emphasis>
XkbQueryExtension</emphasis>
 to check for the presence and compatibility of the extension in the server and
d175 5
a179 5
cannot use the generic extension mechanism functions (<emphasis>
XQueryExtension </emphasis>
and<emphasis>
 XInitExtension</emphasis>
) for checking for the presence of, and initializing the Xkb extension.
d183 5
a187 5
You must call <emphasis>
XkbQueryExtension</emphasis>
 or <emphasis>
XkbOpenDisplay</emphasis>
 before using any other Xkb library interfaces, unless such usage is explicitly
d189 3
a191 5
<emphasis>
XkbIgnoreExtension</emphasis>
, <emphasis>
XkbLibraryVersion</emphasis>
, and a handful of audible-bell functions. You should not use any other Xkb
d194 7
a200 3
cause <emphasis>
BadAccess</emphasis>
 protocol errors.
d204 2
a205 3
<emphasis>
XkbQueryExtension</emphasis>
 both determines whether a compatible Xkb extension is present in the X server
d209 115
a323 99
<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Bool <emphasis>
XkbQueryExtension</emphasis>
(<emphasis>
dpy, opcode_rtrn, event_rtrn, error_rtrn, major_in_out, minor_in_out</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Display *      <emphasis>
dpy;      </emphasis>
      /* connection to the X server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int *      <emphasis>
opcode_rtrn</emphasis>
;            /* backfilled with the major extension opcode */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int *      <emphasis>
event_rtrn</emphasis>
;            /* backfilled with the extension base event code */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int *      <emphasis>
error_rtrn</emphasis>
;            /* backfilled with the extension base error code */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int *      <emphasis>
major_in_out</emphasis>
;            /* compile time lib major version in, server major version out */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int *      <emphasis>
minor_in_out;      </emphasis>
      /* compile time lib min version in, server minor version out */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
The <emphasis>
XkbQueryExtension</emphasis>
 function determines whether a compatible version of the X Keyboard Extension
is present in the server. If a compatible extension is present, <emphasis>
XkbQueryExtension</emphasis>
 returns <emphasis>
True</emphasis>
; otherwise, it returns <emphasis>
False</emphasis>
.
</para>

<para>
If a compatible version of Xkb is present, <emphasis>
XkbQueryExtension</emphasis>
 initializes the extension. It backfills the major opcode for the keyboard
extension in <emphasis>
opcode_rtrn</emphasis>
, the base event code in <emphasis>
event_rtrn</emphasis>
<emphasis>
, the base error code</emphasis>
 in <emphasis>
error_rtrn</emphasis>
, and the major and minor version numbers of the extension in <emphasis>
major_in_out</emphasis>
 and <emphasis>
minor_in_out</emphasis>
. The major opcode is reported in the <emphasis>
req_major</emphasis>
 fields of some Xkb events. For a discussion of the base event code, see
section 4.1. <!-- xref -->
</para>

<para>
As a convenience, you can use the function <emphasis>
XkbOpenDisplay</emphasis>
 to perform these three tasks at once: open a connection to an X server, check
d328 79
a406 60
<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Display *<emphasis>
XkbOpenDisplay</emphasis>
(<emphasis>
display_name, event_rtrn, error_rtrn, major_in_out, minor_in_out,
reason_rtrn)</emphasis>
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
char *      <emphasis>
display_name</emphasis>
;      /* hardware display name, which determines the display and
communications domain to be used */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int *      <emphasis>
event_rtrn</emphasis>
;      /* backfilled with the extension base event code */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int *      <emphasis>
error_rtrn</emphasis>
;      /* backfilled with the extension base error code */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int *      <emphasis>
major_in_out</emphasis>
;      /* compile time lib major version in, server major version out */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int *      <emphasis>
minor_in_out</emphasis>
;      /* compile time lib minor version in, server minor version out */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int *      <emphasis>
reason_rtrn</emphasis>
;      /* backfilled with a status code */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>
d409 1
a409 2
<emphasis>
XkbOpenDisplay </emphasis>
d411 42
a452 47
the X keyboard extension. In all cases, upon return <emphasis>
reason_rtrn</emphasis>
 contains a status value indicating success or the type of failure. If
<emphasis>
major_in_out</emphasis>
 and <emphasis>
minor_in_out</emphasis>
 are not <emphasis>
NULL</emphasis>
, <emphasis>
XkbOpenDisplay</emphasis>
 first calls <emphasis>
XkbLibraryVersion</emphasis>
 to determine whether the client library is compatible, passing it the values
pointed to by <emphasis>
major_in_out</emphasis>
 and <emphasis>
minor_in_out</emphasis>
. If the library is incompatible, <emphasis>
XkbOpenDisplay</emphasis>
 backfills <emphasis>
major_in_out</emphasis>
 and <emphasis>
minor_in_out</emphasis>
 with the major and minor extension versions of the library being used and
returns <emphasis>
NULL</emphasis>
. If the library is compatible,<emphasis>
 XkbOpenDisplay </emphasis>
next calls <emphasis>
XOpenDisplay</emphasis>
 with the <emphasis>
display_name</emphasis>
. If this fails, the function returns <emphasis>
NULL</emphasis>
. If successful, <emphasis>
XkbOpenDisplay </emphasis>
calls <emphasis>
XkbQueryExtension</emphasis>
 and<emphasis>
 </emphasis>
backfills the major and minor Xkb server extension version numbers in <emphasis>
major_in_out</emphasis>
 and <emphasis>
minor_in_out</emphasis>
.<emphasis>
 </emphasis>
d454 5
a458 6
version or if the server extension is not present, <emphasis>
XkbOpenDisplay </emphasis>
closes the display and returns <emphasis>
NULL</emphasis>
. When successful, the function returns the display connection<emphasis>
.</emphasis>
d462 2
a463 2
The possible values for <emphasis>
reason_rtrn</emphasis> are:
d469 5
a473 6
<emphasis>
XkbOD_BadLibraryVersion</emphasis>
 indicates <emphasis>
XkbLibraryVersion </emphasis>
returned <emphasis>
False</emphasis>.
d478 2
a479 3
<emphasis>
XkbOD_ConnectionRefused</emphasis>
 indicates the display could not be opened.
d484 2
a485 3
<emphasis>
XkbOD_BadServerVersion</emphasis>
 indicates the library and the server have incompatible extension versions.
d490 2
a491 3
<emphasis>
XkbOD_NonXkbServer</emphasis>
 indicates the extension is not present in the X server.
d496 2
a497 3
<emphasis>
XkbOD_Success</emphasis>
 indicates that the function succeeded.
d515 6
a520 6
Call <emphasis>
XkbIgnoreExtension</emphasis>
 to prevent core X library keyboard functions from using the X Keyboard
Extension. You must call <emphasis>
XkbIgnoreExtension</emphasis>
 before you open a server connection; Xkb does not provide a way to enable or
d524 30
a553 34
<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Bool<emphasis>
 XkbIgnoreExtension</emphasis>
(<emphasis>
ignore</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Bool      <emphasis>
ignore</emphasis>
;      /* <emphasis>
True</emphasis>
 means ignore the extension */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
<emphasis>
XkbIgnoreExtension</emphasis>
 tells the X library whether to use the X Keyboard Extension on any
subsequently opened X display connections. If ignore is <emphasis>
True</emphasis>
, the library does not initialize the Xkb extension when it opens a new
d556 9
a564 10
<emphasis>
False</emphasis>
, the library treats subsequent calls to <emphasis>
XOpenDisplay</emphasis>
 normally and uses Xkb extension requests, events, and state. Do not explicitly
use Xkb on a connection for which it is disabled.<emphasis>
 XkbIgnoreExtension</emphasis>
 returns <emphasis>
False</emphasis>
 if it was unable to apply the ignore request.
d570 3
d576 4
a579 5
<emphasis>
BadXxx</emphasis>
 protocol error, where <emphasis>
Xxx</emphasis>
 is some name. These errors are fielded in the normal manner, by the default
d586 2
a587 1
Table 2.1 lists the protocol errors that can be generated, and their causes. <!-- xref -->
d590 1
a590 1
<table frame='topbot'>
d604 1
a604 1
    <entry>BadAccess</entry>
d612 1
a612 1
    <entry>BadKeyboard</entry>
d620 1
a620 1
    <entry>BadImplementation</entry>
d628 1
a628 1
    <entry>BadAlloc</entry>
d636 1
a636 1
    <entry>BadMatch</entry>
d645 1
a645 1
    <entry>BadValue</entry>
d653 1
a653 1
    <entry>BadAtom</entry>
d656 2
a657 2
A name is neither a valid Atom or <emphasis>
None</emphasis>
d662 1
a662 1
    <entry>BadDevice</entry>
d673 21
a693 17
<para>
The Xkb extension adds a single protocol error, <emphasis>
BadKeyboard</emphasis>
, to the core protocol error set. This error code will be reported as the
<emphasis>
error_rtrn</emphasis>
 when <emphasis>
XkbQueryExtension</emphasis>
 is called. When a <emphasis>
BadKeyboard</emphasis>
 error is reported in an <emphasis>
XErrorEvent</emphasis>
, additional information is reported in the <emphasis>
resource_id</emphasis>
 field. The most significant byte of the <emphasis>
resource_id</emphasis>
 is a further refinement of the error cause, as defined in Table 2.2. The least
d698 2
a699 2
<table frame='topbot'>
<title>BadKeyboard Protocol Error resource_id Values</title>
d716 1
a716 1
    <entry>XkbErr_BadDevice</entry>
d726 1
a726 1
    <entry>XkbErr_BadClass</entry>
d736 1
a736 1
    <entry>XkbErr_BadId</entry>
d755 26
a780 27
<emphasis>
XkbDescPtr</emphasis>
 is also passed as an argument, the Display* argument must match the <emphasis>
dpy</emphasis>
 field of the <emphasis>
XkbDescRec</emphasis>
 pointed to by the <emphasis>
XkbDescPtr</emphasis>
 argument, or else the <emphasis>
dpy</emphasis>
 field of the <emphasis>
XkbDescRec</emphasis>
 must be <emphasis>
NULL</emphasis>
. If they don’t match or the <emphasis>
dpy</emphasis>
 field is not <emphasis>
NULL</emphasis>
, a <emphasis>
BadMatch</emphasis>
 error is returned (either in the return value or a backfilled <emphasis>
Status</emphasis>
 variable). Upon successful return, the <emphasis>
dpy</emphasis>
 field of the <emphasis>
XkbDescRec</emphasis>
 always contains the Display* value passed in.
d787 20
a806 20
involve both a server connection (Display * <emphasis>
dpy</emphasis>
) and a device identifier (unsigned int <emphasis>
device_spec</emphasis>
). In some cases, the device identifier is implicit and is taken as the
<emphasis>
device_spec</emphasis>
 field of an <emphasis>
XkbDescRec</emphasis>
 structure passed as an argument.
</para>

<para>
The device identifier can specify any X input extension device with a <emphasis>
KeyClass</emphasis>
 component, or it can specify the constant, <emphasis>
XkbUseCoreKbd</emphasis>
. The use of <emphasis>
XkbUseCoreKbd</emphasis>
 allows applications to indicate the core keyboard without having to determine
d811 23
a833 27
Where an Xkb device identifier is passed as an argument and an <emphasis>
XkbDescPtr</emphasis>
 is also passed as an argument, if either the argument or the <emphasis>
XkbDescRec</emphasis>
 <emphasis>
device_spec</emphasis>
 field is <emphasis>
XkbUseCoreKbd</emphasis>
, and if the function returns successfully, the <emphasis>
XkbDescPtr</emphasis>
 <emphasis>
device_spec</emphasis>
 field will have been converted from <emphasis>
XkbUseCoreKbd</emphasis>
 to a real Xkb device ID. If the function does not complete successfully, the
<emphasis>
device_spec</emphasis>
 field remains unchanged. Subsequently, the device id argument must match the
<emphasis>
device_spec</emphasis>
 field of the <emphasis>
XkbDescPtr</emphasis>
 argument. If they don’t match, a <emphasis>
BadMatch</emphasis>
 error is returned (either in the return value or a backfilled <emphasis>
Status</emphasis>
 variable).
d841 4
a844 5
only guarantee is that when you use <emphasis>
XkbUseCoreKbd</emphasis>
, <emphasis>
XkbUseCoreKbd</emphasis>
 will work and the identifier returned by the server will refer to the core
@


1.1
log
@Update to libx11 1.4.2. Tested by ajacoutot@@, jasper@@ krw@@, landry@@,
shadchin@@ on various architectures.
Bump major.
@
text
@d1 1
a1 1
<chapter id='initialization_and_general_programming_information'>
d3 1
a3 1
<sect1 id='extension_header_files'>
d51 1
a51 1
<sect1 id='extension_name'>
d73 1
a73 1
<sect1 id='determining_library_compatibility'>
d96 3
a98 2
<tgroup cols='1'>
<colspec colsep='0'/>
d100 1
a100 1
  <row rowsep='0'>
d111 1
a111 1
  <row rowsep='0'>
d118 1
a118 1
  <row rowsep='0'>
d164 1
a164 1
<sect1 id='initializing_the_keyboard_extension'>
d205 3
a207 2
<tgroup cols='1'>
<colspec colsep='0'/>
d209 1
a209 1
  <row rowsep='0'>
d218 1
a218 1
  <row rowsep='0'>
d225 1
a225 1
  <row rowsep='0'>
d232 1
a232 1
  <row rowsep='0'>
d239 1
a239 1
  <row rowsep='0'>
d246 1
a246 1
  <row rowsep='0'>
d253 1
a253 1
  <row rowsep='0'>
d308 3
a310 2
<tgroup cols='1'>
<colspec colsep='0'/>
d312 1
a312 1
  <row rowsep='0'>
d321 1
a321 1
  <row rowsep='0'>
d329 1
a329 1
  <row rowsep='0'>
d336 1
a336 1
  <row rowsep='0'>
d343 1
a343 1
  <row rowsep='0'>
d350 1
a350 1
  <row rowsep='0'>
d357 1
a357 1
  <row rowsep='0'>
d475 1
a475 1
<sect1 id='disabling_the_keyboard_extension'>
d497 3
a499 2
<tgroup cols='1'>
<colspec colsep='0'/>
d501 1
a501 1
  <row rowsep='0'>
d510 1
a510 1
  <row rowsep='0'>
d545 1
a545 1
<sect1 id='protocol_errors'>
d564 1
a564 1
<table frame='none'>
d566 4
a569 3
<tgroup cols='2'>
<colspec colsep='0'/>
<colspec colsep='0'/>
d577 1
a577 1
  <row rowsep='0'>
d585 1
a585 1
  <row rowsep='0'>
d593 1
a593 1
  <row rowsep='0'>
d601 1
a601 1
  <row rowsep='0'>
d609 1
a609 1
  <row rowsep='0'>
d618 1
a618 1
  <row rowsep='0'>
d626 1
a626 1
  <row rowsep='0'>
d635 1
a635 1
  <row rowsep='0'>
d668 1
a668 1
<table frame='none'>
d670 6
a675 5
<tgroup cols='4'>
<colspec colsep='0'/>
<colspec colsep='0'/>
<colspec colsep='0'/>
<colspec colsep='0'/>
d677 1
a677 1
  <row rowsep='0'>
d685 1
a685 1
  <row rowsep='0'>
d695 1
a695 1
  <row rowsep='0'>
d705 1
a705 1
  <row rowsep='0'>
d721 1
a721 1
<sect1 id='display_and_device_specifications_in_function_calls'>
@

