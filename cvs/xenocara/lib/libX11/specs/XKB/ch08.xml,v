head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.10
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.8
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.2
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2015.04.06.20.57.58;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	L5f7tv2EiGjtzoSu;

1.2
date	2012.03.27.19.19.38;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.30.19.19.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to libX11 1.6.3
@
text
@<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
	  "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<chapter id='Indicators'>
<title>Indicators</title>

<indexterm significance="preferred" zone="Indicators">
<primary>indicators</primary></indexterm>

<para>
Although the core X implementation supports up to 32 LEDs on an input device,
it does not provide any linkage between the state of the LEDs and the logical
state of the input device. For example, most keyboards have a
<guilabel>CapsLock</guilabel>
LED, but X does not provide a mechanism to make the LED automatically follow
the logical state of the
<keycap>CapsLock</keycap>
key.
</para>


<para>
Furthermore, the core X implementation does not provide clients with the
ability to determine what bits in the
<structfield>led_mask</structfield>
field of the
<structname>XKeyboardState</structname>
map to the particular LEDs on the keyboard. For example, X does not provide a
method for a client to determine what bit to set in the
<structfield>led_mask</structfield>
field to turn on the
<guilabel>Scroll Lock</guilabel>
LED or whether the keyboard even has a
<guilabel>Scroll Lock</guilabel>
LED.
</para>


<para>
Xkb provides indicator names and programmable indicators to help solve these
problems. Using Xkb, clients can determine the names of the various indicators,
determine and control the way that the individual indicators should be updated
to reflect keyboard changes, and determine which of the 32 keyboard indicators
reported by the protocol are actually present on the keyboard. Clients may also
request immediate notification of changes to the state of any subset of the
keyboard indicators, which makes it straightforward to provide an on-screen
<quote>virtual</quote> LED panel.
This chapter describes Xkb indicators and the functions
used for manipulating them.
</para>

<sect1 id='Indicator_Names'>
<title>Indicator Names</title>

<para>
Xkb provides the capability of symbolically naming indicators. Xkb itself
doesn’t use these symbolic names for anything; they are there only to help
make the keyboard description comprehensible to humans. To set the names of
specific indicators, use
<function>XkbSetNames</function>
as discussed in <xref linkend="Symbolic_Names" />. Then set the map using
<function>XkbSetMap</function>
(see <link linkend="Changing_Map_Components_in_the_Server">section 14.3</link>)
or
<function>XkbSetNamedIndicator</function>
(below). To retrieve indicator names, use
<function>XkbGetNames</function>
(<xref linkend="Symbolic_Names" />).
</para>


</sect1>
<sect1 id='Indicator_Data_Structures'>
<title>Indicator Data Structures</title>

<para>
Use the indicator description record,
<structname>XkbIndicatorRec</structname>,
and its indicator map,
<structname>XkbIndicatorMapRec</structname>,
to inquire about and control most indicator properties and behaviors.
</para>


<sect2 id='XkbIndicatorRec'>
<title>XkbIndicatorRec</title>

<indexterm significance="preferred" zone="XkbIndicatorRec">
<primary><structname>XkbIndicatorRec</structname></primary></indexterm>

<para>
The description for all the Xkb indicators is held in the
<structfield>indicators</structfield>
field of the complete keyboard description (see <xref linkend="Complete_Keyboard_Description" />), which is defined
as follows:

<programlisting>
#define      XkbNumIndicators      32

typedef struct {
    unsigned long           phys_indicators;            /* LEDs existence */
    XkbIndicatorMapRec      maps[XkbNumIndicators];     /* indicator maps */
} <structname>XkbIndicatorRec</structname>, *XkbIndicatorPtr;
</programlisting></para>

<para>
This structure contains the
<structfield>phys_indicators</structfield>
field, which relates some information about the correspondence between
indicators and physical LEDs on the keyboard, and an array of indicator
<structfield>maps</structfield>,
one map per indicator.
</para>

<para>
The
<structfield>phys_indicators</structfield>
field indicates which indicators are bound to physical LEDs on the keyboard;
if a bit is set in
<structfield>phys_indicators</structfield>,
then the associated indicator has a physical LED associated with it. This
field is necessary because some indicators may not have corresponding physical
LEDs on the keyboard. For example, most keyboards have an LED for indicating
the state of
<keycap>CapsLock</keycap>,
but most keyboards do not have an LED that indicates the current group.
Because
<structfield>phys_indicators</structfield>
describes a physical characteristic of the keyboard, you cannot directly
change it under program control. However, if a client program loads a
completely new keyboard description via
<function>XkbGetKeyboardByName</function>,
or if a new keyboard is attached and the X implementation notices,
<structfield>phys_indicators</structfield>
changes if the indicators for the new keyboard are different.
</para>


</sect2>
<sect2 id='XkbIndicatorMapRec'>
<title>XkbIndicatorMapRec</title>

<indexterm significance="preferred" zone="XkbIndicatorMapRec">
<primary><structname>XkbIndicatorMapRec</structname></primary></indexterm>

<para>
Each indicator has its own set of attributes that specify whether clients can
explicitly set its state and whether it tracks the keyboard state. The
attributes of each indicator are held in the
<structfield>maps</structfield>
array, which is an array of
<structname>XkbIndicatorRec</structname>
structures:

<programlisting>
typedef struct {
    unsigned char  flags;         /* how the indicator can be changed */
    unsigned char  which_groups;  /* match criteria for groups */
    unsigned char  groups;        /* which keyboard groups the indicator watches */
    unsigned char  which_mods;    /* match criteria for modifiers */
    XkbModsRec     mods;          /* which modifiers the indicator watches */
    unsigned int   ctrls;         /* which controls the indicator watches */
} <structname>XkbIndicatorMapRec</structname>, *XkbIndicatorMapPtr;
</programlisting></para>

<para>
This indicator map specifies for each indicator:
</para>

<itemizedlist>
<listitem>
  <para>
The conditions under which the keyboard modifier state affects the indicator
  </para>
</listitem>
<listitem>
  <para>
The conditions under which the keyboard group state affects the indicator
  </para>
</listitem>
<listitem>
  <para>
The conditions under which the state of the boolean controls affects the
indicator
  </para>
</listitem>
<listitem>
  <para>
The effect (if any) of attempts to explicitly change the state of the indicator
using the functions
<function>XkbSetControls</function>
or
<function>XChangeKeyboardControl</function>

  </para>
</listitem>
</itemizedlist>

<para>
For more information on the effects of explicit changes to indicators and the
relationship to the indicator map, see <link linkend="Effects_of_Explicit_Changes_on_Indicators">section 8.4.1</link>.
</para>

<sect3 id='XkbIndicatorMapRec_flags_field'>
<title>XkbIndicatorMapRec flags field</title>

<para>
The
<structfield>flags</structfield>
field specifies the conditions under which the indicator can be changed and
the effects of changing the indicator. The valid values for
<structfield>flags</structfield>
and their effects are shown in <link linkend="table8.1">Table 8.1</link>.
</para>

<table id='table8.1' frame='topbot'>
<title>XkbIndicatorMapRec flags Field</title>
<?dbfo keep-together="always" ?>
<tgroup cols='3' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='2.0*'/>
<colspec colname='c2' colwidth='1.0*'/>
<colspec colname='c3' colwidth='3.0*'/>
<thead>
<row rowsep='1'>
  <entry>Value</entry>
  <entry></entry>
  <entry>Effect</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry><symbol>XkbIM_NoExplicit</symbol></entry>
    <entry>(1L&lt;&lt;7)</entry>
    <entry>Client applications cannot change the state of the indicator.</entry>
  </row>
  <row>
    <entry><symbol>XkbIM_NoAutomatic</symbol></entry>
    <entry>(1L&lt;&lt;6)</entry>
    <entry>Xkb does not automatically change the value of the indicator based
upon a change in the keyboard state, regardless of the values for the other
fields of the indicator map.</entry>
  </row>
  <row>
    <entry><symbol>XkbIM_LEDDrivesKB</symbol></entry>
    <entry>(1L&lt;&lt;5)</entry>
    <entry>A client application changing the state of the indicator causes the
state of the keyboard to change.</entry>
  </row>
</tbody>
</tgroup>
</table>

<para>
Note that if
<symbol>XkbIM_NoAutomatic</symbol>
is not set, by default the indicator follows the keyboard state.
</para>


<para>
If
<symbol>XkbIM_LEDDrivesKB</symbol>
is set and
<symbol>XkbIM_NoExplicit</symbol>
is not, and if you call a function which updates the server’s image of the
indicator map (such as
<function>XkbSetIndicatorMap</function>
or
<function>XkbSetNamedIndicator</function>),
Xkb changes the keyboard state and controls to reflect the other fields of
the indicator map, as described in the remainder of this section. If you
attempt to explicitly change the value of an indicator for which
<symbol>XkbIM_LEDDrivesKB</symbol>
is absent or for which
<symbol>XkbIM_NoExplicit</symbol>
is present, keyboard state or controls are unaffected.
</para>


<para>
For example, a keyboard designer may want to make the
<guilabel>CapsLock</guilabel>
LED controllable only by the server, but allow the
<guilabel>Scroll Lock</guilabel>
LED to be controlled by client applications. To do so, the keyboard designer
could set the
<symbol>XkbIM_NoExplicit</symbol>
flag for the
<guilabel>CapsLock</guilabel>
LED, but not set it for the
<guilabel>Scroll Lock</guilabel>
LED. Or the keyboard designer may wish to allow the
<guilabel>CapsLock</guilabel>
LED to be controlled by both the server and client applications and also have
the server to automatically change the
<emphasis>CapsLock</emphasis>

modifier state whenever a client application changes the
<guilabel>CapsLock</guilabel>
LED. To do so, the keyboard designer would not set the
<symbol>XkbIM_NoExplicit</symbol>
flag, but would instead set the
<symbol>XkbIM_LEDDrivesKB</symbol>
flag.
</para>

<para>
The remaining fields in the indicator map specify the conditions under which
Xkb automatically turns an indicator on or off (only if
<symbol>XkbIM_NoAutomatic</symbol>
is not set). If these conditions match the keyboard state, Xkb turns the
indicator on. If the conditions do not match, Xkb turns the indicator off.
</para>

</sect3>

<sect3 id='XkbIndicatorMapRec_which_groups_and_groups_fields'>
<title>XkbIndicatorMapRec which_groups and groups fields</title>

<para>
The
<structfield>which_groups</structfield>
and the
<structfield>groups</structfield>
fields of an indicator map determine how the keyboard group state affects the
corresponding indicator. The
<structfield>which_groups</structfield>
field controls the interpretation of
<structfield>groups</structfield>
and may contain any one of the following values:

<programlisting>
#define XkbIM_UseNone             0
#define XkbIM_UseBase             (1L &lt;&lt; 0)
#define XkbIM_UseLatched          (1L &lt;&lt; 1)
#define XkbIM_UseLocked           (1L &lt;&lt; 2)
#define XkbIM_UseEffective        (1L &lt;&lt; 3)
#define XkbIM_UseAnyGroup         XkbIM_UseLatched | XkbIM_UseLocked |
                                  XkbIM_UseEffective
</programlisting></para>

<para>
The
<structfield>groups</structfield>
field specifies what keyboard groups an indicator watches and is the bitwise
inclusive OR of the following valid values:

<programlisting>
#define XkbGroup1Mask            (1&lt;&lt;0)
#define XkbGroup2Mask            (1&lt;&lt;1)
#define XkbGroup3Mask            (1&lt;&lt;2)
#define XkbGroup4Mask            (1&lt;&lt;3)
#define XkbAnyGroupMask          (1&lt;&lt;7)
#define XkbAllGroupsMask         (0xf)
</programlisting></para>

<para>
If
<symbol>XkbIM_NoAutomatic</symbol>
is not set (the keyboard drives the indicator), the effect of
<structfield>which_groups</structfield>
and
<structfield>groups</structfield>
is shown in <link linkend="table8.2">Table 8.2</link>.
</para>

<table id='table8.2' frame='topbot'>
<title>XkbIndicatorMapRec which_groups and groups, Keyboard Drives
Indicator</title>
<?dbfo keep-together="always" ?>
<tgroup cols='2' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<colspec colname='c2' colwidth='2.0*'/>
<thead>
<row rowsep='1'>
  <entry>which_groups</entry>
  <entry>Effect</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry><symbol>XkbIM_UseNone</symbol></entry>
    <entry>
The
<structfield>groups</structfield>
field and the current keyboard group state are ignored.
    </entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseBase</symbol></entry>
    <entry>
If
<structfield>groups</structfield>
is nonzero, the indicator is lit whenever the base keyboard group is nonzero.
If
<structfield>groups</structfield>
is zero, the indicator is lit whenever the base keyboard group is zero.
    </entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseLatched</symbol></entry>
    <entry>
If
<structfield>groups</structfield>
is nonzero, the indicator is lit whenever the latched keyboard group is
nonzero. If
<structfield>groups</structfield>
is zero, the indicator is lit whenever the latched keyboard group is zero.
    </entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseLocked</symbol></entry>
    <entry>
The
<structfield>groups</structfield>
field is interpreted as a mask. The indicator is lit when the current locked
keyboard group matches one of the bits that are set in
<structfield>groups</structfield>.
    </entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseEffective</symbol></entry>
    <entry>
The
<structfield>groups</structfield>
field is interpreted as a mask. The indicator is lit when the current
effective keyboard group matches one of the bits that are set in
<structfield>groups</structfield>.
</entry>
  </row>
</tbody>
</tgroup>
</table>

<para>
The effect of
<structfield>which_groups</structfield>
and
<structfield>groups</structfield>
when you change an indicator for which
<symbol>XkbIM_LEDDrivesKB</symbol>
is set (the indicator drives the keyboard) is shown in
<link linkend="table8.3">Table 8.3</link>. The <quote>New State</quote>
column refers to the new state to which you set the indicator.
</para>

<table id='table8.3' frame='topbot'>
<title>XkbIndicatorMapRec which_groups and groups, Indicator Drives
Keyboard</title>
<?dbfo keep-together="always" ?>
<tgroup cols='3' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='2.0*'/>
<colspec colname='c2' colwidth='1.0*'/>
<colspec colname='c3' colwidth='3.0*'/>
<thead>
<row rowsep='1'>
  <entry>which_groups</entry>
  <entry>New State</entry>
  <entry>Effect on Keyboard Group State</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry><symbol>XkbIM_UseNone</symbol></entry>
    <entry>On or Off</entry>
    <entry>No effect</entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseBase</symbol></entry>
    <entry>On or Off</entry>
    <entry>No effect</entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseLatched</symbol></entry>
    <entry>On</entry>
    <entry>
The
<structfield>groups</structfield>
field is treated as a group mask. The keyboard group latch is changed to the
lowest numbered group specified in
<structfield>groups</structfield>;
if
<structfield>groups</structfield>
is empty, the keyboard group latch is changed to zero.
    </entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseLatched</symbol></entry>
    <entry>Off</entry>
    <entry>
The
<structfield>groups</structfield>
field is treated as a group mask. If the indicator is explicitly extinguished,
keyboard group latch is changed to the lowest numbered group not specified in
<structfield>groups</structfield>;
if
<structfield>groups</structfield>
is zero, the keyboard group latch is set to the index of the highest legal
keyboard group.
    </entry>
  </row>
  <row>
    <entry>XkbIM_UseLocked or XkbIM_UseEffective</entry>
    <entry>On</entry>
    <entry>
If the
<structfield>groups</structfield>
mask is empty, group is not changed; otherwise, the locked keyboard group is
changed to the lowest numbered group specified in
<structfield>groups</structfield>.
    </entry>
  </row>
  <row>
    <entry>XkbIM_UseLocked or XkbIM_UseEffective</entry>
    <entry>Off</entry>
    <entry>
Locked keyboard group is changed to the lowest numbered group that is not
specified in the
<structfield>groups</structfield>
mask, or to
<emphasis>Group1</emphasis>
if the
<structfield>groups</structfield>
mask contains all keyboard groups.
    </entry>
  </row>
</tbody>
</tgroup>
</table>

</sect3>
<sect3 id='XkbIndicatorMapRec_which_mods_and_mods_fields'>
<title>XkbIndicatorMapRec which_mods and mods fields</title>

<para>
The
<structfield>mods</structfield>
field specifies what modifiers an indicator watches. The
<structfield>mods</structfield>
field is an Xkb modifier definition,
<structname>XkbModsRec</structname>,
as described in <link linkend="Modifier_Definitions">section 7.2</link>, which can specify both real and virtual
modifiers. The
<structfield>mods</structfield>
field takes effect even if some or all of the virtual indicators specified in
<structfield>mods</structfield>
are unbound. To specify the mods field, in general, assign the modifiers of
interest to
<structfield>mods.real_mods</structfield>
and the virtual modifiers of interest to
<structfield>mods.vmods</structfield>.
You can disregard the
<structfield>mods.mask</structfield>
field unless your application needs to interpret the indicator map directly
(that is, to simulate automatic indicator behavior on its own). Relatively few
applications need to do so, but if you find it necessary, you can either read
the indicator map back from the server after you update it (the server
automatically updates the mask field whenever any of the real or virtual
modifiers are changed in the modifier definition) or you can use
<function>XkbVirtualModsToReal</function>
to determine the proper contents for the mask field, assuming that the
<structname>XkbDescRec</structname>
contains the virtual modifier definitions.
</para>

<para>
<structfield>which_mods</structfield>
specifies what criteria Xkb uses to determine a match with the corresponding
<structfield>mods</structfield>
field by specifying one or more components of the Xkb keyboard state. If
<symbol>XkbIM_NoAutomatic</symbol>
is not set (the keyboard drives the indicator), the indicator is lit whenever
any of the modifiers specified in the
<structfield>mask</structfield>
field of the
<structfield>mods</structfield>
modifier definition are also set in any of the current keyboard state
components specified by
<structfield>which_mods</structfield>.
Remember that the
<structfield>mask</structfield>
field is comprised of all of the real modifiers specified in the definition
plus any real modifiers that are bound to the virtual modifiers specified in
the definition. (See <xref linkend="Keyboard_State" /> for more information on the keyboard state and
<xref linkend="Virtual_Modifiers" /> for more information on virtual modifiers.) Use a bitwise inclusive
OR of the following values to compose a value for
<structfield>which_mods</structfield>:

<programlisting>
#define XkbIM_UseNone             0
#define XkbIM_UseBase             (1L &lt;&lt; 0)
#define XkbIM_UseLatched          (1L &lt;&lt; 1)
#define XkbIM_UseLocked           (1L &lt;&lt; 2)
#define XkbIM_UseEffective        (1L &lt;&lt; 3)
#define XkbIM_UseCompat           (1L &lt;&lt; 4)
#define XkbIM_UseAnyMods          XkbIM_UseBase | XkbIM_UseLatched |
                                  XkbIM_UseLocked | XkbIM_UseEffective |
                                  XkbIM_UseCompat
</programlisting></para>

<para>
If
<symbol>XkbIM_NoAutomatic</symbol>
is not set (the keyboard drives the indicator), the effect of
<structfield>which_mods</structfield>
and
<structfield>mods</structfield>
is shown in <link linkend="table8.4">Table 8.4</link>
</para>

<table id='table8.4' frame='topbot'>
<title>XkbIndicatorMapRec which_mods and mods, Keyboard Drives Indicator</title>
<?dbfo keep-together="always" ?>
<tgroup cols='2' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<colspec colname='c2' colwidth='2.0*'/>
<thead>
<row rowsep='1'>
  <entry>which_mods</entry>
  <entry>Effect on Keyboard Modifiers</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry><symbol>XkbIM_UseNone</symbol></entry>
    <entry>The mods field and the current keyboard modifier state are
ignored.</entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseBase</symbol></entry>
    <entry>
The indicator is lit when any of the modifiers specified in the
<structfield>mask</structfield>
field of
<structfield>mods</structfield>
are on in the keyboard base state. If both
<structfield>mods.real_mods</structfield>
and
<structfield>mods.vmods</structfield>
are zero, the indicator is lit when the base keyboard state contains no
modifiers.
    </entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseLatched</symbol></entry>
    <entry>
The indicator is lit when any of the modifiers specified in the
<structfield>mask</structfield>
field of
<structfield>mods</structfield>
are latched. If both
<structfield>mods.real_mods</structfield>
and
<structfield>mods.vmods</structfield>
are zero, the indicator is lit when none of the modifier keys are latched.
    </entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseLocked</symbol></entry>
    <entry>
The indicator is lit when any of the modifiers specified in the
<structfield>mask</structfield>
field of
<structfield>mods</structfield>
are locked. If both
<structfield>mods.real_mods</structfield>
and
<structfield>mods.vmods</structfield>
are zero, the indicator is lit when none of the modifier keys are locked.
    </entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseEffective</symbol></entry>
    <entry>
The indicator is lit when any of the modifiers specified in the
<structfield>mask</structfield>
field of
<structfield>mods</structfield>
are in the effective keyboard state. If both
<structfield>mods.real_mods</structfield>
and
<structfield>mods.vmods</structfield>
are zero, the indicator is lit when the effective keyboard state contains no
modifiers.
    </entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseCompat</symbol></entry>
    <entry>
The indicator is lit when any of the modifiers specified in the
<structfield>mask</structfield>
field of
<structfield>mods</structfield>
are in the keyboard compatibility state. If both
<structfield>mods.real_mods</structfield>
and
<structfield>mods.vmods</structfield>
are zero, the indicator is lit when the keyboard compatibility state contains
no modifiers.
    </entry>
  </row>
</tbody>
</tgroup>
</table>

<para>
The effect on the keyboard modifiers of
<structfield>which_mods</structfield>
and
<structfield>mods</structfield>
when you change an indicator for which
<symbol>XkbIM_LEDDrivesKB</symbol>
is set (the indicator drives the keyboard) is shown in
<link linkend="table8.5">Table 8.5</link>. The <quote>New State</quote>
column refers to the new state to which you set the indicator.
</para>

<table id='table8.5' frame='topbot'>
<title>XkbIndicatorMapRec which_mods and mods, Indicator Drives Keyboard</title>
<?dbfo keep-together="always" ?>
<tgroup cols='3' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='2.0*'/>
<colspec colname='c2' colwidth='1.0*'/>
<colspec colname='c3' colwidth='3.0*'/>
<thead>
<row rowsep='1'>
  <entry>which_mods</entry>
  <entry>New State</entry>
  <entry>Effect on Keyboard Modifiers</entry>
  </row>
</thead>
<tbody>
  <row>
    <entry>XkbIM_UseNone or XkbIM_UseBase</entry>
    <entry>On or Off</entry>
    <entry>No Effect</entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseLatched</symbol></entry>
    <entry>On</entry>
    <entry>
Any modifiers specified in the
<structfield>mask</structfield>
field of
<structfield>mods</structfield>
are added to the latched modifiers.
    </entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseLatched</symbol></entry>
    <entry>Off</entry>
    <entry>
Any modifiers specified in the
<structfield>mask</structfield>
field of
<structfield>mods</structfield>
are removed from the latched modifiers.
    </entry>
  </row>
  <row>
    <entry>XkbIM_UseLocked, XkbIM_UseCompat, or XkbIM_UseEffective</entry>
    <entry>On</entry>
    <entry>
Any modifiers specified in the
<structfield>mask</structfield>
field of
<structfield>mods</structfield>
are added to the locked modifiers.
    </entry>
  </row>
  <row>
    <entry><symbol>XkbIM_UseLocked</symbol></entry>
    <entry>Off</entry>
    <entry>
Any modifiers specified in the
<structfield>mask</structfield>
field of
<structfield>mods</structfield>
are removed from the locked modifiers.
    </entry>
  </row>
  <row>
    <entry>XkbIM_UseCompat or XkbIM_UseEffective</entry>
    <entry>Off</entry>
    <entry>
Any modifiers specified in the
<structfield>mask</structfield>
field of
<structfield>mods</structfield>
are removed from both the locked and latched modifiers.
    </entry>
  </row>
</tbody>
</tgroup>
</table>

</sect3>
<sect3 id='XkbIndicatorMapRec_ctrls_field'>
<title>XkbIndicatorMapRec ctrls field</title>

<para>
The
<structfield>ctrls</structfield>
field specifies what controls (see <xref linkend="Keyboard_Controls" />) the indicator watches and is
composed using the bitwise inclusive OR of the following values:

<programlisting>
#define XkbRepeatKeysMask           (1L &lt;&lt; 0)
#define XkbSlowKeysMask             (1L &lt;&lt; 1)
#define XkbBounceKeysMask           (1L &lt;&lt; 2)
#define XkbStickyKeysMask           (1L &lt;&lt; 3)
#define XkbMouseKeysMask            (1L &lt;&lt; 4)
#define XkbMouseKeysAccelMask       (1L &lt;&lt; 5)
#define XkbAccessXKeysMask          (1L &lt;&lt; 6)
#define XkbAccessXTimeoutMask       (1L &lt;&lt; 7)
#define XkbAccessXFeedbackMask      (1L &lt;&lt; 8)
#define XkbAudibleBellMask          (1L &lt;&lt; 9)
#define XkbOverlay1Mask             (1L &lt;&lt; 10)
#define XkbOverlay2Mask             (1L &lt;&lt; 11)
#define XkbAllBooleanCtrlsMask      (0x00001FFF)
</programlisting></para>

<para>
Xkb lights the indicator whenever any of the boolean controls specified in
<structfield>ctrls</structfield>
is enabled.
</para>


</sect3>
</sect2>
</sect1>
<sect1 id='Getting_Information_About_Indicators'>
<title>Getting Information About Indicators</title>

<para>
Xkb allows applications to obtain information about indicators using two
different methods. The first method, which is similar to the core X
implementation, uses a mask to specify the indicators. The second method, which
is more suitable for applications concerned with interoperability, uses
indicator names. The correspondence between the indicator name and the bit
position in masks is as follows: one of the parameters returned from
<function>XkbGetNamedIndicator</function>
is an index that is the bit position to use in any function call that requires
a mask of indicator bits, as well as the indicator’s index into the
<structname>XkbIndicatorRec</structname>
array of indicator maps.
</para>


<sect2 id='Getting_Indicator_State'>
<title>Getting Indicator State</title>

<para>
Because the state of the indicators is relatively volatile, the keyboard
description does not hold the current state of the indicators. To obtain the
current state of the keyboard indicators, use
<function>XkbGetIndicatorState</function>.
</para>

<indexterm significance="preferred" zone="XkbGetIndicatorState"><primary><function>XkbGetIndicatorState</function></primary></indexterm>
<funcsynopsis id="XkbGetIndicatorState">
  <funcprototype>
    <funcdef>Status <function>XkbGetIndicatorState</function></funcdef>
<!-- (
<parameter>display</parameter>,
<parameter>device_spec</parameter>,
<parameter>state_return</parameter>
) -->

    <paramdef>Display *<parameter>display</parameter></paramdef>
    <paramdef>unsigned int <parameter>device_spec</parameter></paramdef>
    <paramdef>unsigned int *<parameter>state_return</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>display</parameter>
    </term>
    <listitem>
      <para>
        connection to the X server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>device_spec</parameter>
    </term>
    <listitem>
      <para>
        device ID, or <symbol>XkbUseCoreKbd</symbol>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>state_return</parameter>
    </term>
    <listitem>
      <para>
        backfilled with a mask of the indicator state
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
<function>XkbGetIndicatorState</function>
queries the
<parameter>display</parameter>
for the state of the indicators on the device specified by the
<parameter>device_spec</parameter>.
For each indicator that is <quote>turned on</quote> on the device,
the associated bit is set in
<parameter>state_return</parameter>.
If a compatible version of the Xkb extension is not available in the server,
<function>XkbGetIndicatorState</function>
returns a
<errorname>BadMatch</errorname>
error. Otherwise, it sends the request to the X server, places the state of
the indicators into
<parameter>state_return</parameter>,
and returns
<symbol>Success</symbol>.
Thus the value reported by
<function>XkbGetIndicatorState</function>
is identical to the value reported by the core protocol.
</para>


</sect2>
<sect2 id='Getting_Indicator_Information_by_Index'>
<title>Getting Indicator Information by Index</title>

<para>
To get the map for one or more indicators, using a mask to specify the
indicators, use
<function>XkbGetIndicatorMap</function>.
</para>

<indexterm significance="preferred" zone="XkbGetIndicatorMap"><primary><function>XkbGetIndicatorMap</function></primary></indexterm>
<funcsynopsis id="XkbGetIndicatorMap">
  <funcprototype>
    <funcdef>Status <function>XkbGetIndicatorMap</function></funcdef>
<!-- (
<parameter>dpy</parameter>,
<parameter>which</parameter>,
<parameter>desc</parameter>
) -->

    <paramdef>Display *<parameter>dpy</parameter></paramdef>
    <paramdef>unsigned int <parameter>which</parameter></paramdef>
    <paramdef>XkbDescPtr <parameter>desc</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>dpy</parameter>
    </term>
    <listitem>
      <para>
        connection to the X server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>which</parameter>
    </term>
    <listitem>
      <para>
        mask of indicators for which maps should be returned
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>desc</parameter>
    </term>
    <listitem>
      <para>
        keyboard description to be updated
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
<function>XkbGetIndicatorMap</function>
obtains the maps from the server for only those indicators specified by the
<parameter>which</parameter>
mask and copies the values into the keyboard description specified by
<parameter>desc</parameter>.
If the
<structfield>indicators</structfield>
field of the
<parameter>desc</parameter>
parameter is
<symbol>NULL</symbol>,
<function>XkbGetIndicatorMap</function>
allocates and initializes it.
</para>


<para>
<function>XkbGetIndicatorMap</function>
can generate
<errorname>BadAlloc</errorname>,
<errorname>BadLength</errorname>,
<errorname>BadMatch</errorname>,
and
<errorname>BadImplementation</errorname>
errors.
</para>


<para>
To free the indicator maps, use
<function>XkbFreeIndicatorMaps</function>
(see <link linkend="Allocating_and_Freeing_Indicator_Maps">section 8.6</link>).
</para>


</sect2>
<sect2 id='Getting_Indicator_Information_by_Name'>
<title>Getting Indicator Information by Name</title>

<para>
Xkb also allows applications to refer to indicators by name. Use
<function>XkbGetNames</function>
to get the indicator names (see <xref linkend="Symbolic_Names" />). Using names eliminates the need
for hard-coding bitmask values for particular keyboards. For example, instead
of using vendor-specific constants such as
<symbol>WSKBLed_ScrollLock</symbol>
mask on Digital workstations or
<symbol>XLED_SCROLL_LOCK</symbol>
on Sun workstations, you can instead use
<function>XkbGetNamedIndicator</function>
to look up information on the indicator named <quote>Scroll Lock.</quote>
</para>

<para>
Use
<function>XkbGetNamedIndicator</function>
to look up the indicator map and other information for an indicator by name.
</para>

<indexterm significance="preferred" zone="XkbGetNamedIndicator"><primary><function>XkbGetNamedIndicator</function></primary></indexterm>
<funcsynopsis id="XkbGetNamedIndicator">
  <funcprototype>
    <funcdef>Bool <function>XkbGetNamedIndicator</function></funcdef>
<!-- (
<parameter>dpy</parameter>,
<parameter>dev_spec</parameter>,
<parameter>name</parameter>,
<parameter>ndx_rtrn</parameter>,
<parameter>state_rtrn</parameter>,
<parameter>map_rtrn</parameter>,
<parameter>real_rtrn</parameter>
) -->

    <paramdef>Display *<parameter>dpy</parameter></paramdef>
    <paramdef>unsigned int <parameter>device_spec</parameter></paramdef>
    <paramdef>Atom <parameter>name</parameter></paramdef>
    <paramdef>int *<parameter>ndx_rtrn</parameter></paramdef>
    <paramdef>Bool *<parameter>state_rtrn</parameter></paramdef>
    <paramdef>XkbIndicatorMapPtr <parameter>map_rtrn</parameter></paramdef>
    <paramdef>Bool *<parameter>real_rtrn</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>dpy</parameter>
    </term>
    <listitem>
      <para>
        connection to the X server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>device_spec</parameter>
    </term>
    <listitem>
      <para>
        keyboard device ID, or <symbol>XkbUseCoreKbd</symbol>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>name</parameter>
    </term>
    <listitem>
      <para>
        name of the indicator to be retrieved
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>ndx_rtrn</parameter>
    </term>
    <listitem>
      <para>
        backfilled with the index of the retrieved indicator
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>state_rtrn</parameter>
    </term>
    <listitem>
      <para>
        backfilled with the current state of the retrieved indicator
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>map_rtrn</parameter>
    </term>
    <listitem>
      <para>
        backfilled with the mapping for the retrieved indicator
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>real_rtrn</parameter>
    </term>
    <listitem>
      <para>
        backfilled with <symbol>True</symbol>
         if the named indicator is real (physical)
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
If the device specified by
<parameter>device_spec</parameter>
has an indicator named
<parameter>name</parameter>,
<function>XkbGetNamedIndicator</function>
returns
<symbol>True</symbol>
and populates the rest of the parameters with information about the indicator.
Otherwise,
<function>XkbGetNamedIndicator</function>
returns
<symbol>False</symbol>.
</para>


<para>
The
<parameter>ndx_rtrn</parameter>
field returns the zero-based index of the named indicator. This index is the
bit position to use in any function call that requires a mask of indicator
bits, as well as the indicator’s index into the
<structname>XkbIndicatorRec</structname>
array of indicator maps.
<parameter>state_rtrn</parameter>
returns the current state of the named indicator
(<symbol>True</symbol>
= on,
<symbol>False</symbol>
= off).
<parameter>map_rtrn</parameter>
returns the indicator map for the named indicator. In addition, if the
indicator is mapped to a physical LED, the
<parameter>real_rtrn</parameter>
parameter is set to
<symbol>True</symbol>.
</para>


<para>
Each of the "<parameter>_rtrn</parameter>" arguments is optional; you can pass
<symbol>NULL</symbol>
for any unneeded "<parameter>_rtrn</parameter>" arguments.
</para>


<para>
<function>XkbGetNamedIndicator</function>
can generate
<errorname>BadAtom</errorname>
and
<errorname>BadImplementation</errorname>
errors.
</para>


</sect2>
</sect1>
<sect1 id='Changing_Indicator_Maps_and_State'>
<title>Changing Indicator Maps and State</title>

<para>
Just as you can get the indicator map using a mask or using an indicator name,
so you can change it using a mask or a name.
</para>

<note><para>You cannot change the
<structfield>phys_indicators</structfield>
field of the indicators structure. The only way to change the
<structfield>phys_indicators</structfield>
field is to change the keyboard map.</para></note>

<para>
There are two ways to make changes to indicator maps and state: either change a
local copy of the indicator maps and use
<function>XkbSetIndicatorMap</function>
or
<function>XkbSetNamedIndicator</function>,
or, to reduce network traffic, use an
<structname>XkbIndicatorChangesRec</structname>
structure and use
<function>XkbChangeIndicators</function>.
</para>


<sect2 id='Effects_of_Explicit_Changes_on_Indicators'>
<title>Effects of Explicit Changes on Indicators</title>

<para>
This section discusses the effects of explicitly changing indicators depending
upon different settings in the indicator map. See
<link linkend="table8.3">Table 8.3</link> and
<link linkend="table8.5">Table 8.5</link> for
information on the effects of the indicator map fields when explicit changes
are made.
</para>


<para>
If
<symbol>XkbIM_LEDDrivesKB</symbol>
is set and
<symbol>XkbIM_NoExplicit</symbol>
is not, and if you call a function that updates the server’s image of the
indicator map (such as
<function>XkbSetIndicatorMap</function>
or
<function>XkbSetNamedIndicator</function>),
Xkb changes the keyboard state and controls to reflect the other fields of
the indicator map. If you attempt to explicitly change the value of an
indicator for which
<symbol>XkbIM_LEDDrivesKB</symbol>
is absent or for which
<symbol>XkbIM_NoExplicit</symbol>
is present, keyboard state or controls are unaffected.
</para>


<para>
If neither
<symbol>XkbIM_NoAutomatic</symbol>
nor
<symbol>XkbIM_NoExplicit</symbol>
is set in an indicator map, Xkb honors any request to change the state of the
indicator, but the new state might be immediately superseded by automatic
changes to the indicator state if the keyboard state or controls change.
</para>


<para>
The effects of changing an indicator that drives the keyboard are cumulative;
it is possible for a single change to affect keyboard group, modifiers, and
controls simultaneously.
</para>


<para>
If you change an indicator for which both the
<symbol>XkbIM_LEDDrivesKB</symbol>
and
<symbol>XkbIM_NoAutomatic</symbol>
flags are specified, Xkb applies the keyboard changes specified in the other
indicator map fields and changes the indicator to reflect the state that was
explicitly requested. The indicator remains in the new state until it is
explicitly changed again.
</para>


<para>
If the
<symbol>XkbIM_NoAutomatic</symbol>
flag is not set and
<symbol>XkbIM_LEDDrivesKB</symbol>
is set, Xkb applies the changes specified in the other indicator map fields
and sets the state of the indicator to the values specified by the indicator
map. Note that it is possible in this case for the indicator to end up in a
different state than the one that was explicitly requested. For example, Xkb
does not extinguish an indicator with
<structfield>which_mods</structfield>
of
<symbol>XkbIM_UseBase</symbol>
and
<structfield>mods</structfield>
of
<symbol>Shift</symbol>
if, at the time Xkb processes the request to extinguish the indicator, one of
the
<symbol>Shift</symbol>
keys is physically depressed.
</para>


<para>
If you explicitly light an indicator for which
<symbol>XkbIM_LEDDrivesKB</symbol>
is set, Xkb enables all of the boolean controls specified in the
<structfield>ctrls</structfield>
field of its indicator map. Explicitly extinguishing such an indicator causes
Xkb to disable all of the boolean controls specified in
<structfield>ctrls</structfield>.
</para>


</sect2>
<sect2 id='Changing_Indicator_Maps_by_Index'>
<title>Changing Indicator Maps by Index</title>

<para>
To update the maps for one or more indicators, first modify a local copy of the
keyboard description, then use
<function>XkbSetIndicatorMap</function>
to download the changes to the server:
</para>

<indexterm significance="preferred" zone="XkbSetIndicatorMap"><primary><function>XkbSetIndicatorMap</function></primary></indexterm>
<funcsynopsis id="XkbSetIndicatorMap">
  <funcprototype>
    <funcdef>Bool <function>XkbSetIndicatorMap</function></funcdef>
<!-- (
<parameter>dpy</parameter>,
<parameter>which</parameter>,
<parameter>desc</parameter>
) -->

    <paramdef>Display *<parameter>dpy</parameter></paramdef>
    <paramdef>unsigned int <parameter>which</parameter></paramdef>
    <paramdef>XkbDescPtr <parameter>desc</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>dpy</parameter>
    </term>
    <listitem>
      <para>
        connection to the X server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>which</parameter>
    </term>
    <listitem>
      <para>
        mask of indicators to change
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>desc</parameter>
    </term>
    <listitem>
      <para>
        keyboard description from which the maps are taken
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
For each
bit set in the
<parameter>which</parameter>
parameter,
<function>XkbSetIndicatorMap</function>
sends the corresponding indicator map from the
<parameter>desc</parameter>
parameter to the server.
</para>


</sect2>
<sect2 id='Changing_Indicator_Maps_by_Name'>
<title>Changing Indicator Maps by Name</title>

<para>
<function>XkbSetNamedIndicator</function>
can do several related things:
</para>

<itemizedlist>
<listitem>
  <para>
Name an indicator if it is not already named
  </para>
</listitem>
<listitem>
  <para>
Toggle the state of the indicator
  </para>
</listitem>
<listitem>
  <para>
Set the indicator to a specified state
  </para>
</listitem>
<listitem>
  <para>
Set the indicator map for the indicator
  </para>
</listitem>
</itemizedlist>

<indexterm significance="preferred" zone="XkbSetNamedIndicator"><primary><function>XkbSetNamedIndicator</function></primary></indexterm>
<funcsynopsis id="XkbSetNamedIndicator">
  <funcprototype>
    <funcdef>Bool<function>XkbSetNamedIndicator</function></funcdef>
<!-- (
<parameter>dpy</parameter>,
<parameter>device_spec</parameter>,
<parameter>name</parameter>,
<parameter>change_state, state</parameter>,
<parameter>create_new</parameter>,
<parameter>map</parameter>
) -->

    <paramdef>Display *<parameter>dpy</parameter></paramdef>
    <paramdef>unsigned int <parameter>device_spec</parameter></paramdef>
    <paramdef>Atom <parameter>name</parameter></paramdef>
    <paramdef>Bool <parameter>change_state</parameter></paramdef>
    <paramdef>Bool <parameter>state</parameter></paramdef>
    <paramdef>Bool <parameter>create_new</parameter></paramdef>
    <paramdef>XkbIndicatorMapPtr <parameter>map</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>dpy</parameter>
    </term>
    <listitem>
      <para>
        connection to the X server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>device_spec</parameter>
    </term>
    <listitem>
      <para>
        device ID, or <symbol>XkbUseCoreKbd</symbol>
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>name</parameter>
    </term>
    <listitem>
      <para>
        name of the indicator to change
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>change_state</parameter>
    </term>
    <listitem>
      <para>
        whether to change the indicator state or not
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>state</parameter>
    </term>
    <listitem>
      <para>
        desired new state for the indicator
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>create_new</parameter>
    </term>
    <listitem>
      <para>
        whether a new indicator with the specified name should be
        created when necessary
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>map</parameter>
    </term>
    <listitem>
      <para>
        new map for the indicator
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
If a compatible version of the Xkb extension is not available in the server,
<function>XkbSetNamedIndicator</function>
returns
<symbol>False</symbol>.
Otherwise, it sends a request to the X server to change the indicator
specified by
<parameter>name</parameter>
and returns
<symbol>True</symbol>.
</para>


<para>
If
<parameter>change_state</parameter>
is
<symbol>True</symbol>,
and the optional parameter,
<parameter>state</parameter>,
is not
<symbol>NULL</symbol>,
<function>XkbSetNamedIndicator</function>
tells the server to change the state of the named indicator to the value
specified by
<parameter>state</parameter>.
</para>


<para>
If an indicator with the name specified by
<parameter>name</parameter>
does not already exist, the
<parameter>create_new</parameter>
parameter tells the server whether it should create a new named indicator. If
<parameter>create_new</parameter>
is
<symbol>True</symbol>,
the server finds the first indicator that doesn’t have a name and gives it
the name specified by
<parameter>name</parameter>.
</para>


<para>
If the optional parameter,
<parameter>map</parameter>,
is not
<symbol>NULL</symbol>,
<function>XkbSetNamedIndicator</function>
tells the server to change the indicator’s map to the values specified
in <parameter>map</parameter>.
</para>

<para>
<function>XkbSetNamedIndicator</function>
can generate
<errorname>BadAtom</errorname>
and
<errorname>BadImplementation</errorname>
errors. In addition, it can also generate
<symbol>XkbIndicatorStateNotify</symbol>
(see <link linkend="Tracking_Changes_to_Indicator_State_or_Map">section 8.5</link>),
<symbol>XkbIndicatorMapNotify</symbol>,
and
<symbol>XkbNamesNotify</symbol>
events (see <link linkend="Tracking_Name_Changes">section 18.5</link>).
</para>


</sect2>
<sect2 id='XkbIndicatorChangesRec'>
<title>The XkbIndicatorChangesRec Structure</title>

<indexterm significance="preferred" zone="XkbIndicatorChangesRec">
<primary><structname>XkbIndicatorChangesRec</structname></primary></indexterm>

<para>
The
<structname>XkbIndicatorChangesRec</structname>
identifies small modifications to the indicator map. Use it with the function
<function>XkbChangeIndicators</function>
to reduce the amount of traffic sent to the server.
</para>

<para><programlisting>
typedef struct _XkbIndicatorChanges {
    unsigned int             state_changes;
    unsigned int             map_changes;
} <structname>XkbIndicatorChangesRec</structname>,*XkbIndicatorChangesPtr;
</programlisting></para>

<para>
The
<structfield>state_changes</structfield>
field is a mask that specifies the indicators that have changed state, and
<structfield>map_changes</structfield>
is a mask that specifies the indicators whose maps have changed.
</para>


<para>
To change indicator maps or state without passing the entire keyboard
description, use
<function>XkbChangeIndicators</function>.
</para>

<indexterm significance="preferred" zone="XkbChangeIndicators"><primary><function>XkbChangeIndicators</function></primary></indexterm>
<funcsynopsis id="XkbChangeIndicators">
  <funcprototype>
    <funcdef>Bool <function>XkbChangeIndicators</function></funcdef>
<!-- (
<parameter>dpy, xkb, changes, state</parameter>
) -->

    <paramdef>Display *<parameter>dpy</parameter></paramdef>
    <paramdef>XkbDescPtr <parameter>xkb</parameter></paramdef>
    <paramdef>XkbIndicatorChangesPtr <parameter>changes</parameter></paramdef>
    <paramdef>unsigned int <parameter>state</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>dpy</parameter>
    </term>
    <listitem>
      <para>
        connection to the X server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>xkb</parameter>
    </term>
    <listitem>
      <para>
        keyboard description from which names are to be  taken.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>changes</parameter>
    </term>
    <listitem>
      <para>
        indicators to be updated on the server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>state</parameter>
    </term>
    <listitem>
      <para>
        new state of indicators listed in <parameter>changes</parameter>-&gt;<structfield>state_changes</structfield>
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
<function>XkbChangeIndicators</function>
copies any maps specified by
<parameter>changes</parameter>
from the keyboard description,
<parameter>xkb</parameter>,
to the server specified by
<parameter>dpy</parameter>.
If any bits are set in the
<structfield>state_changes</structfield>
field of
<parameter>changes</parameter>,
<function>XkbChangeIndicators</function>
also sets the state of those indicators to the values specified in the
<parameter>state</parameter>
mask. A 1 bit in
<parameter>state</parameter>
turns the corresponding indicator on, a 0 bit turns it off.
</para>


<para>
<function>XkbChangeIndicators</function>
can generate
<errorname>BadAtom</errorname>
and
<errorname>BadImplementation</errorname>
errors. In addition, it can also generate
<symbol>XkbIndicatorStateNotify</symbol>
and
<symbol>XkbIndicatorMapNotify</symbol>
events (see <link linkend="Tracking_Changes_to_Indicator_State_or_Map">section 8.5</link>).
</para>


</sect2>
</sect1>
<sect1 id='Tracking_Changes_to_Indicator_State_or_Map'>
<title>Tracking Changes to Indicator State or Map</title>

<indexterm significance="preferred" zone="Tracking_Changes_to_Indicator_State_or_Map">
<primary>events</primary><secondary><symbol>XkbIndicatorStateNotify</symbol></secondary></indexterm>
<indexterm significance="preferred" zone="Tracking_Changes_to_Indicator_State_or_Map">
<primary><structname>XkbIndicatorStateNotifyEvent</structname></primary></indexterm>

<indexterm significance="preferred" zone="Tracking_Changes_to_Indicator_State_or_Map">
<primary>events</primary><secondary><symbol>XkbIndicatorMapNotify</symbol></secondary></indexterm>
<indexterm significance="preferred" zone="Tracking_Changes_to_Indicator_State_or_Map">
<primary><structname>XkbIndicatorMapNotifyEvent</structname></primary></indexterm>

<para>
Whenever an indicator changes state, the server sends
<symbol>XkbIndicatorStateNotify</symbol>
events to all interested clients. Similarly, whenever an indicator’s map
changes, the server sends
<symbol>XkbIndicatorMapNotify</symbol>
events to all interested clients.
</para>


<para>
To receive
<symbol>XkbIndicatorStateNotify</symbol>
events, use
<function>XkbSelectEvents</function>
(see <link linkend="Selecting_Xkb_Events">section 4.3</link>) with both the
<parameter>bits_to_change</parameter>
and
<parameter>values_for_bits</parameter>
parameters containing
<symbol>XkbIndicatorStateNotifyMask</symbol>.
To receive
<symbol>XkbIndicatorMapNotify</symbol>
events, use
<function>XkbSelectEvents</function>
with
<symbol>XkbIndicatorMapNotifyMask</symbol>.
</para>


<para>
To receive events for only specific indicators, use
<function>XkbSelectEventDetails</function>.
Set the
<structfield>event_type</structfield>
parameter to
<symbol>XkbIndicatorStateNotify</symbol>
or
<symbol>XkbIndicatorMapNotify</symbol>,
and set both the
<parameter>bits_to_change</parameter>
and
<parameter>values_for_bits</parameter>
detail parameters to a mask where each bit specifies one indicator, turning on
those bits that specify the indicators for which you want to receive events.
</para>


<para>
Both types of indicator events use the same structure:

<programlisting>
typedef struct _XkbIndicatorNotify {
    int            type;        /* Xkb extension base event code */
    unsigned long  serial;      /* X server serial number for event */
    Bool           send_event;  /* <symbol>True</symbol> &rArr; synthetically generated */
    Display *      display;     /* server connection where event generated */
    Time           time;        /* server time when event generated */
    int            xkb_type;    /* specifies state or map notify */
    int            device;      /* Xkb device ID, will not be <symbol>XkbUseCoreKbd</symbol> */
    unsigned int   changed;     /* mask of indicators with new state or map */
    unsigned int   state;       /* current state of all indicators */
} <structname>XkbIndicatorNotifyEvent</structname>;
</programlisting></para>

<para>
<structfield>xkb_type</structfield>
is either
<symbol>XkbIndicatorStateNotify</symbol>
or
<symbol>XkbIndicatorMapNotify</symbol>,
depending on whether the event is a
<symbol>XkbIndicatorStateNotify</symbol>
event or
<symbol>XkbIndicatorMapNotify</symbol>,
event.
</para>

<para>
The
<structfield>changed</structfield>
parameter is a mask that is the bitwise inclusive OR of the indicators that
have changed. If the event is of type
<symbol>XkbIndicatorMapNotify</symbol>,
<structfield>changed</structfield>
reports the maps that changed. If the event is of type
<symbol>XkbIndicatorStateNotify</symbol>,
<structfield>changed</structfield>
reports the indicators that have changed state.
<parameter>state</parameter>
is a mask that specifies the current state of all indicators, whether they
have changed or not, for both
<symbol>XkbIndicatorStateNotify</symbol>
and <symbol>XkbIndicatorMapNotify</symbol> events.
</para>

<para>
When your client application receives either a
<symbol>XkbIndicatorStateNotify</symbol>
event or
<symbol>XkbIndicatorMapNotify</symbol>
event, you can note the changes in a changes structure by calling
<function>XkbNoteIndicatorChanges</function>.
</para>

<indexterm significance="preferred" zone="XkbNoteIndicatorChanges"><primary><function>XkbNoteIndicatorChanges</function></primary></indexterm>
<funcsynopsis id="XkbNoteIndicatorChanges">
  <funcprototype>
    <funcdef>void <function>XkbNoteIndicatorChanges</function></funcdef>
<!-- (
<parameter>old</parameter>,
<parameter>new</parameter>,
<parameter>wanted</parameter>
) -->

    <paramdef>XkbIndicatorChangesPtr <parameter>old</parameter></paramdef>
    <paramdef>XkbIndicatorNotifyEvent *<parameter>new</parameter></paramdef>
    <paramdef>unsigned int <parameter>wanted</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>old</parameter>
    </term>
    <listitem>
      <para>
        XkbIndicatorChanges structure to be updated
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>new</parameter>
    </term>
    <listitem>
      <para>
        event from which changes are to be copied
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>wanted</parameter>
    </term>
    <listitem>
      <para>
        which changes are to be noted
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
The
<parameter>wanted</parameter>
parameter is the bitwise inclusive OR of
<symbol>XkbIndicatorMapMask</symbol>
and
<emphasis>XkbIndicatorStateMask</emphasis>.
<function>XkbNoteIndicatorChanges</function>
copies any changes reported in
<parameter>new</parameter>
and specified in
<parameter>wanted</parameter>
into the changes record specified by
<parameter>old</parameter>.
</para>


<para>
To update a local copy of the keyboard description with the actual values, pass
the results of one or more calls to
<function>XkbNoteIndicatorChanges</function>
to
<function>XkbGetIndicatorChanges</function>:
</para>


<indexterm significance="preferred" zone="XkbGetIndicatorChanges"><primary><function>XkbGetIndicatorChanges</function></primary></indexterm>
<funcsynopsis id="XkbGetIndicatorChanges">
  <funcprototype>
    <funcdef>Status <function>XkbGetIndicatorChanges</function></funcdef>
<!-- (
<parameter>dpy</parameter>,
<parameter>xkb</parameter>,
<parameter>changes</parameter>,
<parameter>state</parameter>
) -->

    <paramdef>Display *<parameter>dpy</parameter></paramdef>
    <paramdef>XkbDescPtr <parameter>xkb</parameter></paramdef>
    <paramdef>XkbIndicatorChangesPtr <parameter>changes</parameter></paramdef>
    <paramdef>unsigned int *<parameter>state</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>dpy</parameter>
    </term>
    <listitem>
      <para>
        connection to the X server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>xkb</parameter>
    </term>
    <listitem>
      <para>
        keyboard description to hold the new values
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>changes</parameter>
    </term>
    <listitem>
      <para>
        indicator maps/state to be obtained from the server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>state</parameter>
    </term>
    <listitem>
      <para>
        backfilled with the state of the indicators
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
<function>XkbGetIndicatorChanges</function>
examines the
<parameter>changes</parameter>
parameter, pulls over the necessary information from the server, and copies
the results into the
<parameter>xkb</parameter>
keyboard description. If any bits are set in the
<structfield>state_changes</structfield>
field of
<parameter>changes</parameter>,
<function>XkbGetIndicatorChanges</function>
also places the state of those indicators in
<parameter>state</parameter>.
If the
<structfield>indicators</structfield>
field of
<parameter>xkb</parameter>
is
<symbol>NULL</symbol>,
<function>XkbGetIndicatorChanges</function>
allocates and initializes it. To free the
<structfield>indicators</structfield>
field, use
<function>XkbFreeIndicatorMaps</function>
(see <link linkend="Allocating_and_Freeing_Indicator_Maps">section 8.6</link>).
</para>


<para>
<function>XkbGetIndicatorChanges</function>
can generate
<errorname>BadAlloc</errorname>,
<errorname>BadImplementation</errorname>,
and
<errorname>BadMatch</errorname>
errors.
</para>


</sect1>
<sect1 id='Allocating_and_Freeing_Indicator_Maps'>
<title>Allocating and Freeing Indicator Maps</title>

<para>
Most applications do not need to directly allocate the
<structfield>indicators</structfield>
member of the keyboard description record (the keyboard description record is
described in <xref linkend="Complete_Keyboard_Description" />). If the need arises, however, use
<function>XkbAllocIndicatorMaps</function>.
</para>

<indexterm significance="preferred" zone="XkbAllocIndicatorMaps"><primary><function>XkbAllocIndicatorMaps</function></primary></indexterm>
<funcsynopsis id="XkbAllocIndicatorMaps">
  <funcprototype>
    <funcdef>Status <function>XkbAllocIndicatorMaps</function></funcdef>
<!-- (
<parameter>xkb</parameter>
) -->

    <paramdef>XkbDescPtr <parameter>xkb</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>xkb</parameter>
    </term>
    <listitem>
      <para>
        keyboard description structure
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
The
<parameter>xkb</parameter>
parameter must point to a valid keyboard description. If it doesn’t,
<function>XkbAllocIndicatorMaps</function>
returns a
<errorname>BadMatch</errorname>
error. Otherwise,
<function>XkbAllocIndicatorMaps</function>
allocates and initializes the
<structfield>indicators</structfield>
member of the keyboard description record and returns
<symbol>Success</symbol>.
If
<function>XkbAllocIndicatorMaps</function>
was unable to allocate the indicators record, it reports a
<errorname>BadAlloc</errorname>
error.
</para>

<para>
To free memory used by the
<structfield>indicators</structfield>
member of an
<structname>XkbDescRec</structname>
structure, use
<function>XkbFreeIndicatorMaps</function>.
</para>

<indexterm significance="preferred" zone="XkbFreeIndicatorMaps"><primary><function>XkbFreeIndicatorMaps</function></primary></indexterm>
<funcsynopsis id="XkbFreeIndicatorMaps">
  <funcprototype>
    <funcdef>void <function>XkbFreeIndicatorMaps</function></funcdef>
<!-- (
<parameter>xkb</parameter>
) -->

    <paramdef>XkbDescPtr <parameter>xkb</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>xkb</parameter>
    </term>
    <listitem>
      <para>
        keyboard description structure
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
If the <structfield>indicators</structfield>
member of the keyboard description record
pointed to by <parameter>xkb</parameter>
is not <symbol>NULL</symbol>,
<function>XkbFreeIndicatorMaps</function>
frees the memory associated with
the <structfield>indicators</structfield>
member of <parameter>xkb</parameter>.
</para>

</sect1>
</chapter>
@


1.2
log
@Upate to libX11 1.5rc1. Tested by krw@@, mpi@@, shadchin@@.
@
text
@d1 3
d7 3
d13 6
a18 6
state of the input device. For example, most keyboards have a <emphasis>
CapsLock</emphasis>
 LED, but X does not provide a mechanism to make the LED automatically follow
the logical state of the <emphasis>
CapsLock</emphasis>
 key.
d24 12
a35 12
ability to determine what bits in the <emphasis>
led_mask</emphasis>
 field of the <emphasis>
XKeyboardState</emphasis>
 map to the particular LEDs on the keyboard. For example, X does not provide a
method for a client to determine what bit to set in the <emphasis>
led_mask</emphasis>
 field to turn on the <emphasis>
Scroll Lock </emphasis>
LED or whether the keyboard even has a <emphasis>
Scroll Lock</emphasis>
 LED.
d47 2
a48 1
"virtual" LED panel. This chapter describes Xkb indicators and the functions
d59 10
a68 9
specific indicators, use <emphasis>
XkbSetNames</emphasis>
 as discussed in Chapter 18. Then set the map using <emphasis> <!-- xref -->
XkbSetMap</emphasis>
 (see section 14.3) or <emphasis> <!-- xref -->
XkbSetNamedIndicator</emphasis>
 (below). To retrieve indicator names, use <emphasis>
XkbGetNames</emphasis>
 (Chapter 18). <!-- xref -->
d77 5
a81 5
Use the indicator description record, <emphasis>
XkbIndicatorRec</emphasis>
, and its indicator map, <emphasis>
XkbIndicatorMapRec</emphasis>
, to inquire about and control most indicator properties and behaviors.
d88 3
d92 3
a94 3
The description for all the Xkb indicators is held in the <emphasis>
indicators</emphasis>
 field of the complete keyboard description (see Chapter 6), which is defined  <!-- xref -->
a95 1
</para>
d97 1
a97 1
<para><programlisting>
d99 1
a99 2
</programlisting></para>
<para><programlisting>
d101 3
a103 3
      unsigned long                   phys_indicators;        /* LEDs existence */
      XkbIndicatorMapRec              maps[XkbNumIndicators]; /* indicator maps */
} <emphasis>XkbIndicatorRec</emphasis>,*XkbIndicatorPtr;
d107 3
a109 3
This structure contains the <emphasis>
phys_indicators</emphasis>
 field, which relates some information about the correspondence between
d111 2
a112 3
<emphasis>
maps</emphasis>
, one map per indicator.
d116 6
a121 6
The <emphasis>
phys_indicators</emphasis>
 field indicates which indicators are bound to physical LEDs on the keyboard;
if a bit is set in <emphasis>
phys_indicators</emphasis>
, then the associated indicator has a physical LED associated with it. This
d124 6
a129 6
the state of <emphasis>
CapsLock</emphasis>
, but most keyboards do not have an LED that indicates the current group.
Because <emphasis>
phys_indicators</emphasis>
 describes a physical characteristic of the keyboard, you cannot directly
d131 5
a135 5
completely new keyboard description via <emphasis>
XkbGetKeyboardByName</emphasis>
, or if a new keyboard is attached and the X implementation notices, <emphasis>
phys_indicators</emphasis>
 changes if the indicators for the new keyboard are different.
d143 3
d149 5
a153 6
attributes of each indicator are held in the <emphasis>
maps</emphasis>
 array, which is an array of <emphasis>
XkbIndicatorRec</emphasis>
 structures:
</para>
d155 1
a155 1
<para><programlisting>
d157 7
a163 7
      unsigned char    flags;         /* how the indicator can be changed */
      unsigned char    which_groups;  /* match criteria for groups */
      unsigned char    groups;        /* which keyboard groups the indicator watches */
      unsigned char    which_mods;    /* match criteria for modifiers */
      XkbModsRec       mods;          /* which modifiers the indicator watches */
      unsigned int     ctrls;         /* which controls the indicator watches */
} <emphasis>XkbIndicatorMapRec</emphasis>, *XkbIndicatorMapPtr;
d190 4
a193 4
using the functions <emphasis>
XkbSetControls</emphasis>
 or <emphasis>
XChangeKeyboardControl</emphasis>
d201 1
a201 1
relationship to the indicator map, see section 8.4.1. <!-- xref -->
d208 6
a213 6
The <emphasis>
flags</emphasis>
 field specifies the conditions under which the indicator can be changed and
the effects of changing the indicator. The valid values for <emphasis>
flags</emphasis>
 and their effects are shown in Table 8.1. <!-- xref -->
d216 1
a216 1
<table frame='topbot'>
d232 1
a232 1
    <entry>XkbIM_NoExplicit</entry>
d237 1
a237 1
    <entry>XkbIM_NoAutomatic</entry>
d244 1
a244 1
    <entry>XkbIM_LEDDrivesKB</entry>
d254 3
a256 3
Note that if <emphasis>
XkbIM_NoAutomatic</emphasis>
 is not set, by default the indicator follows the keyboard state.
d261 10
a270 10
If <emphasis>
XkbIM_LEDDrivesKB</emphasis>
 is set and <emphasis>
XkbIM_NoExplicit</emphasis>
 is not, and if you call a function which updates the server’s image of the
indicator map (such as <emphasis>
XkbSetIndicatorMap</emphasis>
 or <emphasis>
XkbSetNamedIndicator</emphasis>
), Xkb changes the keyboard state and controls to reflect the other fields of
d272 5
a276 5
attempt to explicitly change the value of an indicator for which <emphasis>
XkbIM_LEDDrivesKB</emphasis>
 is absent or for which <emphasis>
XkbIM_NoExplicit</emphasis>
 is present, keyboard state or controls are unaffected.
d281 24
a304 27
For example, a keyboard designer may want to make the <emphasis>
CapsLock</emphasis>
 LED controllable only by the server, but allow the <emphasis>
Scroll Lock</emphasis>
 LED to be controlled by client applications. To do so, the keyboard designer
could set the <emphasis>
XkbIM_NoExplicit</emphasis>
 flag for the <emphasis>
CapsLock</emphasis>
<emphasis>
 </emphasis>
LED, but not set it for the <emphasis>
Scroll Lock</emphasis>
 LED. Or the keyboard designer may wish to allow the <emphasis>
CapsLock</emphasis>
 LED to be controlled by both the server and client applications and also have
the server to automatically change the <emphasis>
CapsLock</emphasis>
<emphasis>
 </emphasis>
modifier state whenever a client application changes the <emphasis>
CapsLock</emphasis>
 LED. To do so, the keyboard designer would not set the <emphasis>
XkbIM_NoExplicit</emphasis>
 flag, but would instead set the <emphasis>
XkbIM_LEDDrivesKB</emphasis>
 flag.
d309 3
a311 3
Xkb automatically turns an indicator on or off (only if <emphasis>
XkbIM_NoAutomatic</emphasis>
 is not set). If these conditions match the keyboard state, Xkb turns the
d321 10
a330 11
The <emphasis>
which_groups</emphasis>
 and the <emphasis>
groups</emphasis>
 fields of an indicator map determine how the keyboard group state affects the
corresponding indicator. The <emphasis>
which_groups</emphasis>
 field controls the interpretation of <emphasis>
groups</emphasis>
 and may contain any one of the following values:
</para>
d332 1
a332 1
<para><programlisting>
d343 2
a344 2
The <emphasis>
groups </emphasis>
a346 1
</para>
d348 1
a348 1
<para><programlisting>
d358 7
a364 7
If <emphasis>
XkbIM_NoAutomatic</emphasis>
 is not set (the keyboard drives the indicator), the effect of <emphasis>
which_groups</emphasis>
 and <emphasis>
groups</emphasis>
 is shown in Table 8.2. <!-- xref -->
d367 1
a367 1
<table frame='topbot'>
d382 1
a382 1
    <entry>XkbIM_UseNone</entry>
d384 3
a386 3
The <emphasis>
groups</emphasis>
 field and the current keyboard group state are ignored.
d390 1
a390 1
    <entry>XkbIM_UseBase</entry>
d392 6
a397 6
If <emphasis>
groups</emphasis>
 is nonzero, the indicator is lit whenever the base keyboard group is nonzero.
If <emphasis>
groups</emphasis>
 is zero, the indicator is lit whenever the base keyboard group is zero.
d401 1
a401 1
    <entry>XkbIM_UseLatched</entry>
d403 6
a408 6
If <emphasis>
groups</emphasis>
 is nonzero, the indicator is lit whenever the latched keyboard group is
nonzero. If <emphasis>
groups</emphasis>
 is zero, the indicator is lit whenever the latched keyboard group is zero.
d412 1
a412 1
    <entry>XkbIM_UseLocked</entry>
d414 5
a418 5
The <emphasis>
groups</emphasis>
 field is interpreted as a mask. The indicator is lit when the current locked
keyboard group matches one of the bits that are set in <emphasis>
groups</emphasis>.
d422 1
a422 1
    <entry>XkbIM_UseEffective</entry>
d424 6
a429 7
The <emphasis>
groups</emphasis>
 field is interpreted as a mask. The indicator is lit when the current
effective keyboard group matches one of the bits that are set in <emphasis>
groups</emphasis>
.
    </entry>
d436 9
a444 8
The effect of <emphasis>
which_groups</emphasis>
 and <emphasis>
groups</emphasis>
 when you change an indicator for which <emphasis>
XkbIM_LEDDrivesKB</emphasis>
 is set (the indicator drives the keyboard) is shown in Table 8.3. The "New
State" column refers to the new state to which you set the indicator.
d447 1
a447 1
<table frame='topbot'>
d464 1
a464 1
    <entry>XkbIM_UseNone </entry>
d469 1
a469 1
    <entry>XkbIM_UseBase</entry>
d474 1
a474 1
    <entry>XkbIM_UseLatched</entry>
d477 8
a484 8
The <emphasis>
groups</emphasis>
 field is treated as a group mask. The keyboard group latch is changed to the
lowest numbered group specified in <emphasis>
groups</emphasis>
; if <emphasis>
groups</emphasis>
 is empty, the keyboard group latch is changed to zero.
d488 1
a488 1
    <entry>XkbIM_UseLatched</entry>
d491 3
a493 3
The <emphasis>
groups</emphasis>
 field is treated as a group mask. If the indicator is explicitly extinguished,
d495 4
a498 5
<emphasis>
groups</emphasis>
; if <emphasis>
groups</emphasis>
 is zero, the keyboard group latch is set to the index of the highest legal
d506 5
a510 5
If the <emphasis>
groups</emphasis>
 mask is empty, group is not changed; otherwise, the locked keyboard group is
changed to the lowest numbered group specified in <emphasis>
groups</emphasis>.
d518 7
a524 7
specified in the <emphasis>
groups</emphasis>
 mask, or to <emphasis>
Group1</emphasis>
 if the <emphasis>
groups</emphasis>
 mask contains all keyboard groups.
d536 19
a554 20
The <emphasis>
mods </emphasis>
field specifies what modifiers an indicator watches. The <emphasis>
mods</emphasis>
 field is an Xkb modifier definition, <emphasis>
XkbModsRec</emphasis>
, as described in section 7.2, which can specify both real and virtual  <!-- xref -->
modifiers. The <emphasis>
mods</emphasis>
 field takes effect even if some or all of the virtual indicators specified in
<emphasis>
mods</emphasis>
 are unbound. To specify the mods field, in general, assign the modifiers of
interest to <emphasis>
mods.real_mods</emphasis>
 and the virtual modifiers of interest to <emphasis>
mods.vmods</emphasis>
. You can disregard the <emphasis>
mods.mask</emphasis>
 field unless your application needs to interpret the indicator map directly
d559 5
a563 6
modifiers are changed in the modifier definition) or you can use <emphasis>
XkbVirtualModsToReal</emphasis>
 to determine the proper contents for the mask field, assuming that the
<emphasis>
XkbDescRec</emphasis>
 contains the virtual modifier definitions.
d567 16
a582 19
<emphasis>
which_mods</emphasis>
 specifies what criteria Xkb uses to determine a match with the corresponding
<emphasis>
mods</emphasis>
 field by specifying one or more components of the Xkb keyboard state. If
<emphasis>
XkbIM_NoAutomatic</emphasis>
 is not set (the keyboard drives the indicator), the indicator is lit whenever
any of the modifiers specified in the <emphasis>
mask</emphasis>
 field of the<emphasis>
 mods</emphasis>
 modifier definition are also set in any of the current keyboard state
components specified by <emphasis>
which_mods</emphasis>
. Remember that the <emphasis>
mask</emphasis>
 field is comprised of all of the real modifiers specified in the definition
d584 4
a587 5
the definition. (See Chapter 5 for more information on the keyboard state and  <!-- xref -->
Chapter 7 for more information on virtual modifiers.) Use a bitwise inclusive
OR of the following values to compose a value for <emphasis>
which_mods</emphasis>:
</para>
d589 1
a589 1
<para><programlisting>
d602 7
a608 7
If <emphasis>
XkbIM_NoAutomatic</emphasis>
 is not set (the keyboard drives the indicator), the effect of <emphasis>
which_mods</emphasis>
 and <emphasis>
mods</emphasis>
 is shown in Table 8.4 <!-- xref -->
d611 1
a611 1
<table frame='topbot'>
d625 1
a625 1
    <entry>XkbIM_UseNone</entry>
d630 1
a630 1
    <entry>XkbIM_UseBase</entry>
d632 9
a640 9
The indicator is lit when any of the modifiers specified in the <emphasis>
mask</emphasis>
 field of <emphasis>
mods</emphasis>
 are on in the keyboard base state. If both <emphasis>
mods.real_mods</emphasis>
 and <emphasis>
mods.vmods</emphasis>
 are zero, the indicator is lit when the base keyboard state contains no
d645 1
a645 1
    <entry>XkbIM_UseLatched</entry>
d647 9
a655 9
The indicator is lit when any of the modifiers specified in the <emphasis>
mask</emphasis>
 field of <emphasis>
mods</emphasis>
 are latched. If both <emphasis>
mods.real_mods</emphasis>
 and <emphasis>
mods.vmods</emphasis>
 are zero, the indicator is lit when none of the modifier keys are latched.
d659 1
a659 1
    <entry>XkbIM_UseLocked</entry>
d661 9
a669 9
The indicator is lit when any of the modifiers specified in the <emphasis>
mask</emphasis>
 field of <emphasis>
mods</emphasis>
 are locked. If both <emphasis>
mods.real_mods</emphasis>
 and <emphasis>
mods.vmods</emphasis>
 are zero, the indicator is lit when none of the modifier keys are locked.
d673 1
a673 1
    <entry>XkbIM_UseEffective</entry>
d675 9
a683 9
The indicator is lit when any of the modifiers specified in the <emphasis>
mask</emphasis>
 field of <emphasis>
mods</emphasis>
 are in the effective keyboard state. If both <emphasis>
mods.real_mods</emphasis>
 and <emphasis>
mods.vmods</emphasis>
 are zero, the indicator is lit when the effective keyboard state contains no
d688 1
a688 1
    <entry>XkbIM_UseCompat</entry>
d690 9
a698 9
The indicator is lit when any of the modifiers specified in the <emphasis>
mask</emphasis>
 field of <emphasis>
mods</emphasis>
 are in the keyboard compatibility state. If both <emphasis>
mods.real_mods</emphasis>
 and <emphasis>
mods.vmods</emphasis>
 are zero, the indicator is lit when the keyboard compatibility state contains
d707 10
a716 9
The effect on the keyboard modifiers of <emphasis>
which_mods</emphasis>
 and <emphasis>
mods</emphasis>
 when you change an indicator for which <emphasis>
XkbIM_LEDDrivesKB</emphasis>
 is set (the indicator drives the keyboard) is shown in Table 8.5. The "New
State" column refers to the new state to which you set the indicator.
</para> <!-- xref -->
d718 1
a718 1
<table frame='topbot'>
d739 1
a739 1
    <entry>XkbIM_UseLatched</entry>
d742 5
a746 5
Any modifiers specified in the <emphasis>
mask</emphasis>
 field of <emphasis>
mods</emphasis>
 are added to the latched modifiers.
d750 1
a750 1
    <entry>XkbIM_UseLatched</entry>
d753 5
a757 5
Any modifiers specified in the <emphasis>
mask</emphasis>
 field of <emphasis>
mods</emphasis>
 are removed from the latched modifiers.
d764 5
a768 5
Any modifiers specified in the <emphasis>
mask</emphasis>
 field of <emphasis>
mods</emphasis>
 are added to the locked modifiers.
d772 1
a772 1
    <entry>XkbIM_UseLocked</entry>
d775 5
a779 5
Any modifiers specified in the <emphasis>
mask</emphasis>
 field of <emphasis>
mods</emphasis>
 are removed from the locked modifiers.
d786 5
a790 5
Any modifiers specified in the <emphasis>
mask</emphasis>
 field of <emphasis>
mods</emphasis>
 are removed from both the locked and latched modifiers.
d802 3
a804 3
The <emphasis>
ctrls</emphasis>
 field specifies what controls (see Chapter 10) the indicator watches and is
a805 1
</para> <!-- xref -->
d807 1
a807 1
<para><programlisting>
d825 2
a826 3
<emphasis>
ctrls</emphasis>
 is enabled.
d842 6
a847 6
position in masks is as follows: one of the parameters returned from <emphasis>
XkbGetNamedIndicators</emphasis>
 is an index that is the bit position to use in any function call that requires
a mask of indicator bits, as well as the indicator’s index into the <emphasis>
XkbIndicatorRec</emphasis>
 array of indicator maps.
d857 2
a858 2
current state of the keyboard indicators, use <emphasis>
XkbGetIndicatorState</emphasis>.
d861 69
a929 68
<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Status <emphasis>
XkbGetIndicatorState</emphasis>
(<emphasis>
display</emphasis>
, <emphasis>
device_spec</emphasis>
, <emphasis>
state_return</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Display *      <emphasis>
display</emphasis>
;            /* connection to the X server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int      <emphasis>
device_spec</emphasis>
;            /* device ID, or <emphasis>
XkbUseCoreKbd</emphasis>
 */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int *      <emphasis>
state_return</emphasis>
;            /* backfilled with a mask of the indicator state */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
<emphasis>
XkbGetIndicatorState</emphasis>
 queries the <emphasis>
display</emphasis>
 for the state of the indicators on the device specified by the <emphasis>
device_spec</emphasis>
. For each indicator that is "turned on" on the device, the associated bit is
set in <emphasis>
state_return</emphasis>
. If a compatible version of the Xkb extension is not available in the server,
<emphasis>
XkbGetIndicatorState</emphasis>
 returns a <emphasis>
BadMatch</emphasis>
 error. Otherwise, it sends the request to the X server, places the state of
the indicators into <emphasis>
state_return,</emphasis>
 and returns <emphasis>
Success</emphasis>
. Thus the value reported by <emphasis>
XkbGetIndicatorState</emphasis>
 is identical to the value reported by the core protocol.
d939 2
a940 65
indicators, use <emphasis>
XkbGetIndicatorMap</emphasis>.
</para>

<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Status <emphasis>
XkbGetIndicatorMap</emphasis>
(<emphasis>
dpy</emphasis>
,<emphasis>
 which</emphasis>
,<emphasis>
 desc</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Display *      <emphasis>
dpy</emphasis>
;      /* connection to the X server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int      <emphasis>
which</emphasis>
;      /* mask of indicators for which maps should be returned */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbDescPtr      <emphasis>
desc</emphasis>
;      /* keyboard description to be updated */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
<emphasis>
XkbGetIndicatorMap</emphasis>
 obtains the maps from the server for only those indicators specified by the
<emphasis>
which</emphasis>
 mask and copies the values into the keyboard description specified by
<emphasis>
desc</emphasis>
. If the <emphasis>
indicators</emphasis>
 field of the <emphasis>
desc</emphasis>
 parameter is <emphasis>
NULL</emphasis>
, <emphasis>
XkbGetIndicatorMap</emphasis>
 allocates and initializes it.
d943 81
a1023 20

<para>
<emphasis>
XkbGetIndicatorMap</emphasis>
 can generate <emphasis>
BadAlloc</emphasis>
, <emphasis>
BadLength</emphasis>
, <emphasis>
BadMatch</emphasis>
, and <emphasis>
BadImplementation</emphasis>
 errors.
</para>


<para>
To free the indicator maps, use <emphasis>
XkbFreeIndicatorMaps</emphasis>
 (see section 8.6).
d1032 3
a1034 3
Xkb also allows applications to refer to indicators by name. Use <emphasis>
XkbGetNames</emphasis>
 to get the indicator names (see Chapter 18). Using names eliminates the need
d1036 132
a1167 120
of using vendor-specific constants such as <emphasis>
WSKBLed_ScrollLock</emphasis>
 mask on Digital workstations or <emphasis>
XLED_SCROLL_LOCK</emphasis>
 on Sun workstations, you can instead use <emphasis>
XkbGetNamedIndicator</emphasis>
 to look up information on the indicator named "Scroll Lock."
</para>

<para>
Use <emphasis>
XkbGetNamedIndicator</emphasis>
 to look up the indicator map and other information for an indicator by name.
</para>

<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Bool <emphasis>
XkbGetNamedIndicator</emphasis>
(<emphasis>
dpy</emphasis>
,<emphasis>
 dev_spec</emphasis>
,<emphasis>
 name</emphasis>
,<emphasis>
 ndx_rtrn</emphasis>
,<emphasis>
 state_rtrn</emphasis>
,<emphasis>
 map_rtrn</emphasis>
, <emphasis>
real_rtrn</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Display *            <emphasis>
dpy</emphasis>
;            /* connection to the X server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int      <emphasis>
      device_spec</emphasis>
;            /* keyboard device ID, or <emphasis>
XkbUseCoreKbd</emphasis>
 */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Atom      <emphasis>
      name</emphasis>
;            /* name of the indicator to be retrieved */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int *            <emphasis>
ndx_rtrn</emphasis>
;            /* backfilled with the index of the retrieved indicator */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Bool *            <emphasis>
state_rtrn</emphasis>
;            /* backfilled with the current state of the retrieved indicator */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbIndicatorMapPtr      <emphasis>
      map_rtrn</emphasis>
;            /* backfilled with the mapping for the retrieved indicator */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Bool *            <emphasis>
real_rtrn</emphasis>
;            /* backfilled with <emphasis>
True</emphasis>
 if the named indicator is real (physical) */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
If the device specified by <emphasis>
device_spec</emphasis>
 has an indicator named <emphasis>
name</emphasis>
,<emphasis>
 XkbGetNamedIndicator</emphasis>
 returns <emphasis>
True</emphasis>
 and populates the rest of the parameters with information about the indicator.
Otherwise, <emphasis>
XkbGetNamedIndicator</emphasis>
 returns <emphasis>
False</emphasis>
.
</para>


<para>
The <emphasis>
ndx_rtrn</emphasis>
 field returns the zero-based index of the named indicator. This index is the
d1169 15
a1183 16
bits, as well as the indicator’s index into the <emphasis>
XkbIndicatorRec</emphasis>
 array of indicator maps. <emphasis>
state_rtrn</emphasis>
 returns the current state of the named indicator (<emphasis>
True</emphasis>
 = on, <emphasis>
False</emphasis>
 = off). <emphasis>
map_rtrn</emphasis>
 returns the indicator map for the named indicator. In addition, if the
indicator is mapped to a physical LED, the <emphasis>
real_rtrn</emphasis>
 parameter is set to <emphasis>
True</emphasis>
.
d1188 3
a1190 7
Each of the "<emphasis>
_rtrn</emphasis>
" arguments is optional; you can pass <emphasis>
NULL</emphasis>
 for any unneeded "<emphasis>
_rtrn</emphasis>
" arguments.
d1195 6
a1200 7
<emphasis>
XkbGetNamedIndicator</emphasis>
 can generate <emphasis>
BadAtom</emphasis>
 and <emphasis>
BadImplementation</emphasis>
 errors.
d1214 5
a1218 5
<note><para>You cannot change the <emphasis>
phys_indicators</emphasis>
 field of the indicators structure. The only way to change the <emphasis>
phys_indicators</emphasis>
 field is to change the keyboard map.</para></note>
d1222 8
a1229 8
local copy of the indicator maps and use <emphasis>
XkbSetIndicatorMap</emphasis>
 or <emphasis>
XkbSetNamedIndicator</emphasis>
, or, to reduce network traffic, use an<emphasis>
 XkbIndicatorChangesRec</emphasis>
 structure and use <emphasis>
XkbChangeIndicators</emphasis>.
d1238 3
a1240 1
upon different settings in the indicator map. See Tables 8.3 and Table 8.5 for
d1247 10
a1256 10
If <emphasis>
XkbIM_LEDDrivesKB</emphasis>
 is set and <emphasis>
XkbIM_NoExplicit</emphasis>
 is not, and if you call a function that updates the server’s image of the
indicator map (such as <emphasis>
XkbSetIndicatorMap</emphasis>
 or <emphasis>
XkbSetNamedIndicator</emphasis>
), Xkb changes the keyboard state and controls to reflect the other fields of
d1258 5
a1262 5
indicator for which <emphasis>
XkbIM_LEDDrivesKB</emphasis>
 is absent or for which <emphasis>
XkbIM_NoExplicit</emphasis>
 is present, keyboard state or controls are unaffected.
d1267 5
a1271 5
If neither <emphasis>
XkbIM_NoAutomatic</emphasis>
 nor <emphasis>
XkbIM_NoExplicit</emphasis>
 is set in an indicator map, Xkb honors any request to change the state of the
d1285 5
a1289 5
If you change an indicator for which both the <emphasis>
XkbIM_LEDDrivesKB</emphasis>
 and <emphasis>
XkbIM_NoAutomatic</emphasis>
 flags are specified, Xkb applies the keyboard changes specified in the other
d1297 5
a1301 5
If the <emphasis>
XkbIM_NoAutomatic</emphasis>
 flag is not set and <emphasis>
XkbIM_LEDDrivesKB</emphasis>
 is set, Xkb applies the changes specified in the other indicator map fields
d1305 12
a1316 12
does not extinguish an indicator with <emphasis>
which_mods</emphasis>
 of <emphasis>
XkbIM_UseBase</emphasis>
 and <emphasis>
mods</emphasis>
 of <emphasis>
Shift</emphasis>
 if, at the time Xkb processes the request to extinguish the indicator, one of
the <emphasis>
Shift</emphasis>
 keys is physically depressed.
d1321 7
a1327 8
If you explicitly light an indicator for which <emphasis>
XkbIM_LEDDrivesKB</emphasis>
 is set, Xkb enables all of the boolean controls specified in the <emphasis>
ctrls</emphasis>
 field of its indicator map. Explicitly extinguishing such an indicator causes
Xkb to disable all of the boolean controls specified in <emphasis>
ctrls</emphasis>
.
d1337 62
a1398 58
keyboard description, then use <emphasis>
XkbSetIndicatorMap</emphasis>
 to download the changes to the server:
</para>

<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Bool<emphasis>
 XkbSetIndicatorMap</emphasis>
(<emphasis>
dpy</emphasis>
,<emphasis>
 which</emphasis>
,<emphasis>
 desc</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Display *      <emphasis>
dpy</emphasis>
;      /* connection to the X server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int      <emphasis>
which</emphasis>
;      /* mask of indicators to change */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbDescPtr      <emphasis>
desc</emphasis>
;      /* keyboard description from which the maps are taken */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
For each<emphasis>
 </emphasis>
bit set in the <emphasis>
which </emphasis>
parameter,<emphasis>
 XkbSetIndicatorMap</emphasis>
 sends the corresponding indicator map from the <emphasis>
desc</emphasis>
 parameter to the server.
d1407 2
a1408 3
<emphasis>
XkbSetNamedIndicator</emphasis>
 can do several related things:
d1434 95
a1528 79
<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Bool<emphasis>
 XkbSetNamedIndicator</emphasis>
(<emphasis>
dpy</emphasis>
,<emphasis>
 device_spec</emphasis>
,<emphasis>
 name</emphasis>
,<emphasis>
 change_state, state</emphasis>
,<emphasis>
 create_new</emphasis>
,<emphasis>
 map</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Display *      <emphasis>
      dpy</emphasis>
;            /* connection to the X server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int      <emphasis>
      device_spec</emphasis>
;            /* device ID, or <emphasis>
XkbUseCoreKbd</emphasis>
 */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Atom      <emphasis>
      name</emphasis>
;            /* name of the indicator to change */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Bool      <emphasis>
      change_state</emphasis>
;            /* whether to change the indicator state or not */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Bool      <emphasis>
      state</emphasis>
;            /* desired new state for the indicator */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Bool            <emphasis>
create_new</emphasis>
;            /* whether a new indicator with the specified name should be
created when necessary */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbIndicatorMapPtr            <emphasis>
map</emphasis>
;            /* new map for the indicator */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>
d1532 65
a1596 70
<emphasis>
XkbSetNamedIndicator</emphasis>
 returns <emphasis>
False</emphasis>
. Otherwise, it sends a request to the X server to change the indicator
specified by <emphasis>
name</emphasis>
 and returns <emphasis>
True</emphasis>.
</para>


<para>
If <emphasis>
change_state</emphasis>
 is <emphasis>
True</emphasis>
, and the optional parameter, <emphasis>
state</emphasis>
, is not <emphasis>
NULL</emphasis>
, <emphasis>
XkbSetNamedIndicator</emphasis>
 tells the server to change the state of the named indicator to the value
specified by <emphasis>
state</emphasis>.
</para>


<para>
If an indicator with the name specified by <emphasis>
name</emphasis>
 does not already exist, the <emphasis>
create_new</emphasis>
 parameter tells the server whether it should create a new named indicator. If
<emphasis>
create_new</emphasis>
 is <emphasis>
True</emphasis>
, the server finds the first indicator that doesn’t have a name and gives it
the name specified by <emphasis>
name</emphasis>.
</para>


<para>
If the optional parameter, <emphasis>
map</emphasis>
, is not <emphasis>
NULL</emphasis>
, <emphasis>
XkbSetNamedIndicator</emphasis>
 tells the server to change the indicator’s map to the values specified
in <emphasis>map</emphasis>.
</para>

<para>
<emphasis>
XkbSetNamedIndicator</emphasis>
 can generate <emphasis>
BadAtom</emphasis>
 and <emphasis>
BadImplementation</emphasis>
 errors. In addition, it can also generate <emphasis>
XkbIndicatorStateNotify</emphasis>
 (see section 8.5), <emphasis> <!-- xref -->
XkbIndicatorMapNotify</emphasis>
, and <emphasis>
XkbNamesNotify</emphasis>
 events (see section 18.5). <!-- xref -->
d1601 1
a1601 1
<sect2 id='The_XkbIndicatorChangesRec_Structure'>
d1604 3
d1608 5
a1612 6
The <emphasis>
XkbIndicatorChangesRec</emphasis>
 identifies small modifications to the indicator map. Use it with the function
<emphasis>
XkbChangeIndicators</emphasis>
 to reduce the amount of traffic sent to the server.
d1617 3
a1619 4
      unsigned int             state_changes;
      unsigned int             map_changes;
}<emphasis>
XkbIndicatorChangesRec</emphasis>,*XkbIndicatorChangesPtr;
d1623 5
a1627 6
The <emphasis>
state_changes</emphasis>
 field is a mask that specifies the indicators that have changed state, and
<emphasis>
map_changes</emphasis>
 is a mask that specifies the indicators whose maps have changed.
d1633 2
a1634 86
description, use <emphasis>
XkbChangeIndicators</emphasis>
.
</para>

<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Bool <emphasis>
XkbChangeIndicators</emphasis>
(<emphasis>
dpy, xkb, changes, state</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Display *                  <emphasis>
dpy</emphasis>
;      /* connection to the X server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbDescPtr                  <emphasis>
xkb</emphasis>
;      /* keyboard description from which names are to be
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
                        taken. */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbIndicatorChangesPtr                  <emphasis>
changes</emphasis>
;      /* indicators to be updated on the server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int                  <emphasis>
state</emphasis>
;      /* new state of indicators listed in
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
<emphasis>
                        changes</emphasis>
-&gt;<emphasis>
state_changes</emphasis>
 */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
<emphasis>
XkbChangeIndicators</emphasis>
 copies any maps specified by <emphasis>
changes</emphasis>
 from the keyboard description, <emphasis>
xkb</emphasis>
, to the server specified by <emphasis>
dpy</emphasis>
. If any bits are set in the <emphasis>
state_changes</emphasis>
 field of <emphasis>
changes</emphasis>
, <emphasis>
XkbChangeIndicators</emphasis>
 also sets the state of those indicators to the values specified in the
<emphasis>
state</emphasis>
 mask. A 1 bit in <emphasis>
state</emphasis>
 turns the corresponding indicator on, a 0 bit turns it off.
d1637 89
a1725 13

<para>
<emphasis>
XkbChangeIndicator</emphasis>
s can generate <emphasis>
BadAtom</emphasis>
 and <emphasis>
BadImplementation</emphasis>
 errors. In addition, it can also generate <emphasis>
XkbIndicatorStateNotify</emphasis>
 and <emphasis>
XkbIndicatorMapNotify</emphasis>
 events (see section 8.5). <!-- xref -->
d1734 17
a1750 7
<para>
Whenever an indicator changes state, the server sends <emphasis>
XkbIndicatorStateNotify</emphasis>
 events to all interested clients. Similarly, whenever an indicator’s map
changes, the server sends <emphasis>
XkbIndicatorMapNotify</emphasis>
 events to all interested clients.
d1755 16
a1770 17
To receive <emphasis>
XkbIndicatorStateNotify</emphasis>
 events, use <emphasis>
XkbSelectEvents</emphasis>
 (see section 4.3) with both the <emphasis> <!-- xref -->
bits_to_change </emphasis>
and<emphasis>
 values_for_bits</emphasis>
 parameters containing <emphasis>
XkbIndicatorStateNotifyMask</emphasis>
. To receive <emphasis>
XkbIndicatorMapNotify</emphasis>
 events, use <emphasis>
XkbSelectEvents</emphasis>
 with <emphasis>
XkbIndicatorMapNotifyMask</emphasis>
.
d1775 13
a1787 13
To receive events for only specific indicators, use <emphasis>
XkbSelectEventDetails</emphasis>
. Set the <emphasis>
event_type</emphasis>
 parameter<emphasis>
 to XkbIndicatorStateNotify</emphasis>
 or <emphasis>
XkbIndicatorMapNotify</emphasis>
, and set both the <emphasis>
bits_to_change </emphasis>
and<emphasis>
 values_for_bits</emphasis>
 detail parameters to a mask where each bit specifies one indicator, turning on
a1793 1
</para>
d1795 1
a1795 1
<para><programlisting>
d1797 10
a1806 10
      int            type;        /* Xkb extension base event code */
      unsigned long  serial;      /* X server serial number for event */
      Bool           send_event;  /* <emphasis> True</emphasis> =&gt; synthetically generated */
      Display *      display;     /* server connection where event generated */
      Time           time;        /* server time when event generated */
      int            xkb_type;    /* specifies state or map notify */
      int            device;      /* Xkb device ID, will not be <emphasis> XkbUseCoreKbd</emphasis> */
      unsigned int   changed;     /* mask of indicators with new state or map */
      unsigned int   state;       /* current state of all indicators */
} <emphasis>XkbIndicatorNotifyEvent</emphasis>;
d1810 101
a1910 100
<emphasis>
xkb_type</emphasis>
 is either <emphasis>
XkbIndicatorStateNotify</emphasis>
 or <emphasis>
XkbIndicatorMapNotify</emphasis>
, depending on whether the event is a <emphasis>
kbIndicatorStateNotify</emphasis>
 event or <emphasis>
kbIndicatorMapNotify</emphasis>
 event.
</para>

<para>
The <emphasis>
changed</emphasis>
 parameter is a mask that is the bitwise inclusive OR of the indicators that
have changed. If the event is of type <emphasis>
XkbIndicatorMapNotify</emphasis>
, <emphasis>
changed</emphasis>
 reports the maps that changed. If the event is of type <emphasis>
XkbIndicatorStateNotify</emphasis>
, <emphasis>
changed</emphasis>
 reports the indicators that have changed state. <emphasis>
state</emphasis>
 is a mask that specifies the current state of all indicators, whether they
have changed or not, for both <emphasis>
XkbIndicatorStateNotify</emphasis>
 and <emphasis>IndicatorMapNotify</emphasis> events.
</para>

<para>
When your client application receives either a <emphasis>
XkbIndicatorStateNotify</emphasis>
 event or <emphasis>
XkbIndicatorMapNotify</emphasis>
 event, you can note the changes in a changes structure by calling <emphasis>
XkbNoteIndicatorChanges</emphasis>.
</para>

<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
void <emphasis>
XkbNoteIndicatorChanges</emphasis>
(<emphasis>
old</emphasis>
,<emphasis>
 new</emphasis>
,<emphasis>
 wanted</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbIndicatorChangesPtr            <emphasis>
      old</emphasis>
;      /* XkbIndicatorChanges structure to be updated */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbIndicatorNotifyEvent *                  <emphasis>
new</emphasis>
;      /* event from which changes are to be copied */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int            <emphasis>
      wanted</emphasis>
;      /* which changes are to be noted */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
The <emphasis>
wanted</emphasis>
 parameter is the bitwise inclusive OR of <emphasis>
XkbIndicatorMapMask</emphasis>
 and <emphasis>
XkbIndicatorStateMask</emphasis>
. <emphasis>
XkbNoteIndicatorChanges</emphasis>
 copies any changes reported in <emphasis>
new</emphasis>
 and specified in <emphasis>
wanted</emphasis>
 into the changes record specified by <emphasis>
old</emphasis>.
d1916 104
a2019 101
the results of one or more calls to <emphasis>
XkbNoteIndicatorChanges</emphasis>
 to <emphasis>
XkbGetIndicatorChanges</emphasis>:
</para>


<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Status <emphasis>
XkbGetIndicatorChanges</emphasis>
(<emphasis>
dpy</emphasis>
,<emphasis>
 xkb</emphasis>
,<emphasis>
 changes</emphasis>
,<emphasis>
 state</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Display *            <emphasis>
dpy</emphasis>
;            /* connection to the X server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbDescPtr            <emphasis>
xkb</emphasis>
;            /* keyboard description to hold the new values */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbIndicatorChangesPtr            <emphasis>
changes</emphasis>
;            /* indicator maps/state to be obtained from the server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int *            <emphasis>
state</emphasis>
;            /* backfilled with the state of the indicators */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
<emphasis>
XkbGetIndicatorChanges</emphasis>
 examines the <emphasis>
changes</emphasis>
 parameter, pulls over the necessary information from the server, and copies
the results into the <emphasis>
xkb</emphasis>
 keyboard description. If any bits are set in the <emphasis>
state_changes</emphasis>
 field of <emphasis>
changes</emphasis>
, <emphasis>
XkbGetIndicatorChanges</emphasis>
 also places the state of those indicators in <emphasis>
state</emphasis>
. If the <emphasis>
indicators</emphasis>
 field of <emphasis>
xkb</emphasis>
 is <emphasis>
NULL</emphasis>
, <emphasis>
XkbGetIndicatorChanges</emphasis>
 allocates and initializes it. To free the <emphasis>
indicators</emphasis>
 field, use <emphasis>
XkbFreeIndicators</emphasis>
 (see section 8.6). <!-- xref -->
</para>


<para>
<emphasis>
XkbGetIndicatorChanges</emphasis>
 can generate <emphasis>
BadAlloc</emphasis>
, <emphasis>
BadImplementation,</emphasis>
 and <emphasis>
BadMatch</emphasis>
 errors.
d2028 90
a2117 93
Most applications do not need to directly allocate the <emphasis>
indicators</emphasis>
 member of the keyboard description record (the keyboard description record is
described in Chapter 6). If the need arises, however, use <emphasis>
XkbAllocIndicatorMaps.</emphasis>
</para>

<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Status <emphasis>
XkbAllocIndicatorMaps</emphasis>
(<emphasis>
xkb</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbDescPtr      <emphasis>
xkb</emphasis>
;      /* keyboard description structure */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
The <emphasis>
xkb</emphasis>
 parameter must point to a valid keyboard description. If it doesn’t,
<emphasis>
XkbAllocIndicatorMaps</emphasis>
 returns a <emphasis>
BadMatch</emphasis>
 error. Otherwise, <emphasis>
XkbAllocIndicatorMaps</emphasis>
 allocates and initializes the <emphasis>
indicators</emphasis>
 member of the keyboard description record and returns <emphasis>
Success</emphasis>
. If <emphasis>
XkbAllocIndicatorMaps</emphasis>
 was unable to allocate the indicators record, it reports a Bad<emphasis>
Alloc</emphasis>
 error.
</para>

<para>
To free memory used by the <emphasis>
indicators</emphasis>
 member of an <emphasis>
XkbDescRec</emphasis>
 structure, use <emphasis>
XkbFreeIndicatorMaps.</emphasis>
</para>

<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
void <emphasis>
XkbFreeIndicatorMaps</emphasis>
(<emphasis>
xkb</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbDescPtr      <emphasis>
xkb</emphasis>
;      /* keyboard description structure */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
If the <emphasis>indicators</emphasis>
 member of the keyboard description record
pointed to by <emphasis>xkb</emphasis>
is not <emphasis>NULL</emphasis>
, <emphasis>XkbFreeIndicatorMaps</emphasis>
d2119 2
a2120 2
the <emphasis>indicators</emphasis>
member of <emphasis>xkb</emphasis>.
@


1.1
log
@Update to libx11 1.4.2. Tested by ajacoutot@@, jasper@@ krw@@, landry@@,
shadchin@@ on various architectures.
Bump major.
@
text
@d1 1
a1 1
<chapter id='indicators'>
d45 1
a45 1
<sect1 id='indicator_names'>
d65 1
a65 1
<sect1 id='indicator_data_structures'>
d77 1
a77 1
<sect2 id='xkbindicatorrec'>
d132 1
a132 1
<sect2 id='xkbindicatormaprec'>
d194 1
a194 1
<sect3 id='xkbindicatormaprec_flags_field'>
d206 1
a206 1
<table frame='none'>
d208 5
a212 4
<tgroup cols='3'>
<colspec colsep='0'/>
<colspec colsep='0'/>
<colspec colsep='0'/>
d214 1
a214 1
<row rowsep='0'>
d221 1
a221 1
  <row rowsep='0'>
d226 1
a226 1
  <row rowsep='0'>
d233 1
a233 1
  <row rowsep='0'>
d310 1
a310 1
<sect3 id='xkbindicatormaprec_which_groups_and_groups_fields'>
d362 1
a362 1
<table frame='none'>
d365 4
a368 3
<tgroup cols='2'>
<colspec colsep='0'/>
<colspec colsep='0'/>
d370 1
a370 1
<row rowsep='0'>
d376 1
a376 1
  <row rowsep='0'>
d384 1
a384 1
  <row rowsep='0'>
d395 1
a395 1
  <row rowsep='0'>
d406 1
a406 1
  <row rowsep='0'>
d416 1
a416 1
  <row rowsep='0'>
d442 1
a442 1
<table frame='none'>
d445 5
a449 2
<tgroup cols='3'>
<colspec colsep='0'/>
d451 1
a451 1
<row rowsep='0'>
d458 1
a458 1
  <row rowsep='0'>
d463 1
a463 1
  <row rowsep='0'>
d468 1
a468 1
  <row rowsep='0'>
d482 1
a482 1
  <row rowsep='0'>
d498 1
a498 1
  <row rowsep='0'>
d509 1
a509 1
  <row rowsep='0'>
d528 1
a528 1
<sect3 id='xkbindicatormaprec_which_mods_and_mods_fields'>
d613 1
a613 1
<table frame='none'>
d615 4
a618 2
<tgroup cols='2'>
<colspec colsep='0'/>
d620 1
a620 1
<row rowsep='0'>
d626 1
a626 1
  <row rowsep='0'>
d631 1
a631 1
  <row rowsep='0'>
d646 1
a646 1
  <row rowsep='0'>
d660 1
a660 1
  <row rowsep='0'>
d674 1
a674 1
  <row rowsep='0'>
d689 1
a689 1
  <row rowsep='0'>
d719 1
a719 1
<table frame='none'>
d721 5
a725 3
<tgroup cols='3'>
<colspec colsep='0'/>
<colspec colsep='0'/>
d727 1
a727 1
<row rowsep='0'>
d734 1
a734 1
  <row rowsep='0'>
d739 1
a739 1
  <row rowsep='0'>
d750 1
a750 1
  <row rowsep='0'>
d761 1
a761 1
  <row rowsep='0'>
d772 1
a772 1
  <row rowsep='0'>
d783 1
a783 1
  <row rowsep='0'>
d799 1
a799 1
<sect3 id='xkbindicatormaprec_ctrls_field'>
d836 1
a836 1
<sect1 id='getting_information_about_indicators'>
d854 1
a854 1
<sect2 id='getting_indicator_state'>
d865 3
a867 2
<tgroup cols='1'>
<colspec colsep='0'/>
d869 1
a869 1
  <row rowsep='0'>
d882 1
a882 1
  <row rowsep='0'>
d889 1
a889 1
  <row rowsep='0'>
d898 1
a898 1
  <row rowsep='0'>
d936 1
a936 1
<sect2 id='getting_indicator_information_by_index'>
d946 3
a948 2
<tgroup cols='1'>
<colspec colsep='0'/>
d950 1
a950 1
  <row rowsep='0'>
d963 1
a963 1
  <row rowsep='0'>
d970 1
a970 1
  <row rowsep='0'>
d977 1
a977 1
  <row rowsep='0'>
d1032 1
a1032 1
<sect2 id='getting_indicator_information_by_name'>
d1056 3
a1058 2
<tgroup cols='1'>
<colspec colsep='0'/>
d1060 1
a1060 1
  <row rowsep='0'>
d1081 1
a1081 1
  <row rowsep='0'>
d1088 1
a1088 1
  <row rowsep='0'>
d1097 1
a1097 1
  <row rowsep='0'>
d1104 1
a1104 1
  <row rowsep='0'>
d1111 1
a1111 1
  <row rowsep='0'>
d1118 1
a1118 1
  <row rowsep='0'>
d1125 1
a1125 1
  <row rowsep='0'>
d1204 1
a1204 1
<sect1 id='changing_indicator_maps_and_state'>
d1231 1
a1231 1
<sect2 id='effects_of_explicit_changes_on_indicators'>
d1329 1
a1329 1
<sect2 id='changing_indicator_maps_by_index'>
d1340 3
a1342 2
<tgroup cols='1'>
<colspec colsep='0'/>
d1344 1
a1344 1
  <row rowsep='0'>
d1357 1
a1357 1
  <row rowsep='0'>
d1364 1
a1364 1
  <row rowsep='0'>
d1371 1
a1371 1
  <row rowsep='0'>
d1396 1
a1396 1
<sect2 id='changing_indicator_maps_by_name'>
d1429 3
a1431 2
<tgroup cols='1'>
<colspec colsep='0'/>
d1433 1
a1433 1
  <row rowsep='0'>
d1452 1
a1452 1
  <row rowsep='0'>
d1459 1
a1459 1
  <row rowsep='0'>
d1468 1
a1468 1
  <row rowsep='0'>
d1475 1
a1475 1
  <row rowsep='0'>
d1482 1
a1482 1
  <row rowsep='0'>
d1489 1
a1489 1
  <row rowsep='0'>
d1497 1
a1497 1
  <row rowsep='0'>
d1584 1
a1584 1
<sect2 id='the_xkbindicatorchangesrec_structure'>
d1622 3
a1624 2
<tgroup cols='1'>
<colspec colsep='0'/>
d1626 1
a1626 1
  <row rowsep='0'>
d1635 1
a1635 1
  <row rowsep='0'>
d1642 1
a1642 1
  <row rowsep='0'>
d1649 1
a1649 1
  <row rowsep='0'>
d1654 1
a1654 1
  <row rowsep='0'>
d1661 1
a1661 1
  <row rowsep='0'>
d1668 1
a1668 1
  <row rowsep='0'>
d1722 1
a1722 1
<sect1 id='tracking_changes_to_indicator_state_or_map'>
d1836 3
a1838 2
<tgroup cols='1'>
<colspec colsep='0'/>
d1840 1
a1840 1
  <row rowsep='0'>
d1853 1
a1853 1
  <row rowsep='0'>
d1860 1
a1860 1
  <row rowsep='0'>
d1867 1
a1867 1
  <row rowsep='0'>
d1906 3
a1908 2
<tgroup cols='1'>
<colspec colsep='0'/>
d1910 1
a1910 1
  <row rowsep='0'>
d1925 1
a1925 1
  <row rowsep='0'>
d1932 1
a1932 1
  <row rowsep='0'>
d1939 1
a1939 1
  <row rowsep='0'>
d1946 1
a1946 1
  <row rowsep='0'>
d2003 1
a2003 1
<sect1 id='allocating_and_freeing_indicator_maps'>
d2015 3
a2017 2
<tgroup cols='1'>
<colspec colsep='0'/>
d2019 1
a2019 1
  <row rowsep='0'>
d2028 1
a2028 1
  <row rowsep='0'>
d2070 3
a2072 2
<tgroup cols='1'>
<colspec colsep='0'/>
d2074 1
a2074 1
  <row rowsep='0'>
d2083 1
a2083 1
  <row rowsep='0'>
@

