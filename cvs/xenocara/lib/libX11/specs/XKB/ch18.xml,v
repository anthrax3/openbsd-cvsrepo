head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.8
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.2
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2015.04.06.20.57.58;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	L5f7tv2EiGjtzoSu;

1.2
date	2012.03.27.19.19.38;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.30.19.19.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to libX11 1.6.3
@
text
@<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
	  "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<chapter id='Symbolic_Names'>
<title>Symbolic Names</title>

<para>
The core protocol does not provide any information to clients other than that
actually used to interpret events. This makes it difficult to write an
application that presents the keyboard to a user in an easy-to-understand way.
Such applications have to examine the vendor string and keycodes to determine
the type of keyboard connected to the server and then examine keysyms and
modifier mappings to determine the effects of most modifiers (the
<symbol>Shift</symbol>,
<symbol>Lock</symbol>
and
<symbol>Control</symbol>
modifiers are defined by the core protocol but no semantics are implied for
any other modifiers).
</para>


<para>
To make it easier for applications to present a keyboard to the user, Xkb
supports symbolic names for most components of the keyboard extension. Most of
these symbolic names are grouped into the
<structfield>names</structfield>
component of the keyboard description.
</para>

<sect1 id='The_XkbNamesRec_Structure'>
<title>The XkbNamesRec Structure</title>
<indexterm significance="preferred" zone="The_XkbNamesRec_Structure">
<primary><structname>XkbKeyNameRec</structname></primary></indexterm>
<indexterm significance="preferred" zone="The_XkbNamesRec_Structure">
<primary><structname>XkbKeyAliasRec</structname></primary></indexterm>
<indexterm significance="preferred" zone="The_XkbNamesRec_Structure">
<primary><structname>XkbNamesRec</structname></primary></indexterm>

<para>
The names component of the keyboard description is defined as follows:

<programlisting>
#define      XkbKeyNameLength      4
#define      XkbKeyNumVirtualMods  16
#define      XkbKeyNumIndicators   32
#define      XkbKeyNumKbdGroups    4
#define      XkbMaxRadioGroups     32

typedef struct {
    char      name[XkbKeyNameLength];      /* symbolic key names */
} <structname>XkbKeyNameRec</structname>, *XkbKeyNamePtr;

typedef struct {
    char      real[XkbKeyNameLength];
              /* this key name must be in the keys array */
    char      alias[XkbKeyNameLength];
              /* symbolic key name as alias for the key */
} <structname>XkbKeyAliasRec</structname>, *XkbKeyAliasPtr;

typedef struct _XkbNamesRec {
    Atom            keycodes;        /* identifies range and meaning
                                        of keycodes */
    Atom            geometry;        /* identifies physical location,
                                        size, and shape of keys */
    Atom            symbols;         /* identifies the symbols logically
                                        bound to the keys */
    Atom            types;           /* identifies the set of key types */
    Atom            compat;          /* identifies actions for keys using
                                        core protocol */
    Atom            vmods[XkbNumVirtualMods]; /* symbolic names for
                                                 virtual modifiers */
    Atom            indicators[XkbNumIndicators]; /* symbolic names
                                                     for indicators */
    Atom            groups[XkbNumKbdGroups];  /* symbolic names for
                                                 keyboard groups */
    XkbKeyNamePtr   keys;            /* symbolic key name array */
    XkbKeyAliasPtr  key_aliases;     /* real/alias symbolic name pairs array */
    Atom *          radio_groups;    /* radio group name array */
    Atom            phys_symbols;    /* identifies the symbols engraved
                                        on the keyboard */
    unsigned char   num_keys;        /* number of keys in the <structfield>keys</structfield> array */
    unsigned char   num_key_aliases; /* number of keys in the
                                        <structfield>key_aliases</structfield> array */
    unsigned short  num_rg;          /* number of radio groups */
} <structname>XkbNamesRec</structname>, *XkbNamesPtr;
</programlisting></para>

<para>
The
<structfield>keycodes</structfield>
name identifies the range and meaning of the keycodes returned by the keyboard
in question. The
<structfield>geometry</structfield>
name, on the other hand, identifies the physical location, size and shape of
the various keys on the keyboard. As an example to distinguish between these
two names, consider function keys on PC-compatible keyboards. Function keys are
sometimes above the main keyboard and sometimes to the left of the main
keyboard, but the same keycode is used for the key that is logically F1
regardless of physical position. Thus, all PC-compatible keyboards share a
similar keycodes name but may have different geometry names.
</para>

<note><para>The keycodes name is intended to be a very general description of
the keycodes returned by a keyboard; a single keycodes name might cover
keyboards with differing numbers of keys provided all keys have the same
semantics when present. For example, 101 and 102 key PC keyboards might use the
same name. In these cases, applications can use the keyboard
<structfield>geometry</structfield>
name to determine which subset of the named keycodes is in use.</para></note>

<para>
The
<structfield>symbols</structfield>
name identifies the symbols logically bound to the keys. The symbols name is a
human or application-readable description of the intended locale or usage of
the keyboard with these symbols. The
<structfield>phys_symbols</structfield>
name, on the other hand, identifies the symbols actually engraved on the
keyboard. Given this, the
<structfield>symbols</structfield>
name and
<structfield>phys_symbols</structfield>
names might be different. For example, the description for a keyboard that has
English US engravings, but that is using Swiss German symbols might have a
<structfield>phys_symbols</structfield>
name of "en_US" and a
<structfield>symbols</structfield>
name of "de_CH."
</para>


<para>
The
<structfield>types</structfield>
name provides some information about the set of key types (see <link linkend="Key_Types">section 15.2</link>)
that can be associated with the keyboard. In addition, each key type can have a
name, and each shift level of a type can have a name. Although these names are
stored in the map description with each of the types, they are accessed using
the same methods as the other symbolic names.
</para>


<para>
The
<structfield>compat</structfield>
name provides some information about the rules used to bind actions to keys
that are changed using core protocol requests.
</para>


<para>
Xkb provides symbolic names for each of the 4 keyboard groups, 16 virtual
modifiers, 32 keyboard indicators, and 4 keyboard groups. These names are held
in the
<structfield>vmods</structfield>,
<structfield>indicators</structfield>,
and
<structfield>groups</structfield>
fixed-length arrays.
</para>


<para>
Each key has a four-byte symbolic name. All of the symbolic key names are held
in the
<structfield>keys</structfield>
array, and
<structfield>num_keys</structfield>
reports the number of entries that are in the keys array. For each key, the
key name links keys with similar functions or in similar positions on keyboards
that report different keycodes. For example, the
<keycap>F1</keycap>
key may emit keycode 23 on one keyboard and keycode 86 on another. By naming
this key "FK01" on both keyboards, the keyboard layout designer can reuse parts
of keyboard descriptions for different keyboards.
</para>


<para>
Key aliases allow the keyboard layout designer to assign multiple key names to
a single key. This allows the keyboard layout designer to refer to keys using
either their position or their <quote>function</quote>.
For example, a keyboard layout
designer may wish to refer to the left arrow key on a PC keyboard using the
ISO9995-5 positional specification of A31 or using the functional specification
of LEFT. The
<structfield>key_aliases</structfield>
field holds a variable-length array of real and alias key name pairs, and the
total number of entries in the
<structfield>key_aliases</structfield>
array is held in
<structfield>num_key_aliases</structfield>.
For each real and alias key name pair, the
<structfield>real</structfield>
field refers to the a name in the keys array, and the
<structfield>alias</structfield>
field refers to the alias for that key. Using the previous example, the
keyboard designer may use the name A31 in the keys array, but also define the
name LEFT as an alias for A31 in the
<structfield>key_aliases</structfield>
array.
</para>

<note><para>Key aliases defined in the geometry component of a keyboard mapping
(see <xref linkend="Keyboard_Geometry" />) override those defined in the keycodes component of the server
database, which are stored in the
<structname>XkbNamesRec</structname>

(<structfield>xkb-&gt;names</structfield>).
Therefore, consider the key aliases defined by the geometry before
considering key aliases supplied by the
<structname>XkbNamesRec</structname>.
</para></note>

<para>
A radio group is a set of keys whose behavior simulates a set of radio buttons.
Once a key in a radio group is pressed, it stays logically depressed until
another key in the group is pressed, at which point the previously depressed
key is logically released. Consequently, at most one key in a radio group can
be logically depressed at one time.
</para>


<para>
Each radio group in the keyboard description can have a name. These names are
held in the variable-length array
<structfield>radio_groups</structfield>,
and
<structfield>num_rg</structfield>
tells how many elements are in the
<structfield>radio_groups</structfield>
array.
</para>


</sect1>
<sect1 id='Symbolic_Names_Masks'>
<title>Symbolic Names Masks</title>

<para>
Xkb provides several functions that work with symbolic names. Each of these
functions uses a mask to specify individual fields of the structures described
above. These masks and their relationships to the fields in a keyboard
description are shown in <link linkend="table18.1">Table 18.1</link>.
</para>

<table id='table18.1' frame='topbot'>
<title>Symbolic Names Masks</title>
<?dbfo keep-together="always" ?>
<tgroup cols='4' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='3.0*'/>
<colspec colname='c2' colwidth='1.0*'/>
<colspec colname='c3' colwidth='1.5*'/>
<colspec colname='c4' colwidth='2.0*'/>
<thead>
<row rowsep='1'>
  <entry>Mask Bit</entry>
  <entry>Value</entry>
  <entry>Keyboard Component</entry>
  <entry>Field</entry>
</row>
</thead>
<tbody>
<row>
    <entry><symbol>XkbKeycodesNameMask</symbol></entry>
    <entry>(1&lt;&lt;0)</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>keycodes</entry>
</row>
<row>
    <entry><symbol>XkbGeometryNameMask</symbol></entry>
    <entry>(1&lt;&lt;1)</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>geometry</entry>
</row>
<row>
    <entry><symbol>XkbSymbolsNameMask</symbol></entry>
    <entry>(1&lt;&lt;2)</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>symbols</entry>
</row>
<row>
    <entry><symbol>XkbPhysSymbolsNameMask</symbol></entry>
    <entry>(1&lt;&lt;3)</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>phys_symbols</entry>
</row>
<row>
    <entry><symbol>XkbTypesNameMask</symbol></entry>
    <entry>(1&lt;&lt;4)</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>type</entry>
</row>
<row>
    <entry><symbol>XkbCompatNameMask</symbol></entry>
    <entry>(1&lt;&lt;5)</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>compat</entry>
</row>
<row>
    <entry><symbol>XkbKeyTypeNamesMask</symbol></entry>
    <entry>(1&lt;&lt;6)</entry>
    <entry>Xkb-&gt;map</entry>
    <entry>type[*].name</entry>
</row>
<row>
    <entry><symbol>XkbKTLevelNamesMask</symbol></entry>
    <entry>(1&lt;&lt;7)</entry>
    <entry>Xkb-&gt;map</entry>
    <entry>type[*].lvl_names[*]</entry>
</row>
<row>
    <entry><symbol>XkbIndicatorNamesMask</symbol></entry>
    <entry>(1&lt;&lt;8)</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>indicators[*]</entry>
</row>
<row>
    <entry><symbol>XkbKeyNamesMask</symbol></entry>
    <entry>(1&lt;&lt;9)</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>keys[*], num_keys</entry>
</row>
<row>
    <entry><symbol>XkbKeyAliasesMask</symbol></entry>
    <entry>(1&lt;&lt;10)</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>key_aliases[*], num_key_aliases</entry>
</row>
<row>
    <entry><symbol>XkbVirtualModNamesMask</symbol></entry>
    <entry>(1&lt;&lt;11)</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>vmods[*]</entry>
</row>
<row>
    <entry><symbol>XkbGroupNamesMask</symbol></entry>
    <entry>(1&lt;&lt;12)</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>groups[*]</entry>
</row>
<row>
    <entry><symbol>XkbRGNamesMask</symbol></entry>
    <entry>(1&lt;&lt;13)</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>radio_groups[*], num_rg</entry>
</row>
<row>
    <entry><symbol>XkbComponentNamesMask</symbol></entry>
    <entry>(0x3f)</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>
<para>keycodes,</para>
<para>geometry,</para>
<para>symbols,</para>
<para>physical symbols,</para>
<para>types, and</para>
<para>compatibility map</para>
    </entry>
</row>
<row>
    <entry><symbol>XkbAllNamesMask</symbol></entry>
    <entry>(0x3fff)</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>all name components</entry>
  </row>
</tbody>
</tgroup>
</table>

</sect1>
<sect1 id='Getting_Symbolic_Names_From_the_Server'>
<title>Getting Symbolic Names From the Server</title>

<para>
To obtain symbolic names from the server, use
<function>XkbGetNames</function>.
</para>

<indexterm significance="preferred" zone="XkbGetNames"><primary><function>XkbGetNames</function></primary></indexterm>
<funcsynopsis id="XkbGetNames">
  <funcprototype>
    <funcdef>Status <function>XkbGetNames</function></funcdef>
<!-- (
<parameter>dpy, which, Xkb</parameter>
) -->

    <paramdef>Display *<parameter>dpy</parameter></paramdef>
    <paramdef>unsigned int <parameter>which</parameter></paramdef>
    <paramdef>XkbDescPtr <parameter>xkb</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>dpy</parameter>
    </term>
    <listitem>
      <para>
        connection to the X server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>which</parameter>
    </term>
    <listitem>
      <para>
        mask of names or map components to be updated
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>xkb</parameter>
    </term>
    <listitem>
      <para>
        keyboard description to be updated
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
<function>XkbGetNames</function>
retrieves symbolic names for the components of the keyboard extension from the
X server. The
<parameter>which</parameter>
parameter specifies the name components to be updated in the
<parameter>xkb</parameter>
parameter, and is the bitwise inclusive OR of the valid names mask bits
defined in <link linkend="table18.1">Table 18.1</link>.
</para>


<para>
If the
<structfield>names</structfield>
field of the keyboard description
<parameter>xkb</parameter>
is
<symbol>NULL</symbol>,
<function>XkbGetNames</function>
allocates and initializes the
<structfield>names</structfield>
component of the keyboard description before obtaining the values specified by
<parameter>which</parameter>.
If the
<structfield>names</structfield>
field of
<parameter>xkb</parameter>
is not
<symbol>NULL</symbol>,
<function>XkbGetNames</function>
obtains the values specified by
<parameter>which</parameter>
and copies them into the keyboard description
<parameter>xkb</parameter>.
</para>


<para>
If the
<structfield>map</structfield>
component of the
<parameter>xkb</parameter>
parameter is
<symbol>NULL</symbol>,
<function>XkbGetNames</function>
does not retrieve type or shift level names, even if
<symbol>XkbKeyTypeNamesMask</symbol>
or
<symbol>XkbKTLevelNamesMask</symbol>
are set in
<parameter>which</parameter>.
</para>


<para>
<function>XkbGetNames</function>
can return
<symbol>Success</symbol>,
or
<errorname>BadAlloc</errorname>,
<errorname>BadLength</errorname>,
<errorname>BadMatch</errorname>,
and
<errorname>BadImplementation</errorname>
errors.
</para>


<para>
To free symbolic names, use
<function>XkbFreeNames</function>
(see <link linkend="Allocating_and_Freeing_Symbolic_Names">section 18.6</link>)
</para>


</sect1>
<sect1 id='Changing_Symbolic_Names_on_the_Server'>
<title>Changing Symbolic Names on the Server</title>

<para>
To change the symbolic names in the server, first modify a local copy of the
keyboard description and then use either
<function>XkbSetNames</function>,
or, to save network traffic, use a
<structname>XkbNameChangesRec</structname>
structure and call
<function>XkbChangeNames</function>
to download the changes to the server.
<function>XkbSetNames</function>
and
<function>XkbChangeNames</function>
can generate
<errorname>BadAlloc</errorname>,
<errorname>BadAtom</errorname>,
<errorname>BadLength</errorname>,
<errorname>BadMatch</errorname>,
and
<errorname>BadImplementation</errorname>
errors.
</para>

<indexterm significance="preferred" zone="XkbSetNames"><primary><function>XkbSetNames</function></primary></indexterm>
<funcsynopsis id="XkbSetNames">
  <funcprototype>
    <funcdef>Bool <function>XkbSetNames</function></funcdef>
<!-- (
<parameter>dpy, which, first_type, num_types, xkb</parameter>
) -->

    <paramdef>Display *<parameter>dpy</parameter></paramdef>
    <paramdef>unsigned int <parameter>which</parameter></paramdef>
    <paramdef>unsigned int <parameter>first_type</parameter></paramdef>
    <paramdef>unsigned int <parameter>num_types</parameter></paramdef>
    <paramdef>XkbDescPtr <parameter>xkb</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>dpy</parameter>
    </term>
    <listitem>
      <para>
        connection to the X server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>which</parameter>
    </term>
    <listitem>
      <para>
        mask of names or map components to be changed
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>first_type</parameter>
    </term>
    <listitem>
      <para>
        first type whose name is to be changed
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>num_types</parameter>
    </term>
    <listitem>
      <para>
        number of types for which names are to be changed
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>xkb</parameter>
    </term>
    <listitem>
      <para>
        keyboard description from which names are to be taken
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
Use
<function>XkbSetNames</function>
to change many names at the same time. For each bit set in
<parameter>which</parameter>,
<function>XkbSetNames</function>
takes the corresponding value (or values in the case of arrays) from the
keyboard description
<parameter>xkb</parameter>
and sends it to the server.
</para>


<para>
The
<parameter>first_type</parameter>
and
<parameter>num_types</parameter>
arguments are used only if
<symbol>XkbKeyTypeNamesMask</symbol>
or
<symbol>XkbKTLevelNamesMask</symbol>
is set in
<parameter>which</parameter>
and specify a subset of the types for which the corresponding names are to be
changed. If either or both of these mask bits are set but the specified types
are illegal,
<function>XkbSetNames</function>
returns
<symbol>False</symbol>
and does not update any of the names specified in
<parameter>which</parameter>.
The specified types are illegal if
<parameter>xkb</parameter>
does not include a map component or if
<parameter>first_type</parameter>
and
<parameter>num_types</parameter>
specify types that are not defined in the keyboard description.
</para>


<sect2>
<title/>

<sect3 id='The_XkbNameChangesRec_Structure'>
<title>The XkbNameChangesRec Structure</title>
<indexterm significance="preferred" zone="The_XkbNameChangesRec_Structure">
<primary><structname>XkbNameChangesRec</structname></primary></indexterm>

<para>
The
<structname>XkbNameChangesRec</structname>
allows applications to identify small modifications to the symbolic names and
effectively reduces the amount of traffic sent to the server:

<programlisting>
typedef struct _XkbNameChanges {
    unsigned int       changed;           /* name components that have
                                             changed */
    unsigned char      first_type;        /* first key type with a new name */
    unsigned char      num_types;         /* number of types with new names */
    unsigned char      first_lvl;         /* first key type with new level
                                             names */
    unsigned char      num_lvls;          /* number of key types with new
                                             level names */
    unsigned char      num_aliases;       /* if key aliases changed,
                                             total number of key aliases */
    unsigned char      num_rg;            /* if radio groups changed, total
                                             number of radio groups */
    unsigned char      first_key;         /* first key with a new name */
    unsigned char      num_keys;          /* number of keys with new names */
    unsigned short     changed_vmods;     /* mask of virtual modifiers
                                             for which names have changed */
    unsigned long      changed_indicators;  /* mask of indicators
                                               for which names were changed */
    unsigned char      changed_groups;    /* mask of groups for
                                             which names were changed */
} <structname>XkbNameChangesRec</structname>, *XkbNameChangesPtr;
</programlisting></para>

<para>
The
<structfield>changed</structfield>
field specifies the name components that have changed and is the bitwise
inclusive OR of the valid names mask bits defined in
<link linkend="table18.1">Table 18.1</link>. The rest of
the fields in the structure specify the ranges that have changed for the
various kinds of symbolic names, as shown in
<link linkend="table18.2">Table 18.2</link>.
</para>

<table id='table18.2' frame='topbot'>
<title>XkbNameChanges Fields</title>
<?dbfo keep-together="always" ?>
<tgroup cols='4' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='2.0*'/>
<colspec colname='c2' colwidth='1.0*'/>
<colspec colname='c3' colwidth='1.0*'/>
<colspec colname='c4' colwidth='2.0*'/>
<thead>
<row rowsep='1'>
  <entry>Mask</entry>
  <entry>Fields</entry>
  <entry>Component</entry>
  <entry>Field</entry>
</row>
</thead>
<tbody>
<row>
    <entry><symbol>XkbKeyTypeNamesMask</symbol></entry>
    <entry>
<para>first_type,</para>
<para>num_types</para>
    </entry>
    <entry>Xkb-&gt;map</entry>
    <entry>type[*].name</entry>
</row>
<row>
    <entry><symbol>XkbKTLevelNamesMask</symbol></entry>
    <entry>
<para>first_lvl,</para>
<para>num_lvls</para>
    </entry>
    <entry>Xkb-&gt;map</entry>
    <entry>type[*].lvl_names[*]</entry>
</row>
<row>
    <entry><symbol>XkbKeyAliasesMask</symbol></entry>
    <entry>num_aliases</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>key_aliases[*]</entry>
</row>
<row>
    <entry><symbol>XkbRGNamesMask</symbol></entry>
    <entry>num_rg</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>radio_groups[*]</entry>
</row>
<row>
    <entry><symbol>XkbKeyNamesMask</symbol></entry>
    <entry>
<para>first_key,</para>
<para>num_keys</para>
    </entry>
    <entry>Xkb-&gt;names</entry>
    <entry>keys[*]</entry>
</row>
<row>
    <entry><symbol>XkbVirtualModNamesMask</symbol></entry>
    <entry>changed_vmods</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>vmods[*]</entry>
</row>
<row>
    <entry><symbol>XkbIndicatorNamesMask</symbol></entry>
    <entry>changed_indicators</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>indicators[*]</entry>
</row>
<row>
    <entry><symbol>XkbGroupNamesMask</symbol></entry>
    <entry>changed_groups</entry>
    <entry>Xkb-&gt;names</entry>
    <entry>groups[*]</entry>
  </row>
</tbody>
</tgroup>
</table>

<para>
<function>XkbChangeNames</function>
provides a more flexible method for changing symbolic names than
<function>XkbSetNames</function>
and requires the use of an
<structname>XkbNameChangesRec</structname>
structure.
</para>

<indexterm significance="preferred" zone="XkbChangeNames"><primary><function>XkbChangeNames</function></primary></indexterm>
<funcsynopsis id="XkbChangeNames">
  <funcprototype>
    <funcdef>Bool <function>XkbChangeNames</function></funcdef>
<!-- (
<parameter>dpy, xkb, changes</parameter>
) -->

    <paramdef>Display *<parameter>dpy</parameter></paramdef>
    <paramdef>XkbDescPtr <parameter>xkb</parameter></paramdef>
    <paramdef>XkbNameChangesPtr <parameter>changes</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>dpy</parameter>
    </term>
    <listitem>
      <para>
        connection to the X server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>xkb</parameter>
    </term>
    <listitem>
      <para>
        keyboard description from which names are to be taken
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>changes</parameter>
    </term>
    <listitem>
      <para>
        names map components to be updated on the server
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
<function>XkbChangeNames</function>
copies any names specified by
<parameter>changes</parameter>
from the keyboard description,
<parameter>xkb</parameter>,
to the X server specified by
<parameter>dpy</parameter>.
<function>XkbChangeNames</function>
aborts and returns
<symbol>False</symbol>
if any illegal type names or type shift level names are specified by
<parameter>changes</parameter>.
</para>

</sect3>
</sect2>
</sect1>
<sect1 id='Tracking_Name_Changes'>
<title>Tracking Name Changes</title>
<indexterm significance="preferred" zone="Tracking_Name_Changes">
<primary>events</primary><secondary><symbol>XkbNamesNotify</symbol></secondary></indexterm>
<indexterm significance="preferred" zone="Tracking_Name_Changes">
<primary><structname>XkbNamesNotifyEvent</structname></primary></indexterm>

<para>
Whenever a symbolic name changes in the server’s keyboard description, the
server sends a
<symbol>XkbNamesNotify</symbol>
event to all interested clients. To receive name notify events, use
<function>XkbSelectEvents</function>
(see <link linkend="Selecting_Xkb_Events">section 4.3</link>) with
<symbol>XkbNamesNotifyMask</symbol>
in both the
<parameter>bits_to_change</parameter>
and
<parameter>values_for_bits</parameter>
parameters.
</para>


<para>
To receive events for only specific names, use
<function>XkbSelectEventDetails</function>.
Set the
<structfield>event_type</structfield>
parameter to
<symbol>XkbNamesNotify</symbol>,
and set both the
<parameter>bits_to_change</parameter>
and
<parameter>values_for_bits</parameter>
detail parameter to a mask composed of a bitwise OR of masks in
<link linkend="table18.1">Table 18.1</link>.
</para>


<para>
The structure for the
<symbol>XkbNamesNotify</symbol>
event is defined as follows:

<programlisting>
typedef struct {
    int             type;           /* Xkb extension base event code */
    unsigned long   serial;         /* X server serial number for event */
    Bool            send_event;     /* <symbol>True</symbol> &rArr; synthetically generated */
    Display *       display;        /* server connection where event generated */
    Time            time;           /* server time when event generated */
    int             xkb_type;       /* <symbol>XkbNamesNotify</symbol> */
    int             device;         /* Xkb device ID, will not be
                                       <symbol>XkbUseCoreKbd</symbol> */
    unsigned int    changed;        /* mask of name components
                                       that have changed */
    int             first_type;     /* first key type with a new name */
    int             num_types;      /* number of types with new names */
    int             first_lvl;      /* first key type with new level names */
    int             num_lvls;       /* number of key types with new level names */
    int             num_aliases;    /* if key aliases changed, total number
                                       of key aliases */
    int             num_radio_groups;  /* if radio groups changed,
                                         total number of radio groups */
    unsigned int    changed_vmods;  /* mask of virtual modifiers for
                                       which names have changed */
    unsigned int    changed_groups; /* mask of groups for
                                       which names were changed */
    unsigned int    changed_indicators;  /* mask of indicators for which
                                              names were changed */
    int             first_key;      /* first key with a new name */
    int             num_keys;       /* number of keys with new names */
} <structname>XkbNamesNotifyEvent</structname>;
</programlisting></para>

<para>
The
<structfield>changed</structfield>
field specifies the name components that have changed and is the bitwise
inclusive OR of the valid names mask bits defined in
<link linkend="table18.1">Table 18.1</link>. The other
fields in this event are interpreted as the like-named fields in an
<structname>XkbNameChangesRec</structname> , as previously defined.
</para>


<para>
When your application receives a
<symbol>XkbNamesNotify</symbol>
event, you can note the changed names in a changes structure using
<function>XkbNoteNameChanges</function>.
</para>

<indexterm significance="preferred" zone="XkbNoteNameChanges"><primary><function>XkbNoteNameChanges</function></primary></indexterm>
<funcsynopsis id="XkbNoteNameChanges">
  <funcprototype>
    <funcdef>void <function>XkbNoteNameChanges</function></funcdef>
<!-- (
<parameter>old</parameter>,
<parameter>new</parameter>,
<parameter>wanted</parameter>
) -->

    <paramdef>XkbNameChangesPtr <parameter>old</parameter></paramdef>
    <paramdef>XkbNamesNotifyEvent *<parameter>new</parameter></paramdef>
    <paramdef>unsigned int <parameter>wanted</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>old</parameter>
    </term>
    <listitem>
      <para>
        <structname>XkbNameChangesRec</structname> structure to be updated
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>new</parameter>
    </term>
    <listitem>
      <para>
        event from which changes are to be copied
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>wanted</parameter>
    </term>
    <listitem>
      <para>
        types of names for which changes are to be noted
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
The
<parameter>wanted</parameter>
parameter is the bitwise inclusive OR of the valid names mask bits shown in
<link linkend="table18.1">Table 18.1</link>.
<function>XkbNoteNameChanges</function>
copies any changes that are reported in
<parameter>new</parameter>
and specified in
<parameter>wanted</parameter>
into the changes record specified by
<parameter>old</parameter>.
</para>


<para>
To update the local copy of the keyboard description with the actual values,
pass to
<function>XkbGetNameChanges</function>
the results of one or more calls to
<function>XkbNoteNameChanges</function>.
</para>


<indexterm significance="preferred" zone="XkbGetNameChanges"><primary><function>XkbGetNameChanges</function></primary></indexterm>
<funcsynopsis id="XkbGetNameChanges">
  <funcprototype>
    <funcdef>Status <function>XkbGetNameChanges</function></funcdef>
<!-- (
<parameter>dpy</parameter>,
<parameter>xkb</parameter>,
<parameter>changes</parameter>
) -->

    <paramdef>Display *<parameter>dpy</parameter></paramdef>
    <paramdef>XkbDescPtr <parameter>xkb</parameter></paramdef>
    <paramdef>XkbNameChangesPtr <parameter>changes</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>dpy</parameter>
    </term>
    <listitem>
      <para>
        connection to the X server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>xkb</parameter>
    </term>
    <listitem>
      <para>
        keyboard description to which names are copied
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>changes</parameter>
    </term>
    <listitem>
      <para>
        names components to be obtained from the server
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
<function>XkbGetNameChanges</function>
examines the
<parameter>changes</parameter>
parameter, retrieves the necessary information from the server, and places the
results into the
<parameter>xkb</parameter>
keyboard description.
</para>


<para>
<function>XkbGetNameChanges</function>
can generate
<errorname>BadAlloc</errorname>,
<errorname>BadImplementation</errorname>,
and
<errorname>BadMatch</errorname>
errors.
</para>


</sect1>
<sect1 id='Allocating_and_Freeing_Symbolic_Names'>
<title>Allocating and Freeing Symbolic Names</title>

<para>
Most applications do not need to directly allocate symbolic names structures.
Do not allocate a names structure directly using
<function>malloc</function>
or
<function>Xmalloc</function>
if your application changes the number of key aliases or radio groups or
constructs a symbolic names structure without loading the necessary components
from the X server. Instead use
<function>XkbAllocNames</function>.
</para>

<indexterm significance="preferred" zone="XkbAllocNames"><primary><function>XkbAllocNames</function></primary></indexterm>
<funcsynopsis id="XkbAllocNames">
  <funcprototype>
    <funcdef>Status <function>XkbAllocNames</function></funcdef>
<!-- (
<parameter>xkb, which, num_rg, num_key_aliases)</parameter> -->

    <paramdef>XkbDescPtr <parameter>xkb</parameter></paramdef>
    <paramdef>unsigned int <parameter>which</parameter></paramdef>
    <paramdef>int <parameter>num_rg</parameter></paramdef>
    <paramdef>int <parameter>num_key_aliases</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>xkb</parameter>
    </term>
    <listitem>
      <para>
        keyboard description for which names are to be allocated
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>which</parameter>
    </term>
    <listitem>
      <para>
        mask of names to be allocated
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>num_rg</parameter>
    </term>
    <listitem>
      <para>
        total number of radio group names needed
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>num_key_aliases</parameter>
    </term>
    <listitem>
      <para>
        total number of key aliases needed
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
<function>XkbAllocNames</function>
can return
<errorname>BadAlloc</errorname>,
<errorname>BadMatch</errorname>,
and
<errorname>BadValue</errorname>
errors.
The
<parameter>which</parameter>
parameter is the bitwise inclusive OR of the valid names mask bits defined in
<link linkend="table18.1">Table 18.1</link>.
</para>


<para>
Do not free symbolic names structures directly using
<function>free</function>
or
<function>XFree</function>.
Use
<function>XkbFreeNames</function>
instead.
</para>


<indexterm significance="preferred" zone="XkbFreeNames"><primary><function>XkbFreeNames</function></primary></indexterm>
<funcsynopsis id="XkbFreeNames">
  <funcprototype>
    <funcdef>void <function>XkbFreeNames</function></funcdef>
<!-- (
<parameter>xkb, which, free_map)</parameter> -->

    <paramdef>XkbDescPtr <parameter>xkb</parameter></paramdef>
    <paramdef>unsigned int <parameter>which</parameter></paramdef>
    <paramdef>Bool <parameter>free_map</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>xkb</parameter>
    </term>
    <listitem>
      <para>
        keyboard description for which names are to be freed
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>which</parameter>
    </term>
    <listitem>
      <para>
        mask of names components to be freed
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>free_map</parameter>
    </term>
    <listitem>
      <para>
        <symbol>True</symbol>
         &rArr; XkbNamesRec structure itself should be freed
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
The
<parameter>which</parameter>
parameter is the bitwise inclusive OR of the valid names mask bits defined in
<link linkend="table18.1">Table 18.1</link>.
</para>
</sect1>
</chapter>
@


1.2
log
@Upate to libX11 1.5rc1. Tested by krw@@, mpi@@, shadchin@@.
@
text
@d1 3
d13 6
a18 7
modifier mappings to determine the effects of most modifiers (the <emphasis>
Shift</emphasis>
, <emphasis>
Lock</emphasis>
 and <emphasis>
Control</emphasis>
 modifiers are defined by the core protocol but no semantics are implied for
d26 3
a28 3
these symbolic names are grouped into the <emphasis>
names</emphasis>
 component of the keyboard description.
d33 6
a41 1
</para>
d43 1
a43 1
<para><programlisting>
a48 1
</programlisting></para>
a49 1
<para><programlisting>
d51 2
a52 3
      char      name[XkbKeyNameLength];      /* symbolic key names */
} <emphasis>XkbKeyNameRec</emphasis>,*XkbKeyNamePtr;
</programlisting></para>
a53 1
<para><programlisting>
d55 5
a59 6
      char      real[XkbKeyNameLength];
                /* this key name must be in the keys array */
      char      alias[XkbKeyNameLength];
                /* symbolic key name as alias for the key */
} <emphasis>XkbKeyAliasRec</emphasis>,*XkbKeyAliasPtr;
</programlisting></para>
a60 1
<para><programlisting>
d62 25
a86 17
      Atom      keycodes;      /* identifies range and meaning of keycodes */
      Atom      geometry;      /* identifies physical location, size, and shape of keys */
      Atom      symbols;       /* identifies the symbols logically bound to the keys */
      Atom      types;         /* identifies the set of key types */
      Atom      compat;        /* identifies actions for keys using core protocol */
      Atom      vmods[XkbNumVirtualMods]; /* symbolic names for virtual modifiers */
      Atom      indicators[XkbNumIndicators];   /* symbolic names for indicators */
      Atom      groups[XkbNumKbdGroups]; /* symbolic names for keyboard groups */
      XkbKeyNamePtr      keys;         /* symbolic key name array */
      XkbKeyAliasPtr     key_aliases;  /* real/alias symbolic name pairs array */
      Atom *    radio_groups;      /* radio group name array */
      Atom      phys_symbols;      /* identifies the symbols engraved on the keyboard */
      unsigned char      num_keys; /* number of keys in the <emphasis> keys</emphasis> array */
      unsigned char      num_key_aliases;  /* number of keys in the
                                              <emphasis> key_aliases</emphasis> array */
      unsigned short     num_rg;      /* number of radio groups */
} <emphasis>XkbNamesRec</emphasis>,*XkbNamesPtr;      /*
d90 6
a95 6
The <emphasis>
keycodes</emphasis>
 name identifies the range and meaning of the keycodes returned by the keyboard
in question. The <emphasis>
geometry</emphasis>
 name, on the other hand, identifies the physical location, size and shape of
d108 3
a110 3
same name. In these cases, applications can use the keyboard <emphasis>
geometry</emphasis>
 name to determine which subset of the named keycodes is in use.</para></note>
d113 3
a115 3
The <emphasis>
symbols</emphasis>
 name identifies the symbols logically bound to the keys. The symbols name is a
d117 8
a124 8
the keyboard with these symbols. The <emphasis>
phys_symbols</emphasis>
 name, on the other hand, identifies the symbols actually engraved on the
keyboard. Given this, the <emphasis>
symbols</emphasis>
 name and <emphasis>
phys_symbols</emphasis>
 names might be different. For example, the description for a keyboard that has
d126 4
a129 5
<emphasis>
phys_symbols</emphasis>
 name of "en_US" and a <emphasis>
symbols</emphasis>
 name of "de_CH."
d134 3
a136 3
The <emphasis>
types</emphasis>
 name provides some information about the set of key types (see section 15.2)
d145 3
a147 3
The <emphasis>
compat</emphasis>
 name provides some information about the rules used to bind actions to keys
d155 6
a160 7
in the <emphasis>
vmods</emphasis>
, <emphasis>
indicators</emphasis>
, and <emphasis>
groups</emphasis>
 fixed-length arrays.
d166 5
a170 5
in the <emphasis>
keys</emphasis>
 array, and <emphasis>
num_keys</emphasis>
 reports the number of entries that are in the keys array. For each key, the
d172 3
a174 3
that report different keycodes. For example, the <emphasis>
F1</emphasis>
 key may emit keycode 23 on one keyboard and keycode 86 on another. By naming
d183 2
a184 1
either their position or their "function." For example, a keyboard layout
d187 12
a198 12
of LEFT. The <emphasis>
key_aliases</emphasis>
 field holds a variable-length array of real and alias key name pairs, and the
total number of entries in the <emphasis>
key_aliases</emphasis>
 array is held in <emphasis>
num_key_aliases</emphasis>
. For each real and alias key name pair, the <emphasis>
real</emphasis>
 field refers to the a name in the keys array, and the <emphasis>
alias</emphasis>
 field refers to the alias for that key. Using the previous example, the
d200 3
a202 3
name LEFT as an alias for A31 in the <emphasis>
key_aliases</emphasis>
 array.
d206 9
a214 9
(see Chapter 13) override those defined in the keycodes component of the server
database, which are stored in the <emphasis>
XkbNamesRec</emphasis>
 (<emphasis>
xkb-&gt;names</emphasis>
). Therefore, consider the key aliases defined by the geometry before
considering key aliases supplied by the <emphasis>
XkbNamesRec</emphasis>
.</para></note>
d227 7
a233 7
held in the variable-length array <emphasis>
radio_groups</emphasis>
, and <emphasis>
num_rg</emphasis>
 tells how many elements are in the <emphasis>
radio_groups</emphasis>
 array.
d245 1
a245 1
description are shown in Table 18.1.
d248 1
a248 1
<table frame='topbot'>
d266 1
a266 1
    <entry>XkbKeycodesNameMask</entry>
d272 1
a272 1
    <entry>XkbGeometryNameMask</entry>
d278 1
a278 1
    <entry>XkbSymbolsNameMask</entry>
d284 1
a284 1
    <entry>XkbPhysSymbolsNameMask</entry>
d290 1
a290 1
    <entry>XkbTypesNameMask</entry>
d296 1
a296 1
    <entry>XkbCompatNameMask</entry>
d302 1
a302 1
    <entry>XkbKeyTypeNamesMask</entry>
d308 1
a308 1
    <entry>XkbKTLevelNamesMask</entry>
d314 1
a314 1
    <entry>XkbIndicatorNamesMask</entry>
d320 1
a320 1
    <entry>XkbKeyNamesMask</entry>
d326 1
a326 1
    <entry>XkbKeyAliasesMask</entry>
d332 1
a332 1
    <entry>XkbVirtualModNamesMask</entry>
d338 1
a338 1
    <entry>XkbGroupNamesMask</entry>
d344 1
a344 1
    <entry>XkbRGNamesMask</entry>
d350 1
a350 1
    <entry>XkbComponentNamesMask</entry>
d363 1
a363 1
    <entry>XkbAllNamesMask</entry>
d377 2
a378 3
To obtain symbolic names from the server, use <emphasis>
XkbGetNames</emphasis>
.
d381 119
a499 122
<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Status <emphasis>
XkbGetNames</emphasis>
(<emphasis>
dpy, which, Xkb</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Display *      <emphasis>
dpy</emphasis>
;      /* connection to the X server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int      <emphasis>
which</emphasis>
;      /* mask of names or map components to be updated */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbDescPtr      <emphasis>
xkb</emphasis>
      /* keyboard description to be updated */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
<emphasis>
XkbGetNames</emphasis>
 retrieves symbolic names for the components of the keyboard extension from the
X server. The <emphasis>
which</emphasis>
 parameter specifies the name components to be updated in the <emphasis>
xkb</emphasis>
 parameter, and is the bitwise inclusive OR of the valid names mask bits
defined in Table 18.1.
</para>


<para>
If the <emphasis>
names</emphasis>
 field of the keyboard description <emphasis>
xkb</emphasis>
 is <emphasis>
NULL</emphasis>
, <emphasis>
XkbGetNames</emphasis>
 allocates and initializes the <emphasis>
names</emphasis>
 component of the keyboard description before obtaining the values specified by
<emphasis>
which</emphasis>
. If the <emphasis>
names</emphasis>
 field of <emphasis>
xkb</emphasis>
 is not <emphasis>
NULL</emphasis>
, <emphasis>
XkbGetNames</emphasis>
 obtains the values specified by <emphasis>
which</emphasis>
 and copies them into the keyboard description <emphasis>
Xkb</emphasis>
.
</para>


<para>
If the <emphasis>
map</emphasis>
 component of the <emphasis>
xkb</emphasis>
 parameter is <emphasis>
NULL</emphasis>
, <emphasis>
XkbGetNames</emphasis>
 does not retrieve type or shift level names, even if <emphasis>
XkbKeyTypeNamesMask</emphasis>
 or <emphasis>
XkbKTLevelNamesMask</emphasis>
 are set in <emphasis>
which</emphasis>
.
</para>


<para>
<emphasis>
XkbGetNames</emphasis>
 can return <emphasis>
Success</emphasis>
, or <emphasis>
BadAlloc</emphasis>
, <emphasis>
BadLength</emphasis>
, <emphasis>
BadMatch</emphasis>
, and <emphasis>
BadImplementation</emphasis>
 errors.
</para>


<para>
To free symbolic names, use <emphasis>
XkbFreeNames</emphasis>
 (see section 18.6)
d509 113
a621 102
keyboard description and then use either <emphasis>
XkbSetNames,</emphasis>
 or, to save network traffic, use a <emphasis>
XkbNameChangesRec</emphasis>
structure and call <emphasis>
XkbChangeNames</emphasis>
 to download the changes to the server. <emphasis>
XkbSetNames</emphasis>
 and <emphasis>
XkbChangeNames</emphasis>
 can generate <emphasis>
BadAlloc</emphasis>
, <emphasis>
BadAtom</emphasis>
, <emphasis>
BadLength</emphasis>
, <emphasis>
BadMatch,</emphasis>
 and <emphasis>
BadImplementation</emphasis>
 errors.
</para>

<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Bool <emphasis>
XkbSetNames</emphasis>
(<emphasis>
dpy, which, first_type, num_types, xkb</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Display *      <emphasis>
dpy</emphasis>
;            /* connection to the X server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int      <emphasis>
which</emphasis>
;            /* mask of names or map components to be changed */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int      <emphasis>
first_type</emphasis>
      ;      /* first type whose name is to be changed */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int      <emphasis>
num_types</emphasis>
;            /* number of types for which names are to be changed */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbDescPtr      <emphasis>
xkb</emphasis>
;            /* keyboard description from which names are to be taken */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
Use<emphasis>
 XkbSetNames</emphasis>
 to change many names at the same time. For each bit set in <emphasis>
which</emphasis>
, <emphasis>
XkbSetNames</emphasis>
 takes the corresponding value (or values in the case of arrays) from the
keyboard description <emphasis>
xkb</emphasis>
 and sends it to the server.
</para>


<para>
The <emphasis>
first_type</emphasis>
 and <emphasis>
num_types</emphasis>
 arguments are used only if <emphasis>
XkbKeyTypeNamesMask</emphasis>
 or <emphasis>
XkbKTLevelNamesMask</emphasis>
 is set in <emphasis>
which</emphasis>
 and specify a subset of the types for which the corresponding names are to be
d623 13
a635 13
are illegal, <emphasis>
XkbSetNames</emphasis>
 returns <emphasis>
False</emphasis>
 and does not update any of the names specified in <emphasis>
which</emphasis>
. The specified types are illegal if <emphasis>
xkb</emphasis>
 does not include a map component or if <emphasis>
first_type</emphasis>
 and <emphasis>
num_types</emphasis>
 specify types that are not defined in the keyboard description.
d644 2
d648 3
a650 3
The <emphasis>
XkbNameChangesRec</emphasis>
 allows applications to identify small modifications to the symbolic names and
a651 1
</para>
d653 1
a653 1
<para><programlisting>
d655 21
a675 24
      unsigned int      changed;            /* name components that have
                                               changed */
      unsigned char      first_type;        /* first key type with a new
                                               name */
      unsigned char      num_types;         /* number of types with new
                                               names */
      unsigned char      first_lvl;         /* first key type with new level
                                               names */
      unsigned char      num_lvls;          /* number of key types with new
                                               level names */
      unsigned char      num_aliases;       /* if key aliases changed,
                                               total number of key aliases */
      unsigned char      num_rg;            /* if radio groups changed, total
                                               number of radio groups */
      unsigned char      first_key;         /* first key with a new name */
      unsigned char      num_keys;          /* number of keys with new names
                                               */
      unsigned short      changed_vmods;    /* mask of virtual
                                               modifiers for which names have changed */
      unsigned long      changed_indicators;  /* mask of indicators
                                                 for which names were changed */
      unsigned char       changed_groups;   /* mask of groups for
                                               which names were changed */
} <emphasis>XkbNameChangesRec</emphasis>, *XkbNameChangesPtr
d679 5
a683 4
The <emphasis>
changed</emphasis>
 field specifies the name components that have changed and is the bitwise
inclusive OR of the valid names mask bits defined in Table 18.1. The rest of
d685 2
a686 1
various kinds of symbolic names, as shown in Table 18.2.
d689 1
a689 1
<table frame='topbot'>
d707 1
a707 1
    <entry>XkbKeyTypeNamesMask</entry>
d716 1
a716 1
    <entry>XkbKTLevelNamesMask</entry>
d725 1
a725 1
    <entry>XkbKeyAliasesMask</entry>
d731 1
a731 1
    <entry>XkbRGNamesMask</entry>
d737 1
a737 1
    <entry>XkbKeyNamesMask</entry>
d746 1
a746 1
    <entry>XkbVirtualModNamesMask</entry>
d752 1
a752 1
    <entry>XkbIndicatorNamesMask</entry>
d758 1
a758 1
    <entry>XkbGroupNamesMask</entry>
d768 67
a834 64
<emphasis>
XkbChangeNames</emphasis>
 provides a more flexible method for changing symbolic names than <emphasis>
XkbSetNames</emphasis>
 and requires the use of an <emphasis>
XkbNameChangesRec</emphasis>
 structure.
</para>

<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Bool <emphasis>
XkbChangeNames</emphasis>
(<emphasis>
dpy, xkb, changes</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Display *            <emphasis>
dpy</emphasis>
;            /* connection to the X server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbDescPtr      <emphasis>
      xkb</emphasis>
;            /* keyboard description from which names are to be taken */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbNameChangesPtr      <emphasis>
      changes</emphasis>
;            /* names map components to be updated on the server */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
<emphasis>
XkbChangeNames</emphasis>
 copies any names specified by <emphasis>
changes</emphasis>
 from the keyboard description, <emphasis>
xkb</emphasis>
, to the X server specified by <emphasis>
dpy</emphasis>
.<emphasis>
 XkbChangeNames</emphasis>
 aborts and returns <emphasis>
False</emphasis>
 if any illegal type names or type shift level names are specified by <emphasis>
changes</emphasis>
.
d842 4
d849 11
a859 11
server sends a <emphasis>
XkbNamesNotify</emphasis>
 event to all interested clients. To receive name notify events, use <emphasis>
XkbSelectEvents</emphasis>
 (see section 4.3) with <emphasis>
XkbNamesNotifyMask</emphasis>
 in both the <emphasis>
bits_to_change</emphasis>
 and <emphasis>
values_for_bits</emphasis>
 parameters.
d864 12
a875 11
To receive events for only specific names, use <emphasis>
XkbSelectEventDetails</emphasis>
. Set the <emphasis>
event_type</emphasis>
 parameter to <emphasis>
XkbNamesNotify</emphasis>
, and set both the <emphasis>
bits_to_change </emphasis>
and<emphasis>
 values_for_bits</emphasis>
 detail parameter to a mask composed of a bitwise OR of masks in Table 18.1.
d880 3
a882 4
The structure for the <emphasis>
XkbNamesNotify</emphasis>
 event is defined as follows:
</para>
d884 1
a884 1
<para><programlisting>
d886 17
a902 20
      int      type;                  /* Xkb extension base event code */
      unsigned long      serial;      /* X server serial number for
                                         event */
      Bool      send_event;           /* <emphasis>True</emphasis>
                                         =&gt; synthetically generated */
      Display *      display;         /* server connection where event
                                         generated */
      Time      time;                 /* server time when event generated */
      int      xkb_type;              /* <emphasis>XkbNamesNotify</emphasis> */
      int      device;                /* Xkb device ID, will not be
                                         <emphasis>XkbUseCoreKbd</emphasis> */
      unsigned int      changed;      /* mask of name components
that have changed */
      int      first_type;            /* first key type with a new name */
      int      num_types;             /* number of types with new names */
      int      first_lvl;             /* first key type with new level names */
      int      num_lvls;              /* number of key types with new level names */
      int      num_aliases;           /* if key aliases changed, total number
                                         of key aliases */
      int      num_radio_groups;      /* if radio groups changed,
d904 9
a912 9
      unsigned int      changed_vmods;  /* mask of virtual modifiers for
                                           which names have changed */
      unsigned int      changed_groups; /* mask of groups for
                                           which names were changed */
      unsigned int      changed_indicators;  /* mask of indicators for which
                                                names were changed */
      int      first_key;             /* first key with a new name */
      int      num_keys;              /* number of keys with new names */
} <emphasis>XkbNamesNotifyEvent</emphasis>;
d916 77
a992 75
The <emphasis>
changed</emphasis>
 field specifies the name components that have changed and is the bitwise
inclusive OR of the valid names mask bits defined in Table 18.1. The other
fields in this event are interpreted as the like-named fields in an <emphasis>
XkbNameChangesRec</emphasis> , as previously defined.
</para>


<para>
When your application receives a X<emphasis>
kbNamesNotify</emphasis>
 event, you can note the changed names in a changes structure using <emphasis>
XkbNoteNameChanges</emphasis>
.
</para>

<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
void <emphasis>
XkbNoteNameChanges</emphasis>
(<emphasis>
old</emphasis>
,<emphasis>
 new</emphasis>
,<emphasis>
 wanted</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbNameChangesPtr            <emphasis>
old</emphasis>
;            /* <emphasis>
XkbNameChanges</emphasis>
 structure to be updated */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbNamesNotifyEvent *            <emphasis>
new</emphasis>
;            /* event from which changes are to be copied */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int            <emphasis>
wanted</emphasis>
;            /* types of names for which changes are to be noted */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
The <emphasis>
wanted</emphasis>
 parameter is the bitwise inclusive OR of the valid names mask bits shown in
Table 18.1. <emphasis>
XkbNoteNameChanges</emphasis>
 copies any changes that are reported in <emphasis>
new</emphasis>
 and specified in <emphasis>
wanted</emphasis>
 into the changes record specified by <emphasis>
old</emphasis>
.
d998 74
a1071 73
pass to <emphasis>
XkbGetNameChanges</emphasis>
 the results of one or more calls to <emphasis>
XkbNoteNameChanges</emphasis>
.
</para>


<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Status <emphasis>
XkbGetNameChanges</emphasis>
(<emphasis>
dpy</emphasis>
,<emphasis>
 xkb</emphasis>
,<emphasis>
 changes</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Display *            <emphasis>
dpy</emphasis>
;            /* connection to the X server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbDescPtr            <emphasis>
xkb</emphasis>
;            /* keyboard description to which names are copied */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbNameChangesPtr            <emphasis>
changes</emphasis>
;            /* names components to be obtained from the server */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
<emphasis>
XkbGetNameChanges</emphasis>
 examines the <emphasis>
changes</emphasis>
 parameter, retrieves the necessary information from the server, and places the
results into the <emphasis>
xkb</emphasis>
 keyboard description.
</para>


<para>
<emphasis>
XkbGetNamesChanges</emphasis>
 can generate <emphasis>
BadAlloc</emphasis>
, <emphasis>
BadImplementation,</emphasis>
 and <emphasis>
BadMatch</emphasis>
 errors.
d1081 5
a1085 5
Do not allocate a names structure directly using <emphasis>
malloc</emphasis>
 or <emphasis>
Xmalloc</emphasis>
 if your application changes the number of key aliases or radio groups or
d1087 2
a1088 3
from the X server. Instead use <emphasis>
XkbAllocNames</emphasis>
.
d1091 133
a1223 119
<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
Status <emphasis>
XkbAllocNames</emphasis>
(<emphasis>
xkb, which, num_rg, num_key_aliases)</emphasis>
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbDescPtr      <emphasis>
xkb;</emphasis>
      /* keyboard description for which names are to be allocated */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int      <emphasis>
which;</emphasis>
      /* mask of names to be allocated */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int      <emphasis>
num_rg;</emphasis>
      /* total number of radio group names needed */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
int      <emphasis>
num_key_aliases;</emphasis>
      /* total number of key aliases needed */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
<emphasis>
XkbAllocNames</emphasis>
 can return <emphasis>
BadAlloc</emphasis>
, <emphasis>
BadMatch,</emphasis>
 and <emphasis>
BadValue</emphasis>
 errors.<emphasis>
 </emphasis>
The <emphasis>
which</emphasis>
 parameter is the bitwise inclusive OR of the valid names mask bits defined in
Table 18.1.
</para>


<para>
Do not free symbolic names structures directly using <emphasis>
free</emphasis>
 or <emphasis>
XFree</emphasis>
. Use <emphasis>
XkbFreeNames</emphasis>
 instead.
</para>


<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
void <emphasis>
XkbFreeNames</emphasis>
(<emphasis>
xkb, which, free_map)</emphasis>
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbDescPtr      <emphasis>
xkb</emphasis>
;      /* keyboard description for which names are to be freed */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int      <emphasis>
which</emphasis>
;      /* mask of names components to be freed */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Bool      <emphasis>
free_map</emphasis>
;      /* <emphasis>
True</emphasis>
 =&gt; XkbNamesRec structure itself should be freed */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
The <emphasis>
which</emphasis>
 parameter is the bitwise inclusive OR of the valid names mask bits defined in
Table 18.1.
@


1.1
log
@Update to libx11 1.4.2. Tested by ajacoutot@@, jasper@@ krw@@, landry@@,
shadchin@@ on various architectures.
Bump major.
@
text
@d1 1
a1 1
<chapter id='symbolic_names'>
d29 1
a29 1
<sect1 id='the_xkbnamesrec_structure'>
d230 1
a230 1
<sect1 id='symbolic_names_masks'>
d240 1
a240 1
<table frame='none'>
d242 6
a247 5
<tgroup cols='4'>
<colspec colsep='0'/>
<colspec colsep='0'/>
<colspec colsep='0'/>
<colspec colsep='0'/>
d249 1
a249 1
<row rowsep='0'>
d257 1
a257 1
<row rowsep='0'>
d263 1
a263 1
<row rowsep='0'>
d269 1
a269 1
<row rowsep='0'>
d275 1
a275 1
<row rowsep='0'>
d281 1
a281 1
<row rowsep='0'>
d287 1
a287 1
<row rowsep='0'>
d293 1
a293 1
<row rowsep='0'>
d299 1
a299 1
<row rowsep='0'>
d305 1
a305 1
<row rowsep='0'>
d311 1
a311 1
<row rowsep='0'>
d317 1
a317 1
<row rowsep='0'>
d323 1
a323 1
<row rowsep='0'>
d329 1
a329 1
<row rowsep='0'>
d335 1
a335 1
<row rowsep='0'>
d341 1
a341 1
<row rowsep='0'>
d354 1
a354 1
<row rowsep='0'>
d365 1
a365 1
<sect1 id='getting_symbolic_names_from_the_server'>
d375 3
a377 2
<tgroup cols='1'>
<colspec colsep='0'/>
d379 1
a379 1
  <row rowsep='0'>
d388 1
a388 1
  <row rowsep='0'>
d395 1
a395 1
  <row rowsep='0'>
d402 1
a402 1
  <row rowsep='0'>
d500 1
a500 1
<sect1 id='changing_symbolic_names_on_the_server'>
d529 3
a531 2
<tgroup cols='1'>
<colspec colsep='0'/>
d533 1
a533 1
  <row rowsep='0'>
d542 1
a542 1
  <row rowsep='0'>
d549 1
a549 1
  <row rowsep='0'>
d556 1
a556 1
  <row rowsep='0'>
d563 1
a563 1
  <row rowsep='0'>
d570 1
a570 1
  <row rowsep='0'>
d627 1
a627 1
<sect3 id='the_xkbnamechangesrec_structure'>
d674 1
a674 1
<table frame='none'>
d676 6
a681 5
<tgroup cols='4'>
<colspec colsep='0'/>
<colspec colsep='0'/>
<colspec colsep='0'/>
<colspec colsep='0'/>
d683 1
a683 1
<row rowsep='0'>
d691 1
a691 1
<row rowsep='0'>
d700 1
a700 1
<row rowsep='0'>
d709 1
a709 1
<row rowsep='0'>
d715 1
a715 1
<row rowsep='0'>
d721 1
a721 1
<row rowsep='0'>
d730 1
a730 1
<row rowsep='0'>
d736 1
a736 1
<row rowsep='0'>
d742 1
a742 1
<row rowsep='0'>
d763 3
a765 2
<tgroup cols='1'>
<colspec colsep='0'/>
d767 1
a767 1
  <row rowsep='0'>
d776 1
a776 1
  <row rowsep='0'>
d783 1
a783 1
  <row rowsep='0'>
d790 1
a790 1
  <row rowsep='0'>
d822 1
a822 1
<sect1 id='tracking_name_changes'>
d915 3
a917 2
<tgroup cols='1'>
<colspec colsep='0'/>
d919 1
a919 1
  <row rowsep='0'>
d932 1
a932 1
  <row rowsep='0'>
d941 1
a941 1
  <row rowsep='0'>
d948 1
a948 1
  <row rowsep='0'>
d986 3
a988 2
<tgroup cols='1'>
<colspec colsep='0'/>
d990 1
a990 1
  <row rowsep='0'>
d1003 1
a1003 1
  <row rowsep='0'>
d1010 1
a1010 1
  <row rowsep='0'>
d1017 1
a1017 1
  <row rowsep='0'>
d1054 1
a1054 1
<sect1 id='allocating_and_freeing_symbolic_names'>
d1071 3
a1073 2
<tgroup cols='1'>
<colspec colsep='0'/>
d1075 1
a1075 1
  <row rowsep='0'>
d1083 1
a1083 1
  <row rowsep='0'>
d1090 1
a1090 1
  <row rowsep='0'>
d1097 1
a1097 1
  <row rowsep='0'>
d1104 1
a1104 1
  <row rowsep='0'>
d1145 3
a1147 2
<tgroup cols='1'>
<colspec colsep='0'/>
d1149 1
a1149 1
  <row rowsep='0'>
d1157 1
a1157 1
  <row rowsep='0'>
d1164 1
a1164 1
  <row rowsep='0'>
d1171 1
a1171 1
  <row rowsep='0'>
@

