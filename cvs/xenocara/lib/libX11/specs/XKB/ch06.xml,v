head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.2
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2015.04.06.20.57.58;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	L5f7tv2EiGjtzoSu;

1.2
date	2012.03.27.19.19.38;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.30.19.19.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to libX11 1.6.3
@
text
@<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
	  "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<chapter id='Complete_Keyboard_Description'>
<title>Complete Keyboard Description</title>

<para>
The complete Xkb description for a keyboard device is accessed using a single
structure containing pointers to major Xkb components. This chapter describes
this single structure and provides references to other sections of this
document that discuss the major Xkb components in detail.
</para>

<sect1 id='The_XkbDescRec_Structure'>
<title>The XkbDescRec Structure</title>

<indexterm significance="preferred" zone="The_XkbDescRec_Structure">
<primary><structname>XkbDescRec</structname></primary></indexterm>

<para>
The complete description of an Xkb keyboard is given by an
<structname>XkbDescRec</structname>.
The component structures in the
<structname>XkbDescRec</structname>
represent the major Xkb components outlined in <link linkend="figure1.1">Figure 1.1</link>.
</para>

<para><programlisting>
typedef struct {
    struct _XDisplay *  display;        /* connection to X server */
    unsigned short      flags;          /* private to Xkb, do not modify */
    unsigned short      device_spec;    /* device of interest */
    KeyCode             min_key_code;   /* minimum keycode for device */
    KeyCode             max_key_code;   /* maximum keycode for device */
    XkbControlsPtr      ctrls;          /* controls */
    XkbServerMapPtr     server;         /* server keymap */
    XkbClientMapPtr     map;            /* client keymap */
    XkbIndicatorPtr     indicators;     /* indicator map */
    XkbNamesPtr         names;          /* names for all components */
    XkbCompatMapPtr     compat;         /* compatibility map */
    XkbGeometryPtr      geom;           /* physical geometry of keyboard */
} <structname>XkbDescRec</structname>, *XkbDescPtr;
</programlisting></para>

<para>
The
<parameter>display</parameter>
field points to an X display structure. The
<structfield>flags</structfield>
field is private to the library: modifying
<structfield>flags</structfield>
may yield unpredictable results. The
<parameter>device_spec</parameter>
field specifies the device identifier of the keyboard input device, or
<symbol>XkbUseCoreKbd</symbol>,
which specifies the core keyboard device. The
<structfield>min_key_code</structfield>
and
<structfield>max_key_code</structfield>
fields specify the least and greatest keycode that can be returned by the
keyboard.
</para>


<para>
The other fields specify structure components of the keyboard description and
are described in detail in other sections of this document.
<link linkend="table6.1">Table 6.1</link>
identifies the subsequent sections of this document that discuss the individual
components of the
<structname>XkbDescRec</structname>.
</para>

<table id='table6.1' frame='topbot'>
<title>XkbDescRec Component References</title>
<?dbfo keep-together="always" ?>
<tgroup cols='2' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<colspec colname='c2' colwidth='2.0*'/>
<thead>
<row rowsep='1'>
  <entry>XkbDescRec Field</entry>
  <entry>For more info</entry>
</row>
</thead>
<tbody>
<row>
    <entry>ctrls</entry>
    <entry><xref linkend="Keyboard_Controls" /></entry>
</row>
<row>
    <entry>server</entry>
    <entry><xref linkend="Xkb_Server_Keyboard_Mapping" /></entry>
</row>
<row>
    <entry>map</entry>
    <entry><xref linkend="Xkb_Client_Keyboard_Mapping" /></entry>
</row>
<row>
    <entry>indicators</entry>
    <entry><xref linkend="Indicators" /></entry>
</row>
<row>
    <entry>names</entry>
    <entry><xref linkend="Symbolic_Names" /></entry>
</row>
<row>
    <entry>compat</entry>
    <entry><xref linkend="The_Xkb_Compatibility_Map" /></entry>
</row>
<row>
    <entry>geom</entry>
    <entry><xref linkend="Keyboard_Geometry" /></entry>
  </row>
</tbody>
</tgroup>
</table>

<para>
Each structure component has a corresponding mask bit that is used in function
calls to indicate that the structure should be manipulated in some manner, such
as allocating it or freeing it. These masks and their relationships to the
fields in the
<structname>XkbDescRec</structname>
are shown in <link linkend="table6.2">Table 6.2</link>.
</para>

<table id='table6.2' frame='topbot'>
<title>Mask Bits for XkbDescRec</title>
<?dbfo keep-together="always" ?>
<tgroup cols='3' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<colspec colname='c2' colwidth='1.0*'/>
<colspec colname='c3' colwidth='1.0*'/>
<thead>
<row rowsep='1'>
  <entry>Mask Bit</entry>
  <entry>XkbDescRec Field</entry>
  <entry>Value</entry>
</row>
</thead>
<tbody>
<row>
    <entry><symbol>XkbControlsMask</symbol></entry>
    <entry>ctrls</entry>
    <entry>(1L&lt;&lt;0)</entry>
</row>
<row>
    <entry><symbol>XkbServerMapMask</symbol></entry>
    <entry>server</entry>
    <entry>(1L&lt;&lt;1)</entry>
</row>
<row>
    <entry>XkbIClientMapMask</entry>
    <entry>map</entry>
    <entry>(1L&lt;&lt;2)</entry>
</row>
<row>
    <entry><symbol>XkbIndicatorMapMask</symbol></entry>
    <entry>indicators</entry>
    <entry>(1L&lt;&lt;3)</entry>
</row>
<row>
    <entry><symbol>XkbNamesMask</symbol></entry>
    <entry>names</entry>
    <entry>(1L&lt;&lt;4)</entry>
</row>
<row>
    <entry><symbol>XkbCompatMapMask</symbol></entry>
    <entry>compat</entry>
    <entry>(1L&lt;&lt;5)</entry>
</row>
<row>
    <entry><symbol>XkbGeometryMask</symbol></entry>
    <entry>geom</entry>
    <entry>(1L&lt;&lt;6)</entry>
</row>
<row>
    <entry><symbol>XkbAllComponentsMask</symbol></entry>
    <entry>All Fields</entry>
    <entry>(0x7f)</entry>
  </row>
</tbody>
</tgroup>
</table>

</sect1>
<sect1 id='Obtaining_a_Keyboard_Description_from_the_Server'>
<title>Obtaining a Keyboard Description from the Server</title>

<para>
To retrieve one or more components of a keyboard device description, use
<function>XkbGetKeyboard</function>
(see also
<link linkend="XkbGetKeyboardByName"><function>XkbGetKeyboardByName</function></link>).

</para>

<indexterm significance="preferred" zone="XkbGetKeyboard"><primary><function>XkbGetKeyboard</function></primary></indexterm>
<funcsynopsis id="XkbGetKeyboard">
  <funcprototype>
    <funcdef>XkbDescPtr <function>XkbGetKeyboard</function></funcdef>
<!-- (
<parameter>display, which, device_spec</parameter>
) -->

    <paramdef>Display *<parameter>display</parameter></paramdef>
    <paramdef>unsigned int <parameter>which</parameter></paramdef>
    <paramdef>unsigned int <parameter>device_spec</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>display</parameter>
    </term>
    <listitem>
      <para>
        connection to X server
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>which</parameter>
    </term>
    <listitem>
      <para>
        mask indicating components to return
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>device_spec</parameter>
    </term>
    <listitem>
      <para>
        device for which to fetch description, or
<symbol>XkbUseCoreKbd</symbol>
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
<function>XkbGetKeyboard</function>
allocates and returns a pointer to a keyboard description. It queries the
server for those components specified in the
<parameter>which</parameter>
parameter for device
<parameter>device_spec</parameter>
and copies the results to the
<structname>XkbDescRec</structname>
it allocated. The remaining fields in the keyboard description are set to
<symbol>NULL</symbol>.
The valid masks for
<parameter>which</parameter>
are those listed in <link linkend="table6.2">Table 6.2</link>.
</para>


<para>
<function>XkbGetKeyboard</function>
can generate
<errorname>BadAlloc</errorname>
protocol errors.
</para>


<para>
To free the returned keyboard description, use
<function>XkbFreeKeyboard</function>
(see <link linkend="Allocating_and_Freeing_a_Keyboard_Description">section 6.4</link>).
</para>


</sect1>
<sect1 id='Tracking_Changes_to_the_Keyboard_Description_in_the_Server'>
<title>Tracking Changes to the Keyboard Description in the Server</title>

<para>
The server can generate events whenever its copy of the keyboard description
for a device changes. Refer to <link linkend="Tracking_Changes_to_Map_Components">section 14.4</link> for detailed information on
tracking changes to the keyboard description.
</para>


</sect1>
<sect1 id='Allocating_and_Freeing_a_Keyboard_Description'>
<title>Allocating and Freeing a Keyboard Description</title>

<para>
Applications seldom need to directly allocate a keyboard description; calling
<function>XkbGetKeyboard</function>
usually suffices. In the event you need to create a keyboard description from
scratch, however, use
<function>XkbAllocKeyboard</function>
rather than directly calling
<function>malloc</function>
or
<function>Xmalloc</function>.
</para>

<indexterm significance="preferred" zone="XkbAllocKeyboard"><primary><function>XkbAllocKeyboard</function></primary></indexterm>
<funcsynopsis id="XkbAllocKeyboard">
  <funcprototype>
    <funcdef>XkbDescRec *<function>XkbAllocKeyboard</function></funcdef>
  <void />

  </funcprototype>
</funcsynopsis>

<para>
If
<function>XkbAllocKeyboard</function>
fails to allocate the keyboard description, it returns
<symbol>NULL</symbol>.
Otherwise, it returns a pointer to an empty keyboard description structure.
The
<structfield>device_spec</structfield>
field will have been initialized to
<symbol>XkbUseCoreKbd</symbol>.
You may then either fill in the structure components or use Xkb functions to
obtain values for the structure components from a keyboard device.
</para>


<para>
To destroy either an entire an
<structname>XkbDescRec</structname>
or just some of its members, use
<function>XkbFreeKeyboard</function>.
</para>


<indexterm significance="preferred" zone="XkbFreeKeyboard"><primary><function>XkbFreeKeyboard</function></primary></indexterm>
<funcsynopsis id="XkbFreeKeyboard">
  <funcprototype>
    <funcdef>void <function>XkbFreeKeyboard</function></funcdef>
<!--
<parameter>(xkb, which, free_all</parameter>
) -->

    <paramdef>XkbDescPtr <parameter>xkb</parameter></paramdef>
    <paramdef>unsigned int <parameter>which</parameter></paramdef>
    <paramdef>Bool <parameter>free_all</parameter></paramdef>
  </funcprototype>
</funcsynopsis>
<variablelist>
  <varlistentry>
    <term>
      <parameter>xkb</parameter>
    </term>
    <listitem>
      <para>
        keyboard description with components to free
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>which</parameter>
    </term>
    <listitem>
      <para>
        mask selecting components to free
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>
      <parameter>free_all</parameter>
    </term>
    <listitem>
      <para>
        <symbol>True</symbol> &rArr; free all components and <parameter>xkb</parameter>
      </para>
    </listitem>
  </varlistentry>
</variablelist>

<para>
<function>XkbFreeKeyboard</function>
frees the components of
<parameter>xkb</parameter>
specified by
<parameter>which</parameter>
and sets the corresponding values to
<symbol>NULL</symbol>.
If
<parameter>free_all</parameter>
is
<symbol>True</symbol>,
<function>XkbFreeKeyboard</function>
frees every non-
<symbol>NULL</symbol>
component of
<parameter>xkb</parameter>
and then frees the
<parameter>xkb</parameter>
structure itself.
</para>

</sect1>
</chapter>
@


1.2
log
@Upate to libX11 1.5rc1. Tested by krw@@, mpi@@, shadchin@@.
@
text
@d1 3
d17 3
d21 5
a25 5
The complete description of an Xkb keyboard is given by an <emphasis>
XkbDescRec</emphasis>
. The component structures in the <emphasis>
XkbDescRec</emphasis>
 represent the major Xkb components outlined in Figure 1.1. <!-- xref -->
d30 13
a42 24
      struct _XDisplay *                  display;            /* connection to
X server */
      unsigned short                  flags;            /* private to Xkb, do
not modify */
      unsigned short                  device_spec;            /* device of
interest */
      KeyCode                  min_key_code;            /* minimum keycode for
device */
      KeyCode                  max_key_code;            /* maximum keycode for
device */
      XkbControlsPtr                  ctrls;            /* controls */
      XkbServerMapPtr                  server;            /* server keymap */
      XkbClientMapPtr                  map;            /* client keymap */
      XkbIndicatorPtr                  indicators;            /* indicator map
*/
      XkbNamesPtr                  names;            /* names for all
components */
      XkbCompatMapPtr                  compat;            /* compatibility map
*/
      XkbGeometryPtr                  geom;            /* physical geometry of
keyboard */
} <emphasis>
XkbDescRec</emphasis>
, *XkbDescPtr;
d46 15
a60 16
The <emphasis>
display</emphasis>
 field points to an X display structure. The <emphasis>
flags</emphasis>
 field is private to the library: modifying <emphasis>
flags</emphasis>
 may yield unpredictable results. The <emphasis>
device_spec</emphasis>
 field specifies the device identifier of the keyboard input device, or
<emphasis>
XkbUseCoreKeyboard</emphasis>
, which specifies the core keyboard device. The <emphasis>
min_key_code</emphasis>
 and <emphasis>
max_key_code</emphasis>
 fields specify the least and greatest keycode that can be returned by the
d67 2
a68 1
are described in detail in other sections of this document. Table 6.1
d70 2
a71 3
components of the <emphasis>
XkbDescRec</emphasis>
.
d74 1
a74 1
<table frame='topbot'>
d89 1
a89 1
    <entry>Chapter 10</entry>
d93 1
a93 1
    <entry>Chapter 16</entry>
d97 1
a97 1
    <entry>Chapter 15</entry>
d101 1
a101 1
    <entry>Chapter 8</entry>
d105 1
a105 1
    <entry>Chapter 18</entry>
d109 1
a109 1
    <entry>Chapter 17</entry>
d113 1
a113 1
    <entry>Chapter 13</entry>
d123 3
a125 3
fields in the <emphasis>
XkbDescRec</emphasis>
 are shown in Table 6.2. <!-- xref -->
d128 1
a128 1
<table frame='topbot'>
d144 1
a144 1
    <entry>XkbControlsMask</entry>
d149 1
a149 1
    <entry>XkbServerMapMask</entry>
d159 1
a159 1
    <entry>XkbIndicatorMapMask</entry>
d164 1
a164 1
    <entry>XkbNamesMask</entry>
d169 1
a169 1
    <entry>XkbCompatMapMask</entry>
d174 1
a174 1
    <entry>XkbGeometryMask</entry>
d179 1
a179 1
    <entry>XkbAllComponentsMask</entry>
d193 4
a196 5
<emphasis>
XkbGetKeyboard</emphasis>
 (see also <emphasis>
XkbGetKeyboardbyName</emphasis>
).
d199 46
a244 40
<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
XkbDescPtr <emphasis>
XkbGetKeyboard</emphasis>
(<emphasis>
display, which, device_spec</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Display * <emphasis>
      display</emphasis>
;            /* connection to X server */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int      <emphasis>
which</emphasis>
;            /* mask indicating components to return */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int<emphasis>
      device_spec</emphasis>
;            /* device for which to fetch description, or <emphasis>
XkbUseCoreKbd</emphasis>
 */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>
d247 1
a247 2
<emphasis>
XkbGetKeyboard </emphasis>
d249 11
a259 12
server for those components specified in the <emphasis>
which</emphasis>
 parameter for device <emphasis>
device_spec</emphasis>
 and copies the results to the <emphasis>
XkbDescRec</emphasis>
 it allocated. The remaining fields in the keyboard description are set to
<emphasis>
NULL</emphasis>
. The valid masks for <emphasis>
which</emphasis>
 are those listed in Table 6.2. <!-- xref -->
d264 4
a267 5
<emphasis>
XkbGetKeyboard</emphasis>
 can generate <emphasis>
BadAlloc</emphasis>
 protocol errors.
d272 3
a274 3
To free the returned keyboard description, use <emphasis>
XkbFreeKeyboard</emphasis>
 (see section 6.4). <!-- xref -->
d284 1
a284 1
for a device changes. Refer to section 14.4 for detailed information on  <!-- xref -->
d295 30
a324 39
<emphasis>
XkbGetKeyboard</emphasis>
 usually suffices. In the event you need to create a keyboard description from
scratch, however, use <emphasis>
XkbAllocKeyboard</emphasis>
 rather than directly calling <emphasis>
malloc </emphasis>
or <emphasis>
Xmalloc</emphasis>
.
</para>

<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
XkbDescRec * <emphasis>
XkbAllocKeyboard</emphasis>
(void)
    </entry>
  </row>
</tbody>
</tgroup>
</informaltable>

<para>
If <emphasis>
XkbAllocKeyboard</emphasis>
 fails to allocate the keyboard description, it returns <emphasis>
NULL</emphasis>
. Otherwise, it returns a pointer to an empty keyboard description structure.
The <emphasis>
device_spec</emphasis>
 field will have been initialized to <emphasis>
XkbUseCoreKbd</emphasis>
. You may then either fill in the structure components or use Xkb functions to
d330 73
a402 72
To destroy either an entire an <emphasis>
XkbDescRec</emphasis>
 or just some of its members, use <emphasis>
XkbFreeKeyboard.</emphasis>
</para>


<informaltable frame='none'>
<?dbfo keep-together="always" ?>
<tgroup cols='1' align='left' colsep='0' rowsep='0'>
<colspec colname='c1' colwidth='1.0*'/>
<tbody>
  <row>
    <entry role='functiondecl'>
void <emphasis>
XkbFreeKeyboard</emphasis>
<emphasis>
(xkb, which, free_all</emphasis>
)
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
XkbDescPtr <emphasis>
            xkb</emphasis>
;            /* keyboard description with components to free */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
unsigned int      <emphasis>
      which</emphasis>
;            /* mask selecting components to free */
    </entry>
  </row>
  <row>
    <entry role='functionargdecl'>
Bool <emphasis>
            free_all</emphasis>
;            /* <emphasis>
True</emphasis>
 =&gt; free all components and <emphasis>
xkb</emphasis>
 */
    </entry>
</row>
</tbody>
</tgroup>
</informaltable>

<para>
<emphasis>
XkbFreeKeyboard</emphasis>
 frees the components of <emphasis>
xkb</emphasis>
 specified by <emphasis>
which</emphasis>
 and sets the corresponding values to <emphasis>
NULL</emphasis>
. If <emphasis>
free_all</emphasis>
 is <emphasis>
True</emphasis>
, <emphasis>
XkbFreeKeyboard</emphasis>
 frees every non-<emphasis>
NULL</emphasis>
 component of <emphasis>
xkb</emphasis>
 and then frees the <emphasis>
xkb</emphasis>
 structure itself.
@


1.1
log
@Update to libx11 1.4.2. Tested by ajacoutot@@, jasper@@ krw@@, landry@@,
shadchin@@ on various architectures.
Bump major.
@
text
@d1 1
a1 1
<chapter id='complete_keyboard_description'>
d11 1
a11 1
<sect1 id='the_xkbdescrec_structure'>
d80 1
a80 1
<table frame='none'>
d82 4
a85 3
<tgroup cols='2'>
<colspec colsep='0'/>
<colspec colsep='0'/>
d87 1
a87 1
<row rowsep='0'>
d93 1
a93 1
<row rowsep='0'>
d97 1
a97 1
<row rowsep='0'>
d101 1
a101 1
<row rowsep='0'>
d105 1
a105 1
<row rowsep='0'>
d109 1
a109 1
<row rowsep='0'>
d113 1
a113 1
<row rowsep='0'>
d117 1
a117 1
<row rowsep='0'>
d134 1
a134 1
<table frame='none'>
d136 5
a140 4
<tgroup cols='3'>
<colspec colsep='0'/>
<colspec colsep='0'/>
<colspec colsep='0'/>
d142 1
a142 1
<row rowsep='0'>
d149 1
a149 1
<row rowsep='0'>
d154 1
a154 1
<row rowsep='0'>
d159 1
a159 1
<row rowsep='0'>
d164 1
a164 1
<row rowsep='0'>
d169 1
a169 1
<row rowsep='0'>
d174 1
a174 1
<row rowsep='0'>
d179 1
a179 1
<row rowsep='0'>
d184 1
a184 1
<row rowsep='0'>
d194 1
a194 1
<sect1 id='obtaining_a_keyboard_description_from_the_server'>
d207 3
a209 2
<tgroup cols='1'>
<colspec colsep='0'/>
d211 1
a211 1
  <row rowsep='0'>
d220 1
a220 1
  <row rowsep='0'>
d227 1
a227 1
  <row rowsep='0'>
d234 1
a234 1
  <row rowsep='0'>
d283 1
a283 1
<sect1 id='tracking_changes_to_the_keyboard_description_in_the_server'>
d294 1
a294 1
<sect1 id='allocating_and_freeing_a_keyboard_description'>
d312 3
a314 2
<tgroup cols='1'>
<colspec colsep='0'/>
d316 1
a316 1
  <row rowsep='0'>
d351 3
a353 2
<tgroup cols='1'>
<colspec colsep='0'/>
d355 1
a355 1
  <row rowsep='0'>
d364 1
a364 1
  <row rowsep='0'>
d371 1
a371 1
  <row rowsep='0'>
d378 1
a378 1
  <row rowsep='0'>
@

