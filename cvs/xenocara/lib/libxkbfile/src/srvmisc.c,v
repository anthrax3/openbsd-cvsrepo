head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.6
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.4
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.2
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_4:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.05.10.09.32.36;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	7gFeKDQguFagRHxv;

1.3
date	2012.03.10.17.16.24;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.31.16.50.29;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.24.50;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.24.50;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to libxkbfile 1.0.9
@
text
@/************************************************************
 Copyright (c) 1994 by Silicon Graphics Computer Systems, Inc.

 Permission to use, copy, modify, and distribute this
 software and its documentation for any purpose and without
 fee is hereby granted, provided that the above copyright
 notice appear in all copies and that both that copyright
 notice and this permission notice appear in supporting
 documentation, and that the name of Silicon Graphics not be
 used in advertising or publicity pertaining to distribution
 of the software without specific prior written permission.
 Silicon Graphics makes no representation about the suitability
 of this software for any purpose. It is provided "as is"
 without any express or implied warranty.

 SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
 GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
 DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
 THE USE OR PERFORMANCE OF THIS SOFTWARE.

 ********************************************************/

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <X11/Xlib.h>
#include <X11/XKBlib.h>
#include <X11/extensions/XKBgeom.h>

#include "XKMformat.h"
#include "XKBfileInt.h"

Bool
XkbWriteToServer(XkbFileInfo *result)
{
    XkbDescPtr xkb;
    Display *dpy;

    if ((result == NULL) || (result->xkb == NULL) || (result->xkb->dpy == NULL))
        return False;
    xkb = result->xkb;
    dpy = xkb->dpy;
    if (!XkbSetMap(dpy, XkbAllMapComponentsMask, xkb))
        return False;
    if (!XkbSetIndicatorMap(dpy, ~0, xkb))
        return False;
#ifdef NOTYET
    if (!XkbSetControls(dpy, XkbAllControlsMask, xkb))
        return False;
#endif
    if (!XkbSetCompatMap(dpy, XkbAllCompatMask, xkb, True))
        return False;
    if (!XkbSetNames(dpy, XkbAllNamesMask, 0, xkb->map->num_types, xkb))
        return False;
    if (xkb->geom) {
        if (XkbSetGeometry(dpy, xkb->device_spec, xkb->geom) != Success)
            return False;
    }
    return True;
#ifdef NOTYET
    switch (result->type) {
    case XkmSemanticsFile:
        func = WriteCHdrSemantics;
        break;
    case XkmLayoutFile:
        func = WriteCHdrLayout;
        break;
    case XkmKeymapFile:
        func = WriteCHdrKeymap;
        break;
    default:
        _XkbLibError(_XkbErrIllegalContents, "XkbWriteToServer", result->type);
        break;
    }
    return ok;
#endif
}

unsigned
XkbReadFromServer(Display *dpy, unsigned need, unsigned want,
                  XkbFileInfo *result)
{
    unsigned which = need | want;
    unsigned tmp = 0;

    if ((result == NULL) || (dpy == NULL))
        return which;

    if (which & XkmSymbolsMask)
        tmp = XkbAllMapComponentsMask;
    else if (which & XkmTypesMask)
        tmp = XkbKeyTypesMask;
    if (result->xkb == NULL) {
        result->xkb = XkbGetMap(dpy, tmp, XkbUseCoreKbd);
        if (!result->xkb)
            return which;
        else
            which &= ~(XkmSymbolsMask | XkmTypesMask | XkmVirtualModsMask);
    }
    else if ((tmp) && (XkbGetUpdatedMap(dpy, tmp, result->xkb) == Success))
        which &= ~(XkmSymbolsMask | XkmTypesMask | XkmVirtualModsMask);

    if (which & XkmIndicatorsMask) {
        if (XkbGetIndicatorMap(dpy, XkbAllIndicatorsMask, result->xkb) ==
            Success)
            which &= ~XkmIndicatorsMask;
    }

    if (which & XkmCompatMapMask) {
        if (XkbGetCompatMap(dpy, XkbAllCompatMask, result->xkb) == Success)
            which &= ~XkmCompatMapMask;
    }
    if (which & XkmGeometryMask) {
        if (XkbGetGeometry(dpy, result->xkb) == Success)
            which &= ~XkmGeometryMask;
    }
    XkbGetNames(dpy, XkbAllNamesMask, result->xkb);
    return which;
}

Status
XkbChangeKbdDisplay(Display *newDpy, XkbFileInfo *result)
{
    register int i;
    XkbDescPtr xkb;
    Display *oldDpy;
    Atom *atm;

    if ((result->xkb == NULL) || (result->xkb->dpy == newDpy))
        return Success;
    xkb = result->xkb;
    oldDpy = xkb->dpy;
    if (xkb->names) {
        XkbNamesPtr names = xkb->names;

        names->keycodes = XkbChangeAtomDisplay(oldDpy, newDpy, names->keycodes);
        names->geometry = XkbChangeAtomDisplay(oldDpy, newDpy, names->geometry);
        names->symbols = XkbChangeAtomDisplay(oldDpy, newDpy, names->symbols);
        names->types = XkbChangeAtomDisplay(oldDpy, newDpy, names->types);
        names->compat = XkbChangeAtomDisplay(oldDpy, newDpy, names->compat);
        names->phys_symbols = XkbChangeAtomDisplay(oldDpy, newDpy,
                                                   names->phys_symbols);
        for (i = 0, atm = names->vmods; i < XkbNumVirtualMods; i++, atm++) {
            *atm = XkbChangeAtomDisplay(oldDpy, newDpy, *atm);
        }
        for (i = 0, atm = names->indicators; i < XkbNumIndicators; i++, atm++) {
            *atm = XkbChangeAtomDisplay(oldDpy, newDpy, *atm);
        }
        for (i = 0, atm = names->groups; i < XkbNumKbdGroups; i++, atm++) {
            *atm = XkbChangeAtomDisplay(oldDpy, newDpy, *atm);
        }
        for (i = 0, atm = names->radio_groups; i < names->num_rg; i++, atm++) {
            *atm = XkbChangeAtomDisplay(oldDpy, newDpy, *atm);
        }
    }
    if (xkb->map) {
        register int t;
        XkbKeyTypePtr type;

        for (t = 0, type = xkb->map->types; t < xkb->map->num_types;
             t++, type++) {
            type->name = XkbChangeAtomDisplay(oldDpy, newDpy, type->name);
            if (type->level_names != NULL) {
                for (i = 0, atm = type->level_names; i < type->num_levels;
                     i++, atm++) {
                    *atm = XkbChangeAtomDisplay(oldDpy, newDpy, *atm);
                }
            }
        }
    }
    if (xkb->geom) {
        XkbGeometryPtr geom = xkb->geom;

        geom->name = XkbChangeAtomDisplay(oldDpy, newDpy, geom->name);
        if (geom->shapes) {
            register int s;
            XkbShapePtr shape;

            for (s = 0, shape = geom->shapes; s < geom->num_shapes;
                 s++, shape++) {
                shape->name = XkbChangeAtomDisplay(oldDpy, newDpy, shape->name);
            }
        }
        if (geom->sections) {
            register int s;
            XkbSectionPtr section;

            for (s = 0, section = geom->sections; s < geom->num_sections;
                 s++, section++) {
                section->name =
                    XkbChangeAtomDisplay(oldDpy, newDpy, section->name);
                if (section->doodads) {
                    register int d;
                    XkbDoodadPtr doodad;

                    for (d = 0, doodad = section->doodads;
                         d < section->num_doodads; d++, doodad++) {
                        doodad->any.name =
                            XkbChangeAtomDisplay(oldDpy, newDpy,
                                                 doodad->any.name);
                    }
                }
                if (section->overlays) {
                    register int o;
                    register XkbOverlayPtr ol;

                    for (o = 0, ol = section->overlays;
                         o < section->num_overlays; o++, ol++) {
                        ol->name =
                            XkbChangeAtomDisplay(oldDpy, newDpy, ol->name);
                    }
                }
            }
        }
        if (geom->doodads) {
            register int d;
            XkbDoodadPtr doodad;

            for (d = 0, doodad = geom->doodads; d < geom->num_doodads;
                 d++, doodad++) {
                doodad->any.name =
                    XkbChangeAtomDisplay(oldDpy, newDpy, doodad->any.name);
            }
        }
    }
    xkb->dpy = newDpy;
    return Success;
}
@


1.3
log
@Update to libxkbfile 1.0.8
@
text
@d43 2
a44 2
XkbDescPtr		xkb;
Display *		dpy;
d46 8
a53 8
    if ((result==NULL)||(result->xkb==NULL)||(result->xkb->dpy==NULL))
	return False;
    xkb= result->xkb;
    dpy= xkb->dpy;
    if (!XkbSetMap(dpy,XkbAllMapComponentsMask,xkb))
	return False;
    if (!XkbSetIndicatorMap(dpy,~0,xkb))
	return False;
d55 2
a56 2
    if (!XkbSetControls(dpy,XkbAllControlsMask,xkb))
	return False;
d58 4
a61 4
    if (!XkbSetCompatMap(dpy,XkbAllCompatMask,xkb,True))
	return False;
    if (!XkbSetNames(dpy,XkbAllNamesMask,0,xkb->map->num_types,xkb))
	return False;
d63 2
a64 2
	if (XkbSetGeometry(dpy,xkb->device_spec,xkb->geom)!=Success)
	    return False;
d69 12
a80 12
	case XkmSemanticsFile:
	    func= WriteCHdrSemantics;
	    break;
	case XkmLayoutFile:
	    func= WriteCHdrLayout;
	    break;
	case XkmKeymapFile:
	    func= WriteCHdrKeymap;
	    break;
	default:
	   _XkbLibError(_XkbErrIllegalContents,"XkbWriteToServer",result->type);
	   break;
d87 2
a88 1
XkbReadFromServer(Display *dpy,unsigned need,unsigned want,XkbFileInfo *result)
d90 2
a91 2
unsigned which= need|want;
unsigned tmp = 0;
d93 2
a94 2
    if ((result==NULL)||(dpy==NULL))
	return which;
d96 27
a122 7
    if (which&XkmSymbolsMask)		tmp= XkbAllMapComponentsMask;
    else if (which&XkmTypesMask)	tmp= XkbKeyTypesMask;
    if (result->xkb==NULL) {
	result->xkb= XkbGetMap(dpy,tmp,XkbUseCoreKbd);
	if (!result->xkb)
	     return which;
	else which&= ~(XkmSymbolsMask|XkmTypesMask|XkmVirtualModsMask);
d124 1
a124 17
    else if ((tmp)&&(XkbGetUpdatedMap(dpy,tmp,result->xkb)==Success))
	which&= ~(XkmSymbolsMask|XkmTypesMask|XkmVirtualModsMask);

    if (which&XkmIndicatorsMask) {
	if (XkbGetIndicatorMap(dpy,XkbAllIndicatorsMask,result->xkb)==Success)
	    which&= ~XkmIndicatorsMask;
    }

    if (which&XkmCompatMapMask) {
	if (XkbGetCompatMap(dpy,XkbAllCompatMask,result->xkb)==Success)
	    which&= ~XkmCompatMapMask;
    }
    if (which&XkmGeometryMask) {
	if (XkbGetGeometry(dpy,result->xkb)==Success)
	    which&= ~XkmGeometryMask;
    }
    XkbGetNames(dpy,XkbAllNamesMask,result->xkb);
d129 1
a129 1
XkbChangeKbdDisplay(Display *newDpy,XkbFileInfo *result)
d131 9
a139 9
register int	i;
XkbDescPtr	xkb;
Display *	oldDpy;
Atom *		atm;

    if ((result->xkb==NULL)||(result->xkb->dpy==newDpy))
	return Success;
    xkb= result->xkb;
    oldDpy= xkb->dpy;
d141 21
a161 20
	XkbNamesPtr	names= xkb->names;
	names->keycodes= XkbChangeAtomDisplay(oldDpy,newDpy,names->keycodes);
	names->geometry= XkbChangeAtomDisplay(oldDpy,newDpy,names->geometry);
	names->symbols= XkbChangeAtomDisplay(oldDpy,newDpy,names->symbols);
	names->types= XkbChangeAtomDisplay(oldDpy,newDpy,names->types);
	names->compat= XkbChangeAtomDisplay(oldDpy,newDpy,names->compat);
	names->phys_symbols= XkbChangeAtomDisplay(oldDpy,newDpy,
							 names->phys_symbols);
	for (i=0,atm=names->vmods;i<XkbNumVirtualMods;i++,atm++) {
	    *atm= XkbChangeAtomDisplay(oldDpy,newDpy,*atm);
	}
	for (i=0,atm=names->indicators;i<XkbNumIndicators;i++,atm++) {
	    *atm= XkbChangeAtomDisplay(oldDpy,newDpy,*atm);
	}
	for (i=0,atm=names->groups;i<XkbNumKbdGroups;i++,atm++) {
	    *atm= XkbChangeAtomDisplay(oldDpy,newDpy,*atm);
	}
	for (i=0,atm=names->radio_groups;i<names->num_rg;i++,atm++) {
	    *atm= XkbChangeAtomDisplay(oldDpy,newDpy,*atm);
	}
d164 13
a176 10
	register int	t;
	XkbKeyTypePtr	type;
	for (t=0,type=xkb->map->types;t<xkb->map->num_types;t++,type++) {
	    type->name= XkbChangeAtomDisplay(oldDpy,newDpy,type->name);
	    if (type->level_names!=NULL) {
		for (i=0,atm=type->level_names;i<type->num_levels;i++,atm++) {
		    *atm= XkbChangeAtomDisplay(oldDpy,newDpy,*atm);
		}
	    }
	}
d179 53
a231 41
	XkbGeometryPtr	geom= xkb->geom;
	geom->name= XkbChangeAtomDisplay(oldDpy,newDpy,geom->name);
	if (geom->shapes) {
	    register int s;
	    XkbShapePtr	shape;
	    for (s=0,shape=geom->shapes;s<geom->num_shapes;s++,shape++) {
		shape->name= XkbChangeAtomDisplay(oldDpy,newDpy,shape->name);
	    }
	}
	if (geom->sections) {
	    register int s;
	    XkbSectionPtr	section;
	    for (s=0,section=geom->sections;s<geom->num_sections;s++,section++){
		section->name=XkbChangeAtomDisplay(oldDpy,newDpy,section->name);
		if (section->doodads) {
		    register int d;
		    XkbDoodadPtr doodad;
		    for (d=0,doodad=section->doodads;d<section->num_doodads;
								d++,doodad++) {
			doodad->any.name= XkbChangeAtomDisplay(oldDpy,newDpy,
							 doodad->any.name);
		    }
		}
		if (section->overlays) {
		    register int o;
		    register XkbOverlayPtr ol;
		    for (o=0,ol=section->overlays;o<section->num_overlays;
								o++,ol++) {
			ol->name= XkbChangeAtomDisplay(oldDpy,newDpy,ol->name);
		    }
		}
	    }
	}
	if (geom->doodads) {
	    register int d;
	    XkbDoodadPtr doodad;
	    for (d=0,doodad=geom->doodads;d<geom->num_doodads;d++,doodad++) {
		doodad->any.name= XkbChangeAtomDisplay(oldDpy,newDpy,
							 doodad->any.name);
	    }
	}
d233 1
a233 1
    xkb->dpy= newDpy;
@


1.2
log
@Update to libxkbfile 1.0.7. No functional change.
@
text
@d9 2
a10 2
 documentation, and that the name of Silicon Graphics not be 
 used in advertising or publicity pertaining to distribution 
d12 1
a12 1
 Silicon Graphics makes no representation about the suitability 
d15 3
a17 3
 
 SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
 SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d19 3
a21 3
 GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
 DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
 DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
@


1.1
log
@Initial revision
@
text
@a0 1
/* $Xorg: srvmisc.c,v 1.3 2000/08/17 19:46:43 cpqbld Exp $ */
a25 1
/* $XFree86: xc/lib/xkbfile/srvmisc.c,v 3.4 2001/10/28 03:32:47 tsi Exp $ */
@


1.1.1.1
log
@import from X.Org 7.2RC1
@
text
@@
