head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.16
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.14
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.12
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.10
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.12.01.20.34.20;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2013.06.07.17.18.01;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.11.23.20.44.09;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.02.28.20.36.12;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.24.13.05.47;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.11.14.13.42.50;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to pixman 0.32.4. Tested by naddy@@ and ajacoutot@@
@
text
@/*
 * Test program, which can detect some problems with affine transformations
 * in pixman. Testing is done by running lots of random SRC and OVER
 * compositing operations a8r8g8b8, x8a8r8g8b8, r5g6b5 and a8 color formats
 * with random scaled, rotated and translated transforms.
 *
 * Script 'fuzzer-find-diff.pl' can be used to narrow down the problem in
 * the case of test failure.
 */
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include "utils.h"

#define MAX_SRC_WIDTH  16
#define MAX_SRC_HEIGHT 16
#define MAX_DST_WIDTH  16
#define MAX_DST_HEIGHT 16
#define MAX_STRIDE     4

/*
 * Composite operation with pseudorandom images
 */
uint32_t
test_composite (int      testnum,
		int      verbose)
{
    int                i;
    pixman_image_t *   src_img;
    pixman_image_t *   dst_img;
    pixman_transform_t transform;
    pixman_region16_t  clip;
    int                src_width, src_height;
    int                dst_width, dst_height;
    int                src_stride, dst_stride;
    int                src_x, src_y;
    int                dst_x, dst_y;
    int                src_bpp;
    int                dst_bpp;
    int                w, h;
    pixman_fixed_t     scale_x = 65536, scale_y = 65536;
    pixman_fixed_t     translate_x = 0, translate_y = 0;
    pixman_op_t        op;
    pixman_repeat_t    repeat = PIXMAN_REPEAT_NONE;
    pixman_format_code_t src_fmt, dst_fmt;
    uint32_t *         srcbuf;
    uint32_t *         dstbuf;
    uint32_t           crc32;
    FLOAT_REGS_CORRUPTION_DETECTOR_START ();

    prng_srand (testnum);

    src_bpp = (prng_rand_n (2) == 0) ? 2 : 4;
    dst_bpp = (prng_rand_n (2) == 0) ? 2 : 4;
    op = (prng_rand_n (2) == 0) ? PIXMAN_OP_SRC : PIXMAN_OP_OVER;

    src_width = prng_rand_n (MAX_SRC_WIDTH) + 1;
    src_height = prng_rand_n (MAX_SRC_HEIGHT) + 1;
    dst_width = prng_rand_n (MAX_DST_WIDTH) + 1;
    dst_height = prng_rand_n (MAX_DST_HEIGHT) + 1;
    src_stride = src_width * src_bpp + prng_rand_n (MAX_STRIDE) * src_bpp;
    dst_stride = dst_width * dst_bpp + prng_rand_n (MAX_STRIDE) * dst_bpp;

    if (src_stride & 3)
	src_stride += 2;

    if (dst_stride & 3)
	dst_stride += 2;

    src_x = -(src_width / 4) + prng_rand_n (src_width * 3 / 2);
    src_y = -(src_height / 4) + prng_rand_n (src_height * 3 / 2);
    dst_x = -(dst_width / 4) + prng_rand_n (dst_width * 3 / 2);
    dst_y = -(dst_height / 4) + prng_rand_n (dst_height * 3 / 2);
    w = prng_rand_n (dst_width * 3 / 2 - dst_x);
    h = prng_rand_n (dst_height * 3 / 2 - dst_y);

    srcbuf = (uint32_t *)malloc (src_stride * src_height);
    dstbuf = (uint32_t *)malloc (dst_stride * dst_height);

    prng_randmemset (srcbuf, src_stride * src_height, 0);
    prng_randmemset (dstbuf, dst_stride * dst_height, 0);

    if (prng_rand_n (2) == 0)
    {
	srcbuf += (src_stride / 4) * (src_height - 1);
	src_stride = - src_stride;
    }

    if (prng_rand_n (2) == 0)
    {
	dstbuf += (dst_stride / 4) * (dst_height - 1);
	dst_stride = - dst_stride;
    }
    
    src_fmt = src_bpp == 4 ? (prng_rand_n (2) == 0 ?
                              PIXMAN_a8r8g8b8 : PIXMAN_x8r8g8b8) : PIXMAN_r5g6b5;

    dst_fmt = dst_bpp == 4 ? (prng_rand_n (2) == 0 ?
                              PIXMAN_a8r8g8b8 : PIXMAN_x8r8g8b8) : PIXMAN_r5g6b5;

    src_img = pixman_image_create_bits (
        src_fmt, src_width, src_height, srcbuf, src_stride);

    dst_img = pixman_image_create_bits (
        dst_fmt, dst_width, dst_height, dstbuf, dst_stride);

    image_endian_swap (src_img);
    image_endian_swap (dst_img);

    pixman_transform_init_identity (&transform);

    if (prng_rand_n (3) > 0)
    {
	scale_x = -65536 * 3 + prng_rand_n (65536 * 6);
	if (prng_rand_n (2))
	    scale_y = -65536 * 3 + prng_rand_n (65536 * 6);
	else
	    scale_y = scale_x;
	pixman_transform_init_scale (&transform, scale_x, scale_y);
    }
    if (prng_rand_n (3) > 0)
    {
	translate_x = -65536 * 3 + prng_rand_n (6 * 65536);
	if (prng_rand_n (2))
	    translate_y = -65536 * 3 + prng_rand_n (6 * 65536);
	else
	    translate_y = translate_x;
	pixman_transform_translate (&transform, NULL, translate_x, translate_y);
    }

    if (prng_rand_n (4) > 0)
    {
	int c, s, tx = 0, ty = 0;
	switch (prng_rand_n (4))
	{
	case 0:
	    /* 90 degrees */
	    c = 0;
	    s = pixman_fixed_1;
	    tx = pixman_int_to_fixed (MAX_SRC_HEIGHT);
	    break;
	case 1:
	    /* 180 degrees */
	    c = -pixman_fixed_1;
	    s = 0;
	    tx = pixman_int_to_fixed (MAX_SRC_WIDTH);
	    ty = pixman_int_to_fixed (MAX_SRC_HEIGHT);
	    break;
	case 2:
	    /* 270 degrees */
	    c = 0;
	    s = -pixman_fixed_1;
	    ty = pixman_int_to_fixed (MAX_SRC_WIDTH);
	    break;
	default:
	    /* arbitrary rotation */
	    c = prng_rand_n (2 * 65536) - 65536;
	    s = prng_rand_n (2 * 65536) - 65536;
	    break;
	}
	pixman_transform_rotate (&transform, NULL, c, s);
	pixman_transform_translate (&transform, NULL, tx, ty);
    }

    if (prng_rand_n (8) == 0)
    {
	/* Flip random bits */
	int maxflipcount = 8;
	while (maxflipcount--)
	{
	    int i = prng_rand_n (2);
	    int j = prng_rand_n (3);
	    int bitnum = prng_rand_n (32);
	    transform.matrix[i][j] ^= 1 << bitnum;
	    if (prng_rand_n (2))
		break;
	}
    }

    pixman_image_set_transform (src_img, &transform);

    switch (prng_rand_n (4))
    {
    case 0:
	repeat = PIXMAN_REPEAT_NONE;
	break;

    case 1:
	repeat = PIXMAN_REPEAT_NORMAL;
	break;

    case 2:
	repeat = PIXMAN_REPEAT_PAD;
	break;

    case 3:
	repeat = PIXMAN_REPEAT_REFLECT;
	break;

    default:
        break;
    }
    pixman_image_set_repeat (src_img, repeat);

    if (prng_rand_n (2))
	pixman_image_set_filter (src_img, PIXMAN_FILTER_NEAREST, NULL, 0);
    else
	pixman_image_set_filter (src_img, PIXMAN_FILTER_BILINEAR, NULL, 0);

    if (verbose)
    {
#define M(r,c)								\
	transform.matrix[r][c]

	printf ("src_fmt=%s, dst_fmt=%s\n", format_name (src_fmt), format_name (dst_fmt));
	printf ("op=%s, repeat=%d, transform=\n",
	        operator_name (op), repeat);
	printf (" { { { 0x%08x, 0x%08x, 0x%08x },\n"
		"     { 0x%08x, 0x%08x, 0x%08x },\n"
		"     { 0x%08x, 0x%08x, 0x%08x },\n"
		" } };\n",
		M(0,0), M(0,1), M(0,2),
		M(1,0), M(1,1), M(1,2),
		M(2,0), M(2,1), M(2,2));
	printf ("src_width=%d, src_height=%d, dst_width=%d, dst_height=%d\n",
	        src_width, src_height, dst_width, dst_height);
	printf ("src_x=%d, src_y=%d, dst_x=%d, dst_y=%d\n",
	        src_x, src_y, dst_x, dst_y);
	printf ("w=%d, h=%d\n", w, h);
    }

    if (prng_rand_n (8) == 0)
    {
	pixman_box16_t clip_boxes[2];
	int            n = prng_rand_n (2) + 1;

	for (i = 0; i < n; i++)
	{
	    clip_boxes[i].x1 = prng_rand_n (src_width);
	    clip_boxes[i].y1 = prng_rand_n (src_height);
	    clip_boxes[i].x2 =
		clip_boxes[i].x1 + prng_rand_n (src_width - clip_boxes[i].x1);
	    clip_boxes[i].y2 =
		clip_boxes[i].y1 + prng_rand_n (src_height - clip_boxes[i].y1);

	    if (verbose)
	    {
		printf ("source clip box: [%d,%d-%d,%d]\n",
		        clip_boxes[i].x1, clip_boxes[i].y1,
		        clip_boxes[i].x2, clip_boxes[i].y2);
	    }
	}

	pixman_region_init_rects (&clip, clip_boxes, n);
	pixman_image_set_clip_region (src_img, &clip);
	pixman_image_set_source_clipping (src_img, 1);
	pixman_region_fini (&clip);
    }

    if (prng_rand_n (8) == 0)
    {
	pixman_box16_t clip_boxes[2];
	int            n = prng_rand_n (2) + 1;
	for (i = 0; i < n; i++)
	{
	    clip_boxes[i].x1 = prng_rand_n (dst_width);
	    clip_boxes[i].y1 = prng_rand_n (dst_height);
	    clip_boxes[i].x2 =
		clip_boxes[i].x1 + prng_rand_n (dst_width - clip_boxes[i].x1);
	    clip_boxes[i].y2 =
		clip_boxes[i].y1 + prng_rand_n (dst_height - clip_boxes[i].y1);

	    if (verbose)
	    {
		printf ("destination clip box: [%d,%d-%d,%d]\n",
		        clip_boxes[i].x1, clip_boxes[i].y1,
		        clip_boxes[i].x2, clip_boxes[i].y2);
	    }
	}
	pixman_region_init_rects (&clip, clip_boxes, n);
	pixman_image_set_clip_region (dst_img, &clip);
	pixman_region_fini (&clip);
    }

    pixman_image_composite (op, src_img, NULL, dst_img,
                            src_x, src_y, 0, 0, dst_x, dst_y, w, h);

    crc32 = compute_crc32_for_image (0, dst_img);
    
    if (verbose)
	print_image (dst_img);

    pixman_image_unref (src_img);
    pixman_image_unref (dst_img);

    if (src_stride < 0)
	srcbuf += (src_stride / 4) * (src_height - 1);

    if (dst_stride < 0)
	dstbuf += (dst_stride / 4) * (dst_height - 1);
    
    free (srcbuf);
    free (dstbuf);

    FLOAT_REGS_CORRUPTION_DETECTOR_FINISH ();
    return crc32;
}

#if BILINEAR_INTERPOLATION_BITS == 7
#define CHECKSUM 0xBE724CFE
#elif BILINEAR_INTERPOLATION_BITS == 4
#define CHECKSUM 0x79BBE501
#else
#define CHECKSUM 0x00000000
#endif

int
main (int argc, const char *argv[])
{
    pixman_disable_out_of_bounds_workaround ();

    return fuzzer_test_main ("affine", 8000000, CHECKSUM,
			     test_composite, argc, argv);
}
@


1.5
log
@Update to pixman 0.30.0. Tested by several people during t2k13. Thanks.
@
text
@d83 12
d288 2
a289 9
    if (dst_fmt == PIXMAN_x8r8g8b8)
    {
	/* ignore unused part */
	for (i = 0; i < dst_stride * dst_height / 4; i++)
	    dstbuf[i] &= 0xFFFFFF;
    }

    image_endian_swap (dst_img);

d291 1
a291 11
    {
	int j;

	for (i = 0; i < dst_height; i++)
	{
	    for (j = 0; j < dst_stride; j++)
		printf ("%02X ", *((uint8_t *)dstbuf + i * dst_stride + j));

	    printf ("\n");
	}
    }
d296 6
a301 1
    crc32 = compute_crc32 (0, dstbuf, dst_stride * dst_height);
d309 2
a310 4
#if BILINEAR_INTERPOLATION_BITS == 8
#define CHECKSUM 0x2CDF1F07
#elif BILINEAR_INTERPOLATION_BITS == 7
#define CHECKSUM 0xBC00B1DF
d312 1
a312 1
#define CHECKSUM 0xA227306B
@


1.4
log
@Update to pixman 0.28.0. Tested by ajacoutot@@, mpi@@ and naddy@@ in a full
ports build. Tweaks from mpi@@ for macppc.
@
text
@d51 1
a51 1
    lcg_srand (testnum);
d53 10
a62 10
    src_bpp = (lcg_rand_n (2) == 0) ? 2 : 4;
    dst_bpp = (lcg_rand_n (2) == 0) ? 2 : 4;
    op = (lcg_rand_n (2) == 0) ? PIXMAN_OP_SRC : PIXMAN_OP_OVER;

    src_width = lcg_rand_n (MAX_SRC_WIDTH) + 1;
    src_height = lcg_rand_n (MAX_SRC_HEIGHT) + 1;
    dst_width = lcg_rand_n (MAX_DST_WIDTH) + 1;
    dst_height = lcg_rand_n (MAX_DST_HEIGHT) + 1;
    src_stride = src_width * src_bpp + lcg_rand_n (MAX_STRIDE) * src_bpp;
    dst_stride = dst_width * dst_bpp + lcg_rand_n (MAX_STRIDE) * dst_bpp;
d70 6
a75 6
    src_x = -(src_width / 4) + lcg_rand_n (src_width * 3 / 2);
    src_y = -(src_height / 4) + lcg_rand_n (src_height * 3 / 2);
    dst_x = -(dst_width / 4) + lcg_rand_n (dst_width * 3 / 2);
    dst_y = -(dst_height / 4) + lcg_rand_n (dst_height * 3 / 2);
    w = lcg_rand_n (dst_width * 3 / 2 - dst_x);
    h = lcg_rand_n (dst_height * 3 / 2 - dst_y);
d80 2
a81 2
    for (i = 0; i < src_stride * src_height; i++)
	*((uint8_t *)srcbuf + i) = lcg_rand_n (256);
d83 1
a83 4
    for (i = 0; i < dst_stride * dst_height; i++)
	*((uint8_t *)dstbuf + i) = lcg_rand_n (256);

    src_fmt = src_bpp == 4 ? (lcg_rand_n (2) == 0 ?
d86 1
a86 1
    dst_fmt = dst_bpp == 4 ? (lcg_rand_n (2) == 0 ?
d100 1
a100 1
    if (lcg_rand_n (3) > 0)
d102 3
a104 3
	scale_x = -65536 * 3 + lcg_rand_N (65536 * 6);
	if (lcg_rand_n (2))
	    scale_y = -65536 * 3 + lcg_rand_N (65536 * 6);
d109 1
a109 1
    if (lcg_rand_n (3) > 0)
d111 3
a113 3
	translate_x = -65536 * 3 + lcg_rand_N (6 * 65536);
	if (lcg_rand_n (2))
	    translate_y = -65536 * 3 + lcg_rand_N (6 * 65536);
d119 1
a119 1
    if (lcg_rand_n (4) > 0)
d122 1
a122 1
	switch (lcg_rand_n (4))
d145 2
a146 2
	    c = lcg_rand_N (2 * 65536) - 65536;
	    s = lcg_rand_N (2 * 65536) - 65536;
d153 1
a153 1
    if (lcg_rand_n (8) == 0)
d159 3
a161 3
	    int i = lcg_rand_n (2);
	    int j = lcg_rand_n (3);
	    int bitnum = lcg_rand_n (32);
d163 1
a163 1
	    if (lcg_rand_n (2))
d170 1
a170 1
    switch (lcg_rand_n (4))
d193 1
a193 1
    if (lcg_rand_n (2))
d203 3
a205 3
	printf ("src_fmt=%08X, dst_fmt=%08X\n", src_fmt, dst_fmt);
	printf ("op=%d, repeat=%d, transform=\n",
	        op, repeat);
d220 1
a220 1
    if (lcg_rand_n (8) == 0)
d223 1
a223 1
	int            n = lcg_rand_n (2) + 1;
d227 2
a228 2
	    clip_boxes[i].x1 = lcg_rand_n (src_width);
	    clip_boxes[i].y1 = lcg_rand_n (src_height);
d230 1
a230 1
		clip_boxes[i].x1 + lcg_rand_n (src_width - clip_boxes[i].x1);
d232 1
a232 1
		clip_boxes[i].y1 + lcg_rand_n (src_height - clip_boxes[i].y1);
d248 1
a248 1
    if (lcg_rand_n (8) == 0)
d251 1
a251 1
	int            n = lcg_rand_n (2) + 1;
d254 2
a255 2
	    clip_boxes[i].x1 = lcg_rand_n (dst_width);
	    clip_boxes[i].y1 = lcg_rand_n (dst_height);
d257 1
a257 1
		clip_boxes[i].x1 + lcg_rand_n (dst_width - clip_boxes[i].x1);
d259 1
a259 1
		clip_boxes[i].y1 + lcg_rand_n (dst_height - clip_boxes[i].y1);
d310 1
a310 1
#define CHECKSUM 0x1EF2175A
d312 1
a312 1
#define CHECKSUM 0x74050F50
d314 1
a314 1
#define CHECKSUM 0x4362EAE8
@


1.3
log
@Update to pixman 0.22.4. Tested by shadchin@@, krw@@.
@
text
@d203 3
d207 9
a215 4
	printf ("op=%d, scale_x=%d, scale_y=%d, repeat=%d\n",
	        op, scale_x, scale_y, repeat);
	printf ("translate_x=%d, translate_y=%d\n",
	        translate_x, translate_y);
d312 10
d327 1
a327 1
    return fuzzer_test_main ("affine", 8000000, 0x1EF2175A,
@


1.2
log
@Update to pixman 0.22.2.
0.22.0 was tested by many. 0.22.2 only add a few bug fixes.
Note that on amd64 a recent ld.so is needed to avoid random bus errors.
@
text
@d102 2
a103 2
    
    if (lcg_rand_n (8) > 0)
d105 5
a109 4
	scale_x = -32768 * 3 + lcg_rand_N (65536 * 5);
	scale_y = -32768 * 3 + lcg_rand_N (65536 * 5);
	translate_x = lcg_rand_N (65536);
	translate_y = lcg_rand_N (65536);
d111 8
d156 15
d172 1
a172 1
    
d309 1
a309 1
    return fuzzer_test_main ("affine", 8000000, 0x4B5D1852,
@


1.1
log
@Update to pixman 0.20.0.
tested by ajacoutot@@, krw@@ and on a bulk ports build by landry@@.
@
text
@d43 3
a45 3
    int                op;
    int                repeat = 0;
    int                src_fmt, dst_fmt;
d98 2
a99 2
    image_endian_swap (src_img, src_bpp * 8);
    image_endian_swap (dst_img, dst_bpp * 8);
d115 28
a142 3
	int c = lcg_rand_N (2 * 65536) - 65536;
	int s = lcg_rand_N (2 * 65536) - 65536;
	
d144 1
d254 1
a254 1
    image_endian_swap (dst_img, dst_bpp * 8);
d285 1
a285 1
    return fuzzer_test_main ("affine", 8000000, 0x46EC3C6A,
@

