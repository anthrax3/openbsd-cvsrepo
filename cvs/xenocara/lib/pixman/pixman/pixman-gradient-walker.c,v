head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.14
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.12
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.2
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.10.01.10.17.44;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	FGr8CFhVerRlpSoE;

1.4
date	2013.06.07.17.18.01;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.02.28.20.36.12;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.03.25.21.58.52;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.05.20.14.28;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to pixman 0.34.0.
@
text
@/*
 *
 * Copyright Â© 2000 Keith Packard, member of The XFree86 Project, Inc.
 *             2005 Lars Knoll & Zack Rusin, Trolltech
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
 * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include "pixman-private.h"

void
_pixman_gradient_walker_init (pixman_gradient_walker_t *walker,
                              gradient_t *              gradient,
                              pixman_repeat_t		repeat)
{
    walker->num_stops = gradient->n_stops;
    walker->stops     = gradient->stops;
    walker->left_x    = 0;
    walker->right_x   = 0x10000;
    walker->a_s       = 0.0f;
    walker->a_b       = 0.0f;
    walker->r_s       = 0.0f;
    walker->r_b       = 0.0f;
    walker->g_s       = 0.0f;
    walker->g_b       = 0.0f;
    walker->b_s       = 0.0f;
    walker->b_b       = 0.0f;
    walker->repeat    = repeat;

    walker->need_reset = TRUE;
}

static void
gradient_walker_reset (pixman_gradient_walker_t *walker,
		       pixman_fixed_48_16_t      pos)
{
    int64_t x, left_x, right_x;
    pixman_color_t *left_c, *right_c;
    int n, count = walker->num_stops;
    pixman_gradient_stop_t *stops = walker->stops;
    float la, lr, lg, lb;
    float ra, rr, rg, rb;
    float lx, rx;

    if (walker->repeat == PIXMAN_REPEAT_NORMAL)
    {
	x = (int32_t)pos & 0xffff;
    }
    else if (walker->repeat == PIXMAN_REPEAT_REFLECT)
    {
	x = (int32_t)pos & 0xffff;
	if ((int32_t)pos & 0x10000)
	    x = 0x10000 - x;
    }
    else
    {
	x = pos;
    }
    
    for (n = 0; n < count; n++)
    {
	if (x < stops[n].x)
	    break;
    }
    
    left_x =  stops[n - 1].x;
    left_c = &stops[n - 1].color;
    
    right_x =  stops[n].x;
    right_c = &stops[n].color;

    if (walker->repeat == PIXMAN_REPEAT_NORMAL)
    {
	left_x  += (pos - x);
	right_x += (pos - x);
    }
    else if (walker->repeat == PIXMAN_REPEAT_REFLECT)
    {
	if ((int32_t)pos & 0x10000)
	{
	    pixman_color_t  *tmp_c;
	    int32_t tmp_x;

	    tmp_x   = 0x10000 - right_x;
	    right_x = 0x10000 - left_x;
	    left_x  = tmp_x;

	    tmp_c   = right_c;
	    right_c = left_c;
	    left_c  = tmp_c;

	    x = 0x10000 - x;
	}
	left_x  += (pos - x);
	right_x += (pos - x);
    }
    else if (walker->repeat == PIXMAN_REPEAT_NONE)
    {
	if (n == 0)
	    right_c = left_c;
	else if (n == count)
	    left_c = right_c;
    }

    /* The alpha channel is scaled to be in the [0, 255] interval,
     * and the red/green/blue channels are scaled to be in [0, 1].
     * This ensures that after premultiplication all channels will
     * be in the [0, 255] interval.
     */
    la = (left_c->alpha * (1.0f/257.0f));
    lr = (left_c->red * (1.0f/257.0f));
    lg = (left_c->green * (1.0f/257.0f));
    lb = (left_c->blue * (1.0f/257.0f));

    ra = (right_c->alpha * (1.0f/257.0f));
    rr = (right_c->red * (1.0f/257.0f));
    rg = (right_c->green * (1.0f/257.0f));
    rb = (right_c->blue * (1.0f/257.0f));
    
    lx = left_x * (1.0f/65536.0f);
    rx = right_x * (1.0f/65536.0f);
    
    if (FLOAT_IS_ZERO (rx - lx) || left_x == INT32_MIN || right_x == INT32_MAX)
    {
	walker->a_s = walker->r_s = walker->g_s = walker->b_s = 0.0f;
	walker->a_b = (la + ra) / 2.0f;
	walker->r_b = (lr + rr) / 510.0f;
	walker->g_b = (lg + rg) / 510.0f;
	walker->b_b = (lb + rb) / 510.0f;
    }
    else
    {
	float w_rec = 1.0f / (rx - lx);

	walker->a_b = (la * rx - ra * lx) * w_rec;
	walker->r_b = (lr * rx - rr * lx) * w_rec * (1.0f/255.0f);
	walker->g_b = (lg * rx - rg * lx) * w_rec * (1.0f/255.0f);
	walker->b_b = (lb * rx - rb * lx) * w_rec * (1.0f/255.0f);

	walker->a_s = (ra - la) * w_rec;
	walker->r_s = (rr - lr) * w_rec * (1.0f/255.0f);
	walker->g_s = (rg - lg) * w_rec * (1.0f/255.0f);
	walker->b_s = (rb - lb) * w_rec * (1.0f/255.0f);
    }
   
    walker->left_x = left_x;
    walker->right_x = right_x;

    walker->need_reset = FALSE;
}

uint32_t
_pixman_gradient_walker_pixel (pixman_gradient_walker_t *walker,
                               pixman_fixed_48_16_t      x)
{
    float a, r, g, b;
    uint8_t a8, r8, g8, b8;
    uint32_t v;
    float y;

    if (walker->need_reset || x < walker->left_x || x >= walker->right_x)
        gradient_walker_reset (walker, x);

    y = x * (1.0f / 65536.0f);

    a = walker->a_s * y + walker->a_b;
    r = a * (walker->r_s * y + walker->r_b);
    g = a * (walker->g_s * y + walker->g_b);
    b = a * (walker->b_s * y + walker->b_b);

    a8 = a + 0.5f;
    r8 = r + 0.5f;
    g8 = g + 0.5f;
    b8 = b + 0.5f;

    v = ((a8 << 24) & 0xff000000) |
        ((r8 << 16) & 0x00ff0000) |
        ((g8 <<  8) & 0x0000ff00) |
        ((b8 >>  0) & 0x000000ff);

    return v;
}
@


1.4
log
@Update to pixman 0.30.0. Tested by several people during t2k13. Thanks.
@
text
@d57 1
a57 1
    int32_t x, left_x, right_x;
@


1.3
log
@Update to pixman 0.22.4. Tested by shadchin@@, krw@@.
@
text
@d40 8
a47 5
    walker->stepper   = 0;
    walker->left_ag   = 0;
    walker->left_rb   = 0;
    walker->right_ag  = 0;
    walker->right_rb  = 0;
d61 3
d125 19
a143 10
    walker->left_x   = left_x;
    walker->right_x  = right_x;
    walker->left_ag  = ((left_c->alpha >> 8) << 16)   | (left_c->green >> 8);
    walker->left_rb  = ((left_c->red & 0xff00) << 8)  | (left_c->blue >> 8);
    walker->right_ag = ((right_c->alpha >> 8) << 16)  | (right_c->green >> 8);
    walker->right_rb = ((right_c->red & 0xff00) << 8) | (right_c->blue >> 8);

    if (walker->left_x == walker->right_x                ||
        (walker->left_ag == walker->right_ag &&
	 walker->left_rb == walker->right_rb))
d145 5
a149 1
	walker->stepper = 0;
d153 15
a167 3
	int32_t width = right_x - left_x;
	walker->stepper = ((1 << 24) + width / 2) / width;
    }
d176 4
a179 2
    int dist, idist;
    uint32_t t1, t2, a, color;
d182 1
a182 4
	gradient_walker_reset (walker, x);

    dist  = ((int)(x - walker->left_x) * walker->stepper) >> 16;
    idist = 256 - dist;
d184 1
a184 3
    /* combined INTERPOLATE and premultiply */
    t1 = walker->left_rb * idist + walker->right_rb * dist;
    t1 = (t1 >> 8) & 0xff00ff;
d186 14
a199 2
    t2  = walker->left_ag * idist + walker->right_ag * dist;
    t2 &= 0xff00ff00;
d201 1
a201 10
    color = t2 & 0xff000000;
    a     = t2 >> 24;

    t1  = t1 * a + 0x800080;
    t1  = (t1 + ((t1 >> 8) & 0xff00ff)) >> 8;

    t2  = (t2 >> 8) * a + 0x800080;
    t2  = (t2 + ((t2 >> 8) & 0xff00ff));

    return (color | (t1 & 0xff00ff) | (t2 & 0xff00));
a202 1

@


1.2
log
@Update to pixman 0.16.6. Tested on a full ports build by naddy@@.
@
text
@d34 1
a34 1
                              unsigned int              spread)
d45 1
a45 1
    walker->spread    = spread;
d50 3
a52 3
void
_pixman_gradient_walker_reset (pixman_gradient_walker_t *walker,
                               pixman_fixed_32_32_t      pos)
d55 1
a55 1
    pixman_color_t          *left_c, *right_c;
d57 1
a57 1
    pixman_gradient_stop_t *      stops = walker->stops;
d59 26
a84 1
    static const pixman_color_t transparent_black = { 0, 0, 0, 0 };
d86 1
a86 1
    switch (walker->spread)
a87 26
    case PIXMAN_REPEAT_NORMAL:
	x = (int32_t)pos & 0xFFFF;
	for (n = 0; n < count; n++)
	    if (x < stops[n].x)
		break;
	if (n == 0)
	{
	    left_x =  stops[count - 1].x - 0x10000;
	    left_c = &stops[count - 1].color;
	}
	else
	{
	    left_x =  stops[n - 1].x;
	    left_c = &stops[n - 1].color;
	}

	if (n == count)
	{
	    right_x =  stops[0].x + 0x10000;
	    right_c = &stops[0].color;
	}
	else
	{
	    right_x =  stops[n].x;
	    right_c = &stops[n].color;
	}
d90 3
a92 60
	break;

    case PIXMAN_REPEAT_PAD:
	for (n = 0; n < count; n++)
	    if (pos < stops[n].x)
		break;

	if (n == 0)
	{
	    left_x =  INT32_MIN;
	    left_c = &stops[0].color;
	}
	else
	{
	    left_x =  stops[n - 1].x;
	    left_c = &stops[n - 1].color;
	}

	if (n == count)
	{
	    right_x =  INT32_MAX;
	    right_c = &stops[n - 1].color;
	}
	else
	{
	    right_x =  stops[n].x;
	    right_c = &stops[n].color;
	}
	break;

    case PIXMAN_REPEAT_REFLECT:
	x = (int32_t)pos & 0xFFFF;
	if ((int32_t)pos & 0x10000)
	    x = 0x10000 - x;
	for (n = 0; n < count; n++)
	    if (x < stops[n].x)
		break;

	if (n == 0)
	{
	    left_x =  -stops[0].x;
	    left_c = &stops[0].color;
	}
	else
	{
	    left_x =  stops[n - 1].x;
	    left_c = &stops[n - 1].color;
	}

	if (n == count)
	{
	    right_x = 0x20000 - stops[n - 1].x;
	    right_c = &stops[n - 1].color;
	}
	else
	{
	    right_x =  stops[n].x;
	    right_c = &stops[n].color;
	}

d110 3
a112 7
	break;

    default:  /* REPEAT_NONE */
	for (n = 0; n < count; n++)
	    if (pos < stops[n].x)
		break;

d114 1
a114 5
	{
	    left_x  =  INT32_MIN;
	    right_x =  stops[0].x;
	    left_c  = right_c = (pixman_color_t*) &transparent_black;
	}
d116 1
a116 12
	{
	    left_x  = stops[n - 1].x;
	    right_x = INT32_MAX;
	    left_c  = right_c = (pixman_color_t*) &transparent_black;
	}
	else
	{
	    left_x  =  stops[n - 1].x;
	    right_x =  stops[n].x;
	    left_c  = &stops[n - 1].color;
	    right_c = &stops[n].color;
	}
d127 2
a128 2
        ( walker->left_ag == walker->right_ag &&
          walker->left_rb == walker->right_rb )   )
a140 5
#define  PIXMAN_GRADIENT_WALKER_NEED_RESET(w, x)                         \
    ( (w)->need_reset || (x) < (w)->left_x || (x) >= (w)->right_x)


/* the following assumes that PIXMAN_GRADIENT_WALKER_NEED_RESET(w,x) is FALSE */
d143 1
a143 1
                               pixman_fixed_32_32_t      x)
d148 2
a149 2
    if (PIXMAN_GRADIENT_WALKER_NEED_RESET (walker, x))
	_pixman_gradient_walker_reset (walker, x);
@


1.1
log
@Update to pixman 0.15.8.
@
text
@d26 1
d28 1
d32 3
a34 3
_pixman_gradient_walker_init (GradientWalker  *walker,
			      gradient_t      *gradient,
			      unsigned int     spread)
d46 1
a46 1
    
d51 2
a52 2
_pixman_gradient_walker_reset (GradientWalker       *walker,
			       pixman_fixed_32_32_t  pos)
d54 1
a54 1
    int32_t                  x, left_x, right_x;
d56 1
a56 1
    int                      n, count = walker->num_stops;
d58 3
a60 3
    
    static const pixman_color_t   transparent_black = { 0, 0, 0, 0 };
    
d68 9
a76 6
	if (n == 0) {
	    left_x =  stops[count-1].x - 0x10000;
	    left_c = &stops[count-1].color;
	} else {
	    left_x =  stops[n-1].x;
	    left_c = &stops[n-1].color;
d78 3
a80 2
	
	if (n == count) {
d83 3
a85 1
	} else {
d92 1
a92 1
	
d97 3
a99 2
	
	if (n == 0) {
a101 3
	} else {
	    left_x =  stops[n-1].x;
	    left_c = &stops[n-1].color;
d103 8
a110 2
	
	if (n == count) {
d112 4
a115 2
	    right_c = &stops[n-1].color;
	} else {
d120 1
a120 1
	
d128 3
a130 2
	
	if (n == 0) {
d133 14
a146 9
	} else {
	    left_x =  stops[n-1].x;
	    left_c = &stops[n-1].color;
	}
	
	if (n == count) {
	    right_x = 0x20000 - stops[n-1].x;
	    right_c = &stops[n-1].color;
	} else {
d150 3
a152 2
	
	if ((int32_t)pos & 0x10000) {
d154 2
a155 2
	    int32_t          tmp_x;
	    
d159 1
a159 1
	    
d163 1
a163 1
	    
d169 2
a170 2
	
    default:  /* RepeatNone */
d174 1
a174 1
	
d183 1
a183 1
	    left_x  = stops[n-1].x;
d189 1
a189 1
	    left_x  =  stops[n-1].x;
d191 1
a191 1
	    left_c  = &stops[n-1].color;
d195 1
a195 1
    
d202 4
a205 4
    
    if ( walker->left_x == walker->right_x                ||
	 ( walker->left_ag == walker->right_ag &&
	   walker->left_rb == walker->right_rb )   )
d212 1
a212 1
	walker->stepper = ((1 << 24) + width/2)/width;
d214 1
a214 1
    
d218 1
a218 1
#define  PIXMAN_GRADIENT_WALKER_NEED_RESET(w,x)				\
d224 2
a225 2
_pixman_gradient_walker_pixel (GradientWalker  *walker,
			       pixman_fixed_32_32_t     x)
d227 3
a229 3
    int  dist, idist;
    uint32_t  t1, t2, a, color;
    
d231 3
a233 3
        _pixman_gradient_walker_reset (walker, x);
    
    dist  = ((int)(x - walker->left_x)*walker->stepper) >> 16;
d235 1
a235 1
    
d237 1
a237 1
    t1 = walker->left_rb*idist + walker->right_rb*dist;
d239 2
a240 2
    
    t2  = walker->left_ag*idist + walker->right_ag*dist;
d242 1
a242 1
    
d245 2
a246 2
    
    t1  = t1*a + 0x800080;
d248 2
a249 2
    
    t2  = (t2 >> 8)*a + 0x800080;
d251 1
a251 1
    
d254 1
@

