head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.16
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.14
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.12
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.8
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.10
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.8
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v0_9_6:1.1.1.2
	xorg:1.1.1
	v0_9_5:1.1.1.1
	pixman:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.06.07.17.18.01;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.03.18.30.04;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.03.25.21.58.52;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.23.19.11.40;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.08.19.00.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.03.20.48.55;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.10.03.20.48.55;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.12.10.21.10.23;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to pixman 0.30.0. Tested by several people during t2k13. Thanks.
@
text
@/*
 * Copyright Â© 2004 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <string.h>

#include "pixman-private.h"
#include "pixman-accessor.h"

/*
 * Step across a small sample grid gap
 */
#define RENDER_EDGE_STEP_SMALL(edge)					\
    {									\
	edge->x += edge->stepx_small;					\
	edge->e += edge->dx_small;					\
	if (edge->e > 0)						\
	{								\
	    edge->e -= edge->dy;					\
	    edge->x += edge->signdx;					\
	}								\
    }

/*
 * Step across a large sample grid gap
 */
#define RENDER_EDGE_STEP_BIG(edge)					\
    {									\
	edge->x += edge->stepx_big;					\
	edge->e += edge->dx_big;					\
	if (edge->e > 0)						\
	{								\
	    edge->e -= edge->dy;					\
	    edge->x += edge->signdx;					\
	}								\
    }

#ifdef PIXMAN_FB_ACCESSORS
#define PIXMAN_RASTERIZE_EDGES pixman_rasterize_edges_accessors
#else
#define PIXMAN_RASTERIZE_EDGES pixman_rasterize_edges_no_accessors
#endif

/*
 * 4 bit alpha
 */

#define N_BITS  4
#define RASTERIZE_EDGES rasterize_edges_4

#ifndef WORDS_BIGENDIAN
#define SHIFT_4(o)      ((o) << 2)
#else
#define SHIFT_4(o)      ((1 - (o)) << 2)
#endif

#define GET_4(x, o)      (((x) >> SHIFT_4 (o)) & 0xf)
#define PUT_4(x, o, v)							\
    (((x) & ~(0xf << SHIFT_4 (o))) | (((v) & 0xf) << SHIFT_4 (o)))

#define DEFINE_ALPHA(line, x)						\
    uint8_t   *__ap = (uint8_t *) line + ((x) >> 1);			\
    int __ao = (x) & 1

#define STEP_ALPHA      ((__ap += __ao), (__ao ^= 1))

#define ADD_ALPHA(a)							\
    {									\
        uint8_t __o = READ (image, __ap);				\
        uint8_t __a = (a) + GET_4 (__o, __ao);				\
        WRITE (image, __ap, PUT_4 (__o, __ao, __a | (0 - ((__a) >> 4)))); \
    }

#include "pixman-edge-imp.h"

#undef ADD_ALPHA
#undef STEP_ALPHA
#undef DEFINE_ALPHA
#undef RASTERIZE_EDGES
#undef N_BITS


/*
 * 1 bit alpha
 */

#define N_BITS 1
#define RASTERIZE_EDGES rasterize_edges_1

#include "pixman-edge-imp.h"

#undef RASTERIZE_EDGES
#undef N_BITS

/*
 * 8 bit alpha
 */

static force_inline uint8_t
clip255 (int x)
{
    if (x > 255)
	return 255;

    return x;
}

#define ADD_SATURATE_8(buf, val, length)				\
    do									\
    {									\
        int i__ = (length);						\
        uint8_t *buf__ = (buf);						\
        int val__ = (val);						\
									\
        while (i__--)							\
        {								\
            WRITE (image, (buf__), clip255 (READ (image, (buf__)) + (val__))); \
            (buf__)++;							\
	}								\
    } while (0)

/*
 * We want to detect the case where we add the same value to a long
 * span of pixels.  The triangles on the end are filled in while we
 * count how many sub-pixel scanlines contribute to the middle section.
 *
 *                 +--------------------------+
 *  fill_height =|   \                      /
 *                     +------------------+
 *                      |================|
 *                   fill_start       fill_end
 */
static void
rasterize_edges_8 (pixman_image_t *image,
                   pixman_edge_t * l,
                   pixman_edge_t * r,
                   pixman_fixed_t  t,
                   pixman_fixed_t  b)
{
    pixman_fixed_t y = t;
    uint32_t  *line;
    int fill_start = -1, fill_end = -1;
    int fill_size = 0;
    uint32_t *buf = (image)->bits.bits;
    int stride = (image)->bits.rowstride;
    int width = (image)->bits.width;

    line = buf + pixman_fixed_to_int (y) * stride;

    for (;;)
    {
        uint8_t *ap = (uint8_t *) line;
        pixman_fixed_t lx, rx;
        int lxi, rxi;

        /* clip X */
        lx = l->x;
        if (lx < 0)
	    lx = 0;

        rx = r->x;

        if (pixman_fixed_to_int (rx) >= width)
	{
	    /* Use the last pixel of the scanline, covered 100%.
	     * We can't use the first pixel following the scanline,
	     * because accessing it could result in a buffer overrun.
	     */
	    rx = pixman_int_to_fixed (width) - 1;
	}

        /* Skip empty (or backwards) sections */
        if (rx > lx)
        {
            int lxs, rxs;

            /* Find pixel bounds for span. */
            lxi = pixman_fixed_to_int (lx);
            rxi = pixman_fixed_to_int (rx);

            /* Sample coverage for edge pixels */
            lxs = RENDER_SAMPLES_X (lx, 8);
            rxs = RENDER_SAMPLES_X (rx, 8);

            /* Add coverage across row */
            if (lxi == rxi)
            {
                WRITE (image, ap + lxi,
		       clip255 (READ (image, ap + lxi) + rxs - lxs));
	    }
            else
            {
                WRITE (image, ap + lxi,
		       clip255 (READ (image, ap + lxi) + N_X_FRAC (8) - lxs));

                /* Move forward so that lxi/rxi is the pixel span */
                lxi++;

                /* Don't bother trying to optimize the fill unless
		 * the span is longer than 4 pixels. */
                if (rxi - lxi > 4)
                {
                    if (fill_start < 0)
                    {
                        fill_start = lxi;
                        fill_end = rxi;
                        fill_size++;
		    }
                    else
                    {
                        if (lxi >= fill_end || rxi < fill_start)
                        {
                            /* We're beyond what we saved, just fill it */
                            ADD_SATURATE_8 (ap + fill_start,
                                            fill_size * N_X_FRAC (8),
                                            fill_end - fill_start);
                            fill_start = lxi;
                            fill_end = rxi;
                            fill_size = 1;
			}
                        else
                        {
                            /* Update fill_start */
                            if (lxi > fill_start)
                            {
                                ADD_SATURATE_8 (ap + fill_start,
                                                fill_size * N_X_FRAC (8),
                                                lxi - fill_start);
                                fill_start = lxi;
			    }
                            else if (lxi < fill_start)
                            {
                                ADD_SATURATE_8 (ap + lxi, N_X_FRAC (8),
                                                fill_start - lxi);
			    }

                            /* Update fill_end */
                            if (rxi < fill_end)
                            {
                                ADD_SATURATE_8 (ap + rxi,
                                                fill_size * N_X_FRAC (8),
                                                fill_end - rxi);
                                fill_end = rxi;
			    }
                            else if (fill_end < rxi)
                            {
                                ADD_SATURATE_8 (ap + fill_end,
                                                N_X_FRAC (8),
                                                rxi - fill_end);
			    }
                            fill_size++;
			}
		    }
		}
                else
                {
                    ADD_SATURATE_8 (ap + lxi, N_X_FRAC (8), rxi - lxi);
		}

                WRITE (image, ap + rxi, clip255 (READ (image, ap + rxi) + rxs));
	    }
	}

        if (y == b)
        {
            /* We're done, make sure we clean up any remaining fill. */
            if (fill_start != fill_end)
            {
                if (fill_size == N_Y_FRAC (8))
                {
                    MEMSET_WRAPPED (image, ap + fill_start,
				    0xff, fill_end - fill_start);
		}
                else
                {
                    ADD_SATURATE_8 (ap + fill_start, fill_size * N_X_FRAC (8),
                                    fill_end - fill_start);
		}
	    }
            break;
	}

        if (pixman_fixed_frac (y) != Y_FRAC_LAST (8))
        {
            RENDER_EDGE_STEP_SMALL (l);
            RENDER_EDGE_STEP_SMALL (r);
            y += STEP_Y_SMALL (8);
	}
        else
        {
            RENDER_EDGE_STEP_BIG (l);
            RENDER_EDGE_STEP_BIG (r);
            y += STEP_Y_BIG (8);
            if (fill_start != fill_end)
            {
                if (fill_size == N_Y_FRAC (8))
                {
                    MEMSET_WRAPPED (image, ap + fill_start,
				    0xff, fill_end - fill_start);
		}
                else
                {
                    ADD_SATURATE_8 (ap + fill_start, fill_size * N_X_FRAC (8),
                                    fill_end - fill_start);
		}
		
                fill_start = fill_end = -1;
                fill_size = 0;
	    }
	    
            line += stride;
	}
    }
}

#ifndef PIXMAN_FB_ACCESSORS
static
#endif
void
PIXMAN_RASTERIZE_EDGES (pixman_image_t *image,
                        pixman_edge_t * l,
                        pixman_edge_t * r,
                        pixman_fixed_t  t,
                        pixman_fixed_t  b)
{
    switch (PIXMAN_FORMAT_BPP (image->bits.format))
    {
    case 1:
	rasterize_edges_1 (image, l, r, t, b);
	break;

    case 4:
	rasterize_edges_4 (image, l, r, t, b);
	break;

    case 8:
	rasterize_edges_8 (image, l, r, t, b);
	break;

    default:
        break;
    }
}

#ifndef PIXMAN_FB_ACCESSORS

PIXMAN_EXPORT void
pixman_rasterize_edges (pixman_image_t *image,
                        pixman_edge_t * l,
                        pixman_edge_t * r,
                        pixman_fixed_t  t,
                        pixman_fixed_t  b)
{
    return_if_fail (image->type == BITS);
    return_if_fail (PIXMAN_FORMAT_TYPE (image->bits.format) == PIXMAN_TYPE_A);
    
    if (image->bits.read_func || image->bits.write_func)
	pixman_rasterize_edges_accessors (image, l, r, t, b);
    else
	pixman_rasterize_edges_no_accessors (image, l, r, t, b);
}

#endif
@


1.5
log
@Update to pixman 0.18.4.

Tweak build to use libpthread-stubs for TLS emulation instead of forcing
every application using pixman to use -pthread.

Tested by jasper@@ and landry@@ on a bulk ports build.
@
text
@d377 1
@


1.4
log
@Update to pixman 0.16.6. Tested on a full ports build by naddy@@.
@
text
@d73 1
a73 1
#ifndef WORDS_BIG_ENDIAN
d361 3
@


1.3
log
@pixman 0.12.0. Tested on a full ports build by naddy@@.
@
text
@d30 29
d70 2
a71 2
#define N_BITS	4
#define rasterizeEdges	fbRasterizeEdges4
d73 2
a74 2
#if BITMAP_BIT_ORDER == LSBFirst
#define Shift4(o)	((o) << 2)
d76 1
a76 1
#define Shift4(o)	((1-(o)) << 2)
d79 15
a93 13
#define Get4(x,o)	(((x) >> Shift4(o)) & 0xf)
#define Put4(x,o,v)	(((x) & ~(0xf << Shift4(o))) | (((v) & 0xf) << Shift4(o)))

#define DefineAlpha(line,x)			     \
    uint8_t   *__ap = (uint8_t *) line + ((x) >> 1); \
    int	    __ao = (x) & 1

#define StepAlpha	((__ap += __ao), (__ao ^= 1))

#define AddAlpha(a) {							\
	uint8_t   __o = READ(image, __ap);				\
	uint8_t   __a = (a) + Get4(__o, __ao);				\
	WRITE(image, __ap, Put4 (__o, __ao, __a | (0 - ((__a) >> 4))));	\
d98 4
a101 4
#undef AddAlpha
#undef StepAlpha
#undef DefineAlpha
#undef rasterizeEdges
d110 1
a110 1
#define rasterizeEdges	fbRasterizeEdges1
d114 1
a114 1
#undef rasterizeEdges
d121 1
a121 1
static inline uint8_t
d124 3
a126 1
    if (x > 255) return 255;
d130 12
a141 11
#define add_saturate_8(buf,val,length)				\
    do {							\
	int i__ = (length);					\
	uint8_t *buf__ = (buf);					\
	int val__ = (val);					\
								\
	while (i__--)						\
	{							\
	    WRITE(image, (buf__), clip255 (READ(image, (buf__)) + (val__)));	\
	    (buf__)++;						\
	}							\
d156 5
a160 5
fbRasterizeEdges8 (pixman_image_t       *image,
		   pixman_edge_t	*l,
		   pixman_edge_t	*r,
		   pixman_fixed_t	t,
		   pixman_fixed_t	b)
d162 1
a162 1
    pixman_fixed_t  y = t;
d175 2
a176 2
	pixman_fixed_t	lx, rx;
	int	lxi, rxi;
d178 3
a180 3
	/* clip X */
	lx = l->x;
	if (lx < 0)
d182 5
a186 2
	rx = r->x;
	if (pixman_fixed_to_int (rx) >= width)
d192 1
d194 3
a196 3
	/* Skip empty (or backwards) sections */
	if (rx > lx)
	{
d199 3
a201 3
	    /* Find pixel bounds for span. */
	    lxi = pixman_fixed_to_int (lx);
	    rxi = pixman_fixed_to_int (rx);
d204 2
a205 2
            lxs = RenderSamplesX (lx, 8);
            rxs = RenderSamplesX (rx, 8);
d208 4
a211 3
	    if (lxi == rxi)
	    {
		WRITE(image, ap +lxi, clip255 (READ(image, ap + lxi) + rxs - lxs));
d213 4
a216 3
	    else
	    {
		WRITE(image, ap + lxi, clip255 (READ(image, ap + lxi) + N_X_FRAC(8) - lxs));
d218 2
a219 2
		/* Move forward so that lxi/rxi is the pixel span */
		lxi++;
d221 1
a221 1
		/* Don't bother trying to optimize the fill unless
d223 7
a229 7
		if (rxi - lxi > 4)
		{
		    if (fill_start < 0)
		    {
			fill_start = lxi;
			fill_end = rxi;
			fill_size++;
d231 11
a241 11
		    else
		    {
			if (lxi >= fill_end || rxi < fill_start)
			{
			    /* We're beyond what we saved, just fill it */
			    add_saturate_8 (ap + fill_start,
					    fill_size * N_X_FRAC(8),
					    fill_end - fill_start);
			    fill_start = lxi;
			    fill_end = rxi;
			    fill_size = 1;
d243 9
a251 9
			else
			{
			    /* Update fill_start */
			    if (lxi > fill_start)
			    {
				add_saturate_8 (ap + fill_start,
						fill_size * N_X_FRAC(8),
						lxi - fill_start);
				fill_start = lxi;
d253 4
a256 4
			    else if (lxi < fill_start)
			    {
				add_saturate_8 (ap + lxi, N_X_FRAC(8),
						fill_start - lxi);
d259 7
a265 7
			    /* Update fill_end */
			    if (rxi < fill_end)
			    {
				add_saturate_8 (ap + rxi,
						fill_size * N_X_FRAC(8),
						fill_end - rxi);
				fill_end = rxi;
d267 5
a271 5
			    else if (fill_end < rxi)
			    {
				add_saturate_8 (ap + fill_end,
						N_X_FRAC(8),
						rxi - fill_end);
d273 1
a273 1
			    fill_size++;
d277 3
a279 3
		else
		{
		    add_saturate_8 (ap + lxi, N_X_FRAC(8), rxi - lxi);
d282 1
a282 1
		WRITE(image, ap + rxi, clip255 (READ(image, ap + rxi) + rxs));
d286 2
a287 1
	if (y == b) {
d289 6
a294 4
            if (fill_start != fill_end) {
		if (fill_size == N_Y_FRAC(8))
		{
		    MEMSET_WRAPPED (image, ap + fill_start, 0xff, fill_end - fill_start);
d296 4
a299 4
		else
		{
		    add_saturate_8 (ap + fill_start, fill_size * N_X_FRAC(8),
				    fill_end - fill_start);
d301 3
a303 3
            }
	    break;
        }
d305 5
a309 5
	if (pixman_fixed_frac (y) != Y_FRAC_LAST(8))
	{
	    RenderEdgeStepSmall (l);
	    RenderEdgeStepSmall (r);
	    y += STEP_Y_SMALL(8);
d311 5
a315 5
	else
	{
	    RenderEdgeStepBig (l);
	    RenderEdgeStepBig (r);
	    y += STEP_Y_BIG(8);
d318 4
a321 3
		if (fill_size == N_Y_FRAC(8))
		{
		    MEMSET_WRAPPED (image, ap + fill_start, 0xff, fill_end - fill_start);
d323 4
a326 4
		else
		{
		    add_saturate_8 (ap + fill_start, fill_size * N_X_FRAC(8),
				    fill_end - fill_start);
d328 1
d331 3
a333 2
            }
	    line += stride;
d343 4
a346 4
			pixman_edge_t	*l,
			pixman_edge_t	*r,
			pixman_fixed_t	t,
			pixman_fixed_t	b)
d351 1
a351 1
	fbRasterizeEdges1 (image, l, r, t, b);
d353 1
d355 1
a355 1
	fbRasterizeEdges4 (image, l, r, t, b);
d357 1
d359 1
a359 1
	fbRasterizeEdges8 (image, l, r, t, b);
d368 4
a371 4
			pixman_edge_t	*l,
			pixman_edge_t	*r,
			pixman_fixed_t	t,
			pixman_fixed_t	b)
d373 3
a375 1
    if (image->common.read_func	|| image->common.write_func)
@


1.2
log
@Update to pixman 0.10, with one small fix to the sse2 test in configure.ac.
@
text
@d318 1
a318 1
void
@


1.1
log
@Initial revision
@
text
@a1 2
 * $Id$
 *
d22 2
d25 2
d28 1
a28 1
#include "pixman.h"
d59 4
a62 4
#define AddAlpha(a) {						\
	uint8_t   __o = READ(__ap);				\
	uint8_t   __a = (a) + Get4(__o, __ao);			\
	WRITE(__ap, Put4 (__o, __ao, __a | (0 - ((__a) >> 4))));	\
d105 1
a105 1
	    WRITE((buf__), clip255 (READ((buf__)) + (val__)));	\
d132 4
a135 4
    uint32_t *buf = (image)->bits.bits;		
    int32_t stride = (image)->bits.rowstride;	
    int32_t width = (image)->bits.width;
    
d137 1
a137 1
    
d143 1
a143 1
	
d150 6
a155 2
	    rx = pixman_int_to_fixed (width);
	
d160 1
a160 1
	    
d164 1
a164 1
	    
d168 1
a168 1
	    
d172 1
a172 1
		WRITE(ap +lxi, clip255 (READ(ap + lxi) + rxs - lxs));
d176 2
a177 2
		WRITE(ap + lxi, clip255 (READ(ap + lxi) + N_X_FRAC(8) - lxs));
		
d180 1
a180 1
		
d218 1
a218 1
			    
d241 2
a242 6
		
		/* Do not add in a 0 alpha here. This check is
		 * necessary to avoid a buffer overrun, (when rx
		 * is exactly on a pixel boundary). */
		if (rxs)
		    WRITE(ap + rxi, clip255 (READ(ap + rxi) + rxs));
d245 1
a245 1
	
d251 1
a251 1
		    MEMSET_WRAPPED (ap + fill_start, 0xff, fill_end - fill_start);
d261 1
a261 1
	
d277 1
a277 1
		    MEMSET_WRAPPED (ap + fill_start, 0xff, fill_end - fill_start);
@


1.1.1.1
log
@import pixman 0.9.5
@
text
@@


1.1.1.2
log
@pixman 0.9.6
@
text
@a23 2

#ifdef HAVE_CONFIG_H
a24 2
#endif

@

