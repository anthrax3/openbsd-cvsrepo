head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.12
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.12.01.20.34.20;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.07.17.18.01;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.23.20.44.09;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.17.16.15.20;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2012.02.28.20.36.12;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to pixman 0.32.4. Tested by naddy@@ and ajacoutot@@
@
text
@/* -*- Mode: c; c-basic-offset: 4; tab-width: 8; indent-tabs-mode: t; -*- */
/*
 * Copyright Â© 2011 Red Hat, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <string.h>
#include <stdlib.h>
#include "pixman-private.h"
#include "pixman-combine32.h"
#include "pixman-inlines.h"

static void
noop_composite (pixman_implementation_t *imp,
		pixman_composite_info_t *info)
{
    return;
}

static uint32_t *
noop_get_scanline (pixman_iter_t *iter, const uint32_t *mask)
{
    uint32_t *result = iter->buffer;

    iter->buffer += iter->image->bits.rowstride;

    return result;
}

static void
noop_init_solid_narrow (pixman_iter_t *iter,
			const pixman_iter_info_t *info)
{ 
    pixman_image_t *image = iter->image;
    uint32_t *buffer = iter->buffer;
    uint32_t *end = buffer + iter->width;
    uint32_t color;

    if (iter->image->type == SOLID)
	color = image->solid.color_32;
    else
	color = image->bits.fetch_pixel_32 (&image->bits, 0, 0);

    while (buffer < end)
	*(buffer++) = color;
}

static void
noop_init_solid_wide (pixman_iter_t *iter,
		      const pixman_iter_info_t *info)
{
    pixman_image_t *image = iter->image;
    argb_t *buffer = (argb_t *)iter->buffer;
    argb_t *end = buffer + iter->width;
    argb_t color;

    if (iter->image->type == SOLID)
	color = image->solid.color_float;
    else
	color = image->bits.fetch_pixel_float (&image->bits, 0, 0);

    while (buffer < end)
	*(buffer++) = color;
}

static void
noop_init_direct_buffer (pixman_iter_t *iter, const pixman_iter_info_t *info)
{
    pixman_image_t *image = iter->image;

    iter->buffer =
	image->bits.bits + iter->y * image->bits.rowstride + iter->x;
}

static void
dest_write_back_direct (pixman_iter_t *iter)
{
    iter->buffer += iter->image->bits.rowstride;
}

static const pixman_iter_info_t noop_iters[] =
{
    /* Source iters */
    { PIXMAN_any,
      0, ITER_IGNORE_ALPHA | ITER_IGNORE_RGB | ITER_SRC,
      NULL,
      _pixman_iter_get_scanline_noop,
      NULL
    },
    { PIXMAN_solid,
      FAST_PATH_NO_ALPHA_MAP, ITER_NARROW | ITER_SRC,
      noop_init_solid_narrow,
      _pixman_iter_get_scanline_noop,
      NULL,
    },
    { PIXMAN_solid,
      FAST_PATH_NO_ALPHA_MAP, ITER_WIDE | ITER_SRC,
      noop_init_solid_wide,
      _pixman_iter_get_scanline_noop,
      NULL
    },
    { PIXMAN_a8r8g8b8,
      FAST_PATH_STANDARD_FLAGS | FAST_PATH_ID_TRANSFORM |
          FAST_PATH_BITS_IMAGE | FAST_PATH_SAMPLES_COVER_CLIP_NEAREST,
      ITER_NARROW | ITER_SRC,
      noop_init_direct_buffer,
      noop_get_scanline,
      NULL
    },
    /* Dest iters */
    { PIXMAN_a8r8g8b8,
      FAST_PATH_STD_DEST_FLAGS, ITER_NARROW | ITER_DEST,
      noop_init_direct_buffer,
      _pixman_iter_get_scanline_noop,
      dest_write_back_direct
    },
    { PIXMAN_x8r8g8b8,
      FAST_PATH_STD_DEST_FLAGS, ITER_NARROW | ITER_DEST | ITER_LOCALIZED_ALPHA,
      noop_init_direct_buffer,
      _pixman_iter_get_scanline_noop,
      dest_write_back_direct
    },
    { PIXMAN_null },
};

static const pixman_fast_path_t noop_fast_paths[] =
{
    { PIXMAN_OP_DST, PIXMAN_any, 0, PIXMAN_any, 0, PIXMAN_any, 0, noop_composite },
    { PIXMAN_OP_NONE },
};

pixman_implementation_t *
_pixman_implementation_create_noop (pixman_implementation_t *fallback)
{
    pixman_implementation_t *imp =
	_pixman_implementation_create (fallback, noop_fast_paths);
 
    imp->iter_info = noop_iters;

    return imp;
}
@


1.4
log
@Update to pixman 0.30.0. Tested by several people during t2k13. Thanks.
@
text
@a39 6
static void
dest_write_back_direct (pixman_iter_t *iter)
{
    iter->buffer += iter->image->bits.rowstride;
}

d50 16
a65 4
static uint32_t *
get_scanline_null (pixman_iter_t *iter, const uint32_t *mask)
{
    return NULL;
d68 3
a70 2
static pixman_bool_t
noop_src_iter_init (pixman_implementation_t *imp, pixman_iter_t *iter)
d73 3
d77 2
a78 59
#define FLAGS						\
    (FAST_PATH_STANDARD_FLAGS | FAST_PATH_ID_TRANSFORM)

    if (!image)
    {
	iter->get_scanline = get_scanline_null;
    }
    else if ((iter->iter_flags & (ITER_IGNORE_ALPHA | ITER_IGNORE_RGB)) ==
	     (ITER_IGNORE_ALPHA | ITER_IGNORE_RGB))
    {
	iter->get_scanline = _pixman_iter_get_scanline_noop;
    }
    else if (image->common.extended_format_code == PIXMAN_solid		&&
	     (iter->image->type == SOLID ||
	      (iter->image_flags & FAST_PATH_NO_ALPHA_MAP)))
    {
	if (iter->iter_flags & ITER_NARROW)
	{
	    uint32_t *buffer = iter->buffer;
	    uint32_t *end = buffer + iter->width;
	    uint32_t color;

	    if (image->type == SOLID)
		color = image->solid.color_32;
	    else
		color = image->bits.fetch_pixel_32 (&image->bits, 0, 0);

	    while (buffer < end)
		*(buffer++) = color;
	}
	else
	{
	    argb_t *buffer = (argb_t *)iter->buffer;
	    argb_t *end = buffer + iter->width;
	    argb_t color;

	    if (image->type == SOLID)
		color = image->solid.color_float;
	    else
		color = image->bits.fetch_pixel_float (&image->bits, 0, 0);

	    while (buffer < end)
		*(buffer++) = color;
	}

	iter->get_scanline = _pixman_iter_get_scanline_noop;
    }
    else if (image->common.extended_format_code == PIXMAN_a8r8g8b8	&&
	     (iter->iter_flags & ITER_NARROW)				&&
	     (iter->image_flags & FLAGS) == FLAGS			&&
	     iter->x >= 0 && iter->y >= 0				&&
	     iter->x + iter->width <= image->bits.width			&&
	     iter->y + iter->height <= image->bits.height)
    {
	iter->buffer =
	    image->bits.bits + iter->y * image->bits.rowstride + iter->x;

	iter->get_scanline = noop_get_scanline;
    }
d80 1
a80 3
    {
	return FALSE;
    }
d82 2
a83 1
    return TRUE;
d86 2
a87 2
static pixman_bool_t
noop_dest_iter_init (pixman_implementation_t *imp, pixman_iter_t *iter)
a89 10
    uint32_t image_flags = iter->image_flags;
    uint32_t iter_flags = iter->iter_flags;
    
    if ((image_flags & FAST_PATH_STD_DEST_FLAGS) == FAST_PATH_STD_DEST_FLAGS	&&
	(iter_flags & ITER_NARROW) == ITER_NARROW				&&
	((image->common.extended_format_code == PIXMAN_a8r8g8b8)	||
	 (image->common.extended_format_code == PIXMAN_x8r8g8b8 &&
	  (iter_flags & (ITER_LOCALIZED_ALPHA)))))
    {
	iter->buffer = image->bits.bits + iter->y * image->bits.rowstride + iter->x;
d91 3
a93 2
	iter->get_scanline = _pixman_iter_get_scanline_noop;
	iter->write_back = dest_write_back_direct;
d95 4
a98 6
	return TRUE;
    }
    else
    {
	return FALSE;
    }
d101 45
d158 1
a158 2
    imp->src_iter_init = noop_src_iter_init;
    imp->dest_iter_init = noop_dest_iter_init;
@


1.3
log
@Update to pixman 0.28.0. Tested by ajacoutot@@, mpi@@ and naddy@@ in a full
ports build. Tweaks from mpi@@ for macppc.
@
text
@d80 2
a81 2
	     ((iter->image_flags & (FAST_PATH_BITS_IMAGE | FAST_PATH_NO_ALPHA_MAP)) ==
	      (FAST_PATH_BITS_IMAGE | FAST_PATH_NO_ALPHA_MAP)))
a82 2
	bits_image_t *bits = &image->bits;

a84 1
	    uint32_t color = bits->fetch_pixel_32 (bits, 0, 0);
d87 6
a98 1
	    argb_t color = bits->fetch_pixel_float (bits, 0, 0);
d101 6
@


1.2
log
@Update to pixman 0.26.2. tested at least by ajacoutot@@, mpi@@, shadchin@@.
@
text
@d62 1
a62 1
static void
d74 1
a74 1
    else if ((iter->flags & (ITER_IGNORE_ALPHA | ITER_IGNORE_RGB)) ==
d80 1
a80 1
	     ((image->common.flags & (FAST_PATH_BITS_IMAGE | FAST_PATH_NO_ALPHA_MAP)) ==
d85 1
a85 1
	if (iter->flags & ITER_NARROW)
d96 3
a98 3
	    uint64_t color = bits->fetch_pixel_64 (bits, 0, 0);
	    uint64_t *buffer = (uint64_t *)iter->buffer;
	    uint64_t *end = buffer + iter->width;
d107 2
a108 2
	     (iter->flags & ITER_NARROW)				&&
	     (image->common.flags & FLAGS) == FLAGS			&&
d120 1
a120 1
	(* imp->delegate->src_iter_init) (imp->delegate, iter);
d122 2
d126 1
a126 1
static void
d130 2
a131 2
    uint32_t image_flags = image->common.flags;
    uint32_t iter_flags = iter->flags;
d143 2
d148 1
a148 1
	(* imp->delegate->dest_iter_init) (imp->delegate, iter);
d163 1
a163 1

@


1.1
log
@Update to pixman 0.22.4. Tested by shadchin@@, krw@@.
@
text
@d79 27
@

