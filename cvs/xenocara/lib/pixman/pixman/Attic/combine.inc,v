head	1.3;
access;
symbols
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2010.03.25.21.58.52;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2009.06.05.20.14.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.23.19.11.40;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to pixman 0.16.6. Tested on a full ports build by naddy@@.
@
text
@#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <string.h>

#include "pixman-private.h"

#include "pixman-combine.h"

/*
 * There are two ways of handling alpha -- either as a single unified value or
 * a separate value for each component, hence each macro must have two
 * versions.  The unified alpha version has a 'U' at the end of the name,
 * the component version has a 'C'.  Similarly, functions which deal with
 * this difference will have two versions using the same convention.
 */


/*
 * All of the composing functions
 */

static force_inline comp4_t
combineMask (const comp4_t *src, const comp4_t *mask, int i)
{
    comp4_t s, m;

    if (mask)
    {
	m = *(mask + i) >> A_SHIFT;

	if (!m)
	    return 0;
    }

    s = *(src + i);

    if (mask)
	FbByteMul (s, m);

    return s;
}

FASTCALL static void
fbCombineClear (pixman_implementation_t *imp, pixman_op_t op,
		comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    memset(dest, 0, width*sizeof(comp4_t));
}

FASTCALL static void
fbCombineSrcU (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    if (!mask)
	memcpy (dest, src, width * sizeof (comp4_t));
    else
    {
	for (i = 0; i < width; ++i)
	{
	    comp4_t s = combineMask (src, mask, i);
	    
	    *(dest + i) = s;
	}
    }
}

/* if the Src is opaque, call fbCombineSrcU */
FASTCALL static void
fbCombineOverU (pixman_implementation_t *imp, pixman_op_t op,
		comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t ia = Alpha(~s);

        FbByteMulAdd(d, ia, s);
	*(dest + i) = d;
    }
}

/* if the Dst is opaque, this is a noop */
FASTCALL static void
fbCombineOverReverseU (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t ia = Alpha(~*(dest + i));
        FbByteMulAdd(s, ia, d);
	*(dest + i) = s;
    }
}

/* if the Dst is opaque, call fbCombineSrcU */
FASTCALL static void
fbCombineInU (pixman_implementation_t *imp, pixman_op_t op,
	      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t a = Alpha(*(dest + i));
        FbByteMul(s, a);
	*(dest + i) = s;
    }
}

/* if the Src is opaque, this is a noop */
FASTCALL static void
fbCombineInReverseU (pixman_implementation_t *imp, pixman_op_t op,
		     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
	comp4_t s = combineMask (src, mask, i);
	comp4_t d = *(dest + i);
        comp4_t a = Alpha(s);
        FbByteMul(d, a);
	*(dest + i) = d;
    }
}

/* if the Dst is opaque, call fbCombineClear */
FASTCALL static void
fbCombineOutU (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t a = Alpha(~*(dest + i));
        FbByteMul(s, a);
	*(dest + i) = s;
    }
}

/* if the Src is opaque, call fbCombineClear */
FASTCALL static void
fbCombineOutReverseU (pixman_implementation_t *imp, pixman_op_t op,
		      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
	comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t a = Alpha(~s);
        FbByteMul(d, a);
	*(dest + i) = d;
    }
}

/* if the Src is opaque, call fbCombineInU */
/* if the Dst is opaque, call fbCombineOverU */
/* if both the Src and Dst are opaque, call fbCombineSrcU */
FASTCALL static void
fbCombineAtopU (pixman_implementation_t *imp, pixman_op_t op,
		comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t dest_a = Alpha(d);
        comp4_t src_ia = Alpha(~s);

        FbByteAddMul(s, dest_a, d, src_ia);
	*(dest + i) = s;
    }
}

/* if the Src is opaque, call fbCombineOverReverseU */
/* if the Dst is opaque, call fbCombineInReverseU */
/* if both the Src and Dst are opaque, call fbCombineDstU */
FASTCALL static void
fbCombineAtopReverseU (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t src_a = Alpha(s);
        comp4_t dest_ia = Alpha(~d);

        FbByteAddMul(s, dest_ia, d, src_a);
	*(dest + i) = s;
    }
}

/* if the Src is opaque, call fbCombineOverU */
/* if the Dst is opaque, call fbCombineOverReverseU */
/* if both the Src and Dst are opaque, call fbCombineClear */
FASTCALL static void
fbCombineXorU (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t src_ia = Alpha(~s);
        comp4_t dest_ia = Alpha(~d);

        FbByteAddMul(s, dest_ia, d, src_ia);
	*(dest + i) = s;
    }
}

FASTCALL static void
fbCombineAddU (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        FbByteAdd(d, s);
	*(dest + i) = d;
    }
}

/* if the Src is opaque, call fbCombineAddU */
/* if the Dst is opaque, call fbCombineAddU */
/* if both the Src and Dst are opaque, call fbCombineAddU */
FASTCALL static void
fbCombineSaturateU (pixman_implementation_t *imp, pixman_op_t op,
		    comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp2_t sa, da;

        sa = s >> A_SHIFT;
        da = ~d >> A_SHIFT;
        if (sa > da)
        {
            sa = IntDiv(da, sa);
            FbByteMul(s, sa);
        };
        FbByteAdd(d, s);
	*(dest + i) = d;
    }
}


/*
 * All of the disjoint composing functions

 The four entries in the first column indicate what source contributions
 come from each of the four areas of the picture -- areas covered by neither
 A nor B, areas covered only by A, areas covered only by B and finally
 areas covered by both A and B.

 Disjoint			Conjoint
 Fa		Fb		Fa		Fb
 (0,0,0,0)	0		0		0		0
 (0,A,0,A)	1		0		1		0
 (0,0,B,B)	0		1		0		1
 (0,A,B,A)	1		min((1-a)/b,1)	1		max(1-a/b,0)
 (0,A,B,B)	min((1-b)/a,1)	1		max(1-b/a,0)	1
 (0,0,0,A)	max(1-(1-b)/a,0) 0		min(1,b/a)	0
 (0,0,0,B)	0		max(1-(1-a)/b,0) 0		min(a/b,1)
 (0,A,0,0)	min(1,(1-b)/a)	0		max(1-b/a,0)	0
 (0,0,B,0)	0		min(1,(1-a)/b)	0		max(1-a/b,0)
 (0,0,B,A)	max(1-(1-b)/a,0) min(1,(1-a)/b)	 min(1,b/a)	max(1-a/b,0)
 (0,A,0,B)	min(1,(1-b)/a)	max(1-(1-a)/b,0) max(1-b/a,0)	min(1,a/b)
 (0,A,B,0)	min(1,(1-b)/a)	min(1,(1-a)/b)	max(1-b/a,0)	max(1-a/b,0)

*/

#define CombineAOut 1
#define CombineAIn  2
#define CombineBOut 4
#define CombineBIn  8

#define CombineClear	0
#define CombineA	(CombineAOut|CombineAIn)
#define CombineB	(CombineBOut|CombineBIn)
#define CombineAOver	(CombineAOut|CombineBOut|CombineAIn)
#define CombineBOver	(CombineAOut|CombineBOut|CombineBIn)
#define CombineAAtop	(CombineBOut|CombineAIn)
#define CombineBAtop	(CombineAOut|CombineBIn)
#define CombineXor	(CombineAOut|CombineBOut)

/* portion covered by a but not b */
FASTCALL static comp1_t
fbCombineDisjointOutPart (comp1_t a, comp1_t b)
{
    /* min (1, (1-b) / a) */

    b = ~b;		    /* 1 - b */
    if (b >= a)		    /* 1 - b >= a -> (1-b)/a >= 1 */
	return MASK;	    /* 1 */
    return IntDiv(b,a);     /* (1-b) / a */
}

/* portion covered by both a and b */
FASTCALL static comp1_t
fbCombineDisjointInPart (comp1_t a, comp1_t b)
{
    /* max (1-(1-b)/a,0) */
    /*  = - min ((1-b)/a - 1, 0) */
    /*  = 1 - min (1, (1-b)/a) */

    b = ~b;		    /* 1 - b */
    if (b >= a)		    /* 1 - b >= a -> (1-b)/a >= 1 */
	return 0;	    /* 1 - 1 */
    return ~IntDiv(b,a);    /* 1 - (1-b) / a */
}

/* portion covered by a but not b */
FASTCALL static comp1_t
fbCombineConjointOutPart (comp1_t a, comp1_t b)
{
    /* max (1-b/a,0) */
    /* = 1-min(b/a,1) */

    /* min (1, (1-b) / a) */

    if (b >= a)		    /* b >= a -> b/a >= 1 */
	return 0x00;	    /* 0 */
    return ~IntDiv(b,a);    /* 1 - b/a */
}

/* portion covered by both a and b */
FASTCALL static comp1_t
fbCombineConjointInPart (comp1_t a, comp1_t b)
{
    /* min (1,b/a) */

    if (b >= a)		    /* b >= a -> b/a >= 1 */
	return MASK;	    /* 1 */
    return IntDiv(b,a);     /* b/a */
}

FASTCALL static void
fbCombineDisjointGeneralU (comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width, comp1_t combine)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t m,n,o,p;
        comp2_t Fa, Fb, t, u, v;
        comp1_t sa = s >> A_SHIFT;
        comp1_t da = d >> A_SHIFT;

        switch (combine & CombineA) {
        default:
            Fa = 0;
            break;
        case CombineAOut:
            Fa = fbCombineDisjointOutPart (sa, da);
            break;
        case CombineAIn:
            Fa = fbCombineDisjointInPart (sa, da);
            break;
        case CombineA:
            Fa = MASK;
            break;
        }

        switch (combine & CombineB) {
        default:
            Fb = 0;
            break;
        case CombineBOut:
            Fb = fbCombineDisjointOutPart (da, sa);
            break;
        case CombineBIn:
            Fb = fbCombineDisjointInPart (da, sa);
            break;
        case CombineB:
            Fb = MASK;
            break;
        }
        m = FbGen (s,d,0,Fa,Fb,t, u, v);
        n = FbGen (s,d,G_SHIFT,Fa,Fb,t, u, v);
        o = FbGen (s,d,R_SHIFT,Fa,Fb,t, u, v);
        p = FbGen (s,d,A_SHIFT,Fa,Fb,t, u, v);
        s = m|n|o|p;
	*(dest + i) = s;
    }
}

FASTCALL static void
fbCombineDisjointOverU (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp2_t a = s >> A_SHIFT;

        if (a != 0x00)
        {
            if (a != MASK)
            {
                comp4_t d = *(dest + i);
                a = fbCombineDisjointOutPart (d >> A_SHIFT, a);
                FbByteMulAdd(d, a, s);
                s = d;
            }
	    *(dest + i) = s;
        }
    }
}

FASTCALL static void
fbCombineDisjointInU (pixman_implementation_t *imp, pixman_op_t op,
		      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralU (dest, src, mask, width, CombineAIn);
}

FASTCALL static void
fbCombineDisjointInReverseU (pixman_implementation_t *imp, pixman_op_t op,
			     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralU (dest, src, mask, width, CombineBIn);
}

FASTCALL static void
fbCombineDisjointOutU (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralU (dest, src, mask, width, CombineAOut);
}

FASTCALL static void
fbCombineDisjointOutReverseU (pixman_implementation_t *imp, pixman_op_t op,
			      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralU (dest, src, mask, width, CombineBOut);
}

FASTCALL static void
fbCombineDisjointAtopU (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralU (dest, src, mask, width, CombineAAtop);
}

FASTCALL static void
fbCombineDisjointAtopReverseU (pixman_implementation_t *imp, pixman_op_t op,
			       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralU (dest, src, mask, width, CombineBAtop);
}

FASTCALL static void
fbCombineDisjointXorU (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralU (dest, src, mask, width, CombineXor);
}

FASTCALL static void
fbCombineConjointGeneralU (comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width, comp1_t combine)
{
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t s = combineMask (src, mask, i);
        comp4_t d = *(dest + i);
        comp4_t m,n,o,p;
        comp2_t Fa, Fb, t, u, v;
        comp1_t sa = s >> A_SHIFT;
        comp1_t da = d >> A_SHIFT;

        switch (combine & CombineA) {
        default:
            Fa = 0;
            break;
        case CombineAOut:
            Fa = fbCombineConjointOutPart (sa, da);
            break;
        case CombineAIn:
            Fa = fbCombineConjointInPart (sa, da);
            break;
        case CombineA:
            Fa = MASK;
            break;
        }

        switch (combine & CombineB) {
        default:
            Fb = 0;
            break;
        case CombineBOut:
            Fb = fbCombineConjointOutPart (da, sa);
            break;
        case CombineBIn:
            Fb = fbCombineConjointInPart (da, sa);
            break;
        case CombineB:
            Fb = MASK;
            break;
        }
        m = FbGen (s,d,0,Fa,Fb,t, u, v);
        n = FbGen (s,d,G_SHIFT,Fa,Fb,t, u, v);
        o = FbGen (s,d,R_SHIFT,Fa,Fb,t, u, v);
        p = FbGen (s,d,A_SHIFT,Fa,Fb,t, u, v);
        s = m|n|o|p;
	*(dest + i) = s;
    }
}

FASTCALL static void
fbCombineConjointOverU (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineAOver);
}


FASTCALL static void
fbCombineConjointOverReverseU (pixman_implementation_t *imp, pixman_op_t op,
			       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineBOver);
}


FASTCALL static void
fbCombineConjointInU (pixman_implementation_t *imp, pixman_op_t op,
		      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineAIn);
}


FASTCALL static void
fbCombineConjointInReverseU (pixman_implementation_t *imp, pixman_op_t op,
			     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineBIn);
}

FASTCALL static void
fbCombineConjointOutU (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineAOut);
}

FASTCALL static void
fbCombineConjointOutReverseU (pixman_implementation_t *imp, pixman_op_t op,
			      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineBOut);
}

FASTCALL static void
fbCombineConjointAtopU (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineAAtop);
}

FASTCALL static void
fbCombineConjointAtopReverseU (pixman_implementation_t *imp, pixman_op_t op,
			       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineBAtop);
}

FASTCALL static void
fbCombineConjointXorU (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralU (dest, src, mask, width, CombineXor);
}

/********************************************************************************/
/*************************** Per Channel functions ******************************/
/********************************************************************************/

FASTCALL static void
fbCombineMaskC (comp4_t *src, comp4_t *mask)
{
    comp4_t a = *mask;

    comp4_t	x;
    comp2_t	xa;

    if (!a)
    {
	*(src) = 0;
	return;
    }

    x = *(src);
    if (a == ~0)
    {
	x = x >> A_SHIFT;
	x |= x << G_SHIFT;
	x |= x << R_SHIFT;
	*(mask) = x;
	return;
    }

    xa = x >> A_SHIFT;
    FbByteMulC(x, a);
    *(src) = x;
    FbByteMul(a, xa);
    *(mask) = a;
}

FASTCALL static void
fbCombineMaskValueC (comp4_t *src, const comp4_t *mask)
{
    comp4_t a = *mask;
    comp4_t	x;

    if (!a)
    {
	*(src) = 0;
	return;
    }

    if (a == ~0)
	return;

    x = *(src);
    FbByteMulC(x, a);
    *(src) =x;
}

FASTCALL static void
fbCombineMaskAlphaC (const comp4_t *src, comp4_t *mask)
{
    comp4_t a = *(mask);
    comp4_t	x;

    if (!a)
	return;

    x = *(src) >> A_SHIFT;
    if (x == MASK)
	return;
    if (a == ~0)
    {
	x = x >> A_SHIFT;
	x |= x << G_SHIFT;
	x |= x << R_SHIFT;
	*(mask) = x;
	return;
    }

    FbByteMul(a, x);
    *(mask) = a;
}

FASTCALL static void
fbCombineClearC (pixman_implementation_t *imp, pixman_op_t op,
		 comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    memset(dest, 0, width*sizeof(comp4_t));
}

FASTCALL static void
fbCombineSrcC (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
	comp4_t s = *(src + i);
	comp4_t m = *(mask + i);

	fbCombineMaskValueC (&s, &m);

	*(dest) = s;
    }
}

FASTCALL static void
fbCombineOverC (pixman_implementation_t *imp, pixman_op_t op,
		comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
	comp4_t s = *(src + i);
	comp4_t m = *(mask + i);
	comp4_t a;

	fbCombineMaskC (&s, &m);

	a = ~m;
        if (a != ~0)
        {
            if (a)
            {
                comp4_t d = *(dest + i);
                FbByteMulAddC(d, a, s);
                s = d;
            }
	    *(dest + i) = s;
        }
    }
}

FASTCALL static void
fbCombineOverReverseC (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t d = *(dest + i);
        comp4_t a = ~d >> A_SHIFT;

        if (a)
        {
            comp4_t s = *(src + i);
	    comp4_t m = *(mask + i);

	    fbCombineMaskValueC (&s, &m);

            if (a != MASK)
            {
                FbByteMulAdd(s, a, d);
            }
	    *(dest + i) = s;
        }
    }
}

FASTCALL static void
fbCombineInC (pixman_implementation_t *imp, pixman_op_t op,
	      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t d = *(dest + i);
        comp2_t a = d >> A_SHIFT;
        comp4_t s = 0;
        if (a)
        {
	    comp4_t m = *(mask + i);

	    s = *(src + i);
	    fbCombineMaskValueC (&s, &m);
            if (a != MASK)
            {
                FbByteMul(s, a);
            }
        }
	*(dest + i) = s;
    }
}

FASTCALL static void
fbCombineInReverseC (pixman_implementation_t *imp, pixman_op_t op,
		     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t s = *(src + i);
        comp4_t m = *(mask + i);
        comp4_t a;

	fbCombineMaskAlphaC (&s, &m);

	a = m;
        if (a != ~0)
        {
            comp4_t d = 0;
            if (a)
            {
                d = *(dest + i);
                FbByteMulC(d, a);
            }
	    *(dest + i) = d;
        }
    }
}

FASTCALL static void
fbCombineOutC (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t d = *(dest + i);
        comp2_t a = ~d >> A_SHIFT;
        comp4_t s = 0;
        if (a)
        {
	    comp4_t m = *(mask + i);

	    s = *(src + i);
	    fbCombineMaskValueC (&s, &m);

            if (a != MASK)
            {
                FbByteMul(s, a);
            }
        }
	*(dest + i) = s;
    }
}

FASTCALL static void
fbCombineOutReverseC (pixman_implementation_t *imp, pixman_op_t op,
		      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
	comp4_t s = *(src + i);
	comp4_t m = *(mask + i);
	comp4_t a;

	fbCombineMaskAlphaC (&s, &m);

        a = ~m;
        if (a != ~0)
        {
            comp4_t d = 0;
            if (a)
            {
                d = *(dest + i);
                FbByteMulC(d, a);
            }
	    *(dest + i) = d;
        }
    }
}

FASTCALL static void
fbCombineAtopC (pixman_implementation_t *imp, pixman_op_t op,
		comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t d = *(dest + i);
        comp4_t s = *(src + i);
        comp4_t m = *(mask + i);
        comp4_t ad;
        comp2_t as = d >> A_SHIFT;

	fbCombineMaskC (&s, &m);

        ad = ~m;

        FbByteAddMulC(d, ad, s, as);
	*(dest + i) = d;
    }
}

FASTCALL static void
fbCombineAtopReverseC (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {

        comp4_t d = *(dest + i);
        comp4_t s = *(src + i);
        comp4_t m = *(mask + i);
        comp4_t ad;
        comp2_t as = ~d >> A_SHIFT;

	fbCombineMaskC (&s, &m);

	ad = m;

        FbByteAddMulC(d, ad, s, as);
	*(dest + i) = d;
    }
}

FASTCALL static void
fbCombineXorC (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t d = *(dest + i);
        comp4_t s = *(src + i);
        comp4_t m = *(mask + i);
        comp4_t ad;
        comp2_t as = ~d >> A_SHIFT;

	fbCombineMaskC (&s, &m);

	ad = ~m;

        FbByteAddMulC(d, ad, s, as);
	*(dest + i) = d;
    }
}

FASTCALL static void
fbCombineAddC (pixman_implementation_t *imp, pixman_op_t op,
	       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t s = *(src + i);
        comp4_t m = *(mask + i);
        comp4_t d = *(dest + i);

	fbCombineMaskValueC (&s, &m);

        FbByteAdd(d, s);
	*(dest + i) = d;
    }
}

FASTCALL static void
fbCombineSaturateC (pixman_implementation_t *imp, pixman_op_t op,
		    comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t s, d;
        comp2_t sa, sr, sg, sb, da;
        comp2_t t, u, v;
        comp4_t m,n,o,p;

        d = *(dest + i);
        s = *(src + i);
	m = *(mask + i);

	fbCombineMaskC (&s, &m);

        sa = (m >> A_SHIFT);
        sr = (m >> R_SHIFT) & MASK;
        sg = (m >> G_SHIFT) & MASK;
        sb =  m             & MASK;
        da = ~d >> A_SHIFT;

        if (sb <= da)
            m = Add(s,d,0,t);
        else
            m = FbGen (s, d, 0, (da << G_SHIFT) / sb, MASK, t, u, v);

        if (sg <= da)
            n = Add(s,d,G_SHIFT,t);
        else
            n = FbGen (s, d, G_SHIFT, (da << G_SHIFT) / sg, MASK, t, u, v);

        if (sr <= da)
            o = Add(s,d,R_SHIFT,t);
        else
            o = FbGen (s, d, R_SHIFT, (da << G_SHIFT) / sr, MASK, t, u, v);

        if (sa <= da)
            p = Add(s,d,A_SHIFT,t);
        else
            p = FbGen (s, d, A_SHIFT, (da << G_SHIFT) / sa, MASK, t, u, v);

	*(dest + i) = m|n|o|p;
    }
}

FASTCALL static void
fbCombineDisjointGeneralC (comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width, comp1_t combine)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t s, d;
        comp4_t m,n,o,p;
        comp4_t Fa, Fb;
        comp2_t t, u, v;
        comp4_t sa;
        comp1_t da;

        s = *(src + i);
        m = *(mask + i);
        d = *(dest + i);
        da = d >> A_SHIFT;

	fbCombineMaskC (&s, &m);

	sa = m;

        switch (combine & CombineA) {
        default:
            Fa = 0;
            break;
        case CombineAOut:
            m = (comp4_t)fbCombineDisjointOutPart ((comp1_t) (sa >> 0), da);
            n = (comp4_t)fbCombineDisjointOutPart ((comp1_t) (sa >> G_SHIFT), da) << G_SHIFT;
            o = (comp4_t)fbCombineDisjointOutPart ((comp1_t) (sa >> R_SHIFT), da) << R_SHIFT;
            p = (comp4_t)fbCombineDisjointOutPart ((comp1_t) (sa >> A_SHIFT), da) << A_SHIFT;
            Fa = m|n|o|p;
            break;
        case CombineAIn:
            m = (comp4_t)fbCombineDisjointInPart ((comp1_t) (sa >> 0), da);
            n = (comp4_t)fbCombineDisjointInPart ((comp1_t) (sa >> G_SHIFT), da) << G_SHIFT;
            o = (comp4_t)fbCombineDisjointInPart ((comp1_t) (sa >> R_SHIFT), da) << R_SHIFT;
            p = (comp4_t)fbCombineDisjointInPart ((comp1_t) (sa >> A_SHIFT), da) << A_SHIFT;
            Fa = m|n|o|p;
            break;
        case CombineA:
            Fa = ~0;
            break;
        }

        switch (combine & CombineB) {
        default:
            Fb = 0;
            break;
        case CombineBOut:
            m = (comp4_t)fbCombineDisjointOutPart (da, (comp1_t) (sa >> 0));
            n = (comp4_t)fbCombineDisjointOutPart (da, (comp1_t) (sa >> G_SHIFT)) << G_SHIFT;
            o = (comp4_t)fbCombineDisjointOutPart (da, (comp1_t) (sa >> R_SHIFT)) << R_SHIFT;
            p = (comp4_t)fbCombineDisjointOutPart (da, (comp1_t) (sa >> A_SHIFT)) << A_SHIFT;
            Fb = m|n|o|p;
            break;
        case CombineBIn:
            m = (comp4_t)fbCombineDisjointInPart (da, (comp1_t) (sa >> 0));
            n = (comp4_t)fbCombineDisjointInPart (da, (comp1_t) (sa >> G_SHIFT)) << G_SHIFT;
            o = (comp4_t)fbCombineDisjointInPart (da, (comp1_t) (sa >> R_SHIFT)) << R_SHIFT;
            p = (comp4_t)fbCombineDisjointInPart (da, (comp1_t) (sa >> A_SHIFT)) << A_SHIFT;
            Fb = m|n|o|p;
            break;
        case CombineB:
            Fb = ~0;
            break;
        }
        m = FbGen (s,d,0,GetComp(Fa,0),GetComp(Fb,0),t, u, v);
        n = FbGen (s,d,G_SHIFT,GetComp(Fa,G_SHIFT),GetComp(Fb,G_SHIFT),t, u, v);
        o = FbGen (s,d,R_SHIFT,GetComp(Fa,R_SHIFT),GetComp(Fb,R_SHIFT),t, u, v);
        p = FbGen (s,d,A_SHIFT,GetComp(Fa,A_SHIFT),GetComp(Fb,A_SHIFT),t, u, v);
        s = m|n|o|p;
	*(dest + i) = s;
    }
}

FASTCALL static void
fbCombineDisjointOverC (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineAOver);
}

FASTCALL static void
fbCombineDisjointInC (pixman_implementation_t *imp, pixman_op_t op,
		      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineAIn);
}

FASTCALL static void
fbCombineDisjointInReverseC (pixman_implementation_t *imp, pixman_op_t op,
			     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineBIn);
}

FASTCALL static void
fbCombineDisjointOutC (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineAOut);
}

FASTCALL static void
fbCombineDisjointOutReverseC (pixman_implementation_t *imp, pixman_op_t op,
			      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineBOut);
}

FASTCALL static void
fbCombineDisjointAtopC (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineAAtop);
}

FASTCALL static void
fbCombineDisjointAtopReverseC (pixman_implementation_t *imp, pixman_op_t op,
			       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineBAtop);
}

FASTCALL static void
fbCombineDisjointXorC (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineDisjointGeneralC (dest, src, mask, width, CombineXor);
}

FASTCALL static void
fbCombineConjointGeneralC (comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width, comp1_t combine)
{
    int i;

    for (i = 0; i < width; ++i) {
        comp4_t s, d;
        comp4_t m,n,o,p;
        comp4_t Fa, Fb;
        comp2_t t, u, v;
        comp4_t sa;
        comp1_t da;

        s = *(src + i);
        m = *(mask + i);
        d = *(dest + i);
        da = d >> A_SHIFT;

	fbCombineMaskC (&s, &m);

        sa = m;

        switch (combine & CombineA) {
        default:
            Fa = 0;
            break;
        case CombineAOut:
            m = (comp4_t)fbCombineConjointOutPart ((comp1_t) (sa >> 0), da);
            n = (comp4_t)fbCombineConjointOutPart ((comp1_t) (sa >> G_SHIFT), da) << G_SHIFT;
            o = (comp4_t)fbCombineConjointOutPart ((comp1_t) (sa >> R_SHIFT), da) << R_SHIFT;
            p = (comp4_t)fbCombineConjointOutPart ((comp1_t) (sa >> A_SHIFT), da) << A_SHIFT;
            Fa = m|n|o|p;
            break;
        case CombineAIn:
            m = (comp4_t)fbCombineConjointInPart ((comp1_t) (sa >> 0), da);
            n = (comp4_t)fbCombineConjointInPart ((comp1_t) (sa >> G_SHIFT), da) << G_SHIFT;
            o = (comp4_t)fbCombineConjointInPart ((comp1_t) (sa >> R_SHIFT), da) << R_SHIFT;
            p = (comp4_t)fbCombineConjointInPart ((comp1_t) (sa >> A_SHIFT), da) << A_SHIFT;
            Fa = m|n|o|p;
            break;
        case CombineA:
            Fa = ~0;
            break;
        }

        switch (combine & CombineB) {
        default:
            Fb = 0;
            break;
        case CombineBOut:
            m = (comp4_t)fbCombineConjointOutPart (da, (comp1_t) (sa >> 0));
            n = (comp4_t)fbCombineConjointOutPart (da, (comp1_t) (sa >> G_SHIFT)) << G_SHIFT;
            o = (comp4_t)fbCombineConjointOutPart (da, (comp1_t) (sa >> R_SHIFT)) << R_SHIFT;
            p = (comp4_t)fbCombineConjointOutPart (da, (comp1_t) (sa >> A_SHIFT)) << A_SHIFT;
            Fb = m|n|o|p;
            break;
        case CombineBIn:
            m = (comp4_t)fbCombineConjointInPart (da, (comp1_t) (sa >> 0));
            n = (comp4_t)fbCombineConjointInPart (da, (comp1_t) (sa >> G_SHIFT)) << G_SHIFT;
            o = (comp4_t)fbCombineConjointInPart (da, (comp1_t) (sa >> R_SHIFT)) << R_SHIFT;
            p = (comp4_t)fbCombineConjointInPart (da, (comp1_t) (sa >> A_SHIFT)) << A_SHIFT;
            Fb = m|n|o|p;
            break;
        case CombineB:
            Fb = ~0;
            break;
        }
        m = FbGen (s,d,0,GetComp(Fa,0),GetComp(Fb,0),t, u, v);
        n = FbGen (s,d,G_SHIFT,GetComp(Fa,G_SHIFT),GetComp(Fb,G_SHIFT),t, u, v);
        o = FbGen (s,d,R_SHIFT,GetComp(Fa,R_SHIFT),GetComp(Fb,R_SHIFT),t, u, v);
        p = FbGen (s,d,A_SHIFT,GetComp(Fa,A_SHIFT),GetComp(Fb,A_SHIFT),t, u, v);
        s = m|n|o|p;
	*(dest + i) = s;
    }
}

FASTCALL static void
fbCombineConjointOverC (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineAOver);
}

FASTCALL static void
fbCombineConjointOverReverseC (pixman_implementation_t *imp, pixman_op_t op,
			       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineBOver);
}

FASTCALL static void
fbCombineConjointInC (pixman_implementation_t *imp, pixman_op_t op,
		      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineAIn);
}

FASTCALL static void
fbCombineConjointInReverseC (pixman_implementation_t *imp, pixman_op_t op,
			     comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineBIn);
}

FASTCALL static void
fbCombineConjointOutC (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineAOut);
}

FASTCALL static void
fbCombineConjointOutReverseC (pixman_implementation_t *imp, pixman_op_t op,
			      comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineBOut);
}

FASTCALL static void
fbCombineConjointAtopC (pixman_implementation_t *imp, pixman_op_t op,
			comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineAAtop);
}

FASTCALL static void
fbCombineConjointAtopReverseC (pixman_implementation_t *imp, pixman_op_t op,
			       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineBAtop);
}

FASTCALL static void
fbCombineConjointXorC (pixman_implementation_t *imp, pixman_op_t op,
		       comp4_t *dest, const comp4_t *src, const comp4_t *mask, int width)
{
    fbCombineConjointGeneralC (dest, src, mask, width, CombineXor);
}

void
_pixman_setup_combiner_functions_width (pixman_implementation_t *imp)
{
    /* Unified alpha */
    imp->combine_width[PIXMAN_OP_CLEAR] = fbCombineClear;
    imp->combine_width[PIXMAN_OP_SRC] = fbCombineSrcU;
    /* dest */
    imp->combine_width[PIXMAN_OP_OVER] = fbCombineOverU;
    imp->combine_width[PIXMAN_OP_OVER_REVERSE] = fbCombineOverReverseU;
    imp->combine_width[PIXMAN_OP_IN] = fbCombineInU;
    imp->combine_width[PIXMAN_OP_IN_REVERSE] = fbCombineInReverseU;
    imp->combine_width[PIXMAN_OP_OUT] = fbCombineOutU;
    imp->combine_width[PIXMAN_OP_OUT_REVERSE] = fbCombineOutReverseU;
    imp->combine_width[PIXMAN_OP_ATOP] = fbCombineAtopU;
    imp->combine_width[PIXMAN_OP_ATOP_REVERSE] = fbCombineAtopReverseU;
    imp->combine_width[PIXMAN_OP_XOR] = fbCombineXorU;
    imp->combine_width[PIXMAN_OP_ADD] = fbCombineAddU;
    imp->combine_width[PIXMAN_OP_SATURATE] = fbCombineSaturateU;

    /* Disjoint, unified */
    imp->combine_width[PIXMAN_OP_DISJOINT_CLEAR] = fbCombineClear;
    imp->combine_width[PIXMAN_OP_DISJOINT_SRC] = fbCombineSrcU;
    /* dest */
    imp->combine_width[PIXMAN_OP_DISJOINT_OVER] = fbCombineDisjointOverU;
    imp->combine_width[PIXMAN_OP_DISJOINT_OVER_REVERSE] = fbCombineSaturateU;
    imp->combine_width[PIXMAN_OP_DISJOINT_IN] = fbCombineDisjointInU;
    imp->combine_width[PIXMAN_OP_DISJOINT_IN_REVERSE] = fbCombineDisjointInReverseU;
    imp->combine_width[PIXMAN_OP_DISJOINT_OUT] = fbCombineDisjointOutU;
    imp->combine_width[PIXMAN_OP_DISJOINT_OUT_REVERSE] = fbCombineDisjointOutReverseU;
    imp->combine_width[PIXMAN_OP_DISJOINT_ATOP] = fbCombineDisjointAtopU;
    imp->combine_width[PIXMAN_OP_DISJOINT_ATOP_REVERSE] = fbCombineDisjointAtopReverseU;
    imp->combine_width[PIXMAN_OP_DISJOINT_XOR] = fbCombineDisjointXorU;

    /* Conjoint, unified */
    imp->combine_width[PIXMAN_OP_CONJOINT_CLEAR] = fbCombineClear;
    imp->combine_width[PIXMAN_OP_CONJOINT_SRC] = fbCombineSrcU;
    /* dest */
    imp->combine_width[PIXMAN_OP_CONJOINT_OVER] = fbCombineConjointOverU;
    imp->combine_width[PIXMAN_OP_CONJOINT_OVER_REVERSE] = fbCombineConjointOverReverseU;
    imp->combine_width[PIXMAN_OP_CONJOINT_IN] = fbCombineConjointInU;
    imp->combine_width[PIXMAN_OP_CONJOINT_IN_REVERSE] = fbCombineConjointInReverseU;
    imp->combine_width[PIXMAN_OP_CONJOINT_OUT] = fbCombineConjointOutU;
    imp->combine_width[PIXMAN_OP_CONJOINT_OUT_REVERSE] = fbCombineConjointOutReverseU;
    imp->combine_width[PIXMAN_OP_CONJOINT_ATOP] = fbCombineConjointAtopU;
    imp->combine_width[PIXMAN_OP_CONJOINT_ATOP_REVERSE] = fbCombineConjointAtopReverseU;
    imp->combine_width[PIXMAN_OP_CONJOINT_XOR] = fbCombineConjointXorU;

    /* Component alpha combiners */
    imp->combine_width_ca[PIXMAN_OP_CLEAR] = fbCombineClearC;
    imp->combine_width_ca[PIXMAN_OP_SRC] = fbCombineSrcC;
    /* dest */
    imp->combine_width_ca[PIXMAN_OP_OVER] = fbCombineOverC;
    imp->combine_width_ca[PIXMAN_OP_OVER_REVERSE] = fbCombineOverReverseC;
    imp->combine_width_ca[PIXMAN_OP_IN] = fbCombineInC;
    imp->combine_width_ca[PIXMAN_OP_IN_REVERSE] = fbCombineInReverseC;
    imp->combine_width_ca[PIXMAN_OP_OUT] = fbCombineOutC;
    imp->combine_width_ca[PIXMAN_OP_OUT_REVERSE] = fbCombineOutReverseC;
    imp->combine_width_ca[PIXMAN_OP_ATOP] = fbCombineAtopC;
    imp->combine_width_ca[PIXMAN_OP_ATOP_REVERSE] = fbCombineAtopReverseC;
    imp->combine_width_ca[PIXMAN_OP_XOR] = fbCombineXorC;
    imp->combine_width_ca[PIXMAN_OP_ADD] = fbCombineAddC;
    imp->combine_width_ca[PIXMAN_OP_SATURATE] = fbCombineSaturateC;

    /* Disjoint CA */
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_CLEAR] = fbCombineClearC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_SRC] = fbCombineSrcC;
    /* dest */
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_OVER] = fbCombineDisjointOverC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_OVER_REVERSE] = fbCombineSaturateC,
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_IN] = fbCombineDisjointInC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_IN_REVERSE] = fbCombineDisjointInReverseC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_OUT] = fbCombineDisjointOutC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_OUT_REVERSE] = fbCombineDisjointOutReverseC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_ATOP] = fbCombineDisjointAtopC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_ATOP_REVERSE] = fbCombineDisjointAtopReverseC;
    imp->combine_width_ca[PIXMAN_OP_DISJOINT_XOR] = fbCombineDisjointXorC;

    /* Conjoint CA */
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_CLEAR] = fbCombineClearC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_SRC] = fbCombineSrcC;
    /* dest */
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_OVER] = fbCombineConjointOverC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_OVER_REVERSE] = fbCombineConjointOverReverseC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_IN] = fbCombineConjointInC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_IN_REVERSE] = fbCombineConjointInReverseC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_OUT] = fbCombineConjointOutC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_OUT_REVERSE] = fbCombineConjointOutReverseC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_ATOP] = fbCombineConjointAtopC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_ATOP_REVERSE] = fbCombineConjointAtopReverseC;
    imp->combine_width_ca[PIXMAN_OP_CONJOINT_XOR] = fbCombineConjointXorC;
}
@


1.2
log
@Update to pixman 0.15.8.
@
text
@@


1.1
log
@pixman 0.12.0. Tested on a full ports build by naddy@@.
@
text
@d21 1
a21 1
 * Combine src and mask
d23 3
a25 2
FASTCALL static void
pixman_fbCombineMaskU (comp4_t *src, const comp4_t *mask, int width)
d27 8
a34 6
    int i;
    for (i = 0; i < width; ++i) {
        comp4_t a = *(mask + i) >> A_SHIFT;
        comp4_t s = *(src + i);
        FbByteMul(s, a);
        *(src + i) = s;
d36 7
a44 4
/*
 * All of the composing functions
 */

d46 2
a47 1
fbCombineClear (comp4_t *dest, const comp4_t *src, int width)
d53 2
a54 1
fbCombineSrcU (comp4_t *dest, const comp4_t *src, int width)
d56 13
a68 1
    memcpy(dest, src, width*sizeof(comp4_t));
d73 2
a74 1
fbCombineOverU (comp4_t *dest, const comp4_t *src, int width)
d78 1
a78 1
        comp4_t s = *(src + i);
d89 2
a90 1
fbCombineOverReverseU (comp4_t *dest, const comp4_t *src, int width)
d94 1
a94 1
        comp4_t s = *(src + i);
d104 2
a105 1
fbCombineInU (comp4_t *dest, const comp4_t *src, int width)
d109 1
a109 1
        comp4_t s = *(src + i);
d118 2
a119 1
fbCombineInReverseU (comp4_t *dest, const comp4_t *src, int width)
d123 3
a125 2
        comp4_t d = *(dest + i);
        comp4_t a = Alpha(*(src + i));
d133 2
a134 1
fbCombineOutU (comp4_t *dest, const comp4_t *src, int width)
d138 1
a138 1
        comp4_t s = *(src + i);
d147 2
a148 1
fbCombineOutReverseU (comp4_t *dest, const comp4_t *src, int width)
d152 1
d154 1
a154 1
        comp4_t a = Alpha(~*(src + i));
d164 2
a165 1
fbCombineAtopU (comp4_t *dest, const comp4_t *src, int width)
d169 1
a169 1
        comp4_t s = *(src + i);
d183 2
a184 1
fbCombineAtopReverseU (comp4_t *dest, const comp4_t *src, int width)
d188 1
a188 1
        comp4_t s = *(src + i);
d202 2
a203 1
fbCombineXorU (comp4_t *dest, const comp4_t *src, int width)
d207 1
a207 1
        comp4_t s = *(src + i);
d218 2
a219 1
fbCombineAddU (comp4_t *dest, const comp4_t *src, int width)
d223 1
a223 1
        comp4_t s = *(src + i);
d234 2
a235 1
fbCombineSaturateU (comp4_t *dest, const comp4_t *src, int width)
d239 1
a239 1
        comp4_t s = *(src + i);
d347 1
a347 1
fbCombineDisjointGeneralU (comp4_t *dest, const comp4_t *src, int width, comp1_t combine)
d351 1
a351 1
        comp4_t s = *(src + i);
d389 1
a389 1
        o = FbGen (s,d,B_SHIFT,Fa,Fb,t, u, v);
d397 2
a398 1
fbCombineDisjointOverU (comp4_t *dest, const comp4_t *src, int width)
d402 1
a402 1
        comp4_t s = *(src + i);
d420 2
a421 1
fbCombineDisjointInU (comp4_t *dest, const comp4_t *src, int width)
d423 1
a423 1
    fbCombineDisjointGeneralU (dest, src, width, CombineAIn);
d427 2
a428 1
fbCombineDisjointInReverseU (comp4_t *dest, const comp4_t *src, int width)
d430 1
a430 1
    fbCombineDisjointGeneralU (dest, src, width, CombineBIn);
d434 2
a435 1
fbCombineDisjointOutU (comp4_t *dest, const comp4_t *src, int width)
d437 1
a437 1
    fbCombineDisjointGeneralU (dest, src, width, CombineAOut);
d441 2
a442 1
fbCombineDisjointOutReverseU (comp4_t *dest, const comp4_t *src, int width)
d444 1
a444 1
    fbCombineDisjointGeneralU (dest, src, width, CombineBOut);
d448 2
a449 1
fbCombineDisjointAtopU (comp4_t *dest, const comp4_t *src, int width)
d451 1
a451 1
    fbCombineDisjointGeneralU (dest, src, width, CombineAAtop);
d455 2
a456 1
fbCombineDisjointAtopReverseU (comp4_t *dest, const comp4_t *src, int width)
d458 1
a458 1
    fbCombineDisjointGeneralU (dest, src, width, CombineBAtop);
d462 2
a463 1
fbCombineDisjointXorU (comp4_t *dest, const comp4_t *src, int width)
d465 1
a465 1
    fbCombineDisjointGeneralU (dest, src, width, CombineXor);
d469 1
a469 1
fbCombineConjointGeneralU (comp4_t *dest, const comp4_t *src, int width, comp1_t combine)
d473 1
a473 1
        comp4_t s = *(src + i);
d511 1
a511 1
        o = FbGen (s,d,B_SHIFT,Fa,Fb,t, u, v);
d519 2
a520 1
fbCombineConjointOverU (comp4_t *dest, const comp4_t *src, int width)
d522 1
a522 1
    fbCombineConjointGeneralU (dest, src, width, CombineAOver);
d527 2
a528 1
fbCombineConjointOverReverseU (comp4_t *dest, const comp4_t *src, int width)
d530 1
a530 1
    fbCombineConjointGeneralU (dest, src, width, CombineBOver);
d535 2
a536 1
fbCombineConjointInU (comp4_t *dest, const comp4_t *src, int width)
d538 1
a538 1
    fbCombineConjointGeneralU (dest, src, width, CombineAIn);
d543 2
a544 1
fbCombineConjointInReverseU (comp4_t *dest, const comp4_t *src, int width)
d546 1
a546 1
    fbCombineConjointGeneralU (dest, src, width, CombineBIn);
d550 2
a551 1
fbCombineConjointOutU (comp4_t *dest, const comp4_t *src, int width)
d553 1
a553 1
    fbCombineConjointGeneralU (dest, src, width, CombineAOut);
d557 2
a558 1
fbCombineConjointOutReverseU (comp4_t *dest, const comp4_t *src, int width)
d560 1
a560 1
    fbCombineConjointGeneralU (dest, src, width, CombineBOut);
d564 2
a565 1
fbCombineConjointAtopU (comp4_t *dest, const comp4_t *src, int width)
d567 1
a567 1
    fbCombineConjointGeneralU (dest, src, width, CombineAAtop);
d571 2
a572 1
fbCombineConjointAtopReverseU (comp4_t *dest, const comp4_t *src, int width)
d574 1
a574 1
    fbCombineConjointGeneralU (dest, src, width, CombineBAtop);
d578 2
a579 1
fbCombineConjointXorU (comp4_t *dest, const comp4_t *src, int width)
d581 1
a581 1
    fbCombineConjointGeneralU (dest, src, width, CombineXor);
d607 1
a607 1
	x |= x << B_SHIFT;
d655 1
a655 1
	x |= x << B_SHIFT;
a663 2


d665 2
a666 1
fbCombineClearC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d672 2
a673 1
fbCombineSrcC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d688 2
a689 1
fbCombineOverC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d715 2
a716 1
fbCombineOverReverseC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d741 2
a742 1
fbCombineInC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d766 2
a767 1
fbCombineInReverseC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d793 2
a794 1
fbCombineOutC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d819 2
a820 1
fbCombineOutReverseC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d846 2
a847 1
fbCombineAtopC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d868 2
a869 1
fbCombineAtopReverseC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d891 2
a892 1
fbCombineXorC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d913 2
a914 1
fbCombineAddC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d931 2
a932 1
fbCombineSaturateC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d949 1
a949 1
        sr = (m >> B_SHIFT) & MASK;
d965 1
a965 1
            o = Add(s,d,B_SHIFT,t);
d967 1
a967 1
            o = FbGen (s, d, B_SHIFT, (da << G_SHIFT) / sr, MASK, t, u, v);
d979 1
a979 1
fbCombineDisjointGeneralC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width, comp1_t combine)
d1007 1
a1007 1
            o = (comp4_t)fbCombineDisjointOutPart ((comp1_t) (sa >> B_SHIFT), da) << B_SHIFT;
d1014 1
a1014 1
            o = (comp4_t)fbCombineDisjointInPart ((comp1_t) (sa >> B_SHIFT), da) << B_SHIFT;
d1030 1
a1030 1
            o = (comp4_t)fbCombineDisjointOutPart (da, (comp1_t) (sa >> B_SHIFT)) << B_SHIFT;
d1037 1
a1037 1
            o = (comp4_t)fbCombineDisjointInPart (da, (comp1_t) (sa >> B_SHIFT)) << B_SHIFT;
d1047 1
a1047 1
        o = FbGen (s,d,B_SHIFT,GetComp(Fa,B_SHIFT),GetComp(Fb,B_SHIFT),t, u, v);
d1055 2
a1056 1
fbCombineDisjointOverC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1062 2
a1063 1
fbCombineDisjointInC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1069 2
a1070 1
fbCombineDisjointInReverseC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1076 2
a1077 1
fbCombineDisjointOutC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1083 2
a1084 1
fbCombineDisjointOutReverseC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1090 2
a1091 1
fbCombineDisjointAtopC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1097 2
a1098 1
fbCombineDisjointAtopReverseC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1104 2
a1105 1
fbCombineDisjointXorC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1111 1
a1111 1
fbCombineConjointGeneralC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width, comp1_t combine)
d1139 1
a1139 1
            o = (comp4_t)fbCombineConjointOutPart ((comp1_t) (sa >> B_SHIFT), da) << B_SHIFT;
d1146 1
a1146 1
            o = (comp4_t)fbCombineConjointInPart ((comp1_t) (sa >> B_SHIFT), da) << B_SHIFT;
d1162 1
a1162 1
            o = (comp4_t)fbCombineConjointOutPart (da, (comp1_t) (sa >> B_SHIFT)) << B_SHIFT;
d1169 1
a1169 1
            o = (comp4_t)fbCombineConjointInPart (da, (comp1_t) (sa >> B_SHIFT)) << B_SHIFT;
d1179 1
a1179 1
        o = FbGen (s,d,B_SHIFT,GetComp(Fa,B_SHIFT),GetComp(Fb,B_SHIFT),t, u, v);
d1187 2
a1188 1
fbCombineConjointOverC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1194 2
a1195 1
fbCombineConjointOverReverseC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1201 2
a1202 1
fbCombineConjointInC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1208 2
a1209 1
fbCombineConjointInReverseC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1215 2
a1216 1
fbCombineConjointOutC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1222 2
a1223 1
fbCombineConjointOutReverseC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1229 2
a1230 1
fbCombineConjointAtopC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1236 2
a1237 1
fbCombineConjointAtopReverseC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1243 2
a1244 1
fbCombineConjointXorC (comp4_t *dest, comp4_t *src, comp4_t *mask, int width)
d1249 91
a1339 99
static CombineFuncU pixman_fbCombineFuncU[] = {
    fbCombineClear,
    fbCombineSrcU,
    NULL, /* CombineDst */
    fbCombineOverU,
    fbCombineOverReverseU,
    fbCombineInU,
    fbCombineInReverseU,
    fbCombineOutU,
    fbCombineOutReverseU,
    fbCombineAtopU,
    fbCombineAtopReverseU,
    fbCombineXorU,
    fbCombineAddU,
    fbCombineSaturateU,
    NULL,
    NULL,
    fbCombineClear,
    fbCombineSrcU,
    NULL, /* CombineDst */
    fbCombineDisjointOverU,
    fbCombineSaturateU, /* DisjointOverReverse */
    fbCombineDisjointInU,
    fbCombineDisjointInReverseU,
    fbCombineDisjointOutU,
    fbCombineDisjointOutReverseU,
    fbCombineDisjointAtopU,
    fbCombineDisjointAtopReverseU,
    fbCombineDisjointXorU,
    NULL,
    NULL,
    NULL,
    NULL,
    fbCombineClear,
    fbCombineSrcU,
    NULL, /* CombineDst */
    fbCombineConjointOverU,
    fbCombineConjointOverReverseU,
    fbCombineConjointInU,
    fbCombineConjointInReverseU,
    fbCombineConjointOutU,
    fbCombineConjointOutReverseU,
    fbCombineConjointAtopU,
    fbCombineConjointAtopReverseU,
    fbCombineConjointXorU,
};

static CombineFuncC pixman_fbCombineFuncC[] = {
    fbCombineClearC,
    fbCombineSrcC,
    NULL, /* Dest */
    fbCombineOverC,
    fbCombineOverReverseC,
    fbCombineInC,
    fbCombineInReverseC,
    fbCombineOutC,
    fbCombineOutReverseC,
    fbCombineAtopC,
    fbCombineAtopReverseC,
    fbCombineXorC,
    fbCombineAddC,
    fbCombineSaturateC,
    NULL,
    NULL,
    fbCombineClearC,	    /* 0x10 */
    fbCombineSrcC,
    NULL, /* Dest */
    fbCombineDisjointOverC,
    fbCombineSaturateC, /* DisjointOverReverse */
    fbCombineDisjointInC,
    fbCombineDisjointInReverseC,
    fbCombineDisjointOutC,
    fbCombineDisjointOutReverseC,
    fbCombineDisjointAtopC,
    fbCombineDisjointAtopReverseC,
    fbCombineDisjointXorC,  /* 0x1b */
    NULL,
    NULL,
    NULL,
    NULL,
    fbCombineClearC,
    fbCombineSrcC,
    NULL, /* Dest */
    fbCombineConjointOverC,
    fbCombineConjointOverReverseC,
    fbCombineConjointInC,
    fbCombineConjointInReverseC,
    fbCombineConjointOutC,
    fbCombineConjointOutReverseC,
    fbCombineConjointAtopC,
    fbCombineConjointAtopReverseC,
    fbCombineConjointXorC,
};

FbComposeFunctions pixman_composeFunctions = {
    pixman_fbCombineFuncU,
    pixman_fbCombineFuncC,
    pixman_fbCombineMaskU
};
@

