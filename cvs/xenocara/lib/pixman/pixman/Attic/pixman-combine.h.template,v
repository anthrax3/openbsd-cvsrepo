head	1.4;
access;
symbols
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2012.11.23.20.44.09;	author matthieu;	state dead;
branches;
next	1.3;

1.3
date	2012.08.17.16.15.20;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.11.14.13.42.49;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.03.25.21.58.52;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to pixman 0.28.0. Tested by ajacoutot@@, mpi@@ and naddy@@ in a full
ports build. Tweaks from mpi@@ for macppc.
@
text
@
#define COMPONENT_SIZE
#define MASK
#define ONE_HALF

#define A_SHIFT
#define R_SHIFT
#define G_SHIFT
#define A_MASK
#define R_MASK
#define G_MASK

#define RB_MASK
#define AG_MASK
#define RB_ONE_HALF
#define RB_MASK_PLUS_ONE

#define ALPHA_c(x) ((x) >> A_SHIFT)
#define RED_c(x) (((x) >> R_SHIFT) & MASK)
#define GREEN_c(x) (((x) >> G_SHIFT) & MASK)
#define BLUE_c(x) ((x) & MASK)

/*
 * Helper macros.
 */

#define MUL_UNc(a, b, t)						\
    ((t) = (a) * (comp2_t)(b) + ONE_HALF, ((((t) >> G_SHIFT ) + (t) ) >> G_SHIFT ))

#define DIV_UNc(a, b)							\
    (((comp2_t) (a) * MASK + ((b) / 2)) / (b))

#define ADD_UNc(x, y, t)				     \
    ((t) = (x) + (y),					     \
     (comp4_t) (comp1_t) ((t) | (0 - ((t) >> G_SHIFT))))

#define DIV_ONE_UNc(x)							\
    (((x) + ONE_HALF + (((x) + ONE_HALF) >> G_SHIFT)) >> G_SHIFT)

/*
 * The methods below use some tricks to be able to do two color
 * components at the same time.
 */

/*
 * x_rb = (x_rb * a) / 255
 */
#define UNc_rb_MUL_UNc(x, a, t)						\
    do									\
    {									\
	t  = ((x) & RB_MASK) * (a);					\
	t += RB_ONE_HALF;						\
	x = (t + ((t >> G_SHIFT) & RB_MASK)) >> G_SHIFT;		\
	x &= RB_MASK;							\
    } while (0)

/*
 * x_rb = min (x_rb + y_rb, 255)
 */
#define UNc_rb_ADD_UNc_rb(x, y, t)					\
    do									\
    {									\
	t = ((x) + (y));						\
	t |= RB_MASK_PLUS_ONE - ((t >> G_SHIFT) & RB_MASK);		\
	x = (t & RB_MASK);						\
    } while (0)

/*
 * x_rb = (x_rb * a_rb) / 255
 */
#define UNc_rb_MUL_UNc_rb(x, a, t)					\
    do									\
    {									\
	t  = (x & MASK) * (a & MASK);					\
	t |= (x & R_MASK) * ((a >> R_SHIFT) & MASK);			\
	t += RB_ONE_HALF;						\
	t = (t + ((t >> G_SHIFT) & RB_MASK)) >> G_SHIFT;		\
	x = t & RB_MASK;						\
    } while (0)

/*
 * x_c = (x_c * a) / 255
 */
#define UNcx4_MUL_UNc(x, a)						\
    do									\
    {									\
	comp4_t r1__, r2__, t__;					\
									\
	r1__ = (x);							\
	UNc_rb_MUL_UNc (r1__, (a), t__);				\
									\
	r2__ = (x) >> G_SHIFT;						\
	UNc_rb_MUL_UNc (r2__, (a), t__);				\
									\
	(x) = r1__ | (r2__ << G_SHIFT);					\
    } while (0)

/*
 * x_c = (x_c * a) / 255 + y_c
 */
#define UNcx4_MUL_UNc_ADD_UNcx4(x, a, y)				\
    do									\
    {									\
	comp4_t r1__, r2__, r3__, t__;					\
									\
	r1__ = (x);							\
	r2__ = (y) & RB_MASK;						\
	UNc_rb_MUL_UNc (r1__, (a), t__);				\
	UNc_rb_ADD_UNc_rb (r1__, r2__, t__);				\
									\
	r2__ = (x) >> G_SHIFT;						\
	r3__ = ((y) >> G_SHIFT) & RB_MASK;				\
	UNc_rb_MUL_UNc (r2__, (a), t__);				\
	UNc_rb_ADD_UNc_rb (r2__, r3__, t__);				\
									\
	(x) = r1__ | (r2__ << G_SHIFT);					\
    } while (0)

/*
 * x_c = (x_c * a + y_c * b) / 255
 */
#define UNcx4_MUL_UNc_ADD_UNcx4_MUL_UNc(x, a, y, b)			\
    do									\
    {									\
	comp4_t r1__, r2__, r3__, t__;					\
									\
	r1__ = (x);							\
	r2__ = (y);							\
	UNc_rb_MUL_UNc (r1__, (a), t__);				\
	UNc_rb_MUL_UNc (r2__, (b), t__);				\
	UNc_rb_ADD_UNc_rb (r1__, r2__, t__);				\
									\
	r2__ = ((x) >> G_SHIFT);					\
	r3__ = ((y) >> G_SHIFT);					\
	UNc_rb_MUL_UNc (r2__, (a), t__);				\
	UNc_rb_MUL_UNc (r3__, (b), t__);				\
	UNc_rb_ADD_UNc_rb (r2__, r3__, t__);				\
									\
	(x) = r1__ | (r2__ << G_SHIFT);					\
    } while (0)

/*
 * x_c = (x_c * a_c) / 255
 */
#define UNcx4_MUL_UNcx4(x, a)						\
    do									\
    {									\
	comp4_t r1__, r2__, r3__, t__;					\
									\
	r1__ = (x);							\
	r2__ = (a);							\
	UNc_rb_MUL_UNc_rb (r1__, r2__, t__);				\
									\
	r2__ = (x) >> G_SHIFT;						\
	r3__ = (a) >> G_SHIFT;						\
	UNc_rb_MUL_UNc_rb (r2__, r3__, t__);				\
									\
	(x) = r1__ | (r2__ << G_SHIFT);					\
    } while (0)

/*
 * x_c = (x_c * a_c) / 255 + y_c
 */
#define UNcx4_MUL_UNcx4_ADD_UNcx4(x, a, y)				\
    do									\
    {									\
	comp4_t r1__, r2__, r3__, t__;					\
									\
	r1__ = (x);							\
	r2__ = (a);							\
	UNc_rb_MUL_UNc_rb (r1__, r2__, t__);				\
	r2__ = (y) & RB_MASK;						\
	UNc_rb_ADD_UNc_rb (r1__, r2__, t__);				\
									\
	r2__ = ((x) >> G_SHIFT);					\
	r3__ = ((a) >> G_SHIFT);					\
	UNc_rb_MUL_UNc_rb (r2__, r3__, t__);				\
	r3__ = ((y) >> G_SHIFT) & RB_MASK;				\
	UNc_rb_ADD_UNc_rb (r2__, r3__, t__);				\
									\
	(x) = r1__ | (r2__ << G_SHIFT);					\
    } while (0)

/*
 * x_c = (x_c * a_c + y_c * b) / 255
 */
#define UNcx4_MUL_UNcx4_ADD_UNcx4_MUL_UNc(x, a, y, b)			\
    do									\
    {									\
	comp4_t r1__, r2__, r3__, t__;					\
									\
	r1__ = (x);							\
	r2__ = (a);							\
	UNc_rb_MUL_UNc_rb (r1__, r2__, t__);				\
	r2__ = (y);							\
	UNc_rb_MUL_UNc (r2__, (b), t__);				\
	UNc_rb_ADD_UNc_rb (r1__, r2__, t__);				\
									\
	r2__ = (x) >> G_SHIFT;						\
	r3__ = (a) >> G_SHIFT;						\
	UNc_rb_MUL_UNc_rb (r2__, r3__, t__);				\
	r3__ = (y) >> G_SHIFT;						\
	UNc_rb_MUL_UNc (r3__, (b), t__);				\
	UNc_rb_ADD_UNc_rb (r2__, r3__, t__);				\
									\
	x = r1__ | (r2__ << G_SHIFT);					\
    } while (0)

/*
  x_c = min(x_c + y_c, 255)
*/
#define UNcx4_ADD_UNcx4(x, y)						\
    do									\
    {									\
	comp4_t r1__, r2__, r3__, t__;					\
									\
	r1__ = (x) & RB_MASK;						\
	r2__ = (y) & RB_MASK;						\
	UNc_rb_ADD_UNc_rb (r1__, r2__, t__);				\
									\
	r2__ = ((x) >> G_SHIFT) & RB_MASK;				\
	r3__ = ((y) >> G_SHIFT) & RB_MASK;				\
	UNc_rb_ADD_UNc_rb (r2__, r3__, t__);				\
									\
	x = r1__ | (r2__ << G_SHIFT);					\
    } while (0)
@


1.3
log
@Update to pixman 0.26.2. tested at least by ajacoutot@@, mpi@@, shadchin@@.
@
text
@@


1.2
log
@Update to pixman 0.20.0.
tested by ajacoutot@@, krw@@ and on a bulk ports build by landry@@.
@
text
@d28 1
a28 1
    ((t) = (a) * (b) + ONE_HALF, ((((t) >> G_SHIFT ) + (t) ) >> G_SHIFT ))
d31 1
a31 1
    (((comp2_t) (a) * MASK) / (b))
@


1.1
log
@Update to pixman 0.16.6. Tested on a full ports build by naddy@@.
@
text
@d34 1
a34 1
    ((t) = x + y,					     \
d87 1
a87 1
	comp4_t r1, r2, t;						\
d89 2
a90 2
	r1 = (x);							\
	UNc_rb_MUL_UNc (r1, a, t);					\
d92 2
a93 2
	r2 = (x) >> G_SHIFT;						\
	UNc_rb_MUL_UNc (r2, a, t);					\
d95 1
a95 1
	x = r1 | (r2 << G_SHIFT);					\
d104 1
a104 1
	comp4_t r1, r2, r3, t;						\
d106 9
a114 9
	r1 = (x);							\
	r2 = (y) & RB_MASK;						\
	UNc_rb_MUL_UNc (r1, a, t);					\
	UNc_rb_ADD_UNc_rb (r1, r2, t);					\
									\
	r2 = (x) >> G_SHIFT;						\
	r3 = ((y) >> G_SHIFT) & RB_MASK;				\
	UNc_rb_MUL_UNc (r2, a, t);					\
	UNc_rb_ADD_UNc_rb (r2, r3, t);					\
d116 1
a116 1
	x = r1 | (r2 << G_SHIFT);					\
d125 1
a125 1
	comp4_t r1, r2, r3, t;						\
d127 11
a137 11
	r1 = x;								\
	r2 = y;								\
	UNc_rb_MUL_UNc (r1, a, t);					\
	UNc_rb_MUL_UNc (r2, b, t);					\
	UNc_rb_ADD_UNc_rb (r1, r2, t);					\
									\
	r2 = (x >> G_SHIFT);						\
	r3 = (y >> G_SHIFT);						\
	UNc_rb_MUL_UNc (r2, a, t);					\
	UNc_rb_MUL_UNc (r3, b, t);					\
	UNc_rb_ADD_UNc_rb (r2, r3, t);					\
d139 1
a139 1
	x = r1 | (r2 << G_SHIFT);					\
d148 1
a148 1
	comp4_t r1, r2, r3, t;						\
d150 3
a152 3
	r1 = x;								\
	r2 = a;								\
	UNc_rb_MUL_UNc_rb (r1, r2, t);					\
d154 3
a156 3
	r2 = x >> G_SHIFT;						\
	r3 = a >> G_SHIFT;						\
	UNc_rb_MUL_UNc_rb (r2, r3, t);					\
d158 1
a158 1
	x = r1 | (r2 << G_SHIFT);					\
d167 1
a167 1
	comp4_t r1, r2, r3, t;						\
d169 11
a179 11
	r1 = x;								\
	r2 = a;								\
	UNc_rb_MUL_UNc_rb (r1, r2, t);					\
	r2 = y & RB_MASK;						\
	UNc_rb_ADD_UNc_rb (r1, r2, t);					\
									\
	r2 = (x >> G_SHIFT);						\
	r3 = (a >> G_SHIFT);						\
	UNc_rb_MUL_UNc_rb (r2, r3, t);					\
	r3 = (y >> G_SHIFT) & RB_MASK;					\
	UNc_rb_ADD_UNc_rb (r2, r3, t);					\
d181 1
a181 1
	x = r1 | (r2 << G_SHIFT);					\
d190 1
a190 1
	comp4_t r1, r2, r3, t;						\
d192 6
a197 6
	r1 = x;								\
	r2 = a;								\
	UNc_rb_MUL_UNc_rb (r1, r2, t);					\
	r2 = y;								\
	UNc_rb_MUL_UNc (r2, b, t);					\
	UNc_rb_ADD_UNc_rb (r1, r2, t);					\
d199 6
a204 6
	r2 = x >> G_SHIFT;						\
	r3 = a >> G_SHIFT;						\
	UNc_rb_MUL_UNc_rb (r2, r3, t);					\
	r3 = y >> G_SHIFT;						\
	UNc_rb_MUL_UNc (r3, b, t);					\
	UNc_rb_ADD_UNc_rb (r2, r3, t);					\
d206 1
a206 1
	x = r1 | (r2 << G_SHIFT);					\
d210 2
a211 2
   x_c = min(x_c + y_c, 255)
 */
d215 1
a215 1
	comp4_t r1, r2, r3, t;						\
d217 3
a219 3
	r1 = x & RB_MASK;						\
	r2 = y & RB_MASK;						\
	UNc_rb_ADD_UNc_rb (r1, r2, t);					\
d221 3
a223 3
	r2 = (x >> G_SHIFT) & RB_MASK;					\
	r3 = (y >> G_SHIFT) & RB_MASK;					\
	UNc_rb_ADD_UNc_rb (r2, r3, t);					\
d225 1
a225 1
	x = r1 | (r2 << G_SHIFT);					\
@

