head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.24
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.22
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.20
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.18
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.16
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.14
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.12
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.10
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.8
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v0_9_6:1.1.1.1
	xorg:1.1.1
	v0_9_5:1.1.1.1
	pixman:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2010.10.03.18.30.04;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.25.21.58.52;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.08.19.00.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.03.20.48.59;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.10.03.20.48.59;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to pixman 0.18.4.

Tweak build to use libpthread-stubs for TLS emulation instead of forcing
every application using pixman to use -pthread.

Tested by jasper@@ and landry@@ on a bulk ports build.
@
text
@/*
 * Copyright Â© 2004 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef rasterize_span
#endif

static void
RASTERIZE_EDGES (pixman_image_t  *image,
		pixman_edge_t	*l,
		pixman_edge_t	*r,
		pixman_fixed_t		t,
		pixman_fixed_t		b)
{
    pixman_fixed_t  y = t;
    uint32_t  *line;
    uint32_t *buf = (image)->bits.bits;
    int stride = (image)->bits.rowstride;
    int width = (image)->bits.width;

    line = buf + pixman_fixed_to_int (y) * stride;

    for (;;)
    {
	pixman_fixed_t	lx;
	pixman_fixed_t      rx;
	int	lxi;
	int rxi;

	lx = l->x;
	rx = r->x;
#if N_BITS == 1
	/* For the non-antialiased case, round the coordinates up, in effect
	 * sampling just slightly to the left of the pixel. This is so that
	 * when the sample point lies exactly on the line, we round towards
	 * north-west.
	 *
	 * (The AA case does a similar  adjustment in RENDER_SAMPLES_X)
	 */
	lx += X_FRAC_FIRST(1) - pixman_fixed_e;
	rx += X_FRAC_FIRST(1) - pixman_fixed_e;
#endif
	/* clip X */
	if (lx < 0)
	    lx = 0;
	if (pixman_fixed_to_int (rx) >= width)
#if N_BITS == 1
	    rx = pixman_int_to_fixed (width);
#else
	    /* Use the last pixel of the scanline, covered 100%.
	     * We can't use the first pixel following the scanline,
	     * because accessing it could result in a buffer overrun.
	     */
	    rx = pixman_int_to_fixed (width) - 1;
#endif

	/* Skip empty (or backwards) sections */
	if (rx > lx)
	{

	    /* Find pixel bounds for span */
	    lxi = pixman_fixed_to_int (lx);
	    rxi = pixman_fixed_to_int (rx);

#if N_BITS == 1
	    {

#define LEFT_MASK(x)							\
		(((x) & 0x1f) ?						\
		 SCREEN_SHIFT_RIGHT (0xffffffff, (x) & 0x1f) : 0)
#define RIGHT_MASK(x)							\
		(((32 - (x)) & 0x1f) ?					\
		 SCREEN_SHIFT_LEFT (0xffffffff, (32 - (x)) & 0x1f) : 0)
		
#define MASK_BITS(x,w,l,n,r) {						\
		    n = (w);						\
		    r = RIGHT_MASK ((x) + n);				\
		    l = LEFT_MASK (x);					\
		    if (l) {						\
			n -= 32 - ((x) & 0x1f);				\
			if (n < 0) {					\
			    n = 0;					\
			    l &= r;					\
			    r = 0;					\
			}						\
		    }							\
		    n >>= 5;						\
		}
		
		uint32_t  *a = line;
		uint32_t  startmask;
		uint32_t  endmask;
		int	    nmiddle;
		int	    width = rxi - lxi;
		int	    x = lxi;
		
		a += x >> 5;
		x &= 0x1f;
		
		MASK_BITS (x, width, startmask, nmiddle, endmask);

		if (startmask) {
		    WRITE(image, a, READ(image, a) | startmask);
		    a++;
		}
		while (nmiddle--)
		    WRITE(image, a++, 0xffffffff);
		if (endmask)
		    WRITE(image, a, READ(image, a) | endmask);
	    }
#else
	    {
		DEFINE_ALPHA(line,lxi);
		int	    lxs;
		int     rxs;

		/* Sample coverage for edge pixels */
		lxs = RENDER_SAMPLES_X (lx, N_BITS);
		rxs = RENDER_SAMPLES_X (rx, N_BITS);

		/* Add coverage across row */
		if (lxi == rxi)
		{
		    ADD_ALPHA (rxs - lxs);
		}
		else
		{
		    int	xi;

		    ADD_ALPHA (N_X_FRAC(N_BITS) - lxs);
		    STEP_ALPHA;
		    for (xi = lxi + 1; xi < rxi; xi++)
		    {
			ADD_ALPHA (N_X_FRAC(N_BITS));
			STEP_ALPHA;
		    }
		    ADD_ALPHA (rxs);
		}
	    }
#endif
	}

	if (y == b)
	    break;

#if N_BITS > 1
	if (pixman_fixed_frac (y) != Y_FRAC_LAST(N_BITS))
	{
	    RENDER_EDGE_STEP_SMALL (l);
	    RENDER_EDGE_STEP_SMALL (r);
	    y += STEP_Y_SMALL(N_BITS);
	}
	else
#endif
	{
	    RENDER_EDGE_STEP_BIG (l);
	    RENDER_EDGE_STEP_BIG (r);
	    y += STEP_Y_BIG(N_BITS);
	    line += stride;
	}
    }
}

#undef rasterize_span
@


1.3
log
@Update to pixman 0.16.6. Tested on a full ports build by naddy@@.
@
text
@d52 8
a59 4
	 * sampling the center of the pixel. (The AA case does a similar 
	 * adjustment in RENDER_SAMPLES_X) */
	lx += X_FRAC_FIRST(1);
	rx += X_FRAC_FIRST(1);
a84 8

#ifdef WORDS_BIGENDIAN
#   define SCREEN_SHIFT_LEFT(x,n)	((x) << (n))
#   define SCREEN_SHIFT_RIGHT(x,n)	((x) >> (n))
#else
#   define SCREEN_SHIFT_LEFT(x,n)	((x) >> (n))
#   define SCREEN_SHIFT_RIGHT(x,n)	((x) << (n))
#endif
@


1.2
log
@Update to pixman 0.10, with one small fix to the sse2 test in configure.ac.
@
text
@d23 1
a23 1
#ifndef rasterizeSpan
d27 1
a27 1
rasterizeEdges (pixman_image_t  *image,
d53 1
a53 1
	 * adjustment in RenderSamplesX) */
d81 31
d118 14
a131 13

		a += x >> FB_SHIFT;
		x &= FB_MASK;

		FbMaskBits (x, width, startmask, nmiddle, endmask);
		    if (startmask) {
			WRITE(image, a, READ(image, a) | startmask);
			a++;
		    }
		    while (nmiddle--)
			WRITE(image, a++, FB_ALLONES);
		    if (endmask)
			WRITE(image, a, READ(image, a) | endmask);
d135 1
a135 1
		DefineAlpha(line,lxi);
d140 2
a141 2
		lxs = RenderSamplesX (lx, N_BITS);
		rxs = RenderSamplesX (rx, N_BITS);
d146 1
a146 1
		    AddAlpha (rxs - lxs);
d152 2
a153 2
		    AddAlpha (N_X_FRAC(N_BITS) - lxs);
		    StepAlpha;
d156 2
a157 2
			AddAlpha (N_X_FRAC(N_BITS));
			StepAlpha;
d159 1
a159 1
		    AddAlpha (rxs);
d171 2
a172 2
	    RenderEdgeStepSmall (l);
	    RenderEdgeStepSmall (r);
d178 2
a179 2
	    RenderEdgeStepBig (l);
	    RenderEdgeStepBig (r);
d186 1
a186 1
#undef rasterizeSpan
@


1.1
log
@Initial revision
@
text
@a1 2
 * $Id$
 *
d36 3
a38 3
    int32_t stride = (image)->bits.rowstride;
    int32_t width = (image)->bits.width;
    
d40 1
a40 1
    
d47 10
a56 1
	
a57 1
	lx = l->x;
a59 1
	rx = r->x;
d61 1
d63 8
a70 1
	
d74 1
a74 1
	    
d78 1
a78 1
	    
d87 1
a87 1
		
d90 1
a90 1
		
d93 1
a93 1
			WRITE(a, READ(a) | startmask);
d97 1
a97 1
			WRITE(a++, FB_ALLONES);
d99 1
a99 1
			WRITE(a, READ(a) | endmask);
d106 1
a106 1
		
d110 1
a110 1
		
d119 1
a119 1
		    
d127 1
a127 6
		    /* Do not add in a 0 alpha here. This check is necessary
		     * to avoid a buffer overrun when rx is exactly on a pixel
		     * boundary.
		     */
		    if (rxs != 0)
			AddAlpha (rxs);
d132 1
a132 1
	
d135 1
a135 1
	
@


1.1.1.1
log
@import pixman 0.9.5
@
text
@@
