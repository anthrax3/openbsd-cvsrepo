head	1.14;
access;
symbols
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.13.0.6
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.2
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.12.0.6
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.2
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.6
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.4
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.10
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.6
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.4
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_3:1.6.0.2
	v1_0_4:1.1.1.2
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	v1_0_2:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2016.10.02.10.30.06;	author matthieu;	state Exp;
branches;
next	1.13;
commitid	dIw6ZfMRNQr88Y3V;

1.13
date	2015.05.10.09.24.43;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	FWNzaJOShCkxGfxz;

1.12
date	2013.09.28.17.25.09;	author matthieu;	state Exp;
branches;
next	1.11;

1.11
date	2012.06.11.19.16.00;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2012.04.08.14.59.44;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2011.06.02.13.40.14;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.31.11.31.12;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.23.19.37.48;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2008.02.09.18.08.49;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.30.13.42.29;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.07.10.08.36;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.01.09.02.02;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.28.11.19.24;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.16.55.53;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.55.53;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.09.30.13.33.23;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Remove local patch for platforms without shared libs
@
text
@
# Initialize Autoconf
AC_PREREQ([2.60])
AC_INIT([libXaw], [1.0.13],
        [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], [libXaw])
AC_CONFIG_SRCDIR([Makefile.am])
AC_CONFIG_HEADERS([config.h])

# Initialize Automake
AM_INIT_AUTOMAKE([foreign dist-bzip2])

# Initialize libtool
AC_PROG_LIBTOOL

# Require xorg-macros minimum of 1.12 for DocBook external references
m4_ifndef([XORG_MACROS_VERSION],
          [m4_fatal([must install xorg-macros 1.12 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.12)
XORG_DEFAULT_OPTIONS
XORG_ENABLE_SPECS
XORG_WITH_XMLTO(0.0.22)
XORG_WITH_FOP
XORG_WITH_XSLTPROC
XORG_CHECK_SGML_DOCTOOLS(1.8)

# Some compilers do not support per target -c and -o flags
AM_PROG_CC_C_O

# Checks for programs.
AC_PROG_AWK

# Need to call this explicitly since the first call to PKG_CHECK_MODULES
# is in an if statement, and later calls would break if it's skipped.
PKG_PROG_PKG_CONFIG

#
# fix libtool to set SONAME to libXaw.so.$major
#
AC_CONFIG_COMMANDS([libtool_hack], [
	cp -f libtool libtool_
	test -z "$SED" && SED=sed
	$SED '1,/^soname_spec/{
/^soname_spec/i\
# X.Org hack to match monolithic Xaw SONAME\
xorglibxawname="libXaw"
/^soname_spec/s/libname/xorglibxawname/
}' libtool_ > libtool
	rm -f libtool_
])

# OSX/Win32 rules are different.
platform_win32=no
platform_darwin=no
LIBEXT=so
case $host_os in
    cygwin*|mingw*)
	LIBEXT=dll.a
	platform_win32=yes
	;;
    darwin*)
	LIBEXT=dylib
	platform_darwin=yes
	;;
esac
AC_SUBST(LIBEXT)
AM_CONDITIONAL(PLATFORM_WIN32, test "x$platform_win32" = "xyes")
AM_CONDITIONAL(PLATFORM_DARWIN, test "x$platform_darwin" = "xyes")

# Whether to build Xaw6

AC_ARG_ENABLE(xaw6, AS_HELP_STRING([--disable-xaw6],
				[Disable building of libXaw.so.6]),
			[build_v6=$enableval], [build_v6=yes])

if test "x$build_v6" = xyes; then
   PKG_CHECK_MODULES(XAW6, xproto x11 xext xextproto xt xmu)
fi


# Whether to build Xaw7

AC_ARG_ENABLE(xaw7, AS_HELP_STRING([--disable-xaw7],
				[Disable building of libXaw.so.7]),
			[build_v7=$enableval], [build_v7=yes])

if test "x$build_v7" = xyes; then
   PKG_CHECK_MODULES(XAW7, xproto x11 xext xextproto xt xmu xpm)
fi


AM_CONDITIONAL(BUILD_XAW6, [test x$build_v6 = xyes])
AM_CONDITIONAL(BUILD_XAW7, [test x$build_v7 = xyes])

# Checks for header files.
AC_CHECK_HEADERS([wctype.h wchar.h widec.h])

# Checks for functions
AC_CHECK_FUNCS([iswalnum getpagesize])

# Link with winsock if mingw target
case $host_os in
	*mingw*)
		AC_CHECK_LIB([ws2_32],[main])
	;;
	*)
	;;
esac

AC_CONFIG_FILES([Makefile
		include/Makefile
		man/Makefile
		specs/Makefile
		src/Makefile])

if test "x$build_v6" = xyes; then
   AC_CONFIG_FILES(xaw6.pc)
fi

if test "x$build_v7" = xyes; then
   AC_CONFIG_FILES(xaw7.pc)
fi

AC_OUTPUT
@


1.13
log
@Update to libXaw 1.0.13
@
text
@a68 3
# some platforms don't even have shared libs
AM_CONDITIONAL(SHARED_LIBS, [test -f /usr/libexec/ld.so])

@


1.12
log
@Update to libXaw 1.0.12
@
text
@d4 1
a4 1
AC_INIT([libXaw], [1.0.12],
a10 1
AM_MAINTAINER_MODE
@


1.11
log
@Update to libXaw 1.0.11.
@
text
@d4 1
a4 1
AC_INIT([libXaw], [1.0.11],
d103 9
@


1.10
log
@Update to libXaw 1.0.10
@
text
@d4 1
a4 1
AC_INIT([libXaw], [1.0.10],
@


1.9
log
@Update to libXaw 1.0.9
@
text
@a0 1
dnl Process this file with autoconf to create configure.
d4 2
a5 2
AC_INIT([libXaw], [1.0.9],
	[https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], [libXaw])
d13 4
a16 1
# Require xorg-macros minimum of 1.10 for HAVE_STYLESHEETS in XORG_CHECK_SGML_DOCTOOLS
d18 2
a19 2
	  [m4_fatal([must install xorg-macros 1.10 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.10)
d22 1
a22 1
XORG_WITH_XMLTO(0.0.20)
d24 5
a28 1
XORG_CHECK_SGML_DOCTOOLS(1.5)
d30 1
a30 2
# Check for progs
AC_PROG_LIBTOOL
a31 1
AM_PROG_CC_C_O
d75 1
a75 1
AC_ARG_ENABLE(xaw6, AC_HELP_STRING([--disable-xaw6],
d86 1
a86 1
AC_ARG_ENABLE(xaw7, AC_HELP_STRING([--disable-xaw7],
a98 1
AC_HEADER_STDC
@


1.8
log
@Update to libXaw 1.0.8. No functionnal change.
@
text
@d3 1
d5 4
d10 1
a10 5
AC_INIT([libXaw],
	1.0.8,
	[https://bugs.freedesktop.org/enter_bug.cgi?product=xorg],
	libXaw)

a12 1
AM_CONFIG_HEADER(config.h)
d18 5
a24 1
AC_PROG_CC
a32 6
XORG_DEFAULT_OPTIONS
XORG_ENABLE_SPECS
XORG_WITH_XMLTO(0.0.20)
XORG_WITH_FOP
XORG_CHECK_SGML_DOCTOOLS(1.5)

d75 1
a75 1
# if test "x$build_v6" = xyes; then
d77 1
a77 3
   AC_SUBST(XAW6_CFLAGS)
   AC_SUBST(XAW6_LIBS)
# fi
d86 1
a86 1
# if test "x$build_v7" = xyes; then
d88 1
a88 3
   AC_SUBST(XAW7_CFLAGS)
   AC_SUBST(XAW7_LIBS)
# fi
d96 1
a96 9
AC_CHECK_HEADER(wctype.h,
       	AC_DEFINE([HAS_WCTYPE_H],1,
			[Define to 1 if you have the <wctype.h> header file.]))
AC_CHECK_HEADER(wchar.h,
       	AC_DEFINE([HAS_WCHAR_H],1,
			[Define to 1 if you have the <wchar.h> header file.]))
AC_CHECK_HEADER(widec.h, [],
       	AC_DEFINE([NO_WIDEC_H],1,
			[Define to 1 if you DO NOT have the <widec.h> header file.]))
d99 1
a99 1
AC_CHECK_FUNCS([iswalnum])
d101 5
a105 5
AC_OUTPUT([Makefile
	  include/Makefile
	  man/Makefile
	  specs/Makefile
	  src/Makefile])
d108 1
a108 1
   AC_OUTPUT(xaw6.pc)
d112 1
a112 1
   AC_OUTPUT(xaw7.pc)
d114 2
@


1.7
log
@Update libXaw to version 1.0.7.

This version removes support for Xprint.
@
text
@d3 1
a3 1
AC_PREREQ([2.57])
d6 1
a6 1
	1.0.7,
d10 1
a10 1
AM_INIT_AUTOMAKE([dist-bzip2])
d14 1
a14 1
# Require xorg-macros: XORG_WITH_LINT, XORG_DEFAULT_OPTIONS
d16 2
a17 2
	  [m4_fatal([must install xorg-macros 1.3 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.3)
d23 1
a23 22
AC_PROG_SED

AC_PATH_PROGS([GROFF], [groff], [none], [$PATH:/usr/gnu/bin])

AC_MSG_CHECKING([whether to build documentation])
AC_ARG_ENABLE(docs, AC_HELP_STRING([--enable-docs],
				   [Enable building of Xaw documentation]),
	      [build_docs="${enableval}"], [build_docs="auto"])

if test "x${build_docs}" = xauto; then
    if test "x${GROFF}" = xnone ; then
	build_docs=no
    else
	build_docs=yes
    fi
fi
AC_MSG_RESULT([${build_docs}])
if test "x${build_docs}" = xyes && test "x${GROFF}" = xnone ; then
    AC_MSG_ERROR([can't build documentation without groff])
fi

AM_CONDITIONAL(BUILD_DOCS, [test x$build_docs = xyes])
d30 4
d56 1
d118 1
a118 1
	  spec/Makefile
@


1.6
log
@Stop linking libXaw7.so.<n-1> to libXaw.so.7.<n-1>
Bump majors (needed but forgotten after previous libX11 bump).
After discussion with kettenis@@
@
text
@d6 1
a6 1
	1.0.4,
d14 5
d22 23
d50 2
d55 6
a60 7
AC_MSG_CHECKING([hacks in libtool for libXaw SONAME])
if grep "xorglibxawname" libtool > /dev/null ; then
	AC_MSG_RESULT([already done])
else
	ed libtool << \EOF
/^soname_spec/i
# X.Org hack to match monolithic Xaw SONAME
a61 1
.
d63 8
a70 7
w
q
EOF
	AC_MSG_RESULT([fixed])
fi

# Win32 DLL rules are different.
d75 3
a77 2
    *)
	platform_win32=no
d80 1
d82 1
a94 1

a107 1

a112 25
# Whether to build Xaw8

AC_ARG_ENABLE(xaw8, AC_HELP_STRING([--disable-xaw8],
				[Disable building of libXaw.so.8]),
			[build_v8=$enableval], [build_v8=auto])

if test "x$build_v8" = xyes || test "x$build_v8" = xauto; then
   PKG_CHECK_MODULES(XPRINT, xp, xprint_found=yes, xprint_found=no)

   if test "x$xprint_found" = xno; then
      if test "x$build_v8" = xyes; then
          AC_ERROR([
	    Xprint is required to build libXaw.so.8. You can disable
	    building of libXaw.so.8 by passing --disable-xaw8 to
	    configure])
      fi
      build_v8=no
   else
       PKG_CHECK_MODULES(XAW8, xproto x11 xext xextproto xt xmu xpm xp printproto xau)
       AC_SUBST(XAW8_CFLAGS)
       AC_SUBST(XAW8_LIBS)
       build_v8=yes
   fi
fi

a114 18
AM_CONDITIONAL(BUILD_XAW8, [test x$build_v8 = xyes])

if test x$build_v6 = xyes; then
	link_v6=yes
fi
AC_ARG_ENABLE(xaw6-symlink, AC_HELP_STRING([--disable-xaw8-symlink],
	[Disable symlink of libXaw6.so.6 to libXaw.so.6]),
	[link_v6=$enableval])
AM_CONDITIONAL(LINK_XAW6, [test x$link_v6 = xyes])

if test x$build_v7 = xyes; then
	link_v7=yes
fi
AC_ARG_ENABLE(xaw7-symlink, AC_HELP_STRING([--disable-xaw8-symlink],
	[Disable symlink of libXaw7.so.7 to libXaw.so.7]),
	[link_v7=$enableval])
AM_CONDITIONAL(LINK_XAW7, [test x$link_v7 = xyes])

a130 3
XORG_MANPAGE_SECTIONS
XORG_RELEASE_VERSION

d134 1
a142 4
fi

if test "x$build_v8" = xyes; then
   AC_OUTPUT(xaw8.pc)
@


1.5
log
@merge libXaw 1.0.4
@
text
@d112 17
@


1.4
log
@Don't install symlinks to non-existent shared libs on architectures
without shared libraries.
@
text
@d6 1
a6 1
	1.0.2,
d18 4
d123 3
@


1.3
log
@add AM_MAINTAINER_MODE
@
text
@d48 3
@


1.2
log
@Fix to make it possible to disable Xaw6.
@
text
@d11 1
a11 1

@


1.1
log
@Initial revision
@
text
@d54 1
a54 1
if test "x$build_v6" = xyes; then
d59 1
a59 1
fi
d68 1
a68 1
if test "x$build_v7" = xyes; then
d73 1
a73 1
fi
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@libXaw 1.0.4
@
text
@d6 1
a6 1
	1.0.4,
a17 4
# Need to call this explicitly since the first call to PKG_CHECK_MODULES
# is in an if statement, and later calls would break if it's skipped.
PKG_PROG_PKG_CONFIG

a115 3

# Checks for functions
AC_CHECK_FUNCS([iswalnum])
@

