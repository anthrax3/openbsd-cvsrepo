head	1.26;
access;
symbols
	OPENBSD_6_0:1.26.0.6
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.4
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.2
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.21.0.2
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.20.0.2
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.17.0.6
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.4
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.2
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.6
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.10.0.4
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.2
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_3:1.1.0.4
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.26
date	2015.07.07.12.52.54;	author kettenis;	state Exp;
branches;
next	1.25;
commitid	6cPW08BtfKMKLHba;

1.25
date	2015.07.06.12.49.35;	author kettenis;	state Exp;
branches;
next	1.24;
commitid	90nprlBPYsQAPNMz;

1.24
date	2015.06.24.19.26.20;	author kettenis;	state Exp;
branches;
next	1.23;
commitid	jAbt3frEI4NI8Qks;

1.23
date	2015.05.10.09.31.51;	author matthieu;	state Exp;
branches;
next	1.22;
commitid	oHH7rwfUXCSZpX6V;

1.22
date	2014.09.27.08.56.18;	author kettenis;	state Exp;
branches;
next	1.21;
commitid	Ar1E5y3aq6lZZFrA;

1.21
date	2014.08.06.17.00.09;	author jsg;	state Exp;
branches;
next	1.20;
commitid	OrRH5agwspB0gJnz;

1.20
date	2014.02.20.21.29.07;	author kettenis;	state Exp;
branches;
next	1.19;

1.19
date	2014.02.15.09.48.07;	author kettenis;	state Exp;
branches;
next	1.18;

1.18
date	2013.08.13.17.24.03;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2012.06.02.13.05.09;	author matthieu;	state Exp;
branches;
next	1.16;

1.16
date	2012.04.09.18.50.45;	author matthieu;	state Exp;
branches;
next	1.15;

1.15
date	2012.03.14.19.57.24;	author thib;	state Exp;
branches;
next	1.14;

1.14
date	2012.03.09.21.02.10;	author matthieu;	state Exp;
branches;
next	1.13;

1.13
date	2011.01.12.21.49.21;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2010.07.26.18.48.48;	author matthieu;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.10.18.56.27;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.17.09.03.14;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2009.02.15.19.10.52;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.07.17.58.38;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.07.17.42.21;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.25.11.40.56;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.03.23.22.37;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2008.10.13.21.08.13;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.20.16.35.17;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.24.14.14.00;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.06.21.01.25;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Only include <sys/memrange.h> on i386/amd64 as it really isi
architecture-specific.  This prevents us from trying to establish
write-combining mappings on other architectures, which in turn makes
non-kms pci video drivers work again on those platforms.

ok mlarkin@@
@
text
@/*
 * Copyright (c) 2008, 2011 Mark Kettenis
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/ioctl.h>
#if defined(__i386__) || defined(__amd64__)
#include <sys/memrange.h>
#endif
#include <sys/mman.h>
#include <sys/pciio.h>
#include <sys/sysctl.h>
#include <machine/cpu.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcidevs.h>

#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "pciaccess.h"
#include "pciaccess_private.h"

/*
 * This should allow for 16 domains, which should cover everything
 * except perhaps the really big fridge-sized sparc64 server machines
 * that are unlikely to have any graphics hardware in them.
 */
static int pcifd[16];
static int ndomains;

static int aperturefd = -1;

static int
pci_read(int domain, int bus, int dev, int func, uint32_t reg, uint32_t *val)
{
	struct pci_io io;
	int err;

	bzero(&io, sizeof(io));
	io.pi_sel.pc_bus = bus;
	io.pi_sel.pc_dev = dev;
	io.pi_sel.pc_func = func;
	io.pi_reg = reg;
	io.pi_width = 4;

	err = ioctl(pcifd[domain], PCIOCREAD, &io);
	if (err)
		return (err);

	*val = io.pi_data;

	return 0;
}

static int
pci_write(int domain, int bus, int dev, int func, uint32_t reg, uint32_t val)
{
	struct pci_io io;

	bzero(&io, sizeof(io));
	io.pi_sel.pc_bus = bus;
	io.pi_sel.pc_dev = dev;
	io.pi_sel.pc_func = func;
	io.pi_reg = reg;
	io.pi_width = 4;
	io.pi_data = val;

	return ioctl(pcifd[domain], PCIOCWRITE, &io);
}

static int
pci_readmask(int domain, int bus, int dev, int func, uint32_t reg,
    uint32_t *val)
{
	struct pci_io io;
	int err;

	bzero(&io, sizeof(io));
	io.pi_sel.pc_bus = bus;
	io.pi_sel.pc_dev = dev;
	io.pi_sel.pc_func = func;
	io.pi_reg = reg;
	io.pi_width = 4;

	err = ioctl(pcifd[domain], PCIOCREADMASK, &io);
	if (err)
		return (err);

	*val = io.pi_data;

	return 0;
}

/**
 * Read a VGA ROM
 *
 */
static int
pci_device_openbsd_read_rom(struct pci_device *device, void *buffer)
{
	struct pci_device_private *priv = (struct pci_device_private *)device;
	unsigned char *bios;
	pciaddr_t rom_base;
	pciaddr_t rom_size;
	u_int32_t csr, rom;
	int pci_rom, domain, bus, dev, func;

	domain = device->domain;
	if (domain < 0 || domain >= ndomains)
		return ENXIO;

	bus = device->bus;
	dev = device->dev;
	func = device->func;

	if (aperturefd == -1)
		return ENOSYS;

	if (priv->base.rom_size == 0) {
#if defined(__alpha__) || defined(__amd64__) || defined(__i386__)
		if ((device->device_class & 0x00ffff00) ==
		    ((PCI_CLASS_DISPLAY << 16) |
			(PCI_SUBCLASS_DISPLAY_VGA << 8))) {
			rom_base = 0xc0000;
			rom_size = 0x10000;
			pci_rom = 0;
		} else
#endif
			return ENOSYS;
	} else {
		rom_base = priv->rom_base;
		rom_size = priv->base.rom_size;
		pci_rom = 1;

		pci_read(domain, bus, dev, func, PCI_COMMAND_STATUS_REG, &csr);
		pci_write(domain, bus, dev, func, PCI_COMMAND_STATUS_REG,
		    csr | PCI_COMMAND_MEM_ENABLE);
		pci_read(domain, bus, dev, func, PCI_ROM_REG, &rom);
		pci_write(domain, bus, dev, func, PCI_ROM_REG,
		    rom | PCI_ROM_ENABLE);
	}

	bios = mmap(NULL, rom_size, PROT_READ, MAP_SHARED,
	    aperturefd, (off_t)rom_base);
	if (bios == MAP_FAILED)
		return errno;

	memcpy(buffer, bios, rom_size);
	munmap(bios, rom_size);

	if (pci_rom) {
		/* Restore PCI config space */
		pci_write(domain, bus, dev, func, PCI_ROM_REG, rom);
		pci_write(domain, bus, dev, func, PCI_COMMAND_STATUS_REG, csr);
	}
	return 0;
}

static int
pci_nfuncs(int domain, int bus, int dev)
{
	uint32_t hdr;

	if (domain < 0 || domain >= ndomains)
		return ENXIO;

	if (pci_read(domain, bus, dev, 0, PCI_BHLC_REG, &hdr) != 0)
		return -1;

	return (PCI_HDRTYPE_MULTIFN(hdr) ? 8 : 1);
}

static int
pci_device_openbsd_map_range(struct pci_device *dev,
    struct pci_device_mapping *map)
{
	int prot = PROT_READ;
	off_t addr = map->base;

	if (map->flags & PCI_DEV_MAP_FLAG_WRITABLE)
		prot |= PROT_WRITE;

#ifdef MEMRANGE_WC_RANGE
	if (map->flags & PCI_DEV_MAP_FLAG_WRITE_COMBINE)
		addr += MEMRANGE_WC_RANGE;
#endif

	map->memory = mmap(NULL, map->size, prot, MAP_SHARED, aperturefd,
	    addr);
	if (map->memory == MAP_FAILED)
		return  errno;
#if defined(__i386__) || defined(__amd64__)
	/* No need to set an MTRR if it's the default mode. */
	if ((map->flags & PCI_DEV_MAP_FLAG_CACHABLE) ||
	    (map->flags & PCI_DEV_MAP_FLAG_WRITE_COMBINE)) {
		struct mem_range_desc mr;
		struct mem_range_op mo;

		mr.mr_base = map->base;
		mr.mr_len = map->size;
		mr.mr_flags = 0;
		if (map->flags & PCI_DEV_MAP_FLAG_CACHABLE)
			mr.mr_flags |= MDF_WRITEBACK;
		if (map->flags & PCI_DEV_MAP_FLAG_WRITE_COMBINE)
			mr.mr_flags |= MDF_WRITECOMBINE;
		strlcpy(mr.mr_owner, "pciaccess", sizeof(mr.mr_owner));

		mo.mo_desc = &mr;
		mo.mo_arg[0] = MEMRANGE_SET_UPDATE;

		if (ioctl(aperturefd, MEMRANGE_SET, &mo))
			(void)fprintf(stderr, "mtrr set %lx %lx failed: %s\n",
			    (intptr_t)map->base, (intptr_t)map->size,
			    strerror(errno));
	}
#endif
	return 0;
}

static int
pci_device_openbsd_unmap_range(struct pci_device *dev,
    struct pci_device_mapping *map)
{
#if defined(__i386__) || defined(__amd64__)
	if ((map->flags & PCI_DEV_MAP_FLAG_CACHABLE) ||
	    (map->flags & PCI_DEV_MAP_FLAG_WRITE_COMBINE)) {
		struct mem_range_desc mr;
		struct mem_range_op mo;

		mr.mr_base = map->base;
		mr.mr_len = map->size;
		mr.mr_flags = MDF_UNCACHEABLE;
		strlcpy(mr.mr_owner, "pciaccess", sizeof(mr.mr_owner));

		mo.mo_desc = &mr;
		mo.mo_arg[0] = MEMRANGE_SET_REMOVE;

		(void)ioctl(aperturefd, MEMRANGE_SET, &mo);
	}
#endif
	return pci_device_generic_unmap_range(dev, map);
}

static int
pci_device_openbsd_read(struct pci_device *dev, void *data,
    pciaddr_t offset, pciaddr_t size, pciaddr_t *bytes_read)
{
	struct pci_io io;

	io.pi_sel.pc_bus = dev->bus;
	io.pi_sel.pc_dev = dev->dev;
	io.pi_sel.pc_func = dev->func;

	*bytes_read = 0;
	while (size > 0) {
		int toread = MIN(size, 4 - (offset & 0x3));

		io.pi_reg = (offset & ~0x3);
		io.pi_width = 4;

		if (ioctl(pcifd[dev->domain], PCIOCREAD, &io) == -1)
			return errno;

		io.pi_data = htole32(io.pi_data);
		io.pi_data >>= ((offset & 0x3) * 8);

		memcpy(data, &io.pi_data, toread);

		offset += toread;
		data = (char *)data + toread;
		size -= toread;
		*bytes_read += toread;
	}

	return 0;
}

static int
pci_device_openbsd_write(struct pci_device *dev, const void *data,
    pciaddr_t offset, pciaddr_t size, pciaddr_t *bytes_written)
{
	struct pci_io io;

	if ((offset % 4) != 0 || (size % 4) != 0)
		return EINVAL;

	io.pi_sel.pc_bus = dev->bus;
	io.pi_sel.pc_dev = dev->dev;
	io.pi_sel.pc_func = dev->func;

	*bytes_written = 0;
	while (size > 0) {
		io.pi_reg = offset;
		io.pi_width = 4;
		memcpy(&io.pi_data, data, 4);

		if (ioctl(pcifd[dev->domain], PCIOCWRITE, &io) == -1)
			return errno;

		offset += 4;
		data = (const char *)data + 4;
		size -= 4;
		*bytes_written += 4;
	}

	return 0;
}

static void
pci_system_openbsd_destroy(void)
{
	int domain;

	for (domain = 0; domain < ndomains; domain++)
		close(pcifd[domain]);
	ndomains = 0;
}

static int
pci_device_openbsd_probe(struct pci_device *device)
{
	struct pci_device_private *priv = (struct pci_device_private *)device;
	struct pci_mem_region *region;
	uint64_t reg64, size64;
	uint32_t bar, reg, size;
	int domain, bus, dev, func, err;

	domain = device->domain;
	bus = device->bus;
	dev = device->dev;
	func = device->func;

	err = pci_read(domain, bus, dev, func, PCI_BHLC_REG, &reg);
	if (err)
		return err;

	priv->header_type = PCI_HDRTYPE_TYPE(reg);
	if (priv->header_type != 0)
		return 0;

	region = device->regions;
	for (bar = PCI_MAPREG_START; bar < PCI_MAPREG_END;
	     bar += sizeof(uint32_t), region++) {
		err = pci_read(domain, bus, dev, func, bar, &reg);
		if (err)
			return err;

		/* Probe the size of the region. */
		err = pci_readmask(domain, bus, dev, func, bar, &size);
		if (err)
			return err;

		if (PCI_MAPREG_TYPE(reg) == PCI_MAPREG_TYPE_IO) {
			region->is_IO = 1;
			region->base_addr = PCI_MAPREG_IO_ADDR(reg);
			region->size = PCI_MAPREG_IO_SIZE(size);
		} else {
			if (PCI_MAPREG_MEM_PREFETCHABLE(reg))
				region->is_prefetchable = 1;
			switch(PCI_MAPREG_MEM_TYPE(reg)) {
			case PCI_MAPREG_MEM_TYPE_32BIT:
			case PCI_MAPREG_MEM_TYPE_32BIT_1M:
				region->base_addr = PCI_MAPREG_MEM_ADDR(reg);
				region->size = PCI_MAPREG_MEM_SIZE(size);
				break;
			case PCI_MAPREG_MEM_TYPE_64BIT:
				region->is_64 = 1;

				reg64 = reg;
				size64 = size;

				bar += sizeof(uint32_t);

				err = pci_read(domain, bus, dev, func, bar, &reg);
				if (err)
					return err;
				reg64 |= (uint64_t)reg << 32;

				err = pci_readmask(domain, bus, dev, func, bar, &size);
				if (err)
					return err;
				size64 |= (uint64_t)size << 32;

				region->base_addr = PCI_MAPREG_MEM64_ADDR(reg64);
				region->size = PCI_MAPREG_MEM64_SIZE(size64);
				region++;
				break;
			}
		}
	}

	/* Probe expansion ROM if present */
	err = pci_read(domain, bus, dev, func, PCI_ROM_REG, &reg);
	if (err)
		return err;
	if (reg != 0) {
		err = pci_write(domain, bus, dev, func, PCI_ROM_REG, ~PCI_ROM_ENABLE);
		if (err)
			return err;
		pci_read(domain, bus, dev, func, PCI_ROM_REG, &size);
		pci_write(domain, bus, dev, func, PCI_ROM_REG, reg);

		if (PCI_ROM_ADDR(reg) != 0) {
			priv->rom_base = PCI_ROM_ADDR(reg);
			device->rom_size = PCI_ROM_SIZE(size);
		}
	}
	return 0;
}

static int
pci_device_openbsd_boot_vga(struct pci_device *dev)
{
	struct pci_vga pv;
	int err;

	if (dev->domain != 0)
		return 0;

	pv.pv_sel.pc_bus = 0;
	pv.pv_sel.pc_dev = 0;
	pv.pv_sel.pc_func = 0;
	err = ioctl(pcifd[0], PCIOCGETVGA, &pv);
	if (err)
		return 0;

	if (dev->bus == pv.pv_sel.pc_bus &&
	    dev->dev == pv.pv_sel.pc_dev &&
	    dev->func == pv.pv_sel.pc_func)
		return 1;

	return 0;
}

#if defined(__i386__) || defined(__amd64__)
#include <machine/sysarch.h>
#include <machine/pio.h>
#endif

static struct pci_io_handle *legacy_io_handle = NULL;

static struct pci_io_handle *
pci_device_openbsd_open_legacy_io(struct pci_io_handle *ret,
    struct pci_device *dev, pciaddr_t base, pciaddr_t size)
{
#if defined(__i386__)
	struct i386_iopl_args ia;
#elif defined(__amd64__)
	struct amd64_iopl_args ia;
#endif

	/* With X server privilege separation, i/o access is 
	   enabled early and never disabled, allow recursive, 
	   privilege-less calls */
	if (legacy_io_handle != NULL) {
		ret->base = legacy_io_handle->base;
		ret->size = legacy_io_handle->size;
		ret->memory = legacy_io_handle->memory;
		ret->is_legacy = 1;
		return ret;
	}
#if defined(__i386__)
	ia.iopl = 1;
	if (sysarch(I386_IOPL, &ia))
		return NULL;
#elif defined(__amd64__)
	ia.iopl = 1;
	if (sysarch(AMD64_IOPL, &ia))
		return NULL;
#elif defined(PCI_MAGIC_IO_RANGE)
	ret->memory = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED,
	    aperturefd, PCI_MAGIC_IO_RANGE + base);
	if (ret->memory == MAP_FAILED)
		return NULL;
#else
	return NULL;
#endif
	ret->base = base;
	ret->size = size;
	legacy_io_handle = ret;
	return ret;
}

static uint32_t
pci_device_openbsd_read32(struct pci_io_handle *handle, uint32_t reg)
{
#if defined(__i386__) || defined(__amd64__)
	return inl(handle->base + reg);
#else
	return *(uint32_t *)((uintptr_t)handle->memory + reg);
#endif
}

static uint16_t
pci_device_openbsd_read16(struct pci_io_handle *handle, uint32_t reg)
{
#if defined(__i386__) || defined(__amd64__)
	return inw(handle->base + reg);
#else
	return *(uint16_t *)((uintptr_t)handle->memory + reg);
#endif
}

static uint8_t
pci_device_openbsd_read8(struct pci_io_handle *handle, uint32_t reg)
{
#if defined(__i386__) || defined(__amd64__)
	return inb(handle->base + reg);
#else
	return *(uint8_t *)((uintptr_t)handle->memory + reg);
#endif
}

static void
pci_device_openbsd_write32(struct pci_io_handle *handle, uint32_t reg,
    uint32_t data)
{
#if defined(__i386__) || defined(__amd64__)
	outl(handle->base + reg, data);
#else
	*(uint16_t *)((uintptr_t)handle->memory + reg) = data;
#endif
}

static void
pci_device_openbsd_write16(struct pci_io_handle *handle, uint32_t reg,
    uint16_t data)
{
#if defined(__i386__) || defined(__amd64__)
	outw(handle->base + reg, data);
#else
	*(uint8_t *)((uintptr_t)handle->memory + reg) = data;
#endif
}

static void
pci_device_openbsd_write8(struct pci_io_handle *handle, uint32_t reg,
    uint8_t data)
{
#if defined(__i386__) || defined(__amd64__)
	outb(handle->base + reg, data);
#else
	*(uint32_t *)((uintptr_t)handle->memory + reg) = data;
#endif
}

static int
pci_device_openbsd_map_legacy(struct pci_device *dev, pciaddr_t base,
    pciaddr_t size, unsigned map_flags, void **addr)
{
	struct pci_device_mapping map;
	int err;

	map.base = base;
	map.size = size;
	map.flags = map_flags;
	map.memory = NULL;
	err = pci_device_openbsd_map_range(dev, &map);
	*addr = map.memory;

	return err;
}

static int
pci_device_openbsd_unmap_legacy(struct pci_device *dev, void *addr,
    pciaddr_t size)
{
	struct pci_device_mapping map;

	map.memory = addr;
	map.size = size;
	map.flags = 0;
	return pci_device_openbsd_unmap_range(dev, &map);
}

static const struct pci_system_methods openbsd_pci_methods = {
	pci_system_openbsd_destroy,
	NULL,
	pci_device_openbsd_read_rom,
	pci_device_openbsd_probe,
	pci_device_openbsd_map_range,
	pci_device_openbsd_unmap_range,
	pci_device_openbsd_read,
	pci_device_openbsd_write,
	pci_fill_capabilities_generic,
	NULL,
	pci_device_openbsd_boot_vga,
	NULL,
	NULL,
	pci_device_openbsd_open_legacy_io,
	NULL,
	pci_device_openbsd_read32,
	pci_device_openbsd_read16,
	pci_device_openbsd_read8,
	pci_device_openbsd_write32,
	pci_device_openbsd_write16,
	pci_device_openbsd_write8,
	pci_device_openbsd_map_legacy,
	pci_device_openbsd_unmap_legacy
};

int
pci_system_openbsd_create(void)
{
	struct pci_device_private *device;
	int domain, bus, dev, func, ndevs, nfuncs;
	char path[MAXPATHLEN];
	uint32_t reg;

	if (ndomains > 0)
		return 0;

	pci_sys = calloc(1, sizeof(struct pci_system));
	if (pci_sys == NULL)
		return ENOMEM;

	pci_sys->methods = &openbsd_pci_methods;

	for (domain = 0; domain < sizeof(pcifd) / sizeof(pcifd[0]); domain++) {
		snprintf(path, sizeof(path), "/dev/pci%d", domain);
	        pcifd[domain] = open(path, O_RDWR | O_CLOEXEC);
		if (pcifd[domain] == -1) {
			pcifd[domain] = open(path, O_RDONLY | O_CLOEXEC);
			if (pcifd[domain] == -1)
				break;
		}
		ndomains++;
	}

	if (ndomains == 0)
		return ENXIO;

	ndevs = 0;
	for (domain = 0; domain < ndomains; domain++) {
		for (bus = 0; bus < 256; bus++) {
			for (dev = 0; dev < 32; dev++) {
				nfuncs = pci_nfuncs(domain, bus, dev);
				for (func = 0; func < nfuncs; func++) {
					if (pci_read(domain, bus, dev, func,
					    PCI_ID_REG, &reg) != 0)
						continue;
					if (PCI_VENDOR(reg) == PCI_VENDOR_INVALID ||
					    PCI_VENDOR(reg) == 0)
						continue;

					ndevs++;
				}
			}
		}
	}

	pci_sys->num_devices = ndevs;
	pci_sys->devices = calloc(ndevs, sizeof(struct pci_device_private));
	if (pci_sys->devices == NULL) {
		free(pci_sys);
		pci_sys = NULL;
		for (domain = 0; domain < ndomains; domain++)
			close(pcifd[domain]);
		ndomains = 0;
		return ENOMEM;
	}

	device = pci_sys->devices;
	for (domain = 0; domain < ndomains; domain++) {
		for (bus = 0; bus < 256; bus++) {
			for (dev = 0; dev < 32; dev++) {
				nfuncs = pci_nfuncs(domain, bus, dev);
				for (func = 0; func < nfuncs; func++) {
					if (pci_read(domain, bus, dev, func,
					    PCI_ID_REG, &reg) != 0)
						continue;
					if (PCI_VENDOR(reg) == PCI_VENDOR_INVALID ||
					    PCI_VENDOR(reg) == 0)
						continue;

					device->base.domain = domain;
					device->base.bus = bus;
					device->base.dev = dev;
					device->base.func = func;
					device->base.vendor_id = PCI_VENDOR(reg);
					device->base.device_id = PCI_PRODUCT(reg);

					if (pci_read(domain, bus, dev, func,
					    PCI_CLASS_REG, &reg) != 0)
						continue;

					device->base.device_class =
					    PCI_INTERFACE(reg) |
					    PCI_CLASS(reg) << 16 |
					    PCI_SUBCLASS(reg) << 8;
					device->base.revision = PCI_REVISION(reg);

					if (pci_read(domain, bus, dev, func,
					    PCI_SUBVEND_0, &reg) != 0)
						continue;

					device->base.subvendor_id = PCI_VENDOR(reg);
					device->base.subdevice_id = PCI_PRODUCT(reg);

					device++;
				}
			}
		}
	}

	return 0;
}

void
pci_system_openbsd_init_dev_mem(int fd)
{
	aperturefd = fd;
}

int
pci_device_vgaarb_init(void)
{
	struct pci_device *dev = pci_sys->vga_target;
	struct pci_device_iterator *iter;
	struct pci_id_match vga_match = {
		PCI_MATCH_ANY, PCI_MATCH_ANY, PCI_MATCH_ANY, PCI_MATCH_ANY,
		(PCI_CLASS_DISPLAY << 16) | (PCI_SUBCLASS_DISPLAY_VGA << 8),
		0x00ffff00
	};
	struct pci_vga pv;
	int err;

#ifdef CPU_ALLOWAPERTURE
	int mib[2];
	int allowaperture;
	size_t len;

	mib[0] = CTL_MACHDEP;
	mib[1] = CPU_ALLOWAPERTURE;
	len = sizeof(allowaperture);
	if (sysctl(mib, 2, &allowaperture, &len, NULL, 0) == 0 &&
	    allowaperture == 0) {
		/* No direct hardware access allowed. */
		pci_sys->vga_count = 0;
		return 0;
	}
#endif

	pv.pv_sel.pc_bus = 0;
	pv.pv_sel.pc_dev = 0;
	pv.pv_sel.pc_func = 0;
	err = ioctl(pcifd[0], PCIOCGETVGA, &pv);
	if (err)
		return err;

	pci_sys->vga_target = pci_device_find_by_slot(0, pv.pv_sel.pc_bus,
	    pv.pv_sel.pc_dev, pv.pv_sel.pc_func);

	/* Count the number of VGA devices in domain 0. */
	iter = pci_id_match_iterator_create(&vga_match);
	if (iter == NULL)
		return -1;
	pci_sys->vga_count = 0;
	while ((dev = pci_device_next(iter)) != NULL) {
		if (dev->domain == 0) {
			pci_sys->vga_count++;
			pv.pv_sel.pc_bus = dev->bus;
			pv.pv_sel.pc_dev = dev->dev;
			pv.pv_sel.pc_func = dev->func;
			if (ioctl(pcifd[0], PCIOCGETVGA, &pv))
				continue;
			if (pv.pv_decode)
				dev->vgaarb_rsrc = 
				    VGA_ARB_RSRC_LEGACY_IO |
				    VGA_ARB_RSRC_LEGACY_MEM;
		}
	}
	pci_iterator_destroy(iter);

	return 0;
}

void
pci_device_vgaarb_fini(void)
{
	struct pci_device *dev;
	struct pci_vga pv;

	if (pci_sys == NULL)
		return;
	dev = pci_sys->vga_target;
	if (dev == NULL)
		return;

	pv.pv_sel.pc_bus = dev->bus;
	pv.pv_sel.pc_dev = dev->dev;
	pv.pv_sel.pc_func = dev->func;
	pv.pv_lock = PCI_VGA_UNLOCK;
	ioctl(pcifd[dev->domain], PCIOCSETVGA, &pv);
}

int
pci_device_vgaarb_set_target(struct pci_device *dev)
{
	pci_sys->vga_target = dev;
	return (0);
}

int
pci_device_vgaarb_lock(void)
{
	struct pci_device *dev = pci_sys->vga_target;
	struct pci_vga pv;

	if (dev == NULL)
		return -1;

	if (dev->vgaarb_rsrc == 0 || pci_sys->vga_count == 1)
		return 0;

	pv.pv_sel.pc_bus = dev->bus;
	pv.pv_sel.pc_dev = dev->dev;
	pv.pv_sel.pc_func = dev->func;
	pv.pv_lock = PCI_VGA_LOCK;
	return ioctl(pcifd[dev->domain], PCIOCSETVGA, &pv);
}

int
pci_device_vgaarb_unlock(void)
{
	struct pci_device *dev = pci_sys->vga_target;
	struct pci_vga pv;

	if (dev == NULL)
		return -1;

	if (dev->vgaarb_rsrc == 0 || pci_sys->vga_count == 1)
		return 0;

	pv.pv_sel.pc_bus = dev->bus;
	pv.pv_sel.pc_dev = dev->dev;
	pv.pv_sel.pc_func = dev->func;
	pv.pv_lock = PCI_VGA_UNLOCK;
	return ioctl(pcifd[dev->domain], PCIOCSETVGA, &pv);
}

int
pci_device_vgaarb_get_info(struct pci_device *dev, int *vga_count,
    int *rsrc_decodes)
{
	*vga_count = pci_sys->vga_count;

	if (dev)
		*rsrc_decodes = dev->vgaarb_rsrc;

	return 0;
}

int
pci_device_vgaarb_decodes(int rsrc_decodes)
{
	struct pci_device *dev = pci_sys->vga_target;

	if (dev == NULL)
		return -1;

	dev->vgaarb_rsrc = rsrc_decodes;
	return 0;
}
@


1.25
log
@Fix typo/pasto in previous commit; request write combining mapping when it
is actually requested and not for every writable mapping.
@
text
@d19 1
d21 1
a193 2
	struct mem_range_desc mr;
	struct mem_range_op mo;
d213 3
a241 3
	struct mem_range_desc mr;
	struct mem_range_op mo;

d244 3
@


1.24
log
@Attempt to establish a write combining mapping instead of relying on mttrs.
Setting the mttrs failson my thinkpad x1 rev 3, making the xorg-video-vesa
driver painfully slow.  This makes the machine somewhat usable.

ok mpi@@
@
text
@d201 1
a201 1
	if (map->flags & PCI_DEV_MAP_FLAG_WRITABLE)
@


1.23
log
@update to libpciaccess 0.13.4
@
text
@d195 1
d200 5
d206 1
a206 1
	    map->base);
@


1.22
log
@Use PCIOCREADMASK to size the PCI BARs.  This makes more parts of libpciaccess
usable when machdep.allowaperture is zero.

ok matthieu@@
@
text
@d467 1
@


1.21
log
@calloc the pci_sys struct before probing for PCI.
As the functions check if the member pointers are NULL but not the
pointer to the struct itself.

Reworked version of a diff from ratchov@@ who created it to prevent a
xserver crash on zaurus where there is no PCI.

'looks ok' matthieu@@, ok deraadt@@
@
text
@d86 23
d357 1
a357 1
		err = pci_write(domain, bus, dev, func, bar, ~0);
a359 2
		pci_read(domain, bus, dev, func, bar, &size);
		pci_write(domain, bus, dev, func, bar, reg);
d387 1
a387 1
				err = pci_write(domain, bus, dev, func, bar, ~0);
a389 2
				pci_read(domain, bus, dev, func, bar, &size);
				pci_write(domain, bus, dev, func, bar, reg64 >> 32);
@


1.20
log
@We don't need the VGA arbiter if direct hardware access has been disabled.

ok matthieu@@
@
text
@d601 6
a619 10

	pci_sys = calloc(1, sizeof(struct pci_system));
	if (pci_sys == NULL) {
		for (domain = 0; domain < ndomains; domain++)
			close(pcifd[domain]);
		ndomains = 0;
		return ENOMEM;
	}

	pci_sys->methods = &openbsd_pci_methods;
@


1.19
log
@If opening /dev/pciN read-write fails, try opening it read-only.  This allows
X to run with machdep.allowaperture=0 on inteldrm(4) and radeondrm(4).

ok matthieu@@
@
text
@d22 2
d719 16
@


1.18
log
@Improve VGA arbiter support now that the kernel gives us information about
the resources required by a particular device.

ok matthieu@@, jsg@@
@
text
@d602 5
a606 2
		if (pcifd[domain] == -1)
			break;
@


1.17
log
@Add support for X server privilege separation to pci_legacy_open_io()

With privilege separation the X server enables legacy i/o port
access during the early privileged initialization. Other calls
should be no-op.

Makes X server 1.12 happy with privilege separation.

ok miod@@
@
text
@d398 24
d573 1
a573 1
	NULL,
a686 4
					device->base.vgaarb_rsrc =
					    VGA_ARB_RSRC_LEGACY_IO |
					    VGA_ARB_RSRC_LEGACY_MEM;

d731 1
a731 1
		if (dev->domain == 0)
d733 10
a783 1
#if 0
a785 4
#else
	if (pci_sys->vga_count == 1)
		return 0;
#endif
a802 1
#if 0
a804 4
#else
	if (pci_sys->vga_count == 1)
		return 0;
#endif
@


1.16
log
@Update to libpciaccess 0.13.1
@
text
@d284 1
a284 1
		data = (char *)data + 4;
d403 2
d411 3
d415 10
a427 4

	ret->base = base;
	ret->size = size;
	return ret;
a428 2
	struct amd64_iopl_args ia;

a431 4

	ret->base = base;
	ret->size = size;
	return ret;
d437 3
a439 1

d442 1
a443 3
#else
	return NULL;
#endif
@


1.15
log
@Fix openbsd_pci.c:pci_device_vgaarb_set_target();

A return (0) got lost, add it back.
Obvious; ok kettenis@@
@
text
@d572 1
a572 1
	        pcifd[domain] = open(path, O_RDWR);
@


1.14
log
@Update to libpciaccess 0.13. Tested by shadchin@@
@
text
@d737 1
@


1.13
log
@Indicate that devices need access to legacy VGA resources.  Makes sure xserver
disables DRI if the VGA arbiter is in use.

ok matthieu@@
@
text
@d2 1
a2 1
 * Copyright (c) 2008 Mark Kettenis
d195 2
a196 1
			(void)fprintf(stderr, "mtrr set failed: %s\n",
d398 135
d542 15
a556 1
	pci_fill_capabilities_generic
a736 1
	return 0;
@


1.12
log
@avoid segfault in pci_device_vgaarb_fini() when called without
initializing the library first. (This happens when invalid options
are passed to X for instance). ok kettenis@@
@
text
@d508 4
@


1.11
log
@Update to libpciaccess 0.11, with VGA arbiter support code from kettenis@@.
@
text
@d563 1
a563 1
	struct pci_device *dev = pci_sys->vga_target;
d566 3
@


1.10
log
@Use the correct size when mapping the legacy vga rom.

fixes errors (and probably bugs) on intel hardware (at the least).

ok matthieu@@
@
text
@d522 132
@


1.9
log
@Make libpciaccess domain-aware.  Makes X capable of discovering PCI devices
in other domains (on macppc or sparc64 for example).

ok matthieu@@
@
text
@d138 2
a139 2
	memcpy(buffer, bios, device->rom_size);
	munmap(bios, device->rom_size);
@


1.8
log
@Remove trailing white space.
@
text
@d36 8
a43 1
static int pcifd = -1;
d47 1
a47 1
pci_read(int bus, int dev, int func, uint32_t reg, uint32_t *val)
d59 1
a59 1
	err = ioctl(pcifd, PCIOCREAD, &io);
d65 1
a65 1
	return (0);
d69 1
a69 1
pci_write(int bus, int dev, int func, uint32_t reg, uint32_t val)
d81 1
a81 1
	return ioctl(pcifd, PCIOCWRITE, &io);
d96 5
a100 1
	int pci_rom, bus, dev, func;
d125 2
a126 2
		pci_read(bus, dev, func, PCI_COMMAND_STATUS_REG, &csr);
		pci_write(bus, dev, func, PCI_COMMAND_STATUS_REG,
d128 3
a130 2
		pci_read(bus, dev, func, PCI_ROM_REG, &rom);
		pci_write(bus, dev, func, PCI_ROM_REG, rom | PCI_ROM_ENABLE);
d143 2
a144 2
		pci_write(bus, dev, func, PCI_ROM_REG, rom);
		pci_write(bus, dev, func, PCI_COMMAND_STATUS_REG, csr);
d150 1
a150 1
pci_nfuncs(int bus, int dev)
d154 4
a157 1
	if (pci_read(bus, dev, 0, PCI_BHLC_REG, &hdr) != 0)
d243 1
a243 1
		if (ioctl(pcifd, PCIOCREAD, &io) == -1)
d279 1
a279 1
		if (ioctl(pcifd, PCIOCWRITE, &io) == -1)
d294 5
a298 6
	close(aperturefd);
	close(pcifd);
	aperturefd = -1;
	pcifd = -1;
	free(pci_sys);
	pci_sys = NULL;
d308 1
a308 1
	int bus, dev, func, err;
d310 1
d315 1
a315 1
	err = pci_read(bus, dev, func, PCI_BHLC_REG, &reg);
d326 1
a326 1
		err = pci_read(bus, dev, func, bar, &reg);
d331 1
a331 1
		err = pci_write(bus, dev, func, bar, ~0);
d334 2
a335 2
		pci_read(bus, dev, func, bar, &size);
		pci_write(bus, dev, func, bar, reg);
d358 1
a358 1
				err = pci_read(bus, dev, func, bar, &reg);
d363 1
a363 1
				err = pci_write(bus, dev, func, bar, ~0);
d366 2
a367 2
				pci_read(bus, dev, func, bar, &size);
				pci_write(bus, dev, func, bar, reg64 >> 32);
d379 1
a379 1
	err = pci_read(bus, dev, func, PCI_ROM_REG, &reg);
d383 1
a383 1
		err = pci_write(bus, dev, func, PCI_ROM_REG, ~PCI_ROM_ENABLE);
d386 2
a387 2
		pci_read(bus, dev, func, PCI_ROM_REG, &size);
		pci_write(bus, dev, func, PCI_ROM_REG, reg);
d413 2
a414 1
	int bus, dev, func, ndevs, nfuncs;
d417 1
a417 1
	if (pcifd != -1)
d420 9
a428 2
	pcifd = open("/dev/pci", O_RDWR);
	if (pcifd == -1)
d433 3
a435 2
		close(aperturefd);
		close(pcifd);
d442 11
a452 10
	for (bus = 0; bus < 256; bus++) {
		for (dev = 0; dev < 32; dev++) {
			nfuncs = pci_nfuncs(bus, dev);
			for (func = 0; func < nfuncs; func++) {
				if (pci_read(bus, dev, func, PCI_ID_REG,
				    &reg) != 0)
					continue;
				if (PCI_VENDOR(reg) == PCI_VENDOR_INVALID ||
				    PCI_VENDOR(reg) == 0)
					continue;
d454 2
a455 1
				ndevs++;
d464 4
a467 1
		close(pcifd);
d472 32
a503 30
	for (bus = 0; bus < 256; bus++) {
		for (dev = 0; dev < 32; dev++) {
			nfuncs = pci_nfuncs(bus, dev);
			for (func = 0; func < nfuncs; func++) {
				if (pci_read(bus, dev, func, PCI_ID_REG,
				    &reg) != 0)
					continue;
				if (PCI_VENDOR(reg) == PCI_VENDOR_INVALID ||
				    PCI_VENDOR(reg) == 0)
					continue;

				device->base.domain = 0;
				device->base.bus = bus;
				device->base.dev = dev;
				device->base.func = func;
				device->base.vendor_id = PCI_VENDOR(reg);
				device->base.device_id = PCI_PRODUCT(reg);

				if (pci_read(bus, dev, func, PCI_CLASS_REG,
				    &reg) != 0)
					continue;

				device->base.device_class =
				    PCI_INTERFACE(reg) | PCI_CLASS(reg) << 16 |
				    PCI_SUBCLASS(reg) << 8;
				device->base.revision = PCI_REVISION(reg);

				if (pci_read(bus, dev, func, PCI_SUBVEND_0,
				    &reg) != 0)
					continue;
d505 2
a506 2
				device->base.subvendor_id = PCI_VENDOR(reg);
				device->base.subdevice_id = PCI_PRODUCT(reg);
d508 2
a509 1
				device++;
@


1.7
log
@Implement pci_device_read_rom() for arbitrary PCI cards, including
secondary VGA. With help from kettenis@@. ok kettenis@@, miod@@.
@
text
@d94 1
a94 1
	
d101 1
a101 1
		    ((PCI_CLASS_DISPLAY << 16) | 
d106 1
a106 1
		} else 
d121 1
a121 1
	bios = mmap(NULL, rom_size, PROT_READ, MAP_SHARED, 
d264 1
a264 1
		if (ioctl(pcifd, PCIOCWRITE, &io) == -1) 
d373 1
a373 1
		
d401 1
a401 1
	if (pcifd != -1) 
@


1.6
log
@Fix a logic error in pci_device_openbsd_write() that actually
prevented it to write anything.
@
text
@d78 1
a78 1
 * Read a VGA rom using the 0xc0000 mapping.
a79 2
 * This function should be extended to handle access through PCI resources,
 * which should be more reliable when available.
d82 1
a82 1
pci_device_openbsd_read_rom(struct pci_device * dev, void * buffer)
d84 6
a89 2
#if defined(__alpha__) || defined(__amd64__) || defined(__i386__)
	void *bios;
d91 3
a93 4
	if ((dev->device_class & 0x00ffff00) !=
	    ((PCI_CLASS_DISPLAY << 16) | (PCI_SUBCLASS_DISPLAY_VGA << 8))) {
		return ENOSYS;
	}
d98 25
a122 1
	bios = mmap(NULL, dev->rom_size, PROT_READ, 0, aperturefd, 0xc0000);
d125 9
a133 3
	memcpy(buffer, bios, dev->rom_size);
	munmap(bios, dev->rom_size);
	
a134 3
#else
	return ENOSYS;
#endif
d363 16
@


1.5
log
@When trying to map a piece of device memory with a cacheability attribue
(e.g.  the graphics aperture on most video cards), don't error if we
failed to set the mtrr but the map succeeded. Instead print a warning (other
osen handle this case similarly).

Libraries shouldn't use fprintf(stderr, ...); but libpciaccess is really
quite poorly designed.

This diff means that mine and drahn's laptops work with xserver 1.5.

ok kettenis@@
@
text
@d223 1
a223 1
	if ((offset % 4) == 0 || (size % 4) == 0)
@


1.4
log
@- Add a method to read the legacy BIOS region on alpha/amd64/i386
- Restrict MTRR calls to amd64/i386.
ok kettenis@@
@
text
@d152 2
a153 1
			return errno;
@


1.3
log
@allow 2 successives calls to pci_system_init() and fix pci_system_cleanup()
to make it possible to call pci_system_init() again.
ok kettenis@@.
@
text
@d77 32
d135 1
a135 1

d154 1
a154 1

d162 1
d178 1
a178 1

d340 1
a340 1
	NULL,
@


1.2
log
@Merge libpciaccess 0.10.2, including kettenis@@ OpenBSD port.
@
text
@d36 1
a36 1
static int pcifd;
d219 2
d322 3
@


1.1
log
@skeleton OpenBSD port of libpciaccess
@
text
@a0 1
/* $OpenBSD$ */
d2 1
a2 3
 * (C) Copyright Eric Anholt 2006
 * (C) Copyright IBM Corporation 2006
 * All Rights Reserved.
d4 3
a6 6
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
d8 7
a14 11
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * IBM AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
d17 12
a28 7
/**
 * \file openbsd_pci.c
 *
 * Access the kernel PCI support using /dev/pci's ioctl and mmap interface.
 *
 * \author Eric Anholt <eric@@anholt.net>
 */
a29 1
#include <stdio.h>
a31 5
#include <fcntl.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/pciio.h>
#include <sys/mman.h>
d36 2
a37 10
/**
 * OpenBSD private pci_system structure that extends the base pci_system
 * structure.
 *
 * It is initialized once and used as a global, just as pci_system is used.
 */
struct openbsd_pci_system {
	struct pci_system pci_sys; /* must come first */
	int pcidev;		/**< fd for /dev/pci */
} *openbsd_pci_sys;
a38 10
/**
 * Map a memory region for a device using /dev/mem.
 *
 * \param dev          Device whose memory region is to be mapped.
 * \param region       Region, on the range [0, 5], that is to be mapped.
 * \param write_enable Map for writing (non-zero).
 *
 * \return
 * Zero on success or an \c errno value on failure.
 */
d40 1
a40 2
pci_device_openbsd_map(struct pci_device *dev, unsigned int region,
    int write_enable)
d42 17
a60 9
/**
 * Unmap the specified region.
 *
 * \param dev          Device whose memory region is to be unmapped.
 * \param region       Region, on the range [0, 5], that is to be unmapped.
 *
 * \return
 * Zero on success or an \c errno value on failure.
 */
d62 1
a62 1
pci_device_openbsd_unmap(struct pci_device *dev, unsigned int region)
d64 11
d78 1
a78 2
pci_device_openbsd_read(struct pci_device *dev, void *data,
    pciaddr_t offset, pciaddr_t size, pciaddr_t *bytes_read)
d80 6
d89 2
a90 2
pci_device_openbsd_write(struct pci_device *dev, const void *data,
    pciaddr_t offset, pciaddr_t size, pciaddr_t *bytes_written)
d92 32
d126 22
d150 2
a151 1
pci_device_openbsd_probe(struct pci_device *dev)
d153 28
d184 2
a185 1
pci_device_openbsd_read_rom(struct pci_device *dev, void *buffer)
d187 25
a213 1

d217 83
a299 2
	free(openbsd_pci_sys->pci_sys.devices);
	openbsd_pci_sys = NULL;
d303 9
a311 9
	.destroy = pci_system_openbsd_destroy,
	.destroy_device = NULL,
	.read_rom = pci_device_openbsd_read_rom, 
	.probe = pci_device_openbsd_probe,
	.map = pci_device_openbsd_map,
	.unmap = pci_device_openbsd_unmap,
	.read = pci_device_openbsd_read,
	.write = pci_device_openbsd_write,
	.fill_capabilities = pci_fill_capabilities_generic,
a313 3
/**
 * Attempt to acces the OpenBSD PCI interface.
 */
d317 12
a328 2
	openbsd_pci_sys = calloc(1, sizeof(struct openbsd_pci_system));
	if (openbsd_pci_sys = NULL)
d330 2
a331 1
	pci_sys = &openbsd_pci_sys->pci_sys;
d333 66
a398 1
	
d400 6
@

