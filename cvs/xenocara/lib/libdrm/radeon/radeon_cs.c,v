head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.10
	OPENBSD_6_2_BASE:1.3
	libdrm_2_4_82:1.1.1.1
	libdrm_2_4_79:1.1.1.1
	OPENBSD_6_1:1.3.0.8
	OPENBSD_6_1_BASE:1.3
	libdrm_2_4_75:1.1.1.1
	libdrm_2_4_73:1.1.1.1
	libdrm_2_4_71:1.1.1.1
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	libdrm_2_4_67:1.1.1.1
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	libdrm_2_4_65:1.1.1.1
	libdrm_2_4_64:1.1.1.1
	libdrm:1.1.1
	OPENBSD_5_8:1.3.0.2
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.14
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.12
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.10
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.8
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.6
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.07.15.23.19.17;	author jsg;	state Exp;
branches;
next	1.2;
commitid	NCd5WpEjxT48SV2b;

1.2
date	2015.02.07.01.34.36;	author jsg;	state Exp;
branches;
next	1.1;
commitid	ttKh4qveShZNixll;

1.1
date	2011.05.02.21.52.34;	author oga;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2015.08.21.23.56.14;	author jsg;	state Exp;
branches;
next	;
commitid	IINH94ZNafdY3NZg;


desc
@@


1.3
log
@update to libdrm 2.4.62
@
text
@#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include "libdrm_macros.h"
#include <stdio.h>
#include "radeon_cs.h"
#include "radeon_cs_int.h"

struct radeon_cs *
radeon_cs_create(struct radeon_cs_manager *csm, uint32_t ndw)
{
    struct radeon_cs_int *csi = csm->funcs->cs_create(csm, ndw);
    return (struct radeon_cs *)csi;
}

int
radeon_cs_write_reloc(struct radeon_cs *cs, struct radeon_bo *bo,
                      uint32_t read_domain, uint32_t write_domain,
                      uint32_t flags)
{
    struct radeon_cs_int *csi = (struct radeon_cs_int *)cs;

    return csi->csm->funcs->cs_write_reloc(csi,
                                           bo,
                                           read_domain,
                                           write_domain,
                                           flags);
}

int
radeon_cs_begin(struct radeon_cs *cs, uint32_t ndw,
                const char *file, const char *func, int line)
{
    struct radeon_cs_int *csi = (struct radeon_cs_int *)cs;
    return csi->csm->funcs->cs_begin(csi, ndw, file, func, line);
}

int
radeon_cs_end(struct radeon_cs *cs,
              const char *file, const char *func, int line)
{
    struct radeon_cs_int *csi = (struct radeon_cs_int *)cs;
    return csi->csm->funcs->cs_end(csi, file, func, line);
}

int radeon_cs_emit(struct radeon_cs *cs)
{
    struct radeon_cs_int *csi = (struct radeon_cs_int *)cs;
    return csi->csm->funcs->cs_emit(csi);
}

int radeon_cs_destroy(struct radeon_cs *cs)
{
    struct radeon_cs_int *csi = (struct radeon_cs_int *)cs;
    return csi->csm->funcs->cs_destroy(csi);
}

int radeon_cs_erase(struct radeon_cs *cs)
{
    struct radeon_cs_int *csi = (struct radeon_cs_int *)cs;
    return csi->csm->funcs->cs_erase(csi);
}

int radeon_cs_need_flush(struct radeon_cs *cs)
{
    struct radeon_cs_int *csi = (struct radeon_cs_int *)cs;
    return csi->csm->funcs->cs_need_flush(csi);
}

void radeon_cs_print(struct radeon_cs *cs, FILE *file)
{
    struct radeon_cs_int *csi = (struct radeon_cs_int *)cs;
    csi->csm->funcs->cs_print(csi, file);
}

void
radeon_cs_set_limit(struct radeon_cs *cs, uint32_t domain, uint32_t limit)
{
    struct radeon_cs_int *csi = (struct radeon_cs_int *)cs;
    if (domain == RADEON_GEM_DOMAIN_VRAM)
        csi->csm->vram_limit = limit;
    else
        csi->csm->gart_limit = limit;
}

void radeon_cs_space_set_flush(struct radeon_cs *cs, 
                                          void (*fn)(void *), void *data)
{
    struct radeon_cs_int *csi = (struct radeon_cs_int *)cs;
    csi->space_flush_fn = fn;
    csi->space_flush_data = data;
}

uint32_t radeon_cs_get_id(struct radeon_cs *cs)
{
    struct radeon_cs_int *csi = (struct radeon_cs_int *)cs;
    return csi->id;
}
@


1.2
log
@update to libdrm 2.4.59
@
text
@d4 1
a4 1
#include "libdrm.h"
d9 1
a9 1
drm_public struct radeon_cs *
d16 1
a16 1
drm_public int
d30 1
a30 1
drm_public int
d38 1
a38 1
drm_public int
d46 1
a46 1
drm_public int radeon_cs_emit(struct radeon_cs *cs)
d52 1
a52 1
drm_public int radeon_cs_destroy(struct radeon_cs *cs)
d58 1
a58 1
drm_public int radeon_cs_erase(struct radeon_cs *cs)
d64 1
a64 1
drm_public int radeon_cs_need_flush(struct radeon_cs *cs)
d70 1
a70 1
drm_public void radeon_cs_print(struct radeon_cs *cs, FILE *file)
d76 1
a76 1
drm_public void
d86 1
a86 1
drm_public void radeon_cs_space_set_flush(struct radeon_cs *cs, 
d94 1
a94 1
drm_public uint32_t radeon_cs_get_id(struct radeon_cs *cs)
@


1.1
log
@Add libdrm_radeon

needed for the r600 dri driver. Tested by myself and matthieu.
@
text
@d1 4
a4 1

d9 2
a10 1
struct radeon_cs *radeon_cs_create(struct radeon_cs_manager *csm, uint32_t ndw)
d16 4
a19 5
int radeon_cs_write_reloc(struct radeon_cs *cs,
                          struct radeon_bo *bo,
                          uint32_t read_domain,
                          uint32_t write_domain,
                          uint32_t flags)
d30 3
a32 5
int radeon_cs_begin(struct radeon_cs *cs,
                    uint32_t ndw,
                    const char *file,
                    const char *func,
                    int line)
d38 3
a40 4
int radeon_cs_end(struct radeon_cs *cs,
                  const char *file,
                  const char *func,
                  int line)
d46 1
a46 1
int radeon_cs_emit(struct radeon_cs *cs)
d52 1
a52 1
int radeon_cs_destroy(struct radeon_cs *cs)
d58 1
a58 1
int radeon_cs_erase(struct radeon_cs *cs)
d64 1
a64 1
int radeon_cs_need_flush(struct radeon_cs *cs)
d70 1
a70 1
void radeon_cs_print(struct radeon_cs *cs, FILE *file)
d76 2
a77 1
void radeon_cs_set_limit(struct radeon_cs *cs, uint32_t domain, uint32_t limit)
d86 2
a87 1
void radeon_cs_space_set_flush(struct radeon_cs *cs, void (*fn)(void *), void *data)
d94 1
a94 1
uint32_t radeon_cs_get_id(struct radeon_cs *cs)
@


1.1.1.1
log
@Import libdrm 2.4.64
@
text
@d1 1
a1 4
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include "libdrm_macros.h"
d6 1
a6 2
struct radeon_cs *
radeon_cs_create(struct radeon_cs_manager *csm, uint32_t ndw)
d12 5
a16 4
int
radeon_cs_write_reloc(struct radeon_cs *cs, struct radeon_bo *bo,
                      uint32_t read_domain, uint32_t write_domain,
                      uint32_t flags)
d27 5
a31 3
int
radeon_cs_begin(struct radeon_cs *cs, uint32_t ndw,
                const char *file, const char *func, int line)
d37 4
a40 3
int
radeon_cs_end(struct radeon_cs *cs,
              const char *file, const char *func, int line)
d76 1
a76 2
void
radeon_cs_set_limit(struct radeon_cs *cs, uint32_t domain, uint32_t limit)
d85 1
a85 2
void radeon_cs_space_set_flush(struct radeon_cs *cs, 
                                          void (*fn)(void *), void *data)
@


