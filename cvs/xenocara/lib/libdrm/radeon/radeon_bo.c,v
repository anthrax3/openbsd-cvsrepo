head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	libdrm_2_4_75:1.1.1.1
	libdrm_2_4_73:1.1.1.1
	libdrm_2_4_71:1.1.1.1
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	libdrm_2_4_67:1.1.1.1
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	libdrm_2_4_65:1.1.1.1
	libdrm_2_4_64:1.1.1.1
	libdrm:1.1.1
	OPENBSD_5_8:1.3.0.2
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.14
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.12
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.10
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.8
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.6
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.07.15.23.19.17;	author jsg;	state Exp;
branches;
next	1.2;
commitid	NCd5WpEjxT48SV2b;

1.2
date	2015.02.07.01.34.36;	author jsg;	state Exp;
branches;
next	1.1;
commitid	ttKh4qveShZNixll;

1.1
date	2011.05.02.21.52.34;	author oga;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2015.08.21.23.56.14;	author jsg;	state Exp;
branches;
next	;
commitid	IINH94ZNafdY3NZg;


desc
@@


1.3
log
@update to libdrm 2.4.62
@
text
@/*
 * Copyright © 2008 Dave Airlie
 * Copyright © 2008 Jérôme Glisse
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, AUTHORS
 * AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 */
/*
 * Authors:
 *      Dave Airlie
 *      Jérôme Glisse <glisse@@freedesktop.org>
 */
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <libdrm_macros.h>
#include <radeon_bo.h>
#include <radeon_bo_int.h>

void radeon_bo_debug(struct radeon_bo *bo, const char *op)
{
    struct radeon_bo_int *boi = (struct radeon_bo_int *)bo;

    fprintf(stderr, "%s %p 0x%08X 0x%08X 0x%08X\n",
            op, bo, bo->handle, boi->size, boi->cref);
}

struct radeon_bo *
radeon_bo_open(struct radeon_bo_manager *bom, uint32_t handle, uint32_t size,
	       uint32_t alignment, uint32_t domains, uint32_t flags)
{
    struct radeon_bo *bo;
    bo = bom->funcs->bo_open(bom, handle, size, alignment, domains, flags);
    return bo;
}

void radeon_bo_ref(struct radeon_bo *bo)
{
    struct radeon_bo_int *boi = (struct radeon_bo_int *)bo;
    boi->cref++;
    boi->bom->funcs->bo_ref(boi);
}

struct radeon_bo *radeon_bo_unref(struct radeon_bo *bo)
{
    struct radeon_bo_int *boi = (struct radeon_bo_int *)bo;
    if (bo == NULL)
        return NULL;

    boi->cref--;
    return boi->bom->funcs->bo_unref(boi);
}

int radeon_bo_map(struct radeon_bo *bo, int write)
{
    struct radeon_bo_int *boi = (struct radeon_bo_int *)bo;
    return boi->bom->funcs->bo_map(boi, write);
}

int radeon_bo_unmap(struct radeon_bo *bo)
{
    struct radeon_bo_int *boi = (struct radeon_bo_int *)bo;
    return boi->bom->funcs->bo_unmap(boi);
}

int radeon_bo_wait(struct radeon_bo *bo)
{
    struct radeon_bo_int *boi = (struct radeon_bo_int *)bo;
    if (!boi->bom->funcs->bo_wait)
        return 0;
    return boi->bom->funcs->bo_wait(boi);
}

int radeon_bo_is_busy(struct radeon_bo *bo, uint32_t *domain)
{
    struct radeon_bo_int *boi = (struct radeon_bo_int *)bo;
    return boi->bom->funcs->bo_is_busy(boi, domain);
}

int
radeon_bo_set_tiling(struct radeon_bo *bo,
                     uint32_t tiling_flags, uint32_t pitch)
{
    struct radeon_bo_int *boi = (struct radeon_bo_int *)bo;
    return boi->bom->funcs->bo_set_tiling(boi, tiling_flags, pitch);
}

int
radeon_bo_get_tiling(struct radeon_bo *bo,
                     uint32_t *tiling_flags, uint32_t *pitch)
{
    struct radeon_bo_int *boi = (struct radeon_bo_int *)bo;
    return boi->bom->funcs->bo_get_tiling(boi, tiling_flags, pitch);
}

int radeon_bo_is_static(struct radeon_bo *bo)
{
    struct radeon_bo_int *boi = (struct radeon_bo_int *)bo;
    if (boi->bom->funcs->bo_is_static)
        return boi->bom->funcs->bo_is_static(boi);
    return 0;
}

int
radeon_bo_is_referenced_by_cs(struct radeon_bo *bo, struct radeon_cs *cs)
{
    struct radeon_bo_int *boi = (struct radeon_bo_int *)bo;
    return boi->cref > 1;
}

uint32_t radeon_bo_get_handle(struct radeon_bo *bo)
{
    return bo->handle;
}

uint32_t radeon_bo_get_src_domain(struct radeon_bo *bo)
{
    struct radeon_bo_int *boi = (struct radeon_bo_int *)bo;
    uint32_t src_domain;

    src_domain = boi->space_accounted & 0xffff;
    if (!src_domain)
        src_domain = boi->space_accounted >> 16;

    return src_domain;
}
@


1.2
log
@update to libdrm 2.4.59
@
text
@d35 1
a35 1
#include <libdrm.h>
d39 1
a39 1
drm_public void radeon_bo_debug(struct radeon_bo *bo, const char *op)
d47 1
a47 1
drm_public struct radeon_bo *
d56 1
a56 1
drm_public void radeon_bo_ref(struct radeon_bo *bo)
d63 1
a63 1
drm_public struct radeon_bo *radeon_bo_unref(struct radeon_bo *bo)
d73 1
a73 1
drm_public int radeon_bo_map(struct radeon_bo *bo, int write)
d79 1
a79 1
drm_public int radeon_bo_unmap(struct radeon_bo *bo)
d85 1
a85 1
drm_public int radeon_bo_wait(struct radeon_bo *bo)
d93 1
a93 1
drm_public int radeon_bo_is_busy(struct radeon_bo *bo, uint32_t *domain)
d99 1
a99 1
drm_public int
d107 1
a107 1
drm_public int
d115 1
a115 1
drm_public int radeon_bo_is_static(struct radeon_bo *bo)
d123 1
a123 1
drm_public int
d130 1
a130 1
drm_public uint32_t radeon_bo_get_handle(struct radeon_bo *bo)
d135 1
a135 1
drm_public uint32_t radeon_bo_get_src_domain(struct radeon_bo *bo)
@


1.1
log
@Add libdrm_radeon

needed for the r600 dri driver. Tested by myself and matthieu.
@
text
@d32 4
d39 1
a39 1
void radeon_bo_debug(struct radeon_bo *bo, const char *op)
d47 3
a49 6
struct radeon_bo *radeon_bo_open(struct radeon_bo_manager *bom,
                                 uint32_t handle,
                                 uint32_t size,
                                 uint32_t alignment,
                                 uint32_t domains,
                                 uint32_t flags)
d56 1
a56 1
void radeon_bo_ref(struct radeon_bo *bo)
d63 1
a63 1
struct radeon_bo *radeon_bo_unref(struct radeon_bo *bo)
d73 1
a73 1
int radeon_bo_map(struct radeon_bo *bo, int write)
d79 1
a79 1
int radeon_bo_unmap(struct radeon_bo *bo)
d85 1
a85 1
int radeon_bo_wait(struct radeon_bo *bo)
d93 1
a93 1
int radeon_bo_is_busy(struct radeon_bo *bo, uint32_t *domain)
d99 3
a101 2
int radeon_bo_set_tiling(struct radeon_bo *bo,
                         uint32_t tiling_flags, uint32_t pitch)
d107 3
a109 2
int radeon_bo_get_tiling(struct radeon_bo *bo,
                         uint32_t *tiling_flags, uint32_t *pitch)
d115 1
a115 1
int radeon_bo_is_static(struct radeon_bo *bo)
d123 2
a124 1
int radeon_bo_is_referenced_by_cs(struct radeon_bo *bo, struct radeon_cs *cs)
d130 1
a130 1
uint32_t radeon_bo_get_handle(struct radeon_bo *bo)
d135 1
a135 1
uint32_t radeon_bo_get_src_domain(struct radeon_bo *bo)
@


1.1.1.1
log
@Import libdrm 2.4.64
@
text
@a31 4
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <libdrm_macros.h>
d43 6
a48 3
struct radeon_bo *
radeon_bo_open(struct radeon_bo_manager *bom, uint32_t handle, uint32_t size,
	       uint32_t alignment, uint32_t domains, uint32_t flags)
d98 2
a99 3
int
radeon_bo_set_tiling(struct radeon_bo *bo,
                     uint32_t tiling_flags, uint32_t pitch)
d105 2
a106 3
int
radeon_bo_get_tiling(struct radeon_bo *bo,
                     uint32_t *tiling_flags, uint32_t *pitch)
d120 1
a120 2
int
radeon_bo_is_referenced_by_cs(struct radeon_bo *bo, struct radeon_cs *cs)
@


