head	1.3;
access;
symbols
	libdrm_2_4_82:1.1.1.1
	libdrm_2_4_79:1.1.1.1
	OPENBSD_6_1:1.3.0.8
	OPENBSD_6_1_BASE:1.3
	libdrm_2_4_75:1.1.1.1
	libdrm_2_4_73:1.1.1.1
	libdrm_2_4_71:1.1.1.1
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	libdrm_2_4_67:1.1.1.1
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	libdrm_2_4_65:1.1.1.1
	libdrm_2_4_64:1.1.1.1
	libdrm:1.1.1
	OPENBSD_5_8:1.3.0.2
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.20
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.18
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.07.15.23.19.17;	author jsg;	state Exp;
branches;
next	1.2;
commitid	NCd5WpEjxT48SV2b;

1.2
date	2010.03.31.06.31.45;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.26.23.14.37;	author oga;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2015.08.21.23.56.09;	author jsg;	state Exp;
branches;
next	;
commitid	IINH94ZNafdY3NZg;


desc
@@


1.3
log
@update to libdrm 2.4.62
@
text
@/*
 * GLX Hardware Device Driver common code
 * Copyright (C) 1999 Wittawat Yamwong
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * WITTAWAT YAMWONG, OR ANY OTHER CONTRIBUTORS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdlib.h>
#include <assert.h>

#include "xf86drm.h"
#include "libdrm_macros.h"
#include "mm.h"

drm_private void mmDumpMemInfo(const struct mem_block *heap)
{
	drmMsg("Memory heap %p:\n", (void *)heap);
	if (heap == 0) {
		drmMsg("  heap == 0\n");
	} else {
		const struct mem_block *p;

		for (p = heap->next; p != heap; p = p->next) {
			drmMsg("  Offset:%08x, Size:%08x, %c%c\n", p->ofs,
			       p->size, p->free ? 'F' : '.',
			       p->reserved ? 'R' : '.');
		}

		drmMsg("\nFree list:\n");

		for (p = heap->next_free; p != heap; p = p->next_free) {
			drmMsg(" FREE Offset:%08x, Size:%08x, %c%c\n", p->ofs,
			       p->size, p->free ? 'F' : '.',
			       p->reserved ? 'R' : '.');
		}

	}
	drmMsg("End of memory blocks\n");
}

drm_private struct mem_block *mmInit(int ofs, int size)
{
	struct mem_block *heap, *block;

	if (size <= 0)
		return NULL;

	heap = (struct mem_block *)calloc(1, sizeof(struct mem_block));
	if (!heap)
		return NULL;

	block = (struct mem_block *)calloc(1, sizeof(struct mem_block));
	if (!block) {
		free(heap);
		return NULL;
	}

	heap->next = block;
	heap->prev = block;
	heap->next_free = block;
	heap->prev_free = block;

	block->heap = heap;
	block->next = heap;
	block->prev = heap;
	block->next_free = heap;
	block->prev_free = heap;

	block->ofs = ofs;
	block->size = size;
	block->free = 1;

	return heap;
}

static struct mem_block *SliceBlock(struct mem_block *p,
				    int startofs, int size,
				    int reserved, int alignment)
{
	struct mem_block *newblock;

	/* break left  [p, newblock, p->next], then p = newblock */
	if (startofs > p->ofs) {
		newblock =
		    (struct mem_block *)calloc(1, sizeof(struct mem_block));
		if (!newblock)
			return NULL;
		newblock->ofs = startofs;
		newblock->size = p->size - (startofs - p->ofs);
		newblock->free = 1;
		newblock->heap = p->heap;

		newblock->next = p->next;
		newblock->prev = p;
		p->next->prev = newblock;
		p->next = newblock;

		newblock->next_free = p->next_free;
		newblock->prev_free = p;
		p->next_free->prev_free = newblock;
		p->next_free = newblock;

		p->size -= newblock->size;
		p = newblock;
	}

	/* break right, also [p, newblock, p->next] */
	if (size < p->size) {
		newblock =
		    (struct mem_block *)calloc(1, sizeof(struct mem_block));
		if (!newblock)
			return NULL;
		newblock->ofs = startofs + size;
		newblock->size = p->size - size;
		newblock->free = 1;
		newblock->heap = p->heap;

		newblock->next = p->next;
		newblock->prev = p;
		p->next->prev = newblock;
		p->next = newblock;

		newblock->next_free = p->next_free;
		newblock->prev_free = p;
		p->next_free->prev_free = newblock;
		p->next_free = newblock;

		p->size = size;
	}

	/* p = middle block */
	p->free = 0;

	/* Remove p from the free list: 
	 */
	p->next_free->prev_free = p->prev_free;
	p->prev_free->next_free = p->next_free;

	p->next_free = 0;
	p->prev_free = 0;

	p->reserved = reserved;
	return p;
}

drm_private struct mem_block *mmAllocMem(struct mem_block *heap, int size,
					 int align2, int startSearch)
{
	struct mem_block *p;
	const int mask = (1 << align2) - 1;
	int startofs = 0;
	int endofs;

	if (!heap || align2 < 0 || size <= 0)
		return NULL;

	for (p = heap->next_free; p != heap; p = p->next_free) {
		assert(p->free);

		startofs = (p->ofs + mask) & ~mask;
		if (startofs < startSearch) {
			startofs = startSearch;
		}
		endofs = startofs + size;
		if (endofs <= (p->ofs + p->size))
			break;
	}

	if (p == heap)
		return NULL;

	assert(p->free);
	p = SliceBlock(p, startofs, size, 0, mask + 1);

	return p;
}

static int Join2Blocks(struct mem_block *p)
{
	/* XXX there should be some assertions here */

	/* NOTE: heap->free == 0 */

	if (p->free && p->next->free) {
		struct mem_block *q = p->next;

		assert(p->ofs + p->size == q->ofs);
		p->size += q->size;

		p->next = q->next;
		q->next->prev = p;

		q->next_free->prev_free = q->prev_free;
		q->prev_free->next_free = q->next_free;

		free(q);
		return 1;
	}
	return 0;
}

drm_private int mmFreeMem(struct mem_block *b)
{
	if (!b)
		return 0;

	if (b->free) {
		drmMsg("block already free\n");
		return -1;
	}
	if (b->reserved) {
		drmMsg("block is reserved\n");
		return -1;
	}

	b->free = 1;
	b->next_free = b->heap->next_free;
	b->prev_free = b->heap;
	b->next_free->prev_free = b;
	b->prev_free->next_free = b;

	Join2Blocks(b);
	if (b->prev != b->heap)
		Join2Blocks(b->prev);

	return 0;
}

drm_private void mmDestroy(struct mem_block *heap)
{
	struct mem_block *p;

	if (!heap)
		return;

	for (p = heap->next; p != heap;) {
		struct mem_block *next = p->next;
		free(p);
		p = next;
	}

	free(heap);
}
@


1.2
log
@update libdrm to 2.4.15.

This diff seems larger than it is since upstream reindented some
sources.  This updates libdrm_intel to -current (which only affect the
GEM code) and libdrm to 2.4.15.  bumping both minor versions.

Discussed with matthieu@@
@
text
@d25 4
d33 1
d36 1
a36 1
void mmDumpMemInfo(const struct mem_block *heap)
d62 1
a62 1
struct mem_block *mmInit(int ofs, int size)
d167 2
a168 2
struct mem_block *mmAllocMem(struct mem_block *heap, int size, int align2,
			     int startSearch)
a198 12
struct mem_block *mmFindBlock(struct mem_block *heap, int start)
{
	struct mem_block *p;

	for (p = heap->next; p != heap; p = p->next) {
		if (p->ofs == start)
			return p;
	}

	return NULL;
}

d223 1
a223 1
int mmFreeMem(struct mem_block *b)
d250 1
a250 1
void mmDestroy(struct mem_block *heap)
@


1.1
log
@Update libdrm to 2.4.3

This is needed for us to be able to update Mesa and xf86-video-intel.
Includes a few fixes, as well as the intel bufmgr interface and the
modesetting interface (which currently errors when you check if it's
enabled).

ok matthieu@@
@
text
@d31 1
a31 2
void
mmDumpMemInfo(const struct mem_block *heap)
d33 5
a37 5
   drmMsg("Memory heap %p:\n", (void *)heap);
   if (heap == 0) {
      drmMsg("  heap == 0\n");
   } else {
      const struct mem_block *p;
d39 5
a43 5
      for(p = heap->next; p != heap; p = p->next) {
	 drmMsg("  Offset:%08x, Size:%08x, %c%c\n",p->ofs,p->size,
		p->free ? 'F':'.',
		p->reserved ? 'R':'.');
      }
d45 1
a45 1
      drmMsg("\nFree list:\n");
d47 5
a51 5
      for(p = heap->next_free; p != heap; p = p->next_free) {
	 drmMsg(" FREE Offset:%08x, Size:%08x, %c%c\n",p->ofs,p->size,
		p->free ? 'F':'.',
		p->reserved ? 'R':'.');
      }
d53 2
a54 2
   }
   drmMsg("End of memory blocks\n");
d57 1
a57 2
struct mem_block *
mmInit(int ofs, int size)
d59 1
a59 4
   struct mem_block *heap, *block;
  
   if (size <= 0) 
      return NULL;
d61 2
a62 9
   heap = (struct mem_block *) calloc(1, sizeof(struct mem_block));
   if (!heap) 
      return NULL;
   
   block = (struct mem_block *) calloc(1, sizeof(struct mem_block));
   if (!block) {
      free(heap);
      return NULL;
   }
d64 3
a66 4
   heap->next = block;
   heap->prev = block;
   heap->next_free = block;
   heap->prev_free = block;
d68 5
a72 5
   block->heap = heap;
   block->next = heap;
   block->prev = heap;
   block->next_free = heap;
   block->prev_free = heap;
d74 4
a77 3
   block->ofs = ofs;
   block->size = size;
   block->free = 1;
d79 11
a89 1
   return heap;
d92 5
d98 10
a107 6
static struct mem_block *
SliceBlock(struct mem_block *p, 
           int startofs, int size, 
           int reserved, int alignment)
{
   struct mem_block *newblock;
d109 4
a112 9
   /* break left  [p, newblock, p->next], then p = newblock */
   if (startofs > p->ofs) {
      newblock = (struct mem_block*) calloc(1, sizeof(struct mem_block));
      if (!newblock)
	 return NULL;
      newblock->ofs = startofs;
      newblock->size = p->size - (startofs - p->ofs);
      newblock->free = 1;
      newblock->heap = p->heap;
d114 4
a117 4
      newblock->next = p->next;
      newblock->prev = p;
      p->next->prev = newblock;
      p->next = newblock;
d119 3
a121 4
      newblock->next_free = p->next_free;
      newblock->prev_free = p;
      p->next_free->prev_free = newblock;
      p->next_free = newblock;
d123 10
a132 3
      p->size -= newblock->size;
      p = newblock;
   }
d134 4
a137 9
   /* break right, also [p, newblock, p->next] */
   if (size < p->size) {
      newblock = (struct mem_block*) calloc(1, sizeof(struct mem_block));
      if (!newblock)
	 return NULL;
      newblock->ofs = startofs + size;
      newblock->size = p->size - size;
      newblock->free = 1;
      newblock->heap = p->heap;
d139 4
a142 4
      newblock->next = p->next;
      newblock->prev = p;
      p->next->prev = newblock;
      p->next = newblock;
d144 2
a145 7
      newblock->next_free = p->next_free;
      newblock->prev_free = p;
      p->next_free->prev_free = newblock;
      p->next_free = newblock;
	 
      p->size = size;
   }
d147 2
a148 2
   /* p = middle block */
   p->free = 0;
d150 4
a153 4
   /* Remove p from the free list: 
    */
   p->next_free->prev_free = p->prev_free;
   p->prev_free->next_free = p->next_free;
d155 2
a156 2
   p->next_free = 0;
   p->prev_free = 0;
d158 2
a159 2
   p->reserved = reserved;
   return p;
d162 2
a163 3

struct mem_block *
mmAllocMem(struct mem_block *heap, int size, int align2, int startSearch)
d165 4
a168 4
   struct mem_block *p;
   const int mask = (1 << align2)-1;
   int startofs = 0;
   int endofs;
d170 2
a171 2
   if (!heap || align2 < 0 || size <= 0)
      return NULL;
d173 2
a174 2
   for (p = heap->next_free; p != heap; p = p->next_free) {
      assert(p->free);
d176 8
a183 8
      startofs = (p->ofs + mask) & ~mask;
      if ( startofs < startSearch ) {
	 startofs = startSearch;
      }
      endofs = startofs+size;
      if (endofs <= (p->ofs+p->size))
	 break;
   }
d185 2
a186 2
   if (p == heap) 
      return NULL;
d188 2
a189 2
   assert(p->free);
   p = SliceBlock(p,startofs,size,0,mask+1);
d191 1
a191 1
   return p;
d194 1
a194 3

struct mem_block *
mmFindBlock(struct mem_block *heap, int start)
d196 1
a196 1
   struct mem_block *p;
d198 4
a201 4
   for (p = heap->next; p != heap; p = p->next) {
      if (p->ofs == start) 
	 return p;
   }
d203 1
a203 1
   return NULL;
d206 3
d210 1
a210 4
static int
Join2Blocks(struct mem_block *p)
{
   /* XXX there should be some assertions here */
d212 2
a213 1
   /* NOTE: heap->free == 0 */
d215 2
a216 2
   if (p->free && p->next->free) {
      struct mem_block *q = p->next;
d218 2
a219 2
      assert(p->ofs + p->size == q->ofs);
      p->size += q->size;
d221 2
a222 2
      p->next = q->next;
      q->next->prev = p;
d224 4
a227 7
      q->next_free->prev_free = q->prev_free; 
      q->prev_free->next_free = q->next_free;
     
      free(q);
      return 1;
   }
   return 0;
d230 1
a230 2
int
mmFreeMem(struct mem_block *b)
d232 2
a233 2
   if (!b)
      return 0;
d235 8
a242 8
   if (b->free) {
      drmMsg("block already free\n");
      return -1;
   }
   if (b->reserved) {
      drmMsg("block is reserved\n");
      return -1;
   }
d244 5
a248 5
   b->free = 1;
   b->next_free = b->heap->next_free;
   b->prev_free = b->heap;
   b->next_free->prev_free = b;
   b->prev_free->next_free = b;
d250 3
a252 3
   Join2Blocks(b);
   if (b->prev != b->heap)
      Join2Blocks(b->prev);
d254 1
a254 1
   return 0;
d257 1
a257 3

void
mmDestroy(struct mem_block *heap)
d259 1
a259 1
   struct mem_block *p;
d261 2
a262 2
   if (!heap)
      return;
d264 5
a268 5
   for (p = heap->next; p != heap; ) {
      struct mem_block *next = p->next;
      free(p);
      p = next;
   }
d270 1
a270 1
   free(heap);
@


1.1.1.1
log
@Import libdrm 2.4.64
@
text
@a24 4
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

a28 1
#include "libdrm_macros.h"
d31 2
a32 1
drm_private void mmDumpMemInfo(const struct mem_block *heap)
d34 19
a52 19
	drmMsg("Memory heap %p:\n", (void *)heap);
	if (heap == 0) {
		drmMsg("  heap == 0\n");
	} else {
		const struct mem_block *p;

		for (p = heap->next; p != heap; p = p->next) {
			drmMsg("  Offset:%08x, Size:%08x, %c%c\n", p->ofs,
			       p->size, p->free ? 'F' : '.',
			       p->reserved ? 'R' : '.');
		}

		drmMsg("\nFree list:\n");

		for (p = heap->next_free; p != heap; p = p->next_free) {
			drmMsg(" FREE Offset:%08x, Size:%08x, %c%c\n", p->ofs,
			       p->size, p->free ? 'F' : '.',
			       p->reserved ? 'R' : '.');
		}
d54 2
a55 2
	}
	drmMsg("End of memory blocks\n");
d58 2
a59 1
drm_private struct mem_block *mmInit(int ofs, int size)
d61 29
a89 1
	struct mem_block *heap, *block;
d91 2
a92 2
	if (size <= 0)
		return NULL;
a93 3
	heap = (struct mem_block *)calloc(1, sizeof(struct mem_block));
	if (!heap)
		return NULL;
d95 6
a100 5
	block = (struct mem_block *)calloc(1, sizeof(struct mem_block));
	if (!block) {
		free(heap);
		return NULL;
	}
d102 54
a155 4
	heap->next = block;
	heap->prev = block;
	heap->next_free = block;
	heap->prev_free = block;
d157 2
a158 5
	block->heap = heap;
	block->next = heap;
	block->prev = heap;
	block->next_free = heap;
	block->prev_free = heap;
d160 3
a162 3
	block->ofs = ofs;
	block->size = size;
	block->free = 1;
a163 2
	return heap;
}
d165 2
a166 3
static struct mem_block *SliceBlock(struct mem_block *p,
				    int startofs, int size,
				    int reserved, int alignment)
d168 19
a186 1
	struct mem_block *newblock;
d188 2
a189 10
	/* break left  [p, newblock, p->next], then p = newblock */
	if (startofs > p->ofs) {
		newblock =
		    (struct mem_block *)calloc(1, sizeof(struct mem_block));
		if (!newblock)
			return NULL;
		newblock->ofs = startofs;
		newblock->size = p->size - (startofs - p->ofs);
		newblock->free = 1;
		newblock->heap = p->heap;
d191 2
a192 4
		newblock->next = p->next;
		newblock->prev = p;
		p->next->prev = newblock;
		p->next = newblock;
d194 2
a195 4
		newblock->next_free = p->next_free;
		newblock->prev_free = p;
		p->next_free->prev_free = newblock;
		p->next_free = newblock;
a196 3
		p->size -= newblock->size;
		p = newblock;
	}
d198 4
a201 10
	/* break right, also [p, newblock, p->next] */
	if (size < p->size) {
		newblock =
		    (struct mem_block *)calloc(1, sizeof(struct mem_block));
		if (!newblock)
			return NULL;
		newblock->ofs = startofs + size;
		newblock->size = p->size - size;
		newblock->free = 1;
		newblock->heap = p->heap;
d203 4
a206 4
		newblock->next = p->next;
		newblock->prev = p;
		p->next->prev = newblock;
		p->next = newblock;
d208 2
a209 7
		newblock->next_free = p->next_free;
		newblock->prev_free = p;
		p->next_free->prev_free = newblock;
		p->next_free = newblock;

		p->size = size;
	}
a210 2
	/* p = middle block */
	p->free = 0;
d212 2
a213 14
	/* Remove p from the free list: 
	 */
	p->next_free->prev_free = p->prev_free;
	p->prev_free->next_free = p->next_free;

	p->next_free = 0;
	p->prev_free = 0;

	p->reserved = reserved;
	return p;
}

drm_private struct mem_block *mmAllocMem(struct mem_block *heap, int size,
					 int align2, int startSearch)
d215 1
a215 19
	struct mem_block *p;
	const int mask = (1 << align2) - 1;
	int startofs = 0;
	int endofs;

	if (!heap || align2 < 0 || size <= 0)
		return NULL;

	for (p = heap->next_free; p != heap; p = p->next_free) {
		assert(p->free);

		startofs = (p->ofs + mask) & ~mask;
		if (startofs < startSearch) {
			startofs = startSearch;
		}
		endofs = startofs + size;
		if (endofs <= (p->ofs + p->size))
			break;
	}
d217 1
a217 2
	if (p == heap)
		return NULL;
d219 2
a220 2
	assert(p->free);
	p = SliceBlock(p, startofs, size, 0, mask + 1);
d222 13
a234 1
	return p;
d237 2
a238 1
static int Join2Blocks(struct mem_block *p)
d240 2
a241 9
	/* XXX there should be some assertions here */

	/* NOTE: heap->free == 0 */

	if (p->free && p->next->free) {
		struct mem_block *q = p->next;

		assert(p->ofs + p->size == q->ofs);
		p->size += q->size;
d243 18
a260 2
		p->next = q->next;
		q->next->prev = p;
d262 1
a262 7
		q->next_free->prev_free = q->prev_free;
		q->prev_free->next_free = q->next_free;

		free(q);
		return 1;
	}
	return 0;
a264 26
drm_private int mmFreeMem(struct mem_block *b)
{
	if (!b)
		return 0;

	if (b->free) {
		drmMsg("block already free\n");
		return -1;
	}
	if (b->reserved) {
		drmMsg("block is reserved\n");
		return -1;
	}

	b->free = 1;
	b->next_free = b->heap->next_free;
	b->prev_free = b->heap;
	b->next_free->prev_free = b;
	b->prev_free->next_free = b;

	Join2Blocks(b);
	if (b->prev != b->heap)
		Join2Blocks(b->prev);

	return 0;
}
d266 2
a267 1
drm_private void mmDestroy(struct mem_block *heap)
d269 1
a269 1
	struct mem_block *p;
d271 2
a272 2
	if (!heap)
		return;
d274 5
a278 5
	for (p = heap->next; p != heap;) {
		struct mem_block *next = p->next;
		free(p);
		p = next;
	}
d280 1
a280 1
	free(heap);
@


