head	1.3;
access;
symbols
	libdrm_2_4_75:1.1.1.1
	libdrm_2_4_73:1.1.1.1
	libdrm_2_4_71:1.1.1.1
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	libdrm_2_4_67:1.1.1.1
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	libdrm_2_4_65:1.1.1.1
	libdrm_2_4_64:1.1.1.1
	libdrm:1.1.1
	OPENBSD_5_8:1.3.0.2
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.20
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.18
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.07.15.23.19.17;	author jsg;	state Exp;
branches;
next	1.2;
commitid	NCd5WpEjxT48SV2b;

1.2
date	2010.03.31.06.31.45;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.26.23.14.37;	author oga;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2015.08.21.23.56.10;	author jsg;	state Exp;
branches;
next	;
commitid	IINH94ZNafdY3NZg;


desc
@@


1.3
log
@update to libdrm 2.4.62
@
text
@/*
 * GLX Hardware Device Driver common code
 * Copyright (C) 1999 Wittawat Yamwong
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * KEITH WHITWELL, OR ANY OTHER CONTRIBUTORS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Memory manager code.  Primarily used by device drivers to manage texture
 * heaps, etc.
 */

#ifndef MM_H
#define MM_H

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "libdrm_macros.h"

struct mem_block {
	struct mem_block *next, *prev;
	struct mem_block *next_free, *prev_free;
	struct mem_block *heap;
	int ofs, size;
	unsigned int free:1;
	unsigned int reserved:1;
};

/** 
 * input: total size in bytes
 * return: a heap pointer if OK, NULL if error
 */
drm_private extern struct mem_block *mmInit(int ofs, int size);

/**
 * Allocate 'size' bytes with 2^align2 bytes alignment,
 * restrict the search to free memory after 'startSearch'
 * depth and back buffers should be in different 4mb banks
 * to get better page hits if possible
 * input:	size = size of block
 *       	align2 = 2^align2 bytes alignment
 *		startSearch = linear offset from start of heap to begin search
 * return: pointer to the allocated block, 0 if error
 */
drm_private extern struct mem_block *mmAllocMem(struct mem_block *heap,
						int size, int align2,
						int startSearch);

/**
 * Free block starts at offset
 * input: pointer to a block
 * return: 0 if OK, -1 if error
 */
drm_private extern int mmFreeMem(struct mem_block *b);

/**
 * destroy MM
 */
drm_private extern void mmDestroy(struct mem_block *mmInit);

/**
 * For debuging purpose.
 */
drm_private extern void mmDumpMemInfo(const struct mem_block *mmInit);

#endif
@


1.2
log
@update libdrm to 2.4.15.

This diff seems larger than it is since upstream reindented some
sources.  This updates libdrm_intel to -current (which only affect the
GEM code) and libdrm to 2.4.15.  bumping both minor versions.

Discussed with matthieu@@
@
text
@d32 6
a46 10
/* Rename the variables in the drm copy of this code so that it doesn't
 * conflict with mesa or whoever else has copied it around.
 */
#define mmInit drm_mmInit
#define mmAllocMem drm_mmAllocMem
#define mmFreeMem drm_mmFreeMem
#define mmFindBlock drm_mmFindBlock
#define mmDestroy drm_mmDestroy
#define mmDumpMemInfo drm_mmDumpMemInfo

d51 1
a51 1
extern struct mem_block *mmInit(int ofs, int size);
d63 3
a65 2
extern struct mem_block *mmAllocMem(struct mem_block *heap, int size,
				    int align2, int startSearch);
d72 1
a72 8
extern int mmFreeMem(struct mem_block *b);

/**
 * Free block starts at offset
 * input: pointer to a heap, start offset
 * return: pointer to a block
 */
extern struct mem_block *mmFindBlock(struct mem_block *heap, int start);
d77 1
a77 1
extern void mmDestroy(struct mem_block *mmInit);
d82 1
a82 1
extern void mmDumpMemInfo(const struct mem_block *mmInit);
@


1.1
log
@Update libdrm to 2.4.3

This is needed for us to be able to update Mesa and xf86-video-intel.
Includes a few fixes, as well as the intel bufmgr interface and the
modesetting interface (which currently errors when you check if it's
enabled).

ok matthieu@@
@
text
@a23 1

a28 1

d33 6
a38 6
   struct mem_block *next, *prev;
   struct mem_block *next_free, *prev_free;
   struct mem_block *heap;
   int ofs,size;
   unsigned int free:1;
   unsigned int reserved:1;
d68 1
a68 1
				       int align2, int startSearch);
@


1.1.1.1
log
@Import libdrm 2.4.64
@
text
@d24 1
d30 1
a33 6
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "libdrm_macros.h"

d35 6
a40 6
	struct mem_block *next, *prev;
	struct mem_block *next_free, *prev_free;
	struct mem_block *heap;
	int ofs, size;
	unsigned int free:1;
	unsigned int reserved:1;
d43 10
d57 1
a57 1
drm_private extern struct mem_block *mmInit(int ofs, int size);
d69 2
a70 3
drm_private extern struct mem_block *mmAllocMem(struct mem_block *heap,
						int size, int align2,
						int startSearch);
d77 8
a84 1
drm_private extern int mmFreeMem(struct mem_block *b);
d89 1
a89 1
drm_private extern void mmDestroy(struct mem_block *mmInit);
d94 1
a94 1
drm_private extern void mmDumpMemInfo(const struct mem_block *mmInit);
@


