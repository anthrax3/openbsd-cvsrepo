head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.6
	OPENBSD_6_2_BASE:1.9
	libdrm_2_4_82:1.1.1.2
	libdrm_2_4_79:1.1.1.2
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	libdrm_2_4_75:1.1.1.2
	libdrm_2_4_73:1.1.1.2
	libdrm_2_4_71:1.1.1.2
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	libdrm_2_4_67:1.1.1.2
	OPENBSD_5_9:1.8.0.4
	OPENBSD_5_9_BASE:1.8
	libdrm_2_4_65:1.1.1.1
	libdrm_2_4_64:1.1.1.1
	libdrm:1.1.1
	OPENBSD_5_8:1.8.0.2
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.8
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.03.20.10.41.29;	author jsg;	state Exp;
branches;
next	1.8;
commitid	mbp2aNpFrhnQxfR8;

1.8
date	2015.07.15.23.19.17;	author jsg;	state Exp;
branches;
next	1.7;
commitid	NCd5WpEjxT48SV2b;

1.7
date	2015.02.07.01.34.35;	author jsg;	state Exp;
branches;
next	1.6;
commitid	ttKh4qveShZNixll;

1.6
date	2012.11.27.14.37.08;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.01.15.48.20;	author oga;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.15.15.51.05;	author oga;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.31.06.31.45;	author oga;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.03.19.43.26;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.26.23.14.37;	author oga;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2015.08.21.23.56.06;	author jsg;	state Exp;
branches;
next	1.1.1.2;
commitid	IINH94ZNafdY3NZg;

1.1.1.2
date	2016.03.20.10.19.55;	author jsg;	state Exp;
branches;
next	;
commitid	66ApiJCJocBDCoju;


desc
@@


1.9
log
@Merge libdrm 2.4.67
@
text
@/*
 * Copyright Â© 2007 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <eric@@anholt.net>
 *
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <string.h>
#include <stdlib.h>
#include <stdint.h>
#include <assert.h>
#include <errno.h>
#include <drm.h>
#include <i915_drm.h>
#include <pciaccess.h>
#include "libdrm_macros.h"
#include "intel_bufmgr.h"
#include "intel_bufmgr_priv.h"
#include "xf86drm.h"

/** @@file intel_bufmgr.c
 *
 * Convenience functions for buffer management methods.
 */

drm_intel_bo *
drm_intel_bo_alloc(drm_intel_bufmgr *bufmgr, const char *name,
		   unsigned long size, unsigned int alignment)
{
	return bufmgr->bo_alloc(bufmgr, name, size, alignment);
}

drm_intel_bo *
drm_intel_bo_alloc_for_render(drm_intel_bufmgr *bufmgr, const char *name,
			      unsigned long size, unsigned int alignment)
{
	return bufmgr->bo_alloc_for_render(bufmgr, name, size, alignment);
}

drm_intel_bo *
drm_intel_bo_alloc_userptr(drm_intel_bufmgr *bufmgr,
			   const char *name, void *addr,
			   uint32_t tiling_mode,
			   uint32_t stride,
			   unsigned long size,
			   unsigned long flags)
{
	if (bufmgr->bo_alloc_userptr)
		return bufmgr->bo_alloc_userptr(bufmgr, name, addr, tiling_mode,
						stride, size, flags);
	return NULL;
}

drm_intel_bo *
drm_intel_bo_alloc_tiled(drm_intel_bufmgr *bufmgr, const char *name,
                        int x, int y, int cpp, uint32_t *tiling_mode,
                        unsigned long *pitch, unsigned long flags)
{
	return bufmgr->bo_alloc_tiled(bufmgr, name, x, y, cpp,
				      tiling_mode, pitch, flags);
}

void
drm_intel_bo_reference(drm_intel_bo *bo)
{
	bo->bufmgr->bo_reference(bo);
}

void
drm_intel_bo_unreference(drm_intel_bo *bo)
{
	if (bo == NULL)
		return;

	bo->bufmgr->bo_unreference(bo);
}

int
drm_intel_bo_map(drm_intel_bo *buf, int write_enable)
{
	return buf->bufmgr->bo_map(buf, write_enable);
}

int
drm_intel_bo_unmap(drm_intel_bo *buf)
{
	return buf->bufmgr->bo_unmap(buf);
}

int
drm_intel_bo_subdata(drm_intel_bo *bo, unsigned long offset,
		     unsigned long size, const void *data)
{
	return bo->bufmgr->bo_subdata(bo, offset, size, data);
}

int
drm_intel_bo_get_subdata(drm_intel_bo *bo, unsigned long offset,
			 unsigned long size, void *data)
{
	int ret;
	if (bo->bufmgr->bo_get_subdata)
		return bo->bufmgr->bo_get_subdata(bo, offset, size, data);

	if (size == 0 || data == NULL)
		return 0;

	ret = drm_intel_bo_map(bo, 0);
	if (ret)
		return ret;
	memcpy(data, (unsigned char *)bo->virtual + offset, size);
	drm_intel_bo_unmap(bo);
	return 0;
}

void
drm_intel_bo_wait_rendering(drm_intel_bo *bo)
{
	bo->bufmgr->bo_wait_rendering(bo);
}

void
drm_intel_bufmgr_destroy(drm_intel_bufmgr *bufmgr)
{
	bufmgr->destroy(bufmgr);
}

int
drm_intel_bo_exec(drm_intel_bo *bo, int used,
		  drm_clip_rect_t * cliprects, int num_cliprects, int DR4)
{
	return bo->bufmgr->bo_exec(bo, used, cliprects, num_cliprects, DR4);
}

int
drm_intel_bo_mrb_exec(drm_intel_bo *bo, int used,
		drm_clip_rect_t *cliprects, int num_cliprects, int DR4,
		unsigned int rings)
{
	if (bo->bufmgr->bo_mrb_exec)
		return bo->bufmgr->bo_mrb_exec(bo, used,
					cliprects, num_cliprects, DR4,
					rings);

	switch (rings) {
	case I915_EXEC_DEFAULT:
	case I915_EXEC_RENDER:
		return bo->bufmgr->bo_exec(bo, used,
					   cliprects, num_cliprects, DR4);
	default:
		return -ENODEV;
	}
}

void
drm_intel_bufmgr_set_debug(drm_intel_bufmgr *bufmgr, int enable_debug)
{
	bufmgr->debug = enable_debug;
}

int
drm_intel_bufmgr_check_aperture_space(drm_intel_bo ** bo_array, int count)
{
	return bo_array[0]->bufmgr->check_aperture_space(bo_array, count);
}

int
drm_intel_bo_flink(drm_intel_bo *bo, uint32_t * name)
{
	if (bo->bufmgr->bo_flink)
		return bo->bufmgr->bo_flink(bo, name);

	return -ENODEV;
}

int
drm_intel_bo_emit_reloc(drm_intel_bo *bo, uint32_t offset,
			drm_intel_bo *target_bo, uint32_t target_offset,
			uint32_t read_domains, uint32_t write_domain)
{
	return bo->bufmgr->bo_emit_reloc(bo, offset,
					 target_bo, target_offset,
					 read_domains, write_domain);
}

/* For fence registers, not GL fences */
int
drm_intel_bo_emit_reloc_fence(drm_intel_bo *bo, uint32_t offset,
			      drm_intel_bo *target_bo, uint32_t target_offset,
			      uint32_t read_domains, uint32_t write_domain)
{
	return bo->bufmgr->bo_emit_reloc_fence(bo, offset,
					       target_bo, target_offset,
					       read_domains, write_domain);
}


int
drm_intel_bo_pin(drm_intel_bo *bo, uint32_t alignment)
{
	if (bo->bufmgr->bo_pin)
		return bo->bufmgr->bo_pin(bo, alignment);

	return -ENODEV;
}

int
drm_intel_bo_unpin(drm_intel_bo *bo)
{
	if (bo->bufmgr->bo_unpin)
		return bo->bufmgr->bo_unpin(bo);

	return -ENODEV;
}

int
drm_intel_bo_set_tiling(drm_intel_bo *bo, uint32_t * tiling_mode,
			uint32_t stride)
{
	if (bo->bufmgr->bo_set_tiling)
		return bo->bufmgr->bo_set_tiling(bo, tiling_mode, stride);

	*tiling_mode = I915_TILING_NONE;
	return 0;
}

int
drm_intel_bo_get_tiling(drm_intel_bo *bo, uint32_t * tiling_mode,
			uint32_t * swizzle_mode)
{
	if (bo->bufmgr->bo_get_tiling)
		return bo->bufmgr->bo_get_tiling(bo, tiling_mode, swizzle_mode);

	*tiling_mode = I915_TILING_NONE;
	*swizzle_mode = I915_BIT_6_SWIZZLE_NONE;
	return 0;
}

int
drm_intel_bo_set_softpin_offset(drm_intel_bo *bo, uint64_t offset)
{
	if (bo->bufmgr->bo_set_softpin_offset)
		return bo->bufmgr->bo_set_softpin_offset(bo, offset);

	return -ENODEV;
}

int
drm_intel_bo_disable_reuse(drm_intel_bo *bo)
{
	if (bo->bufmgr->bo_disable_reuse)
		return bo->bufmgr->bo_disable_reuse(bo);
	return 0;
}

int
drm_intel_bo_is_reusable(drm_intel_bo *bo)
{
	if (bo->bufmgr->bo_is_reusable)
		return bo->bufmgr->bo_is_reusable(bo);
	return 0;
}

int
drm_intel_bo_busy(drm_intel_bo *bo)
{
	if (bo->bufmgr->bo_busy)
		return bo->bufmgr->bo_busy(bo);
	return 0;
}

int
drm_intel_bo_madvise(drm_intel_bo *bo, int madv)
{
	if (bo->bufmgr->bo_madvise)
		return bo->bufmgr->bo_madvise(bo, madv);
	return -1;
}

int
drm_intel_bo_use_48b_address_range(drm_intel_bo *bo, uint32_t enable)
{
	if (bo->bufmgr->bo_use_48b_address_range) {
		bo->bufmgr->bo_use_48b_address_range(bo, enable);
		return 0;
	}

	return -ENODEV;
}

int
drm_intel_bo_references(drm_intel_bo *bo, drm_intel_bo *target_bo)
{
	return bo->bufmgr->bo_references(bo, target_bo);
}

int
drm_intel_get_pipe_from_crtc_id(drm_intel_bufmgr *bufmgr, int crtc_id)
{
	if (bufmgr->get_pipe_from_crtc_id)
		return bufmgr->get_pipe_from_crtc_id(bufmgr, crtc_id);
	return -1;
}

static size_t
drm_intel_probe_agp_aperture_size(int fd)
{
	struct pci_device *pci_dev;
	size_t size = 0;
	int ret;

	ret = pci_system_init();
	if (ret)
		goto err;

	/* XXX handle multiple adaptors? */
	pci_dev = pci_device_find_by_slot(0, 0, 2, 0);
	if (pci_dev == NULL)
		goto err;

	ret = pci_device_probe(pci_dev);
	if (ret)
		goto err;

	size = pci_dev->regions[2].size;
err:
	pci_system_cleanup ();
	return size;
}

int
drm_intel_get_aperture_sizes(int fd, size_t *mappable, size_t *total)
{

	struct drm_i915_gem_get_aperture aperture;
	int ret;

	ret = drmIoctl(fd, DRM_IOCTL_I915_GEM_GET_APERTURE, &aperture);
	if (ret)
		return ret;

	*mappable = 0;
	/* XXX add a query for the kernel value? */
	if (*mappable == 0)
		*mappable = drm_intel_probe_agp_aperture_size(fd);
	if (*mappable == 0)
		*mappable = 64 * 1024 * 1024; /* minimum possible value */
	*total = aperture.aper_size;
	return 0;
}
@


1.8
log
@update to libdrm 2.4.62
@
text
@d264 9
d302 11
@


1.7
log
@update to libdrm 2.4.59
@
text
@d40 1
a40 1
#include "libdrm.h"
d50 1
a50 1
drm_public drm_intel_bo *
d57 1
a57 1
drm_public drm_intel_bo *
d64 1
a64 1
drm_public drm_intel_bo *
d78 1
a78 1
drm_public drm_intel_bo *
d87 1
a87 1
drm_public void
d93 1
a93 1
drm_public void
d102 1
a102 1
drm_public int
d108 1
a108 1
drm_public int
d114 1
a114 1
drm_public int
d121 1
a121 1
drm_public int
d140 1
a140 1
drm_public void
d146 1
a146 1
drm_public void
d152 1
a152 1
drm_public int
d159 1
a159 1
drm_public int
d179 1
a179 1
drm_public void
d185 1
a185 1
drm_public int
d191 1
a191 1
drm_public int
d200 1
a200 1
drm_public int
d211 1
a211 1
drm_public int
d222 1
a222 1
drm_public int
d231 1
a231 1
drm_public int
d240 1
a240 1
drm_public int
d251 1
a251 1
drm_public int
d263 1
a263 1
drm_public int
d271 1
a271 1
drm_public int
d279 1
a279 1
drm_public int
d287 1
a287 1
drm_public int
d295 1
a295 1
drm_public int
d301 1
a301 1
drm_public int
d335 1
a335 1
drm_public int
@


1.6
log
@Update to libdrm 2.4.31 and add the non-yet-linked libkms, prodded by jsg@@

Tested by jsg@@, ajacoutot@@, shadchin@@ and matthieu@@, ok matthieu@@
@
text
@d40 1
d50 3
a52 2
drm_intel_bo *drm_intel_bo_alloc(drm_intel_bufmgr *bufmgr, const char *name,
				 unsigned long size, unsigned int alignment)
d57 3
a59 4
drm_intel_bo *drm_intel_bo_alloc_for_render(drm_intel_bufmgr *bufmgr,
					    const char *name,
					    unsigned long size,
					    unsigned int alignment)
d64 15
a78 1
drm_intel_bo *
d87 2
a88 1
void drm_intel_bo_reference(drm_intel_bo *bo)
d93 2
a94 1
void drm_intel_bo_unreference(drm_intel_bo *bo)
d102 2
a103 1
int drm_intel_bo_map(drm_intel_bo *buf, int write_enable)
d108 2
a109 1
int drm_intel_bo_unmap(drm_intel_bo *buf)
d114 1
a114 1
int
d121 1
a121 1
int
d140 2
a141 1
void drm_intel_bo_wait_rendering(drm_intel_bo *bo)
d146 2
a147 1
void drm_intel_bufmgr_destroy(drm_intel_bufmgr *bufmgr)
d152 1
a152 1
int
d159 1
a159 1
int
d179 2
a180 1
void drm_intel_bufmgr_set_debug(drm_intel_bufmgr *bufmgr, int enable_debug)
d185 2
a186 1
int drm_intel_bufmgr_check_aperture_space(drm_intel_bo ** bo_array, int count)
d191 2
a192 1
int drm_intel_bo_flink(drm_intel_bo *bo, uint32_t * name)
d200 1
a200 1
int
d211 1
a211 1
int
d222 2
a223 1
int drm_intel_bo_pin(drm_intel_bo *bo, uint32_t alignment)
d231 2
a232 1
int drm_intel_bo_unpin(drm_intel_bo *bo)
d240 3
a242 2
int drm_intel_bo_set_tiling(drm_intel_bo *bo, uint32_t * tiling_mode,
			    uint32_t stride)
d251 3
a253 2
int drm_intel_bo_get_tiling(drm_intel_bo *bo, uint32_t * tiling_mode,
			    uint32_t * swizzle_mode)
d263 2
a264 1
int drm_intel_bo_disable_reuse(drm_intel_bo *bo)
d271 2
a272 1
int drm_intel_bo_is_reusable(drm_intel_bo *bo)
d279 2
a280 1
int drm_intel_bo_busy(drm_intel_bo *bo)
d287 2
a288 1
int drm_intel_bo_madvise(drm_intel_bo *bo, int madv)
d295 2
a296 1
int drm_intel_bo_references(drm_intel_bo *bo, drm_intel_bo *target_bo)
d301 2
a302 1
int drm_intel_get_pipe_from_crtc_id(drm_intel_bufmgr *bufmgr, int crtc_id)
d335 2
a336 3
int drm_intel_get_aperture_sizes(int fd,
				 size_t *mappable,
				 size_t *total)
@


1.5
log
@Update libdrm_intel to that contained in libdrm 2.4.24. Needed for
updates to the ddx and to stop mesa 7.9.2 crashing very fast.

ok matthieu@@
@
text
@d39 1
d42 1
d107 1
a107 1
	if (bo->bufmgr->bo_subdata)
d148 3
a150 1
	if (rings == 0)
d153 3
a155 2

	return -ENODEV;
d273 48
@


1.4
log
@Add drm_intel_bo_is_reusable(), to check if a buffer object will be put
in the userland BO cache or not. Bump minor.

From Chris Wilson in upstream git. ok matthieu@@
@
text
@d97 1
a97 13
	int ret;

	if (bo->bufmgr->bo_subdata)
		return bo->bufmgr->bo_subdata(bo, offset, size, data);
	if (size == 0 || data == NULL)
		return 0;

	ret = drm_intel_bo_map(bo, 1);
	if (ret)
		return ret;
	memcpy((unsigned char *)bo->virtual + offset, data, size);
	drm_intel_bo_unmap(bo);
	return 0;
d134 17
@


1.3
log
@update libdrm to 2.4.15.

This diff seems larger than it is since upstream reindented some
sources.  This updates libdrm_intel to -current (which only affect the
GEM code) and libdrm to 2.4.15.  bumping both minor versions.

Discussed with matthieu@@
@
text
@d232 7
@


1.2
log
@update libdrm to 2.4.9 (actually to -current, but the only real changes
are to some assertions and a small change to modesetting code).

bump libdrm_intel minor due to added symbols, libdrm doesn't get bumped,
no change to symbol list.

ok matthieu@@.
@
text
@d47 10
a56 3
drm_intel_bo *
drm_intel_bo_alloc(drm_intel_bufmgr *bufmgr, const char *name,
		   unsigned long size, unsigned int alignment)
d58 1
a58 1
   return bufmgr->bo_alloc(bufmgr, name, size, alignment);
d62 3
a64 2
drm_intel_bo_alloc_for_render(drm_intel_bufmgr *bufmgr, const char *name,
			      unsigned long size, unsigned int alignment)
d66 2
a67 1
   return bufmgr->bo_alloc_for_render(bufmgr, name, size, alignment);
d70 1
a70 2
void
drm_intel_bo_reference(drm_intel_bo *bo)
d72 1
a72 1
   bo->bufmgr->bo_reference(bo);
d75 1
a75 2
void
drm_intel_bo_unreference(drm_intel_bo *bo)
d77 2
a78 2
   if (bo == NULL)
      return;
d80 1
a80 1
   bo->bufmgr->bo_unreference(bo);
d83 1
a83 2
int
drm_intel_bo_map(drm_intel_bo *buf, int write_enable)
d85 1
a85 1
   return buf->bufmgr->bo_map(buf, write_enable);
d88 1
a88 2
int
drm_intel_bo_unmap(drm_intel_bo *buf)
d90 1
a90 1
   return buf->bufmgr->bo_unmap(buf);
d97 1
a97 1
   int ret;
d99 11
a109 11
   if (bo->bufmgr->bo_subdata)
      return bo->bufmgr->bo_subdata(bo, offset, size, data);
   if (size == 0 || data == NULL)
      return 0;

   ret = drm_intel_bo_map(bo, 1);
   if (ret)
       return ret;
   memcpy((unsigned char *)bo->virtual + offset, data, size);
   drm_intel_bo_unmap(bo);
   return 0;
d116 3
a118 3
   int ret;
   if (bo->bufmgr->bo_subdata)
      return bo->bufmgr->bo_get_subdata(bo, offset, size, data);
d120 2
a121 2
   if (size == 0 || data == NULL)
      return 0;
d123 6
a128 6
   ret = drm_intel_bo_map(bo, 0);
   if (ret)
       return ret;
   memcpy(data, (unsigned char *)bo->virtual + offset, size);
   drm_intel_bo_unmap(bo);
   return 0;
d131 1
a131 2
void
drm_intel_bo_wait_rendering(drm_intel_bo *bo)
d133 1
a133 1
   bo->bufmgr->bo_wait_rendering(bo);
d136 1
a136 2
void
drm_intel_bufmgr_destroy(drm_intel_bufmgr *bufmgr)
d138 1
a138 1
   bufmgr->destroy(bufmgr);
d143 1
a143 2
		  drm_clip_rect_t *cliprects, int num_cliprects,
		  int DR4)
d145 1
a145 1
   return bo->bufmgr->bo_exec(bo, used, cliprects, num_cliprects, DR4);
d148 1
a148 2
void
drm_intel_bufmgr_set_debug(drm_intel_bufmgr *bufmgr, int enable_debug)
d150 1
a150 1
   bufmgr->debug = enable_debug;
d153 1
a153 2
int
drm_intel_bufmgr_check_aperture_space(drm_intel_bo **bo_array, int count)
d158 1
a158 2
int
drm_intel_bo_flink(drm_intel_bo *bo, uint32_t *name)
d160 2
a161 2
    if (bo->bufmgr->bo_flink)
	return bo->bufmgr->bo_flink(bo, name);
d163 1
a163 1
    return -ENODEV;
d176 1
d178 3
a180 1
drm_intel_bo_pin(drm_intel_bo *bo, uint32_t alignment)
d182 4
a185 2
    if (bo->bufmgr->bo_pin)
	return bo->bufmgr->bo_pin(bo, alignment);
d187 7
a193 1
    return -ENODEV;
d196 1
a196 2
int
drm_intel_bo_unpin(drm_intel_bo *bo)
d198 2
a199 2
    if (bo->bufmgr->bo_unpin)
	return bo->bufmgr->bo_unpin(bo);
d201 1
a201 1
    return -ENODEV;
d204 1
a204 1
int drm_intel_bo_set_tiling(drm_intel_bo *bo, uint32_t *tiling_mode,
d207 24
a230 2
    if (bo->bufmgr->bo_set_tiling)
	return bo->bufmgr->bo_set_tiling(bo, tiling_mode, stride);
d232 5
a236 2
    *tiling_mode = I915_TILING_NONE;
    return 0;
d239 1
a239 2
int drm_intel_bo_get_tiling(drm_intel_bo *bo, uint32_t *tiling_mode,
			    uint32_t *swizzle_mode)
d241 4
a244 2
    if (bo->bufmgr->bo_get_tiling)
	return bo->bufmgr->bo_get_tiling(bo, tiling_mode, swizzle_mode);
d246 10
a255 3
    *tiling_mode = I915_TILING_NONE;
    *swizzle_mode = I915_BIT_6_SWIZZLE_NONE;
    return 0;
@


1.1
log
@Update libdrm to 2.4.3

This is needed for us to be able to update Mesa and xf86-video-intel.
Includes a few fixes, as well as the intel bufmgr interface and the
modesetting interface (which currently errors when you check if it's
enabled).

ok matthieu@@
@
text
@d54 7
a214 229

#if 0
/*
 * $XFree86: xc/lib/XThrStub/UIThrStubs.c,v 3.3 2001/11/18 21:13:26 herrb Exp $
 *
 * Copyright (c) 1995 David E. Wexelblat.  All rights reserved
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL DAVID E. WEXELBLAT BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 * 
 * Except as contained in this notice, the name of David E. Wexelblat shall
 * not be used in advertising or otherwise to promote the sale, use or
 * other dealings in this Software without prior written authorization
 * from David E. Wexelblat.
 * 
 */

/*
 * Stubs for thread functions needed by the X library.  Supports 
 * UnixWare 2.x threads; may support Solaris 2 threads as well, but not
 * tested.  Defining things this way removes the dependency of the X
 * library on the threads library, but still supports threads if the user
 * specificies the thread library on the link line.
 */

/*
 * Modifications by Carlos A M dos Santos, XFree86 Project, November 1999.
 *
 * Explanation from <X11/Xos_r.h>:
 * The structure below is complicated, mostly because P1003.1c (the
 * IEEE POSIX Threads spec) went through lots of drafts, and some
 * vendors shipped systems based on draft API that were changed later.
 * Unfortunately POSIX did not provide a feature-test macro for
 * distinguishing each of the drafts.
 */

#include <stdlib.h>

static int _Xthr_once_stub_(void *, void (*)(void));
static int _Xthr_key_create_stub_(unsigned int *, void (*)(void *));
static int _Xthr_setspecific_stub_(unsigned int, const void *);
static void *_Xthr_getspecific_stub_(unsigned int);

#ifdef CTHREADS
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <cthreads.h>
typedef cthread_t xthread_t;
#define xthread_self cthread_self
#pragma weak cthread_self = _Xthr_self_stub_
#define xmutex_init mutex_init
#pragma weak mutex_init = _Xthr_zero_stub_
#pragma weak mutex_clear = _Xthr_zero_stub_
#pragma weak mutex_lock = _Xthr_zero_stub_
#pragma weak mutex_unlock = _Xthr_zero_stub_
#pragma weak condition_init = _Xthr_zero_stub_
#pragma weak condition_clear = _Xthr_zero_stub_
#pragma weak condition_wait = _Xthr_zero_stub_
#pragma weak condition_signal = _Xthr_zero_stub_
#pragma weak condition_broadcast = _Xthr_zero_stub_
#else /* !CTHREADS */
#if defined(SVR4) && !defined(__sgi)
#include <thread.h>
typedef thread_t xthread_t;
#pragma weak thr_self = _Xthr_self_stub_
#pragma weak mutex_init = _Xthr_zero_stub_
#pragma weak mutex_destroy = _Xthr_zero_stub_
#pragma weak mutex_lock = _Xthr_zero_stub_
#pragma weak mutex_unlock = _Xthr_zero_stub_
#pragma weak cond_init = _Xthr_zero_stub_
#pragma weak cond_destroy = _Xthr_zero_stub_
#pragma weak cond_wait = _Xthr_zero_stub_
#pragma weak cond_signal = _Xthr_zero_stub_
#pragma weak cond_broadcast = _Xthr_zero_stub_
#else /* !SVR4 */
#ifdef WIN32
    /*
     * Don't know what to do here. Is there something do be done at all?
     */
#else /* !WIN32 */
#ifdef USE_TIS_SUPPORT
#include <tis.h>
typedef pthread_t xthread_t;
#pragma weak tis_self = _Xthr_self_stub_
#pragma weak tis_mutex_init = _Xthr_zero_stub_
#pragma weak tis_mutex_destroy = _Xthr_zero_stub_
#pragma weak tis_mutex_lock = _Xthr_zero_stub_
#pragma weak tis_mutex_unlock = _Xthr_zero_stub_
#pragma weak tis_cond_init = _Xthr_zero_stub_
#pragma weak tis_cond_destroy = _Xthr_zero_stub_
#pragma weak tis_cond_wait = _Xthr_zero_stub_
#pragma weak tis_cond_signal = _Xthr_zero_stub_
#pragma weak tis_cond_broadcast = _Xthr_zero_stub_
#else
#include <pthread.h>
typedef pthread_t xthread_t;
#if __GNUC__ >= 3 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
xthread_t pthread_self()    __attribute__ ((weak, alias ("_Xthr_self_stub_")));
int pthread_mutex_init()    __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_mutex_destroy() __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_mutex_lock()    __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_mutex_unlock()  __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_cond_init()     __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_cond_destroy()  __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_cond_wait()     __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_cond_signal()   __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_cond_broadcast() __attribute__ ((weak, alias ("_Xthr_zero_stub_")));
int pthread_key_create()    __attribute__ ((weak, alias ("_Xthr_key_create_stub_")));
void *pthread_getspecific()  __attribute__ ((weak, alias ("_Xthr_getspecific_stub_")));
int pthread_setspecific()   __attribute__ ((weak, alias ("_Xthr_setspecific_stub_")));
int pthread_once() __attribute__ ((weak, alias ("_Xthr_once_stub_")));
#else	/* __GNUC__ */
#pragma weak pthread_self = _Xthr_self_stub_
#pragma weak pthread_mutex_init = _Xthr_zero_stub_
#pragma weak pthread_mutex_destroy = _Xthr_zero_stub_
#pragma weak pthread_mutex_lock = _Xthr_zero_stub_
#pragma weak pthread_mutex_unlock = _Xthr_zero_stub_
#pragma weak pthread_cond_init = _Xthr_zero_stub_
#pragma weak pthread_cond_destroy = _Xthr_zero_stub_
#pragma weak pthread_cond_wait = _Xthr_zero_stub_
#pragma weak pthread_cond_signal = _Xthr_zero_stub_
#pragma weak pthread_cond_broadcast = _Xthr_zero_stub_
/* These are added for libGL */
#pragma weak pthread_key_create = _Xthr_key_create_stub_
#pragma weak pthread_getspecific = _Xthr_getspecific_stub_
#pragma weak pthread_setspecific = _Xthr_setspecific_stub_
#pragam weak pthread_once = _Xthr_once_stub_
#endif	/* __GNUC__ */
#if defined(_DECTHREADS_) || defined(linux)
#pragma weak pthread_equal = _Xthr_equal_stub_	/* See Xthreads.h! */
int
_Xthr_equal_stub_()
{
    return(1);
}
#endif /* _DECTHREADS_ || linux */
#endif /* USE_TIS_SUPPORT */
#endif /* WIN32 */
#endif /* SVR4 */
#endif /* CTHREADS */

static xthread_t 
_Xthr_self_stub_()
{
    static xthread_t _X_no_thread_id;

    return(_X_no_thread_id);	/* defined by <X11/Xthreads.h> */
}

static int 
_Xthr_zero_stub_()
{
    return(0);
}

static int 
_Xthr_once_stub_(void *id, void (*routine)(void))
{
    static int done = 0;
    
    if (!done) {
	routine();
	done++;
    }
    return 0;
}

#include <errno.h>

#define XTHR_KEYS_CHUNK 100

static void **_Xthr_keys_ = NULL;
static unsigned int _Xthr_last_key_ = 0;

static int
_Xthr_key_create_stub_(unsigned int *key, void (*destructor)(void *))
{
    void **tmp;
    unsigned int i;

    if ((_Xthr_last_key_ % XTHR_KEYS_CHUNK) == 0) {
	tmp = realloc(_Xthr_keys_,
	    (_Xthr_last_key_ + XTHR_KEYS_CHUNK)*sizeof(void *));
	if (tmp == NULL) {
	    free(_Xthr_keys_);
	    return ENOMEM;
	}
	for (i = 0; i < XTHR_KEYS_CHUNK; i++)
	    tmp[_Xthr_last_key_ + i] = 0;
	_Xthr_keys_ = tmp;
    }
    *key = _Xthr_last_key_++;
    return 0;
}

static int
_Xthr_setspecific_stub_(unsigned int key, const void *value)
{
    if (_Xthr_last_key_ == 0 || key >= _Xthr_last_key_)
	return EINVAL;
    _Xthr_keys_[key] = value;
    return 0;
}

static void *
_Xthr_getspecific_stub_(unsigned int key)
{
    if (_Xthr_last_key_ == 0 || key >= _Xthr_last_key_)
	return NULL;
    return(_Xthr_keys_[key]);
}
#endif
@


1.1.1.1
log
@Import libdrm 2.4.64
@
text
@a38 2
#include <pciaccess.h>
#include "libdrm_macros.h"
a40 1
#include "xf86drm.h"
d51 1
a51 31
	return bufmgr->bo_alloc(bufmgr, name, size, alignment);
}

drm_intel_bo *
drm_intel_bo_alloc_for_render(drm_intel_bufmgr *bufmgr, const char *name,
			      unsigned long size, unsigned int alignment)
{
	return bufmgr->bo_alloc_for_render(bufmgr, name, size, alignment);
}

drm_intel_bo *
drm_intel_bo_alloc_userptr(drm_intel_bufmgr *bufmgr,
			   const char *name, void *addr,
			   uint32_t tiling_mode,
			   uint32_t stride,
			   unsigned long size,
			   unsigned long flags)
{
	if (bufmgr->bo_alloc_userptr)
		return bufmgr->bo_alloc_userptr(bufmgr, name, addr, tiling_mode,
						stride, size, flags);
	return NULL;
}

drm_intel_bo *
drm_intel_bo_alloc_tiled(drm_intel_bufmgr *bufmgr, const char *name,
                        int x, int y, int cpp, uint32_t *tiling_mode,
                        unsigned long *pitch, unsigned long flags)
{
	return bufmgr->bo_alloc_tiled(bufmgr, name, x, y, cpp,
				      tiling_mode, pitch, flags);
d57 1
a57 1
	bo->bufmgr->bo_reference(bo);
d63 2
a64 2
	if (bo == NULL)
		return;
d66 1
a66 1
	bo->bufmgr->bo_unreference(bo);
d72 1
a72 1
	return buf->bufmgr->bo_map(buf, write_enable);
d78 1
a78 1
	return buf->bufmgr->bo_unmap(buf);
d85 13
a97 1
	return bo->bufmgr->bo_subdata(bo, offset, size, data);
d104 13
a116 13
	int ret;
	if (bo->bufmgr->bo_get_subdata)
		return bo->bufmgr->bo_get_subdata(bo, offset, size, data);

	if (size == 0 || data == NULL)
		return 0;

	ret = drm_intel_bo_map(bo, 0);
	if (ret)
		return ret;
	memcpy(data, (unsigned char *)bo->virtual + offset, size);
	drm_intel_bo_unmap(bo);
	return 0;
d122 1
a122 1
	bo->bufmgr->bo_wait_rendering(bo);
d128 1
a128 1
	bufmgr->destroy(bufmgr);
d133 2
a134 9
		  drm_clip_rect_t * cliprects, int num_cliprects, int DR4)
{
	return bo->bufmgr->bo_exec(bo, used, cliprects, num_cliprects, DR4);
}

int
drm_intel_bo_mrb_exec(drm_intel_bo *bo, int used,
		drm_clip_rect_t *cliprects, int num_cliprects, int DR4,
		unsigned int rings)
d136 1
a136 13
	if (bo->bufmgr->bo_mrb_exec)
		return bo->bufmgr->bo_mrb_exec(bo, used,
					cliprects, num_cliprects, DR4,
					rings);

	switch (rings) {
	case I915_EXEC_DEFAULT:
	case I915_EXEC_RENDER:
		return bo->bufmgr->bo_exec(bo, used,
					   cliprects, num_cliprects, DR4);
	default:
		return -ENODEV;
	}
d142 1
a142 1
	bufmgr->debug = enable_debug;
d146 1
a146 1
drm_intel_bufmgr_check_aperture_space(drm_intel_bo ** bo_array, int count)
d152 1
a152 1
drm_intel_bo_flink(drm_intel_bo *bo, uint32_t * name)
d154 2
a155 2
	if (bo->bufmgr->bo_flink)
		return bo->bufmgr->bo_flink(bo, name);
d157 1
a157 1
	return -ENODEV;
a169 12
/* For fence registers, not GL fences */
int
drm_intel_bo_emit_reloc_fence(drm_intel_bo *bo, uint32_t offset,
			      drm_intel_bo *target_bo, uint32_t target_offset,
			      uint32_t read_domains, uint32_t write_domain)
{
	return bo->bufmgr->bo_emit_reloc_fence(bo, offset,
					       target_bo, target_offset,
					       read_domains, write_domain);
}


d173 2
a174 2
	if (bo->bufmgr->bo_pin)
		return bo->bufmgr->bo_pin(bo, alignment);
d176 1
a176 1
	return -ENODEV;
d182 2
a183 2
	if (bo->bufmgr->bo_unpin)
		return bo->bufmgr->bo_unpin(bo);
d185 1
a185 1
	return -ENODEV;
d188 2
a189 3
int
drm_intel_bo_set_tiling(drm_intel_bo *bo, uint32_t * tiling_mode,
			uint32_t stride)
d191 2
a192 2
	if (bo->bufmgr->bo_set_tiling)
		return bo->bufmgr->bo_set_tiling(bo, tiling_mode, stride);
d194 2
a195 2
	*tiling_mode = I915_TILING_NONE;
	return 0;
d198 2
a199 3
int
drm_intel_bo_get_tiling(drm_intel_bo *bo, uint32_t * tiling_mode,
			uint32_t * swizzle_mode)
d201 2
a202 2
	if (bo->bufmgr->bo_get_tiling)
		return bo->bufmgr->bo_get_tiling(bo, tiling_mode, swizzle_mode);
d204 3
a206 3
	*tiling_mode = I915_TILING_NONE;
	*swizzle_mode = I915_BIT_6_SWIZZLE_NONE;
	return 0;
d209 31
a239 7
int
drm_intel_bo_disable_reuse(drm_intel_bo *bo)
{
	if (bo->bufmgr->bo_disable_reuse)
		return bo->bufmgr->bo_disable_reuse(bo);
	return 0;
}
d241 7
a247 7
int
drm_intel_bo_is_reusable(drm_intel_bo *bo)
{
	if (bo->bufmgr->bo_is_reusable)
		return bo->bufmgr->bo_is_reusable(bo);
	return 0;
}
d249 10
a258 7
int
drm_intel_bo_busy(drm_intel_bo *bo)
{
	if (bo->bufmgr->bo_busy)
		return bo->bufmgr->bo_busy(bo);
	return 0;
}
d260 1
a260 7
int
drm_intel_bo_madvise(drm_intel_bo *bo, int madv)
{
	if (bo->bufmgr->bo_madvise)
		return bo->bufmgr->bo_madvise(bo, madv);
	return -1;
}
d262 156
a417 4
int
drm_intel_bo_references(drm_intel_bo *bo, drm_intel_bo *target_bo)
{
	return bo->bufmgr->bo_references(bo, target_bo);
d420 2
a421 2
int
drm_intel_get_pipe_from_crtc_id(drm_intel_bufmgr *bufmgr, int crtc_id)
d423 4
a426 3
	if (bufmgr->get_pipe_from_crtc_id)
		return bufmgr->get_pipe_from_crtc_id(bufmgr, crtc_id);
	return -1;
d429 2
a430 2
static size_t
drm_intel_probe_agp_aperture_size(int fd)
d432 3
a434 42
	struct pci_device *pci_dev;
	size_t size = 0;
	int ret;

	ret = pci_system_init();
	if (ret)
		goto err;

	/* XXX handle multiple adaptors? */
	pci_dev = pci_device_find_by_slot(0, 0, 2, 0);
	if (pci_dev == NULL)
		goto err;

	ret = pci_device_probe(pci_dev);
	if (ret)
		goto err;

	size = pci_dev->regions[2].size;
err:
	pci_system_cleanup ();
	return size;
}

int
drm_intel_get_aperture_sizes(int fd, size_t *mappable, size_t *total)
{

	struct drm_i915_gem_get_aperture aperture;
	int ret;

	ret = drmIoctl(fd, DRM_IOCTL_I915_GEM_GET_APERTURE, &aperture);
	if (ret)
		return ret;

	*mappable = 0;
	/* XXX add a query for the kernel value? */
	if (*mappable == 0)
		*mappable = drm_intel_probe_agp_aperture_size(fd);
	if (*mappable == 0)
		*mappable = 64 * 1024 * 1024; /* minimum possible value */
	*total = aperture.aper_size;
	return 0;
d436 1
@


1.1.1.2
log
@Import libdrm 2.4.67
@
text
@a263 9
drm_intel_bo_set_softpin_offset(drm_intel_bo *bo, uint64_t offset)
{
	if (bo->bufmgr->bo_set_softpin_offset)
		return bo->bufmgr->bo_set_softpin_offset(bo, offset);

	return -ENODEV;
}

int
a292 11
}

int
drm_intel_bo_use_48b_address_range(drm_intel_bo *bo, uint32_t enable)
{
	if (bo->bufmgr->bo_use_48b_address_range) {
		bo->bufmgr->bo_use_48b_address_range(bo, enable);
		return 0;
	}

	return -ENODEV;
@


