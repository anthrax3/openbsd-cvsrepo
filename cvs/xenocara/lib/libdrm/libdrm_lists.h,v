head	1.3;
access;
symbols
	libdrm_2_4_75:1.1.1.1
	libdrm_2_4_73:1.1.1.1
	libdrm_2_4_71:1.1.1.1
	OPENBSD_6_0:1.3.0.14
	OPENBSD_6_0_BASE:1.3
	libdrm_2_4_67:1.1.1.1
	OPENBSD_5_9:1.3.0.12
	OPENBSD_5_9_BASE:1.3
	libdrm_2_4_65:1.1.1.1
	libdrm_2_4_64:1.1.1.1
	libdrm:1.1.1
	OPENBSD_5_8:1.3.0.10
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.8
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.16
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.14
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.03.25.02.32.20;	author jsg;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.03.19.43.26;	author oga;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.26.23.14.37;	author oga;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2015.08.21.23.55.39;	author jsg;	state Exp;
branches;
next	;
commitid	IINH94ZNafdY3NZg;


desc
@@


1.3
log
@update to libdrm 2.4.42

tested by matthieu@@ krw@@ mpi@@ shadchin@@ and ajacoutot@@
ok mpi@@
@
text
@/**************************************************************************
 *
 * Copyright 2006 Tungsten Graphics, Inc., Bismarck, ND. USA.
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sub license, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 */

/*
 * List macros heavily inspired by the Linux kernel
 * list handling. No list looping yet.
 */

#include <stddef.h>

typedef struct _drmMMListHead
{
    struct _drmMMListHead *prev;
    struct _drmMMListHead *next;
} drmMMListHead;

#define DRMINITLISTHEAD(__item)		       \
  do{					       \
    (__item)->prev = (__item);		       \
    (__item)->next = (__item);		       \
  } while (0)

#define DRMLISTADD(__item, __list)		\
  do {						\
    (__item)->prev = (__list);			\
    (__item)->next = (__list)->next;		\
    (__list)->next->prev = (__item);		\
    (__list)->next = (__item);			\
  } while (0)

#define DRMLISTADDTAIL(__item, __list)		\
  do {						\
    (__item)->next = (__list);			\
    (__item)->prev = (__list)->prev;		\
    (__list)->prev->next = (__item);		\
    (__list)->prev = (__item);			\
  } while(0)

#define DRMLISTDEL(__item)			\
  do {						\
    (__item)->prev->next = (__item)->next;	\
    (__item)->next->prev = (__item)->prev;	\
  } while(0)

#define DRMLISTDELINIT(__item)			\
  do {						\
    (__item)->prev->next = (__item)->next;	\
    (__item)->next->prev = (__item)->prev;	\
    (__item)->next = (__item);			\
    (__item)->prev = (__item);			\
  } while(0)

#define DRMLISTENTRY(__type, __item, __field)   \
    ((__type *)(((char *) (__item)) - offsetof(__type, __field)))

#define DRMLISTEMPTY(__item) ((__item)->next == (__item))

#define DRMLISTSINGLE(__list) \
	(!DRMLISTEMPTY(__list) && ((__list)->next == (__list)->prev))

#define DRMLISTFOREACH(__item, __list)					\
	for ((__item) = (__list)->next;					\
	     (__item) != (__list); (__item) = (__item)->next)

#define DRMLISTFOREACHSAFE(__item, __temp, __list)			\
	for ((__item) = (__list)->next, (__temp) = (__item)->next;	\
	     (__item) != (__list);					\
	     (__item) = (__temp), (__temp) = (__item)->next)

#define DRMLISTFOREACHSAFEREVERSE(__item, __temp, __list)		\
	for ((__item) = (__list)->prev, (__temp) = (__item)->prev;	\
	     (__item) != (__list);					\
	     (__item) = (__temp), (__temp) = (__item)->prev)

#define DRMLISTFOREACHENTRY(__item, __list, __head)                            \
	for ((__item) = DRMLISTENTRY(typeof(*__item), (__list)->next, __head); \
	     &(__item)->__head != (__list);                                    \
	     (__item) = DRMLISTENTRY(typeof(*__item),                          \
				     (__item)->__head.next, __head))

#define DRMLISTFOREACHENTRYSAFE(__item, __temp, __list, __head)                \
	for ((__item) = DRMLISTENTRY(typeof(*__item), (__list)->next, __head), \
	     (__temp) = DRMLISTENTRY(typeof(*__item),                          \
				     (__item)->__head.next, __head);           \
	     &(__item)->__head != (__list);                                    \
	     (__item) = (__temp),                                              \
	     (__temp) = DRMLISTENTRY(typeof(*__item),                          \
				     (__temp)->__head.next, __head))

#define DRMLISTJOIN(__list, __join) if (!DRMLISTEMPTY(__list)) {	\
	(__list)->next->prev = (__join);				\
	(__list)->prev->next = (__join)->next;				\
	(__join)->next->prev = (__list)->prev;				\
	(__join)->next = (__list)->next;				\
}
@


1.2
log
@update libdrm to 2.4.9 (actually to -current, but the only real changes
are to some assertions and a small change to modesetting code).

bump libdrm_intel minor due to added symbols, libdrm doesn't get bumped,
no change to symbol list.

ok matthieu@@.
@
text
@d81 7
d97 22
@


1.1
log
@Update libdrm to 2.4.3

This is needed for us to be able to update Mesa and xf86-video-intel.
Includes a few fixes, as well as the intel bufmgr interface and the
modesetting interface (which currently errors when you check if it's
enabled).

ok matthieu@@
@
text
@d32 2
@


1.1.1.1
log
@Import libdrm 2.4.64
@
text
@a31 2
#include <stddef.h>

a78 7
#define DRMLISTSINGLE(__list) \
	(!DRMLISTEMPTY(__list) && ((__list)->next == (__list)->prev))

#define DRMLISTFOREACH(__item, __list)					\
	for ((__item) = (__list)->next;					\
	     (__item) != (__list); (__item) = (__item)->next)

a87 22

#define DRMLISTFOREACHENTRY(__item, __list, __head)                            \
	for ((__item) = DRMLISTENTRY(typeof(*__item), (__list)->next, __head); \
	     &(__item)->__head != (__list);                                    \
	     (__item) = DRMLISTENTRY(typeof(*__item),                          \
				     (__item)->__head.next, __head))

#define DRMLISTFOREACHENTRYSAFE(__item, __temp, __list, __head)                \
	for ((__item) = DRMLISTENTRY(typeof(*__item), (__list)->next, __head), \
	     (__temp) = DRMLISTENTRY(typeof(*__item),                          \
				     (__item)->__head.next, __head);           \
	     &(__item)->__head != (__list);                                    \
	     (__item) = (__temp),                                              \
	     (__temp) = DRMLISTENTRY(typeof(*__item),                          \
				     (__temp)->__head.next, __head))

#define DRMLISTJOIN(__list, __join) if (!DRMLISTEMPTY(__list)) {	\
	(__list)->next->prev = (__join);				\
	(__list)->prev->next = (__join)->next;				\
	(__join)->next->prev = (__list)->prev;				\
	(__join)->next = (__list)->next;				\
}
@


