head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.18
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.16
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.14
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.12
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.10
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.8
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.10
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_0:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.05.31.14.39.06;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.03.04.18.21.36;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.08.23.14.00.11;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.24.09.02.49;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.16.35.10;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.16.35.10;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@update to libFS 1.0.5
@
text
@/*
 * Copyright 1990 Network Computing Devices;
 * Portions Copyright 1987 by Digital Equipment Corporation
 *
 * Permission to use, copy, modify, distribute, and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation, and that the names of Network Computing
 * Devices or Digital not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission. Network Computing Devices or Digital make no representations
 * about the suitability of this software for any purpose.  It is provided
 * "as is" without express or implied warranty.
 *
 * NETWORK COMPUTING DEVICES AND  DIGITAL DISCLAIM ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL NETWORK COMPUTING DEVICES
 * OR DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES
 * OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */

/*

Copyright 1987, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

*/
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include	"FSlibint.h"

char      **
FSListFontsWithXInfo(
    FSServer		  *svr,
    const char		  *pattern,
    int			   maxNames,
    int			  *count,
    FSXFontInfoHeader	***info,
    FSPropInfo		***pprops,
    FSPropOffset	***offsets,
    unsigned char	***prop_data)
{
    long        nbytes;
    int         i,
                j;
    size_t      size = 0;
    FSXFontInfoHeader **fhdr = (FSXFontInfoHeader **) NULL;
    FSPropInfo **pi = (FSPropInfo **) NULL;
    FSPropOffset **po = (FSPropOffset **) NULL;
    unsigned char **pd = (unsigned char **) NULL;
    char      **flist = NULL;
    fsListFontsWithXInfoReply reply;
    fsListFontsWithXInfoReq *req;
    fsPropInfo local_pi;
    fsPropOffset local_po;
    Status status;
    Bool eat_data = True;

    GetReq(ListFontsWithXInfo, req);
    req->maxNames = maxNames;
    nbytes = req->nbytes = pattern ? strlen(pattern) : 0;
    req->length += (nbytes + 3) >> 2;
    _FSSend(svr, pattern, nbytes);

    for (i = 0;; i++) {
	if (FSProtocolVersion(svr) > 1)
	{
	    status = _FSReply(svr, (fsReply *) &reply, 0, fsFalse);
	    if (status != 0  &&  reply.nameLength == 0)	/* got last reply */
		break;
	    if (status)
		_FSRead(svr, ((char *) &reply) + SIZEOF(fsGenericReply),
			SIZEOF(fsListFontsWithXInfoReply) -
			SIZEOF(fsGenericReply));
	} else {
	    status = _FSReply(svr, (fsReply *) & reply,
			      ((SIZEOF(fsListFontsWithXInfoReply) -
				SIZEOF(fsGenericReply)) >> 2), fsFalse);
	}
	if (!status) {
	    eat_data = False;
	    goto badmem;
	}
	if (reply.nameLength == 0)	/* got last reply in version 1 */
	    break;
	if ((i + reply.nReplies) >= size) {

	    if (reply.nReplies > SIZE_MAX - i - 1)
		goto badmem;
	    size = i + reply.nReplies + 1;

	    if (size > SIZE_MAX / sizeof(char *))
		goto badmem;

	    if (fhdr) {
#define ResizeArray(var, type) { \
		    type **tmp = FSrealloc(var, sizeof(type *) * size); \
		    if (tmp)						\
			var = tmp;					\
		    else						\
			goto badmem;					\
		}

		ResizeArray(fhdr, FSXFontInfoHeader)
		ResizeArray(flist, char)
		ResizeArray(pi, FSPropInfo)
		ResizeArray(po, FSPropOffset)
		ResizeArray(pd, unsigned char)
	    } else {
#define InitArray(var, type) \
		if ((var = FSmalloc(sizeof(type *) * size)) == NULL) {	\
		    goto badmem;					\
		}

		InitArray(fhdr, FSXFontInfoHeader)
		InitArray(flist, char)
		InitArray(pi, FSPropInfo)
		InitArray(po, FSPropOffset)
		InitArray(pd, unsigned char)
	    }
	}
	fhdr[i] = FSmalloc(sizeof(FSXFontInfoHeader));
	if (!fhdr[i]) {
	    goto badmem;
	}
	FSUnpack_XFontInfoHeader(&reply, fhdr[i], FSProtocolVersion(svr));

	/* alloc space for the name */
	flist[i] = FSmalloc(reply.nameLength + 1);
	if (!flist[i])
	    goto cleanfhdr;
	if (FSProtocolVersion(svr) == 1)
	{
	    /* get the name */
	    _FSReadPad(svr, flist[i], (long) reply.nameLength);
	    flist[i][reply.nameLength] = '\0';
	}

	pi[i] = FSmalloc(sizeof(FSPropInfo));
	if (!pi[i])
	    goto cleanflist;
	_FSReadPad(svr, (char *) &local_pi, SIZEOF(fsPropInfo));
	pi[i]->num_offsets = local_pi.num_offsets;
	pi[i]->data_len = local_pi.data_len;

#if SIZE_MAX <= UINT_MAX
	if (pi[i]->num_offsets > SIZE_MAX / sizeof(FSPropOffset))
	    goto cleanpi;
#endif

	po[i] = FSmalloc(pi[i]->num_offsets * sizeof(FSPropOffset));
	if (!po[i])
	    goto cleanpi;
	pd[i] = FSmalloc(pi[i]->data_len);
	if (!pd[i])
	    goto cleanpo;
	/* get offsets */
	for (j=0; j<pi[i]->num_offsets; j++)
	{
	    _FSReadPad(svr, (char *) &local_po, SIZEOF(fsPropOffset));
	    po[i][j].name.position = local_po.name.position;
	    po[i][j].name.length = local_po.name.length;
	    po[i][j].value.position = local_po.value.position;
	    po[i][j].value.length = local_po.value.length;
	    po[i][j].type = local_po.type;
	}

	/* get prop data */
	if (FSProtocolVersion(svr) == 1)
	    _FSReadPad(svr, (char *) pd[i], pi[i]->data_len);
	else
	    _FSRead(svr, (char *) pd[i], pi[i]->data_len);

	if (FSProtocolVersion(svr) != 1)
	{
	    /* get the name */
	    _FSRead(svr, flist[i], (long) reply.nameLength);
	    flist[i][reply.nameLength] = '\0';

	    nbytes = pi[i]->data_len + reply.nameLength;
	    _FSEatData(svr, (unsigned long) (((nbytes+3)&~3) - nbytes));
	}
	/* avoid integer overflow */
	if (i > INT_MAX - 1) {
	    goto cleanpd;
	}
    }
    *info = fhdr;
    *count = i;
    *pprops = pi;
    *offsets = po;
    *prop_data = pd;
    SyncHandle();
    return flist;

/* Error cleanup for when we're partway through filling in item #i in arrays */
cleanpd:
    FSfree(pd[i]);
cleanpo:
    FSfree(po[i]);
cleanpi:
    FSfree(pi[i]);
cleanflist:
    FSfree(flist[i]);
cleanfhdr:
    FSfree(fhdr[i]);
/* Error cleanup for all previously filled in items in the arrays */
badmem:
    for (j = (i - 1); j >= 0; j--) {
	FSfree(pi[j]);
	FSfree(po[j]);
	FSfree(pd[j]);
	FSfree(flist[j]);
	FSfree(fhdr[j]);
    }
    FSfree(flist);
    FSfree(fhdr);
    FSfree(pi);
    FSfree(po);
    FSfree(pd);

    if (eat_data) {
	do {
	    fsPropInfo  ti;

	    _FSEatData(svr, (reply.nameLength + 3) & ~3);
	    _FSReadPad(svr, (char *) &ti, SIZEOF(fsPropInfo));
	    _FSEatData(svr, (SIZEOF(fsPropOffset) * ti.num_offsets));
	    _FSEatData(svr, ti.data_len);
	} while (_FSReply(svr, (fsReply *) &reply,
			  ((SIZEOF(fsListFontsWithXInfoReply)
			    - SIZEOF(fsGenericReply)) >> 2), fsFalse)
		 && (reply.nameLength != 0));
    }
    SyncHandle();
    return (char **) NULL;
}
@


1.4
log
@Update to libFS 1.0.4
@
text
@d71 4
a74 4
    FSXFontInfoHeader **fhdr = (FSXFontInfoHeader **) 0;
    FSPropInfo **pi = (FSPropInfo **) 0;
    FSPropOffset **po = (FSPropOffset **) 0;
    unsigned char **pd = (unsigned char **) 0;
d81 1
d105 2
a106 20
	    for (j = (i - 1); j >= 0; j--) {
		FSfree((char *) fhdr[j]);
		FSfree((char *) pi[j]);
		FSfree((char *) po[j]);
		FSfree((char *) pd[j]);
		FSfree(flist[j]);
	    }
	    if (flist)
		FSfree((char *) flist);
	    if (fhdr)
		FSfree((char *) fhdr);
	    if (pi)
		FSfree((char *) pi);
	    if (po)
		FSfree((char *) po);
	    if (pd)
		FSfree((char *) pd);

	    SyncHandle();
	    return (char **) NULL;
d120 6
a125 44
		FSXFontInfoHeader **tmp_fhdr = (FSXFontInfoHeader **)
		FSrealloc((char *) fhdr,
			  (unsigned) (sizeof(FSXFontInfoHeader *) * size));
		char      **tmp_flist = (char **) FSrealloc((char *) flist,
					 (unsigned) (sizeof(char *) * size));
		FSPropInfo **tmp_pi = (FSPropInfo **)
		FSrealloc((char *) pi,
			  (unsigned) (sizeof(FSPropInfo *) * size));
		FSPropOffset **tmp_po = (FSPropOffset **)
		FSrealloc((char *) po,
			  (unsigned) (sizeof(FSPropOffset *) * size));
		unsigned char **tmp_pd = (unsigned char **)
		FSrealloc((char *) pd,
			  (unsigned) (sizeof(unsigned char *) * size));

		if (!tmp_fhdr || !tmp_flist || !tmp_pi || !tmp_po || !tmp_pd) {
		    for (j = (i - 1); j >= 0; j--) {
			FSfree((char *) flist[j]);
			FSfree((char *) fhdr[j]);
			FSfree((char *) pi[j]);
			FSfree((char *) po[j]);
			FSfree((char *) pd[j]);
		    }
		    if (tmp_flist)
			FSfree((char *) tmp_flist);
		    else
			FSfree((char *) flist);
		    if (tmp_fhdr)
			FSfree((char *) tmp_fhdr);
		    else
			FSfree((char *) fhdr);
		    if (tmp_pi)
			FSfree((char *) tmp_pi);
		    else
			FSfree((char *) pi);
		    if (tmp_po)
			FSfree((char *) tmp_po);
		    else
			FSfree((char *) po);
		    if (tmp_pd)
			FSfree((char *) tmp_pd);
		    else
			FSfree((char *) pd);
		    goto clearwire;
d127 6
a132 5
		fhdr = tmp_fhdr;
		flist = tmp_flist;
		pi = tmp_pi;
		po = tmp_po;
		pd = tmp_pd;
d134 3
a136 28
		if (!(fhdr = (FSXFontInfoHeader **)
		      FSmalloc((unsigned) (sizeof(FSXFontInfoHeader *) * size))))
		    goto clearwire;
		if (!(flist = (char **)
		      FSmalloc((unsigned) (sizeof(char *) * size)))) {
		    FSfree((char *) fhdr);
		    goto clearwire;
		}
		if (!(pi = (FSPropInfo **)
		      FSmalloc((unsigned) (sizeof(FSPropInfo *) * size)))) {
		    FSfree((char *) fhdr);
		    FSfree((char *) flist);
		    goto clearwire;
		}
		if (!(po = (FSPropOffset **)
		      FSmalloc((unsigned) (sizeof(FSPropOffset *) * size)))) {
		    FSfree((char *) fhdr);
		    FSfree((char *) flist);
		    FSfree((char *) pi);
		    goto clearwire;
		}
		if (!(pd = (unsigned char **)
		    FSmalloc((unsigned) (sizeof(unsigned char *) * size)))) {
		    FSfree((char *) fhdr);
		    FSfree((char *) flist);
		    FSfree((char *) pi);
		    FSfree((char *) po);
		    goto clearwire;
d138 6
d146 1
a146 1
	fhdr[i] = (FSXFontInfoHeader *) FSmalloc(sizeof(FSXFontInfoHeader));
d153 3
a155 1
	flist[i] = (char *) FSmalloc((unsigned int) (reply.nameLength + 1));
a158 5
	    if (!flist[i]) {
		nbytes = (reply.nameLength + 3) & ~3;
		_FSEatData(svr, (unsigned long) nbytes);
		goto badmem;
	    }
d163 3
a165 5
	pi[i] = (FSPropInfo *) FSmalloc(sizeof(FSPropInfo));
	if (!pi[i]) {
	    FSfree((char *) fhdr[i]);
	    goto badmem;
	}
d172 1
a172 1
	    goto badmem;
d175 6
a180 14
	po[i] = (FSPropOffset *)
	    FSmalloc(pi[i]->num_offsets * sizeof(FSPropOffset));
	if (!po[i]) {
	    FSfree((char *) fhdr[i]);
	    FSfree((char *) pi[i]);
	    goto badmem;
	}
	pd[i] = (unsigned char *) FSmalloc(pi[i]->data_len);
	if (!pd[i]) {
	    FSfree((char *) fhdr[i]);
	    FSfree((char *) pi[i]);
	    FSfree((char *) po[i]);
	    goto badmem;
	}
a200 5
	    if (!flist[i]) {
		nbytes = (reply.nameLength + 3) & ~3;
		_FSEatData(svr, (unsigned long) nbytes);
		goto badmem;
	    }
d209 1
a209 1
	    goto badmem;
d220 12
d234 3
a236 3
	FSfree((char *) pi[j]);
	FSfree((char *) po[j]);
	FSfree((char *) pd[j]);
d238 20
a257 1
	FSfree((char *) fhdr[j]);
a258 23
    if (flist)
	FSfree((char *) flist);
    if (fhdr)
	FSfree((char *) fhdr);
    if (pi)
	FSfree((char *) pi);
    if (po)
	FSfree((char *) po);
    if (pd)
	FSfree((char *) pd);


clearwire:
    do {
	fsPropInfo  ti;

	_FSEatData(svr, (reply.nameLength + 3) & ~3);
	_FSReadPad(svr, (char *) &ti, SIZEOF(fsPropInfo));
	_FSEatData(svr, (SIZEOF(fsPropOffset) * ti.num_offsets));
	_FSEatData(svr, ti.data_len);
    } while (_FSReply(svr, (fsReply *) & reply,
		      ((SIZEOF(fsListFontsWithXInfoReply)
       - SIZEOF(fsGenericReply)) >> 2), fsFalse) && (reply.nameLength != 0));
@


1.3
log
@update to libFS 1.0.2
@
text
@d5 9
a13 9
 * Permission to use, copy, modify, distribute, and sell this software 
 * and its documentation for any purpose is hereby granted without fee, 
 * provided that the above copyright notice appear in all copies and 
 * that both that copyright notice and this permission notice appear 
 * in supporting documentation, and that the names of Network Computing 
 * Devices or Digital not be used in advertising or publicity pertaining 
 * to distribution of the software without specific, written prior 
 * permission. Network Computing Devices or Digital make no representations 
 * about the suitability of this software for any purpose.  It is provided 
d17 1
a17 1
 * REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF 
d19 4
a22 4
 * OR DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES 
 * OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, 
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS 
d59 1
a59 1
    char		  *pattern,
d129 1
a129 1
	    if (reply.nReplies > SIZE_MAX - i - 1) 
d133 1
a133 1
	    if (size > SIZE_MAX / sizeof(char *)) 
d277 1
a277 1
	
@


1.2
log
@update to libFS 1.0.1
@
text
@a0 1
/* $Xorg: FSFontInfo.c,v 1.4 2001/02/09 02:03:25 xorgcvs Exp $ */
a24 1
/* $XFree86: xc/lib/FS/FSFontInfo.c,v 1.5tsi Exp $ */
@


1.1
log
@Initial revision
@
text
@d59 9
a67 9
FSListFontsWithXInfo(svr, pattern, maxNames, count, info, pprops, offsets, prop_data)
    FSServer   *svr;
    char       *pattern;
    int         maxNames;
    int        *count;
    FSXFontInfoHeader ***info;
    FSPropInfo ***pprops;
    FSPropOffset ***offsets;
    unsigned char ***prop_data;
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@
