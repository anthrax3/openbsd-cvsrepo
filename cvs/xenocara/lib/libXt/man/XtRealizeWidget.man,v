head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.14
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.12
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.10
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.8
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_0_5:1.1.1.1
	v1_0_4:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@.\" @;


1.5
date	2013.05.31.15.37.35;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.03.10.16.45.48;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.10.09.36.19;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.31.16.05.20;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.02.32;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.02.32;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to libXt 1.1.4
@
text
@.\" Copyright 1993 X Consortium
.\"
.\" Permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "Software"), to deal in the Software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the Software, and to
.\" permit persons to whom the Software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be
.\" included in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
.\" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
.\" IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
.\" OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
.\" ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
.\" OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" Except as contained in this notice, the name of the X Consortium shall
.\" not be used in advertising or otherwise to promote the sale, use or
.\" other dealings in this Software without prior written authorization
.\" from the X Consortium.
.\"
.ds tk X Toolkit
.ds xT X Toolkit Intrinsics \- C Language Interface
.ds xI Intrinsics
.ds xW X Toolkit Athena Widgets \- C Language Interface
.ds xL Xlib \- C Language X Interface
.ds xC Inter-Client Communication Conventions Manual
.ds Rn 3
.ds Vn 2.2
.hw XtRealize-Widget XtIs-Realized XtUnrealize-Widget wid-get
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft CW
.ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de IN		\" send an index entry to the stderr
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de ZN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.ny0
.TH XtRealizeWidget __libmansuffix__ __xorgversion__ "XT FUNCTIONS"
.SH NAME
XtRealizeWidget, XtIsRealized, XtUnrealizeWidget \- realize and unrealize widgets
.SH SYNTAX
.HP
void XtRealizeWidget(Widget \fIw\fP);
.HP
Boolean XtIsRealized(Widget \fIw\fP);
.HP
void XtUnrealizeWidget(Widget \fIw\fP);
.SH ARGUMENTS
.IP \fIw\fP 1i
Specifies the widget.
.SH DESCRIPTION
If the widget is already realized,
.ZN XtRealizeWidget
simply returns.
Otherwise, it performs the following:
.IP \(bu 5
Binds all action names in the widget's
translation table to procedures (see Section 10.1.2).
.IP \(bu 5
Makes a post-order traversal of the widget tree rooted
at the specified widget and calls the change_managed procedure
of each composite widget that has one or more managed children.
.IP \(bu 5
Constructs an
.ZN XSetWindowAttributes
structure filled in with information derived from the
.ZN Core
widget fields and calls the realize procedure for the widget,
which adds any widget-specific attributes and creates the X window.
.IP \(bu 5
If the widget is
not a subclass of
.ZN compositeWidgetClass ,
.ZN XtRealizeWidget
returns; otherwise, it continues and performs the following:
.RS
.IP \- 5
Descends recursively to each of the widget's
managed children and calls the realize procedures.
Primitive widgets that instantiate children are responsible for realizing
those children themselves.
.IP \- 5
Maps all of the managed children windows that have mapped_when_managed
.ZN True .
(If a widget is managed but mapped_when_managed is
.ZN False ,
the widget is allocated visual space but is not displayed.
Some people seem to like this to indicate certain states.)
.RE
.LP
If the widget is a top-level shell widget (that is, it has no parent), and
mapped_when_managed is
.ZN True ,
.ZN XtRealizeWidget
maps the widget window.
.LP
The
.ZN XtIsRealized
function returns
.ZN True
if the widget has been realized,
that is, if the widget has a nonzero X window ID.
.LP
Some widget procedures (for example, set_values) might wish to
operate differently
after the widget has been realized.
.LP
The
.ZN XtUnrealizeWidget
function destroys the windows of an existing widget and all of its
children (recursively down the widget tree).
To recreate the windows at a later time,
call
.ZN XtRealizeWidget
again.
If the widget was managed,
it will be unmanaged automatically before its window is freed.
.SH "SEE ALSO"
XtManageChildren(__libmansuffix__)
.br
\fI\*(xT\fP
.br
\fI\*(xL\fP
@


1.4
log
@Update to libXt 1.1.2
@
text
@d40 1
a40 1
.ft 1
a53 12
.de FD
.LP
.KS
.TA .5i 3i
.ta .5i 3i
.nf
..
.de FN
.fi
.KE
.LP
..
a55 23
.de C{
.KS
.nf
.D
.\"
.\"	choose appropriate monospace font
.\"	the imagen conditional, 480,
.\"	may be changed to L if LB is too
.\"	heavy for your eyes...
.\"
.ie "\\*(.T"480" .ft L
.el .ie "\\*(.T"300" .ft L
.el .ie "\\*(.T"202" .ft PO
.el .ie "\\*(.T"aps" .ft CW
.el .ft R
.ps \\n(PS
.ie \\n(VS>40 .vs \\n(VSu
.el .vs \\n(VSp
..
.de C}
.DE
.R
..
a62 26
..
.de NT
.ne 7
.ds NO Note
.if \\n(.$>$1 .if !'\\$2'C' .ds NO \\$2
.if \\n(.$ .if !'\\$1'C' .ds NO \\$1
.ie n .sp
.el .sp 10p
.TB
.ce
\\*(NO
.ie n .sp
.el .sp 5p
.if '\\$1'C' .ce 99
.if '\\$2'C' .ce 99
.in +5n
.ll -5n
.R
..
.		\" Note End -- doug kraft 3/85
.de NE
.ce 0
.in -5n
.ll +5n
.ie n .sp
.el .sp 10p
@


1.3
log
@Update to libXt 1.1.1
@
text
@d131 1
a131 1
void XtRealizeWidget(Widget \fIw\fP); 
d133 1
a133 1
Boolean XtIsRealized(Widget \fIw\fP); 
d135 1
a135 1
void XtUnrealizeWidget(Widget \fIw\fP); 
d142 1
a142 1
simply returns. 
d154 2
a155 2
structure filled in with information derived from the 
.ZN Core 
d160 1
a160 1
not a subclass of 
d171 1
a171 1
Maps all of the managed children windows that have mapped_when_managed 
d173 2
a174 2
(If a widget is managed but mapped_when_managed is 
.ZN False , 
d180 2
a181 2
mapped_when_managed is 
.ZN True , 
d187 2
a188 2
function returns 
.ZN True 
d204 1
a204 1
If the widget was managed, 
@


1.2
log
@Update to libXt 1.0.9.  No functional change.
@
text
@d207 1
a207 1
XtManageChildren(3Xt)
@


1.1
log
@Initial revision
@
text
@a0 2
.\" $Xorg: XtRealize.man,v 1.3 2000/08/17 19:42:02 cpqbld Exp $
.\"
a25 2
.\"
.\" $XFree86: xc/doc/man/Xt/XtRealize.man,v 1.2 2001/01/27 18:20:29 dawes Exp $
@


1.1.1.1
log
@import from X.Org 7.2RC2
@
text
@@
