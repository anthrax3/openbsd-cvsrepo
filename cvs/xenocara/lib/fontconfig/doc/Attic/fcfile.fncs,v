head	1.4;
access;
symbols
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.2.0.8
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.6
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.4
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v2_4_2:1.1.1.2
	v2_4_1:1.1.1.1
	fontconfig:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2013.03.09.14.34.42;	author matthieu;	state dead;
branches;
next	1.3;

1.3
date	2010.03.25.21.45.58;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.05.16.43.35;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.42.00;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.42.00;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.12.31.14.57.47;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to fontconfig 2.10.91 + a few local fixes.
Move to a new BSD make based build system since fontconfig's build
system has become too dependant on GNU make.

Requested by ajacoutot@@, tested by many back in january.
@
text
@/*
 * fontconfig/doc/fcfile.fncs
 *
 * Copyright Â© 2003 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * THE AUTHOR(S) DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

@@RET@@		FcBool 	
@@FUNC@@		FcFileScan 
@@TYPE1@@		FcFontSet *			@@ARG1@@		set	
@@TYPE2@@		FcStrSet *			@@ARG2@@		dirs	
@@TYPE3@@		FcFileCache *			@@ARG3@@		cache	
@@TYPE4@@		FcBlanks *			@@ARG4@@		blanks	
@@TYPE5@@		const FcChar8 *			@@ARG5@@		file	
@@TYPE6@@		FcBool% 			@@ARG6@@		force
@@PURPOSE@@	scan a font file
@@DESC@@
Scans a single file and adds all fonts found to <parameter>set</parameter>.
If <parameter>force</parameter> is FcTrue, then the file is scanned even if
associated information is found in <parameter>cache</parameter>.  If
<parameter>file</parameter> is a directory, it is added to
<parameter>dirs</parameter>. Whether fonts are found depends on fontconfig
policy as well as the current configuration. Internally, fontconfig will
ignore BDF and PCF fonts which are not in Unicode (or the effectively
equivalent ISO Latin-1) encoding as those are not usable by Unicode-based
applications. The configuration can ignore fonts based on filename or
contents of the font file itself. Returns FcFalse if any of the fonts cannot be
added (due to allocation failure). Otherwise returns FcTrue.
@@@@

@@RET@@		FcBool
@@FUNC@@		FcFileIsDir
@@TYPE1@@		const FcChar8 *			@@ARG1@@		file
@@PURPOSE@@	check whether a file is a directory
@@DESC@@
Returns FcTrue if <parameter>file</parameter> is a directory, otherwise
returns FcFalse.
@@@@

@@RET@@		FcBool 	
@@FUNC@@		FcDirScan 
@@TYPE1@@		FcFontSet *			@@ARG1@@		set	
@@TYPE2@@		FcStrSet *			@@ARG2@@		dirs	
@@TYPE3@@		FcFileCache *			@@ARG3@@		cache	
@@TYPE4@@		FcBlanks *			@@ARG4@@		blanks	
@@TYPE5@@		const FcChar8 *			@@ARG5@@		dir	
@@TYPE6@@		FcBool% 			@@ARG6@@		force
@@PURPOSE@@	scan a font directory without caching it
@@DESC@@
If <parameter>cache</parameter> is not zero or if <parameter>force</parameter>
is FcFalse, this function currently returns FcFalse.  Otherwise, it scans an
entire directory and adds all fonts found to <parameter>set</parameter>.
Any subdirectories found are added to <parameter>dirs</parameter>.  Calling
this function does not create any cache files.  Use FcDirCacheRead() if
caching is desired.
@@@@

@@RET@@		FcBool 	
@@FUNC@@		FcDirSave 
@@TYPE1@@		FcFontSet *			@@ARG1@@		set	
@@TYPE2@@		FcStrSet *			@@ARG2@@		dirs	
@@TYPE3@@		const FcChar8 *			@@ARG3@@		dir	
@@PURPOSE@@	DEPRECATED: formerly used to save a directory cache
@@DESC@@
This function now does nothing aside from returning FcFalse. It used to creates the
per-directory cache file for <parameter>dir</parameter> and populates it
with the fonts in <parameter>set</parameter> and subdirectories in
<parameter>dirs</parameter>. All of this functionality is now automatically
managed by FcDirCacheLoad and FcDirCacheRead.
@@@@

@


1.3
log
@Update to fontconfig 2.8.0. Tested on a full ports build by naddy@@.
@
text
@@


1.2
log
@Update to fontconfig 2.6.0. ok naddy@@

this uses a patched version of libtool to fix linking on vax.
@
text
@d2 1
a2 1
 * $Id: fcfile.fncs,v 1.1.1.2 2006/12/31 14:57:47 matthieu Exp $
d16 1
a16 1
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
d18 1
a18 1
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
d32 1
a32 1
@@TYPE6@@		FcBool% 				@@ARG6@@		force	
d64 2
a65 2
@@TYPE6@@		FcBool% 				@@ARG6@@		force	
@@PURPOSE@@	DEPRECATED: formerly used to scan a font directory
d67 6
a72 6
This function does nothing aside from returning FcFalse. It used to scan an
entire directory and add all fonts found to
<parameter>set</parameter>.  If <parameter>force</parameter> was FcTrue, then
the directory and all files within it were scanned even if information was
present in the per-directory cache file or <parameter>cache</parameter>. Any
subdirectories found were added to <parameter>dirs</parameter>.
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id$
d31 2
a32 2
@@TYPE5@@		const char *			@@ARG5@@		file	
@@TYPE6@@		FcBool 				@@ARG6@@		force	
d39 16
a54 1
<parameter>dirs</parameter>.
d63 3
a65 3
@@TYPE5@@		const char *			@@ARG5@@		dir	
@@TYPE6@@		FcBool 				@@ARG6@@		force	
@@PURPOSE@@	scan a font directory
d67 6
a72 5
Scans an entire directory and adds all fonts found to
<parameter>set</parameter>.  If <parameter>force</parameter> is FcTrue, then
the directory and all files within it are scanned even if information is
present in the per-directory cache file or <parameter>cache</parameter>.  Any
subdirectories found are added to <parameter>dirs</parameter>.
d79 2
a80 2
@@TYPE3@@		const char *			@@ARG3@@		dir	
@@PURPOSE@@	save a directory cache
d82 5
a86 3
Creates the per-directory cache file for <parameter>dir</parameter> and
populates it with the fonts in <parameter>set</parameter> and subdirectories
in <parameter>dirs</parameter>.
a88 8
@@RET@@		FcBool 	
@@FUNC@@		FcDirCacheValid 
@@TYPE1@@		const FcChar8 *			@@ARG1@@		cache_file	
@@PURPOSE@@	check directory cache timestamp
@@DESC@@
Returns FcTrue if <parameter>cache_file</parameter> is no older than the
directory containing it, else FcFalse.
@@@@
@


1.1.1.1
log
@Import fontconfig 2.4.1
@
text
@@


1.1.1.2
log
@Fontconfig 2.4.2
@
text
@d32 1
a32 1
@@TYPE6@@		FcBool% 				@@ARG6@@		force	
d49 1
a49 1
@@TYPE6@@		FcBool% 				@@ARG6@@		force	
@

