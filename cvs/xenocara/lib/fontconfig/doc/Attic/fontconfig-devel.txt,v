head	1.4;
access;
symbols
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.2.0.8
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.6
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.4
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v2_4_2:1.1.1.2
	v2_4_1:1.1.1.1
	fontconfig:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2013.03.09.14.34.42;	author matthieu;	state dead;
branches;
next	1.3;

1.3
date	2010.03.25.21.45.58;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.05.16.43.35;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.42.02;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.42.02;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.12.31.14.57.49;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to fontconfig 2.10.91 + a few local fixes.
Move to a new BSD make based build system since fontconfig's build
system has become too dependant on GNU make.

Requested by ajacoutot@@, tested by many back in january.
@
text
@Fontconfig Developers Reference, Version 2.8.0

Copyright © 2002 Keith Packard

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that the
above copyright notice appear in all copies and that both that copyright notice
and this permission notice appear in supporting documentation, and that the
name of Keith Packard not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission. Keith
Packard makes no representations about the suitability of this software for any
purpose. It is provided "as is" without express or implied warranty.

THE AUTHOR(S) DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL THE
AUTHOR(S) BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Table of Contents
DESCRIPTION
FUNCTIONAL OVERVIEW
Datatypes
FUNCTIONS

DESCRIPTION

Fontconfig is a library designed to provide system-wide font configuration,
customization and application access.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FUNCTIONAL OVERVIEW

Fontconfig contains two essential modules, the configuration module which
builds an internal configuration from XML files and the matching module which
accepts font patterns and returns the nearest matching font.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FONT CONFIGURATION

The configuration module consists of the FcConfig datatype, libexpat and
FcConfigParse which walks over an XML tree and ammends a configuration with
data found within. From an external perspective, configuration of the library
consists of generating a valid XML tree and feeding that to FcConfigParse. The
only other mechanism provided to applications for changing the running
configuration is to add fonts and directories to the list of
application-provided font files.

The intent is to make font configurations relatively static, and shared by as
many applications as possible. It is hoped that this will lead to more stable
font selection when passing names from one application to another. XML was
chosen as a configuration file format because it provides a format which is
easy for external agents to edit while retaining the correct structure and
syntax.

Font configuration is separate from font matching; applications needing to do
their own matching can access the available fonts from the library and perform
private matching. The intent is to permit applications to pick and choose
appropriate functionality from the library instead of forcing them to choose
between this library and a private configuration mechanism. The hope is that
this will ensure that configuration of fonts for all applications can be
centralized in one place. Centralizing font configuration will simplify and
regularize font installation and customization.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FONT PROPERTIES

While font patterns may contain essentially any properties, there are some well
known properties with associated types. Fontconfig uses some of these
properties for font matching and font completion. Others are provided as a
convenience for the applications rendering mechanism.

                 Property Definitions

    Property       CPP Symbol           Type    Description
    ----------------------------------------------------
    family         FC_FAMILY            String  Font family names
    familylang     FC_FAMILYLANG        String  Language cooresponding to
                                                each family name
    style          FC_STYLE             String  Font style. Overrides weight
                                                and slant
    stylelang      FC_STYLELANG         String  Language cooresponding to
                                                each style name
    fullname       FC_FULLNAME          String  Font face full name where
                                                different from family and
                                                family + style
    fullnamelang   FC_FULLNAMELANG      String  Language cooresponding to
                                                each fullname
    slant          FC_SLANT             Int     Italic, oblique or roman
    weight         FC_WEIGHT            Int     Light, medium, demibold,
                                                bold or black
    size           FC_SIZE              Double  Point size
    width          FC_WIDTH             Int     Condensed, normal or expanded
    aspect         FC_ASPECT            Double  Stretches glyphs horizontally
                                                before hinting
    pixelsize      FC_PIXEL_SIZE        Double  Pixel size
    spacing        FC_SPACING           Int     Proportional, dual-width,
                                                monospace or charcell
    foundry        FC_FOUNDRY           String  Font foundry name
    antialias      FC_ANTIALIAS         Bool    Whether glyphs can be
                                                antialiased
    hinting        FC_HINTING           Bool    Whether the rasterizer should
                                                use hinting
    hintstyle      FC_HINT_STYLE        Int     Automatic hinting style
    verticallayout FC_VERTICAL_LAYOUT   Bool    Use vertical layout
    autohint       FC_AUTOHINT          Bool    Use autohinter instead of
                                                normal hinter
    globaladvance  FC_GLOBAL_ADVANCE    Bool    Use font global advance data
    file           FC_FILE              String  The filename holding the font
    index          FC_INDEX             Int     The index of the font within
                                                the file
    ftface         FC_FT_FACE           FT_Face Use the specified FreeType
                                                face object
    rasterizer     FC_RASTERIZER        String  Which rasterizer is in use
    outline        FC_OUTLINE           Bool    Whether the glyphs are outlines
    scalable       FC_SCALABLE          Bool    Whether glyphs can be scaled
    scale          FC_SCALE             Double  Scale factor for point->pixel
                                                conversions
    dpi            FC_DPI               Double  Target dots per inch
    rgba           FC_RGBA              Int     unknown, rgb, bgr, vrgb,
                                                vbgr, none - subpixel geometry
    lcdfilter      FC_LCD_FILTER        Int     Type of LCD filter
    minspace       FC_MINSPACE          Bool    Eliminate leading from line
                                                spacing
    charset        FC_CHARSET           CharSet Unicode chars encoded by
                                                the font
    lang           FC_LANG              LangSet Set of RFC-3066-style
                                                languages this font supports
    fontversion    FC_FONTVERSION       Int     Version number of the font
    capability     FC_CAPABILITY        String  List of layout capabilities in
                                                the font
    embolden       FC_EMBOLDEN          Bool    Rasterizer should
                                                synthetically embolden the font


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Datatypes

Fontconfig uses abstract datatypes to hide internal implementation details for
most data structures. A few structures are exposed where appropriate.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcChar8, FcChar16, FcChar32, FcBool

These are primitive datatypes; the FcChar* types hold precisely the number of
bits stated (if supported by the C implementation). FcBool holds one of two CPP
symbols: FcFalse or FcTrue.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcMatrix

An FcMatrix holds an affine transformation, usually used to reshape glyphs. A
small set of matrix operations are provided to manipulate these.

        typedef struct _FcMatrix {
                double xx, xy, yx, yy;
        } FcMatrix;


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcCharSet

An FcCharSet is an abstract type that holds the set of encoded unicode chars in
a font. Operations to build and compare these sets are provided.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcLangSet

An FcLangSet is an abstract type that holds the set of languages supported by a
font. Operations to build and compare these sets are provided. These are
computed for a font based on orthographic information built into the fontconfig
library. Fontconfig has orthographies for all of the ISO 639-1 languages except
for MS, NA, PA, PS, QU, RN, RW, SD, SG, SN, SU and ZA. If you have orthographic
information for any of these languages, please submit them.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcLangResult

An FcLangResult is an enumeration used to return the results of comparing two
language strings or FcLangSet objects. FcLangEqual means the objects match
language and territory. FcLangDifferentTerritory means the objects match in
language but differ in territory. FcLangDifferentLang means the objects differ
in language.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcType

Tags the kind of data stored in an FcValue.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcValue

An FcValue object holds a single value with one of a number of different types.
The 'type' tag indicates which member is valid.

        typedef struct _FcValue {
                FcType type;
                union {
                        const FcChar8 *s;
                        int i;
                        FcBool b;
                        double d;
                        const FcMatrix *m;
                        const FcCharSet *c;
                        void *f;
                        const FcLangSet *l;
                } u;
        } FcValue;


                  FcValue Members

        Type            Union member    Datatype
        --------------------------------
        FcTypeVoid      (none)          (none)
        FcTypeInteger   i               int
        FcTypeDouble    d               double
        FcTypeString    s               FcChar8 *
        FcTypeBool      b               b
        FcTypeMatrix    m               FcMatrix *
        FcTypeCharSet   c               FcCharSet *
        FcTypeFTFace    f               void * (FT_Face)
        FcTypeLangSet   l               FcLangSet *


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcPattern

holds a set of names with associated value lists; each name refers to a
property of a font. FcPatterns are used as inputs to the matching code as well
as holding information about specific fonts. Each property can hold one or more
values; conventionally all of the same type, although the interface doesn't
demand that.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcFontSet

        typedef struct _FcFontSet {
                int nfont;
                int sfont;
                FcPattern **fonts;
        } FcFontSet;


An FcFontSet contains a list of FcPatterns. Internally fontconfig uses this
data structure to hold sets of fonts. Externally, fontconfig returns the
results of listing fonts in this format. 'nfont' holds the number of patterns
in the 'fonts' array; 'sfont' is used to indicate the size of that array.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcStrSet, FcStrList

FcStrSet holds a list of strings that can be appended to and enumerated. Its
unique characteristic is that the enumeration works even while strings are
appended during enumeration. FcStrList is used during enumeration to safely and
correctly walk the list of strings even while that list is edited in the middle
of enumeration.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcObjectSet

        typedef struct _FcObjectSet {
                int nobject;
                int sobject;
                const char **objects;
        } FcObjectSet;


holds a set of names and is used to specify which fields from fonts are placed
in the the list of returned patterns when listing fonts.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcObjectType

        typedef struct _FcObjectType {
                const char *object;
                FcType type;
        } FcObjectType;


marks the type of a pattern element generated when parsing font names.
Applications can add new object types so that font names may contain the new
elements.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcConstant

        typedef struct _FcConstant {
            const FcChar8 *name;
            const char *object;
            int value;
        } FcConstant;


Provides for symbolic constants for new pattern elements. When 'name' is seen
in a font name, an 'object' element is created with value 'value'.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcBlanks

holds a list of Unicode chars which are expected to be blank; unexpectedly
blank chars are assumed to be invalid and are elided from the charset
associated with the font.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcFileCache

holds the per-user cache information for use while loading the font database.
This is built automatically for the current configuration when that is loaded.
Applications must always pass '0' when one is requested.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcConfig

holds a complete configuration of the library; there is one default
configuration, other can be constructed from XML data structures. All public
entry points that need global data can take an optional FcConfig* argument;
passing 0 uses the default configuration. FcConfig objects hold two sets of
fonts, the first contains those specified by the configuration, the second set
holds those added by the application at run-time. Interfaces that need to
reference a particulat set use one of the FcSetName enumerated values.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcSetName

Specifies one of the two sets of fonts available in a configuration;
FcSetSystem for those fonts specified in the configuration and FcSetApplication
which holds fonts provided by the application.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcResult

Used as a return type for functions manipulating FcPattern objects.

      FcResult Values
        Result Code             Meaning
        -----------------------------------------------------------
        FcResultMatch           Object exists with the specified ID
        FcResultNoMatch         Object doesn't exist at all
        FcResultTypeMismatch    Object exists, but the type doesn't match
        FcResultNoId            Object exists, but has fewer values
                                than specified
        FcResultOutOfMemory     Malloc failed


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcAtomic

Used for locking access to config files. Provides a safe way to update
configuration files.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcCache

Holds information about the fonts contained in a single directory. Normal
applications need not worry about this as caches for font access are
automatically managed by the library. Applications dealing with cache
management may want to use some of these objects in their work, however the
included 'fc-cache' program generally suffices for all of that.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FUNCTIONS

These are grouped by functionality, often using the main datatype being
manipulated.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Initialization

Table of Contents
FcInitLoadConfig -- load configuration
FcInitLoadConfigAndFonts -- load configuration and font data
FcInit -- initialize fontconfig library
FcFini -- finalize fonconfig library
FcGetVersion -- library version number
FcInitReinitialize -- re-initialize library
FcInitBringUptoDate -- reload configuration files if needed

These functions provide some control over how the library is initialized.

FcInitLoadConfig

Name

FcInitLoadConfig -- load configuration

Synopsis

#include <fontconfig.h>


FcConfig * FcInitLoadConfig(void);

Description

Loads the default configuration file and returns the resulting configuration.
Does not load any font information.

Version

Fontconfig version 2.8.0

FcInitLoadConfigAndFonts

Name

FcInitLoadConfigAndFonts -- load configuration and font data

Synopsis

#include <fontconfig.h>


FcConfig * FcInitLoadConfigAndFonts(void);

Description

Loads the default configuration file and builds information about the available
fonts. Returns the resulting configuration.

Version

Fontconfig version 2.8.0

FcInit

Name

FcInit -- initialize fontconfig library

Synopsis

#include <fontconfig.h>


FcBool FcInit(void);

Description

Loads the default configuration file and the fonts referenced therein and sets
the default configuration to that result. Returns whether this process
succeeded or not. If the default configuration has already been loaded, this
routine does nothing and returns FcTrue.

Version

Fontconfig version 2.8.0

FcFini

Name

FcFini -- finalize fonconfig library

Synopsis

#include <fontconfig.h>


void FcFini(void);

Description

Frees all data structures allocated by previous calls to fontconfig functions.
Fontconfig returns to an uninitialized state, requiring a new call to one of
the FcInit functions before any other fontconfig function may be called.

Version

Fontconfig version 2.8.0

FcGetVersion

Name

FcGetVersion -- library version number

Synopsis

#include <fontconfig.h>


int FcGetVersion(void);

Description

Returns the version number of the library.

Version

Fontconfig version 2.8.0

FcInitReinitialize

Name

FcInitReinitialize -- re-initialize library

Synopsis

#include <fontconfig.h>


FcBool FcInitReinitialize(void);

Description

Forces the default configuration file to be reloaded and resets the default
configuration. Returns FcFalse if the configuration cannot be reloaded (due to
config file errors, allocation failures or other issues) and leaves the
existing configuration unchanged. Otherwise returns FcTrue.

Version

Fontconfig version 2.8.0

FcInitBringUptoDate

Name

FcInitBringUptoDate -- reload configuration files if needed

Synopsis

#include <fontconfig.h>


FcBool FcInitBringUptoDate(void);

Description

Checks the rescan interval in the default configuration, checking the
configuration if the interval has passed and reloading the configuration if
when any changes are detected. Returns FcFalse if the configuration cannot be
reloaded (see FcInitReinitialize). Otherwise returns FcTrue.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcPattern

Table of Contents
FcPatternCreate -- Create a pattern
FcPatternDuplicate -- Copy a pattern
FcPatternReference -- Increment pattern reference count
FcPatternDestroy -- Destroy a pattern
FcPatternEqual -- Compare patterns
FcPatternEqualSubset -- Compare portions of patterns
FcPatternFilter -- Filter the objects of pattern
FcPatternHash -- Compute a pattern hash value
FcPatternAdd -- Add a value to a pattern
FcPatternAddWeak -- Add a value to a pattern with weak binding
FcPatternAdd-Type -- Add a typed value to a pattern
FcPatternGet -- Return a value from a pattern
FcPatternGet-Type -- Return a typed value from a pattern
FcPatternBuild -- Create patterns from arguments
FcPatternDel -- Delete a property from a pattern
FcPatternRemove -- Remove one object of the specified type from the pattern
FcPatternPrint -- Print a pattern for debugging
FcDefaultSubstitute -- Perform default substitutions in a pattern
FcNameParse -- Parse a pattern string
FcNameUnparse -- Convert a pattern back into a string that can be parsed
FcPatternFormat -- Format a pattern into a string according to a format
    specifier

An FcPattern is an opaque type that holds both patterns to match against the
available fonts, as well as the information about each font.

FcPatternCreate

Name

FcPatternCreate -- Create a pattern

Synopsis

#include <fontconfig.h>


FcPattern * FcPatternCreate(void);

Description

Creates a pattern with no properties; used to build patterns from scratch.

Version

Fontconfig version 2.8.0

FcPatternDuplicate

Name

FcPatternDuplicate -- Copy a pattern

Synopsis

#include <fontconfig.h>


FcPattern * FcPatternDuplicate(const FcPattern *p);

Description

Copy a pattern, returning a new pattern that matches p. Each pattern may be
modified without affecting the other.

Version

Fontconfig version 2.8.0

FcPatternReference

Name

FcPatternReference -- Increment pattern reference count

Synopsis

#include <fontconfig.h>


void FcPatternReference(FcPattern *p);

Description

Add another reference to p. Patterns are freed only when the reference count
reaches zero.

Version

Fontconfig version 2.8.0

FcPatternDestroy

Name

FcPatternDestroy -- Destroy a pattern

Synopsis

#include <fontconfig.h>


void FcPatternDestroy(FcPattern *p);

Description

Decrement the pattern reference count. If all references are gone, destroys the
pattern, in the process destroying all related values.

Version

Fontconfig version 2.8.0

FcPatternEqual

Name

FcPatternEqual -- Compare patterns

Synopsis

#include <fontconfig.h>


FcBool FcPatternEqual(const FcPattern *pa, const FcPattern *pb);

Description

Returns whether pa and pb are exactly alike.

Version

Fontconfig version 2.8.0

FcPatternEqualSubset

Name

FcPatternEqualSubset -- Compare portions of patterns

Synopsis

#include <fontconfig.h>


FcBool FcPatternEqualSubset(const FcPattern *pa, const FcPattern *pb, const
FcObjectSet *os);

Description

Returns whether pa and pb have exactly the same values for all of the objects
in os.

Version

Fontconfig version 2.8.0

FcPatternFilter

Name

FcPatternFilter -- Filter the objects of pattern

Synopsis

#include <fontconfig.h>


FcPattern * FcPatternFilter(FcPattern *p, const FcObjectSet *);

Description

Returns a new pattern that only has those objects from p that are in os. If os
is NULL, a duplicate of p is returned.

Version

Fontconfig version 2.8.0

FcPatternHash

Name

FcPatternHash -- Compute a pattern hash value

Synopsis

#include <fontconfig.h>


FcChar32 FcPatternHash(const FcPattern *p);

Description

Returns a 32-bit number which is the same for any two patterns which are equal.

Version

Fontconfig version 2.8.0

FcPatternAdd

Name

FcPatternAdd -- Add a value to a pattern

Synopsis

#include <fontconfig.h>


FcBool FcPatternAdd(FcPattern *p, const char *object, FcValue value, FcBool
append);

Description

Adds a single value to the list of values associated with the property named
`object. If `append is FcTrue, the value is added at the end of any existing
list, otherwise it is inserted at the begining. `value' is saved (with
FcValueSave) when inserted into the pattern so that the library retains no
reference to any application-supplied data structure.

Version

Fontconfig version 2.8.0

FcPatternAddWeak

Name

FcPatternAddWeak -- Add a value to a pattern with weak binding

Synopsis

#include <fontconfig.h>


FcBool FcPatternAddWeak(FcPattern *p, const char *object, FcValue value, FcBool
append);

Description

FcPatternAddWeak is essentially the same as FcPatternAdd except that any values
added to the list have binding weak instead of strong.

Version

Fontconfig version 2.8.0

FcPatternAdd-Type

Name

FcPatternAddInteger, FcPatternAddDouble, FcPatternAddString,
FcPatternAddMatrix, FcPatternAddCharSet, FcPatternAddBool, FcPatternAddFTFace,
FcPatternAddLangSet -- Add a typed value to a pattern

Synopsis

#include <fontconfig.h>


FcBool FcPatternAddInteger(FcPattern *p, const char *object, int i);

FcBool FcPatternAddDouble(FcPattern *p, const char *object, double d);

FcBool FcPatternAddString(FcPattern *p, const char *object, const FcChar8 *s);

FcBool FcPatternAddMatrix(FcPattern *p, const char *object, const FcMatrix *m);

FcBool FcPatternAddCharSet(FcPattern *p, const char *object, const FcCharSet *c
);

FcBool FcPatternAddBool(FcPattern *p, const char *object, FcBool b);

FcBool FcPatternAddFTFace(FcPattern *p, const char *object, const FT_Facef);

FcBool FcPatternAddLangSet(FcPattern *p, const char *object, const FcLangSet *l
);

Description

These are all convenience functions that insert objects of the specified type
into the pattern. Use these in preference to FcPatternAdd as they will provide
compile-time typechecking. These all append values to any existing list of
values.

Version

Fontconfig version 2.8.0

FcPatternGet

Name

FcPatternGet -- Return a value from a pattern

Synopsis

#include <fontconfig.h>


FcResult FcPatternGet(FcPattern *p, const char *object, int id, FcValue *v);

Description

Returns in v the id'th value associated with the property object. The value
returned is not a copy, but rather refers to the data stored within the pattern
directly. Applications must not free this value.

Version

Fontconfig version 2.8.0

FcPatternGet-Type

Name

FcPatternGetInteger, FcPatternGetDouble, FcPatternGetString,
FcPatternGetMatrix, FcPatternGetCharSet, FcPatternGetBool, FcPatternGetFTFace,
FcPatternGetLangSet -- Return a typed value from a pattern

Synopsis

#include <fontconfig.h>


FcResult FcPatternGetInteger(FcPattern *p, const char *object, int n, int *i);

FcResult FcPatternGetDouble(FcPattern *p, const char *object, int n, double *d
);

FcResult FcPatternGetString(FcPattern *p, const char *object, int n, FcChar8 **
s);

FcResult FcPatternGetMatrix(FcPattern *p, const char *object, int n, FcMatrix
**s);

FcResult FcPatternGetCharSet(FcPattern *p, const char *object, int n, FcCharSet
**c);

FcResult FcPatternGetBool(FcPattern *p, const char *object, int n, FcBool *b);

FcResult FcPatternGetFTFace(FcPattern *p, const char *object, int n);

FcResult FcPatternGetLangSet(FcPattern *p, const char *object, FT_Face *f);

Description

These are convenience functions that call FcPatternGet and verify that the
returned data is of the expected type. They return FcResultTypeMismatch if this
is not the case. Note that these (like FcPatternGet) do not make a copy of any
data structure referenced by the return value. Use these in preference to
FcPatternGet to provide compile-time typechecking.

Version

Fontconfig version 2.8.0

FcPatternBuild

Name

FcPatternBuild, FcPatternVaBuild, FcPatternVapBuild -- Create patterns from
arguments

Synopsis

#include <fontconfig.h>


FcPattern * FcPatternBuild(FcPattern *pattern, ...);

FcPattern * FcPatternVaBuild(FcPattern *pattern, va_list va);

void FcPatternVapBuild(FcPattern *result, FcPattern *pattern, va_list va);

Description

Builds a pattern using a list of objects, types and values. Each value to be
entered in the pattern is specified with three arguments:

 1. Object name, a string describing the property to be added.

 2. Object type, one of the FcType enumerated values

 3. Value, not an FcValue, but the raw type as passed to any of the
    FcPatternAdd<type> functions. Must match the type of the second argument.

The argument list is terminated by a null object name, no object type nor value
need be passed for this. The values are added to `pattern', if `pattern' is
null, a new pattern is created. In either case, the pattern is returned.
Example

pattern = FcPatternBuild (0, FC_FAMILY, FcTypeString, "Times", (char *) 0);

FcPatternVaBuild is used when the arguments are already in the form of a
varargs value. FcPatternVapBuild is a macro version of FcPatternVaBuild which
returns its result directly in the result variable.

Version

Fontconfig version 2.8.0

FcPatternDel

Name

FcPatternDel -- Delete a property from a pattern

Synopsis

#include <fontconfig.h>


FcBool FcPatternDel(FcPattern *p, const char *object);

Description

Deletes all values associated with the property `object', returning whether the
property existed or not.

Version

Fontconfig version 2.8.0

FcPatternRemove

Name

FcPatternRemove -- Remove one object of the specified type from the pattern

Synopsis

#include <fontconfig.h>


FcBool FcPatternRemove(FcPattern *p, const char *object, int id);

Description

Removes the value associated with the property `object' at position `id',
returning whether the property existed and had a value at that position or not.

Version

Fontconfig version 2.8.0

FcPatternPrint

Name

FcPatternPrint -- Print a pattern for debugging

Synopsis

#include <fontconfig.h>


void FcPatternPrint(const FcPattern *p);

Description

Prints an easily readable version of the pattern to stdout. There is no
provision for reparsing data in this format, it's just for diagnostics and
debugging.

Version

Fontconfig version 2.8.0

FcDefaultSubstitute

Name

FcDefaultSubstitute -- Perform default substitutions in a pattern

Synopsis

#include <fontconfig.h>


void FcDefaultSubstitute(FcPattern *pattern);

Description

Supplies default values for underspecified font patterns:

  • Patterns without a specified style or weight are set to Medium

  • Patterns without a specified style or slant are set to Roman

  • Patterns without a specified pixel size are given one computed from any
    specified point size (default 12), dpi (default 75) and scale (default 1).

Version

Fontconfig version 2.8.0

FcNameParse

Name

FcNameParse -- Parse a pattern string

Synopsis

#include <fontconfig.h>


FcPattern * FcNameParse(const FcChar8 *name);

Description

Converts name from the standard text format described above into a pattern.

Version

Fontconfig version 2.8.0

FcNameUnparse

Name

FcNameUnparse -- Convert a pattern back into a string that can be parsed

Synopsis

#include <fontconfig.h>


FcChar8 * FcNameUnparse(FcPattern *pat);

Description

Converts the given pattern into the standard text format described above. The
return value is not static, but instead refers to newly allocated memory which
should be freed by the caller using free().

Version

Fontconfig version 2.8.0

FcPatternFormat

Name

FcPatternFormat -- Format a pattern into a string according to a format
specifier

Synopsis

#include <fontconfig.h>


FcChar8 * FcPatternFormat(FcPattern *pat, const FcChar8 *format);

Description

Converts given pattern pat into text described by the format specifier format.
The return value refers to newly allocated memory which should be freed by the
caller using free(), or NULL if format is invalid. 

 The format is loosely modelled after printf-style format string. The format
string is composed of zero or more directives: ordinary characters (not "%"),
which are copied unchanged to the output stream; and tags which are interpreted
to construct text from the pattern in a variety of ways (explained below).
Special characters can be escaped using backslash. C-string style special
characters like \n and \r are also supported (this is useful when the format
string is not a C string literal). It is advisable to always escape curly
braces that are meant to be copied to the output as ordinary characters. 

 Each tags is introduced by the character "%", followed by an optional minimum
field width, followed by tag contents in curly braces ({}). If the minimum
field width value is provided the tag will be expanded and the result padded to
achieve the minimum width. If the minimum field width is positive, the padding
will right-align the text. Negative field width will left-align. The rest of
this section describes various supported tag contents and their expansion. 

 A simple tag is one where the content is an identifier. When simple tags are
expanded, the named identifier will be looked up in pattern and the resulting
list of values returned, joined together using comma. For example, to print the
family name and style the pattern, use the format "%{family} %{style}\n". To
extend the family column to forty characters use "%-40{family}%{style}\n". 

 Simple tags expand to list of all values for an element. To only choose one of
the values, one can index using the syntax "%{elt[idx]}". For example, to get
the first family name only, use "%{family[0]}". 

 If a simple tag ends with "=" and the element is found in the pattern, the
name of the element followed by "=" will be output before the list of values.
For example, "%{weight=}" may expand to the string "weight=80". Or to the empty
string if pattern does not have weight set. 

 If a simple tag starts with ":" and the element is found in the pattern, ":"
will be printed first. For example, combining this with the =, the format "%
{:weight=}" may expand to ":weight=80" or to the empty string if pattern does
not have weight set. 

 If a simple tag contains the string ":-", the rest of the the tag contents
will be used as a default string. The default string is output if the element
is not found in the pattern. For example, the format "%{:weight=:-123}" may
expand to ":weight=80" or to the string ":weight=123" if pattern does not have
weight set. 

 A count tag is one that starts with the character "#" followed by an element
name, and expands to the number of values for the element in the pattern. For
example, "%{#family}" expands to the number of family names pattern has set,
which may be zero. 

 A sub-expression tag is one that expands a sub-expression. The tag contents
are the sub-expression to expand placed inside another set of curly braces.
Sub-expression tags are useful for aligning an entire sub-expression, or to
apply converters (explained later) on an entire sub-expression. For example,
the format "%40{{%{family} %{style}}}" expands the sub-expression to construct
the family name followed by the style, then takes the entire string and pads it
on the left to be at least forty characters. 

 A filter-out tag is one starting with the character "-" followed by a
comma-separated list of element names, followed by a sub-expression enclosed in
curly braces. The sub-expression will be expanded but with a pattern that has
the listed elements removed from it. For example, the format "%{-size,pixelsize
{sub-expr}}" will expand "sub-expr" with pattern sans the size and pixelsize
elements. 

 A filter-in tag is one starting with the character "+" followed by a
comma-separated list of element names, followed by a sub-expression enclosed in
curly braces. The sub-expression will be expanded but with a pattern that only
has the listed elements from the surrounding pattern. For example, the format
"%{+family,familylang{sub-expr}}" will expand "sub-expr" with a sub-pattern
consisting only the family and family lang elements of pattern. 

 A conditional tag is one starting with the character "?" followed by a
comma-separated list of element conditions, followed by two sub-expression
enclosed in curly braces. An element condition can be an element name, in which
case it tests whether the element is defined in pattern, or the character "!"
followed by an element name, in which case the test is negated. The conditional
passes if all the element conditions pass. The tag expands the first
sub-expression if the conditional passes, and expands the second sub-expression
otherwise. For example, the format "%{?size,dpi,!pixelsize{pass}{fail}}" will
expand to "pass" if pattern has size and dpi elements but no pixelsize element,
and to "fail" otherwise. 

 An enumerate tag is one starting with the string "[]" followed by a
comma-separated list of element names, followed by a sub-expression enclosed in
curly braces. The list of values for the named elements are walked in parallel
and the sub-expression expanded each time with a pattern just having a single
value for those elements, starting from the first value and continuing as long
as any of those elements has a value. For example, the format "%{[]
family,familylang{%{family} (%{familylang})\n}}" will expand the pattern "%
{family} (%{familylang})\n" with a pattern having only the first value of the
family and familylang elemtns, then expands it with the second values, then the
third, etc. 

 As a special case, if an enumerate tag has only one element, and that element
has only one value in the pattern, and that value is of type FcLangSet, the
individual languages in the language set are enumerated. 

 A builtin tag is one starting with the character "=" followed by a builtin
name. The following builtins are defined:

unparse

    Expands to the result of calling FcNameUnparse() on the pattern.

fcmatch

    Expands to the output of the default output format of the fc-match command
    on the pattern, without the final newline.

fclist

    Expands to the output of the default output format of the fc-list command
    on the pattern, without the final newline.

pkgkit

    Expands to the list of PackageKit font() tags for the pattern. Currently
    this includes tags for each family name, and each language from the
    pattern, enumerated and sanitized into a set of tags terminated by newline.
    Package management systems can use these tags to tag their packages
    accordingly.

For example, the format "%{+family,style{%{=unparse}}}\n" will expand to an
unparsed name containing only the family and style element values from pattern.
 

 The contents of any tag can be followed by a set of zero or more converters. A
converter is specified by the character "|" followed by the converter name and
arguments. The following converters are defined:

basename

    Replaces text with the results of calling FcStrBasename() on it.

dirname

    Replaces text with the results of calling FcStrDirname() on it.

downcase

    Replaces text with the results of calling FcStrDowncase() on it.

shescape

    Escapes text for one level of shell expansion. (Escapes single-quotes, also
    encloses text in single-quotes.)

cescape

    Escapes text such that it can be used as part of a C string literal.
    (Escapes backslash and double-quotes.)

xmlescape

    Escapes text such that it can be used in XML and HTML. (Escapes less-than,
    greater-than, and ampersand.)

delete(chars)

    Deletes all occurrences of each of the characters in chars from the text.
    FIXME: This converter is not UTF-8 aware yet.

escape(chars)

    Escapes all occurrences of each of the characters in chars by prepending it
    by the first character in chars. FIXME: This converter is not UTF-8 aware
    yet.

translate(from,to)

    Translates all occurrences of each of the characters in from by replacing
    them with their corresponding character in to. If to has fewer characters
    than from, it will be extended by repeating its last character. FIXME: This
    converter is not UTF-8 aware yet.

For example, the format "%{family|downcase|delete( )}\n" will expand to the
values of the family element in pattern, lower-cased and with spaces removed.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcFontSet

Table of Contents
FcFontSetCreate -- Create a font set
FcFontSetDestroy -- Destroy a font set
FcFontSetAdd -- Add to a font set
FcFontSetList -- List fonts from a set of font sets
FcFontSetMatch -- Return the best font from a set of font sets
FcFontSetPrint -- Print a set of patterns to stdout
FcFontSetSort -- Add to a font set
FcFontSetSortDestroy -- DEPRECATED destroy a font set

An FcFontSet simply holds a list of patterns; these are used to return the
results of listing available fonts.

FcFontSetCreate

Name

FcFontSetCreate -- Create a font set

Synopsis

#include <fontconfig.h>


FcFontSet * FcFontSetCreate(void);

Description

Creates an empty font set.

Version

Fontconfig version 2.8.0

FcFontSetDestroy

Name

FcFontSetDestroy -- Destroy a font set

Synopsis

#include <fontconfig.h>


void FcFontSetDestroy(FcFontSet *s);

Description

Destroys a font set. Note that this destroys any referenced patterns as well.

Version

Fontconfig version 2.8.0

FcFontSetAdd

Name

FcFontSetAdd -- Add to a font set

Synopsis

#include <fontconfig.h>


FcBool FcFontSetAdd(FcFontSet *s, FcPattern *font);

Description

Adds a pattern to a font set. Note that the pattern is not copied before being
inserted into the set. Returns FcFalse if the pattern cannot be inserted into
the set (due to allocation failure). Otherwise returns FcTrue.

Version

Fontconfig version 2.8.0

FcFontSetList

Name

FcFontSetList -- List fonts from a set of font sets

Synopsis

#include <fontconfig.h>


FcFontSet * FcFontSetList(FcConfig *config, FcFontSet **sets, intnsets,
FcPattern *pattern, FcObjectSet *object_set);

Description

Selects fonts matching pattern from sets, creates patterns from those fonts
containing only the objects in object_set and returns the set of unique such
patterns. If config is NULL, the default configuration is checked to be up to
date, and used.

Version

Fontconfig version 2.8.0

FcFontSetMatch

Name

FcFontSetMatch -- Return the best font from a set of font sets

Synopsis

#include <fontconfig.h>


FcPattern * FcFontSetMatch(FcConfig *config, FcFontSet **sets, intnsets,
FcPattern *pattern, FcResult *result);

Description

Finds the font in sets most closely matching pattern and returns the result of
FcFontRenderPrepare for that font and the provided pattern. This function
should be called only after FcConfigSubstitute and FcDefaultSubstitute have
been called for pattern; otherwise the results will not be correct. If config
is NULL, the current configuration is used. Returns NULL if an error occurs
during this process.

Version

Fontconfig version 2.8.0

FcFontSetPrint

Name

FcFontSetPrint -- Print a set of patterns to stdout

Synopsis

#include <fontconfig.h>


void FcFontSetPrint(FcFontSet *set);

Description

This function is useful for diagnosing font related issues, printing the
complete contents of every pattern in set. The format of the output is designed
to be of help to users and developers, and may change at any time.

Version

Fontconfig version 2.8.0

FcFontSetSort

Name

FcFontSetSort -- Add to a font set

Synopsis

#include <fontconfig.h>


FcFontSetSort(FcConfig *config, FcFontSet **sets, intnsets, FcPattern *pattern,
FcBool trim, FcCharSet **csp, FcResult *result);

Description

Returns the list of fonts from sets sorted by closeness to pattern. If trim is
FcTrue, elements in the list which don't include Unicode coverage not provided
by earlier elements in the list are elided. The union of Unicode coverage of
all of the fonts is returned in csp, if csp is not NULL. This function should
be called only after FcConfigSubstitute and FcDefaultSubstitute have been
called for p; otherwise the results will not be correct.

The returned FcFontSet references FcPattern structures which may be shared by
the return value from multiple FcFontSort calls, applications cannot modify
these patterns. Instead, they should be passed, along with pattern to
FcFontRenderPrepare which combines them into a complete pattern.

The FcFontSet returned by FcFontSetSort is destroyed by caling
FcFontSetDestroy.

Version

Fontconfig version 2.8.0

FcFontSetSortDestroy

Name

FcFontSetSortDestroy -- DEPRECATED destroy a font set

Synopsis

#include <fontconfig.h>


FcFontSetSortDestroy(FcFontSet *set);

Description

This function is DEPRECATED. FcFontSetSortDestroy destroys set by calling
FcFontSetDestroy. Applications should use FcFontSetDestroy directly instead.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcObjectSet

Table of Contents
FcObjectSetCreate -- Create an object set
FcObjectSetAdd -- Add to an object set
FcObjectSetDestroy -- Destroy an object set
FcObjectSetBuild -- Build object set from args

An FcObjectSet holds a list of pattern property names; it is used to indiciate
which properties are to be returned in the patterns from FcFontList.

FcObjectSetCreate

Name

FcObjectSetCreate -- Create an object set

Synopsis

#include <fontconfig.h>


FcObjectSet * FcObjectSetCreate(void);

Description

Creates an empty set.

Version

Fontconfig version 2.8.0

FcObjectSetAdd

Name

FcObjectSetAdd -- Add to an object set

Synopsis

#include <fontconfig.h>


FcBool FcObjectSetAdd(FcObjectSet *os, const char *object);

Description

Adds a proprety name to the set. Returns FcFalse if the property name cannot be
inserted into the set (due to allocation failure). Otherwise returns FcTrue.

Version

Fontconfig version 2.8.0

FcObjectSetDestroy

Name

FcObjectSetDestroy -- Destroy an object set

Synopsis

#include <fontconfig.h>


void FcObjectSetDestroy(FcObjectSet *os);

Description

Destroys an object set.

Version

Fontconfig version 2.8.0

FcObjectSetBuild

Name

FcObjectSetBuild, FcObjectSetVaBuild, FcObjectSetVapBuild -- Build object set
from args

Synopsis

#include <fontconfig.h>


FcObjectSet * FcObjectSetBuild(const char *first, ...);

FcObjectSet * FcObjectSetVaBuild(const char *first, va_list va);

void FcObjectSetVapBuild(FcObjectSet *result, const char *first, va_list va);

Description

These build an object set from a null-terminated list of property names.
FcObjectSetVapBuild is a macro version of FcObjectSetVaBuild which returns the
result in the result variable directly.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FreeType specific functions

Table of Contents
FcFreeTypeCharIndex -- map Unicode to glyph id
FcFreeTypeCharSet -- compute unicode coverage
FcFreeTypeCharSetAndSpacing -- compute unicode coverage and spacing type
FcFreeTypeQuery -- compute pattern from font file (and index)
FcFreeTypeQueryFace -- compute pattern from FT_Face

While the fontconfig library doesn't insist that FreeType be used as the
rasterization mechanism for fonts, it does provide some convenience functions.

FcFreeTypeCharIndex

Name

FcFreeTypeCharIndex -- map Unicode to glyph id

Synopsis

#include <fontconfig.h>
#include <fcfreetype.h>


FT_UInt FcFreeTypeCharIndex(FT_Face face, FcChar32 ucs4);

Description

Maps a Unicode char to a glyph index. This function uses information from
several possible underlying encoding tables to work around broken fonts. As a
result, this function isn't designed to be used in performance sensitive areas;
results from this function are intended to be cached by higher level functions.

Version

Fontconfig version 2.8.0

FcFreeTypeCharSet

Name

FcFreeTypeCharSet -- compute unicode coverage

Synopsis

#include <fontconfig.h>
#include <fcfreetype.h>


FcCharSet * FcFreeTypeCharSet(FT_Face face, FcBlanks *blanks);

Description

Scans a FreeType face and returns the set of encoded Unicode chars. This scans
several encoding tables to build as complete a list as possible. If 'blanks' is
not 0, the glyphs in the font are examined and any blank glyphs not in 'blanks'
are not placed in the returned FcCharSet.

Version

Fontconfig version 2.8.0

FcFreeTypeCharSetAndSpacing

Name

FcFreeTypeCharSetAndSpacing -- compute unicode coverage and spacing type

Synopsis

#include <fontconfig.h>
#include <fcfreetype.h>


FcCharSet * FcFreeTypeCharSetAndSpacing(FT_Face face, FcBlanks *blanks, int *
spacing);

Description

Scans a FreeType face and returns the set of encoded Unicode chars. This scans
several encoding tables to build as complete a list as possible. If 'blanks' is
not 0, the glyphs in the font are examined and any blank glyphs not in 'blanks'
are not placed in the returned FcCharSet. spacing receives the computed spacing
type of the font, one of FC_MONO for a font where all glyphs have the same
width, FC_DUAL, where the font has glyphs in precisely two widths, one twice as
wide as the other, or FC_PROPORTIONAL where the font has glyphs of many widths.

Version

Fontconfig version 2.8.0

FcFreeTypeQuery

Name

FcFreeTypeQuery -- compute pattern from font file (and index)

Synopsis

#include <fontconfig.h>
#include <fcfreetype.h>


FcPattern * FcFreeTypeQuery(const FcChar8 *file, int id, FcBlanks *blanks, int
*count);

Description

Constructs a pattern representing the 'id'th font in 'file'. The number of
fonts in 'file' is returned in 'count'.

Version

Fontconfig version 2.8.0

FcFreeTypeQueryFace

Name

FcFreeTypeQueryFace -- compute pattern from FT_Face

Synopsis

#include <fontconfig.h>
#include <fcfreetype.h>


FcPattern * FcFreeTypeQueryFace(const FT_Face face, const FcChar8 *file, int id
, FcBlanks *blanks);

Description

Constructs a pattern representing 'face'. 'file' and 'id' are used solely as
data for pattern elements (FC_FILE, FC_INDEX and sometimes FC_FAMILY).

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcValue

Table of Contents
FcValueDestroy -- Free a value
FcValueSave -- Copy a value
FcValuePrint -- Print a value to stdout
FcValueEqual -- Test two values for equality

FcValue is a structure containing a type tag and a union of all possible
datatypes. The tag is an enum of type FcType and is intended to provide a
measure of run-time typechecking, although that depends on careful programming.

FcValueDestroy

Name

FcValueDestroy -- Free a value

Synopsis

#include <fontconfig.h>


void FcValueDestroy(FcValue v);

Description

Frees any memory referenced by v. Values of type FcTypeString, FcTypeMatrix and
FcTypeCharSet reference memory, the other types do not.

Version

Fontconfig version 2.8.0

FcValueSave

Name

FcValueSave -- Copy a value

Synopsis

#include <fontconfig.h>


FcValue FcValueSave(FcValue v);

Description

Returns a copy of v duplicating any object referenced by it so that v may be
safely destroyed without harming the new value.

Version

Fontconfig version 2.8.0

FcValuePrint

Name

FcValuePrint -- Print a value to stdout

Synopsis

#include <fontconfig.h>


void FcValuePrint(FcValue v);

Description

Prints a human-readable representation of v to stdout. The format should not be
considered part of the library specification as it may change in the future.

Version

Fontconfig version 2.8.0

FcValueEqual

Name

FcValueEqual -- Test two values for equality

Synopsis

#include <fontconfig.h>


FcBool FcValueEqual(FcValue v_a, FcValue v_b);

Description

Compares two values. Integers and Doubles are compared as numbers; otherwise
the two values have to be the same type to be considered equal. Strings are
compared ignoring case.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcCharSet

Table of Contents
FcCharSetCreate -- Create an empty character set
FcCharSetDestroy -- Destroy a character set
FcCharSetAddChar -- Add a character to a charset
FcCharSetCopy -- Copy a charset
FcCharSetEqual -- Compare two charsets
FcCharSetIntersect -- Intersect charsets
FcCharSetUnion -- Add charsets
FcCharSetSubtract -- Subtract charsets
FcCharSetMerge -- Merge charsets
FcCharSetHasChar -- Check a charset for a char
FcCharSetCount -- Count entries in a charset
FcCharSetIntersectCount -- Intersect and count charsets
FcCharSetSubtractCount -- Subtract and count charsets
FcCharSetIsSubset -- Test for charset inclusion
FcCharSetFirstPage -- Start enumerating charset contents
FcCharSetNextPage -- Continue enumerating charset contents
FcCharSetCoverage -- DEPRECATED return coverage for a Unicode page
FcCharSetNew -- DEPRECATED alias for FcCharSetCreate

An FcCharSet is a boolean array indicating a set of unicode chars. Those
associated with a font are marked constant and cannot be edited. FcCharSets may
be reference counted internally to reduce memory consumption; this may be
visible to applications as the result of FcCharSetCopy may return it's
argument, and that CharSet may remain unmodifiable.

FcCharSetCreate

Name

FcCharSetCreate -- Create an empty character set

Synopsis

#include <fontconfig.h>


FcCharSet * FcCharSetCreate(void);

Description

FcCharSetCreate allocates and initializes a new empty character set object.

Version

Fontconfig version 2.8.0

FcCharSetDestroy

Name

FcCharSetDestroy -- Destroy a character set

Synopsis

#include <fontconfig.h>


void FcCharSetDestroy(FcCharSet *fcs);

Description

FcCharSetDestroy decrements the reference count fcs. If the reference count
becomes zero, all memory referenced is freed.

Version

Fontconfig version 2.8.0

FcCharSetAddChar

Name

FcCharSetAddChar -- Add a character to a charset

Synopsis

#include <fontconfig.h>


FcBool FcCharSetAddChar(FcCharSet *fcs, FcChar32 ucs4);

Description

FcCharSetAddChar adds a single unicode char to the set, returning FcFalse on
failure, either as a result of a constant set or from running out of memory.

Version

Fontconfig version 2.8.0

FcCharSetCopy

Name

FcCharSetCopy -- Copy a charset

Synopsis

#include <fontconfig.h>


FcCharSet * FcCharSetCopy(FcCharSet *src);

Description

Makes a copy of src; note that this may not actually do anything more than
increment the reference count on src.

Version

Fontconfig version 2.8.0

FcCharSetEqual

Name

FcCharSetEqual -- Compare two charsets

Synopsis

#include <fontconfig.h>


FcBool FcCharSetEqual(const FcCharSet *a, const FcCharSet *b);

Description

Returns whether a and b contain the same set of unicode chars.

Version

Fontconfig version 2.8.0

FcCharSetIntersect

Name

FcCharSetIntersect -- Intersect charsets

Synopsis

#include <fontconfig.h>


FcCharSet * FcCharSetIntersect(const FcCharSet *a, const FcCharSet *b);

Description

Returns a set including only those chars found in both a and b.

Version

Fontconfig version 2.8.0

FcCharSetUnion

Name

FcCharSetUnion -- Add charsets

Synopsis

#include <fontconfig.h>


FcCharSet * FcCharSetUnion(const FcCharSet *a, const FcCharSet *b);

Description

Returns a set including only those chars found in either a or b.

Version

Fontconfig version 2.8.0

FcCharSetSubtract

Name

FcCharSetSubtract -- Subtract charsets

Synopsis

#include <fontconfig.h>


FcCharSet * FcCharSetSubtract(const FcCharSet *a, const FcCharSet *b);

Description

Returns a set including only those chars found in a but not b.

Version

Fontconfig version 2.8.0

FcCharSetMerge

Name

FcCharSetMerge -- Merge charsets

Synopsis

#include <fontconfig.h>


FcBool FcCharSetMerge(FcCharSet *a, const FcCharSet *b, FcBool *changed);

Description

Adds all chars in b to a. In other words, this is an in-place version of
FcCharSetUnion. If changed is not NULL, then it returns whether any new chars
from b were added to a. Returns FcFalse on failure, either when a is a constant
set or from running out of memory.

Version

Fontconfig version 2.8.0

FcCharSetHasChar

Name

FcCharSetHasChar -- Check a charset for a char

Synopsis

#include <fontconfig.h>


FcBool FcCharSetHasChar(const FcCharSet *fcs, FcChar32 ucs4);

Description

Returns whether fcs contains the char ucs4.

Version

Fontconfig version 2.8.0

FcCharSetCount

Name

FcCharSetCount -- Count entries in a charset

Synopsis

#include <fontconfig.h>


FcChar32 FcCharSetCount(const FcCharSet *a);

Description

Returns the total number of unicode chars in a.

Version

Fontconfig version 2.8.0

FcCharSetIntersectCount

Name

FcCharSetIntersectCount -- Intersect and count charsets

Synopsis

#include <fontconfig.h>


FcChar32 FcCharSetIntersectCount(const FcCharSet *a, const FcCharSet *b);

Description

Returns the number of chars that are in both a and b.

Version

Fontconfig version 2.8.0

FcCharSetSubtractCount

Name

FcCharSetSubtractCount -- Subtract and count charsets

Synopsis

#include <fontconfig.h>


FcChar32 FcCharSetSubtractCount(const FcCharSet *a, const FcCharSet *b);

Description

Returns the number of chars that are in a but not in b.

Version

Fontconfig version 2.8.0

FcCharSetIsSubset

Name

FcCharSetIsSubset -- Test for charset inclusion

Synopsis

#include <fontconfig.h>


FcBool FcCharSetIsSubset(const FcCharSet *a, const FcCharSet *b);

Description

Returns whether a is a subset of b.

Version

Fontconfig version 2.8.0

FcCharSetFirstPage

Name

FcCharSetFirstPage -- Start enumerating charset contents

Synopsis

#include <fontconfig.h>


FcChar32 FcCharSetFirstPage(const FcCharSet *a, FcChar32[FC_CHARSET_MAP_SIZE]
map, FcChar32 *next);

Description

Builds an array of bits marking the first page of Unicode coverage of a.
Returns the base of the array. next contains the next page in the font.

Version

Fontconfig version 2.8.0

FcCharSetNextPage

Name

FcCharSetNextPage -- Continue enumerating charset contents

Synopsis

#include <fontconfig.h>


FcChar32 FcCharSetNextPage(const FcCharSet *a, FcChar32[FC_CHARSET_MAP_SIZE]
map, FcChar32 *next);

Description

Builds an array of bits marking the Unicode coverage of a for page *next.
Returns the base of the array. next contains the next page in the font.

Version

Fontconfig version 2.8.0

FcCharSetCoverage

Name

FcCharSetCoverage -- DEPRECATED return coverage for a Unicode page

Synopsis

#include <fontconfig.h>


FcChar32 FcCharSetCoverage(const FcCharSet *a, FcChar32page, FcChar32[8]result
);

Description

DEPRECATED This function returns a bitmask in result which indicates which code
points in page are included in a. FcCharSetCoverage returns the next page in
the charset which has any coverage.

Version

Fontconfig version 2.8.0

FcCharSetNew

Name

FcCharSetNew -- DEPRECATED alias for FcCharSetCreate

Synopsis

#include <fontconfig.h>


FcCharSet * FcCharSetNew(void);

Description

FcCharSetNew is a DEPRECATED alias for FcCharSetCreate.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcLangSet

Table of Contents
FcLangSetCreate -- create a langset object
FcLangSetDestroy -- destroy a langset object
FcLangSetCopy -- copy a langset object
FcLangSetAdd -- add a language to a langset
FcLangSetCompare -- compare language sets
FcLangSetContains -- check langset subset relation
FcLangSetEqual -- test for matching langsets
FcLangSetHash -- return a hash value for a langset
FcLangSetHasLang -- test langset for language support
FcLangSetGetLangs -- get the list of languages in the langset
FcGetLangs -- Get list of languages
FcLangGetCharSet -- Get character map for a language

An FcLangSet is a set of language names (each of which include language and an
optional territory). They are used when selecting fonts to indicate which
languages the fonts need to support. Each font is marked, using language
orthography information built into fontconfig, with the set of supported
languages.

FcLangSetCreate

Name

FcLangSetCreate -- create a langset object

Synopsis

#include <fontconfig.h>


FcLangSet * FcLangSetCreate(void);

Description

FcLangSetCreate creates a new FcLangSet object.

Version

Fontconfig version 2.8.0

FcLangSetDestroy

Name

FcLangSetDestroy -- destroy a langset object

Synopsis

#include <fontconfig.h>


void FcLangSetDestroy(FcLangSet *ls);

Description

FcLangSetDestroy destroys a FcLangSet object, freeing all memory associated
with it.

Version

Fontconfig version 2.8.0

FcLangSetCopy

Name

FcLangSetCopy -- copy a langset object

Synopsis

#include <fontconfig.h>


FcLangSet * FcLangSetCopy(const FcLangSet *ls);

Description

FcLangSetCopy creates a new FcLangSet object and populates it with the contents
of ls.

Version

Fontconfig version 2.8.0

FcLangSetAdd

Name

FcLangSetAdd -- add a language to a langset

Synopsis

#include <fontconfig.h>


FcBool FcLangSetAdd(FcLangSet *ls, const FcChar8 *lang);

Description

lang is added to ls. lang should be of the form Ll-Tt where Ll is a two or
three letter language from ISO 639 and Tt is a territory from ISO 3166.

Version

Fontconfig version 2.8.0

FcLangSetCompare

Name

FcLangSetCompare -- compare language sets

Synopsis

#include <fontconfig.h>


FcLangResult FcLangSetCompare(const FcLangSet *ls_a, const FcLangSet *ls_b);

Description

FcLangSetCompare compares language coverage for ls_a and ls_b. If they share
any language and territory pair, this function returns FcLangEqual. If they
share a language but differ in which territory that language is for, this
function returns FcLangDiffentTerritory. If they share no languages in common,
this function returns FcLangDifferentLang.

Version

Fontconfig version 2.8.0

FcLangSetContains

Name

FcLangSetContains -- check langset subset relation

Synopsis

#include <fontconfig.h>


FcBool FcLangSetContains(const FcLangSet *ls_a, const FcLangSet *ls_b);

Description

FcLangSetContains returns FcTrue if ls_a contains every language in ls_b. ls_a
will 'contain' a language from ls_b if ls_a has exactly the language, or either
the language or ls_a has no territory.

Version

Fontconfig version 2.8.0

FcLangSetEqual

Name

FcLangSetEqual -- test for matching langsets

Synopsis

#include <fontconfig.h>


FcBool FcLangSetEqual(const FcLangSet *ls_a, const FcLangSet *ls_b);

Description

Returns FcTrue if and only if ls_a supports precisely the same language and
territory combinations as ls_b.

Version

Fontconfig version 2.8.0

FcLangSetHash

Name

FcLangSetHash -- return a hash value for a langset

Synopsis

#include <fontconfig.h>


FcChar32 FcLangSetHash(const FcLangSet *ls);

Description

This function returns a value which depends solely on the languages supported
by ls. Any language which equals ls will have the same result from
FcLangSetHash. However, two langsets with the same hash value may not be equal.

Version

Fontconfig version 2.8.0

FcLangSetHasLang

Name

FcLangSetHasLang -- test langset for language support

Synopsis

#include <fontconfig.h>


FcLangResult FcLangSetHasLang(const FcLangSet *ls, const FcChar8 *lang);

Description

FcLangSetHasLang checks whether ls supports lang. If ls has a matching language
and territory pair, this function returns FcLangEqual. If ls has a matching
language but differs in which territory that language is for, this function
returns FcLangDiffentTerritory. If ls has no matching language, this function
returns FcLangDifferentLang.

Version

Fontconfig version 2.8.0

FcLangSetGetLangs

Name

FcLangSetGetLangs -- get the list of languages in the langset

Synopsis

#include <fontconfig.h>


FcStrSet * FcLangSetGetLangs(const FcLangSet *ls);

Description

Returns a string set of all languages in langset.

Version

Fontconfig version 2.8.0

FcGetLangs

Name

FcGetLangs -- Get list of languages

Synopsis

#include <fontconfig.h>


FcStrSet * FcGetLangs(void);

Description

Returns a string set of all known languages.

Version

Fontconfig version 2.8.0

FcLangGetCharSet

Name

FcLangGetCharSet -- Get character map for a language

Synopsis

#include <fontconfig.h>


const FcCharSet * FcLangGetCharSet(const FcChar8 *lang);

Description

Returns the FcCharMap for a language.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcMatrix

Table of Contents
FcMatrixInit -- initialize an FcMatrix structure
FcMatrixCopy -- Copy a matrix
FcMatrixEqual -- Compare two matrices
FcMatrixMultiply -- Multiply matrices
FcMatrixRotate -- Rotate a matrix
FcMatrixScale -- Scale a matrix
FcMatrixShear -- Shear a matrix

FcMatrix structures hold an affine transformation in matrix form.

FcMatrixInit

Name

FcMatrixInit -- initialize an FcMatrix structure

Synopsis

#include <fontconfig.h>


void FcMatrixInit(FcMatrix *matrix);

Description

FcMatrixInit initializes matrix to the identity matrix.

Version

Fontconfig version 2.8.0

FcMatrixCopy

Name

FcMatrixCopy -- Copy a matrix

Synopsis

#include <fontconfig.h>


void FcMatrixCopy(const FcMatrix *matrix);

Description

FcMatrixCopy allocates a new FcMatrix and copies mat into it.

Version

Fontconfig version 2.8.0

FcMatrixEqual

Name

FcMatrixEqual -- Compare two matrices

Synopsis

#include <fontconfig.h>


void FcMatrixEqual(const FcMatrix *matrix1, const FcMatrix *matrix2);

Description

FcMatrixEqual compares matrix1 and matrix2 returning FcTrue when they are equal
and FcFalse when they are not.

Version

Fontconfig version 2.8.0

FcMatrixMultiply

Name

FcMatrixMultiply -- Multiply matrices

Synopsis

#include <fontconfig.h>


void FcMatrixMultiply(FcMatrix *result, const FcMatrix *matrix1, const FcMatrix
*matrix2);

Description

FcMatrixMultiply multiplies matrix1 and matrix2 storing the result in result.

Version

Fontconfig version 2.8.0

FcMatrixRotate

Name

FcMatrixRotate -- Rotate a matrix

Synopsis

#include <fontconfig.h>


void FcMatrixRotate(FcMatrix *matrix, double cos, double sin);

Description

FcMatrixRotate rotates matrix by the angle who's sine is sin and cosine is cos.
This is done by multiplying by the matrix:

  cos -sin
  sin  cos

Version

Fontconfig version 2.8.0

FcMatrixScale

Name

FcMatrixScale -- Scale a matrix

Synopsis

#include <fontconfig.h>


void FcMatrixScale(FcMatrix *matrix, double sx, double dy);

Description

FcMatrixScale multiplies matrix x values by sx and y values by sy. This is done
by multiplying by the matrix:

   sx  0
   0   sy

Version

Fontconfig version 2.8.0

FcMatrixShear

Name

FcMatrixShear -- Shear a matrix

Synopsis

#include <fontconfig.h>


void FcMatrixShear(FcMatrix *matrix, double sh, double sv);

Description

FcMatrixShare shears matrix horizontally by sh and vertically by sv. This is
done by multiplying by the matrix:

  1  sh
  sv  1

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcConfig

Table of Contents
FcConfigCreate -- Create a configuration
FcConfigReference -- Increment config reference count
FcConfigDestroy -- Destroy a configuration
FcConfigSetCurrent -- Set configuration as default
FcConfigGetCurrent -- Return current configuration
FcConfigUptoDate -- Check timestamps on config files
FcConfigHome -- return the current home directory.
FcConfigEnableHome -- controls use of the home directory.
FcConfigBuildFonts -- Build font database
FcConfigGetConfigDirs -- Get config directories
FcConfigGetFontDirs -- Get font directories
FcConfigGetConfigFiles -- Get config files
FcConfigGetCache -- DEPRECATED used to return per-user cache filename
FcConfigGetCacheDirs -- return the list of directories searched for cache files
FcConfigGetFonts -- Get config font set
FcConfigGetBlanks -- Get config blanks
FcConfigGetRescanInterval -- Get config rescan interval
FcConfigSetRescanInterval -- Set config rescan interval
FcConfigAppFontAddFile -- Add font file to font database
FcConfigAppFontAddDir -- Add fonts from directory to font database
FcConfigAppFontClear -- Remove all app fonts from font database
FcConfigSubstituteWithPat -- Execute substitutions
FcConfigSubstitute -- Execute substitutions
FcFontMatch -- Return best font
FcFontSort -- Return list of matching fonts
FcFontRenderPrepare -- Prepare pattern for loading font file
FcFontList -- List fonts
FcConfigFilename -- Find a config file
FcConfigParseAndLoad -- load a configuration file

An FcConfig object holds the internal representation of a configuration. There
is a default configuration which applications may use by passing 0 to any
function using the data within an FcConfig.

FcConfigCreate

Name

FcConfigCreate -- Create a configuration

Synopsis

#include <fontconfig.h>


FcConfig * FcConfigCreate(void);

Description

Creates an empty configuration.

Version

Fontconfig version 2.8.0

FcConfigReference

Name

FcConfigReference -- Increment config reference count

Synopsis

#include <fontconfig.h>


FcConfig * FcConfigReference(FcConfig *config);

Description

Add another reference to config. Configs are freed only when the reference
count reaches zero. If config is NULL, the current configuration is used. In
that case this function will be similar to FcConfigGetCurrent() except that it
increments the reference count before returning and the user is responsible for
destroying the configuration when not needed anymore.

Version

Fontconfig version 2.8.0

FcConfigDestroy

Name

FcConfigDestroy -- Destroy a configuration

Synopsis

#include <fontconfig.h>


void FcConfigDestroy(FcConfig *config);

Description

Decrements the config reference count. If all references are gone, destroys the
configuration and any data associated with it. Note that calling this function
with the return from FcConfigGetCurrent will cause a new configuration to be
created for use as current configuration.

Version

Fontconfig version 2.8.0

FcConfigSetCurrent

Name

FcConfigSetCurrent -- Set configuration as default

Synopsis

#include <fontconfig.h>


FcBool FcConfigSetCurrent(FcConfig *config);

Description

Sets the current default configuration to config. Implicitly calls
FcConfigBuildFonts if necessary, returning FcFalse if that call fails.

Version

Fontconfig version 2.8.0

FcConfigGetCurrent

Name

FcConfigGetCurrent -- Return current configuration

Synopsis

#include <fontconfig.h>


FcConfig * FcConfigGetCurrent(void);

Description

Returns the current default configuration.

Version

Fontconfig version 2.8.0

FcConfigUptoDate

Name

FcConfigUptoDate -- Check timestamps on config files

Synopsis

#include <fontconfig.h>


FcBool FcConfigUptoDate(FcConfig *config);

Description

Checks all of the files related to config and returns whether any of them has
been modified since the configuration was created. If config is NULL, the
current configuration is used.

Version

Fontconfig version 2.8.0

FcConfigHome

Name

FcConfigHome -- return the current home directory.

Synopsis

#include <fontconfig.h>


FcChar8 * FcConfigHome(void);

Description

Return the current user's home directory, if it is available, and if using it
is enabled, and NULL otherwise. See also FcConfigEnableHome).

Version

Fontconfig version 2.8.0

FcConfigEnableHome

Name

FcConfigEnableHome -- controls use of the home directory.

Synopsis

#include <fontconfig.h>


FcBol FcConfigEnableHome(FcBool enable);

Description

If enable is FcTrue, then Fontconfig will use various files which are specified
relative to the user's home directory (using the ~ notation in the
configuration). When enable is FcFalse, then all use of the home directory in
these contexts will be disabled. The previous setting of the value is returned.

Version

Fontconfig version 2.8.0

FcConfigBuildFonts

Name

FcConfigBuildFonts -- Build font database

Synopsis

#include <fontconfig.h>


FcBool FcConfigBuildFonts(FcConfig *config);

Description

Builds the set of available fonts for the given configuration. Note that any
changes to the configuration after this call have indeterminate effects.
Returns FcFalse if this operation runs out of memory. If config is NULL, the
current configuration is used.

Version

Fontconfig version 2.8.0

FcConfigGetConfigDirs

Name

FcConfigGetConfigDirs -- Get config directories

Synopsis

#include <fontconfig.h>


FcStrList * FcConfigGetConfigDirs(FcConfig *config);

Description

Returns the list of font directories specified in the configuration files for
config. Does not include any subdirectories. If config is NULL, the current
configuration is used.

Version

Fontconfig version 2.8.0

FcConfigGetFontDirs

Name

FcConfigGetFontDirs -- Get font directories

Synopsis

#include <fontconfig.h>


FcStrList * FcConfigGetFontDirs(FcConfig *config);

Description

Returns the list of font directories in config. This includes the configured
font directories along with any directories below those in the filesystem. If
config is NULL, the current configuration is used.

Version

Fontconfig version 2.8.0

FcConfigGetConfigFiles

Name

FcConfigGetConfigFiles -- Get config files

Synopsis

#include <fontconfig.h>


FcStrList * FcConfigGetConfigFiles(FcConfig *config);

Description

Returns the list of known configuration files used to generate config. If
config is NULL, the current configuration is used.

Version

Fontconfig version 2.8.0

FcConfigGetCache

Name

FcConfigGetCache -- DEPRECATED used to return per-user cache filename

Synopsis

#include <fontconfig.h>


FcChar8 * FcConfigGetCache(FcConfig *config);

Description

With fontconfig no longer using per-user cache files, this function now simply
returns NULL to indicate that no per-user file exists.

Version

Fontconfig version 2.8.0

FcConfigGetCacheDirs

Name

FcConfigGetCacheDirs -- return the list of directories searched for cache files

Synopsis

#include <fontconfig.h>


FcStrList * FcConfigGetCacheDirs(FcConfig *config);

Description

FcConfigGetCacheDirs returns a string list containing all of the directories
that fontconfig will search when attempting to load a cache file for a font
directory. If config is NULL, the current configuration is used.

Version

Fontconfig version 2.8.0

FcConfigGetFonts

Name

FcConfigGetFonts -- Get config font set

Synopsis

#include <fontconfig.h>


FcFontSet * FcConfigGetFonts(FcConfig *config, FcSetName set);

Description

Returns one of the two sets of fonts from the configuration as specified by set
. This font set is owned by the library and must not be modified or freed. If
config is NULL, the current configuration is used.

Version

Fontconfig version 2.8.0

FcConfigGetBlanks

Name

FcConfigGetBlanks -- Get config blanks

Synopsis

#include <fontconfig.h>


FcBlanks * FcConfigGetBlanks(FcConfig *config);

Description

Returns the FcBlanks object associated with the given configuration, if no
blanks were present in the configuration, this function will return 0. The
returned FcBlanks object if not NULL, is valid as long as the owning FcConfig
is alive. If config is NULL, the current configuration is used.

Version

Fontconfig version 2.8.0

FcConfigGetRescanInterval

Name

FcConfigGetRescanInterval -- Get config rescan interval

Synopsis

#include <fontconfig.h>


int FcConfigGetRescanInterval(FcConfig *config);

Description

Returns the interval between automatic checks of the configuration (in seconds)
specified in config. The configuration is checked during a call to FcFontList
when this interval has passed since the last check. An interval setting of zero
disables automatic checks. If config is NULL, the current configuration is
used.

Version

Fontconfig version 2.8.0

FcConfigSetRescanInterval

Name

FcConfigSetRescanInterval -- Set config rescan interval

Synopsis

#include <fontconfig.h>


FcBool FcConfigSetRescanInterval(FcConfig *config, int rescanInterval);

Description

Sets the rescan interval. Returns FcFalse if the interval cannot be set (due to
allocation failure). Otherwise returns FcTrue. An interval setting of zero
disables automatic checks. If config is NULL, the current configuration is
used.

Version

Fontconfig version 2.8.0

FcConfigAppFontAddFile

Name

FcConfigAppFontAddFile -- Add font file to font database

Synopsis

#include <fontconfig.h>


FcBool FcConfigAppFontAddFile(FcConfig *config, const FcChar8 *file);

Description

Adds an application-specific font to the configuration. Returns FcFalse if the
fonts cannot be added (due to allocation failure). Otherwise returns FcTrue. If
config is NULL, the current configuration is used.

Version

Fontconfig version 2.8.0

FcConfigAppFontAddDir

Name

FcConfigAppFontAddDir -- Add fonts from directory to font database

Synopsis

#include <fontconfig.h>


FcBool FcConfigAppFontAddDir(FcConfig *config, const FcChar8 *dir);

Description

Scans the specified directory for fonts, adding each one found to the
application-specific set of fonts. Returns FcFalse if the fonts cannot be added
(due to allocation failure). Otherwise returns FcTrue. If config is NULL, the
current configuration is used.

Version

Fontconfig version 2.8.0

FcConfigAppFontClear

Name

FcConfigAppFontClear -- Remove all app fonts from font database

Synopsis

#include <fontconfig.h>


void FcConfigAppFontClear(FcConfig *config);

Description

Clears the set of application-specific fonts. If config is NULL, the current
configuration is used.

Version

Fontconfig version 2.8.0

FcConfigSubstituteWithPat

Name

FcConfigSubstituteWithPat -- Execute substitutions

Synopsis

#include <fontconfig.h>


FcBool FcConfigSubstituteWithPat(FcConfig *config, FcPattern *p, FcPattern *
p_pat, FcMatchKind kind);

Description

Performs the sequence of pattern modification operations, if kind is
FcMatchPattern, then those tagged as pattern operations are applied, else if
kind is FcMatchFont, those tagged as font operations are applied and p_pat is
used for <test> elements with target=pattern. Returns FcFalse if the
substitution cannot be performed (due to allocation failure). Otherwise returns
FcTrue. If config is NULL, the current configuration is used.

Version

Fontconfig version 2.8.0

FcConfigSubstitute

Name

FcConfigSubstitute -- Execute substitutions

Synopsis

#include <fontconfig.h>


FcBool FcConfigSubstitute(FcConfig *config, FcPattern *p, FcMatchKind kind);

Description

Calls FcConfigSubstituteWithPat setting p_pat to NULL. Returns FcFalse if the
substitution cannot be performed (due to allocation failure). Otherwise returns
FcTrue. If config is NULL, the current configuration is used.

Version

Fontconfig version 2.8.0

FcFontMatch

Name

FcFontMatch -- Return best font

Synopsis

#include <fontconfig.h>


FcPattern * FcFontMatch(FcConfig *config, FcPattern *p, FcResult *result);

Description

Finds the font in sets most closely matching pattern and returns the result of
FcFontRenderPrepare for that font and the provided pattern. This function
should be called only after FcConfigSubstitute and FcDefaultSubstitute have
been called for p; otherwise the results will not be correct. If config is
NULL, the current configuration is used.

Version

Fontconfig version 2.8.0

FcFontSort

Name

FcFontSort -- Return list of matching fonts

Synopsis

#include <fontconfig.h>


FcFontSet * FcFontSort(FcConfig *config, FcPattern *p, FcBool trim, FcCharSet
**csp, FcResult *result);

Description

Returns the list of fonts sorted by closeness to p. If trim is FcTrue, elements
in the list which don't include Unicode coverage not provided by earlier
elements in the list are elided. The union of Unicode coverage of all of the
fonts is returned in csp, if csp is not NULL. This function should be called
only after FcConfigSubstitute and FcDefaultSubstitute have been called for p;
otherwise the results will not be correct.

The returned FcFontSet references FcPattern structures which may be shared by
the return value from multiple FcFontSort calls, applications must not modify
these patterns. Instead, they should be passed, along with p to
FcFontRenderPrepare which combines them into a complete pattern.

The FcFontSet returned by FcFontSort is destroyed by caling FcFontSetDestroy.
If config is NULL, the current configuration is used.

Version

Fontconfig version 2.8.0

FcFontRenderPrepare

Name

FcFontRenderPrepare -- Prepare pattern for loading font file

Synopsis

#include <fontconfig.h>


FcPattern * FcFontRenderPrepare(FcConfig *config, FcPattern *pat, FcPattern *
font);

Description

Creates a new pattern consisting of elements of font not appearing in pat,
elements of pat not appearing in font and the best matching value from pat for
elements appearing in both. The result is passed to FcConfigSubstituteWithPat
with kind FcMatchFont and then returned.

Version

Fontconfig version 2.8.0

FcFontList

Name

FcFontList -- List fonts

Synopsis

#include <fontconfig.h>


FcFontSet * FcFontList(FcConfig *config, FcPattern *p, FcObjectSet *os);

Description

Selects fonts matching p, creates patterns from those fonts containing only the
objects in os and returns the set of unique such patterns. If config is NULL,
the default configuration is checked to be up to date, and used.

Version

Fontconfig version 2.8.0

FcConfigFilename

Name

FcConfigFilename -- Find a config file

Synopsis

#include <fontconfig.h>


FcChar8 * FcConfigFilename(const FcChar8 *name);

Description

Given the specified external entity name, return the associated filename. This
provides applications a way to convert various configuration file references
into filename form.

A null or empty name indicates that the default configuration file should be
used; which file this references can be overridden with the FC_CONFIG_FILE
environment variable. Next, if the name starts with ~, it refers to a file in
the current users home directory. Otherwise if the name doesn't start with '/',
it refers to a file in the default configuration directory; the built-in
default directory can be overridden with the FC_CONFIG_DIR environment
variable.

Version

Fontconfig version 2.8.0

FcConfigParseAndLoad

Name

FcConfigParseAndLoad -- load a configuration file

Synopsis

#include <fontconfig.h>


FcBool FcConfigParseAndLoad(FcConfig *config, const FcChar8 *file, FcBool
complain);

Description

Walks the configuration in 'file' and constructs the internal representation in
'config'. Any include files referenced from within 'file' will be loaded and
parsed. If 'complain' is FcFalse, no warning will be displayed if 'file' does
not exist. Error and warning messages will be output to stderr. Returns FcFalse
if some error occurred while loading the file, either a parse error, semantic
error or allocation failure. Otherwise returns FcTrue.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcObjectType

Table of Contents
FcNameRegisterObjectTypes -- Register object types
FcNameUnregisterObjectTypes -- Unregister object types
FcNameGetObjectType -- Lookup an object type

Provides for applcation-specified font name object types so that new pattern
elements can be generated from font names.

FcNameRegisterObjectTypes

Name

FcNameRegisterObjectTypes -- Register object types

Synopsis

#include <fontconfig.h>


FcBool FcNameRegisterObjectTypes(const FcObjectType *types, int ntype);

Description

Register ntype new object types. Returns FcFalse if some of the names cannot be
registered (due to allocation failure). Otherwise returns FcTrue.

Version

Fontconfig version 2.8.0

FcNameUnregisterObjectTypes

Name

FcNameUnregisterObjectTypes -- Unregister object types

Synopsis

#include <fontconfig.h>


FcBool FcNameUnregisterObjectTypes(const FcObjectType *types, int ntype);

Description

Unregister ntype object types. Returns FcTrue.

Version

Fontconfig version 2.8.0

FcNameGetObjectType

Name

FcNameGetObjectType -- Lookup an object type

Synopsis

#include <fontconfig.h>


const FcObjectType * FcNameGetObjectType(const char *object);

Description

Return the object type for the pattern element named object.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcConstant

Table of Contents
FcNameRegisterConstants -- Register symbolic constants
FcNameUnregisterConstants -- Unregister symbolic constants
FcNameGetConstant -- Lookup symbolic constant
FcNameConstant -- Get the value for a symbolic constant

Provides for application-specified symbolic constants for font names.

FcNameRegisterConstants

Name

FcNameRegisterConstants -- Register symbolic constants

Synopsis

#include <fontconfig.h>


FcBool FcNameRegisterConstants(const FcConstant *consts, int nconsts);

Description

Register nconsts new symbolic constants. Returns FcFalse if the constants
cannot be registered (due to allocation failure). Otherwise returns FcTrue.

Version

Fontconfig version 2.8.0

FcNameUnregisterConstants

Name

FcNameUnregisterConstants -- Unregister symbolic constants

Synopsis

#include <fontconfig.h>


FcBool FcNameUnregisterConstants(const FcConstant *consts, int nconsts);

Description

Unregister nconsts symbolic constants. Returns FcFalse if the specified
constants were not registered. Otherwise returns FcTrue.

Version

Fontconfig version 2.8.0

FcNameGetConstant

Name

FcNameGetConstant -- Lookup symbolic constant

Synopsis

#include <fontconfig.h>


const FcConstant * FcNameGetConstant(FcChar8 *string);

Description

Return the FcConstant structure related to symbolic constant string.

Version

Fontconfig version 2.8.0

FcNameConstant

Name

FcNameConstant -- Get the value for a symbolic constant

Synopsis

#include <fontconfig.h>


FcBool FcNameConstant(FcChar8 *string, int *result);

Description

Returns whether a symbolic constant with name string is registered, placing the
value of the constant in result if present.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcBlanks

Table of Contents
FcBlanksCreate -- Create an FcBlanks
FcBlanksDestroy -- Destroy and FcBlanks
FcBlanksAdd -- Add a character to an FcBlanks
FcBlanksIsMember -- Query membership in an FcBlanks

An FcBlanks object holds a list of Unicode chars which are expected to be blank
when drawn. When scanning new fonts, any glyphs which are empty and not in this
list will be assumed to be broken and not placed in the FcCharSet associated
with the font. This provides a significantly more accurate CharSet for
applications.

FcBlanksCreate

Name

FcBlanksCreate -- Create an FcBlanks

Synopsis

#include <fontconfig.h>


FcBlanks * FcBlanksCreate(void);

Description

Creates an empty FcBlanks object.

Version

Fontconfig version 2.8.0

FcBlanksDestroy

Name

FcBlanksDestroy -- Destroy and FcBlanks

Synopsis

#include <fontconfig.h>


void FcBlanksDestroy(FcBlanks *b);

Description

Destroys an FcBlanks object, freeing any associated memory.

Version

Fontconfig version 2.8.0

FcBlanksAdd

Name

FcBlanksAdd -- Add a character to an FcBlanks

Synopsis

#include <fontconfig.h>


FcBool FcBlanksAdd(FcBlanks *b, FcChar32 ucs4);

Description

Adds a single character to an FcBlanks object, returning FcFalse if this
process ran out of memory.

Version

Fontconfig version 2.8.0

FcBlanksIsMember

Name

FcBlanksIsMember -- Query membership in an FcBlanks

Synopsis

#include <fontconfig.h>


FcBool FcBlanksIsMember(FcBlanks *b, FcChar32 ucs4);

Description

Returns whether the specified FcBlanks object contains the indicated Unicode
value.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcAtomic

Table of Contents
FcAtomicCreate -- create an FcAtomic object
FcAtomicLock -- lock a file
FcAtomicNewFile -- return new temporary file name
FcAtomicOrigFile -- return original file name
FcAtomicReplaceOrig -- replace original with new
FcAtomicDeleteNew -- delete new file
FcAtomicUnlock -- unlock a file
FcAtomicDestroy -- destroy an FcAtomic object

These functions provide a safe way to update config files, allowing ongoing
reading of the old config file while locked for writing and ensuring that a
consistent and complete version of the config file is always available.

FcAtomicCreate

Name

FcAtomicCreate -- create an FcAtomic object

Synopsis

#include <fontconfig.h>


FcAtomic * FcAtomicCreate(const FcChar8 *file);

Description

Creates a data structure containing data needed to control access to file.
Writing is done to a separate file. Once that file is complete, the original
configuration file is atomically replaced so that reading process always see a
consistent and complete file without the need to lock for reading.

Version

Fontconfig version 2.8.0

FcAtomicLock

Name

FcAtomicLock -- lock a file

Synopsis

#include <fontconfig.h>


FcBool FcAtomicLock(FcAtomic *atomic);

Description

Attempts to lock the file referenced by atomic. Returns FcFalse if the file is
already locked, else returns FcTrue and leaves the file locked.

Version

Fontconfig version 2.8.0

FcAtomicNewFile

Name

FcAtomicNewFile -- return new temporary file name

Synopsis

#include <fontconfig.h>


FcChar8 * FcAtomicNewFile(FcAtomic *atomic);

Description

Returns the filename for writing a new version of the file referenced by atomic
.

Version

Fontconfig version 2.8.0

FcAtomicOrigFile

Name

FcAtomicOrigFile -- return original file name

Synopsis

#include <fontconfig.h>


FcChar8 * FcAtomicOrigFile(FcAtomic *atomic);

Description

Returns the file refernced by atomic.

Version

Fontconfig version 2.8.0

FcAtomicReplaceOrig

Name

FcAtomicReplaceOrig -- replace original with new

Synopsis

#include <fontconfig.h>


FcBool FcAtomicReplaceOrig(FcAtomic *atomic);

Description

Replaces the original file referenced by atomic with the new file. Returns
FcFalse if the file cannot be replaced due to permission issues in the
filesystem. Otherwise returns FcTrue.

Version

Fontconfig version 2.8.0

FcAtomicDeleteNew

Name

FcAtomicDeleteNew -- delete new file

Synopsis

#include <fontconfig.h>


void FcAtomicDeleteNew(FcAtomic *atomic);

Description

Deletes the new file. Used in error recovery to back out changes.

Version

Fontconfig version 2.8.0

FcAtomicUnlock

Name

FcAtomicUnlock -- unlock a file

Synopsis

#include <fontconfig.h>


void FcAtomicUnlock(FcAtomic *atomic);

Description

Unlocks the file.

Version

Fontconfig version 2.8.0

FcAtomicDestroy

Name

FcAtomicDestroy -- destroy an FcAtomic object

Synopsis

#include <fontconfig.h>


void FcAtomicDestroy(FcAtomic *atomic);

Description

Destroys atomic.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

File and Directory routines

Table of Contents
FcFileScan -- scan a font file
FcFileIsDir -- check whether a file is a directory
FcDirScan -- scan a font directory without caching it
FcDirSave -- DEPRECATED: formerly used to save a directory cache
FcDirCacheUnlink -- Remove all caches related to dir
FcDirCacheValid -- check directory cache
FcDirCacheLoad -- load a directory cache
FcDirCacheRead -- read or construct a directory cache
FcDirCacheLoadFile -- load a cache file
FcDirCacheUnload -- unload a cache file

These routines work with font files and directories, including font directory
cache files.

FcFileScan

Name

FcFileScan -- scan a font file

Synopsis

#include <fontconfig.h>


FcBool FcFileScan(FcFontSet *set, FcStrSet *dirs, FcFileCache *cache, FcBlanks
*blanks, const FcChar8 *file, FcBool force);

Description

Scans a single file and adds all fonts found to set. If force is FcTrue, then
the file is scanned even if associated information is found in cache. If file
is a directory, it is added to dirs. Whether fonts are found depends on
fontconfig policy as well as the current configuration. Internally, fontconfig
will ignore BDF and PCF fonts which are not in Unicode (or the effectively
equivalent ISO Latin-1) encoding as those are not usable by Unicode-based
applications. The configuration can ignore fonts based on filename or contents
of the font file itself. Returns FcFalse if any of the fonts cannot be added
(due to allocation failure). Otherwise returns FcTrue.

Version

Fontconfig version 2.8.0

FcFileIsDir

Name

FcFileIsDir -- check whether a file is a directory

Synopsis

#include <fontconfig.h>


FcBool FcFileIsDir(const FcChar8 *file);

Description

Returns FcTrue if file is a directory, otherwise returns FcFalse.

Version

Fontconfig version 2.8.0

FcDirScan

Name

FcDirScan -- scan a font directory without caching it

Synopsis

#include <fontconfig.h>


FcBool FcDirScan(FcFontSet *set, FcStrSet *dirs, FcFileCache *cache, FcBlanks *
blanks, const FcChar8 *dir, FcBool force);

Description

If cache is not zero or if force is FcFalse, this function currently returns
FcFalse. Otherwise, it scans an entire directory and adds all fonts found to
set. Any subdirectories found are added to dirs. Calling this function does not
create any cache files. Use FcDirCacheRead() if caching is desired.

Version

Fontconfig version 2.8.0

FcDirSave

Name

FcDirSave -- DEPRECATED: formerly used to save a directory cache

Synopsis

#include <fontconfig.h>


FcBool FcDirSave(FcFontSet *set, FcStrSet *dirs, const FcChar8 *dir);

Description

This function now does nothing aside from returning FcFalse. It used to creates
the per-directory cache file for dir and populates it with the fonts in set and
subdirectories in dirs. All of this functionality is now automatically managed
by FcDirCacheLoad and FcDirCacheRead.

Version

Fontconfig version 2.8.0

FcDirCacheUnlink

Name

FcDirCacheUnlink -- Remove all caches related to dir

Synopsis

#include <fontconfig.h>


FcBool FcDirCacheUnlink(const FcChar8 *dir, FcConfig *config);

Description

Scans the cache directories in config, removing any instances of the cache file
for dir. Returns FcFalse when some internal error occurs (out of memory, etc).
Errors actually unlinking any files are ignored.

Version

Fontconfig version 2.8.0

FcDirCacheValid

Name

FcDirCacheValid -- check directory cache

Synopsis

#include <fontconfig.h>


FcBool FcDirCacheValid(const FcChar8 *dir);

Description

Returns FcTrue if dir has an associated valid cache file, else returns FcFalse

Version

Fontconfig version 2.8.0

FcDirCacheLoad

Name

FcDirCacheLoad -- load a directory cache

Synopsis

#include <fontconfig.h>


FcCache * FcDirCacheLoad(const FcChar8 *dir, FcConfig *config, FcChar8 **
cache_file);

Description

Loads the cache related to dir. If no cache file exists, returns NULL. The name
of the cache file is returned in cache_file, unless that is NULL. See also
FcDirCacheRead.

Version

Fontconfig version 2.8.0

FcDirCacheRead

Name

FcDirCacheRead -- read or construct a directory cache

Synopsis

#include <fontconfig.h>


FcCache * FcDirCacheRead(const FcChar8 *dir, FcBool force, FcConfig *config);

Description

This returns a cache for dir. If force is FcFalse, then an existing, valid
cache file will be used. Otherwise, a new cache will be created by scanning the
directory and that returned.

Version

Fontconfig version 2.8.0

FcDirCacheLoadFile

Name

FcDirCacheLoadFile -- load a cache file

Synopsis

#include <fontconfig.h>


FcCache * FcDirCacheLoadFile(const FcChar8 *cache_file, struct stat *file_stat
);

Description

This function loads a directory cache from cache_file. If file_stat is
non-NULL, it will be filled with the results of stat(2) on the cache file.

Version

Fontconfig version 2.8.0

FcDirCacheUnload

Name

FcDirCacheUnload -- unload a cache file

Synopsis

#include <fontconfig.h>


void FcDirCacheUnload(FcCache *cache);

Description

This function dereferences cache. When no other references to it remain, all
memory associated with the cache will be freed.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcCache routines

Table of Contents
FcCacheDir -- Return directory of cache
FcCacheCopySet -- Returns a copy of the fontset from cache
FcCacheSubdir -- Return the i'th subdirectory.
FcCacheNumSubdir -- Return the number of subdirectories in cache.
FcCacheNumFont -- Returns the number of fonts in cache.

These routines work with font directory caches, accessing their contents in
limited ways. It is not expected that normal applications will need to use
these functions.

FcCacheDir

Name

FcCacheDir -- Return directory of cache

Synopsis

#include <fontconfig.h>


const FcChar8 * FcCacheDir(const FcCache *cache);

Description

This function returns the directory from which the cache was constructed.

Version

Fontconfig version 2.8.0

FcCacheCopySet

Name

FcCacheCopySet -- Returns a copy of the fontset from cache

Synopsis

#include <fontconfig.h>


FcFontSet * FcCacheCopySet(const FcCache *cache);

Description

The returned fontset contains each of the font patterns from cache. This
fontset may be modified, but the patterns from the cache are read-only.

Version

Fontconfig version 2.8.0

FcCacheSubdir

Name

FcCacheSubdir -- Return the i'th subdirectory.

Synopsis

#include <fontconfig.h>


const FcChar8 * FcCacheSubdir(const FcCache *cache, inti);

Description

The set of subdirectories stored in a cache file are indexed by this function,
i should range from 0 to n-1, where n is the return value from
FcCacheNumSubdir.

Version

Fontconfig version 2.8.0

FcCacheNumSubdir

Name

FcCacheNumSubdir -- Return the number of subdirectories in cache.

Synopsis

#include <fontconfig.h>


int FcCacheNumSubdir(const FcCache *cache);

Description

This returns the total number of subdirectories in the cache.

Version

Fontconfig version 2.8.0

FcCacheNumFont

Name

FcCacheNumFont -- Returns the number of fonts in cache.

Synopsis

#include <fontconfig.h>


int FcCacheNumFont(const FcCache *cache);

Description

This returns the number of fonts which would be included in the return from
FcCacheCopySet.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

FcStrSet and FcStrList

Table of Contents
FcStrSetCreate -- create a string set
FcStrSetMember -- check set for membership
FcStrSetEqual -- check sets for equality
FcStrSetAdd -- add to a string set
FcStrSetAddFilename -- add a filename to a string set
FcStrSetDel -- delete from a string set
FcStrSetDestroy -- destroy a string set
FcStrListCreate -- create a string iterator
FcStrListNext -- get next string in iteration
FcStrListDone -- destroy a string iterator

A data structure for enumerating strings, used to list directories while
scanning the configuration as directories are added while scanning.

FcStrSetCreate

Name

FcStrSetCreate -- create a string set

Synopsis

#include <fontconfig.h>


FcStrSet * FcStrSetCreate(void);

Description

Create an empty set.

Version

Fontconfig version 2.8.0

FcStrSetMember

Name

FcStrSetMember -- check set for membership

Synopsis

#include <fontconfig.h>


FcBool FcStrSetMember(FcStrSet *set, const FcChar8 *s);

Description

Returns whether s is a member of set.

Version

Fontconfig version 2.8.0

FcStrSetEqual

Name

FcStrSetEqual -- check sets for equality

Synopsis

#include <fontconfig.h>


FcBool FcStrSetEqual(FcStrSet *set_a, FcStrSet *set_b);

Description

Returns whether set_a contains precisely the same strings as set_b. Ordering of
strings within the two sets is not considered.

Version

Fontconfig version 2.8.0

FcStrSetAdd

Name

FcStrSetAdd -- add to a string set

Synopsis

#include <fontconfig.h>


FcBool FcStrSetAdd(FcStrSet *set, const FcChar8 *s);

Description

Adds a copy of s to set.

Version

Fontconfig version 2.8.0

FcStrSetAddFilename

Name

FcStrSetAddFilename -- add a filename to a string set

Synopsis

#include <fontconfig.h>


FcBool FcStrSetAddFilename(FcStrSet *set, const FcChar8 *s);

Description

Adds a copy s to set, The copy is created with FcStrCopyFilename so that
leading '~' values are replaced with the value of the HOME environment
variable.

Version

Fontconfig version 2.8.0

FcStrSetDel

Name

FcStrSetDel -- delete from a string set

Synopsis

#include <fontconfig.h>


FcBool FcStrSetDel(FcStrSet *set, const FcChar8 *s);

Description

Removes s from set, returning FcTrue if s was a member else FcFalse.

Version

Fontconfig version 2.8.0

FcStrSetDestroy

Name

FcStrSetDestroy -- destroy a string set

Synopsis

#include <fontconfig.h>


void FcStrSetDestroy(FcStrSet *set);

Description

Destroys set.

Version

Fontconfig version 2.8.0

FcStrListCreate

Name

FcStrListCreate -- create a string iterator

Synopsis

#include <fontconfig.h>


FcStrList * FcStrListCreate(FcStrSet *set);

Description

Creates an iterator to list the strings in set.

Version

Fontconfig version 2.8.0

FcStrListNext

Name

FcStrListNext -- get next string in iteration

Synopsis

#include <fontconfig.h>


FcChar8 * FcStrListNext(FcStrList *list);

Description

Returns the next string in set.

Version

Fontconfig version 2.8.0

FcStrListDone

Name

FcStrListDone -- destroy a string iterator

Synopsis

#include <fontconfig.h>


void FcStrListDone(FcStrList *list);

Description

Destroys the enumerator list.

Version

Fontconfig version 2.8.0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

String utilities

Table of Contents
FcUtf8ToUcs4 -- convert UTF-8 to UCS4
FcUcs4ToUtf8 -- convert UCS4 to UTF-8
FcUtf8Len -- count UTF-8 encoded chars
FcUtf16ToUcs4 -- convert UTF-16 to UCS4
FcUtf16Len -- count UTF-16 encoded chars
FcIsLower -- check for lower case ASCII character
FcIsUpper -- check for upper case ASCII character
FcToLower -- convert upper case ASCII to lower case
FcStrCopy -- duplicate a string
FcStrDowncase -- create a lower case translation of a string
FcStrCopyFilename -- create a complete path from a filename
FcStrCmp -- compare UTF-8 strings
FcStrCmpIgnoreCase -- compare UTF-8 strings ignoring case
FcStrStr -- locate UTF-8 substring
FcStrStrIgnoreCase -- locate UTF-8 substring ignoring ASCII case
FcStrPlus -- concatenate two strings
FcStrFree -- free a string
FcStrDirname -- directory part of filename
FcStrBasename -- last component of filename

Fontconfig manipulates many UTF-8 strings represented with the FcChar8 type.
These functions are exposed to help applications deal with these UTF-8 strings
in a locale-insensitive manner.

FcUtf8ToUcs4

Name

FcUtf8ToUcs4 -- convert UTF-8 to UCS4

Synopsis

#include <fontconfig.h>


int FcUtf8ToUcs4(FcChar8 *src, FcChar32 *dst, int len);

Description

Converts the next Unicode char from src into dst and returns the number of
bytes containing the char. src must be at least len bytes long.

Version

Fontconfig version 2.8.0

FcUcs4ToUtf8

Name

FcUcs4ToUtf8 -- convert UCS4 to UTF-8

Synopsis

#include <fontconfig.h>


int FcUcs4ToUtf8(FcChar32 src, FcChar8 dst[FC_UTF8_MAX_LEN]);

Description

Converts the Unicode char from src into dst and returns the number of bytes
needed to encode the char.

Version

Fontconfig version 2.8.0

FcUtf8Len

Name

FcUtf8Len -- count UTF-8 encoded chars

Synopsis

#include <fontconfig.h>


FcBool FcUtf8Len(FcChar8 *src, int len, int *nchar, int *wchar);

Description

Counts the number of Unicode chars in len bytes of src. Places that count in
nchar. wchar contains 1, 2 or 4 depending on the number of bytes needed to hold
the largest unicode char counted. The return value indicates whether src is a
well-formed UTF8 string.

Version

Fontconfig version 2.8.0

FcUtf16ToUcs4

Name

FcUtf16ToUcs4 -- convert UTF-16 to UCS4

Synopsis

#include <fontconfig.h>


int FcUtf16ToUcs4(FcChar8 *src, FcEndian endian, FcChar32 *dst, int len);

Description

Converts the next Unicode char from src into dst and returns the number of
bytes containing the char. src must be at least len bytes long. Bytes of src
are combined into 16-bit units according to endian.

Version

Fontconfig version 2.8.0

FcUtf16Len

Name

FcUtf16Len -- count UTF-16 encoded chars

Synopsis

#include <fontconfig.h>


FcBool FcUtf16Len(FcChar8 *src, FcEndian endian, int len, int *nchar, int *
wchar);

Description

Counts the number of Unicode chars in len bytes of src. Bytes of src are
combined into 16-bit units according to endian. Places that count in nchar.
wchar contains 1, 2 or 4 depending on the number of bytes needed to hold the
largest unicode char counted. The return value indicates whether string is a
well-formed UTF16 string.

Version

Fontconfig version 2.8.0

FcIsLower

Name

FcIsLower -- check for lower case ASCII character

Synopsis

#include <fontconfig.h>


FcBool FcIsLower(FcChar8c);

Description

This macro checks whether c is an lower case ASCII letter.

Version

Fontconfig version 2.8.0

FcIsUpper

Name

FcIsUpper -- check for upper case ASCII character

Synopsis

#include <fontconfig.h>


FcBool FcIsUpper(FcChar8c);

Description

This macro checks whether c is a upper case ASCII letter.

Version

Fontconfig version 2.8.0

FcToLower

Name

FcToLower -- convert upper case ASCII to lower case

Synopsis

#include <fontconfig.h>


FcChar8 FcToLower(FcChar8c);

Description

This macro converts upper case ASCII c to the equivalent lower case letter.

Version

Fontconfig version 2.8.0

FcStrCopy

Name

FcStrCopy -- duplicate a string

Synopsis

#include <fontconfig.h>


FcChar8 * FcStrCopy(const FcChar8 *s);

Description

Allocates memory, copies s and returns the resulting buffer. Yes, this is
strdup, but that function isn't available on every platform.

Version

Fontconfig version 2.8.0

FcStrDowncase

Name

FcStrDowncase -- create a lower case translation of a string

Synopsis

#include <fontconfig.h>


FcChar8 * FcStrDowncase(const FcChar8 *s);

Description

Allocates memory, copies s, converting upper case letters to lower case and
returns the allocated buffer.

Version

Fontconfig version 2.8.0

FcStrCopyFilename

Name

FcStrCopyFilename -- create a complete path from a filename

Synopsis

#include <fontconfig.h>


FcChar8 * FcStrCopyFilename(const FcChar8 *s);

Description

FcStrCopyFilename constructs an absolute pathname from s. It converts any
leading '~' characters in to the value of the HOME environment variable, and
any relative paths are converted to absolute paths using the current working
directory. Sequences of '/' characters are converted to a single '/', and names
containing the current directory '.' or parent directory '..' are correctly
reconstructed. Returns NULL if '~' is the leading character and HOME is unset
or disabled (see FcConfigEnableHome).

Version

Fontconfig version 2.8.0

FcStrCmp

Name

FcStrCmp -- compare UTF-8 strings

Synopsis

#include <fontconfig.h>


int FcStrCmp(const FcChar8 *s1, const FcChar8 *s2);

Description

Returns the usual <0, 0, >0 result of comparing s1 and s2.

Version

Fontconfig version 2.8.0

FcStrCmpIgnoreCase

Name

FcStrCmpIgnoreCase -- compare UTF-8 strings ignoring case

Synopsis

#include <fontconfig.h>


int FcStrCmpIgnoreCase(const FcChar8 *s1, const FcChar8 *s2);

Description

Returns the usual <0, 0, >0 result of comparing s1 and s2. This test is
case-insensitive for all proper UTF-8 encoded strings.

Version

Fontconfig version 2.8.0

FcStrStr

Name

FcStrStr -- locate UTF-8 substring

Synopsis

#include <fontconfig.h>


FcChar8 * FcStrStr(const FcChar8 *s1, const FcChar8 *s2);

Description

Returns the location of s2 in s1. Returns NULL if s2 is not present in s1. This
test will operate properly with UTF8 encoded strings.

Version

Fontconfig version 2.8.0

FcStrStrIgnoreCase

Name

FcStrStrIgnoreCase -- locate UTF-8 substring ignoring ASCII case

Synopsis

#include <fontconfig.h>


FcChar8 * FcStrStrIgnoreCase(const FcChar8 *s1, const FcChar8 *s2);

Description

Returns the location of s2 in s1, ignoring case. Returns NULL if s2 is not
present in s1. This test is case-insensitive for all proper UTF-8 encoded
strings.

Version

Fontconfig version 2.8.0

FcStrPlus

Name

FcStrPlus -- concatenate two strings

Synopsis

#include <fontconfig.h>


FcChar8 * FcStrPlus(const FcChar8 *s1, const FcChar8 *s2);

Description

This function allocates new storage and places the concatenation of s1 and s2
there, returning the new string.

Version

Fontconfig version 2.8.0

FcStrFree

Name

FcStrFree -- free a string

Synopsis

#include <fontconfig.h>


void FcStrFree(FcChar8 *s);

Description

This is just a wrapper around free(3) which helps track memory usage of strings
within the fontconfig library.

Version

Fontconfig version 2.8.0

FcStrDirname

Name

FcStrDirname -- directory part of filename

Synopsis

#include <fontconfig.h>


FcChar8 * FcStrDirname(const FcChar8 *file);

Description

Returns the directory containing file. This is returned in newly allocated
storage which should be freed when no longer needed.

Version

Fontconfig version 2.8.0

FcStrBasename

Name

FcStrBasename -- last component of filename

Synopsis

#include <fontconfig.h>


FcChar8 * FcStrBasename(const FcChar8 *file);

Description

Returns the filename of file stripped of any leading directory names. This is
returned in newly allocated storage which should be freed when no longer
needed.

Version

Fontconfig version 2.8.0

@


1.3
log
@Update to fontconfig 2.8.0. Tested on a full ports build by naddy@@.
@
text
@@


1.2
log
@Update to fontconfig 2.6.0. ok naddy@@

this uses a patched version of libtool to fix linking on vax.
@
text
@d1 1
a1 1
Fontconfig Developers Reference, Version 2.6.0
d3 1
a3 1
Keith Packard
d5 73
a77 2
   HP Cambridge Research Lab
     __________________________________________________________
a78 390
   Table of Contents
   1. DESCRIPTION
   2. FUNCTIONAL OVERVIEW

        2.1. FONT CONFIGURATION
        2.2. FONT PROPERTIES

   3. Datatypes

        3.1. FcChar8, FcChar16, FcChar32, FcBool
        3.2. FcMatrix
        3.3. FcCharSet
        3.4. FcLangSet
        3.5. FcLangResult
        3.6. FcType
        3.7. FcValue
        3.8. FcPattern
        3.9. FcFontSet
        3.10. FcStrSet, FcStrList
        3.11. FcObjectSet
        3.12. FcObjectType
        3.13. FcConstant
        3.14. FcBlanks
        3.15. FcFileCache
        3.16. FcConfig
        3.17. FcSetName
        3.18. FcResult
        3.19. FcAtomic
        3.20. FcCache

   4. FUNCTIONS

        4.1. Initialization

              FcInitLoadConfig -- load configuration
              FcInitLoadConfigAndFonts -- load configuration and
                      font data

              FcInit -- initialize fontconfig library
              FcFini -- finalize fonconfig library
              FcGetVersion -- library version number
              FcInitReinitialize -- re-initialize library
              FcInitBringUptoDate -- reload configuration files if
                      needed

        4.2. FcPattern

              FcPatternCreate -- Create a pattern
              FcPatternDuplicate -- Copy a pattern
              FcPatternReference -- Increment pattern reference
                      count

              FcPatternDestroy -- Destroy a pattern
              FcPatternEqual -- Compare patterns
              FcPatternEqualSubset -- Compare portions of patterns
              FcPatternHash -- Compute a pattern hash value
              FcPatternAdd -- Add a value to a pattern
              FcPatternAddWeak -- Add a value to a pattern with
                      weak binding

              FcPatternAdd-Type -- Add a typed value to a pattern
              FcPatternGet -- Return a value from a pattern
              FcPatternGet-Type -- Return a typed value from a
                      pattern

              FcPatternBuild -- Create patterns from arguments
              FcPatternDel -- Delete a property from a pattern
              FcPatternRemove -- Remove one object of the
                      specified type from the pattern

              FcPatternPrint -- Print a pattern for debugging
              FcDefaultSubstitute -- Perform default substitutions
                      in a pattern

              FcNameParse -- Parse a pattern string
              FcNameUnparse -- Convert a pattern back into a
                      string that can be parsed

        4.3. FcFontSet

              FcFontSetCreate -- Create a font set
              FcFontSetDestroy -- Destroy a font set
              FcFontSetAdd -- Add to a font set
              FcFontSetList -- List fonts from a set of font sets
              FcFontSetMatch -- Return the best font from a set of
                      font sets

              FcFontSetPrint -- Print a set of patterns to stdout
              FcFontSetSort -- Add to a font set
              FcFontSetSortDestroy -- DEPRECATED destroy a font
                      set

        4.4. FcObjectSet

              FcObjectSetCreate -- Create an object set
              FcObjectSetAdd -- Add to an object set
              FcObjectSetDestroy -- Destroy an object set
              FcObjectSetBuild -- Build object set from args

        4.5. FreeType specific functions

              FcFreeTypeCharIndex -- map Unicode to glyph id
              FcFreeTypeCharSet -- compute unicode coverage
              FcFreeTypeCharSetAndSpacing -- compute unicode
                      coverage and spacing type

              FcFreeTypeQuery -- compute pattern from font file
                      (and index)

              FcFreeTypeQueryFace -- compute pattern from FT_Face

        4.6. FcValue

              FcValueDestroy -- Free a value
              FcValueSave -- Copy a value
              FcValuePrint -- Print a value to stdout
              FcValueEqual -- Test two values for equality

        4.7. FcCharSet

              FcCharSetCreate -- Create an empty character set
              FcCharSetDestroy -- Destroy a character set
              FcCharSetAddChar -- Add a character to a charset
              FcCharSetCopy -- Copy a charset
              FcCharSetEqual -- Compare two charsets
              FcCharSetIntersect -- Intersect charsets
              FcCharSetUnion -- Add charsets
              FcCharSetSubtract -- Subtract charsets
              FcCharSetHasChar -- Check a charset for a char
              FcCharSetCount -- Count entries in a charset
              FcCharSetIntersectCount -- Intersect and count
                      charsets

              FcCharSetSubtractCount -- Subtract and count
                      charsets

              FcCharSetIsSubset -- Test for charset inclusion
              FcCharSetFirstPage -- Start enumerating charset
                      contents

              FcCharSetNextPage -- Continue enumerating charset
                      contents

              FcCharSetCoverage -- DEPRECATED return coverage for
                      a Unicode page

              FcCharSetNew -- DEPRECATED alias for FcCharSetCreate

        4.8. FcLangSet

              FcLangSetCreate -- create a langset object
              FcLangSetDestroy -- destroy a langset object
              FcLangSetCopy -- copy a langset object
              FcLangSetAdd -- add a language to a langset
              FcLangSetCompare -- compare language sets
              FcLangSetContains -- check langset subset relation
              FcLangSetEqual -- test for matching langsets
              FcLangSetHash -- return a hash value for a langset
              FcLangSetHasLang -- test langset for language
                      support

              FcGetLangs -- Get list of languages
              FcLangGetCharSet -- Get character map for a language

        4.9. FcMatrix

              FcMatrixInit -- initialize an FcMatrix structure
              FcMatrixCopy -- Copy a matrix
              FcMatrixEqual -- Compare two matrices
              FcMatrixMultiply -- Multiply matrices
              FcMatrixRotate -- Rotate a matrix
              FcMatrixScale -- Scale a matrix
              FcMatrixShear -- Shear a matrix

        4.10. FcConfig

              FcConfigCreate -- Create a configuration
              FcConfigDestroy -- Destroy a configuration
              FcConfigSetCurrent -- Set configuration as default
              FcConfigGetCurrent -- Return current configuration
              FcConfigUptoDate -- Check timestamps on config files
              FcConfigHome -- return the current home directory.
              FcConfigEnableHome -- controls use of the home
                      directory.

              FcConfigBuildFonts -- Build font database
              FcConfigGetConfigDirs -- Get config directories
              FcConfigGetFontDirs -- Get font directories
              FcConfigGetConfigFiles -- Get config files
              FcConfigGetCache -- DEPRECATED used to return
                      per-user cache filename

              FcConfigGetCacheDirs -- return the list of
                      directories searched for cache files

              FcConfigGetFonts -- Get config font set
              FcConfigGetBlanks -- Get config blanks
              FcConfigGetRescanInterval -- Get config rescan
                      interval

              FcConfigSetRescanInterval -- Set config rescan
                      interval

              FcConfigAppFontAddFile -- Add font file to font
                      database

              FcConfigAppFontAddDir -- Add fonts from directory to
                      font database

              FcConfigAppFontClear -- Remove all app fonts from
                      font database

              FcConfigSubstituteWithPat -- Execute substitutions
              FcConfigSubstitute -- Execute substitutions
              FcFontMatch -- Return best font
              FcFontSort -- Return list of matching fonts
              FcFontRenderPrepare -- Prepare pattern for loading
                      font file

              FcFontList -- List fonts
              FcConfigFilename -- Find a config file
              FcConfigParseAndLoad -- load a configuration file

        4.11. FcObjectType

              FcNameRegisterObjectTypes -- Register object types
              FcNameUnregisterObjectTypes -- Unregister object
                      types

              FcNameGetObjectType -- Lookup an object type

        4.12. FcConstant

              FcNameRegisterConstants -- Register symbolic
                      constants

              FcNameUnregisterConstants -- Unregister symbolic
                      constants

              FcNameGetConstant -- Lookup symbolic constant
              FcNameConstant -- Get the value for a symbolic
                      constant

        4.13. FcBlanks

              FcBlanksCreate -- Create an FcBlanks
              FcBlanksDestroy -- Destroy and FcBlanks
              FcBlanksAdd -- Add a character to an FcBlanks
              FcBlanksIsMember -- Query membership in an FcBlanks

        4.14. FcAtomic

              FcAtomicCreate -- create an FcAtomic object
              FcAtomicLock -- lock a file
              FcAtomicNewFile -- return new temporary file name
              FcAtomicOrigFile -- return original file name
              FcAtomicReplaceOrig -- replace original with new
              FcAtomicDeleteNew -- delete new file
              FcAtomicUnlock -- unlock a file
              FcAtomicDestroy -- destroy an FcAtomic object

        4.15. File and Directory routines

              FcFileScan -- scan a font file
              FcFileIsDir -- check whether a file is a directory
              FcDirScan -- DEPRECATED: formerly used to scan a
                      font directory

              FcDirSave -- DEPRECATED: formerly used to save a
                      directory cache

              FcDirCacheUnlink -- Remove all caches related to dir
              FcDirCacheValid -- check directory cache
              FcDirCacheLoad -- load a directory cache
              FcDirCacheRead -- read or construct a directory
                      cache

              FcDirCacheLoadFile -- load a cache file
              FcDirCacheUnload -- unload a cache file

        4.16. FcCache routines

              FcCacheDir -- Return directory of cache
              FcCacheCopySet -- Returns a copy of the fontset from
                      cache

              FcCacheSubdir -- Return the i'th subdirectory.
              FcCacheNumSubdir -- Return the number of
                      subdirectories in cache.

              FcCacheNumFont -- Returns the number of fonts in
                      cache.

        4.17. FcStrSet and FcStrList

              FcStrSetCreate -- create a string set
              FcStrSetMember -- check set for membership
              FcStrSetEqual -- check sets for equality
              FcStrSetAdd -- add to a string set
              FcStrSetAddFilename -- add a filename to a string
                      set

              FcStrSetDel -- delete from a string set
              FcStrSetDestroy -- destroy a string set
              FcStrListCreate -- create a string iterator
              FcStrListNext -- get next string in iteration
              FcStrListDone -- destroy a string iterator

        4.18. String utilities

              FcUtf8ToUcs4 -- convert UTF-8 to UCS4
              FcUcs4ToUtf8 -- convert UCS4 to UTF-8
              FcUtf8Len -- count UTF-8 encoded chars
              FcUtf16ToUcs4 -- convert UTF-16 to UCS4
              FcUtf16Len -- count UTF-16 encoded chars
              FcIsLower -- check for lower case ASCII character
              FcIsUpper -- check for upper case ASCII character
              FcToLower -- convert upper case ASCII to lower case
              FcStrCopy -- duplicate a string
              FcStrDowncase -- create a lower case translation of
                      a string

              FcStrCopyFilename -- create a complete path from a
                      filename

              FcStrCmp -- compare UTF-8 strings
              FcStrCmpIgnoreCase -- compare UTF-8 strings ignoring
                      case

              FcStrStr -- locate UTF-8 substring
              FcStrStrIgnoreCase -- locate UTF-8 substring
                      ignoring ASCII case

              FcStrPlus -- concatenate two strings
              FcStrFree -- free a string
              FcStrDirname -- directory part of filename
              FcStrBasename -- last component of filename

1. DESCRIPTION

   Fontconfig is a library designed to provide system-wide font
   configuration, customization and application access.
     __________________________________________________________

2. FUNCTIONAL OVERVIEW

   Fontconfig contains two essential modules, the configuration
   module which builds an internal configuration from XML files
   and the matching module which accepts font patterns and returns
   the nearest matching font.
     __________________________________________________________

2.1. FONT CONFIGURATION

   The configuration module consists of the FcConfig datatype,
   libexpat and FcConfigParse which walks over an XML tree and
   ammends a configuration with data found within. From an
   external perspective, configuration of the library consists of
   generating a valid XML tree and feeding that to FcConfigParse.
   The only other mechanism provided to applications for changing
   the running configuration is to add fonts and directories to
   the list of application-provided font files.

   The intent is to make font configurations relatively static,
   and shared by as many applications as possible. It is hoped
   that this will lead to more stable font selection when passing
   names from one application to another. XML was chosen as a
   configuration file format because it provides a format which is
   easy for external agents to edit while retaining the correct
   structure and syntax.

   Font configuration is separate from font matching; applications
   needing to do their own matching can access the available fonts
   from the library and perform private matching. The intent is to
   permit applications to pick and choose appropriate
   functionality from the library instead of forcing them to
   choose between this library and a private configuration
   mechanism. The hope is that this will ensure that configuration
   of fonts for all applications can be centralized in one place.
   Centralizing font configuration will simplify and regularize
   font installation and customization.
     __________________________________________________________

2.2. FONT PROPERTIES

   While font patterns may contain essentially any properties,
   there are some well known properties with associated types.
   Fontconfig uses some of these properties for font matching and
   font completion. Others are provided as a convenience for the
   applications rendering mechanism.
d84 1
a84 2
    familylang     FC_FAMILYLANG        String  Language cooresponding t
o
d86 1
a86 2
    style          FC_STYLE             String  Font style. Overrides we
ight
d88 1
a88 2
    stylelang      FC_STYLELANG         String  Language cooresponding t
o
d90 2
a91 4
    fullname       FC_FULLNAME          String  Font face full name wher
e
                                                different from family an
d
d93 1
a93 2
    fullnamelang   FC_FULLNAMELANG      String  Language cooresponding t
o
d99 2
a100 4
    width          FC_WIDTH             Int     Condensed, normal or exp
anded
    aspect         FC_ASPECT            Double  Stretches glyphs horizon
tally
d103 1
a103 2
    spacing        FC_SPACING           Int     Proportional, dual-width
,
d108 1
a108 2
    hinting        FC_HINTING           Bool    Whether the rasterizer s
hould
d112 1
a112 2
    autohint       FC_AUTOHINT          Bool    Use autohinter instead o
f
d114 3
a116 6
    globaladvance  FC_GLOBAL_ADVANCE    Bool    Use font global advance
data
    file           FC_FILE              String  The filename holding the
 font
    index          FC_INDEX             Int     The index of the font wi
thin
d118 1
a118 2
    ftface         FC_FT_FACE           FT_Face Use the specified FreeTy
pe
d120 4
a123 8
    rasterizer     FC_RASTERIZER        String  Which rasterizer is in u
se
    outline        FC_OUTLINE           Bool    Whether the glyphs are o
utlines
    scalable       FC_SCALABLE          Bool    Whether glyphs can be sc
aled
    scale          FC_SCALE             Double  Scale factor for point->
pixel
d127 1
a127 2
                                                vbgr, none - subpixel ge
ometry
d129 1
a129 2
    minspace       FC_MINSPACE          Bool    Eliminate leading from l
ine
d134 3
a136 6
                                                languages this font supp
orts
    fontversion    FC_FONTVERSION       Int     Version number of the fo
nt
    capability     FC_CAPABILITY        String  List of layout capabilit
ies in
d139 25
a163 24
                                                synthetically embolden t
he font
     __________________________________________________________

3. Datatypes

   Fontconfig uses abstract datatypes to hide internal
   implementation details for most data structures. A few
   structures are exposed where appropriate.
     __________________________________________________________

3.1. FcChar8, FcChar16, FcChar32, FcBool

   These are primitive datatypes; the FcChar* types hold precisely
   the number of bits stated (if supported by the C
   implementation). FcBool holds one of two CPP symbols: FcFalse
   or FcTrue.
     __________________________________________________________

3.2. FcMatrix

   An FcMatrix holds an affine transformation, usually used to
   reshape glyphs. A small set of matrix operations are provided
   to manipulate these.
a166 1
     __________________________________________________________
a167 1
3.3. FcCharSet
d169 41
a209 37
   An FcCharSet is an abstract type that holds the set of encoded
   unicode chars in a font. Operations to build and compare these
   sets are provided.
     __________________________________________________________

3.4. FcLangSet

   An FcLangSet is an abstract type that holds the set of
   languages supported by a font. Operations to build and compare
   these sets are provided. These are computed for a font based on
   orthographic information built into the fontconfig library.
   Fontconfig has orthographies for all of the ISO 639-1 languages
   except for MS, NA, PA, PS, QU, RN, RW, SD, SG, SN, SU and ZA.
   If you have orthographic information for any of these
   languages, please submit them.
     __________________________________________________________

3.5. FcLangResult

   An FcLangResult is an enumeration used to return the results of
   comparing two language strings or FcLangSet objects.
   FcLangEqual means the objects match language and territory.
   FcLangDifferentTerritory means the objects match in language
   but differ in territory. FcLangDifferentLang means the objects
   differ in language.
     __________________________________________________________

3.6. FcType

   Tags the kind of data stored in an FcValue.
     __________________________________________________________

3.7. FcValue

   An FcValue object holds a single value with one of a number of
   different types. The 'type' tag indicates which member is
   valid.
d224 1
a237 1
     __________________________________________________________
a238 1
3.8. FcPattern
d240 11
a250 7
   holds a set of names with associated value lists; each name
   refers to a property of a font. FcPatterns are used as inputs
   to the matching code as well as holding information about
   specific fonts. Each property can hold one or more values;
   conventionally all of the same type, although the interface
   doesn't demand that.
     __________________________________________________________
d252 1
a252 1
3.9. FcFontSet
a259 17
   An FcFontSet contains a list of FcPatterns. Internally
   fontconfig uses this data structure to hold sets of fonts.
   Externally, fontconfig returns the results of listing fonts in
   this format. 'nfont' holds the number of patterns in the
   'fonts' array; 'sfont' is used to indicate the size of that
   array.
     __________________________________________________________

3.10. FcStrSet, FcStrList

   FcStrSet holds a list of strings that can be appended to and
   enumerated. Its unique characteristic is that the enumeration
   works even while strings are appended during enumeration.
   FcStrList is used during enumeration to safely and correctly
   walk the list of strings even while that list is edited in the
   middle of enumeration.
     __________________________________________________________
d261 18
a278 1
3.11. FcObjectSet
a285 4
   holds a set of names and is used to specify which fields from
   fonts are placed in the the list of returned patterns when
   listing fonts.
     __________________________________________________________
d287 6
a292 1
3.12. FcObjectType
a298 4
   marks the type of a pattern element generated when parsing font
   names. Applications can add new object types so that font names
   may contain the new elements.
     __________________________________________________________
d300 7
a306 1
3.13. FcConstant
a313 40
   Provides for symbolic constants for new pattern elements. When
   'name' is seen in a font name, an 'object' element is created
   with value 'value'.
     __________________________________________________________

3.14. FcBlanks

   holds a list of Unicode chars which are expected to be blank;
   unexpectedly blank chars are assumed to be invalid and are
   elided from the charset associated with the font.
     __________________________________________________________

3.15. FcFileCache

   holds the per-user cache information for use while loading the
   font database. This is built automatically for the current
   configuration when that is loaded. Applications must always
   pass '0' when one is requested.
     __________________________________________________________

3.16. FcConfig

   holds a complete configuration of the library; there is one
   default configuration, other can be constructed from XML data
   structures. All public entry points that need global data can
   take an optional FcConfig* argument; passing 0 uses the default
   configuration. FcConfig objects hold two sets of fonts, the
   first contains those specified by the configuration, the second
   set holds those added by the application at run-time.
   Interfaces that need to reference a particulat set use one of
   the FcSetName enumerated values.
     __________________________________________________________

3.17. FcSetName

   Specifies one of the two sets of fonts available in a
   configuration; FcSetSystem for those fonts specified in the
   configuration and FcSetApplication which holds fonts provided
   by the application.
     __________________________________________________________
d315 44
a358 1
3.18. FcResult
a359 2
   Used as a return type for functions manipulating FcPattern
   objects.
d365 1
a365 2
        FcResultTypeMismatch    Object exists, but the type doesn't matc
h
a368 1
     __________________________________________________________
a369 1
3.19. FcAtomic
d371 18
a388 30
   Used for locking access to config files. Provides a safe way to
   update configuration files.
     __________________________________________________________

3.20. FcCache

   Holds information about the fonts contained in a single
   directory. Normal applications need not worry about this as
   caches for font access are automatically managed by the
   library. Applications dealing with cache management may want to
   use some of these objects in their work, however the included
   'fc-cache' program generally suffices for all of that.
     __________________________________________________________

4. FUNCTIONS

   These are grouped by functionality, often using the main
   datatype being manipulated.
     __________________________________________________________

4.1. Initialization

   Table of Contents
   FcInitLoadConfig -- load configuration
   FcInitLoadConfigAndFonts -- load configuration and font data
   FcInit -- initialize fontconfig library
   FcFini -- finalize fonconfig library
   FcGetVersion -- library version number
   FcInitReinitialize -- re-initialize library
   FcInitBringUptoDate -- reload configuration files if needed
d390 19
a408 2
   These functions provide some control over how the library is
   initialized.
d414 1
a414 1
   FcInitLoadConfig -- load configuration
d420 2
a421 1
   FcConfig * FcInitLoadConfig(void);
d425 2
a426 2
   Loads the default configuration file and returns the resulting
   configuration. Does not load any font information.
d430 1
a430 1
   Fontconfig version 2.6.0
d436 1
a436 1
   FcInitLoadConfigAndFonts -- load configuration and font data
d442 2
a443 1
   FcConfig * FcInitLoadConfigAndFonts(void);
d447 2
a448 2
   Loads the default configuration file and builds information
   about the available fonts. Returns the resulting configuration.
d452 1
a452 1
   Fontconfig version 2.6.0
d458 1
a458 1
   FcInit -- initialize fontconfig library
d464 2
a465 1
   FcBool FcInit(void);
d469 4
a472 5
   Loads the default configuration file and the fonts referenced
   therein and sets the default configuration to that result.
   Returns whether this process succeeded or not. If the default
   configuration has already been loaded, this routine does
   nothing and returns FcTrue.
d476 1
a476 1
   Fontconfig version 2.6.0
d482 1
a482 1
   FcFini -- finalize fonconfig library
d488 2
a489 1
   void FcFini(void);
d493 3
a495 4
   Frees all data structures allocated by previous calls to
   fontconfig functions. Fontconfig returns to an uninitialized
   state, requiring a new call to one of the FcInit functions
   before any other fontconfig function may be called.
d499 1
a499 1
   Fontconfig version 2.6.0
d505 1
a505 1
   FcGetVersion -- library version number
d511 2
a512 1
   int FcGetVersion(void);
d516 1
a516 1
   Returns the version number of the library.
d520 1
a520 1
   Fontconfig version 2.6.0
d526 1
a526 1
   FcInitReinitialize -- re-initialize library
d532 2
a533 1
   FcBool FcInitReinitialize(void);
d537 4
a540 5
   Forces the default configuration file to be reloaded and resets
   the default configuration. Returns FcFalse if the configuration
   cannot be reloaded (due to config file errors, allocation
   failures or other issues) and leaves the existing configuration
   unchanged. Otherwise returns FcTrue.
d544 1
a544 1
   Fontconfig version 2.6.0
d550 1
a550 1
   FcInitBringUptoDate -- reload configuration files if needed
d556 2
a557 1
   FcBool FcInitBringUptoDate(void);
d561 4
a564 5
   Checks the rescan interval in the default configuration,
   checking the configuration if the interval has passed and
   reloading the configuration if when any changes are detected.
   Returns FcFalse if the configuration cannot be reloaded (see
   FcInitReinitialize). Otherwise returns FcTrue.
d568 1
a568 2
   Fontconfig version 2.6.0
     __________________________________________________________
d570 1
a570 1
4.2. FcPattern
d572 1
a572 17
   Table of Contents
   FcPatternCreate -- Create a pattern
   FcPatternDuplicate -- Copy a pattern
   FcPatternReference -- Increment pattern reference count
   FcPatternDestroy -- Destroy a pattern
   FcPatternEqual -- Compare patterns
   FcPatternEqualSubset -- Compare portions of patterns
   FcPatternHash -- Compute a pattern hash value
   FcPatternAdd -- Add a value to a pattern
   FcPatternAddWeak -- Add a value to a pattern with weak binding
   FcPatternAdd-Type -- Add a typed value to a pattern
   FcPatternGet -- Return a value from a pattern
   FcPatternGet-Type -- Return a typed value from a pattern
   FcPatternBuild -- Create patterns from arguments
   FcPatternDel -- Delete a property from a pattern
   FcPatternRemove -- Remove one object of the specified type from
          the pattern
d574 23
a596 3
   FcPatternPrint -- Print a pattern for debugging
   FcDefaultSubstitute -- Perform default substitutions in a
          pattern
d598 2
a599 7
   FcNameParse -- Parse a pattern string
   FcNameUnparse -- Convert a pattern back into a string that can
          be parsed

   An FcPattern is an opaque type that holds both patterns to
   match against the available fonts, as well as the information
   about each font.
d605 1
a605 1
   FcPatternCreate -- Create a pattern
d611 2
a612 1
   FcPattern * FcPatternCreate(void);
d616 1
a616 2
   Creates a pattern with no properties; used to build patterns
   from scratch.
d620 1
a620 1
   Fontconfig version 2.6.0
d626 1
a626 1
   FcPatternDuplicate -- Copy a pattern
d632 2
a633 1
   FcPattern * FcPatternDuplicate(FcPattern *p);
d637 2
a638 2
   Copy a pattern, returning a new pattern that matches p. Each
   pattern may be modified without affecting the other.
d642 1
a642 1
   Fontconfig version 2.6.0
d648 1
a648 1
   FcPatternReference -- Increment pattern reference count
d654 2
a655 1
   void FcPatternReference(FcPattern *p);
d659 2
a660 2
   Add another reference to p. Patterns are freed only when the
   reference count reaches zero.
d664 1
a664 1
   Fontconfig version 2.6.0
d670 1
a670 1
   FcPatternDestroy -- Destroy a pattern
d676 2
a677 1
   void FcPatternDestroy(FcPattern *p);
d681 2
a682 3
   Decrement the pattern reference count. If all references are
   gone, destroys the pattern, in the process destroying all
   related values.
d686 1
a686 1
   Fontconfig version 2.6.0
d692 1
a692 1
   FcPatternEqual -- Compare patterns
d698 2
a699 2
   FcBool FcPatternEqual(const FcPattern *pa, const FcPattern
   *pb);
d703 1
a703 1
   Returns whether pa and pb are exactly alike.
d707 1
a707 1
   Fontconfig version 2.6.0
d713 24
a736 1
   FcPatternEqualSubset -- Compare portions of patterns
d742 2
a743 2
   FcBool FcPatternEqualSubset(const FcPattern *pa, const
   FcPattern *pb, const FcObjectSet *os);
d747 2
a748 2
   Returns whether pa and pb have exactly the same values for all
   of the objects in os.
d752 1
a752 1
   Fontconfig version 2.6.0
d758 1
a758 1
   FcPatternHash -- Compute a pattern hash value
d764 2
a765 1
   FcChar32 FcPatternHash(const FcPattern *p);
d769 1
a769 2
   Returns a 32-bit number which is the same for any two patterns
   which are equal.
d773 1
a773 1
   Fontconfig version 2.6.0
d779 1
a779 1
   FcPatternAdd -- Add a value to a pattern
d785 3
a787 2
   FcBool FcPatternAdd(FcPattern *p, const char *object, FcValue
   value, FcBool append);
d791 5
a795 6
   Adds a single value to the list of values associated with the
   property named `object. If `append is FcTrue, the value is
   added at the end of any existing list, otherwise it is inserted
   at the begining. `value' is saved (with FcValueSave) when
   inserted into the pattern so that the library retains no
   reference to any application-supplied data structure.
d799 1
a799 1
   Fontconfig version 2.6.0
d805 1
a805 1
   FcPatternAddWeak -- Add a value to a pattern with weak binding
d811 3
a813 2
   FcBool FcPatternAddWeak(FcPattern *p, const char *object,
   FcValue value, FcBool append);
d817 2
a818 3
   FcPatternAddWeak is essentially the same as FcPatternAdd except
   that any values added to the list have binding weak instead of
   strong.
d822 1
a822 1
   Fontconfig version 2.6.0
d828 3
a830 4
   FcPatternAddInteger, FcPatternAddDouble, FcPatternAddString,
   FcPatternAddMatrix, FcPatternAddCharSet, FcPatternAddBool,
   FcPatternAddFTFace, FcPatternAddLangSet -- Add a typed value to
   a pattern
a835 2
   FcBool FcPatternAddInteger(FcPattern *p, const char *object,
   int i);
d837 3
a839 2
   FcBool FcPatternAddDouble(FcPattern *p, const char *object,
   double d);
d841 1
a841 2
   FcBool FcPatternAddString(FcPattern *p, const char *object,
   const FcChar8 *s);
d843 1
a843 2
   FcBool FcPatternAddMatrix(FcPattern *p, const char *object,
   const FcMatrix *m);
d845 2
a846 2
   FcBool FcPatternAddCharSet(FcPattern *p, const char *object,
   const FcCharSet *c);
d848 1
a848 2
   FcBool FcPatternAddBool(FcPattern *p, const char *object,
   FcBool b);
d850 1
a850 2
   FcBool FcPatternAddFTFace(FcPattern *p, const char *object,
   const FT_Facef);
d852 2
a853 2
   FcBool FcPatternAddLangSet(FcPattern *p, const char *object,
   const FcLangSet *l);
d857 4
a860 4
   These are all convenience functions that insert objects of the
   specified type into the pattern. Use these in preference to
   FcPatternAdd as they will provide compile-time typechecking.
   These all append values to any existing list of values.
d864 1
a864 1
   Fontconfig version 2.6.0
d870 1
a870 1
   FcPatternGet -- Return a value from a pattern
d876 2
a877 2
   FcResult FcPatternGet(FcPattern *p, const char *object, int id,
   FcValue *v);
d881 3
a883 4
   Returns in v the id'th value associated with the property
   object. The value returned is not a copy, but rather refers to
   the data stored within the pattern directly. Applications must
   not free this value.
d887 1
a887 1
   Fontconfig version 2.6.0
d893 3
a895 4
   FcPatternGetInteger, FcPatternGetDouble, FcPatternGetString,
   FcPatternGetMatrix, FcPatternGetCharSet, FcPatternGetBool,
   FcPatternGetFTFace, FcPatternGetLangSet -- Return a typed value
   from a pattern
a900 2
   FcResult FcPatternGetInteger(FcPattern *p, const char *object,
   int n, int *i);
d902 4
a905 2
   FcResult FcPatternGetDouble(FcPattern *p, const char *object,
   int n, double *d);
d907 2
a908 2
   FcResult FcPatternGetString(FcPattern *p, const char *object,
   int n, FcChar8 **s);
d910 2
a911 2
   FcResult FcPatternGetMatrix(FcPattern *p, const char *object,
   int n, FcMatrix **s);
d913 2
a914 2
   FcResult FcPatternGetCharSet(FcPattern *p, const char *object,
   int n, FcCharSet **c);
d916 1
a916 2
   FcResult FcPatternGetBool(FcPattern *p, const char *object, int
   n, FcBool *b);
d918 1
a918 2
   FcBool FcPatternGetFTFace(FcPattern *p, const char *object,
   const FT_Face *f);
d920 1
a920 2
   FcBool FcPatternGetLangSet(FcPattern *p, const char *object,
   const FcLangSet **l);
d924 5
a928 7
   These are convenience functions that call FcPatternGet and
   verify that the returned data is of the expected type. They
   return FcResultTypeMismatch if this is not the case. Note that
   these (like FcPatternGet) do not make a copy of any data
   structure referenced by the return value. Use these in
   preference to FcPatternGet to provide compile-time
   typechecking.
d932 1
a932 1
   Fontconfig version 2.6.0
d938 2
a939 2
   FcPatternBuild, FcPatternVaBuild, FcPatternVapBuild -- Create
   patterns from arguments
a944 1
   FcPattern * FcPatternBuild(FcPattern *orig, ...);
d946 3
a948 1
   FcPattern * FcPatternVaBuild(FcPattern *orig, va_list va);
d950 1
a950 2
   void FcPatternVapBuild(FcPattern *result, FcPattern *orig,
   va_list va);
d954 2
a955 3
   Builds a pattern using a list of objects, types and values.
   Each value to be entered in the pattern is specified with three
   arguments:
d957 1
a957 5
    1. Object name, a string describing the property to be added.
    2. Object type, one of the FcType enumerated values
    3. Value, not an FcValue, but the raw type as passed to any of
       the FcPatternAdd<type> functions. Must match the type of
       the second argument.
d959 1
a959 6
   The argument list is terminated by a null object name, no
   object type nor value need be passed for this. The values are
   added to `pattern', if `pattern' is null, a new pattern is
   created. In either case, the pattern is returned. Example
pattern = FcPatternBuild (0, FC_FAMILY, FcTypeString, "Times", (char *)
0);
d961 13
a973 4
   FcPatternVaBuild is used when the arguments are already in the
   form of a varargs value. FcPatternVapBuild is a macro version
   of FcPatternVaBuild which returns its result directly in the
   result variable.
d977 1
a977 1
   Fontconfig version 2.6.0
d983 1
a983 1
   FcPatternDel -- Delete a property from a pattern
d989 2
a990 1
   FcBool FcPatternDel(FcPattern *p, const char *object);
d994 2
a995 2
   Deletes all values associated with the property `object',
   returning whether the property existed or not.
d999 1
a999 1
   Fontconfig version 2.6.0
d1005 1
a1005 2
   FcPatternRemove -- Remove one object of the specified type from
   the pattern
d1011 2
a1012 2
   FcBool FcPatternRemove(FcPattern *p, const char *object, int
   id);
d1016 2
a1017 3
   Removes the value associated with the property `object' at
   position `id', returning whether the property existed and had a
   value at that position or not.
d1021 1
a1021 1
   Fontconfig version 2.6.0
d1027 1
a1027 1
   FcPatternPrint -- Print a pattern for debugging
d1033 2
a1034 1
   void FcPatternPrint(const FcPattern *p);
d1038 3
a1040 3
   Prints an easily readable version of the pattern to stdout.
   There is no provision for reparsing data in this format, it's
   just for diagnostics and debugging.
d1044 1
a1044 1
   Fontconfig version 2.6.0
d1050 1
a1050 2
   FcDefaultSubstitute -- Perform default substitutions in a
   pattern
d1056 2
a1057 1
   void FcDefaultSubstitute(FcPattern *pattern);
d1061 5
a1065 1
   Supplies default values for underspecified font patterns:
d1067 2
a1068 7
     * Patterns without a specified style or weight are set to
       Medium
     * Patterns without a specified style or slant are set to
       Roman
     * Patterns without a specified pixel size are given one
       computed from any specified point size (default 12), dpi
       (default 75) and scale (default 1).
d1072 1
a1072 1
   Fontconfig version 2.6.0
d1078 1
a1078 1
   FcNameParse -- Parse a pattern string
d1084 2
a1085 1
   FcPattern * FcNameParse(const FcChar8 *name);
d1089 1
a1089 2
   Converts name from the standard text format described above
   into a pattern.
d1093 1
a1093 1
   Fontconfig version 2.6.0
d1099 25
a1123 2
   FcNameUnparse -- Convert a pattern back into a string that can
   be parsed
d1129 2
a1130 1
   FcChar8 * FcNameUnparse(FcPattern *pat);
d1134 179
a1312 4
   Converts the given pattern into the standard text format
   described above. The return value is not static, but instead
   refers to newly allocated memory which should be freed by the
   caller.
d1316 3
a1318 2
   Fontconfig version 2.6.0
     __________________________________________________________
d1320 1
a1320 1
4.3. FcFontSet
d1322 9
a1330 9
   Table of Contents
   FcFontSetCreate -- Create a font set
   FcFontSetDestroy -- Destroy a font set
   FcFontSetAdd -- Add to a font set
   FcFontSetList -- List fonts from a set of font sets
   FcFontSetMatch -- Return the best font from a set of font sets
   FcFontSetPrint -- Print a set of patterns to stdout
   FcFontSetSort -- Add to a font set
   FcFontSetSortDestroy -- DEPRECATED destroy a font set
d1332 2
a1333 2
   An FcFontSet simply holds a list of patterns; these are used to
   return the results of listing available fonts.
d1339 1
a1339 1
   FcFontSetCreate -- Create a font set
d1345 2
a1346 1
   FcFontSet * FcFontSetCreate(void);
d1350 1
a1350 1
   Creates an empty font set.
d1354 1
a1354 1
   Fontconfig version 2.6.0
d1360 1
a1360 1
   FcFontSetDestroy -- Destroy a font set
d1366 2
a1367 1
   void FcFontSetDestroy(FcFontSet *s);
d1371 1
a1371 2
   Destroys a font set. Note that this destroys any referenced
   patterns as well.
d1375 1
a1375 1
   Fontconfig version 2.6.0
d1381 1
a1381 1
   FcFontSetAdd -- Add to a font set
d1387 2
a1388 1
   FcBool FcFontSetAdd(FcFontSet *s, FcPattern *font);
d1392 3
a1394 4
   Adds a pattern to a font set. Note that the pattern is not
   copied before being inserted into the set. Returns FcFalse if
   the pattern cannot be inserted into the set (due to allocation
   failure). Otherwise returns FcTrue.
d1398 1
a1398 1
   Fontconfig version 2.6.0
d1404 1
a1404 1
   FcFontSetList -- List fonts from a set of font sets
d1410 3
a1412 2
   FcFontSet * FcFontSetList(FcConfig *config, FcFontSet **sets,
   intnsets, FcPattern *pattern, FcObjectSet *object_set);
d1416 4
a1419 3
   Selects fonts matching pattern from sets, creates patterns from
   those fonts containing only the objects in object_set and
   returns the set of unique such patterns.
d1423 1
a1423 1
   Fontconfig version 2.6.0
d1429 1
a1429 1
   FcFontSetMatch -- Return the best font from a set of font sets
d1435 3
a1437 2
   FcPattern * FcFontSetMatch(FcConfig *config, FcFontSet **sets,
   intnsets, FcPattern *pattern, FcResult *result);
d1441 6
a1446 6
   Finds the font in sets most closely matching pattern and
   returns the result of FcFontRenderPrepare for that font and the
   provided pattern. This function should be called only after
   FcConfigSubstitute and FcDefaultSubstitute have been called for
   pattern; otherwise the results will not be correct. Returns
   NULL if an error occurs during this process.
d1450 1
a1450 1
   Fontconfig version 2.6.0
d1456 1
a1456 1
   FcFontSetPrint -- Print a set of patterns to stdout
d1462 2
a1463 1
   void FcFontSetPrint(FcFontSet *set);
d1467 3
a1469 4
   This function is useful for diagnosing font related issues,
   printing the complete contents of every pattern in set. The
   format of the output is designed to be of help to users and
   developers, and may change at any time.
d1473 1
a1473 1
   Fontconfig version 2.6.0
d1479 1
a1479 1
   FcFontSetSort -- Add to a font set
d1485 3
a1487 3
   FcFontSetSort(FcConfig *config, FcFontSet **sets, intnsets,
   FcPattern *pattern, FcBool trim, FcCharSet **csp, FcResult
   *result);
d1491 6
a1496 8
   Returns the list of fonts from sets sorted by closeness to
   pattern. If trim is FcTrue, elements in the list which don't
   include Unicode coverage not provided by earlier elements in
   the list are elided. The union of Unicode coverage of all of
   the fonts is returned in csp, if csp is not NULL. This function
   should be called only after FcConfigSubstitute and
   FcDefaultSubstitute have been called for p; otherwise the
   results will not be correct.
d1498 4
a1501 5
   The returned FcFontSet references FcPattern structures which
   may be shared by the return value from multiple FcFontSort
   calls, applications cannot modify these patterns. Instead, they
   should be passed, along with pattern to FcFontRenderPrepare
   which combines them into a complete pattern.
d1503 2
a1504 2
   The FcFontSet returned by FcFontSetSort is destroyed by caling
   FcFontSetDestroy.
d1508 1
a1508 1
   Fontconfig version 2.6.0
d1514 1
a1514 1
   FcFontSetSortDestroy -- DEPRECATED destroy a font set
d1520 2
a1521 1
   FcFontSetSortDestroy(FcFontSet *set);
d1525 2
a1526 3
   This function is DEPRECATED. FcFontSetSortDestroy destroys set
   by calling FcFontSetDestroy. Applications should use
   FcFontSetDestroy directly instead.
d1530 3
a1532 2
   Fontconfig version 2.6.0
     __________________________________________________________
d1534 1
a1534 1
4.4. FcObjectSet
d1536 5
a1540 5
   Table of Contents
   FcObjectSetCreate -- Create an object set
   FcObjectSetAdd -- Add to an object set
   FcObjectSetDestroy -- Destroy an object set
   FcObjectSetBuild -- Build object set from args
d1542 2
a1543 3
   An FcObjectSet holds a list of pattern property names; it is
   used to indiciate which properties are to be returned in the
   patterns from FcFontList.
d1549 1
a1549 1
   FcObjectSetCreate -- Create an object set
d1555 2
a1556 1
   FcObjectSet * FcObjectSetCreate(void);
d1560 1
a1560 1
   Creates an empty set.
d1564 1
a1564 1
   Fontconfig version 2.6.0
d1570 1
a1570 1
   FcObjectSetAdd -- Add to an object set
d1576 2
a1577 1
   FcBool FcObjectSetAdd(FcObjectSet *os, const char *object);
d1581 2
a1582 3
   Adds a proprety name to the set. Returns FcFalse if the
   property name cannot be inserted into the set (due to
   allocation failure). Otherwise returns FcTrue.
d1586 1
a1586 1
   Fontconfig version 2.6.0
d1592 1
a1592 1
   FcObjectSetDestroy -- Destroy an object set
d1598 2
a1599 1
   void FcObjectSetDestroy(FcObjectSet *os);
d1603 1
a1603 1
   Destroys an object set.
d1607 1
a1607 1
   Fontconfig version 2.6.0
d1613 2
a1614 2
   FcObjectSetBuild, FcObjectSetVaBuild,
   FcObjectSetVapBuild -- Build object set from args
a1619 1
   FcObjectSet * FcObjectSetBuild(const char *first, ...);
d1621 1
a1621 2
   FcObjectSet * FcObjectSetVaBuild(const char *first, va_list
   va);
d1623 3
a1625 2
   void FcObjectSetVapBuild(FcObjectSet *result, const char
   *first, va_list va);
d1629 3
a1631 4
   These build an object set from a null-terminated list of
   property names. FcObjectSetVapBuild is a macro version of
   FcObjectSetVaBuild which returns the result in the result
   variable directly.
d1635 1
a1635 2
   Fontconfig version 2.6.0
     __________________________________________________________
d1637 1
a1637 1
4.5. FreeType specific functions
d1639 1
a1639 5
   Table of Contents
   FcFreeTypeCharIndex -- map Unicode to glyph id
   FcFreeTypeCharSet -- compute unicode coverage
   FcFreeTypeCharSetAndSpacing -- compute unicode coverage and
          spacing type
d1641 6
a1646 2
   FcFreeTypeQuery -- compute pattern from font file (and index)
   FcFreeTypeQueryFace -- compute pattern from FT_Face
d1648 2
a1649 3
   While the fontconfig library doesn't insist that FreeType be
   used as the rasterization mechanism for fonts, it does provide
   some convenience functions.
d1655 1
a1655 1
   FcFreeTypeCharIndex -- map Unicode to glyph id
d1662 2
a1663 1
   FT_UInt FcFreeTypeCharIndex(FT_Face face, FcChar32 ucs4);
d1667 4
a1670 6
   Maps a Unicode char to a glyph index. This function uses
   information from several possible underlying encoding tables to
   work around broken fonts. As a result, this function isn't
   designed to be used in performance sensitive areas; results
   from this function are intended to be cached by higher level
   functions.
d1674 1
a1674 1
   Fontconfig version 2.6.0
d1680 1
a1680 1
   FcFreeTypeCharSet -- compute unicode coverage
d1687 2
a1688 1
   FcCharSet * FcFreeTypeCharSet(FT_Face face, FcBlanks *blanks);
d1692 4
a1695 5
   Scans a FreeType face and returns the set of encoded Unicode
   chars. This scans several encoding tables to build as complete
   a list as possible. If 'blanks' is not 0, the glyphs in the
   font are examined and any blank glyphs not in 'blanks' are not
   placed in the returned FcCharSet.
d1699 1
a1699 1
   Fontconfig version 2.6.0
d1705 1
a1705 2
   FcFreeTypeCharSetAndSpacing -- compute unicode coverage and
   spacing type
d1712 3
a1714 2
   FcCharSet * FcFreeTypeCharSetAndSpacing(FT_Face face, FcBlanks
   *blanks, int *spacing);
d1718 7
a1724 9
   Scans a FreeType face and returns the set of encoded Unicode
   chars. This scans several encoding tables to build as complete
   a list as possible. If 'blanks' is not 0, the glyphs in the
   font are examined and any blank glyphs not in 'blanks' are not
   placed in the returned FcCharSet. spacing receives the computed
   spacing type of the font, one of FC_MONO for a font where all
   glyphs have the same width, FC_DUAL, where the font has glyphs
   in precisely two widths, one twice as wide as the other, or
   FC_PROPORTIONAL where the font has glyphs of many widths.
d1728 1
a1728 1
   Fontconfig version 2.6.0
d1734 1
a1734 1
   FcFreeTypeQuery -- compute pattern from font file (and index)
d1741 3
a1743 2
   FcPattern * FcFreeTypeQuery(const FcChar8 *file, int id,
   FcBlanks *blanks, int *count);
d1747 2
a1748 2
   Constructs a pattern representing the 'id'th font in 'file'.
   The number of fonts in 'file' is returned in 'count'.
d1752 1
a1752 1
   Fontconfig version 2.6.0
d1758 1
a1758 1
   FcFreeTypeQueryFace -- compute pattern from FT_Face
d1765 3
a1767 2
   FcPattern * FcFreeTypeQueryFace(const FT_Face face, const
   FcChar8 *file, int id, FcBlanks *blanks);
d1771 2
a1772 3
   Constructs a pattern representing 'face'. 'file' and 'id' are
   used solely as data for pattern elements (FC_FILE, FC_INDEX and
   sometimes FC_FAMILY).
d1776 1
a1776 2
   Fontconfig version 2.6.0
     __________________________________________________________
d1778 1
a1778 1
4.6. FcValue
d1780 1
a1780 5
   Table of Contents
   FcValueDestroy -- Free a value
   FcValueSave -- Copy a value
   FcValuePrint -- Print a value to stdout
   FcValueEqual -- Test two values for equality
d1782 9
a1790 4
   FcValue is a structure containing a type tag and a union of all
   possible datatypes. The tag is an enum of type FcType and is
   intended to provide a measure of run-time typechecking,
   although that depends on careful programming.
d1796 1
a1796 1
   FcValueDestroy -- Free a value
d1802 2
a1803 1
   void FcValueDestroy(FcValue v);
d1807 2
a1808 3
   Frees any memory referenced by v. Values of type FcTypeString,
   FcTypeMatrix and FcTypeCharSet reference memory, the other
   types do not.
d1812 1
a1812 1
   Fontconfig version 2.6.0
d1818 1
a1818 1
   FcValueSave -- Copy a value
d1824 2
a1825 1
   FcValue FcValueSave(FcValue v);
d1829 2
a1830 2
   Returns a copy of v duplicating any object referenced by it so
   that v may be safely destroyed without harming the new value.
d1834 1
a1834 1
   Fontconfig version 2.6.0
d1840 1
a1840 1
   FcValuePrint -- Print a value to stdout
d1846 2
a1847 1
   void FcValuePrint(FcValue v);
d1851 2
a1852 3
   Prints a human-readable representation of v to stdout. The
   format should not be considered part of the library
   specification as it may change in the future.
d1856 1
a1856 1
   Fontconfig version 2.6.0
d1862 1
a1862 1
   FcValueEqual -- Test two values for equality
d1868 2
a1869 1
   FcBool FcValueEqual(FcValue v_a, FcValue v_b);
d1873 3
a1875 3
   Compares two values. Integers and Doubles are compared as
   numbers; otherwise the two values have to be the same type to
   be considered equal. Strings are compared ignoring case.
d1879 1
a1879 2
   Fontconfig version 2.6.0
     __________________________________________________________
d1881 1
a1881 1
4.7. FcCharSet
d1883 1
a1883 18
   Table of Contents
   FcCharSetCreate -- Create an empty character set
   FcCharSetDestroy -- Destroy a character set
   FcCharSetAddChar -- Add a character to a charset
   FcCharSetCopy -- Copy a charset
   FcCharSetEqual -- Compare two charsets
   FcCharSetIntersect -- Intersect charsets
   FcCharSetUnion -- Add charsets
   FcCharSetSubtract -- Subtract charsets
   FcCharSetHasChar -- Check a charset for a char
   FcCharSetCount -- Count entries in a charset
   FcCharSetIntersectCount -- Intersect and count charsets
   FcCharSetSubtractCount -- Subtract and count charsets
   FcCharSetIsSubset -- Test for charset inclusion
   FcCharSetFirstPage -- Start enumerating charset contents
   FcCharSetNextPage -- Continue enumerating charset contents
   FcCharSetCoverage -- DEPRECATED return coverage for a Unicode
          page
d1885 19
a1903 1
   FcCharSetNew -- DEPRECATED alias for FcCharSetCreate
d1905 5
a1909 6
   An FcCharSet is a boolean array indicating a set of unicode
   chars. Those associated with a font are marked constant and
   cannot be edited. FcCharSets may be reference counted
   internally to reduce memory consumption; this may be visible to
   applications as the result of FcCharSetCopy may return it's
   argument, and that CharSet may remain unmodifiable.
d1915 1
a1915 1
   FcCharSetCreate -- Create an empty character set
d1921 2
a1922 1
   FcCharSet * FcCharSetCreate(void);
d1926 1
a1926 2
   FcCharSetCreate allocates and initializes a new empty character
   set object.
d1930 1
a1930 1
   Fontconfig version 2.6.0
d1936 1
a1936 1
   FcCharSetDestroy -- Destroy a character set
d1942 2
a1943 1
   void FcCharSetDestroy(FcCharSet *fcs);
d1947 2
a1948 2
   FcCharSetDestroy decrements the reference count fcs. If the
   reference count becomes zero, all memory referenced is freed.
d1952 1
a1952 1
   Fontconfig version 2.6.0
d1958 1
a1958 1
   FcCharSetAddChar -- Add a character to a charset
d1964 2
a1965 1
   FcBool FcCharSetAddChar(FcCharSet *fcs, FcChar32 ucs4);
d1969 2
a1970 3
   FcCharSetAddChar adds a single unicode char to the set,
   returning FcFalse on failure, either as a result of a constant
   set or from running out of memory.
d1974 1
a1974 1
   Fontconfig version 2.6.0
d1980 1
a1980 1
   FcCharSetCopy -- Copy a charset
d1986 2
a1987 1
   FcCharSet * FcCharSetCopy(FcCharSet *src);
d1991 2
a1992 2
   Makes a copy of src; note that this may not actually do
   anything more than increment the reference count on src.
d1996 1
a1996 1
   Fontconfig version 2.6.0
d2002 1
a2002 1
   FcCharSetEqual -- Compare two charsets
d2008 2
a2009 1
   FcBool FcCharSetEqual(const FcCharSet *a, const FcCharSet *b);
d2013 1
a2013 1
   Returns whether a and b contain the same set of unicode chars.
d2017 1
a2017 1
   Fontconfig version 2.6.0
d2023 1
a2023 1
   FcCharSetIntersect -- Intersect charsets
d2029 2
a2030 2
   FcCharSet * FcCharSetIntersect(const FcCharSet *a, const
   FcCharSet *b);
d2034 1
a2034 1
   Returns a set including only those chars found in both a and b.
d2038 1
a2038 1
   Fontconfig version 2.6.0
d2044 1
a2044 1
   FcCharSetUnion -- Add charsets
d2050 2
a2051 2
   FcCharSet * FcCharSetUnion(const FcCharSet *a, const FcCharSet
   *b);
d2055 1
a2055 2
   Returns a set including only those chars found in either a or
   b.
d2059 1
a2059 1
   Fontconfig version 2.6.0
d2065 22
a2086 1
   FcCharSetSubtract -- Subtract charsets
d2092 2
a2093 2
   FcCharSet * FcCharSetSubtract(const FcCharSet *a, const
   FcCharSet *b);
d2097 4
a2100 1
   Returns a set including only those chars found in a but not b.
d2104 1
a2104 1
   Fontconfig version 2.6.0
d2110 1
a2110 1
   FcCharSetHasChar -- Check a charset for a char
d2116 2
a2117 1
   FcBool FcCharSetHasChar(const FcCharSet *fcs, FcChar32 ucs4);
d2121 1
a2121 1
   Returns whether fcs contains the char ucs4.
d2125 1
a2125 1
   Fontconfig version 2.6.0
d2131 1
a2131 1
   FcCharSetCount -- Count entries in a charset
d2137 2
a2138 1
   FcChar32 FcCharSetCount(const FcCharSet *a);
d2142 1
a2142 1
   Returns the total number of unicode chars in a.
d2146 1
a2146 1
   Fontconfig version 2.6.0
d2152 1
a2152 1
   FcCharSetIntersectCount -- Intersect and count charsets
d2158 2
a2159 2
   FcChar32 FcCharSetIntersectCount(const FcCharSet *a, const
   FcCharSet *b);
d2163 1
a2163 1
   Returns the number of chars that are in both a and b.
d2167 1
a2167 1
   Fontconfig version 2.6.0
d2173 1
a2173 1
   FcCharSetSubtractCount -- Subtract and count charsets
d2179 2
a2180 2
   FcChar32 FcCharSetSubtractCount(const FcCharSet *a, const
   FcCharSet *b);
d2184 1
a2184 1
   Returns the number of chars that are in a but not in b.
d2188 1
a2188 1
   Fontconfig version 2.6.0
d2194 1
a2194 1
   FcCharSetIsSubset -- Test for charset inclusion
d2200 2
a2201 2
   FcBool FcCharSetIsSubset(const FcCharSet *a, const FcCharSet
   *b);
d2205 1
a2205 1
   Returns whether a is a subset of b.
d2209 1
a2209 1
   Fontconfig version 2.6.0
d2215 1
a2215 1
   FcCharSetFirstPage -- Start enumerating charset contents
d2221 3
a2223 2
   FcChar32 FcCharSetFirstPage(const FcCharSet *a,
   FcChar32[FC_CHARSET_MAP_SIZE] map, FcChar32 *next);
d2227 2
a2228 3
   Builds an array of bits marking the first page of Unicode
   coverage of a. Returns the base of the array. next contains the
   next page in the font.
d2232 1
a2232 1
   Fontconfig version 2.6.0
d2238 1
a2238 1
   FcCharSetNextPage -- Continue enumerating charset contents
d2244 3
a2246 2
   FcChar32 FcCharSetNextPage(const FcCharSet *a,
   FcChar32[FC_CHARSET_MAP_SIZE] map, FcChar32 *next);
d2250 2
a2251 3
   Builds an array of bits marking the Unicode coverage of a for
   page *next. Returns the base of the array. next contains the
   next page in the font.
d2255 1
a2255 1
   Fontconfig version 2.6.0
d2261 1
a2261 2
   FcCharSetCoverage -- DEPRECATED return coverage for a Unicode
   page
d2267 3
a2269 2
   FcChar32 FcCharSetCoverage(const FcCharSet *a, FcChar32page,
   FcChar32[8]result);
d2273 3
a2275 4
   DEPRECATED This function returns a bitmask in result which
   indicates which code points in page are included in a.
   FcCharSetCoverage returns the next page in the charset which
   has any coverage.
d2279 1
a2279 1
   Fontconfig version 2.6.0
d2285 1
a2285 1
   FcCharSetNew -- DEPRECATED alias for FcCharSetCreate
d2291 2
a2292 1
   FcCharSet * FcCharSetNew(void);
d2296 1
a2296 1
   FcCharSetNew is a DEPRECATED alias for FcCharSetCreate.
d2300 3
a2302 2
   Fontconfig version 2.6.0
     __________________________________________________________
d2304 1
a2304 1
4.8. FcLangSet
d2306 13
a2318 12
   Table of Contents
   FcLangSetCreate -- create a langset object
   FcLangSetDestroy -- destroy a langset object
   FcLangSetCopy -- copy a langset object
   FcLangSetAdd -- add a language to a langset
   FcLangSetCompare -- compare language sets
   FcLangSetContains -- check langset subset relation
   FcLangSetEqual -- test for matching langsets
   FcLangSetHash -- return a hash value for a langset
   FcLangSetHasLang -- test langset for language support
   FcGetLangs -- Get list of languages
   FcLangGetCharSet -- Get character map for a language
d2320 5
a2324 6
   An FcLangSet is a set of language names (each of which include
   language and an optional territory). They are used when
   selecting fonts to indicate which languages the fonts need to
   support. Each font is marked, using language orthography
   information built into fontconfig, with the set of supported
   languages.
d2330 1
a2330 1
   FcLangSetCreate -- create a langset object
d2336 2
a2337 1
   FcLangSet * FcLangSetCreate(void);
d2341 1
a2341 1
   FcLangSetCreate creates a new FcLangSet object.
d2345 1
a2345 1
   Fontconfig version 2.6.0
d2351 1
a2351 1
   FcLangSetDestroy -- destroy a langset object
d2357 2
a2358 1
   void FcLangSetDestroy(FcLangSet *ls);
d2362 2
a2363 2
   FcLangSetDestroy destroys a FcLangSet object, freeing all
   memory associated with it.
d2367 1
a2367 1
   Fontconfig version 2.6.0
d2373 1
a2373 1
   FcLangSetCopy -- copy a langset object
d2379 2
a2380 1
   FcLangSet * FcLangSetCopy(const FcLangSet *ls);
d2384 2
a2385 2
   FcLangSetCopy creates a new FcLangSet object and populates it
   with the contents of ls.
d2389 1
a2389 1
   Fontconfig version 2.6.0
d2395 1
a2395 1
   FcLangSetAdd -- add a language to a langset
d2401 2
a2402 1
   FcBool FcLangSetAdd(FcLangSet *ls, const FcChar8 *lang);
d2406 2
a2407 3
   lang is added to ls. lang should be of the form Ll-Tt where Ll
   is a two or three letter language from ISO 639 and Tt is a
   territory from ISO 3166.
d2411 1
a2411 1
   Fontconfig version 2.6.0
d2417 1
a2417 1
   FcLangSetCompare -- compare language sets
d2423 2
a2424 2
   FcLangResult FcLangSetCompare(const FcLangSet *ls_a, const
   FcLangSet *ls_b);
d2428 5
a2432 6
   FcLangSetCompare compares language coverage for ls_a and ls_b.
   If they share any language and territory pair, this function
   returns FcLangEqual. If they share a language but differ in
   which territory that language is for, this function returns
   FcLangDiffentTerritory. If they share no languages in common,
   this function returns FcLangDifferentLang.
d2436 1
a2436 1
   Fontconfig version 2.6.0
d2442 1
a2442 1
   FcLangSetContains -- check langset subset relation
d2448 2
a2449 2
   FcBool FcLangSetContains(const FcLangSet *ls_a, const FcLangSet
   *ls_b);
d2453 3
a2455 4
   FcLangSetContains returns FcTrue if ls_a contains every
   language in ls_b. ls_a will 'contain' a language from ls_b if
   ls_a has exactly the language, or either the language or ls_a
   has no territory.
d2459 1
a2459 1
   Fontconfig version 2.6.0
d2465 1
a2465 1
   FcLangSetEqual -- test for matching langsets
d2471 2
a2472 2
   FcBool FcLangSetEqual(const FcLangSet *ls_a, const FcLangSet
   *ls_b);
d2476 2
a2477 2
   Returns FcTrue if and only if ls_a supports precisely the same
   language and territory combinations as ls_b.
d2481 1
a2481 1
   Fontconfig version 2.6.0
d2487 1
a2487 1
   FcLangSetHash -- return a hash value for a langset
d2493 2
a2494 1
   FcChar32 FcLangSetHash(const FcLangSet *ls);
d2498 3
a2500 4
   This function returns a value which depends solely on the
   languages supported by ls. Any language which equals ls will
   have the same result from FcLangSetHash. However, two langsets
   with the same hash value may not be equal.
d2504 1
a2504 1
   Fontconfig version 2.6.0
d2510 26
a2535 1
   FcLangSetHasLang -- test langset for language support
d2541 2
a2542 2
   FcLangResult FcLangSetHasLang(const FcLangSet *ls, const
   FcChar8 *lang);
d2546 1
a2546 6
   FcLangSetHasLang checks whether ls supports lang. If ls has a
   matching language and territory pair, this function returns
   FcLangEqual. If ls has a matching language but differs in which
   territory that language is for, this function returns
   FcLangDiffentTerritory. If ls has no matching language, this
   function returns FcLangDifferentLang.
d2550 1
a2550 1
   Fontconfig version 2.6.0
d2556 1
a2556 1
   FcGetLangs -- Get list of languages
d2562 2
a2563 1
   FcStrSet * FcGetLangs(void);
d2567 1
a2567 1
   Returns a string set of all known languages.
d2571 1
a2571 1
   Fontconfig version 2.6.0
d2577 1
a2577 1
   FcLangGetCharSet -- Get character map for a language
d2583 2
a2584 1
   const FcCharSet * FcLangGetCharSet(const FcChar8 *lang);
d2588 1
a2588 1
   Returns the FcCharMap for a language.
d2592 1
a2592 2
   Fontconfig version 2.6.0
     __________________________________________________________
d2594 1
a2594 1
4.9. FcMatrix
d2596 1
a2596 8
   Table of Contents
   FcMatrixInit -- initialize an FcMatrix structure
   FcMatrixCopy -- Copy a matrix
   FcMatrixEqual -- Compare two matrices
   FcMatrixMultiply -- Multiply matrices
   FcMatrixRotate -- Rotate a matrix
   FcMatrixScale -- Scale a matrix
   FcMatrixShear -- Shear a matrix
d2598 10
a2607 2
   FcMatrix structures hold an affine transformation in matrix
   form.
d2613 1
a2613 1
   FcMatrixInit -- initialize an FcMatrix structure
d2619 2
a2620 1
   void FcMatrixInit(FcMatrix *matrix);
d2624 1
a2624 1
   FcMatrixInit initializes matrix to the identity matrix.
d2628 1
a2628 1
   Fontconfig version 2.6.0
d2634 1
a2634 1
   FcMatrixCopy -- Copy a matrix
d2640 2
a2641 1
   void FcMatrixCopy(const FcMatrix *matrix);
d2645 1
a2645 1
   FcMatrixCopy allocates a new FcMatrix and copies mat into it.
d2649 1
a2649 1
   Fontconfig version 2.6.0
d2655 1
a2655 1
   FcMatrixEqual -- Compare two matrices
d2661 2
a2662 2
   void FcMatrixEqual(const FcMatrix *matrix1, const FcMatrix
   *matrix2);
d2666 2
a2667 2
   FcMatrixEqual compares matrix1 and matrix2 returning FcTrue
   when they are equal and FcFalse when they are not.
d2671 1
a2671 1
   Fontconfig version 2.6.0
d2677 1
a2677 1
   FcMatrixMultiply -- Multiply matrices
d2683 3
a2685 2
   void FcMatrixMultiply(FcMatrix *result, const FcMatrix
   *matrix1, const FcMatrix *matrix2);
d2689 1
a2689 2
   FcMatrixMultiply multiplies matrix1 and matrix2 storing the
   result in result.
d2693 1
a2693 1
   Fontconfig version 2.6.0
d2699 1
a2699 1
   FcMatrixRotate -- Rotate a matrix
d2705 2
a2706 1
   void FcMatrixRotate(FcMatrix *matrix, double cos, double sin);
d2710 3
a2712 2
   FcMatrixRotate rotates matrix by the angle who's sine is sin
   and cosine is cos. This is done by multiplying by the matrix:
d2718 1
a2718 1
   Fontconfig version 2.6.0
d2724 1
a2724 1
   FcMatrixScale -- Scale a matrix
d2730 2
a2731 1
   void FcMatrixScale(FcMatrix *matrix, double sx, double dy);
d2735 3
a2737 2
   FcMatrixScale multiplies matrix x values by sx and y values by
   sy. This is done by multiplying by the matrix:
d2743 1
a2743 1
   Fontconfig version 2.6.0
d2749 1
a2749 1
   FcMatrixShear -- Shear a matrix
d2755 2
a2756 1
   void FcMatrixShear(FcMatrix *matrix, double sh, double sv);
d2760 3
a2762 2
   FcMatrixShare shears matrix horizontally by sh and vertically
   by sv. This is done by multiplying by the matrix:
d2768 3
a2770 2
   Fontconfig version 2.6.0
     __________________________________________________________
d2772 1
a2772 1
4.10. FcConfig
d2774 34
a2807 40
   Table of Contents
   FcConfigCreate -- Create a configuration
   FcConfigDestroy -- Destroy a configuration
   FcConfigSetCurrent -- Set configuration as default
   FcConfigGetCurrent -- Return current configuration
   FcConfigUptoDate -- Check timestamps on config files
   FcConfigHome -- return the current home directory.
   FcConfigEnableHome -- controls use of the home directory.
   FcConfigBuildFonts -- Build font database
   FcConfigGetConfigDirs -- Get config directories
   FcConfigGetFontDirs -- Get font directories
   FcConfigGetConfigFiles -- Get config files
   FcConfigGetCache -- DEPRECATED used to return per-user cache
          filename

   FcConfigGetCacheDirs -- return the list of directories searched
          for cache files

   FcConfigGetFonts -- Get config font set
   FcConfigGetBlanks -- Get config blanks
   FcConfigGetRescanInterval -- Get config rescan interval
   FcConfigSetRescanInterval -- Set config rescan interval
   FcConfigAppFontAddFile -- Add font file to font database
   FcConfigAppFontAddDir -- Add fonts from directory to font
          database

   FcConfigAppFontClear -- Remove all app fonts from font database
   FcConfigSubstituteWithPat -- Execute substitutions
   FcConfigSubstitute -- Execute substitutions
   FcFontMatch -- Return best font
   FcFontSort -- Return list of matching fonts
   FcFontRenderPrepare -- Prepare pattern for loading font file
   FcFontList -- List fonts
   FcConfigFilename -- Find a config file
   FcConfigParseAndLoad -- load a configuration file

   An FcConfig object holds the internal representation of a
   configuration. There is a default configuration which
   applications may use by passing 0 to any function using the
   data within an FcConfig.
d2813 22
a2834 1
   FcConfigCreate -- Create a configuration
d2840 2
a2841 1
   FcConfig * FcConfigCreate(void);
d2845 5
a2849 1
   Creates an empty configuration.
d2853 1
a2853 1
   Fontconfig version 2.6.0
d2859 1
a2859 1
   FcConfigDestroy -- Destroy a configuration
d2865 2
a2866 1
   void FcConfigDestroy(FcConfig *config);
d2870 4
a2873 4
   Destroys a configuration and any data associated with it. Note
   that calling this function with the return from
   FcConfigGetCurrent will place the library in an indeterminate
   state.
d2877 1
a2877 1
   Fontconfig version 2.6.0
d2883 1
a2883 1
   FcConfigSetCurrent -- Set configuration as default
d2889 2
a2890 1
   FcBool FcConfigSetCurrent(FcConfig *config);
d2894 2
a2895 3
   Sets the current default configuration to config. Implicitly
   calls FcConfigBuildFonts if necessary, returning FcFalse if
   that call fails.
d2899 1
a2899 1
   Fontconfig version 2.6.0
d2905 1
a2905 1
   FcConfigGetCurrent -- Return current configuration
d2911 2
a2912 1
   FcConfig * FcConfigGetCurrent(void);
d2916 1
a2916 1
   Returns the current default configuration.
d2920 1
a2920 1
   Fontconfig version 2.6.0
d2926 1
a2926 1
   FcConfigUptoDate -- Check timestamps on config files
d2932 2
a2933 1
   FcBool FcConfigUptoDate(FcConfig *config);
d2937 3
a2939 3
   Checks all of the files related to config and returns whether
   any of them has been modified since the configuration was
   created.
d2943 1
a2943 1
   Fontconfig version 2.6.0
d2949 1
a2949 1
   FcConfigHome -- return the current home directory.
d2955 2
a2956 1
   FcBool FcConfigHome(void);
d2960 2
a2961 2
   Return the current user's home directory, if it is available,
   and if using it is enabled. See also FcConfigEnableHome).
d2965 1
a2965 1
   Fontconfig version 2.6.0
d2971 1
a2971 1
   FcConfigEnableHome -- controls use of the home directory.
d2977 2
a2978 1
   FcBol FcConfigEnableHome(FcBool enable);
d2982 4
a2985 6
   If enable is FcTrue, then Fontconfig will use various files
   which are specified relative to the user's home directory
   (using the ~ notation in the configuration). When enable is
   FcFalse, then all use of the home directory in these contexts
   will be disabled. The previous setting of the value is
   returned.
d2989 1
a2989 1
   Fontconfig version 2.6.0
d2995 1
a2995 1
   FcConfigBuildFonts -- Build font database
d3001 2
a3002 1
   FcBool FcConfigBuildFonts(FcConfig *config);
d3006 4
a3009 4
   Builds the set of available fonts for the given configuration.
   Note that any changes to the configuration after this call have
   indeterminate effects. Returns FcFalse if this operation runs
   out of memory.
d3013 1
a3013 1
   Fontconfig version 2.6.0
d3019 1
a3019 1
   FcConfigGetConfigDirs -- Get config directories
d3025 2
a3026 1
   FcStrList * FcConfigGetConfigDirs(FcConfig *config);
d3030 3
a3032 3
   Returns the list of font directories specified in the
   configuration files for config. Does not include any
   subdirectories.
d3036 1
a3036 1
   Fontconfig version 2.6.0
d3042 1
a3042 1
   FcConfigGetFontDirs -- Get font directories
d3048 2
a3049 1
   FcStrList * FcConfigGetFontDirs(FcConfig *config);
d3053 3
a3055 3
   Returns the list of font directories in config. This includes
   the configured font directories along with any directories
   below those in the filesystem.
d3059 1
a3059 1
   Fontconfig version 2.6.0
d3065 1
a3065 1
   FcConfigGetConfigFiles -- Get config files
d3071 2
a3072 1
   FcStrList * FcConfigGetConfigFiles(FcConfig *config);
d3076 2
a3077 2
   Returns the list of known configuration files used to generate
   config.
d3081 1
a3081 1
   Fontconfig version 2.6.0
d3087 1
a3087 2
   FcConfigGetCache -- DEPRECATED used to return per-user cache
   filename
d3093 2
a3094 1
   FcChar8 * FcConfigGetCache(FcConfig *config);
d3098 2
a3099 3
   With fontconfig no longer using per-user cache files, this
   function now simply returns NULL to indicate that no per-user
   file exists.
d3103 1
a3103 1
   Fontconfig version 2.6.0
d3109 1
a3109 2
   FcConfigGetCacheDirs -- return the list of directories searched
   for cache files
d3115 2
a3116 1
   FcStrList * FcConfigGetCacheDirs(FcConfig *config);
d3120 3
a3122 3
   FcConfigGetCacheDirs returns a string list containing all of
   the directories that fontconfig will search when attempting to
   load a cache file for a font directory.
d3126 1
a3126 1
   Fontconfig version 2.6.0
d3132 1
a3132 1
   FcConfigGetFonts -- Get config font set
d3138 2
a3139 1
   FcFontSet * FcConfigGetFonts(FcConfig *config, FcSetName set);
d3143 3
a3145 3
   Returns one of the two sets of fonts from the configuration as
   specified by set. This font set is owned by the library and
   must not be freed.
d3149 1
a3149 1
   Fontconfig version 2.6.0
d3155 1
a3155 1
   FcConfigGetBlanks -- Get config blanks
d3161 2
a3162 1
   FcBlanks * FcConfigGetBlanks(FcConfig *config);
d3166 4
a3169 3
   Returns the FcBlanks object associated with the given
   configuration, if no blanks were present in the configuration,
   this function will return 0.
d3173 1
a3173 1
   Fontconfig version 2.6.0
d3179 1
a3179 1
   FcConfigGetRescanInterval -- Get config rescan interval
d3185 2
a3186 1
   int FcConfigGetRescanInterval(FcConfig *config);
d3190 5
a3194 4
   Returns the interval between automatic checks of the
   configuration (in seconds) specified in config. The
   configuration is checked during a call to FcFontList when this
   interval has passed since the last check.
d3198 1
a3198 1
   Fontconfig version 2.6.0
d3204 1
a3204 1
   FcConfigSetRescanInterval -- Set config rescan interval
d3210 2
a3211 2
   FcBool FcConfigSetRescanInterval(FcConfig *config, int
   rescanInterval);
d3215 4
a3218 3
   Sets the rescan interval. Returns FcFalse if the interval
   cannot be set (due to allocation failure). Otherwise returns
   FcTrue.
d3222 1
a3222 1
   Fontconfig version 2.6.0
d3228 1
a3228 1
   FcConfigAppFontAddFile -- Add font file to font database
d3234 2
a3235 2
   FcBool FcConfigAppFontAddFile(FcConfig *config, const FcChar8
   *file);
d3239 3
a3241 3
   Adds an application-specific font to the configuration. Returns
   FcFalse if the fonts cannot be added (due to allocation
   failure). Otherwise returns FcTrue.
d3245 1
a3245 1
   Fontconfig version 2.6.0
d3251 1
a3251 2
   FcConfigAppFontAddDir -- Add fonts from directory to font
   database
d3257 2
a3258 2
   FcBool FcConfigAppFontAddDir(FcConfig *config, const FcChar8
   *dir);
d3262 4
a3265 4
   Scans the specified directory for fonts, adding each one found
   to the application-specific set of fonts. Returns FcFalse if
   the fonts cannot be added (due to allocation failure).
   Otherwise returns FcTrue.
d3269 1
a3269 1
   Fontconfig version 2.6.0
d3275 1
a3275 1
   FcConfigAppFontClear -- Remove all app fonts from font database
d3281 2
a3282 1
   void FcConfigAppFontClear(FcConfig *config);
d3286 2
a3287 1
   Clears the set of application-specific fonts.
d3291 1
a3291 1
   Fontconfig version 2.6.0
d3297 1
a3297 1
   FcConfigSubstituteWithPat -- Execute substitutions
d3303 3
a3305 2
   FcBool FcConfigSubstituteWithPat(FcConfig *config, FcPattern
   *p, FcPattern *p_pat, FcMatchKind kind);
d3309 6
a3314 7
   Performs the sequence of pattern modification operations, if
   kind is FcMatchPattern, then those tagged as pattern operations
   are applied, else if kind is FcMatchFont, those tagged as font
   operations are applied and p_pat is used for <test> elements
   with target=pattern. Returns FcFalse if the substitution cannot
   be performed (due to allocation failure). Otherwise returns
   FcTrue.
d3318 1
a3318 1
   Fontconfig version 2.6.0
d3324 1
a3324 1
   FcConfigSubstitute -- Execute substitutions
d3330 2
a3331 2
   FcBool FcConfigSubstitute(FcConfig *config, FcPattern *p,
   FcMatchKind kind);
d3335 3
a3337 3
   Calls FcConfigSubstituteWithPat setting p_pat to NULL. Returns
   FcFalse if the substitution cannot be performed (due to
   allocation failure). Otherwise returns FcTrue.
d3341 1
a3341 1
   Fontconfig version 2.6.0
d3347 1
a3347 1
   FcFontMatch -- Return best font
d3353 2
a3354 2
   FcPattern * FcFontMatch(FcConfig *config, FcPattern *p,
   FcResult *result);
d3358 5
a3362 5
   Finds the font in sets most closely matching pattern and
   returns the result of FcFontRenderPrepare for that font and the
   provided pattern. This function should be called only after
   FcConfigSubstitute and FcDefaultSubstitute have been called for
   p; otherwise the results will not be correct.
d3366 1
a3366 1
   Fontconfig version 2.6.0
d3372 1
a3372 1
   FcFontSort -- Return list of matching fonts
d3378 3
a3380 2
   FcFontSet * FcFontSort(FcConfig *config, FcPattern *p, FcBool
   trim, FcCharSet **csp, FcResult *result);
d3384 6
a3389 8
   Returns the list of fonts sorted by closeness to p. If trim is
   FcTrue, elements in the list which don't include Unicode
   coverage not provided by earlier elements in the list are
   elided. The union of Unicode coverage of all of the fonts is
   returned in csp, if csp is not NULL. This function should be
   called only after FcConfigSubstitute and FcDefaultSubstitute
   have been called for p; otherwise the results will not be
   correct.
d3391 4
a3394 5
   The returned FcFontSet references FcPattern structures which
   may be shared by the return value from multiple FcFontSort
   calls, applications must not modify these patterns. Instead,
   they should be passed, along with p to FcFontRenderPrepare
   which combines them into a complete pattern.
d3396 2
a3397 2
   The FcFontSet returned by FcFontSort is destroyed by caling
   FcFontSetDestroy.
d3401 1
a3401 1
   Fontconfig version 2.6.0
d3407 1
a3407 1
   FcFontRenderPrepare -- Prepare pattern for loading font file
d3413 3
a3415 2
   FcPattern * FcFontRenderPrepare(FcConfig *config, FcPattern
   *pat, FcPattern *font);
d3419 4
a3422 5
   Creates a new pattern consisting of elements of font not
   appearing in pat, elements of pat not appearing in font and the
   best matching value from pat for elements appearing in both.
   The result is passed to FcConfigSubstitute with kind
   FcMatchFont and then returned.
d3426 1
a3426 1
   Fontconfig version 2.6.0
d3432 1
a3432 1
   FcFontList -- List fonts
d3438 2
a3439 2
   FcFontSet * FcFontList(FcConfig *config, FcPattern *p,
   FcObjectSet *os);
d3443 3
a3445 3
   Selects fonts matching p, creates patterns from those fonts
   containing only the objects in os and returns the set of unique
   such patterns.
d3449 1
a3449 1
   Fontconfig version 2.6.0
d3455 1
a3455 1
   FcConfigFilename -- Find a config file
d3461 2
a3462 1
   FcChar8 * FcConfigFilename(const FcChar8 *name);
d3466 3
a3468 3
   Given the specified external entity name, return the associated
   filename. This provides applications a way to convert various
   configuration file references into filename form.
d3470 7
a3476 8
   A null or empty name indicates that the default configuration
   file should be used; which file this references can be
   overridden with the FC_CONFIG_FILE environment variable. Next,
   if the name starts with ~, it refers to a file in the current
   users home directory. Otherwise if the name doesn't start with
   '/', it refers to a file in the default configuration
   directory; the built-in default directory can be overridden
   with the FC_CONFIG_DIR environment variable.
d3480 1
a3480 1
   Fontconfig version 2.6.0
d3486 1
a3486 1
   FcConfigParseAndLoad -- load a configuration file
d3492 3
a3494 2
   FcBool FcConfigParseAndLoad(FcConfig *config, const FcChar8
   *file, FcBool complain);
d3498 6
a3503 8
   Walks the configuration in 'file' and constructs the internal
   representation in 'config'. Any include files referenced from
   within 'file' will be loaded and parsed. If 'complain' is
   FcFalse, no warning will be displayed if 'file' does not exist.
   Error and warning messages will be output to stderr. Returns
   FcFalse if some error occurred while loading the file, either a
   parse error, semantic error or allocation failure. Otherwise
   returns FcTrue.
d3507 3
a3509 2
   Fontconfig version 2.6.0
     __________________________________________________________
d3511 1
a3511 1
4.11. FcObjectType
d3513 4
a3516 4
   Table of Contents
   FcNameRegisterObjectTypes -- Register object types
   FcNameUnregisterObjectTypes -- Unregister object types
   FcNameGetObjectType -- Lookup an object type
d3518 2
a3519 2
   Provides for applcation-specified font name object types so
   that new pattern elements can be generated from font names.
d3525 1
a3525 1
   FcNameRegisterObjectTypes -- Register object types
d3531 2
a3532 2
   FcBool FcNameRegisterObjectTypes(const FcObjectType *types, int
   ntype);
d3536 2
a3537 3
   Register ntype new object types. Returns FcFalse if some of the
   names cannot be registered (due to allocation failure).
   Otherwise returns FcTrue.
d3541 1
a3541 1
   Fontconfig version 2.6.0
d3547 1
a3547 1
   FcNameUnregisterObjectTypes -- Unregister object types
d3553 2
a3554 2
   FcBool FcNameUnregisterObjectTypes(const FcObjectType *types,
   int ntype);
d3558 1
a3558 1
   Unregister ntype object types. Returns FcTrue.
d3562 1
a3562 1
   Fontconfig version 2.6.0
d3568 1
a3568 1
   FcNameGetObjectType -- Lookup an object type
d3574 2
a3575 1
   const FcObjectType * FcNameGetObjectType(const char *object);
d3579 1
a3579 1
   Return the object type for the pattern element named object.
d3583 1
a3583 2
   Fontconfig version 2.6.0
     __________________________________________________________
d3585 1
a3585 1
4.12. FcConstant
d3587 1
a3587 5
   Table of Contents
   FcNameRegisterConstants -- Register symbolic constants
   FcNameUnregisterConstants -- Unregister symbolic constants
   FcNameGetConstant -- Lookup symbolic constant
   FcNameConstant -- Get the value for a symbolic constant
d3589 7
a3595 2
   Provides for application-specified symbolic constants for font
   names.
d3601 1
a3601 1
   FcNameRegisterConstants -- Register symbolic constants
d3607 2
a3608 2
   FcBool FcNameRegisterConstants(const FcConstant *consts, int
   nconsts);
d3612 2
a3613 3
   Register nconsts new symbolic constants. Returns FcFalse if the
   constants cannot be registered (due to allocation failure).
   Otherwise returns FcTrue.
d3617 1
a3617 1
   Fontconfig version 2.6.0
d3623 1
a3623 1
   FcNameUnregisterConstants -- Unregister symbolic constants
d3629 2
a3630 2
   FcBool FcNameUnregisterConstants(const FcConstant *consts, int
   nconsts);
d3634 2
a3635 3
   Unregister nconsts symbolic constants. Returns FcFalse if the
   specified constants were not registered. Otherwise returns
   FcTrue.
d3639 1
a3639 1
   Fontconfig version 2.6.0
d3645 1
a3645 1
   FcNameGetConstant -- Lookup symbolic constant
d3651 2
a3652 1
   const FcConstant * FcNameGetConstant(FcChar8 *string);
d3656 1
a3656 2
   Return the FcConstant structure related to symbolic constant
   string.
d3660 1
a3660 1
   Fontconfig version 2.6.0
d3666 1
a3666 1
   FcNameConstant -- Get the value for a symbolic constant
d3672 2
a3673 1
   FcBool FcNameConstant(FcChar8 *string, int *result);
d3677 2
a3678 3
   Returns whether a symbolic constant with name string is
   registered, placing the value of the constant in result if
   present.
d3682 3
a3684 2
   Fontconfig version 2.6.0
     __________________________________________________________
d3686 1
a3686 1
4.13. FcBlanks
d3688 5
a3692 5
   Table of Contents
   FcBlanksCreate -- Create an FcBlanks
   FcBlanksDestroy -- Destroy and FcBlanks
   FcBlanksAdd -- Add a character to an FcBlanks
   FcBlanksIsMember -- Query membership in an FcBlanks
d3694 5
a3698 6
   An FcBlanks object holds a list of Unicode chars which are
   expected to be blank when drawn. When scanning new fonts, any
   glyphs which are empty and not in this list will be assumed to
   be broken and not placed in the FcCharSet associated with the
   font. This provides a significantly more accurate CharSet for
   applications.
d3704 1
a3704 1
   FcBlanksCreate -- Create an FcBlanks
d3710 2
a3711 1
   FcBlanks * FcBlanksCreate(void);
d3715 1
a3715 1
   Creates an empty FcBlanks object.
d3719 1
a3719 1
   Fontconfig version 2.6.0
d3725 1
a3725 1
   FcBlanksDestroy -- Destroy and FcBlanks
d3731 2
a3732 1
   void FcBlanksDestroy(FcBlanks *b);
d3736 1
a3736 1
   Destroys an FcBlanks object, freeing any associated memory.
d3740 1
a3740 1
   Fontconfig version 2.6.0
d3746 1
a3746 1
   FcBlanksAdd -- Add a character to an FcBlanks
d3752 2
a3753 1
   FcBool FcBlanksAdd(FcBlanks *b, FcChar32 ucs4);
d3757 2
a3758 2
   Adds a single character to an FcBlanks object, returning
   FcFalse if this process ran out of memory.
d3762 1
a3762 1
   Fontconfig version 2.6.0
d3768 1
a3768 1
   FcBlanksIsMember -- Query membership in an FcBlanks
d3774 2
a3775 1
   FcBool FcBlanksIsMember(FcBlanks *b, FcChar32 ucs4);
d3779 2
a3780 2
   Returns whether the specified FcBlanks object contains the
   indicated Unicode value.
d3784 3
a3786 2
   Fontconfig version 2.6.0
     __________________________________________________________
d3788 1
a3788 1
4.14. FcAtomic
d3790 9
a3798 9
   Table of Contents
   FcAtomicCreate -- create an FcAtomic object
   FcAtomicLock -- lock a file
   FcAtomicNewFile -- return new temporary file name
   FcAtomicOrigFile -- return original file name
   FcAtomicReplaceOrig -- replace original with new
   FcAtomicDeleteNew -- delete new file
   FcAtomicUnlock -- unlock a file
   FcAtomicDestroy -- destroy an FcAtomic object
d3800 3
a3802 4
   These functions provide a safe way to update config files,
   allowing ongoing reading of the old config file while locked
   for writing and ensuring that a consistent and complete version
   of the config file is always available.
d3808 1
a3808 1
   FcAtomicCreate -- create an FcAtomic object
d3814 2
a3815 1
   FcAtomic * FcAtomicCreate(const FcChar8 *file);
d3819 4
a3822 5
   Creates a data structure containing data needed to control
   access to file. Writing is done to a separate file. Once that
   file is complete, the original configuration file is atomically
   replaced so that reading process always see a consistent and
   complete file without the need to lock for reading.
d3826 1
a3826 1
   Fontconfig version 2.6.0
d3832 1
a3832 1
   FcAtomicLock -- lock a file
d3838 2
a3839 1
   FcBool FcAtomicLock(FcAtomic *atomic);
d3843 2
a3844 3
   Attempts to lock the file referenced by atomic. Returns FcFalse
   if the file is already locked, else returns FcTrue and leaves
   the file locked.
d3848 1
a3848 1
   Fontconfig version 2.6.0
d3854 1
a3854 1
   FcAtomicNewFile -- return new temporary file name
d3860 2
a3861 1
   FcChar8 * FcAtomicNewFile(FcAtomic *atomic);
d3865 2
a3866 2
   Returns the filename for writing a new version of the file
   referenced by atomic.
d3870 1
a3870 1
   Fontconfig version 2.6.0
d3876 1
a3876 1
   FcAtomicOrigFile -- return original file name
d3882 2
a3883 1
   FcChar8 * FcAtomicOrigFile(FcAtomic *atomic);
d3887 1
a3887 1
   Returns the file refernced by atomic.
d3891 1
a3891 1
   Fontconfig version 2.6.0
d3897 1
a3897 1
   FcAtomicReplaceOrig -- replace original with new
d3903 2
a3904 1
   FcBool FcAtomicReplaceOrig(FcAtomic *atomic);
d3908 3
a3910 3
   Replaces the original file referenced by atomic with the new
   file. Returns FcFalse if the file cannot be replaced due to
   permission issues in the filesystem. Otherwise returns FcTrue.
d3914 1
a3914 1
   Fontconfig version 2.6.0
d3920 1
a3920 1
   FcAtomicDeleteNew -- delete new file
d3926 2
a3927 1
   void FcAtomicDeleteNew(FcAtomic *atomic);
d3931 1
a3931 2
   Deletes the new file. Used in error recovery to back out
   changes.
d3935 1
a3935 1
   Fontconfig version 2.6.0
d3941 1
a3941 1
   FcAtomicUnlock -- unlock a file
d3947 2
a3948 1
   void FcAtomicUnlock(FcAtomic *atomic);
d3952 1
a3952 1
   Unlocks the file.
d3956 1
a3956 1
   Fontconfig version 2.6.0
d3962 1
a3962 1
   FcAtomicDestroy -- destroy an FcAtomic object
d3968 2
a3969 1
   void FcAtomicDestroy(FcAtomic *atomic);
d3973 1
a3973 1
   Destroys atomic.
d3977 1
a3977 2
   Fontconfig version 2.6.0
     __________________________________________________________
d3979 1
a3979 1
4.15. File and Directory routines
d3981 1
a3981 6
   Table of Contents
   FcFileScan -- scan a font file
   FcFileIsDir -- check whether a file is a directory
   FcDirScan -- DEPRECATED: formerly used to scan a font directory
   FcDirSave -- DEPRECATED: formerly used to save a directory
          cache
d3983 11
a3993 6
   FcDirCacheUnlink -- Remove all caches related to dir
   FcDirCacheValid -- check directory cache
   FcDirCacheLoad -- load a directory cache
   FcDirCacheRead -- read or construct a directory cache
   FcDirCacheLoadFile -- load a cache file
   FcDirCacheUnload -- unload a cache file
d3995 2
a3996 2
   These routines work with font files and directories, including
   font directory cache files.
d4002 1
a4002 1
   FcFileScan -- scan a font file
d4008 3
a4010 2
   FcBool FcFileScan(FcFontSet *set, FcStrSet *dirs, FcFileCache
   *cache, FcBlanks *blanks, const FcChar8 *file, FcBool force);
d4014 9
a4022 12
   Scans a single file and adds all fonts found to set. If force
   is FcTrue, then the file is scanned even if associated
   information is found in cache. If file is a directory, it is
   added to dirs. Whether fonts are found depends on fontconfig
   policy as well as the current configuration. Internally,
   fontconfig will ignore BDF and PCF fonts which are not in
   Unicode (or the effectively equivalent ISO Latin-1) encoding as
   those are not usable by Unicode-based applications. The
   configuration can ignore fonts based on filename or contents of
   the font file itself. Returns FcFalse if any of the fonts
   cannot be added (due to allocation failure). Otherwise returns
   FcTrue.
d4026 1
a4026 1
   Fontconfig version 2.6.0
d4032 1
a4032 1
   FcFileIsDir -- check whether a file is a directory
d4038 2
a4039 1
   FcBool FcFileIsDir(const FcChar8 *file);
d4043 1
a4043 2
   Returns FcTrue if file is a directory, otherwise returns
   FcFalse.
d4047 1
a4047 1
   Fontconfig version 2.6.0
d4053 1
a4053 1
   FcDirScan -- DEPRECATED: formerly used to scan a font directory
d4059 3
a4061 2
   FcBool FcDirScan(FcFontSet *set, FcStrSet *dirs, FcFileCache
   *cache, FcBlanks *blanks, const FcChar8 *dir, FcBool force);
d4065 4
a4068 6
   This function does nothing aside from returning FcFalse. It
   used to scan an entire directory and add all fonts found to
   set. If force was FcTrue, then the directory and all files
   within it were scanned even if information was present in the
   per-directory cache file or cache. Any subdirectories found
   were added to dirs.
d4072 1
a4072 1
   Fontconfig version 2.6.0
d4078 1
a4078 2
   FcDirSave -- DEPRECATED: formerly used to save a directory
   cache
d4084 2
a4085 2
   FcBool FcDirSave(FcFontSet *set, FcStrSet *dirs, const FcChar8
   *dir);
d4089 4
a4092 5
   This function now does nothing aside from returning FcFalse. It
   used to creates the per-directory cache file for dir and
   populates it with the fonts in set and subdirectories in dirs.
   All of this functionality is now automatically managed by
   FcDirCacheLoad and FcDirCacheRead.
d4096 1
a4096 1
   Fontconfig version 2.6.0
d4102 1
a4102 1
   FcDirCacheUnlink -- Remove all caches related to dir
d4108 2
a4109 1
   FcBool FcDirCacheUnlink(const FcChar8 *dir, FcConfig *config);
d4113 3
a4115 4
   Scans the cache directories in config, removing any instances
   of the cache file for dir. Returns FcFalse when some internal
   error occurs (out of memory, etc). Errors actually unlinking
   any files are ignored.
d4119 1
a4119 1
   Fontconfig version 2.6.0
d4125 1
a4125 1
   FcDirCacheValid -- check directory cache
d4131 2
a4132 1
   FcBool FcDirCacheValid(const FcChar8 *dir);
d4136 1
a4136 2
   Returns FcTrue if dir has an associated valid cache file, else
   returns FcFalse
d4140 1
a4140 1
   Fontconfig version 2.6.0
d4146 1
a4146 1
   FcDirCacheLoad -- load a directory cache
d4152 3
a4154 2
   FcCache * FcDirCacheLoad(const FcChar8 *dir, FcConfig *config,
   FcChar8 **cache_file);
d4158 3
a4160 3
   Loads the cache related to dir. If no cache file exists,
   returns NULL. The name of the cache file is returned in
   cache_file, unless that is NULL. See also FcDirCacheRead.
d4164 1
a4164 1
   Fontconfig version 2.6.0
d4170 1
a4170 1
   FcDirCacheRead -- read or construct a directory cache
d4176 2
a4177 2
   FcCache * FcDirCacheRead(const FcChar8 *dir, FcBool force,
   FcConfig *config);
d4181 3
a4183 3
   This returns a cache for dir. If force is FcFalse, then an
   existing, valid cache file will be used. Otherwise, a new cache
   will be created by scanning the directory and that returned.
d4187 1
a4187 1
   Fontconfig version 2.6.0
d4193 1
a4193 1
   FcDirCacheLoadFile -- load a cache file
d4199 3
a4201 2
   FcCache * FcDirCacheLoadFile(const FcChar8 *cache_file, struct
   stat *file_stat);
d4205 2
a4206 3
   This function loads a directory cache from cache_file. If
   file_stat is non-NULL, it will be filled with the results of
   stat(2) on the cache file.
d4210 1
a4210 1
   Fontconfig version 2.6.0
d4216 1
a4216 1
   FcDirCacheUnload -- unload a cache file
d4222 2
a4223 1
   void FcDirCacheUnload(FcCache *cache);
d4227 2
a4228 2
   This function dereferences cache. When no other references to
   it remain, all memory associated with the cache will be freed.
d4232 1
a4232 2
   Fontconfig version 2.6.0
     __________________________________________________________
d4234 1
a4234 1
4.16. FcCache routines
d4236 1
a4236 6
   Table of Contents
   FcCacheDir -- Return directory of cache
   FcCacheCopySet -- Returns a copy of the fontset from cache
   FcCacheSubdir -- Return the i'th subdirectory.
   FcCacheNumSubdir -- Return the number of subdirectories in
          cache.
d4238 6
a4243 1
   FcCacheNumFont -- Returns the number of fonts in cache.
d4245 3
a4247 3
   These routines work with font directory caches, accessing their
   contents in limited ways. It is not expected that normal
   applications will need to use these functions.
d4253 1
a4253 1
   FcCacheDir -- Return directory of cache
d4259 2
a4260 1
   const FcChar8 * FcCacheDir(const FcCache *cache);
d4264 1
a4264 2
   This function returns the directory from which the cache was
   constructed.
d4268 1
a4268 1
   Fontconfig version 2.6.0
d4274 1
a4274 1
   FcCacheCopySet -- Returns a copy of the fontset from cache
d4280 2
a4281 1
   FcFontSet * FcCacheCopySet(const FcCache *cache);
d4285 2
a4286 3
   The returned fontset contains each of the font patterns from
   cache. This fontset may be modified, but the patterns from the
   cache are read-only.
d4290 1
a4290 1
   Fontconfig version 2.6.0
d4296 1
a4296 1
   FcCacheSubdir -- Return the i'th subdirectory.
d4302 2
a4303 1
   const FcChar8 * FcCacheSubdir(const FcCache *cache, inti);
d4307 3
a4309 3
   The set of subdirectories stored in a cache file are indexed by
   this function, i should range from 0 to n-1, where n is the
   return value from FcCacheNumSubdir.
d4313 1
a4313 1
   Fontconfig version 2.6.0
d4319 1
a4319 2
   FcCacheNumSubdir -- Return the number of subdirectories in
   cache.
d4325 2
a4326 1
   int FcCacheNumSubdir(const FcCache *cache);
d4330 1
a4330 1
   This returns the total number of subdirectories in the cache.
d4334 1
a4334 1
   Fontconfig version 2.6.0
d4340 1
a4340 1
   FcCacheNumFont -- Returns the number of fonts in cache.
d4346 2
a4347 1
   int FcCacheNumFont(const FcCache *cache);
d4351 2
a4352 2
   This returns the number of fonts which would be included in the
   return from FcCacheCopySet.
d4356 3
a4358 2
   Fontconfig version 2.6.0
     __________________________________________________________
d4360 1
a4360 1
4.17. FcStrSet and FcStrList
d4362 11
a4372 11
   Table of Contents
   FcStrSetCreate -- create a string set
   FcStrSetMember -- check set for membership
   FcStrSetEqual -- check sets for equality
   FcStrSetAdd -- add to a string set
   FcStrSetAddFilename -- add a filename to a string set
   FcStrSetDel -- delete from a string set
   FcStrSetDestroy -- destroy a string set
   FcStrListCreate -- create a string iterator
   FcStrListNext -- get next string in iteration
   FcStrListDone -- destroy a string iterator
d4374 2
a4375 3
   A data structure for enumerating strings, used to list
   directories while scanning the configuration as directories are
   added while scanning.
d4381 1
a4381 1
   FcStrSetCreate -- create a string set
d4387 2
a4388 1
   FcStrSet * FcStrSetCreate(void);
d4392 1
a4392 1
   Create an empty set.
d4396 1
a4396 1
   Fontconfig version 2.6.0
d4402 1
a4402 1
   FcStrSetMember -- check set for membership
d4408 2
a4409 1
   FcBool FcStrSetMember(FcStrSet *set, const FcChar8 *s);
d4413 1
a4413 1
   Returns whether s is a member of set.
d4417 1
a4417 1
   Fontconfig version 2.6.0
d4423 1
a4423 1
   FcStrSetEqual -- check sets for equality
d4429 2
a4430 1
   FcBool FcStrSetEqual(FcStrSet *set_a, FcStrSet *set_b);
d4434 2
a4435 3
   Returns whether set_a contains precisely the same strings as
   set_b. Ordering of strings within the two sets is not
   considered.
d4439 1
a4439 1
   Fontconfig version 2.6.0
d4445 1
a4445 1
   FcStrSetAdd -- add to a string set
d4451 2
a4452 1
   FcBool FcStrSetAdd(FcStrSet *set, const FcChar8 *s);
d4456 1
a4456 1
   Adds a copy of s to set.
d4460 1
a4460 1
   Fontconfig version 2.6.0
d4466 1
a4466 1
   FcStrSetAddFilename -- add a filename to a string set
d4472 2
a4473 1
   FcBool FcStrSetAddFilename(FcStrSet *set, const FcChar8 *s);
d4477 3
a4479 3
   Adds a copy s to set, The copy is created with
   FcStrCopyFilename so that leading '~' values are replaced with
   the value of the HOME environment variable.
d4483 1
a4483 1
   Fontconfig version 2.6.0
d4489 1
a4489 1
   FcStrSetDel -- delete from a string set
d4495 2
a4496 1
   FcBool FcStrSetDel(FcStrSet *set, const FcChar8 *s);
d4500 1
a4500 2
   Removes s from set, returning FcTrue if s was a member else
   FcFalse.
d4504 1
a4504 1
   Fontconfig version 2.6.0
d4510 1
a4510 1
   FcStrSetDestroy -- destroy a string set
d4516 2
a4517 1
   void FcStrSetDestroy(FcStrSet *set);
d4521 1
a4521 1
   Destroys set.
d4525 1
a4525 1
   Fontconfig version 2.6.0
d4531 1
a4531 1
   FcStrListCreate -- create a string iterator
d4537 2
a4538 1
   FcStrList * FcStrListCreate(FcStrSet *set);
d4542 1
a4542 1
   Creates an iterator to list the strings in set.
d4546 1
a4546 1
   Fontconfig version 2.6.0
d4552 1
a4552 1
   FcStrListNext -- get next string in iteration
d4558 2
a4559 1
   FcChar8 * FcStrListNext(FcStrList *list);
d4563 1
a4563 1
   Returns the next string in set.
d4567 1
a4567 1
   Fontconfig version 2.6.0
d4573 1
a4573 1
   FcStrListDone -- destroy a string iterator
d4579 2
a4580 1
   void FcStrListDone(FcStrList *list);
d4584 1
a4584 1
   Destroys the enumerator list.
d4588 1
a4588 2
   Fontconfig version 2.6.0
     __________________________________________________________
d4590 1
a4590 1
4.18. String utilities
d4592 1
a4592 17
   Table of Contents
   FcUtf8ToUcs4 -- convert UTF-8 to UCS4
   FcUcs4ToUtf8 -- convert UCS4 to UTF-8
   FcUtf8Len -- count UTF-8 encoded chars
   FcUtf16ToUcs4 -- convert UTF-16 to UCS4
   FcUtf16Len -- count UTF-16 encoded chars
   FcIsLower -- check for lower case ASCII character
   FcIsUpper -- check for upper case ASCII character
   FcToLower -- convert upper case ASCII to lower case
   FcStrCopy -- duplicate a string
   FcStrDowncase -- create a lower case translation of a string
   FcStrCopyFilename -- create a complete path from a filename
   FcStrCmp -- compare UTF-8 strings
   FcStrCmpIgnoreCase -- compare UTF-8 strings ignoring case
   FcStrStr -- locate UTF-8 substring
   FcStrStrIgnoreCase -- locate UTF-8 substring ignoring ASCII
          case
d4594 20
a4613 4
   FcStrPlus -- concatenate two strings
   FcStrFree -- free a string
   FcStrDirname -- directory part of filename
   FcStrBasename -- last component of filename
d4615 3
a4617 3
   Fontconfig manipulates many UTF-8 strings represented with the
   FcChar8 type. These functions are exposed to help applications
   deal with these UTF-8 strings in a locale-insensitive manner.
d4623 1
a4623 1
   FcUtf8ToUcs4 -- convert UTF-8 to UCS4
d4629 2
a4630 1
   int FcUtf8ToUcs4(FcChar8 *src, FcChar32 *dst, int len);
d4634 2
a4635 3
   Converts the next Unicode char from src into dst and returns
   the number of bytes containing the char. src must be at least
   len bytes long.
d4639 1
a4639 1
   Fontconfig version 2.6.0
d4645 1
a4645 1
   FcUcs4ToUtf8 -- convert UCS4 to UTF-8
d4651 2
a4652 1
   int FcUcs4ToUtf8(FcChar32 src, FcChar8 dst[FC_UTF8_MAX_LEN]);
d4656 2
a4657 2
   Converts the Unicode char from src into dst and returns the
   number of bytes needed to encode the char.
d4661 1
a4661 1
   Fontconfig version 2.6.0
d4667 1
a4667 1
   FcUtf8Len -- count UTF-8 encoded chars
d4673 2
a4674 2
   FcBool FcUtf8Len(FcChar8 *src, int len, int *nchar, int
   *wchar);
d4678 4
a4681 5
   Counts the number of Unicode chars in len bytes of src. Places
   that count in nchar. wchar contains 1, 2 or 4 depending on the
   number of bytes needed to hold the largest unicode char
   counted. The return value indicates whether src is a
   well-formed UTF8 string.
d4685 1
a4685 1
   Fontconfig version 2.6.0
d4691 1
a4691 1
   FcUtf16ToUcs4 -- convert UTF-16 to UCS4
d4697 2
a4698 2
   int FcUtf16ToUcs4(FcChar8 *src, FcEndian endian, FcChar32 *dst,
   int len);
d4702 3
a4704 4
   Converts the next Unicode char from src into dst and returns
   the number of bytes containing the char. src must be at least
   len bytes long. Bytes of src are combined into 16-bit units
   according to endian.
d4708 1
a4708 1
   Fontconfig version 2.6.0
d4714 1
a4714 1
   FcUtf16Len -- count UTF-16 encoded chars
d4720 3
a4722 2
   FcBool FcUtf16Len(FcChar8 *src, FcEndian endian, int len, int
   *nchar, int *wchar);
d4726 5
a4730 6
   Counts the number of Unicode chars in len bytes of src. Bytes
   of src are combined into 16-bit units according to endian.
   Places that count in nchar. wchar contains 1, 2 or 4 depending
   on the number of bytes needed to hold the largest unicode char
   counted. The return value indicates whether string is a
   well-formed UTF16 string.
d4734 1
a4734 1
   Fontconfig version 2.6.0
d4740 1
a4740 1
   FcIsLower -- check for lower case ASCII character
d4746 2
a4747 1
   FcBool FcIsLower(FcChar8c);
d4751 1
a4751 1
   This macro checks whether c is an lower case ASCII letter.
d4755 1
a4755 1
   Fontconfig version 2.6.0
d4761 1
a4761 1
   FcIsUpper -- check for upper case ASCII character
d4767 2
a4768 1
   FcBool FcIsUpper(FcChar8c);
d4772 1
a4772 1
   This macro checks whether c is a upper case ASCII letter.
d4776 1
a4776 1
   Fontconfig version 2.6.0
d4782 1
a4782 1
   FcToLower -- convert upper case ASCII to lower case
d4788 2
a4789 1
   FcChar8 FcToLower(FcChar8c);
d4793 1
a4793 2
   This macro converts upper case ASCII c to the equivalent lower
   case letter.
d4797 1
a4797 1
   Fontconfig version 2.6.0
d4803 1
a4803 1
   FcStrCopy -- duplicate a string
d4809 2
a4810 1
   FcChar8 * FcStrCopy(const FcChar8 *s);
d4814 2
a4815 3
   Allocates memory, copies s and returns the resulting buffer.
   Yes, this is strdup, but that function isn't available on every
   platform.
d4819 1
a4819 1
   Fontconfig version 2.6.0
d4825 1
a4825 1
   FcStrDowncase -- create a lower case translation of a string
d4831 2
a4832 1
   FcChar8 * FcStrDowncase(const FcChar8 *s);
d4836 2
a4837 2
   Allocates memory, copies s, converting upper case letters to
   lower case and returns the allocated buffer.
d4841 1
a4841 1
   Fontconfig version 2.6.0
d4847 1
a4847 1
   FcStrCopyFilename -- create a complete path from a filename
d4853 2
a4854 1
   FcChar8 * FcStrCopyFilename(const FcChar8 *s);
d4858 7
a4864 9
   FcStrCopyFilename constructs an absolute pathname from s. It
   converts any leading '~' characters in to the value of the HOME
   environment variable, and any relative paths are converted to
   absolute paths using the current working directory. Sequences
   of '/' characters are converted to a single '/', and names
   containing the current directory '.' or parent directory '..'
   are correctly reconstructed. Returns NULL if '~' is the leading
   character and HOME is unset or disabled (see
   FcConfigEnableHome).
d4868 1
a4868 1
   Fontconfig version 2.6.0
d4874 1
a4874 1
   FcStrCmp -- compare UTF-8 strings
d4880 2
a4881 1
   int FcStrCmp(const FcChar8 *s1, const FcChar8 *s2);
d4885 1
a4885 1
   Returns the usual <0, 0, >0 result of comparing s1 and s2.
d4889 1
a4889 1
   Fontconfig version 2.6.0
d4895 1
a4895 1
   FcStrCmpIgnoreCase -- compare UTF-8 strings ignoring case
d4901 2
a4902 1
   int FcStrCmpIgnoreCase(const FcChar8 *s1, const FcChar8 *s2);
d4906 2
a4907 2
   Returns the usual <0, 0, >0 result of comparing s1 and s2. This
   test is case-insensitive for all proper UTF-8 encoded strings.
d4911 1
a4911 1
   Fontconfig version 2.6.0
d4917 1
a4917 1
   FcStrStr -- locate UTF-8 substring
d4923 2
a4924 1
   FcChar8 * FcStrStr(const FcChar8 *s1, const FcChar8 *s2);
d4928 2
a4929 3
   Returns the location of s2 in s1. Returns NULL if s2 is not
   present in s1. This test will operate properly with UTF8
   encoded strings.
d4933 1
a4933 1
   Fontconfig version 2.6.0
d4939 1
a4939 2
   FcStrStrIgnoreCase -- locate UTF-8 substring ignoring ASCII
   case
d4945 2
a4946 2
   FcChar8 * FcStrStrIgnoreCase(const FcChar8 *s1, const FcChar8
   *s2);
d4950 3
a4952 3
   Returns the location of s2 in s1, ignoring case. Returns NULL
   if s2 is not present in s1. This test is case-insensitive for
   all proper UTF-8 encoded strings.
d4956 1
a4956 1
   Fontconfig version 2.6.0
d4962 1
a4962 1
   FcStrPlus -- concatenate two strings
d4968 2
a4969 1
   FcChar8 * FcStrPlus(const FcChar8 *s1, const FcChar8 *s2);
d4973 2
a4974 2
   This function allocates new storage and places the
   concatenation of s1 and s2 there, returning the new string.
d4978 1
a4978 1
   Fontconfig version 2.6.0
d4984 1
a4984 1
   FcStrFree -- free a string
d4990 2
a4991 1
   void FcStrFree(FcChar8 *s);
d4995 2
a4996 2
   This is just a wrapper around free(3) which helps track memory
   usage of strings within the fontconfig library.
d5000 1
a5000 1
   Fontconfig version 2.6.0
d5006 1
a5006 1
   FcStrDirname -- directory part of filename
d5012 2
a5013 1
   FcChar8 * FcStrDirname(const FcChar8 *file);
d5017 2
a5018 3
   Returns the directory containing file. This is returned in
   newly allocated storage which should be freed when no longer
   needed.
d5022 1
a5022 1
   Fontconfig version 2.6.0
d5028 1
a5028 1
   FcStrBasename -- last component of filename
d5034 2
a5035 1
   FcChar8 * FcStrBasename(const FcChar8 *file);
d5039 3
a5041 3
   Returns the filename of file stripped of any leading directory
   names. This is returned in newly allocated storage which should
   be freed when no longer needed.
d5045 2
a5046 1
   Fontconfig version 2.6.0
@


1.1
log
@Initial revision
@
text
@d1 1
a1 2

Fontconfig Developers Reference, Version 2.4.1
d6 1
a6 1
     _________________________________________________________
d20 17
a36 14
        3.4. FcType
        3.5. FcValue
        3.6. FcPattern
        3.7. FcFontSet
        3.8. FcStrSet, FcStrList
        3.9. FcObjectSet
        3.10. FcObjectType
        3.11. FcConstant
        3.12. FcBlanks
        3.13. FcFileCache
        3.14. FcConfig
        3.15. FcSetName
        3.16. FcResult
        3.17. FcAtomic
d50 2
a51 2
              FcInitBringUptoDate -- reload configuration files
                      if needed
d56 4
d62 1
a62 3
              FcPatternEqualSubset -- Compare portions of
                      patterns

d79 2
a80 2
              FcDefaultSubstitute -- Perform default
                      substitutions in a pattern
d91 8
d111 7
a117 1
              FcFreeTypeQuery -- compute font file pattern
d123 2
d151 22
a172 1
        4.8. FcMatrix
d182 1
a182 1
        4.9. FcConfig
d188 4
a191 2
              FcConfigUptoDate -- Check timestamps on config
                      files
d197 6
a202 1
              FcConfigGetCache -- Get cache filename
d205 1
a205 1
              FcConfigGetRescanInverval -- Get config rescan
d208 1
a208 1
              FcConfigSetRescanInverval -- Set config rescan
d214 2
a215 2
              FcConfigAppFontAddDir -- Add fonts from directory
                      to font database
a229 2
              FcConfigNormalizeFontDir -- normalize a font
                      directory
d231 1
a231 1
        4.10. FcObjectType
d239 1
a239 1
        4.11. FcConstant
d251 1
a251 1
        4.12. FcBlanks
d258 1
a258 1
        4.13. FcAtomic
d269 1
a269 1
        4.14. File and Directory routines
d272 12
a283 3
              FcDirScan -- scan a font directory
              FcDirSave -- save a directory cache
              FcDirCacheValid -- check directory cache timestamp
d285 17
a301 1
        4.15. FcStrSet and FcStrList
d305 1
d316 1
a316 1
        4.16. String utilities
d323 3
d330 6
a335 3
              FcStrCopyFilename -- copy a string, expanding '~'
              FcStrCmpIgnoreCase -- compare UTF-8 strings
                      ignoring ASCII case
d341 2
d350 1
a350 1
     _________________________________________________________
d356 3
a358 3
   and the matching module which accepts font patterns and
   returns the nearest matching font.
     _________________________________________________________
d375 15
a389 15
   configuration file format because it provides a format which
   is easy for external agents to edit while retaining the
   correct structure and syntax.

   Font configuration is separate from font matching;
   applications needing to do their own matching can access the
   available fonts from the library and perform private matching.
   The intent is to permit applications to pick and choose
   appropriate functionality from the library instead of forcing
   them to choose between this library and a private
   configuration mechanism. The hope is that this will ensure
   that configuration of fonts for all applications can be
   centralized in one place. Centralizing font configuration will
   simplify and regularize font installation and customization.
     _________________________________________________________
d403 2
a404 2
    familylang     FC_FAMILYLANG        String  Language cooresponding
to
d406 2
a407 2
    style          FC_STYLE             String  Font style. Overrides w
eight
d409 2
a410 2
    stylelang      FC_STYLELANG         String  Language cooresponding
to
d412 4
a415 4
    fullname       FC_FULLNAME          String  Font face full name whe
re
                                                different from family a
nd
d417 2
a418 2
    fullnamelang   FC_FULLNAMELANG      String  Language cooresponding
to
d420 2
a421 4
    slant          FC_SLANT             Int     Italic, oblique or roma
n
    weight         FC_WEIGHT            Int     Light, medium, demibold
,
d424 4
a427 4
    width          FC_WIDTH             Int     Condensed, normal or ex
panded
    aspect         FC_ASPECT            Double  Stretches glyphs horizo
ntally
d430 2
a431 2
    spacing        FC_SPACING           Int     Proportional, dual-widt
h,
d436 2
a437 2
    hinting        FC_HINTING           Bool    Whether the rasterizer
should
d441 2
a442 2
    autohint       FC_AUTOHINT          Bool    Use autohinter instead
of
d445 5
a449 5
 data
    file           FC_FILE              String  The filename holding th
e font
    index          FC_INDEX             Int     The index of the font w
ithin
d451 2
a452 2
    ftface         FC_FT_FACE           FT_Face Use the specified FreeT
ype
d454 8
a461 8
    rasterizer     FC_RASTERIZER        String  Which rasterizer is in
use
    outline        FC_OUTLINE           Bool    Whether the glyphs are
outlines
    scalable       FC_SCALABLE          Bool    Whether glyphs can be s
caled
    scale          FC_SCALE             Double  Scale factor for point-
>pixel
d464 6
a469 6
    rgba           FC_RGBA              Int     unknown, rgb, bgr, vrgb
,
                                                vbgr, none - subpixel g
eometry
    minspace       FC_MINSPACE          Bool    Eliminate leading from
line
d471 1
a471 2
    charset        FC_CHARSET           CharSet Unicode chars encoded b
y
d473 7
a479 7
    lang           FC_LANG              String  List of RFC-3066-style
                                                languages this font sup
ports
    fontversion    FC_FONTVERSION       Int     Version number of the f
ont
    capability     FC_CAPABILITY        String  List of layout capabili
ties in
d482 3
a484 4
                                                synthetically embolden
the font

     _________________________________________________________
d491 1
a491 1
     _________________________________________________________
d495 2
a496 2
   These are primitive datatypes; the FcChar* types hold
   precisely the number of bits stated (if supported by the C
d499 1
a499 1
     _________________________________________________________
d509 1
a509 2

     _________________________________________________________
d516 1
a516 1
     _________________________________________________________
d518 23
a540 1
3.4. FcType
d543 1
a543 1
     _________________________________________________________
d545 1
a545 1
3.5. FcValue
d559 2
d571 1
a571 1
        FcTypeString    s               char *
d575 3
d579 1
a579 3
     _________________________________________________________

3.6. FcPattern
d587 1
a587 1
     _________________________________________________________
d589 1
a589 1
3.7. FcFontSet
a596 1

d603 1
a603 1
     _________________________________________________________
d605 1
a605 1
3.8. FcStrSet, FcStrList
d613 1
a613 1
     _________________________________________________________
d615 1
a615 1
3.9. FcObjectSet
a622 1

d626 1
a626 1
     _________________________________________________________
d628 1
a628 1
3.10. FcObjectType
d635 4
d640 1
a640 6
   marks the type of a pattern element generated when parsing
   font names. Applications can add new object types so that font
   names may contain the new elements.
     _________________________________________________________

3.11. FcConstant
a647 1

d651 1
a651 1
     _________________________________________________________
d653 1
a653 1
3.12. FcBlanks
d658 1
a658 1
     _________________________________________________________
d660 1
a660 1
3.13. FcFileCache
d666 1
a666 1
     _________________________________________________________
d668 1
a668 1
3.14. FcConfig
d673 7
a679 7
   take an optional FcConfig* argument; passing 0 uses the
   default configuration. FcConfig objects hold two sets of
   fonts, the first contains those specified by the
   configuration, the second set holds those added by the
   application at run-time. Interfaces that need to reference a
   particulat set use one of the FcSetName enumerated values.
     _________________________________________________________
d681 1
a681 1
3.15. FcSetName
d687 1
a687 1
     _________________________________________________________
d689 1
a689 1
3.16. FcResult
d698 2
a699 2
        FcResultTypeMismatch    Object exists, but the type doesn't mat
ch
d703 1
d705 1
a705 3
     _________________________________________________________

3.17. FcAtomic
d707 13
a719 3
   Used for locking access to config files. Provides a safe way
   to update configuration files.
     _________________________________________________________
d725 1
a725 1
     _________________________________________________________
d760 1
a760 1
   Fontconfig version 2.4.1
d777 1
a777 2
   about the available fonts. Returns the resulting
   configuration.
d781 1
a781 1
   Fontconfig version 2.4.1
d805 1
a805 1
   Fontconfig version 2.4.1
d828 1
a828 1
   Fontconfig version 2.4.1
d848 1
a848 1
   Fontconfig version 2.4.1
d864 5
a868 2
   Forces the default configuration file to be reloaded and
   resets the default configuration.
d872 1
a872 1
   Fontconfig version 2.4.1
d891 2
d896 2
a897 2
   Fontconfig version 2.4.1
     _________________________________________________________
d903 2
d916 2
a917 2
   FcPatternRemove -- Remove one object of the specified type
          from the pattern
d950 43
a992 1
   Fontconfig version 2.4.1
d1008 3
a1010 2
   Destroys a pattern, in the process destroying all related
   values.
d1014 1
a1014 1
   Fontconfig version 2.4.1
d1035 1
a1035 1
   Fontconfig version 2.4.1
d1057 1
a1057 1
   Fontconfig version 2.4.1
d1078 1
a1078 1
   Fontconfig version 2.4.1
d1090 2
a1091 2
   FcBool FcPatternAdd(FcPattern *p, const char *object,
   FcValuevalue, FcBoolappend);
d1097 3
a1099 3
   added at the end of any existing list, otherwise it is
   inserted at the begining. `value' is saved (with FcValueSave)
   when inserted into the pattern so that the library retains no
d1104 1
a1104 1
   Fontconfig version 2.4.1
d1117 1
a1117 1
   FcValuevalue, FcBoolappend);
d1121 3
a1123 3
   FcPatternAddWeak is essentially the same as FcPatternAdd
   except that any values added to the list have binding weak
   instead of strong.
d1127 1
a1127 1
   Fontconfig version 2.4.1
d1134 3
a1136 2
   FcPatternAddMatrix, FcPatternAddCharSet,
   FcPatternAddBool -- Add a typed value to a pattern
d1143 1
a1143 1
   inti);
d1146 1
a1146 1
   doubled);
d1149 1
a1149 1
   const char *s);
d1158 7
a1164 1
   FcBoolb);
d1175 1
a1175 1
   Fontconfig version 2.4.1
d1187 1
a1187 1
   FcResult FcPatternGet(FcPattern *p, const char *object, intid,
d1199 1
a1199 1
   Fontconfig version 2.4.1
d1206 3
a1208 2
   FcPatternGetMatrix, FcPatternGetCharSet,
   FcPatternGetBool -- Return a typed value from a pattern
d1215 1
a1215 1
   intn, int *i);
d1218 1
a1218 1
   intn, double *d);
d1221 1
a1221 1
   intn, char **consts);
d1224 1
a1224 1
   intn, FcMatrix **s);
d1227 1
a1227 1
   intn, FcCharSet **c);
d1229 8
a1236 2
   FcResult FcPatternGetBool(FcPattern *p, const char *object,
   intn, FcBool *b);
d1250 1
a1250 1
   Fontconfig version 2.4.1
d1256 2
a1257 2
   FcPatternBuild, FcPatternVaBuild -- Create patterns from
   arguments
d1265 4
a1268 1
   FcPattern * FcPatternVaBuild(FcPattern *orig, va_listva);
d1273 2
a1274 2
   Each value to be entered in the pattern is specified with
   three arguments:
d1278 3
a1280 3
    3. Value, not an FcValue, but the raw type as passed to any
       of the FcPatternAdd<type> functions. Must match the type
       of the second argument.
d1287 1
a1287 1
 0);
d1290 3
a1292 1
   form of a varargs value.
d1296 1
a1296 1
   Fontconfig version 2.4.1
d1317 1
a1317 1
   Fontconfig version 2.4.1
d1323 2
a1324 2
   FcPatternRemove -- Remove one object of the specified type
   from the pattern
d1330 2
a1331 2
   FcBool FcPatternRemove(FcPattern *p, const char *object,
   intid);
d1336 2
a1337 2
   position `id', returning whether the property existed and had
   a value at that position or not.
d1341 1
a1341 1
   Fontconfig version 2.4.1
d1363 1
a1363 1
   Fontconfig version 2.4.1
d1392 1
a1392 1
   Fontconfig version 2.4.1
d1404 1
a1404 1
   FcPattern * FcNameParse(const char *name);
d1413 1
a1413 1
   Fontconfig version 2.4.1
d1437 2
a1438 2
   Fontconfig version 2.4.1
     _________________________________________________________
d1446 5
d1452 2
a1453 2
   An FcFontSet simply holds a list of patterns; these are used
   to return the results of listing available fonts.
d1473 1
a1473 1
   Fontconfig version 2.4.1
d1494 1
a1494 1
   Fontconfig version 2.4.1
d1511 135
a1645 1
   copied before being inserted into the set.
d1649 2
a1650 2
   Fontconfig version 2.4.1
     _________________________________________________________
d1682 1
a1682 1
   Fontconfig version 2.4.1
d1698 3
a1700 1
   Adds a proprety name to the set.
d1704 1
a1704 1
   Fontconfig version 2.4.1
d1724 1
a1724 1
   Fontconfig version 2.4.1
d1730 2
a1731 2
   FcObjectSetBuild, FcObjectSetVaBuild -- Build object set from
   args
d1739 5
a1743 2
   FcObjectSet * FcObjectSetVaBuild(const char *first,
   va_listva);
d1748 3
a1750 1
   property names.
d1754 2
a1755 2
   Fontconfig version 2.4.1
     _________________________________________________________
d1762 5
a1766 1
   FcFreeTypeQuery -- compute font file pattern
d1783 1
a1783 1
   FT_UInt FcFreeTypeCharIndex(FT_Faceface, FcChar32ucs4);
d1788 2
a1789 2
   information from several possible underlying encoding tables
   to work around broken fonts. As a result, this function isn't
d1796 1
a1796 1
   Fontconfig version 2.4.1
d1809 1
a1809 1
   FcCharSet * FcFreeTypeCharSet(FT_Faceface, FcBlanks *blanks);
d1821 32
a1852 1
   Fontconfig version 2.4.1
d1858 1
a1858 1
   FcFreeTypeQuery -- compute font file pattern
d1865 2
a1866 2
   FcPattern * FcFreeTypeQuery(const char *file, intid, FcBlanks
   *blanks, int *count);
d1875 26
a1900 2
   Fontconfig version 2.4.1
     _________________________________________________________
d1907 2
d1910 3
a1912 3
   FcValue is a structure containing a type tag and a union of
   all possible datatypes. The tag is an enum of type FcType and
   is intended to provide a measure of run-time typechecking,
d1925 1
a1925 1
   void FcValueDestroy(FcValuev);
d1935 1
a1935 1
   Fontconfig version 2.4.1
d1947 1
a1947 1
   FcValue FcValueSave(FcValuev);
d1956 46
a2001 2
   Fontconfig version 2.4.1
     _________________________________________________________
d2021 4
d2029 2
a2030 2
   internally to reduce memory consumption; this may be visible
   to applications as the result of FcCharSetCopy may return it's
d2047 2
a2048 2
   FcCharSetCreate allocates and initializes a new empty
   character set object.
d2052 1
a2052 1
   Fontconfig version 2.4.1
d2073 1
a2073 1
   Fontconfig version 2.4.1
d2085 1
a2085 1
   FcBool FcCharSetAddChar(FcCharSet *fcs, FcChar32ucs4);
d2095 1
a2095 1
   Fontconfig version 2.4.1
d2116 1
a2116 1
   Fontconfig version 2.4.1
d2136 1
a2136 1
   Fontconfig version 2.4.1
d2153 1
a2153 2
   Returns a set including only those chars found in both a and
   b.
d2157 1
a2157 1
   Fontconfig version 2.4.1
d2179 1
a2179 1
   Fontconfig version 2.4.1
d2200 1
a2200 1
   Fontconfig version 2.4.1
d2212 1
a2212 1
   FcBool FcCharSetHasChar(const FcCharSet *fcs, FcChar32ucs4);
d2220 1
a2220 1
   Fontconfig version 2.4.1
d2240 1
a2240 1
   Fontconfig version 2.4.1
d2261 1
a2261 1
   Fontconfig version 2.4.1
d2282 1
a2282 1
   Fontconfig version 2.4.1
d2303 1
a2303 1
   Fontconfig version 2.4.1
d2316 1
a2316 1
   FcChar32[FC_CHARSET_MAP_SIZE]map, FcChar32 *next);
d2321 2
a2322 2
   coverage of a. Returns the base of the array. next contains
   the next page in the font.
d2326 1
a2326 1
   Fontconfig version 2.4.1
d2339 1
a2339 1
   FcChar32[FC_CHARSET_MAP_SIZE]map, FcChar32 *next);
d2349 1
a2349 16
   Fontconfig version 2.4.1
     _________________________________________________________

4.8. FcMatrix

   Table of Contents
   FcMatrixInit -- initialize an FcMatrix structure
   FcMatrixCopy -- Copy a matrix
   FcMatrixEqual -- Compare two matrices
   FcMatrixMultiply -- Multiply matrices
   FcMatrixRotate -- Rotate a matrix
   FcMatrixScale -- Scale a matrix
   FcMatrixShear -- Shear a matrix

   FcMatrix structures hold an affine transformation in matrix
   form.
d2351 1
a2351 1
FcMatrixInit
d2355 2
a2356 1
   FcMatrixInit -- initialize an FcMatrix structure
d2362 2
a2363 1
   void FcMatrixInit(FcMatrix *matrix);
d2367 4
a2370 1
   FcMatrixInit initializes matrix to the identity matrix.
d2374 1
a2374 1
   Fontconfig version 2.4.1
d2376 1
a2376 1
FcMatrixCopy
d2380 1
a2380 1
   FcMatrixCopy -- Copy a matrix
d2386 1
a2386 1
   void FcMatrixCopy(const FcMatrix *matrix);
d2390 1
a2390 1
   FcMatrixCopy allocates a new FcMatrix and copies mat into it.
d2394 24
a2417 1
   Fontconfig version 2.4.1
d2419 1
a2419 1
FcMatrixEqual
d2423 1
a2423 1
   FcMatrixEqual -- Compare two matrices
d2429 1
a2429 2
   void FcMatrixEqual(const FcMatrix *matrix1, const FcMatrix
   *matrix2);
d2433 1
a2433 2
   FcMatrixEqual compares matrix1 and matrix2 returning FcTrue
   when they are equal and FcFalse when they are not.
d2437 1
a2437 1
   Fontconfig version 2.4.1
d2439 1
a2439 1
FcMatrixMultiply
d2443 1
a2443 1
   FcMatrixMultiply -- Multiply matrices
d2449 1
a2449 2
   void FcMatrixMultiply(FcMatrix *result, const FcMatrix
   *matrix1, const FcMatrix *matrix2);
d2453 2
a2454 2
   FcMatrixMultiply multiplies matrix1 and matrix2 storing the
   result in result.
d2458 1
a2458 1
   Fontconfig version 2.4.1
d2460 1
a2460 1
FcMatrixRotate
d2464 1
a2464 1
   FcMatrixRotate -- Rotate a matrix
d2470 1
a2470 1
   void FcMatrixRotate(FcMatrix *matrix, doublecos, doublesin);
d2474 2
a2475 4
   FcMatrixRotate rotates matrix by the angle who's sine is sin
   and cosine is cos. This is done by multiplying by the matrix:
  cos -sin
  sin  cos
d2479 1
a2479 1
   Fontconfig version 2.4.1
d2481 1
a2481 1
FcMatrixScale
d2485 1
a2485 1
   FcMatrixScale -- Scale a matrix
d2491 1
a2491 1
   void FcMatrixScale(FcMatrix *matrix, doublesx, doubledy);
d2495 3
a2497 4
   FcMatrixScale multiplies matrix x values by sx and y values by
   sy. This is done by multiplying by the matrix:
   sx  0
   0   sy
d2501 1
a2501 1
   Fontconfig version 2.4.1
d2503 1
a2503 1
FcMatrixShear
d2507 1
a2507 1
   FcMatrixShear -- Shear a matrix
d2513 2
a2514 1
   void FcMatrixShear(FcMatrix *matrix, doublesh, doublesv);
d2518 6
a2523 4
   FcMatrixShare shears matrix horizontally by sh and vertically
   by sv. This is done by multiplying by the matrix:
  1  sh
  sv  1
d2527 1
a2527 41
   Fontconfig version 2.4.1
     _________________________________________________________

4.9. FcConfig

   Table of Contents
   FcConfigCreate -- Create a configuration
   FcConfigDestroy -- Destroy a configuration
   FcConfigSetCurrent -- Set configuration as default
   FcConfigGetCurrent -- Return current configuration
   FcConfigUptoDate -- Check timestamps on config files
   FcConfigBuildFonts -- Build font database
   FcConfigGetConfigDirs -- Get config directories
   FcConfigGetFontDirs -- Get font directories
   FcConfigGetConfigFiles -- Get config files
   FcConfigGetCache -- Get cache filename
   FcConfigGetFonts -- Get config font set
   FcConfigGetBlanks -- Get config blanks
   FcConfigGetRescanInverval -- Get config rescan interval
   FcConfigSetRescanInverval -- Set config rescan interval
   FcConfigAppFontAddFile -- Add font file to font database
   FcConfigAppFontAddDir -- Add fonts from directory to font
          database

   FcConfigAppFontClear -- Remove all app fonts from font
          database

   FcConfigSubstituteWithPat -- Execute substitutions
   FcConfigSubstitute -- Execute substitutions
   FcFontMatch -- Return best font
   FcFontSort -- Return list of matching fonts
   FcFontRenderPrepare -- Prepare pattern for loading font file
   FcFontList -- List fonts
   FcConfigFilename -- Find a config file
   FcConfigParseAndLoad -- load a configuration file
   FcConfigNormalizeFontDir -- normalize a font directory

   An FcConfig object holds the internal representation of a
   configuration. There is a default configuration which
   applications may use by passing 0 to any function using the
   data within an FcConfig.
d2529 1
a2529 1
FcConfigCreate
d2533 1
a2533 1
   FcConfigCreate -- Create a configuration
d2539 2
a2540 1
   FcConfig * FcConfigCreate(void);
d2544 4
a2547 1
   Creates an empty configuration.
d2551 1
a2551 1
   Fontconfig version 2.4.1
d2553 1
a2553 1
FcConfigDestroy
d2557 1
a2557 1
   FcConfigDestroy -- Destroy a configuration
d2563 2
a2564 1
   void FcConfigDestroy(FcConfig *config);
d2568 2
a2569 4
   Destroys a configuration and any data associated with it. Note
   that calling this function with the return from
   FcConfigGetCurrent will place the library in an indeterminate
   state.
d2573 1
a2573 1
   Fontconfig version 2.4.1
d2575 1
a2575 1
FcConfigSetCurrent
d2579 1
a2579 1
   FcConfigSetCurrent -- Set configuration as default
d2585 1
a2585 1
   FcBool FcConfigSetCurrent(FcConfig *config);
d2589 4
a2592 3
   Sets the current default configuration to config. Implicitly
   calls FcConfigBuildFonts if necessary, returning FcFalse if
   that call fails.
d2596 1
a2596 1
   Fontconfig version 2.4.1
d2598 1
a2598 1
FcConfigGetCurrent
d2602 1
a2602 1
   FcConfigGetCurrent -- Return current configuration
d2608 2
a2609 1
   FcConfig * FcConfigGetCurrent(void);
d2613 6
a2618 1
   Returns the current default configuration.
d2622 1
a2622 1
   Fontconfig version 2.4.1
d2624 1
a2624 1
FcConfigUptoDate
d2628 1
a2628 1
   FcConfigUptoDate -- Check timestamps on config files
d2634 1
a2634 1
   FcBool FcConfigUptoDate(FcConfig *config);
d2638 1
a2638 2
   Checks all of the files related to config and returns whether
   the in-memory version is in sync with the disk version.
d2642 1
a2642 1
   Fontconfig version 2.4.1
d2644 1
a2644 1
FcConfigBuildFonts
d2648 1
a2648 1
   FcConfigBuildFonts -- Build font database
d2654 1
a2654 1
   FcBool FcConfigBuildFonts(FcConfig *config);
d2658 1
a2658 4
   Builds the set of available fonts for the given configuration.
   Note that any changes to the configuration after this call
   have indeterminate effects. Returns FcFalse if this operation
   runs out of memory.
d2662 16
a2677 1
   Fontconfig version 2.4.1
d2679 1
a2679 1
FcConfigGetConfigDirs
d2683 1
a2683 1
   FcConfigGetConfigDirs -- Get config directories
d2689 1
a2689 1
   FcStrList * FcConfigGetConfigDirs(FcConfig *config);
d2693 1
a2693 3
   Returns the list of font directories specified in the
   configuration files for config. Does not include any
   subdirectories.
d2697 1
a2697 1
   Fontconfig version 2.4.1
d2699 1
a2699 1
FcConfigGetFontDirs
d2703 1
a2703 1
   FcConfigGetFontDirs -- Get font directories
d2709 1
a2709 1
   FcStrList * FcConfigGetFontDirs(FcConfig *config);
d2713 1
a2713 3
   Returns the list of font directories in config. This includes
   the configured font directories along with any directories
   below those in the filesystem.
d2717 1
a2717 1
   Fontconfig version 2.4.1
d2719 1
a2719 1
FcConfigGetConfigFiles
d2723 1
a2723 1
   FcConfigGetConfigFiles -- Get config files
d2729 2
a2730 1
   FcStrList * FcConfigGetConfigFiles(FcConfig *config);
d2734 2
a2735 3
   Returns the list of known configuration files used to generate
   config. Note that this will not include any configuration done
   with FcConfigParse.
d2739 1
a2739 1
   Fontconfig version 2.4.1
d2741 1
a2741 1
FcConfigGetCache
d2745 1
a2745 1
   FcConfigGetCache -- Get cache filename
d2751 2
a2752 1
   char * FcConfigGetCache(FcConfig *config);
d2756 2
a2757 2
   Returns the name of the file used to store per-user font
   information.
d2761 1
a2761 1
   Fontconfig version 2.4.1
d2763 1
a2763 1
FcConfigGetFonts
d2767 1
a2767 1
   FcConfigGetFonts -- Get config font set
d2773 1
a2773 1
   FcFontSet * FcConfigGetFonts(FcConfig *config, FcSetNameset);
d2777 4
a2780 2
   Returns one of the two sets of fonts from the configuration as
   specified by set.
d2784 1
a2784 1
   Fontconfig version 2.4.1
d2786 1
a2786 1
FcConfigGetBlanks
d2790 1
a2790 1
   FcConfigGetBlanks -- Get config blanks
d2796 1
a2796 1
   FcBlanks * FcConfigGetBlanks(FcConfig *config);
d2800 4
a2803 3
   Returns the FcBlanks object associated with the given
   configuration, if no blanks were present in the configuration,
   this function will return 0.
d2807 1
a2807 1
   Fontconfig version 2.4.1
d2809 1
a2809 1
FcConfigGetRescanInverval
d2813 1
a2813 1
   FcConfigGetRescanInverval -- Get config rescan interval
d2819 1
a2819 1
   int FcConfigGetRescanInverval(FcConfig *config);
d2823 4
a2826 4
   Returns the interval between automatic checks of the
   configuration (in seconds) specified in config. The
   configuration is checked during a call to FcFontList when this
   interval has passed since the last check.
d2830 45
a2874 1
   Fontconfig version 2.4.1
d2876 1
a2876 1
FcConfigSetRescanInverval
d2880 1
a2880 1
   FcConfigSetRescanInverval -- Set config rescan interval
d2886 1
a2886 2
   FcBool FcConfigSetRescanInverval(FcConfig *config,
   intrescanInterval);
d2890 1
a2890 2
   Sets the rescan interval; returns FcFalse if an error
   occurred.
d2894 1
a2894 1
   Fontconfig version 2.4.1
d2896 1
a2896 1
FcConfigAppFontAddFile
d2900 1
a2900 1
   FcConfigAppFontAddFile -- Add font file to font database
d2906 1
a2906 2
   FcBool FcConfigAppFontAddFile(FcConfig *config, const char
   *file);
d2910 4
a2913 1
   Adds an application-specific font to the configuration.
d2917 1
a2917 1
   Fontconfig version 2.4.1
d2919 1
a2919 1
FcConfigAppFontAddDir
d2923 1
a2923 2
   FcConfigAppFontAddDir -- Add fonts from directory to font
   database
d2929 1
a2929 1
   FcBool FcConfigAppFontAddDir(FcConfig *config, const char *);
d2933 3
a2935 2
   Scans the specified directory for fonts, adding each one found
   to the application-specific set of fonts.
d2939 1
a2939 1
   Fontconfig version 2.4.1
d2941 1
a2941 1
FcConfigAppFontClear
d2945 1
a2945 2
   FcConfigAppFontClear -- Remove all app fonts from font
   database
d2951 1
a2951 1
   void FcConfigAppFontClear(FcConfig *config);
d2955 1
a2955 1
   Clears the set of application-specific fonts.
d2959 1
a2959 1
   Fontconfig version 2.4.1
d2961 1
a2961 1
FcConfigSubstituteWithPat
d2965 1
a2965 1
   FcConfigSubstituteWithPat -- Execute substitutions
d2971 1
a2971 2
   FcBool FcConfigSubstituteWithPat(FcConfig *config, FcPattern
   *p, FcPattern *p_pat, FcMatchKindkind);
d2975 3
a2977 5
   Performs the sequence of pattern modification operations, if
   kind is FcMatchPattern, then those tagged as pattern
   operations are applied, else if kind is FcMatchFont, those
   tagged as font operations are applied and p_pat is used for
   <test> elements with target=pattern.
d2981 1
a2981 1
   Fontconfig version 2.4.1
d2983 1
a2983 1
FcConfigSubstitute
d2987 1
a2987 1
   FcConfigSubstitute -- Execute substitutions
d2993 1
a2993 2
   FcBool FcConfigSubstitute(FcConfig *config, FcPattern *p,
   FcMatchKindkind);
d2997 2
a2998 1
   Calls FcConfigSubstituteWithPat setting p_pat to NULL.
d3002 1
a3002 1
   Fontconfig version 2.4.1
d3004 1
a3004 1
FcFontMatch
d3008 1
a3008 1
   FcFontMatch -- Return best font
d3014 1
a3014 2
   FcPattern * FcFontMatch(FcConfig *config, FcPattern *p,
   FcResult *result);
d3018 6
a3023 4
   Returns the font in config most close matching p. This
   function should be called only after FcConfigSubstitute and
   FcDefaultSubstitute have been called for p; otherwise the
   results will not be correct.
d3027 1
a3027 1
   Fontconfig version 2.4.1
d3029 1
a3029 1
FcFontSort
d3033 1
a3033 1
   FcFontSort -- Return list of matching fonts
d3039 1
a3039 2
   FcFontSet * FcFontSort(FcConfig *config, FcPattern *p,
   FcBooltrim, FcCharSet **csp, FcResult *result);
d3043 520
a3562 8
   Returns the list of fonts sorted by closeness to p. If trim is
   FcTrue, elements in the list which don't include Unicode
   coverage not provided by earlier elements in the list are
   elided. The union of Unicode coverage of all of the fonts is
   returned in csp, if csp is not NULL. This function should be
   called only after FcConfigSubstitute and FcDefaultSubstitute
   have been called for p; otherwise the results will not be
   correct.
d3564 1
a3564 5
   The returned FcFontSet references FcPattern structures which
   may be shared by the return value from multiple FcFontSort
   calls, applications must not modify these patterns. Instead,
   they should be passed, along with p to FcFontRenderPrepare
   which combines them into a complete pattern.
d3566 3
a3568 2
   The FcFontSet returned by FcFontSort is destroyed by caling
   FcFontSetDestroy.
d3572 1
a3572 1
   Fontconfig version 2.4.1
d3574 1
a3574 1
FcFontRenderPrepare
d3578 1
a3578 1
   FcFontRenderPrepare -- Prepare pattern for loading font file
d3584 2
a3585 2
   FcPattern * FcFontRenderPrepare(FcConfig *config, FcPattern
   *pat, FcPattern *font);
d3589 1
a3589 5
   Creates a new pattern consisting of elements of font not
   appearing in pat, elements of pat not appearing in font and
   the best matching value from pat for elements appearing in
   both. The result is passed to FcConfigSubstitute with kind
   FcMatchFont and then returned.
d3593 1
a3593 1
   Fontconfig version 2.4.1
d3595 1
a3595 1
FcFontList
d3599 1
a3599 1
   FcFontList -- List fonts
d3605 1
a3605 2
   FcFontSet * FcFontList(FcConfig *config, FcPattern *p,
   FcObjectSet *os);
d3609 1
a3609 3
   Selects fonts matching p, creates patterns from those fonts
   containing only the objects in os and returns the set of
   unique such patterns.
d3613 13
a3625 1
   Fontconfig version 2.4.1
d3627 1
a3627 1
FcConfigFilename
d3631 1
a3631 1
   FcConfigFilename -- Find a config file
d3637 2
a3638 1
   char * FcConfigFilename(const char *name);
d3642 22
a3663 4
   Given the specified external entity name, return the
   associated filename. This provides applications a way to
   convert various configuration file references into filename
   form.
d3665 3
a3667 8
   A null or empty name indicates that the default configuration
   file should be used; which file this references can be
   overridden with the FC_CONFIG_FILE environment variable. Next,
   if the name starts with ~, it refers to a file in the current
   users home directory. Otherwise if the name doesn't start with
   '/', it refers to a file in the default configuration
   directory; the built-in default directory can be overridden
   with the FC_CONFIG_DIR environment variable.
d3671 1
a3671 1
   Fontconfig version 2.4.1
d3673 1
a3673 1
FcConfigParseAndLoad
d3677 1
a3677 1
   FcConfigParseAndLoad -- load a configuration file
d3683 1
a3683 2
   FcBool FcConfigParseAndLoad(FcConfig *config, const FcChar8
   *file);
d3687 2
a3688 5
   Walks the configuration in 'file' and constructs the internal
   representation in 'config'. Any include files referenced from
   within 'file' will be loaded with FcConfigLoad and also
   parsed. If 'complain' is FcFalse, no warning will be displayed
   if 'file' does not exist.
d3692 1
a3692 1
   Fontconfig version 2.4.1
d3694 1
a3694 1
FcConfigNormalizeFontDir
d3698 1
a3698 1
   FcConfigNormalizeFontDir -- normalize a font directory
d3704 1
a3704 2
   const FcChar8 * FcConfigNormalizeFontDir(FcConfig *config,
   const FcChar8 *dir);
d3708 3
a3710 3
   Converts the directory name given in 'dir' to a normal form,
   i.e. one of the forms which are derived from the font
   directories specified in the config file.
d3714 2
a3715 2
   Fontconfig version 2.4.1
     _________________________________________________________
d3717 1
a3717 1
4.10. FcObjectType
d3720 29
a3748 3
   FcNameRegisterObjectTypes -- Register object types
   FcNameUnregisterObjectTypes -- Unregister object types
   FcNameGetObjectType -- Lookup an object type
d3750 1
a3750 2
   Provides for applcation-specified font name object types so
   that new pattern elements can be generated from font names.
d3752 1
a3752 1
FcNameRegisterObjectTypes
d3756 1
a3756 1
   FcNameRegisterObjectTypes -- Register object types
d3762 1
a3762 2
   FcBool FcNameRegisterObjectTypes(const FcObjectType *types,
   intntype);
d3766 1
a3766 1
   Register ntype new object types.
d3770 1
a3770 1
   Fontconfig version 2.4.1
d3772 1
a3772 1
FcNameUnregisterObjectTypes
d3776 1
a3776 1
   FcNameUnregisterObjectTypes -- Unregister object types
d3782 1
a3782 2
   FcBool FcNameUnregisterObjectTypes(const FcObjectType *types,
   intntype);
d3786 2
a3787 1
   Unregister ntype object types.
d3791 1
a3791 1
   Fontconfig version 2.4.1
d3793 1
a3793 1
FcNameGetObjectType
d3797 1
a3797 1
   FcNameGetObjectType -- Lookup an object type
d3803 1
a3803 1
   const FcObjectType * FcNameGetObjectType(const char *object);
d3807 2
a3808 1
   Return the object type for the pattern element named object.
d3812 2
a3813 2
   Fontconfig version 2.4.1
     _________________________________________________________
d3815 1
a3815 1
4.11. FcConstant
d3818 98
a3915 4
   FcNameRegisterConstants -- Register symbolic constants
   FcNameUnregisterConstants -- Unregister symbolic constants
   FcNameGetConstant -- Lookup symbolic constant
   FcNameConstant -- Get the value for a symbolic constant
d3917 1
a3917 2
   Provides for application-specified symbolic constants for font
   names.
d3919 1
a3919 1
FcNameRegisterConstants
d3923 1
a3923 1
   FcNameRegisterConstants -- Register symbolic constants
d3929 1
a3929 2
   FcBool FcNameRegisterConstants(const FcConstant *consts,
   intnconsts);
d3933 3
a3935 1
   Register nconsts new symbolic constants.
d3939 1
a3939 1
   Fontconfig version 2.4.1
d3941 1
a3941 1
FcNameUnregisterConstants
d3945 1
a3945 1
   FcNameUnregisterConstants -- Unregister symbolic constants
d3951 1
a3951 2
   FcBool FcNameUnregisterConstants(const FcConstant *consts,
   intnconsts);
d3955 2
a3956 1
   Unregister nconsts symbolic constants.
d3960 1
a3960 1
   Fontconfig version 2.4.1
d3962 1
a3962 1
FcNameGetConstant
d3966 1
a3966 1
   FcNameGetConstant -- Lookup symbolic constant
d3972 1
a3972 1
   const FcConstant * FcNameGetConstant(FcChar8 *string);
d3976 1
a3976 2
   Return the FcConstant structure related to symbolic constant
   string.
d3980 1
a3980 1
   Fontconfig version 2.4.1
d3982 1
a3982 1
FcNameConstant
d3986 1
a3986 1
   FcNameConstant -- Get the value for a symbolic constant
d3992 1
a3992 1
   FcBool FcNameConstant(FcChar8 *string, int *result);
d3996 1
a3996 3
   Returns whether a symbolic constant with name string is
   registered, placing the value of the constant in result if
   present.
d4000 2
a4001 2
   Fontconfig version 2.4.1
     _________________________________________________________
d4003 1
a4003 1
4.12. FcBlanks
d4006 12
a4017 4
   FcBlanksCreate -- Create an FcBlanks
   FcBlanksDestroy -- Destroy and FcBlanks
   FcBlanksAdd -- Add a character to an FcBlanks
   FcBlanksIsMember -- Query membership in an FcBlanks
d4019 2
a4020 6
   An FcBlanks object holds a list of Unicode chars which are
   expected to be blank when drawn. When scanning new fonts, any
   glyphs which are empty and not in this list will be assumed to
   be broken and not placed in the FcCharSet associated with the
   font. This provides a significantly more accurate CharSet for
   applications.
d4022 1
a4022 1
FcBlanksCreate
d4026 1
a4026 1
   FcBlanksCreate -- Create an FcBlanks
d4032 2
a4033 1
   FcBlanks * FcBlanksCreate(void);
d4037 12
a4048 1
   Creates an empty FcBlanks object.
d4052 1
a4052 1
   Fontconfig version 2.4.1
d4054 1
a4054 1
FcBlanksDestroy
d4058 1
a4058 1
   FcBlanksDestroy -- Destroy and FcBlanks
d4064 1
a4064 1
   void FcBlanksDestroy(FcBlanks *b);
d4068 2
a4069 1
   Destroys an FcBlanks object, freeing any associated memory.
d4073 1
a4073 1
   Fontconfig version 2.4.1
d4075 1
a4075 1
FcBlanksAdd
d4079 1
a4079 1
   FcBlanksAdd -- Add a character to an FcBlanks
d4085 2
a4086 1
   FcBool FcBlanksAdd(FcBlanks *b, FcChar32ucs4);
d4090 6
a4095 2
   Adds a single character to an FcBlanks object, returning
   FcFalse if this process ran out of memory.
d4099 1
a4099 1
   Fontconfig version 2.4.1
d4101 1
a4101 1
FcBlanksIsMember
d4105 2
a4106 1
   FcBlanksIsMember -- Query membership in an FcBlanks
d4112 2
a4113 1
   FcBool FcBlanksIsMember(FcBlanks *b, FcChar32ucs4);
d4117 5
a4121 2
   Returns whether the specified FcBlanks object contains the
   indicated Unicode value.
d4125 1
a4125 19
   Fontconfig version 2.4.1
     _________________________________________________________

4.13. FcAtomic

   Table of Contents
   FcAtomicCreate -- create an FcAtomic object
   FcAtomicLock -- lock a file
   FcAtomicNewFile -- return new temporary file name
   FcAtomicOrigFile -- return original file name
   FcAtomicReplaceOrig -- replace original with new
   FcAtomicDeleteNew -- delete new file
   FcAtomicUnlock -- unlock a file
   FcAtomicDestroy -- destroy an FcAtomic object

   These functions provide a safe way to update config files,
   allowing ongoing reading of the old config file while locked
   for writing and ensuring that a consistent and complete
   version of the config file is always available.
d4127 1
a4127 1
FcAtomicCreate
d4131 1
a4131 1
   FcAtomicCreate -- create an FcAtomic object
d4137 1
a4137 1
   FcAtomic * FcAtomicCreate(const FcChar8 *file);
d4141 4
a4144 6
   Creates a data structure containing data needed to control
   access to file. Writing is done to a separate file. Once that
   file is complete, the original configuration file is
   atomically replaced so that reading process always see a
   consistent and complete file without the need to lock for
   reading.
d4148 1
a4148 1
   Fontconfig version 2.4.1
d4150 1
a4150 1
FcAtomicLock
d4154 1
a4154 1
   FcAtomicLock -- lock a file
d4160 1
a4160 1
   FcBool FcAtomicLock(FcAtomic *atomic);
d4164 2
a4165 3
   Attempts to lock the file referenced by atomic. Returns
   FcFalse if the file is locked by another process, else returns
   FcTrue and leaves the file locked.
d4169 1
a4169 1
   Fontconfig version 2.4.1
d4171 1
a4171 1
FcAtomicNewFile
d4175 1
a4175 1
   FcAtomicNewFile -- return new temporary file name
d4181 2
a4182 1
   FcChar8 * FcAtomicNewFile(FcAtomic *atomic);
d4186 3
a4188 2
   Returns the filename for writing a new version of the file
   referenced by atomic.
d4192 1
a4192 1
   Fontconfig version 2.4.1
d4194 1
a4194 1
FcAtomicOrigFile
d4198 1
a4198 1
   FcAtomicOrigFile -- return original file name
d4204 2
a4205 1
   FcChar8 * FcAtomicOrigFile(FcAtomic *atomic);
d4209 3
a4211 1
   Returns the file refernced by atomic.
d4215 1
a4215 1
   Fontconfig version 2.4.1
d4217 1
a4217 1
FcAtomicReplaceOrig
d4221 1
a4221 1
   FcAtomicReplaceOrig -- replace original with new
d4227 2
a4228 1
   FcBool FcAtomicReplaceOrig(FcAtomic *atomic);
d4232 3
a4234 2
   Replaces the original file referenced by atomic with the new
   file.
d4238 1
a4238 1
   Fontconfig version 2.4.1
d4240 1
a4240 1
FcAtomicDeleteNew
d4244 1
a4244 1
   FcAtomicDeleteNew -- delete new file
d4250 1
a4250 1
   void FcAtomicDeleteNew(FcAtomic *atomic);
d4254 2
a4255 2
   Deletes the new file. Used in error recovery to back out
   changes.
d4259 2
a4260 1
   Fontconfig version 2.4.1
d4262 1
a4262 1
FcAtomicUnlock
d4264 6
a4269 13
Name

   FcAtomicUnlock -- unlock a file

Synopsis

#include <fontconfig.h>

   void FcAtomicUnlock(FcAtomic *atomic);

Description

   Unlocks the file.
d4271 1
a4271 1
Version
d4273 3
a4275 1
   Fontconfig version 2.4.1
d4277 1
a4277 1
FcAtomicDestroy
d4281 1
a4281 1
   FcAtomicDestroy -- destroy an FcAtomic object
d4287 1
a4287 1
   void FcAtomicDestroy(FcAtomic *atomic);
d4291 2
a4292 1
   Destroys atomic.
d4296 1
a4296 13
   Fontconfig version 2.4.1
     _________________________________________________________

4.14. File and Directory routines

   Table of Contents
   FcFileScan -- scan a font file
   FcDirScan -- scan a font directory
   FcDirSave -- save a directory cache
   FcDirCacheValid -- check directory cache timestamp

   These routines work with font files and directories, including
   font directory cache files.
d4298 1
a4298 1
FcFileScan
d4302 1
a4302 1
   FcFileScan -- scan a font file
d4308 1
a4308 2
   FcBool FcFileScan(FcFontSet *set, FcStrSet *dirs, FcFileCache
   *cache, FcBlanks *blanks, const char *file, FcBoolforce);
d4312 3
a4314 4
   Scans a single file and adds all fonts found to set. If force
   is FcTrue, then the file is scanned even if associated
   information is found in cache. If file is a directory, it is
   added to dirs.
d4318 1
a4318 1
   Fontconfig version 2.4.1
d4320 1
a4320 1
FcDirScan
d4324 1
a4324 1
   FcDirScan -- scan a font directory
d4330 1
a4330 2
   FcBool FcDirScan(FcFontSet *set, FcStrSet *dirs, FcFileCache
   *cache, FcBlanks *blanks, const char *dir, FcBoolforce);
d4334 3
a4336 5
   Scans an entire directory and adds all fonts found to set. If
   force is FcTrue, then the directory and all files within it
   are scanned even if information is present in the
   per-directory cache file or cache. Any subdirectories found
   are added to dirs.
d4340 1
a4340 1
   Fontconfig version 2.4.1
d4342 1
a4342 1
FcDirSave
d4346 2
a4347 1
   FcDirSave -- save a directory cache
d4353 1
a4353 2
   FcBool FcDirSave(FcFontSet *set, FcStrSet *dirs, const char
   *dir);
d4357 1
a4357 2
   Creates the per-directory cache file for dir and populates it
   with the fonts in set and subdirectories in dirs.
d4361 1
a4361 1
   Fontconfig version 2.4.1
d4363 1
a4363 1
FcDirCacheValid
d4367 1
a4367 1
   FcDirCacheValid -- check directory cache timestamp
d4373 1
a4373 1
   FcBool FcDirCacheValid(const FcChar8 *cache_file);
d4377 2
a4378 2
   Returns FcTrue if cache_file is no older than the directory
   containing it, else FcFalse.
d4382 2
a4383 2
   Fontconfig version 2.4.1
     _________________________________________________________
d4385 1
a4385 1
4.15. FcStrSet and FcStrList
d4390 1
d4400 2
a4401 2
   directories while scanning the configuration as directories
   are added while scanning.
d4421 1
a4421 1
   Fontconfig version 2.4.1
d4441 23
a4463 1
   Fontconfig version 2.4.1
d4483 1
a4483 1
   Fontconfig version 2.4.1
d4505 1
a4505 1
   Fontconfig version 2.4.1
d4526 1
a4526 1
   Fontconfig version 2.4.1
d4546 1
a4546 1
   Fontconfig version 2.4.1
d4566 1
a4566 1
   Fontconfig version 2.4.1
d4586 1
a4586 1
   Fontconfig version 2.4.1
d4606 2
a4607 2
   Fontconfig version 2.4.1
     _________________________________________________________
d4609 1
a4609 1
4.16. String utilities
d4617 3
d4622 3
a4624 4
   FcStrCopyFilename -- copy a string, expanding '~'
   FcStrCmpIgnoreCase -- compare UTF-8 strings ignoring ASCII
          case

d4629 2
d4648 1
a4648 1
   int FcUtf8ToUcs4(FcChar8 *src, FcChar32 *dst, intlen);
d4653 1
a4653 1
   the number of bytes containing the char. src nust be at least
d4658 1
a4658 1
   Fontconfig version 2.4.1
d4670 1
a4670 1
   int FcUcs4ToUtf8(FcChar32src, FcChar8dst[FC_UTF8_MAX_LEN]);
d4679 1
a4679 1
   Fontconfig version 2.4.1
d4691 1
a4691 1
   FcBool FcUtf8Len(FcChar8 *src, intlen, int *nchar, int
d4704 1
a4704 1
   Fontconfig version 2.4.1
d4716 2
a4717 2
   int FcUtf16ToUcs4(FcChar8 *src, FcEndianendian, FcChar32 *dst,
   intlen);
d4728 1
a4728 1
   Fontconfig version 2.4.1
d4740 1
a4740 1
   FcBool FcUtf16Len(FcChar8 *src, FcEndianendian, intlen, int
d4754 62
a4815 1
   Fontconfig version 2.4.1
d4832 2
a4833 2
   Yes, this is strdup, but that function isn't available on
   every platform.
d4837 1
a4837 1
   Fontconfig version 2.4.1
d4858 1
a4858 1
   Fontconfig version 2.4.1
d4864 1
a4864 1
   FcStrCopyFilename -- copy a string, expanding '~'
d4874 29
a4902 3
   Just like FcStrCopy except that it converts any leading '~'
   characters in s to the value of the HOME environment variable.
   Returns NULL if '~' is present in s and HOME is unset.
d4906 1
a4906 1
   Fontconfig version 2.4.1
d4912 1
a4912 2
   FcStrCmpIgnoreCase -- compare UTF-8 strings ignoring ASCII
   case
d4922 2
a4923 4
   Returns the usual <0, 0, >0 result of comparing s1 and s2.
   This test is case-insensitive in the ASCII range and will
   operate properly with UTF8 encoded strings, although it does
   not check for well formed strings.
d4927 1
a4927 1
   Fontconfig version 2.4.1
d4939 1
a4939 1
   FcChar8 * FcStrStr(const char *s1, const char *s2);
d4945 1
a4945 2
   encoded strings, although it does not check for well formed
   strings.
d4949 1
a4949 1
   Fontconfig version 2.4.1
d4962 45
a5006 1
   FcChar8 * FcStrStrIgnoreCase(const char *s1, const char *s2);
d5010 2
a5011 4
   Returns the location of s2 in s1, ignoring ASCII case. Returns
   NULL if s2 is not present in s1. This test is case-insensitive
   in the ASCII range and will operate properly with UTF8 encoded
   strings, although it does not check for well formed strings.
d5015 1
a5015 1
   Fontconfig version 2.4.1
d5037 1
a5037 1
   Fontconfig version 2.4.1
d5054 2
a5055 2
   names. This is returned in newly allocated storage which
   should be freed when no longer needed.
d5059 1
a5059 1
   Fontconfig version 2.4.1
@


1.1.1.1
log
@Import fontconfig 2.4.1
@
text
@@


1.1.1.2
log
@Fontconfig 2.4.2
@
text
@d2 1
a2 1
Fontconfig Developers Reference, Version 2.4.2
d99 1
a99 4
              FcFreeTypeQuery -- compute pattern from font file
                      (and index)

              FcFreeTypeQueryFace -- compute pattern from FT_Face
d182 2
d655 1
a655 1
   Fontconfig version 2.4.2
d677 1
a677 1
   Fontconfig version 2.4.2
d701 1
a701 1
   Fontconfig version 2.4.2
d724 1
a724 1
   Fontconfig version 2.4.2
d744 1
a744 1
   Fontconfig version 2.4.2
d765 1
a765 1
   Fontconfig version 2.4.2
d787 1
a787 1
   Fontconfig version 2.4.2
d839 1
a839 1
   Fontconfig version 2.4.2
d860 1
a860 1
   Fontconfig version 2.4.2
d881 1
a881 1
   Fontconfig version 2.4.2
d903 1
a903 1
   Fontconfig version 2.4.2
d924 1
a924 1
   Fontconfig version 2.4.2
d936 2
a937 2
   FcBool FcPatternAdd(FcPattern *p, const char *object, FcValue
   value, FcBool append);
d950 1
a950 1
   Fontconfig version 2.4.2
d963 1
a963 1
   FcValue value, FcBool append);
d973 1
a973 1
   Fontconfig version 2.4.2
d988 1
a988 1
   int i);
d991 1
a991 1
   double d);
d1003 1
a1003 1
   FcBool b);
d1014 1
a1014 1
   Fontconfig version 2.4.2
d1026 2
a1027 2
   FcResult FcPatternGet(FcPattern *p, const char *object, int
   id, FcValue *v);
d1038 1
a1038 1
   Fontconfig version 2.4.2
d1053 1
a1053 1
   int n, int *i);
d1056 1
a1056 1
   int n, double *d);
d1059 1
a1059 1
   int n, char **consts);
d1062 1
a1062 1
   int n, FcMatrix **s);
d1065 1
a1065 1
   int n, FcCharSet **c);
d1068 1
a1068 1
   int n, FcBool *b);
d1082 1
a1082 1
   Fontconfig version 2.4.2
d1097 1
a1097 1
   FcPattern * FcPatternVaBuild(FcPattern *orig, va_list va);
d1123 1
a1123 1
   Fontconfig version 2.4.2
d1144 1
a1144 1
   Fontconfig version 2.4.2
d1157 2
a1158 2
   FcBool FcPatternRemove(FcPattern *p, const char *object, int
   id);
d1168 1
a1168 1
   Fontconfig version 2.4.2
d1190 1
a1190 1
   Fontconfig version 2.4.2
d1219 1
a1219 1
   Fontconfig version 2.4.2
d1240 1
a1240 1
   Fontconfig version 2.4.2
d1264 1
a1264 1
   Fontconfig version 2.4.2
d1295 1
a1295 1
   Fontconfig version 2.4.2
d1316 1
a1316 1
   Fontconfig version 2.4.2
d1337 1
a1337 1
   Fontconfig version 2.4.2
d1370 1
a1370 1
   Fontconfig version 2.4.2
d1390 1
a1390 1
   Fontconfig version 2.4.2
d1410 1
a1410 1
   Fontconfig version 2.4.2
d1425 2
a1426 2
   FcObjectSet * FcObjectSetVaBuild(const char *first, va_list
   va);
d1435 1
a1435 1
   Fontconfig version 2.4.2
d1443 1
a1443 2
   FcFreeTypeQuery -- compute pattern from font file (and index)
   FcFreeTypeQueryFace -- compute pattern from FT_Face
d1460 1
a1460 1
   FT_UInt FcFreeTypeCharIndex(FT_Face face, FcChar32 ucs4);
d1473 1
a1473 1
   Fontconfig version 2.4.2
d1486 1
a1486 1
   FcCharSet * FcFreeTypeCharSet(FT_Face face, FcBlanks *blanks);
d1498 1
a1498 1
   Fontconfig version 2.4.2
d1504 1
a1504 1
   FcFreeTypeQuery -- compute pattern from font file (and index)
d1511 1
a1511 1
   FcPattern * FcFreeTypeQuery(const char *file, int id, FcBlanks
d1521 1
a1521 25
   Fontconfig version 2.4.2

FcFreeTypeQueryFace

Name

   FcFreeTypeQueryFace -- compute pattern from FT_Face

Synopsis

#include <fontconfig.h>
#include <fcfreetype.h>

   FcPattern * FcFreeTypeQueryFace(const FT_Face face, const char
   *file, int id, FcBlanks *blanks);

Description

   Constructs a pattern representing 'face'. 'file' and 'id' are
   used solely as data for pattern elements (FC_FILE, FC_INDEX
   and sometimes FC_FAMILY).

Version

   Fontconfig version 2.4.2
d1545 1
a1545 1
   void FcValueDestroy(FcValue v);
d1555 1
a1555 1
   Fontconfig version 2.4.2
d1567 1
a1567 1
   FcValue FcValueSave(FcValue v);
d1576 1
a1576 1
   Fontconfig version 2.4.2
d1624 1
a1624 1
   Fontconfig version 2.4.2
d1645 1
a1645 1
   Fontconfig version 2.4.2
d1657 1
a1657 1
   FcBool FcCharSetAddChar(FcCharSet *fcs, FcChar32 ucs4);
d1667 1
a1667 1
   Fontconfig version 2.4.2
d1688 1
a1688 1
   Fontconfig version 2.4.2
d1708 1
a1708 1
   Fontconfig version 2.4.2
d1730 1
a1730 1
   Fontconfig version 2.4.2
d1752 1
a1752 1
   Fontconfig version 2.4.2
d1773 1
a1773 1
   Fontconfig version 2.4.2
d1785 1
a1785 1
   FcBool FcCharSetHasChar(const FcCharSet *fcs, FcChar32 ucs4);
d1793 1
a1793 1
   Fontconfig version 2.4.2
d1813 1
a1813 1
   Fontconfig version 2.4.2
d1834 1
a1834 1
   Fontconfig version 2.4.2
d1855 1
a1855 1
   Fontconfig version 2.4.2
d1876 1
a1876 1
   Fontconfig version 2.4.2
d1889 1
a1889 1
   FcChar32[FC_CHARSET_MAP_SIZE] map, FcChar32 *next);
d1899 1
a1899 1
   Fontconfig version 2.4.2
d1912 1
a1912 1
   FcChar32[FC_CHARSET_MAP_SIZE] map, FcChar32 *next);
d1922 1
a1922 1
   Fontconfig version 2.4.2
d1957 1
a1957 1
   Fontconfig version 2.4.2
d1977 1
a1977 1
   Fontconfig version 2.4.2
d1999 1
a1999 1
   Fontconfig version 2.4.2
d2021 1
a2021 1
   Fontconfig version 2.4.2
d2033 1
a2033 1
   void FcMatrixRotate(FcMatrix *matrix, double cos, double sin);
d2044 1
a2044 1
   Fontconfig version 2.4.2
d2056 1
a2056 1
   void FcMatrixScale(FcMatrix *matrix, double sx, double dy);
d2067 1
a2067 1
   Fontconfig version 2.4.2
d2079 1
a2079 1
   void FcMatrixShear(FcMatrix *matrix, double sh, double sv);
d2090 1
a2090 1
   Fontconfig version 2.4.2
d2125 1
d2150 1
a2150 1
   Fontconfig version 2.4.2
d2173 1
a2173 1
   Fontconfig version 2.4.2
d2195 1
a2195 1
   Fontconfig version 2.4.2
d2215 1
a2215 1
   Fontconfig version 2.4.2
d2236 1
a2236 1
   Fontconfig version 2.4.2
d2259 1
a2259 1
   Fontconfig version 2.4.2
d2281 1
a2281 1
   Fontconfig version 2.4.2
d2303 1
a2303 1
   Fontconfig version 2.4.2
d2325 1
a2325 1
   Fontconfig version 2.4.2
d2346 1
a2346 1
   Fontconfig version 2.4.2
d2358 1
a2358 1
   FcFontSet * FcConfigGetFonts(FcConfig *config, FcSetName set);
d2367 1
a2367 1
   Fontconfig version 2.4.2
d2389 1
a2389 1
   Fontconfig version 2.4.2
d2412 1
a2412 1
   Fontconfig version 2.4.2
d2424 2
a2425 2
   FcBool FcConfigSetRescanInverval(FcConfig *config, int
   rescanInterval);
d2434 1
a2434 1
   Fontconfig version 2.4.2
d2455 1
a2455 1
   Fontconfig version 2.4.2
d2477 1
a2477 1
   Fontconfig version 2.4.2
d2498 1
a2498 1
   Fontconfig version 2.4.2
d2511 1
a2511 1
   *p, FcPattern *p_pat, FcMatchKind kind);
d2523 1
a2523 1
   Fontconfig version 2.4.2
d2536 1
a2536 1
   FcMatchKind kind);
d2544 1
a2544 1
   Fontconfig version 2.4.2
d2568 1
a2568 1
   Fontconfig version 2.4.2
d2580 2
a2581 2
   FcFontSet * FcFontSort(FcConfig *config, FcPattern *p, FcBool
   trim, FcCharSet **csp, FcResult *result);
d2605 1
a2605 1
   Fontconfig version 2.4.2
d2630 1
a2630 1
   Fontconfig version 2.4.2
d2653 1
a2653 1
   Fontconfig version 2.4.2
d2685 1
a2685 1
   Fontconfig version 2.4.2
d2710 24
a2733 1
   Fontconfig version 2.4.2
d2757 1
a2757 1
   int ntype);
d2765 1
a2765 1
   Fontconfig version 2.4.2
d2778 1
a2778 1
   int ntype);
d2786 1
a2786 1
   Fontconfig version 2.4.2
d2806 1
a2806 1
   Fontconfig version 2.4.2
d2830 2
a2831 2
   FcBool FcNameRegisterConstants(const FcConstant *consts, int
   nconsts);
d2839 1
a2839 1
   Fontconfig version 2.4.2
d2851 2
a2852 2
   FcBool FcNameUnregisterConstants(const FcConstant *consts, int
   nconsts);
d2860 1
a2860 1
   Fontconfig version 2.4.2
d2881 1
a2881 1
   Fontconfig version 2.4.2
d2903 1
a2903 1
   Fontconfig version 2.4.2
d2939 1
a2939 1
   Fontconfig version 2.4.2
d2959 1
a2959 1
   Fontconfig version 2.4.2
d2971 1
a2971 1
   FcBool FcBlanksAdd(FcBlanks *b, FcChar32 ucs4);
d2980 1
a2980 1
   Fontconfig version 2.4.2
d2992 1
a2992 1
   FcBool FcBlanksIsMember(FcBlanks *b, FcChar32 ucs4);
d3001 1
a3001 1
   Fontconfig version 2.4.2
d3044 1
a3044 1
   Fontconfig version 2.4.2
d3066 1
a3066 1
   Fontconfig version 2.4.2
d3087 1
a3087 1
   Fontconfig version 2.4.2
d3107 1
a3107 1
   Fontconfig version 2.4.2
d3128 1
a3128 1
   Fontconfig version 2.4.2
d3149 1
a3149 1
   Fontconfig version 2.4.2
d3169 1
a3169 1
   Fontconfig version 2.4.2
d3189 1
a3189 1
   Fontconfig version 2.4.2
d3214 1
a3214 1
   *cache, FcBlanks *blanks, const char *file, FcBool force);
d3225 1
a3225 1
   Fontconfig version 2.4.2
d3238 1
a3238 1
   *cache, FcBlanks *blanks, const char *dir, FcBool force);
d3250 1
a3250 1
   Fontconfig version 2.4.2
d3272 1
a3272 1
   Fontconfig version 2.4.2
d3293 1
a3293 1
   Fontconfig version 2.4.2
d3331 1
a3331 1
   Fontconfig version 2.4.2
d3351 1
a3351 1
   Fontconfig version 2.4.2
d3371 1
a3371 1
   Fontconfig version 2.4.2
d3393 1
a3393 1
   Fontconfig version 2.4.2
d3414 1
a3414 1
   Fontconfig version 2.4.2
d3434 1
a3434 1
   Fontconfig version 2.4.2
d3454 1
a3454 1
   Fontconfig version 2.4.2
d3474 1
a3474 1
   Fontconfig version 2.4.2
d3494 1
a3494 1
   Fontconfig version 2.4.2
d3532 1
a3532 1
   int FcUtf8ToUcs4(FcChar8 *src, FcChar32 *dst, int len);
d3542 1
a3542 1
   Fontconfig version 2.4.2
d3554 1
a3554 1
   int FcUcs4ToUtf8(FcChar32 src, FcChar8 dst[FC_UTF8_MAX_LEN]);
d3563 1
a3563 1
   Fontconfig version 2.4.2
d3575 1
a3575 1
   FcBool FcUtf8Len(FcChar8 *src, int len, int *nchar, int
d3588 1
a3588 1
   Fontconfig version 2.4.2
d3600 2
a3601 2
   int FcUtf16ToUcs4(FcChar8 *src, FcEndian endian, FcChar32
   *dst, int len);
d3612 1
a3612 1
   Fontconfig version 2.4.2
d3624 1
a3624 1
   FcBool FcUtf16Len(FcChar8 *src, FcEndian endian, int len, int
d3638 1
a3638 1
   Fontconfig version 2.4.2
d3660 1
a3660 1
   Fontconfig version 2.4.2
d3681 1
a3681 1
   Fontconfig version 2.4.2
d3703 1
a3703 1
   Fontconfig version 2.4.2
d3727 1
a3727 1
   Fontconfig version 2.4.2
d3750 1
a3750 1
   Fontconfig version 2.4.2
d3774 1
a3774 1
   Fontconfig version 2.4.2
d3796 1
a3796 1
   Fontconfig version 2.4.2
d3818 1
a3818 1
   Fontconfig version 2.4.2
@

