head	1.4;
access;
symbols
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.2.0.8
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.6
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.4
	OPENBSD_4_2:1.1.1.2.0.2
	OPENBSD_4_2_BASE:1.1.1.2
	v2_4_2:1.1.1.2
	v2_4_1:1.1.1.1
	fontconfig:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2013.03.09.14.34.42;	author matthieu;	state dead;
branches;
next	1.3;

1.3
date	2010.03.25.21.45.58;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.05.16.43.35;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.25.18.42.14;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.25.18.42.14;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.12.31.14.58.00;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to fontconfig 2.10.91 + a few local fixes.
Move to a new BSD make based build system since fontconfig's build
system has become too dependant on GNU make.

Requested by ajacoutot@@, tested by many back in january.
@
text
@/*
 * fontconfig/doc/fcstring.fncs
 *
 * Copyright Â© 2003 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * THE AUTHOR(S) DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */
    <variablelist>

@@RET@@		int
@@FUNC@@		FcUtf8ToUcs4 
@@TYPE1@@		FcChar8 *			@@ARG1@@		src
@@TYPE2@@		FcChar32 *			@@ARG2@@		dst
@@TYPE3@@		int% 				@@ARG3@@		len
@@PURPOSE@@	convert UTF-8 to UCS4
@@DESC@@
Converts the next Unicode char from <parameter>src</parameter> into
<parameter>dst</parameter> and returns the number of bytes containing the
char.  <parameter>src</parameter> must be at least
<parameter>len</parameter> bytes long.
@@@@

@@RET@@		int 
@@FUNC@@		FcUcs4ToUtf8
@@TYPE1@@		FcChar32% 			@@ARG1@@		src	 
@@TYPE2@@		FcChar8% 			@@ARG2@@		dst[FC_UTF8_MAX_LEN]
@@PURPOSE@@	convert UCS4 to UTF-8
@@DESC@@
Converts the Unicode char from <parameter>src</parameter> into
<parameter>dst</parameter> and returns the number of bytes needed to encode
the char.
@@@@

@@RET@@		FcBool 
@@FUNC@@		FcUtf8Len
@@TYPE1@@		FcChar8 *			@@ARG1@@		src
@@TYPE2@@		int% 				@@ARG2@@		len
@@TYPE3@@		int *				@@ARG3@@		nchar
@@TYPE4@@		int *				@@ARG4@@		wchar
@@PURPOSE@@	count UTF-8 encoded chars
@@DESC@@
Counts the number of Unicode chars in <parameter>len</parameter> bytes of
<parameter>src</parameter>.  Places that count in
<parameter>nchar</parameter>.  <parameter>wchar</parameter> contains 1, 2 or
4 depending on the number of bytes needed to hold the largest unicode char
counted.  The return value indicates whether <parameter>src</parameter> is a
well-formed UTF8 string.
@@@@

@@RET@@		int 
@@FUNC@@		FcUtf16ToUcs4
@@TYPE1@@		FcChar8 *			@@ARG1@@		src
@@TYPE2@@		FcEndian% 			@@ARG2@@		endian
@@TYPE3@@		FcChar32 *			@@ARG3@@		dst
@@TYPE4@@		int% 				@@ARG4@@		len
@@PURPOSE@@	convert UTF-16 to UCS4
@@DESC@@
Converts the next Unicode char from <parameter>src</parameter> into
<parameter>dst</parameter> and returns the number of bytes containing the
char. <parameter>src</parameter> must be at least <parameter>len</parameter>
bytes long.  Bytes of <parameter>src</parameter> are combined into 16-bit
units according to <parameter>endian</parameter>.
@@@@

@@RET@@		FcBool
@@FUNC@@		FcUtf16Len
@@TYPE1@@		FcChar8 *			@@ARG1@@		src
@@TYPE2@@		FcEndian% 			@@ARG2@@		endian
@@TYPE3@@		int% 				@@ARG3@@		len
@@TYPE4@@		int *				@@ARG4@@		nchar
@@TYPE5@@		int *				@@ARG5@@		wchar
@@PURPOSE@@	count UTF-16 encoded chars
@@DESC@@
Counts the number of Unicode chars in <parameter>len</parameter> bytes of
<parameter>src</parameter>.  Bytes of <parameter>src</parameter> are
combined into 16-bit units according to <parameter>endian</parameter>.
Places that count in <parameter>nchar</parameter>.
<parameter>wchar</parameter> contains 1, 2 or 4 depending on the number of
bytes needed to hold the largest unicode char counted.  The return value
indicates whether <parameter>string</parameter> is a well-formed UTF16
string.
@@@@

@@RET@@		FcBool
@@FUNC@@		FcIsLower
@@TYPE1@@		FcChar8				@@ARG1@@		c
@@PURPOSE@@	check for lower case ASCII character
@@DESC@@
This macro checks whether <parameter>c</parameter> is an lower case ASCII
letter.
@@@@

@@RET@@		FcBool
@@FUNC@@		FcIsUpper
@@TYPE1@@		FcChar8				@@ARG1@@		c
@@PURPOSE@@	check for upper case ASCII character
@@DESC@@
This macro checks whether <parameter>c</parameter> is a upper case ASCII
letter.
@@@@

@@RET@@		FcChar8
@@FUNC@@		FcToLower
@@TYPE1@@		FcChar8				@@ARG1@@		c
@@PURPOSE@@	convert upper case ASCII to lower case
@@DESC@@
This macro converts upper case ASCII <parameter>c</parameter> to the
equivalent lower case letter.
@@@@

@@RET@@		FcChar8 *
@@FUNC@@		FcStrCopy
@@TYPE1@@		const FcChar8 *			@@ARG1@@		s
@@PURPOSE@@	duplicate a string
@@DESC@@
Allocates memory, copies <parameter>s</parameter> and returns the resulting
buffer.  Yes, this is <function>strdup</function>, but that function isn't
available on every platform.
@@@@

@@RET@@		FcChar8 *
@@FUNC@@		FcStrDowncase
@@TYPE1@@		const FcChar8 *			@@ARG1@@		s
@@PURPOSE@@	create a lower case translation of a string
@@DESC@@
Allocates memory, copies <parameter>s</parameter>, converting upper case
letters to lower case and returns the allocated buffer.
@@@@

@@RET@@		FcChar8 *
@@FUNC@@		FcStrCopyFilename
@@TYPE1@@		const FcChar8 *			@@ARG1@@		s
@@PURPOSE@@	create a complete path from a filename
@@DESC@@
<function>FcStrCopyFilename</function> constructs an absolute pathname from
<parameter>s</parameter>. It converts any leading '~' characters in
to the value of the HOME environment variable, and any relative paths are
converted to absolute paths using the current working directory. Sequences
of '/' characters are converted to a single '/', and names containing the
current directory '.' or parent directory '..' are correctly reconstructed.
Returns NULL if '~' is the leading character and HOME is unset or disabled
(see <function>FcConfigEnableHome</function>).
@@@@

@@RET@@		int
@@FUNC@@		FcStrCmp
@@TYPE1@@		const FcChar8 *			@@ARG1@@		s1
@@TYPE2@@		const FcChar8 *			@@ARG2@@		s2
@@PURPOSE@@	compare UTF-8 strings
@@DESC@@
Returns the usual &lt;0, 0, &gt;0 result of comparing
<parameter>s1</parameter> and <parameter>s2</parameter>. 
@@@@

@@RET@@		int
@@FUNC@@		FcStrCmpIgnoreCase
@@TYPE1@@		const FcChar8 *			@@ARG1@@		s1
@@TYPE2@@		const FcChar8 *			@@ARG2@@		s2
@@PURPOSE@@	compare UTF-8 strings ignoring case
@@DESC@@
Returns the usual &lt;0, 0, &gt;0 result of comparing
<parameter>s1</parameter> and <parameter>s2</parameter>. This test is
case-insensitive for all proper UTF-8 encoded strings.
@@@@

@@RET@@		FcChar8 *
@@FUNC@@		FcStrStr
@@TYPE1@@		const FcChar8 *			@@ARG1@@		s1
@@TYPE2@@		const FcChar8 *			@@ARG2@@		s2
@@PURPOSE@@	locate UTF-8 substring
@@DESC@@
Returns the location of <parameter>s2</parameter> in
<parameter>s1</parameter>.  Returns NULL if <parameter>s2</parameter>
is not present in <parameter>s1</parameter>. This test will operate properly
with UTF8 encoded strings.
@@@@

@@RET@@		FcChar8 *
@@FUNC@@		FcStrStrIgnoreCase
@@TYPE1@@		const FcChar8 *			@@ARG1@@		s1
@@TYPE2@@		const FcChar8 *			@@ARG2@@		s2
@@PURPOSE@@	locate UTF-8 substring ignoring ASCII case
@@DESC@@
Returns the location of <parameter>s2</parameter> in 
<parameter>s1</parameter>, ignoring case.  Returns NULL if
<parameter>s2</parameter> is not present in <parameter>s1</parameter>.
This test is case-insensitive for all proper UTF-8 encoded strings.
@@@@

@@RET@@		FcChar8 *
@@FUNC@@		FcStrPlus
@@TYPE1@@		const FcChar8 *			@@ARG1@@		s1
@@TYPE2@@		const FcChar8 *			@@ARG2@@		s2
@@PURPOSE@@	concatenate two strings
@@DESC@@
This function allocates new storage and places the concatenation of
<parameter>s1</parameter> and <parameter>s2</parameter> there, returning the
new string.
@@@@

@@RET@@		void
@@FUNC@@		FcStrFree
@@TYPE1@@		FcChar8 *			@@ARG1@@		s
@@PURPOSE@@	free a string
@@DESC@@
This is just a wrapper around free(3) which helps track memory usage of
strings within the fontconfig library.
@@@@

@@RET@@		FcChar8 *
@@FUNC@@		FcStrDirname
@@TYPE1@@		const FcChar8 *			@@ARG1@@		file
@@PURPOSE@@	directory part of filename
@@DESC@@
Returns the directory containing <parameter>file</parameter>.  This
is returned in newly allocated storage which should be freed when no longer
needed.
@@@@

@@RET@@		FcChar8 *
@@FUNC@@		FcStrBasename
@@TYPE1@@		const FcChar8 *			@@ARG1@@		file
@@PURPOSE@@	last component of filename
@@DESC@@
Returns the filename of <parameter>file</parameter> stripped of any leading
directory names.  This is returned in newly allocated storage which should
be freed when no longer needed.
@@@@
@


1.3
log
@Update to fontconfig 2.8.0. Tested on a full ports build by naddy@@.
@
text
@@


1.2
log
@Update to fontconfig 2.6.0. ok naddy@@

this uses a patched version of libtool to fix linking on vax.
@
text
@d2 1
a2 1
 * $Id: fcstring.fncs,v 1.1.1.2 2006/12/31 14:58:00 matthieu Exp $
d16 1
a16 1
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
d18 1
a18 1
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id$
d30 1
a30 1
@@TYPE3@@		int 				@@ARG3@@		len
d35 1
a35 1
char.  <parameter>src</parameter> nust be at least
d41 2
a42 2
@@TYPE1@@		FcChar32 			@@ARG1@@		src	 
@@TYPE2@@		FcChar8 			@@ARG2@@		dst[FC_UTF8_MAX_LEN]
d53 1
a53 1
@@TYPE2@@		int 				@@ARG2@@		len
d69 1
a69 1
@@TYPE2@@		FcEndian 			@@ARG2@@		endian
d71 1
a71 1
@@TYPE4@@		int 				@@ARG4@@		len
d84 2
a85 2
@@TYPE2@@		FcEndian 			@@ARG2@@		endian
@@TYPE3@@		int 				@@ARG3@@		len
d100 27
d149 1
a149 1
@@PURPOSE@@	copy a string, expanding '~'
d151 18
a168 3
Just like FcStrCopy except that it converts any leading '~' characters in
<parameter>s</parameter> to the value of the HOME environment variable.
Returns NULL if '~' is present in <parameter>s</parameter> and HOME is unset.
d175 1
a175 1
@@PURPOSE@@	compare UTF-8 strings ignoring ASCII case
d178 2
a179 3
<parameter>s1</parameter> and <parameter>s2</parameter>.  This test is
case-insensitive in the ASCII range and will operate properly with UTF8
encoded strings, although it does not check for well formed strings.
d184 2
a185 2
@@TYPE1@@		const char *			@@ARG1@@		s1
@@TYPE2@@		const char *			@@ARG2@@		s2
d191 1
a191 2
with UTF8 encoded strings, although it does not check for well formed
strings.
d196 2
a197 2
@@TYPE1@@		const char *			@@ARG1@@		s1
@@TYPE2@@		const char *			@@ARG2@@		s2
d201 1
a201 1
<parameter>s1</parameter>, ignoring ASCII case.  Returns NULL if
d203 21
a223 3
This test is case-insensitive in the ASCII range and will operate properly
with UTF8 encoded strings, although it does not check for well formed
strings.
@


1.1.1.1
log
@Import fontconfig 2.4.1
@
text
@@


1.1.1.2
log
@Fontconfig 2.4.2
@
text
@d30 1
a30 1
@@TYPE3@@		int% 				@@ARG3@@		len
d41 2
a42 2
@@TYPE1@@		FcChar32% 			@@ARG1@@		src	 
@@TYPE2@@		FcChar8% 			@@ARG2@@		dst[FC_UTF8_MAX_LEN]
d53 1
a53 1
@@TYPE2@@		int% 				@@ARG2@@		len
d69 1
a69 1
@@TYPE2@@		FcEndian% 			@@ARG2@@		endian
d71 1
a71 1
@@TYPE4@@		int% 				@@ARG4@@		len
d84 2
a85 2
@@TYPE2@@		FcEndian% 			@@ARG2@@		endian
@@TYPE3@@		int% 				@@ARG3@@		len
@

