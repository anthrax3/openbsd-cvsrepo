head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.6
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.7.0.10
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.8
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.6
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.6
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.1
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2017.02.28.23.05.46;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	nkyHp6MD1y4dj2qR;

1.9
date	2014.12.09.17.58.53;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	vcnjRBuLQw44cPHf;

1.8
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	cVXoV5PxI8YrEaVA;

1.7
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches
	1.7.8.1
	1.7.10.1;
next	1.6;

1.6
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.06.19.44.37;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2007.12.13.21.48.03;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.28.20.29.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.06;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.12.13.21.07.31;	author matthieu;	state Exp;
branches;
next	;

1.7.8.1
date	2014.12.09.18.00.12;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.7.10.1
date	2014.12.09.17.59.33;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.10
log
@Oops, in previous commit I forgot to remove the actual implementation
of the unused *ToID functions(). Spotted by Adam Jackson on xorg-devel
list.  Thanks.
@
text
@/*

Copyright 1991, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.

*/

/*
 * SUN-DES-1 authentication mechanism
 * Author:  Mayank Choudhary, Sun Microsystems
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#ifdef SECURE_RPC

#include <X11/X.h>
#include <X11/Xauth.h>
#include "misc.h"
#include "os.h"
#include "osdep.h"
#include "dixstruct.h"

#include <rpc/rpc.h>

#ifdef sun
/* <rpc/auth.h> only includes this if _KERNEL is #defined... */
extern bool_t xdr_opaque_auth(XDR *, struct opaque_auth *);
#endif

static enum auth_stat why;

static char *
authdes_ezdecode(const char *inmsg, int len)
{
    struct rpc_msg msg;
    char cred_area[MAX_AUTH_BYTES];
    char verf_area[MAX_AUTH_BYTES];
    char *temp_inmsg;
    struct svc_req r;
    bool_t res0, res1;
    XDR xdr;
    SVCXPRT xprt;

    temp_inmsg = malloc(len);
    if (temp_inmsg == NULL) {
        why = AUTH_FAILED; /* generic error, since there is no AUTH_BADALLOC */
        return NULL;
    }
    memmove(temp_inmsg, inmsg, len);

    memset((char *) &msg, 0, sizeof(msg));
    memset((char *) &r, 0, sizeof(r));
    memset(cred_area, 0, sizeof(cred_area));
    memset(verf_area, 0, sizeof(verf_area));

    msg.rm_call.cb_cred.oa_base = cred_area;
    msg.rm_call.cb_verf.oa_base = verf_area;
    why = AUTH_FAILED;
    xdrmem_create(&xdr, temp_inmsg, len, XDR_DECODE);

    if ((r.rq_clntcred = malloc(MAX_AUTH_BYTES)) == NULL)
        goto bad1;
    r.rq_xprt = &xprt;

    /* decode into msg */
    res0 = xdr_opaque_auth(&xdr, &(msg.rm_call.cb_cred));
    res1 = xdr_opaque_auth(&xdr, &(msg.rm_call.cb_verf));
    if (!(res0 && res1))
        goto bad2;

    /* do the authentication */

    r.rq_cred = msg.rm_call.cb_cred;    /* read by opaque stuff */
    if (r.rq_cred.oa_flavor != AUTH_DES) {
        why = AUTH_TOOWEAK;
        goto bad2;
    }
#ifdef SVR4
    if ((why = __authenticate(&r, &msg)) != AUTH_OK) {
#else
    if ((why = _authenticate(&r, &msg)) != AUTH_OK) {
#endif
        goto bad2;
    }
    return (((struct authdes_cred *) r.rq_clntcred)->adc_fullname.name);

 bad2:
    free(r.rq_clntcred);
 bad1:
    return ((char *) 0);        /* ((struct authdes_cred *) NULL); */
}

static XID rpc_id = (XID) ~0L;

static Bool
CheckNetName(unsigned char *addr, short len, void *closure)
{
    return (len == strlen((char *) closure) &&
            strncmp((char *) addr, (char *) closure, len) == 0);
}

static char rpc_error[MAXNETNAMELEN + 50];

_X_HIDDEN XID
SecureRPCCheck(unsigned short data_length, const char *data,
               ClientPtr client, const char **reason)
{
    char *fullname;

    if (rpc_id == (XID) ~0L) {
        *reason = "Secure RPC authorization not initialized";
    }
    else {
        fullname = authdes_ezdecode(data, data_length);
        if (fullname == (char *) 0) {
            snprintf(rpc_error, sizeof(rpc_error),
                     "Unable to authenticate secure RPC client (why=%d)", why);
            *reason = rpc_error;
        }
        else {
            if (ForEachHostInFamily(FamilyNetname, CheckNetName, fullname))
                return rpc_id;
            snprintf(rpc_error, sizeof(rpc_error),
                     "Principal \"%s\" is not authorized to connect", fullname);
            *reason = rpc_error;
        }
    }
    return (XID) ~0L;
}

_X_HIDDEN void
SecureRPCInit(void)
{
    if (rpc_id == ~0L)
        AddAuthorization(9, "SUN-DES-1", 0, (char *) 0);
}

_X_HIDDEN int
SecureRPCAdd(unsigned short data_length, const char *data, XID id)
{
    if (data_length)
        AddHost((void *) 0, FamilyNetname, data_length, data);
    rpc_id = id;
    return 1;
}

_X_HIDDEN int
SecureRPCReset(void)
{
    rpc_id = (XID) ~0L;
    return 1;
}

_X_HIDDEN int
SecureRPCFromID(XID id, unsigned short *data_lenp, char **datap)
{
    return 0;
}

_X_HIDDEN int
SecureRPCRemove(unsigned short data_length, const char *data)
{
    return 0;
}
#endif                          /* SECURE_RPC */
@


1.9
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a177 6
_X_HIDDEN XID
SecureRPCToID(unsigned short data_length, char *data)
{
    return rpc_id;
}

@


1.8
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d69 4
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d116 1
a116 1
CheckNetName(unsigned char *addr, short len, pointer closure)
d162 1
a162 1
        AddHost((pointer) 0, FamilyNetname, data_length, data);
@


1.7.8.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a68 4
    if (temp_inmsg == NULL) {
        why = AUTH_FAILED; /* generic error, since there is no AUTH_BADALLOC */
        return NULL;
    }
@


1.7.10.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a68 4
    if (temp_inmsg == NULL) {
        why = AUTH_FAILED; /* generic error, since there is no AUTH_BADALLOC */
        return NULL;
    }
@


1.6
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a33 1

d56 1
a56 1
static char * 
d59 8
a66 8
    struct rpc_msg  msg;
    char            cred_area[MAX_AUTH_BYTES];
    char            verf_area[MAX_AUTH_BYTES];
    char            *temp_inmsg;
    struct svc_req  r;
    bool_t          res0, res1;
    XDR             xdr;
    SVCXPRT         xprt;
d71 2
a72 2
    memset((char *)&msg, 0, sizeof(msg));
    memset((char *)&r, 0, sizeof(r));
d78 1
a78 1
    why = AUTH_FAILED; 
d86 1
a86 1
    res0 = xdr_opaque_auth(&xdr, &(msg.rm_call.cb_cred)); 
d88 2
a89 2
    if ( ! (res0 && res1) )
         goto bad2;
d93 1
a93 1
    r.rq_cred = msg.rm_call.cb_cred;        /* read by opaque stuff */
d103 1
a103 1
            goto bad2;
d105 1
a105 1
    return (((struct authdes_cred *) r.rq_clntcred)->adc_fullname.name); 
d107 1
a107 1
bad2:
d109 2
a110 2
bad1:
    return ((char *)0); /* ((struct authdes_cred *) NULL); */
d113 1
a113 1
static XID  rpc_id = (XID) ~0L;
d116 1
a116 5
CheckNetName (
    unsigned char    *addr,
    short	    len,
    pointer	    closure
)
d118 2
a119 2
    return (len == strlen ((char *) closure) &&
	    strncmp ((char *) addr, (char *) closure, len) == 0);
d122 1
a122 1
static char rpc_error[MAXNETNAMELEN+50];
d125 2
a126 2
SecureRPCCheck (unsigned short data_length, const char *data,
    ClientPtr client, char **reason)
d129 1
a129 1
    
d131 16
a146 15
	*reason = "Secure RPC authorization not initialized";
    } else {
	fullname = authdes_ezdecode(data, data_length);
	if (fullname == (char *)0) {
	    snprintf(rpc_error, sizeof(rpc_error), 
		     "Unable to authenticate secure RPC client (why=%d)", why);
	    *reason = rpc_error;
	} else {
	    if (ForEachHostInFamily (FamilyNetname, CheckNetName, fullname))
		return rpc_id;
	    snprintf(rpc_error, sizeof(rpc_error), 
		     "Principal \"%s\" is not authorized to connect",
		     fullname);
	    *reason = rpc_error;
	}
d150 1
a150 1
    
d152 1
a152 1
SecureRPCInit (void)
d155 1
a155 1
	AddAuthorization (9, "SUN-DES-1", 0, (char *) 0);
d159 1
a159 1
SecureRPCAdd (unsigned short data_length, const char *data, XID id)
d162 1
a162 1
	AddHost ((pointer) 0, FamilyNetname, data_length, data);
d168 1
a168 1
SecureRPCReset (void)
d175 1
a175 1
SecureRPCToID (unsigned short data_length, char *data)
d181 1
a181 1
SecureRPCFromID (XID id, unsigned short *data_lenp, char **datap)
d187 1
a187 1
SecureRPCRemove (unsigned short data_length, const char *data)
d191 1
a191 1
#endif /* SECURE_RPC */
@


1.5
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d58 1
a58 1
authdes_ezdecode(char *inmsg, int len)
d69 1
a69 1
    temp_inmsg = xalloc(len);
d82 1
a82 1
    if ((r.rq_clntcred = xalloc(MAX_AUTH_BYTES)) == NULL)
d109 1
a109 1
    xfree(r.rq_clntcred);
d130 1
a130 1
SecureRPCCheck (unsigned short data_length, char *data, 
d163 1
a163 1
SecureRPCAdd (unsigned short data_length, char *data, XID id)
d191 1
a191 1
SecureRPCRemove (unsigned short data_length, char *data)
@


1.4
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d69 1
a69 1
    temp_inmsg = (char *) xalloc(len);
d82 1
a82 1
    if ((r.rq_clntcred = (caddr_t) xalloc(MAX_AUTH_BYTES)) == NULL)
@


1.3
log
@Merge xserver 1.4.0.90. This includes fixes for some of the regressions
introduced by xserver 1.4, such as the keyboad caps/num-lock leds updates.
Tested by many.
@
text
@d45 1
a52 10
#endif

#if defined(DGUX)
#include <time.h>
#include <rpc/auth_des.h>
#endif /* DGUX */

#ifdef ultrix
#include <time.h>
#include <rpc/auth_des.h>
@


1.2
log
@OpenBSD local modifications:
- privilege separation
- some snprintf/strlc{at,py} conversions
- support for more architectures
- signal handler fixes
- default mouse wheel support in config tools
- sunmouse protocol
@
text
@d42 1
a42 1
#include "Xauth.h"
d138 1
a138 1
XID
d164 1
a164 1
void
d171 1
a171 1
int
d180 1
a180 1
int
d187 1
a187 1
XID
d193 1
a193 1
int
d199 1
a199 1
int
@


1.1
log
@Initial revision
@
text
@d149 2
a150 1
	    sprintf(rpc_error, "Unable to authenticate secure RPC client (why=%d)", why);
d155 3
a157 2
	    sprintf(rpc_error, "Principal \"%s\" is not authorized to connect",
			fullname);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4.0.90
@
text
@d42 1
a42 1
#include <X11/Xauth.h>
d138 1
a138 1
_X_HIDDEN XID
d162 1
a162 1
_X_HIDDEN void
d169 1
a169 1
_X_HIDDEN int
d178 1
a178 1
_X_HIDDEN int
d185 1
a185 1
_X_HIDDEN XID
d191 1
a191 1
_X_HIDDEN int
d197 1
a197 1
_X_HIDDEN int
@

