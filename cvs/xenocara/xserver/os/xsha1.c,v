head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.09.16.19.10.25;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	Te1daavkBLskZ8gc;

1.4
date	2013.06.07.17.28.55;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/* Copyright © 2007 Carl Worth
 * Copyright © 2009 Jeremy Huddleston, Julien Cristau, and Matthieu Herrb
 * Copyright © 2009-2010 Mikhail Gusarov
 * Copyright © 2012 Yaakov Selkowitz and Keith Packard
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "os.h"
#include "xsha1.h"

#if defined(HAVE_SHA1_IN_LIBMD)  /* Use libmd for SHA1 */ \
	|| defined(HAVE_SHA1_IN_LIBC)   /* Use libc for SHA1 */

#include <sha1.h>

void *
x_sha1_init(void)
{
    SHA1_CTX *ctx = malloc(sizeof(*ctx));

    if (!ctx)
        return NULL;
    SHA1Init(ctx);
    return ctx;
}

int
x_sha1_update(void *ctx, void *data, int size)
{
    SHA1_CTX *sha1_ctx = ctx;

    SHA1Update(sha1_ctx, data, size);
    return 1;
}

int
x_sha1_final(void *ctx, unsigned char result[20])
{
    SHA1_CTX *sha1_ctx = ctx;

    SHA1Final(result, sha1_ctx);
    free(sha1_ctx);
    return 1;
}

#elif defined(HAVE_SHA1_IN_COMMONCRYPTO)        /* Use CommonCrypto for SHA1 */

#include <CommonCrypto/CommonDigest.h>

void *
x_sha1_init(void)
{
    CC_SHA1_CTX *ctx = malloc(sizeof(*ctx));

    if (!ctx)
        return NULL;
    CC_SHA1_Init(ctx);
    return ctx;
}

int
x_sha1_update(void *ctx, void *data, int size)
{
    CC_SHA1_CTX *sha1_ctx = ctx;

    CC_SHA1_Update(sha1_ctx, data, size);
    return 1;
}

int
x_sha1_final(void *ctx, unsigned char result[20])
{
    CC_SHA1_CTX *sha1_ctx = ctx;

    CC_SHA1_Final(result, sha1_ctx);
    free(sha1_ctx);
    return 1;
}

#elif defined(HAVE_SHA1_IN_CRYPTOAPI)        /* Use CryptoAPI for SHA1 */

#define WIN32_LEAN_AND_MEAN
#include <X11/Xwindows.h>
#include <wincrypt.h>

static HCRYPTPROV hProv;

void *
x_sha1_init(void)
{
    HCRYPTHASH *ctx = malloc(sizeof(*ctx));

    if (!ctx)
        return NULL;
    CryptAcquireContext(&hProv, NULL, MS_DEF_PROV, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);
    CryptCreateHash(hProv, CALG_SHA1, 0, 0, ctx);
    return ctx;
}

int
x_sha1_update(void *ctx, void *data, int size)
{
    HCRYPTHASH *hHash = ctx;

    CryptHashData(*hHash, data, size, 0);
    return 1;
}

int
x_sha1_final(void *ctx, unsigned char result[20])
{
    HCRYPTHASH *hHash = ctx;
    DWORD len = 20;

    CryptGetHashParam(*hHash, HP_HASHVAL, result, &len, 0);
    CryptDestroyHash(*hHash);
    CryptReleaseContext(hProv, 0);
    free(ctx);
    return 1;
}

#elif defined(HAVE_SHA1_IN_LIBNETTLE)   /* Use libnettle for SHA1 */

#include <nettle/sha.h>

void *
x_sha1_init(void)
{
    struct sha1_ctx *ctx = malloc(sizeof(*ctx));

    if (!ctx)
        return NULL;
    sha1_init(ctx);
    return ctx;
}

int
x_sha1_update(void *ctx, void *data, int size)
{
    sha1_update(ctx, size, data);
    return 1;
}

int
x_sha1_final(void *ctx, unsigned char result[20])
{
    sha1_digest(ctx, 20, result);
    free(ctx);
    return 1;
}

#elif defined(HAVE_SHA1_IN_LIBGCRYPT)   /* Use libgcrypt for SHA1 */

#include <gcrypt.h>

void *
x_sha1_init(void)
{
    static int init;
    gcry_md_hd_t h;
    gcry_error_t err;

    if (!init) {
        if (!gcry_check_version(NULL))
            return NULL;
        gcry_control(GCRYCTL_DISABLE_SECMEM, 0);
        gcry_control(GCRYCTL_INITIALIZATION_FINISHED, 0);
        init = 1;
    }

    err = gcry_md_open(&h, GCRY_MD_SHA1, 0);
    if (err)
        return NULL;
    return h;
}

int
x_sha1_update(void *ctx, void *data, int size)
{
    gcry_md_hd_t h = ctx;

    gcry_md_write(h, data, size);
    return 1;
}

int
x_sha1_final(void *ctx, unsigned char result[20])
{
    gcry_md_hd_t h = ctx;

    memcpy(result, gcry_md_read(h, GCRY_MD_SHA1), 20);
    gcry_md_close(h);
    return 1;
}

#elif defined(HAVE_SHA1_IN_LIBSHA1)     /* Use libsha1 */

#include <libsha1.h>

void *
x_sha1_init(void)
{
    sha1_ctx *ctx = malloc(sizeof(*ctx));

    if (!ctx)
        return NULL;
    sha1_begin(ctx);
    return ctx;
}

int
x_sha1_update(void *ctx, void *data, int size)
{
    sha1_hash(data, size, ctx);
    return 1;
}

int
x_sha1_final(void *ctx, unsigned char result[20])
{
    sha1_end(result, ctx);
    free(ctx);
    return 1;
}

#else                           /* Use OpenSSL's libcrypto */

#include <stddef.h>             /* buggy openssl/sha.h wants size_t */
#include <openssl/sha.h>

void *
x_sha1_init(void)
{
    int ret;
    SHA_CTX *ctx = malloc(sizeof(*ctx));

    if (!ctx)
        return NULL;
    ret = SHA1_Init(ctx);
    if (!ret) {
        free(ctx);
        return NULL;
    }
    return ctx;
}

int
x_sha1_update(void *ctx, void *data, int size)
{
    int ret;
    SHA_CTX *sha_ctx = ctx;

    ret = SHA1_Update(sha_ctx, data, size);
    if (!ret)
        free(sha_ctx);
    return ret;
}

int
x_sha1_final(void *ctx, unsigned char result[20])
{
    int ret;
    SHA_CTX *sha_ctx = ctx;

    ret = SHA1_Final(result, sha_ctx);
    free(sha_ctx);
    return ret;
}

#endif
@


1.4
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d1 25
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d77 72
@


1.2
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d9 1
a9 1
	|| defined(HAVE_SHA1_IN_LIBC) /* Use libc for SHA1 */
d11 1
a11 1
# include <sha1.h>
d13 2
a14 1
void *x_sha1_init(void)
d17 1
d24 2
a25 1
int x_sha1_update(void *ctx, void *data, int size)
d28 1
d33 2
a34 1
int x_sha1_final(void *ctx, unsigned char result[20])
d37 1
d43 1
a43 1
#elif defined(HAVE_SHA1_IN_COMMONCRYPTO) /* Use CommonCrypto for SHA1 */
d47 2
a48 1
void *x_sha1_init(void)
d51 1
d58 2
a59 1
int x_sha1_update(void *ctx, void *data, int size)
d62 1
d67 2
a68 1
int x_sha1_final(void *ctx, unsigned char result[20])
d71 1
d77 1
a77 1
#elif defined(HAVE_SHA1_IN_LIBGCRYPT) /* Use libgcrypt for SHA1 */
d79 1
a79 1
# include <gcrypt.h>
d81 2
a82 1
void *x_sha1_init(void)
d102 2
a103 1
int x_sha1_update(void *ctx, void *data, int size)
d106 1
d111 2
a112 1
int x_sha1_final(void *ctx, unsigned char result[20])
d115 1
d121 1
a121 1
#elif defined(HAVE_SHA1_IN_LIBSHA1) /* Use libsha1 */
d123 1
a123 1
# include <libsha1.h>
d125 2
a126 1
void *x_sha1_init(void)
d129 2
a130 1
    if(!ctx)
d136 2
a137 1
int x_sha1_update(void *ctx, void *data, int size)
d143 2
a144 1
int x_sha1_final(void *ctx, unsigned char result[20])
d151 1
a151 1
#else /* Use OpenSSL's libcrypto */
d153 2
a154 2
# include <stddef.h>  /* buggy openssl/sha.h wants size_t */
# include <openssl/sha.h>
d156 2
a157 1
void *x_sha1_init(void)
d161 1
d172 2
a173 1
int x_sha1_update(void *ctx, void *data, int size)
d177 1
d184 2
a185 1
int x_sha1_final(void *ctx, unsigned char result[20])
d189 1
@


1.1
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d15 1
a15 1
    SHA1_CTX *ctx = xalloc(sizeof(*ctx));
d33 1
a33 1
    xfree(sha1_ctx);
d43 1
a43 1
    CC_SHA1_CTX *ctx = xalloc(sizeof(*ctx));
d61 1
a61 1
    xfree(sha1_ctx);
d110 1
a110 1
    sha1_ctx *ctx = xalloc(sizeof(*ctx));
d126 1
a126 1
    xfree(ctx);
d138 1
a138 1
    SHA_CTX *ctx = xalloc(sizeof(*ctx));
d143 1
a143 1
        xfree(ctx);
d155 1
a155 1
        xfree(sha_ctx);
d164 1
a164 1
    xfree(sha_ctx);
@

