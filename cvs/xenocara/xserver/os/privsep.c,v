head	1.28;
access;
symbols
	OPENBSD_6_0:1.28.0.4
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.27.0.4
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.26.0.4
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.2
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.25.0.4
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.2
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.20.0.2
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.2
	OPENBSD_5_0:1.17.0.4
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.14.0.6
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.28
date	2015.11.11.21.07.49;	author matthieu;	state Exp;
branches;
next	1.27;
commitid	CzkB28NPKiOL6W6n;

1.27
date	2014.10.18.14.39.40;	author matthieu;	state Exp;
branches;
next	1.26;
commitid	QKVCHW0EXqJz4ro7;

1.26
date	2013.08.13.18.14.31;	author kettenis;	state Exp;
branches;
next	1.25;

1.25
date	2012.08.14.15.57.57;	author matthieu;	state Exp;
branches;
next	1.24;

1.24
date	2012.08.12.14.06.42;	author matthieu;	state Exp;
branches;
next	1.23;

1.23
date	2012.08.07.20.16.12;	author matthieu;	state Exp;
branches;
next	1.22;

1.22
date	2012.08.07.20.15.23;	author matthieu;	state Exp;
branches;
next	1.21;

1.21
date	2012.08.07.20.13.18;	author matthieu;	state Exp;
branches;
next	1.20;

1.20
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.19;

1.19
date	2012.04.04.20.34.55;	author matthieu;	state Exp;
branches;
next	1.18;

1.18
date	2011.08.20.17.30.37;	author matthieu;	state Exp;
branches;
next	1.17;

1.17
date	2011.01.28.19.37.55;	author matthieu;	state Exp;
branches;
next	1.16;

1.16
date	2010.12.22.21.36.05;	author matthieu;	state Exp;
branches;
next	1.15;

1.15
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.14;

1.14
date	2009.09.08.19.52.26;	author matthieu;	state Exp;
branches;
next	1.13;

1.13
date	2009.09.06.19.44.37;	author matthieu;	state Exp;
branches;
next	1.12;

1.12
date	2009.07.14.18.25.16;	author oga;	state Exp;
branches;
next	1.11;

1.11
date	2008.11.02.15.26.33;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2008.08.28.17.50.21;	author mbalmer;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.15.00.17.33;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.14.21.37.13;	author mbalmer;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.12.22.20.24;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.12.18.50.19;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.03.24.21.24.52;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2008.03.15.17.14.11;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.03.13.06.53.06;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.25.18.41.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.28.20.29.32;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.28
log
@pledge(2) for the X server privileged process. ok deraadt@@
@
text
@/* $OpenBSD: privsep.c,v 1.27 2014/10/18 14:39:40 matthieu Exp $ */
/*
 * Copyright 2001 Niels Provos <provos@@citi.umich.edu>
 * All rights reserved.
 *
 * Copyright (c) 2002 Matthieu Herrb
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    - Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    - Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <sys/param.h>
#include <sys/uio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "os.h"
#include "osdep.h"

enum cmd_types {
	PRIV_OPEN_DEVICE,
	PRIV_SIG_PARENT,
};

/* Command parameters */
typedef struct priv_cmd {
	int cmd;
	int _pad;
	union {
		struct _open {
			char path[MAXPATHLEN];
		} open;
	} arg;
} priv_cmd_t;


static int priv_fd = -1;
static pid_t parent_pid = -1;
struct okdev {
	const char *const name;
	int flags;
} allowed_devices[] = {
	/* Serial devices */
	{"/dev/wsmouse", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/wsmouse0", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/wsmouse1", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/wsmouse2", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/wsmouse3", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/uhid0", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/uhid1", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/uhid2", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/uhid3", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/tty00", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/tty01", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/tty02", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/tty03", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/tty04", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttya", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyb", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyc", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyd", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/wskbd", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/wskbd0", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/wskbd1", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/wskbd2", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/wskbd3", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyC0", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyC1", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyC2", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyC3", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyC4", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyC5", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyC6", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyC7", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyD0", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyE0", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyF0", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyG0", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyH0", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyI0", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyJ0", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/pci", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/drm0", O_RDWR },
	{"/dev/drm1", O_RDWR },
	{"/dev/drm2", O_RDWR },
	{"/dev/drm3", O_RDWR },
	{"/dev/amdmsr", O_RDWR | O_EXCL},
	{NULL, 0}
};

/* return 1 if allowed to open said path */
static struct okdev *
open_ok(const char *path)
{
	struct okdev *p;
	struct stat sb;

	for (p = allowed_devices; p->name != NULL; p++) {
		if (strcmp(path, p->name) == 0) {
			if (stat(path, &sb) < 0) {
				/* path is valid, but doesn't exist */
				return NULL;
			}
			if (sb.st_mode & S_IFCHR) {
				/* File is a character device */
				return p;
			}
		}
	}
	/* path is not valid */
	return NULL;
}

static void
send_fd(int s, int fd)
{
	struct msghdr msg;
	union {
		struct cmsghdr hdr;
		char buf[CMSG_SPACE(sizeof(int))];
	} cmsgbuf;
	struct cmsghdr *cmsg;
	struct iovec vec;
	int result = 0;
	ssize_t n;

	memset(&msg, 0, sizeof(msg));

	if (fd >= 0) {
		msg.msg_control = &cmsgbuf.buf;
		msg.msg_controllen = sizeof(cmsgbuf.buf);
		cmsg = CMSG_FIRSTHDR(&msg);
		cmsg->cmsg_len = CMSG_LEN(sizeof(int));
		cmsg->cmsg_level = SOL_SOCKET;
		cmsg->cmsg_type = SCM_RIGHTS;
		*(int *)CMSG_DATA(cmsg) = fd;
	} else {
		result = errno;
	}

	vec.iov_base = &result;
	vec.iov_len = sizeof(int);
	msg.msg_iov = &vec;
	msg.msg_iovlen = 1;

	if ((n = sendmsg(s, &msg, 0)) == -1)
		warn("%s: sendmsg(%d)", __func__, s);
	if (n != sizeof(int))
		warnx("%s: sendmsg: expected sent 1 got %ld",
		    __func__, (long)n);
}

static int
receive_fd(int s)
{
	struct msghdr msg;
	union {
		struct cmsghdr hdr;
		char buf[CMSG_SPACE(sizeof(int))];
	} cmsgbuf;
	struct cmsghdr *cmsg;
	struct iovec vec;
	ssize_t n;
	int result;
	int fd;

	memset(&msg, 0, sizeof(msg));
	vec.iov_base = &result;
	vec.iov_len = sizeof(int);
	msg.msg_iov = &vec;
	msg.msg_iovlen = 1;
	msg.msg_control = &cmsgbuf.buf;
	msg.msg_controllen = sizeof(cmsgbuf.buf);

	do
		n = recvmsg(s, &msg, 0);
	while (n == -1 && errno == EINTR);

	if (n != sizeof(int)) {
		warnx("%s: recvmsg: expected received 1 got %ld",
		    __func__, (long)n);
		return -1;
	}
	if (result == 0) {
		cmsg = CMSG_FIRSTHDR(&msg);
		if (cmsg == NULL) {
			warnx("%s: no message header", __func__);
			return -1;
		}
		if (cmsg->cmsg_type != SCM_RIGHTS)
			warnx("%s: expected type %d got %d", __func__,
			    SCM_RIGHTS, cmsg->cmsg_type);
		fd = (*(int *)CMSG_DATA(cmsg));
		return fd;
	} else {
		errno = result;
		return -1;
	}
}

int
priv_init(uid_t uid, gid_t gid)
{
	int i, fd;
	pid_t pid;
	int socks[2];
	priv_cmd_t cmd;
	struct okdev *dev;

	parent_pid = getppid();

	/* Create sockets */
	if (socketpair(AF_LOCAL, SOCK_STREAM, PF_UNSPEC, socks) == -1) {
		return -1;
	}
	pid = fork();
	if (pid < 0) {
		/* can't fork */
		return -1;
	}
	if (pid != 0) {
		/* Father - drop privileges and return */
		if (setgroups(1, &gid) == -1)
			return -1;
		if (setegid(gid) == -1)
			return -1;
		if (setgid(gid) == -1)
			return -1;
		if (seteuid(uid) == -1)
			return -1;
		if (setuid(uid) == -1)
			return -1;
		close(socks[0]);
		priv_fd = socks[1];
		return 0;
	}
	/* son */
	for (i = 1; i <= _NSIG; i++)
		signal(i, SIG_DFL);
	setproctitle("[priv]");
	close(socks[1]);

	if (pledge("stdio rpath wpath sendfd proc", NULL) == -1)
		err(1, "pledge");

	while (1) {
		if (read(socks[0], &cmd, sizeof(cmd)) == 0) {
			exit(0);
		}
		switch (cmd.cmd) {

		case PRIV_OPEN_DEVICE:
			if ((dev = open_ok(cmd.arg.open.path)) != NULL) {
				fd = open(cmd.arg.open.path, dev->flags);
			} else {
				fd = -1;
				errno = EPERM;
			}
			send_fd(socks[0], fd);
			if (fd >= 0)
				close(fd);
			break;
		case PRIV_SIG_PARENT:
			if (parent_pid > 1)
				kill(parent_pid, SIGUSR1);
			break;
		default:
			errx(1, "%s: unknown command %d", __func__, cmd.cmd);
			break;
		}
	}
	_exit(1);
}

/* Open file */
int
priv_open_device(const char *path)
{
	priv_cmd_t cmd;
	struct okdev *dev;

	if (priv_fd != -1) {
		cmd.cmd = PRIV_OPEN_DEVICE;
		strlcpy(cmd.arg.open.path, path, MAXPATHLEN);
		write(priv_fd, &cmd, sizeof(cmd));
		return receive_fd(priv_fd);
	} else {
		if ((dev = open_ok(path)) != NULL)
			return open(path, dev->flags);
		else {
			errno = EPERM;
			return -1;
		}
	}
}

void
priv_init_parent_process(pid_t ppid)
{
	parent_pid = ppid;
}

/* send signal to parent process */
void
priv_signal_parent(void)
{
	priv_cmd_t cmd;

	if (priv_fd != -1) {
		if (parent_pid == -1)
			warnx("parent_pid == -1\n");
		cmd.cmd = PRIV_SIG_PARENT;
		write(priv_fd, &cmd, sizeof(cmd));
	} else
		if (parent_pid > 1)
			kill(parent_pid, SIGUSR1);
}

#ifdef TEST
/* This is not a complete regression test */
int
main(int argc, char *argv[])
{
	int fd;

	if (priv_init(getuid(), getgid()) < 0) {
		err(1, "priv_init");
	}
	fd = priv_open_device("/dev/wsmouse");
	if (fd < 0) {
		err(1, "priv_open_device");
	}
	write(fd, "test\n", 5);
	close(fd);
	exit(0);
}
#endif
@


1.27
log
@No more /dev/agp0
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.26 2013/08/13 18:14:31 kettenis Exp $ */
d276 3
@


1.26
log
@Handle more /dev/drmN devices.

ok matthieu@@, jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.25 2012/08/14 15:57:57 matthieu Exp $ */
a116 1
	{"/dev/agp0", O_RDWR | O_NONBLOCK | O_EXCL},
@


1.25
log
@In priv_open_device() allow opening tty[E-J]0. While there remove
ttyD[1-7] from the list, since those devices will never get used by X.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.24 2012/08/12 14:06:42 matthieu Exp $ */
d119 3
@


1.24
log
@Fix a logic introducred in rev 1.23. The parent pid is initialized
by the main X server too late in the privsep case (already in the
unpriviliged child). So keep the early init for this case.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.23 2012/08/07 20:16:12 matthieu Exp $ */
d110 6
a115 7
	{"/dev/ttyD1", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyD2", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyD3", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyD4", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyD5", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyD6", O_RDWR | O_NONBLOCK | O_EXCL},
	{"/dev/ttyD7", O_RDWR | O_NONBLOCK | O_EXCL},
@


1.23
log
@Add privsep prototypes to osdep.h
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.22 2012/08/07 20:15:23 matthieu Exp $ */
d126 1
a126 1
open_ok(const char *path) 
d178 1
a178 1
	
d243 2
d264 1
a264 1
		if (setuid(uid) == -1) 
d271 1
a271 1
	for (i = 1; i <= _NSIG; i++) 
d290 1
a290 1
			if (fd >= 0) 
d340 2
a341 4
		if (parent_pid == -1) {
			warnx("parent_pid == -1");
			return -1;
		}
@


1.22
log
@In non-privilege sepration mode, avoid accidentally sending
a SIGUSR1 signal to init(8).

It can happen that xdm dies before the X server that it started.
In that case X's is reparented by init...

This is handled correctly when privilege separation is not compiled
but got overlooked in the privilege separation case.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.21 2012/08/07 20:13:18 matthieu Exp $ */
d52 1
@


1.21
log
@Rename 'socket' parameter to avoid shadowing the global declaration.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.20 2012/06/10 13:21:31 matthieu Exp $ */
a241 2
	parent_pid = getppid();

d291 2
a292 1
			kill(parent_pid, SIGUSR1);
d324 6
d331 1
a331 1
int 
d343 3
a345 3
		return 0;
	} else 
		return kill(getppid(), SIGUSR1);
@


1.20
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.18 2011/08/20 17:30:37 matthieu Exp $ */
d147 1
a147 1
send_fd(int socket, int fd)
d178 2
a179 2
	if ((n = sendmsg(socket, &msg, 0)) == -1)
		warn("%s: sendmsg(%d)", __func__, socket);
d186 1
a186 1
receive_fd(int socket)
d208 1
a208 1
		n = recvmsg(socket, &msg, 0);	
@


1.19
log
@Return an error much earlier if recvmsg fails.
@
text
@d33 4
d50 2
@


1.18
log
@Remove warnings emitted when a device can't be opened. This
is just noise and now happens while the X autoconfiguration
code probes all /dev/wsmouse<n> devices.
If the error matters, the driver will emit a proper error
nevertheless.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.17 2011/01/28 19:37:55 matthieu Exp $ */
d205 1
a205 1
	if (n != sizeof(int))
d208 2
@


1.17
log
@restart recvmsg() if returning with errno==EINTR.
Fixes a crash on server reset on some machines.
Code inspired by ssh, with feedback from guenther@@ and millert@@
ok guenther@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.16 2010/12/22 21:36:05 matthieu Exp $ */
a275 4
				if (fd < 0) {
					warn("%s: open %s", __func__,
					     cmd.arg.open.path);
				}
@


1.16
log
@Bring fix from rev 1.12 back once more. ok oga@@.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.15 2010/12/05 15:36:10 matthieu Exp $ */
d201 4
a204 2
	if ((n = recvmsg(socket, &msg, 0)) == -1)
		warn("%s: recvmsg", __func__);
@


1.15
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.10 2008/08/28 17:50:21 mbalmer Exp $ */
d302 1
d309 8
a316 2
	} else 
		return open(path, O_RDWR | O_NONBLOCK | O_EXCL);
@


1.14
log
@restore version 1.12 of privsep.c which got accidentally reverted
by my xserver 1.6 merge. noticed by oga@@
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.12 2009/07/14 18:25:16 oga Exp $ */
a300 1
	struct okdev *dev;
d308 2
a309 7
	} else if ((dev = open_ok(path)) != NULL) {
		return open(path, dev->flags);
	} else {
		errno = EPERM;
		return -1;
	}
	/* NOTREACHED */
@


1.13
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.10 2008/08/28 17:50:21 mbalmer Exp $ */
d301 1
d309 7
a315 2
	} else 
		return open(path, O_RDWR | O_NONBLOCK | O_EXCL);
@


1.12
log
@Make the !privsep and privsep paths a little more similar (still
checking the list), this allows drm to work in -keepPriv situations.

This diff has been in my tree awaiting proper testing for months, now
i'm sure it works correctly in it goes.

ok matthieu@@ an aeon ago.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.11 2008/11/02 15:26:33 matthieu Exp $ */
a300 1
	struct okdev *dev;
d308 2
a309 7
	} else if ((dev = open_ok(path)) != NULL) {
		return open(path, dev->flags);
	} else {
		errno = EPERM;
		return -1;
	}
	/* NOTREACHED */
@


1.11
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.10 2008/08/28 17:50:21 mbalmer Exp $ */
d301 1
d309 7
a315 2
	} else 
		return open(path, O_RDWR | O_NONBLOCK | O_EXCL);
@


1.10
log
@Add /dev/tty04 to the list of devices privilege separated X can open.
(The IBM SurePos 500 has six serial lines and the touch screen is at
this device).

ok oga@@
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.9 2008/06/15 00:17:33 matthieu Exp $ */
a301 1
	struct okdev *dev;
@


1.9
log
@Update to xserver 1.4.2. Tested by landry@@, ckuethe@@, jsing@@ mbalmer@@.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.8 2008/06/14 21:37:13 mbalmer Exp $ */
d84 1
@


1.8
log
@Add amdmsr(4) to the list of privsep devices.

ok matthieu
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.7 2008/06/12 22:20:24 oga Exp $ */
d301 1
@


1.7
log
@change /dev/dri/card0 to /dev/drm0. Subdirs in /dev considered
irritating.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.6 2008/06/12 18:50:19 oga Exp $ */
d112 1
@


1.6
log
@Deal with devices that need to be opened differently to what we do in
privsep ( O_NONBLOCK | O_RDWR | O_EXCL) by turning the list of allowed
devices into a struct, with the flags we're supposed to use, then using
these values with open(). Add /dev/dri/card0 there too (more'll be needed to be
added when it matters).

This gives privsep with dri a chance to work.

ok matthieu
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.5 2008/03/24 21:24:52 matthieu Exp $ */
d111 1
a111 1
	{"/dev/dri/card0", O_RDWR },
@


1.5
log
@msg_controllen has to be CMSG_SPACE so that the kernel can account for
each cmsg_len (ie. msg_controllen = sum of CMSG_ALIGN(cmsg_len).  This
works now that kernel fd passing has been fixed to accept a bit of
sloppiness because of this ABI repair.
lots of discussion with kettenis. From deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.4 2008/03/15 17:14:11 matthieu Exp $ */
d66 4
a69 1
static const char * const allowed_devices[] = {
d71 42
a112 41
	"/dev/wsmouse",
	"/dev/wsmouse0",
	"/dev/wsmouse1",
	"/dev/wsmouse2",
	"/dev/wsmouse3",
	"/dev/uhid0",
	"/dev/uhid1",
	"/dev/uhid2",
	"/dev/uhid3",
	"/dev/tty00",
	"/dev/tty01",
	"/dev/tty02",
	"/dev/tty03",
	"/dev/ttya",
	"/dev/ttyb",
	"/dev/ttyc",
	"/dev/ttyd",
	"/dev/wskbd",
	"/dev/wskbd0",
	"/dev/wskbd1",
	"/dev/wskbd2",
	"/dev/wskbd3",
	"/dev/ttyC0",
	"/dev/ttyC1",
	"/dev/ttyC2",
	"/dev/ttyC3",
	"/dev/ttyC4",
	"/dev/ttyC5",
	"/dev/ttyC6",
	"/dev/ttyC7",
	"/dev/ttyD0",
	"/dev/ttyD1",
	"/dev/ttyD2",
	"/dev/ttyD3",
	"/dev/ttyD4",
	"/dev/ttyD5",
	"/dev/ttyD6",
	"/dev/ttyD7",
	"/dev/pci",
	"/dev/agp0",
	NULL
d116 1
a116 1
static int
d119 1
a119 1
	const char * const *p;
d122 2
a123 2
	for (p = allowed_devices; *p != NULL; p++) {
		if (strcmp(path, *p) == 0) {
d126 1
a126 1
				return 0;
d130 1
a130 1
				return 1;
d135 1
a135 1
	return 0;
d228 1
d270 2
a271 3
			if (open_ok(cmd.arg.open.path)) {
				fd = open(cmd.arg.open.path, 
					  O_RDWR | O_NONBLOCK | O_EXCL);
@


1.4
log
@Repair msg_controllen. In those cases it should just be
CMSG_SIZE(sizeof(int)), not sizeof(buffer) which may be larger because
of alignment. Based on fixes in base system.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.3 2008/03/13 06:53:06 matthieu Exp $ */
d151 1
a151 1
		msg.msg_controllen = CMSG_LEN(sizeof(int));
d193 1
a193 1
	msg.msg_controllen = CMSG_LEN(sizeof(int));
@


1.3
log
@Correct CMSG_SPACE and CMSG_LEN usage, same fixes as in the base system.
ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.2 2007/11/25 18:41:23 matthieu Exp $ */
d151 1
a151 1
		msg.msg_controllen = sizeof(cmsgbuf.buf);
d193 1
a193 1
	msg.msg_controllen = sizeof(cmsgbuf.buf);
@


1.2
log
@Support the new AGP device. Work by oga@@ and me, with some ideas from
dim@@ long ago.
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.1 2006/11/28 20:29:32 matthieu Exp $ */
d138 4
a141 1
	char tmp[CMSG_SPACE(sizeof(int))];
d150 2
a151 2
		msg.msg_control = (caddr_t)tmp;
		msg.msg_controllen = CMSG_LEN(sizeof(int));
d177 4
a180 1
	char tmp[CMSG_SPACE(sizeof(int))];
d192 2
a193 2
	msg.msg_control = tmp;
	msg.msg_controllen = sizeof(tmp);
@


1.1
log
@OpenBSD local modifications:
- privilege separation
- some snprintf/strlc{at,py} conversions
- support for more architectures
- signal handler fixes
- default mouse wheel support in config tools
- sunmouse protocol
@
text
@d1 1
a1 1
/* $OpenBSD: privsep.c,v 1.7 2006/03/20 20:14:13 matthieu Exp $ */
d107 1
@

