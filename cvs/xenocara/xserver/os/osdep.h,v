head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.10
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.8
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2017.02.28.18.32.53;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	6xpw3GnpAs1ESHxb;

1.11
date	2016.05.29.12.02.40;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	s0SI41sEunLdyFfd;

1.10
date	2015.09.16.19.10.25;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	Te1daavkBLskZ8gc;

1.9
date	2013.06.07.17.28.55;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.08.07.20.16.12;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.08;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.57.13;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@auth: remove AuthToIDFunc and associated functions. Not used anymore.
And the current code for MitToId has a use-after-free() issue.
Advisory X41-2017-001: Multiple Vulnerabilities in X.Org
@
text
@/***********************************************************

Copyright 1987, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#ifndef _OSDEP_H_
#define _OSDEP_H_ 1

#if defined(XDMCP) || defined(HASXDMAUTH)
#include <X11/Xdmcp.h>
#endif

#ifdef _POSIX_SOURCE
#include <limits.h>
#else
#define _POSIX_SOURCE
#include <limits.h>
#undef _POSIX_SOURCE
#endif

#ifndef OPEN_MAX
#ifdef SVR4
#define OPEN_MAX 512
#else
#include <sys/param.h>
#ifndef OPEN_MAX
#if defined(NOFILE) && !defined(NOFILES_MAX)
#define OPEN_MAX NOFILE
#else
#if !defined(WIN32) || defined(__CYGWIN__)
#define OPEN_MAX NOFILES_MAX
#else
#define OPEN_MAX 512
#endif
#endif
#endif
#endif
#endif

#include <X11/Xpoll.h>

/*
 * MAXSOCKS is used only for initialising MaxClients when no other method
 * like sysconf(_SC_OPEN_MAX) is not supported.
 */

#if OPEN_MAX <= 512
#define MAXSOCKS (OPEN_MAX - 1)
#else
#define MAXSOCKS 512
#endif

/* MAXSELECT is the number of fds that select() can handle */
#define MAXSELECT (sizeof(fd_set) * NBBY)

#include <stddef.h>

#if defined(XDMCP) || defined(HASXDMAUTH)
typedef Bool (*ValidatorFunc) (ARRAY8Ptr Auth, ARRAY8Ptr Data, int packet_type);
typedef Bool (*GeneratorFunc) (ARRAY8Ptr Auth, ARRAY8Ptr Data, int packet_type);
typedef Bool (*AddAuthorFunc) (unsigned name_length, const char *name,
                               unsigned data_length, char *data);
#endif

typedef struct _connectionInput *ConnectionInputPtr;
typedef struct _connectionOutput *ConnectionOutputPtr;

struct _osComm;

#define AuthInitArgs void
typedef void (*AuthInitFunc) (AuthInitArgs);

#define AuthAddCArgs unsigned short data_length, const char *data, XID id
typedef int (*AuthAddCFunc) (AuthAddCArgs);

#define AuthCheckArgs unsigned short data_length, const char *data, ClientPtr client, const char **reason
typedef XID (*AuthCheckFunc) (AuthCheckArgs);

#define AuthFromIDArgs XID id, unsigned short *data_lenp, char **datap
typedef int (*AuthFromIDFunc) (AuthFromIDArgs);

#define AuthGenCArgs unsigned data_length, const char *data, XID id, unsigned *data_length_return, char **data_return
typedef XID (*AuthGenCFunc) (AuthGenCArgs);

#define AuthRemCArgs unsigned short data_length, const char *data
typedef int (*AuthRemCFunc) (AuthRemCArgs);

#define AuthRstCArgs void
typedef int (*AuthRstCFunc) (AuthRstCArgs);

typedef void (*OsCloseFunc) (ClientPtr);

typedef int (*OsFlushFunc) (ClientPtr who, struct _osComm * oc, char *extraBuf,
                            int extraCount);

typedef struct _osComm {
    int fd;
    ConnectionInputPtr input;
    ConnectionOutputPtr output;
    XID auth_id;                /* authorization id */
    CARD32 conn_time;           /* timestamp if not established, else 0  */
    struct _XtransConnInfo *trans_conn; /* transport connection object */
} OsCommRec, *OsCommPtr;

extern int FlushClient(ClientPtr /*who */ ,
                       OsCommPtr /*oc */ ,
                       const void * /*extraBuf */ ,
                       int      /*extraCount */
    );

extern void FreeOsBuffers(OsCommPtr     /*oc */
    );

#include "dix.h"

extern fd_set AllSockets;
extern fd_set AllClients;
extern fd_set LastSelectMask;
extern fd_set WellKnownConnections;
extern fd_set EnabledDevices;
extern fd_set ClientsWithInput;
extern fd_set ClientsWriteBlocked;
extern fd_set OutputPending;
extern fd_set IgnoredClientsWithInput;

#if !defined(WIN32) || defined(__CYGWIN__)
extern int *ConnectionTranslation;
#else
extern int GetConnectionTranslation(int conn);
extern void SetConnectionTranslation(int conn, int client);
extern void ClearConnectionTranslation(void);
#endif

extern Bool NewOutputPending;
extern Bool AnyClientsWriteBlocked;

extern WorkQueuePtr workQueue;

/* in WaitFor.c */
#if defined(WIN32) && !defined(__CYGWIN__)
typedef long int fd_mask;
#endif
#define ffs mffs
extern int mffs(fd_mask);

/* in access.c */
extern Bool ComputeLocalClient(ClientPtr client);

/* in auth.c */
extern void GenerateRandomData(int len, char *buf);

/* in mitauth.c */
extern XID MitCheckCookie(AuthCheckArgs);
extern XID MitGenerateCookie(AuthGenCArgs);
extern int MitAddCookie(AuthAddCArgs);
extern int MitFromID(AuthFromIDArgs);
extern int MitRemoveCookie(AuthRemCArgs);
extern int MitResetCookie(AuthRstCArgs);

/* in xdmauth.c */
#ifdef HASXDMAUTH
extern XID XdmCheckCookie(AuthCheckArgs);
extern int XdmAddCookie(AuthAddCArgs);
extern int XdmFromID(AuthFromIDArgs);
extern int XdmRemoveCookie(AuthRemCArgs);
extern int XdmResetCookie(AuthRstCArgs);
#endif

/* in rpcauth.c */
#ifdef SECURE_RPC
extern void SecureRPCInit(AuthInitArgs);
extern XID SecureRPCCheck(AuthCheckArgs);
extern int SecureRPCAdd(AuthAddCArgs);
extern int SecureRPCFromID(AuthFromIDArgs);
extern int SecureRPCRemove(AuthRemCArgs);
extern int SecureRPCReset(AuthRstCArgs);
#endif

#ifdef XDMCP
/* in xdmcp.c */
extern void XdmcpUseMsg(void);
extern int XdmcpOptions(int argc, char **argv, int i);
extern void XdmcpRegisterConnection(int type, const char *address, int addrlen);
extern void XdmcpRegisterAuthorizations(void);
extern void XdmcpRegisterAuthorization(const char *name, int namelen);
extern void XdmcpInit(void);
extern void XdmcpReset(void);
extern void XdmcpOpenDisplay(int sock);
extern void XdmcpCloseDisplay(int sock);
extern void XdmcpRegisterAuthentication(const char *name,
                                        int namelen,
                                        const char *data,
                                        int datalen,
                                        ValidatorFunc Validator,
                                        GeneratorFunc Generator,
                                        AddAuthorFunc AddAuth);

struct sockaddr_in;
extern void XdmcpRegisterBroadcastAddress(const struct sockaddr_in *addr);
#endif

#ifdef HASXDMAUTH
extern void XdmAuthenticationInit(const char *cookie, int cookie_length);
#endif

#ifdef X_PRIVSEP
extern int priv_init(uid_t, gid_t);
extern int priv_open_device(const char *);
extern void priv_init_parent_process(pid_t);
extern void priv_signal_parent(void);
#endif

#endif                          /* _OSDEP_H_ */
@


1.11
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@a135 3
#define AuthToIDArgs unsigned short data_length, char *data
typedef XID (*AuthToIDFunc) (AuthToIDArgs);

a199 1
extern XID MitToID(AuthToIDArgs);
a207 1
extern XID XdmToID(AuthToIDArgs);
a217 1
extern XID SecureRPCToID(AuthToIDArgs);
@


1.10
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d68 1
a68 1
#define OPEN_MAX 256
d75 1
a75 1
#if !defined(WIN32)
d78 1
a78 1
#define OPEN_MAX 256
d92 1
a92 1
#if OPEN_MAX <= 256
d95 1
a95 1
#define MAXSOCKS 256
d174 1
a174 1
#ifndef WIN32
d188 1
a188 1
#ifdef WIN32
@


1.9
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d29 2
a30 2
Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
d32 1
a32 1
both that copyright notice and this permission notice appear in 
d35 1
a35 1
software without specific, written prior permission.  
@


1.8
log
@Add privsep prototypes to osdep.h
@
text
@d110 2
a111 16
typedef struct _connectionInput {
    struct _connectionInput *next;
    char *buffer;               /* contains current client input */
    char *bufptr;               /* pointer to current start of data */
    int bufcnt;                 /* count of bytes in buffer */
    int lenLastReq;
    int size;
    unsigned int ignoreBytes;   /* bytes to ignore before the next request */
} ConnectionInput, *ConnectionInputPtr;

typedef struct _connectionOutput {
    struct _connectionOutput *next;
    int size;
    unsigned char *buf;
    int count;
} ConnectionOutput, *ConnectionOutputPtr;
a150 1
    Bool local_client;
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d272 7
@


1.6
log
@Update to xserver 1.11.2
@
text
@a24 1

a53 4
#define BOTIMEOUT 200 /* in milliseconds */
#define BUFSIZE 4096
#define BUFWATERMARK 8192

a100 6
#ifndef HAS_GETDTABLESIZE
#if !defined(SVR4) && !defined(SYSV)
#define HAS_GETDTABLESIZE
#endif
#endif

d104 4
a107 4
typedef Bool (*ValidatorFunc)(ARRAY8Ptr Auth, ARRAY8Ptr Data, int packet_type);
typedef Bool (*GeneratorFunc)(ARRAY8Ptr Auth, ARRAY8Ptr Data, int packet_type);
typedef Bool (*AddAuthorFunc)(unsigned name_length, const char *name,
			      unsigned data_length, char *data);
d114 1
a114 1
    int  bufcnt;                /* count of bytes in buffer */
d135 1
a135 1
#define AuthCheckArgs unsigned short data_length, const char *data, ClientPtr client, char **reason
d153 1
a153 1
typedef void (*OsCloseFunc)(ClientPtr);
d155 2
a156 1
typedef int (*OsFlushFunc)(ClientPtr who, struct _osComm * oc, char* extraBuf, int extraCount);
d162 2
a163 2
    XID	auth_id;		/* authorization id */
    CARD32 conn_time;		/* timestamp if not established, else 0  */
d168 8
a175 10
extern int FlushClient(
    ClientPtr /*who*/,
    OsCommPtr /*oc*/,
    const void * /*extraBuf*/,
    int /*extraCount*/
);

extern void FreeOsBuffers(
    OsCommPtr /*oc*/
);
d196 1
a196 1
 
d213 1
a213 1
extern void GenerateRandomData (int len, char *buf);
d216 7
a222 7
extern XID  MitCheckCookie    (AuthCheckArgs);
extern XID  MitGenerateCookie (AuthGenCArgs);
extern XID  MitToID           (AuthToIDArgs);
extern int  MitAddCookie      (AuthAddCArgs);
extern int  MitFromID         (AuthFromIDArgs);
extern int  MitRemoveCookie   (AuthRemCArgs);
extern int  MitResetCookie    (AuthRstCArgs);
d226 6
a231 6
extern XID  XdmCheckCookie    (AuthCheckArgs);
extern XID  XdmToID           (AuthToIDArgs);
extern int  XdmAddCookie      (AuthAddCArgs);
extern int  XdmFromID         (AuthFromIDArgs);
extern int  XdmRemoveCookie   (AuthRemCArgs);
extern int  XdmResetCookie    (AuthRstCArgs);
d236 7
a242 7
extern void SecureRPCInit     (AuthInitArgs);
extern XID  SecureRPCCheck    (AuthCheckArgs);
extern XID  SecureRPCToID     (AuthToIDArgs);
extern int  SecureRPCAdd      (AuthAddCArgs);
extern int  SecureRPCFromID   (AuthFromIDArgs);
extern int  SecureRPCRemove   (AuthRemCArgs);
extern int  SecureRPCReset    (AuthRstCArgs);
d247 1
a247 1
extern void XdmcpUseMsg (void);
d249 5
a253 8
extern void XdmcpRegisterConnection (
    int	    type,
    const char    *address,
    int	    addrlen);
extern void XdmcpRegisterAuthorizations (void);
extern void XdmcpRegisterAuthorization (const char *name, int namelen);
extern void XdmcpInit (void);
extern void XdmcpReset (void);
d256 7
a262 8
extern void XdmcpRegisterAuthentication (
    const char    *name,
    int	    namelen,
    const char    *data,
    int	    datalen,
    ValidatorFunc Validator,
    GeneratorFunc Generator,
    AddAuthorFunc AddAuth);
d265 1
a265 1
extern void XdmcpRegisterBroadcastAddress (const struct sockaddr_in *addr);
d269 1
a269 1
extern void XdmAuthenticationInit (const char *cookie, int cookie_length);
d272 1
a272 1
#endif /* _OSDEP_H_ */
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d175 1
d220 3
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d117 2
a118 1
typedef Bool (*AddAuthorFunc)(unsigned name_length, char *name, unsigned data_length, char *data);
d128 1
d143 1
a143 1
#define AuthAddCArgs unsigned short data_length, char *data, XID id
d146 1
a146 1
#define AuthCheckArgs unsigned short data_length, char *data, ClientPtr client, char **reason
d152 1
a152 1
#define AuthGenCArgs unsigned data_length, char *data, XID id, unsigned *data_length_return, char **data_return
d155 1
a155 1
#define AuthRemCArgs unsigned short data_length, char *data
d259 1
a259 1
    char    *address,
d262 1
a262 1
extern void XdmcpRegisterAuthorization (char *name, int namelen);
d268 1
a268 1
    char    *name,
d270 1
a270 1
    char    *data,
d277 1
a277 1
extern void XdmcpRegisterBroadcastAddress (struct sockaddr_in *addr);
d281 1
a281 1
extern void XdmAuthenticationInit (char *cookie, int cookie_length);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d59 1
d61 1
d114 1
d118 1
d203 1
a203 1
extern void ClearConnectionTranslation();
d211 1
a211 1
/* added by raphael */
d251 1
d276 1
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a60 2
#ifndef sgi	    /* SGI defines OPEN_MAX in a useless way */
#ifndef X_NOT_POSIX
a67 8
#else /* X_NOT_POSIX */
#ifdef WIN32
#define _POSIX_
#include <limits.h>
#undef _POSIX_
#endif
#endif /* X_NOT_POSIX */
#endif
a68 3
#ifdef __QNX__
#define NOFILES_MAX 256
#endif
d105 1
a105 1
#if !defined(hpux) && !defined(SVR4) && !defined(SYSV)
d174 1
a174 1
    char* /*extraBuf*/,
@


1.1
log
@Initial revision
@
text
@a57 3
#ifndef MAXBUFSIZE
#define MAXBUFSIZE (1 << 22)
#endif
d91 1
a91 1
#if !defined(__UNIXOS2__) && !defined(WIN32)
a144 10
#ifdef K5AUTH
typedef struct _k5_state {
    int		stageno;	/* current stage of auth protocol */
    pointer	srvcreds;	/* server credentials */
    pointer	srvname;	/* server principal name */
    pointer	ktname;		/* key table: principal-key pairs */
    pointer	skey;		/* session key */
}           k5_state;
#endif

a179 3
#ifdef K5AUTH
    k5_state	authstate;	/* state of setup auth conversation */
#endif
a196 4
extern ConnectionInputPtr AllocateInputBuffer(void);

extern ConnectionOutputPtr AllocateOutputBuffer(void);

a216 6
extern Bool CriticalOutputPending;

extern int timesThisConnection;
extern ConnectionInputPtr FreeInputs;
extern ConnectionOutputPtr FreeOutputs;
extern OsCommPtr AvailableInput;
a259 13
/* in k5auth.c */
#ifdef K5AUTH
extern XID  K5Check           (AuthCheckArgs);
extern XID  K5ToID            (AuthToIDArgs);
extern int  K5Add             (AuthAddCArgs);
extern int  K5FromID          (AuthFromIDArgs);
extern int  K5Remove          (AuthRemCArgs);
extern int  K5Reset           (AuthRstCArgs);
#endif

/* in secauth.c */
extern XID AuthSecurityCheck (AuthCheckArgs);

a262 1
extern void XdmcpSetAuthentication (ARRAY8Ptr name);
a268 1
extern void XdmcpRegisterDisplayClass (char *name, int length);
a280 2
extern int XdmcpCheckAuthentication (ARRAY8Ptr Name, ARRAY8Ptr Data, int packet_type);
extern int XdmcpAddAuthorization (ARRAY8Ptr name, ARRAY8Ptr data);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d58 3
d94 1
a94 1
#if !defined(WIN32)
d148 10
d193 3
d213 4
d237 6
d286 10
d302 1
d309 1
d322 2
@

