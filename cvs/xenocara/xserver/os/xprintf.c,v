head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.22
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.20
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.06;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/**
 * @@file
 *
 * @@section DESCRIPTION
 *
 * These functions provide a portable implementation of the common (but not
 * yet universal) asprintf & vasprintf routines to allocate a buffer big
 * enough to sprintf the arguments to.  The XNF variants terminate the server
 * if the allocation fails.
 */
/*
 * Copyright (c) 2004 Alexander Gottwald
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the sale,
 * use or other dealings in this Software without prior written authorization.
 */
/*
 * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <X11/Xos.h>
#include "os.h"
#include <stdarg.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>

#ifdef asprintf
#undef asprintf
#endif
#ifdef vasprintf
#undef vasprintf
#endif

#ifndef va_copy
#ifdef __va_copy
#define va_copy __va_copy
#else
#error "no working va_copy was found"
#endif
#endif

/**
 * Varargs sprintf that allocates a string buffer the right size for
 * the pattern & data provided and prints the requested data to it.
 *
 * @@param ret     Pointer to which the newly allocated buffer is written
 *                (contents undefined on error)
 * @@param format  printf style format string
 * @@param va      variable argument list
 * @@return        size of allocated buffer, or -1 on error.
 */
int
Xvasprintf(char **ret, const char *_X_RESTRICT_KYWD format, va_list va)
{
#ifdef HAVE_VASPRINTF
    return vasprintf(ret, format, va);
#else
    int size;
    va_list va2;

    va_copy(va2, va);
    size = vsnprintf(NULL, 0, format, va2);
    va_end(va2);

    *ret = malloc(size + 1);
    if (*ret == NULL)
        return -1;

    vsnprintf(*ret, size + 1, format, va);
    (*ret)[size] = 0;
    return size;
#endif
}

#ifndef HAVE_VASPRINTF
#define vasprintf Xvasprintf
#endif

/**
 * sprintf that allocates a string buffer the right size for
 * the pattern & data provided and prints the requested data to it.
 *
 * @@param ret     Pointer to which the newly allocated buffer is written
 *                (contents undefined on error)
 * @@param format  printf style format string
 * @@param ...     arguments for specified format
 * @@return        size of allocated buffer, or -1 on error.
 */
int
Xasprintf(char **ret, const char *_X_RESTRICT_KYWD format, ...)
{
    int size;
    va_list va;

    va_start(va, format);
    size = vasprintf(ret, format, va);
    va_end(va);
    return size;
}

/**
 * Varargs sprintf that allocates a string buffer the right size for
 * the pattern & data provided and prints the requested data to it.
 * On failure, issues a FatalError message and aborts the server.
 *
 * @@param ret     Pointer to which the newly allocated buffer is written
 *                (contents undefined on error)
 * @@param format  printf style format string
 * @@param va      variable argument list
 * @@return        size of allocated buffer
 */
int
XNFvasprintf(char **ret, const char *_X_RESTRICT_KYWD format, va_list va)
{
    int size = vasprintf(ret, format, va);

    if ((size == -1) || (*ret == NULL)) {
        FatalError("XNFvasprintf failed: %s", strerror(errno));
    }
    return size;
}

/**
 * sprintf that allocates a string buffer the right size for
 * the pattern & data provided and prints the requested data to it.
 * On failure, issues a FatalError message and aborts the server.
 *
 * @@param ret     Pointer to which the newly allocated buffer is written
 *                (contents undefined on error)
 * @@param format  printf style format string
 * @@param ...     arguments for specified format
 * @@return        size of allocated buffer
 */
int
XNFasprintf(char **ret, const char *_X_RESTRICT_KYWD format, ...)
{
    int size;
    va_list va;

    va_start(va, format);
    size = XNFvasprintf(ret, format, va);
    va_end(va);
    return size;
}

/**
 * Varargs snprintf that returns the actual number of bytes (excluding final
 * '\0') that were copied into the buffer.
 * This is opposed to the normal sprintf() usually returns the number of bytes
 * that would have been written.
 *
 * @@param s       buffer to copy into
 * @@param n       size of buffer s
 * @@param format  printf style format string
 * @@param va      variable argument list
 * @@return        number of bytes actually copied, excluding final '\0'
 */
int
Xvscnprintf(char *s, int n, const char *format, va_list args)
{
    int x;
    if (n == 0)
        return 0;
    x = vsnprintf(s, n , format, args);
    return (x >= n) ? (n - 1) : x;
}

/**
 * snprintf that returns the actual number of bytes (excluding final '\0') that
 * were copied into the buffer.
 * This is opposed to the normal sprintf() usually returns the number of bytes
 * that would have been written.
 *
 * @@param s       buffer to copy into
 * @@param n       size of buffer s
 * @@param format  printf style format string
 * @@param ...     arguments for specified format
 * @@return        number of bytes actually copied, excluding final '\0'
 */
int Xscnprintf(char *s, int n, const char *format, ...)
{
    int x;
    va_list ap;
    va_start(ap, format);
    x = Xvscnprintf(s, n, format, ap);
    va_end(ap);
    return x;
}

/* Old api, now deprecated, may be removed in the future */
char *
Xvprintf(const char *format, va_list va)
{
    char *ret;

    if (vasprintf(&ret, format, va) == -1)
        ret = NULL;

    return ret;
}

char *
Xprintf(const char *format, ...)
{
    char *ret;
    va_list va;

    va_start(va, format);
    if (vasprintf(&ret, format, va) == -1)
        ret = NULL;
    va_end(va);
    return ret;
}

char *
XNFvprintf(const char *format, va_list va)
{
    char *ret;

    XNFvasprintf(&ret, format, va);

    return ret;
}

char *
XNFprintf(const char *format, ...)
{
    char *ret;
    va_list va;

    va_start(va, format);
    XNFvasprintf(&ret, format, va);
    va_end(va);
    return ret;
}
@


1.3
log
@Update to xserver 1.11.2
@
text
@d67 2
d71 1
a71 1
# undef asprintf
d74 1
a74 1
# undef vasprintf
d78 5
a82 5
# ifdef __va_copy
#  define va_copy __va_copy
# else
#  error "no working va_copy was found"
# endif
d96 1
a96 1
Xvasprintf(char **ret, const char * _X_RESTRICT_KYWD format, va_list va)
d119 1
a119 1
# define vasprintf Xvasprintf
d133 1
a133 1
Xasprintf(char ** ret, const char * _X_RESTRICT_KYWD format, ...)
d137 1
d156 1
a156 1
XNFvasprintf(char **ret, const char * _X_RESTRICT_KYWD format, va_list va)
d159 1
d161 1
a161 2
	Error("XNFvasprintf");
	FatalError("XNFvasprintf failed");
d178 1
a178 1
XNFasprintf(char ** ret, const char * _X_RESTRICT_KYWD format, ...)
d182 1
d189 44
d240 1
a240 1
	ret = NULL;
d245 2
a246 1
char *Xprintf(const char *format, ...)
d250 1
d253 1
a253 1
	ret = NULL;
d268 2
a269 1
char *XNFprintf(const char *format, ...)
d273 1
@


1.2
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d1 10
a10 3
/* 
 * printf routines which xalloc their buffer
 */ 
d36 23
d68 7
d82 13
a94 3
    
char *
Xvprintf(const char *format, va_list va)
d96 3
a98 1
    char *ret;
d106 87
a192 3
    ret = (char *)malloc(size + 1);
    if (ret == NULL)
        return NULL;
a193 2
    vsnprintf(ret, size + 1, format, va);
    ret[size] = 0;
d202 2
a203 1
    ret = Xvprintf(format, va);
a211 6
    int size;
    va_list va2;

    va_copy(va2, va);
    size = vsnprintf(NULL, 0, format, va2);
    va_end(va2);
d213 1
a213 3
    ret = (char *)xnfalloc(size + 1);
    if (ret == NULL)
        return NULL;
a214 2
    vsnprintf(ret, size + 1, format, va);
    ret[size] = 0;
d223 1
a223 1
    ret = XNFvprintf(format, va);
@


1.1
log
@Initial revision
@
text
@d57 1
a57 1
    ret = (char *)Xalloc(size + 1);
d87 1
a87 1
    ret = (char *)XNFalloc(size + 1);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
