head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2017.02.28.23.05.46;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	nkyHp6MD1y4dj2qR;

1.5
date	2017.02.28.18.24.48;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	KVkYmnzwAoL0WgJg;

1.4
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.06;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Oops, in previous commit I forgot to remove the actual implementation
of the unused *ToID functions(). Spotted by Adam Jackson on xorg-devel
list.  Thanks.
@
text
@/*

Copyright 1988, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.

*/

/*
 * MIT-MAGIC-COOKIE-1 authorization scheme
 * Author:  Keith Packard, MIT X Consortium
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <X11/X.h>
#include "os.h"
#include "osdep.h"
#include "dixstruct.h"

static struct auth {
    struct auth *next;
    unsigned short len;
    char *data;
    XID id;
} *mit_auth;

int
MitAddCookie(unsigned short data_length, const char *data, XID id)
{
    struct auth *new;

    new = malloc(sizeof(struct auth));
    if (!new)
        return 0;
    new->data = malloc((unsigned) data_length);
    if (!new->data) {
        free(new);
        return 0;
    }
    new->next = mit_auth;
    mit_auth = new;
    memmove(new->data, data, (int) data_length);
    new->len = data_length;
    new->id = id;
    return 1;
}

XID
MitCheckCookie(unsigned short data_length,
               const char *data, ClientPtr client, const char **reason)
{
    struct auth *auth;

    for (auth = mit_auth; auth; auth = auth->next) {
        if (data_length == auth->len &&
            timingsafe_memcmp(data, auth->data, (int) data_length) == 0)
            return auth->id;
    }
    *reason = "Invalid MIT-MAGIC-COOKIE-1 key";
    return (XID) -1;
}

int
MitResetCookie(void)
{
    struct auth *auth, *next;

    for (auth = mit_auth; auth; auth = next) {
        next = auth->next;
        free(auth->data);
        free(auth);
    }
    mit_auth = 0;
    return 0;
}

int
MitFromID(XID id, unsigned short *data_lenp, char **datap)
{
    struct auth *auth;

    for (auth = mit_auth; auth; auth = auth->next) {
        if (id == auth->id) {
            *data_lenp = auth->len;
            *datap = auth->data;
            return 1;
        }
    }
    return 0;
}

int
MitRemoveCookie(unsigned short data_length, const char *data)
{
    struct auth *auth, *prev;

    prev = 0;
    for (auth = mit_auth; auth; prev = auth, auth = auth->next) {
        if (data_length == auth->len &&
            memcmp(data, auth->data, data_length) == 0) {
            if (prev)
                prev->next = auth->next;
            else
                mit_auth = auth->next;
            free(auth->data);
            free(auth);
            return 1;
        }
    }
    return 0;
}

#ifdef XCSECURITY

static char cookie[16];         /* 128 bits */

XID
MitGenerateCookie(unsigned data_length,
                  const char *data,
                  XID id, unsigned *data_length_return, char **data_return)
{
    int i = 0;
    int status;

    while (data_length--) {
        cookie[i++] += *data++;
        if (i >= sizeof(cookie))
            i = 0;
    }
    GenerateRandomData(sizeof(cookie), cookie);
    status = MitAddCookie(sizeof(cookie), cookie, id);
    if (!status) {
        id = -1;
    }
    else {
        *data_return = cookie;
        *data_length_return = sizeof(cookie);
    }
    return id;
}

#endif                          /* XCSECURITY */
@


1.5
log
@MFC: Use timingsafe_memcmp() to compare MIT-MAGIC-COOKIES
Advisory X41-2017-001: Multiple Vulnerabilities in X.Org.
@
text
@a99 13
XID
MitToID(unsigned short data_length, char *data)
{
    struct auth *auth;

    for (auth = mit_auth; auth; auth = auth->next) {
        if (data_length == auth->len &&
            memcmp(data, auth->data, data_length) == 0)
            return auth->id;
    }
    return (XID) -1;
}

@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d79 1
a79 1
            memcmp(data, auth->data, (int) data_length) == 0)
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d44 4
a47 4
    struct auth	*next;
    unsigned short	len;
    char	*data;
    XID		id;
d51 1
a51 4
MitAddCookie (
    unsigned short	data_length,
    const char		*data,
    XID			id)
d53 1
a53 1
    struct auth	*new;
d55 1
a55 1
    new = malloc(sizeof (struct auth));
d57 1
a57 1
	return 0;
d60 2
a61 2
	free(new);
	return 0;
d72 2
a73 5
MitCheckCookie (
    unsigned short	data_length,
    const char		*data,
    ClientPtr		client,
    char		**reason)
d75 1
a75 1
    struct auth	*auth;
d77 1
a77 1
    for (auth = mit_auth; auth; auth=auth->next) {
d79 2
a80 2
	   memcmp (data, auth->data, (int) data_length) == 0)
	    return auth->id;
d87 1
a87 1
MitResetCookie (void)
d89 1
a89 1
    struct auth	*auth, *next;
d91 4
a94 4
    for (auth = mit_auth; auth; auth=next) {
	next = auth->next;
	free(auth->data);
	free(auth);
d101 8
a108 10
MitToID (
	unsigned short	data_length,
	char		*data)
{
    struct auth	*auth;

    for (auth = mit_auth; auth; auth=auth->next) {
	if (data_length == auth->len &&
	    memcmp (data, auth->data, data_length) == 0)
	    return auth->id;
d114 10
a123 13
MitFromID (
	XID		id,
	unsigned short	*data_lenp,
	char		**datap)
{
    struct auth	*auth;

    for (auth = mit_auth; auth; auth=auth->next) {
	if (id == auth->id) {
	    *data_lenp = auth->len;
	    *datap = auth->data;
	    return 1;
	}
d129 1
a129 3
MitRemoveCookie (
	unsigned short	data_length,
	const char	*data)
d131 1
a131 1
    struct auth	*auth, *prev;
d134 11
a144 12
    for (auth = mit_auth; auth; prev = auth, auth=auth->next) {
	if (data_length == auth->len &&
	    memcmp (data, auth->data, data_length) == 0)
 	{
	    if (prev)
		prev->next = auth->next;
	    else
		mit_auth = auth->next;
	    free(auth->data);
	    free(auth);
	    return 1;
	}
d151 1
a151 1
static char cookie[16]; /* 128 bits */
d154 3
a156 6
MitGenerateCookie (
    unsigned	data_length,
    const char	*data,
    XID		id,
    unsigned	*data_length_return,
    char	**data_return)
d161 13
a173 15
    while (data_length--)
    {
	cookie[i++] += *data++;
	if (i >= sizeof (cookie)) i = 0;
    }
    GenerateRandomData(sizeof (cookie), cookie);
    status = MitAddCookie(sizeof (cookie), cookie, id);
    if (!status)
    {
	id = -1;
    }
    else
    {
	*data_return = cookie;
	*data_length_return = sizeof (cookie);
d178 1
a178 1
#endif /* XCSECURITY */
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d53 1
a53 1
    char		*data,
d58 1
a58 1
    new = xalloc (sizeof (struct auth));
d61 1
a61 1
    new->data = xalloc ((unsigned) data_length);
d63 1
a63 1
	xfree(new);
d77 1
a77 1
    char		*data,
d99 2
a100 2
	xfree (auth->data);
	xfree (auth);
d142 1
a142 1
	char		*data)
d155 2
a156 2
	    xfree (auth->data);
	    xfree (auth);
d170 1
a170 1
    char	*data,
@


1.1
log
@Initial revision
@
text
@d58 1
a58 1
    new = (struct auth *) xalloc (sizeof (struct auth));
d61 1
a61 1
    new->data = (char *) xalloc ((unsigned) data_length);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
