head	1.61;
access;
symbols
	OPENBSD_6_1_BASE:1.61
	OPENBSD_6_0:1.55.0.2
	OPENBSD_6_0_BASE:1.55
	OPENBSD_5_9:1.53.0.2
	OPENBSD_5_9_BASE:1.53
	OPENBSD_5_8:1.51.0.2
	OPENBSD_5_8_BASE:1.51
	OPENBSD_5_7:1.49.0.2
	OPENBSD_5_7_BASE:1.49
	OPENBSD_5_6:1.45.0.2
	OPENBSD_5_6_BASE:1.45
	OPENBSD_5_5:1.43.0.2
	OPENBSD_5_5_BASE:1.43
	OPENBSD_5_4:1.39.0.2
	OPENBSD_5_4_BASE:1.39
	OPENBSD_5_3:1.37.0.2
	OPENBSD_5_3_BASE:1.37
	OPENBSD_5_2:1.35.0.2
	OPENBSD_5_2_BASE:1.35
	OPENBSD_5_1_BASE:1.34
	OPENBSD_5_1:1.34.0.2
	OPENBSD_5_0:1.31.0.2
	OPENBSD_5_0_BASE:1.31
	OPENBSD_4_9:1.29.0.2
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.25.0.4
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.23.0.2
	OPENBSD_4_7_BASE:1.23
	OPENBSD_4_6:1.20.0.4
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.2
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	v1_4_0_90:1.1.1.5
	v1_4:1.1.1.4
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	v1_2_0:1.1.1.3
	v1_1_99_903:1.1.1.2
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@# @;


1.61
date	2017.03.07.03.40.34;	author jsg;	state Exp;
branches;
next	1.60;
commitid	hkyvpixnvKu3Qwon;

1.60
date	2017.03.01.19.22.36;	author matthieu;	state Exp;
branches;
next	1.59;
commitid	q2mUKFEmFLjxJcEL;

1.59
date	2017.02.28.18.27.40;	author matthieu;	state Exp;
branches;
next	1.58;
commitid	yXk0iA5IXqVhXDK8;

1.58
date	2017.02.28.18.24.48;	author matthieu;	state Exp;
branches;
next	1.57;
commitid	KVkYmnzwAoL0WgJg;

1.57
date	2016.08.13.14.05.23;	author matthieu;	state Exp;
branches;
next	1.56;
commitid	JMcEAQnKsxnk8IY2;

1.56
date	2016.08.09.18.59.50;	author matthieu;	state Exp;
branches;
next	1.55;
commitid	6HLO5qdN5N4nPDjW;

1.55
date	2016.05.29.12.02.35;	author matthieu;	state Exp;
branches;
next	1.54;
commitid	s0SI41sEunLdyFfd;

1.54
date	2016.04.02.16.57.58;	author matthieu;	state Exp;
branches;
next	1.53;
commitid	wfULigFY8NgW8Mpn;

1.53
date	2015.11.07.16.48.52;	author matthieu;	state Exp;
branches;
next	1.52;
commitid	7pAEtF6Y5EgemkuY;

1.52
date	2015.09.16.19.10.20;	author matthieu;	state Exp;
branches;
next	1.51;
commitid	Te1daavkBLskZ8gc;

1.51
date	2015.06.20.10.03.56;	author matthieu;	state Exp;
branches;
next	1.50;
commitid	jjm2dnFUTn6INJSK;

1.50
date	2015.04.18.10.22.11;	author matthieu;	state Exp;
branches;
next	1.49;
commitid	OR7BzFIxidTrshaf;

1.49
date	2015.02.11.20.58.46;	author matthieu;	state Exp;
branches;
next	1.48;
commitid	dgcmwPGRv39E4MF9;

1.48
date	2014.12.21.11.41.45;	author matthieu;	state Exp;
branches;
next	1.47;
commitid	OOAr3LJJfv7DyAHR;

1.47
date	2014.11.22.08.33.46;	author matthieu;	state Exp;
branches;
next	1.46;
commitid	qWPhfcRCIbHxIFHp;

1.46
date	2014.09.27.17.52.59;	author matthieu;	state Exp;
branches;
next	1.45;
commitid	cVXoV5PxI8YrEaVA;

1.45
date	2014.07.11.08.13.44;	author matthieu;	state Exp;
branches;
next	1.44;
commitid	QZ1xfp0adMyURB7B;

1.44
date	2014.05.02.19.27.46;	author matthieu;	state Exp;
branches;
next	1.43;

1.43
date	2013.12.28.14.40.01;	author matthieu;	state Exp;
branches;
next	1.42;

1.42
date	2013.12.08.10.53.01;	author matthieu;	state Exp;
branches;
next	1.41;

1.41
date	2013.09.28.15.36.32;	author matthieu;	state Exp;
branches;
next	1.40;

1.40
date	2013.08.24.19.44.28;	author matthieu;	state Exp;
branches;
next	1.39;

1.39
date	2013.07.15.13.23.17;	author aoyama;	state Exp;
branches;
next	1.38;

1.38
date	2013.06.07.17.28.46;	author matthieu;	state Exp;
branches;
next	1.37;

1.37
date	2012.10.14.08.58.45;	author matthieu;	state Exp;
branches;
next	1.36;

1.36
date	2012.08.05.18.11.37;	author matthieu;	state Exp;
branches;
next	1.35;

1.35
date	2012.06.10.13.21.06;	author matthieu;	state Exp;
branches;
next	1.34;

1.34
date	2012.01.31.07.52.35;	author matthieu;	state Exp;
branches;
next	1.33;

1.33
date	2011.12.18.16.08.59;	author matthieu;	state Exp;
branches;
next	1.32;

1.32
date	2011.11.05.13.32.40;	author matthieu;	state Exp;
branches;
next	1.31;

1.31
date	2011.06.29.19.55.01;	author matthieu;	state Exp;
branches;
next	1.30;

1.30
date	2011.04.02.16.08.38;	author matthieu;	state Exp;
branches;
next	1.29;

1.29
date	2011.01.02.13.29.50;	author matthieu;	state Exp;
branches;
next	1.28;

1.28
date	2010.12.21.20.10.44;	author matthieu;	state Exp;
branches;
next	1.27;

1.27
date	2010.12.05.15.36.03;	author matthieu;	state Exp;
branches;
next	1.26;

1.26
date	2010.09.01.09.32.32;	author kettenis;	state Exp;
branches;
next	1.25;

1.25
date	2010.07.27.19.02.25;	author matthieu;	state Exp;
branches;
next	1.24;

1.24
date	2010.04.13.19.54.46;	author matthieu;	state Exp;
branches;
next	1.23;

1.23
date	2009.12.18.22.49.53;	author matthieu;	state Exp;
branches;
next	1.22;

1.22
date	2009.10.31.14.09.44;	author matthieu;	state Exp;
branches;
next	1.21;

1.21
date	2009.09.06.19.44.18;	author matthieu;	state Exp;
branches;
next	1.20;

1.20
date	2009.01.12.20.17.47;	author matthieu;	state Exp;
branches;
next	1.19;

1.19
date	2008.11.02.15.26.09;	author matthieu;	state Exp;
branches;
next	1.18;

1.18
date	2008.06.15.00.17.32;	author matthieu;	state Exp;
branches;
next	1.17;

1.17
date	2008.05.24.20.36.04;	author matthieu;	state Exp;
branches;
next	1.16;

1.16
date	2008.01.27.14.03.40;	author matthieu;	state Exp;
branches;
next	1.15;

1.15
date	2008.01.04.13.44.23;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2007.12.13.21.47.48;	author matthieu;	state Exp;
branches;
next	1.13;

1.13
date	2007.11.24.19.04.00;	author matthieu;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.30.06.38.56;	author matthieu;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.25.15.47.16;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2007.04.17.22.03.42;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2007.04.10.19.02.08;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2007.03.18.20.15.29;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2007.03.04.19.52.11;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.03.11.31.18;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2007.01.03.13.20.49;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.16.20.59.13;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.29.22.28.29;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.28.20.29.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.13.43;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.13.43;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.12.16.20.09.07;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.03.03.11.09.10;	author matthieu;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2007.11.24.17.55.22;	author matthieu;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2007.12.13.21.05.34;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.61
log
@make xserver build on arm64
ok matthieu@@
@
text
@dnl Copyright Â© 2003-2007 Keith Packard, Daniel Stone
dnl
dnl Permission is hereby granted, free of charge, to any person obtaining a
dnl copy of this software and associated documentation files (the "Software"),
dnl to deal in the Software without restriction, including without limitation
dnl the rights to use, copy, modify, merge, publish, distribute, sublicense,
dnl and/or sell copies of the Software, and to permit persons to whom the
dnl Software is furnished to do so, subject to the following conditions:
dnl
dnl The above copyright notice and this permission notice (including the next
dnl paragraph) shall be included in all copies or substantial portions of the
dnl Software.
dnl
dnl THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
dnl IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
dnl FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
dnl THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
dnl LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
dnl FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
dnl DEALINGS IN THE SOFTWARE.
dnl
dnl Authors: Keith Packard <keithp@@keithp.com>
dnl          Daniel Stone <daniel@@fooishbar.org>
dnl          an unwitting cast of miscellaneous others
dnl
dnl Process this file with autoconf to create configure.

AC_PREREQ(2.60)
AC_INIT([xorg-server], 1.18.4, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2016-07-19"
RELEASE_NAME="Skordalia"
AC_CONFIG_SRCDIR([Makefile.am])
AC_CONFIG_MACRO_DIR([m4])
AM_INIT_AUTOMAKE([foreign dist-bzip2])
AC_USE_SYSTEM_EXTENSIONS

# Require xorg-macros minimum of 1.14 for XORG_COMPILER_BRAND in XORG_DEFAULT_OPTIONS
m4_ifndef([XORG_MACROS_VERSION],
          [m4_fatal([must install xorg-macros 1.14 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.14)
XORG_DEFAULT_OPTIONS
XORG_WITH_DOXYGEN(1.6.1)
XORG_CHECK_SGML_DOCTOOLS(1.8)
XORG_ENABLE_DOCS
XORG_ENABLE_DEVEL_DOCS
XORG_WITH_XMLTO(0.0.20)
XORG_WITH_FOP
XORG_WITH_XSLTPROC
XORG_ENABLE_UNIT_TESTS
XORG_LD_WRAP([optional])

m4_ifndef([XORG_FONT_MACROS_VERSION], [m4_fatal([must install font-util 1.1 or later before running autoconf/autogen])])
XORG_FONT_MACROS_VERSION(1.1)

dnl this gets generated by autoheader, and thus contains all the defines.  we
dnl don't ever actually use it, internally.
AC_CONFIG_HEADERS(include/do-not-use-config.h)
dnl xorg-server.h is an external header, designed to be included by loadable
dnl drivers.
AC_CONFIG_HEADERS(include/xorg-server.h)
dnl dix-config.h covers most of the DIX (i.e. everything but the DDX, not just
dnl dix/).
AC_CONFIG_HEADERS(include/dix-config.h)
dnl xorg-config.h covers the Xorg DDX.
AC_CONFIG_HEADERS(include/xorg-config.h)
dnl xkb-config.h covers XKB for the Xorg and Xnest DDXs.
AC_CONFIG_HEADERS(include/xkb-config.h)
dnl xwin-config.h covers the XWin DDX.
AC_CONFIG_HEADERS(include/xwin-config.h)
dnl kdrive-config.h covers the kdrive DDX
AC_CONFIG_HEADERS(include/kdrive-config.h)
dnl version-config.h covers the version numbers so they can be bumped without
dnl forcing an entire recompile.x
AC_CONFIG_HEADERS(include/version-config.h)

AM_PROG_AS
AC_PROG_LN_S
LT_PREREQ([2.2])
LT_INIT([disable-static win32-dll])
PKG_PROG_PKG_CONFIG
AC_PROG_LEX
AC_PROG_YACC
AC_SYS_LARGEFILE
XORG_PROG_RAWCPP

# Quoted so that make will expand $(CWARNFLAGS) in makefiles to allow
# easier overrides at build time.
XSERVER_CFLAGS='$(CWARNFLAGS)'

dnl Explicitly add -fno-strict-aliasing since this option should disappear
dnl from util-macros CWARNFLAGS
if  test "x$GCC" = xyes ; then
    XSERVER_CFLAGS="$XSERVER_CFLAGS -fno-strict-aliasing"
fi

dnl Check for dtrace program (needed to build Xserver dtrace probes)
dnl Also checks for <sys/sdt.h>, since some Linux distros have an 
dnl ISDN trace program named dtrace
AC_ARG_WITH(dtrace, AS_HELP_STRING([--with-dtrace=PATH],
	     [Enable dtrace probes (default: enabled if dtrace found)]),
	     [WDTRACE=$withval], [WDTRACE=auto])
if test "x$WDTRACE" = "xyes" -o "x$WDTRACE" = "xauto" ; then
	AC_PATH_PROG(DTRACE, [dtrace], [not_found], [$PATH:/usr/sbin])
	if test "x$DTRACE" = "xnot_found" ; then
		if test "x$WDTRACE" = "xyes" ; then
			AC_MSG_FAILURE([dtrace requested but not found])
		fi
		WDTRACE="no"
	else
		AC_CHECK_HEADER(sys/sdt.h, [HAS_SDT_H="yes"], [HAS_SDT_H="no"])
		if test "x$WDTRACE" = "xauto" -a "x$HAS_SDT_H" = "xno" ; then
			WDTRACE="no"
		fi
	fi
fi
if test "x$WDTRACE" != "xno" ; then
  AC_DEFINE(XSERVER_DTRACE, 1, 
      [Define to 1 if the DTrace Xserver provider probes should be built in.])

# Solaris/OpenSolaris require dtrace -G to build dtrace probe information into
# object files, and require linking with those as relocatable objects, not .a
# archives. MacOS X handles all this in the normal compiler toolchain, and on
# some releases (like Tiger), will error out on dtrace -G.  For now, other
# platforms with Dtrace ports are assumed to support -G (the FreeBSD and Linux
# ports appear to, based on my web searches, but have not yet been tested).
	case $host_os in
		darwin*)	SPECIAL_DTRACE_OBJECTS=no ;;
		*)		SPECIAL_DTRACE_OBJECTS=yes ;;
	esac
fi
AM_CONDITIONAL(XSERVER_DTRACE, [test "x$WDTRACE" != "xno"])
AM_CONDITIONAL(SPECIAL_DTRACE_OBJECTS, [test "x$SPECIAL_DTRACE_OBJECTS" = "xyes"])

AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h stdlib.h string.h unistd.h dlfcn.h stropts.h \
 fnmatch.h sys/mkdev.h sys/utsname.h])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_TYPEOF
AC_C_BIGENDIAN(AC_DEFINE(X_BYTE_ORDER, X_BIG_ENDIAN, [byte order]),
               AC_DEFINE(X_BYTE_ORDER, X_LITTLE_ENDIAN, [byte order]))

AC_CHECK_SIZEOF([unsigned long])
if test "$ac_cv_sizeof_unsigned_long" = 8; then
	AC_DEFINE(_XSERVER64, 1, [Define to 1 if unsigned long is 64 bits.])
fi

AC_TYPE_PID_T

# Checks for headers/macros for byte swapping
# Known variants:
#	<byteswap.h> bswap_16, bswap_32, bswap_64  (glibc)
#	<sys/endian.h> __swap16, __swap32, __swap64 (OpenBSD)
#	<sys/endian.h> bswap16, bswap32, bswap64 (other BSD's)
#	and a fallback to local macros if none of the above are found

# if <byteswap.h> is found, assume it's the correct version
AC_CHECK_HEADERS([byteswap.h])

# if <sys/endian.h> is found, have to check which version
AC_CHECK_HEADER([sys/endian.h], [HAVE_SYS_ENDIAN_H="yes"], [HAVE_SYS_ENDIAN_H="no"])

if test "x$HAVE_SYS_ENDIAN_H" = "xyes" ; then
	AC_MSG_CHECKING([for __swap16 variant of <sys/endian.h> byteswapping macros])
	AC_LINK_IFELSE([AC_LANG_PROGRAM([
#include <sys/types.h>
#include <sys/endian.h>
 ], [
int a = 1, b;
b = __swap16(a);
 ])
], [SYS_ENDIAN__SWAP='yes'], [SYS_ENDIAN__SWAP='no'])
	AC_MSG_RESULT([$SYS_ENDIAN__SWAP])

	AC_MSG_CHECKING([for bswap16 variant of <sys/endian.h> byteswapping macros])
	AC_LINK_IFELSE([AC_LANG_PROGRAM([
#include <sys/types.h>
#include <sys/endian.h>
 ], [
int a = 1, b;
b = bswap16(a);
 ])
], [SYS_ENDIAN_BSWAP='yes'], [SYS_ENDIAN_BSWAP='no'])
	AC_MSG_RESULT([$SYS_ENDIAN_BSWAP])

    	if test "$SYS_ENDIAN_BSWAP" = "yes" ; then
		USE_SYS_ENDIAN_H=yes
		BSWAP=bswap
	else	
	    	if test "$SYS_ENDIAN__SWAP" = "yes" ; then
			USE_SYS_ENDIAN_H=yes
			BSWAP=__swap
		else
			USE_SYS_ENDIAN_H=no
		fi
	fi

	if test "$USE_SYS_ENDIAN_H" = "yes" ; then
	    AC_DEFINE([USE_SYS_ENDIAN_H], 1, 
		[Define to use byteswap macros from <sys/endian.h>])
	    AC_DEFINE_UNQUOTED([bswap_16], ${BSWAP}16, 
			[Define to 16-bit byteswap macro])
	    AC_DEFINE_UNQUOTED([bswap_32], ${BSWAP}32, 
			[Define to 32-bit byteswap macro])
	    AC_DEFINE_UNQUOTED([bswap_64], ${BSWAP}64, 
			[Define to 64-bit byteswap macro])
	fi
fi

dnl Check to see if dlopen is in default libraries (like Solaris, which
dnl has it in libc), or if libdl is needed to get it.
AC_CHECK_FUNC([dlopen], [],
	AC_CHECK_LIB([dl], [dlopen], DLOPEN_LIBS="-ldl"))
AC_SUBST(DLOPEN_LIBS)

dnl Checks for library functions.
AC_CHECK_FUNCS([backtrace ffs geteuid getuid issetugid getresuid \
	getdtablesize getifaddrs getpeereid getpeerucred getprogname getzoneid \
	mmap posix_fallocate seteuid shmctl64 strncasecmp vasprintf vsnprintf \
	walkcontext])
AC_REPLACE_FUNCS([reallocarray strcasecmp strcasestr strlcat strlcpy strndup \
	timingsafe_memcmp])
AC_CHECK_LIB([bsd], [arc4random_buf])
AC_CHECK_FUNCS([arc4random_buf])

AC_CHECK_DECLS([program_invocation_short_name], [], [], [[#include <errno.h>]])

dnl Check for SO_PEERCRED #define
AC_CACHE_CHECK([for SO_PEERCRED in sys/socket.h],
	       [xorg_cv_sys_have_so_peercred],
	       [AC_EGREP_CPP(yes_have_so_peercred,[
#include <sys/types.h>
#include <sys/socket.h>
#ifdef SO_PEERCRED
yes_have_so_peercred
#endif
],
	       [xorg_cv_sys_have_so_peercred=yes],
	       [xorg_cv_sys_have_so_peercred=no])])

dnl define NO_LOCAL_CLIENT_CRED if no getpeereid, getpeerucred or SO_PEERCRED
if test "x$ac_cv_func_getpeereid" = xno && test "x$ac_cv_func_getpeerucred" = xno && test "x$xorg_cv_sys_have_so_peercred" = xno ; then
	AC_DEFINE([NO_LOCAL_CLIENT_CRED], 1, [Define to 1 if no local socket credentials interface exists])
fi

dnl Find the math libary, then check for cbrt function in it.
AC_CHECK_LIB(m, sqrt)
AC_CHECK_FUNCS([cbrt])

AC_CHECK_HEADERS([ndbm.h dbm.h rpcsvc/dbm.h])

dnl AGPGART headers
AC_CHECK_HEADERS([linux/agpgart.h sys/agpio.h sys/agpgart.h], AGP=yes)
AM_CONDITIONAL(AGP, [test "x$AGP" = xyes])

dnl fbdev header
AC_CHECK_HEADERS([linux/fb.h], FBDEV=yes)
AM_CONDITIONAL(FBDEVHW, [test "x$FBDEV" = xyes])

dnl FreeBSD kldload support (sys/linker.h)
AC_CHECK_HEADERS([sys/linker.h],
	[ac_cv_sys_linker_h=yes],
	[ac_cv_sys_linker_h=no],
	[#include <sys/param.h>])
AM_CONDITIONAL(FREEBSD_KLDLOAD, [test "x$ac_cv_sys_linker_h" = xyes])

AC_CACHE_CHECK([for SYSV IPC],
		ac_cv_sysv_ipc,
               [AC_LINK_IFELSE([AC_LANG_PROGRAM([[
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
]],[[
{ 
    int id;
    id = shmget(IPC_PRIVATE, 512, S_IRUSR | S_IWUSR);
    if (id < 0) return -1;
    return shmctl(id, IPC_RMID, 0);
}]])],
       [ac_cv_sysv_ipc=yes],
       [ac_cv_sysv_ipc=no])])
if test "x$ac_cv_sysv_ipc" = xyes; then
	AC_DEFINE(HAVE_SYSV_IPC, 1, [Define to 1 if SYSV IPC is available])
fi

dnl OpenBSD /dev/xf86 aperture driver 
if test -c /dev/xf86 ; then
	AC_DEFINE(HAS_APERTURE_DRV, 1, [System has /dev/xf86 aperture driver])
fi

dnl BSD APM support 
AC_CHECK_HEADER([machine/apmvar.h],[
	AC_CHECK_HEADER([sys/event.h],
		ac_cv_BSD_KQUEUE_APM=yes,
		ac_cv_BSD_APM=yes)])

AM_CONDITIONAL(BSD_APM, [test "x$ac_cv_BSD_APM" = xyes])
AM_CONDITIONAL(BSD_KQUEUE_APM, [test "x$ac_cv_BSD_KQUEUE_APM" = xyes])
	
dnl glibc backtrace support check
AC_CHECK_HEADER([execinfo.h],[
    AC_CHECK_LIB(c, backtrace, [
        AC_DEFINE(HAVE_BACKTRACE, 1, [Has backtrace support])
        AC_DEFINE(HAVE_EXECINFO_H, 1, [Have execinfo.h])
    ])]
)

dnl ---------------------------------------------------------------------------
dnl Bus options and CPU capabilities.  Replaces logic in
dnl hw/xfree86/os-support/bus/Makefile.am, among others.
dnl ---------------------------------------------------------------------------
DEFAULT_INT10="x86emu"

dnl Override defaults as needed for specific platforms:

case $host_cpu in
  aarch64*)
	ARM64_VIDEO=yes
	GLX_ARCH_DEFINES="-D__GLX_ALIGN64"
	;;
  alpha*)
	ALPHA_VIDEO=yes
	case $host_os in
	        *freebsd*)	SYS_LIBS=-lio ;;
		*netbsd*)	AC_DEFINE(USE_ALPHA_PIO, 1, [NetBSD PIO alpha IO]) ;;
		*openbsd*)	SYS_LIBS=-lalpha ;;
	esac
	GLX_ARCH_DEFINES="-D__GLX_ALIGN64 -mieee"
	;;
  arm*)
	ARM_VIDEO=yes
	DEFAULT_INT10="stub"
	;;
  i*86)
	I386_VIDEO=yes
	case $host_os in
		*freebsd*)	AC_DEFINE(USE_DEV_IO) ;;
		*dragonfly*)	AC_DEFINE(USE_DEV_IO) ;;
		*netbsd*)	AC_DEFINE(USE_I386_IOPL)
				SYS_LIBS=-li386
				;;
		*openbsd*)	AC_DEFINE(USE_I386_IOPL) 
				SYS_LIBS=-li386
				;;
	esac
        ;;
  powerpc*)
	PPC_VIDEO=yes
	case $host_os in
		*freebsd*)	DEFAULT_INT10=stub ;;
	esac
	;;
  m88k)
	LUNA88K_VIDEO=yes
	BSD_ARCH_SOURCES="luna88k_video.c ioperm_noop.c"
	;;
  mips*)
	SGI_VIDEO=yes
	BSD_ARCH_SOURCES="sgi_video.c ioperm_noop.c"
	;;
  sparc*)
	SPARC64_VIDEO=yes
	BSD_ARCH_SOURCES="sparc64_video.c ioperm_noop.c"
	GLX_ARCH_DEFINES="-D__GLX_ALIGN64"
	;;
  x86_64*|amd64*)
	I386_VIDEO=yes
	case $host_os in
		*freebsd*)	AC_DEFINE(USE_DEV_IO, 1, [BSD /dev/io]) ;;
		*dragonfly*)	AC_DEFINE(USE_DEV_IO, 1, [BSD /dev/io]) ;;
		*netbsd*)	AC_DEFINE(USE_I386_IOPL, 1, [BSD i386 iopl])
				SYS_LIBS=-lx86_64
				;;
		*openbsd*)	AC_DEFINE(USE_AMD64_IOPL, 1, [BSD AMD64 iopl])
				SYS_LIBS=-lamd64
				;;
	esac
	GLX_ARCH_DEFINES="-D__GLX_ALIGN64"
	;;
  ia64*)
  	GLX_ARCH_DEFINES="-D__GLX_ALIGN64"
	;;
  s390*)
  	GLX_ARCH_DEFINES="-D__GLX_ALIGN64"
	;;
  hppa*)
	case $host_os in
		*openbsd*)	HPPA_VIDEO=yes
	     			;;
	esac
	;;
esac
AC_SUBST(GLX_ARCH_DEFINES)

dnl BSD *_video.c selection
AM_CONDITIONAL(ALPHA_VIDEO, [test "x$ALPHA_VIDEO" = xyes])
AM_CONDITIONAL(ARM_VIDEO, [test "x$ARM_VIDEO" = xyes])
AM_CONDITIONAL(ARM64_VIDEO, [test "x$ARM64_VIDEO" = xyes])
AM_CONDITIONAL(HPPA_VIDEO, [test "x$HPPA_VIDEO" = xyes])
AM_CONDITIONAL(I386_VIDEO, [test "x$I386_VIDEO" = xyes])
AM_CONDITIONAL(LUNA88K_VIDEO, [test "x$LUNA88K_VIDEO" = xyes])
AM_CONDITIONAL(PPC_VIDEO, [test "x$PPC_VIDEO" = xyes])
AM_CONDITIONAL(SGI_VIDEO, [test "x$SGI_VIDEO" = xyes])
AM_CONDITIONAL(SPARC64_VIDEO, [test "x$SPARC64_VIDEO" = xyes])

DRI=no
USE_SIGIO_BY_DEFAULT="yes"
dnl it would be nice to autodetect these *CONS_SUPPORTs
case $host_os in
  *freebsd* | *dragonfly*)
	case $host_os in
		kfreebsd*-gnu) ;;
		*) AC_DEFINE(CSRG_BASED, 1, [System is BSD-like]) ;;
	esac
	AC_DEFINE(PCCONS_SUPPORT, 1, [System has PC console])
	AC_DEFINE(PCVT_SUPPORT, 1, [System has PCVT console])
	AC_DEFINE(SYSCONS_SUPPORT, 1, [System has syscons console])
	DRI=yes
	;;
  *netbsd*)
	AC_DEFINE(CSRG_BASED, 1, [System is BSD-like])
	AC_DEFINE(PCCONS_SUPPORT, 1, [System has PC console])
	AC_DEFINE(PCVT_SUPPORT, 1, [System has PCVT console])
	AC_DEFINE(WSCONS_SUPPORT, 1, [System has wscons console])
	DRI=yes
	;;
  *openbsd*)
	AC_DEFINE(CSRG_BASED, 1, [System is BSD-like])
	AC_DEFINE(WSCONS_SUPPORT, 1, [System has wscons console])
	# Disable use of SIGIO by default; it breaks multi-card
	# configurations.  We don't want to run thousands of lines of
	# potentially signal-unsafe code for no particular benefit.
	USE_SIGIO_BY_DEFAULT="no"
	;;
  *linux*)
	DRI=yes
	;;
  *solaris*)
	PKG_CHECK_EXISTS(libdrm, DRI=yes, DRI=no)
	# Disable use of SIGIO by default until some system bugs are
	# fixed - see Sun/OpenSolaris bug id 6879897
	USE_SIGIO_BY_DEFAULT="no"
	;;
  darwin*)
	AC_DEFINE(CSRG_BASED, 1, [System is BSD-like])
	;;
  cygwin*|mingw*)
	CFLAGS="$CFLAGS -DFD_SETSIZE=512"
	;;
esac

dnl augment XORG_RELEASE_VERSION for our snapshot number and to expose the
dnl major number
PVMAJOR=`echo $PACKAGE_VERSION | cut -d . -f 1`
PVS=`echo $PACKAGE_VERSION | cut -d . -f 4 | cut -d - -f 1`
if test "x$PVS" = "x"; then
	PVS="0"
fi

VENDOR_RELEASE="((($PVMAJOR) * 10000000) + (($PVM) * 100000) + (($PVP) * 1000) + $PVS)"
VENDOR_MAN_VERSION="Version ${PACKAGE_VERSION}"

VENDOR_NAME="The X.Org Foundation"
VENDOR_NAME_SHORT="X.Org"
VENDOR_WEB="http://wiki.x.org"

dnl Build options.
AC_ARG_ENABLE(werror,        AS_HELP_STRING([--enable-werror],
		  [Obsolete - use --enable-strict-compilation instead]),
  AC_MSG_ERROR([--enable-werror has been replaced by --enable-strict-compilation]))

AC_ARG_ENABLE(debug,         AS_HELP_STRING([--enable-debug],
				  [Enable debugging (default: disabled)]),
			        [DEBUGGING=$enableval], [DEBUGGING=no])
AC_ARG_ENABLE(use-sigio-by-default, AS_HELP_STRING([--enable-use-sigio-by-default]
  [Enable SIGIO input handlers by default (default: $USE_SIGIO_BY_DEFAULT)]),
                                [USE_SIGIO_BY_DEFAULT=$enableval], [])
AC_ARG_WITH(int10,           AS_HELP_STRING([--with-int10=BACKEND], [int10 backend: vm86, x86emu or stub]),
				[INT10="$withval"],
				[INT10="$DEFAULT_INT10"])
AC_ARG_WITH(vendor-name,     AS_HELP_STRING([--with-vendor-name=VENDOR],
				  [Vendor string reported by the server]),
				[ VENDOR_NAME="$withval" ], [])
AC_ARG_WITH(vendor-name-short, AS_HELP_STRING([--with-vendor-name-short=VENDOR],
				  [Short version of vendor string reported by the server]),
				[ VENDOR_NAME_SHORT="$withval" ], [])
AC_ARG_WITH(vendor-web,      AS_HELP_STRING([--with-vendor-web=URL],
				  [Vendor web address reported by the server]),
				[ VENDOR_WEB="$withval" ], [])
AC_ARG_WITH(module-dir,      AS_HELP_STRING([--with-module-dir=DIR],
				  [Directory where modules are installed (default: $libdir/xorg/modules)]),
				[ moduledir="$withval" ],
				[ moduledir="${libdir}/xorg/modules" ])
AC_ARG_WITH(log-dir,         AS_HELP_STRING([--with-log-dir=DIR],
				  [Directory where log files are kept (default: $localstatedir/log)]),
				[ logdir="$withval" ],
				[ logdir="$localstatedir/log" ])
AC_ARG_WITH(builder-addr,    AS_HELP_STRING([--with-builder-addr=ADDRESS],
				  [Builder address (default: xorg@@lists.freedesktop.org)]),
				[ BUILDERADDR="$withval" ],
				[ BUILDERADDR="xorg@@lists.freedesktop.org" ])
AC_ARG_WITH(os-name,         AS_HELP_STRING([--with-os-name=OSNAME], [Name of OS (default: output of "uname -srm")]),
				[ OSNAME="$withval" ],
				[ OSNAME=`uname -srm` ])
AC_ARG_WITH(os-vendor,       AS_HELP_STRING([--with-os-vendor=OSVENDOR], [Name of OS vendor]),
				[ OSVENDOR="$withval" ],
				[ OSVENDOR="" ])
AC_ARG_WITH(builderstring,   AS_HELP_STRING([--with-builderstring=BUILDERSTRING], [Additional builder string]),
				[ BUILDERSTRING="$withval" ]
				[ ])
AC_ARG_ENABLE(listen-tcp,    AS_HELP_STRING([--enable-listen-tcp],
                                            [Listen on TCP by default (default:disabled)]),
                                [LISTEN_TCP=$enableval], [LISTEN_TCP=no])
AC_ARG_ENABLE(listen-unix,   AS_HELP_STRING([--disable-listen-unix],
                                            [Listen on Unix by default (default:enabled)]),
                                [LISTEN_UNIX=$enableval], [LISTEN_UNIX=yes])

AC_ARG_ENABLE(listen-local,  AS_HELP_STRING([--disable-listen-local],
                                            [Listen on local by default (default:enabled)]),
                                [LISTEN_LOCAL=$enableval], [LISTEN_LOCAL=yes])

dnl Determine font path
XORG_FONTROOTDIR
XORG_FONTSUBDIR(FONTMISCDIR, fontmiscdir, misc)
XORG_FONTSUBDIR(FONTOTFDIR, fontotfdir, OTF)
XORG_FONTSUBDIR(FONTTTFDIR, fontttfdir, TTF)
XORG_FONTSUBDIR(FONTTYPE1DIR, fonttype1dir, Type1)
XORG_FONTSUBDIR(FONT75DPIDIR, font75dpidir, 75dpi)
XORG_FONTSUBDIR(FONT100DPIDIR, font100dpidir, 100dpi)

dnl Uses --with-default-font-path if set, otherwise uses standard
dnl subdirectories of FONTROOTDIR. Some distros set the default font path to
dnl "catalogue:/etc/X11/fontpath.d,built-ins"
DEFAULT_FONT_PATH="${FONTMISCDIR}/,${FONTTTFDIR}/,${FONTOTFDIR}/,${FONTTYPE1DIR}/,${FONT100DPIDIR}/,${FONT75DPIDIR}/"
case $host_os in
    darwin*) DEFAULT_FONT_PATH="${DEFAULT_FONT_PATH},/Library/Fonts,/System/Library/Fonts" ;;
esac

AC_ARG_WITH(default-font-path, AS_HELP_STRING([--with-default-font-path=PATH], [Comma separated list of font dirs]),
				[ FONTPATH="$withval" ],
				[ FONTPATH="${DEFAULT_FONT_PATH}" ])

AC_MSG_CHECKING([for default font path])
AC_MSG_RESULT([$FONTPATH])

AC_ARG_WITH(xkb-path,         AS_HELP_STRING([--with-xkb-path=PATH], [Path to XKB base dir (default: ${datadir}/X11/xkb)]),
				[ XKBPATH="$withval" ],
				[ XKBPATH="${datadir}/X11/xkb" ])
AC_ARG_WITH(xkb-output,       AS_HELP_STRING([--with-xkb-output=PATH], [Path to XKB output dir (default: ${datadir}/X11/xkb/compiled)]),
				[ XKBOUTPUT="$withval" ],
				[ XKBOUTPUT="compiled" ])
AC_ARG_WITH(default-xkb-rules, AS_HELP_STRING([--with-default-xkb-rules=RULES],
                                   [Keyboard ruleset (default: base/evdev)]),
                                [ XKB_DFLT_RULES="$withval" ],
                                [ XKB_DFLT_RULES="" ])
AC_ARG_WITH(default-xkb-model, AS_HELP_STRING([--with-default-xkb-model=MODEL],
                                   [Keyboard model (default: pc105)]),
                                [ XKB_DFLT_MODEL="$withval" ],
                                [ XKB_DFLT_MODEL="pc105" ])
AC_ARG_WITH(default-xkb-layout, AS_HELP_STRING([--with-default-xkb-layout=LAYOUT],
                                   [Keyboard layout (default: us)]),
                                [ XKB_DFLT_LAYOUT="$withval" ],
                                [ XKB_DFLT_LAYOUT="us" ])
AC_ARG_WITH(default-xkb-variant, AS_HELP_STRING([--with-default-xkb-variant=VARIANT],
                                   [Keyboard variant (default: (none))]),
                                [ XKB_DFLT_VARIANT="$withval" ],
                                [ XKB_DFLT_VARIANT="" ])
AC_ARG_WITH(default-xkb-options, AS_HELP_STRING([--with-default-xkb-options=OPTIONS],
                                   [Keyboard layout options (default: (none))]),
                                [ XKB_DFLT_OPTIONS="$withval" ],
                                [ XKB_DFLT_OPTIONS="" ])
AC_ARG_WITH(serverconfig-path, AS_HELP_STRING([--with-serverconfig-path=PATH],
				   [Directory where ancillary server config files are installed (default: ${libdir}/xorg)]),
				[ SERVERCONFIG="$withval" ],
				[ SERVERCONFIG="${libdir}/xorg" ])
AC_ARG_WITH(apple-applications-dir,AS_HELP_STRING([--with-apple-applications-dir=PATH], [Path to the Applications directory (default: /Applications/Utilities)]),
				[ APPLE_APPLICATIONS_DIR="${withval}" ],
				[ APPLE_APPLICATIONS_DIR="/Applications/Utilities" ])
AC_SUBST([APPLE_APPLICATIONS_DIR])
AC_ARG_WITH(apple-application-name,AS_HELP_STRING([--with-apple-application-name=NAME], [Name for the .app (default: X11)]),
				[ APPLE_APPLICATION_NAME="${withval}" ],
				[ APPLE_APPLICATION_NAME="X11" ])
AC_SUBST([APPLE_APPLICATION_NAME])
AC_ARG_WITH(bundle-id-prefix,  AS_HELP_STRING([--with-bundle-id-prefix=RDNS_PREFIX], [Prefix to use for bundle identifiers (default: org.x)]),
                               [ BUNDLE_ID_PREFIX="${withval}" ])
AC_SUBST([BUNDLE_ID_PREFIX])
AC_DEFINE_UNQUOTED(BUNDLE_ID_PREFIX, "$BUNDLE_ID_PREFIX", [Prefix to use for bundle identifiers])
m4_define(DEFAULT_BUNDLE_VERSION, m4_esyscmd([echo ]AC_PACKAGE_VERSION[ | cut -f1-3 -d. | tr -d '\n']))
AC_ARG_WITH(bundle-version,    AS_HELP_STRING([--with-bundle-version=VERSION], [Version to use for X11.app's CFBundleVersion (default: ]DEFAULT_BUNDLE_VERSION[)]),
                               [ BUNDLE_VERSION="${withval}" ],
                               [ BUNDLE_VERSION="DEFAULT_BUNDLE_VERSION" ])
AC_SUBST([BUNDLE_VERSION])
AC_ARG_WITH(bundle-version-string, AS_HELP_STRING([--with-bundle-version-string=VERSION], [Version to use for X11.app's CFBundleShortVersionString (default: ]AC_PACKAGE_VERSION[)]),
                               [ BUNDLE_VERSION_STRING="${withval}" ],
                               [ BUNDLE_VERSION_STRING="${PACKAGE_VERSION}" ])
AC_SUBST([BUNDLE_VERSION_STRING])
AC_ARG_ENABLE(sparkle,AS_HELP_STRING([--enable-sparkle], [Enable updating of X11.app using the Sparkle Framework (default: disabled)]),
				[ XQUARTZ_SPARKLE="${enableval}" ],
				[ XQUARTZ_SPARKLE="no" ])
AC_SUBST([XQUARTZ_SPARKLE])
AC_ARG_WITH(sparkle-feed-url,  AS_HELP_STRING([--with-sparkle-feed-url=URL], [URL for the Sparkle feed (default: https://www.xquartz.org/releases/sparkle/release.xml)]),
                               [ XQUARTZ_SPARKLE_FEED_URL="${withval}" ],
                               [ XQUARTZ_SPARKLE_FEED_URL="https://www.xquartz.org/releases/sparkle/release.xml" ])
AC_SUBST([XQUARTZ_SPARKLE_FEED_URL])
AC_ARG_ENABLE(visibility,     AS_HELP_STRING([--enable-visibility], [Enable symbol visibility (default: auto)]),
				[SYMBOL_VISIBILITY=$enableval],
				[SYMBOL_VISIBILITY=auto])

dnl GLX build options
AC_ARG_ENABLE(aiglx,          AS_HELP_STRING([--enable-aiglx], [Build accelerated indirect GLX (default: enabled)]),
                                [AIGLX=$enableval],
                                [AIGLX=yes])

AC_ARG_WITH(khronos-spec-dir, AS_HELP_STRING([--with-khronos-spec-dir=PATH], [Path to Khronos OpenGL registry database files (default: auto)]),
				[KHRONOS_SPEC_DIR="${withval}"],
				[KHRONOS_SPEC_DIR=auto])

dnl Privsep
AC_ARG_ENABLE(privsep,
	AC_HELP_STRING([--enable-privsep],
         [Build support for X server privilege separation (default is NO)]),
	[ENABLE_PRIVSEP="$enableval"], [ENABLE_PRIVSEP="no"])
if test x$ENABLE_PRIVSEP = xyes ; then
	AC_DEFINE(X_PRIVSEP, 1, [Use X server privilege separation])
fi
AM_CONDITIONAL(X_PRIVSEP, [test x$ENABLE_PRIVSEP = xyes])

dnl Extensions.
AC_ARG_ENABLE(composite,      AS_HELP_STRING([--disable-composite], [Build Composite extension (default: enabled)]), [COMPOSITE=$enableval], [COMPOSITE=yes])
AC_ARG_ENABLE(mitshm,         AS_HELP_STRING([--disable-mitshm], [Build SHM extension (default: auto)]), [MITSHM=$enableval], [MITSHM=auto])
AC_ARG_ENABLE(xres,           AS_HELP_STRING([--disable-xres], [Build XRes extension (default: enabled)]), [RES=$enableval], [RES=yes])
AC_ARG_ENABLE(record,         AS_HELP_STRING([--disable-record], [Build Record extension (default: enabled)]), [RECORD=$enableval], [RECORD=yes])
AC_ARG_ENABLE(xv,             AS_HELP_STRING([--disable-xv], [Build Xv extension (default: enabled)]), [XV=$enableval], [XV=yes])
AC_ARG_ENABLE(xvmc,           AS_HELP_STRING([--disable-xvmc], [Build XvMC extension (default: enabled)]), [XVMC=$enableval], [XVMC=yes])
AC_ARG_ENABLE(dga,            AS_HELP_STRING([--disable-dga], [Build DGA extension (default: auto)]), [DGA=$enableval], [DGA=auto])
AC_ARG_ENABLE(screensaver,    AS_HELP_STRING([--disable-screensaver], [Build ScreenSaver extension (default: enabled)]), [SCREENSAVER=$enableval], [SCREENSAVER=yes])
AC_ARG_ENABLE(xdmcp,          AS_HELP_STRING([--disable-xdmcp], [Build XDMCP extension (default: auto)]), [XDMCP=$enableval], [XDMCP=auto])
AC_ARG_ENABLE(xdm-auth-1,     AS_HELP_STRING([--disable-xdm-auth-1], [Build XDM-Auth-1 extension (default: auto)]), [XDMAUTH=$enableval], [XDMAUTH=auto])
AC_ARG_ENABLE(glx,            AS_HELP_STRING([--disable-glx], [Build GLX extension (default: enabled)]), [GLX=$enableval], [GLX=yes])
AC_ARG_ENABLE(dri,            AS_HELP_STRING([--enable-dri], [Build DRI extension (default: auto)]), [DRI=$enableval])
AC_ARG_ENABLE(dri2,           AS_HELP_STRING([--enable-dri2], [Build DRI2 extension (default: auto)]), [DRI2=$enableval], [DRI2=auto])
AC_ARG_ENABLE(dri3,           AS_HELP_STRING([--enable-dri3], [Build DRI3 extension (default: auto)]), [DRI3=$enableval], [DRI3=auto])
AC_ARG_ENABLE(present,	      AS_HELP_STRING([--disable-present], [Build Present extension (default: enabled)]), [PRESENT=$enableval], [PRESENT=yes])
AC_ARG_ENABLE(xinerama,	      AS_HELP_STRING([--disable-xinerama], [Build Xinerama extension (default: enabled)]), [XINERAMA=$enableval], [XINERAMA=yes])
AC_ARG_ENABLE(xf86vidmode,    AS_HELP_STRING([--disable-xf86vidmode], [Build XF86VidMode extension (default: auto)]), [XF86VIDMODE=$enableval], [XF86VIDMODE=auto])
AC_ARG_ENABLE(xace,           AS_HELP_STRING([--disable-xace], [Build X-ACE extension (default: enabled)]), [XACE=$enableval], [XACE=yes])
AC_ARG_ENABLE(xselinux,       AS_HELP_STRING([--enable-xselinux], [Build SELinux extension (default: disabled)]), [XSELINUX=$enableval], [XSELINUX=no])
AC_ARG_ENABLE(xcsecurity,     AS_HELP_STRING([--enable-xcsecurity], [Build Security extension (default: disabled)]), [XCSECURITY=$enableval], [XCSECURITY=no])
AC_ARG_ENABLE(tslib,          AS_HELP_STRING([--enable-tslib], [Build kdrive tslib touchscreen support (default: disabled)]), [TSLIB=$enableval], [TSLIB=no])
AC_ARG_ENABLE(dbe,            AS_HELP_STRING([--disable-dbe], [Build DBE extension (default: enabled)]), [DBE=$enableval], [DBE=yes])
AC_ARG_ENABLE(xf86bigfont,    AS_HELP_STRING([--enable-xf86bigfont], [Build XF86 Big Font extension (default: disabled)]), [XF86BIGFONT=$enableval], [XF86BIGFONT=no])
AC_ARG_ENABLE(dpms,           AS_HELP_STRING([--disable-dpms], [Build DPMS extension (default: enabled)]), [DPMSExtension=$enableval], [DPMSExtension=yes])
AC_ARG_ENABLE(config-udev,    AS_HELP_STRING([--enable-config-udev], [Build udev support (default: auto)]), [CONFIG_UDEV=$enableval], [CONFIG_UDEV=auto])
AC_ARG_ENABLE(config-udev-kms,    AS_HELP_STRING([--enable-config-udev-kms], [Build udev kms support (default: auto)]), [CONFIG_UDEV_KMS=$enableval], [CONFIG_UDEV_KMS=auto])
AC_ARG_ENABLE(config-hal,     AS_HELP_STRING([--disable-config-hal], [Build HAL support (default: auto)]), [CONFIG_HAL=$enableval], [CONFIG_HAL=auto])
AC_ARG_ENABLE(config-wscons,  AS_HELP_STRING([--enable-config-wscons], [Build wscons config support (default: auto)]), [CONFIG_WSCONS=$enableval], [CONFIG_WSCONS=auto])
AC_ARG_ENABLE(xfree86-utils,     AS_HELP_STRING([--enable-xfree86-utils], [Build xfree86 DDX utilities (default: enabled)]), [XF86UTILS=$enableval], [XF86UTILS=yes])
AC_ARG_ENABLE(vgahw,          AS_HELP_STRING([--enable-vgahw], [Build Xorg with vga access (default: enabled)]), [VGAHW=$enableval], [VGAHW=yes])
AC_ARG_ENABLE(vbe,            AS_HELP_STRING([--enable-vbe], [Build Xorg with VBE module (default: enabled)]), [VBE=$enableval], [VBE=yes])
AC_ARG_ENABLE(int10-module,     AS_HELP_STRING([--enable-int10-module], [Build Xorg with int10 module (default: enabled)]), [INT10MODULE=$enableval], [INT10MODULE=yes])
AC_ARG_ENABLE(windowswm,      AS_HELP_STRING([--enable-windowswm], [Build XWin with WindowsWM extension (default: no)]), [WINDOWSWM=$enableval], [WINDOWSWM=no])
AC_ARG_ENABLE(libdrm,         AS_HELP_STRING([--enable-libdrm], [Build Xorg with libdrm support (default: enabled)]), [DRM=$enableval],[DRM=yes])
AC_ARG_ENABLE(clientids,      AS_HELP_STRING([--disable-clientids], [Build Xorg with client ID tracking (default: enabled)]), [CLIENTIDS=$enableval], [CLIENTIDS=yes])
AC_ARG_ENABLE(pciaccess, AS_HELP_STRING([--enable-pciaccess], [Build Xorg with pciaccess library (default: enabled)]), [PCI=$enableval], [PCI=yes])
AC_ARG_ENABLE(linux_acpi, AS_HELP_STRING([--disable-linux-acpi], [Disable building ACPI support on Linux (if available).]), [enable_linux_acpi=$enableval], [enable_linux_acpi=yes])
AC_ARG_ENABLE(linux_apm, AS_HELP_STRING([--disable-linux-apm], [Disable building APM support on Linux (if available).]), [enable_linux_apm=$enableval], [enable_linux_apm=yes])
AC_ARG_ENABLE(systemd-logind, AS_HELP_STRING([--enable-systemd-logind], [Build systemd-logind support (default: auto)]), [SYSTEMD_LOGIND=$enableval], [SYSTEMD_LOGIND=auto])
AC_ARG_ENABLE(suid-wrapper, AS_HELP_STRING([--enable-suid-wrapper], [Build suid-root wrapper for legacy driver support on rootless xserver systems (default: no)]), [SUID_WRAPPER=$enableval], [SUID_WRAPPER=no])

dnl DDXes.
AC_ARG_ENABLE(xorg,    	      AS_HELP_STRING([--enable-xorg], [Build Xorg server (default: auto)]), [XORG=$enableval], [XORG=auto])
AC_ARG_ENABLE(dmx,    	      AS_HELP_STRING([--enable-dmx], [Build DMX server (default: no)]), [DMX=$enableval], [DMX=no])
AC_ARG_ENABLE(xvfb,    	      AS_HELP_STRING([--enable-xvfb], [Build Xvfb server (default: yes)]), [XVFB=$enableval], [XVFB=yes])
AC_ARG_ENABLE(xnest,   	      AS_HELP_STRING([--enable-xnest], [Build Xnest server (default: auto)]), [XNEST=$enableval], [XNEST=auto])
AC_ARG_ENABLE(xquartz,        AS_HELP_STRING([--enable-xquartz], [Build Xquartz server for OS-X (default: auto)]), [XQUARTZ=$enableval], [XQUARTZ=auto])
AC_ARG_ENABLE(xwayland,       AS_HELP_STRING([--enable-xwayland], [Build Xwayland server (default: auto)]), [XWAYLAND=$enableval], [XWAYLAND=auto])
AC_ARG_ENABLE(standalone-xpbproxy, AS_HELP_STRING([--enable-standalone-xpbproxy], [Build a standalone xpbproxy (in addition to the one integrated into Xquartz as a separate thread) (default: no)]), [STANDALONE_XPBPROXY=$enableval], [STANDALONE_XPBPROXY=no])
AC_ARG_ENABLE(xwin,    	      AS_HELP_STRING([--enable-xwin], [Build XWin server (default: auto)]), [XWIN=$enableval], [XWIN=auto])
AC_ARG_ENABLE(glamor,         AS_HELP_STRING([--enable-glamor], [Build glamor dix module (default: no)]), [GLAMOR=$enableval], [GLAMOR=no])
dnl kdrive and its subsystems
AC_ARG_ENABLE(kdrive,         AS_HELP_STRING([--enable-kdrive], [Build kdrive servers (default: no)]), [KDRIVE=$enableval], [KDRIVE=no])
AC_ARG_ENABLE(xephyr,         AS_HELP_STRING([--enable-xephyr], [Build the kdrive Xephyr server (default: auto)]), [XEPHYR=$enableval], [XEPHYR=auto])
AC_ARG_ENABLE(xfake,          AS_HELP_STRING([--enable-xfake], [Build the kdrive 'fake' server (default: auto)]), [XFAKE=$enableval], [XFAKE=auto])
AC_ARG_ENABLE(xfbdev,         AS_HELP_STRING([--enable-xfbdev], [Build the kdrive framebuffer device server (default: auto)]), [XFBDEV=$enableval], [XFBDEV=auto])
dnl kdrive options
AC_ARG_ENABLE(kdrive-kbd,     AS_HELP_STRING([--enable-kdrive-kbd], [Build kbd driver for kdrive (default: auto)]), [KDRIVE_KBD=$enableval], [KDRIVE_KBD=auto])
AC_ARG_ENABLE(kdrive-mouse,   AS_HELP_STRING([--enable-kdrive-mouse], [Build mouse driver for kdrive (default: auto)]), [KDRIVE_MOUSE=$enableval], [KDRIVE_MOUSE=auto])
AC_ARG_ENABLE(kdrive-evdev,   AS_HELP_STRING([--enable-kdrive-evdev], [Build evdev driver for kdrive (default: auto)]), [KDRIVE_EVDEV=$enableval], [KDRIVE_EVDEV=auto])
AC_ARG_ENABLE(libunwind,      AS_HELP_STRING([--enable-libunwind], [Use libunwind for backtracing (default: auto)]), [LIBUNWIND="$enableval"], [LIBUNWIND="auto"])
AC_ARG_ENABLE(xshmfence,      AS_HELP_STRING([--disable-xshmfence], [Disable xshmfence (default: auto)]), [XSHMFENCE="$enableval"], [XSHMFENCE="auto"])


dnl chown/chmod to be setuid root as part of build
dnl Replaces InstallXserverSetUID in imake
AC_ARG_ENABLE(install-setuid, 
    AS_HELP_STRING([--enable-install-setuid],
       [Install Xorg server as owned by root with setuid bit (default: auto)]),
    [SETUID=$enableval], [SETUID=auto])
AC_MSG_CHECKING([to see if we can install the Xorg server as root])
if test "x$SETUID" = "xauto" ; then
	case $host_os in
	    cygwin*)		SETUID="no"  ;;
	    mingw*)		SETUID="no"  ;;
	    darwin*)		SETUID="no"  ;;
	    *)
	   	case $host_cpu in
		    sparc)	SETUID="no"  ;;
		    *)		SETUID="yes" ;;
		esac
	esac
	if test "x$SETUID" = xyes; then
		touch testfile
		chown root testfile > /dev/null 2>&1 || SETUID="no"
		rm -f testfile
	fi
fi
AC_MSG_RESULT([$SETUID])
AM_CONDITIONAL(INSTALL_SETUID, [test "x$SETUID" = "xyes"])

dnl Issue an error if xtrans.m4 was not found and XTRANS_CONNECTION_FLAGS macro
dnl was not expanded, since xorg-server with no transport types is rather useless.
dnl
dnl If you're seeing an error here, be sure you installed the lib/xtrans module
dnl first and if it's not in the default location, that you set the ACLOCAL
dnl environment variable to find it, such as:
dnl	ACLOCAL="aclocal -I ${PREFIX}/share/aclocal"
m4_pattern_forbid([^XTRANS_CONNECTION_FLAGS$])

# Transport selection macro from xtrans.m4
XTRANS_CONNECTION_FLAGS

# Secure RPC detection macro from xtrans.m4
XTRANS_SECURE_RPC_FLAGS
AM_CONDITIONAL(SECURE_RPC, [test "x$SECURE_RPC" = xyes])

AM_CONDITIONAL(INT10_VM86, [test "x$INT10" = xvm86])
AM_CONDITIONAL(INT10_X86EMU, [test "x$INT10" = xx86emu])
AM_CONDITIONAL(INT10_STUB, [test "x$INT10" = xstub])

dnl DDX Detection... Yes, it's ugly to have it here... but we need to
dnl handle this early on so that we don't require unsupported extensions
case $host_os in
	cygwin* | mingw*)
		CONFIG_HAL=no
		CONFIG_UDEV=no
		CONFIG_UDEV_KMS=no
		DGA=no
		DRM=no
		DRI2=no
		DRI3=no
		INT10MODULE=no
		PCI=no
		VGAHW=no
		VBE=no
		XF86UTILS=no
		XF86VIDMODE=no
		XSELINUX=no
		XV=no
		SYMBOL_VISIBILITY=no
		;;
	darwin*)
		PCI=no
		INT10MODULE=no
		VGAHW=no
		VBE=no
		DRM=no
		DRI2=no
		DRI3=no

		if test x$XQUARTZ = xauto; then
			AC_CACHE_CHECK([whether to build Xquartz],xorg_cv_Carbon_framework,[
		 		save_LDFLAGS=$LDFLAGS
				LDFLAGS="$LDFLAGS -framework Carbon"
				AC_LINK_IFELSE([AC_LANG_SOURCE([char FSFindFolder(); int main() { FSFindFolder(); return 0;}])],
				               [xorg_cv_Carbon_framework=yes],
				               [xorg_cv_Carbon_framework=no])
			        LDFLAGS=$save_LDFLAGS])
                
			if test "X$xorg_cv_Carbon_framework" = Xyes; then
				XQUARTZ=yes
			else
				XQUARTZ=no
			fi
		fi

		AC_CHECK_FUNC(dispatch_async,
		              AC_DEFINE([HAVE_LIBDISPATCH], 1, [Define to 1 if you have the libdispatch (GCD) available]),
		              [])

		if test "x$XQUARTZ" = xyes ; then
			XQUARTZ=yes
			XVFB=no
			XNEST=no
			XWAYLAND=no

			COMPOSITE=no
			DGA=no
			DPMSExtension=no
			XF86VIDMODE=no
		fi
		;;
	gnu*)
		DRM=no
		DRI2=no
		DRI3=no
		;;
	*) XQUARTZ=no ;;
esac

dnl ---------------------------------------------------------------------------
dnl Extension section
dnl ---------------------------------------------------------------------------
XEXT_INC='-I$(top_srcdir)/Xext'
XEXT_LIB='$(top_builddir)/Xext/libXext.la'

dnl Optional modules
VIDEOPROTO="videoproto"
COMPOSITEPROTO="compositeproto >= 0.4"
RECORDPROTO="recordproto >= 1.13.99.1"
SCRNSAVERPROTO="scrnsaverproto >= 1.1"
RESOURCEPROTO="resourceproto >= 1.2.0"
DRIPROTO="xf86driproto >= 2.1.0"
DRI2PROTO="dri2proto >= 2.8"
DRI3PROTO="dri3proto >= 1.0"
XINERAMAPROTO="xineramaproto"
BIGFONTPROTO="xf86bigfontproto >= 1.2.0"
DGAPROTO="xf86dgaproto >= 2.0.99.1"
GLPROTO="glproto >= 1.4.17"
DMXPROTO="dmxproto >= 2.2.99.1"
VIDMODEPROTO="xf86vidmodeproto >= 2.2.99.1"
WINDOWSWMPROTO="windowswmproto"
APPLEWMPROTO="applewmproto >= 1.4"
LIBXSHMFENCE="xshmfence >= 1.1"

dnl Required modules
XPROTO="xproto >= 7.0.28"
RANDRPROTO="randrproto >= 1.5.0"
RENDERPROTO="renderproto >= 0.11"
XEXTPROTO="xextproto >= 7.2.99.901"
INPUTPROTO="inputproto >= 2.3"
KBPROTO="kbproto >= 1.0.3"
FONTSPROTO="fontsproto >= 2.1.3"
FIXESPROTO="fixesproto >= 5.0"
DAMAGEPROTO="damageproto >= 1.1"
XCMISCPROTO="xcmiscproto >= 1.2.0"
BIGREQSPROTO="bigreqsproto >= 1.1.0"
XTRANS="xtrans >= 1.3.5"
PRESENTPROTO="presentproto >= 1.0"

dnl List of libraries that require a specific version
LIBAPPLEWM="applewm >= 1.4"
LIBDMX="dmx >= 1.0.99.1"
LIBDRI="dri >= 7.8.0"
LIBDRM="libdrm >= 2.3.0"
LIBEGL="egl"
LIBGBM="gbm >= 10.2.0"
LIBGL="gl >= 7.1.0"
LIBXEXT="xext >= 1.0.99.4"
LIBXFONT="xfont >= 1.4.2"
LIBXI="xi >= 1.2.99.1"
LIBXTST="xtst >= 1.0.99.2"
LIBPCIACCESS="pciaccess >= 0.12.901"
LIBUDEV="libudev >= 143"
LIBSELINUX="libselinux >= 2.0.86"
LIBDBUS="dbus-1 >= 1.0"
LIBPIXMAN="pixman-1 >= 0.27.2"

dnl Pixman is always required, but we separate it out so we can link
dnl specific modules against it
PKG_CHECK_MODULES(PIXMAN, $LIBPIXMAN)
REQUIRED_LIBS="$REQUIRED_LIBS $LIBPIXMAN $LIBXFONT xau"

dnl Core modules for most extensions, et al.
SDK_REQUIRED_MODULES="$XPROTO $RANDRPROTO $RENDERPROTO $XEXTPROTO $INPUTPROTO $KBPROTO $FONTSPROTO $LIBPIXMAN"
# Make SDK_REQUIRED_MODULES available for inclusion in xorg-server.pc
AC_SUBST(SDK_REQUIRED_MODULES)

REQUIRED_MODULES="$FIXESPROTO $DAMAGEPROTO $XCMISCPROTO $XTRANS $BIGREQSPROTO $SDK_REQUIRED_MODULES"

dnl systemd socket activation
dnl activate the code in libxtrans that grabs systemd's socket fds
dnl libsystemd-daemon was moved into libsystemd in version 209
LIBSYSTEMD="libsystemd >= 209"
AC_ARG_WITH([systemd-daemon],
	AS_HELP_STRING([--with-systemd-daemon],
		[support systemd socket activation (default: auto)]),
	[WITH_SYSTEMD_DAEMON=$withval], [WITH_SYSTEMD_DAEMON=auto])
if test "x$WITH_SYSTEMD_DAEMON" = "xyes" -o "x$WITH_SYSTEMD_DAEMON" = "xauto" ; then
	PKG_CHECK_MODULES([SYSTEMD_DAEMON], [$LIBSYSTEMD],
			  [HAVE_SYSTEMD_DAEMON=yes;
			   LIBSYSTEMD_DAEMON="$LIBSYSTEMD"],
			  [PKG_CHECK_MODULES([SYSTEMD_DAEMON], [libsystemd-daemon],
					     [HAVE_SYSTEMD_DAEMON=yes;
					      LIBSYSTEMD_DAEMON=libsystemd-daemon],
					     [HAVE_SYSTEMD_DAEMON=no])])
	if test "x$HAVE_SYSTEMD_DAEMON" = xyes; then
		AC_DEFINE(HAVE_SYSTEMD_DAEMON, 1, [Define to 1 if libsystemd-daemon is available])
		REQUIRED_LIBS="$REQUIRED_LIBS $LIBSYSTEMD_DAEMON"
	elif test "x$WITH_SYSTEMD_DAEMON" = xyes; then
		AC_MSG_ERROR([systemd support requested but no library has been found])
	fi
fi
AM_CONDITIONAL([HAVE_SYSTEMD_DAEMON], [test "x$HAVE_SYSTEMD_DAEMON" = "xyes"])

if test "x$CONFIG_UDEV" = xyes && test "x$CONFIG_HAL" = xyes; then
	AC_MSG_ERROR([Hotplugging through both libudev and hal not allowed])
fi

PKG_CHECK_MODULES(UDEV, $LIBUDEV, [HAVE_LIBUDEV=yes], [HAVE_LIBUDEV=no])
if test "x$CONFIG_UDEV" = xauto; then
	CONFIG_UDEV="$HAVE_LIBUDEV"
	AC_DEFINE(HAVE_LIBUDEV, 1, [Define to 1 if libudev is available.])
fi
AM_CONDITIONAL(CONFIG_UDEV, [test "x$CONFIG_UDEV" = xyes])
if test "x$CONFIG_UDEV" = xyes; then
	CONFIG_HAL=no
	if test "x$CONFIG_UDEV_KMS" = xauto; then
		CONFIG_UDEV_KMS="$HAVE_LIBUDEV"
	fi
	if ! test "x$HAVE_LIBUDEV" = xyes; then
		AC_MSG_ERROR([udev configuration API requested, but libudev is not installed])
	fi
	AC_DEFINE(CONFIG_UDEV, 1, [Use libudev for input hotplug])
	if test "x$CONFIG_UDEV_KMS" = xyes; then
		AC_DEFINE(CONFIG_UDEV_KMS, 1, [Use libudev for kms enumeration])
	fi
	SAVE_LIBS=$LIBS
	SAVE_CFLAGS=$CFLAGS
	CFLAGS="$CFLAGS $UDEV_CFLAGS"
	LIBS=$UDEV_LIBS
	AC_CHECK_FUNCS([udev_monitor_filter_add_match_tag])
	AC_CHECK_FUNCS([udev_enumerate_add_match_tag])
	LIBS=$SAVE_LIBS
	CFLAGS=$SAVE_CFLAGS
fi
AM_CONDITIONAL(CONFIG_UDEV_KMS, [test "x$CONFIG_UDEV_KMS" = xyes])

PKG_CHECK_MODULES(DBUS, $LIBDBUS, [HAVE_DBUS=yes], [HAVE_DBUS=no])
if test "x$HAVE_DBUS" = xyes; then
	AC_DEFINE(HAVE_DBUS, 1, [Have D-Bus support])
fi
AM_CONDITIONAL(HAVE_DBUS, [test "x$HAVE_DBUS" = xyes])

PKG_CHECK_MODULES(HAL, hal, [HAVE_HAL=yes], [HAVE_HAL=no])
if test "x$CONFIG_HAL" = xauto; then
	CONFIG_HAL="$HAVE_HAL"
fi
if test "x$CONFIG_HAL" = xyes; then
	if ! test "x$HAVE_HAL" = xyes; then
		AC_MSG_ERROR([HAL hotplug API requested, but HAL is not installed.])
	fi

	AC_DEFINE(CONFIG_HAL, 1, [Use the HAL hotplug API])
	NEED_DBUS="yes"
fi
AM_CONDITIONAL(CONFIG_HAL, [test "x$CONFIG_HAL" = xyes])

if test "x$SYSTEMD_LOGIND" = xauto; then
        if test "x$HAVE_DBUS" = xyes -a "x$CONFIG_UDEV" = xyes ; then
                SYSTEMD_LOGIND=yes
        else
                SYSTEMD_LOGIND=no
        fi
fi
if test "x$SYSTEMD_LOGIND" = xyes; then
        if ! test "x$HAVE_DBUS" = xyes; then
                AC_MSG_ERROR([systemd-logind requested, but D-Bus is not installed.])
        fi
        if ! test "x$CONFIG_UDEV" = xyes ; then
                AC_MSG_ERROR([systemd-logind is only supported in combination with udev configuration.])
        fi

        AC_DEFINE(SYSTEMD_LOGIND, 1, [Enable systemd-logind integration])
        NEED_DBUS="yes"
fi
AM_CONDITIONAL(SYSTEMD_LOGIND, [test "x$SYSTEMD_LOGIND" = xyes])

if test "x$SUID_WRAPPER" = xyes; then
        dnl This is a define so that if some platforms want to put the wrapper
        dnl somewhere else this can be easily changed
        AC_DEFINE_DIR(SUID_WRAPPER_DIR, libexecdir, [Where to install the Xorg binary and Xorg.wrap])
        SETUID="no"
fi
AM_CONDITIONAL(SUID_WRAPPER, [test "x$SUID_WRAPPER" = xyes])

if test "x$NEED_DBUS" = xyes; then
        AC_DEFINE(NEED_DBUS, 1, [Enable D-Bus core])
fi
AM_CONDITIONAL(NEED_DBUS, [test "x$NEED_DBUS" = xyes])

if test "x$CONFIG_WSCONS" = xauto; then
	case $host_os in
		*openbsd*)
			CONFIG_WSCONS=yes;
			;;
		*)
			CONFIG_WSCONS=no;
			;;
	esac
fi
AM_CONDITIONAL(CONFIG_WSCONS, [test "x$CONFIG_WSCONS" = xyes])
if test "x$CONFIG_WSCONS" = xyes; then
	AC_DEFINE(CONFIG_WSCONS, 1, [Use wscons for input auto configuration])
fi

if test "x$USE_SIGIO_BY_DEFAULT" = xyes; then
	USE_SIGIO_BY_DEFAULT_VALUE=TRUE
else
	USE_SIGIO_BY_DEFAULT_VALUE=FALSE
fi
AC_DEFINE_UNQUOTED([USE_SIGIO_BY_DEFAULT], [$USE_SIGIO_BY_DEFAULT_VALUE],
		   [Use SIGIO handlers for input device events by default])

AC_MSG_CHECKING([for glibc...])
AC_PREPROC_IFELSE([AC_LANG_SOURCE([
#include <features.h>
#ifndef __GLIBC__
#error
#endif
])], glibc=yes, glibc=no)
AC_MSG_RESULT([$glibc])

AC_CHECK_FUNCS([clock_gettime], [have_clock_gettime=yes],
               [AC_CHECK_LIB([rt], [clock_gettime], [have_clock_gettime=-lrt],
                             [have_clock_gettime=no])])

AC_MSG_CHECKING([for a useful monotonic clock ...])

if ! test "x$have_clock_gettime" = xno; then
    if ! test "x$have_clock_gettime" = xyes; then
        CLOCK_LIBS="$have_clock_gettime"
    else
        CLOCK_LIBS=""
    fi

    LIBS_SAVE="$LIBS"
    LIBS="$CLOCK_LIBS"
    CPPFLAGS_SAVE="$CPPFLAGS"

    if test x"$glibc" = xyes; then
        CPPFLAGS="$CPPFLAGS -D_POSIX_C_SOURCE=200112L"
    fi

    AC_RUN_IFELSE([AC_LANG_SOURCE([
#include <time.h>

int main(int argc, char *argv[[]]) {
    struct timespec tp;

    if (clock_gettime(CLOCK_MONOTONIC, &tp) == 0)
        return 0;
    else
        return 1;
}
    ])], [MONOTONIC_CLOCK=yes], [MONOTONIC_CLOCK=no],
       [MONOTONIC_CLOCK="cross compiling"])

    LIBS="$LIBS_SAVE"
    CPPFLAGS="$CPPFLAGS_SAVE"
else
    MONOTONIC_CLOCK=no
fi

AC_MSG_RESULT([$MONOTONIC_CLOCK])

if test "x$MONOTONIC_CLOCK" = xyes; then
    AC_DEFINE(MONOTONIC_CLOCK, 1, [Have monotonic clock from clock_gettime()])
    LIBS="$LIBS $CLOCK_LIBS"
fi

AM_CONDITIONAL(XV, [test "x$XV" = xyes])
if test "x$XV" = xyes; then
	AC_DEFINE(XV, 1, [Support Xv extension])
	AC_DEFINE(XvExtension, 1, [Build Xv extension])
	REQUIRED_MODULES="$REQUIRED_MODULES $VIDEOPROTO"
	SDK_REQUIRED_MODULES="$SDK_REQUIRED_MODULES $VIDEOPROTO"
else
	XVMC=no
fi

AM_CONDITIONAL(XVMC, [test "x$XVMC" = xyes])
if test "x$XVMC" = xyes; then
	AC_DEFINE(XvMCExtension, 1, [Build XvMC extension])
fi

AM_CONDITIONAL(COMPOSITE, [test "x$COMPOSITE" = xyes])
if test "x$COMPOSITE" = xyes; then
	AC_DEFINE(COMPOSITE, 1, [Support Composite Extension])
	REQUIRED_MODULES="$REQUIRED_MODULES $COMPOSITEPROTO"
	COMPOSITE_LIB='$(top_builddir)/composite/libcomposite.la'
	COMPOSITE_INC='-I$(top_srcdir)/composite'
fi

if test "x$MITSHM" = xauto; then
	MITSHM="$ac_cv_sysv_ipc"
fi
AM_CONDITIONAL(MITSHM, [test "x$MITSHM" = xyes])
if test "x$MITSHM" = xyes; then
	AC_DEFINE(MITSHM, 1, [Support MIT-SHM extension])
	AC_DEFINE(HAS_SHM, 1, [Support SHM])
fi

AM_CONDITIONAL(RECORD, [test "x$RECORD" = xyes])
if test "x$RECORD" = xyes; then
	AC_DEFINE(XRECORD, 1, [Support Record extension])
	REQUIRED_MODULES="$REQUIRED_MODULES $RECORDPROTO"
	RECORD_LIB='$(top_builddir)/record/librecord.la'
fi

AM_CONDITIONAL(SCREENSAVER, [test "x$SCREENSAVER" = xyes])
if test "x$SCREENSAVER" = xyes; then
	AC_DEFINE(SCREENSAVER, 1, [Support MIT-SCREEN-SAVER extension])
	REQUIRED_MODULES="$REQUIRED_MODULES $SCRNSAVERPROTO"
	SDK_REQUIRED_MODULES="$SDK_REQUIRED_MODULES $SCRNSAVERPROTO"
fi

AM_CONDITIONAL(RES, [test "x$RES" = xyes])
if test "x$RES" = xyes; then
	AC_DEFINE(RES, 1, [Support X resource extension])
	REQUIRED_MODULES="$REQUIRED_MODULES $RESOURCEPROTO"
	SDK_REQUIRED_MODULES="$SDK_REQUIRED_MODULES $RESOURCEPROTO"
fi

if test "x$LISTEN_TCP" = xyes; then
	AC_DEFINE(LISTEN_TCP, 1, [Listen on TCP socket])
fi
if test "x$LISTEN_UNIX" = xyes; then
	AC_DEFINE(LISTEN_UNIX, 1, [Listen on Unix socket])
fi
if test "x$LISTEN_LOCAL" = xyes; then
	AC_DEFINE(LISTEN_LOCAL, 1, [Listen on local socket])
fi

# The XRes extension may support client ID tracking only if it has
# been specifically enabled. Client ID tracking is implicitly not
# supported if XRes extension is disabled.
AC_MSG_CHECKING([whether to track client ids])
if test "x$RES" = xyes && test "x$CLIENTIDS" = xyes; then
	AC_DEFINE(CLIENTIDS, 1, [Support client ID tracking])
else
	CLIENTIDS=no
fi
if test "x$CLIENTIDS" = xyes; then
	case $host_os in
	openbsd*)
		SYS_LIBS="$SYS_LIBS -lkvm"
	;;
	esac
fi
AC_MSG_RESULT([$CLIENTIDS])
AM_CONDITIONAL(CLIENTIDS, [test "x$CLIENTIDS" = xyes])

AM_CONDITIONAL(DRI, test "x$DRI" = xyes)
if test "x$DRI" = xyes; then
	AC_DEFINE(XF86DRI, 1, [Build DRI extension])
	REQUIRED_MODULES="$REQUIRED_MODULES $DRIPROTO $GLPROTO $LIBDRI"
	SDK_REQUIRED_MODULES="$SDK_REQUIRED_MODULES $DRIPROTO $GLPROTO $LIBDRI"
fi

PKG_CHECK_MODULES([DRI2PROTO], $DRI2PROTO,
                  [HAVE_DRI2PROTO=yes], [HAVE_DRI2PROTO=no])
case "$DRI2,$HAVE_DRI2PROTO" in
	yes,no)
		AC_MSG_ERROR([DRI2 requested, but dri2proto not found.])
		;;
	yes,yes | auto,yes)
		AC_DEFINE(DRI2, 1, [Build DRI2 extension])
		DRI2=yes
		LIBGL="gl >= 9.2.0"
		SDK_REQUIRED_MODULES="$SDK_REQUIRED_MODULES $DRI2PROTO"
		;;
esac
AM_CONDITIONAL(DRI2, test "x$DRI2" = xyes)

dnl
dnl Locate a suitable tmp file system for creating shared memeory files
dnl

AC_ARG_WITH(shared-memory-dir, AS_HELP_STRING([--with-shared-memory-dir=PATH], [Path to directory in a world-writable temporary directory for anonymous shared memory (default: auto)]),
[],
[with_shared_memory_dir=yes])

shmdirs="/run/shm /var/tmp /tmp"

case x"$with_shared_memory_dir" in
xyes)
	for dir in $shmdirs; do
		case x"$with_shared_memory_dir" in
		xyes)
			echo Checking temp dir "$dir"
			if test -d "$dir"; then
				with_shared_memory_dir="$dir"
			fi
			;;
		esac
	done
	;;
x/*)
	;;
xno)
	;;
*)
	AC_MSG_ERROR([Invalid directory specified for --with-shared-memory-dir: $with_shared_memory_dir])
	;;
esac

case x"$with_shared_memory_dir" in
xyes)
	AC_MSG_ERROR([No directory found for shared memory temp files.])
	;;
xno)
	;;
*)
	AC_DEFINE_UNQUOTED(SHMDIR, ["$with_shared_memory_dir"], [Directory for shared memory temp files])
	;;
esac

AC_ARG_ENABLE(xtrans-send-fds,	AS_HELP_STRING([--disable-xtrans-send-fds], [Use Xtrans support for fd passing (default: auto)]), [XTRANS_SEND_FDS=$enableval], [XTRANS_SEND_FDS=auto])

case "x$XTRANS_SEND_FDS" in
xauto)
	case "$host_os" in
	linux*|openbsd*|solaris*)
		XTRANS_SEND_FDS=yes
		;;
	*)
		XTRANS_SEND_FDS=no
		;;
	esac
esac

case "x$XTRANS_SEND_FDS" in
xyes)
	AC_DEFINE(XTRANS_SEND_FDS, 1, [Enable xtrans fd passing support])
	;;
esac

case "$DRI3,$XTRANS_SEND_FDS" in
	yes,yes | auto,yes)
		;;
	yes,no)
		AC_MSG_ERROR([DRI3 requested, but xtrans fd passing support not found.])
		DRI3=no
		;;
	no,*)
		;;
	*)
		AC_MSG_NOTICE([DRI3 disabled because xtrans fd passing support not found.])
		DRI3=no
		;;
esac

PKG_CHECK_MODULES([DRI3PROTO], $DRI3PROTO,
                  [HAVE_DRI3PROTO=yes], [HAVE_DRI3PROTO=no])

case "$DRI3,$HAVE_DRI3PROTO" in
	yes,yes | auto,yes)
		;;
	yes,no)
		AC_MSG_ERROR([DRI3 requested, but dri3proto not found.])
		DRI3=no
		;;
	no,*)
		;;
	*)
		AC_MSG_NOTICE([DRI3 disabled because dri3proto not found.])
		DRI3=no
		;;
esac

AC_CHECK_FUNCS([sigaction])

BUSFAULT=no

case x"$ac_cv_func_sigaction" in
	xyes)
		AC_DEFINE(HAVE_SIGACTION, 1, [Have sigaction function])
		BUSFAULT=yes
		;;
esac

case x"$BUSFAULT" in
	xyes)
		AC_DEFINE(BUSFAULT, 1, [Include busfault OS API])
		;;
esac

AM_CONDITIONAL(BUSFAULT, test x"$BUSFAULT" = xyes)


PKG_CHECK_MODULES([XSHMFENCE], $LIBXSHMFENCE, [HAVE_XSHMFENCE=yes], [HAVE_XSHMFENCE=no])
if test "x$XSHMFENCE" = "xauto"; then
    XSHMFENCE="$HAVE_XSHMFENCE"
fi

if test "x$XSHMFENCE" = "xyes"; then
    if test "x$HAVE_XSHMFENCE" != "xyes"; then
        AC_MSG_ERROR([xshmfence requested but not installed.])
    fi
    AC_DEFINE(HAVE_XSHMFENCE, 1, [Have xshmfence support])
    REQUIRED_LIBS="$REQUIRED_LIBS $LIBXSHMFENCE"
fi

AM_CONDITIONAL(XSHMFENCE, [test "x$XSHMFENCE" = xyes])

case "$DRI3,$XSHMFENCE" in
	yes,yes | auto,yes)
		;;
	yes,no)
		AC_MSG_ERROR([DRI3 requested, but xshmfence not found.])
		DRI3=no
		;;
	no,*)
		;;
	*)
		AC_MSG_NOTICE([DRI3 disabled because xshmfence not found.])
		DRI3=no
		;;
esac

case x"$DRI3" in
	xyes|xauto)
		DRI3=yes
		AC_DEFINE(DRI3, 1, [Build DRI3 extension])
		DRI3_LIB='$(top_builddir)/dri3/libdri3.la'
		SDK_REQUIRED_MODULES="$SDK_REQUIRED_MODULES $DRI3PROTO"
		AC_MSG_NOTICE([DRI3 enabled]);
		;;
esac

AM_CONDITIONAL(DRI3, test "x$DRI3" = xyes)

if test "x$DRI" = xyes || test "x$DRI2" = xyes || test "x$DRI3" = xyes || test "x$CONFIG_UDEV_KMS" = xyes; then
	if test "x$DRM" = xyes; then
		AC_DEFINE(WITH_LIBDRM, 1, [Building with libdrm support])
		PKG_CHECK_MODULES([LIBDRM], $LIBDRM)
	fi
fi

if test "x$DRI2" = xyes; then
	save_CFLAGS=$CFLAGS
	CFLAGS="$CFLAGS $GL_CFLAGS $LIBDRM_CFLAGS"
	AC_COMPILE_IFELSE([AC_LANG_SOURCE([[#include <GL/gl.h>
#include <GL/internal/dri_interface.h>
#ifndef __DRI_DRI2
#error DRI2 extension not available.
#endif]])],
			  [HAVE_DRI2EXTENSION=yes],
			  [HAVE_DRI2EXTENSION=no])
	CFLAGS=$save_CFLAGS
	if test "x$HAVE_DRI2EXTENSION" = xyes; then
		AC_DEFINE(DRI2_AIGLX, 1, [Build DRI2 AIGLX loader])
		DRI2_AIGLX=yes
	else
		AC_MSG_NOTICE([DRI2 AIGLX disabled, __DRI_DRI2 not defined in dri_interface.h.])
		DRI2_AIGLX=no
	fi
fi
AM_CONDITIONAL(DRI2_AIGLX, test "x$DRI2_AIGLX" = xyes)

if test "x$GLX" = xyes; then
	PKG_CHECK_MODULES([XLIB], [x11])
	PKG_CHECK_MODULES([GL], $GLPROTO $LIBGL)
	AC_SUBST(XLIB_CFLAGS)
	AC_DEFINE(GLXEXT, 1, [Build GLX extension])
	GLX_LIBS='$(top_builddir)/glx/libglx.la'
	GLX_SYS_LIBS="$GLX_SYS_LIBS $GL_LIBS"
else
        GLX=no
fi
AM_CONDITIONAL(GLX, test "x$GLX" = xyes)

if test "x$GLX" = xno; then
        AIGLX=no
fi

if test "x$AIGLX" = xyes -a \( "x$DRI2" = xyes \); then
	AC_DEFINE(AIGLX, 1, [Build AIGLX loader])
fi
AM_CONDITIONAL(AIGLX_DRI_LOADER, { test "x$DRI2" = xyes; } && test "x$AIGLX" = xyes)

AC_SUBST([GLX_DEFINES])
AC_SUBST([GLX_SYS_LIBS])

AM_CONDITIONAL(PRESENT, [test "x$PRESENT" = xyes])
if test "x$PRESENT" = xyes; then
	AC_DEFINE(PRESENT, 1, [Support Present extension])
	REQUIRED_MODULES="$REQUIRED_MODULES $PRESENTPROTO"
	SDK_REQUIRED_MODULES="$SDK_REQUIRED_MODULES $PRESENTPROTO"
	PRESENT_INC='-I$(top_srcdir)/present'
	PRESENT_LIB='$(top_builddir)/present/libpresent.la'
fi

# link Xorg with pthreads for llvm-pipe driver on OpenBSD
if test "x$DRI2" = xyes; then
	case $host_os in
	openbsd*)
        	XORG_SYS_LIBS="-lpthread"
        	;;
	esac
fi

AM_CONDITIONAL(XINERAMA, [test "x$XINERAMA" = xyes])
if test "x$XINERAMA" = xyes; then
	AC_DEFINE(XINERAMA, 1, [Support Xinerama extension])
	AC_DEFINE(PANORAMIX, 1, [Internal define for Xinerama])
	REQUIRED_MODULES="$REQUIRED_MODULES $XINERAMAPROTO"
	SDK_REQUIRED_MODULES="$SDK_REQUIRED_MODULES $XINERAMAPROTO"
fi

AM_CONDITIONAL(XACE, [test "x$XACE" = xyes])
if test "x$XACE" = xyes; then
	AC_DEFINE(XACE, 1, [Build X-ACE extension])
fi

AM_CONDITIONAL(XSELINUX, [test "x$XSELINUX" = xyes])
if test "x$XSELINUX" = xyes; then
	if test "x$XACE" != xyes; then
		AC_MSG_ERROR([cannot build SELinux extension without X-ACE])
	fi
	AC_CHECK_HEADERS([libaudit.h], [], AC_MSG_ERROR([SELinux extension requires audit system headers]))
	AC_CHECK_LIB(audit, audit_open, [], AC_MSG_ERROR([SELinux extension requires audit system library]))
	PKG_CHECK_MODULES([SELINUX], $LIBSELINUX)
	SELINUX_LIBS="$SELINUX_LIBS -laudit"
	AC_DEFINE(XSELINUX, 1, [Build SELinux extension])
fi

AM_CONDITIONAL(XCSECURITY, [test "x$XCSECURITY" = xyes])
if test "x$XCSECURITY" = xyes; then
	if test "x$XACE" != xyes; then
		AC_MSG_ERROR([cannot build Security extension without X-ACE])
	fi
	AC_DEFINE(XCSECURITY, 1, [Build Security extension])
fi

AM_CONDITIONAL(DBE, [test "x$DBE" = xyes])
if test "x$DBE" = xyes; then
	AC_DEFINE(DBE, 1, [Support DBE extension])
	DBE_LIB='$(top_builddir)/dbe/libdbe.la'
	DBE_INC='-I$(top_srcdir)/dbe'
fi

AM_CONDITIONAL(XF86BIGFONT, [test "x$XF86BIGFONT" = xyes])
if test "x$XF86BIGFONT" = xyes; then
	AC_DEFINE(XF86BIGFONT, 1, [Support XF86 Big font extension])
	REQUIRED_MODULES="$REQUIRED_MODULES $BIGFONTPROTO"
	SDK_REQUIRED_MODULES="$SDK_REQUIRED_MODULES $BIGFONTPROTO"
fi

AM_CONDITIONAL(DPMSExtension, [test "x$DPMSExtension" = xyes])
if test "x$DPMSExtension" = xyes; then
	AC_DEFINE(DPMSExtension, 1, [Support DPMS extension])
fi

AC_DEFINE(RENDER, 1, [Support RENDER extension])
RENDER_LIB='$(top_builddir)/render/librender.la'
RENDER_INC='-I$(top_srcdir)/render'

AC_DEFINE(RANDR, 1, [Support RANDR extension])
RANDR_LIB='$(top_builddir)/randr/librandr.la'
RANDR_INC='-I$(top_srcdir)/randr'

AC_DEFINE(XFIXES,1,[Support XFixes extension])
FIXES_LIB='$(top_builddir)/xfixes/libxfixes.la'
FIXES_INC='-I$(top_srcdir)/xfixes'

AC_DEFINE(DAMAGE,1,[Support Damage extension])
DAMAGE_LIB='$(top_builddir)/damageext/libdamageext.la'
DAMAGE_INC='-I$(top_srcdir)/damageext'
MIEXT_DAMAGE_LIB='$(top_builddir)/miext/damage/libdamage.la'
MIEXT_DAMAGE_INC='-I$(top_srcdir)/miext/damage'

# XINPUT extension is integral part of the server
AC_DEFINE(XINPUT, 1, [Support X Input extension])
XI_LIB='$(top_builddir)/Xi/libXi.la'
XI_INC='-I$(top_srcdir)/Xi'

AM_CONDITIONAL(XF86UTILS, test "x$XF86UTILS" = xyes)
AM_CONDITIONAL(VGAHW, test "x$VGAHW" = xyes)
AM_CONDITIONAL(VBE, test "x$VBE" = xyes)
AM_CONDITIONAL(INT10MODULE, test "x$INT10MODULE" = xyes)

AC_DEFINE(SHAPE, 1, [Support SHAPE extension])

AC_DEFINE_DIR(XKB_BASE_DIRECTORY, XKBPATH, [Path to XKB data])
AC_ARG_WITH(xkb-bin-directory,
				AS_HELP_STRING([--with-xkb-bin-directory=DIR], [Directory containing xkbcomp program (default: ${bindir})]),
				[XKB_BIN_DIRECTORY="$withval"],
				[XKB_BIN_DIRECTORY="$bindir"])

AC_DEFINE_DIR(XKB_BIN_DIRECTORY, XKB_BIN_DIRECTORY, [Path to XKB bin dir])

dnl Make sure XKM_OUTPUT_DIR is an absolute path
XKBOUTPUT_FIRSTCHAR=`echo $XKBOUTPUT | cut -b 1`
if [[ x$XKBOUTPUT_FIRSTCHAR != x/ -a x$XKBOUTPUT_FIRSTCHAR != 'x$' ]] ; then
   XKBOUTPUT="$XKB_BASE_DIRECTORY/$XKBOUTPUT"
fi

dnl XKM_OUTPUT_DIR (used in code) must end in / or file names get hosed
dnl XKB_COMPILED_DIR (used in Makefiles) must not or install-sh gets confused

XKBOUTPUT=`echo $XKBOUTPUT/ | $SED 's|/*$|/|'`
XKB_COMPILED_DIR=`echo $XKBOUTPUT | $SED 's|/*$||'`
AC_DEFINE_DIR(XKM_OUTPUT_DIR, XKBOUTPUT, [Path to XKB output dir])
AC_SUBST(XKB_COMPILED_DIR)

if test "x$XKB_DFLT_RULES" = x; then
    case $host_os in
    linux*)
        dnl doesn't take AutoAddDevices into account, but whatever.
        XKB_DFLT_RULES="evdev"
        ;;
    *)
        XKB_DFLT_RULES="base"
        ;;
    esac
fi
AC_DEFINE_UNQUOTED(XKB_DFLT_RULES, ["$XKB_DFLT_RULES"], [Default XKB ruleset])
AC_DEFINE_UNQUOTED(XKB_DFLT_MODEL, ["$XKB_DFLT_MODEL"], [Default XKB model])
AC_DEFINE_UNQUOTED(XKB_DFLT_LAYOUT, ["$XKB_DFLT_LAYOUT"], [Default XKB layout])
AC_DEFINE_UNQUOTED(XKB_DFLT_VARIANT, ["$XKB_DFLT_VARIANT"], [Default XKB variant])
AC_DEFINE_UNQUOTED(XKB_DFLT_OPTIONS, ["$XKB_DFLT_OPTIONS"], [Default XKB options])
AC_SUBST([XKB_DFLT_RULES])
AC_SUBST([XKB_DFLT_MODEL])
AC_SUBST([XKB_DFLT_LAYOUT])
AC_SUBST([XKB_DFLT_VARIANT])
AC_SUBST([XKB_DFLT_OPTIONS])

XKB_LIB='$(top_builddir)/xkb/libxkb.la'
XKB_STUB_LIB='$(top_builddir)/xkb/libxkbstubs.la'
REQUIRED_MODULES="$REQUIRED_MODULES xkbfile"

PKG_CHECK_MODULES([XDMCP], [xdmcp], [have_libxdmcp="yes"], [have_libxdmcp="no"])
if test "x$have_libxdmcp" = xyes; then
	AC_CHECK_LIB(Xdmcp, XdmcpWrap, [have_xdmcpwrap="yes"], [have_xdmcpwrap="no"], [$XDMCP_LIBS])
fi
if test "x$XDMCP" = xauto; then
	if test "x$have_libxdmcp" = xyes; then
		XDMCP=yes
	else
		XDMCP=no
	fi
fi
if test "x$XDMAUTH" = xauto; then
	if test "x$have_libxdmcp" = xyes && test "x$have_xdmcpwrap" = xyes; then
		XDMAUTH=yes
	else
		XDMAUTH=no
	fi
fi

AM_CONDITIONAL(XDMCP, [test "x$XDMCP" = xyes])
if test "x$XDMCP" = xyes; then
	AC_DEFINE(XDMCP, 1, [Support XDM Control Protocol])
	REQUIRED_LIBS="$REQUIRED_LIBS xdmcp"
	XDMCP_MODULES="xdmcp"
fi

AM_CONDITIONAL(XDMAUTH, [test "x$XDMAUTH" = xyes])
if test "x$XDMAUTH" = xyes; then
	AC_DEFINE(HASXDMAUTH,1,[Support XDM-AUTH*-1])
	if ! test "x$XDMCP" = xyes; then
		REQUIRED_LIBS="$REQUIRED_LIBS xdmcp"
		XDMCP_MODULES="xdmcp"
	fi
fi

if test "x$XF86VIDMODE" = xauto; then
	PKG_CHECK_EXISTS($VIDMODEPROTO, [XF86VIDMODE=yes], [XF86VIDMODE=no])
fi
if test "x$XF86VIDMODE" = xyes; then
	AC_DEFINE(XF86VIDMODE, 1, [Support XFree86 Video Mode extension])
fi
AM_CONDITIONAL([XF86VIDMODE], [test "x$XF86VIDMODE" = xyes])

AC_DEFINE_DIR(COMPILEDDEFAULTFONTPATH, FONTPATH, [Default font path])
AC_DEFINE_DIR(SERVER_MISC_CONFIG_PATH, SERVERCONFIG, [Server miscellaneous config path])
AC_DEFINE_DIR(BASE_FONT_PATH, FONTROOTDIR, [Default base font path])
dridriverdir=`$PKG_CONFIG --variable=dridriverdir dri`
AC_DEFINE_DIR(DRI_DRIVER_PATH, dridriverdir, [Default DRI driver path])
AC_DEFINE_UNQUOTED(XVENDORNAME, ["$VENDOR_NAME"], [Vendor name])
AC_DEFINE_UNQUOTED(XVENDORNAMESHORT, ["$VENDOR_NAME_SHORT"], [Short vendor name])
AC_DEFINE_UNQUOTED(XORG_DATE, ["$RELEASE_DATE"], [Vendor release])
AC_DEFINE_UNQUOTED(XORG_MAN_VERSION, ["$VENDOR_MAN_VERSION"], [Vendor man version])
AC_DEFINE_UNQUOTED(BUILDERADDR, ["$BUILDERADDR"], [Builder address])

if test -z "$OSNAME"; then
    OSNAME="UNKNOWN"
fi

AC_DEFINE_UNQUOTED(OSNAME, ["$OSNAME"], [Operating System Name])
AC_DEFINE_UNQUOTED(OSVENDOR, ["$OSVENDOR"], [Operating System Vendor])
AC_DEFINE_UNQUOTED(BUILDERSTRING, ["$BUILDERSTRING"], [Builder string])

AC_SUBST([VENDOR_NAME_SHORT])
AC_DEFINE_UNQUOTED(VENDOR_NAME, ["$VENDOR_NAME"], [Vendor name])
AC_DEFINE_UNQUOTED(VENDOR_NAME_SHORT, ["$VENDOR_NAME_SHORT"], [Vendor name])
AC_DEFINE_UNQUOTED(VENDOR_RELEASE, [$VENDOR_RELEASE], [Vendor release])
AC_DEFINE_UNQUOTED(VENDOR_MAN_VERSION, ["$VENDOR_MAN_VERSION"], [Vendor man version])

if test "x$DEBUGGING" = xyes; then
       AC_DEFINE(DEBUG, 1, [Enable debugging code])
fi
AM_CONDITIONAL(DEBUG, [test "x$DEBUGGING" = xyes])

AC_DEFINE(XTEST, 1, [Support XTest extension])
AC_DEFINE(XSYNC, 1, [Support XSync extension])
AC_DEFINE(XCMISC, 1, [Support XCMisc extension])
AC_DEFINE(BIGREQS, 1, [Support BigRequests extension])

if test "x$SPECIAL_DTRACE_OBJECTS" = "xyes" ; then
  DIX_LIB='$(top_builddir)/dix/dix.O'
  OS_LIB='$(top_builddir)/os/os.O $(SHA1_LIBS) $(DLOPEN_LIBS) $(LIBUNWIND_LIBS)'
else
  DIX_LIB='$(top_builddir)/dix/libdix.la'
  OS_LIB='$(top_builddir)/os/libos.la'
fi
AC_SUBST([DIX_LIB])
AC_SUBST([OS_LIB])

MAIN_LIB='$(top_builddir)/dix/libmain.la'
AC_SUBST([MAIN_LIB])

MI_LIB='$(top_builddir)/mi/libmi.la'
MI_EXT_LIB='$(top_builddir)/mi/libmiext.la'
MI_INC='-I$(top_srcdir)/mi'
FB_LIB='$(top_builddir)/fb/libfb.la'
FB_INC='-I$(top_srcdir)/fb'
MIEXT_SHADOW_INC='-I$(top_srcdir)/miext/shadow'
MIEXT_SHADOW_LIB='$(top_builddir)/miext/shadow/libshadow.la'
MIEXT_SYNC_INC='-I$(top_srcdir)/miext/sync'
MIEXT_SYNC_LIB='$(top_builddir)/miext/sync/libsync.la'
CORE_INCS='-I$(top_srcdir)/include -I$(top_builddir)/include'

# SHA1 hashing
AC_ARG_WITH([sha1],
            [AS_HELP_STRING([--with-sha1=libc|libmd|libnettle|libgcrypt|libcrypto|libsha1|CommonCrypto|CryptoAPI],
                            [choose SHA1 implementation])])
AC_CHECK_FUNC([SHA1Init], [HAVE_SHA1_IN_LIBC=yes])
if test "x$with_sha1" = x && test "x$HAVE_SHA1_IN_LIBC" = xyes; then
	with_sha1=libc
fi
if test "x$with_sha1" = xlibc && test "x$HAVE_SHA1_IN_LIBC" != xyes; then
	AC_MSG_ERROR([libc requested but not found])
fi
if test "x$with_sha1" = xlibc; then
	AC_DEFINE([HAVE_SHA1_IN_LIBC], [1],
		[Use libc SHA1 functions])
	SHA1_LIBS=""
fi
AC_CHECK_FUNC([CC_SHA1_Init], [HAVE_SHA1_IN_COMMONCRYPTO=yes])
if test "x$with_sha1" = x && test "x$HAVE_SHA1_IN_COMMONCRYPTO" = xyes; then
	with_sha1=CommonCrypto
fi
if test "x$with_sha1" = xCommonCrypto && test "x$HAVE_SHA1_IN_COMMONCRYPTO" != xyes; then
	AC_MSG_ERROR([CommonCrypto requested but not found])
fi
if test "x$with_sha1" = xCommonCrypto; then
	AC_DEFINE([HAVE_SHA1_IN_COMMONCRYPTO], [1],
		[Use CommonCrypto SHA1 functions])
	SHA1_LIBS=""
fi
dnl stdcall functions cannot be tested with AC_CHECK_LIB
AC_CHECK_HEADER([wincrypt.h], [HAVE_SHA1_IN_CRYPTOAPI=yes], [], [#include <windows.h>])
if test "x$with_sha1" = x && test "x$HAVE_SHA1_IN_CRYPTOAPI" = xyes; then
	with_sha1=CryptoAPI
fi
if test "x$with_sha1" = xCryptoAPI && test "x$HAVE_SHA1_IN_CRYPTOAPI" != xyes; then
	AC_MSG_ERROR([CryptoAPI requested but not found])
fi
if test "x$with_sha1" = xCryptoAPI; then
	AC_DEFINE([HAVE_SHA1_IN_CRYPTOAPI], [1],
		[Use CryptoAPI SHA1 functions])
	SHA1_LIBS=""
fi
AC_CHECK_LIB([md], [SHA1Init], [HAVE_LIBMD=yes])
if test "x$with_sha1" = x && test "x$HAVE_LIBMD" = xyes; then
	with_sha1=libmd
fi
if test "x$with_sha1" = xlibmd && test "x$HAVE_LIBMD" != xyes; then
	AC_MSG_ERROR([libmd requested but not found])
fi
if test "x$with_sha1" = xlibmd; then
	AC_DEFINE([HAVE_SHA1_IN_LIBMD], [1],
	          [Use libmd SHA1 functions])
	SHA1_LIBS=-lmd
fi
PKG_CHECK_MODULES([LIBSHA1], [libsha1], [HAVE_LIBSHA1=yes], [HAVE_LIBSHA1=no])
if test "x$with_sha1" = x && test "x$HAVE_LIBSHA1" = xyes; then
   with_sha1=libsha1
fi
if test "x$with_sha1" = xlibsha1 && test "x$HAVE_LIBSHA1" != xyes; then
	AC_MSG_ERROR([libsha1 requested but not found])
fi
if test "x$with_sha1" = xlibsha1; then
	AC_DEFINE([HAVE_SHA1_IN_LIBSHA1], [1],
	          [Use libsha1 for SHA1])
	SHA1_LIBS=-lsha1
fi
AC_CHECK_LIB([nettle], [nettle_sha1_init], [HAVE_LIBNETTLE=yes])
if test "x$with_sha1" = x && test "x$HAVE_LIBNETTLE" = xyes; then
	with_sha1=libnettle
fi
if test "x$with_sha1" = xlibnettle && test "x$HAVE_LIBNETTLE" != xyes; then
	AC_MSG_ERROR([libnettle requested but not found])
fi
if test "x$with_sha1" = xlibnettle; then
	AC_DEFINE([HAVE_SHA1_IN_LIBNETTLE], [1],
	          [Use libnettle SHA1 functions])
	SHA1_LIBS=-lnettle
fi
AC_CHECK_LIB([gcrypt], [gcry_md_open], [HAVE_LIBGCRYPT=yes])
if test "x$with_sha1" = x && test "x$HAVE_LIBGCRYPT" = xyes; then
	with_sha1=libgcrypt
fi
if test "x$with_sha1" = xlibgcrypt && test "x$HAVE_LIBGCRYPT" != xyes; then
	AC_MSG_ERROR([libgcrypt requested but not found])
fi
if test "x$with_sha1" = xlibgcrypt; then
	AC_DEFINE([HAVE_SHA1_IN_LIBGCRYPT], [1],
	          [Use libgcrypt SHA1 functions])
	SHA1_LIBS=-lgcrypt
fi
# We don't need all of the OpenSSL libraries, just libcrypto
AC_CHECK_LIB([crypto], [SHA1_Init], [HAVE_LIBCRYPTO=yes])
PKG_CHECK_MODULES([OPENSSL], [openssl], [HAVE_OPENSSL_PKC=yes],
                  [HAVE_OPENSSL_PKC=no])
if test "x$HAVE_LIBCRYPTO" = xyes || test "x$HAVE_OPENSSL_PKC" = xyes; then
	if test "x$with_sha1" = x; then
		with_sha1=libcrypto
	fi
else
	if test "x$with_sha1" = xlibcrypto; then
		AC_MSG_ERROR([OpenSSL libcrypto requested but not found])
	fi
fi
if test "x$with_sha1" = xlibcrypto; then
	if test "x$HAVE_LIBCRYPTO" = xyes; then
		SHA1_LIBS=-lcrypto
	else
		SHA1_LIBS="$OPENSSL_LIBS"
		SHA1_CFLAGS="$OPENSSL_CFLAGS"
	fi
fi
AC_MSG_CHECKING([for SHA1 implementation])
if test "x$with_sha1" = x; then
	AC_MSG_ERROR([No suitable SHA1 implementation found])
fi
AC_MSG_RESULT([$with_sha1])
AC_SUBST(SHA1_LIBS)
AC_SUBST(SHA1_CFLAGS)

PKG_CHECK_MODULES([XSERVERCFLAGS], [$REQUIRED_MODULES $REQUIRED_LIBS])
PKG_CHECK_MODULES([XSERVERLIBS], [$REQUIRED_LIBS])

PKG_CHECK_MODULES(LIBUNWIND, libunwind, [HAVE_LIBUNWIND=yes], [HAVE_LIBUNWIND=no])
if test "x$LIBUNWIND" = "xauto"; then
    LIBUNWIND="$HAVE_LIBUNWIND"
fi

if test "x$LIBUNWIND" = "xyes"; then
    if test "x$HAVE_LIBUNWIND" != "xyes"; then
        AC_MSG_ERROR([libunwind requested but not installed.])
    fi
    AC_DEFINE(HAVE_LIBUNWIND, 1, [Have libunwind support])
fi

AM_CONDITIONAL(HAVE_LIBUNWIND, [test "x$LIBUNWIND" = xyes])

# Autotools has some unfortunate issues with library handling.  In order to
# get a server to rebuild when a dependency in the tree is changed, it must
# be listed in SERVERNAME_DEPENDENCIES.  However, no system libraries may be
# listed there, or some versions of autotools will break (especially if a -L
# is required to find the library).  So, we keep two sets of libraries
# detected: NAMESPACE_LIBS for in-tree libraries to be linked against, which
# will go into the _DEPENDENCIES and _LDADD of the server, and
# NAMESPACE_SYS_LIBS which will go into only the _LDADD.  The
# NAMESPACEMODULES_LIBS detected from pkgconfig should always go in
# NAMESPACE_SYS_LIBS.
#
# XSERVER_LIBS is the set of in-tree libraries which all servers require.
# XSERVER_SYS_LIBS is the set of out-of-tree libraries which all servers
# require.
#
XSERVER_CFLAGS="${XSERVER_CFLAGS} ${XSERVERCFLAGS_CFLAGS}"
XSERVER_LIBS="$DIX_LIB $MI_LIB $OS_LIB"
XSERVER_SYS_LIBS="${XSERVERLIBS_LIBS} ${SYS_LIBS} ${LIBS}"
AC_SUBST([XSERVER_LIBS])
AC_SUBST([XSERVER_SYS_LIBS])

UTILS_SYS_LIBS="${SYS_LIBS}"
AC_SUBST([UTILS_SYS_LIBS])

# The Xorg binary needs to export symbols so that they can be used from modules
# Some platforms require extra flags to do this.   libtool should set the
# necessary flags for each platform when -export-dynamic is passed to it.
LD_EXPORT_SYMBOLS_FLAG="-export-dynamic"
case $host_os in
       openbsd*)
       case $host_cpu in
       		m88k)
		LD_EXPORT_SYMBOLS_FLAGS=""
		;;
		*)
		LD_EXPORT_SYMBOLS_FLAG="-Wl,--export-dynamic"
		;;
		esac
       ;;
esac
LD_NO_UNDEFINED_FLAG=
XORG_DRIVER_LIBS=
case "$host_os" in
    cygwin*)
	LD_EXPORT_SYMBOLS_FLAG="-Wl,--export-all,--out-implib,lib\$@@.a"
	LD_NO_UNDEFINED_FLAG="-no-undefined -Wl,\$(top_builddir)/hw/xfree86/libXorg.exe.a"
	XORG_DRIVER_LIBS="-lXorg.exe -L\${moduledir} -lshadow -lfb -no-undefined"
	CYGWIN=yes
	;;
    solaris*)
	# We use AC_LINK_IFELSE to generate a temporary program conftest$EXEEXT
	# that we can link against for testing if the system linker is new
	# enough to support -z parent=<program> for verifying loadable modules
	# are only calling functions defined in either the loading program or
	# the libraries they're linked with.
	AC_LINK_IFELSE(
	    [AC_LANG_SOURCE([int main(int argc, char **argv) { return 0; }])],
	    [mv conftest$EXEEXT conftest.parent
	     XORG_CHECK_LINKER_FLAGS([-Wl,-z,parent=conftest.parent -G],
		[LD_NO_UNDEFINED_FLAG="-Wl,-z,defs -Wl,-z,parent=\$(top_builddir)/hw/xfree86/Xorg"
# Not set yet, since this gets exported in xorg-server.pc to all the drivers,
# and they're not all fixed to build correctly with it yet.
#		 XORG_DRIVER_LIBS="-Wl,-z,defs -Wl,-z,parent=${bindir}/Xorg"
         ],[],
		[AC_LANG_SOURCE([extern int main(int argc, char **argv);
			int call_main(void) { return main(0, (void *)0); }])])
	     rm -f conftest.parent
	    ])
	;;
esac
AC_SUBST([LD_EXPORT_SYMBOLS_FLAG])
AC_SUBST([LD_NO_UNDEFINED_FLAG])
AC_SUBST([XORG_DRIVER_LIBS])
AM_CONDITIONAL([CYGWIN], [test x"$CYGWIN" = xyes])
AM_CONDITIONAL([NO_UNDEFINED], [test x"$LD_NO_UNDEFINED_FLAG" != x])

dnl Imake defines SVR4 on SVR4 systems, and many files check for it, so
dnl we need to replicate that here until those can all be fixed
AC_MSG_CHECKING([if SVR4 needs to be defined])
AC_EGREP_CPP([I_AM_SVR4],[
#if defined(SVR4) || defined(__svr4__) || defined(__SVR4)
 I_AM_SVR4
#endif
],[
AC_DEFINE([SVR4],1,[Define to 1 on systems derived from System V Release 4])
AC_MSG_RESULT([yes])], AC_MSG_RESULT([no]))

XSERVER_CFLAGS="$XSERVER_CFLAGS $CORE_INCS $XEXT_INC $COMPOSITE_INC $DAMAGE_INC $FIXES_INC $XI_INC $MI_INC $MIEXT_SYNC_INC $MIEXT_SHADOW_INC $MIEXT_LAYER_INC $MIEXT_DAMAGE_INC $RENDER_INC $RANDR_INC $FB_INC $DBE_INC $PRESENT_INC"

dnl ---------------------------------------------------------------------------
dnl DDX section.
dnl ---------------------------------------------------------------------------

dnl Xvfb DDX

AC_MSG_CHECKING([whether to build Xvfb DDX])
AC_MSG_RESULT([$XVFB])
AM_CONDITIONAL(XVFB, [test "x$XVFB" = xyes])

if test "x$XVFB" = xyes; then
	XVFB_LIBS="$FB_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $DRI3_LIB $PRESENT_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB"
	XVFB_SYS_LIBS="$XVFBMODULES_LIBS $GLX_SYS_LIBS"
	AC_SUBST([XVFB_LIBS])
	AC_SUBST([XVFB_SYS_LIBS])
fi


dnl Xnest DDX

PKG_CHECK_MODULES(XNESTMODULES, [$LIBXEXT x11 xau $XDMCP_MODULES], [have_xnest=yes], [have_xnest=no])
AC_MSG_CHECKING([whether to build Xnest DDX])
if test "x$XNEST" = xauto; then
	XNEST="$have_xnest"
fi
AC_MSG_RESULT([$XNEST])
AM_CONDITIONAL(XNEST, [test "x$XNEST" = xyes])

if test "x$XNEST" = xyes; then
	if test "x$have_xnest" = xno; then
		AC_MSG_ERROR([Xnest build explicitly requested, but required modules not found.])
	fi
	XNEST_LIBS="$FB_LIB $FIXES_LIB $MI_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB  $DRI3_LIB $PRESENT_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $MAIN_LIB $DIX_LIB $OS_LIB"
	XNEST_SYS_LIBS="$XNESTMODULES_LIBS $GLX_SYS_LIBS"
	AC_SUBST([XNEST_LIBS])
	AC_SUBST([XNEST_SYS_LIBS])
fi


dnl Xorg DDX

AC_MSG_CHECKING([whether to build Xorg DDX])
if test "x$XORG" = xauto; then
	XORG="yes"
	case $host_os in
		cygwin*) XORG="no" ;;
		mingw*)  XORG="no" ;;
		darwin*) XORG="no" ;;
	esac
fi
AC_MSG_RESULT([$XORG])

if test "x$XORG" = xyes; then
	XORG_DDXINCS='-I$(top_srcdir)/hw/xfree86 -I$(top_srcdir)/hw/xfree86/include -I$(top_srcdir)/hw/xfree86/common'
	XORG_OSINCS='-I$(top_srcdir)/hw/xfree86/os-support -I$(top_srcdir)/hw/xfree86/os-support/bus -I$(top_srcdir)/os'
	XORG_INCS="$XORG_DDXINCS $XORG_OSINCS"
	XORG_CFLAGS="$XORGSERVER_CFLAGS -DHAVE_XORG_CONFIG_H"
	XORG_LIBS="$COMPOSITE_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $DRI3_LIB $PRESENT_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $XI_LIB $XKB_LIB"

	dnl ==================================================================
	dnl symbol visibility
	symbol_visibility=
	have_visibility=disabled
	if test x$SYMBOL_VISIBILITY != xno; then
	    AC_MSG_CHECKING(for symbol visibility support)
	    if test x$GCC = xyes; then
		VISIBILITY_CFLAGS="-fvisibility=hidden"
	    else
		if test x$SUNCC = xyes; then
		    VISIBILITY_CFLAGS="-xldscope=hidden"
		else
		    have_visibility=no
		fi
	    fi
	    if test x$have_visibility != xno; then
		save_CFLAGS="$CFLAGS"
		proto_inc=`$PKG_CONFIG --cflags xproto`
		CFLAGS="$CFLAGS $VISIBILITY_CFLAGS $proto_inc"
		AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
		    [#include <X11/Xfuncproto.h>
		     extern _X_HIDDEN int hidden_int;
		     extern _X_EXPORT int public_int;
		     extern _X_HIDDEN int hidden_int_func(void);
		     extern _X_EXPORT int public_int_func(void);]],
		    [])],
		    have_visibility=yes,
		    have_visibility=no)
		CFLAGS=$save_CFLAGS
	    fi
	    AC_MSG_RESULT([$have_visibility])
	    if test x$have_visibility != xno; then
		symbol_visibility=$VISIBILITY_CFLAGS
		XORG_CFLAGS="$XORG_CFLAGS $VISIBILITY_CFLAGS"
		XSERVER_CFLAGS="$XSERVER_CFLAGS $VISIBILITY_CFLAGS"
	    fi
	fi
	dnl added to xorg-server.pc
	AC_SUBST([symbol_visibility])
	dnl ===================================================================

	dnl ===================================================================
	dnl ================= beginning of PCI configuration ==================
	dnl ===================================================================
	xorg_bus_bsdpci=no
	xorg_bus_sparc=no

	AC_MSG_CHECKING([whether to build Xorg PCI functions])
	if test "x$PCI" = xyes; then
		PKG_CHECK_MODULES([PCIACCESS], $LIBPCIACCESS)
		SDK_REQUIRED_MODULES="$SDK_REQUIRED_MODULES $LIBPCIACCESS"
		XORG_SYS_LIBS="$XORG_SYS_LIBS $PCIACCESS_LIBS $LIBDRM_LIBS"
		XORG_CFLAGS="$XORG_CFLAGS $PCIACCESS_CFLAGS $LIBDRM_CFLAGS"

		AC_DEFINE(XSERVER_LIBPCIACCESS, 1, [Use libpciaccess for all pci manipulation])
		AC_DEFINE_DIR(PCI_TXT_IDS_PATH, PCI_TXT_IDS_DIR, [Default PCI text file ID path])
		case $host_os in
		  gnu* | freebsd* | kfreebsd*-gnu | netbsd* | openbsd* | solaris* | dragonfly*)
			xorg_bus_bsdpci="yes"
			;;
		esac
		case $host_cpu in
		  sparc*)
			case $host_os in
			  openbsd*)
			    xorg_bus_sparc="no"
			    ;;
			  *)
			    xorg_bus_sparc="yes"
			    ;;
			esac
			;;
		esac
	else
		if test "x$CONFIG_UDEV_KMS" = xyes; then
			AC_MSG_ERROR([Platform device enumeration requires libpciaccess])
		fi
		if test "x$INT10MODULE" = xyes && test "x$INT10" != xstub; then
			AC_MSG_ERROR([Cannot build int10 without libpciaccess])
		fi
	fi
	AC_MSG_RESULT([$PCI])

	if test "x$CONFIG_UDEV_KMS" = xyes; then
		AC_DEFINE(XSERVER_PLATFORM_BUS, 1, [X server supports platform device enumeration])
	fi
	AC_MSG_RESULT([$XSERVER_PLATFORM_BUS])
	dnl ===================================================================
	dnl ==================== end of PCI configuration =====================
	dnl ===================================================================

	case $host_os in
	  linux*)
		XORG_OS_SUBDIR="linux"
		linux_acpi="no"
		case $host_cpu in
		  alpha*)
		  	linux_alpha=yes
			;;
		  i*86|amd64*|x86_64*|ia64*)
			linux_acpi=$enable_linux_acpi
			;;
		  *)
			;;
		esac
		dnl APM header
		AC_CHECK_HEADERS([linux/apm_bios.h], [linux_apm=$enable_linux_apm])
		if test "x$linux_apm" = xyes -o "x$linux_acpi" = xyes; then
			AC_DEFINE(XF86PM, 1, [Support APM/ACPI power management in the server])
		fi
		;;
	  freebsd* | kfreebsd*-gnu | dragonfly*)
		XORG_OS_SUBDIR="bsd"
		;;
	  netbsd*)
		XORG_OS_SUBDIR="bsd"
		;;
	  openbsd*)
		if test "x$ac_cv_BSD_APM" = xyes \
			-o "x$ac_cv_BSD_KQUEUE_APM" = xyes; then
			XORG_CFLAGS="$XORG_CFLAGS -DXF86PM"
		fi
		XORG_OS_SUBDIR="bsd"
		;;
	  solaris*)
		XORG_OS_SUBDIR="solaris"
		XORG_CFLAGS="$XORG_CFLAGS -DXF86PM"
		AC_CHECK_HEADERS([sys/kd.h])
		AC_CHECK_HEADERS([sys/vt.h], [solaris_vt=yes], [solaris_vt=no])
		# Check for minimum supported release
		AC_MSG_CHECKING([Solaris version])
	        OS_MINOR=`echo ${host_os}|$SED -e 's/^.*solaris2\.//' -e s'/\..*$//'`
		if test "${OS_MINOR}" -ge 7 ; then
	        	AC_MSG_RESULT(Solaris ${OS_MINOR})
		else
			AC_MSG_RESULT(Solaris `echo ${host_os}|$SED -e 's/^.*solaris//`)
		fi
		if test "${OS_MINOR}" -lt 8 ; then
			AC_MSG_ERROR([This release no longer supports Solaris versions older than Solaris 8.])
		fi
		AC_CHECK_DECL([_LP64], [SOLARIS_64="yes"], [SOLARIS_64="no"])
			
		case $host_cpu in
		  sparc*)	
			SOLARIS_INOUT_ARCH="sparcv8plus"
			;;
		  i*86|x86_64*)
			if test x$SOLARIS_64 = xyes ; then
				SOLARIS_INOUT_ARCH="amd64"
			else
				SOLARIS_INOUT_ARCH="ia32"
			fi
			;;
		  *)
			AC_MSG_ERROR([Unsupported Solaris platform. Only SPARC & x86 \
			are supported on Solaris in this release.   If you are \
			interested in porting Xorg to your platform, please email \
			xorg@@lists.freedesktop.org.]) ;;
		esac
		AC_SUBST([SOLARIS_INOUT_ARCH])
		;;
	  gnu*)
		XORG_OS_SUBDIR="hurd"
		;;
	  cygwin*)
		XORG_OS_SUBDIR="stub"
		;;
	  *)
		XORG_OS_SUBDIR="stub"
		AC_MSG_NOTICE([m4_text_wrap(m4_join([ ],
		[Your OS is unknown.],
		[If you are interested in porting Xorg to your platform,],
		[please email xorg@@lists.freedesktop.org.]))])
		;;
	esac

	if test "x$DGA" = xauto; then
		PKG_CHECK_MODULES(DGA, $DGAPROTO, [DGA=yes], [DGA=no])
	fi
	if test "x$DGA" = xyes; then
		XORG_MODULES="$XORG_MODULES $DGAPROTO"
		PKG_CHECK_MODULES(DGA, $DGAPROTO)
		AC_DEFINE(DGA, 1, [Support DGA extension])
		AC_DEFINE(XFreeXDGA, 1, [Build XDGA support])
	fi

	if test "x$XF86VIDMODE" = xyes; then
		XORG_MODULES="$XORG_MODULES $VIDMODEPROTO"
	fi

	if test -n "$XORG_MODULES"; then
	        PKG_CHECK_MODULES(XORG_MODULES, [$XORG_MODULES])
	        XORG_CFLAGS="$XORG_CFLAGS $XORG_MODULES_CFLAGS"
	        XORG_SYS_LIBS="$XORG_SYS_LIBS $XORG_MODULES_LIBS"
	fi

	if test "x$DRM" = xyes; then
		dnl 2.4.46 is required for cursor hotspot support.
		PKG_CHECK_EXISTS(libdrm >= 2.4.46, XORG_DRIVER_MODESETTING=yes, XORG_DRIVER_MODESETTING=no)
	fi

	AC_SUBST([XORG_LIBS])
	AC_SUBST([XORG_SYS_LIBS])
	AC_SUBST([XORG_INCS])
	AC_SUBST([XORG_OS_SUBDIR])
	AC_SUBST([XORG_CFLAGS])

	dnl these only go in xorg-config.h
	XF86CONFIGFILE="xorg.conf"
	XF86CONFIGDIR="xorg.conf.d"
	AC_SUBST(XF86CONFIGDIR)
	CONFIGFILE="$sysconfdir/$XF86CONFIGFILE"
	LOGPREFIX="Xorg."
	XDG_DATA_HOME=".local/share"
	XDG_DATA_HOME_LOGDIR="xorg"
	AC_DEFINE(XORG_SERVER, 1, [Building Xorg server])
	AC_DEFINE(XORGSERVER, 1, [Building Xorg server])
	AC_DEFINE(XFree86Server, 1, [Building XFree86 server])
	AC_DEFINE_UNQUOTED(XORG_VERSION_CURRENT, [$VENDOR_RELEASE], [Current Xorg version])
	AC_DEFINE(NEED_XF86_TYPES, 1, [Need XFree86 typedefs])
	AC_DEFINE(NEED_XF86_PROTOTYPES, 1, [Need XFree86 helper functions])
	AC_DEFINE(__XSERVERNAME__, "Xorg", [Name of X server])
	AC_DEFINE_DIR(__XCONFIGFILE__, XF86CONFIGFILE, [Name of configuration file])
	AC_DEFINE_DIR(XF86CONFIGFILE, XF86CONFIGFILE, [Name of configuration file])
	AC_DEFINE_DIR(__XCONFIGDIR__, XF86CONFIGDIR, [Name of configuration directory])
	AC_DEFINE_DIR(DEFAULT_MODULE_PATH, moduledir, [Default module search path])
	AC_DEFINE_DIR(DEFAULT_LIBRARY_PATH, libdir, [Default library install path])
	AC_DEFINE_DIR(DEFAULT_LOGDIR, logdir, [Default log location])
	AC_DEFINE_DIR(DEFAULT_LOGPREFIX, LOGPREFIX, [Default logfile prefix])
	AC_DEFINE_DIR(DEFAULT_XDG_DATA_HOME, XDG_DATA_HOME, [Default XDG_DATA dir under HOME])
	AC_DEFINE_DIR(DEFAULT_XDG_DATA_HOME_LOGDIR, XDG_DATA_HOME_LOGDIR, [Default log dir under XDG_DATA_HOME])
	AC_DEFINE_UNQUOTED(__VENDORDWEBSUPPORT__, ["$VENDOR_WEB"], [Vendor web address for support])
	if test "x$VGAHW" = xyes; then
		AC_DEFINE(WITH_VGAHW, 1, [Building vgahw module])
	fi

	driverdir="$moduledir/drivers"
	AC_SUBST([moduledir])
	AC_SUBST([driverdir])
	sdkdir="$includedir/xorg"
	extdir="$includedir/X11/extensions"
	sysconfigdir="$datadir/X11/$XF86CONFIGDIR"
	AC_SUBST([sdkdir])
	AC_SUBST([extdir])
	AC_SUBST([sysconfigdir])
	AC_SUBST([logdir])

	# stuff the ABI versions into the pc file too
	extract_abi() {
	    grep ^.define.*${1}_VERSION ${srcdir}/hw/xfree86/common/xf86Module.h | tr '(),' '  .' | awk '{ print $4$5 }'
	}
	abi_ansic=`extract_abi ANSIC`
	abi_videodrv=`extract_abi VIDEODRV`
	abi_xinput=`extract_abi XINPUT`
	abi_extension=`extract_abi EXTENSION`
	AC_SUBST([abi_ansic])
	AC_SUBST([abi_videodrv])
	AC_SUBST([abi_xinput])
	AC_SUBST([abi_extension])
fi
AM_CONDITIONAL([XORG], [test "x$XORG" = xyes])
AM_CONDITIONAL([XORG_BUS_PCI], [test "x$PCI" = xyes])
AM_CONDITIONAL([XORG_BUS_BSDPCI], [test "x$xorg_bus_bsdpci" = xyes])
AM_CONDITIONAL([XORG_BUS_SPARC], [test "x$xorg_bus_sparc" = xyes])
AM_CONDITIONAL([LINUX_ALPHA], [test "x$linux_alpha" = xyes])
AM_CONDITIONAL([LNXACPI], [test "x$linux_acpi" = xyes])
AM_CONDITIONAL([LNXAPM], [test "x$linux_apm" = xyes])
AM_CONDITIONAL([SOLARIS_VT], [test "x$solaris_vt" = xyes])
AM_CONDITIONAL([DGA], [test "x$DGA" = xyes])
AM_CONDITIONAL([XORG_BUS_PLATFORM], [test "x$CONFIG_UDEV_KMS" = xyes])
AM_CONDITIONAL([XORG_DRIVER_MODESETTING], [test "x$XORG_DRIVER_MODESETTING" = xyes])

dnl glamor
AM_CONDITIONAL([GLAMOR], [test "x$GLAMOR" = xyes])
if test "x$GLAMOR" = xyes; then
	AC_DEFINE(GLAMOR, 1, [Build glamor])
	PKG_CHECK_MODULES([GLAMOR], [epoxy])

	PKG_CHECK_MODULES(GBM, "$LIBGBM", [GBM=yes], [GBM=no])
	if test "x$GBM" = xyes; then
		AC_DEFINE(GLAMOR_HAS_GBM, 1,
			  [Build glamor with GBM-based EGL support])
		AC_CHECK_DECL(GBM_BO_USE_LINEAR,
			[AC_DEFINE(GLAMOR_HAS_GBM_LINEAR, 1, [Have GBM_BO_USE_LINEAR])], [],
			[#include <stdlib.h>
			 #include <gbm.h>])
	fi

fi
AM_CONDITIONAL([GLAMOR_EGL], [test "x$GBM" = xyes])

dnl XWin DDX

AC_MSG_CHECKING([whether to build XWin DDX])
if test "x$XWIN" = xauto; then
	case $host_os in
		cygwin*) XWIN="yes" ;;
		mingw*) XWIN="yes" ;;
		*) XWIN="no" ;;
	esac
fi
AC_MSG_RESULT([$XWIN])

if test "x$XWIN" = xyes; then
	AC_DEFINE_DIR(DEFAULT_LOGDIR, logdir, [Default log location])
	AC_DEFINE_UNQUOTED(XORG_VERSION_CURRENT, [$VENDOR_RELEASE], [Current Xorg version])
	AC_DEFINE_UNQUOTED(__VENDORDWEBSUPPORT__, ["$VENDOR_WEB"], [Vendor web address for support])
	AC_CHECK_TOOL(WINDRES, windres)

	PKG_CHECK_MODULES([XWINMODULES],[x11 xdmcp xau xfixes])

	if test "x$WINDOWSWM" = xauto; then
		PKG_CHECK_EXISTS($WINDOWSWMPROTO, [WINDOWSWM=yes], [WINDOWSWM=no])
	fi
	if test "x$WINDOWSWM" = xyes ; then
		PKG_CHECK_MODULES(WINDOWSWM, $WINDOWSWMPROTO)
		XWINMODULES_CFLAGS="$XWINMODULES_CFLAGS $WINDOWSWM_CFLAGS"
		AC_DEFINE(ROOTLESS,1,[Build Rootless code])
	fi

	case $host_os in
		cygwin*)
			XWIN_SERVER_NAME=XWin
			AC_DEFINE(HAS_DEVWINDOWS,1,[Cygwin has /dev/windows for signaling new win32 messages])
			;;
		mingw*)
			XWIN_SERVER_NAME=Xming
			AC_DEFINE(RELOCATE_PROJECTROOT,1,[Make PROJECT_ROOT relative to the xserver location])
			AC_DEFINE(HAS_WINSOCK,1,[Use Windows sockets])
			XWIN_SYS_LIBS="-lpthread -lws2_32"
			;;
	esac

	XWIN_LIBS="$FB_LIB $MI_LIB $FIXES_LIB $XEXT_LIB $RANDR_LIB $RENDER_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $DAMAGE_LIB $PRESENT_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $OS_LIB"
	XWIN_SYS_LIBS="$XWIN_SYS_LIBS $XWINMODULES_LIBS"
	AC_SUBST(XWIN_LIBS)
	AC_SUBST(XWIN_SERVER_NAME)
	AC_SUBST(XWIN_SYS_LIBS)

	if test "x$DEBUGGING" = xyes; then
		AC_DEFINE(CYGDEBUG, 1, [Simple debug messages])
		AC_DEFINE(CYGWINDOWING_DEBUG, 1, [Debug messages for window handling])
		AC_DEFINE(CYGMULTIWINDOW_DEBUG, 1, [Debug window manager])
	fi

	AC_DEFINE(DDXOSVERRORF, 1, [Use OsVendorVErrorF])
	AC_DEFINE(DDXBEFORERESET, 1, [Use ddxBeforeReset ])

dnl XWin with AIGLX requires OpenGL spec files in order to generate wrapper code for native GL functions
	if [test "x$XWIN" = xyes && test "x$AIGLX" = xyes] ; then
           AC_CHECK_PROG(PYTHON3, python3, python3)
           if test -z "$PYTHON3"; then
                AC_MSG_ERROR([python3 not found])
           fi
           AC_MSG_CHECKING(for python module lxml)
           $PYTHON3 -c "import lxml;"
           if test $? -ne 0 ; then
                AC_MSG_ERROR([not found])
           fi
           AC_MSG_RESULT(yes)
           if test "x$KHRONOS_SPEC_DIR" = "xauto" ; then
		PKG_CHECK_MODULES([KHRONOS_OPENGL_REGISTRY], [khronos-opengl-registry])
		KHRONOS_SPEC_DIR=`pkg-config khronos-opengl-registry --variable=specdir`
           fi
           AC_SUBST(KHRONOS_SPEC_DIR)
	fi

fi
AM_CONDITIONAL(XWIN, [test "x$XWIN" = xyes])
AM_CONDITIONAL(XWIN_MULTIWINDOW, [test "x$XWIN" = xyes])
AM_CONDITIONAL(XWIN_MULTIWINDOWEXTWM, [test "x$XWIN" = xyes && test "x$WINDOWSWM" = xyes])
AM_CONDITIONAL(XWIN_CLIPBOARD, [test "x$XWIN" = xyes])
AM_CONDITIONAL(XWIN_GLX_WINDOWS, [test "x$XWIN" = xyes && test "x$AIGLX" = xyes])
AM_CONDITIONAL(XWIN_RANDR, [test "x$XWIN" = xyes])
AM_CONDITIONAL(XWIN_XV, [test "x$XWIN" = xyes && test "x$XV" = xyes])

dnl Darwin / OS X DDX
if test "x$XQUARTZ" = xyes; then
	AC_DEFINE(XQUARTZ,1,[Have Quartz])
	AC_DEFINE(ROOTLESS,1,[Build Rootless code])

	XQUARTZ_LIBS="$FB_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB $PRESENT_LIB"
	AC_SUBST([XQUARTZ_LIBS])

	AC_CHECK_LIB([Xplugin],[xp_init],[:])

	CFLAGS="${CFLAGS} -DROOTLESS_WORKAROUND -DROOTLESS_SAFEALPHA -DNO_ALLOCA"

	PKG_CHECK_MODULES(XPBPROXY, $APPLEWMPROTO $LIBAPPLEWM xfixes x11)

        if test "x$XQUARTZ_SPARKLE" = xyes ; then
                AC_DEFINE(XQUARTZ_SPARKLE,1,[Support application updating through sparkle.])
        fi

	if test "x$STANDALONE_XPBPROXY" = xyes ; then
		AC_DEFINE(STANDALONE_XPBPROXY,1,[Build a standalone xpbproxy])
	fi
fi

AM_CONDITIONAL(PSEUDORAMIX, [test "x$XQUARTZ" = xyes -o "x$XWIN" = xyes ])

# Support for objc in autotools is minimal and not documented.
OBJC='$(CC)'
OBJCLD='$(CCLD)'
OBJCLINK='$(LINK)'
OBJCFLAGS='$(CFLAGS)'
AC_SUBST([OBJC])
AC_SUBST([OBJCCLD])
AC_SUBST([OBJCLINK])
AC_SUBST([OBJCFLAGS])
# internal, undocumented automake func follows :(
_AM_DEPENDENCIES([OBJC])
AM_CONDITIONAL(XQUARTZ, [test "x$XQUARTZ" = xyes])
AM_CONDITIONAL(XQUARTZ_SPARKLE, [test "x$XQUARTZ_SPARKLE" != "xno"])
AM_CONDITIONAL(STANDALONE_XPBPROXY, [test "x$STANDALONE_XPBPROXY" = xyes])

dnl DMX DDX
PKG_CHECK_MODULES(
	[DMXMODULES],
	[xmuu $LIBXEXT x11 >= 1.6 xrender xfixes $LIBXI $DMXPROTO xau $XDMCP_MODULES],
	[PKG_CHECK_MODULES(
		[XDMXCONFIG_DEP],
		[xaw7 xmu xt xpm x11],
		[have_dmx=yes],
		[have_dmx=no])],
	[have_dmx=no])
AC_MSG_CHECKING([whether to build Xdmx DDX])
if test "x$DMX" = xauto; then
	DMX="$have_dmx"
	case $host_os in
		cygwin*) DMX="no" ;;
		mingw*)  DMX="no" ;;
		darwin*) DMX="no" ;;
	esac
fi
AC_MSG_RESULT([$DMX])
AM_CONDITIONAL(DMX, [test "x$DMX" = xyes])

if test "x$DMX" = xyes; then
	if test "x$have_dmx" = xno; then
		AC_MSG_ERROR([Xdmx build explicitly requested, but required
		              modules not found.])
	fi
	DMX_INCLUDES="$XEXT_INC $RENDER_INC $RECORD_INC"
	XDMX_CFLAGS="$DMXMODULES_CFLAGS"
	XDMX_LIBS="$FB_LIB $MI_LIB $XEXT_LIB $RENDER_LIB $RECORD_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $DRI3_LIB $PRESENT_LIB $MIEXT_SYNC_LIB $MIEXT_SHADOW_LIB $MIEXT_DAMAGE_LIB $COMPOSITE_LIB $DAMAGE_LIB $MAIN_LIB $DIX_LIB $RANDR_LIB $CONFIG_LIB $OS_LIB $FIXES_LIB"
	XDMX_SYS_LIBS="$DMXMODULES_LIBS"
	AC_SUBST([XDMX_CFLAGS])
	AC_SUBST([XDMX_LIBS])
	AC_SUBST([XDMX_SYS_LIBS])

dnl USB sources in DMX require <linux/input.h>
	AC_CHECK_HEADER([linux/input.h], DMX_BUILD_USB="yes",
			DMX_BUILD_USB="no")
dnl Linux sources in DMX require <linux/keyboard.h>
	AC_CHECK_HEADER([linux/keyboard.h], DMX_BUILD_LNX="yes",
			DMX_BUILD_LNX="no")
	AC_SUBST(XDMXCONFIG_DEP_CFLAGS)
	AC_SUBST(XDMXCONFIG_DEP_LIBS)
	PKG_CHECK_MODULES([DMXEXAMPLES_DEP], [$LIBDMX $LIBXEXT x11])
	AC_SUBST(DMXEXAMPLES_DEP_LIBS)
	PKG_CHECK_MODULES([DMXXMUEXAMPLES_DEP], [$LIBDMX xmu $LIBXEXT x11])
	AC_SUBST(DMXXMUEXAMPLES_DEP_LIBS)
	PKG_CHECK_MODULES([DMXXIEXAMPLES_DEP], [$LIBDMX $LIBXI $LIBXEXT x11])
	AC_SUBST(DMXXIEXAMPLES_DEP_LIBS)
	PKG_CHECK_MODULES([XTSTEXAMPLES_DEP], [$LIBXTST $LIBXEXT x11])
	AC_SUBST(XTSTEXAMPLES_DEP_LIBS)
	PKG_CHECK_MODULES([XRESEXAMPLES_DEP], [xres $LIBXEXT x11])
	AC_SUBST(XRESEXAMPLES_DEP_LIBS)
	PKG_CHECK_MODULES([X11EXAMPLES_DEP], [$LIBXEXT x11])
	AC_SUBST(X11EXAMPLES_DEP_LIBS)

fi
AM_CONDITIONAL([DMX_BUILD_LNX], [test "x$DMX_BUILD_LNX" = xyes])
AM_CONDITIONAL([DMX_BUILD_USB], [test "x$DMX_BUILD_USB" = xyes])

dnl kdrive DDX

XEPHYR_LIBS=
XEPHYR_INCS=

AM_CONDITIONAL(KDRIVE, [test x$KDRIVE = xyes])

if test "$KDRIVE" = yes; then
    AC_DEFINE(KDRIVESERVER,1,[Build Kdrive X server])
    AC_DEFINE(KDRIVEDDXACTIONS,,[Build kdrive ddx])

    AC_CHECK_HEADERS([linux/fb.h])
    if test "$ac_cv_header_linux_fb_h" = yes && test "x$XFBDEV" = xauto; then
        XFBDEV=yes
    fi

    if test "x$XFBDEV" = xyes; then
        KDRIVEFBDEVLIB=yes
        AC_DEFINE(KDRIVEFBDEV, 1, [Build fbdev-based kdrive server])
    fi


    PKG_CHECK_MODULES([TSLIB], [tslib-0.0], [HAVE_TSLIB="yes"], [HAVE_TSLIB="no"])
    if test "x$HAVE_TSLIB" = xno; then
        AC_CHECK_LIB(ts, ts_open, [
			HAVE_TSLIB="yes"
			TSLIB_LIBS="-lts"
		])
    fi

    if test "xTSLIB" = xauto; then
        TSLIB="$HAVE_TSLIB"
    fi

    if test "x$TSLIB" = xyes; then
        if ! test "x$HAVE_TSLIB" = xyes; then
            AC_MSG_ERROR([tslib must be installed to build the tslib driver. See http://tslib.berlios.de/])
        else
            AC_DEFINE(TSLIB, 1, [Have tslib support])
        fi
    fi

    case $host_os in
	*linux*)
	    KDRIVE_OS_LIB='$(top_builddir)/hw/kdrive/linux/liblinux.la'
            KDRIVELINUX=yes
	    if test "x$KDRIVE_EVDEV" = xauto; then
		KDRIVE_EVDEV=yes
	    fi
	    if test "x$KDRIVE_KBD" = xauto; then
		KDRIVE_KBD=yes
	    fi
	    if test "x$KDRIVE_MOUSE" = xauto; then
		KDRIVE_MOUSE=yes
	    fi
	    ;;
	*)
	    if test "x$KDRIVE_EVDEV" = xauto; then
		KDRIVE_EVDEV=no
	    fi
	    if test "x$KDRIVE_KBD" = xauto; then
		KDRIVE_KBD=no
	    fi
	    if test "x$KDRIVE_MOUSE" = xauto; then
		KDRIVE_MOUSE=no
	    fi
	    ;;
    esac

    if test "x$KDRIVE_KBD" = xyes; then
       AC_DEFINE(KDRIVE_KBD, 1, [Enable KDrive kbd driver])
    fi
    if test "x$KDRIVE_EVDEV" = xyes; then
       AC_DEFINE(KDRIVE_EVDEV, 1, [Enable KDrive evdev driver])
    fi
    if test "x$KDRIVE_MOUSE" = xyes; then
       AC_DEFINE(KDRIVE_MOUSE, 1, [Enable KDrive mouse driver])
    fi

    XEPHYR_REQUIRED_LIBS="xau xdmcp xcb xcb-shape xcb-render xcb-renderutil xcb-aux xcb-image xcb-icccm xcb-shm xcb-keysyms xcb-randr"
    if test "x$XV" = xyes; then
        XEPHYR_REQUIRED_LIBS="$XEPHYR_REQUIRED_LIBS xcb-xv"
    fi
    if test "x$DRI" = xyes && test "x$GLX" = xyes; then
        XEPHYR_REQUIRED_LIBS="$XEPHYR_REQUIRED_LIBS libdrm xcb-glx xcb-xf86dri > 1.6"
    fi
    if test "x$GLAMOR" = xyes; then
        XEPHYR_REQUIRED_LIBS="$XEPHYR_REQUIRED_LIBS x11-xcb"
    fi

    if test "x$XEPHYR" = xauto; then
        PKG_CHECK_MODULES(XEPHYR, $XEPHYR_REQUIRED_LIBS, [XEPHYR="yes"], [XEPHYR="no"])
    elif test "x$XEPHYR" = xyes ; then
        PKG_CHECK_MODULES(XEPHYR, $XEPHYR_REQUIRED_LIBS)
    fi

    # Xephyr needs nanosleep() which is in librt on Solaris
    AC_CHECK_FUNC([nanosleep], [],
        AC_CHECK_LIB([rt], [nanosleep], XEPHYR_LIBS="$XEPHYR_LIBS -lrt"))
    
    # damage shadow extension glx (NOTYET) fb mi
    KDRIVE_INC='-I$(top_srcdir)/hw/kdrive/src'
    KDRIVE_PURE_INCS="$KDRIVE_INC $MIEXT_SYNC_INC $MIEXT_DAMAGE_INC $MIEXT_SHADOW_INC $XEXT_INC $FB_INC $MI_INC"
    KDRIVE_OS_INC='-I$(top_srcdir)/hw/kdrive/linux'
    KDRIVE_INCS="$KDRIVE_PURE_INCS $KDRIVE_OS_INC"
    
    KDRIVE_CFLAGS="$XSERVER_CFLAGS -DHAVE_KDRIVE_CONFIG_H $TSLIB_CFLAGS"

    KDRIVE_PURE_LIBS="$FB_LIB $MI_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $DRI3_LIB $PRESENT_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $OS_LIB"
    KDRIVE_LIB='$(top_builddir)/hw/kdrive/src/libkdrive.la'
    KDRIVE_MAIN_LIB="$MAIN_LIB"
    KDRIVE_LOCAL_LIBS="$DIX_LIB $KDRIVE_LIB"
    KDRIVE_LOCAL_LIBS="$KDRIVE_LOCAL_LIBS $FB_LIB $MI_LIB $KDRIVE_PURE_LIBS"
    KDRIVE_LOCAL_LIBS="$KDRIVE_LOCAL_LIBS $KDRIVE_OS_LIB"
    KDRIVE_LIBS="$KDRIVE_LOCAL_LIBS $XSERVER_SYS_LIBS $GLX_SYS_LIBS $DLOPEN_LIBS $TSLIB_LIBS"

    AC_SUBST([XEPHYR_LIBS])
    AC_SUBST([XEPHYR_INCS])
fi
AC_SUBST([KDRIVE_INCS])
AC_SUBST([KDRIVE_PURE_INCS])
AC_SUBST([KDRIVE_CFLAGS])
AC_SUBST([KDRIVE_PURE_LIBS])
AC_SUBST([KDRIVE_MAIN_LIB])
AC_SUBST([KDRIVE_LOCAL_LIBS])
AC_SUBST([KDRIVE_LIBS])
AM_CONDITIONAL(KDRIVELINUX, [test "x$KDRIVELINUX" = xyes])
AM_CONDITIONAL(KDRIVE_EVDEV, [test "x$KDRIVE_EVDEV" = xyes])
AM_CONDITIONAL(KDRIVE_KBD,   [test "x$KDRIVE_KBD" = xyes])
AM_CONDITIONAL(KDRIVE_MOUSE, [test "x$KDRIVE_MOUSE" = xyes])
AM_CONDITIONAL(TSLIB, [test "x$HAVE_TSLIB" = xyes])
AM_CONDITIONAL(KDRIVEFBDEV, [test "x$XFBDEV" = xyes])
AM_CONDITIONAL(XEPHYR, [test "x$KDRIVE" = xyes && test "x$XEPHYR" = xyes])
AM_CONDITIONAL(BUILD_KDRIVEFBDEVLIB, [test "x$KDRIVE" = xyes && test "x$KDRIVEFBDEVLIB" = xyes])
AM_CONDITIONAL(XFAKESERVER, [test "x$KDRIVE" = xyes && test "x$XFAKE" = xyes])

dnl Xwayland DDX

XWAYLANDMODULES="wayland-client >= 1.3.0 libdrm epoxy"
if test "x$XF86VIDMODE" = xyes; then
	XWAYLANDMODULES="$XWAYLANDMODULES $VIDMODEPROTO"
fi
PKG_CHECK_MODULES(XWAYLANDMODULES, [$XWAYLANDMODULES], [have_xwayland=yes], [have_xwayland=no])
AC_MSG_CHECKING([whether to build Xwayland DDX])
if test "x$XWAYLAND" = xauto; then
   XWAYLAND="$have_xwayland"
fi
AC_MSG_RESULT([$XWAYLAND])
AM_CONDITIONAL(XWAYLAND, [test "x$XWAYLAND" = xyes])

if test "x$XWAYLAND" = xyes; then
	if test "x$have_xwayland" = xno; then
		AC_MSG_ERROR([Xwayland build explicitly requested, but required modules not found.])
	fi

	XWAYLAND_LIBS="$FB_LIB $FIXES_LIB $MI_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $DRI3_LIB $PRESENT_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $MAIN_LIB $DIX_LIB $OS_LIB"
	XWAYLAND_SYS_LIBS="$XWAYLANDMODULES_LIBS $GLX_SYS_LIBS"
	AC_SUBST([XWAYLAND_LIBS])
	AC_SUBST([XWAYLAND_SYS_LIBS])

	WAYLAND_PREFIX=`$PKG_CONFIG --variable=prefix wayland-client`
	AC_PATH_PROG([WAYLAND_SCANNER], [wayland-scanner],,
		     [${WAYLAND_PREFIX}/bin$PATH_SEPARATOR$PATH])
fi


dnl and the rest of these are generic, so they're in config.h
dnl 
dnl though, thanks to the passing of some significant amount of time, the
dnl above is probably a complete fallacy, and you should not rely on it.
dnl but this is still actually better than imake, honest. -daniels

AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#include <features.h>
#ifndef __GLIBC__
#error not glibc
#endif
]], [])], [AC_DEFINE(_GNU_SOURCE, 1,
	[ Enable GNU and other extensions to the C environment for glibc])])

AC_DEFINE_DIR(PROJECTROOT, prefix, [Overall prefix])
AC_DEFINE_DIR(SYSCONFDIR, sysconfdir, [sysconfdir])

AC_SUBST([RELEASE_DATE])
BUILD_DATE="`date +'%Y%m%d'`"
AC_SUBST([BUILD_DATE])
BUILD_TIME="`date +'1%H%M%S'`"
AC_SUBST([BUILD_TIME])

DIX_CFLAGS="-DHAVE_DIX_CONFIG_H $XSERVER_CFLAGS"

AC_SUBST([DIX_CFLAGS])

AC_SUBST([libdir])
AC_SUBST([exec_prefix])
AC_SUBST([prefix])

AC_CONFIG_COMMANDS([sdksyms], [touch hw/xfree86/sdksyms.dep])

if test "x$CONFIG_HAL" = xno && test "x$CONFIG_UDEV" = xno; then
    AC_MSG_WARN([
             ***********************************************
             Neither HAL nor udev backend will be enabled.
             Input device hotplugging will not be available!
             ***********************************************])
fi

AC_CONFIG_FILES([
Makefile
glx/Makefile
include/Makefile
composite/Makefile
damageext/Makefile
dbe/Makefile
dix/Makefile
doc/Makefile
doc/dtrace/Makefile
man/Makefile
fb/Makefile
glamor/Makefile
record/Makefile
config/Makefile
mi/Makefile
miext/Makefile
miext/sync/Makefile
miext/damage/Makefile
miext/shadow/Makefile
miext/rootless/Makefile
os/Makefile
pseudoramiX/Makefile
randr/Makefile
render/Makefile
xkb/Makefile
Xext/Makefile
Xi/Makefile
xfixes/Makefile
exa/Makefile
dri3/Makefile
present/Makefile
hw/Makefile
hw/xfree86/Makefile
hw/xfree86/Xorg.sh
hw/xfree86/common/Makefile
hw/xfree86/common/xf86Build.h
hw/xfree86/ddc/Makefile
hw/xfree86/dixmods/Makefile
hw/xfree86/doc/Makefile
hw/xfree86/dri/Makefile
hw/xfree86/dri2/Makefile
hw/xfree86/dri2/pci_ids/Makefile
hw/xfree86/drivers/Makefile
hw/xfree86/drivers/modesetting/Makefile
hw/xfree86/exa/Makefile
hw/xfree86/exa/man/Makefile
hw/xfree86/fbdevhw/Makefile
hw/xfree86/fbdevhw/man/Makefile
hw/xfree86/glamor_egl/Makefile
hw/xfree86/i2c/Makefile
hw/xfree86/int10/Makefile
hw/xfree86/loader/Makefile
hw/xfree86/man/Makefile
hw/xfree86/modes/Makefile
hw/xfree86/os-support/Makefile
hw/xfree86/os-support/bsd/Makefile
hw/xfree86/os-support/bus/Makefile
hw/xfree86/os-support/hurd/Makefile
hw/xfree86/os-support/misc/Makefile
hw/xfree86/os-support/linux/Makefile
hw/xfree86/os-support/solaris/Makefile
hw/xfree86/os-support/stub/Makefile
hw/xfree86/parser/Makefile
hw/xfree86/ramdac/Makefile
hw/xfree86/shadowfb/Makefile
hw/xfree86/vbe/Makefile
hw/xfree86/vgahw/Makefile
hw/xfree86/x86emu/Makefile
hw/xfree86/utils/Makefile
hw/xfree86/utils/man/Makefile
hw/xfree86/utils/cvt/Makefile
hw/xfree86/utils/gtf/Makefile
hw/dmx/config/Makefile
hw/dmx/config/man/Makefile
hw/dmx/doc/Makefile
hw/dmx/doxygen/doxygen.conf
hw/dmx/doxygen/Makefile
hw/dmx/examples/Makefile
hw/dmx/input/Makefile
hw/dmx/glxProxy/Makefile
hw/dmx/Makefile
hw/dmx/man/Makefile
hw/vfb/Makefile
hw/vfb/man/Makefile
hw/xnest/Makefile
hw/xnest/man/Makefile
hw/xwin/Makefile
hw/xwin/glx/Makefile
hw/xwin/man/Makefile
hw/xwin/winclipboard/Makefile
hw/xquartz/Makefile
hw/xquartz/GL/Makefile
hw/xquartz/bundle/Makefile
hw/xquartz/man/Makefile
hw/xquartz/mach-startup/Makefile
hw/xquartz/pbproxy/Makefile
hw/xquartz/xpr/Makefile
hw/kdrive/Makefile
hw/kdrive/ephyr/Makefile
hw/kdrive/ephyr/man/Makefile
hw/kdrive/fake/Makefile
hw/kdrive/fbdev/Makefile
hw/kdrive/linux/Makefile
hw/kdrive/src/Makefile
hw/xwayland/Makefile
test/Makefile
test/xi1/Makefile
test/xi2/Makefile
xserver.ent
xorg-server.pc
])
AC_OUTPUT
@


1.60
log
@Fix arc4random_buf(3) detection. Noticed by Eric Engestrom on
the xorg-devel list. Thanks
@
text
@d320 4
d401 1
@


1.59
log
@MFC: Use arc4random_buf(3) if available to generate cookies.
Advisory X41-2017-001: Multiple Vulnerabilities in X.Org.
@
text
@a224 1

d226 1
@


1.58
log
@MFC: Use timingsafe_memcmp() to compare MIT-MAGIC-COOKIES
Advisory X41-2017-001: Multiple Vulnerabilities in X.Org.
@
text
@d226 2
@


1.57
log
@Kill remaining HP300 bits
@
text
@d223 2
a224 1
AC_REPLACE_FUNCS([reallocarray strcasecmp strcasestr strlcat strlcpy strndup])
@


1.56
log
@Update to xserver 1.18.4

tested by krw@@ and dcoppa@@ ok dcoppa@@
@
text
@a348 4
  m68k)
	HP300_VIDEO=yes
	BSD_ARCH_SOURCES="hp300_video.c ioperm_noop.c"
	;;
a393 1
AM_CONDITIONAL(HP300_VIDEO, [test "x$HP300_VIDEO" = xyes])
d1796 1
a1796 1
       		m68k|m88k|vax)
@


1.55
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@d29 3
a31 3
AC_INIT([xorg-server], 1.18.3, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2016-04-04"
RELEASE_NAME="Halloumi"
d584 1
a584 4
AC_ARG_WITH(launchd-id-prefix,  AS_HELP_STRING([--with-launchd-id-prefix=PATH], [Deprecated: Use --with-bundle-id-prefix.]),
                                [ BUNDLE_ID_PREFIX="${withval}" ],
                                [ BUNDLE_ID_PREFIX="org.x" ])
AC_ARG_WITH(bundle-id-prefix,  AS_HELP_STRING([--with-bundle-id-prefix=PATH], [Prefix to use for bundle identifiers (default: org.x)]),
d588 9
d601 4
d929 1
a929 1
	CFLAGS=$UDEV_CFLAGS
d1342 1
a1342 1
	CFLAGS="$GL_CFLAGS $LIBDRM_CFLAGS"
@


1.54
log
@Don't build the PCVT console backend anymore.
@
text
@d29 3
a31 3
AC_INIT([xorg-server], 1.17.4, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2015-10-28"
RELEASE_NAME="Cider Donut"
d221 3
a223 2
	mmap seteuid shmctl64 strncasecmp vasprintf vsnprintf walkcontext])
AC_REPLACE_FUNCS([strcasecmp strcasestr strlcat strlcpy strndup])
d227 18
d448 1
a448 1
	CFLAGS="$CFLAGS -DFD_SETSIZE=256"
a594 5
AC_ARG_ENABLE(install-libxf86config,
				AS_HELP_STRING([--enable-install-libxf86config],
				[Install libxf86config (default: disabled)]),
				[INSTALL_LIBXF86CONFIG=$enableval],
				[INSTALL_LIBXF86CONFIG=no])
d603 1
a603 11
XORG_TLS
AC_ARG_ENABLE(glx-tls,        AS_HELP_STRING([--enable-glx-tls], [Build GLX with TLS support (default: auto)]),
                                [GLX_USE_TLS=$enableval
                                 if test "x$GLX_USE_TLS" = "xyes" && test "${ac_cv_tls}" = "none" ; then
                                   AC_MSG_ERROR([GLX with TLS support requested, but the compiler does not support it.])
                                 fi],
                                [GLX_USE_TLS=no
                                 if test "${ac_cv_tls}" != "none" ; then
                                   GLX_USE_TLS=yes
                                 fi])
AC_SUBST(GLX_TLS, ${GLX_USE_TLS})
a729 3
dnl Handle installing libxf86config
AM_CONDITIONAL(INSTALL_LIBXF86CONFIG, [test "x$INSTALL_LIBXF86CONFIG" = xyes])

d792 5
d826 2
a827 2
XPROTO="xproto >= 7.0.26"
RANDRPROTO="randrproto >= 1.4.0"
d872 2
d878 12
a889 7
PKG_CHECK_MODULES([SYSTEMD_DAEMON], [libsystemd-daemon],
                  [HAVE_SYSTEMD_DAEMON=yes], [HAVE_SYSTEMD_DAEMON=no])
if test "x$WITH_SYSTEMD_DAEMON" = xauto; then
	WITH_SYSTEMD_DAEMON="$HAVE_SYSTEMD_DAEMON"
fi
if test "x$WITH_SYSTEMD_DAEMON" = xyes; then
	if test "x$HAVE_SYSTEMD_DAEMON" = xno; then
a891 2
	AC_DEFINE(HAVE_SYSTEMD_DAEMON, 1, [Define to 1 if libsystemd-daemon is available])
	REQUIRED_LIBS="$REQUIRED_LIBS libsystemd-daemon"
a968 2
        dnl The wrapper uses libdrm headers, so ensure they are available
        PKG_CHECK_MODULES([LIBDRM], $LIBDRM)
a1371 4
if test "x$GLX_USE_TLS" = xyes ; then
	GLX_DEFINES="-DGLX_USE_TLS -DPTHREADS"
	GLX_SYS_LIBS="$GLX_SYS_LIBS -lpthread"
fi
d1558 8
a1590 2
AC_DEFINE(NO_LIBCWRAPPER, 1, [Define to 1 if modules should avoid the libcwrapper])

d1825 1
a1825 1
			int call_main(void) { return main(0, NULL); }])])
a2093 3
	if test "x$XF86VIDMODE" = xauto; then
		PKG_CHECK_MODULES(XF86VIDMODE, $VIDMODEPROTO, [XF86VIDMODE=yes], [XF86VIDMODE=no])
	fi
a2095 2
		PKG_CHECK_MODULES(XF86VIDMODE, $VIDMODEPROTO)
		AC_DEFINE(XF86VIDMODE, 1, [Support XFree86 Video Mode extension])
d2106 1
a2106 2
		PKG_CHECK_EXISTS(libdrm >= 2.4.46)
		XORG_DRIVER_MODESETTING=yes
a2176 1
AM_CONDITIONAL([XF86VIDMODE], [test "x$XF86VIDMODE" = xyes])
d2190 4
d2353 1
a2353 1
	XDMX_LIBS="$FB_LIB $MI_LIB $XEXT_LIB $RENDER_LIB $RECORD_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB  $DRI3_LIB $PRESENT_LIB $MIEXT_SYNC_LIB $MIEXT_SHADOW_LIB $MIEXT_DAMAGE_LIB $COMPOSITE_LIB $DAMAGE_LIB $MAIN_LIB $DIX_LIB $CONFIG_LIB $OS_LIB $FIXES_LIB"
d2426 27
a2493 26
    case $host_os in
	*linux*)
	    KDRIVE_OS_LIB='$(top_builddir)/hw/kdrive/linux/liblinux.la'
            KDRIVELINUX=yes
	    if test "x$KDRIVE_EVDEV" = xauto; then
		KDRIVE_EVDEV=yes
	    fi
	    if test "x$KDRIVE_KBD" = xauto; then
		KDRIVE_KBD=yes
	    fi
	    if test "x$KDRIVE_MOUSE" = xauto; then
		KDRIVE_MOUSE=yes
	    fi
	    ;;
	*)
	    if test "x$KDRIVE_EVDEV" = xauto; then
		KDRIVE_EVDEV=no
	    fi
	    if test "x$KDRIVE_KBD" = xauto; then
		KDRIVE_KBD=no
	    fi
	    if test "x$KDRIVE_MOUSE" = xauto; then
		KDRIVE_MOUSE=no
	    fi
	    ;;
    esac
d2522 5
a2526 1
PKG_CHECK_MODULES(XWAYLANDMODULES, [wayland-client >= 1.3.0 libdrm epoxy], [have_xwayland=yes], [have_xwayland=no])
@


1.53
log
@Update to xserver 1.17.4.
tested by naddy@@
@
text
@a409 1
	AC_DEFINE(PCVT_SUPPORT, 1, [System has PC console])
@


1.52
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d29 3
a31 3
AC_INIT([xorg-server], 1.17.2, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2015-06-16"
RELEASE_NAME="lambic"
@


1.51
log
@Merge from upstream: Don't listen to 'tcp' by default. Add '-listen' option.

commit cc59be38b7eff52a1d003b390f2994c73ee0b3e9
Author: Keith Packard <keithp@@keithp.com>
Date:   Fri Sep 12 11:33:48 2014 -0700

    os: Don't listen to 'tcp' by default. Add '-listen' option. [v2]

    This disables the tcp listen socket by default. Then, it
    uses a new xtrans interface, TRANS(Listen), to provide a command line
    option to re-enable those if desired.

    v2: Leave unix socket enabled by default. Add configure options.

    Signed-off-by: Keith Packard <keithp@@keithp.com>
    Reviewed-by: Hans de Goede <hdegoede@@redhat.com>
@
text
@d29 3
a31 3
AC_INIT([xorg-server], 1.16.4, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2014-12-20"
RELEASE_NAME="Marionberry Pie"
d142 2
a143 1
AC_C_BIGENDIAN([ENDIAN="X_BIG_ENDIAN"], [ENDIAN="X_LITTLE_ENDIAN"])
d220 1
a220 1
	getdtablesize getifaddrs getpeereid getpeerucred getzoneid \
d224 2
a239 23
dnl MTRR header
AC_CHECK_HEADERS([asm/mtrr.h], ac_cv_asm_mtrr_h=yes)
if test "x$ac_cv_asm_mtrr_h" = xyes; then
	HAVE_MTRR=yes
fi

dnl BSD MTRR header
AC_CHECK_HEADERS([sys/memrange.h], ac_cv_memrange_h=yes)
if test "x$ac_cv_memrange_h" = xyes; then
	HAVE_MTRR=yes
fi

if test "x$HAVE_MTRR" = xyes; then
	AC_DEFINE(HAS_MTRR_SUPPORT, 1, [MTRR support available])
fi

dnl A NetBSD MTRR header
AC_CHECK_HEADERS([machine/mtrr.h], ac_cv_machine_mtrr_h=yes)
if test "x$ac_cv_machine_mtrr_h" = xyes; then
	AC_DEFINE(HAS_MTRR_BUILTIN, 1, [Define to 1 if NetBSD built-in MTRR
		support is available])
fi

a615 1
AC_ARG_ENABLE(registry,       AS_HELP_STRING([--disable-registry], [Build string registry module (default: enabled)]), [XREGISTRY=$enableval], [XREGISTRY=yes])
d677 1
d738 1
d818 1
a818 1
XSHMFENCE="xshmfence >= 1.1"
d832 1
a832 1
XTRANS="xtrans >= 1.3.3"
d892 1
d963 1
a963 1
        AC_DEFINE_DIR(SUID_WRAPPER_DIR, libexecdir, [Where to install Xorg.bin and Xorg.wrap])
a1067 5
AM_CONDITIONAL(XREGISTRY, [test "x$XREGISTRY" = xyes])
if test "x$XREGISTRY" = xyes; then
	AC_DEFINE(XREGISTRY, 1, [Build registry module])
fi

a1271 2
PKG_CHECK_MODULES([XSHMFENCE], $XSHMFENCE,
		  [HAVE_XSHMFENCE=yes], [HAVE_XSHMFENCE=no])
d1273 4
a1276 1
AM_CONDITIONAL(XSHMFENCE, test "x$HAVE_XSHMFENCE" = xyes)
d1278 7
a1284 6
case x"$HAVE_XSHMFENCE" in
	xyes)
		AC_DEFINE(HAVE_XSHMFENCE, 1, [Have X Shared Memory Fence library])
		REQUIRED_LIBS="$REQUIRED_LIBS xshmfence"
		;;
esac
d1286 1
d1288 1
a1288 1
case "$DRI3,$HAVE_XSHMFENCE" in
d2044 1
a2044 1
		  i*86)	
d2062 3
d2068 1
a2068 2
		[Your OS is unknown. Xorg currently only supports Linux,],
		[Free/Open/Net/DragonFlyBSD, Solaris/OpenSolaris, & GNU Hurd.],
d2099 6
d2175 1
d2210 1
a2210 1
	PKG_CHECK_MODULES([XWINMODULES],[x11 xdmcp xau])
a2273 2
AM_CONDITIONAL(XWIN_NATIVEGDI, [test "x$XWIN" = xyes])
AM_CONDITIONAL(XWIN_PRIMARYFB, [test "x$XWIN" = xyes])
d2429 1
a2429 1
    XEPHYR_REQUIRED_LIBS="xau xdmcp xcb xcb-shape xcb-aux xcb-image xcb-icccm xcb-shm xcb-keysyms"
d2486 2
a2487 1
    KDRIVE_LOCAL_LIBS="$MAIN_LIB $DIX_LIB $KDRIVE_LIB"
d2499 1
d2621 3
d2669 1
@


1.50
log
@Bury kdriver/wscons code in the Attic.
It has never worked and there is no plan to finish it.
@
text
@d513 10
d1127 10
@


1.49
log
@Update to xserver 1.16.4.
Contains fix for CVE-2015-0255. ok dcoppa@@
@
text
@a435 1
	KDRIVE_HW=yes
a2466 13
	*openbsd*)
	    KDRIVE_OS_LIB='$(top_builddir)/hw/kdrive/openbsd/libopenbsd.la'
	    KDRIVEOPENBSD=yes
	    if test "x$KDRIVE_EVDEV" = xauto; then
		KDRIVE_EVDEV=no
	    fi
	    if test "x$KDRIVE_KBD" = xauto; then
		KDRIVE_KBD=yes
	    fi
	    if test "x$KDRIVE_MOUSE" = xauto; then
		KDRIVE_MOUSE=yes
	    fi
	    ;;
a2493 1
AM_CONDITIONAL(KDRIVEOPENBSD, [test "x$KDRIVEOPENBSD" = xyes])
a2498 1
AM_CONDITIONAL(KDRIVEWSCONS, [test x"$ac_cv_header_dev_wscons_wsconsio_h" = xyes])
a2669 1
hw/kdrive/openbsd/Makefile
a2670 1
hw/kdrive/wscons/Makefile
@


1.48
log
@Update to xorg-server  1.16.3.

Most of the 1.16.2->1.16.3 changes are the security patches that
where already there. This adds some extra fixes plus a few unrelated
bug fixes.
@
text
@d29 1
a29 1
AC_INIT([xorg-server], 1.16.3, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
@


1.47
log
@Update to xserver 1.16.2
@
text
@d29 2
a30 2
AC_INIT([xorg-server], 1.16.2, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2014-11-10"
d2691 1
@


1.46
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d29 2
a30 2
AC_INIT([xorg-server], 1.16.1, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2014-09-21"
@


1.45
log
@Update to xorg-server 1.15.2. bug fixes.
@
text
@d29 3
a31 3
AC_INIT([xorg-server], 1.15.2, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2014-06-27"
RELEASE_NAME="Malt Candy"
d33 1
d78 2
a79 3
AC_LIBTOOL_WIN32_DLL
AC_DISABLE_STATIC
AC_PROG_LIBTOOL
d136 2
a137 1
AC_CHECK_HEADERS([fcntl.h stdlib.h string.h unistd.h dlfcn.h stropts.h fnmatch.h sys/utsname.h])
d269 1
a269 1
		[AC_TRY_LINK([
d274 1
a274 1
],[
d280 3
a282 3
}],
	[ac_cv_sysv_ipc=yes],
	[ac_cv_sysv_ipc=no])])
d329 1
a469 2
m4_ifdef([AS_HELP_STRING], , [m4_define([AS_HELP_STRING], m4_defn([AC_HELP_STRING]))])

d524 3
a526 3
dnl Uses --default-font-path if set, otherwise checks for /etc/X11/fontpath.d,
dnl otherwise uses standard subdirectories of FONTROOTDIR. When cross
dnl compiling, assume default font path uses standard FONTROOTDIR directories.
d528 4
a531 7
if test "$cross_compiling" != yes; then
	AC_CHECK_FILE([${sysconfdir}/X11/fontpath.d],
		[DEFAULT_FONT_PATH='catalogue:${sysconfdir}/X11/fontpath.d'],
		[case $host_os in
			darwin*) DEFAULT_FONT_PATH="${DEFAULT_FONT_PATH},/Library/Fonts,/System/Library/Fonts" ;;
		esac])
fi
d593 1
a593 1
AC_ARG_ENABLE(visibility,     AC_HELP_STRING([--enable-visibility], [Enable symbol visibility (default: auto)]),
a653 1
AC_ARG_ENABLE(config-dbus,    AS_HELP_STRING([--enable-config-dbus], [Build D-BUS API support (default: no)]), [CONFIG_DBUS_API=$enableval], [CONFIG_DBUS_API=no])
d664 4
a667 2
AC_ARG_ENABLE(linux_acpi, AC_HELP_STRING([--disable-linux-acpi], [Disable building ACPI support on Linux (if available).]), [enable_linux_acpi=$enableval], [enable_linux_acpi=yes])
AC_ARG_ENABLE(linux_apm, AC_HELP_STRING([--disable-linux-apm], [Disable building APM support on Linux (if available).]), [enable_linux_apm=$enableval], [enable_linux_apm=yes])
d671 1
a671 1
AC_ARG_ENABLE(dmx,    	      AS_HELP_STRING([--enable-dmx], [Build DMX server (default: auto)]), [DMX=$enableval], [DMX=auto])
d675 1
d678 1
d686 2
a687 2
AC_ARG_ENABLE(kdrive-mouse,   AC_HELP_STRING([--enable-kdrive-mouse], [Build mouse driver for kdrive (default: auto)]), [KDRIVE_MOUSE=$enableval], [KDRIVE_MOUSE=auto])
AC_ARG_ENABLE(kdrive-evdev,   AC_HELP_STRING([--enable-kdrive-evdev], [Build evdev driver for kdrive (default: auto)]), [KDRIVE_EVDEV=$enableval], [KDRIVE_EVDEV=auto])
a744 1
		CONFIG_DBUS_API=no
d794 1
d831 1
a831 1
XPROTO="xproto >= 7.0.22"
d837 1
a837 1
FONTSPROTO="fontsproto"
d842 1
a842 1
XTRANS="xtrans >= 1.3.2"
d850 2
d875 22
a896 3
if test "x$CONFIG_UDEV" = xyes &&
 { test "x$CONFIG_DBUS_API" = xyes || test "x$CONFIG_HAL" = xyes; }; then
	AC_MSG_ERROR([Hotplugging through both libudev and dbus/hal not allowed])
a904 1
	CONFIG_DBUS_API=no
a926 3
dnl HAVE_DBUS is true if we actually have the D-Bus library, whereas
dnl CONFIG_DBUS_API is true if we want to enable the D-Bus config
dnl API.
a932 13
if test "x$CONFIG_DBUS_API" = xauto; then
	CONFIG_DBUS_API="$HAVE_DBUS"
fi
if test "x$CONFIG_DBUS_API" = xyes; then
	if ! test "x$HAVE_DBUS" = xyes; then
		AC_MSG_ERROR([D-Bus configuration API requested, but D-Bus is not installed.])
	fi

	AC_DEFINE(CONFIG_DBUS_API, 1, [Use the D-Bus input configuration API])
	CONFIG_NEED_DBUS="yes"
fi
AM_CONDITIONAL(CONFIG_DBUS_API, [test "x$CONFIG_DBUS_API" = xyes])

d943 1
a943 1
	CONFIG_NEED_DBUS="yes"
d947 32
a978 2
if test "x$CONFIG_NEED_DBUS" = xyes; then
        AC_DEFINE(CONFIG_NEED_DBUS, 1, [Use D-Bus for input hotplug])
d980 1
a980 1
AM_CONDITIONAL(CONFIG_NEED_DBUS, [test "x$CONFIG_NEED_DBUS" = xyes])
d1352 1
a1352 1
	GLX=no
d1357 1
a1357 1
	AIGLX=no
d1474 1
a1474 1
				AS_HELP_STRING([--with-xkb-bin-directory=DIR], [Directory containing xkbcomp program]),
d1918 1
a1918 1
		AC_TRY_COMPILE(
d1923 2
a1924 2
		     extern _X_EXPORT int public_int_func(void);],
		    [],
d1950 1
a1950 1
		XORG_SYS_LIBS="$XORG_SYS_LIBS $PCIACCESS_LIBS $GLX_SYS_LIBS $LIBDRM_LIBS"
d2109 3
a2111 1
	LOGPREFIX="$logdir/Xorg."
d2124 4
a2127 1
	AC_DEFINE_DIR(DEFAULT_LOGPREFIX, LOGPREFIX, [Default log location])
d2168 16
a2196 1
	AC_DEFINE_DIR(SYSCONFDIR, sysconfdir, [Location of system.XWinrc])
d2294 2
d2430 3
d2493 1
a2493 2
    KDRIVE_STUB_LIB='$(top_builddir)/hw/kdrive/src/libkdrivestubs.la'
    KDRIVE_LOCAL_LIBS="$MAIN_LIB $DIX_LIB $KDRIVE_LIB $KDRIVE_STUB_LIB"
d2519 26
d2551 1
a2551 1
AC_TRY_COMPILE([
d2556 1
a2556 1
], [], [AC_DEFINE(_GNU_SOURCE, 1,
d2560 1
d2579 1
a2579 1
    AC_WARN([
d2598 1
d2620 1
d2632 1
d2689 1
@


1.44
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d29 3
a31 3
AC_INIT([xorg-server], 1.15.1, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2014-04-13"
RELEASE_NAME="Heart Candy"
@


1.43
log
@Update to xserver 1.14.5
@
text
@d29 3
a31 3
AC_INIT([xorg-server], 1.14.5, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2013-12-12"
RELEASE_NAME="November Rain"
d34 1
d51 1
a51 1
m4_ifndef([XORG_FONT_MACROS_VERSION], [m4_fatal([must install fontutil 1.1 or later before running autoconf/autogen])])
a231 4
dnl APM header
AC_CHECK_HEADERS([linux/apm_bios.h], LNXAPM=yes)
AM_CONDITIONAL(LNXAPM, [test "x$LNXAPM" = xyes])

d300 1
a300 1
dnl glibc backtrace support check (hw/xfree86/common/xf86Events.c)
d644 2
d668 2
d688 1
d751 1
d769 1
d819 1
d823 1
a823 1
GLPROTO="glproto >= 1.4.16"
d828 1
d834 1
a834 1
XEXTPROTO="xextproto >= 7.1.99"
d842 2
a843 1
XTRANS="xtrans >= 1.2.2"
d1076 1
d1083 1
a1104 28
if test "x$GLX" = xyes; then
	PKG_CHECK_MODULES([XLIB], [x11])
	PKG_CHECK_MODULES([GL], $GLPROTO $LIBGL)
	AC_SUBST(XLIB_CFLAGS)
	AC_DEFINE(GLXEXT, 1, [Build GLX extension])
	GLX_LIBS='$(top_builddir)/glx/libglx.la'
	GLX_SYS_LIBS="$GLX_SYS_LIBS"
else
        GLX=no
fi
AM_CONDITIONAL(GLX, test "x$GLX" = xyes)

if test "x$GLX" = xno; then
        AIGLX=no
fi

if test "x$AIGLX" = xyes -a \( "x$DRI" = xyes -o "x$DRI2" = xyes \); then
	AC_DEFINE(AIGLX, 1, [Build AIGLX loader])
fi
AM_CONDITIONAL(AIGLX_DRI_LOADER, { test "x$DRI" = xyes || test "x$DRI2" = xyes; } && test "x$AIGLX" = xyes)

if test "x$GLX_USE_TLS" = xyes ; then
	GLX_DEFINES="-DGLX_USE_TLS -DPTHREADS"
	GLX_SYS_LIBS="$GLX_SYS_LIBS -lpthread"
fi
AC_SUBST([GLX_DEFINES])
AC_SUBST([GLX_SYS_LIBS])

d1121 1
d1127 156
a1282 1
if test "x$DRI" = xyes || test "x$DRI2" = xyes || test "x$CONFIG_UDEV_KMS" = xyes; then
d1310 37
d1400 1
d1560 1
a1560 1
  OS_LIB='$(top_builddir)/os/os.O $(SHA1_LIBS) $(DLOPEN_LIBS)'
d1703 14
d1804 1
a1804 1
XSERVER_CFLAGS="$XSERVER_CFLAGS $CORE_INCS $XEXT_INC $COMPOSITE_INC $DAMAGE_INC $FIXES_INC $XI_INC $MI_INC $MIEXT_SYNC_INC $MIEXT_SHADOW_INC $MIEXT_LAYER_INC $MIEXT_DAMAGE_INC $RENDER_INC $RANDR_INC $FB_INC $DBE_INC"
d1817 1
a1817 1
	XVFB_LIBS="$FB_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB"
d1838 1
a1838 1
	XNEST_LIBS="$FB_LIB $FIXES_LIB $MI_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $MAIN_LIB $DIX_LIB $OS_LIB"
d1863 1
a1863 1
	XORG_LIBS="$COMPOSITE_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $XI_LIB $XKB_LIB"
d1914 4
d1919 2
a1920 14
	PKG_CHECK_MODULES([PCIACCESS], $LIBPCIACCESS)
	SDK_REQUIRED_MODULES="$SDK_REQUIRED_MODULES $LIBPCIACCESS"
	XORG_SYS_LIBS="$XORG_SYS_LIBS $PCIACCESS_LIBS $GLX_SYS_LIBS $LIBDRM_LIBS"
	XORG_CFLAGS="$XORG_CFLAGS $PCIACCESS_CFLAGS $LIBDRM_CFLAGS"

	AC_DEFINE(XSERVER_LIBPCIACCESS, 1, [Use libpciaccess for all pci manipulation])
	AC_DEFINE_DIR(PCI_TXT_IDS_PATH, PCI_TXT_IDS_DIR, [Default PCI text file ID path])
	case $host_os in
	  gnu* | freebsd* | kfreebsd*-gnu | netbsd* | openbsd* | solaris* | dragonfly*)
		xorg_bus_bsdpci="yes"
		;;
	esac
	case $host_cpu in
	  sparc*)
d1922 15
a1936 6
		  openbsd*)
		    xorg_bus_sparc="no"
		    ;;
		  *)
		    xorg_bus_sparc="yes"
		    ;;
d1938 7
a1944 2
		;;
	esac
a1957 3
		if test "x$LNXAPM" = xyes; then
			XORG_CFLAGS="$XORG_CFLAGS -DXF86PM"
		fi
d1965 1
a1965 1
			linux_acpi="yes"
d1970 5
a2004 3
		if test "x$SUNCC" = "xyes"; then
			solaris_asm_inline="yes"
		fi
a2024 5
		if test x$solaris_asm_inline = xyes ; then
			SOLARIS_ASM_CFLAGS='$(top_srcdir)/hw/xfree86/os-support/solaris/solaris-$(SOLARIS_INOUT_ARCH).il'
			XORG_CFLAGS="${XORG_CFLAGS} "'$(SOLARIS_ASM_CFLAGS)'
		fi
		AC_SUBST([SOLARIS_ASM_CFLAGS])
d2124 1
a2124 1
AM_CONDITIONAL([SOLARIS_ASM_INLINE], [test "x$solaris_asm_inline" = xyes])
d2172 2
a2173 2
	XWIN_LIBS="$FB_LIB $MI_LIB $FIXES_LIB $XEXT_LIB $RANDR_LIB $RENDER_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $DAMAGE_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $OS_LIB"
	XWIN_SYS_LIBS="$XWIN_SYS_LIBS $XWINMODULES_LIBS $GLX_SYS_LIBS"
d2189 10
d2222 1
a2222 1
	XQUARTZ_LIBS="$MAIN_LIB $FB_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB"
d2258 1
a2258 1
	[xmuu $LIBXEXT x11 xrender xfixes $LIBXI $DMXPROTO xau $XDMCP_MODULES],
d2284 1
a2284 1
	XDMX_LIBS="$FB_LIB $MI_LIB $XEXT_LIB $RENDER_LIB $RECORD_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $MIEXT_SYNC_LIB $MIEXT_SHADOW_LIB $MIEXT_DAMAGE_LIB $COMPOSITE_LIB $DAMAGE_LIB $MAIN_LIB $DIX_LIB $CONFIG_LIB $OS_LIB $FIXES_LIB"
d2367 1
a2367 1
    XEPHYR_REQUIRED_LIBS="x11 $LIBXEXT xau xdmcp"
d2369 1
a2369 1
        XEPHYR_REQUIRED_LIBS="$XEPHYR_REQUIRED_LIBS xv"
d2372 1
a2372 1
        XEPHYR_REQUIRED_LIBS="$XEPHYR_REQUIRED_LIBS $LIBGL libdrm"
d2393 1
a2393 1
    KDRIVE_PURE_LIBS="$FB_LIB $MI_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $OS_LIB"
d2501 1
a2501 1
AC_OUTPUT([
d2522 1
d2530 2
d2606 1
@


1.42
log
@Update to xserver 1.14.4
@
text
@d29 3
a31 3
AC_INIT([xorg-server], 1.14.4, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2013-10-31"
RELEASE_NAME="October Flood"
@


1.41
log
@Update to xserver 1.14.3
@
text
@d29 3
a31 3
AC_INIT([xorg-server], 1.14.3, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2013-09-12"
RELEASE_NAME="September Rain"
d218 1
a218 1
	mmap shmctl64 strncasecmp vasprintf vsnprintf walkcontext])
@


1.40
log
@Uodate to xserver 1.14.2. Tested by krw@@, shadchin@@, todd@@
@
text
@d29 3
a31 3
AC_INIT([xorg-server], 1.14.2, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2013-06-25"
RELEASE_NAME="Act Abnormal"
@


1.39
log
@Add monochrome X server support for luna88k.

Some luna88k specific quirks are needed in
driver/xf86-video-wsfb/src/wsfb_driver.c for now.

ok matthieu@@
@
text
@d29 3
a31 3
AC_INIT([xorg-server], 1.14.1, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2013-04-17"
RELEASE_NAME="Act Normal"
d2293 8
@


1.38
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d355 4
d403 1
@


1.37
log
@Link Xorg with -lpthread, for the llvm-pipe drm. Requested by mpi@@

Tested that it doesn't have any performance impact. ok ajacoutot@@,
matthew@@ (some months ago).
@
text
@d29 3
a31 2
AC_INIT([xorg-server], 1.12.3, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2012-07-09"
a33 1
AM_MAINTAINER_MODE
d139 1
d275 1
d279 1
a279 1
    id = shmget(IPC_PRIVATE, 512, SHM_W | SHM_R);
d446 1
a446 1
  cygwin*)
d630 1
a630 1
AC_ARG_ENABLE(mitshm,         AS_HELP_STRING([--disable-mitshm], [Build SHM extension (default: enabled)]), [MITSHM=$enableval], [MITSHM=yes])
d652 1
a656 1
AC_ARG_ENABLE(xaa,               AS_HELP_STRING([--enable-xaa], [Build XAA (default: enabled)]), [XAA=$enableval], [XAA=yes])
d694 1
d737 5
a741 1
	cygwin*)
d744 5
d752 1
a800 1
XEXTXORG_LIB='$(top_builddir)/Xext/libXextbuiltin.la'
d807 1
a807 1
RESOURCEPROTO="resourceproto"
d809 1
a809 1
DRI2PROTO="dri2proto >= 2.6"
d813 1
a813 1
GLPROTO="glproto >= 1.4.14"
d821 1
a821 1
RANDRPROTO="randrproto >= 1.2.99.3"
d824 1
a824 1
INPUTPROTO="inputproto >= 2.1.99.6"
d847 1
a847 1
LIBPIXMAN="pixman-1 >= 0.21.8"
d874 3
d881 3
a883 1

d893 1
d1044 3
d1117 1
d1122 2
a1123 3
	PKG_CHECK_MODULES([DRIPROTO], [$DRIPROTO])
	PKG_CHECK_MODULES([DRI], $GLPROTO $LIBDRI)
	AC_SUBST(DRIPROTO_CFLAGS)
d1140 1
a1140 1
if test "x$DRI" = xyes || test "x$DRI2" = xyes; then
d1172 2
a1173 2
		XORG_SYS_LIBS="-lpthread"
		;;
d1214 1
a1251 1
AM_CONDITIONAL(XAA, test "x$XAA" = xyes)
d1404 1
a1404 1
            [AS_HELP_STRING([--with-sha1=libc|libmd|libgcrypt|libcrypto|libsha1|CommonCrypto],
d1430 13
d1467 12
d1563 30
d1594 4
d1610 1
a1610 1
XSERVER_CFLAGS="$XSERVER_CFLAGS $CORE_INCS $XEXT_INC $COMPOSITE_INC $DAMAGE_INC $FIXES_INC $XI_INC $MI_INC $MIEXT_SYNC_INC $MIEXT_SHADOW_INC $MIEXT_LAYER_INC $MIEXT_DAMAGE_INC $RENDER_INC $RANDR_INC $FB_INC"
d1658 1
d1669 1
a1669 1
	XORG_LIBS="$COMPOSITE_LIB $FIXES_LIB $XEXTXORG_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $XI_LIB $XKB_LIB"
d1723 2
a1724 2
	XORG_SYS_LIBS="$XORG_SYS_LIBS $PCIACCESS_LIBS $GLX_SYS_LIBS"
	XORG_CFLAGS="$XORG_CFLAGS $PCIACCESS_CFLAGS"
d1748 4
a1884 1
	AC_DEFINE(XFree86LOADER, 1, [Building loadable XFree86 server])
d1934 1
a1934 1

d1974 1
a1974 1
			XWIN_SYS_LIBS=-lwinsock2
d1977 1
d1979 1
a1979 1
	XWIN_SYS_LIBS="$XWIN_SYS_LIBS $XWINMODULES_LIBS"
d2066 1
a2307 1
miext/cw/Makefile
a2322 1
hw/xfree86/dixmods/extmod/Makefile
a2348 1
hw/xfree86/xaa/Makefile
@


1.36
log
@Update to xserver 1.12.3.
@
text
@d1147 8
@


1.35
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d29 2
a30 2
AC_INIT([xorg-server], 1.12.2, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2012-05-29"
@


1.34
log
@Update to xserver 1.11.4. tested by krw@@, shadchin@@.
@
text
@d28 3
a30 3
AC_PREREQ(2.57)
AC_INIT([xorg-server], 1.11.4, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2012-01-27"
d48 1
a48 1
XORG_LD_WRAP
a78 1
AC_PROG_MAKE_SET
d89 6
d215 4
a218 19
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([geteuid getuid link memmove memset mkstemp strchr strrchr \
		strtol getopt getopt_long vsnprintf walkcontext backtrace \
		getisax getzoneid shmctl64 strcasestr ffs vasprintf])
AC_FUNC_ALLOCA
dnl Old HAS_* names used in os/*.c.
AC_CHECK_FUNC([getdtablesize],
	AC_DEFINE(HAS_GETDTABLESIZE, 1, [Have the 'getdtablesize' function.]))
AC_CHECK_FUNC([getifaddrs],
	AC_DEFINE(HAS_GETIFADDRS, 1, [Have the 'getifaddrs' function.]))
AC_CHECK_FUNC([getpeereid],
	AC_DEFINE(HAS_GETPEEREID, 1, [Have the 'getpeereid' function.]))
AC_CHECK_FUNC([getpeerucred],
	AC_DEFINE(HAS_GETPEERUCRED, 1, [Have the 'getpeerucred' function.]))
AC_CHECK_FUNC([strlcat], HAVE_STRLCAT=yes, HAVE_STRLCAT=no)
AM_CONDITIONAL(NEED_STRLCAT, [test x$HAVE_STRLCAT = xno])	
AC_CHECK_FUNC([strlcpy], AC_DEFINE(HAS_STRLCPY, 1, [Have the 'strlcpy' function]))

AM_CONDITIONAL(NEED_VSNPRINTF, [test x$HAVE_VSNPRINTF = xno])
d220 1
a220 4
dnl Check for mmap support for Xvfb
AC_CHECK_FUNC([mmap], AC_DEFINE(HAS_MMAP, 1, [Have the 'mmap' function.]))

dnl Find the math libary
d222 1
a222 1
AC_CHECK_LIB(m, cbrt, AC_DEFINE(HAVE_CBRT, 1, [Have the 'cbrt' function]))
a594 3
AC_ARG_ENABLE(pc98,     	AC_HELP_STRING([--enable-pc98], [Enable PC98 support in Xorg (default: auto)]),
				[SUPPORT_PC98=$enableval],
				[SUPPORT_PC98=auto])
d628 1
a628 1
AC_ARG_ENABLE(mitshm,         AS_HELP_STRING([--disable-shm], [Build SHM extension (default: enabled)]), [MITSHM=$enableval], [MITSHM=yes])
d661 1
a726 4
if test "x$INT10" = xyes; then
	dnl VM86 headers
	AC_CHECK_HEADERS([sys/vm86.h sys/io.h])
fi
d742 5
d753 1
a753 1
				AC_LINK_IFELSE([char FSFindFolder(); int main() { FSFindFolder(); return 0;}],
d807 13
a819 4
dnl Core modules for most extensions, et al.
SDK_REQUIRED_MODULES="[xproto >= 7.0.22] [randrproto >= 1.2.99.3] [renderproto >= 0.11] [xextproto >= 7.1.99] [inputproto >= 1.9.99.902] [kbproto >= 1.0.3] fontsproto"
# Make SDK_REQUIRED_MODULES available for inclusion in xorg-server.pc
AC_SUBST(SDK_REQUIRED_MODULES)
d831 1
a831 1
LIBPCIACCESS="pciaccess >= 0.8.0"
d842 6
a847 1
REQUIRED_MODULES="[fixesproto >= 5.0] [damageproto >= 1.1] [xcmiscproto >= 1.2.0] [xtrans >= 1.2.2] [bigreqsproto >= 1.1.0] $SDK_REQUIRED_MODULES"
d866 9
d942 1
a942 1
AC_PREPROC_IFELSE([
d947 1
a947 1
], glibc=yes, glibc=no)
d971 1
a971 1
    AC_RUN_IFELSE([
d982 1
a982 1
    ], [MONOTONIC_CLOCK=yes], [MONOTONIC_CLOCK=no],
a1276 7
AC_CHECK_FUNC(strcasecmp, [], AC_DEFINE([NEED_STRCASECMP], 1,
                                        [Do not have 'strcasecmp'.]))
AC_CHECK_FUNC(strncasecmp, [], AC_DEFINE([NEED_STRNCASECMP], 1,
                                        [Do not have 'strncasecmp'.]))
AC_CHECK_FUNC(strcasestr, [], AC_DEFINE([NEED_STRCASESTR], 1,
                                       [Do not have 'strcasestr'.]))

a1312 1
AC_DEFINE_DIR(PCI_TXT_IDS_PATH, PCI_TXT_IDS_DIR, [Default PCI text file ID path])
a1574 4
xorg_bus_linuxpci=no
xorg_bus_bsdpci=no
xorg_bus_sparc=no

d1580 1
a1580 1
	XORG_LIBS="$COMPOSITE_LIB $FIXES_LIB $XEXTXORG_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_SYNC_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB"
d1599 2
a1600 1
		CFLAGS="$CFLAGS $VISIBILITY_CFLAGS"
d1623 9
d1633 1
a1633 10
	SAVE_LIBS=$LIBS
	SAVE_CFLAGS=$CFLAGS
	CFLAGS=$PCIACCESS_CFLAGS
	LIBS=$PCIACCESS_LIBS
	AC_CHECK_FUNCS([pci_system_init_dev_mem])
	AC_CHECK_FUNCS([pci_device_enable])
	AC_CHECK_FUNCS([pci_device_is_boot_vga])
	AC_CHECK_FUNCS([pci_device_vgaarb_init])
	LIBS=$SAVE_LIBS
	CFLAGS=$SAVE_CFLAGS
d1637 26
a1667 1
	  	XORG_OS="linux"
a1668 1
		xorg_bus_linuxpci="yes"
a1670 4
		  ia64*)
			linux_ia64=yes
			linux_acpi="yes"
			;;
d1674 1
a1674 1
		  i*86|amd64*|x86_64*)
a1681 1
	  	XORG_OS="freebsd"
a1682 1
		xorg_bus_bsdpci="yes"
a1684 1
	  	XORG_OS="netbsd"
a1685 1
		xorg_bus_bsdpci="yes"
a1691 1
	  	XORG_OS="openbsd"
a1692 1
		xorg_bus_bsdpci="yes"
a1694 1
	  	XORG_OS="solaris"
a1696 3
		# Use the same stubs as BSD for old functions, since we now
		# use libpciaccess for PCI
		xorg_bus_bsdpci="yes"
a1737 3
		if test "x$SUPPORT_PC98" = xauto; then
			SUPPORT_PC98="no"
		fi
a1739 1
	  	XORG_OS="gnu"
a1740 3
		# Use the same stubs as BSD for old functions, since we now
		# use libpciaccess for PCI
		xorg_bus_bsdpci="yes"
d1743 2
a1744 3
	  	XORG_OS="unknown"
		XORG_OS_SUBDIR="unknown"
		AC_MSG_ERROR([m4_text_wrap(m4_join([ ],
a1751 27
	case $host_cpu in
	  sparc*)
		case $host_os in
		  openbsd*)
		    xorg_bus_sparc="no"
		    ;;
		  *)
		    xorg_bus_sparc="yes"
		    ;;
		esac
		;;
	  i*86)
		if test "x$SUPPORT_PC98" = xauto; then
			SUPPORT_PC98="yes"
		fi
		;;
	esac

	if test "x$SUPPORT_PC98" = xauto; then
		SUPPORT_PC98="no"
	fi
	if test "x$SUPPORT_PC98" = xyes; then
		AC_DEFINE(SUPPORT_PC98, 1, [Support PC98])
	fi
	if test "x$XORG_OS_PCI" = x ; then
		XORG_OS_PCI=$XORG_OS
	fi
a1779 1
	AC_SUBST([XORG_OS])
a1803 1
	AC_DEFINE(XSERVER_LIBPCIACCESS, 1, [Use libpciaccess for all pci manipulation])
d1833 1
a1833 1
AM_CONDITIONAL([XORG_BUS_LINUXPCI], [test "x$xorg_bus_linuxpci" = xyes])
a1835 1
AM_CONDITIONAL([LINUX_IA64], [test "x$linux_ia64" = xyes])
d2250 1
@


1.33
log
@Bugfix Update to xserver 1.11.3
@
text
@d29 2
a30 2
AC_INIT([xorg-server], 1.11.3, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2011-12-16"
d1051 7
a2106 1
    PKG_CHECK_MODULES(XEPHYR, $XEPHYR_REQUIRED_LIBS, [xephyr="yes"], [xephyr="no"])
d2108 3
a2110 4
        XEPHYR=$xephyr
    fi
    if test "x$XEPHYR" = xyes && test "x$xephyr" = xno; then	
        AC_MSG_ERROR([Xephyr dependencies missing])
@


1.32
log
@Update to xserver 1.11.2
@
text
@d29 2
a30 2
AC_INIT([xorg-server], 1.11.2, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2011-11-04"
@


1.31
log
@Introduce new autoconfiguration code for X input drivers, based on X
hotplug framework.This also takes care of the configuration of the
keyboard layout from the wscons layout that was hacked inside the
keyboard driver.

Tested by many, ok oga@@.
@
text
@d29 2
a30 2
AC_INIT([xorg-server], 1.9.5, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2011-03-17"
d35 1
a35 1
# Require xorg-macros minimum of 1.10 for XORG_CHECK_SGML_DOCTOOLS
d37 2
a38 2
          [m4_fatal([must install xorg-macros 1.10 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.10)
d41 8
a48 1
XORG_CHECK_SGML_DOCTOOLS(1.5)
a73 1
AC_PROG_CC
a74 1
AC_PROG_INSTALL
a78 1
DOLT
a84 1
AC_PROG_SED
d213 1
a213 1
		getisax getzoneid shmctl64 strcasestr ffs])
a321 13
dnl ARM needs additional compiler flags for proper backtraces if GCC is
dnl used. Compile a dummy program with the -mapcs-frame option. If it
dnl succeeds, we know that we are building for ARM with GCC.
old_CFLAGS="$CFLAGS"
CFLAGS="-mapcs-frame"
AC_COMPILE_IFELSE(
        AC_LANG_PROGRAM([[ ]]),
        ARM_BACKTRACE_CFLAGS="$CFLAGS",
        ARM_BACKTRACE_CFLAGS=""
)
CFLAGS="$old_CFLAGS"
AC_SUBST(ARM_BACKTRACE_CFLAGS)

a486 3
AC_ARG_ENABLE(unit-tests,    AS_HELP_STRING([--enable-unit-tests],
                                  [Enable unit-tests (default: auto)]),
                                [UNITTESTS=$enableval], [UNITTESTS=auto])
d589 7
a595 5
AC_ARG_WITH(launchd-id-prefix,  AS_HELP_STRING([--with-launchd-id-prefix=PATH], [Prefix to use for launchd identifiers (default: org.x)]),
                                [ LAUNCHD_ID_PREFIX="${withval}" ],
                                [ LAUNCHD_ID_PREFIX="org.x" ])
AC_SUBST([LAUNCHD_ID_PREFIX])
AC_DEFINE_UNQUOTED(LAUNCHD_ID_PREFIX, "$LAUNCHD_ID_PREFIX", [Prefix to use for launchd identifiers])
a599 3
AC_ARG_ENABLE(builddocs,      AS_HELP_STRING([--enable-builddocs], [Build docs (default: disabled)]),
                                [BUILDDOCS=$enableval],
                                [BUILDDOCS=no])
a612 3
AC_ARG_WITH(dri-driver-path,  AS_HELP_STRING([--with-dri-driver-path=PATH], [Path to DRI drivers (default: ${libdir}/dri)]),
				[ DRI_DRIVER_PATH="$withval" ],
				[ DRI_DRIVER_PATH="${libdir}/dri" ])
d616 14
a629 3
AC_ARG_ENABLE(glx-tls,        AS_HELP_STRING([--enable-glx-tls], [Build GLX with TLS support (default: disabled)]),
                                [GLX_USE_TLS=$enableval],
                                [GLX_USE_TLS=no])
a660 1
AC_ARG_ENABLE(xcalibrate,     AS_HELP_STRING([--enable-xcalibrate], [Build XCalibrate extension (default: disabled)]), [XCALIBRATE=$enableval], [XCALIBRATE=no])
d676 1
a746 7
dnl Handle building documentation
AM_CONDITIONAL(BUILDDOCS, test "x$BUILDDOCS" = xyes)
XORG_ENABLE_DOCS
XORG_ENABLE_DEVEL_DOCS
XORG_WITH_XMLTO(0.0.20)
XORG_WITH_FOP

d768 3
a770 3
				[xorg_cv_Carbon_framework=yes],
				[xorg_cv_Carbon_framework=no])
			LDFLAGS=$save_LDFLAGS])
d779 4
d811 1
a811 1
DRI2PROTO="dri2proto >= 2.3"
a813 1
XCALIBRATEPROTO="xcalibrateproto"
d815 1
a815 1
GLPROTO="glproto >= 1.4.10"
d822 1
a822 1
SDK_REQUIRED_MODULES="[xproto >= 7.0.17] [randrproto >= 1.2.99.3] [renderproto >= 0.11] [xextproto >= 7.0.99.3] [inputproto >= 1.9.99.902] [kbproto >= 1.0.3] fontsproto"
a836 1
LIBGLIB="glib-2.0 >= 2.16"
d840 1
a840 1
LIBPIXMAN="pixman-1 >= 0.15.20"
d847 1
a847 1
REQUIRED_MODULES="[fixesproto >= 4.1] [damageproto >= 1.1] [xcmiscproto >= 1.2.0] [xtrans >= 1.2.2] [bigreqsproto >= 1.1.0] $SDK_REQUIRED_MODULES"
d1042 12
d1066 5
a1070 1
if test "x$AIGLX" = xyes -a "x$GLX" = xyes -a "x$DRI" = xyes; then
a1071 2
else
	AIGLX=no
d1073 1
a1073 1
AM_CONDITIONAL(AIGLX, test "x$AIGLX" = xyes)
d1075 1
a1075 1
if test "x$GLX_USE_TLS" = xyes -a "x$AIGLX" = xyes; then
a1181 8
if test "x$XCALIBRATE" = xyes && test "$KDRIVE" = yes; then
   AC_DEFINE(XCALIBRATE, 1, [Build XCalibrate extension])
   REQUIRED_MODULES="$REQUIRED_MODULES $XCALIBRATEPROTO"
else
   XCALIBRATE=no
fi
AM_CONDITIONAL(XCALIBRATE, [test "x$XCALIBRATE" = xyes])

d1239 1
a1239 5
        if test "x$CONFIG_HAL" = xyes; then
            XKB_DFLT_RULES="evdev"
        else
            XKB_DFLT_RULES="base"
        fi
d1251 5
d1307 2
a1308 1
AC_DEFINE_DIR(DRI_DRIVER_PATH, DRI_DRIVER_PATH, [Default DRI driver path])
a1335 44
# If unittests aren't explicitly disabled, check for required support
if test "x$UNITTESTS" != xno ; then
       PKG_CHECK_MODULES([GLIB], $LIBGLIB,
                         [HAVE_GLIB=yes], [HAVE_GLIB=no])

       # Check if linker supports -wrap, passed via compiler flags
       # When cross-compiling, reports no, since unit tests run from
       # "make check", so would be running on build machine,  not target
       AC_MSG_CHECKING([whether the linker supports -wrap])
       save_LDFLAGS="$LDFLAGS"
       LDFLAGS="$LDFLAGS -Wl,-wrap,exit"
       AC_RUN_IFELSE([AC_LANG_PROGRAM([[
	void __wrap_exit (int s)
	{
	    __real_exit (0);
	}]],
	[[exit (1);]])],
                     [linker_can_wrap="yes"],
                     [linker_can_wrap="no"],
                     [linker_can_wrap="no"])
       AC_MSG_RESULT([$linker_can_wrap])
       LDFLAGS="$save_LDFLAGS"
fi

if test "x$UNITTESTS" = xauto; then
       if test "x$HAVE_GLIB" = xyes && test "x$linker_can_wrap" = xyes; then
           UNITTESTS=yes
       else
           UNITTESTS=no
       fi
fi
if test "x$UNITTESTS" = xyes; then
       if test "x$HAVE_GLIB" = xno; then
           AC_MSG_ERROR([glib required to build unit tests])
       fi
       if test "x$linker_can_wrap" = xno; then
           AC_MSG_ERROR([ld -wrap support required to build unit tests])
       fi
       AC_DEFINE(UNITTESTS, 1, [Enable unit tests])
       AC_SUBST([GLIB_LIBS])
       AC_SUBST([GLIB_CFLAGS])
fi
AM_CONDITIONAL(UNITTESTS, [test "x$UNITTESTS" = xyes])

d1361 2
d1514 1
a1514 1
XSERVER_CFLAGS="$XSERVER_CFLAGS $CORE_INCS $XEXT_INC $COMPOSITE_INC $DAMAGE_INC $FIXES_INC $XI_INC $MI_INC $MIEXT_SHADOW_INC $MIEXT_LAYER_INC $MIEXT_DAMAGE_INC $RENDER_INC $RANDR_INC $FB_INC"
d1527 1
a1527 1
	XVFB_LIBS="$FB_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB"
d1548 1
a1548 1
	XNEST_LIBS="$FB_LIB $FIXES_LIB $MI_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $DIX_LIB $MAIN_LIB $OS_LIB"
d1576 1
a1576 1
	XORG_LIBS="$COMPOSITE_LIB $FIXES_LIB $XEXTXORG_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB"
a1586 1
		AC_CHECK_DECL([__SUNPRO_C], [SUNCC="yes"], [SUNCC="no"])
a1694 1
		AC_CHECK_DECL([__SUNPRO_C], [SUNCC="yes"], [SUNCC="no"])
a1801 8

	AC_PATH_PROG(PERL, perl, no)
	dnl unlikely as this may be ...
	if test "x$PERL" = xno; then
		AC_MSG_ERROR([Perl is required to build the XFree86/Xorg DDX.])
	fi
	AC_SUBST(PERL)

d1908 1
a1908 1
	XWIN_LIBS="$FB_LIB $MI_LIB $FIXES_LIB $XEXT_LIB $RANDR_LIB $RENDER_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $OS_LIB"
d1922 10
d1937 3
a1939 3
AM_CONDITIONAL(XWIN_GLX_WINDOWS, [test "x$XWIN" = xyes && false])
AM_CONDITIONAL(XWIN_NATIVEGDI, [test "x$XWIN" = xyes && false])
AM_CONDITIONAL(XWIN_PRIMARYFB, [test "x$XWIN" = xyes && false])
d1948 2
a1949 2
	DARWIN_LIBS="$MI_LIB $OS_LIB $DIX_LIB $MAIN_LIB $FB_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB"
	AC_SUBST([DARWIN_LIBS])
d2009 1
a2009 1
	XDMX_LIBS="$FB_LIB $MI_LIB $RENDER_LIB $RECORD_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $MIEXT_SHADOW_LIB $MIEXT_DAMAGE_LIB $XEXT_LIB $MAIN_LIB $DIX_LIB $OS_LIB $FIXES_LIB"
d2114 1
a2114 1
    KDRIVE_PURE_INCS="$KDRIVE_INC $MIEXT_DAMAGE_INC $MIEXT_SHADOW_INC $XEXT_INC $FB_INC $MI_INC"
d2120 1
a2120 1
    KDRIVE_PURE_LIBS="$FB_LIB $MI_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $OS_LIB"
d2218 2
d2229 2
a2230 3
doc/xml/Makefile
doc/xml/dtrace/Makefile
doc/xml/xserver.ent
d2236 1
a2256 3
hw/xfree86/doc/devel/Makefile
hw/xfree86/doc/man/Makefile
hw/xfree86/doc/sgml/Makefile
d2260 1
d2262 1
d2266 1
a2273 1
hw/xfree86/os-support/sco/Makefile
a2274 1
hw/xfree86/os-support/sysv/Makefile
a2281 1
hw/xfree86/xf8_16bpp/Makefile
d2283 1
d2287 1
d2289 2
d2295 1
d2297 1
d2299 1
d2302 1
d2306 1
a2306 1
hw/xquartz/doc/Makefile
d2312 1
d2321 1
@


1.30
log
@Update to xserver 1.9.5. Tested by jasper@@, ajacoutot@@ and krw@@
@
text
@d675 1
d919 15
@


1.29
log
@Repair build of Xorg on hppa
@
text
@d29 2
a30 2
AC_INIT([xorg-server], 1.9.3, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2010-12-13"
@


1.28
log
@Update to xorg-server 1.9.3. Tested by japser@@, landry@@ and ajacoutot@@
in various configurations.
@
text
@d405 6
@


1.27
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d29 2
a30 2
AC_INIT([xorg-server], 1.9.2, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2010-10-30"
d748 1
d1368 1
a1368 1
  OS_LIB='$(top_builddir)/os/os.O $(SHA1_LIBS)'
d2087 4
a2090 1
        AC_CHECK_LIB(ts, ts_open, [HAVE_TSLIB="yes"])
d2187 2
a2188 2
    KDRIVE_LOCAL_LIBS="$KDRIVE_LOCAL_LIBS $KDRIVE_OS_LIB $OS_LIB"
    KDRIVE_LIBS="$TSLIB_LIBS $KDRIVE_LOCAL_LIBS $XSERVER_SYS_LIBS $GLX_SYS_LIBS $DLOPEN_LIBS"
@


1.26
log
@Disable use of SIGIO by default; it breaks multi-card
configurations.  We don't want to run thousands of lines of
potentially signal-unsafe code for no particular benefit.

ok deraadt@@, matthieu@@, oga@@
@
text
@d29 2
a30 2
AC_INIT([xorg-server], 1.8.2, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="2010-07-01"
d35 1
a35 1
# Require xorg-macros: XORG_DEFAULT_OPTIONS
d37 2
a38 2
          [m4_fatal([must install xorg-macros 1.6 or later before running autoconf/autogen])])
XORG_MACROS_VERSION(1.6)
d41 1
d127 1
a127 1
AC_CHECK_HEADERS([fcntl.h stdlib.h string.h unistd.h dlfcn.h stropts.h fnmatch.h])
a662 1
AC_ARG_ENABLE(multibuffer,    AS_HELP_STRING([--enable-multibuffer], [Build Multibuffer extension (default: disabled)]), [MULTIBUFFER=$enableval], [MULTIBUFFER=no])
d675 1
d748 3
a750 4

dnl Only build sgml docs when linuxdoc is available and
dnl def.ents has been installed
XORG_CHECK_LINUXDOC
d812 1
a812 1
DRI2PROTO="dri2proto >= 2.2"
d824 3
a826 2
REQUIRED_MODULES="[randrproto >= 1.2.99.3] [renderproto >= 0.11] [fixesproto >= 4.1] [damageproto >= 1.1] [xcmiscproto >= 1.2.0] [xextproto >= 7.0.99.3] [xproto >= 7.0.13] [xtrans >= 1.2.2] [bigreqsproto >= 1.1.0] fontsproto [inputproto >= 1.9.99.902] [kbproto >= 1.0.3]"
REQUIRED_LIBS="xfont xau [pixman-1 >= 0.15.20]"
d835 1
d842 9
d874 1
a874 1
PKG_CHECK_MODULES(DBUS, dbus-1, [HAVE_DBUS=yes], [HAVE_DBUS=no])
a910 1
CONFIG_LIB='$(top_builddir)/config/libconfig.la'
d982 1
d1072 1
d1078 4
a1081 3
	PKG_CHECK_MODULES([LIBDRM], $LIBDRM)
	AC_SUBST(LIBDRM_CFLAGS)
	AC_SUBST(LIBDRM_LIBS)
d1111 1
a1138 6
AM_CONDITIONAL(MULTIBUFFER, [test "x$MULTIBUFFER" = xyes])
if test "x$MULTIBUFFER" = xyes; then
	AC_DEFINE(MULTIBUFFER, 1, [Build Multibuffer extension])
	# Requires xextproto which is always required
fi

a1226 4
    openbsd*)
        dnl still using xkbdata for now
	XKB_DFLT_RULES="xorg"
	;;
d1427 1
a1427 1
AC_CHECK_LIB([sha1], [sha1_begin], [HAVE_LIBSHA1=yes])
d1499 1
a1499 1
XSERVER_LIBS="$DIX_LIB $CONFIG_LIB $MI_LIB $OS_LIB"
d1549 1
a1549 1
	XVFB_LIBS="$FB_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB"
d1558 1
a1558 1
PKG_CHECK_MODULES(XNESTMODULES, [xfont $LIBXEXT x11 xau $XDMCP_MODULES], [have_xnest=yes], [have_xnest=no])
d1570 1
a1570 1
	XNEST_LIBS="$FB_LIB $FIXES_LIB $MI_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $DIX_LIB $MAIN_LIB $OS_LIB $CONFIG_LIB"
d1761 5
a1765 3
		AC_MSG_ERROR([Your OS is unknown. Xorg currently only supports Linux, \
		Free/Open/NetBSD, Solaris, and OS X. If you are interested in porting \
	        Xorg to your platform, please email xorg@@lists.freedesktop.org.])
d1917 1
a1917 1
	PKG_CHECK_MODULES([XWINMODULES],[x11 xdmcp xau xfont])
d1940 1
a1940 1
	XWIN_LIBS="$FB_LIB $MI_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $RANDR_LIB $RENDER_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $OS_LIB"
d1970 1
a1970 1
	DARWIN_LIBS="$MI_LIB $OS_LIB $DIX_LIB $MAIN_LIB $FB_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $RECORD_LIB $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB"
d2006 1
a2006 1
	[xmuu $LIBXEXT x11 xrender xfixes xfont $LIBXI $DMXPROTO xau $XDMCP_MODULES],
d2031 1
a2031 1
	XDMX_LIBS="$FB_LIB $MI_LIB $RENDER_LIB $RECORD_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $MIEXT_SHADOW_LIB $MIEXT_DAMAGE_LIB $XEXT_LIB $MAIN_LIB $DIX_LIB $CONFIG_LIB $OS_LIB $FIXES_LIB"
d2111 1
a2111 1
    XEPHYR_REQUIRED_LIBS="x11 $LIBXEXT xfont xau xdmcp"
d2123 3
d2181 1
a2181 1
    KDRIVE_LOCAL_LIBS="$MAIN_LIB $DIX_LIB $KDRIVE_LIB $KDRIVE_STUB_LIB $CONFIG_LIB"
d2223 1
d2246 3
d2314 1
@


1.25
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d442 4
@


1.24
log
@Add a configure test for newer proto headers and use it to enable
building xserver 1.6 with those headers. ok oga@@.
@
text
@d29 2
a30 1
AC_INIT([xorg-server], 1.6.5, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
d32 1
a32 1
AM_INIT_AUTOMAKE([dist-bzip2 foreign])
d35 9
a43 1
RELEASE_DATE="2009-10-11"
d62 3
d80 5
a84 1
AC_PATH_PROG(SED,sed)
a91 6
dnl Darwin 9 has dtrace, but it doesn't support compilation into ELF...
if test "x$WDTRACE" = xauto; then
	case $host_os in
		darwin*) WDTRACE="no" ;;
	esac
fi
d109 11
d122 1
d126 1
a126 1
AC_CHECK_HEADERS([fcntl.h stdlib.h string.h unistd.h])
d203 1
d236 1
a236 1
AC_CHECK_HEADERS([linux/agpgart.h sys/agpio.h], AGP=yes)
d318 13
a403 6
  hppa*)
	case $host_os in
	     *openbsd*)	HPPA_VIDEO=yes
	     		;;
	esac
	;;
d418 1
a418 1
KDRIVE_HW=no
a445 1
	KDRIVE_HW=yes
d449 3
d456 3
a459 1
AM_CONDITIONAL(KDRIVE_HW, test "x$KDRIVE_HW" = xyes)
a460 1
XORG_RELEASE_VERSION
d480 3
a482 2
				  [Treat warnings as errors (default: disabled)]),
			        [WERROR=$enableval], [WERROR=no])
d486 6
d525 21
a545 7
AC_ARG_WITH(fontdir,         AS_HELP_STRING([--with-fontdir=FONTDIR], [Path to top level dir where fonts are installed (default: ${libdir}/X11/fonts)]),
                                [ FONTDIR="$withval" ],
                                [ FONTDIR="${libdir}/X11/fonts" ])
DEFAULT_FONT_PATH="${FONTDIR}/misc/,${FONTDIR}/TTF/,${FONTDIR}/OTF,${FONTDIR}/Type1/,${FONTDIR}/100dpi/,${FONTDIR}/75dpi/"
case $host_os in
	darwin*)    DEFAULT_FONT_PATH="${DEFAULT_FONT_PATH},/Library/Fonts,/System/Library/Fonts" ;;
esac
d549 4
d559 20
d591 9
a599 4
AC_ARG_WITH(apple-application-id,AS_HELP_STRING([--with-apple-application-id=VALUE], [CFBundleIdentification for the .app (default: org.x.X11)]),
				[ APPLE_APPLICATION_ID="${withval}" ],
				[ APPLE_APPLICATION_ID="org.x.X11" ])
AC_SUBST([APPLE_APPLICATION_ID])
d608 6
a613 3
AC_ARG_ENABLE(null-root-cursor, AS_HELP_STRING([--enable-null-root-cursor], [Use an empty root cursor (default: use core cursor)]),
                                 [NULL_ROOT_CURSOR=$enableval],
                                 [NULL_ROOT_CURSOR=no])
a615 3
AC_ARG_WITH(mesa-source,     AS_HELP_STRING([--with-mesa-source=MESA_SOURCE], [Path to Mesa source tree]),
                                [ MESA_SOURCE="$withval" ],
                                [ MESA_SOURCE="" ])
d641 1
a641 1
AC_ARG_ENABLE(record,         AS_HELP_STRING([--enable-record], [Build Record extension (default: disabled)]), [RECORD=$enableval], [RECORD=no])
d654 2
a655 2
AC_ARG_ENABLE(xselinux,       AS_HELP_STRING([--disable-xselinux], [Build SELinux extension (default: disabled)]), [XSELINUX=$enableval], [XSELINUX=no])
AC_ARG_ENABLE(xcsecurity,     AS_HELP_STRING([--disable-xcsecurity], [Build Security extension (default: disabled)]), [XCSECURITY=$enableval], [XCSECURITY=no])
d660 1
a660 1
AC_ARG_ENABLE(xf86bigfont,    AS_HELP_STRING([--disable-xf86bigfont], [Build XF86 Big Font extension (default: disabled)]), [XF86BIGFONT=$enableval], [XF86BIGFONT=no])
d662 1
d666 5
d674 1
a674 1
AC_ARG_ENABLE(dmx,    	      AS_HELP_STRING([--enable-dmx], [Build DMX server (default: no)]), [DMX=$enableval], [DMX=no])
d678 1
a678 1
AC_ARG_ENABLE(standalone-xpbproxy, AS_HELP_STRING([--enable-standalone-xpbproxy], [Build a standalone xpbproxy (in addigion to the one integrated into Xquartz as a separate thread) (default: no)]), [STANDALONE_XPBPROXY=$enableval], [STANDALONE_XPBPROXY=no])
a682 1
AC_ARG_ENABLE(xsdl,           AS_HELP_STRING([--enable-xsdl], [Build the kdrive Xsdl server (default: auto)]), [XSDL=$enableval], [XSDL=auto])
d685 4
d700 1
d724 1
a724 1
m4_pattern_forbid(XTRANS_CONNECTION_FLAGS)
d751 2
a752 1
dnl XQuartz DDX Detection... Yes, it's ugly to have it here... but we need to handle this early on
d754 7
d791 1
d801 18
d820 35
a854 2
REQUIRED_MODULES="[randrproto >= 1.2.99.1] [renderproto >= 0.9.3] [fixesproto >= 4.0] [damageproto >= 1.1] xcmiscproto [xextproto >= 7.0.3] [xproto >= 7.0.13] [xtrans >= 1.2.2] bigreqsproto resourceproto fontsproto [inputproto >= 1.5] [kbproto >= 1.0.3]"
REQUIRED_LIBS="xfont xau fontenc [pixman-1 >= 0.13.2]"
a887 1
        REQUIRED_LIBS="$REQUIRED_LIBS hal"
a892 1
	REQUIRED_LIBS="$REQUIRED_LIBS dbus-1"
d896 9
a904 1
CONFIG_LIB='$(top_builddir)/config/libconfig.a'
d967 1
a967 1
	REQUIRED_MODULES="$REQUIRED_MODULES videoproto"
d985 1
a985 1
	REQUIRED_MODULES="$REQUIRED_MODULES [compositeproto >= 0.4]"
d999 1
a999 1
	REQUIRED_MODULES="$REQUIRED_MODULES recordproto"
d1006 1
a1006 1
	REQUIRED_MODULES="$REQUIRED_MODULES [scrnsaverproto >= 1.1]"
d1012 1
a1012 1
	REQUIRED_MODULES="$REQUIRED_MODULES resourceproto"
d1017 1
a1017 1
	PKG_CHECK_MODULES([GL], [glproto >= 1.4.9 gl >= 7.1.0])
d1021 1
a1021 1
	GLX_SYS_LIBS="$GLX_SYS_LIBS $DLOPEN_LIBS"
a1025 1
AC_SUBST([MESA_SOURCE])
d1043 2
a1044 2
	PKG_CHECK_MODULES([DRIPROTO], [xf86driproto])
	PKG_CHECK_MODULES([GL], [glproto >= 1.4.1 dri >= 7.1.0])
a1045 1
	AC_SUBST(GL_CFLAGS)
d1048 1
a1048 1
PKG_CHECK_MODULES([DRI2PROTO], [dri2proto >= 2.1],
d1062 1
a1062 1
	PKG_CHECK_MODULES([LIBDRM], [libdrm >= 2.3.0])
d1093 1
a1093 1
	REQUIRED_MODULES="$REQUIRED_MODULES xineramaproto"
a1105 2
	AC_CHECK_HEADERS([selinux/selinux.h selinux/avc.h], [], AC_MSG_ERROR([SELinux include files not found]))
	AC_CHECK_LIB(selinux, avc_init, [], AC_MSG_ERROR([SELinux library not found])) 
d1108 2
a1109 4
        AC_CHECK_DECL(avc_netlink_acquire_fd,
                      [AC_DEFINE(HAVE_AVC_NETLINK_ACQUIRE_FD, 1, "Have avc_netlink_acquire_fd")],
                      [],
                      [#include <selinux/avc.h>])
a1110 1
	SELINUX_LIB="-lselinux -laudit"
d1136 1
d1146 1
a1146 1
   REQUIRED_MODULES="$REQUIRED_MODULES xcalibrateproto"
d1171 1
d1176 4
d1183 47
a1229 4
AC_DEFINE(XKB, 1, [Build XKB])
AC_DEFINE(XKB_IN_SERVER, 1, [Build XKB server])
AC_DEFINE(XKB_DFLT_DISABLED, 0, [Disable XKB per default])
REQUIRED_MODULES="$REQUIRED_MODULES xkbfile"
d1232 1
a1240 4
if test "x$NULL_ROOT_CURSOR" = xyes; then
        AC_DEFINE(NULL_ROOT_CURSOR, 1, [Use an empty root cursor])
fi

d1279 1
a1279 1
AC_DEFINE_DIR(BASE_FONT_PATH, FONTDIR, [Default base font path])
a1294 1
AC_SUBST([VENDOR_NAME])
d1296 4
a1299 2
AC_SUBST([VENDOR_RELEASE])
AC_SUBST([VENDOR_MAN_VERSION])
d1308 44
d1357 1
a1357 1
if test "x$WDTRACE" != "xno" ; then
d1359 1
a1359 1
  OS_LIB='$(top_builddir)/os/os.O'
d1364 6
d1379 88
a1466 24
# OpenSSL used for SHA1 hashing in render/glyph.c, but we don't need all of
# the OpenSSL libraries, just libcrypto
# Some systems have matching functionality in libc 
# or in the smaller/simpler libmd
# Builders who want to force a choice can set SHA1_LIB and SHA1_CFLAGS

if test "x$SHA1_LIB" = "x" ; then
  AC_CHECK_FUNCS([SHA1Init], [sha1=found])
  if test "$sha1" != "found"; then 
     AC_CHECK_LIB([md], [SHA1Init], [sha1=found; SHA1_LIB="-lmd"
            AC_DEFINE([HAVE_SHA1_IN_LIBMD], [1],
            [Use libmd SHA1 functions instead of OpenSSL libcrypto])])
  fi
fi

if test "$sha1" != "found" ; then
  PKG_CHECK_EXISTS([OPENSSL], [openssl], [HAVE_OPENSSL_PKC=yes],
                    [HAVE_OPENSSL_PKC=no])
  if test "x$HAVE_OPENSSL_PKC" = xyes; then
    REQUIRED_LIBS="$REQUIRED_LIBS openssl"
  else
    AC_CHECK_LIB([crypto], [SHA1_Init], [SHA1_LIB="-lcrypto"],
                 [AC_MSG_ERROR([OpenSSL must be installed in order to build the X server.])])
  fi
d1468 3
d1490 1
a1490 1
XSERVER_CFLAGS="${XSERVERCFLAGS_CFLAGS} ${SHA1_CFLAGS}"
d1492 1
a1492 1
XSERVER_SYS_LIBS="${XSERVERLIBS_LIBS} ${SYS_LIBS} ${LIBS} ${SHA1_LIB}"
d1500 3
a1502 15
# Some platforms require extra flags to do this.   gcc should set these flags
# when -rdynamic is passed to it, other compilers/linkers may need to be added
# here.
if test "x$GCC" = "xyes"; then
       GCC_WARNINGS1="-Wall -Wpointer-arith -Wstrict-prototypes"
       GCC_WARNINGS2="-Wmissing-prototypes -Wmissing-declarations"
       GCC_WARNINGS3="-Wnested-externs -fno-strict-aliasing"
       GCC_WARNINGS="$GCC_WARNINGS1 $GCC_WARNINGS2 $GCC_WARNINGS3"
       if test "x$WERROR" = "xyes"; then
               GCC_WARNINGS="${GCC_WARNINGS} -Werror"
       fi
       XSERVER_CFLAGS="$GCC_WARNINGS $XSERVER_CFLAGS"

       LD_EXPORT_SYMBOLS_FLAG="-rdynamic"
fi
d1550 1
a1550 1
PKG_CHECK_MODULES(XNESTMODULES, [xfont xext x11 xau $XDMCP_MODULES], [have_xnest=yes], [have_xnest=no])
d1559 4
a1562 1
	XNEST_LIBS="$FB_LIB $FIXES_LIB $MI_LIB $XEXT_LIB $DBE_LIB $RECORD_LIB $GLX_LIBS $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $DIX_LIB $OS_LIB $CONFIG_LIB"
d1592 42
a1633 1
	PKG_CHECK_MODULES([PCIACCESS], [pciaccess >= 0.8.0])
d1640 2
d1644 1
a1644 1
	XORG_SYS_LIBS="$XORG_SYS_LIBS $PCIACCESS_LIBS $DLOPEN_LIBS $GLX_SYS_LIBS $SELINUX_LIB"
d1693 1
d1698 2
a1699 3
		# This really should be tests for specific features, but the #ifdef's
		# were done as a simple version check in XFree86 4.x and haven't been 
		# fixed yet
d1701 1
a1701 1
	        OS_MINOR=`echo ${host_os}|sed -e 's/^.*solaris2\.//' -e s'/\..*$//'`
d1705 1
a1705 1
			AC_MSG_RESULT(Solaris `echo ${host_os}|sed -e 's/^.*solaris//`)
d1707 2
a1708 2
		if test "${OS_MINOR}" -ge 8 ; then
			AC_DEFINE(__SOL8__,1,[Solaris 8 or later])
a1725 5
			if test "${OS_MINOR}" -lt 8 ; then
				solaris_usl_console="yes"
			else
				XORG_CFLAGS="$XORG_CFLAGS -DXF86PM"
			fi
d1739 3
d1746 3
a1760 1
		xorg_bus_sparcpci="yes"
d1770 5
d1777 6
d1787 1
a1787 1
		PKG_CHECK_MODULES(DGA, xf86dgaproto, [DGA=yes], [DGA=no])
d1790 2
a1791 2
		XORG_MODULES="$XORG_MODULES xf86dgaproto"
		PKG_CHECK_MODULES(DGA, xf86dgaproto)
d1797 1
a1797 1
		PKG_CHECK_MODULES(XF86VIDMODE, xf86vidmodeproto, [XF86VIDMODE=yes], [XF86VIDMODE=no])
d1800 2
a1801 2
		XORG_MODULES="$XORG_MODULES xf86vidmodeproto"
		PKG_CHECK_MODULES(XF86VIDMODE, xf86vidmodeproto)
d1828 2
a1839 1
	AC_DEFINE(WITH_VGAHW, 1, [Building vgahw module])
d1842 1
d1848 3
d1857 1
d1860 1
a1870 1
	abi_font=`extract_abi FONT`
a1874 1
	AC_SUBST([abi_font])
a1882 1
AM_CONDITIONAL([SOLARIS_USL_CONSOLE], [test "x$solaris_usl_console" = xyes])
d1884 1
a1896 2
	XWIN_LIBS="$FB_LIB $XEXT_LIB $CONFIG_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $DAMAGE_LIB $LAYER_LIB $XPSTUBS_LIB $SHADOW_LIB"
	AC_SUBST([XWIN_LIBS])
d1901 17
a1920 1
			PKG_CHECK_MODULES([XWINMODULES],[x11 xdmcp xau xfont])
a1921 2
			AC_DEFINE(ROOTLESS,1,[Build Rootless code])
			CFLAGS="$CFLAGS -DFD_SETSIZE=256"
a1924 1
			PKG_CHECK_MODULES([XWINMODULES],[x11 xdmcp xau xfont])
d1930 3
a1932 1
	XWIN_SYS_LIBS="$XWIN_SYS_LIBS $(XWINMODULES_LIBS)"
a1943 8
	if test "x$XF86VIDMODE" = xyes; then
		AC_MSG_NOTICE([Disabling XF86VidMode extension])
		XF86VIDMODE=no
	fi
	if test "x$COMPOSITE" = xyes; then
		AC_MSG_NOTICE([Disabling Composite extension])
		COMPOSITE=no
	fi
d1947 1
a1947 1
AM_CONDITIONAL(XWIN_MULTIWINDOWEXTWM, [test "x$XWIN" = xyes && false])
d1960 1
a1960 1
	DARWIN_LIBS="$MI_LIB $OS_LIB $DIX_LIB $FB_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $RECORD_LIB $RANDR_LIB $RENDER_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB"
d1965 1
a1965 1
	CFLAGS="${CFLAGS} -DROOTLESS_WORKAROUND -DNO_ALLOCA"
d1967 5
a1971 1
	PKG_CHECK_MODULES(XPBPROXY, [applewmproto >= 1.1.1] [applewm >= 1.0.0] xfixes fixesproto x11)
a1988 2
AM_CONDITIONAL(HAVE_XPLUGIN, [test "x$ac_cv_lib_Xplugin_xp_init" = xyes])
AM_CONDITIONAL(HAVE_AGL_FRAMEWORK, [test "x$xorg_cv_AGL_framework" = xyes])
d1990 1
d1994 9
a2002 2

PKG_CHECK_MODULES([DMXMODULES], [xmuu xext x11 xrender xfixes xfont xi dmxproto xau $XDMCP_MODULES], [have_dmx=yes], [have_dmx=no])
d2021 1
a2021 1
	XDMX_LIBS="$XEXT_LIB $FB_LIB $CONFIG_LIB $RENDER_LIB $RECORD_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $MIEXT_SHADOW_LIB $MIEXT_DAMAGE_LIB"
a2032 4
	if test "x$GLX" = xyes; then
		PKG_CHECK_MODULES([GL], [glproto])
	fi
	PKG_CHECK_MODULES([XDMXCONFIG_DEP], [xaw7 xmu xt xpm x11])
d2035 1
a2035 1
	PKG_CHECK_MODULES([DMXEXAMPLES_DEP], [dmx xext x11])
d2037 1
a2037 1
	PKG_CHECK_MODULES([DMXXMUEXAMPLES_DEP], [dmx xmu xext x11])
d2039 1
a2039 1
	PKG_CHECK_MODULES([DMXXIEXAMPLES_DEP], [dmx xi xext x11])
d2041 1
a2041 1
	PKG_CHECK_MODULES([XTSTEXAMPLES_DEP], [xtst xext x11])
d2043 1
a2043 1
	PKG_CHECK_MODULES([XRESEXAMPLES_DEP], [xres xext x11])
d2045 1
a2045 1
	PKG_CHECK_MODULES([X11EXAMPLES_DEP], [xext x11])
d2047 1
a2055 3
XSDL_LIBS=
XSDL_INCS=
XSDL_DIRS=
d2058 1
a2062 10
    AC_CHECK_HEADERS([sys/vm86.h sys/io.h])
    if test "$ac_cv_header_sys_vm86_h" = yes && test "x$KDRIVEVESA" = xauto; then
        KDRIVEVESA=yes
    fi

    if test "x$KDRIVEVESA" = xyes; then
        KDRIVEFBDEVLIB=yes
        AC_DEFINE(KDRIVEVESA, 1, [Build VESA-based kdrive servers])
    fi

d2072 9
a2080 5
    
    # tslib...
    AC_CHECK_LIB(ts, ts_open, [HAVE_TSLIB="yes"])
    if test "x$TSLIB" = xauto && test "x$HAVE_TSLIB" = xyes; then
        TSLIB=yes
d2085 3
a2087 1
            AC_MSG_ERROR([tslib must be installed to build the tslib input driver.])
a2088 2
        TSLIB_LIBS="-lts"
        AC_DEFINE(TSLIB, 1, [Have tslib support])
d2091 5
a2095 3
    AC_CHECK_HEADERS([SDL/SDL.h])
    if test x"$ac_cv_header_SDL_SDL_h" = xyes && test "x$XSDL" = xauto; then
       XSDL=yes
d2097 2
a2098 6

    if test x"$XSDL" = xyes; then
       # PKG_CHECK_MODULES(XSDL_EXTRA, Xfont xau $XDMCP_MODULES)
       AC_DEFINE(XSDLSERVER,1,[Build Xsdl server])
       XSDL_LIBS="`sdl-config --libs`"
       XSDL_INCS="`sdl-config --cflags` $XSERVER_CFLAGS"
d2101 1
a2101 1
    XEPHYR_REQUIRED_LIBS="x11 xext xfont xau xdmcp"
d2106 1
a2106 1
        XEPHYR_REQUIRED_LIBS="$XEPHYR_REQUIRED_LIBS gl libdrm"
a2117 8
    if test "x$TSLIB" = xyes; then
        PKG_CHECK_MODULES([TSLIB], [tslib-1.0], [HAVE_TSLIB="yes"], [HAVE_TSLIB="no"])
        if test "x$HAVE_TSLIB" = xno; then
            AC_MSG_ERROR([tslib must be installed to build the tslib driver. See http://tslib.berlios.de/])
        fi
        AC_DEFINE(TSLIB, 1, [Have tslib support])
    fi

d2127 1
a2127 1
    KDRIVE_LIB='$(top_builddir)/hw/kdrive/src/libkdrive.a'
d2130 1
a2130 1
	    KDRIVE_OS_LIB='$(top_builddir)/hw/kdrive/linux/liblinux.a'
d2132 9
d2143 1
a2143 1
	    KDRIVE_OS_LIB='$(top_builddir)/hw/kdrive/openbsd/libopenbsd.a'
d2145 20
d2167 2
a2168 2
    KDRIVE_STUB_LIB='$(top_builddir)/hw/kdrive/src/libkdrivestubs.a'
    KDRIVE_LOCAL_LIBS="$DIX_LIB $KDRIVE_LIB $KDRIVE_STUB_LIB $CONFIG_LIB"
d2171 1
a2171 1
    KDRIVE_LIBS="$TSLIB_LIBS $KDRIVE_LOCAL_LIBS $XSERVER_SYS_LIBS $GLX_SYS_LIBS"
a2174 2
    AC_SUBST([XSDL_LIBS])
    AC_SUBST([XSDL_INCS])
d2184 3
a2187 1
AM_CONDITIONAL(KDRIVEVESA, [test "x$KDRIVEVESA" = xyes])
a2189 1
AM_CONDITIONAL(XSDLSERVER, [test x"$XSDL" = xyes])
a2193 22
dnl these only go in xkb-config.h (which is shared by the Xorg and Xnest servers)
AC_DEFINE(__XKBDEFRULES__, "xorg", [Default XKB rules])
AC_DEFINE_DIR(XKB_BASE_DIRECTORY, XKBPATH, [Path to XKB data])
AC_DEFINE_DIR(XKB_BIN_DIRECTORY, bindir, [Path to XKB bin dir])

# Make sure XKM_OUTPUT_DIR is an absolute path
XKBOUTPUT_FIRSTCHAR=`echo $XKBOUTPUT | cut -b 1`

if [[ x$XKBOUTPUT_FIRSTCHAR != x/ ]] ; then
   XKBOUTPUT="$XKB_BASE_DIRECTORY/$XKBOUTPUT"
fi

# XKM_OUTPUT_DIR (used in code) must end in / or file names get hosed
# XKB_COMPILED_DIR (used in Makefiles) must not or install-sh gets confused

XKBOUTPUT=`echo $XKBOUTPUT/ | sed 's|/*$|/|'`
XKB_COMPILED_DIR=`echo $XKBOUTPUT | sed 's|/*$||'`

AC_DEFINE_DIR(XKM_OUTPUT_DIR, XKBOUTPUT, [Path to XKB output dir])

AC_SUBST(XKB_COMPILED_DIR)

d2210 1
a2210 1
BUILD_DATE="$(date +'%Y%m%d')"
d2212 1
a2212 1
BUILD_TIME="$(date +'1%H%M%S')"
a2214 14
# XXX proto shuffle
_saved_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="-I$prefix/include"
AC_CHECK_HEADERS(X11/extensions/dpmsconst.h)
AC_CHECK_HEADERS([X11/extensions/shmproto.h \
		 X11/extensions/dbeproto.h \
		 X11/extensions/shapeproto.h \
		 X11/extensions/syncproto.h \
		 X11/extensions/xtestproto.h],,,[
#include <X11/X.h>
#include <X11/Xmd.h>])
CPPFLAGS="$_saved_CPPFLAGS"


a2222 3
# Man page sections - used in config utils & generating man pages
XORG_MANPAGE_SECTIONS

a2261 1
hw/xfree86/dummylib/Makefile
a2309 1
hw/kdrive/sdl/Makefile
d2312 2
@


1.23
log
@Build hppa support files on OpenBSD (useless for now).
@
text
@d1849 14
@


1.22
log
@Update to server 1.6.5.
@
text
@d368 6
@


1.21
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d29 1
a29 1
AC_INIT([xorg-server], 1.6.3.901, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
d34 1
a34 1
RELEASE_DATE="2009-8-25"
@


1.20
log
@Update to xserver 1.5.3 + latests commits on server-1.5-branch.
tested by stsp@@, david@@, form@@, ckuethe@@, oga@@. thanks.
@
text
@d29 1
a29 3
AC_INIT([xorg-server], 1.5.3, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="5 November 2008"
REMEMBER_REMEMBER="The Fifth of November"
d34 2
a44 2
dnl xgl-config.h covers the Xgl DDX.
AC_CONFIG_HEADERS(include/xgl-config.h)
d61 1
d68 1
d133 1
d144 1
a181 11
case $host_os in
    linux*)
	AC_DEFINE(HAVE_URANDOM, 1, [Has /dev/urandom]) ;;
    solaris*)
	# Solaris 8 with patches, or Solaris 9 or later have /dev/urandom
	if test -r /dev/urandom ; then
	   AC_DEFINE(HAVE_URANDOM, 1, [Has /dev/urandom])
	fi ;;
    *) ;;
esac

d186 1
a186 1
		getisax getzoneid shmctl64 strcasestr])
a223 3
dnl NetBSD/OpenBSD wscons header
AC_CHECK_HEADERS([dev/wscons/wsconsio.h])

a318 1
		*linux*)	DEFAULT_INT10=vm86 ;;
a343 1
	xorg_loader_sparcmuldiv="yes"
a381 1
DRI2=no
a393 1
	DRI2=yes
a400 1
	DRI2=yes
a409 1
	DRI2=yes
d415 3
d425 1
a425 1
PVS=`echo $PACKAGE_VERSION | cut -d . -f 4`
d503 8
a510 5
AC_ARG_WITH(launchd,          AS_HELP_STRING([--with-launchd], [Build with support for Apple's launchd (default: auto)]), [LAUNCHD=$withval], [LAUNCHD=auto])
AC_ARG_WITH(launchagents-dir,AS_HELP_STRING([--with-launchagents-dir=PATH], [Path to launchd's LaunchAgents directory (default: /Library/LaunchAgents)]),
				[ launchagentsdir="${withval}" ],
				[ launchagentsdir="/Library/LaunchAgents" ])
AC_SUBST([launchagentsdir])
a518 3
AC_ARG_ENABLE(builtin-fonts,  AS_HELP_STRING([--enable-builtin-fonts], [Use only built-in fonts (default: use external)]),
                                [BUILTIN_FONTS=$enableval],
                                [BUILTIN_FONTS=no])
d552 1
a552 2
AC_ARG_ENABLE(xtrap,          AS_HELP_STRING([--enable-xtrap], [Build XTrap extension (default: no)]), [XTRAP=$enableval], [XTRAP=no])
AC_ARG_ENABLE(record,         AS_HELP_STRING([--disable-record], [Build Record extension (default: disabled)]), [RECORD=$enableval], [RECORD=no])
d561 1
a561 1
AC_ARG_ENABLE(dri2,           AS_HELP_STRING([--enable-dri2], [Build DRI2 extension (default: no)]), [DRI2=$enableval], [DRI2=no])
a563 1
AC_ARG_ENABLE(xf86misc,       AS_HELP_STRING([--disable-xf86misc], [Build XF86Misc extension (default: auto)]), [XF86MISC=$enableval], [XF86MISC=auto])
a566 1
AC_ARG_ENABLE(appgroup,       AS_HELP_STRING([--disable-appgroup], [Build XC-APPGROUP extension (default: disabled)]), [APPGROUP=$enableval], [APPGROUP=$XCSECURITY])
a568 3
AC_ARG_ENABLE(xevie,          AS_HELP_STRING([--disable-xevie], [Build XEvIE extension (default: enabled)]), [XEVIE=$enableval], [XEVIE=yes])
AC_ARG_ENABLE(cup,            AS_HELP_STRING([--disable-cup], [Build TOG-CUP extension (default: enabled)]), [CUP=$enableval], [CUP=yes])
AC_ARG_ENABLE(evi,            AS_HELP_STRING([--disable-evi], [Build Extended-Visual-Information extension (default: enabled)]), [EVI=$enableval], [EVI=yes])
a569 1
AC_ARG_ENABLE(fontcache,      AS_HELP_STRING([--enable-fontcache], [Build FontCache extension (default: disabled)]), [FONTCACHE=$enableval], [FONTCACHE=no])
d571 1
a571 1
AC_ARG_ENABLE(xf86bigfont,    AS_HELP_STRING([--disable-xf86bigfont], [Build XF86 Big Font extension (default: enabled)]), [XF86BIGFONT=$enableval], [XF86BIGFONT=auto])
d583 1
a583 3
AC_ARG_ENABLE(x11app,         AS_HELP_STRING([--enable-x11app], [Build Apple's X11.app for Xquartz (default: auto)]), [X11APP=$enableval], [X11APP=auto])
AC_ARG_WITH(x11app-archs,     AS_HELP_STRING([--with-x11app-archs=ARCHS], [Architectures to build X11.app for, space delimeted (default: "ppc i386")]), [X11APP_ARCHS=$enableval], [X11APP_ARCHS="ppc i386"])
AC_SUBST([X11APP_ARCHS])
a584 8
AC_ARG_ENABLE(xprint,         AS_HELP_STRING([--enable-xprint], [Build Xprint extension and server (default: no)]), [XPRINT=$enableval], [XPRINT=no])
AC_ARG_ENABLE(xgl,            AS_HELP_STRING([--enable-xgl], [Build Xgl server (default: no)]), [XGL=$enableval], [XGL=no])
AC_ARG_ENABLE(xglx,           AS_HELP_STRING([--enable-xglx], [Build Xglx xgl module (default: no)]), [XGLX=$enableval], [XGLX=no])
AC_ARG_ENABLE(xegl,           AS_HELP_STRING([--enable-xegl], [Build Xegl xgl module (default: no)]), [XEGL=$enableval], [XEGL=no])
dnl legacy fb support
AC_ARG_ENABLE(mfb,            AS_HELP_STRING([--enable-mfb], [Build legacy mono framebuffer support (default: enabled)]), [MFB=$enableval], [MFB=$XORG])
AC_ARG_ENABLE(cfb,            AS_HELP_STRING([--enable-cfb], [Build legacy color framebuffer support (default: enabled)]), [CFB=$enableval], [CFB=$XORG])
AC_ARG_ENABLE(afb,            AS_HELP_STRING([--enable-afb], [Build legacy advanced framebuffer support (default: enabled)]), [AFB=$enableval], [AFB=$XORG])
a590 4
AC_ARG_ENABLE(kdrive-vesa,    AS_HELP_STRING([--enable-kdrive-vesa], [Build the kdrive VESA-based servers (default: auto)]), [KDRIVEVESA=$enableval], [KDRIVEVESA=auto])
dnl xprint
AC_ARG_ENABLE(freetype,       AS_HELP_STRING([ --enable-freetype], [Build Xprint FreeType backend (default: no)]), [XP_USE_FREETYPE=$enableval],[XP_USE_FREETYPE=no])
AC_ARG_WITH(freetype-config,  AS_HELP_STRING([ --with-freetype-config=PROG], [Use FreeType configuration program PROG (default: auto)]), freetype_config=$withval, freetype_config=auto)
d652 34
d694 2
a695 9
# Require updated renderproto for ABI sanity if we're 64-bit.
if test "$ac_cv_sizeof_unsigned_long" = 8; then
	RENDERPROTO="[renderproto >= 0.9.3]"
else
	RENDERPROTO="renderproto"
fi

REQUIRED_MODULES="[randrproto >= 1.2] $RENDERPROTO [fixesproto >= 4.0] [damageproto >= 1.1] xcmiscproto xextproto [xproto >= 7.0.9] xtrans [scrnsaverproto >= 1.1] bigreqsproto resourceproto fontsproto [inputproto >= 1.4.4] [kbproto >= 1.0.3]"
REQUIRED_LIBS="xfont xau fontenc [pixman-1 >= 0.9.5]"
d715 1
a715 1
	NEED_DBUS="yes"
d730 1
a730 1
	NEED_DBUS="yes"
d734 1
a734 1
if test "x$NEED_DBUS" = xyes; then
d736 1
d738 1
a830 7
AM_CONDITIONAL(XTRAP, [test "x$XTRAP" = xyes])
if test "x$XTRAP" = xyes; then
	AC_DEFINE(XTRAP, 1, [Support XTrap extension])
	REQUIRED_MODULES="$REQUIRED_MODULES trapproto"
	XTRAP_LIB='$(top_builddir)/XTrap/libxtrap.la'
fi

d841 1
d880 19
a899 5
	PKG_CHECK_MODULES([GL], [glproto >= 1.4.1 gl >= 7.1.0])
	PKG_CHECK_EXISTS(libdrm >= 2.2.0,
			 [AC_DEFINE([HAVE_LIBDRM_2_2], 1,
			 [Has version 2.2 (or newer) of the drm library])])
	AC_SUBST(DRIPROTO_CFLAGS)
a901 1
	AC_SUBST(GL_CFLAGS)
a903 1
AM_CONDITIONAL(DRI2, test "x$DRI2" = xyes)
d905 17
a921 4
	# FIXME: Bump the versions once we have releases of these.
	AC_DEFINE(DRI2, 1, [Build DRI2 extension])
	PKG_CHECK_MODULES([DRI2PROTO], [dri2proto >= 1.1])
	PKG_CHECK_MODULES([LIBDRM], [libdrm >= 2.3.2])
d923 2
d947 4
a962 26
AM_CONDITIONAL(XEVIE, [test "x$XEVIE" = xyes])
if test "x$XEVIE" = xyes; then
	AC_DEFINE(XEVIE, 1, [Build XEvIE extension])
	REQUIRED_MODULES="$REQUIRED_MODULES evieproto"
fi

AM_CONDITIONAL(APPGROUP, [test "x$APPGROUP" = xyes])
if test "x$APPGROUP" = xyes; then
	if test "x$XACE" != xyes || test "x$XCSECURITY" != xyes; then
		AC_MSG_ERROR([cannot build APPGROUP extension without X-ACE and XC-SECURITY])
	fi
	AC_DEFINE(XAPPGROUP, 1, [Build APPGROUP extension])
fi

AM_CONDITIONAL(CUP, [test "x$CUP" = xyes])
if test "x$CUP" = xyes; then
	AC_DEFINE(TOGCUP, 1, [Build TOG-CUP extension])
	# Requires xextproto which is always required
fi

AM_CONDITIONAL(EVI, [test "x$EVI" = xyes])
if test "x$EVI" = xyes; then
	AC_DEFINE(EVI, 1, [Build Extended-Visual-Information extension])
	# Requires xextproto which is always required
fi

a968 6
AM_CONDITIONAL(FONTCACHE, [test "x$FONTCACHE" = xyes])
if test "x$FONTCACHE" = xyes; then
	AC_DEFINE(FONTCACHE, 1, [Build FontCache extension])
	REQUIRED_MODULES="$REQUIRED_MODULES fontcacheproto"
fi

a984 15
if test "x$XPRINT" = xauto; then
	PKG_CHECK_MODULES([XPRINTPROTO], [printproto], [XPRINT=yes], [XPRINT=no])
fi
AM_CONDITIONAL(XPRINT, [test "x$XPRINT" = xyes])
if test "x$XPRINT" = xyes; then
	AC_DEFINE(XPRINT, 1, [Build Print extension])
	REQUIRED_MODULES="$REQUIRED_MODULES printproto"
fi

if test "x$BUILTIN_FONTS" = xyes; then
       AC_DEFINE(BUILTIN_FONTS, 1, [Use only built-in fonts])
       AC_DEFINE(NOFONTSERVERACCESS, 1, [Avoid using a font server])
       FONTPATH="built-ins"
fi

d1011 1
a1011 1
AC_DEFINE(XINPUT, 1, [Support X Input extension])
a1095 3
AC_DEFINE(DDXOSINIT, 1, [Use OsVendorInit])
AC_DEFINE(SERVER_LOCK, 1, [Use a lock to prevent multiple servers on a display])
AC_DEFINE(SMART_SCHEDULE, 1, [Include time-based scheduler])
a1099 2
else
       AC_DEFINE(NDEBUG, 1, [Disable some debugging code])
a1102 1
AC_DEFINE(MITMISC, 1, [Support MIT Misc extension])
a1121 1
XPSTUBS_LIB='$(top_builddir)/dix/libxpstubs.la'
d1124 26
a1152 7
# OpenSSL used for SHA1 hashing in render/glyph.c, but we don't need all of
# the OpenSSL libraries, just libcrypto
PKG_CHECK_EXISTS([openssl],
 [PKG_CHECK_MODULES([OPENSSL], [openssl],
   [OPENSSL_LIB_FLAGS=`$PKG_CONFIG --libs-only-L --libs-only-other openssl`])])
LIBCRYPTO="$OPENSSL_LIB_FLAGS -lcrypto"

d1156 1
a1156 1
# listed there, or some versions of autotols will break (especially if a -L
d1168 1
a1168 1
XSERVER_CFLAGS="${XSERVERCFLAGS_CFLAGS} ${OPENSSL_CFLAGS}"
d1170 1
a1170 1
XSERVER_SYS_LIBS="${XSERVERLIBS_LIBS} ${SYS_LIBS} ${LIBS} ${LIBCRYPTO}"
a1218 13
AC_DEFINE_UNQUOTED(_X_BYTE_ORDER,[$ENDIAN],[Endian order])
AH_VERBATIM([X_BYTE_ORDER],[
/* Deal with multiple architecture compiles on Mac OS X */
#ifndef __APPLE_CC__
#define X_BYTE_ORDER _X_BYTE_ORDER
#else
#ifdef __BIG_ENDIAN__
#define X_BYTE_ORDER X_BIG_ENDIAN
#else
#define X_BYTE_ORDER X_LITTLE_ENDIAN
#endif
#endif
])
d1231 2
a1232 2
	XVFB_LIBS="$FB_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $XPSTUBS_LIB"
	XVFB_SYS_LIBS="$XVFBMODULES_LIBS"
d1240 1
a1241 1
PKG_CHECK_MODULES(XNESTMODULES, [xfont xext x11 xau $XDMCP_MODULES], [have_xnest=yes], [have_xnest=no])
d1249 2
a1250 2
	XNEST_LIBS="$FB_LIB $FIXES_LIB $MI_LIB $XEXT_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $XPSTUBS_LIB $DIX_LIB $OS_LIB $CONFIG_LIB"
	XNEST_SYS_LIBS="$XNESTMODULES_LIBS"
a1267 56
dnl Xgl DDX

AC_MSG_CHECKING([whether to build Xgl DDX])
if test "x$XGL" != xno; then
  PKG_CHECK_MODULES([XGLMODULES], [glitz-glx >= 0.4.3], [XGL=yes], [XGL=no])
  AC_SUBST(XGLMODULES_CFLAGS)
fi
AC_MSG_RESULT([$XGL])
AM_CONDITIONAL(XGL, [test "x$XGL" = xyes])

if test "x$XGL" = xyes; then
	XGL_LIBS="$FB_LIB $COMPOSITE_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $MIEXT_LAYER_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB"
	XGL_SYS_LIBS="$XGLMODULES_LIBS $GLX_SYS_LIBS $DLOPEN_LIBS"
	AC_SUBST([XGL_LIBS])
	AC_SUBST([XGL_SYS_LIBS])
	AC_DEFINE(XGL_MODULAR, 1, [Use loadable XGL modules])

	xglmoduledir="$moduledir/xgl"
	AC_SUBST([xglmoduledir])
	AC_DEFINE_DIR(XGL_MODULE_PATH, xglmoduledir, [Default XGL module search path])
fi

dnl Xegl DDX

AC_MSG_CHECKING([whether to build Xegl DDX])
if test "x$XEGL" != xno; then
  PKG_CHECK_MODULES([XGLMODULES], [glitz-glx >= 0.4.3], [XEGL=yes], [XEGL=no])
  AC_SUBST(XEGLMODULES_CFLAGS)
fi
AC_MSG_RESULT([$XEGL])
AM_CONDITIONAL(XEGL, [test "x$XEGL" = xyes])

if test "x$XEGL" = xyes; then
	XEGL_LIBS="$FB_LIB $COMPOSITE_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $MIEXT_LAYER_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB"
	XEGL_SYS_LIBS = "$XEGL_SYS_LIBS $XEGLMODULES_LIBS $GLX_SYS_LIBS"
	AC_SUBST([XEGL_LIBS])
	AC_SUBST([XEGL_SYS_LIBS])
fi

dnl Xglx DDX

AC_MSG_CHECKING([whether to build Xglx DDX])
if test "x$XGLX" != xno; then
  PKG_CHECK_MODULES([XGLXMODULES], [glitz-glx >= 0.4.3 xrender], [XGLX=yes], [XGLX=no])
  AC_SUBST(XGLXMODULES_CFLAGS)
fi
AC_MSG_RESULT([$XGLX])
AM_CONDITIONAL(XGLX, [test "x$XGLX" = xyes])

if test "x$XGLX" = xyes; then
	XGLX_LIBS="$FB_LIB $COMPOSITE_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $MIEXT_LAYER_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB"
	XGLX_SYS_LIBS="$XGLX_SYS_LIBS $XGLXMODULES_LIBS $GLX_SYS_LIBS"
	AC_SUBST([XGLX_LIBS])
	AC_SUBST([XGLX_SYS_LIBS])
fi

a1269 3
xorg_bus_ix86pci=no
xorg_bus_ppcpci=no
xorg_bus_sparcpci=no
d1272 1
a1272 1
if test "x$XORG" = xyes -o "x$XGL" = xyes; then
d1277 1
a1277 1
	XORG_LIBS="$COMPOSITE_LIB $FIXES_LIB $XEXTXORG_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XPSTUBS_LIB $SELINUX_LIB"
d1288 1
a1288 1
	XORG_SYS_LIBS="$XORG_SYS_LIBS $PCIACCESS_LIBS $DLOPEN_LIBS $GLX_SYS_LIBS"
d1337 4
a1402 9
	  powerpc*)
		case $host_os in
		  linux*|freebsd*|netbsd*|openbsd*|kfreebsd*-gnu)
			;;
		  *)
			xorg_bus_ppcpci="yes"
			;;
		esac
		;;
a1413 9
	  i*86|x86_64*|amd64*)
		case $host_os in
		  *bsd*|linux*)
			;;
		  *)
			xorg_bus_ix86pci="yes"
			;;
		esac
		;;
a1428 9
	if test "x$XF86MISC" = xauto; then
		PKG_CHECK_MODULES(XF86MISC, xf86miscproto, [XF86MISC=yes], [XF86MISC=no])
	fi
	if test "x$XF86MISC" = xyes; then
		XORG_MODULES="$XORG_MODULES xf86miscproto"
		PKG_CHECK_MODULES(XF86MISC, xf86miscproto)
		AC_DEFINE(XF86MISC, 1, [Support XFree86 miscellaneous extensions])
	fi

a1506 3
AM_CONDITIONAL([XORG_BUS_IX86PCI], [test "x$xorg_bus_ix86pci" = xyes])
AM_CONDITIONAL([XORG_BUS_PPCPCI], [test "x$xorg_bus_ppcpci" = xyes])
AM_CONDITIONAL([XORG_BUS_SPARCPCI], [test "x$xorg_bus_sparcpci" = xyes])
a1507 1
AM_CONDITIONAL([XORG_LOADER_SPARC], [test "x$xorg_loader_sparcmuldiv" = xyes])
a1513 1
AM_CONDITIONAL([XF86MISC], [test "x$XF86MISC" = xyes])
a1515 69
dnl legacy fb support
test "x$MFB" = xauto && MFB="$XORG"
test "x$CFB" = xauto && CFB="$XORG"
test "x$AFB" = xauto && AFB="$XORG"
AM_CONDITIONAL(MFB, [test "x$MFB" = xyes])
AM_CONDITIONAL(CFB, [test "x$CFB" = xyes])
AM_CONDITIONAL(AFB, [test "x$AFB" = xyes])
if test "x$MFB" = xyes -o "x$CFB" = xyes -o "x$AFB" = xyes; then
	if test "x$XORG" != xyes; then
		AC_MSG_ERROR([legacy fb support requires the Xorg server])
	fi
fi

dnl Xprint DDX

AC_MSG_CHECKING([whether to build Xprint DDX])
AC_MSG_RESULT([$XPRINT])

if test "x$XPRINT" = xyes; then
	PKG_CHECK_MODULES([XPRINTMODULES], [printproto x11 xfont $XDMCP_MODULES xau])
	XPRINT_CFLAGS="$XPRINTMODULES_CFLAGS -DXPRINT"
	XPRINT_LIBS="$XEXT_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $RENDER_LIB $COMPOSITE_LIB $RANDR_LIB $XI_LIB $FIXES_LIB $DAMAGE_LIB $XI_LIB $GLX_LIBS $MIEXT_DAMAGE_LIB $XKB_LIB $XKB_STUB_LIB"
	XPRINT_SYS_LIBS="$XPRINTMODULES_LIBS"

	xpconfigdir=$datadir/X11/xserver
	AC_SUBST([xpconfigdir])

	AC_PATH_PROG(MKFONTSCALE, mkfontscale)
	AC_PATH_PROG(MKFONTDIR, mkfontdir)
	
        # freetype support code borrowed from lib/XFont
        if test x$XP_USE_FREETYPE = xyes; then
            AC_DEFINE(XP_USE_FREETYPE,1,[Support FreeType rasterizer in Xprint for nearly all font file formats])

            if test "$freetype_config" = "auto" ; then
                PKG_CHECK_MODULES(FREETYPE, freetype2,
                        freetype_config=no, freetype_config=yes)
            fi

            if test "$freetype_config" = "yes"; then
                AC_PATH_PROG(ft_config,freetype-config,no)
                if test "$ft_config" = "no"; then
                        AC_MSG_ERROR([You must have freetype installed; see http://www.freetype.org/])
                fi
            else
                ft_config="$freetype_config"
            fi

            if test "$freetype_config" != "no"; then
                FREETYPE_CFLAGS="`$ft_config --cflags`"
                FREETYPE_LIBS="`$ft_config --libs`"
            fi
            FREETYPE_REQUIRES="freetype2"
        else
            FREETYPE_CFLAGS=""
            FREETYPE_LIBS=""
            FREETYPE_REQUIRES=""
        fi
	XPRINT_CFLAGS="$XPRINT_CFLAGS $FREETYPE_CFLAGS"
	XPRINT_SYS_LIBS="$XPRINT_SYS_LIBS $FREETYPE_LIBS"
	# end freetype support

	AC_SUBST([XPRINT_CFLAGS])
	AC_SUBST([XPRINT_LIBS])
	AC_SUBST([XPRINT_SYS_LIBS])
fi
AM_CONDITIONAL(XP_USE_FREETYPE, [test "x$XPRINT" = xyes && test "x$XP_USE_FREETYPE" = xyes])


a1556 3
	AC_DEFINE(DDXOSINIT, 1, [Use OsVendorInit])
	AC_DEFINE(DDXTIME, 1, [Use GetTimeInMillis])
	AC_DEFINE(DDXOSFATALERROR, 1, [Use OsVendorFatalError])
a1562 4
	if test "x$XF86MISC" = xyes; then
		AC_MSG_NOTICE([Disabling XF86Misc extension])
		XF86MISC=no
	fi
a1578 16
if test "X$XQUARTZ" = Xauto; then
	AC_CACHE_CHECK([whether to build Xquartz],xorg_cv_Carbon_framework,[
	 	save_LDFLAGS=$LDFLAGS
		LDFLAGS="$LDFLAGS -framework Carbon"
		AC_LINK_IFELSE([char FSFindFolder(); int main() { FSFindFolder(); return 0;}],
			[xorg_cv_Carbon_framework=yes],
			[xorg_cv_Carbon_framework=no])
		LDFLAGS=$save_LDFLAGS])
                
	if test "X$xorg_cv_Carbon_framework" = Xyes; then
		XQUARTZ=yes
	else
		XQUARTZ=no
	fi
fi

d1580 2
a1581 1
	AC_DEFINE([XQUARTZ],[1],[Have Quartz])
d1583 1
a1583 2
	DARWIN_GLX_LIBS='$(top_builddir)/hw/xquartz/GL/libCGLCore.la $(top_builddir)/glx/libglx.la'
	DARWIN_LIBS="$MI_LIB $OS_LIB $DIX_LIB $FB_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB $DARWIN_GLX_LIBS"
d1590 4
a1593 15
	if test "x$XF86MISC" = xyes || test "x$XF86MISC" = xauto; then
		AC_MSG_NOTICE([Disabling XF86Misc extension])
		XF86MISC=no
	fi
	if test "x$XF86VIDMODE" = xyes || test "x$XF86VIDMODE" = xauto; then
		AC_MSG_NOTICE([Disabling XF86VidMode extension])
		XF86VIDMODE=no
	fi
	if test "x$XF86BIGFONT" = xyes || test "x$XF86BIGFONT" = xauto; then
		AC_MSG_NOTICE([Disabling XF86BigFont extension])
		XF86BIGFONT=no
	fi
	if test "x$DGA" = xyes || test "x$DGA" = xauto; then
		AC_MSG_NOTICE([Disabling DGA extension])
		DGA=no
d1611 1
a1611 26

if test "x$X11APP" = xauto; then
	AC_MSG_CHECKING([whether to build X11.app])
	if test "x$XQUARTZ" = xyes ; then
		X11APP=yes
	else
		X11APP=no
	fi
	AC_MSG_RESULT([$X11APP])
fi
AM_CONDITIONAL(X11APP,[test "X$X11APP" = Xyes]) 

if test "x$LAUNCHD" = "xauto"; then
	if test "x$XQUARTZ" = "xyes" ; then
		LAUNCHD=yes
	else
		unset LAUNCHD
		AC_CHECK_PROG(LAUNCHD, [launchd], [yes], [no])
	fi
fi

if test "x$LAUNCHD" = "xyes" ; then
	AC_DEFINE(HAVE_LAUNCHD, 1, [launchd support available])
fi
AM_CONDITIONAL(LAUNCHD, [test "x$LAUNCHD" = "xyes"])

d1615 1
a1616 1
PKG_CHECK_MODULES([DMXMODULES], [xmuu xext x11 xrender xfixes xfont xi dmxproto xau $XDMCP_MODULES], [have_dmx=yes], [have_dmx=no])
d1632 1
a1632 1
	DMX_INCLUDES="$XEXT_INC $RENDER_INC $XTRAP_INC $RECORD_INC"
d1634 1
a1634 1
	XDMX_LIBS="$XEXT_LIB $FB_LIB $CONFIG_LIB $RENDER_LIB $XTRAP_LIB $RECORD_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $MIEXT_SHADOW_LIB $MIEXT_DAMAGE_LIB"
d1731 4
a1738 9
    XEPHYR_DRI=no
    if test x$XEPHYR = xyes -a x$DRI = xyes && test "x$GLX" = xyes; then
        XEPHYR_DRI=yes
        XEPHYR_DRI_LIBS=-lGL
        AC_SUBST(XEPHYR_DRI_LIBS)
    fi
    if test x$XEPHYR_DRI = xyes ; then
        AC_DEFINE(XEPHYR_DRI,1,[enable DRI extension in xephyr])
    fi
d1745 1
a1745 1
        PKG_CHECK_MODULES([TSLIB], [tslib-0.0], [HAVE_TSLIB="yes"], [HAVE_TSLIB="no"])
d1760 1
a1760 1
    KDRIVE_PURE_LIBS="$FB_LIB $MI_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $XPSTUBS_LIB $OS_LIB"
d1773 1
a1773 1
    KDRIVE_LOCAL_LIBS="$TSLIB_LIBS $DIX_LIB $KDRIVE_LIB $KDRIVE_STUB_LIB $CONFIG_LIB"
d1776 1
a1776 4
    KDRIVE_LIBS="$KDRIVE_LOCAL_LIBS $XSERVER_SYS_LIBS"

    # check if we can build Xephyr
    PKG_CHECK_MODULES(XEPHYR, $XEPHYR_REQUIRED_LIBS, [xephyr="yes"], [xephyr="no"])
a1791 1
AM_CONDITIONAL(H3600_TS, false)
a1797 1
AM_CONDITIONAL(XEPHYR_HAS_DRI, [test x$XEPHYR_DRI = xyes])
d1823 4
a1826 1
AC_DEFINE(XResExtension, 1, [Build XRes extension])
a1837 57
dnl xorgconfig CLI configuration utility
if test "x$XORG" = xyes; then
    PKG_CHECK_MODULES([XORGCONFIG_DEP], [xkbfile x11])
    AC_SUBST(XORGCONFIG_DEP_CFLAGS)
    AC_SUBST(XORGCONFIG_DEP_LIBS)
fi

dnl xorgcfg GUI configuration utility
AC_ARG_ENABLE(xorgcfg, AS_HELP_STRING([--enable-xorgcfg], 
	[Build xorgcfg GUI configuration utility (default: no)]),
	[XORGCFG=$enableval],[XORGCFG=no])
if test x$XORGCFG = xyes ; then
	PKG_CHECK_MODULES([XORGCFG_DEP], 
	    [xkbui >= 1.0.2 xkbfile xxf86misc xxf86vm xaw7 xmu xt xpm xext x11])
	XORGCFG_DEP_CFLAGS="$XORGCFG_DEP_CFLAGS"
	AC_CHECK_LIB([curses],[waddstr],
	    [XORGCFG_DEP_LIBS="$XORGCFG_DEP_LIBS -lcurses"; CURSES=yes],
	    AC_CHECK_LIB([ncurses],[waddstr],
		[XORGCFG_DEP_LIBS="$XORGCFG_DEP_LIBS -lncurses" ; CURSES=yes],
		[CURSES=no]))
	AC_SUBST(XORGCFG_DEP_CFLAGS)
	AC_SUBST(XORGCFG_DEP_LIBS)

	APPDEFAULTDIR=$(pkg-config --variable=appdefaultdir xt)
	AC_SUBST(APPDEFAULTDIR)
fi
AM_CONDITIONAL(BUILD_XORGCFG, [test x$XORGCFG = xyes])
AM_CONDITIONAL(USE_CURSES, [test x$CURSES = xyes])

AC_ARG_ENABLE(kbd_mode, AS_HELP_STRING([--enable-kbd_mode],
	[Build kbd_mode utility (default: auto)]),
	[BUILD_KBD_MODE=$enableval], [BUILD_KBD_MODE="auto"])
if test x$BUILD_KBD_MODE != xno ; then
	case $host_os in
	  *bsd*)
		KBD_MODE_TYPE="bsd"
#		BUILD_KBD_MODE="yes"  # need to test on BSD before enabling
				      # by default
		;;
	  solaris*)
		KBD_MODE_TYPE="sun"
		BUILD_KBD_MODE="yes"  # enabled by default
		;;
	  *)
		BUILD_KBD_MODE="no"   # disabled by default
		;;
	esac
fi
AM_CONDITIONAL(BUILD_KBD_MODE, [test x$BUILD_KBD_MODE = xyes])
AM_CONDITIONAL(BSD_KBD_MODE, [test x$KBD_MODE_TYPE = xbsd])
AM_CONDITIONAL(SUN_KBD_MODE, [test x$KBD_MODE_TYPE = xsun])

AC_ARG_ENABLE(ioport, AS_HELP_STRING([--enable-ioport],
	[Build ioport utilities (default: yes)]),
	[BUILD_IOPORT=$enable_val], [BUILD_IOPORT="yes"])
AM_CONDITIONAL(BUILD_IOPORT, [test x$BUILD_IOPORT = xyes])

a1857 1
afb/Makefile
a1864 4
XTrap/Makefile
mfb/Makefile
cfb/Makefile
cfb32/Makefile
a1871 2
miext/rootless/safeAlpha/Makefile
miext/rootless/accel/Makefile
a1905 1
hw/xfree86/os-support/lynxos/Makefile
a1908 1
hw/xfree86/os-support/usl/Makefile
a1909 1
hw/xfree86/rac/Makefile
a1915 2
hw/xfree86/xf1bpp/Makefile
hw/xfree86/xf4bpp/Makefile
a1916 1
hw/xfree86/xf8_32bpp/Makefile
a1919 4
hw/xfree86/utils/ioport/Makefile
hw/xfree86/utils/kbd_mode/Makefile
hw/xfree86/utils/xorgcfg/Makefile
hw/xfree86/utils/xorgconfig/Makefile
a1926 7
hw/xgl/Makefile
hw/xgl/egl/Makefile
hw/xgl/egl/module/Makefile
hw/xgl/glx/Makefile
hw/xgl/glx/module/Makefile
hw/xgl/glxext/Makefile
hw/xgl/glxext/module/Makefile
d1932 3
a1936 2
hw/kdrive/ati/Makefile
hw/kdrive/chips/Makefile
a1937 1
hw/kdrive/epson/Makefile
a1939 1
hw/kdrive/i810/Makefile
a1940 4
hw/kdrive/mach64/Makefile
hw/kdrive/mga/Makefile
hw/kdrive/neomagic/Makefile
hw/kdrive/nvidia/Makefile
a1941 2
hw/kdrive/pm2/Makefile
hw/kdrive/r128/Makefile
a1942 2
hw/kdrive/sis300/Makefile
hw/kdrive/smi/Makefile
a1943 2
hw/kdrive/vesa/Makefile
hw/kdrive/via/Makefile
a1944 36
hw/xprint/Makefile
hw/xprint/doc/Makefile
hw/xprint/pcl/Makefile
hw/xprint/pcl-mono/Makefile
hw/xprint/raster/Makefile
hw/xprint/ps/Makefile
hw/xprint/etc/Makefile
hw/xprint/etc/Xsession.d/Makefile
hw/xprint/etc/init.d/Makefile
hw/xprint/etc/profile.d/Makefile
hw/xprint/config/Makefile
hw/xprint/config/C/print/attributes/Makefile
hw/xprint/config/C/print/ddx-config/Makefile
hw/xprint/config/C/print/ddx-config/raster/Makefile
hw/xprint/config/C/print/models/CANONBJ10E-GS/Makefile
hw/xprint/config/C/print/models/PSdefault/fonts/Makefile
hw/xprint/config/C/print/models/PSdefault/Makefile
hw/xprint/config/C/print/models/PSspooldir/Makefile
hw/xprint/config/C/print/models/SPSPARC2/Makefile
hw/xprint/config/C/print/models/SPSPARC2/fonts/Makefile
hw/xprint/config/C/print/models/GSdefault/Makefile
hw/xprint/config/C/print/models/HPLJ4050-PS/Makefile
hw/xprint/config/C/print/models/HPLJ4050-PS/fonts/Makefile
hw/xprint/config/C/print/models/Makefile
hw/xprint/config/C/print/models/PS2PDFspooldir-GS/Makefile
hw/xprint/config/C/print/models/CANONC3200-PS/Makefile
hw/xprint/config/C/print/models/CANONC3200-PS/fonts/Makefile
hw/xprint/config/C/print/models/HPLJ4family/fonts/Makefile
hw/xprint/config/C/print/models/HPLJ4family/Makefile
hw/xprint/config/C/print/models/HPDJ1600C/Makefile
hw/xprint/config/C/print/models/HPDJ1600C/fonts/Makefile
hw/xprint/config/C/print/Makefile
hw/xprint/config/C/Makefile
hw/xprint/config/en_US/print/attributes/Makefile
hw/xprint/config/en_US/print/Makefile
hw/xprint/config/en_US/Makefile
@


1.19
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d29 3
a31 2
AC_INIT([xorg-server], 1.5.2, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
RELEASE_DATE="10 October 2008"
@


1.18
log
@Update to xserver 1.4.2. Tested by landry@@, ckuethe@@, jsing@@ mbalmer@@.
@
text
@d29 2
a30 1
AC_INIT([xorg-server], 1.4.2, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
d75 6
a100 7
# DTrace support uses XErrorDB to get request names
AC_ARG_WITH(xerrordb,
            AS_HELP_STRING([--with-xerrordb=PATH], [Path to XErrorDB file (default: ${datadir}/X11/XErrorDB)]),
	    [ XERRORDB_PATH="$withval" ],
	    [ XERRORDB_PATH="${datadir}/X11/XErrorDB" ])
AC_DEFINE_DIR(XERRORDB_PATH, XERRORDB_PATH, [Path to XErrorDB file])

d174 16
d194 1
a194 1
		getisax])
d207 1
a310 1
use_x86_asm="no"
d318 1
d322 1
a327 1
	use_x86_asm="yes"
a329 1
	        darwin*)	use_x86_asm="no" ;;
d359 1
a361 1
  	use_x86_asm="yes"
a363 1
	        darwin*)	use_x86_asm="no" ;;
d373 7
d382 1
d395 1
d408 1
d416 1
d426 1
a448 1
RELEASE_DATE="11 June 2008"
d497 3
d509 2
a510 4
AC_ARG_WITH(rgb-path,         AS_HELP_STRING([--with-rgb-path=PATH], [Path to RGB database (default: ${datadir}/X11/rgb)]),
				[ RGBPATH="$withval" ],
				[ RGBPATH="${datadir}/X11/rgb" ])
AC_ARG_WITH(serverconfig-path, AS_HELP_STRING([--with-serverconfig-path=PATH], [Path to server config (default: ${libdir}/xserver)]),
d512 10
a521 5
				[ SERVERCONFIG="${libdir}/xserver" ])
APPLE_APPLICATIONS_DIR="${bindir}/Applications"
AC_ARG_WITH(apple-applications-dir,AS_HELP_STRING([--with-apple-applications-dir=PATH], [Path to the Applications directory (default: ${bindir}/Applications)]),
                               [ APPLE_APPLICATIONS_DIR="${withval}" ].
                               [ APPLE_APPLICATIONS_DIR="${bindir}/Applications" ])
d562 1
d566 2
a567 2
AC_ARG_ENABLE(xtrap,          AS_HELP_STRING([--disable-xtrap], [Build XTrap extension (default: enabled)]), [XTRAP=$enableval], [XTRAP=yes])
AC_ARG_ENABLE(record,         AS_HELP_STRING([--disable-record], [Build Record extension (default: enabled)]), [RECORD=$enableval], [RECORD=yes])
a568 1
AC_ARG_ENABLE(quartz,         AS_HELP_STRING([--enable-quartz], [Build with darwin quartz support (default: auto)]), [XQUARTZ=$enableval], [XQUARTZ=auto])
d576 1
d581 3
a583 2
AC_ARG_ENABLE(xcsecurity,     AS_HELP_STRING([--disable-xcsecurity], [Build Security extension (default: enabled)]), [XCSECURITY=$enableval], [XCSECURITY=$XACE])
AC_ARG_ENABLE(appgroup,       AS_HELP_STRING([--disable-appgroup], [Build XC-APPGROUP extension (default: enabled)]), [APPGROUP=$enableval], [APPGROUP=$XCSECURITY])
d592 1
a592 1
AC_ARG_ENABLE(xf86bigfont,    AS_HELP_STRING([--disable-xf86bigfont], [Build XF86 Big Font extension (default: enabled)]), [XF86BIGFONT=$enableval], [XF86BIGFONT=yes])
d603 4
d624 1
a624 1
AC_ARG_ENABLE(freetype,       AS_HELP_STRING([ --enable-freetype], [Build Xprint FreeType backend (default: yes)]), [XP_USE_FREETYPE=$enableval],[XP_USE_FREETYPE=no])
a693 4
PIXMAN="[pixman-1 >= 0.9.5]"
PKG_CHECK_MODULES(PIXMAN, $PIXMAN)
AC_SUBST(PIXMAN_CFLAGS)

d701 3
a703 2
REQUIRED_MODULES="[randrproto >= 1.2] $RENDERPROTO [fixesproto >= 4.0] [damageproto >= 1.1] xcmiscproto xextproto [xproto >= 7.0.9] xtrans [scrnsaverproto >= 1.1] bigreqsproto resourceproto fontsproto [inputproto >= 1.4.2] [kbproto >= 1.0.3]"
REQUIRED_LIBS="xfont xau fontenc $PIXMAN"
d747 57
d818 4
d862 1
a862 1
if test "x$GLX" = xyes && ! test "x$MESA_SOURCE" = x; then
d864 1
a864 1
	PKG_CHECK_MODULES([GL], [glproto >= 1.4.8])
d867 2
a868 13
	GLX_LIBS='$(top_builddir)/GL/glx/libglx.la $(top_builddir)/GL/mesa/libGLcore.la'
	test -d GL || mkdir GL
	case $host_os in
	  solaris*) 	
		SYMLINK_MESA="/usr/bin/bash $srcdir/GL/symlink-mesa.sh"	;;
	  openbsd*)
		SYMLINK_MESA="/bin/ksh $srcdir/GL/symlink-mesa.sh"	;;
	  *)	SYMLINK_MESA=$srcdir/GL/symlink-mesa.sh ;;
	esac
	$SYMLINK_MESA $MESA_SOURCE GL/
	if test $? -ne 0; then
		AC_MSG_ERROR([Failed to link Mesa source tree.  Please specify a proper path to Mesa sources, or disable GLX.])
	fi
d884 1
a884 1
	GLX_LIBS="$GLX_LIBS -lpthread"
d893 1
a893 1
	PKG_CHECK_MODULES([GL], [glproto >= 1.4.1])
d903 8
d923 13
d1056 4
a1099 5
AM_CONDITIONAL(USE_RGB_BUILTIN, [test "x$USE_RGB_BUILTIN" = xyes])
if test "x$USE_RGB_BUILTIN" = xyes; then
	AC_DEFINE(USE_RGB_BUILTIN, 1, [Use built-in RGB color database])
fi

d1101 2
a1102 2
AC_DEFINE_DIR(RGB_DB, RGBPATH, [Default RGB path])
AC_DEFINE_DIR(SERVERCONFIGdir, SERVERCONFIG, [Server config path])
a1135 1
AC_DEFINE(USE_RGB_TXT, 1, [Use rgb.txt directly])
a1140 1
AC_DEFINE(PIXPRIV, 1, [Support pixmap privates])
a1148 1
CWRAP_LIB='$(top_builddir)/os/libcwrapper.la'
d1162 30
a1191 3
XSERVER_CFLAGS="${XSERVERCFLAGS_CFLAGS}"
XSERVER_LIBS="${XSERVERLIBS_LIBS} ${SYS_LIBS} ${LIBS}"
AC_SUBST([SYS_LIBS])
a1209 3
       darwin*)
       LD_EXPORT_SYMBOLS_FLAG=""
       ;;
a1222 44
AC_CHECK_FUNCS([clock_gettime], [have_clock_gettime=yes],
               [AC_CHECK_LIB([rt], [clock_gettime], [have_clock_gettime=-lrt],
                             [have_clock_gettime=no])])

AC_MSG_CHECKING([for a useful monotonic clock ...])

if ! test "x$have_clock_gettime" = xno; then
    if ! test "x$have_clock_gettime" = xyes; then
        CLOCK_LIBS="$have_clock_gettime"
    else
        CLOCK_LIBS=""
    fi

    LIBS_SAVE="$LIBS"
    LIBS="$CLOCK_LIBS"

    AC_RUN_IFELSE([
#define _POSIX_C_SOURCE 199309L
#include <time.h>

int main(int argc, char *argv[[]]) {
    struct timespec tp;

    if (clock_gettime(CLOCK_MONOTONIC, &tp) == 0)
        return 0;
    else
        return 1;
}
    ], [MONOTONIC_CLOCK=yes], [MONOTONIC_CLOCK=no],
       [MONOTONIC_CLOCK="cross compiling"])

    LIBS="$LIBS_SAVE"
else
    MONOTONIC_CLOCK=no
fi

AC_MSG_RESULT([$MONOTONIC_CLOCK])

if test "x$MONOTONIC_CLOCK" = xyes; then
    AC_DEFINE(MONOTONIC_CLOCK, 1, [Have monotonic clock from clock_gettime()])
    XSERVER_LIBS="$XSERVER_LIBS $CLOCK_LIBS"
    LIBS="$LIBS $CLOCK_LIBS"
fi

a1248 2
AC_SUBST([XSERVER_LIBS])

a1252 48
dnl DMX DDX

AC_MSG_CHECKING([whether to build Xdmx DDX])
PKG_CHECK_MODULES([DMXMODULES], [xmuu xext x11 xrender xfixes xfont xi dmxproto xau $XDMCP_MODULES $PIXMAN], [have_dmx=yes], [have_dmx=no])
if test "x$DMX" = xauto; then
	DMX="$have_dmx"
fi
AC_MSG_RESULT([$DMX])
AM_CONDITIONAL(DMX, [test "x$DMX" = xyes])

if test "x$DMX" = xyes; then
	if test "x$have_dmx" = xno; then
		AC_MSG_ERROR([Xdmx build explicitly requested, but required
		              modules not found.])
	fi
	DMX_INCLUDES="$XEXT_INC $RENDER_INC $XTRAP_INC $RECORD_INC"
	XDMX_LIBS="$FB_LIB $MI_LIB $XEXT_LIB $CONFIG_LIB $RENDER_LIB $XTRAP_LIB $RECORD_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $OS_LIB $CWRAP_LIB"
	AC_SUBST([XDMX_LIBS])

dnl USB sources in DMX require <linux/input.h>
	AC_CHECK_HEADER([linux/input.h], DMX_BUILD_USB="yes",
			DMX_BUILD_USB="no")
dnl Linux sources in DMX require <linux/keyboard.h>
	AC_CHECK_HEADER([linux/keyboard.h], DMX_BUILD_LNX="yes",
			DMX_BUILD_LNX="no")
	if test "x$GLX" = xyes; then
		PKG_CHECK_MODULES([GL], [glproto])
	fi
	PKG_CHECK_MODULES([XDMXCONFIG_DEP], [xaw7 xmu xt xpm x11])
	AC_SUBST(XDMXCONFIG_DEP_CFLAGS)
	AC_SUBST(XDMXCONFIG_DEP_LIBS)
	PKG_CHECK_MODULES([DMXEXAMPLES_DEP], [dmx xext x11])
	AC_SUBST(DMXEXAMPLES_DEP_LIBS)
	PKG_CHECK_MODULES([DMXXMUEXAMPLES_DEP], [dmx xmu xext x11])
	AC_SUBST(DMXXMUEXAMPLES_DEP_LIBS)
	PKG_CHECK_MODULES([DMXXIEXAMPLES_DEP], [dmx xi xext x11])
	AC_SUBST(DMXXIEXAMPLES_DEP_LIBS)
	PKG_CHECK_MODULES([XTSTEXAMPLES_DEP], [xtst xext x11])
	AC_SUBST(XTSTEXAMPLES_DEP_LIBS)
	PKG_CHECK_MODULES([XRESEXAMPLES_DEP], [xres xext x11])
	AC_SUBST(XRESEXAMPLES_DEP_LIBS)
	PKG_CHECK_MODULES([X11EXAMPLES_DEP], [xext x11])
	AC_SUBST(X11EXAMPLES_DEP_LIBS)
fi
AM_CONDITIONAL([DMX_BUILD_LNX], [test "x$DMX_BUILD_LNX" = xyes])
AM_CONDITIONAL([DMX_BUILD_USB], [test "x$DMX_BUILD_USB" = xyes])


d1260 2
a1261 1
	XVFB_LIBS="$FB_LIB $MI_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB $LIBS"
d1263 1
d1278 2
a1279 1
	XNEST_LIBS="$MI_LIB $CONFIG_LIB $XSERVER_LIBS $FB_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB $LIBS"
d1281 1
d1292 1
a1302 1
  AC_SUBST(XGLMODULES_LIBS)
d1308 2
a1309 1
	XGL_LIBS="$FB_LIB $MI_LIB $COMPOSITE_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $MIEXT_LAYER_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB"
d1311 1
a1324 1
  AC_SUBST(XEGLMODULES_LIBS)
d1330 2
a1331 1
	XEGL_LIBS="$FB_LIB $MI_LIB $COMPOSITE_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $MIEXT_LAYER_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB"
d1333 1
a1341 1
  AC_SUBST(XGLXMODULES_LIBS)
d1347 2
a1348 1
	XGLX_LIBS="$FB_LIB $MI_LIB $COMPOSITE_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $MIEXT_LAYER_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB"
d1350 1
a1352 4
# XORG_CORE_LIBS is needed even if you're not building the Xorg DDX
XORG_CORE_LIBS="$DIX_LIB $CONFIG_LIB"
AC_SUBST([XORG_CORE_LIBS])

d1354 1
a1354 2
xorg_bus_freebsdpci=no
xorg_bus_netbsdpci=no
d1365 1
a1365 1
	XORG_LIBS="$COMPOSITE_LIB $MI_LIB $FIXES_LIB $XEXTXORG_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XPSTUBS_LIB $OS_LIB"
d1367 11
a1377 4
dnl Check to see if dlopen is in default libraries (like Solaris, which
dnl has it in libc), or if libdl is needed to get it.
	AC_CHECK_FUNC([dlopen], [], 
		AC_CHECK_LIB([dl], [dlopen], XORG_LIBS="$XORG_LIBS -ldl"))
a1379 58
         darwin*)
               XORG_OS="Darwin"
               build_darwin=yes
               if test "X$XQUARTZ" = Xauto; then
                 AC_CACHE_CHECK([for Carbon framework],xorg_cv_Carbon_framework,[
                 save_LDFLAGS=$LDFLAGS
                 LDFLAGS="$LDFLAGS -framework Carbon"
                 AC_LINK_IFELSE([char FSFindFolder();
int main() {
FSFindFolder();
return 0;}
                 ],[xorg_cv_Carbon_framework=yes],
                  [xorg_cv_Carbon_framework=no])
                  LDFLAGS=$save_LDFLAGS])
                 if test "X$xorg_cv_Carbon_framework" = Xyes; then
                   AC_DEFINE([DARWIN_WITH_QUARTZ],[1],
                         [Have Quartz])
                   XQUARTZ=yes
                 else
                   XQUARTZ=no
                 fi
               fi
#	       glxAGL / glxCGL don't work yet
#               AC_CACHE_CHECK([for AGL framework],xorg_cv_AGL_framework,[
#               save_LDFLAGS=$LDFLAGS
#               LDFLAGS="$LDFLAGS -framework AGL"
#               AC_LINK_IFELSE([char aglEnable();
#int main() {
#aglEnable();
#return 0;}
#               ],[xorg_cv_AGL_framework=yes],
#               [xorg_cv_AGL_framework=no])
#               LDFLAGS=$save_LDFLAGS
#               ])
               xorg_cv_AGL_framework=no
	       DARWIN_LIBS="$FB_LIB $MI_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $XPSTUBS_LIB $OS_LIB"
	       AC_SUBST([DARWIN_LIBS])
               AC_CHECK_LIB([Xplugin],[xp_init],[:])
               AC_SUBST([APPLE_APPLICATIONS_DIR])
               CFLAGS="${CFLAGS} -D__DARWIN__"
               PLIST_VERSION_STRING=$PACKAGE_VERSION
               AC_SUBST([PLIST_VERSION_STRING])
               PLIST_VENDOR_WEB=$VENDOR_WEB
               AC_SUBST([PLIST_VENDOR_WEB])
               # Not sure that we should be disabling all these...
               if test "x$XF86MISC" = xyes || test "x$XF86MISC" = xauto; then
                       AC_MSG_NOTICE([Disabling XF86Misc extension])
                       XF86MISC=no
               fi
               if test "x$XF86VIDMODE" = xyes || test "x$XF86VIDMODE" = xauto; then
                       AC_MSG_NOTICE([Disabling XF86VidMode extension])
                       XF86VIDMODE=no
               fi
               if test "x$DGA" = xyes || test "x$DGA" = xauto; then
                       AC_MSG_NOTICE([Disabling DGA extension])
                       DGA=no
               fi
               ;;
a1394 2
			XORG_OS_PCI="axp"
			xorg_bus_linuxpci="no"
d1406 1
a1406 7
		case $host_cpu in
		  i*86)
			;;
		  *)
			xorg_bus_freebsdpci="yes"
			;;
		esac
d1411 1
a1411 7
		case $host_cpu in
		  i*86|amd64*|x86_64*|ia64*)
			;;
		  *)
			xorg_bus_netbsdpci="yes"
			;;
		esac
d1420 1
a1420 7
		case $host_cpu in
		  amd64*|x86_64*)
			;;
		  *)
			xorg_bus_freebsdpci="yes"
			;;
		esac
a1486 6
	  i*86)
               case $host_os in
                 darwin*) ;;
                 *) xorg_bus_ix86pci=yes ;;
               esac
		;;
d1489 1
a1489 1
		  darwin*|linux*|freebsd*|netbsd*|openbsd*|kfreebsd*-gnu)
d1507 1
a1507 1
	  x86_64*|amd64*)
d1509 1
a1509 2
		  darwin*|freebsd*|kfreebsd*-gnu)
			# FreeBSD uses the system pci interface
d1552 1
a1552 1
	        XORG_LIBS="$XORG_LIBS $XORG_MODULES_LIBS"
d1556 1
a1560 1
	dnl only used in hw/xfree86/scanpci, TTBOMK
a1582 2
	AC_DEFINE(DRIVERS, {}, [Built-in output drivers (none)])
	AC_DEFINE(IDRIVERS, {}, [Built-in input drivers (none)])
d1589 1
d1599 15
d1617 1
a1617 2
AM_CONDITIONAL([XORG_BUS_FREEBSDPCI], [test "x$xorg_bus_freebsdpci" = xyes])
AM_CONDITIONAL([XORG_BUS_NETBSDPCI], [test "x$xorg_bus_netbsdpci" = xyes])
a1627 2
AM_CONDITIONAL([BUILD_DARWIN],[test "X$build_darwin" = Xyes])
AM_CONDITIONAL([XQUARTZ],[test "X$XQUARTZ" = Xyes])
d1651 4
a1654 5
	PKG_CHECK_MODULES([XPRINT], [printproto x11 xfont $XDMCP_MODULES xau $PIXMAN])
	XPRINT_EXTENSIONS="$XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $RENDER_LIB $COMPOSITE_LIB $RANDR_LIB $XI_LIB $FIXES_LIB $DAMAGE_LIB $XI_LIB $GLX_LIBS"
	XPRINT_LIBS="$DIX_LIB $XKB_LIB $XKB_STUB_LIB $XPRINT_EXTENSIONS $MI_LIB $MIEXT_DAMAGE_LIB $CWRAP_LIB $OS_LIB $LIBS $XPRINT_LIBS"
	AC_SUBST([XPRINT_CFLAGS])
	AC_SUBST([XPRINT_LIBS])
d1690 2
a1691 3
        AC_SUBST(FREETYPE_LIBS)
        AC_SUBST(FREETYPE_CFLAGS)
        AC_SUBST(FREETYPE_REQUIRES)
d1693 4
d1710 1
a1710 1
	XWIN_LIBS="$FB_LIB $MI_LIB $XEXT_LIB $CONFIG_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $DAMAGE_LIB $LAYER_LIB $XPSTUBS_LIB $OS_LIB $SHADOW_LIB"
a1715 1
	XWIN_SERVER_NAME=XWin
d1718 1
d1725 1
a1726 1
			XWIN_SERVER_NAME=Xming
d1729 1
a1729 1
			XWIN_SYSTEM_LIBS=-lwinsock2
d1732 1
d1734 1
a1734 1
	AC_SUBST(XWIN_SYSTEM_LIBS)
d1771 46
a1816 4
AM_CONDITIONAL(HAVE_X_PLUGIN, [test "x$ac_cv_lib_Xplugin_xp_init" = xyes])
AM_CONDITIONAL(HAVE_AGL_FRAMEWORK, [test "x$xorg_cv_AGL_framework" = xyes])
# Support for objc in autotools is minimal and not
# documented.
d1827 84
d1967 1
a1967 1
       XSDL_LIBS="`sdl-config --libs` $XSERVER_LIBS"
d1971 5
a1975 1
    PKG_CHECK_MODULES(XEPHYR, x11 xext xfont xau xdmcp $PIXMAN, [xephyr="yes"], [xephyr="no"])
d1979 9
d2022 4
a2025 2
    KDRIVE_LOCAL_LIBS="$DIX_LIB $CONFIG_LIB $KDRIVE_LIB $TSLIB_LIBS $KDRIVE_OS_LIB $KDRIVE_PURE_LIBS $KDRIVE_STUB_LIB"
    KDRIVE_LIBS="$XSERVERLIBS_LIBS $KDRIVE_LOCAL_LIBS"
d2028 1
a2028 1
    PKG_CHECK_MODULES(XEPHYR, x11 xext xfont xau xdmcp, [xephyr="yes"], [xephyr="no"])
d2051 1
d2103 1
a2103 1
	XORGCFG_DEP_CFLAGS="$XORGCFG_DEP_CFLAGS $PIXMAN_CFLAGS"
d2120 1
a2120 1
	[BUILD_KBD_MODE=$enable_val], [BUILD_KBD_MODE="auto"])
d2164 1
a2164 15
GL/Makefile
GL/apple/Makefile
GL/glx/Makefile
GL/mesa/Makefile
GL/mesa/glapi/Makefile
GL/mesa/main/Makefile
GL/mesa/math/Makefile
GL/mesa/shader/Makefile
GL/mesa/shader/grammar/Makefile
GL/mesa/shader/slang/Makefile
GL/mesa/swrast/Makefile
GL/mesa/swrast_setup/Makefile
GL/mesa/tnl/Makefile
GL/mesa/vbo/Makefile
GL/mesa/X/Makefile
d2207 1
a2228 1
hw/xfree86/scanpci/Makefile
a2242 2
hw/xfree86/utils/pcitweak/Makefile
hw/xfree86/utils/scanpci/Makefile
d2261 4
a2264 14
hw/darwin/Makefile
hw/darwin/bundle/Makefile
hw/darwin/bundle/Dutch.lproj/Makefile
hw/darwin/bundle/English.lproj/Makefile
hw/darwin/bundle/French.lproj/Makefile
hw/darwin/bundle/German.lproj/Makefile
hw/darwin/bundle/Japanese.lproj/Makefile
hw/darwin/bundle/Portuguese.lproj/Makefile
hw/darwin/bundle/Spanish.lproj/Makefile
hw/darwin/bundle/Swedish.lproj/Makefile
hw/darwin/bundle/ko.lproj/Makefile
hw/darwin/iokit/Makefile
hw/darwin/quartz/Makefile
hw/darwin/utils/Makefile
@


1.17
log
@implement the --disable-ioport configure option to disable the build of
ioport and its symlinks and use that option. Requested by kettenis@@
and others.
@
text
@d29 1
a29 1
AC_INIT([xorg-server], 1.4.0.90, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
d69 2
d81 5
d316 1
d350 1
d375 1
a375 1
  *freebsd*)
d422 1
a422 1
RELEASE_DATE="5 September 2007"
d1421 1
a1421 1
	  freebsd* | kfreebsd*-gnu)
d1874 1
a1874 1
    PKG_CHECK_MODULES(XEPHYR, x11 xext xfont xau xdmcp, [xephyr="yes"], [xephyr="no"])
d2042 3
a2044 1
AC_SUBST([libdir exec_prefix prefix])
@


1.16
log
@Fix m68k builds. Similar to the fix that miod used.
@
text
@d2019 5
@


1.15
log
@Add support for xserver on OpenBSD/sgi and enable build.

ok matthieu@@
@
text
@d323 4
@


1.14
log
@Merge xserver 1.4.0.90. This includes fixes for some of the regressions
introduced by xserver 1.4, such as the keyboad caps/num-lock leds updates.
Tested by many.
@
text
@d323 4
d355 1
@


1.13
log
@merge xserver 1.4, 1st pass
@
text
@d29 1
a29 1
AC_INIT([xorg-server], 1.4, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
d611 1
d1642 3
a1644 1
AM_CONDITIONAL(DGA, [test "x$DGA" = xyes])
@


1.12
log
@Fix linking on OpenBSD/a.out systems. Tested by Nick@@.
@
text
@d1 1
d3 6
a8 1
dnl Copyright Â© 2003-2005 Keith Packard, Daniel Stone
d10 3
a12 9
dnl Permission to use, copy, modify, distribute, and sell this software and its
dnl documentation for any purpose is hereby granted without fee, provided that
dnl the above copyright notice appear in all copies and that both that
dnl copyright notice and this permission notice appear in supporting
dnl documentation, and that the names of Keith Packard and Daniel Stone not be
dnl used in advertising or publicity pertaining to distribution of the software
dnl without specific, written prior permission.  Keith Packard and Daniel Stone
dnl make no representations about the suitability of this software for any
dnl purpose.  It is provided "as is" without express or implied warranty.
d14 11
a24 7
dnl KEITH PACKARD AND DANIEL STONE DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
dnl SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
dnl IN NO EVENT SHALL KEITH PACKARD OR DANIEL STONE BE LIABLE FOR ANY SPECIAL,
dnl INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
dnl LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
dnl OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
dnl PERFORMANCE OF THIS SOFTWARE.
d29 1
a29 3
dnl This is the not the Xorg version number, it's the server version number.
dnl Yes, that's weird.
AC_INIT([xorg-server], 1.2.0, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
d65 1
d68 26
d109 58
d175 1
a175 1
	AC_DEFINE(HAS_GETDTABLESIZE, 1, [Have the `getdtablesize' function.]))
d177 1
a177 1
	AC_DEFINE(HAS_GETIFADDRS, 1, [Have the `getifaddrs' function.]))
d179 1
a179 1
	AC_DEFINE(HAS_GETPEEREID, 1, [Have the `getpeereid' function.]))
d181 1
a181 1
	AC_DEFINE(HAS_GETPEERUCRED, 1, [Have the `getpeerucred' function.]))
d188 1
a188 1
AC_CHECK_FUNC([mmap], AC_DEFINE(HAS_MMAP, 1, [Have the `mmap' function.]))
d192 1
d306 1
d332 1
d370 1
d384 3
d390 7
a396 7
AC_MSG_CHECKING(for MMX capable platform)
if test "x$use_x86_asm" = xyes && test "x$GCC" = xyes ; then
	AC_PREPROC_IFELSE([
#if (!defined (__GNUC__) || __GNUC__ < 3 || (__GNUC__ == 3 && __GNUC_MINOR__ < 4))
    #error Not supported
#endif
], mmx_capable=yes, mmx_capable=no)
a397 3
AC_MSG_RESULT([$mmx_capable])
AM_CONDITIONAL(MMX_CAPABLE, [test "x$mmx_capable" = xyes])

d399 7
a405 12
OSNAME=`uname -srm`
AC_DEFINE_UNQUOTED(OSNAME, "$OSNAME", 
	[Define to OS Name string to display for build OS in Xorg log])

DEFAULT_VENDOR_NAME="The X.Org Foundation"
DEFAULT_VENDOR_NAME_SHORT="X.Org"
DEFAULT_VERSION_MAJOR=7
DEFAULT_VERSION_MINOR=2
DEFAULT_VERSION_PATCH=0
DEFAULT_VERSION_SNAP=0
DEFAULT_RELEASE_DATE="22 January 2007"
DEFAULT_VENDOR_WEB="http://wiki.x.org"
d419 1
a419 1
AC_ARG_WITH(vendor-name,     AS_HELP_STRING([--with-vendor-string=VENDOR],
d421 2
a422 3
			     	[ VENDOR_STRING="$withval" ],
			     	[ VENDOR_STRING="$DEFAULT_VENDOR_NAME" ])
AC_ARG_WITH(vendor-name-short, AS_HELP_STRING([--with-vendor-string-short=VENDOR],
d424 1
a424 22
			     	[ VENDOR_STRING_SHORT="$withval" ],
			     	[ VENDOR_STRING_SHORT="$DEFAULT_VENDOR_NAME_SHORT" ])
AC_ARG_WITH(release-major,   AS_HELP_STRING([--with-release-major=MAJOR],
				  [Release major number reported by the server]),
				[ VERSION_MAJOR="$withval" ],
				[ VERSION_MAJOR="$DEFAULT_VERSION_MAJOR" ])
AC_ARG_WITH(release-minor,   AS_HELP_STRING([--with-release-minor=MINOR],
				  [Release minor number reported by the server]),
				[ VERSION_MINOR="$withval" ],
				[ VERSION_MINOR="$DEFAULT_VERSION_MINOR" ])
AC_ARG_WITH(release-patch,   AS_HELP_STRING([--with-release-patch=PATCH],
				  [Release patch number reported by the server]),
				[ VERSION_PATCH="$withval" ],
				[ VERSION_PATCH="$DEFAULT_VERSION_PATCH" ])
AC_ARG_WITH(release-snap,    AS_HELP_STRING([--with-release-snap=SNAP],
				  [Release snap number reported by the server]),
				[ VERSION_SNAP="$withval" ],
				[ VERSION_SNAP="$DEFAULT_VERSION_SNAP" ])
AC_ARG_WITH(release-date,    AS_HELP_STRING([--with-release-date=DATE],
				  [Release date reported by the server]),
				[ RELEASE_DATE="$withval" ],
				[ RELEASE_DATE="$DEFAULT_RELEASE_DATE" ])
d427 1
a427 2
				[ VENDOR_WEB="$withval" ],
				[ VENDOR_WEB="$DEFAULT_VENDOR_WEB" ])
d440 1
a440 1
AC_ARG_WITH(os-name,         AS_HELP_STRING([--with-os-name=OSNAME], [Name of OS (default: UNKNOWN)]),
d442 1
a442 1
				[ OSNAME="UNKNOWN" ])
d446 3
a448 3
AC_ARG_WITH(mesa-source,     AS_HELP_STRING([--with-mesa-source=MESA_SOURCE], [Path to Mesa source tree]),
                                [ MESA_SOURCE="$withval" ],
                                [ MESA_SOURCE="" ])
d465 7
a471 3
AC_ARG_WITH(dri-driver-path,  AS_HELP_STRING([--with-dri-driver-path=PATH], [Path to DRI drivers (default: ${libdir}/dri)]),
				[ DRI_DRIVER_PATH="$withval" ],
				[ DRI_DRIVER_PATH="${libdir}/dri" ])
d480 20
d518 1
d520 1
a520 1
AC_ARG_ENABLE(dga,            AS_HELP_STRING([--disable-dga], [Build DGA extension (default: enabled)]), [DGA=$enableval], [DGA=yes])
a524 2
AC_ARG_ENABLE(aiglx,          AS_HELP_STRING([--enable-aiglx], [Build accelerated indirect GLX (default: enabled)]), [AIGLX=$enableval], [AIGLX=yes])
AC_ARG_ENABLE(glx-tls,        AS_HELP_STRING([--enable-glx-tls], [Build GLX with TLS support (default: disabled)]), [GLX_USE_TLS=$enableval], [GLX_USE_TLS=no])
d527 3
a529 3
AC_ARG_ENABLE(xf86vidmode,    AS_HELP_STRING([--disable-xf86vidmode], [Build XF86VidMode extension (default: enabled)]), [XF86VIDMODE=$enableval], [XF86VIDMODE=yes])
AC_ARG_ENABLE(xf86misc,       AS_HELP_STRING([--disable-xf86misc], [Build XF86Misc extension (default: enabled)]), [XF86MISC=$enableval], [XF86MISC=yes])
AC_ARG_ENABLE(xace,     AS_HELP_STRING([--disable-xace], [Build X-ACE extension (default: enabled)]), [XACE=$enableval], [XACE=yes])
d542 2
a543 1
AC_ARG_ENABLE(xinput,         AS_HELP_STRING([--disable-xinput], [Build XInput Extension (default: enabled)]), [XINPUT=$enableval], [XINPUT=yes])
d548 1
a548 1
AC_ARG_ENABLE(dmx,    	      AS_HELP_STRING([--enable-dmx], [Build DMX server (default: auto)]), [DMX=$enableval], [DMX=auto])
d552 1
a552 1
AC_ARG_ENABLE(xprint,         AS_HELP_STRING([--enable-xprint], [Build Xprint extension and server (default: auto)]), [XPRINT=$enableval], [XPRINT=auto])
d556 4
d564 3
d637 4
d642 50
a691 2
REQUIRED_MODULES="randrproto renderproto [fixesproto >= 4.0] damageproto xcmiscproto xextproto xproto xtrans xf86miscproto xf86vidmodeproto xf86bigfontproto [scrnsaverproto >= 1.1] bigreqsproto resourceproto fontsproto inputproto xf86dgaproto [kbproto >= 1.0.3]"
REQUIRED_LIBS="xfont xau fontenc"
a706 4
AM_CONDITIONAL(DGA, [test "x$DGA" = xyes])
if test "x$DGA" = xyes; then
	AC_DEFINE(DGA, 1, [Support DGA extension])
fi
d711 1
a711 1
	REQUIRED_MODULES="$REQUIRED_MODULES [compositeproto >= 0.3]"
d790 3
a872 8
if test "x$XF86VIDMODE" = xyes; then
	AC_DEFINE(XF86VIDMODE, 1, [Support XFree86 Video Mode extension])
fi

if test "x$XF86MISC" = xyes; then
	AC_DEFINE(XF86MISC, 1, [Support XFree86 miscellaneous extensions])
fi

d882 6
a911 4
dnl damage (may) need the composite wrapper when composite is enabled
if test "$COMPOSITE" = yes; then
	MIEXT_DAMAGE_LIB="$MIEXT_DAMAGE_LIB "'$(top_builddir)/miext/cw/libcw.la'
fi
d914 3
a916 6
AM_CONDITIONAL(XINPUT, [test "x$XINPUT" = xyes])
if test "x$XINPUT" = xyes; then
   	AC_DEFINE(XINPUT, 1, [Support X Input extension])
	XI_LIB='$(top_builddir)/Xi/libXi.la'
	XI_INC='-I$(top_srcdir)/Xi'
fi
d930 5
a934 1
                                        [Do not have `strcasecmp'.]))
a975 15
VENDOR_RELEASE="((($VERSION_MAJOR) * 10000000) + (($VERSION_MINOR) * 100000) + (($VERSION_PATCH) * 1000) + $VERSION_SNAP)"

if test $VERSION_SNAP = "0"; then
	if test $VERSION_PATCH = "0"; then
		VENDOR_VERSION_STRING="${VERSION_MAJOR}.${VERSION_MINOR}"
	else
		VENDOR_VERSION_STRING="${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
	fi
else
	VENDOR_VERSION_STRING="${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}.${VERSION_SNAP}"
fi

VENDOR_RELEASE_STRING="Release ${VENDOR_VERSION_STRING}"
VENDOR_MAN_VERSION="Version ${VENDOR_VERSION_STRING}"

d978 1
d981 2
a982 3
AC_DEFINE_UNQUOTED(XVENDORNAME, ["$VENDOR_STRING"], [Vendor name])
AC_DEFINE_UNQUOTED(XVENDORNAMESHORT, ["$VENDOR_STRING_SHORT"], [Short vendor name])
AC_DEFINE_UNQUOTED(XORG_RELEASE, ["$VENDOR_RELEASE_STRING"], [Vendor release])
d986 5
d993 4
a996 2
AC_SUBST([VENDOR_STRING])
AC_SUBST([VENDOR_STRING_SHORT])
a1003 1
AM_CONDITIONAL(DEBUG, test "x$DEBUGGING" = xyes)
d1005 4
a1008 2
if ! test "x$DEBUGGING" = xyes; then
  AC_DEFINE(NDEBUG, 1, [Disable some debugging code])
d1010 1
d1020 7
a1026 2
DIX_LIB='$(top_builddir)/dix/libdix.la'
OS_LIB='$(top_builddir)/os/libos.la'
a1028 1
MINIMI_LIB='$(top_builddir)/mi/libminimi.la'
d1042 1
a1042 1
XSERVER_LIBS="${XSERVERLIBS_LIBS} ${SYS_LIBS} -lm"
d1045 33
d1086 1
a1086 1
        LIBS="$have_clock_gettime"
d1088 1
a1088 1
        LIBS=""
d1091 3
d1098 1
a1098 1
int main(int argc, char *argv[]) {
d1108 2
d1118 2
a1119 1
    XSERVER_LIBS="$XSERVER_LIBS $LIBS"
d1134 13
a1146 1
AC_DEFINE_UNQUOTED(X_BYTE_ORDER,[$ENDIAN],[Endian order])
d1157 1
a1157 1
PKG_CHECK_MODULES([DMXMODULES], [xmuu xext x11 xrender xfixes xfont xi dmxproto xau $XDMCP_MODULES], [have_dmx=yes], [have_dmx=no])
d1170 1
a1170 1
	XDMX_LIBS="$FB_LIB $MI_LIB $XEXT_LIB $RENDER_LIB $XTRAP_LIB $RECORD_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $OS_LIB $CWRAP_LIB"
d1209 1
a1209 1
	XVFB_LIBS="$FB_LIB $MI_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB"
d1225 1
a1225 1
	XNEST_LIBS="$FB_LIB $MI_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB"
a1236 1
		darwin*) XORG="no" ;;
d1253 1
a1253 1
	XGL_LIBS="$FB_LIB $MI_LIB $COMPOSITE_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $MIEXT_LAYER_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB"
d1274 1
a1274 1
	XEGL_LIBS="$FB_LIB $MI_LIB $COMPOSITE_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $MIEXT_LAYER_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB"
d1290 1
a1290 1
	XGLX_LIBS="$FB_LIB $MI_LIB $COMPOSITE_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $MIEXT_LAYER_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB"
d1295 1
a1295 1
XORG_CORE_LIBS="$DIX_LIB"
d1319 58
a1382 1
		XORG_OS_KBD="Lnx"
a1400 15

		# check whether struct kbd_repeat has the 'period' field.
		# on kernels < 2.5.42 it's called 'rate' instead.
		AC_TRY_COMPILE([
#include <linux/kd.h>
],[
int main () { 
	struct kbd_repeat k;
	k.period = 0;
	return 0;
}],
		[period_field="period"],
		[period_field="rate"])
		AC_DEFINE_UNQUOTED(LNX_KBD_PERIOD_NAME, [$period_field],
		                   [Name of the period field in struct kbd_repeat])
a1404 1
		XORG_OS_KBD="BSD"
a1415 1
		XORG_OS_KBD="BSD"
a1430 1
		XORG_OS_KBD="BSD"
d1473 2
d1505 4
a1508 1
		xorg_bus_ix86pci=yes
d1512 1
a1512 1
		  linux*|freebsd*|netbsd*|openbsd*|kfreebsd*-gnu)
d1532 1
a1532 1
		  freebsd*|kfreebsd*-gnu)
d1545 34
a1582 1
	AC_SUBST([XORG_OS_KBD])
a1591 27
	# The Xorg binary needs to export symbols so that they can be used from modules
	# Some platforms require extra flags to do this.   gcc should set these flags
	# when -rdynamic is passed to it, other compilers/linkers may need to be added
	# here.
	if test "x$GCC" = "xyes"; then
		GCC_WARNINGS1="-Wall -Wpointer-arith -Wstrict-prototypes"
		GCC_WARNINGS2="-Wmissing-prototypes -Wmissing-declarations"
		GCC_WARNINGS3="-Wnested-externs -fno-strict-aliasing"
		GCC_WARNINGS="$GCC_WARNINGS1 $GCC_WARNINGS2 $GCC_WARNINGS3"
		if test "x$WERROR" = "xyes"; then
			GCC_WARNINGS="${GCC_WARNINGS} -Werror"
		fi
		XSERVER_CFLAGS="$GCC_WARNINGS $XSERVER_CFLAGS"
		LD_EXPORT_SYMBOLS_FLAG="-rdynamic"
	fi
	case $host_os in
		openbsd*)
		case $host_cpu in
		m68k|m88k|vax)
			LD_EXPORT_SYMBOLS_FLAGS=""
			;;
		*)
			LD_EXPORT_SYMBOLS_FLAG="-Wl,--export-dynamic"
			;;
		esac
		;;
	esac
a1592 1
	AC_SUBST([LD_EXPORT_SYMBOLS_FLAG])
d1639 16
a1654 3
AM_CONDITIONAL(MFB, [test "x$XORG" = xyes])
AM_CONDITIONAL(CFB, [test "x$XORG" = xyes])
AM_CONDITIONAL(AFB, [test "x$XORG" = xyes])
d1662 3
a1664 3
	PKG_CHECK_MODULES([XPRINT], [printproto x11 xfont $XDMCP_MODULES xau])
	XPRINT_EXTENSIONS="$XEXT_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $RENDER_LIB $COMPOSITE_LIB $RANDR_LIB $XI_LIB $FIXES_LIB $DAMAGE_LIB $XI_LIB $GLX_LIBS"
	XPRINT_LIBS="$XPRINT_LIBS $DIX_LIB $XKB_LIB $XKB_STUB_LIB $XPRINT_EXTENSIONS $MI_LIB $MIEXT_DAMAGE_LIB $CWRAP_LIB $OS_LIB"
d1719 1
a1719 1
	XWIN_LIBS="$FB_LIB $MI_LIB $XEXT_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $DAMAGE_LIB $LAYER_LIB $XPSTUBS_LIB $OS_LIB $SHADOW_LIB"
d1778 15
d1796 1
a1796 1
XEYPHR_LIBS=
d1808 6
a1813 1
    if test "$ac_cv_header_sys_vm86_h" = yes; then
d1818 6
a1823 1
    if test "$ac_cv_header_linux_fb_h" = yes; then
d1828 34
a1877 3
    # dix os fb mi extension glx (NOTYET) damage shadow xpstubs
    #KDRIVE_PURE_LIBS="$DIX_LIB $OS_LIB $FB_LIB $XEXT_LIB $MIEXT_DAMAGE_LIB \
    #    $MIEXT_SHADOW_LIB $XPSTUBS_LIB"
d1891 2
a1892 1
    KDRIVE_LIBS="$DIX_LIB $KDRIVE_LIB $KDRIVE_OS_LIB $KDRIVE_PURE_LIBS $KDRIVE_STUB_LIB $TSLIB_LIBS"
d1896 12
a1907 12
    
    # check for SDL SDK
    AC_CHECK_HEADERS([SDL/SDL.h])
    if test "x$XSDL" = xauto; then
        XSDL="$ac_cv_header_SDL_SDL_h"
    fi
fi
AC_SUBST(KDRIVE_INCS)
AC_SUBST(KDRIVE_PURE_INCS)
AC_SUBST(KDRIVE_CFLAGS)
AC_SUBST(KDRIVE_PURE_LIBS)
AC_SUBST(KDRIVE_LIBS)
d1912 2
a1913 2
AM_CONDITIONAL(KDRIVEVESA, [test x"$ac_cv_header_sys_vm86_h" = xyes])
AM_CONDITIONAL(KDRIVEFBDEV, [test x"$ac_cv_header_linux_fb_h" = xyes])
a1914 15

# Xephyr needs nanosleep() which is in librt on Solaris
AC_CHECK_FUNC([nanosleep], [],
	AC_CHECK_LIB([rt], [nanosleep], XEPHYR_LIBS="$XEPHYR_LIBS -lrt"))

AM_CONDITIONAL(XEPHYR, [test x"$xephyr" = xyes])
XEPHYR_LIBS="$XEPHYR_LIBS $XSERVER_LIBS"
AC_SUBST([XEPHYR_LIBS])
AC_SUBST([XEPHYR_INCS])

if test x"$XSDL" = xyes; then
    AC_DEFINE(XSDLSERVER,,[Build Xsdl server])
    XSDL_LIBS="`sdl-config --libs` $XSERVER_LIBS"
    XSDL_INCS="`sdl-config --cflags` $XSERVER_CFLAGS"
fi
d1916 3
a1918 3
AC_SUBST([XSDL_LIBS])
AC_SUBST([XSDL_INCS])

a1925 1

a1942 1
AC_DEFINE(XFreeXDGA, 1, [Build XDGA support])
d1956 5
a1960 3
PKG_CHECK_MODULES([XORGCONFIG_DEP], [xkbfile x11])
AC_SUBST(XORGCONFIG_DEP_CFLAGS)
AC_SUBST(XORGCONFIG_DEP_LIBS)
d1964 2
a1965 2
	[Build xorgcfg GUI configuration utility (default: yes)]),
	[XORGCFG=$enableval],[XORGCFG=yes])
d1969 1
a2006 3
CFLAGS="$XSERVER_CFLAGS $CFLAGS"
AC_SUBST([CFLAGS])

d2009 4
a2013 1
DIX_CFLAGS="-DHAVE_DIX_CONFIG_H"
a2020 3
# XORG in this case refers to the roll-up releases, not the Xorg DDX.
XORG_RELEASE_VERSION

d2024 1
a2026 1
GL/mesa/array_cache/Makefile
d2036 1
d2051 1
d2058 2
d2086 1
d2137 13
@


1.11
log
@required bits to build Xwscons
@
text
@d1344 8
a1351 1
		LD_EXPORT_SYMBOLS_FLAG="-Wl,--export-dynamic"
@


1.10
log
@fix APM support.
@
text
@d120 3
d287 1
d1572 4
d1595 1
d1600 1
d1848 1
d1857 1
@


1.9
log
@Fix test for sysv ipc.
@
text
@d174 9
d1193 4
@


1.8
log
@Don't assume files checked out of CVS are executable.
@
text
@d153 2
@


1.7
log
@text -> test
@
text
@d600 2
@


1.6
log
@merge xserver 1.2.0
@
text
@d243 2
a244 2
AM_CONDITIONAL(HP300_VIDEO, [text "x$HP300_VIDEO" = xyes])
AM_CONDITIONAL(HPPA_VIDEO, [text "x$HPPA_VIDEO" = xyes])
@


1.5
log
@Build fixes for OpenBSD/alpha.
@
text
@d27 1
a27 1
AC_INIT([xorg-server], 1.1.99.903, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
d155 1
a155 1
int main () { 
d300 4
a303 4
DEFAULT_VERSION_MINOR=1
DEFAULT_VERSION_PATCH=99
DEFAULT_VERSION_SNAP=903
DEFAULT_RELEASE_DATE="1 December 2006"
d592 1
a592 1
	PKG_CHECK_MODULES([GL], [glproto >= 1.4.7])
d951 1
a951 1
PKG_CHECK_MODULES([DMXMODULES], [xmuu xext x11 xrender xfont xi dmxproto xau $XDMCP_MODULES], [have_dmx=yes], [have_dmx=no])
a1143 4
#ifdef __sparc__
#include <asm/param.h>
#include <asm/kbio.h>
#endif
d1546 6
a1551 1
    KDRIVE_OS_LIB='$(top_builddir)/hw/kdrive/linux/liblinux.a'
d1569 1
d1621 7
a1627 14
dnl CYGWIN does not define fd_set if _POSIX_SOURCE is defined
dnl _*_SOURCE on Solaris restricts to the standards, and removes non-standard
dnl functions which X uses
case $host_os in
	cygwin*) ;;
	solaris*) ;;
        darwin*) ;;
	freebsd*|netbsd*|openbsd*) ;;
	*) 
		AC_DEFINE(_POSIX_SOURCE, 1, [POSIX-compliant source])
		AC_DEFINE(_XOPEN_SOURCE, 500, [X/Open-compliant source])
		AC_DEFINE(_BSD_SOURCE, 1, [BSD-compliant source])
		;;
esac
@


1.4
log
@- merge xserver 1.1.99.903
- regen generated files
@
text
@d194 1
@


1.3
log
@OpenBSD/i386 uses freebsdPci routines too.
@
text
@a0 1
dnl $Id: configure.ac,v 1.2 2006/11/28 20:29:31 matthieu Exp $
d27 1
a27 1
AC_INIT([xorg-server], 1.1.99.902, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
a51 1

d301 2
a302 2
DEFAULT_VERSION_SNAP=902
DEFAULT_RELEASE_DATE="13 November 2006"
d373 1
a373 1
DEFAULT_FONT_PATH="${FONTDIR}/misc/,${FONTDIR}/TTF/,${FONTDIR}/OTF,${FONTDIR}/Type1/,${FONTDIR}/CID/,${FONTDIR}/100dpi/,${FONTDIR}/75dpi/"
d628 1
a628 1
	PKG_CHECK_MODULES([LIBDRM], [libdrm])
d632 1
d1350 1
a1764 1
hw/xfree86/os-support/drm/Makefile
@


1.2
log
@OpenBSD local modifications:
- privilege separation
- some snprintf/strlc{at,py} conversions
- support for more architectures
- signal handler fixes
- default mouse wheel support in config tools
- sunmouse protocol
@
text
@d1 1
a1 1
dnl $Id: configure.ac,v 1.1.1.1 2006/11/26 18:13:43 matthieu Exp $
d1188 1
a1188 1
		  i*86|amd64*|x86_64*)
d1393 1
a1393 1
	xpconfigdir=$libdir/X11/xserver
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
dnl $Id$
d244 2
d400 10
d1188 1
a1188 1
		  i*86|amd64*|x86_64*|ia64*)
d1272 8
a1279 1
		xorg_bus_sparc="yes"
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.1.99.903 from X.Org 7.2RC3
@
text
@d28 1
a28 1
AC_INIT([xorg-server], 1.1.99.903, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
d53 1
d301 2
a302 2
DEFAULT_VERSION_SNAP=903
DEFAULT_RELEASE_DATE="1 December 2006"
d373 1
a373 1
DEFAULT_FONT_PATH="${FONTDIR}/misc/,${FONTDIR}/TTF/,${FONTDIR}/OTF,${FONTDIR}/Type1/,${FONTDIR}/100dpi/,${FONTDIR}/75dpi/"
d618 1
a618 1
	PKG_CHECK_MODULES([LIBDRM], [libdrm >= 2.3.0])
a621 1
	AC_SUBST(LIBDRM_LIBS)
a1331 1
	AC_DEFINE_DIR(DEFAULT_LIBRARY_PATH, libdir, [Default library install path])
d1746 1
@


1.1.1.3
log
@Import xserver version 1.2.0 (X.Org 7.2 final).
@
text
@d28 1
a28 1
AC_INIT([xorg-server], 1.2.0, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
d156 1
a156 1
{ 
d298 4
a301 4
DEFAULT_VERSION_MINOR=2
DEFAULT_VERSION_PATCH=0
DEFAULT_VERSION_SNAP=0
DEFAULT_RELEASE_DATE="22 January 2007"
d580 1
a580 1
	PKG_CHECK_MODULES([GL], [glproto >= 1.4.8])
d939 1
a939 1
PKG_CHECK_MODULES([DMXMODULES], [xmuu xext x11 xrender xfixes xfont xi dmxproto xau $XDMCP_MODULES], [have_dmx=yes], [have_dmx=no])
d1132 4
d1531 1
a1531 6
    case $host_os in
	*linux*)
	    KDRIVE_OS_LIB='$(top_builddir)/hw/kdrive/linux/liblinux.a'
            KDRIVELINUX=yes
	    ;;
    esac
a1548 1
AM_CONDITIONAL(KDRIVELINUX, [test "x$KDRIVELINUX" = xyes])
d1600 14
a1613 7
AC_TRY_COMPILE([
#include <features.h>
#ifndef __GLIBC__
#error not glibc
#endif
], [], [AC_DEFINE(_GNU_SOURCE, 1,
	[ Enable GNU and other extensions to the C environment for glibc])])
@


1.1.1.4
log
@xserver 1.4
@
text
@d1 1
a1 1
dnl Copyright Â© 2003-2007 Keith Packard, Daniel Stone
d3 1
a3 6
dnl Permission is hereby granted, free of charge, to any person obtaining a
dnl copy of this software and associated documentation files (the "Software"),
dnl to deal in the Software without restriction, including without limitation
dnl the rights to use, copy, modify, merge, publish, distribute, sublicense,
dnl and/or sell copies of the Software, and to permit persons to whom the
dnl Software is furnished to do so, subject to the following conditions:
d5 9
a13 3
dnl The above copyright notice and this permission notice (including the next
dnl paragraph) shall be included in all copies or substantial portions of the
dnl Software.
d15 7
a21 11
dnl THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
dnl IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
dnl FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
dnl THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
dnl LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
dnl FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
dnl DEALINGS IN THE SOFTWARE.
dnl
dnl Authors: Keith Packard <keithp@@keithp.com>
dnl          Daniel Stone <daniel@@fooishbar.org>
dnl          an unwitting cast of miscellaneous others
d26 3
a28 1
AC_INIT([xorg-server], 1.4, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
a63 1
AC_SYS_LARGEFILE
a65 26
dnl Check for dtrace program (needed to build Xserver dtrace probes)
AC_ARG_WITH(dtrace, AS_HELP_STRING([--with-dtrace=PATH],
	     [Enable dtrace probes (default: enabled if dtrace found)]),
	     [WDTRACE=$withval], [WDTRACE=auto])
if test "x$WDTRACE" = "xyes" -o "x$WDTRACE" = "xauto" ; then
	AC_PATH_PROG(DTRACE, [dtrace], [not_found], [$PATH:/usr/sbin])
	if test "x$DTRACE" = "xnot_found" ; then
		if test "x$WDTRACE" = "xyes" ; then
			AC_MSG_FAILURE([dtrace requested but not found])
		fi
		WDTRACE="no"
	fi
fi
if test "x$WDTRACE" != "xno" ; then
  AC_DEFINE(XSERVER_DTRACE, 1, 
      [Define to 1 if the DTrace Xserver provider probes should be built in.])
fi
AM_CONDITIONAL(XSERVER_DTRACE, [test "x$WDTRACE" != "xno"])

# DTrace support uses XErrorDB to get request names
AC_ARG_WITH(xerrordb,
            AS_HELP_STRING([--with-xerrordb=PATH], [Path to XErrorDB file (default: ${datadir}/X11/XErrorDB)]),
	    [ XERRORDB_PATH="$withval" ],
	    [ XERRORDB_PATH="${datadir}/X11/XErrorDB" ])
AC_DEFINE_DIR(XERRORDB_PATH, XERRORDB_PATH, [Path to XErrorDB file])

a80 58
# Checks for headers/macros for byte swapping
# Known variants:
#	<byteswap.h> bswap_16, bswap_32, bswap_64  (glibc)
#	<sys/endian.h> __swap16, __swap32, __swap64 (OpenBSD)
#	<sys/endian.h> bswap16, bswap32, bswap64 (other BSD's)
#	and a fallback to local macros if none of the above are found

# if <byteswap.h> is found, assume it's the correct version
AC_CHECK_HEADERS([byteswap.h])

# if <sys/endian.h> is found, have to check which version
AC_CHECK_HEADER([sys/endian.h], [HAVE_SYS_ENDIAN_H="yes"], [HAVE_SYS_ENDIAN_H="no"])

if test "x$HAVE_SYS_ENDIAN_H" = "xyes" ; then
	AC_MSG_CHECKING([for __swap16 variant of <sys/endian.h> byteswapping macros])
	AC_LINK_IFELSE([AC_LANG_PROGRAM([
#include <sys/endian.h>
 ], [
int a = 1, b;
b = __swap16(a);
 ])
], [SYS_ENDIAN__SWAP='yes'], [SYS_ENDIAN__SWAP='no'])
	AC_MSG_RESULT([$SYS_ENDIAN__SWAP])

	AC_MSG_CHECKING([for bswap16 variant of <sys/endian.h> byteswapping macros])
	AC_LINK_IFELSE([AC_LANG_PROGRAM([
#include <sys/endian.h>
 ], [
int a = 1, b;
b = bswap16(a);
 ])
], [SYS_ENDIAN_BSWAP='yes'], [SYS_ENDIAN_BSWAP='no'])
	AC_MSG_RESULT([$SYS_ENDIAN_BSWAP])

    	if test "$SYS_ENDIAN_BSWAP" = "yes" ; then
		USE_SYS_ENDIAN_H=yes
		BSWAP=bswap
	else	
	    	if test "$SYS_ENDIAN__SWAP" = "yes" ; then
			USE_SYS_ENDIAN_H=yes
			BSWAP=__swap
		else
			USE_SYS_ENDIAN_H=no
		fi
	fi

	if test "$USE_SYS_ENDIAN_H" = "yes" ; then
	    AC_DEFINE([USE_SYS_ENDIAN_H], 1, 
		[Define to use byteswap macros from <sys/endian.h>])
	    AC_DEFINE_UNQUOTED([bswap_16], ${BSWAP}16, 
			[Define to 16-bit byteswap macro])
	    AC_DEFINE_UNQUOTED([bswap_32], ${BSWAP}32, 
			[Define to 32-bit byteswap macro])
	    AC_DEFINE_UNQUOTED([bswap_64], ${BSWAP}64, 
			[Define to 64-bit byteswap macro])
	fi
fi

d89 1
a89 1
	AC_DEFINE(HAS_GETDTABLESIZE, 1, [Have the 'getdtablesize' function.]))
d91 1
a91 1
	AC_DEFINE(HAS_GETIFADDRS, 1, [Have the 'getifaddrs' function.]))
d93 1
a93 1
	AC_DEFINE(HAS_GETPEEREID, 1, [Have the 'getpeereid' function.]))
d95 1
a95 1
	AC_DEFINE(HAS_GETPEERUCRED, 1, [Have the 'getpeerucred' function.]))
d102 1
a102 1
AC_CHECK_FUNC([mmap], AC_DEFINE(HAS_MMAP, 1, [Have the 'mmap' function.]))
a105 1
AC_CHECK_LIB(m, cbrt, AC_DEFINE(HAVE_CBRT, 1, [Have the 'cbrt' function]))
a203 1
	        darwin*)	use_x86_asm="no" ;;
a228 1
	        darwin*)	use_x86_asm="no" ;;
a263 1
	AC_DEFINE(PCVT_SUPPORT, 1, [System has PCVT console])
a275 3
  *solaris*)
	PKG_CHECK_EXISTS(libdrm, DRI=yes, DRI=no)
	;;
d279 7
a285 7
XORG_RELEASE_VERSION
dnl augment XORG_RELEASE_VERSION for our snapshot number and to expose the
dnl major number
PVMAJOR=`echo $PACKAGE_VERSION | cut -d . -f 1`
PVS=`echo $PACKAGE_VERSION | cut -d . -f 4`
if test "x$PVS" = "x"; then
	PVS="0"
d287 2
d290 13
a302 7
VENDOR_RELEASE="((($PVMAJOR) * 10000000) + (($PVM) * 100000) + (($PVP) * 1000) + $PVS)"
VENDOR_MAN_VERSION="Version ${PACKAGE_VERSION}"

VENDOR_NAME="The X.Org Foundation"
VENDOR_NAME_SHORT="X.Org"
RELEASE_DATE="5 September 2007"
VENDOR_WEB="http://wiki.x.org"
d316 1
a316 1
AC_ARG_WITH(vendor-name,     AS_HELP_STRING([--with-vendor-name=VENDOR],
d318 3
a320 2
				[ VENDOR_NAME="$withval" ], [])
AC_ARG_WITH(vendor-name-short, AS_HELP_STRING([--with-vendor-name-short=VENDOR],
d322 22
a343 1
				[ VENDOR_NAME_SHORT="$withval" ], [])
d346 2
a347 1
				[ VENDOR_WEB="$withval" ], [])
d360 1
a360 1
AC_ARG_WITH(os-name,         AS_HELP_STRING([--with-os-name=OSNAME], [Name of OS (default: output of "uname -srm")]),
d362 1
a362 1
				[ OSNAME=`uname -srm` ])
d366 3
a368 3
AC_ARG_WITH(builderstring,   AS_HELP_STRING([--with-builderstring=BUILDERSTRING], [Additional builder string]),
				[ BUILDERSTRING="$withval" ]
				[ ])
d385 3
a387 7
AC_ARG_WITH(serverconfig-path, AS_HELP_STRING([--with-serverconfig-path=PATH], [Path to server config (default: ${libdir}/xserver)]),
				[ SERVERCONFIG="$withval" ],
				[ SERVERCONFIG="${libdir}/xserver" ])
APPLE_APPLICATIONS_DIR="${bindir}/Applications"
AC_ARG_WITH(apple-applications-dir,AS_HELP_STRING([--with-apple-applications-dir=PATH], [Path to the Applications directory (default: ${bindir}/Applications)]),
                               [ APPLE_APPLICATIONS_DIR="${withval}" ].
                               [ APPLE_APPLICATIONS_DIR="${bindir}/Applications" ])
a395 20
AC_ARG_ENABLE(builtin-fonts,  AS_HELP_STRING([--enable-builtin-fonts], [Use only built-in fonts (default: use external)]),
                                [BUILTIN_FONTS=$enableval],
                                [BUILTIN_FONTS=no])
AC_ARG_ENABLE(null-root-cursor, AS_HELP_STRING([--enable-null-root-cursor], [Use an empty root cursor (default: use core cursor)]),
                                 [NULL_ROOT_CURSOR=$enableval],
                                 [NULL_ROOT_CURSOR=no])

dnl GLX build options
AC_ARG_WITH(mesa-source,     AS_HELP_STRING([--with-mesa-source=MESA_SOURCE], [Path to Mesa source tree]),
                                [ MESA_SOURCE="$withval" ],
                                [ MESA_SOURCE="" ])
AC_ARG_WITH(dri-driver-path,  AS_HELP_STRING([--with-dri-driver-path=PATH], [Path to DRI drivers (default: ${libdir}/dri)]),
				[ DRI_DRIVER_PATH="$withval" ],
				[ DRI_DRIVER_PATH="${libdir}/dri" ])
AC_ARG_ENABLE(aiglx,          AS_HELP_STRING([--enable-aiglx], [Build accelerated indirect GLX (default: enabled)]),
                                [AIGLX=$enableval],
                                [AIGLX=yes])
AC_ARG_ENABLE(glx-tls,        AS_HELP_STRING([--enable-glx-tls], [Build GLX with TLS support (default: disabled)]),
                                [GLX_USE_TLS=$enableval],
                                [GLX_USE_TLS=no])
a403 1
AC_ARG_ENABLE(quartz,         AS_HELP_STRING([--enable-quartz], [Build with darwin quartz support (default: auto)]), [XQUARTZ=$enableval], [XQUARTZ=auto])
d405 1
a405 1
AC_ARG_ENABLE(dga,            AS_HELP_STRING([--disable-dga], [Build DGA extension (default: auto)]), [DGA=$enableval], [DGA=auto])
d410 2
d414 3
a416 3
AC_ARG_ENABLE(xf86vidmode,    AS_HELP_STRING([--disable-xf86vidmode], [Build XF86VidMode extension (default: auto)]), [XF86VIDMODE=$enableval], [XF86VIDMODE=auto])
AC_ARG_ENABLE(xf86misc,       AS_HELP_STRING([--disable-xf86misc], [Build XF86Misc extension (default: auto)]), [XF86MISC=$enableval], [XF86MISC=auto])
AC_ARG_ENABLE(xace,           AS_HELP_STRING([--disable-xace], [Build X-ACE extension (default: enabled)]), [XACE=$enableval], [XACE=yes])
d429 1
a429 2
AC_ARG_ENABLE(config-dbus,    AS_HELP_STRING([--enable-config-dbus], [Build D-BUS API support (default: no)]), [CONFIG_DBUS_API=$enableval], [CONFIG_DBUS_API=no])
AC_ARG_ENABLE(config-hal,     AS_HELP_STRING([--disable-config-hal], [Build HAL support (default: auto)]), [CONFIG_HAL=$enableval], [CONFIG_HAL=auto])
d434 1
a434 1
AC_ARG_ENABLE(dmx,    	      AS_HELP_STRING([--enable-dmx], [Build DMX server (default: no)]), [DMX=$enableval], [DMX=no])
d438 1
a438 1
AC_ARG_ENABLE(xprint,         AS_HELP_STRING([--enable-xprint], [Build Xprint extension and server (default: no)]), [XPRINT=$enableval], [XPRINT=no])
a441 4
dnl legacy fb support
AC_ARG_ENABLE(mfb,            AS_HELP_STRING([--enable-mfb], [Build legacy mono framebuffer support (default: enabled)]), [MFB=$enableval], [MFB=$XORG])
AC_ARG_ENABLE(cfb,            AS_HELP_STRING([--enable-cfb], [Build legacy color framebuffer support (default: enabled)]), [CFB=$enableval], [CFB=$XORG])
AC_ARG_ENABLE(afb,            AS_HELP_STRING([--enable-afb], [Build legacy advanced framebuffer support (default: enabled)]), [AFB=$enableval], [AFB=$XORG])
a445 3
AC_ARG_ENABLE(xfake,          AS_HELP_STRING([--enable-xfake], [Build the kdrive 'fake' server (default: auto)]), [XFAKE=$enableval], [XFAKE=auto])
AC_ARG_ENABLE(xfbdev,         AS_HELP_STRING([--enable-xfbdev], [Build the kdrive framebuffer device server (default: auto)]), [XFBDEV=$enableval], [XFBDEV=auto])
AC_ARG_ENABLE(kdrive-vesa,    AS_HELP_STRING([--enable-kdrive-vesa], [Build the kdrive VESA-based servers (default: auto)]), [KDRIVEVESA=$enableval], [KDRIVEVESA=auto])
a515 4
PIXMAN="[pixman-1 >= 0.9.5]"
PKG_CHECK_MODULES(PIXMAN, $PIXMAN)
AC_SUBST(PIXMAN_CFLAGS)

d517 2
a518 50
# Require updated renderproto for ABI sanity if we're 64-bit.
if test "$ac_cv_sizeof_unsigned_long" = 8; then
	RENDERPROTO="[renderproto >= 0.9.3]"
else
	RENDERPROTO="renderproto"
fi
REQUIRED_MODULES="[randrproto >= 1.2] $RENDERPROTO [fixesproto >= 4.0] [damageproto >= 1.1] xcmiscproto xextproto [xproto >= 7.0.9] xtrans [scrnsaverproto >= 1.1] bigreqsproto resourceproto fontsproto [inputproto >= 1.4.2] [kbproto >= 1.0.3]"
REQUIRED_LIBS="xfont xau fontenc $PIXMAN"

dnl HAVE_DBUS is true if we actually have the D-Bus library, whereas
dnl CONFIG_DBUS_API is true if we want to enable the D-Bus config
dnl API.
PKG_CHECK_MODULES(DBUS, dbus-1, [HAVE_DBUS=yes], [HAVE_DBUS=no])
if test "x$HAVE_DBUS" = xyes; then
	AC_DEFINE(HAVE_DBUS, 1, [Have D-Bus support])
fi
AM_CONDITIONAL(HAVE_DBUS, [test "x$HAVE_DBUS" = xyes])

if test "x$CONFIG_DBUS_API" = xauto; then
	CONFIG_DBUS_API="$HAVE_DBUS"
fi
if test "x$CONFIG_DBUS_API" = xyes; then
	if ! test "x$HAVE_DBUS" = xyes; then
		AC_MSG_ERROR([D-Bus configuration API requested, but D-Bus is not installed.])
	fi

	AC_DEFINE(CONFIG_DBUS_API, 1, [Use the D-Bus input configuration API])
	NEED_DBUS="yes"
fi
AM_CONDITIONAL(CONFIG_DBUS_API, [test "x$CONFIG_DBUS_API" = xyes])

PKG_CHECK_MODULES(HAL, hal, [HAVE_HAL=yes], [HAVE_HAL=no])
if test "x$CONFIG_HAL" = xauto; then
	CONFIG_HAL="$HAVE_HAL"
fi
if test "x$CONFIG_HAL" = xyes; then
	if ! test "x$HAVE_HAL" = xyes; then
		AC_MSG_ERROR([HAL hotplug API requested, but HAL is not installed.])
	fi

	AC_DEFINE(CONFIG_HAL, 1, [Use the HAL hotplug API])
        REQUIRED_LIBS="$REQUIRED_LIBS hal"
	NEED_DBUS="yes"
fi
AM_CONDITIONAL(CONFIG_HAL, [test "x$CONFIG_HAL" = xyes])

if test "x$NEED_DBUS" = xyes; then
	REQUIRED_LIBS="$REQUIRED_LIBS dbus-1"
fi
CONFIG_LIB='$(top_builddir)/config/libconfig.a'
d534 4
d542 1
a542 1
	REQUIRED_MODULES="$REQUIRED_MODULES [compositeproto >= 0.4]"
a618 3
	PKG_CHECK_EXISTS(libdrm >= 2.2.0,
			 [AC_DEFINE([HAVE_LIBDRM_2_2], 1,
			 [Has version 2.2 (or newer) of the drm library])])
d699 8
a715 6
if test "x$BUILTIN_FONTS" = xyes; then
       AC_DEFINE(BUILTIN_FONTS, 1, [Use only built-in fonts])
       AC_DEFINE(NOFONTSERVERACCESS, 1, [Avoid using a font server])
       FONTPATH="built-ins"
fi

d740 4
d746 6
a751 3
AC_DEFINE(XINPUT, 1, [Support X Input extension])
XI_LIB='$(top_builddir)/Xi/libXi.la'
XI_INC='-I$(top_srcdir)/Xi'
d765 1
a765 5
                                        [Do not have 'strcasecmp'.]))

if test "x$NULL_ROOT_CURSOR" = xyes; then
        AC_DEFINE(NULL_ROOT_CURSOR, 1, [Use an empty root cursor])
fi
d807 15
a823 1
AC_DEFINE_DIR(SERVERCONFIGdir, SERVERCONFIG, [Server config path])
d826 3
a828 2
AC_DEFINE_UNQUOTED(XVENDORNAME, ["$VENDOR_NAME"], [Vendor name])
AC_DEFINE_UNQUOTED(XVENDORNAMESHORT, ["$VENDOR_NAME_SHORT"], [Short vendor name])
a831 5

if test -z "$OSNAME"; then
    OSNAME="UNKNOWN"
fi

d834 2
a835 4
AC_DEFINE_UNQUOTED(BUILDERSTRING, ["$BUILDERSTRING"], [Builder string])

AC_SUBST([VENDOR_NAME])
AC_SUBST([VENDOR_NAME_SHORT])
d843 1
d845 2
a846 4
if test "x$DEBUGGING" = xyes; then
       AC_DEFINE(DEBUG, 1, [Enable debugging code])
else
       AC_DEFINE(NDEBUG, 1, [Disable some debugging code])
a847 1
AM_CONDITIONAL(DEBUG, [test "x$DEBUGGING" = xyes])
d857 2
a858 7
if test "x$WDTRACE" != "xno" ; then
  DIX_LIB='$(top_builddir)/dix/dix.O'
  OS_LIB='$(top_builddir)/os/os.O'
else
  DIX_LIB='$(top_builddir)/dix/libdix.la'
  OS_LIB='$(top_builddir)/os/libos.la'
fi
d861 1
d875 1
a875 1
XSERVER_LIBS="${XSERVERLIBS_LIBS} ${SYS_LIBS} ${LIBS}"
a877 26
# The Xorg binary needs to export symbols so that they can be used from modules
# Some platforms require extra flags to do this.   gcc should set these flags
# when -rdynamic is passed to it, other compilers/linkers may need to be added
# here.
if test "x$GCC" = "xyes"; then
       GCC_WARNINGS1="-Wall -Wpointer-arith -Wstrict-prototypes"
       GCC_WARNINGS2="-Wmissing-prototypes -Wmissing-declarations"
       GCC_WARNINGS3="-Wnested-externs -fno-strict-aliasing"
       GCC_WARNINGS="$GCC_WARNINGS1 $GCC_WARNINGS2 $GCC_WARNINGS3"
       if test "x$WERROR" = "xyes"; then
               GCC_WARNINGS="${GCC_WARNINGS} -Werror"
       fi
       XSERVER_CFLAGS="$GCC_WARNINGS $XSERVER_CFLAGS"

       LD_EXPORT_SYMBOLS_FLAG="-rdynamic"
fi
case $host_os in
       darwin*)
       LD_EXPORT_SYMBOLS_FLAG=""
       ;;
       openbsd*)
       LD_EXPORT_SYMBOLS_FLAG="-Wl,--export-dynamic"
       ;;
esac
AC_SUBST([LD_EXPORT_SYMBOLS_FLAG])

d886 1
a886 1
        CLOCK_LIBS="$have_clock_gettime"
d888 1
a888 1
        CLOCK_LIBS=""
a890 3
    LIBS_SAVE="$LIBS"
    LIBS="$CLOCK_LIBS"

d895 1
a895 1
int main(int argc, char *argv[[]]) {
a904 2

    LIBS="$LIBS_SAVE"
d913 1
a913 2
    XSERVER_LIBS="$XSERVER_LIBS $CLOCK_LIBS"
    LIBS="$LIBS $CLOCK_LIBS"
d928 1
a928 13
AC_DEFINE_UNQUOTED(_X_BYTE_ORDER,[$ENDIAN],[Endian order])
AH_VERBATIM([X_BYTE_ORDER],[
/* Deal with multiple architecture compiles on Mac OS X */
#ifndef __APPLE_CC__
#define X_BYTE_ORDER _X_BYTE_ORDER
#else
#ifdef __BIG_ENDIAN__
#define X_BYTE_ORDER X_BIG_ENDIAN
#else
#define X_BYTE_ORDER X_LITTLE_ENDIAN
#endif
#endif
])
d939 1
a939 1
PKG_CHECK_MODULES([DMXMODULES], [xmuu xext x11 xrender xfixes xfont xi dmxproto xau $XDMCP_MODULES $PIXMAN], [have_dmx=yes], [have_dmx=no])
d952 1
a952 1
	XDMX_LIBS="$FB_LIB $MI_LIB $XEXT_LIB $CONFIG_LIB $RENDER_LIB $XTRAP_LIB $RECORD_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $OS_LIB $CWRAP_LIB"
d991 1
a991 1
	XVFB_LIBS="$FB_LIB $MI_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB $LIBS"
d1007 1
a1007 1
	XNEST_LIBS="$MI_LIB $CONFIG_LIB $XSERVER_LIBS $FB_LIB $FIXES_LIB $XEXT_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB $LIBS"
d1019 1
d1036 1
a1036 1
	XGL_LIBS="$FB_LIB $MI_LIB $COMPOSITE_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $MIEXT_LAYER_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB"
d1057 1
a1057 1
	XEGL_LIBS="$FB_LIB $MI_LIB $COMPOSITE_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $MIEXT_LAYER_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB"
d1073 1
a1073 1
	XGLX_LIBS="$FB_LIB $MI_LIB $COMPOSITE_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $MIEXT_LAYER_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $XPSTUBS_LIB $CWRAP_LIB $OS_LIB"
d1078 1
a1078 1
XORG_CORE_LIBS="$DIX_LIB $CONFIG_LIB"
a1101 58
         darwin*)
               XORG_OS="Darwin"
               build_darwin=yes
               if test "X$XQUARTZ" = Xauto; then
                 AC_CACHE_CHECK([for Carbon framework],xorg_cv_Carbon_framework,[
                 save_LDFLAGS=$LDFLAGS
                 LDFLAGS="$LDFLAGS -framework Carbon"
                 AC_LINK_IFELSE([char FSFindFolder();
int main() {
FSFindFolder();
return 0;}
                 ],[xorg_cv_Carbon_framework=yes],
                  [xorg_cv_Carbon_framework=no])
                  LDFLAGS=$save_LDFLAGS])
                 if test "X$xorg_cv_Carbon_framework" = Xyes; then
                   AC_DEFINE([DARWIN_WITH_QUARTZ],[1],
                         [Have Quartz])
                   XQUARTZ=yes
                 else
                   XQUARTZ=no
                 fi
               fi
#	       glxAGL / glxCGL don't work yet
#               AC_CACHE_CHECK([for AGL framework],xorg_cv_AGL_framework,[
#               save_LDFLAGS=$LDFLAGS
#               LDFLAGS="$LDFLAGS -framework AGL"
#               AC_LINK_IFELSE([char aglEnable();
#int main() {
#aglEnable();
#return 0;}
#               ],[xorg_cv_AGL_framework=yes],
#               [xorg_cv_AGL_framework=no])
#               LDFLAGS=$save_LDFLAGS
#               ])
               xorg_cv_AGL_framework=no
	       DARWIN_LIBS="$FB_LIB $MI_LIB $FIXES_LIB $XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $GLX_LIBS $RENDER_LIB $RANDR_LIB $DAMAGE_LIB $MIEXT_DAMAGE_LIB $MIEXT_SHADOW_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $XPSTUBS_LIB $OS_LIB"
	       AC_SUBST([DARWIN_LIBS])
               AC_CHECK_LIB([Xplugin],[xp_init],[:])
               AC_SUBST([APPLE_APPLICATIONS_DIR])
               CFLAGS="${CFLAGS} -D__DARWIN__"
               PLIST_VERSION_STRING=$PACKAGE_VERSION
               AC_SUBST([PLIST_VERSION_STRING])
               PLIST_VENDOR_WEB=$VENDOR_WEB
               AC_SUBST([PLIST_VENDOR_WEB])
               # Not sure that we should be disabling all these...
               if test "x$XF86MISC" = xyes || test "x$XF86MISC" = xauto; then
                       AC_MSG_NOTICE([Disabling XF86Misc extension])
                       XF86MISC=no
               fi
               if test "x$XF86VIDMODE" = xyes || test "x$XF86VIDMODE" = xauto; then
                       AC_MSG_NOTICE([Disabling XF86VidMode extension])
                       XF86VIDMODE=no
               fi
               if test "x$DGA" = xyes || test "x$DGA" = xauto; then
                       AC_MSG_NOTICE([Disabling DGA extension])
                       DGA=no
               fi
               ;;
d1108 1
d1127 15
d1146 1
d1158 1
d1170 1
a1212 2
			else
				XORG_CFLAGS="$XORG_CFLAGS -DXF86PM"
d1243 1
a1243 4
               case $host_os in
                 darwin*) ;;
                 *) xorg_bus_ix86pci=yes ;;
               esac
d1247 1
a1247 1
		  darwin*|linux*|freebsd*|netbsd*|openbsd*|kfreebsd*-gnu)
d1260 1
a1260 1
		  darwin*|freebsd*|kfreebsd*-gnu)
a1272 34
	if test "x$DGA" = xauto; then
		PKG_CHECK_MODULES(DGA, xf86dgaproto, [DGA=yes], [DGA=no])
	fi
	if test "x$DGA" = xyes; then
		XORG_MODULES="$XORG_MODULES xf86dgaproto"
		PKG_CHECK_MODULES(DGA, xf86dgaproto)
		AC_DEFINE(DGA, 1, [Support DGA extension])
		AC_DEFINE(XFreeXDGA, 1, [Build XDGA support])
	fi

	if test "x$XF86MISC" = xauto; then
		PKG_CHECK_MODULES(XF86MISC, xf86miscproto, [XF86MISC=yes], [XF86MISC=no])
	fi
	if test "x$XF86MISC" = xyes; then
		XORG_MODULES="$XORG_MODULES xf86miscproto"
		PKG_CHECK_MODULES(XF86MISC, xf86miscproto)
		AC_DEFINE(XF86MISC, 1, [Support XFree86 miscellaneous extensions])
	fi

	if test "x$XF86VIDMODE" = xauto; then
		PKG_CHECK_MODULES(XF86VIDMODE, xf86vidmodeproto, [XF86VIDMODE=yes], [XF86VIDMODE=no])
	fi
	if test "x$XF86VIDMODE" = xyes; then
		XORG_MODULES="$XORG_MODULES xf86vidmodeproto"
		PKG_CHECK_MODULES(XF86VIDMODE, xf86vidmodeproto)
		AC_DEFINE(XF86VIDMODE, 1, [Support XFree86 Video Mode extension])
	fi

	if test -n "$XORG_MODULES"; then
	        PKG_CHECK_MODULES(XORG_MODULES, [$XORG_MODULES])
	        XORG_CFLAGS="$XORG_CFLAGS $XORG_MODULES_CFLAGS"
	        XORG_LIBS="$XORG_LIBS $XORG_MODULES_LIBS"
	fi

d1277 1
d1287 20
d1308 1
d1355 3
a1357 16
AM_CONDITIONAL([BUILD_DARWIN],[test "X$build_darwin" = Xyes])
AM_CONDITIONAL([XQUARTZ],[test "X$XQUARTZ" = Xyes])
AM_CONDITIONAL(DGA, [test "x$DGA" = xyes])

dnl legacy fb support
test "x$MFB" = xauto && MFB="$XORG"
test "x$CFB" = xauto && CFB="$XORG"
test "x$AFB" = xauto && AFB="$XORG"
AM_CONDITIONAL(MFB, [test "x$MFB" = xyes])
AM_CONDITIONAL(CFB, [test "x$CFB" = xyes])
AM_CONDITIONAL(AFB, [test "x$AFB" = xyes])
if test "x$MFB" = xyes -o "x$CFB" = xyes -o "x$AFB" = xyes; then
	if test "x$XORG" != xyes; then
		AC_MSG_ERROR([legacy fb support requires the Xorg server])
	fi
fi
d1365 3
a1367 3
	PKG_CHECK_MODULES([XPRINT], [printproto x11 xfont $XDMCP_MODULES xau $PIXMAN])
	XPRINT_EXTENSIONS="$XEXT_LIB $CONFIG_LIB $DBE_LIB $XTRAP_LIB $RECORD_LIB $RENDER_LIB $COMPOSITE_LIB $RANDR_LIB $XI_LIB $FIXES_LIB $DAMAGE_LIB $XI_LIB $GLX_LIBS"
	XPRINT_LIBS="$DIX_LIB $XKB_LIB $XKB_STUB_LIB $XPRINT_EXTENSIONS $MI_LIB $MIEXT_DAMAGE_LIB $CWRAP_LIB $OS_LIB $LIBS $XPRINT_LIBS"
d1422 1
a1422 1
	XWIN_LIBS="$FB_LIB $MI_LIB $XEXT_LIB $CONFIG_LIB $XI_LIB $XKB_LIB $XKB_STUB_LIB $COMPOSITE_LIB $DAMAGE_LIB $LAYER_LIB $XPSTUBS_LIB $OS_LIB $SHADOW_LIB"
a1480 15
dnl Darwin / OS X DDX
AM_CONDITIONAL(HAVE_X_PLUGIN, [test "x$ac_cv_lib_Xplugin_xp_init" = xyes])
AM_CONDITIONAL(HAVE_AGL_FRAMEWORK, [test "x$xorg_cv_AGL_framework" = xyes])
# Support for objc in autotools is minimal and not
# documented.
OBJC='$(CC)'
OBJCLD='$(CCLD)'
OBJCLINK='$(LINK)'
OBJCFLAGS='$(CFLAGS)'
AC_SUBST([OBJC])
AC_SUBST([OBJCCLD])
AC_SUBST([OBJCLINK])
AC_SUBST([OBJCFLAGS])
# internal, undocumented automake func follows :(
_AM_DEPENDENCIES([OBJC])
d1484 1
a1484 1
XEPHYR_LIBS=
d1496 1
a1496 6
    if test "$ac_cv_header_sys_vm86_h" = yes && test "x$KDRIVEVESA" = xauto; then
        KDRIVEVESA=yes
    fi

    if test "x$KDRIVEVESA" = xyes; then
        KDRIVEFBDEVLIB=yes
d1501 1
a1501 6
    if test "$ac_cv_header_linux_fb_h" = yes && test "x$XFBDEV" = xauto; then
        XFBDEV=yes
    fi

    if test "x$XFBDEV" = xyes; then
        KDRIVEFBDEVLIB=yes
a1505 34
    AC_CHECK_LIB(ts, ts_open, [HAVE_TSLIB="yes"])
    if test "x$TSLIB" = xauto && test "x$HAVE_TSLIB" = xyes; then
        TSLIB=yes
    fi

    if test "x$TSLIB" = xyes; then
        if ! test "x$HAVE_TSLIB" = xyes; then
            AC_MSG_ERROR([tslib must be installed to build the tslib input driver.])
        fi
        TSLIB_LIBS="-lts"
        AC_DEFINE(TSLIB, 1, [Have tslib support])
    fi

    AC_CHECK_HEADERS([SDL/SDL.h])
    if test x"$ac_cv_header_SDL_SDL_h" = xyes && test "x$XSDL" = xauto; then
       XSDL=yes
    fi

    if test x"$XSDL" = xyes; then
       # PKG_CHECK_MODULES(XSDL_EXTRA, Xfont xau $XDMCP_MODULES)
       AC_DEFINE(XSDLSERVER,1,[Build Xsdl server])
       XSDL_LIBS="`sdl-config --libs` $XSERVER_LIBS"
       XSDL_INCS="`sdl-config --cflags` $XSERVER_CFLAGS"
    fi

    PKG_CHECK_MODULES(XEPHYR, x11 xext xfont xau xdmcp, [xephyr="yes"], [xephyr="no"])
    if test "x$XEPHYR" = xauto; then
        XEPHYR=$xephyr
    fi

    # Xephyr needs nanosleep() which is in librt on Solaris
    AC_CHECK_FUNC([nanosleep], [],
        AC_CHECK_LIB([rt], [nanosleep], XEPHYR_LIBS="$XEPHYR_LIBS -lrt"))
    
d1522 3
d1534 1
a1534 2
    KDRIVE_LOCAL_LIBS="$DIX_LIB $CONFIG_LIB $KDRIVE_LIB $TSLIB_LIBS $KDRIVE_OS_LIB $KDRIVE_PURE_LIBS $KDRIVE_STUB_LIB"
    KDRIVE_LIBS="$XSERVERLIBS_LIBS $KDRIVE_LOCAL_LIBS"
d1538 12
a1549 12

    AC_SUBST([XEPHYR_LIBS])
    AC_SUBST([XEPHYR_INCS])
    AC_SUBST([XSDL_LIBS])
    AC_SUBST([XSDL_INCS])
fi
AC_SUBST([KDRIVE_INCS])
AC_SUBST([KDRIVE_PURE_INCS])
AC_SUBST([KDRIVE_CFLAGS])
AC_SUBST([KDRIVE_PURE_LIBS])
AC_SUBST([KDRIVE_LOCAL_LIBS])
AC_SUBST([KDRIVE_LIBS])
d1553 17
a1569 2
AM_CONDITIONAL(KDRIVEVESA, [test "x$KDRIVEVESA" = xyes])
AM_CONDITIONAL(KDRIVEFBDEV, [test "x$XFBDEV" = xyes])
d1571 3
a1573 3
AM_CONDITIONAL(XEPHYR, [test "x$KDRIVE" = xyes && test "x$XEPHYR" = xyes])
AM_CONDITIONAL(BUILD_KDRIVEFBDEVLIB, [test "x$KDRIVE" = xyes && test "x$KDRIVEFBDEVLIB" = xyes])
AM_CONDITIONAL(XFAKESERVER, [test "x$KDRIVE" = xyes && test "x$XFAKE" = xyes])
d1581 1
d1599 1
d1613 3
a1615 5
if test "x$XORG" = xyes; then
    PKG_CHECK_MODULES([XORGCONFIG_DEP], [xkbfile x11])
    AC_SUBST(XORGCONFIG_DEP_CFLAGS)
    AC_SUBST(XORGCONFIG_DEP_LIBS)
fi
d1619 2
a1620 2
	[Build xorgcfg GUI configuration utility (default: no)]),
	[XORGCFG=$enableval],[XORGCFG=no])
a1623 1
	XORGCFG_DEP_CFLAGS="$XORGCFG_DEP_CFLAGS $PIXMAN_CFLAGS"
d1661 3
a1665 4
BUILD_TIME="$(date +'1%H%M%S')"
AC_SUBST([BUILD_TIME])

DIX_CFLAGS="-DHAVE_DIX_CONFIG_H $XSERVER_CFLAGS"
d1667 1
d1675 3
a1680 1
GL/apple/Makefile
d1683 1
a1692 1
GL/mesa/vbo/Makefile
a1706 1
config/Makefile
a1712 2
miext/rootless/safeAlpha/Makefile
miext/rootless/accel/Makefile
a1738 1
hw/xfree86/modes/Makefile
a1788 13
hw/darwin/bundle/Makefile
hw/darwin/bundle/Dutch.lproj/Makefile
hw/darwin/bundle/English.lproj/Makefile
hw/darwin/bundle/French.lproj/Makefile
hw/darwin/bundle/German.lproj/Makefile
hw/darwin/bundle/Japanese.lproj/Makefile
hw/darwin/bundle/Portuguese.lproj/Makefile
hw/darwin/bundle/Spanish.lproj/Makefile
hw/darwin/bundle/Swedish.lproj/Makefile
hw/darwin/bundle/ko.lproj/Makefile
hw/darwin/iokit/Makefile
hw/darwin/quartz/Makefile
hw/darwin/utils/Makefile
@


1.1.1.5
log
@xserver 1.4.0.90
@
text
@d29 1
a29 1
AC_INIT([xorg-server], 1.4.0.90, [https://bugs.freedesktop.org/enter_bug.cgi?product=xorg], xorg-server)
a582 1
AM_CONDITIONAL(SECURE_RPC, [test "x$SECURE_RPC" = xyes])
d1593 1
a1593 3
AM_CONDITIONAL([DGA], [test "x$DGA" = xyes])
AM_CONDITIONAL([XF86MISC], [test "x$XF86MISC" = xyes])
AM_CONDITIONAL([XF86VIDMODE], [test "x$XF86VIDMODE" = xyes])
@


