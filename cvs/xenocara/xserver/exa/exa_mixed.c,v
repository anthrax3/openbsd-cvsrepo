head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.12
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.10
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.6
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.09.27.17.53.00;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	cVXoV5PxI8YrEaVA;

1.8
date	2014.05.02.19.27.47;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2013.06.07.17.28.47;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.10.13.21.21;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.02.16.08.39;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.02.02.20.47.08;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.27.19.02.26;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/*
 * Copyright Â© 2009 Maarten Maathuis
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <string.h>

#include "exa_priv.h"
#include "exa.h"

/* This file holds the driver allocated pixmaps + better initial placement code.
 */

static _X_INLINE void *
ExaGetPixmapAddress(PixmapPtr p)
{
    ExaPixmapPriv(p);

    return pExaPixmap->sys_ptr;
}

/**
 * exaCreatePixmap() creates a new pixmap.
 */
PixmapPtr
exaCreatePixmap_mixed(ScreenPtr pScreen, int w, int h, int depth,
                      unsigned usage_hint)
{
    PixmapPtr pPixmap;
    ExaPixmapPrivPtr pExaPixmap;
    int bpp;
    size_t paddedWidth;

    ExaScreenPriv(pScreen);

    if (w > 32767 || h > 32767)
        return NullPixmap;

    swap(pExaScr, pScreen, CreatePixmap);
    pPixmap = pScreen->CreatePixmap(pScreen, 0, 0, depth, usage_hint);
    swap(pExaScr, pScreen, CreatePixmap);

    if (!pPixmap)
        return NULL;

    pExaPixmap = ExaGetPixmapPriv(pPixmap);
    pExaPixmap->driverPriv = NULL;

    bpp = pPixmap->drawable.bitsPerPixel;

    paddedWidth = ((w * bpp + FB_MASK) >> FB_SHIFT) * sizeof(FbBits);
    if (paddedWidth / 4 > 32767 || h > 32767)
        return NullPixmap;

    /* We will allocate the system pixmap later if needed. */
    pPixmap->devPrivate.ptr = NULL;
    pExaPixmap->sys_ptr = NULL;
    pExaPixmap->sys_pitch = paddedWidth;

    pExaPixmap->area = NULL;
    pExaPixmap->fb_ptr = NULL;
    pExaPixmap->pDamage = NULL;

    exaSetFbPitch(pExaScr, pExaPixmap, w, h, bpp);
    exaSetAccelBlock(pExaScr, pExaPixmap, w, h, bpp);

    (*pScreen->ModifyPixmapHeader) (pPixmap, w, h, 0, 0, paddedWidth, NULL);

    /* A scratch pixmap will become a driver pixmap right away. */
    if (!w || !h) {
        exaCreateDriverPixmap_mixed(pPixmap);
        pExaPixmap->use_gpu_copy = exaPixmapHasGpuCopy(pPixmap);
    }
    else {
        pExaPixmap->use_gpu_copy = FALSE;

        if (w == 1 && h == 1) {
            pExaPixmap->sys_ptr = malloc(paddedWidth);

            /* Set up damage tracking */
            pExaPixmap->pDamage = DamageCreate(exaDamageReport_mixed, NULL,
                                               DamageReportNonEmpty, TRUE,
                                               pPixmap->drawable.pScreen,
                                               pPixmap);

            if (pExaPixmap->pDamage) {
                DamageRegister(&pPixmap->drawable, pExaPixmap->pDamage);
                /* This ensures that pending damage reflects the current
                 * operation. This is used by exa to optimize migration.
                 */
                DamageSetReportAfterOp(pExaPixmap->pDamage, TRUE);
            }
        }
    }

    /* During a fallback we must prepare access. */
    if (pExaScr->fallback_counter)
        exaPrepareAccess(&pPixmap->drawable, EXA_PREPARE_AUX_DEST);

    return pPixmap;
}

Bool
exaModifyPixmapHeader_mixed(PixmapPtr pPixmap, int width, int height, int depth,
                            int bitsPerPixel, int devKind, void *pPixData)
{
    ScreenPtr pScreen;
    ExaScreenPrivPtr pExaScr;
    ExaPixmapPrivPtr pExaPixmap;
    Bool ret, has_gpu_copy;

    if (!pPixmap)
        return FALSE;

    pScreen = pPixmap->drawable.pScreen;
    pExaScr = ExaGetScreenPriv(pScreen);
    pExaPixmap = ExaGetPixmapPriv(pPixmap);

    if (pPixData) {
        if (pExaPixmap->driverPriv) {
            if (pExaPixmap->pDamage) {
                DamageDestroy(pExaPixmap->pDamage);
                pExaPixmap->pDamage = NULL;
            }

            pExaScr->info->DestroyPixmap(pScreen, pExaPixmap->driverPriv);
            pExaPixmap->driverPriv = NULL;
        }

        pExaPixmap->use_gpu_copy = FALSE;
        pExaPixmap->score = EXA_PIXMAP_SCORE_PINNED;
    }

    has_gpu_copy = exaPixmapHasGpuCopy(pPixmap);

    if (width <= 0)
        width = pPixmap->drawable.width;

    if (height <= 0)
        height = pPixmap->drawable.height;

    if (bitsPerPixel <= 0) {
        if (depth <= 0)
            bitsPerPixel = pPixmap->drawable.bitsPerPixel;
        else
            bitsPerPixel = BitsPerPixel(depth);
    }

    if (depth <= 0)
        depth = pPixmap->drawable.depth;

    if (width != pPixmap->drawable.width ||
        height != pPixmap->drawable.height ||
        depth != pPixmap->drawable.depth ||
        bitsPerPixel != pPixmap->drawable.bitsPerPixel) {
        if (pExaPixmap->driverPriv) {
            if (devKind > 0)
                pExaPixmap->fb_pitch = devKind;
            else
                exaSetFbPitch(pExaScr, pExaPixmap, width, height, bitsPerPixel);

            exaSetAccelBlock(pExaScr, pExaPixmap, width, height, bitsPerPixel);
            RegionEmpty(&pExaPixmap->validFB);
        }

        /* Need to re-create system copy if there's also a GPU copy */
        if (has_gpu_copy) {
            if (pExaPixmap->sys_ptr) {
                free(pExaPixmap->sys_ptr);
                pExaPixmap->sys_ptr = NULL;
                DamageDestroy(pExaPixmap->pDamage);
                pExaPixmap->pDamage = NULL;
                RegionEmpty(&pExaPixmap->validSys);

                if (pExaScr->deferred_mixed_pixmap == pPixmap)
                    pExaScr->deferred_mixed_pixmap = NULL;
            }

            pExaPixmap->sys_pitch = PixmapBytePad(width, depth);
        }
    }

    if (has_gpu_copy) {
        pPixmap->devPrivate.ptr = pExaPixmap->fb_ptr;
        pPixmap->devKind = pExaPixmap->fb_pitch;
    }
    else {
        pPixmap->devPrivate.ptr = pExaPixmap->sys_ptr;
        pPixmap->devKind = pExaPixmap->sys_pitch;
    }

    /* Only pass driver pixmaps to the driver. */
    if (pExaScr->info->ModifyPixmapHeader && pExaPixmap->driverPriv) {
        ret = pExaScr->info->ModifyPixmapHeader(pPixmap, width, height, depth,
                                                bitsPerPixel, devKind,
                                                pPixData);
        if (ret == TRUE)
            goto out;
    }

    swap(pExaScr, pScreen, ModifyPixmapHeader);
    ret = pScreen->ModifyPixmapHeader(pPixmap, width, height, depth,
                                      bitsPerPixel, devKind, pPixData);
    swap(pExaScr, pScreen, ModifyPixmapHeader);

 out:
    if (has_gpu_copy) {
        pExaPixmap->fb_ptr = pPixmap->devPrivate.ptr;
        pExaPixmap->fb_pitch = pPixmap->devKind;
    }
    else {
        pExaPixmap->sys_ptr = pPixmap->devPrivate.ptr;
        pExaPixmap->sys_pitch = pPixmap->devKind;
    }
    /* Always NULL this, we don't want lingering pointers. */
    pPixmap->devPrivate.ptr = NULL;

    return ret;
}

Bool
exaDestroyPixmap_mixed(PixmapPtr pPixmap)
{
    ScreenPtr pScreen = pPixmap->drawable.pScreen;

    ExaScreenPriv(pScreen);
    Bool ret;

    if (pPixmap->refcnt == 1) {
        ExaPixmapPriv(pPixmap);

        exaDestroyPixmap(pPixmap);

        if (pExaScr->deferred_mixed_pixmap == pPixmap)
            pExaScr->deferred_mixed_pixmap = NULL;

        if (pExaPixmap->driverPriv)
            pExaScr->info->DestroyPixmap(pScreen, pExaPixmap->driverPriv);
        pExaPixmap->driverPriv = NULL;

        if (pExaPixmap->pDamage) {
            free(pExaPixmap->sys_ptr);
            pExaPixmap->sys_ptr = NULL;
            pExaPixmap->pDamage = NULL;
        }
    }

    swap(pExaScr, pScreen, DestroyPixmap);
    ret = pScreen->DestroyPixmap(pPixmap);
    swap(pExaScr, pScreen, DestroyPixmap);

    return ret;
}

Bool
exaPixmapHasGpuCopy_mixed(PixmapPtr pPixmap)
{
    ScreenPtr pScreen = pPixmap->drawable.pScreen;

    ExaScreenPriv(pScreen);
    ExaPixmapPriv(pPixmap);
    void *saved_ptr;
    Bool ret;

    if (!pExaPixmap->driverPriv)
        return FALSE;

    saved_ptr = pPixmap->devPrivate.ptr;
    pPixmap->devPrivate.ptr = ExaGetPixmapAddress(pPixmap);
    ret = pExaScr->info->PixmapIsOffscreen(pPixmap);
    pPixmap->devPrivate.ptr = saved_ptr;

    return ret;
}

Bool
exaSharePixmapBacking_mixed(PixmapPtr pPixmap, ScreenPtr slave, void **handle_p)
{
    ScreenPtr pScreen = pPixmap->drawable.pScreen;
    ExaScreenPriv(pScreen);
    Bool ret = FALSE;

    exaMoveInPixmap(pPixmap);
    /* get the driver to give us a handle */
    if (pExaScr->info->SharePixmapBacking)
        ret = pExaScr->info->SharePixmapBacking(pPixmap, slave, handle_p);

    return ret;
}

Bool
exaSetSharedPixmapBacking_mixed(PixmapPtr pPixmap, void *handle)
{
    ScreenPtr pScreen = pPixmap->drawable.pScreen;
    ExaScreenPriv(pScreen);
    Bool ret = FALSE;

    if (pExaScr->info->SetSharedPixmapBacking)
        ret = pExaScr->info->SetSharedPixmapBacking(pPixmap, handle);

    if (ret == TRUE)
        exaMoveInPixmap(pPixmap);

    return ret;
}


@


1.8
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d128 1
a128 1
                            int bitsPerPixel, int devKind, pointer pPixData)
d285 1
a285 1
    pointer saved_ptr;
@


1.7
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d109 7
a115 4
            DamageRegister(&pPixmap->drawable, pExaPixmap->pDamage);
            /* This ensures that pending damage reflects the current operation. */
            /* This is used by exa to optimize migration. */
            DamageSetReportAfterOp(pExaPixmap->pDamage, TRUE);
a144 1
                DamageUnregister(&pPixmap->drawable, pExaPixmap->pDamage);
a193 1
                DamageUnregister(&pPixmap->drawable, pExaPixmap->pDamage);
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d297 33
@


1.5
log
@Update to xserver 1.11.2
@
text
@d37 1
a37 1
static _X_INLINE void*
d50 1
a50 1
		unsigned usage_hint)
d53 1
a53 1
    ExaPixmapPrivPtr	pExaPixmap;
d56 1
d60 1
a60 1
	return NullPixmap;
d88 1
a88 2
    exaSetAccelBlock(pExaScr, pExaPixmap,
	w, h, bpp);
d90 1
a90 2
    (*pScreen->ModifyPixmapHeader)(pPixmap, w, h, 0, 0,
				    paddedWidth, NULL);
d94 20
a113 19
	exaCreateDriverPixmap_mixed(pPixmap);
	pExaPixmap->use_gpu_copy = exaPixmapHasGpuCopy(pPixmap);
    } else {
	pExaPixmap->use_gpu_copy = FALSE;

	if (w == 1 && h == 1) {
	    pExaPixmap->sys_ptr = malloc(paddedWidth);

	    /* Set up damage tracking */
	    pExaPixmap->pDamage = DamageCreate(exaDamageReport_mixed, NULL,
					       DamageReportNonEmpty, TRUE,
					       pPixmap->drawable.pScreen,
					       pPixmap);

	    DamageRegister(&pPixmap->drawable, pExaPixmap->pDamage);
	    /* This ensures that pending damage reflects the current operation. */
	    /* This is used by exa to optimize migration. */
	    DamageSetReportAfterOp(pExaPixmap->pDamage, TRUE);
	}
d118 1
a118 1
	exaPrepareAccess(&pPixmap->drawable, EXA_PREPARE_AUX_DEST);
d125 1
a125 1
		      int bitsPerPixel, int devKind, pointer pPixData)
d140 6
a145 10
	if (pExaPixmap->driverPriv) {
	    if (pExaPixmap->pDamage) {
		DamageUnregister(&pPixmap->drawable, pExaPixmap->pDamage);
		DamageDestroy(pExaPixmap->pDamage);
		pExaPixmap->pDamage = NULL;
	    }

	    pExaScr->info->DestroyPixmap(pScreen, pExaPixmap->driverPriv);
	    pExaPixmap->driverPriv = NULL;
	}
d147 6
a152 2
	pExaPixmap->use_gpu_copy = FALSE;
	pExaPixmap->score = EXA_PIXMAP_SCORE_PINNED;
d158 1
a158 1
	width = pPixmap->drawable.width;
d161 1
a161 1
	height = pPixmap->drawable.height;
d164 4
a167 4
	if (depth <= 0)
	    bitsPerPixel = pPixmap->drawable.bitsPerPixel;
	else
	    bitsPerPixel = BitsPerPixel(depth);
d171 1
a171 1
	depth = pPixmap->drawable.depth;
d174 8
a181 8
	height != pPixmap->drawable.height ||
	depth != pPixmap->drawable.depth ||
	bitsPerPixel != pPixmap->drawable.bitsPerPixel) {
	if (pExaPixmap->driverPriv) {
	    if (devKind > 0)
		pExaPixmap->fb_pitch = devKind;
	    else
		exaSetFbPitch(pExaScr, pExaPixmap, width, height, bitsPerPixel);
d183 1
a183 2
            exaSetAccelBlock(pExaScr, pExaPixmap,
                             width, height, bitsPerPixel);
d187 13
a199 13
	/* Need to re-create system copy if there's also a GPU copy */
	if (has_gpu_copy) {
	    if (pExaPixmap->sys_ptr) {
		free(pExaPixmap->sys_ptr);
		pExaPixmap->sys_ptr = NULL;
		DamageUnregister(&pPixmap->drawable, pExaPixmap->pDamage);
		DamageDestroy(pExaPixmap->pDamage);
		pExaPixmap->pDamage = NULL;
		RegionEmpty(&pExaPixmap->validSys);

		if (pExaScr->deferred_mixed_pixmap == pPixmap)
		    pExaScr->deferred_mixed_pixmap = NULL;
	    }
d201 2
a202 2
	    pExaPixmap->sys_pitch = PixmapBytePad(width, depth);
	}
d206 6
a211 5
	pPixmap->devPrivate.ptr = pExaPixmap->fb_ptr;
	pPixmap->devKind = pExaPixmap->fb_pitch;
    } else {
	pPixmap->devPrivate.ptr = pExaPixmap->sys_ptr;
	pPixmap->devKind = pExaPixmap->sys_pitch;
d216 5
a220 4
	ret = pExaScr->info->ModifyPixmapHeader(pPixmap, width, height, depth,
						bitsPerPixel, devKind, pPixData);
	if (ret == TRUE)
	    goto out;
d225 1
a225 1
					    bitsPerPixel, devKind, pPixData);
d228 1
a228 1
out:
d230 6
a235 5
	pExaPixmap->fb_ptr = pPixmap->devPrivate.ptr;
	pExaPixmap->fb_pitch = pPixmap->devKind;
    } else {
	pExaPixmap->sys_ptr = pPixmap->devPrivate.ptr;
	pExaPixmap->sys_pitch = pPixmap->devKind;
d246 2
a247 1
    ScreenPtr	pScreen = pPixmap->drawable.pScreen;
d251 17
a267 18
    if (pPixmap->refcnt == 1)
    {
	ExaPixmapPriv (pPixmap);

	exaDestroyPixmap(pPixmap);

	if (pExaScr->deferred_mixed_pixmap == pPixmap)
	    pExaScr->deferred_mixed_pixmap = NULL;

	if (pExaPixmap->driverPriv)
	    pExaScr->info->DestroyPixmap(pScreen, pExaPixmap->driverPriv);
	pExaPixmap->driverPriv = NULL;

	if (pExaPixmap->pDamage) {
	    free(pExaPixmap->sys_ptr);
	    pExaPixmap->sys_ptr = NULL;
	    pExaPixmap->pDamage = NULL;
	}
d271 1
a271 1
    ret = pScreen->DestroyPixmap (pPixmap);
d281 1
d288 1
a288 1
	return FALSE;
@


1.4
log
@Update to xserver 1.9.5. Tested by jasper@@, ajacoutot@@ and krw@@
@
text
@d2 1
a2 1
 * Copyright © 2009 Maarten Maathuis
d189 13
a201 3
	if (has_gpu_copy && pExaPixmap->sys_ptr) {
	    free(pExaPixmap->sys_ptr);
	    pExaPixmap->sys_ptr = NULL;
a202 7
	    DamageUnregister(&pPixmap->drawable, pExaPixmap->pDamage);
	    DamageDestroy(pExaPixmap->pDamage);
	    pExaPixmap->pDamage = NULL;
	    RegionEmpty(&pExaPixmap->validSys);

	    if (pExaScr->deferred_mixed_pixmap == pPixmap)
		pExaScr->deferred_mixed_pixmap = NULL;
@


1.3
log
@Merge another EXA fix from X.Org 1.9.4RC1:
EXA: Pad size of system memory copy for 1x1 pixmaps (bug #32803).
@
text
@d178 4
a181 2
            exaSetFbPitch(pExaScr, pExaPixmap,
                          width, height, bitsPerPixel);
d192 1
a192 2
	    pExaPixmap->sys_pitch = devKind > 0 ? devKind :
	        PixmapBytePad(width, depth);
@


1.2
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d101 1
a101 1
	    pExaPixmap->sys_ptr = malloc((pPixmap->drawable.bitsPerPixel + 7) / 8);
@


1.1
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d127 1
a127 1
    ScreenPtr pScreen = pPixmap->drawable.pScreen;
d135 1
d183 1
a183 1
            REGION_EMPTY(pScreen, &pExaPixmap->validFB);
d195 1
a195 1
	    REGION_EMPTY(pScreen, &pExaPixmap->validSys);
d248 1
a248 3
	/* During a fallback we must finish access, but we don't know the index. */
	if (pExaScr->fallback_counter)
	    exaFinishAccess(&pPixmap->drawable, -1);
d258 1
a258 2
	    if (pExaPixmap->sys_ptr)
		free(pExaPixmap->sys_ptr);
@

