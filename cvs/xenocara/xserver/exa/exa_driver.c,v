head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.09.27.17.53.00;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	cVXoV5PxI8YrEaVA;

1.4
date	2012.06.10.13.21.21;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.27.19.02.26;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/*
 * Copyright Â© 2009 Maarten Maathuis
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <string.h>

#include "exa_priv.h"
#include "exa.h"

/* This file holds the driver allocated pixmaps specific implementation. */

static _X_INLINE void *
ExaGetPixmapAddress(PixmapPtr p)
{
    ExaPixmapPriv(p);

    return pExaPixmap->sys_ptr;
}

/**
 * exaCreatePixmap() creates a new pixmap.
 *
 * Pixmaps are always marked as pinned, because exa has no control over them.
 */
PixmapPtr
exaCreatePixmap_driver(ScreenPtr pScreen, int w, int h, int depth,
                       unsigned usage_hint)
{
    PixmapPtr pPixmap;
    ExaPixmapPrivPtr pExaPixmap;
    int bpp;
    size_t paddedWidth, datasize;

    ExaScreenPriv(pScreen);

    if (w > 32767 || h > 32767)
        return NullPixmap;

    swap(pExaScr, pScreen, CreatePixmap);
    pPixmap = pScreen->CreatePixmap(pScreen, 0, 0, depth, usage_hint);
    swap(pExaScr, pScreen, CreatePixmap);

    if (!pPixmap)
        return NULL;

    pExaPixmap = ExaGetPixmapPriv(pPixmap);
    pExaPixmap->driverPriv = NULL;

    bpp = pPixmap->drawable.bitsPerPixel;

    /* Set this before driver hooks, to allow for driver pixmaps without gpu
     * memory to back it. These pixmaps have a valid pointer at all times.
     */
    pPixmap->devPrivate.ptr = NULL;

    if (pExaScr->info->CreatePixmap2) {
        int new_pitch = 0;

        pExaPixmap->driverPriv =
            pExaScr->info->CreatePixmap2(pScreen, w, h, depth, usage_hint, bpp,
                                         &new_pitch);
        paddedWidth = pExaPixmap->fb_pitch = new_pitch;
    }
    else {
        paddedWidth = ((w * bpp + FB_MASK) >> FB_SHIFT) * sizeof(FbBits);
        if (paddedWidth / 4 > 32767 || h > 32767)
            return NullPixmap;

        exaSetFbPitch(pExaScr, pExaPixmap, w, h, bpp);

        if (paddedWidth < pExaPixmap->fb_pitch)
            paddedWidth = pExaPixmap->fb_pitch;
        datasize = h * paddedWidth;
        pExaPixmap->driverPriv =
            pExaScr->info->CreatePixmap(pScreen, datasize, 0);
    }

    if (!pExaPixmap->driverPriv) {
        swap(pExaScr, pScreen, DestroyPixmap);
        pScreen->DestroyPixmap(pPixmap);
        swap(pExaScr, pScreen, DestroyPixmap);
        return NULL;
    }

    /* Allow ModifyPixmapHeader to set sys_ptr appropriately. */
    pExaPixmap->score = EXA_PIXMAP_SCORE_PINNED;
    pExaPixmap->fb_ptr = NULL;
    pExaPixmap->pDamage = NULL;
    pExaPixmap->sys_ptr = NULL;

    (*pScreen->ModifyPixmapHeader) (pPixmap, w, h, 0, 0, paddedWidth, NULL);

    pExaPixmap->area = NULL;

    exaSetAccelBlock(pExaScr, pExaPixmap, w, h, bpp);

    pExaPixmap->use_gpu_copy = exaPixmapHasGpuCopy(pPixmap);

    /* During a fallback we must prepare access. */
    if (pExaScr->fallback_counter)
        exaPrepareAccess(&pPixmap->drawable, EXA_PREPARE_AUX_DEST);

    return pPixmap;
}

Bool
exaModifyPixmapHeader_driver(PixmapPtr pPixmap, int width, int height,
                             int depth, int bitsPerPixel, int devKind,
                             void *pPixData)
{
    ScreenPtr pScreen;
    ExaScreenPrivPtr pExaScr;
    ExaPixmapPrivPtr pExaPixmap;
    Bool ret;

    if (!pPixmap)
        return FALSE;

    pScreen = pPixmap->drawable.pScreen;
    pExaScr = ExaGetScreenPriv(pScreen);
    pExaPixmap = ExaGetPixmapPriv(pPixmap);

    if (pExaPixmap) {
        if (pPixData)
            pExaPixmap->sys_ptr = pPixData;

        if (devKind > 0)
            pExaPixmap->sys_pitch = devKind;

        if (width > 0 && height > 0 && bitsPerPixel > 0) {
            exaSetFbPitch(pExaScr, pExaPixmap, width, height, bitsPerPixel);

            exaSetAccelBlock(pExaScr, pExaPixmap, width, height, bitsPerPixel);
        }
    }

    if (pExaScr->info->ModifyPixmapHeader) {
        ret = pExaScr->info->ModifyPixmapHeader(pPixmap, width, height, depth,
                                                bitsPerPixel, devKind,
                                                pPixData);
        /* For EXA_HANDLES_PIXMAPS, we set pPixData to NULL.
         * If pPixmap->devPrivate.ptr is non-NULL, then we've got a
         * !has_gpu_copy pixmap. We need to store the pointer,
         * because PrepareAccess won't be called.
         */
        if (!pPixData && pPixmap->devPrivate.ptr && pPixmap->devKind) {
            pExaPixmap->sys_ptr = pPixmap->devPrivate.ptr;
            pExaPixmap->sys_pitch = pPixmap->devKind;
        }
        if (ret == TRUE)
            goto out;
    }

    swap(pExaScr, pScreen, ModifyPixmapHeader);
    ret = pScreen->ModifyPixmapHeader(pPixmap, width, height, depth,
                                      bitsPerPixel, devKind, pPixData);
    swap(pExaScr, pScreen, ModifyPixmapHeader);

 out:
    /* Always NULL this, we don't want lingering pointers. */
    pPixmap->devPrivate.ptr = NULL;

    return ret;
}

Bool
exaDestroyPixmap_driver(PixmapPtr pPixmap)
{
    ScreenPtr pScreen = pPixmap->drawable.pScreen;

    ExaScreenPriv(pScreen);
    Bool ret;

    if (pPixmap->refcnt == 1) {
        ExaPixmapPriv(pPixmap);

        exaDestroyPixmap(pPixmap);

        if (pExaPixmap->driverPriv)
            pExaScr->info->DestroyPixmap(pScreen, pExaPixmap->driverPriv);
        pExaPixmap->driverPriv = NULL;
    }

    swap(pExaScr, pScreen, DestroyPixmap);
    ret = pScreen->DestroyPixmap(pPixmap);
    swap(pExaScr, pScreen, DestroyPixmap);

    return ret;
}

Bool
exaPixmapHasGpuCopy_driver(PixmapPtr pPixmap)
{
    ScreenPtr pScreen = pPixmap->drawable.pScreen;

    ExaScreenPriv(pScreen);
    void *saved_ptr;
    Bool ret;

    saved_ptr = pPixmap->devPrivate.ptr;
    pPixmap->devPrivate.ptr = ExaGetPixmapAddress(pPixmap);
    ret = pExaScr->info->PixmapIsOffscreen(pPixmap);
    pPixmap->devPrivate.ptr = saved_ptr;

    return ret;
}
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d133 1
a133 1
                             pointer pPixData)
d221 1
a221 1
    pointer saved_ptr;
@


1.3
log
@Update to xserver 1.11.2
@
text
@d36 1
a36 1
static _X_INLINE void*
d51 1
a51 1
		unsigned usage_hint)
d54 1
a54 1
    ExaPixmapPrivPtr	pExaPixmap;
d57 1
d61 1
a61 1
	return NullPixmap;
d81 6
a86 3
	int new_pitch = 0;
	pExaPixmap->driverPriv = pExaScr->info->CreatePixmap2(pScreen, w, h, depth, usage_hint, bpp, &new_pitch);
	paddedWidth = pExaPixmap->fb_pitch = new_pitch;
d89 11
a99 10
	paddedWidth = ((w * bpp + FB_MASK) >> FB_SHIFT) * sizeof(FbBits);
	if (paddedWidth / 4 > 32767 || h > 32767)
	    return NullPixmap;

	exaSetFbPitch(pExaScr, pExaPixmap, w, h, bpp);

	if (paddedWidth < pExaPixmap->fb_pitch)
	    paddedWidth = pExaPixmap->fb_pitch;
	datasize = h * paddedWidth;
	pExaPixmap->driverPriv = pExaScr->info->CreatePixmap(pScreen, datasize, 0);
d103 4
a106 4
	swap(pExaScr, pScreen, DestroyPixmap);
	pScreen->DestroyPixmap (pPixmap);
	swap(pExaScr, pScreen, DestroyPixmap);
	return NULL;
d115 1
a115 2
    (*pScreen->ModifyPixmapHeader)(pPixmap, w, h, 0, 0,
				    paddedWidth, NULL);
d119 1
a119 2
    exaSetAccelBlock(pExaScr, pExaPixmap,
                     w, h, bpp);
d125 1
a125 1
	exaPrepareAccess(&pPixmap->drawable, EXA_PREPARE_AUX_DEST);
d131 3
a133 2
exaModifyPixmapHeader_driver(PixmapPtr pPixmap, int width, int height, int depth,
		      int bitsPerPixel, int devKind, pointer pPixData)
d155 1
a155 2
            exaSetFbPitch(pExaScr, pExaPixmap,
                          width, height, bitsPerPixel);
d157 1
a157 2
            exaSetAccelBlock(pExaScr, pExaPixmap,
                             width, height, bitsPerPixel);
d162 14
a175 13
	ret = pExaScr->info->ModifyPixmapHeader(pPixmap, width, height, depth,
						bitsPerPixel, devKind, pPixData);
	/* For EXA_HANDLES_PIXMAPS, we set pPixData to NULL.
	 * If pPixmap->devPrivate.ptr is non-NULL, then we've got a
	 * !has_gpu_copy pixmap. We need to store the pointer,
	 * because PrepareAccess won't be called.
	 */
	if (!pPixData && pPixmap->devPrivate.ptr && pPixmap->devKind) {
	    pExaPixmap->sys_ptr = pPixmap->devPrivate.ptr;
	    pExaPixmap->sys_pitch = pPixmap->devKind;
	}
	if (ret == TRUE)
	    goto out;
d180 1
a180 1
					    bitsPerPixel, devKind, pPixData);
d183 1
a183 1
out:
d191 1
a191 1
exaDestroyPixmap_driver (PixmapPtr pPixmap)
d193 2
a194 1
    ScreenPtr	pScreen = pPixmap->drawable.pScreen;
d198 8
a205 9
    if (pPixmap->refcnt == 1)
    {
	ExaPixmapPriv (pPixmap);

	exaDestroyPixmap(pPixmap);

	if (pExaPixmap->driverPriv)
	    pExaScr->info->DestroyPixmap(pScreen, pExaPixmap->driverPriv);
	pExaPixmap->driverPriv = NULL;
d209 1
a209 1
    ret = pScreen->DestroyPixmap (pPixmap);
d219 1
@


1.2
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d2 1
a2 1
 * Copyright © 2009 Maarten Maathuis
d117 2
@


1.1
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d129 1
a129 1
    ScreenPtr pScreen = pPixmap->drawable.pScreen;
d137 1
d196 1
a196 3
	/* During a fallback we must finish access, but we don't know the index. */
	if (pExaScr->fallback_counter)
	    exaFinishAccess(&pPixmap->drawable, -1);
@

