head	1.5;
access;
symbols
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v1_4_0_90:1.1.1.3
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2010.07.27.19.02.26;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2009.09.06.19.44.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.12.20.17.47;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.13;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.14.42;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.14.42;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.06.34;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.12.13.21.06.15;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@/*
 * Copyright © 2006 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Authors:
 *    Eric Anholt <eric@@anholt.net>
 *    Michel Dänzer <michel@@tungstengraphics.com>
 *
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <string.h>

#include "exa_priv.h"
#include "exa.h"

#if DEBUG_MIGRATE
#define DBG_MIGRATE(a) ErrorF a
#else
#define DBG_MIGRATE(a)
#endif

/**
 * Returns TRUE if the pixmap is not movable.  This is the case where it's a
 * fake pixmap for the frontbuffer (no pixmap private) or it's a scratch
 * pixmap created by some other X Server internals (the score says it's
 * pinned).
 */
static Bool
exaPixmapIsPinned (PixmapPtr pPix)
{
    ExaPixmapPriv (pPix);

    return pExaPixmap == NULL || pExaPixmap->score == EXA_PIXMAP_SCORE_PINNED;
}

/**
 * The fallback path for UTS/DFS failing is to just memcpy.  exaCopyDirtyToSys
 * and exaCopyDirtyToFb both needed to do this loop.
 */
static void
exaMemcpyBox (PixmapPtr pPixmap, BoxPtr pbox, CARD8 *src, int src_pitch,
	      CARD8 *dst, int dst_pitch)
 {
    int i, cpp = pPixmap->drawable.bitsPerPixel / 8;
    int bytes = (pbox->x2 - pbox->x1) * cpp;

    src += pbox->y1 * src_pitch + pbox->x1 * cpp;
    dst += pbox->y1 * dst_pitch + pbox->x1 * cpp;

    for (i = pbox->y2 - pbox->y1; i; i--) {
	memcpy (dst, src, bytes);
	src += src_pitch;
	dst += dst_pitch;
    }
}
 
/**
 * Returns TRUE if the pixmap is dirty (has been modified in its current
 * location compared to the other), or lacks a private for tracking
 * dirtiness.
 */
static Bool
exaPixmapIsDirty (PixmapPtr pPix)
{
    ExaPixmapPriv (pPix);

    return pExaPixmap == NULL ||
	REGION_NOTEMPTY (pScreen, DamageRegion(pExaPixmap->pDamage)) ||
	!REGION_EQUAL(pScreen, &pExaPixmap->validSys, &pExaPixmap->validFB);
}

/**
 * Returns TRUE if the pixmap is either pinned in FB, or has a sufficient score
 * to be considered "should be in framebuffer".  That's just anything that has
 * had more acceleration than fallbacks, or has no score yet.
 *
 * Only valid if using a migration scheme that tracks score.
 */
static Bool
exaPixmapShouldBeInFB (PixmapPtr pPix)
{
    ExaPixmapPriv (pPix);

    if (exaPixmapIsPinned (pPix))
	return TRUE;

    return pExaPixmap->score >= 0;
}

/**
 * If the pixmap is currently dirty, this copies at least the dirty area from
 * FB to system or vice versa.  Both areas must be allocated.
 */
static void
exaCopyDirty(ExaMigrationPtr migrate, RegionPtr pValidDst, RegionPtr pValidSrc,
	     Bool (*transfer) (PixmapPtr pPix, int x, int y, int w, int h,
			       char *sys, int sys_pitch), CARD8 *fallback_src,
	     CARD8 *fallback_dst, int fallback_srcpitch, int fallback_dstpitch,
	     int fallback_index, void (*sync) (ScreenPtr pScreen))
{
    PixmapPtr pPixmap = migrate->pPix;
    ExaPixmapPriv (pPixmap);
    RegionPtr damage = DamageRegion (pExaPixmap->pDamage);
    RegionRec CopyReg;
    Bool save_offscreen;
    int save_pitch;
    BoxPtr pBox;
    int nbox;
    Bool access_prepared = FALSE;
    Bool need_sync = FALSE;

    /* Damaged bits are valid in current copy but invalid in other one */
    if (exaPixmapIsOffscreen(pPixmap)) {
	REGION_UNION(pScreen, &pExaPixmap->validFB, &pExaPixmap->validFB,
		     damage);
	REGION_SUBTRACT(pScreen, &pExaPixmap->validSys, &pExaPixmap->validSys,
			damage);
    } else {
	REGION_UNION(pScreen, &pExaPixmap->validSys, &pExaPixmap->validSys,
		     damage);
	REGION_SUBTRACT(pScreen, &pExaPixmap->validFB, &pExaPixmap->validFB,
			damage);
    }

    REGION_EMPTY(pScreen, damage);

    /* Copy bits valid in source but not in destination */
    REGION_NULL(pScreen, &CopyReg);
    REGION_SUBTRACT(pScreen, &CopyReg, pValidSrc, pValidDst);

    if (migrate->as_dst) {
	ExaScreenPriv (pPixmap->drawable.pScreen);

	/* XXX: The pending damage region will be marked as damaged after the
	 * operation, so it should serve as an upper bound for the region that
	 * needs to be synchronized for the operation. Unfortunately, this
	 * causes corruption in some cases, e.g. when starting compiz. See
	 * https://bugs.freedesktop.org/show_bug.cgi?id=12916 .
	 */
	if (pExaScr->optimize_migration) {
	    RegionPtr pending_damage = DamagePendingRegion(pExaPixmap->pDamage);

#if DEBUG_MIGRATE
	    if (REGION_NIL(pending_damage)) {
		static Bool firsttime = TRUE;

		if (firsttime) {
		    ErrorF("%s: Pending damage region empty!\n", __func__);
		    firsttime = FALSE;
		}
	    }
#endif

	    REGION_INTERSECT(pScreen, &CopyReg, &CopyReg, pending_damage);
	}

	/* The caller may provide a region to be subtracted from the calculated
	 * dirty region. This is to avoid migration of bits that don't
	 * contribute to the result of the operation.
	 */
	if (migrate->pReg)
	    REGION_SUBTRACT(pScreen, &CopyReg, &CopyReg, migrate->pReg);
    } else {
	/* The caller may restrict the region to be migrated for source pixmaps
	 * to what's relevant for the operation.
	 */
	if (migrate->pReg)
	    REGION_INTERSECT(pScreen, &CopyReg, &CopyReg, migrate->pReg);
    }

    pBox = REGION_RECTS(&CopyReg);
    nbox = REGION_NUM_RECTS(&CopyReg);

    save_offscreen = pExaPixmap->offscreen;
    save_pitch = pPixmap->devKind;
    pExaPixmap->offscreen = TRUE;
    pPixmap->devKind = pExaPixmap->fb_pitch;

    while (nbox--) {
	pBox->x1 = max(pBox->x1, 0);
	pBox->y1 = max(pBox->y1, 0);
	pBox->x2 = min(pBox->x2, pPixmap->drawable.width);
	pBox->y2 = min(pBox->y2, pPixmap->drawable.height);

	if (pBox->x1 >= pBox->x2 || pBox->y1 >= pBox->y2)
	    continue;

	if (!transfer || !transfer (pPixmap,
				    pBox->x1, pBox->y1,
				    pBox->x2 - pBox->x1,
				    pBox->y2 - pBox->y1,
				    (char *) (pExaPixmap->sys_ptr
				    + pBox->y1 * pExaPixmap->sys_pitch
				    + pBox->x1 * pPixmap->drawable.bitsPerPixel / 8),
				    pExaPixmap->sys_pitch))
	{
	    if (!access_prepared) {
		ExaDoPrepareAccess(&pPixmap->drawable, fallback_index);
		access_prepared = TRUE;
	    }
	    exaMemcpyBox (pPixmap, pBox,
			  fallback_src, fallback_srcpitch,
			  fallback_dst, fallback_dstpitch);
	} else
	    need_sync = TRUE;

	pBox++;
    }

    if (access_prepared)
	exaFinishAccess(&pPixmap->drawable, fallback_index);
    else if (need_sync)
	sync (pPixmap->drawable.pScreen);

    pExaPixmap->offscreen = save_offscreen;
    pPixmap->devKind = save_pitch;

    /* The copied bits are now valid in destination */
    REGION_UNION(pScreen, pValidDst, pValidDst, &CopyReg);

    REGION_UNINIT(pScreen, &CopyReg);
}

/**
 * If the pixmap is currently dirty, this copies at least the dirty area from
 * the framebuffer  memory copy to the system memory copy.  Both areas must be
 * allocated.
 */
static void
exaCopyDirtyToSys (ExaMigrationPtr migrate)
{
    PixmapPtr pPixmap = migrate->pPix;
    ExaScreenPriv (pPixmap->drawable.pScreen);
    ExaPixmapPriv (pPixmap);

    exaCopyDirty(migrate, &pExaPixmap->validSys, &pExaPixmap->validFB,
		 pExaScr->info->DownloadFromScreen, pExaPixmap->fb_ptr,
		 pExaPixmap->sys_ptr, pExaPixmap->fb_pitch,
		 pExaPixmap->sys_pitch, EXA_PREPARE_SRC, exaWaitSync);
}

/**
 * If the pixmap is currently dirty, this copies at least the dirty area from
 * the system memory copy to the framebuffer memory copy.  Both areas must be
 * allocated.
 */
static void
exaCopyDirtyToFb (ExaMigrationPtr migrate)
{
    PixmapPtr pPixmap = migrate->pPix;
    ExaScreenPriv (pPixmap->drawable.pScreen);
    ExaPixmapPriv (pPixmap);

    exaCopyDirty(migrate, &pExaPixmap->validFB, &pExaPixmap->validSys,
		 pExaScr->info->UploadToScreen, pExaPixmap->sys_ptr,
		 pExaPixmap->fb_ptr, pExaPixmap->sys_pitch,
		 pExaPixmap->fb_pitch, EXA_PREPARE_DEST, exaMarkSync);
}

/**
 * Allocates a framebuffer copy of the pixmap if necessary, and then copies
 * any necessary pixmap data into the framebuffer copy and points the pixmap at
 * it.
 *
 * Note that when first allocated, a pixmap will have FALSE dirty flag.
 * This is intentional because pixmap data starts out undefined.  So if we move
 * it in due to the first operation against it being accelerated, it will have
 * undefined framebuffer contents that we didn't have to upload.  If we do
 * moveouts (and moveins) after the first movein, then we will only have to copy
 * back and forth if the pixmap was written to after the last synchronization of
 * the two copies.  Then, at exaPixmapSave (when the framebuffer copy goes away)
 * we mark the pixmap dirty, so that the next exaMoveInPixmap will actually move
 * all the data, since it's almost surely all valid now.
 */
static void
exaDoMoveInPixmap (ExaMigrationPtr migrate)
{
    PixmapPtr pPixmap = migrate->pPix;
    ScreenPtr pScreen = pPixmap->drawable.pScreen;
    ExaScreenPriv (pScreen);
    ExaPixmapPriv (pPixmap);

    /* If we're VT-switched away, no touching card memory allowed. */
    if (pExaScr->swappedOut)
	return;

    /* If we're not allowed to move, then fail. */
    if (exaPixmapIsPinned(pPixmap))
	return;

    /* Don't migrate in pixmaps which are less than 8bpp.  This avoids a lot of
     * fragility in EXA, and <8bpp is probably not used enough any more to care
     * (at least, not in acceleratd paths).
     */
    if (pPixmap->drawable.bitsPerPixel < 8)
	return;

    if (pExaPixmap->accel_blocked)
	return;

    if (pExaPixmap->area == NULL) {
	pExaPixmap->area =
	    exaOffscreenAlloc (pScreen, pExaPixmap->fb_size,
			       pExaScr->info->pixmapOffsetAlign, FALSE,
                               exaPixmapSave, (pointer) pPixmap);
	if (pExaPixmap->area == NULL)
	    return;

	pExaPixmap->fb_ptr = (CARD8 *) pExaScr->info->memoryBase +
				       pExaPixmap->area->offset;
    }

    exaCopyDirtyToFb (migrate);

    if (exaPixmapIsOffscreen(pPixmap))
	return;

    DBG_MIGRATE (("-> %p (0x%x) (%dx%d) (%c)\n", pPixmap,
		  (ExaGetPixmapPriv(pPixmap)->area ?
                   ExaGetPixmapPriv(pPixmap)->area->offset : 0),
		  pPixmap->drawable.width,
		  pPixmap->drawable.height,
		  exaPixmapIsDirty(pPixmap) ? 'd' : 'c'));

    pExaPixmap->offscreen = TRUE;

    pPixmap->devKind = pExaPixmap->fb_pitch;
    pPixmap->drawable.serialNumber = NEXT_SERIAL_NUMBER;
}

void
exaMoveInPixmap (PixmapPtr pPixmap)
{
    static ExaMigrationRec migrate = { .as_dst = FALSE, .as_src = TRUE,
				       .pReg = NULL };

    migrate.pPix = pPixmap;
    exaDoMoveInPixmap (&migrate);
}

/**
 * Switches the current active location of the pixmap to system memory, copying
 * updated data out if necessary.
 */
static void
exaDoMoveOutPixmap (ExaMigrationPtr migrate)
{
    PixmapPtr pPixmap = migrate->pPix;
    ExaPixmapPriv (pPixmap);

    if (!pExaPixmap->area || exaPixmapIsPinned(pPixmap))
	return;

    exaCopyDirtyToSys (migrate);

    if (exaPixmapIsOffscreen(pPixmap)) {

	DBG_MIGRATE (("<- %p (%p) (%dx%d) (%c)\n", pPixmap,
		      (void*)(ExaGetPixmapPriv(pPixmap)->area ?
			      ExaGetPixmapPriv(pPixmap)->area->offset : 0),
		      pPixmap->drawable.width,
		      pPixmap->drawable.height,
		      exaPixmapIsDirty(pPixmap) ? 'd' : 'c'));

	pExaPixmap->offscreen = FALSE;

	pPixmap->devKind = pExaPixmap->sys_pitch;
	pPixmap->drawable.serialNumber = NEXT_SERIAL_NUMBER;
    }
}

void
exaMoveOutPixmap (PixmapPtr pPixmap)
{
    static ExaMigrationRec migrate = { .as_dst = FALSE, .as_src = TRUE,
				       .pReg = NULL };

    migrate.pPix = pPixmap;
    exaDoMoveOutPixmap (&migrate);
}


/**
 * Copies out important pixmap data and removes references to framebuffer area.
 * Called when the memory manager decides it's time to kick the pixmap out of
 * framebuffer entirely.
 */
void
exaPixmapSave (ScreenPtr pScreen, ExaOffscreenArea *area)
{
    PixmapPtr pPixmap = area->privData;
    ExaPixmapPriv(pPixmap);

    exaMoveOutPixmap(pPixmap);

    pExaPixmap->fb_ptr = NULL;
    pExaPixmap->area = NULL;

    /* Mark all FB bits as invalid, so all valid system bits get copied to FB
     * next time */
    REGION_EMPTY(pPixmap->drawable.pScreen, &pExaPixmap->validFB);
}

/**
 * For the "greedy" migration scheme, pushes the pixmap toward being located in
 * framebuffer memory.
 */
static void
exaMigrateTowardFb (ExaMigrationPtr migrate)
{
    PixmapPtr pPixmap = migrate->pPix;
    ExaPixmapPriv (pPixmap);

    if (pExaPixmap == NULL) {
	DBG_MIGRATE(("UseScreen: ignoring exa-uncontrolled pixmap %p (%s)\n",
		     (pointer)pPixmap,
		     exaPixmapIsOffscreen(pPixmap) ? "s" : "m"));
	return;
    }

    if (pExaPixmap->score == EXA_PIXMAP_SCORE_PINNED) {
	DBG_MIGRATE(("UseScreen: not migrating pinned pixmap %p\n",
		     (pointer)pPixmap));
	return;
    }

    DBG_MIGRATE(("UseScreen %p score %d\n",
		 (pointer)pPixmap, pExaPixmap->score));

    if (pExaPixmap->score == EXA_PIXMAP_SCORE_INIT) {
	exaDoMoveInPixmap(migrate);
	pExaPixmap->score = 0;
    }

    if (pExaPixmap->score < EXA_PIXMAP_SCORE_MAX)
	pExaPixmap->score++;

    if (pExaPixmap->score >= EXA_PIXMAP_SCORE_MOVE_IN &&
	!exaPixmapIsOffscreen(pPixmap))
    {
	exaDoMoveInPixmap(migrate);
    }

    ExaOffscreenMarkUsed (pPixmap);
}

/**
 * For the "greedy" migration scheme, pushes the pixmap toward being located in
 * system memory.
 */
static void
exaMigrateTowardSys (ExaMigrationPtr migrate)
{
    PixmapPtr pPixmap = migrate->pPix;
    ExaPixmapPriv (pPixmap);

    if (pExaPixmap == NULL) {
	DBG_MIGRATE(("UseMem: ignoring exa-uncontrolled pixmap %p (%s)\n",
		     (pointer)pPixmap,
		     exaPixmapIsOffscreen(pPixmap) ? "s" : "m"));
	return;
    }

    DBG_MIGRATE(("UseMem: %p score %d\n", (pointer)pPixmap, pExaPixmap->score));

    if (pExaPixmap->score == EXA_PIXMAP_SCORE_PINNED)
	return;

    if (pExaPixmap->score == EXA_PIXMAP_SCORE_INIT)
	pExaPixmap->score = 0;

    if (pExaPixmap->score > EXA_PIXMAP_SCORE_MIN)
	pExaPixmap->score--;

    if (pExaPixmap->score <= EXA_PIXMAP_SCORE_MOVE_OUT && pExaPixmap->area)
	exaDoMoveOutPixmap(migrate);
}

/**
 * If the pixmap has both a framebuffer and system memory copy, this function
 * asserts that both of them are the same.
 */
static Bool
exaAssertNotDirty (PixmapPtr pPixmap)
{
    ExaPixmapPriv (pPixmap);
    CARD8 *dst, *src;
    RegionRec ValidReg;
    int dst_pitch, src_pitch, cpp, y, nbox;
    BoxPtr pBox;
    Bool ret = TRUE;

    if (exaPixmapIsPinned(pPixmap) || pExaPixmap->area == NULL)
	return ret;

    REGION_NULL(pScreen, &ValidReg);
    REGION_INTERSECT(pScreen, &ValidReg, &pExaPixmap->validFB,
		     &pExaPixmap->validSys);
    nbox = REGION_NUM_RECTS(&ValidReg);

    if (!nbox)
	goto out;

    pBox = REGION_RECTS(&ValidReg);

    dst_pitch = pExaPixmap->sys_pitch;
    src_pitch = pExaPixmap->fb_pitch;
    cpp = pPixmap->drawable.bitsPerPixel / 8;

    ExaDoPrepareAccess(&pPixmap->drawable, EXA_PREPARE_SRC);
    while (nbox--) {
	    int rowbytes;

	    pBox->x1 = max(pBox->x1, 0);
	    pBox->y1 = max(pBox->y1, 0);
	    pBox->x2 = min(pBox->x2, pPixmap->drawable.width);
	    pBox->y2 = min(pBox->y2, pPixmap->drawable.height);

	    if (pBox->x1 >= pBox->x2 || pBox->y1 >= pBox->y2)
		continue;

	    rowbytes = (pBox->x2 - pBox->x1) * cpp;
	    src = pExaPixmap->fb_ptr + pBox->y1 * src_pitch + pBox->x1 * cpp;
	    dst = pExaPixmap->sys_ptr + pBox->y1 * dst_pitch + pBox->x1 * cpp;

	    for (y = pBox->y1; y < pBox->y2;
		 y++, src += src_pitch, dst += dst_pitch) {
		if (memcmp(dst, src, rowbytes) != 0) {
		    ret = FALSE;
		    exaPixmapDirty(pPixmap, pBox->x1, pBox->y1, pBox->x2,
				   pBox->y2);
		    break;
		}
	    }
    }
    exaFinishAccess(&pPixmap->drawable, EXA_PREPARE_SRC);

out:
    REGION_UNINIT(pScreen, &ValidReg);
    return ret;
}

/**
 * Performs migration of the pixmaps according to the operation information
 * provided in pixmaps and can_accel and the migration scheme chosen in the
 * config file.
 */
void
exaDoMigration (ExaMigrationPtr pixmaps, int npixmaps, Bool can_accel)
{
    ScreenPtr pScreen = pixmaps[0].pPix->drawable.pScreen;
    ExaScreenPriv(pScreen);
    int i, j;

    if (pExaScr->info->flags & EXA_HANDLES_PIXMAPS)
        return;

    /* If this debugging flag is set, check each pixmap for whether it is marked
     * as clean, and if so, actually check if that's the case.  This should help
     * catch issues with failing to mark a drawable as dirty.  While it will
     * catch them late (after the operation happened), it at least explains what
     * went wrong, and instrumenting the code to find what operation happened
     * to the pixmap last shouldn't be hard.
     */
    if (pExaScr->checkDirtyCorrectness) {
	for (i = 0; i < npixmaps; i++) {
	    if (!exaPixmapIsDirty (pixmaps[i].pPix) &&
		!exaAssertNotDirty (pixmaps[i].pPix))
		ErrorF("%s: Pixmap %d dirty but not marked as such!\n", __func__, i);
	}
    }
    /* If anything is pinned in system memory, we won't be able to
     * accelerate.
     */
    for (i = 0; i < npixmaps; i++) {
	if (exaPixmapIsPinned (pixmaps[i].pPix) &&
	    !exaPixmapIsOffscreen (pixmaps[i].pPix))
	{
	    EXA_FALLBACK(("Pixmap %p (%dx%d) pinned in sys\n", pixmaps[i].pPix,
		      pixmaps[i].pPix->drawable.width,
		      pixmaps[i].pPix->drawable.height));
	    can_accel = FALSE;
	    break;
	}
    }

    if (pExaScr->migration == ExaMigrationSmart) {
	/* If we've got something as a destination that we shouldn't cause to
	 * become newly dirtied, take the unaccelerated route.
	 */
	for (i = 0; i < npixmaps; i++) {
	    if (pixmaps[i].as_dst && !exaPixmapShouldBeInFB (pixmaps[i].pPix) &&
		!exaPixmapIsDirty (pixmaps[i].pPix))
	    {
		for (i = 0; i < npixmaps; i++) {
		    if (!exaPixmapIsDirty (pixmaps[i].pPix))
			exaDoMoveOutPixmap (pixmaps + i);
		}
		return;
	    }
	}

	/* If we aren't going to accelerate, then we migrate everybody toward
	 * system memory, and kick out if it's free.
	 */
	if (!can_accel) {
	    for (i = 0; i < npixmaps; i++) {
		exaMigrateTowardSys (pixmaps + i);
		if (!exaPixmapIsDirty (pixmaps[i].pPix))
		    exaDoMoveOutPixmap (pixmaps + i);
	    }
	    return;
	}

	/* Finally, the acceleration path.  Move them all in. */
	for (i = 0; i < npixmaps; i++) {
	    exaMigrateTowardFb(pixmaps + i);
	    exaDoMoveInPixmap(pixmaps + i);
	}
    } else if (pExaScr->migration == ExaMigrationGreedy) {
	/* If we can't accelerate, either because the driver can't or because one of
	 * the pixmaps is pinned in system memory, then we migrate everybody toward
	 * system memory.
	 *
	 * We also migrate toward system if all pixmaps involved are currently in
	 * system memory -- this can mitigate thrashing when there are significantly
	 * more pixmaps active than would fit in memory.
	 *
	 * If not, then we migrate toward FB so that hopefully acceleration can
	 * happen.
	 */
	if (!can_accel) {
	    for (i = 0; i < npixmaps; i++)
		exaMigrateTowardSys (pixmaps + i);
	    return;
	}

	for (i = 0; i < npixmaps; i++) {
	    if (exaPixmapIsOffscreen(pixmaps[i].pPix)) {
		/* Found one in FB, so move all to FB. */
		for (j = 0; j < npixmaps; j++)
		    exaMigrateTowardFb(pixmaps + i);
		return;
	    }
	}

	/* Nobody's in FB, so move all away from FB. */
	for (i = 0; i < npixmaps; i++)
	    exaMigrateTowardSys(pixmaps + i);
    } else if (pExaScr->migration == ExaMigrationAlways) {
	/* Always move the pixmaps out if we can't accelerate.  If we can
	 * accelerate, try to move them all in.  If that fails, then move them
	 * back out.
	 */
	if (!can_accel) {
	    for (i = 0; i < npixmaps; i++)
		exaDoMoveOutPixmap(pixmaps + i);
	    return;
	}

	/* Now, try to move them all into FB */
	for (i = 0; i < npixmaps; i++) {
	    exaDoMoveInPixmap(pixmaps + i);
	}

	/* If we couldn't fit everything in, abort */
	for (i = 0; i < npixmaps; i++) {
	    if (!exaPixmapIsOffscreen(pixmaps[i].pPix)) {
		return;
	    }
	}

	/* Yay, everything's offscreen, mark memory as used */
	for (i = 0; i < npixmaps; i++) {
	    ExaOffscreenMarkUsed (pixmaps[i].pPix);
	}
    }
}
@


1.4
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@@


1.3
log
@Update to xserver 1.5.3 + latests commits on server-1.5-branch.
tested by stsp@@, david@@, form@@, ckuethe@@, oga@@. thanks.
@
text
@a35 2
#include <X11/fonts/fontstruct.h>
#include "dixfontstr.h"
a36 1
#include "cw.h"
d165 1
d174 1
d214 1
a214 1
				    pExaPixmap->sys_ptr
d216 1
a216 1
				    + pBox->x1 * pPixmap->drawable.bitsPerPixel / 8,
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d135 1
d227 2
a228 1
	}
d235 1
a235 1
    else
@


1.1
log
@Initial revision
@
text
@d25 1
d62 21
d92 3
a94 1
    return pExaPixmap == NULL || pExaPixmap->dirty == TRUE;
d117 1
a117 2
 * the framebuffer  memory copy to the system memory copy.  Both areas must be
 * allocated.
d120 5
a124 1
exaCopyDirtyToSys (PixmapPtr pPixmap)
d126 1
a126 1
    ExaScreenPriv (pPixmap->drawable.pScreen);
d128 3
a130 1
    CARD8 *save_ptr;
d132 3
d136 39
a174 2
    if (!pExaPixmap->dirty)
	return;
d176 2
a177 4
    save_ptr = pPixmap->devPrivate.ptr;
    save_pitch = pPixmap->devKind;
    pPixmap->devPrivate.ptr = pExaPixmap->fb_ptr;
    pPixmap->devKind = pExaPixmap->fb_pitch;
d179 13
a191 11
    if (pExaScr->info->DownloadFromScreen == NULL ||
	!pExaScr->info->DownloadFromScreen (pPixmap,
					    0,
					    0,
					    pPixmap->drawable.width,
					    pPixmap->drawable.height,
					    pExaPixmap->sys_ptr,
					    pExaPixmap->sys_pitch))
    {
	char *src, *dst;
	int src_pitch, dst_pitch, i, bytes;
d193 2
a194 1
	exaPrepareAccess(&pPixmap->drawable, EXA_PREPARE_SRC);
d196 4
a199 5
	dst = pExaPixmap->sys_ptr;
	dst_pitch = pExaPixmap->sys_pitch;
	src = pExaPixmap->fb_ptr;
	src_pitch = pExaPixmap->fb_pitch;
	bytes = src_pitch < dst_pitch ? src_pitch : dst_pitch;
d201 25
a225 4
	for (i = 0; i < pPixmap->drawable.height; i++) {
	    memcpy (dst, src, bytes);
	    dst += dst_pitch;
	    src += src_pitch;
d227 2
a228 1
	exaFinishAccess(&pPixmap->drawable, EXA_PREPARE_SRC);
d231 4
a234 4
    /* Make sure the bits have actually landed, since we don't necessarily sync
     * when accessing pixmaps in system memory.
     */
    exaWaitSync (pPixmap->drawable.pScreen);
d236 1
a236 1
    pPixmap->devPrivate.ptr = save_ptr;
d239 4
a242 1
    pExaPixmap->dirty = FALSE;
d247 1
a247 1
 * the system memory copy to the framebuffer memory copy.  Both areas must be
d251 1
a251 1
exaCopyDirtyToFb (PixmapPtr pPixmap)
d253 1
a255 24
    CARD8 *save_ptr;
    int save_pitch;

    if (!pExaPixmap->dirty)
	return;

    save_ptr = pPixmap->devPrivate.ptr;
    save_pitch = pPixmap->devKind;
    pPixmap->devPrivate.ptr = pExaPixmap->fb_ptr;
    pPixmap->devKind = pExaPixmap->fb_pitch;

    if (pExaScr->info->UploadToScreen == NULL ||
	!pExaScr->info->UploadToScreen (pPixmap,
					0,
					0,
					pPixmap->drawable.width,
					pPixmap->drawable.height,
					pExaPixmap->sys_ptr,
					pExaPixmap->sys_pitch))
    {
	char *src, *dst;
	int src_pitch, dst_pitch, i, bytes;

	exaPrepareAccess(&pPixmap->drawable, EXA_PREPARE_DEST);
d257 4
a260 18
	dst = pExaPixmap->fb_ptr;
	dst_pitch = pExaPixmap->fb_pitch;
	src = pExaPixmap->sys_ptr;
	src_pitch = pExaPixmap->sys_pitch;
	bytes = src_pitch < dst_pitch ? src_pitch : dst_pitch;

	for (i = 0; i < pPixmap->drawable.height; i++) {
	    memcpy (dst, src, bytes);
	    dst += dst_pitch;
	    src += src_pitch;
	}
	exaFinishAccess(&pPixmap->drawable, EXA_PREPARE_DEST);
    }

    pPixmap->devPrivate.ptr = save_ptr;
    pPixmap->devKind = save_pitch;

    pExaPixmap->dirty = FALSE;
d264 3
a266 3
 * Copies out important pixmap data and removes references to framebuffer area.
 * Called when the memory manager decides it's time to kick the pixmap out of
 * framebuffer entirely.
d269 1
a269 1
exaPixmapSave (ScreenPtr pScreen, ExaOffscreenArea *area)
d271 3
a273 16
    PixmapPtr pPixmap = area->privData;
    ExaPixmapPriv(pPixmap);

    DBG_MIGRATE (("Save %p (%p) (%dx%d) (%c)\n", pPixmap,
		  (void*)(ExaGetPixmapPriv(pPixmap)->area ?
                          ExaGetPixmapPriv(pPixmap)->area->offset : 0),
		  pPixmap->drawable.width,
		  pPixmap->drawable.height,
		  exaPixmapIsDirty(pPixmap) ? 'd' : 'c'));

    if (exaPixmapIsOffscreen(pPixmap)) {
	exaCopyDirtyToSys (pPixmap);
	pPixmap->devPrivate.ptr = pExaPixmap->sys_ptr;
	pPixmap->devKind = pExaPixmap->sys_pitch;
	pPixmap->drawable.serialNumber = NEXT_SERIAL_NUMBER;
    }
d275 4
a278 7
    pExaPixmap->fb_ptr = NULL;
    pExaPixmap->area = NULL;

    /* Mark it dirty now, to say that there is important data in the
     * system-memory copy.
     */
    pExaPixmap->dirty = TRUE;
d296 2
a297 2
void
exaMoveInPixmap (PixmapPtr pPixmap)
d299 2
a300 1
    ScreenPtr	pScreen = pPixmap->drawable.pScreen;
a307 4
    /* If we're already in FB, our work is done. */
    if (exaPixmapIsOffscreen(pPixmap))
	return;

d319 3
d334 5
d346 1
a346 1
    exaCopyDirtyToFb (pPixmap);
a347 4
    if (pExaScr->hideOffscreenPixmapData)
	pPixmap->devPrivate.ptr = NULL;
    else
	pPixmap->devPrivate.ptr = pExaPixmap->fb_ptr;
d352 10
d366 2
a367 2
void
exaMoveOutPixmap (PixmapPtr pPixmap)
d369 1
d372 1
a372 1
    if (exaPixmapIsPinned(pPixmap))
d375 2
d386 1
a386 1
	exaCopyDirtyToSys (pPixmap);
a387 1
	pPixmap->devPrivate.ptr = pExaPixmap->sys_ptr;
d393 32
d430 1
a430 1
exaMigrateTowardFb (PixmapPtr pPixmap)
d432 1
d452 1
a452 1
	exaMoveInPixmap(pPixmap);
d462 1
a462 1
	exaMoveInPixmap (pPixmap);
d473 1
a473 1
exaMigrateTowardSys (PixmapPtr pPixmap)
d475 1
d497 1
a497 1
	exaMoveOutPixmap (pPixmap);
d504 1
a504 1
static void
d509 15
a523 1
    int dst_pitch, src_pitch, data_row_bytes, y;
d525 1
a525 2
    if (pExaPixmap == NULL || pExaPixmap->fb_ptr == NULL)
	return;
a526 1
    dst = pExaPixmap->sys_ptr;
a527 1
    src = pExaPixmap->fb_ptr;
d529 1
a529 2
    data_row_bytes = pPixmap->drawable.width *
		     pPixmap->drawable.bitsPerPixel / 8;
d531 25
a555 7
    exaPrepareAccess(&pPixmap->drawable, EXA_PREPARE_SRC);
    for (y = 0; y < pPixmap->drawable.height; y++) {
	if (memcmp(dst, src, data_row_bytes) != 0) {
	     abort();
	}
	dst += dst_pitch;
	src += src_pitch;
d558 4
d576 3
d588 3
a590 2
	    if (!exaPixmapIsDirty (pixmaps[i].pPix))
		exaAssertNotDirty (pixmaps[i].pPix);
d618 1
a618 1
			exaMoveOutPixmap (pixmaps[i].pPix);
d629 1
a629 1
		exaMigrateTowardSys (pixmaps[i].pPix);
d631 1
a631 1
		    exaMoveOutPixmap (pixmaps[i].pPix);
d638 2
a639 2
	    exaMigrateTowardFb(pixmaps[i].pPix);
	    exaMoveInPixmap(pixmaps[i].pPix);
d655 1
a655 1
		exaMigrateTowardSys (pixmaps[i].pPix);
d663 1
a663 1
		    exaMigrateTowardFb(pixmaps[j].pPix);
d670 1
a670 1
	    exaMigrateTowardSys(pixmaps[i].pPix);
d678 1
a678 1
		exaMoveOutPixmap(pixmaps[i].pPix);
d684 1
a684 2
	    exaMoveInPixmap(pixmaps[i].pPix);
	    ExaOffscreenMarkUsed (pixmaps[i].pPix);
d687 1
a687 1
	/* If we couldn't fit everything in, then kick back out */
d690 1
a690 6
		EXA_FALLBACK(("Pixmap %p (%dx%d) not in fb\n", pixmaps[i].pPix,
			      pixmaps[i].pPix->drawable.width,
			      pixmaps[i].pPix->drawable.height));
		for (j = 0; j < npixmaps; j++)
		    exaMoveOutPixmap(pixmaps[j].pPix);
		break;
d692 5
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@a24 1
 *    Michel Dänzer <michel@@tungstengraphics.com>
a60 21
 * The fallback path for UTS/DFS failing is to just memcpy.  exaCopyDirtyToSys
 * and exaCopyDirtyToFb both needed to do this loop.
 */
static void
exaMemcpyBox (PixmapPtr pPixmap, BoxPtr pbox, CARD8 *src, int src_pitch,
	      CARD8 *dst, int dst_pitch)
 {
    int i, cpp = pPixmap->drawable.bitsPerPixel / 8;
    int bytes = (pbox->x2 - pbox->x1) * cpp;

    src += pbox->y1 * src_pitch + pbox->x1 * cpp;
    dst += pbox->y1 * dst_pitch + pbox->x1 * cpp;

    for (i = pbox->y2 - pbox->y1; i; i--) {
	memcpy (dst, src, bytes);
	src += src_pitch;
	dst += dst_pitch;
    }
}
 
/**
d70 1
a70 2
    return pExaPixmap == NULL ||
	REGION_NOTEMPTY (pScreen, DamageRegion(pExaPixmap->pDamage));
a100 1
    RegionPtr pRegion = DamageRegion (pExaPixmap->pDamage);
d103 3
a105 3
    BoxPtr pBox = REGION_RECTS(pRegion);
    int nbox = REGION_NUM_RECTS(pRegion);
    Bool do_sync = FALSE;
d112 24
a135 24
    while (nbox--) {
	pBox->x1 = max(pBox->x1, 0);
	pBox->y1 = max(pBox->y1, 0);
	pBox->x2 = min(pBox->x2, pPixmap->drawable.width);
	pBox->y2 = min(pBox->y2, pPixmap->drawable.height);

	if (pBox->x1 >= pBox->x2 || pBox->y1 >= pBox->y2)
	    continue;

	if (pExaScr->info->DownloadFromScreen == NULL ||
	    !pExaScr->info->DownloadFromScreen (pPixmap,
						pBox->x1, pBox->y1,
						pBox->x2 - pBox->x1,
						pBox->y2 - pBox->y1,
						pExaPixmap->sys_ptr
						+ pBox->y1 * pExaPixmap->sys_pitch
						+ pBox->x1 * pPixmap->drawable.bitsPerPixel / 8,
						pExaPixmap->sys_pitch))
	{
	    exaPrepareAccess(&pPixmap->drawable, EXA_PREPARE_SRC);
	    exaMemcpyBox (pPixmap, pBox,
			  pExaPixmap->fb_ptr, pExaPixmap->fb_pitch,
			  pExaPixmap->sys_ptr, pExaPixmap->sys_pitch);
	    exaFinishAccess(&pPixmap->drawable, EXA_PREPARE_SRC);
d137 1
a137 4
	else
	    do_sync = TRUE;

	pBox++;
d143 1
a143 2
    if (do_sync)
	exaWaitSync (pPixmap->drawable.pScreen);
d148 1
a148 4
    /* The previously damaged bits are now no longer damaged but valid */
    REGION_UNION(pPixmap->drawable.pScreen,
		 &pExaPixmap->validReg, &pExaPixmap->validReg, pRegion);
    DamageEmpty (pExaPixmap->pDamage);
a160 1
    RegionPtr pRegion = DamageRegion (pExaPixmap->pDamage);
d163 3
a165 3
    BoxPtr pBox = REGION_RECTS(pRegion);
    int nbox = REGION_NUM_RECTS(pRegion);
    Bool do_sync = FALSE;
d172 24
a195 24
    while (nbox--) {
	pBox->x1 = max(pBox->x1, 0);
	pBox->y1 = max(pBox->y1, 0);
	pBox->x2 = min(pBox->x2, pPixmap->drawable.width);
	pBox->y2 = min(pBox->y2, pPixmap->drawable.height);

	if (pBox->x1 >= pBox->x2 || pBox->y1 >= pBox->y2)
	    continue;

	if (pExaScr->info->UploadToScreen == NULL ||
	    !pExaScr->info->UploadToScreen (pPixmap,
					    pBox->x1, pBox->y1,
					    pBox->x2 - pBox->x1,
					    pBox->y2 - pBox->y1,
					    pExaPixmap->sys_ptr
					    + pBox->y1 * pExaPixmap->sys_pitch
					    + pBox->x1 * pPixmap->drawable.bitsPerPixel / 8,
					    pExaPixmap->sys_pitch))
	{
	    exaPrepareAccess(&pPixmap->drawable, EXA_PREPARE_DEST);
	    exaMemcpyBox (pPixmap, pBox,
			  pExaPixmap->sys_ptr, pExaPixmap->sys_pitch,
			  pExaPixmap->fb_ptr, pExaPixmap->fb_pitch);
	    exaFinishAccess(&pPixmap->drawable, EXA_PREPARE_DEST);
d197 1
a197 4
	else
	    do_sync = TRUE;

	pBox++;
a199 3
    if (do_sync)
	exaMarkSync (pPixmap->drawable.pScreen);

d203 1
a203 4
    /* The previously damaged bits are now no longer damaged but valid */
    REGION_UNION(pPixmap->drawable.pScreen,
		 &pExaPixmap->validReg, &pExaPixmap->validReg, pRegion);
    DamageEmpty (pExaPixmap->pDamage);
d211 1
a211 1
void
a215 1
    RegionPtr pDamageReg = DamageRegion(pExaPixmap->pDamage);
d234 4
a237 3
    /* Mark all valid bits as damaged, so they'll get copied to FB next time */
    REGION_UNION(pPixmap->drawable.pScreen, pDamageReg, pDamageReg,
		 &pExaPixmap->validReg);
d416 1
a416 1
static Bool
d421 1
a421 4
    RegionPtr pValidReg = &pExaPixmap->validReg;
    int dst_pitch, src_pitch, cpp, y, nbox = REGION_NUM_RECTS(pValidReg);
    BoxPtr pBox = REGION_RECTS(pValidReg);
    Bool ret = TRUE;
d423 2
a424 2
    if (!nbox || exaPixmapIsPinned(pPixmap) || pExaPixmap->fb_ptr == NULL)
	return ret;
d426 1
d428 1
d430 2
a431 1
    cpp = pPixmap->drawable.bitsPerPixel / 8;
d434 6
a439 24
    while (nbox--) {
	    int rowbytes;

	    pBox->x1 = max(pBox->x1, 0);
	    pBox->y1 = max(pBox->y1, 0);
	    pBox->x2 = min(pBox->x2, pPixmap->drawable.width);
	    pBox->y2 = min(pBox->y2, pPixmap->drawable.height);

	    if (pBox->x1 >= pBox->x2 || pBox->y1 >= pBox->y2)
		continue;

	    rowbytes = (pBox->x2 - pBox->x1) * cpp;
	    src = pExaPixmap->fb_ptr + pBox->y1 * src_pitch + pBox->x1 * cpp;
	    dst = pExaPixmap->sys_ptr + pBox->y1 * dst_pitch + pBox->x1 * cpp;

	    for (y = pBox->y1; y < pBox->y2;
		 y++, src += src_pitch, dst += dst_pitch) {
		if (memcmp(dst, src, rowbytes) != 0) {
		    ret = FALSE;
		    exaPixmapDirty(pPixmap, pBox->x1, pBox->y1, pBox->x2,
				   pBox->y2);
		    break;
		}
	    }
a441 2

    return ret;
d465 2
a466 3
	    if (!exaPixmapIsDirty (pixmaps[i].pPix) &&
		!exaAssertNotDirty (pixmaps[i].pPix))
		ErrorF("%s: Pixmap %d dirty but not marked as such!\n", __func__, i);
@


1.1.1.3
log
@xserver 1.4.0.90
@
text
@a321 4
    if (pPixmap->drawable.width > pExaScr->info->maxX ||
	pPixmap->drawable.height > pExaScr->info->maxY)
	return;

@


