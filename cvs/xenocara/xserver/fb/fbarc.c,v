head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.22
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.20
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.18
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.16
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.14
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.12
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.06.10.13.21.21;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.22;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.13;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.36;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.36;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Copyright Â© 1998 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "fb.h"
#include "mizerarc.h"
#include <limits.h>

typedef void (*FbArc) (FbBits * dst,
                       FbStride dstStride,
                       int dstBpp,
                       xArc * arc, int dx, int dy, FbBits and, FbBits xor);

void
fbPolyArc(DrawablePtr pDrawable, GCPtr pGC, int narcs, xArc * parcs)
{
    FbArc arc;

    if (pGC->lineWidth == 0) {
        arc = 0;
        if (pGC->lineStyle == LineSolid && pGC->fillStyle == FillSolid) {
            switch (pDrawable->bitsPerPixel) {
            case 8:
                arc = fbArc8;
                break;
            case 16:
                arc = fbArc16;
                break;
            case 24:
                arc = fbArc24;
                break;
            case 32:
                arc = fbArc32;
                break;
            }
        }
        if (arc) {
            FbGCPrivPtr pPriv = fbGetGCPrivate(pGC);
            FbBits *dst;
            FbStride dstStride;
            int dstBpp;
            int dstXoff, dstYoff;
            BoxRec box;
            int x2, y2;
            RegionPtr cclip;

#ifdef FB_ACCESS_WRAPPER
            int wrapped = 1;
#endif

            cclip = fbGetCompositeClip(pGC);
            fbGetDrawable(pDrawable, dst, dstStride, dstBpp, dstXoff, dstYoff);
            while (narcs--) {
                if (miCanZeroArc(parcs)) {
                    box.x1 = parcs->x + pDrawable->x;
                    box.y1 = parcs->y + pDrawable->y;
                    /*
                     * Because box.x2 and box.y2 get truncated to 16 bits, and the
                     * RECT_IN_REGION test treats the resulting number as a signed
                     * integer, the RECT_IN_REGION test alone can go the wrong way.
                     * This can result in a server crash because the rendering
                     * routines in this file deal directly with cpu addresses
                     * of pixels to be stored, and do not clip or otherwise check
                     * that all such addresses are within their respective pixmaps.
                     * So we only allow the RECT_IN_REGION test to be used for
                     * values that can be expressed correctly in a signed short.
                     */
                    x2 = box.x1 + (int) parcs->width + 1;
                    box.x2 = x2;
                    y2 = box.y1 + (int) parcs->height + 1;
                    box.y2 = y2;
                    if ((x2 <= SHRT_MAX) && (y2 <= SHRT_MAX) &&
                        (RegionContainsRect(cclip, &box) == rgnIN)) {
#ifdef FB_ACCESS_WRAPPER
                        if (!wrapped) {
                            fbPrepareAccess(pDrawable);
                            wrapped = 1;
                        }
#endif
                        (*arc) (dst, dstStride, dstBpp,
                                parcs, pDrawable->x + dstXoff,
                                pDrawable->y + dstYoff, pPriv->and, pPriv->xor);
                    }
                    else {
#ifdef FB_ACCESS_WRAPPER
                        if (wrapped) {
                            fbFinishAccess(pDrawable);
                            wrapped = 0;
                        }
#endif
                        miZeroPolyArc(pDrawable, pGC, 1, parcs);
                    }
                }
                else {
#ifdef FB_ACCESS_WRAPPER
                    if (wrapped) {
                        fbFinishAccess(pDrawable);
                        wrapped = 0;
                    }
#endif
                    miPolyArc(pDrawable, pGC, 1, parcs);
                }
                parcs++;
            }
#ifdef FB_ACCESS_WRAPPER
            if (wrapped) {
                fbFinishAccess(pDrawable);
                wrapped = 0;
            }
#endif
        }
        else
            miZeroPolyArc(pDrawable, pGC, narcs, parcs);
    }
    else
        miPolyArc(pDrawable, pGC, narcs, parcs);
}
@


1.5
log
@Update to xserver 1.11.2
@
text
@d31 4
a34 8
typedef void	(*FbArc) (FbBits    *dst, 
			  FbStride  dstStride, 
			  int	    dstBpp, 
			  xArc	    *arc, 
			  int	    dx,
			  int	    dy,
			  FbBits    and, 
			  FbBits    xor);
d37 1
a37 4
fbPolyArc (DrawablePtr	pDrawable,
	   GCPtr	pGC,
	   int		narcs,
	   xArc		*parcs)
d39 30
a68 25
    FbArc	arc;
    
    if (pGC->lineWidth == 0)
    {
	arc = 0;
	if (pGC->lineStyle == LineSolid && pGC->fillStyle == FillSolid)
	{
	    switch (pDrawable->bitsPerPixel)
	    {
	    case 8:	arc = fbArc8; break;
	    case 16:    arc = fbArc16; break;
	    case 24:	arc = fbArc24; break;
	    case 32:    arc = fbArc32; break;
	    }
	}
	if (arc)
	{
	    FbGCPrivPtr	pPriv = fbGetGCPrivate (pGC);
	    FbBits	*dst;
	    FbStride	dstStride;
	    int		dstBpp;
	    int		dstXoff, dstYoff;
	    BoxRec	box;
	    int		x2, y2;
	    RegionPtr	cclip;
d70 1
a70 1
	    int		wrapped = 1;
d72 24
a95 26
	    
	    cclip = fbGetCompositeClip (pGC);
	    fbGetDrawable (pDrawable, dst, dstStride, dstBpp, dstXoff, dstYoff);
	    while (narcs--)
	    {
		if (miCanZeroArc (parcs))
		{
		    box.x1 = parcs->x + pDrawable->x;
		    box.y1 = parcs->y + pDrawable->y;
		    /*
		     * Because box.x2 and box.y2 get truncated to 16 bits, and the
		     * RECT_IN_REGION test treats the resulting number as a signed
		     * integer, the RECT_IN_REGION test alone can go the wrong way.
		     * This can result in a server crash because the rendering
		     * routines in this file deal directly with cpu addresses
		     * of pixels to be stored, and do not clip or otherwise check
		     * that all such addresses are within their respective pixmaps.
		     * So we only allow the RECT_IN_REGION test to be used for
		     * values that can be expressed correctly in a signed short.
		     */
		    x2 = box.x1 + (int)parcs->width + 1;
		    box.x2 = x2;
		    y2 = box.y1 + (int)parcs->height + 1;
		    box.y2 = y2;
		    if ( (x2 <= SHRT_MAX) && (y2 <= SHRT_MAX) &&
			(RegionContainsRect(cclip, &box) == rgnIN) ) {
d97 4
a100 4
			if (!wrapped) {
			    fbPrepareAccess (pDrawable);
			    wrapped = 1;
			}
d102 5
a106 4
			(*arc) (dst, dstStride, dstBpp, 
				parcs, pDrawable->x + dstXoff, pDrawable->y + dstYoff, 
				pPriv->and, pPriv->xor);
		    } else {
d108 4
a111 4
		    	if (wrapped) {
	    			fbFinishAccess (pDrawable);
				wrapped = 0;
			}
d113 4
a116 4
			miZeroPolyArc(pDrawable, pGC, 1, parcs);
		    }
		}
		else {
d118 4
a121 4
		    if (wrapped) {
	    		fbFinishAccess (pDrawable);
			wrapped = 0;
		    }
d123 4
a126 4
		    miPolyArc(pDrawable, pGC, 1, parcs);
		}
		parcs++;
	    }
d128 4
a131 4
	    if (wrapped) {
		fbFinishAccess (pDrawable);
		wrapped = 0;
	    }
d133 3
a135 3
	}
	else
	    miZeroPolyArc (pDrawable, pGC, narcs, parcs);
d138 1
a138 1
	miPolyArc (pDrawable, pGC, narcs, parcs);
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a49 1
#ifndef FBNOPIXADDR
a56 1
#ifdef FB_24BIT
a57 1
#endif
d71 3
a73 1
	    int		wrapped = 0;
a76 5
#ifdef FB_ACCESS_WRAPPER
	    wrapped = 1;
#else
	    wrapped = 0;
#endif
a137 1
#endif
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d105 1
a105 1
			(RECT_IN_REGION(pDrawable->pScreen, cclip, &box) == rgnIN) ) {
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d80 2
@


1.1
log
@Initial revision
@
text
@a1 2
 * Id: fbarc.c,v 1.1 1999/11/02 03:54:45 keithp Exp $
 *
d74 1
d78 3
d103 7
a109 1
			(RECT_IN_REGION(pDrawable->pScreen, cclip, &box) == rgnIN) )
d113 7
a119 1
		    else
d121 1
d123 7
a129 1
		else
d131 1
d134 6
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
a111 1
	    fbFinishAccess (pDrawable);
@

