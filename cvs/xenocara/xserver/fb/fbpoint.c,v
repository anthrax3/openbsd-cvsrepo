head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.09.16.19.10.20;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	Te1daavkBLskZ8gc;

1.4
date	2012.06.10.13.21.21;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.43;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.43;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.32;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright Â© 1998 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "fb.h"

typedef void (*FbDots) (FbBits * dst,
                        FbStride dstStride,
                        int dstBpp,
                        BoxPtr pBox,
                        xPoint * pts,
                        int npt,
                        int xorg,
                        int yorg, int xoff, int yoff, FbBits and, FbBits xor);

static void
fbDots(FbBits * dstOrig,
       FbStride dstStride,
       int dstBpp,
       BoxPtr pBox,
       xPoint * pts,
       int npt,
       int xorg, int yorg, int xoff, int yoff, FbBits andOrig, FbBits xorOrig)
{
    FbStip *dst = (FbStip *) dstOrig;
    int x1, y1, x2, y2;
    int x, y;
    FbStip *d;
    FbStip and = andOrig;
    FbStip xor = xorOrig;

    dstStride = FbBitsStrideToStipStride(dstStride);
    x1 = pBox->x1;
    y1 = pBox->y1;
    x2 = pBox->x2;
    y2 = pBox->y2;
    while (npt--) {
        x = pts->x + xorg;
        y = pts->y + yorg;
        pts++;
        if (x1 <= x && x < x2 && y1 <= y && y < y2) {
            x = (x + xoff) * dstBpp;
            d = dst + ((y + yoff) * dstStride) + (x >> FB_STIP_SHIFT);
            x &= FB_STIP_MASK;
            if (dstBpp == 24) {
                FbStip leftMask, rightMask;
                int n, rot;
                FbStip andT, xorT;

                rot = FbFirst24Rot(x);
                andT = FbRot24Stip(and, rot);
                xorT = FbRot24Stip(xor, rot);
                FbMaskStip(x, 24, leftMask, n, rightMask);
                if (leftMask) {
                    WRITE(d, FbDoMaskRRop(READ(d), andT, xorT, leftMask));
                    andT = FbNext24Stip(andT);
                    xorT = FbNext24Stip(xorT);
                    d++;
                }
                if (rightMask)
                    WRITE(d, FbDoMaskRRop(READ(d), andT, xorT, rightMask));
            }
            else {
                FbStip mask;

                mask = FbStipMask(x, dstBpp);
                WRITE(d, FbDoMaskRRop(READ(d), and, xor, mask));
            }
        }
    }
}

void
fbPolyPoint(DrawablePtr pDrawable,
            GCPtr pGC, int mode, int nptInit, xPoint * pptInit)
{
    FbGCPrivPtr pPriv = fbGetGCPrivate(pGC);
    RegionPtr pClip = fbGetCompositeClip(pGC);
    FbBits *dst;
    FbStride dstStride;
    int dstBpp;
    int dstXoff, dstYoff;
    FbDots dots;
    FbBits and, xor;
    xPoint *ppt;
    int npt;
    BoxPtr pBox;
    int nBox;

    /* make pointlist origin relative */
    ppt = pptInit;
    npt = nptInit;
    if (mode == CoordModePrevious) {
        npt--;
        while (npt--) {
            ppt++;
            ppt->x += (ppt - 1)->x;
            ppt->y += (ppt - 1)->y;
        }
    }
    fbGetDrawable(pDrawable, dst, dstStride, dstBpp, dstXoff, dstYoff);
    and = pPriv->and;
    xor = pPriv->xor;
    dots = fbDots;
    switch (dstBpp) {
    case 8:
        dots = fbDots8;
        break;
    case 16:
        dots = fbDots16;
        break;
    case 24:
        dots = fbDots24;
        break;
    case 32:
        dots = fbDots32;
        break;
    }
    for (nBox = RegionNumRects(pClip), pBox = RegionRects(pClip);
         nBox--; pBox++)
        (*dots) (dst, dstStride, dstBpp, pBox, pptInit, nptInit,
                 pDrawable->x, pDrawable->y, dstXoff, dstYoff, and, xor);
    fbFinishAccess(pDrawable);
}
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d38 1
a38 1
void
@


1.3
log
@Update to xserver 1.11.2
@
text
@d29 8
a36 12
typedef void	(*FbDots)  (FbBits	*dst,
			    FbStride    dstStride,
			    int		dstBpp,
			    BoxPtr	pBox,
			    xPoint	*pts,
			    int		npt,
			    int		xorg,
			    int		yorg,
			    int		xoff,
			    int		yoff,
			    FbBits	and,
			    FbBits	xor);
d39 7
a45 12
fbDots (FbBits	    *dstOrig,
	FbStride    dstStride,
	int	    dstBpp,
	BoxPtr	    pBox,
	xPoint	    *pts,
	int	    npt,
	int	    xorg,
	int	    yorg,
	int	    xoff,
	int	    yoff,
	FbBits	    andOrig,
	FbBits	    xorOrig)
d47 6
a52 6
    FbStip	*dst = (FbStip *) dstOrig;
    int		x1, y1, x2, y2;
    int		x, y;
    FbStip	*d;
    FbStip	and = andOrig;
    FbStip	xor = xorOrig;
d54 1
a54 1
    dstStride = FbBitsStrideToStipStride (dstStride);
d59 33
a91 37
    while (npt--)
    {
	x = pts->x + xorg;
	y = pts->y + yorg;
	pts++;
	if (x1 <= x && x < x2 && y1 <= y && y < y2)
	{
	    x = (x + xoff) * dstBpp;
	    d = dst + ((y + yoff) * dstStride) + (x >> FB_STIP_SHIFT);
	    x &= FB_STIP_MASK;
	    if (dstBpp == 24)
	    {
		FbStip	leftMask, rightMask;
		int	n, rot;
		FbStip	andT, xorT;
		
		rot = FbFirst24Rot (x);
		andT = FbRot24Stip(and,rot);
		xorT = FbRot24Stip(xor,rot);
		FbMaskStip (x, 24, leftMask, n, rightMask);
		if (leftMask)
		{
		    WRITE(d, FbDoMaskRRop (READ(d), andT, xorT, leftMask));
		    andT = FbNext24Stip(andT);
		    xorT = FbNext24Stip(xorT);
		    d++;
		}
		if (rightMask)
		    WRITE(d, FbDoMaskRRop(READ(d), andT, xorT, rightMask));
	    }
	    else
	    {
		FbStip	mask;
		mask = FbStipMask(x, dstBpp);
		WRITE(d, FbDoMaskRRop (READ(d), and, xor, mask));
	    }
	}
d96 2
a97 5
fbPolyPoint (DrawablePtr    pDrawable,
	     GCPtr	    pGC,
	     int	    mode,
	     int	    nptInit,
	     xPoint	    *pptInit)
d99 13
a111 13
    FbGCPrivPtr pPriv = fbGetGCPrivate (pGC);
    RegionPtr	pClip = fbGetCompositeClip(pGC);
    FbBits	*dst;
    FbStride	dstStride;
    int		dstBpp;
    int		dstXoff, dstYoff;
    FbDots	dots;
    FbBits	and, xor;
    xPoint	*ppt;
    int		npt;
    BoxPtr	pBox;
    int		nBox;
    
d115 7
a121 9
    if (mode == CoordModePrevious)
    {
	npt--;
	while(npt--)
	{
	    ppt++;
	    ppt->x += (ppt-1)->x;
	    ppt->y += (ppt-1)->y;
	}
d123 1
a123 1
    fbGetDrawable (pDrawable, dst, dstStride, dstBpp, dstXoff, dstYoff);
d128 12
a139 4
    case 8:	dots = fbDots8; break;
    case 16:    dots = fbDots16; break;
    case 24:    dots = fbDots24; break;
    case 32:    dots = fbDots32; break;
d141 5
a145 5
    for (nBox = RegionNumRects (pClip), pBox = RegionRects (pClip);
	 nBox--; pBox++)
	(*dots) (dst, dstStride, dstBpp, pBox, pptInit, nptInit, 
		 pDrawable->x, pDrawable->y, dstXoff, dstYoff, and, xor);
    fbFinishAccess (pDrawable);
@


1.2
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a77 1
#ifdef FB_24BIT
a98 1
#endif
a144 1
#ifndef FBNOPIXADDR
a147 1
#ifdef FB_24BIT
a148 1
#endif
a150 1
#endif
@


1.1
log
@Initial revision
@
text
@a1 2
 * Id: fbpoint.c,v 1.1 1999/11/02 03:54:45 keithp Exp $
 *
d91 1
a91 1
		    *d = FbDoMaskRRop (*d, andT, xorT, leftMask);
d97 1
a97 1
		    *d = FbDoMaskRRop(*d, andT, xorT, rightMask);
d104 1
a104 1
		*d = FbDoMaskRRop (*d, and, xor, mask);
d157 1
a157 1
    for (nBox = REGION_NUM_RECTS (pClip), pBox = REGION_RECTS (pClip);
d161 1
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
d93 1
a93 1
		    WRITE(d, FbDoMaskRRop (READ(d), andT, xorT, leftMask));
d99 1
a99 1
		    WRITE(d, FbDoMaskRRop(READ(d), andT, xorT, rightMask));
d106 1
a106 1
		WRITE(d, FbDoMaskRRop (READ(d), and, xor, mask));
a162 1
    fbFinishAccess (pDrawable);
@

