head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.18
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.16
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.14
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.12
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.10
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.8
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.6
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.10
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2012.06.10.13.21.21;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.26;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.24.19.04.01;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.02.09.56.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.38;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.38;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Copyright Â© 2004 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "fb.h"

#include "picturestr.h"
#include "mipict.h"
#include "fbpict.h"
#include "damage.h"

void
fbAddTraps(PicturePtr pPicture,
           INT16 x_off, INT16 y_off, int ntrap, xTrap * traps)
{
    pixman_image_t *image;
    int dst_xoff, dst_yoff;

    if (!(image = image_from_pict(pPicture, FALSE, &dst_xoff, &dst_yoff)))
        return;

    pixman_add_traps(image, x_off + dst_xoff, y_off + dst_yoff,
                     ntrap, (pixman_trap_t *) traps);

    free_pixman_pict(pPicture, image);
}

void
fbRasterizeTrapezoid(PicturePtr pPicture,
                     xTrapezoid * trap, int x_off, int y_off)
{
    pixman_image_t *image;
    int dst_xoff, dst_yoff;

    if (!(image = image_from_pict(pPicture, FALSE, &dst_xoff, &dst_yoff)))
        return;

    pixman_rasterize_trapezoid(image, (pixman_trapezoid_t *) trap,
                               x_off + dst_xoff, y_off + dst_yoff);

    free_pixman_pict(pPicture, image);
}

void
fbAddTriangles(PicturePtr pPicture,
               INT16 x_off, INT16 y_off, int ntri, xTriangle * tris)
{
    pixman_image_t *image;
    int dst_xoff, dst_yoff;

    if (!(image = image_from_pict(pPicture, FALSE, &dst_xoff, &dst_yoff)))
        return;

    pixman_add_triangles(image,
                         dst_xoff + x_off, dst_yoff + y_off,
                         ntri, (pixman_triangle_t *) tris);

    free_pixman_pict(pPicture, image);
}

typedef void (*CompositeShapesFunc) (pixman_op_t op,
                                     pixman_image_t * src,
                                     pixman_image_t * dst,
                                     pixman_format_code_t mask_format,
                                     int x_src, int y_src,
                                     int x_dst, int y_dst,
                                     int n_shapes, const uint8_t * shapes);

static void
fbShapes(CompositeShapesFunc composite,
         pixman_op_t op,
         PicturePtr pSrc,
         PicturePtr pDst,
         PictFormatPtr maskFormat,
         int16_t xSrc,
         int16_t ySrc, int nshapes, int shape_size, const uint8_t * shapes)
{
    pixman_image_t *src, *dst;
    int src_xoff, src_yoff;
    int dst_xoff, dst_yoff;

    miCompositeSourceValidate(pSrc);

    src = image_from_pict(pSrc, FALSE, &src_xoff, &src_yoff);
    dst = image_from_pict(pDst, TRUE, &dst_xoff, &dst_yoff);

    if (src && dst) {
        pixman_format_code_t format;

        DamageRegionAppend(pDst->pDrawable, pDst->pCompositeClip);

        if (!maskFormat) {
            int i;

            if (pDst->polyEdge == PolyEdgeSharp)
                format = PIXMAN_a1;
            else
                format = PIXMAN_a8;

            for (i = 0; i < nshapes; ++i) {
                composite(op, src, dst, format,
                          xSrc + src_xoff,
                          ySrc + src_yoff,
                          dst_xoff, dst_yoff, 1, shapes + i * shape_size);
            }
        }
        else {
            switch (PICT_FORMAT_A(maskFormat->format)) {
            case 1:
                format = PIXMAN_a1;
                break;

            case 4:
                format = PIXMAN_a4;
                break;

            default:
            case 8:
                format = PIXMAN_a8;
                break;
            }

            composite(op, src, dst, format,
                      xSrc + src_xoff,
                      ySrc + src_yoff, dst_xoff, dst_yoff, nshapes, shapes);
        }

        DamageRegionProcessPending(pDst->pDrawable);
    }

    free_pixman_pict(pSrc, src);
    free_pixman_pict(pDst, dst);
}

void
fbTrapezoids(CARD8 op,
             PicturePtr pSrc,
             PicturePtr pDst,
             PictFormatPtr maskFormat,
             INT16 xSrc, INT16 ySrc, int ntrap, xTrapezoid * traps)
{
    xSrc -= (traps[0].left.p1.x >> 16);
    ySrc -= (traps[0].left.p1.y >> 16);

    fbShapes((CompositeShapesFunc) pixman_composite_trapezoids,
             op, pSrc, pDst, maskFormat,
             xSrc, ySrc, ntrap, sizeof(xTrapezoid), (const uint8_t *) traps);
}

void
fbTriangles(CARD8 op,
            PicturePtr pSrc,
            PicturePtr pDst,
            PictFormatPtr maskFormat,
            INT16 xSrc, INT16 ySrc, int ntris, xTriangle * tris)
{
    xSrc -= (tris[0].p1.x >> 16);
    ySrc -= (tris[0].p1.y >> 16);

    fbShapes((CompositeShapesFunc) pixman_composite_triangles,
             op, pSrc, pDst, maskFormat,
             xSrc, ySrc, ntris, sizeof(xTriangle), (const uint8_t *) tris);
}
@


1.6
log
@Update to xserver 1.11.2
@
text
@d35 2
a36 5
fbAddTraps (PicturePtr	pPicture,
	    INT16	x_off,
	    INT16	y_off,
	    int		ntrap,
	    xTrap	*traps)
d41 2
a42 5
    if (!(image = image_from_pict (pPicture, FALSE, &dst_xoff, &dst_yoff)))
	return;
    
    pixman_add_traps (image, x_off + dst_xoff, y_off + dst_yoff,
		      ntrap, (pixman_trap_t *)traps);
d44 4
a47 1
    free_pixman_pict (pPicture, image);
d51 2
a52 4
fbRasterizeTrapezoid (PicturePtr    pPicture,
		      xTrapezoid  *trap,
		      int	    x_off,
		      int	    y_off)
d55 1
a55 1
    int	dst_xoff, dst_yoff;
d57 2
a58 2
    if (!(image = image_from_pict (pPicture, FALSE, &dst_xoff, &dst_yoff)))
	return;
d60 2
a61 3
    pixman_rasterize_trapezoid (image, (pixman_trapezoid_t *)trap,
				x_off + dst_xoff,
				y_off + dst_yoff);
d63 1
a63 1
    free_pixman_pict (pPicture, image);
d67 2
a68 5
fbAddTriangles (PicturePtr  pPicture,
		INT16	    x_off,
		INT16	    y_off,
		int	    ntri,
		xTriangle *tris)
d73 2
a74 6
    if (!(image = image_from_pict (pPicture, FALSE, &dst_xoff, &dst_yoff)))
	return;
    
    pixman_add_triangles (image,
			  dst_xoff + x_off, dst_yoff + y_off,
			  ntri, (pixman_triangle_t *)tris);
d76 5
a80 1
    free_pixman_pict (pPicture, image);
d83 7
a89 7
typedef void (* CompositeShapesFunc) (pixman_op_t op,
				      pixman_image_t *src,
				      pixman_image_t *dst,
				      pixman_format_code_t mask_format,
				      int x_src, int y_src,
				      int x_dst, int y_dst,
				      int n_shapes, const uint8_t *shapes);
d92 7
a98 10
fbShapes (CompositeShapesFunc	composite,
	  pixman_op_t		op,
	  PicturePtr		pSrc,
	  PicturePtr		pDst,
	  PictFormatPtr		maskFormat,
	  int16_t		xSrc,
	  int16_t		ySrc,
	  int			nshapes,
	  int			shape_size,
	  const uint8_t *	shapes)
d104 4
a107 1
    miCompositeSourceValidate (pSrc);
d109 2
a110 2
    src = image_from_pict (pSrc, FALSE, &src_xoff, &src_yoff);
    dst = image_from_pict (pDst, TRUE, &dst_xoff, &dst_yoff);
d112 37
a148 50
    if (src && dst)
    {
	pixman_format_code_t format;

	DamageRegionAppend (pDst->pDrawable, pDst->pCompositeClip);

	if (!maskFormat)
	{
	    int i;

	    if (pDst->polyEdge == PolyEdgeSharp)
		format = PIXMAN_a1;
	    else
		format = PIXMAN_a8;

	    for (i = 0; i < nshapes; ++i)
	    {
		composite (op, src, dst, format,
			   xSrc + src_xoff,
			   ySrc + src_yoff,
			   dst_xoff,
			   dst_yoff,
			   1, shapes + i * shape_size);
	    }
	}
	else
	{
	    switch (PICT_FORMAT_A (maskFormat->format))
	    {
	    case 1:
		format = PIXMAN_a1;
		break;

	    case 4:
		format = PIXMAN_a4;
		break;

	    default:
	    case 8:
		format = PIXMAN_a8;
		break;
	    }
	    
	    composite (op, src, dst, format,
		       xSrc + src_xoff,
		       ySrc + src_yoff,
		       dst_xoff,
		       dst_yoff,
		       nshapes, shapes);
	}
d150 1
a150 1
	DamageRegionProcessPending (pDst->pDrawable);
d153 2
a154 2
    free_pixman_pict (pSrc, src);
    free_pixman_pict (pDst, dst);
d158 5
a162 8
fbTrapezoids (CARD8	    op,
	      PicturePtr    pSrc,
	      PicturePtr    pDst,
	      PictFormatPtr maskFormat,
	      INT16	    xSrc,
	      INT16	    ySrc,
	      int	    ntrap,
	      xTrapezoid    *traps)
d166 4
a169 5
    
    fbShapes ((CompositeShapesFunc)pixman_composite_trapezoids,
	      op, pSrc, pDst, maskFormat,
	      xSrc, ySrc,
	      ntrap, sizeof (xTrapezoid), (const uint8_t *)traps);
d173 6
a178 9
fbTriangles (CARD8	    op,
	     PicturePtr    pSrc,
	     PicturePtr    pDst,
	     PictFormatPtr maskFormat,
	     INT16	    xSrc,
	     INT16	    ySrc,
	     int	    ntris,
	     xTriangle    *tris)
{ 
d181 4
a184 5
    
    fbShapes ((CompositeShapesFunc)pixman_composite_triangles,
	      op, pSrc, pDst, maskFormat,
	      xSrc, ySrc,
	      ntris, sizeof (xTriangle), (const uint8_t *)tris);
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a30 1
#include "renderedge.h"
d32 1
d41 2
a42 2
    int image_xoff, image_yoff;
    pixman_image_t *image = image_from_pict (pPicture, FALSE, &image_xoff, &image_yoff);
d44 1
a44 1
    if (!image)
d47 2
a48 1
    pixman_add_traps (image, x_off, y_off, ntrap, (pixman_trap_t *)traps);
d59 2
a60 2
    int	mask_xoff, mask_yoff;
    pixman_image_t *image = image_from_pict (pPicture, FALSE, &mask_xoff, &mask_yoff);
d62 1
a62 1
    if (!image)
d65 3
a67 1
    pixman_rasterize_trapezoid (image, (pixman_trapezoid_t *)trap, x_off, y_off);
a71 26
static int
_GreaterY (xPointFixed *a, xPointFixed *b)
{
    if (a->y == b->y)
	return a->x > b->x;
    return a->y > b->y;
}

/*
 * Note that the definition of this function is a bit odd because
 * of the X coordinate space (y increasing downwards).
 */
static int
_Clockwise (xPointFixed *ref, xPointFixed *a, xPointFixed *b)
{
    xPointFixed	ad, bd;

    ad.x = a->x - ref->x;
    ad.y = a->y - ref->y;
    bd.x = b->x - ref->x;
    bd.y = b->y - ref->y;

    return ((xFixed_32_32) bd.y * ad.x - (xFixed_32_32) ad.y * bd.x) < 0;
}

/* FIXME -- this could be made more efficient */
d79 41
a119 2
    xPointFixed	  *top, *left, *right, *tmp;
    xTrapezoid	    trap;
d121 1
a121 1
    for (; ntri; ntri--, tris++)
d123 5
a127 37
	top = &tris->p1;
	left = &tris->p2;
	right = &tris->p3;
	if (_GreaterY (top, left)) {
	    tmp = left; left = top; top = tmp;
	}
	if (_GreaterY (top, right)) {
	    tmp = right; right = top; top = tmp;
	}
	if (_Clockwise (top, right, left)) {
	    tmp = right; right = left; left = tmp;
	}
	
	/*
	 * Two cases:
	 *
	 *		+		+
	 *	       / \             / \
	 *	      /   \           /   \
	 *	     /     +         +     \
	 *      /    --           --    \
	 *     /   --               --   \
	 *    / ---                   --- \
	 *	 +--                         --+
	 */
	
	trap.top = top->y;
	trap.left.p1 = *top;
	trap.left.p2 = *left;
	trap.right.p1 = *top;
	trap.right.p2 = *right;
	if (right->y < left->y)
	    trap.bottom = right->y;
	else
	    trap.bottom = left->y;
	fbRasterizeTrapezoid (pPicture, &trap, x_off, y_off);
	if (right->y < left->y)
d129 16
a144 4
	    trap.top = right->y;
	    trap.bottom = left->y;
	    trap.right.p1 = *right;
	    trap.right.p2 = *left;
d148 22
a169 4
	    trap.top = left->y;
	    trap.bottom = right->y;
	    trap.left.p1 = *left;
	    trap.left.p2 = *right;
d171 2
a172 1
	fbRasterizeTrapezoid (pPicture, &trap, x_off, y_off);
d174 3
d179 37
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a28 2
#ifdef RENDER

a160 1
#endif /* RENDER */
@


1.3
log
@merge xserver 1.4, 1st pass
@
text
@d43 2
a44 1
    pixman_image_t *image = image_from_pict (pPicture, FALSE);
d60 2
a61 1
    pixman_image_t *image = image_from_pict (pPicture, FALSE);
@


1.2
log
@Fix for a divide by zero that can be triggered by a malicious client.
Problem reported by Derek Abdine of rapid7.com, patch by Keith Packard.
@
text
@a1 2
 * $Id: fbtrap.c,v 1.1.1.1 2006/11/26 18:15:38 matthieu Exp $
 *
d43 1
a43 13
    FbBits	*buf;
    int		bpp;
    int		width;
    int		stride;
    int		height;
    int		pxoff, pyoff;

    xFixed	x_off_fixed;
    xFixed	y_off_fixed;
    RenderEdge  l, r;
    xFixed	t, b;
    
    fbGetDrawable (pPicture->pDrawable, buf, stride, bpp, pxoff, pyoff);
d45 2
a46 4
    width = pPicture->pDrawable->width;
    height = pPicture->pDrawable->height;
    x_off += pxoff;
    y_off += pyoff;
d48 1
a48 2
    x_off_fixed = IntToxFixed(y_off);
    y_off_fixed = IntToxFixed(y_off);
d50 1
a50 31
    while (ntrap--)
    {
	t = traps->top.y + y_off_fixed;
	if (t < 0)
	    t = 0;
	t = RenderSampleCeilY (t, bpp);
    
	b = traps->bot.y + y_off_fixed;
	if (xFixedToInt (b) >= height)
	    b = IntToxFixed (height) - 1;
	b = RenderSampleFloorY (b, bpp);
	
	if (b >= t)
	{
	    /* initialize edge walkers */
	    RenderEdgeInit (&l, bpp, t,
			    traps->top.l + x_off_fixed,
			    traps->top.y + y_off_fixed,
			    traps->bot.l + x_off_fixed,
			    traps->bot.y + y_off_fixed);
	
	    RenderEdgeInit (&r, bpp, t,
			    traps->top.r + x_off_fixed,
			    traps->top.y + y_off_fixed,
			    traps->bot.r + x_off_fixed,
			    traps->bot.y + y_off_fixed);
	    
	    fbRasterizeEdges (buf, bpp, width, stride, &l, &r, t, b);
	}
	traps++;
    }
d59 3
a61 13
    FbBits	*buf;
    int		bpp;
    int		width;
    int		stride;
    int		height;
    int		pxoff, pyoff;

    xFixed	x_off_fixed;
    xFixed	y_off_fixed;
    RenderEdge	l, r;
    xFixed	t, b;
    
    if (!xTrapezoidValid (trap))
d64 1
a64 1
    fbGetDrawable (pPicture->pDrawable, buf, stride, bpp, pxoff, pyoff);
d66 1
a66 25
    width = pPicture->pDrawable->width;
    height = pPicture->pDrawable->height;
    x_off += pxoff;
    y_off += pyoff;
    
    x_off_fixed = IntToxFixed(x_off);
    y_off_fixed = IntToxFixed(y_off);
    t = trap->top + y_off_fixed;
    if (t < 0)
	t = 0;
    t = RenderSampleCeilY (t, bpp);

    b = trap->bottom + y_off_fixed;
    if (xFixedToInt (b) >= height)
	b = IntToxFixed (height) - 1;
    b = RenderSampleFloorY (b, bpp);
    
    if (b >= t)
    {
	/* initialize edge walkers */
	RenderLineFixedEdgeInit (&l, bpp, t, &trap->left, x_off, y_off);
	RenderLineFixedEdgeInit (&r, bpp, t, &trap->right, x_off, y_off);
	
	fbRasterizeEdges (buf, bpp, width, stride, &l, &r, t, b);
    }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
 * $Id$
d118 3
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
d45 13
a57 1
    pixman_image_t *image = image_from_pict (pPicture, FALSE);
d59 4
a62 2
    if (!image)
	return;
d64 2
a65 1
    pixman_add_traps (image, x_off, y_off, ntrap, (pixman_trap_t *)traps);
d67 31
a97 1
    free_pixman_pict (pPicture, image);
d106 13
a118 1
    pixman_image_t *image = image_from_pict (pPicture, FALSE);
d120 25
a144 6
    if (!image)
	return;

    pixman_rasterize_trapezoid (image, (pixman_trapezoid_t *)trap, x_off, y_off);

    free_pixman_pict (pPicture, image);
@

