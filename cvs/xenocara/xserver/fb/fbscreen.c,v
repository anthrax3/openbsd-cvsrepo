head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.09.16.19.10.20;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	Te1daavkBLskZ8gc;

1.9
date	2014.09.27.17.53.00;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	cVXoV5PxI8YrEaVA;

1.8
date	2013.06.07.17.28.47;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.10.13.21.21;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.26;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.22;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.13;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.44;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.44;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright Â© 1998 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "fb.h"

Bool
fbCloseScreen(ScreenPtr pScreen)
{
    int d;
    DepthPtr depths = pScreen->allowedDepths;

    fbDestroyGlyphCache();
    for (d = 0; d < pScreen->numDepths; d++)
        free(depths[d].vids);
    free(depths);
    free(pScreen->visuals);
    if (pScreen->devPrivate)
        FreePixmap((PixmapPtr)pScreen->devPrivate);
    return TRUE;
}

Bool
fbRealizeFont(ScreenPtr pScreen, FontPtr pFont)
{
    return TRUE;
}

Bool
fbUnrealizeFont(ScreenPtr pScreen, FontPtr pFont)
{
    return TRUE;
}

void
fbQueryBestSize(int class,
                unsigned short *width, unsigned short *height,
                ScreenPtr pScreen)
{
    unsigned short w;

    switch (class) {
    case CursorShape:
        if (*width > pScreen->width)
            *width = pScreen->width;
        if (*height > pScreen->height)
            *height = pScreen->height;
        break;
    case TileShape:
    case StippleShape:
        w = *width;
        if ((w & (w - 1)) && w < FB_UNIT) {
            for (w = 1; w < *width; w <<= 1);
            *width = w;
        }
    }
}

PixmapPtr
_fbGetWindowPixmap(WindowPtr pWindow)
{
    return fbGetWindowPixmap(pWindow);
}

void
_fbSetWindowPixmap(WindowPtr pWindow, PixmapPtr pPixmap)
{
    dixSetPrivate(&pWindow->devPrivates, fbGetWinPrivateKey(pWindow), pPixmap);
}

Bool
fbSetupScreen(ScreenPtr pScreen, void *pbits, /* pointer to screen bitmap */
              int xsize,        /* in pixels */
              int ysize, int dpix,      /* dots per inch */
              int dpiy, int width,      /* pixel width of frame buffer */
              int bpp)
{                               /* bits per pixel for screen */
    if (!fbAllocatePrivates(pScreen))
        return FALSE;
    pScreen->defColormap = FakeClientID(0);
    /* let CreateDefColormap do whatever it wants for pixels */
    pScreen->blackPixel = pScreen->whitePixel = (Pixel) 0;
    pScreen->QueryBestSize = fbQueryBestSize;
    /* SaveScreen */
    pScreen->GetImage = fbGetImage;
    pScreen->GetSpans = fbGetSpans;
    pScreen->CreateWindow = fbCreateWindow;
    pScreen->DestroyWindow = fbDestroyWindow;
    pScreen->PositionWindow = fbPositionWindow;
    pScreen->ChangeWindowAttributes = fbChangeWindowAttributes;
    pScreen->RealizeWindow = fbRealizeWindow;
    pScreen->UnrealizeWindow = fbUnrealizeWindow;
    pScreen->CopyWindow = fbCopyWindow;
    pScreen->CreatePixmap = fbCreatePixmap;
    pScreen->DestroyPixmap = fbDestroyPixmap;
    pScreen->RealizeFont = fbRealizeFont;
    pScreen->UnrealizeFont = fbUnrealizeFont;
    pScreen->CreateGC = fbCreateGC;
    pScreen->CreateColormap = fbInitializeColormap;
    pScreen->DestroyColormap = (void (*)(ColormapPtr)) NoopDDA;
    pScreen->InstallColormap = fbInstallColormap;
    pScreen->UninstallColormap = fbUninstallColormap;
    pScreen->ListInstalledColormaps = fbListInstalledColormaps;
    pScreen->StoreColors = (void (*)(ColormapPtr, int, xColorItem *)) NoopDDA;
    pScreen->ResolveColor = fbResolveColor;
    pScreen->BitmapToRegion = fbPixmapToRegion;

    pScreen->GetWindowPixmap = _fbGetWindowPixmap;
    pScreen->SetWindowPixmap = _fbSetWindowPixmap;

    return TRUE;
}

#ifdef FB_ACCESS_WRAPPER
Bool
wfbFinishScreenInit(ScreenPtr pScreen,
                    void *pbits,
                    int xsize,
                    int ysize,
                    int dpix,
                    int dpiy,
                    int width,
                    int bpp,
                    SetupWrapProcPtr setupWrap, FinishWrapProcPtr finishWrap)
#else
Bool
fbFinishScreenInit(ScreenPtr pScreen,
                   void *pbits,
                   int xsize, int ysize, int dpix, int dpiy, int width, int bpp)
#endif
{
    VisualPtr visuals;
    DepthPtr depths;
    int nvisuals;
    int ndepths;
    int rootdepth;
    VisualID defaultVisual;
    int imagebpp = bpp;

#ifdef FB_DEBUG
    int stride;

    ysize -= 2;
    stride = (width * bpp) / 8;
    fbSetBits((FbStip *) pbits, stride / sizeof(FbStip), FB_HEAD_BITS);
    pbits = (void *) ((char *) pbits + stride);
    fbSetBits((FbStip *) ((char *) pbits + stride * ysize),
              stride / sizeof(FbStip), FB_TAIL_BITS);
#endif
    /*
     * By default, a 24bpp screen will use 32bpp images, this avoids
     * problems with many applications which just can't handle packed
     * pixels.  If you want real 24bit images, include a 24bpp
     * format in the pixmap formats
     */
    if (bpp == 24) {
        int f;

        imagebpp = 32;
        /*
         * Check to see if we're advertising a 24bpp image format,
         * in which case windows will use it in preference to a 32 bit
         * format.
         */
        for (f = 0; f < screenInfo.numPixmapFormats; f++) {
            if (screenInfo.formats[f].bitsPerPixel == 24) {
                imagebpp = 24;
                break;
            }
        }
    }
    if (imagebpp == 32) {
        fbGetScreenPrivate(pScreen)->win32bpp = bpp;
        fbGetScreenPrivate(pScreen)->pix32bpp = bpp;
    }
    else {
        fbGetScreenPrivate(pScreen)->win32bpp = 32;
        fbGetScreenPrivate(pScreen)->pix32bpp = 32;
    }
#ifdef FB_ACCESS_WRAPPER
    fbGetScreenPrivate(pScreen)->setupWrap = setupWrap;
    fbGetScreenPrivate(pScreen)->finishWrap = finishWrap;
#endif
    rootdepth = 0;
    if (!fbInitVisuals(&visuals, &depths, &nvisuals, &ndepths, &rootdepth,
                       &defaultVisual, ((unsigned long) 1 << (imagebpp - 1)),
                       8))
        return FALSE;
    if (!miScreenInit(pScreen, pbits, xsize, ysize, dpix, dpiy, width,
                      rootdepth, ndepths, depths,
                      defaultVisual, nvisuals, visuals))
        return FALSE;
    /* overwrite miCloseScreen with our own */
    pScreen->CloseScreen = fbCloseScreen;
    if (bpp == 24 && imagebpp == 32) {
        pScreen->ModifyPixmapHeader = fb24_32ModifyPixmapHeader;
        pScreen->CreateScreenResources = fb24_32CreateScreenResources;
    }
    return TRUE;
}

/* dts * (inch/dot) * (25.4 mm / inch) = mm */
#ifdef FB_ACCESS_WRAPPER
Bool
wfbScreenInit(ScreenPtr pScreen,
              void *pbits,
              int xsize,
              int ysize,
              int dpix,
              int dpiy,
              int width,
              int bpp, SetupWrapProcPtr setupWrap, FinishWrapProcPtr finishWrap)
{
    if (!fbSetupScreen(pScreen, pbits, xsize, ysize, dpix, dpiy, width, bpp))
        return FALSE;
    if (!wfbFinishScreenInit(pScreen, pbits, xsize, ysize, dpix, dpiy,
                             width, bpp, setupWrap, finishWrap))
        return FALSE;
    return TRUE;
}
#else
Bool
fbScreenInit(ScreenPtr pScreen,
             void *pbits,
             int xsize, int ysize, int dpix, int dpiy, int width, int bpp)
{
    if (!fbSetupScreen(pScreen, pbits, xsize, ysize, dpix, dpiy, width, bpp))
        return FALSE;
    if (!fbFinishScreenInit(pScreen, pbits, xsize, ysize, dpix, dpiy,
                            width, bpp))
        return FALSE;
    return TRUE;
}
#endif
@


1.9
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d113 2
a114 2
    pScreen->RealizeWindow = fbMapWindow;
    pScreen->UnrealizeWindow = fbUnmapWindow;
@


1.8
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d40 2
a41 1
    free(pScreen->devPrivate);
d94 1
a94 1
fbSetupScreen(ScreenPtr pScreen, pointer pbits, /* pointer to screen bitmap */
d139 1
a139 1
                    pointer pbits,
d150 1
a150 1
                   pointer pbits,
d228 1
a228 1
              pointer pbits,
d246 1
a246 1
             pointer pbits,
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d30 1
a30 1
fbCloseScreen(int index, ScreenPtr pScreen)
d35 1
d89 1
a89 1
    dixSetPrivate(&pWindow->devPrivates, fbGetWinPrivateKey(), pPixmap);
d99 1
a99 1
    if (!fbAllocatePrivates(pScreen, NULL))
@


1.6
log
@Update to xserver 1.11.2
@
text
@d30 1
a30 1
fbCloseScreen (int index, ScreenPtr pScreen)
d32 2
a33 2
    int	    d;
    DepthPtr	depths = pScreen->allowedDepths;
d36 1
a36 1
	free(depths[d].vids);
d56 3
a58 3
fbQueryBestSize (int class, 
		 unsigned short *width, unsigned short *height,
		 ScreenPtr pScreen)
d60 2
a61 2
    unsigned short  w;
    
d64 5
a68 5
	if (*width > pScreen->width)
	    *width = pScreen->width;
	if (*height > pScreen->height)
	    *height = pScreen->height;
	break;
d71 5
a75 7
	w = *width;
	if ((w & (w - 1)) && w < FB_UNIT)
	{
	    for (w = 1; w < *width; w <<= 1)
		;
	    *width = w;
	}
d80 1
a80 1
_fbGetWindowPixmap (WindowPtr pWindow)
d82 1
a82 1
    return fbGetWindowPixmap (pWindow);
d86 1
a86 1
_fbSetWindowPixmap (WindowPtr pWindow, PixmapPtr pPixmap)
d92 6
a97 9
fbSetupScreen(ScreenPtr	pScreen, 
	      pointer	pbits,		/* pointer to screen bitmap */
	      int	xsize, 		/* in pixels */
	      int	ysize,
	      int	dpix,		/* dots per inch */
	      int	dpiy,
	      int	width,		/* pixel width of frame buffer */
	      int	bpp)		/* bits per pixel for screen */
{
d99 1
a99 1
	return FALSE;
d101 1
a101 1
    /* let CreateDefColormap do whatever it wants for pixels */ 
d120 1
a120 1
    pScreen->DestroyColormap = (void (*)(ColormapPtr))NoopDDA;
d124 1
a124 1
    pScreen->StoreColors = (void (*)(ColormapPtr, int, xColorItem *))NoopDDA;
d127 1
a127 1
    
d136 9
a144 10
wfbFinishScreenInit(ScreenPtr		pScreen,
		    pointer		pbits,
		    int			xsize,
		    int			ysize,
		    int			dpix,
		    int			dpiy,
		    int			width,
		    int			bpp,
		    SetupWrapProcPtr	setupWrap,
		    FinishWrapProcPtr	finishWrap)
d147 3
a149 8
fbFinishScreenInit(ScreenPtr	pScreen,
		   pointer	pbits,
		   int		xsize,
		   int		ysize,
		   int		dpix,
		   int		dpiy,
		   int		width,
		   int		bpp)
d152 7
a158 7
    VisualPtr	visuals;
    DepthPtr	depths;
    int		nvisuals;
    int		ndepths;
    int		rootdepth;
    VisualID	defaultVisual;
    int		imagebpp = bpp;
d161 2
a162 2
    int	stride;
    
d165 1
a165 2
    fbSetBits ((FbStip *) pbits, 
	       stride / sizeof (FbStip), FB_HEAD_BITS);
d167 2
a168 2
    fbSetBits ((FbStip *) ((char *) pbits + stride * ysize),
			   stride / sizeof (FbStip), FB_TAIL_BITS);
d176 15
a190 18
    if (bpp == 24)
    {
	int	f;
	
	imagebpp = 32;
	/*
	 * Check to see if we're advertising a 24bpp image format,
	 * in which case windows will use it in preference to a 32 bit
	 * format.
	 */
	for (f = 0; f < screenInfo.numPixmapFormats; f++)
	{
	    if (screenInfo.formats[f].bitsPerPixel == 24)
	    {
		imagebpp = 24;
		break;
	    }
	}	    
d192 3
a194 4
    if (imagebpp == 32)
    {
	fbGetScreenPrivate(pScreen)->win32bpp = bpp;
	fbGetScreenPrivate(pScreen)->pix32bpp = bpp;
d196 3
a198 4
    else
    {
	fbGetScreenPrivate(pScreen)->win32bpp = 32;
	fbGetScreenPrivate(pScreen)->pix32bpp = 32;
d205 8
a212 7
    if (!fbInitVisuals (&visuals, &depths, &nvisuals, &ndepths, &rootdepth,
			&defaultVisual,((unsigned long)1<<(imagebpp-1)), 8))
	return FALSE;
    if (! miScreenInit(pScreen, pbits, xsize, ysize, dpix, dpiy, width,
			rootdepth, ndepths, depths,
			defaultVisual, nvisuals, visuals))
	return FALSE;
d215 3
a217 4
    if (bpp == 24 && imagebpp == 32)
    {
	pScreen->ModifyPixmapHeader = fb24_32ModifyPixmapHeader;
	pScreen->CreateScreenResources = fb24_32CreateScreenResources;
d225 8
a232 10
wfbScreenInit(ScreenPtr		pScreen,
	      pointer		pbits,
	      int		xsize,
	      int		ysize,
	      int		dpix,
	      int		dpiy,
	      int		width,
	      int		bpp,
	      SetupWrapProcPtr	setupWrap,
	      FinishWrapProcPtr	finishWrap)
d235 1
a235 1
	return FALSE;
d237 2
a238 2
			     width, bpp, setupWrap, finishWrap))
	return FALSE;
d243 3
a245 8
fbScreenInit(ScreenPtr	pScreen,
	     pointer	pbits,
	     int	xsize,
	     int	ysize,
	     int	dpix,
	     int	dpiy,
	     int	width,
	     int	bpp)
d248 4
a251 4
	return FALSE;
    if (!fbFinishScreenInit(pScreen, pbits, xsize, ysize, dpix, dpiy, 
			    width, bpp))
	return FALSE;
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a187 1
#ifdef FB_24_32BIT
a206 2
#endif
#ifdef FB_SCREEN_PRIVATE
a220 1
#endif
a223 3
    {
	free(visuals);
	free(depths);
a224 1
    }
a230 1
#ifdef FB_24_32BIT
a235 1
#endif
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d36 4
a39 7
	xfree (depths[d].vids);
    xfree (depths);
    xfree (pScreen->visuals);
    xfree (pScreen->devPrivate);
#ifdef FB_SCREEN_PRIVATE
    xfree (dixLookupPrivate(&pScreen->devPrivates, fbGetScreenPrivateKey()));
#endif
d46 1
a46 1
    return (TRUE);
d52 1
a52 1
    return (TRUE);
d229 2
a230 2
	xfree (visuals);
	xfree (depths);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d231 3
d235 1
a247 8
#endif
#if 0
    /* leave backing store initialization to the enclosing code so
     * it can choose the correct order of wrappers
     */
    /* init backing store here so we can overwrite CloseScreen without stepping
     * on the backing store wrapped version */
    fbInitializeBackingStore (pScreen);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a92 3
#ifdef FB_NO_WINDOW_PIXMAPS
    FatalError ("Attempted to set window pixmap without fb support\n");
#else
a93 1
#endif
@


1.1
log
@Initial revision
@
text
@d41 1
a41 1
    xfree (pScreen->devPrivates[fbScreenPrivateIndex].ptr);
a83 1
#ifndef FB_OLD_SCREEN
d96 1
a96 1
    pWindow->devPrivates[fbWinPrivateIndex].ptr = (pointer) pPixmap;
a98 1
#endif
d110 1
a110 1
    if (!fbAllocatePrivates(pScreen, (int *) 0))
a124 2
    pScreen->PaintWindowBackground = fbPaintWindow;
    pScreen->PaintWindowBorder = fbPaintWindow;
a139 1
#ifndef FB_OLD_SCREEN
a142 7
    pScreen->BackingStoreFuncs.SaveAreas = fbSaveAreas;
    pScreen->BackingStoreFuncs.RestoreAreas = fbRestoreAreas;
    pScreen->BackingStoreFuncs.SetClipmaskRgn = 0;
    pScreen->BackingStoreFuncs.GetImagePixmap = 0;
    pScreen->BackingStoreFuncs.GetSpansPixmap = 0;
#endif
    
d146 13
d168 1
d227 4
d238 1
a238 5
			defaultVisual, nvisuals, visuals
#ifdef FB_OLD_MISCREENINIT
		       , (miBSFuncPtr) 0
#endif
		       ))
d261 21
a297 22
}


#ifdef FB_OLD_SCREEN
const miBSFuncRec fbBSFuncRec = {
    fbSaveAreas,
    fbRestoreAreas,
    (void (*)(GCPtr, RegionPtr)) 0,
    (PixmapPtr (*)(void)) 0,
    (PixmapPtr (*)(void)) 0,
};
#endif

#if 0
void
fbInitializeBackingStore (ScreenPtr pScreen)
{
#ifdef FB_OLD_SCREEN
    miInitializeBackingStore (pScreen, (miBSFuncRec *) &fbBSFuncRec);
#else
    miInitializeBackingStore (pScreen);
#endif
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d84 1
d100 1
d144 1
d153 1
a157 13
#ifdef FB_ACCESS_WRAPPER
Bool
wfbFinishScreenInit(ScreenPtr		pScreen,
		    pointer		pbits,
		    int			xsize,
		    int			ysize,
		    int			dpix,
		    int			dpiy,
		    int			width,
		    int			bpp,
		    SetupWrapProcPtr	setupWrap,
		    FinishWrapProcPtr	finishWrap)
#else
a166 1
#endif
a224 4
#ifdef FB_ACCESS_WRAPPER
    fbGetScreenPrivate(pScreen)->setupWrap = setupWrap;
    fbGetScreenPrivate(pScreen)->finishWrap = finishWrap;
#endif
d232 5
a236 1
			defaultVisual, nvisuals, visuals))
a258 21
#ifdef FB_ACCESS_WRAPPER
Bool
wfbScreenInit(ScreenPtr		pScreen,
	      pointer		pbits,
	      int		xsize,
	      int		ysize,
	      int		dpix,
	      int		dpiy,
	      int		width,
	      int		bpp,
	      SetupWrapProcPtr	setupWrap,
	      FinishWrapProcPtr	finishWrap)
{
    if (!fbSetupScreen(pScreen, pbits, xsize, ysize, dpix, dpiy, width, bpp))
	return FALSE;
    if (!wfbFinishScreenInit(pScreen, pbits, xsize, ysize, dpix, dpiy,
			     width, bpp, setupWrap, finishWrap))
	return FALSE;
    return TRUE;
}
#else
d275 22
@

