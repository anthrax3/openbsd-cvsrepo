head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.14
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.1.2.0.16
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.12
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.09.16.19.10.20;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	Te1daavkBLskZ8gc;

1.3
date	2012.06.10.13.21.21;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.36;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.36;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright Â© 1998 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "fb.h"
#include "miline.h"
#include "mizerarc.h"

#undef BRESSOLID
#undef BRESDASH
#undef DOTS
#undef ARC
#undef GLYPH
#undef BITS
#undef BITS2
#undef BITS4

#define BRESSOLID   fbBresSolid8
#define BRESDASH    fbBresDash8
#define DOTS	    fbDots8
#define ARC	    fbArc8
#define GLYPH	    fbGlyph8
#define POLYLINE    fbPolyline8
#define POLYSEGMENT fbPolySegment8
#define BITS	    BYTE
#define BITS2	    CARD16
#define BITS4	    CARD32

#include "fbbits.h"

#undef BRESSOLID
#undef BRESDASH
#undef DOTS
#undef ARC
#undef GLYPH
#undef POLYLINE
#undef POLYSEGMENT
#undef BITS
#undef BITS2
#undef BITS4

#define BRESSOLID   fbBresSolid16
#define BRESDASH    fbBresDash16
#define DOTS	    fbDots16
#define ARC	    fbArc16
#define GLYPH	    fbGlyph16
#define POLYLINE    fbPolyline16
#define POLYSEGMENT fbPolySegment16
#define BITS	    CARD16
#define BITS2	    CARD32

#include "fbbits.h"

#undef BRESSOLID
#undef BRESDASH
#undef DOTS
#undef ARC
#undef GLYPH
#undef POLYLINE
#undef POLYSEGMENT
#undef BITS
#undef BITS2

#define BRESSOLID   fbBresSolid24
#define BRESDASH    fbBresDash24
#define DOTS        fbDots24
#define ARC         fbArc24
#define POLYLINE    fbPolyline24
#define POLYSEGMENT fbPolySegment24

#define BITS        CARD32
#define BITSUNIT    BYTE
#define BITSMUL	    3

#define FbDoTypeStore(b,t,x,s)	WRITE(((t *) (b)), (x) >> (s))
#define FbDoTypeRRop(b,t,a,x,s) WRITE((t *) (b), FbDoRRop(READ((t *) (b)),\
							  (a) >> (s), \
							  (x) >> (s)))
#define FbDoTypeMaskRRop(b,t,a,x,m,s) WRITE((t *) (b), FbDoMaskRRop(READ((t *) (b)),\
								    (a) >> (s), \
								    (x) >> (s), \
								    (m) >> (s)))
#if BITMAP_BIT_ORDER == LSBFirst
#define BITSSTORE(b,x)	((unsigned long) (b) & 1 ? \
			 (FbDoTypeStore (b, CARD8, x, 0), \
			  FbDoTypeStore ((b) + 1, CARD16, x, 8)) : \
			 (FbDoTypeStore (b, CARD16, x, 0), \
			  FbDoTypeStore ((b) + 2, CARD8, x, 16)))
#define BITSRROP(b,a,x)	((unsigned long) (b) & 1 ? \
			 (FbDoTypeRRop(b,CARD8,a,x,0), \
			  FbDoTypeRRop((b)+1,CARD16,a,x,8)) : \
			 (FbDoTypeRRop(b,CARD16,a,x,0), \
			  FbDoTypeRRop((b)+2,CARD8,a,x,16)))
#else
#define BITSSTORE(b,x)  ((unsigned long) (b) & 1 ? \
			 (FbDoTypeStore (b, CARD8, x, 16), \
			  FbDoTypeStore ((b) + 1, CARD16, x, 0)) : \
			 (FbDoTypeStore (b, CARD16, x, 8), \
			  FbDoTypeStore ((b) + 2, CARD8, x, 0)))
#define BITSRROP(b,a,x)	((unsigned long) (b) & 1 ? \
			 (FbDoTypeRRop (b, CARD8, a, x, 16), \
			  FbDoTypeRRop ((b) + 1, CARD16, a, x, 0)) : \
			 (FbDoTypeRRop (b, CARD16, a, x, 8), \
			  FbDoTypeRRop ((b) + 2, CARD8, a, x, 0)))
#endif

#include "fbbits.h"

#undef BITSSTORE
#undef BITSRROP
#undef BITSMUL
#undef BITSUNIT
#undef BITS

#undef BRESSOLID
#undef BRESDASH
#undef DOTS
#undef ARC
#undef POLYLINE
#undef POLYSEGMENT

#define BRESSOLID   fbBresSolid32
#define BRESDASH    fbBresDash32
#define DOTS	    fbDots32
#define ARC	    fbArc32
#define GLYPH	    fbGlyph32
#define POLYLINE    fbPolyline32
#define POLYSEGMENT fbPolySegment32
#define BITS	    CARD32

#include "fbbits.h"

#undef BRESSOLID
#undef BRESDASH
#undef DOTS
#undef ARC
#undef GLYPH
#undef POLYLINE
#undef POLYSEGMENT
#undef BITS
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a72 3
#if FB_SHIFT == 6
#define BITS4	    FbBits
#endif
a84 3
#if FB_SHIFT == 6
#undef BITS4
#endif
a151 3
#if FB_SHIFT == 6
#define BITS2	    FbBits
#endif
a162 3
#if FB_SHIFT == 6
#undef BITS2
#endif
@


1.2
log
@Update to xserver 1.11.2
@
text
@d142 1
a142 1
    
@


1.1
log
@Initial revision
@
text
@a1 2
 * Id: fbbits.c,v 1.1 1999/11/02 03:54:45 keithp Exp $
 *
a91 1
#ifdef FB_24BIT
d103 8
a110 8
#define FbDoTypeStore(b,t,x,s)	(*((t *) (b)) = (x) >> (s))
#define FbDoTypeRRop(b,t,a,x,s) (*((t *) (b)) = FbDoRRop(*((t *) (b)),\
							 (a) >> (s), \
							 (x) >> (s)))
#define FbDoTypeMaskRRop(b,t,a,x,m,s) (*((t *) (b)) = FbDoMaskRRop(*((t *) (b)),\
								   (a) >> (s), \
								   (x) >> (s), \
								   (m) >> (s))
a148 1
#endif /* FB_24BIT */
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
d106 8
a113 8
#define FbDoTypeStore(b,t,x,s)	WRITE(((t *) (b)), (x) >> (s))
#define FbDoTypeRRop(b,t,a,x,s) WRITE((t *) (b), FbDoRRop(READ((t *) (b)),\
							  (a) >> (s), \
							  (x) >> (s)))
#define FbDoTypeMaskRRop(b,t,a,x,m,s) WRITE((t *) (b), FbDoMaskRRop(READ((t *) (b)),\
								    (a) >> (s), \
								    (x) >> (s), \
								    (m) >> (s)))
@

