head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.8
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.09.16.19.10.20;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Te1daavkBLskZ8gc;

1.6
date	2014.12.21.11.41.45;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	OOAr3LJJfv7DyAHR;

1.5
date	2013.06.07.17.28.47;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.21;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.37;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.37;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright Â© 1998 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <stdlib.h>

#include "fb.h"
#include "miline.h"

#define fbBresShiftMask(mask,dir,bpp) ((bpp == FB_STIP_UNIT) ? 0 : \
					((dir < 0) ? FbStipLeft(mask,bpp) : \
					 FbStipRight(mask,bpp)))

static void
fbBresSolid(DrawablePtr pDrawable,
            GCPtr pGC,
            int dashOffset,
            int signdx,
            int signdy,
            int axis, int x1, int y1, int e, int e1, int e3, int len)
{
    FbStip *dst;
    FbStride dstStride;
    int dstBpp;
    int dstXoff, dstYoff;
    FbGCPrivPtr pPriv = fbGetGCPrivate(pGC);
    FbStip and = (FbStip) pPriv->and;
    FbStip xor = (FbStip) pPriv->xor;
    FbStip mask, mask0;
    FbStip bits;

    fbGetStipDrawable(pDrawable, dst, dstStride, dstBpp, dstXoff, dstYoff);
    dst += ((y1 + dstYoff) * dstStride);
    x1 = (x1 + dstXoff) * dstBpp;
    dst += x1 >> FB_STIP_SHIFT;
    x1 &= FB_STIP_MASK;
    mask0 = FbStipMask(0, dstBpp);
    mask = FbStipRight(mask0, x1);
    if (signdx < 0)
        mask0 = FbStipRight(mask0, FB_STIP_UNIT - dstBpp);
    if (signdy < 0)
        dstStride = -dstStride;
    if (axis == X_AXIS) {
        bits = 0;
        while (len--) {
            bits |= mask;
            mask = fbBresShiftMask(mask, signdx, dstBpp);
            if (!mask) {
                WRITE(dst, FbDoMaskRRop(READ(dst), and, xor, bits));
                bits = 0;
                dst += signdx;
                mask = mask0;
            }
            e += e1;
            if (e >= 0) {
                if (bits) {
                    WRITE(dst, FbDoMaskRRop (READ(dst), and, xor, bits));
                    bits = 0;
                }
                dst += dstStride;
                e += e3;
            }
        }
        if (bits)
            WRITE(dst, FbDoMaskRRop(READ(dst), and, xor, bits));
    }
    else {
        while (len--) {
            WRITE(dst, FbDoMaskRRop(READ(dst), and, xor, mask));
            dst += dstStride;
            e += e1;
            if (e >= 0) {
                e += e3;
                mask = fbBresShiftMask(mask, signdx, dstBpp);
                if (!mask) {
                    dst += signdx;
                    mask = mask0;
                }
            }
        }
    }

    fbFinishAccess(pDrawable);
}

static void
fbBresDash(DrawablePtr pDrawable,
           GCPtr pGC,
           int dashOffset,
           int signdx,
           int signdy, int axis, int x1, int y1, int e, int e1, int e3, int len)
{
    FbStip *dst;
    FbStride dstStride;
    int dstBpp;
    int dstXoff, dstYoff;
    FbGCPrivPtr pPriv = fbGetGCPrivate(pGC);
    FbStip and = (FbStip) pPriv->and;
    FbStip xor = (FbStip) pPriv->xor;
    FbStip bgand = (FbStip) pPriv->bgand;
    FbStip bgxor = (FbStip) pPriv->bgxor;
    FbStip mask, mask0;

    FbDashDeclare;
    int dashlen;
    Bool even;
    Bool doOdd;

    fbGetStipDrawable(pDrawable, dst, dstStride, dstBpp, dstXoff, dstYoff);
    doOdd = pGC->lineStyle == LineDoubleDash;

    FbDashInit(pGC, pPriv, dashOffset, dashlen, even);

    dst += ((y1 + dstYoff) * dstStride);
    x1 = (x1 + dstXoff) * dstBpp;
    dst += x1 >> FB_STIP_SHIFT;
    x1 &= FB_STIP_MASK;
    mask0 = FbStipMask(0, dstBpp);
    mask = FbStipRight(mask0, x1);
    if (signdx < 0)
        mask0 = FbStipRight(mask0, FB_STIP_UNIT - dstBpp);
    if (signdy < 0)
        dstStride = -dstStride;
    while (len--) {
        if (even)
            WRITE(dst, FbDoMaskRRop(READ(dst), and, xor, mask));
        else if (doOdd)
            WRITE(dst, FbDoMaskRRop(READ(dst), bgand, bgxor, mask));
        if (axis == X_AXIS) {
            mask = fbBresShiftMask(mask, signdx, dstBpp);
            if (!mask) {
                dst += signdx;
                mask = mask0;
            }
            e += e1;
            if (e >= 0) {
                dst += dstStride;
                e += e3;
            }
        }
        else {
            dst += dstStride;
            e += e1;
            if (e >= 0) {
                e += e3;
                mask = fbBresShiftMask(mask, signdx, dstBpp);
                if (!mask) {
                    dst += signdx;
                    mask = mask0;
                }
            }
        }
        FbDashStep(dashlen, even);
    }

    fbFinishAccess(pDrawable);
}

static void
fbBresFill(DrawablePtr pDrawable,
           GCPtr pGC,
           int dashOffset,
           int signdx,
           int signdy, int axis, int x1, int y1, int e, int e1, int e3, int len)
{
    while (len--) {
        fbFill(pDrawable, pGC, x1, y1, 1, 1);
        if (axis == X_AXIS) {
            x1 += signdx;
            e += e1;
            if (e >= 0) {
                e += e3;
                y1 += signdy;
            }
        }
        else {
            y1 += signdy;
            e += e1;
            if (e >= 0) {
                e += e3;
                x1 += signdx;
            }
        }
    }
}

static void
fbSetFg(DrawablePtr pDrawable, GCPtr pGC, Pixel fg)
{
    if (fg != pGC->fgPixel) {
        ChangeGCVal val;

        val.val = fg;
        ChangeGC(NullClient, pGC, GCForeground, &val);
        ValidateGC(pDrawable, pGC);
    }
}

static void
fbBresFillDash(DrawablePtr pDrawable,
               GCPtr pGC,
               int dashOffset,
               int signdx,
               int signdy,
               int axis, int x1, int y1, int e, int e1, int e3, int len)
{
    FbGCPrivPtr pPriv = fbGetGCPrivate(pGC);

    FbDashDeclare;
    int dashlen;
    Bool even;
    Bool doOdd;
    Bool doBg;
    Pixel fg, bg;

    fg = pGC->fgPixel;
    bg = pGC->bgPixel;

    /* whether to fill the odd dashes */
    doOdd = pGC->lineStyle == LineDoubleDash;
    /* whether to switch fg to bg when filling odd dashes */
    doBg = doOdd && (pGC->fillStyle == FillSolid ||
                     pGC->fillStyle == FillStippled);

    /* compute current dash position */
    FbDashInit(pGC, pPriv, dashOffset, dashlen, even);

    while (len--) {
        if (even || doOdd) {
            if (doBg) {
                if (even)
                    fbSetFg(pDrawable, pGC, fg);
                else
                    fbSetFg(pDrawable, pGC, bg);
            }
            fbFill(pDrawable, pGC, x1, y1, 1, 1);
        }
        if (axis == X_AXIS) {
            x1 += signdx;
            e += e1;
            if (e >= 0) {
                e += e3;
                y1 += signdy;
            }
        }
        else {
            y1 += signdy;
            e += e1;
            if (e >= 0) {
                e += e3;
                x1 += signdx;
            }
        }
        FbDashStep(dashlen, even);
    }
    if (doBg)
        fbSetFg(pDrawable, pGC, fg);
}

static void
fbBresSolid24RRop(DrawablePtr pDrawable,
                  GCPtr pGC,
                  int dashOffset,
                  int signdx,
                  int signdy,
                  int axis, int x1, int y1, int e, int e1, int e3, int len)
{
    FbStip *dst;
    FbStride dstStride;
    int dstBpp;
    int dstXoff, dstYoff;
    FbGCPrivPtr pPriv = fbGetGCPrivate(pGC);
    FbStip and = pPriv->and;
    FbStip xor = pPriv->xor;
    FbStip leftMask, rightMask;
    int nl;
    FbStip *d;
    int x;
    int rot;
    FbStip andT, xorT;

    fbGetStipDrawable(pDrawable, dst, dstStride, dstBpp, dstXoff, dstYoff);
    dst += ((y1 + dstYoff) * dstStride);
    x1 = (x1 + dstXoff) * 24;
    if (signdy < 0)
        dstStride = -dstStride;
    signdx *= 24;
    while (len--) {
        d = dst + (x1 >> FB_STIP_SHIFT);
        x = x1 & FB_STIP_MASK;
        rot = FbFirst24Rot(x);
        andT = FbRot24Stip(and, rot);
        xorT = FbRot24Stip(xor, rot);
        FbMaskStip(x, 24, leftMask, nl, rightMask);
        if (leftMask) {
            WRITE(d, FbDoMaskRRop(READ(d), andT, xorT, leftMask));
            d++;
            andT = FbNext24Stip(andT);
            xorT = FbNext24Stip(xorT);
        }
        if (rightMask)
            WRITE(d, FbDoMaskRRop(READ(d), andT, xorT, rightMask));
        if (axis == X_AXIS) {
            x1 += signdx;
            e += e1;
            if (e >= 0) {
                e += e3;
                dst += dstStride;
            }
        }
        else {
            dst += dstStride;
            e += e1;
            if (e >= 0) {
                e += e3;
                x1 += signdx;
            }
        }
    }

    fbFinishAccess(pDrawable);
}

static void
fbBresDash24RRop(DrawablePtr pDrawable,
                 GCPtr pGC,
                 int dashOffset,
                 int signdx,
                 int signdy,
                 int axis, int x1, int y1, int e, int e1, int e3, int len)
{
    FbStip *dst;
    FbStride dstStride;
    int dstBpp;
    int dstXoff, dstYoff;
    FbGCPrivPtr pPriv = fbGetGCPrivate(pGC);
    FbStip andT, xorT;
    FbStip fgand = pPriv->and;
    FbStip fgxor = pPriv->xor;
    FbStip bgand = pPriv->bgand;
    FbStip bgxor = pPriv->bgxor;
    FbStip leftMask, rightMask;
    int nl;
    FbStip *d;
    int x;
    int rot;

    FbDashDeclare;
    int dashlen;
    Bool even;
    Bool doOdd;

    fbGetStipDrawable(pDrawable, dst, dstStride, dstBpp, dstXoff, dstYoff);
    doOdd = pGC->lineStyle == LineDoubleDash;

    /* compute current dash position */
    FbDashInit(pGC, pPriv, dashOffset, dashlen, even);

    dst += ((y1 + dstYoff) * dstStride);
    x1 = (x1 + dstXoff) * 24;
    if (signdy < 0)
        dstStride = -dstStride;
    signdx *= 24;
    while (len--) {
        if (even || doOdd) {
            if (even) {
                andT = fgand;
                xorT = fgxor;
            }
            else {
                andT = bgand;
                xorT = bgxor;
            }
            d = dst + (x1 >> FB_STIP_SHIFT);
            x = x1 & FB_STIP_MASK;
            rot = FbFirst24Rot(x);
            andT = FbRot24Stip(andT, rot);
            xorT = FbRot24Stip(xorT, rot);
            FbMaskStip(x, 24, leftMask, nl, rightMask);
            if (leftMask) {
                WRITE(d, FbDoMaskRRop(READ(d), andT, xorT, leftMask));
                d++;
                andT = FbNext24Stip(andT);
                xorT = FbNext24Stip(xorT);
            }
            if (rightMask)
                WRITE(d, FbDoMaskRRop(READ(d), andT, xorT, rightMask));
        }
        if (axis == X_AXIS) {
            x1 += signdx;
            e += e1;
            if (e >= 0) {
                e += e3;
                dst += dstStride;
            }
        }
        else {
            dst += dstStride;
            e += e1;
            if (e >= 0) {
                e += e3;
                x1 += signdx;
            }
        }
        FbDashStep(dashlen, even);
    }

    fbFinishAccess(pDrawable);
}

/*
 * For drivers that want to bail drawing some lines, this
 * function takes care of selecting the appropriate rasterizer
 * based on the contents of the specified GC.
 */

static FbBres *
fbSelectBres(DrawablePtr pDrawable, GCPtr pGC)
{
    FbGCPrivPtr pPriv = fbGetGCPrivate(pGC);
    int dstBpp = pDrawable->bitsPerPixel;
    FbBres *bres;

    if (pGC->lineStyle == LineSolid) {
        bres = fbBresFill;
        if (pGC->fillStyle == FillSolid) {
            bres = fbBresSolid;
            if (dstBpp == 24)
                bres = fbBresSolid24RRop;
            if (pPriv->and == 0) {
                switch (dstBpp) {
                case 8:
                    bres = fbBresSolid8;
                    break;
                case 16:
                    bres = fbBresSolid16;
                    break;
                case 24:
                    bres = fbBresSolid24;
                    break;
                case 32:
                    bres = fbBresSolid32;
                    break;
                }
            }
        }
    }
    else {
        bres = fbBresFillDash;
        if (pGC->fillStyle == FillSolid) {
            bres = fbBresDash;
            if (dstBpp == 24)
                bres = fbBresDash24RRop;
            if (pPriv->and == 0 &&
                (pGC->lineStyle == LineOnOffDash || pPriv->bgand == 0)) {
                switch (dstBpp) {
                case 8:
                    bres = fbBresDash8;
                    break;
                case 16:
                    bres = fbBresDash16;
                    break;
                case 24:
                    bres = fbBresDash24;
                    break;
                case 32:
                    bres = fbBresDash32;
                    break;
                }
            }
        }
    }
    return bres;
}

void
fbSegment(DrawablePtr pDrawable,
          GCPtr pGC,
          int x1, int y1, int x2, int y2, Bool drawLast, int *dashOffset)
{
    FbBres *bres;
    RegionPtr pClip = fbGetCompositeClip(pGC);
    BoxPtr pBox;
    int nBox;
    int adx;                    /* abs values of dx and dy */
    int ady;
    int signdx;                 /* sign of dx and dy */
    int signdy;
    int e, e1, e2, e3;          /* bresenham error and increments */
    int len;                    /* length of segment */
    int axis;                   /* major axis */
    int octant;
    int dashoff;
    int doff;
    unsigned int bias = miGetZeroLineBias(pDrawable->pScreen);
    unsigned int oc1;           /* outcode of point 1 */
    unsigned int oc2;           /* outcode of point 2 */

    nBox = RegionNumRects(pClip);
    pBox = RegionRects(pClip);

    bres = fbSelectBres(pDrawable, pGC);

    CalcLineDeltas(x1, y1, x2, y2, adx, ady, signdx, signdy, 1, 1, octant);

    if (adx > ady) {
        axis = X_AXIS;
        e1 = ady << 1;
        e2 = e1 - (adx << 1);
        e = e1 - adx;
        len = adx;
    }
    else {
        axis = Y_AXIS;
        e1 = adx << 1;
        e2 = e1 - (ady << 1);
        e = e1 - ady;
        SetYMajorOctant(octant);
        len = ady;
    }

    FIXUP_ERROR(e, octant, bias);

    /*
     * Adjust error terms to compare against zero
     */
    e3 = e2 - e1;
    e = e - e1;

    /* we have bresenham parameters and two points.
       all we have to do now is clip and draw.
     */

    if (drawLast)
        len++;
    dashoff = *dashOffset;
    *dashOffset = dashoff + len;
    while (nBox--) {
        oc1 = 0;
        oc2 = 0;
        OUTCODES(oc1, x1, y1, pBox);
        OUTCODES(oc2, x2, y2, pBox);
        if ((oc1 | oc2) == 0) {
            (*bres) (pDrawable, pGC, dashoff,
                     signdx, signdy, axis, x1, y1, e, e1, e3, len);
            break;
        }
        else if (oc1 & oc2) {
            pBox++;
        }
        else {
            int new_x1 = x1, new_y1 = y1, new_x2 = x2, new_y2 = y2;
            int clip1 = 0, clip2 = 0;
            int clipdx, clipdy;
            int err;

            if (miZeroClipLine(pBox->x1, pBox->y1, pBox->x2 - 1,
                               pBox->y2 - 1,
                               &new_x1, &new_y1, &new_x2, &new_y2,
                               adx, ady, &clip1, &clip2,
                               octant, bias, oc1, oc2) == -1) {
                pBox++;
                continue;
            }

            if (axis == X_AXIS)
                len = abs(new_x2 - new_x1);
            else
                len = abs(new_y2 - new_y1);
            if (clip2 != 0 || drawLast)
                len++;
            if (len) {
                /* unwind bresenham error term to first point */
                doff = dashoff;
                err = e;
                if (clip1) {
                    clipdx = abs(new_x1 - x1);
                    clipdy = abs(new_y1 - y1);
                    if (axis == X_AXIS) {
                        doff += clipdx;
                        err += e3 * clipdy + e1 * clipdx;
                    }
                    else {
                        doff += clipdy;
                        err += e3 * clipdx + e1 * clipdy;
                    }
                }
                (*bres) (pDrawable, pGC, doff,
                         signdx, signdy, axis, new_x1, new_y1,
                         err, e1, e3, len);
            }
            pBox++;
        }
    }                           /* while (nBox--) */
}
@


1.6
log
@Update to xorg-server  1.16.3.

Most of the 1.16.2->1.16.3 changes are the security patches that
where already there. This adds some extra fixes plus a few unrelated
bug fixes.
@
text
@d36 1
a36 1
void
d108 1
a108 1
void
d181 1
a181 1
void
d221 1
a221 1
void
d439 1
a439 1
FbBres *
a495 12
}

void
fbBres(DrawablePtr pDrawable,
       GCPtr pGC,
       int dashOffset,
       int signdx,
       int signdy, int axis, int x1, int y1, int e, int e1, int e3, int len)
{
    (*fbSelectBres(pDrawable, pGC)) (pDrawable, pGC, dashOffset,
                                     signdx, signdy, axis, x1, y1,
                                     e, e1, e3, len);
@


1.5
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a67 6
            if (e >= 0) {
                WRITE(dst, FbDoMaskRRop (READ(dst), and, xor, bits));
                bits = 0;
                dst += dstStride;
                e += e3;
            }
d77 8
d91 3
a101 3
            WRITE(dst, FbDoMaskRRop(READ(dst), and, xor, mask));
            dst += dstStride;
            e += e1;
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d68 6
a82 6
            if (e >= 0) {
                WRITE(dst, FbDoMaskRRop(READ(dst), and, xor, bits));
                bits = 0;
                dst += dstStride;
                e += e3;
            }
a88 3
            WRITE(dst, FbDoMaskRRop(READ(dst), and, xor, mask));
            dst += dstStride;
            e += e1;
d97 3
@


1.3
log
@Update to xserver 1.11.2
@
text
@d37 6
a42 12
fbBresSolid (DrawablePtr    pDrawable,
	     GCPtr	    pGC,
	     int	    dashOffset,
	     int	    signdx,
	     int	    signdy,
	     int	    axis,
	     int	    x1,
	     int	    y1,
	     int	    e,
	     int	    e1,
	     int	    e3,
	     int	    len)
d44 11
a54 11
    FbStip	*dst;
    FbStride	dstStride;
    int		dstBpp;
    int		dstXoff, dstYoff;
    FbGCPrivPtr	pPriv = fbGetGCPrivate (pGC);
    FbStip	and = (FbStip) pPriv->and;
    FbStip	xor = (FbStip) pPriv->xor;
    FbStip	mask, mask0;
    FbStip	bits;
    
    fbGetStipDrawable (pDrawable, dst, dstStride, dstBpp, dstXoff, dstYoff);
d60 1
a60 1
    mask = FbStipRight (mask0, x1);
d62 1
a62 1
	mask0 = FbStipRight (mask0, FB_STIP_UNIT - dstBpp);
d64 37
a100 45
	dstStride = -dstStride;
    if (axis == X_AXIS)
    {
	bits = 0;
	while (len--)
	{
	    bits |= mask;
	    mask = fbBresShiftMask(mask,signdx,dstBpp);
	    if (!mask)
	    {
		WRITE(dst, FbDoMaskRRop (READ(dst), and, xor, bits));
		bits = 0;
		dst += signdx;
		mask = mask0;
	    }
	    e += e1;
	    if (e >= 0)
	    {
		WRITE(dst, FbDoMaskRRop (READ(dst), and, xor, bits));
		bits = 0;
		dst += dstStride;
		e += e3;
	    }
	}
	if (bits)
	    WRITE(dst, FbDoMaskRRop (READ(dst), and, xor, bits));
    }
    else
    {
	while (len--)
	{
	    WRITE(dst, FbDoMaskRRop (READ(dst), and, xor, mask));
	    dst += dstStride;
	    e += e1;
	    if (e >= 0)
	    {
		e += e3;
		mask = fbBresShiftMask(mask,signdx,dstBpp);
		if (!mask)
		{
		    dst += signdx;
		    mask = mask0;
		}
	    }
	}
d103 1
a103 1
    fbFinishAccess (pDrawable);
d107 5
a111 12
fbBresDash (DrawablePtr	pDrawable,
	    GCPtr	pGC,
	    int		dashOffset,
	    int		signdx,
	    int		signdy,
	    int		axis,
	    int		x1,
	    int		y1,
	    int		e,
	    int		e1,
	    int		e3,
	    int		len)
d113 11
a123 10
    FbStip	*dst;
    FbStride	dstStride;
    int		dstBpp;
    int		dstXoff, dstYoff;
    FbGCPrivPtr	pPriv = fbGetGCPrivate (pGC);
    FbStip	and = (FbStip) pPriv->and;
    FbStip	xor = (FbStip) pPriv->xor;
    FbStip	bgand = (FbStip) pPriv->bgand;
    FbStip	bgxor = (FbStip) pPriv->bgxor;
    FbStip	mask, mask0;
d125 5
a129 5
    int		dashlen;
    Bool	even;
    Bool	doOdd;
    
    fbGetStipDrawable (pDrawable, dst, dstStride, dstBpp, dstXoff, dstYoff);
d132 2
a133 2
    FbDashInit (pGC, pPriv, dashOffset, dashlen, even);
    
d139 1
a139 1
    mask = FbStipRight (mask0, x1);
d141 1
a141 1
	mask0 = FbStipRight (mask0, FB_STIP_UNIT - dstBpp);
d143 31
a173 38
	dstStride = -dstStride;
    while (len--)
    {
	if (even)
	    WRITE(dst, FbDoMaskRRop (READ(dst), and, xor, mask));
	else if (doOdd)
	    WRITE(dst, FbDoMaskRRop (READ(dst), bgand, bgxor, mask));
	if (axis == X_AXIS)
	{
	    mask = fbBresShiftMask(mask,signdx,dstBpp);
	    if (!mask)
	    {
		dst += signdx;
		mask = mask0;
	    }
	    e += e1;
	    if (e >= 0)
	    {
		dst += dstStride;
		e += e3;
	    }
	}
	else
	{
	    dst += dstStride;
	    e += e1;
	    if (e >= 0)
	    {
		e += e3;
		mask = fbBresShiftMask(mask,signdx,dstBpp);
		if (!mask)
		{
		    dst += signdx;
		    mask = mask0;
		}
	    }
	}
	FbDashStep (dashlen, even);
d176 1
a176 1
    fbFinishAccess (pDrawable);
d180 5
a184 12
fbBresFill (DrawablePtr	pDrawable,
	    GCPtr	pGC,
	    int		dashOffset,
	    int		signdx,
	    int		signdy,
	    int		axis,
	    int		x1,
	    int		y1,
	    int		e,
	    int		e1,
	    int		e3,
	    int		len)
d186 18
a203 23
    while (len--)
    {
	fbFill (pDrawable, pGC, x1, y1, 1, 1);
	if (axis == X_AXIS)
	{
	    x1 += signdx;
	    e += e1;
	    if (e >= 0)
	    {
		e += e3;
		y1 += signdy;
	    }
	}
	else
	{
	    y1 += signdy;
	    e += e1;
	    if (e >= 0)
	    {
		e += e3;
		x1 += signdx;
	    }
	}
d208 1
a208 3
fbSetFg (DrawablePtr	pDrawable,
	 GCPtr		pGC,
	 Pixel		fg)
d210 6
a215 6
    if (fg != pGC->fgPixel)
    {
	ChangeGCVal val;
	val.val = fg;
	ChangeGC (NullClient, pGC, GCForeground, &val);
	ValidateGC (pDrawable, pGC);
d220 6
a225 12
fbBresFillDash (DrawablePtr pDrawable,
		GCPtr	    pGC,
		int	    dashOffset,
		int	    signdx,
		int	    signdy,
		int	    axis,
		int	    x1,
		int	    y1,
		int	    e,
		int	    e1,
		int	    e3,
		int	    len)
d227 2
a228 1
    FbGCPrivPtr	pPriv = fbGetGCPrivate (pGC);
d230 6
a235 6
    int		dashlen;
    Bool	even;
    Bool	doOdd;
    Bool	doBg;
    Pixel	fg, bg;
    
d238 1
a238 1
    
d242 3
a244 3
    doBg = doOdd && (pGC->fillStyle == FillSolid || 
		     pGC->fillStyle == FillStippled);
    
d246 29
a274 36
    FbDashInit (pGC, pPriv, dashOffset, dashlen, even);
    
    while (len--)
    {
	if (even || doOdd)
	{
	    if (doBg)
	    {
		if (even)
		    fbSetFg (pDrawable, pGC, fg);
		else
		    fbSetFg (pDrawable, pGC, bg);
	    }
	    fbFill (pDrawable, pGC, x1, y1, 1, 1);
	}
	if (axis == X_AXIS)
	{
	    x1 += signdx;
	    e += e1;
	    if (e >= 0)
	    {
		e += e3;
		y1 += signdy;
	    }
	}
	else
	{
	    y1 += signdy;
	    e += e1;
	    if (e >= 0)
	    {
		e += e3;
		x1 += signdx;
	    }
	}
	FbDashStep (dashlen, even);
d277 1
a277 1
	fbSetFg (pDrawable, pGC, fg);
d281 6
a286 12
fbBresSolid24RRop (DrawablePtr  pDrawable,
		   GCPtr	pGC,
		   int		dashOffset,
		   int		signdx,
		   int		signdy,
		   int		axis,
		   int		x1,
		   int		y1,
		   int		e,
		   int		e1,
		   int		e3,
		   int		len)
d288 15
a302 15
    FbStip	*dst;
    FbStride	dstStride;
    int		dstBpp;
    int		dstXoff, dstYoff;
    FbGCPrivPtr	pPriv = fbGetGCPrivate (pGC);
    FbStip	and = pPriv->and;
    FbStip	xor = pPriv->xor;
    FbStip	leftMask, rightMask;
    int		nl;
    FbStip	*d;
    int		x;
    int		rot;
    FbStip	andT, xorT;
    
    fbGetStipDrawable (pDrawable, dst, dstStride, dstBpp, dstXoff, dstYoff);
d306 1
a306 1
	dstStride = -dstStride;
d308 31
a338 37
    while (len--)
    {
	d = dst + (x1 >> FB_STIP_SHIFT);
	x = x1 & FB_STIP_MASK;
	rot = FbFirst24Rot (x);
	andT = FbRot24Stip(and,rot);
	xorT = FbRot24Stip(xor,rot);
	FbMaskStip (x, 24, leftMask, nl, rightMask);
	if (leftMask)
	{
	    WRITE(d, FbDoMaskRRop (READ(d), andT, xorT, leftMask));
	    d++;
	    andT = FbNext24Stip (andT);
	    xorT = FbNext24Stip (xorT);
	}
	if (rightMask)
	    WRITE(d, FbDoMaskRRop (READ(d), andT, xorT, rightMask));
	if (axis == X_AXIS)
	{
	    x1 += signdx;
	    e += e1;
	    if (e >= 0)
	    {
		e += e3;
		dst += dstStride;
	    }
	}
	else
	{
	    dst += dstStride;
	    e += e1;
	    if (e >= 0)
	    {
		e += e3;
		x1 += signdx;
	    }
	}
d341 1
a341 1
    fbFinishAccess (pDrawable);
d345 6
a350 12
fbBresDash24RRop (DrawablePtr	pDrawable,
		  GCPtr		pGC,
		  int		dashOffset,
		  int		signdx,
		  int		signdy,
		  int		axis,
		  int		x1,
		  int		y1,
		  int		e,
		  int		e1,
		  int		e3,
		  int		len)
d352 16
a367 15
    FbStip	*dst;
    FbStride	dstStride;
    int		dstBpp;
    int		dstXoff, dstYoff;
    FbGCPrivPtr	pPriv = fbGetGCPrivate (pGC);
    FbStip	andT, xorT;
    FbStip	fgand = pPriv->and;
    FbStip	fgxor = pPriv->xor;
    FbStip	bgand = pPriv->bgand;
    FbStip	bgxor = pPriv->bgxor;
    FbStip	leftMask, rightMask;
    int		nl;
    FbStip	*d;
    int		x;
    int		rot;
d369 5
a373 5
    int		dashlen;
    Bool	even;
    Bool	doOdd;
    
    fbGetStipDrawable (pDrawable, dst, dstStride, dstBpp, dstXoff, dstYoff);
d378 1
a378 1
    
d382 1
a382 1
	dstStride = -dstStride;
d384 42
a425 51
    while (len--)
    {
	if (even || doOdd)
	{
	    if (even)
	    {
		andT = fgand;
		xorT = fgxor;
	    }
	    else
	    {
		andT = bgand;
		xorT = bgxor;
	    }
	    d = dst + (x1 >> FB_STIP_SHIFT);
	    x = x1 & FB_STIP_MASK;
	    rot = FbFirst24Rot (x);
	    andT = FbRot24Stip (andT, rot);
	    xorT = FbRot24Stip (xorT, rot);
	    FbMaskStip (x, 24, leftMask, nl, rightMask);
	    if (leftMask)
	    {
		WRITE(d, FbDoMaskRRop (READ(d), andT, xorT, leftMask));
		d++;
		andT = FbNext24Stip (andT);
		xorT = FbNext24Stip (xorT);
	    }
	    if (rightMask)
		WRITE(d, FbDoMaskRRop (READ(d), andT, xorT, rightMask));
	}
	if (axis == X_AXIS)
	{
	    x1 += signdx;
	    e += e1;
	    if (e >= 0)
	    {
		e += e3;
		dst += dstStride;
	    }
	}
	else
	{
	    dst += dstStride;
	    e += e1;
	    if (e >= 0)
	    {
		e += e3;
		x1 += signdx;
	    }
	}
	FbDashStep (dashlen, even);
d428 1
a428 1
    fbFinishAccess (pDrawable);
d438 1
a438 2
fbSelectBres (DrawablePtr   pDrawable,
	      GCPtr	    pGC)
d440 52
a491 42
    FbGCPrivPtr	pPriv = fbGetGCPrivate(pGC);
    int		dstBpp = pDrawable->bitsPerPixel;
    FbBres *	bres;
    
    if (pGC->lineStyle == LineSolid)
    {
	bres = fbBresFill;
	if (pGC->fillStyle == FillSolid)
	{
	    bres = fbBresSolid;
	    if (dstBpp == 24)
		bres = fbBresSolid24RRop;
	    if (pPriv->and == 0)
	    {
		switch (dstBpp) {
		case 8:	bres = fbBresSolid8; break;
		case 16: bres = fbBresSolid16; break;
		case 24: bres = fbBresSolid24; break;
		case 32: bres = fbBresSolid32; break;
		}
	    }
	}
    }
    else
    {
	bres = fbBresFillDash;
	if (pGC->fillStyle == FillSolid)
	{
	    bres = fbBresDash;
	    if (dstBpp == 24)
		bres = fbBresDash24RRop;
	    if (pPriv->and == 0 && 
		(pGC->lineStyle == LineOnOffDash || pPriv->bgand == 0))
	    {
		switch (dstBpp) {
		case 8:	bres = fbBresDash8; break;
		case 16: bres = fbBresDash16; break;
		case 24: bres = fbBresDash24; break;
		case 32: bres = fbBresDash32; break;
		}
	    }
	}
d497 5
a501 12
fbBres (DrawablePtr	pDrawable,
	GCPtr		pGC,
	int		dashOffset,
	int		signdx,
	int		signdy,
	int		axis,
	int		x1,
	int		y1,
	int		e,
	int		e1,
	int		e3,
	int		len)
d503 3
a505 3
    (*fbSelectBres (pDrawable, pGC)) (pDrawable, pGC, dashOffset,
				      signdx, signdy, axis, x1, y1,
				      e, e1, e3, len);
d509 3
a511 8
fbSegment (DrawablePtr	pDrawable,
	   GCPtr	pGC,
	   int		x1,
	   int		y1,
	   int		x2,
	   int		y2,
	   Bool		drawLast,
	   int		*dashOffset)
d513 14
a526 14
    FbBres *	bres;
    RegionPtr	pClip = fbGetCompositeClip(pGC);
    BoxPtr	pBox;
    int		nBox;
    int		adx;		/* abs values of dx and dy */
    int		ady;
    int		signdx;		/* sign of dx and dy */
    int		signdy;
    int		e, e1, e2, e3;		/* bresenham error and increments */
    int		len;			/* length of segment */
    int		axis;			/* major axis */
    int		octant;
    int		dashoff;
    int		doff;
d528 7
a534 2
    unsigned int oc1;	/* outcode of point 1 */
    unsigned int oc2;	/* outcode of point 2 */
d536 16
a551 24
    nBox = RegionNumRects (pClip);
    pBox = RegionRects (pClip);
    
    bres = fbSelectBres (pDrawable, pGC);
    
    CalcLineDeltas(x1, y1, x2, y2, adx, ady, signdx, signdy,
		   1, 1, octant);

    if (adx > ady)
    {
	axis = X_AXIS;
	e1 = ady << 1;
	e2 = e1 - (adx << 1);
	e = e1 - adx;
	len = adx;
    }
    else
    {
	axis = Y_AXIS;
	e1 = adx << 1;
	e2 = e1 - (ady << 1);
	e = e1 - ady;
	SetYMajorOctant(octant);
	len = ady;
d554 2
a555 2
    FIXUP_ERROR (e, octant, bias);
    
d561 1
a561 1
    
d564 1
a564 1
    */
d567 1
a567 1
	len++;
d570 57
a626 67
    while(nBox--)
    {
	oc1 = 0;
	oc2 = 0;
	OUTCODES(oc1, x1, y1, pBox);
	OUTCODES(oc2, x2, y2, pBox);
	if ((oc1 | oc2) == 0)
	{
	    (*bres) (pDrawable, pGC, dashoff,
		     signdx, signdy, axis, x1, y1,
		     e, e1, e3, len);
	    break;
	}
	else if (oc1 & oc2)
	{
	    pBox++;
	}
	else
	{
	    int new_x1 = x1, new_y1 = y1, new_x2 = x2, new_y2 = y2;
	    int clip1 = 0, clip2 = 0;
	    int clipdx, clipdy;
	    int err;
	    
	    if (miZeroClipLine(pBox->x1, pBox->y1, pBox->x2-1,
			       pBox->y2-1,
			       &new_x1, &new_y1, &new_x2, &new_y2,
			       adx, ady, &clip1, &clip2,
			       octant, bias, oc1, oc2) == -1)
	    {
		pBox++;
		continue;
	    }

	    if (axis == X_AXIS)
		len = abs(new_x2 - new_x1);
	    else
		len = abs(new_y2 - new_y1);
	    if (clip2 != 0 || drawLast)
		len++;
	    if (len)
	    {
		/* unwind bresenham error term to first point */
		doff = dashoff;
		err = e;
		if (clip1)
		{
		    clipdx = abs(new_x1 - x1);
		    clipdy = abs(new_y1 - y1);
		    if (axis == X_AXIS)
		    {
			doff += clipdx;
			err  += e3 * clipdy + e1 * clipdx;
		    }
		    else
		    {
			doff += clipdy;
			err  += e3 * clipdx + e1 * clipdy;
		    }
		}
		(*bres) (pDrawable, pGC, doff,
			 signdx, signdy, axis, new_x1, new_y1,
			 err, e1, e3, len);
	    }
	    pBox++;
	}
    } /* while (nBox--) */
@


1.2
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a332 1
#ifdef FB_24BIT
a508 1
#endif
a529 1
#ifdef FB_24BIT
a531 2
#endif
#ifndef FBNOPIXADDR
a536 1
#ifdef FB_24BIT
a537 1
#endif
a540 1
#endif
a548 1
#ifdef FB_24BIT
a550 2
#endif
#ifndef FBNOPIXADDR
a556 1
#ifdef FB_24BIT
a557 1
#endif
a560 1
#endif
@


1.1
log
@Initial revision
@
text
@a1 2
 * Id: fbseg.c,v 1.1 1999/11/02 03:54:45 keithp Exp $
 *
d80 1
a80 1
		*dst = FbDoMaskRRop (*dst, and, xor, bits);
d88 1
a88 1
		*dst = FbDoMaskRRop (*dst, and, xor, bits);
d95 1
a95 1
	    *dst = FbDoMaskRRop (*dst, and, xor, bits);
d101 1
a101 1
	    *dst = FbDoMaskRRop (*dst, and, xor, mask);
d116 2
d167 1
a167 1
	    *dst = FbDoMaskRRop (*dst, and, xor, mask);
d169 1
a169 1
	    *dst = FbDoMaskRRop (*dst, bgand, bgxor, mask);
d202 2
d253 3
a255 1
	DoChangeGC (pGC, GCForeground, (XID *) &fg, FALSE);
d378 1
a378 1
	    *d = FbDoMaskRRop (*d, andT, xorT, leftMask);
d384 1
a384 1
	    *d = FbDoMaskRRop (*d, andT, xorT, rightMask);
d406 2
d477 1
a477 1
		*d = FbDoMaskRRop (*d, andT, xorT, leftMask);
d483 1
a483 1
		*d = FbDoMaskRRop (*d, andT, xorT, rightMask);
d507 2
d627 2
a628 2
    nBox = REGION_NUM_RECTS (pClip);
    pBox = REGION_RECTS (pClip);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
d82 1
a82 1
		WRITE(dst, FbDoMaskRRop (READ(dst), and, xor, bits));
d90 1
a90 1
		WRITE(dst, FbDoMaskRRop (READ(dst), and, xor, bits));
d97 1
a97 1
	    WRITE(dst, FbDoMaskRRop (READ(dst), and, xor, bits));
d103 1
a103 1
	    WRITE(dst, FbDoMaskRRop (READ(dst), and, xor, mask));
a117 2

    fbFinishAccess (pDrawable);
d167 1
a167 1
	    WRITE(dst, FbDoMaskRRop (READ(dst), and, xor, mask));
d169 1
a169 1
	    WRITE(dst, FbDoMaskRRop (READ(dst), bgand, bgxor, mask));
a201 2

    fbFinishAccess (pDrawable);
d374 1
a374 1
	    WRITE(d, FbDoMaskRRop (READ(d), andT, xorT, leftMask));
d380 1
a380 1
	    WRITE(d, FbDoMaskRRop (READ(d), andT, xorT, rightMask));
a401 2

    fbFinishAccess (pDrawable);
d471 1
a471 1
		WRITE(d, FbDoMaskRRop (READ(d), andT, xorT, leftMask));
d477 1
a477 1
		WRITE(d, FbDoMaskRRop (READ(d), andT, xorT, rightMask));
a500 2

    fbFinishAccess (pDrawable);
@

