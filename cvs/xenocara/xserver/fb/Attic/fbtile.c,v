head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.18
	OPENBSD_5_0:1.1.1.2.0.16
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.12
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.09.16.19.10.20;	author matthieu;	state dead;
branches;
next	1.2;
commitid	Te1daavkBLskZ8gc;

1.2
date	2012.06.10.13.21.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.41;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.41;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright Â© 1998 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "fb.h"

/*
 * Accelerated tile fill -- tile width is a power of two not greater
 * than FB_UNIT
 */

void
fbEvenTile(FbBits * dst,
           FbStride dstStride,
           int dstX,
           int width,
           int height,
           FbBits * tile,
           FbStride tileStride,
           int tileHeight, int alu, FbBits pm, int xRot, int yRot)
{
    FbBits *t, *tileEnd, bits;
    FbBits startmask, endmask;
    FbBits and, xor;
    int n, nmiddle;
    int tileX, tileY;
    int rot;
    int startbyte, endbyte;

    dst += dstX >> FB_SHIFT;
    dstX &= FB_MASK;
    FbMaskBitsBytes(dstX, width, FbDestInvarientRop(alu, pm),
                    startmask, startbyte, nmiddle, endmask, endbyte);
    if (startmask)
        dstStride--;
    dstStride -= nmiddle;

    /*
     * Compute tile start scanline and rotation parameters
     */
    tileEnd = tile + tileHeight * tileStride;
    modulus(-yRot, tileHeight, tileY);
    t = tile + tileY * tileStride;
    modulus(-xRot, FB_UNIT, tileX);
    rot = tileX;

    while (height--) {

        /*
         * Pick up bits for this scanline
         */
        bits = READ(t);
        t += tileStride;
        if (t >= tileEnd)
            t = tile;
        bits = FbRotLeft(bits, rot);
        and = fbAnd(alu, bits, pm);
        xor = fbXor(alu, bits, pm);

        if (startmask) {
            FbDoLeftMaskByteRRop(dst, startbyte, startmask, and, xor);
            dst++;
        }
        n = nmiddle;
        if (!and)
            while (n--)
                WRITE(dst++, xor);
        else
            while (n--) {
                WRITE(dst, FbDoRRop(READ(dst), and, xor));
                dst++;
            }
        if (endmask)
            FbDoRightMaskByteRRop(dst, endbyte, endmask, and, xor);
        dst += dstStride;
    }
}

void
fbOddTile(FbBits * dst,
          FbStride dstStride,
          int dstX,
          int width,
          int height,
          FbBits * tile,
          FbStride tileStride,
          int tileWidth,
          int tileHeight, int alu, FbBits pm, int bpp, int xRot, int yRot)
{
    int tileX, tileY;
    int widthTmp;
    int h, w;
    int x, y;

    modulus(-yRot, tileHeight, tileY);
    y = 0;
    while (height) {
        h = tileHeight - tileY;
        if (h > height)
            h = height;
        height -= h;
        widthTmp = width;
        x = dstX;
        modulus(dstX - xRot, tileWidth, tileX);
        while (widthTmp) {
            w = tileWidth - tileX;
            if (w > widthTmp)
                w = widthTmp;
            widthTmp -= w;
            fbBlt(tile + tileY * tileStride,
                  tileStride,
                  tileX,
                  dst + y * dstStride,
                  dstStride, x, w, h, alu, pm, bpp, FALSE, FALSE);
            x += w;
            tileX = 0;
        }
        y += h;
        tileY = 0;
    }
}

void
fbTile(FbBits * dst,
       FbStride dstStride,
       int dstX,
       int width,
       int height,
       FbBits * tile,
       FbStride tileStride,
       int tileWidth,
       int tileHeight, int alu, FbBits pm, int bpp, int xRot, int yRot)
{
    if (FbEvenTile(tileWidth))
        fbEvenTile(dst, dstStride, dstX, width, height,
                   tile, tileStride, tileHeight, alu, pm, xRot, yRot);
    else
        fbOddTile(dst, dstStride, dstX, width, height,
                  tile, tileStride, tileWidth, tileHeight,
                  alu, pm, bpp, xRot, yRot);
}
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.1
log
@Initial revision
@
text
@a1 2
 * Id: fbtile.c,v 1.1 1999/11/02 03:54:45 keithp Exp $
 *
d35 8
a42 14
fbEvenTile (FbBits	*dst,
	    FbStride	dstStride,
	    int		dstX,

	    int		width,
	    int		height,

	    FbBits	*tile,
	    int		tileHeight,

	    int		alu,
	    FbBits	pm,
	    int		xRot,
	    int		yRot)
d44 7
a50 7
    FbBits  *t, *tileEnd, bits;
    FbBits  startmask, endmask;
    FbBits  and, xor;
    int	    n, nmiddle;
    int	    tileX, tileY;
    int	    rot;
    int	    startbyte, endbyte;
d55 1
a55 1
		    startmask, startbyte, nmiddle, endmask, endbyte);
d57 1
a57 1
	dstStride--;
d59 1
a59 1
    
d63 4
a66 4
    tileEnd = tile + tileHeight;
    modulus (- yRot, tileHeight, tileY);
    t = tile + tileY;
    modulus (- xRot, FB_UNIT, tileX);
d68 30
a97 31
    
    while (height--)
    {
	
	/*
	 * Pick up bits for this scanline
	 */
	bits = *t++;
	if (t == tileEnd) t = tile;
	bits = FbRotLeft(bits,rot);
	and = fbAnd(alu,bits,pm);
	xor = fbXor(alu,bits,pm);
	
	if (startmask)
	{
	    FbDoLeftMaskByteRRop(dst, startbyte, startmask, and, xor);
	    dst++;
	}
	n = nmiddle;
	if (!and)
	    while (n--)
		*dst++ = xor;
	else
	    while (n--)
	    {
		*dst = FbDoRRop (*dst, and, xor);
		dst++;
	    }
	if (endmask)
	    FbDoRightMaskByteRRop(dst, endbyte, endmask, and, xor);
	dst += dstStride;
d100 1
a100 1
	    
d102 9
a110 18
fbOddTile(FbBits    *dst,
	  FbStride  dstStride,
	  int	    dstX,

	  int	    width,
	  int	    height,

	  FbBits    *tile,
	  FbStride  tileStride,
	  int	    tileWidth,
	  int	    tileHeight,

	  int	    alu,
	  FbBits    pm,
	  int	    bpp,
	  
	  int	    xRot,
	  int	    yRot)
d112 4
a115 4
    int	    tileX, tileY;
    int	    widthTmp;
    int	    h, w;
    int	    x, y;
d117 1
a117 1
    modulus (- yRot, tileHeight, tileY);
d119 23
a141 35
    while (height)
    {
	h = tileHeight - tileY;
	if (h > height)
	    h = height;
	height -= h;
	widthTmp = width;
	x = dstX;
	modulus (dstX - xRot, tileWidth, tileX);
	while (widthTmp)
	{
	    w = tileWidth - tileX;
	    if (w > widthTmp)
		w = widthTmp;
	    widthTmp -= w;
	    fbBlt (tile + tileY * tileStride,
		   tileStride,
		   tileX,

		   dst + y * dstStride,
		   dstStride,
		   x,

		   w, h,
		   alu,
		   pm,
		   bpp,
		   
		   FALSE,
		   FALSE);
	    x += w;
	    tileX = 0;
	}
	y += h;
	tileY = 0;
d146 9
a154 18
fbTile (FbBits	    *dst,
	FbStride    dstStride,
	int	    dstX,

	int	    width,
	int	    height,

	FbBits	    *tile,
	FbStride    tileStride,
	int	    tileWidth,
	int	    tileHeight,
	
	int	    alu,
	FbBits	    pm,
	int	    bpp,
	
	int	    xRot,
	int	    yRot)
d156 3
a158 4
    if (FbEvenTile (tileWidth))
	fbEvenTile (dst, dstStride, dstX, width, height, 
		    tile, tileHeight,
		    alu, pm, xRot, yRot);
d160 3
a162 3
	fbOddTile (dst, dstStride, dstX, width, height, 
		   tile, tileStride, tileWidth, tileHeight,
		   alu, pm, bpp, xRot, yRot);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
a44 1
	    FbStride	tileStride,
d71 1
a71 1
    tileEnd = tile + tileHeight * tileStride;
d73 1
a73 1
    t = tile + tileY * tileStride;
d83 2
a84 3
	bits = READ(t);
	t += tileStride;
	if (t >= tileEnd) t = tile;
d97 1
a97 1
		WRITE(dst++, xor);
d101 1
a101 1
		WRITE(dst, FbDoRRop (READ(dst), and, xor));
d197 1
a197 1
		    tile, tileStride, tileHeight,
@

