head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.09.16.19.10.20;	author matthieu;	state dead;
branches;
next	1.4;
commitid	Te1daavkBLskZ8gc;

1.4
date	2012.06.10.13.21.21;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.43;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.43;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright Â© 1998 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "fb.h"

/*
 * This is a slight abuse of the preprocessor to generate repetitive
 * code, the idea is to generate code for each case of a copy-mode
 * transparent stipple
 */
#define LaneCases1(c,a)	    case c: \
				while (n--) { FbLaneCase(c,a); a++; } \
				break
#define LaneCases2(c,a)	    LaneCases1(c,a); LaneCases1(c+1,a)
#define LaneCases4(c,a)	    LaneCases2(c,a); LaneCases2(c+2,a)
#define LaneCases8(c,a)	    LaneCases4(c,a); LaneCases4(c+4,a)
#define LaneCases16(c,a)    LaneCases8(c,a); LaneCases8(c+8,a)
#define LaneCases32(c,a)    LaneCases16(c,a); LaneCases16(c+16,a)
#define LaneCases64(c,a)    LaneCases32(c,a); LaneCases32(c+32,a)
#define LaneCases128(c,a)   LaneCases64(c,a); LaneCases64(c+64,a)
#define LaneCases256(c,a)   LaneCases128(c,a); LaneCases128(c+128,a)

#if FB_SHIFT == 6
#define LaneCases(a)	    LaneCases256(0,a)
#endif

#if FB_SHIFT == 5
#define LaneCases(a)	    LaneCases16(0,a)
#endif

/*
 * Repeat a transparent stipple across a scanline n times
 */

void
fbTransparentSpan(FbBits * dst, FbBits stip, FbBits fgxor, int n)
{
    FbStip s;

    s = ((FbStip) (stip) & 0x01);
    s |= ((FbStip) (stip >> 8) & 0x02);
    s |= ((FbStip) (stip >> 16) & 0x04);
    s |= ((FbStip) (stip >> 24) & 0x08);
#if FB_SHIFT > 5
    s |= ((FbStip) (stip >> 32) & 0x10);
    s |= ((FbStip) (stip >> 40) & 0x20);
    s |= ((FbStip) (stip >> 48) & 0x40);
    s |= ((FbStip) (stip >> 56) & 0x80);
#endif
    switch (s) {
        LaneCases(dst);
    }
}

void
fbEvenStipple(FbBits * dst,
              FbStride dstStride,
              int dstX,
              int dstBpp,
              int width,
              int height,
              FbStip * stip,
              FbStride stipStride,
              int stipHeight,
              FbBits fgand,
              FbBits fgxor, FbBits bgand, FbBits bgxor, int xRot, int yRot)
{
    FbBits startmask, endmask;
    FbBits mask, and, xor;
    int nmiddle, n;
    FbStip *s, *stipEnd, bits;
    int rot, stipX, stipY;
    int pixelsPerDst;
    const FbBits *fbBits;
    Bool transparent;
    int startbyte, endbyte;

    /*
     * Check for a transparent stipple (stencil)
     */
    transparent = FALSE;
    if (dstBpp >= 8 && fgand == 0 && bgand == FB_ALLONES && bgxor == 0)
        transparent = TRUE;

    pixelsPerDst = FB_UNIT / dstBpp;
    /*
     * Adjust dest pointers
     */
    dst += dstX >> FB_SHIFT;
    dstX &= FB_MASK;
    FbMaskBitsBytes(dstX, width, fgand == 0 && bgand == 0,
                    startmask, startbyte, nmiddle, endmask, endbyte);

    if (startmask)
        dstStride--;
    dstStride -= nmiddle;

    xRot *= dstBpp;
    /*
     * Compute stip start scanline and rotation parameters
     */
    stipEnd = stip + stipStride * stipHeight;
    modulus(-yRot, stipHeight, stipY);
    s = stip + stipStride * stipY;
    modulus(-xRot, FB_UNIT, stipX);
    rot = stipX;

    /*
     * Get pointer to stipple mask array for this depth
     */
    /* fbStippleTable covers all valid bpp (4,8,16,32) */
    fbBits = fbStippleTable[pixelsPerDst];

    while (height--) {
        /*
         * Extract stipple bits for this scanline;
         */
        bits = READ(s);
        s += stipStride;
        if (s == stipEnd)
            s = stip;
#if FB_UNIT > 32
        if (pixelsPerDst == 16)
            mask = FbStipple16Bits(FbLeftStipBits(bits, 16));
        else
#endif
            mask = fbBits[FbLeftStipBits(bits, pixelsPerDst)];
        /*
         * Rotate into position and compute reduced rop values
         */
        mask = FbRotLeft(mask, rot);
        and = (fgand & mask) | (bgand & ~mask);
        xor = (fgxor & mask) | (bgxor & ~mask);

        if (transparent) {
            if (startmask) {
                fbTransparentSpan(dst, mask & startmask, fgxor, 1);
                dst++;
            }
            fbTransparentSpan(dst, mask, fgxor, nmiddle);
            dst += nmiddle;
            if (endmask)
                fbTransparentSpan(dst, mask & endmask, fgxor, 1);
        }
        else {
            /*
             * Fill scanline
             */
            if (startmask) {
                FbDoLeftMaskByteRRop(dst, startbyte, startmask, and, xor);
                dst++;
            }
            n = nmiddle;
            if (!and)
                while (n--)
                    WRITE(dst++, xor);
            else {
                while (n--) {
                    WRITE(dst, FbDoRRop(READ(dst), and, xor));
                    dst++;
                }
            }
            if (endmask)
                FbDoRightMaskByteRRop(dst, endbyte, endmask, and, xor);
        }
        dst += dstStride;
    }
}

void
fbOddStipple(FbBits * dst,
             FbStride dstStride,
             int dstX,
             int dstBpp,
             int width,
             int height,
             FbStip * stip,
             FbStride stipStride,
             int stipWidth,
             int stipHeight,
             FbBits fgand,
             FbBits fgxor, FbBits bgand, FbBits bgxor, int xRot, int yRot)
{
    int stipX, stipY, sx;
    int widthTmp;
    int h, w;
    int x, y;

    modulus(-yRot, stipHeight, stipY);
    modulus(dstX / dstBpp - xRot, stipWidth, stipX);
    y = 0;
    while (height) {
        h = stipHeight - stipY;
        if (h > height)
            h = height;
        height -= h;
        widthTmp = width;
        x = dstX;
        sx = stipX;
        while (widthTmp) {
            w = (stipWidth - sx) * dstBpp;
            if (w > widthTmp)
                w = widthTmp;
            widthTmp -= w;
            fbBltOne(stip + stipY * stipStride,
                     stipStride,
                     sx,
                     dst + y * dstStride,
                     dstStride, x, dstBpp, w, h, fgand, fgxor, bgand, bgxor);
            x += w;
            sx = 0;
        }
        y += h;
        stipY = 0;
    }
}

void
fbStipple(FbBits * dst,
          FbStride dstStride,
          int dstX,
          int dstBpp,
          int width,
          int height,
          FbStip * stip,
          FbStride stipStride,
          int stipWidth,
          int stipHeight,
          Bool even,
          FbBits fgand,
          FbBits fgxor, FbBits bgand, FbBits bgxor, int xRot, int yRot)
{
    if (even)
        fbEvenStipple(dst, dstStride, dstX, dstBpp, width, height,
                      stip, stipStride, stipHeight,
                      fgand, fgxor, bgand, bgxor, xRot, yRot);
    else
        fbOddStipple(dst, dstStride, dstX, dstBpp, width, height,
                     stip, stipStride, stipWidth, stipHeight,
                     fgand, fgxor, bgand, bgxor, xRot, yRot);
}
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.3
log
@Update to xserver 1.11.2
@
text
@d45 1
a45 1
    
d49 1
a49 1
    
d53 1
a53 1
							   
d59 1
a59 4
fbTransparentSpan (FbBits   *dst,
		   FbBits   stip,
		   FbBits   fgxor,
		   int	    n)
d61 1
a61 1
    FbStip  s;
d63 2
a64 2
    s  = ((FbStip) (stip      ) & 0x01);
    s |= ((FbStip) (stip >>  8) & 0x02);
d74 1
a74 1
	LaneCases(dst);
d79 21
a99 16
fbEvenStipple (FbBits	*dst,
	       FbStride	dstStride,
	       int	dstX,
	       int	dstBpp,

	       int	width,
	       int	height,

	       FbStip	*stip,
	       FbStride	stipStride,
	       int	stipHeight,

	       FbBits	fgand,
	       FbBits	fgxor,
	       FbBits	bgand,
	       FbBits	bgxor,
a100 13
	       int	xRot,
	       int	yRot)
{
    FbBits	startmask, endmask;
    FbBits	mask, and, xor;
    int		nmiddle, n;
    FbStip	*s, *stipEnd, bits;
    int		rot, stipX, stipY;
    int		pixelsPerDst;
    const FbBits    *fbBits;
    Bool	transparent;
    int		startbyte, endbyte;
    
d105 3
a107 4
    if (dstBpp >= 8 &&
	fgand == 0 && bgand == FB_ALLONES && bgxor == 0)
	transparent = TRUE;
    
d114 3
a116 3
    FbMaskBitsBytes (dstX, width, fgand == 0 && bgand == 0,
		     startmask, startbyte, nmiddle, endmask, endbyte);
		     
d118 1
a118 1
	dstStride--;
d120 1
a120 1
    
d126 1
a126 1
    modulus (- yRot, stipHeight, stipY);
d128 1
a128 1
    modulus (- xRot, FB_UNIT, stipX);
d130 1
a130 1
    
d136 9
a144 10
    
    while (height--)
    {
	/*
	 * Extract stipple bits for this scanline;
	 */
	bits = READ(s);
	s += stipStride;
	if (s == stipEnd)
	    s = stip;
d146 3
a148 3
	if (pixelsPerDst == 16)
	    mask = FbStipple16Bits(FbLeftStipBits(bits,16));
	else
d150 40
a189 46
	    mask = fbBits[FbLeftStipBits(bits,pixelsPerDst)];
	/*
	 * Rotate into position and compute reduced rop values
	 */
	mask = FbRotLeft(mask, rot);
	and = (fgand & mask) | (bgand & ~mask);
	xor = (fgxor & mask) | (bgxor & ~mask);
	
	if (transparent)
	{
	    if (startmask)
	    {
		fbTransparentSpan(dst, mask&startmask, fgxor, 1);
		dst++;
	    }
	    fbTransparentSpan (dst, mask, fgxor, nmiddle);
	    dst += nmiddle;
	    if (endmask)
		fbTransparentSpan(dst, mask&endmask, fgxor, 1);
	}
	else
	{
	    /*
	     * Fill scanline
	     */
	    if (startmask)
	    {
		FbDoLeftMaskByteRRop (dst, startbyte, startmask, and, xor);
		dst++;
	    }
	    n = nmiddle;
	    if (!and)
		while (n--)
		    WRITE(dst++, xor);
	    else
	    {
		while (n--)
		{
		    WRITE(dst, FbDoRRop (READ(dst), and, xor));
		    dst++;
		}
	    }
	    if (endmask)
		FbDoRightMaskByteRRop(dst, endbyte, endmask, and, xor);
	}
	dst += dstStride;
d194 12
a205 20
fbOddStipple (FbBits	*dst,
	      FbStride	dstStride,
	      int	dstX,
	      int	dstBpp,

	      int	width,
	      int	height,

	      FbStip	*stip,
	      FbStride	stipStride,
	      int	stipWidth,
	      int	stipHeight,

	      FbBits	fgand,
	      FbBits	fgxor,
	      FbBits	bgand,
	      FbBits	bgxor,

	      int	xRot,
	      int	yRot)
d207 4
a210 4
    int		stipX, stipY, sx;
    int		widthTmp;
    int		h, w;
    int		x, y;
d212 2
a213 2
    modulus (- yRot, stipHeight, stipY);
    modulus (dstX / dstBpp - xRot, stipWidth, stipX);
d215 23
a237 32
    while (height)
    {
	h = stipHeight - stipY;
	if (h > height)
	    h = height;
	height -= h;
	widthTmp = width;
	x = dstX;
	sx = stipX;
	while (widthTmp)
	{
	    w = (stipWidth - sx) * dstBpp;
	    if (w > widthTmp)
		w = widthTmp;
	    widthTmp -= w;
	    fbBltOne (stip + stipY * stipStride,
		      stipStride,
		      sx,

		      dst + y * dstStride,
		      dstStride,
		      x,
		      dstBpp,

		      w, h,

		      fgand, fgxor, bgand, bgxor);
	    x += w;
	    sx = 0;
	}
	y += h;
	stipY = 0;
d242 13
a254 21
fbStipple (FbBits	*dst,
	   FbStride	dstStride,
	   int		dstX,
	   int		dstBpp,

	   int		width,
	   int		height,

	   FbStip	*stip,
	   FbStride	stipStride,
	   int		stipWidth,
	   int		stipHeight,
	   Bool		even,

	   FbBits	fgand,
	   FbBits	fgxor,
	   FbBits	bgand,
	   FbBits	bgxor,

	   int		xRot,
	   int		yRot)
d257 3
a259 3
	fbEvenStipple (dst, dstStride, dstX, dstBpp, width, height,
		       stip, stipStride, stipHeight,
		       fgand, fgxor, bgand, bgxor, xRot, yRot);
d261 3
a263 3
	fbOddStipple (dst, dstStride, dstX, dstBpp, width, height,
		      stip, stipStride, stipWidth, stipHeight,
		      fgand, fgxor, bgand, bgxor, xRot, yRot);
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a28 1
#ifndef FBNOPIXADDR
a79 1
#endif
a170 1
#ifndef FBNOPIXADDR
a183 1
#endif
@


1.1
log
@Initial revision
@
text
@a1 2
 * Id: fbstipple.c,v 1.1 1999/11/02 03:54:45 keithp Exp $
 *
d36 1
a36 1
				while (n--) { (void)FbLaneCase(c,a); a++; } \
d156 1
a156 1
	bits = *s;
d200 1
a200 1
		    *dst++ = xor;
d205 1
a205 1
		    *dst = FbDoRRop (*dst, and, xor);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
d158 1
a158 1
	bits = READ(s);
d202 1
a202 1
		    WRITE(dst++, xor);
d207 1
a207 1
		    WRITE(dst, FbDoRRop (READ(dst), and, xor));
@

