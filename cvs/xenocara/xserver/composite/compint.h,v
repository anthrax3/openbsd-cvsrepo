head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.8
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.6
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2015.09.16.19.10.20;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	Te1daavkBLskZ8gc;

1.9
date	2014.09.27.17.52.59;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	cVXoV5PxI8YrEaVA;

1.8
date	2013.06.07.17.28.46;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.10.13.21.20;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.47;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.03;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.25;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.21;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.12;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.15;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.15;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.06.09;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Copyright Â© 2003 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#ifndef _COMPINT_H_
#define _COMPINT_H_

#include "misc.h"
#include "scrnintstr.h"
#include "os.h"
#include "regionstr.h"
#include "validate.h"
#include "windowstr.h"
#include "input.h"
#include "resource.h"
#include "colormapst.h"
#include "cursorstr.h"
#include "dixstruct.h"
#include "gcstruct.h"
#include "servermd.h"
#include "dixevents.h"
#include "globals.h"
#include "picturestr.h"
#include "extnsionst.h"
#include "privates.h"
#include "mi.h"
#include "damage.h"
#include "damageextint.h"
#include "xfixes.h"
#include <X11/extensions/compositeproto.h>
#include "compositeext.h"
#include <assert.h>

/*
 *  enable this for debugging

    #define COMPOSITE_DEBUG
 */

typedef struct _CompClientWindow {
    struct _CompClientWindow *next;
    XID id;
    int update;
} CompClientWindowRec, *CompClientWindowPtr;

typedef struct _CompWindow {
    RegionRec borderClip;
    DamagePtr damage;           /* for automatic update mode */
    Bool damageRegistered;
    Bool damaged;
    int update;
    CompClientWindowPtr clients;
    int oldx;
    int oldy;
    PixmapPtr pOldPixmap;
    int borderClipX, borderClipY;
} CompWindowRec, *CompWindowPtr;

#define COMP_ORIGIN_INVALID	    0x80000000

typedef struct _CompSubwindows {
    int update;
    CompClientWindowPtr clients;
} CompSubwindowsRec, *CompSubwindowsPtr;

#ifndef COMP_INCLUDE_RGB24_VISUAL
#define COMP_INCLUDE_RGB24_VISUAL 0
#endif

typedef struct _CompOverlayClientRec *CompOverlayClientPtr;

typedef struct _CompOverlayClientRec {
    CompOverlayClientPtr pNext;
    ClientPtr pClient;
    ScreenPtr pScreen;
    XID resource;
} CompOverlayClientRec;

typedef struct _CompImplicitRedirectException {
    XID parentVisual;
    XID winVisual;
} CompImplicitRedirectException;

typedef struct _CompScreen {
    PositionWindowProcPtr PositionWindow;
    CopyWindowProcPtr CopyWindow;
    CreateWindowProcPtr CreateWindow;
    DestroyWindowProcPtr DestroyWindow;
    RealizeWindowProcPtr RealizeWindow;
    UnrealizeWindowProcPtr UnrealizeWindow;
    ClipNotifyProcPtr ClipNotify;
    /*
     * Called from ConfigureWindow, these
     * three track changes to the offscreen storage
     * geometry
     */
    ConfigNotifyProcPtr ConfigNotify;
    MoveWindowProcPtr MoveWindow;
    ResizeWindowProcPtr ResizeWindow;
    ChangeBorderWidthProcPtr ChangeBorderWidth;
    /*
     * Reparenting has an effect on Subwindows redirect
     */
    ReparentWindowProcPtr ReparentWindow;

    /*
     * Colormaps for new visuals better not get installed
     */
    InstallColormapProcPtr InstallColormap;

    /*
     * Fake backing store via automatic redirection
     */
    ChangeWindowAttributesProcPtr ChangeWindowAttributes;

    ScreenBlockHandlerProcPtr BlockHandler;
    CloseScreenProcPtr CloseScreen;
    int numAlternateVisuals;
    VisualID *alternateVisuals;
    int numImplicitRedirectExceptions;
    CompImplicitRedirectException *implicitRedirectExceptions;

    WindowPtr pOverlayWin;
    Window overlayWid;
    CompOverlayClientPtr pOverlayClients;

    GetImageProcPtr GetImage;
    GetSpansProcPtr GetSpans;
    SourceValidateProcPtr SourceValidate;
} CompScreenRec, *CompScreenPtr;

extern DevPrivateKeyRec CompScreenPrivateKeyRec;

#define CompScreenPrivateKey (&CompScreenPrivateKeyRec)

extern DevPrivateKeyRec CompWindowPrivateKeyRec;

#define CompWindowPrivateKey (&CompWindowPrivateKeyRec)

extern DevPrivateKeyRec CompSubwindowsPrivateKeyRec;

#define CompSubwindowsPrivateKey (&CompSubwindowsPrivateKeyRec)

#define GetCompScreen(s) ((CompScreenPtr) \
    dixLookupPrivate(&(s)->devPrivates, CompScreenPrivateKey))
#define GetCompWindow(w) ((CompWindowPtr) \
    dixLookupPrivate(&(w)->devPrivates, CompWindowPrivateKey))
#define GetCompSubwindows(w) ((CompSubwindowsPtr) \
    dixLookupPrivate(&(w)->devPrivates, CompSubwindowsPrivateKey))

extern RESTYPE CompositeClientSubwindowsType;
extern RESTYPE CompositeClientOverlayType;

/*
 * compalloc.c
 */

Bool
 compRedirectWindow(ClientPtr pClient, WindowPtr pWin, int update);

void
 compFreeClientWindow(WindowPtr pWin, XID id);

int
 compUnredirectWindow(ClientPtr pClient, WindowPtr pWin, int update);

int
 compRedirectSubwindows(ClientPtr pClient, WindowPtr pWin, int update);

void
 compFreeClientSubwindows(WindowPtr pWin, XID id);

int
 compUnredirectSubwindows(ClientPtr pClient, WindowPtr pWin, int update);

int
 compRedirectOneSubwindow(WindowPtr pParent, WindowPtr pWin);

int
 compUnredirectOneSubwindow(WindowPtr pParent, WindowPtr pWin);

Bool
 compAllocPixmap(WindowPtr pWin);

void
 compSetParentPixmap(WindowPtr pWin);

void
 compRestoreWindow(WindowPtr pWin, PixmapPtr pPixmap);

Bool

compReallocPixmap(WindowPtr pWin, int x, int y,
                  unsigned int w, unsigned int h, int bw);

/*
 * compinit.c
 */

Bool
 compScreenInit(ScreenPtr pScreen);

/*
 * compoverlay.c
 */

void
 compFreeOverlayClient(CompOverlayClientPtr pOcToDel);

CompOverlayClientPtr
compFindOverlayClient(ScreenPtr pScreen, ClientPtr pClient);

CompOverlayClientPtr
compCreateOverlayClient(ScreenPtr pScreen, ClientPtr pClient);

Bool
 compCreateOverlayWindow(ScreenPtr pScreen);

void
 compDestroyOverlayWindow(ScreenPtr pScreen);

/*
 * compwindow.c
 */

#ifdef COMPOSITE_DEBUG
void
 compCheckTree(ScreenPtr pScreen);
#else
#define compCheckTree(s)
#endif

void
 compSetPixmap(WindowPtr pWin, PixmapPtr pPixmap);

Bool
 compCheckRedirect(WindowPtr pWin);

Bool
 compPositionWindow(WindowPtr pWin, int x, int y);

Bool
 compRealizeWindow(WindowPtr pWin);

Bool
 compUnrealizeWindow(WindowPtr pWin);

void
 compClipNotify(WindowPtr pWin, int dx, int dy);

void
 compMoveWindow(WindowPtr pWin, int x, int y, WindowPtr pSib, VTKind kind);

void

compResizeWindow(WindowPtr pWin, int x, int y,
                 unsigned int w, unsigned int h, WindowPtr pSib);

void
 compChangeBorderWidth(WindowPtr pWin, unsigned int border_width);

void
 compReparentWindow(WindowPtr pWin, WindowPtr pPriorParent);

Bool
 compCreateWindow(WindowPtr pWin);

Bool
 compDestroyWindow(WindowPtr pWin);

void
 compSetRedirectBorderClip(WindowPtr pWin, RegionPtr pRegion);

RegionPtr
 compGetRedirectBorderClip(WindowPtr pWin);

void
 compCopyWindow(WindowPtr pWin, DDXPointRec ptOldOrg, RegionPtr prgnSrc);

void
 compPaintChildrenToWindow(WindowPtr pWin);

WindowPtr
 CompositeRealChildHead(WindowPtr pWin);

int
 DeleteWindowNoInputDevices(void *value, XID wid);

int

compConfigNotify(WindowPtr pWin, int x, int y, int w, int h,
                 int bw, WindowPtr pSib);

void PanoramiXCompositeInit(void);
void PanoramiXCompositeReset(void);

#endif                          /* _COMPINT_H_ */
@


1.9
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d79 1
a79 1
 
d171 1
@


1.8
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d122 5
d163 2
d329 1
a329 1
 DeleteWindowNoInputDevices(pointer value, XID wid);
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d74 1
a185 1
extern RESTYPE CompositeClientWindowType;
a231 7
 * compext.c
 */

void
 CompositeExtensionInit(void);

/*
a266 2

PictFormatPtr compWindowFormat(WindowPtr pWin);
@


1.6
log
@Update to xserver 1.11.2
@
text
@d83 4
a86 4
    struct _CompClientWindow	*next;
    XID				id;
    int				update;
}  CompClientWindowRec, *CompClientWindowPtr;
d89 10
a98 10
    RegionRec		    borderClip;
    DamagePtr		    damage;	/* for automatic update mode */
    Bool		    damageRegistered;
    Bool		    damaged;
    int			    update;
    CompClientWindowPtr	    clients;
    int			    oldx;
    int			    oldy;
    PixmapPtr		    pOldPixmap;
    int			    borderClipX, borderClipY;
d104 2
a105 2
    int			    update;
    CompClientWindowPtr	    clients;
d115 4
a118 4
    CompOverlayClientPtr pNext;  
    ClientPtr            pClient;
    ScreenPtr            pScreen;
    XID			 resource;
d122 7
a128 7
    PositionWindowProcPtr	PositionWindow;
    CopyWindowProcPtr		CopyWindow;
    CreateWindowProcPtr		CreateWindow;
    DestroyWindowProcPtr	DestroyWindow;
    RealizeWindowProcPtr	RealizeWindow;
    UnrealizeWindowProcPtr	UnrealizeWindow;
    ClipNotifyProcPtr		ClipNotify;
d134 4
a137 4
    ConfigNotifyProcPtr         ConfigNotify;
    MoveWindowProcPtr		MoveWindow;
    ResizeWindowProcPtr		ResizeWindow;
    ChangeBorderWidthProcPtr	ChangeBorderWidth;
d141 2
a142 2
    ReparentWindowProcPtr	ReparentWindow;
    
d146 1
a146 1
    InstallColormapProcPtr	InstallColormap;
d153 11
a163 11
    ScreenBlockHandlerProcPtr	BlockHandler;
    CloseScreenProcPtr		CloseScreen;
    int				numAlternateVisuals;
    VisualID			*alternateVisuals;

    WindowPtr                   pOverlayWin;
    Window			overlayWid;
    CompOverlayClientPtr        pOverlayClients;
    
    GetImageProcPtr		GetImage;
    SourceValidateProcPtr	SourceValidate;
d167 1
d171 1
d175 1
d185 3
a187 3
extern RESTYPE		CompositeClientWindowType;
extern RESTYPE		CompositeClientSubwindowsType;
extern RESTYPE		CompositeClientOverlayType;
d194 1
a194 1
compRedirectWindow (ClientPtr pClient, WindowPtr pWin, int update);
d197 1
a197 1
compFreeClientWindow (WindowPtr pWin, XID id);
d200 1
a200 1
compUnredirectWindow (ClientPtr pClient, WindowPtr pWin, int update);
d203 1
a203 1
compRedirectSubwindows (ClientPtr pClient, WindowPtr pWin, int update);
d206 1
a206 1
compFreeClientSubwindows (WindowPtr pWin, XID id);
d209 1
a209 1
compUnredirectSubwindows (ClientPtr pClient, WindowPtr pWin, int update);
d212 1
a212 1
compRedirectOneSubwindow (WindowPtr pParent, WindowPtr pWin);
d215 1
a215 1
compUnredirectOneSubwindow (WindowPtr pParent, WindowPtr pWin);
d218 1
a218 1
compAllocPixmap (WindowPtr pWin);
d221 1
a221 1
compSetParentPixmap (WindowPtr pWin);
d224 1
a224 1
compRestoreWindow (WindowPtr pWin, PixmapPtr pPixmap);
d227 3
a229 2
compReallocPixmap (WindowPtr pWin, int x, int y,
		   unsigned int w, unsigned int h, int bw);
d236 1
a236 1
CompositeExtensionInit (void);
d243 1
a243 1
compScreenInit (ScreenPtr pScreen);
d250 1
a250 1
compFreeOverlayClient (CompOverlayClientPtr pOcToDel);
d253 2
a254 2
compFindOverlayClient (ScreenPtr pScreen, ClientPtr pClient);
    
d256 1
a256 1
compCreateOverlayClient (ScreenPtr pScreen, ClientPtr pClient);
d259 1
a259 1
compCreateOverlayWindow (ScreenPtr pScreen);
d262 1
a262 1
compDestroyOverlayWindow (ScreenPtr pScreen);
d270 1
a270 1
compCheckTree (ScreenPtr pScreen);
d275 1
a275 2
PictFormatPtr
compWindowFormat (WindowPtr pWin);
d278 1
a278 1
compSetPixmap (WindowPtr pWin, PixmapPtr pPixmap);
d281 1
a281 1
compCheckRedirect (WindowPtr pWin);
d284 1
a284 1
compPositionWindow (WindowPtr pWin, int x, int y);
d287 1
a287 1
compRealizeWindow (WindowPtr pWin);
d290 1
a290 1
compUnrealizeWindow (WindowPtr pWin);
d293 1
a293 1
compClipNotify (WindowPtr pWin, int dx, int dy);
d296 1
a296 1
compMoveWindow (WindowPtr pWin, int x, int y, WindowPtr pSib, VTKind kind);
d299 3
a301 2
compResizeWindow (WindowPtr pWin, int x, int y,
		  unsigned int w, unsigned int h, WindowPtr pSib);
d304 1
a304 1
compChangeBorderWidth (WindowPtr pWin, unsigned int border_width);
d307 1
a307 1
compReparentWindow (WindowPtr pWin, WindowPtr pPriorParent);
d310 1
a310 1
compCreateWindow (WindowPtr pWin);
d313 1
a313 1
compDestroyWindow (WindowPtr pWin);
d316 1
a316 1
compSetRedirectBorderClip (WindowPtr pWin, RegionPtr pRegion);
d319 1
a319 1
compGetRedirectBorderClip (WindowPtr pWin);
d322 1
a322 1
compCopyWindow (WindowPtr pWin, DDXPointRec ptOldOrg, RegionPtr prgnSrc);
d325 1
a325 1
compPaintChildrenToWindow (WindowPtr pWin);
d328 1
a328 1
CompositeRealChildHead (WindowPtr pWin);
d331 1
a331 1
DeleteWindowNoInputDevices(pointer value, XID wid);
d334 1
d336 1
a336 1
		 int bw, WindowPtr pSib);
d338 2
a339 2
void PanoramiXCompositeInit (void);
void PanoramiXCompositeReset (void);
d341 1
a341 1
#endif /* _COMPINT_H_ */
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d2 1
a2 1
 * Copyright Â© 2006 Sun Microsystems, Inc.  All rights reserved.
a154 1
    Bool			damaged;
d162 2
d218 4
a221 1
compFreePixmap (WindowPtr pWin);
d321 1
a321 1
compWindowUpdate (WindowPtr pWin);
d332 3
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d134 1
d165 8
a172 3
extern DevPrivateKey CompScreenPrivateKey;
extern DevPrivateKey CompWindowPrivateKey;
extern DevPrivateKey CompSubwindowsPrivateKey;
d324 4
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d2 1
a2 1
 * Copyright Â© 2006 Sun Microsystems
d4 10
a13 9
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Sun Microsystems not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Sun Microsystems makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
d15 7
a21 7
 * SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
a226 4

Bool
CompositeRegisterAlternateVisuals (ScreenPtr pScreen,
				   VisualID *vids, int nVisuals);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d158 1
d176 1
d235 19
a314 3

void
deleteCompOverlayClientsForScreen (ScreenPtr pScreen);
@


1.1
log
@Initial revision
@
text
@a1 2
 * $Id$
 *
d67 1
a126 1
    PaintWindowProcPtr		PaintWindowBackground;
d146 5
d162 10
a171 7
extern int  CompScreenPrivateIndex;
extern int  CompWindowPrivateIndex;
extern int  CompSubwindowsPrivateIndex;

#define GetCompScreen(s) ((CompScreenPtr) ((s)->devPrivates[CompScreenPrivateIndex].ptr))
#define GetCompWindow(w) ((CompWindowPtr) ((w)->devPrivates[CompWindowPrivateIndex].ptr))
#define GetCompSubwindows(w) ((CompSubwindowsPtr) ((w)->devPrivates[CompSubwindowsPrivateIndex].ptr))
a179 3
void
compReportDamage (DamagePtr pDamage, RegionPtr pRegion, void *closure);

d243 3
a261 3
compPaintWindowBackground (WindowPtr pWin, RegionPtr pRegion, int what);

void
a296 12

int
ProcCompositeGetOverlayWindow (ClientPtr client);

int
ProcCompositeReleaseOverlayWindow (ClientPtr client);

int
SProcCompositeGetOverlayWindow (ClientPtr client);

int
SProcCompositeReleaseOverlayWindow (ClientPtr client);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
d174 3
a239 3
PictFormatPtr
compWindowFormat (WindowPtr pWin);

d294 12
@

