head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.10
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.8
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.6
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.05.29.12.02.35;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	s0SI41sEunLdyFfd;

1.8
date	2015.09.16.19.10.20;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	Te1daavkBLskZ8gc;

1.7
date	2014.09.27.17.53.00;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	cVXoV5PxI8YrEaVA;

1.6
date	2013.06.07.17.28.46;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.20;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.06.29.19.55.01;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.03;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.25;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.18.06.36;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.18.06.36;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * Copyright Â© 2006-2007 Daniel Stone
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Author: Daniel Stone <daniel@@fooishbar.org>
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <unistd.h>
#include "os.h"
#include "inputstr.h"
#include "hotplug.h"
#include "config-backends.h"
#include "systemd-logind.h"

void
config_pre_init(void)
{
#ifdef CONFIG_UDEV
    if (!config_udev_pre_init())
        ErrorF("[config] failed to pre-init udev\n");
#endif
}

void
config_init(void)
{
#ifdef CONFIG_UDEV
    if (!config_udev_init())
        ErrorF("[config] failed to initialise udev\n");
#elif defined(CONFIG_HAL)
    if (!config_hal_init())
        ErrorF("[config] failed to initialise HAL\n");
#elif defined(CONFIG_WSCONS)
    if (!config_wscons_init())
        ErrorF("[config] failed to initialise wscons\n");
#endif
}

void
config_fini(void)
{
#if defined(CONFIG_UDEV)
    config_udev_fini();
#elif defined(CONFIG_HAL)
    config_hal_fini();
#elif defined(CONFIG_WSCONS)
    config_wscons_fini();
#endif
}

void
config_odev_probe(config_odev_probe_proc_ptr probe_callback)
{
#if defined(CONFIG_UDEV_KMS)
    config_udev_odev_probe(probe_callback);
#endif
}

static void
remove_device(const char *backend, DeviceIntPtr dev)
{
    /* this only gets called for devices that have already been added */
    LogMessage(X_INFO, "config/%s: removing device %s\n", backend, dev->name);

    /* Call PIE here so we don't try to dereference a device that's
     * already been removed. */
    OsBlockSignals();
    ProcessInputEvents();
    DeleteInputDeviceRequest(dev);
    OsReleaseSignals();
}

void
remove_devices(const char *backend, const char *config_info)
{
    DeviceIntPtr dev, next;

    for (dev = inputInfo.devices; dev; dev = next) {
        next = dev->next;
        if (dev->config_info && strcmp(dev->config_info, config_info) == 0)
            remove_device(backend, dev);
    }
    for (dev = inputInfo.off_devices; dev; dev = next) {
        next = dev->next;
        if (dev->config_info && strcmp(dev->config_info, config_info) == 0)
            remove_device(backend, dev);
    }
}

BOOL
device_is_duplicate(const char *config_info)
{
    DeviceIntPtr dev;

    for (dev = inputInfo.devices; dev; dev = dev->next) {
        if (dev->config_info && (strcmp(dev->config_info, config_info) == 0))
            return TRUE;
    }

    for (dev = inputInfo.off_devices; dev; dev = dev->next) {
        if (dev->config_info && (strcmp(dev->config_info, config_info) == 0))
            return TRUE;
    }

    return FALSE;
}

struct OdevAttributes *
config_odev_allocate_attributes(void)
{
    struct OdevAttributes *attribs =
        xnfcalloc(1, sizeof (struct OdevAttributes));
    attribs->fd = -1;
    return attribs;
}

void
config_odev_free_attributes(struct OdevAttributes *attribs)
{
    if (attribs->fd != -1)
        systemd_logind_release_fd(attribs->major, attribs->minor, attribs->fd);
    free(attribs->path);
    free(attribs->syspath);
    free(attribs->busid);
    free(attribs->driver);
    free(attribs);
}
@


1.8
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d133 2
a134 1
    struct OdevAttributes *attribs = XNFcalloc(sizeof (struct OdevAttributes));
@


1.7
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d131 1
a131 1
config_odev_allocate_attribute_list(void)
d133 3
a135 5
    struct OdevAttributes *attriblist;

    attriblist = XNFalloc(sizeof(struct OdevAttributes));
    xorg_list_init(&attriblist->list);
    return attriblist;
d139 1
a139 1
config_odev_free_attribute_list(struct OdevAttributes *attribs)
d141 6
a146 1
    config_odev_free_attributes(attribs);
a147 142
}

static struct OdevAttribute *
config_odev_find_attribute(struct OdevAttributes *attribs, int attrib_id)
{
    struct OdevAttribute *oa;

    xorg_list_for_each_entry(oa, &attribs->list, member) {
        if (oa->attrib_id == attrib_id)
          return oa;
    }
    return NULL;
}

static struct OdevAttribute *
config_odev_find_or_add_attribute(struct OdevAttributes *attribs, int attrib)
{
    struct OdevAttribute *oa;

    oa = config_odev_find_attribute(attribs, attrib);
    if (oa)
        return oa;

    oa = XNFcalloc(sizeof(struct OdevAttribute));
    oa->attrib_id = attrib;
    xorg_list_append(&oa->member, &attribs->list);

    return oa;
}

static int config_odev_get_attribute_type(int attrib)
{
    switch (attrib) {
    case ODEV_ATTRIB_PATH:
    case ODEV_ATTRIB_SYSPATH:
    case ODEV_ATTRIB_BUSID:
        return ODEV_ATTRIB_STRING;
    case ODEV_ATTRIB_FD:
    case ODEV_ATTRIB_MAJOR:
    case ODEV_ATTRIB_MINOR:
        return ODEV_ATTRIB_INT;
    case ODEV_ATTRIB_DRIVER:
        return ODEV_ATTRIB_STRING;
    default:
        LogMessage(X_ERROR, "Error %s called for unknown attribute %d\n",
                   __func__, attrib);
        return ODEV_ATTRIB_UNKNOWN;
    }
}

Bool
config_odev_add_attribute(struct OdevAttributes *attribs, int attrib,
                          const char *attrib_name)
{
    struct OdevAttribute *oa;

    if (config_odev_get_attribute_type(attrib) != ODEV_ATTRIB_STRING) {
        LogMessage(X_ERROR, "Error %s called for non string attrib %d\n",
                   __func__, attrib);
        return FALSE;
    }

    oa = config_odev_find_or_add_attribute(attribs, attrib);
    free(oa->attrib_name);
    oa->attrib_name = XNFstrdup(attrib_name);
    oa->attrib_type = ODEV_ATTRIB_STRING;
    return TRUE;
}

Bool
config_odev_add_int_attribute(struct OdevAttributes *attribs, int attrib,
                              int attrib_value)
{
    struct OdevAttribute *oa;

    if (config_odev_get_attribute_type(attrib) != ODEV_ATTRIB_INT) {
        LogMessage(X_ERROR, "Error %s called for non integer attrib %d\n",
                   __func__, attrib);
        return FALSE;
    }

    oa = config_odev_find_or_add_attribute(attribs, attrib);
    oa->attrib_value = attrib_value;
    oa->attrib_type = ODEV_ATTRIB_INT;
    return TRUE;
}

char *
config_odev_get_attribute(struct OdevAttributes *attribs, int attrib_id)
{
    struct OdevAttribute *oa;

    oa = config_odev_find_attribute(attribs, attrib_id);
    if (!oa)
        return NULL;

    if (oa->attrib_type != ODEV_ATTRIB_STRING) {
        LogMessage(X_ERROR, "Error %s called for non string attrib %d\n",
                   __func__, attrib_id);
        return NULL;
    }
    return oa->attrib_name;
}

int
config_odev_get_int_attribute(struct OdevAttributes *attribs, int attrib_id, int def)
{
    struct OdevAttribute *oa;

    oa = config_odev_find_attribute(attribs, attrib_id);
    if (!oa)
        return def;

    if (oa->attrib_type != ODEV_ATTRIB_INT) {
        LogMessage(X_ERROR, "Error %s called for non integer attrib %d\n",
                   __func__, attrib_id);
        return def;
    }

    return oa->attrib_value;
}

void
config_odev_free_attributes(struct OdevAttributes *attribs)
{
    struct OdevAttribute *iter, *safe;
    int major = 0, minor = 0, fd = -1;

    xorg_list_for_each_entry_safe(iter, safe, &attribs->list, member) {
        switch (iter->attrib_id) {
        case ODEV_ATTRIB_MAJOR: major = iter->attrib_value; break;
        case ODEV_ATTRIB_MINOR: minor = iter->attrib_value; break;
        case ODEV_ATTRIB_FD: fd = iter->attrib_value; break;
        }
        xorg_list_del(&iter->member);
        if (iter->attrib_type == ODEV_ATTRIB_STRING)
            free(iter->attrib_name);
        free(iter);
    }

    if (fd != -1)
        systemd_logind_release_fd(major, minor, fd);
@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d30 1
d35 1
d52 3
a54 14
#elif defined(CONFIG_NEED_DBUS)
    if (config_dbus_core_init()) {
#ifdef CONFIG_DBUS_API
        if (!config_dbus_init())
            ErrorF("[config] failed to initialise D-Bus API\n");
#endif
#ifdef CONFIG_HAL
        if (!config_hal_init())
            ErrorF("[config] failed to initialise HAL\n");
#endif
    }
    else {
        ErrorF("[config] failed to initialise D-Bus core\n");
    }
d66 1
a66 2
#elif defined(CONFIG_NEED_DBUS)
#ifdef CONFIG_HAL
a67 5
#endif
#ifdef CONFIG_DBUS_API
    config_dbus_fini();
#endif
    config_dbus_core_fini();
d135 1
a135 4
    attriblist = malloc(sizeof(struct OdevAttributes));
    if (!attriblist)
        return NULL;

d147 48
d201 22
a222 2
    oa = malloc(sizeof(struct OdevAttribute));
    if (!oa)
d224 1
d226 3
a228 3
    oa->attrib_id = attrib;
    oa->attrib_name = strdup(attrib_name);
    xorg_list_append(&oa->member, &attribs->list);
d232 35
d271 1
d274 5
d280 2
a281 1
        free(iter->attrib_name);
d284 3
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d36 9
d88 8
d143 48
@


1.4
log
@Introduce new autoconfiguration code for X input drivers, based on X
hotplug framework.This also takes care of the configuration of the
keyboard layout from the wscons layout that was hacked inside the
keyboard driver.

Tested by many, ok oga@@.
@
text
@d43 5
a47 5
# ifdef CONFIG_DBUS_API
       if (!config_dbus_init())
	    ErrorF("[config] failed to initialise D-Bus API\n");
# endif
# ifdef CONFIG_HAL
d50 1
a50 1
# endif
d53 1
a53 1
	ErrorF("[config] failed to initialise D-Bus core\n");
d57 1
a57 1
	ErrorF("[config] failed to initialise wscons\n");
d67 1
a67 1
# ifdef CONFIG_HAL
d69 2
a70 2
# endif
# ifdef CONFIG_DBUS_API
d72 1
a72 1
# endif
d115 1
a115 2
    for (dev = inputInfo.devices; dev; dev = dev->next)
    {
d120 1
a120 2
    for (dev = inputInfo.off_devices; dev; dev = dev->next)
    {
a125 16
}

void
add_option(InputOption **options, const char *key, const char *value)
{
    if (!value || *value == '\0')
        return;

    for (; *options; options = &(*options)->next)
        ;
    *options = calloc(sizeof(**options), 1);
    if (!*options) /* Yeesh. */
        return;
    (*options)->key = strdup(key);
    (*options)->value = strdup(value);
    (*options)->next = NULL;
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d55 3
d74 2
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d133 1
a133 1
    *options = xcalloc(sizeof(**options), 1);
d136 2
a137 2
    (*options)->key = xstrdup(key);
    (*options)->value = xstrdup(value);
@


1.1
log
@Initial revision
@
text
@d31 1
d36 1
a36 1
config_init()
d38 4
a41 1
#if defined(CONFIG_DBUS_API) || defined(CONFIG_HAL)
d59 1
a59 1
config_fini()
d61 3
a63 1
#if defined(CONFIG_DBUS_API) || defined(CONFIG_HAL)
d72 67
@


1.1.1.1
log
@xserver 1.4
@
text
@@
