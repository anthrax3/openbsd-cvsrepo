head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.12
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.10
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.09.27.17.53.00;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	cVXoV5PxI8YrEaVA;

1.5
date	2012.06.10.13.21.20;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.25;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.15.26.12;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.15.00.17.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.18.06.36;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.18.06.36;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.12.13.21.06.24;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/*
 * Copyright Â© 2006-2007 Daniel Stone
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Author: Daniel Stone <daniel@@fooishbar.org>
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <dbus/dbus.h>
#include <sys/select.h>

#include "dix.h"
#include "os.h"
#include "dbus-core.h"

/* How often to attempt reconnecting when we get booted off the bus. */
#define RECONNECT_DELAY (10 * 1000)     /* in ms */

struct dbus_core_info {
    int fd;
    DBusConnection *connection;
    OsTimerPtr timer;
    struct dbus_core_hook *hooks;
};
static struct dbus_core_info bus_info;

static CARD32 reconnect_timer(OsTimerPtr timer, CARD32 time, void *arg);

static void
wakeup_handler(void *data, int num_fds, void *read_mask)
{
    struct dbus_core_info *info = data;

    if (info->connection && num_fds > 0 && FD_ISSET(info->fd, (fd_set *) read_mask)) {
        do {
            dbus_connection_read_write_dispatch(info->connection, 0);
        } while (info->connection &&
                 dbus_connection_get_is_connected(info->connection) &&
                 dbus_connection_get_dispatch_status(info->connection) ==
                 DBUS_DISPATCH_DATA_REMAINS);
    }
}

static void
block_handler(void *data, struct timeval **tv, void *read_mask)
{
}

/**
 * Disconnect (if we haven't already been forcefully disconnected), clean up
 * after ourselves, and call all registered disconnect hooks.
 */
static void
teardown(void)
{
    struct dbus_core_hook *hook;

    if (bus_info.timer) {
        TimerFree(bus_info.timer);
        bus_info.timer = NULL;
    }

    /* We should really have pre-disconnect hooks and run them here, for
     * completeness.  But then it gets awkward, given that you can't
     * guarantee that they'll be called ... */
    if (bus_info.connection)
        dbus_connection_unref(bus_info.connection);

    RemoveBlockAndWakeupHandlers(block_handler, wakeup_handler, &bus_info);
    if (bus_info.fd != -1)
        RemoveGeneralSocket(bus_info.fd);
    bus_info.fd = -1;
    bus_info.connection = NULL;

    for (hook = bus_info.hooks; hook; hook = hook->next) {
        if (hook->disconnect)
            hook->disconnect(hook->data);
    }
}

/**
 * This is a filter, which only handles the disconnected signal, which
 * doesn't go to the normal message handling function.  This takes
 * precedence over the message handling function, so have have to be
 * careful to ignore anything we don't want to deal with here.
 */
static DBusHandlerResult
message_filter(DBusConnection * connection, DBusMessage * message, void *data)
{
    /* If we get disconnected, then take everything down, and attempt to
     * reconnect immediately (assuming it's just a restart).  The
     * connection isn't valid at this point, so throw it out immediately. */
    if (dbus_message_is_signal(message, DBUS_INTERFACE_LOCAL, "Disconnected")) {
        DebugF("[dbus-core] disconnected from bus\n");
        bus_info.connection = NULL;
        teardown();

        if (bus_info.timer)
            TimerFree(bus_info.timer);
        bus_info.timer = TimerSet(NULL, 0, 1, reconnect_timer, NULL);

        return DBUS_HANDLER_RESULT_HANDLED;
    }

    return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
}

/**
 * Attempt to connect to the system bus, and set a filter to deal with
 * disconnection (see message_filter above).
 *
 * @@return 1 on success, 0 on failure.
 */
static int
connect_to_bus(void)
{
    DBusError error;
    struct dbus_core_hook *hook;

    dbus_error_init(&error);
    bus_info.connection = dbus_bus_get(DBUS_BUS_SYSTEM, &error);
    if (!bus_info.connection || dbus_error_is_set(&error)) {
        LogMessage(X_ERROR, "dbus-core: error connecting to system bus: %s (%s)\n",
               error.name, error.message);
        goto err_begin;
    }

    /* Thankyou.  Really, thankyou. */
    dbus_connection_set_exit_on_disconnect(bus_info.connection, FALSE);

    if (!dbus_connection_get_unix_fd(bus_info.connection, &bus_info.fd)) {
        ErrorF("[dbus-core] couldn't get fd for system bus\n");
        goto err_unref;
    }

    if (!dbus_connection_add_filter(bus_info.connection, message_filter,
                                    &bus_info, NULL)) {
        ErrorF("[dbus-core] couldn't add filter: %s (%s)\n", error.name,
               error.message);
        goto err_fd;
    }

    dbus_error_free(&error);
    AddGeneralSocket(bus_info.fd);

    RegisterBlockAndWakeupHandlers(block_handler, wakeup_handler, &bus_info);

    for (hook = bus_info.hooks; hook; hook = hook->next) {
        if (hook->connect)
            hook->connect(bus_info.connection, hook->data);
    }

    return 1;

 err_fd:
    bus_info.fd = -1;
 err_unref:
    dbus_connection_unref(bus_info.connection);
    bus_info.connection = NULL;
 err_begin:
    dbus_error_free(&error);

    return 0;
}

static CARD32
reconnect_timer(OsTimerPtr timer, CARD32 time, void *arg)
{
    if (connect_to_bus()) {
        TimerFree(bus_info.timer);
        bus_info.timer = NULL;
        return 0;
    }
    else {
        return RECONNECT_DELAY;
    }
}

int
dbus_core_add_hook(struct dbus_core_hook *hook)
{
    struct dbus_core_hook **prev;

    for (prev = &bus_info.hooks; *prev; prev = &(*prev)->next);

    hook->next = NULL;
    *prev = hook;

    /* If we're already connected, call the connect hook. */
    if (bus_info.connection)
        hook->connect(bus_info.connection, hook->data);

    return 1;
}

void
dbus_core_remove_hook(struct dbus_core_hook *hook)
{
    struct dbus_core_hook **prev;

    for (prev = &bus_info.hooks; *prev; prev = &(*prev)->next) {
        if (*prev == hook) {
            *prev = hook->next;
            break;
        }
    }
}

int
dbus_core_init(void)
{
    memset(&bus_info, 0, sizeof(bus_info));
    bus_info.fd = -1;
    bus_info.hooks = NULL;
    if (!connect_to_bus())
        bus_info.timer = TimerSet(NULL, 0, 1, reconnect_timer, NULL);

    return 1;
}

void
dbus_core_fini(void)
{
    teardown();
}
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a32 1
#include "config-backends.h"
d35 1
d44 1
a44 1
    struct config_dbus_core_hook *hooks;
d48 1
a48 1
static CARD32 reconnect_timer(OsTimerPtr timer, CARD32 time, pointer arg);
d51 1
a51 1
wakeup_handler(pointer data, int err, pointer read_mask)
d55 1
a55 1
    if (info->connection && FD_ISSET(info->fd, (fd_set *) read_mask)) {
d66 1
a66 1
block_handler(pointer data, struct timeval **tv, pointer read_mask)
d77 1
a77 1
    struct config_dbus_core_hook *hook;
d115 1
a115 1
        DebugF("[config/dbus-core] disconnected from bus\n");
d139 1
a139 1
    struct config_dbus_core_hook *hook;
d144 1
a144 1
        DebugF("[config/dbus-core] error connecting to system bus: %s (%s)\n",
d153 1
a153 1
        ErrorF("[config/dbus-core] couldn't get fd for system bus\n");
d159 1
a159 1
        ErrorF("[config/dbus-core] couldn't add filter: %s (%s)\n", error.name,
d188 1
a188 1
reconnect_timer(OsTimerPtr timer, CARD32 time, pointer arg)
d201 1
a201 1
config_dbus_core_add_hook(struct config_dbus_core_hook *hook)
d203 1
a203 1
    struct config_dbus_core_hook **prev;
d218 1
a218 1
config_dbus_core_remove_hook(struct config_dbus_core_hook *hook)
d220 1
a220 1
    struct config_dbus_core_hook **prev;
d231 1
a231 1
config_dbus_core_init(void)
d236 2
a237 2
    bus_info.connection = NULL;
    bus_info.timer = TimerSet(NULL, 0, 1, reconnect_timer, NULL);
d243 1
a243 1
config_dbus_core_fini(void)
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d38 1
a38 1
#define RECONNECT_DELAY (10 * 1000) /* in ms */
d60 2
a61 1
                 dbus_connection_get_dispatch_status(info->connection) == DBUS_DISPATCH_DATA_REMAINS);
d109 1
a109 1
message_filter(DBusConnection *connection, DBusMessage *message, void *data)
d114 1
a114 2
    if (dbus_message_is_signal(message, DBUS_INTERFACE_LOCAL,
                                    "Disconnected")) {
d176 1
a176 1
err_fd:
d178 1
a178 1
err_unref:
d181 1
a181 1
err_begin:
d205 1
a205 2
    for (prev = &bus_info.hooks; *prev; prev = &(*prev)->next)
        ;
@


1.3
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a29 1
#define DBUS_API_SUBJECT_TO_CHANGE
@


1.2
log
@Update to xserver 1.4.2. Tested by landry@@, ckuethe@@, jsing@@ mbalmer@@.
@
text
@d59 3
a61 2
        } while (dbus_connection_get_dispatch_status(info->connection) ==
                  DBUS_DISPATCH_DATA_REMAINS);
@


1.1
log
@Initial revision
@
text
@d79 1
a79 1
        TimerCancel(bus_info.timer);
d90 2
a91 1
    RemoveGeneralSocket(bus_info.fd);
d119 2
d191 1
@


1.1.1.1
log
@xserver 1.4
@
text
@@


1.1.1.2
log
@xserver 1.4.0.90
@
text
@d90 1
a90 2
    if (bus_info.fd != -1)
        RemoveGeneralSocket(bus_info.fd);
@

