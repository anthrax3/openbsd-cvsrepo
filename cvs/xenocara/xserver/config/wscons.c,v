head	1.19;
access;
symbols
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.19
date	2016.09.12.21.57.14;	author matthieu;	state Exp;
branches;
next	1.18;
commitid	7YJ5ynpnsBdPLd0d;

1.18
date	2016.09.12.21.46.25;	author matthieu;	state Exp;
branches;
next	1.17;
commitid	KtVwxCatDP3VqhnM;

1.17
date	2016.09.12.21.44.30;	author matthieu;	state Exp;
branches;
next	1.16;
commitid	aszEA19iQEh3tGHM;

1.16
date	2016.09.03.14.58.02;	author guenther;	state Exp;
branches;
next	1.15;
commitid	2F0Zy2XvrjA0XioJ;

1.15
date	2015.12.29.18.47.21;	author bentley;	state Exp;
branches;
next	1.14;
commitid	JWRRkDlIwD5nx6Ia;

1.14
date	2015.01.15.01.30.40;	author jsg;	state Exp;
branches;
next	1.13;
commitid	aFpMEyoHxbOYZCzp;

1.13
date	2014.09.27.17.53.00;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	cVXoV5PxI8YrEaVA;

1.12
date	2013.06.07.17.28.47;	author matthieu;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.29.13.34.28;	author stsp;	state Exp;
branches;
next	1.10;

1.10
date	2012.06.10.13.21.20;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2012.02.11.18.30.29;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.01.08.17.15.52;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.12.29.10.47.37;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.12.18.16.08.59;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.21.17.42.03;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2011.09.17.13.39.31;	author shadchin;	state Exp;
branches;
next	1.3;

1.3
date	2011.08.21.09.18.40;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.04.20.27.57;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2011.06.29.19.55.01;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Fix a bunch of gcc warnings.
- constify name field
- rename devname -> devnam
- replace deprecated Xprintf() with asprintf()
@
text
@/*
 * Copyright (c) 2011 Matthieu Herrb
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <sys/ioctl.h>
#include <sys/time.h>
#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wsksymdef.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>

#include "input.h"
#include "inputstr.h"
#include "os.h"
#include "config-backends.h"

#define WSCONS_KBD_DEVICE "/dev/wskbd"
#define WSCONS_MOUSE_PREFIX "/dev/wsmouse"

#define KB_OVRENC \
        { KB_UK,        "gb" }, \
        { KB_SV,        "se" }, \
        { KB_SG,        "ch" }, \
        { KB_SF,        "ch" }, \
        { KB_LA,        "latam" }, \
        { KB_CF,        "ca" }

struct nameint {
    int val;
    const char *name;
} kbdenc[] = {
    KB_OVRENC,
    KB_ENCTAB,
    {0}
};

struct nameint kbdvar[] = {
    {KB_NODEAD | KB_SG, "de_nodeadkeys"},
    {KB_NODEAD | KB_SF, "fr_nodeadkeys"},
    {KB_SF, "fr"},
    {KB_DVORAK | KB_CF, "fr-dvorak"},
    {KB_DVORAK | KB_FR, "bepo"},
    {KB_DVORAK, "dvorak"},
    {KB_CF, "fr-legacy"},
    {KB_NODEAD, "nodeadkeys"},
    {0}
};

struct nameint kbdopt[] = {
    {KB_SWAPCTRLCAPS, "ctrl:swapcaps"},
    {0}
};

struct nameint kbdmodel[] = {
    {WSKBD_TYPE_ADB, "macintosh" },
    {0}
};

static void
wscons_add_keyboard(void)
{
    InputAttributes attrs = { };
    DeviceIntPtr dev = NULL;
    InputOption *input_options = NULL;
    char *config_info = NULL;
    int fd, i, rc;
    unsigned int type;
    kbd_t wsenc = 0;

    /* Find keyboard configuration */
    fd = priv_open_device(WSCONS_KBD_DEVICE);
    if (fd == -1) {
        LogMessage(X_ERROR, "wskbd: open %s: %s\n",
                   WSCONS_KBD_DEVICE, strerror(errno));
        return;
    }
    if (ioctl(fd, WSKBDIO_GETENCODING, &wsenc) == -1) {
        LogMessage(X_WARNING, "wskbd: ioctl(WSKBDIO_GETENCODING) "
                   "failed: %s\n", strerror(errno));
        close(fd);
        return;
    }
    if (ioctl(fd, WSKBDIO_GTYPE, &type) == -1) {
        LogMessage(X_WARNING, "wskbd: ioctl(WSKBDIO_GTYPE) "
                   "failed: %s\n", strerror(errno));
        close(fd);
        return;
    }
    close(fd);

    input_options = input_option_new(input_options, "_source", "server/wscons");
    if (input_options == NULL)
        return;

    LogMessage(X_INFO, "config/wscons: checking input device %s\n",
               WSCONS_KBD_DEVICE);
    input_options = input_option_new(input_options, "name", WSCONS_KBD_DEVICE);
    input_options = input_option_new(input_options, "driver", "kbd");

    if (asprintf(&config_info, "wscons:%s", WSCONS_KBD_DEVICE) < 0)
        goto unwind;
    if (!config_info)
        goto unwind;
    if (KB_ENCODING(wsenc) == KB_USER) {
        /* Ignore wscons "user" layout */
        LogMessageVerb(X_INFO, 3, "wskbd: ignoring \"user\" layout\n");
        goto kbd_config_done;
    }
    for (i = 0; kbdenc[i].val; i++)
        if (KB_ENCODING(wsenc) == kbdenc[i].val) {
            LogMessageVerb(X_INFO, 3, "wskbd: using layout %s\n",
                           kbdenc[i].name);
            input_options = input_option_new(input_options,
                                             "xkb_layout", kbdenc[i].name);
            break;
        }
    for (i = 0; kbdvar[i].val; i++)
        if ((wsenc & kbdvar[i].val) == kbdvar[i].val) {
            LogMessageVerb(X_INFO, 3, "wskbd: using variant %s\n",
                           kbdvar[i].name);
            input_options = input_option_new(input_options,
                                             "xkb_variant", kbdvar[i].name);
            break;
        }
    for (i = 0; kbdopt[i].val; i++)
        if (KB_VARIANT(wsenc) & kbdopt[i].val) {
            LogMessageVerb(X_INFO, 3, "wskbd: using option %s\n",
                           kbdopt[i].name);
            input_options = input_option_new(input_options,
                                             "xkb_options", kbdopt[i].name);
            break;
        }
    for (i = 0; kbdmodel[i].val; i++)
        if (type == kbdmodel[i].val) {
            LogMessageVerb(X_INFO, 3, "wskbd: using model %s\n",
                           kbdmodel[i].name);
            input_options = input_option_new(input_options,
                                             "xkb_model", kbdmodel[i].name);
            break;
        }

 kbd_config_done:
    attrs.flags |= ATTR_KEYBOARD;
    rc = NewInputDeviceRequest(input_options, &attrs, &dev);
    if (rc != Success)
        goto unwind;

    for (; dev; dev = dev->next) {
        free(dev->config_info);
        dev->config_info = strdup(config_info);
    }
 unwind:
    input_option_free_list(&input_options);
}

static void
wscons_add_pointer(const char *path, const char *driver, int flags)
{
    InputAttributes attrs = { };
    DeviceIntPtr dev = NULL;
    InputOption *input_options = NULL;
    char *config_info = NULL;
    int rc;

    if (asprintf(&config_info, "wscons:%s", path) < 0)
        return;
    if (!config_info)
        return;

    input_options = input_option_new(input_options, "_source", "server/wscons");
    if (input_options == NULL)
        return;

    input_options = input_option_new(input_options, "name", strdup(path));
    input_options = input_option_new(input_options, "driver", strdup(driver));
    input_options = input_option_new(input_options, "device", strdup(path));
    LogMessage(X_INFO, "config/wscons: checking input device %s\n", path);
    attrs.flags |= flags;
    rc = NewInputDeviceRequest(input_options, &attrs, &dev);
    if (rc != Success)
        goto unwind;

    for (; dev; dev = dev->next) {
        free(dev->config_info);
        dev->config_info = strdup(config_info);
    }
 unwind:
    input_option_free_list(&input_options);
}

static void
wscons_add_pointers(void)
{
    char devnam[256];
    int fd, i, wsmouse_type;

    /* Check pointing devices */
    for (i = 0; i < 4; i++) {
        snprintf(devnam, sizeof(devnam), "%s%d", WSCONS_MOUSE_PREFIX, i);
        LogMessageVerb(X_INFO, 10, "wsmouse: checking %s\n", devnam);
        fd = priv_open_device(devnam);
        if (fd == -1) {
            LogMessageVerb(X_WARNING, 10, "%s: %s\n", devnam, strerror(errno));
            continue;
        }
        if (ioctl(fd, WSMOUSEIO_GTYPE, &wsmouse_type) != 0) {
            LogMessageVerb(X_WARNING, 10,
                           "%s: WSMOUSEIO_GTYPE failed\n", devnam);
            close(fd);
            continue;
        }
        close(fd);
        switch (wsmouse_type) {
          case WSMOUSE_TYPE_SYNAPTICS:
          case WSMOUSE_TYPE_ALPS:
          case WSMOUSE_TYPE_ELANTECH:
          case WSMOUSE_TYPE_SYNAP_SBTN:
            wscons_add_pointer(devnam, "synaptics",
                               ATTR_TOUCHPAD);
            break;
          case WSMOUSE_TYPE_TPANEL:
            wscons_add_pointer(devnam, "ws", ATTR_TOUCHSCREEN);
            break;
          default:
            break;
        }
    }
    /* Add a default entry catching all other mux elements as "ws" */
    wscons_add_pointer(WSCONS_MOUSE_PREFIX, "ws", ATTR_POINTER);
}

int
config_wscons_init(void)
{
    wscons_add_keyboard();
    wscons_add_pointers();
    return 1;
}

void
config_wscons_fini(void)
{
    /* Not much to do ? */
}
@


1.18
log
@sys/select.h -> sys/time.h
@
text
@d54 1
a54 1
    char *name;
d124 2
a125 1
    config_info = Xprintf("wscons:%s", WSCONS_KBD_DEVICE);
d189 2
a190 1
    config_info = Xprintf("wscons:%s", path);
d218 1
a218 1
    char devname[256];
d223 3
a225 3
        snprintf(devname, sizeof(devname), "%s%d", WSCONS_MOUSE_PREFIX, i);
        LogMessageVerb(X_INFO, 10, "wsmouse: checking %s\n", devname);
        fd = priv_open_device(devname);
d227 1
a227 1
            LogMessageVerb(X_WARNING, 10, "%s: %s\n", devname, strerror(errno));
d232 1
a232 1
                           "%s: WSMOUSEIO_GTYPE failed\n", devname);
d242 1
a242 1
            wscons_add_pointer(devname, "synaptics",
d246 1
a246 1
            wscons_add_pointer(devname, "ws", ATTR_TOUCHSCREEN);
@


1.17
log
@Fix build after headers cleanup.
include wscons headers after sys/ioct.h and sys/select.h
with deraadt@@ and kettenis@@
@
text
@d29 1
a29 1
#include <sys/select.h>
@


1.16
log
@Remove zaurus keyboard model

ok matthieu@@
@
text
@d28 2
a31 2

#include <sys/ioctl.h>
@


1.15
log
@Detect keyboard configuration by masking bits, not equality checks.

Fixes the case where a kbd(8) setting has multiple bits set
(e.g., us.dvorak.swapctrlcaps). Bug reported by Sevan Janiyan.

ok shadchin@@ matthieu@@
@
text
@a78 1
    {WSKBD_TYPE_ZAURUS, "zaurus"},
@


1.14
log
@Recognise the synaptics with sw buttons mouse type and set the
clickpad and has_secondary_buttons properties.

Initial diff from myself with additional changes from matthieu@@
@
text
@d142 1
a142 1
        if (wsenc == kbdvar[i].val || KB_VARIANT(wsenc) == kbdvar[i].val) {
d150 1
a150 1
        if (KB_VARIANT(wsenc) == kbdopt[i].val) {
@


1.13
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d240 1
@


1.12
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d114 1
a114 1
    close (fd);
d222 1
a222 2
        snprintf(devname, sizeof(devname), "%s%d",
                 WSCONS_MOUSE_PREFIX, i);
d226 1
a226 2
            LogMessageVerb(X_WARNING, 10, "%s: %s\n", devname,
                           strerror(errno));
@


1.11
log
@Attach the synaptics(4) driver to elantech touchpads during auto-configuration.
ok matthieu@@
@
text
@d45 6
a50 6
	{ KB_UK,	"gb" }, \
	{ KB_SV,	"se" }, \
	{ KB_SG,	"ch" }, \
	{ KB_SF,	"ch" }, \
	{ KB_LA,	"latam" }, \
	{ KB_CF,	"ca" }
d56 4
a59 2
    KB_OVRENC, KB_ENCTAB, {
0}};
@


1.10
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d239 1
@


1.9
log
@Use the 'macintosh' xkb model on adb keyboards. From mpi@@, reminded by
landry@@. ok deraadt@@
@
text
@d53 5
a57 3
  int val;
  char *name;
} kbdenc[] = { KB_OVRENC, KB_ENCTAB, { 0 } };
d60 9
a68 9
	{ KB_NODEAD | KB_SG,	"de_nodeadkeys" },
	{ KB_NODEAD | KB_SF,	"fr_nodeadkeys" },
	{ KB_SF,		"fr" },
	{ KB_DVORAK | KB_CF,	"fr-dvorak" },
	{ KB_DVORAK | KB_FR,	"bepo" },
	{ KB_DVORAK,		"dvorak" },
	{ KB_CF,		"fr-legacy" },
	{ KB_NODEAD,		"nodeadkeys" },
	{ 0 }
d72 2
a73 2
	{ KB_SWAPCTRLCAPS, "ctrl:swapcaps" },
	{ 0 }
d77 3
a79 3
	{ WSKBD_TYPE_ZAURUS,	"zaurus" },
	{ WSKBD_TYPE_ADB,	"macintosh" },
	{ 0 }
a81 2
extern int priv_open_device(const char *);

d85 20
a104 97
	InputAttributes attrs = {};
	DeviceIntPtr dev = NULL;
	InputOption *options = NULL, *tmpo;
	char *config_info = NULL;
	int fd, i, rc;
	unsigned int type;
	kbd_t wsenc = 0;

	/* Find keyboard configuration */
	fd = priv_open_device(WSCONS_KBD_DEVICE);
	if (fd == -1) {
		LogMessage(X_ERROR, "wskbd: open %s: %s\n",
		    WSCONS_KBD_DEVICE, strerror(errno));
		return;
	}
	if (ioctl(fd, WSKBDIO_GETENCODING, &wsenc) == -1) {
		LogMessage(X_WARNING, "wskbd: ioctl(WSKBDIO_GETENCODING) "
		    "failed: %s\n", strerror(errno));
		close(fd);
		return;
	}
	if (ioctl(fd, WSKBDIO_GTYPE, &type) == -1) {
		LogMessage(X_WARNING, "wskbd: ioctl(WSKBDIO_GTYPE) "
		    "failed: %s\n", strerror(errno));
		close(fd);
		return;
	}
	close (fd);

	options = calloc(sizeof(*options), 1);
	if (!options)
		return;

	options->key = strdup("_source");
	options->value = strdup("server/wscons");
	if (!options->key || !options->value)
		return;

	LogMessage(X_INFO, "config/wscons: checking input device %s\n",
	    WSCONS_KBD_DEVICE);
	add_option(&options, "name", WSCONS_KBD_DEVICE);
	add_option(&options, "driver", "kbd");

	config_info = Xprintf("wscons:%s", WSCONS_KBD_DEVICE);
	if (!config_info)
		goto unwind;
	if (KB_ENCODING(wsenc) == KB_USER) {
		/* Ignore wscons "user" layout */
		LogMessageVerb(X_INFO, 3, "wskbd: ignoring \"user\" layout\n");
		goto kbd_config_done;
	}
	for  (i = 0; kbdenc[i].val; i++)
		if(KB_ENCODING(wsenc) == kbdenc[i].val) {
			LogMessageVerb(X_INFO, 3, "wskbd: using layout %s\n",
			    kbdenc[i].name);
			add_option(&options, "xkb_layout", kbdenc[i].name);
			break;
		}
	for (i = 0; kbdvar[i].val; i++)
		if (wsenc == kbdvar[i].val ||
		    KB_VARIANT(wsenc) == kbdvar[i].val) {
			LogMessageVerb(X_INFO, 3, "wskbd: using variant %s\n",
			    kbdvar[i].name);
			add_option(&options, "xkb_variant", kbdvar[i].name);
			break;
		}
	for (i = 0; kbdopt[i].val; i++)
		if (KB_VARIANT(wsenc) == kbdopt[i].val) {
			LogMessageVerb(X_INFO, 3, "wskbd: using option %s\n",
			    kbdopt[i].name);
			add_option(&options, "xkb_options", kbdopt[i].name);
			break;
		}
	for (i = 0; kbdmodel[i].val; i++)
		if (type == kbdmodel[i].val) {
			LogMessageVerb(X_INFO, 3, "wskbd: using model %s\n",
			    kbdmodel[i].name);
			add_option(&options, "xkb_model", kbdmodel[i].name);
			break;
		}

kbd_config_done:
	attrs.flags |= ATTR_KEYBOARD;
	rc = NewInputDeviceRequest(options, &attrs, &dev);
	if (rc != Success)
		goto unwind;

	for (; dev; dev = dev->next) {
		free(dev->config_info);
		dev->config_info = strdup(config_info);
	}
unwind:
	while (!dev && (tmpo = options)) {
		options = tmpo->next;
		free(tmpo->key);
		free(tmpo->value);
		free(tmpo);
d106 70
d181 26
a206 36
	InputAttributes attrs = {};
	DeviceIntPtr dev = NULL;
	InputOption *options = NULL, *tmpo;
	char *config_info = NULL;
	int rc;

	config_info = Xprintf("wscons:%s", path);
	if (!config_info)
		return;
	options = calloc(sizeof(*options), 1);
	if (!options)
		return;

	options->key = strdup("_source");
	options->value = strdup("server/wscons");
	if (!options->key || !options->value)
		return;
	add_option(&options, "name", strdup(path));
	add_option(&options, "driver", strdup(driver));
	add_option(&options, "device", strdup(path));
	LogMessage(X_INFO, "config/wscons: checking input device %s\n", path);
	attrs.flags |= flags;
	rc = NewInputDeviceRequest(options, &attrs, &dev);
	if (rc != Success)
		goto unwind;

	for (; dev; dev = dev->next) {
		free(dev->config_info);
		dev->config_info = strdup(config_info);
	}
unwind:
	while (!dev && (tmpo = options)) {
		options = tmpo->next;
		free(tmpo->key);
		free(tmpo->value);
		free(tmpo);
d208 2
d215 2
a216 2
	char devname[256];
	int fd, i, wsmouse_type;
d218 33
a250 33
	/* Check pointing devices */
	for (i = 0; i < 4; i++) {
		snprintf(devname, sizeof(devname), "%s%d",
		    WSCONS_MOUSE_PREFIX, i);
		LogMessageVerb(X_INFO, 10, "wsmouse: checking %s\n", devname);
		fd = priv_open_device(devname);
		if (fd == -1) {
			LogMessageVerb(X_WARNING, 10, "%s: %s\n", devname,
			    strerror(errno));
			continue;
		}
		if (ioctl(fd, WSMOUSEIO_GTYPE, &wsmouse_type) != 0) {
			LogMessageVerb(X_WARNING, 10,
			    "%s: WSMOUSEIO_GTYPE failed\n", devname);
			close(fd);
			continue;
		}
		close(fd);
		switch (wsmouse_type) {
		case WSMOUSE_TYPE_SYNAPTICS:
		case WSMOUSE_TYPE_ALPS:
			wscons_add_pointer(devname, "synaptics",
			    ATTR_TOUCHPAD);
			break;
		case WSMOUSE_TYPE_TPANEL:
			wscons_add_pointer(devname, "ws", ATTR_TOUCHSCREEN);
			break;
		default:
			break;
		}
	}
	/* Add a default entry catching all other mux elements as "ws" */
	wscons_add_pointer(WSCONS_MOUSE_PREFIX, "ws", ATTR_POINTER);
d256 3
a258 3
	wscons_add_keyboard();
	wscons_add_pointers();
	return 1;
d264 1
a264 1
	/* Not much to do ? */
@


1.8
log
@Switch to the xf86-input-ws input driver for mouse by default.

ok shadchin@@.
@
text
@d76 1
@


1.7
log
@Revert stuff from my local tree which leaked in xserver 1.11.3 update.
@
text
@d263 2
a264 2
	/* Add a default entry catching all other mux elements as "mouse" */
	wscons_add_pointer(WSCONS_MOUSE_PREFIX, "mouse", ATTR_POINTER);
@


1.6
log
@Bugfix Update to xserver 1.11.3
@
text
@a31 1
#include <ctype.h>
d124 1
a124 1
	add_option(&options, "name", "Keyboard");
d185 1
a185 1
wscons_add_pointer(const char *path, const char *driver, int flags, int index)
a190 1
	char *name = NULL;
a199 10
	if (index >= 0)
		name = Xprintf("%s%d", driver, index);
	else
		name = strdup("mouse");
	if (!name) {
		free(options);
		free(config_info);
		return;
	}
	name[0] = toupper(name[0]);
d204 1
a204 1
	add_option(&options, "name", name);
d254 1
a254 1
					   ATTR_TOUCHPAD, i);
d257 1
a257 1
			wscons_add_pointer(devname, "ws", ATTR_TOUCHSCREEN, i);
d264 1
a264 1
	wscons_add_pointer(WSCONS_MOUSE_PREFIX, "ws", ATTR_POINTER, -1);
@


1.5
log
@Use the synaptics driver with ALPS touchpads

with and ok matthieu@@
@
text
@d32 1
d125 1
a125 1
	add_option(&options, "name", WSCONS_KBD_DEVICE);
d186 1
a186 1
wscons_add_pointer(const char *path, const char *driver, int flags)
d192 1
d202 10
d216 1
a216 1
	add_option(&options, "name", strdup(path));
d266 1
a266 1
			    ATTR_TOUCHPAD);
d269 1
a269 1
			wscons_add_pointer(devname, "ws", ATTR_TOUCHSCREEN);
d276 1
a276 1
	wscons_add_pointer(WSCONS_MOUSE_PREFIX, "mouse", ATTR_POINTER);
@


1.4
log
@Cleaning of current solution for 'Kill X on Ctrl+Alt+Backspace on default'

ok matthieu@@
@
text
@d252 1
@


1.3
log
@Fix default xkboptions settings here too.
@
text
@a69 1
#ifndef USE_XKEYBOARD_CONFIG
a70 3
#else
	{ KB_SWAPCTRLCAPS, "ctrl:swapcaps,terminate:ctrl_alt_bksp" },
#endif
@


1.2
log
@A wscons keyboard type of zaurus should map to an XKB model of zaurus
@
text
@d70 1
d72 3
@


1.1
log
@Introduce new autoconfiguration code for X input drivers, based on X
hotplug framework.This also takes care of the configuration of the
keyboard layout from the wscons layout that was hacked inside the
keyboard driver.

Tested by many, ok oga@@.
@
text
@d74 1
a74 1
struct nameint kbdtype[] = {
d157 5
a161 5
	for (i = 0; kbdtype[i].val; i++)
		if (type == kbdtype[i].val) {
			LogMessageVerb(X_INFO, 3, "wskbd: using type %s\n",
			    kbdtype[i].name);
			add_option(&options, "xkb_type", kbdtype[i].name);
@

