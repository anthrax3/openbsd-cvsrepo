head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.6
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.9.0.6
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.05.29.12.02.40;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	s0SI41sEunLdyFfd;

1.9
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	cVXoV5PxI8YrEaVA;

1.8
date	2013.06.07.17.28.55;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.38;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.18.05.13;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.18.05.13;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * Copyright Â© 2006 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that copyright
 * notice and this permission notice appear in supporting documentation, and
 * that the name of the copyright holders not be used in advertising or
 * publicity pertaining to distribution of the software without specific,
 * written prior permission.  The copyright holders make no representations
 * about the suitability of this software for any purpose.  It is provided "as
 * is" without express or implied warranty.
 *
 * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
 * OF THIS SOFTWARE.
 */

#include "randrstr.h"

RESTYPE RRModeType;

static Bool
RRModeEqual(xRRModeInfo * a, xRRModeInfo * b)
{
    if (a->width != b->width)
        return FALSE;
    if (a->height != b->height)
        return FALSE;
    if (a->dotClock != b->dotClock)
        return FALSE;
    if (a->hSyncStart != b->hSyncStart)
        return FALSE;
    if (a->hSyncEnd != b->hSyncEnd)
        return FALSE;
    if (a->hTotal != b->hTotal)
        return FALSE;
    if (a->hSkew != b->hSkew)
        return FALSE;
    if (a->vSyncStart != b->vSyncStart)
        return FALSE;
    if (a->vSyncEnd != b->vSyncEnd)
        return FALSE;
    if (a->vTotal != b->vTotal)
        return FALSE;
    if (a->nameLength != b->nameLength)
        return FALSE;
    if (a->modeFlags != b->modeFlags)
        return FALSE;
    return TRUE;
}

/*
 * Keep a list so it's easy to find modes in the resource database.
 */
static int num_modes;
static RRModePtr *modes;

static RRModePtr
RRModeCreate(xRRModeInfo * modeInfo, const char *name, ScreenPtr userScreen)
{
    RRModePtr mode, *newModes;

    if (!RRInit())
        return NULL;

    mode = malloc(sizeof(RRModeRec) + modeInfo->nameLength + 1);
    if (!mode)
        return NULL;
    mode->refcnt = 1;
    mode->mode = *modeInfo;
    mode->name = (char *) (mode + 1);
    memcpy(mode->name, name, modeInfo->nameLength);
    mode->name[modeInfo->nameLength] = '\0';
    mode->userScreen = userScreen;

    if (num_modes)
        newModes = reallocarray(modes, num_modes + 1, sizeof(RRModePtr));
    else
        newModes = malloc(sizeof(RRModePtr));

    if (!newModes) {
        free(mode);
        return NULL;
    }

    mode->mode.id = FakeClientID(0);
    if (!AddResource(mode->mode.id, RRModeType, (void *) mode)) {
        free(newModes);
        return NULL;
    }
    modes = newModes;
    modes[num_modes++] = mode;

    /*
     * give the caller a reference to this mode
     */
    ++mode->refcnt;
    return mode;
}

static RRModePtr
RRModeFindByName(const char *name, CARD16 nameLength)
{
    int i;
    RRModePtr mode;

    for (i = 0; i < num_modes; i++) {
        mode = modes[i];
        if (mode->mode.nameLength == nameLength &&
            !memcmp(name, mode->name, nameLength)) {
            return mode;
        }
    }
    return NULL;
}

RRModePtr
RRModeGet(xRRModeInfo * modeInfo, const char *name)
{
    int i;

    for (i = 0; i < num_modes; i++) {
        RRModePtr mode = modes[i];

        if (RRModeEqual(&mode->mode, modeInfo) &&
            !memcmp(name, mode->name, modeInfo->nameLength)) {
            ++mode->refcnt;
            return mode;
        }
    }

    return RRModeCreate(modeInfo, name, NULL);
}

static RRModePtr
RRModeCreateUser(ScreenPtr pScreen,
                 xRRModeInfo * modeInfo, const char *name, int *error)
{
    RRModePtr mode;

    mode = RRModeFindByName(name, modeInfo->nameLength);
    if (mode) {
        *error = BadName;
        return NULL;
    }

    mode = RRModeCreate(modeInfo, name, pScreen);
    if (!mode) {
        *error = BadAlloc;
        return NULL;
    }
    *error = Success;
    return mode;
}

RRModePtr *
RRModesForScreen(ScreenPtr pScreen, int *num_ret)
{
    rrScrPriv(pScreen);
    int o, c, m;
    RRModePtr *screen_modes;
    int num_screen_modes = 0;

    screen_modes = xallocarray((num_modes ? num_modes : 1), sizeof(RRModePtr));
    if (!screen_modes)
        return NULL;

    /*
     * Add modes from all outputs
     */
    for (o = 0; o < pScrPriv->numOutputs; o++) {
        RROutputPtr output = pScrPriv->outputs[o];
        int n;

        for (m = 0; m < output->numModes + output->numUserModes; m++) {
            RRModePtr mode = (m < output->numModes ?
                              output->modes[m] :
                              output->userModes[m - output->numModes]);
            for (n = 0; n < num_screen_modes; n++)
                if (screen_modes[n] == mode)
                    break;
            if (n == num_screen_modes)
                screen_modes[num_screen_modes++] = mode;
        }
    }
    /*
     * Add modes from all crtcs. The goal is to
     * make sure all available and active modes
     * are visible to the client
     */
    for (c = 0; c < pScrPriv->numCrtcs; c++) {
        RRCrtcPtr crtc = pScrPriv->crtcs[c];
        RRModePtr mode = crtc->mode;
        int n;

        if (!mode)
            continue;
        for (n = 0; n < num_screen_modes; n++)
            if (screen_modes[n] == mode)
                break;
        if (n == num_screen_modes)
            screen_modes[num_screen_modes++] = mode;
    }
    /*
     * Add all user modes for this screen
     */
    for (m = 0; m < num_modes; m++) {
        RRModePtr mode = modes[m];
        int n;

        if (mode->userScreen != pScreen)
            continue;
        for (n = 0; n < num_screen_modes; n++)
            if (screen_modes[n] == mode)
                break;
        if (n == num_screen_modes)
            screen_modes[num_screen_modes++] = mode;
    }

    *num_ret = num_screen_modes;
    return screen_modes;
}

void
RRModeDestroy(RRModePtr mode)
{
    int m;

    if (--mode->refcnt > 0)
        return;
    for (m = 0; m < num_modes; m++) {
        if (modes[m] == mode) {
            memmove(modes + m, modes + m + 1,
                    (num_modes - m - 1) * sizeof(RRModePtr));
            num_modes--;
            if (!num_modes) {
                free(modes);
                modes = NULL;
            }
            break;
        }
    }

    free(mode);
}

static int
RRModeDestroyResource(void *value, XID pid)
{
    RRModeDestroy((RRModePtr) value);
    return 1;
}

/*
 * Initialize mode type
 */
Bool
RRModeInit(void)
{
    assert(num_modes == 0);
    assert(modes == NULL);
    RRModeType = CreateNewResourceType(RRModeDestroyResource, "MODE");
    if (!RRModeType)
        return FALSE;

    return TRUE;
}

/*
 * Initialize mode type error value
 */
void
RRModeInitErrorValue(void)
{
    SetResourceTypeErrorValue(RRModeType, RRErrorBase + BadRRMode);
}

int
ProcRRCreateMode(ClientPtr client)
{
    REQUEST(xRRCreateModeReq);
    xRRCreateModeReply rep;
    WindowPtr pWin;
    ScreenPtr pScreen;
    xRRModeInfo *modeInfo;
    long units_after;
    char *name;
    int error, rc;
    RRModePtr mode;

    REQUEST_AT_LEAST_SIZE(xRRCreateModeReq);
    rc = dixLookupWindow(&pWin, stuff->window, client, DixGetAttrAccess);
    if (rc != Success)
        return rc;

    pScreen = pWin->drawable.pScreen;

    modeInfo = &stuff->modeInfo;
    name = (char *) (stuff + 1);
    units_after = (stuff->length - bytes_to_int32(sizeof(xRRCreateModeReq)));

    /* check to make sure requested name fits within the data provided */
    if (bytes_to_int32(modeInfo->nameLength) > units_after)
        return BadLength;

    mode = RRModeCreateUser(pScreen, modeInfo, name, &error);
    if (!mode)
        return error;

    rep = (xRRCreateModeReply) {
        .type = X_Reply,
        .sequenceNumber = client->sequence,
        .length = 0,
        .mode = mode->mode.id
	};
    if (client->swapped) {
        swaps(&rep.sequenceNumber);
        swapl(&rep.length);
        swapl(&rep.mode);
    }
    WriteToClient(client, sizeof(xRRCreateModeReply), &rep);
    /* Drop out reference to this mode */
    RRModeDestroy(mode);
    return Success;
}

int
ProcRRDestroyMode(ClientPtr client)
{
    REQUEST(xRRDestroyModeReq);
    RRModePtr mode;

    REQUEST_SIZE_MATCH(xRRDestroyModeReq);
    VERIFY_RR_MODE(stuff->mode, mode, DixDestroyAccess);

    if (!mode->userScreen)
        return BadMatch;
    if (mode->refcnt > 1)
        return BadAccess;
    FreeResource(stuff->mode, 0);
    return Success;
}

int
ProcRRAddOutputMode(ClientPtr client)
{
    REQUEST(xRRAddOutputModeReq);
    RRModePtr mode;
    RROutputPtr output;

    REQUEST_SIZE_MATCH(xRRAddOutputModeReq);
    VERIFY_RR_OUTPUT(stuff->output, output, DixReadAccess);
    VERIFY_RR_MODE(stuff->mode, mode, DixUseAccess);

    return RROutputAddUserMode(output, mode);
}

int
ProcRRDeleteOutputMode(ClientPtr client)
{
    REQUEST(xRRDeleteOutputModeReq);
    RRModePtr mode;
    RROutputPtr output;

    REQUEST_SIZE_MATCH(xRRDeleteOutputModeReq);
    VERIFY_RR_OUTPUT(stuff->output, output, DixReadAccess);
    VERIFY_RR_MODE(stuff->mode, mode, DixUseAccess);

    return RROutputDeleteUserMode(output, mode);
}
@


1.9
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d82 1
a82 1
        newModes = realloc(modes, (num_modes + 1) * sizeof(RRModePtr));
d169 1
a169 1
    screen_modes = malloc((num_modes ? num_modes : 1) * sizeof(RRModePtr));
@


1.8
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d92 1
a92 1
    if (!AddResource(mode->mode.id, RRModeType, (pointer) mode)) {
d253 1
a253 1
RRModeDestroyResource(pointer value, XID pid)
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d92 2
a93 1
    if (!AddResource(mode->mode.id, RRModeType, (pointer) mode))
d95 1
d178 1
a178 1
        int m, n;
d287 1
a287 1
    xRRCreateModeReply rep = { 0 };
a289 1
    rrScrPrivPtr pScrPriv;
a301 1
    pScrPriv = rrGetScrPriv(pScreen);
d315 6
a320 5
    rep.type = X_Reply;
    rep.pad0 = 0;
    rep.sequenceNumber = client->sequence;
    rep.length = 0;
    rep.mode = mode->mode.id;
d326 1
a326 1
    WriteToClient(client, sizeof(xRRCreateModeReply), (char *) &rep);
@


1.6
log
@Update to xserver 1.11.2
@
text
@d25 1
a25 1
RESTYPE	RRModeType;
d28 1
a28 1
RRModeEqual (xRRModeInfo *a, xRRModeInfo *b)
d30 24
a53 12
    if (a->width != b->width) return FALSE;
    if (a->height != b->height) return FALSE;
    if (a->dotClock != b->dotClock) return FALSE;
    if (a->hSyncStart != b->hSyncStart) return FALSE;
    if (a->hSyncEnd != b->hSyncEnd) return FALSE;
    if (a->hTotal != b->hTotal) return FALSE;
    if (a->hSkew != b->hSkew) return FALSE;
    if (a->vSyncStart != b->vSyncStart) return FALSE;
    if (a->vSyncEnd != b->vSyncEnd) return FALSE;
    if (a->vTotal != b->vTotal) return FALSE;
    if (a->nameLength != b->nameLength) return FALSE;
    if (a->modeFlags != b->modeFlags) return FALSE;
d60 2
a61 2
static int	    num_modes;
static RRModePtr    *modes;
d64 6
a69 8
RRModeCreate (xRRModeInfo   *modeInfo,
	      const char    *name,
	      ScreenPtr	    userScreen)
{
    RRModePtr	mode, *newModes;
    
    if (!RRInit ())
	return NULL;
d71 1
a71 1
    mode = malloc(sizeof (RRModeRec) + modeInfo->nameLength + 1);
d73 1
a73 1
	return NULL;
d77 1
a77 1
    memcpy (mode->name, name, modeInfo->nameLength);
d82 1
a82 1
	newModes = realloc(modes, (num_modes + 1) * sizeof (RRModePtr));
d84 1
a84 1
	newModes = malloc(sizeof (RRModePtr));
d86 3
a88 4
    if (!newModes)
    {
	free(mode);
	return NULL;
d92 2
a93 2
    if (!AddResource (mode->mode.id, RRModeType, (pointer) mode))
	return NULL;
d96 1
a96 1
    
d105 1
a105 2
RRModeFindByName (const char	*name,
		  CARD16    	nameLength)
d107 2
a108 2
    int		i;
    RRModePtr	mode;
d110 6
a115 8
    for (i = 0; i < num_modes; i++)
    {
	mode = modes[i];
	if (mode->mode.nameLength == nameLength &&
	    !memcmp (name, mode->name, nameLength))
	{
	    return mode;
	}
d121 1
a121 2
RRModeGet (xRRModeInfo	*modeInfo,
	   const char	*name)
d123 1
a123 1
    int	i;
d125 8
a132 9
    for (i = 0; i < num_modes; i++)
    {
	RRModePtr   mode = modes[i];
	if (RRModeEqual (&mode->mode, modeInfo) &&
	    !memcmp (name, mode->name, modeInfo->nameLength))
	{
	    ++mode->refcnt;
	    return mode;
	}
d135 1
a135 1
    return RRModeCreate (modeInfo, name, NULL);
d139 9
a147 12
RRModeCreateUser (ScreenPtr	pScreen,
		  xRRModeInfo	*modeInfo,
		  const char	*name,
		  int		*error)
{
    RRModePtr	mode;

    mode = RRModeFindByName (name, modeInfo->nameLength);
    if (mode)
    {
	*error = BadName;
	return NULL;
d149 5
a153 6
    
    mode = RRModeCreate (modeInfo, name, pScreen);
    if (!mode)
    {
	*error = BadAlloc;
	return NULL;
d160 1
a160 1
RRModesForScreen (ScreenPtr pScreen, int *num_ret)
d163 3
a165 3
    int		o, c, m;
    RRModePtr	*screen_modes;
    int		num_screen_modes = 0;
d167 1
a167 1
    screen_modes = malloc((num_modes ? num_modes : 1) * sizeof (RRModePtr));
d169 2
a170 2
	return NULL;
    
d174 14
a187 16
    for (o = 0; o < pScrPriv->numOutputs; o++)
    {
	RROutputPtr	output = pScrPriv->outputs[o];
	int		m, n;

	for (m = 0; m < output->numModes + output->numUserModes; m++)
	{
	    RRModePtr   mode = (m < output->numModes ? 
				output->modes[m] : 
				output->userModes[m-output->numModes]);
	    for (n = 0; n < num_screen_modes; n++)
		if (screen_modes[n] == mode)
		    break;
	    if (n == num_screen_modes)
		screen_modes[num_screen_modes++] = mode;
	}
d194 12
a205 12
    for (c = 0; c < pScrPriv->numCrtcs; c++)
    {
	RRCrtcPtr	crtc = pScrPriv->crtcs[c];
	RRModePtr	mode = crtc->mode;
	int		n;

	if (!mode) continue;
	for (n = 0; n < num_screen_modes; n++)
	    if (screen_modes[n] == mode)
		break;
	if (n == num_screen_modes)
	    screen_modes[num_screen_modes++] = mode;
d210 11
a220 12
    for (m = 0; m < num_modes; m++)
    {
	RRModePtr	mode = modes[m];
	int		n;

	if (mode->userScreen != pScreen)
	    continue;
	for (n = 0; n < num_screen_modes; n++)
	    if (screen_modes[n] == mode)
		break;
	if (n == num_screen_modes)
	    screen_modes[num_screen_modes++] = mode;
d222 1
a222 1
    
d228 1
a228 1
RRModeDestroy (RRModePtr mode)
d230 2
a231 2
    int	m;
    
d233 12
a244 15
	return;
    for (m = 0; m < num_modes; m++)
    {
	if (modes[m] == mode)
	{
	    memmove (modes + m, modes + m + 1,
		     (num_modes - m - 1) * sizeof (RRModePtr));
	    num_modes--;
	    if (!num_modes)
	    {
		free(modes);
		modes = NULL;
	    }
	    break;
	}
d246 1
a246 1
    
d251 1
a251 1
RRModeDestroyResource (pointer value, XID pid)
d253 1
a253 1
    RRModeDestroy ((RRModePtr) value);
d261 1
a261 1
RRModeInit (void)
d263 3
a265 3
    assert (num_modes == 0);
    assert (modes == NULL);
    RRModeType = CreateNewResourceType (RRModeDestroyResource, "MODE");
d267 2
a268 2
	return FALSE;
    
d282 1
a282 1
ProcRRCreateMode (ClientPtr client)
d285 11
a295 11
    xRRCreateModeReply	rep = {0};
    WindowPtr		pWin;
    ScreenPtr		pScreen;
    rrScrPrivPtr	pScrPriv;
    xRRModeInfo		*modeInfo;
    long		units_after;
    char		*name;
    int			error, rc;
    RRModePtr		mode;
    
    REQUEST_AT_LEAST_SIZE (xRRCreateModeReq);
d298 1
a298 1
	return rc;
d302 1
a302 1
    
d305 1
a305 1
    units_after = (stuff->length - bytes_to_int32(sizeof (xRRCreateModeReq)));
d309 1
a309 1
	return BadLength;
d311 1
a311 1
    mode = RRModeCreateUser (pScreen, modeInfo, name, &error);
d313 1
a313 1
	return error;
d320 4
a323 6
    if (client->swapped)
    {
	int n;
    	swaps(&rep.sequenceNumber, n);
    	swapl(&rep.length, n);
	swapl(&rep.mode, n);
d325 1
a325 1
    WriteToClient(client, sizeof(xRRCreateModeReply), (char *)&rep);
d327 1
a327 1
    RRModeDestroy (mode);
d332 1
a332 1
ProcRRDestroyMode (ClientPtr client)
d335 2
a336 2
    RRModePtr	mode;
    
d341 1
a341 1
	return BadMatch;
d343 2
a344 2
	return BadAccess;
    FreeResource (stuff->mode, 0);
d349 1
a349 1
ProcRRAddOutputMode (ClientPtr client)
d352 3
a354 3
    RRModePtr	mode;
    RROutputPtr	output;
    
d358 2
a359 2
    
    return RROutputAddUserMode (output, mode);
d363 1
a363 1
ProcRRDeleteOutputMode (ClientPtr client)
d366 3
a368 3
    RRModePtr	mode;
    RROutputPtr	output;
    
d372 2
a373 2
    
    return RROutputDeleteUserMode (output, mode);
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d291 1
a291 1
    xRRCreateModeReply	rep;
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d61 1
a61 1
    mode = xalloc (sizeof (RRModeRec) + modeInfo->nameLength + 1);
d72 1
a72 1
	newModes = xrealloc (modes, (num_modes + 1) * sizeof (RRModePtr));
d74 1
a74 1
	newModes = xalloc (sizeof (RRModePtr));
d78 1
a78 1
	xfree (mode);
d167 1
a167 1
    screen_modes = xalloc ((num_modes ? num_modes : 1) * sizeof (RRModePtr));
d246 1
a246 1
		xfree (modes);
d253 1
a253 1
    xfree (mode);
d263 3
d274 1
d278 9
d336 1
a336 1
    return client->noClientException;
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a23 1
#include "registry.h"
d268 1
a268 1
    RRModeType = CreateNewResourceType (RRModeDestroyResource);
a270 1
    RegisterResourceName (RRModeType, "MODE");
d289 1
a289 1
    rc = dixLookupWindow(&pWin, stuff->window, client, DixReadAccess);
d298 1
a298 1
    units_after = (stuff->length - (sizeof (xRRCreateModeReq) >> 2));
d301 1
a301 1
    if ((int) (modeInfo->nameLength + 3) >> 2 > units_after)
d333 2
a334 6
    mode = LookupIDByType (stuff->mode, RRModeType);
    if (!mode)
    {
	client->errorValue = stuff->mode;
	return RRErrorBase + BadRRMode;
    }
d351 2
a352 14
    output = LookupOutput(client, stuff->output, DixReadAccess);

    if (!output)
    {
	client->errorValue = stuff->output;
	return RRErrorBase + BadRROutput;
    }
    
    mode = LookupIDByType (stuff->mode, RRModeType);
    if (!mode)
    {
	client->errorValue = stuff->mode;
	return RRErrorBase + BadRRMode;
    }
d365 2
a366 14
    output = LookupOutput(client, stuff->output, DixReadAccess);

    if (!output)
    {
	client->errorValue = stuff->output;
	return RRErrorBase + BadRROutput;
    }
    
    mode = LookupIDByType (stuff->mode, RRModeType);
    if (!mode)
    {
	client->errorValue = stuff->mode;
	return RRErrorBase + BadRRMode;
    }
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d323 2
a324 1
    
@


1.1
log
@Initial revision
@
text
@d24 1
d169 2
a271 1
#ifdef XResExtension
a272 1
#endif
@


1.1.1.1
log
@xserver 1.4
@
text
@@
