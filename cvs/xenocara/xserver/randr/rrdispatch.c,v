head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.8
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.6
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.05.29.12.02.40;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	s0SI41sEunLdyFfd;

1.9
date	2015.11.07.16.48.53;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	7pAEtF6Y5EgemkuY;

1.8
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	cVXoV5PxI8YrEaVA;

1.7
date	2013.06.07.17.28.55;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.38;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.18.05.13;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.18.05.13;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * Copyright Â© 2006 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that copyright
 * notice and this permission notice appear in supporting documentation, and
 * that the name of the copyright holders not be used in advertising or
 * publicity pertaining to distribution of the software without specific,
 * written prior permission.  The copyright holders make no representations
 * about the suitability of this software for any purpose.  It is provided "as
 * is" without express or implied warranty.
 *
 * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
 * OF THIS SOFTWARE.
 */

#include "randrstr.h"
#include "protocol-versions.h"

Bool
RRClientKnowsRates(ClientPtr pClient)
{
    rrClientPriv(pClient);

    return version_compare(pRRClient->major_version, pRRClient->minor_version,
                           1, 1) >= 0;
}

static int
ProcRRQueryVersion(ClientPtr client)
{
    xRRQueryVersionReply rep = {
        .type = X_Reply,
        .sequenceNumber = client->sequence,
        .length = 0
    };
    REQUEST(xRRQueryVersionReq);
    rrClientPriv(client);

    REQUEST_SIZE_MATCH(xRRQueryVersionReq);
    pRRClient->major_version = stuff->majorVersion;
    pRRClient->minor_version = stuff->minorVersion;

    if (version_compare(stuff->majorVersion, stuff->minorVersion,
                        SERVER_RANDR_MAJOR_VERSION,
                        SERVER_RANDR_MINOR_VERSION) < 0) {
        rep.majorVersion = stuff->majorVersion;
        rep.minorVersion = stuff->minorVersion;
    }
    else {
        rep.majorVersion = SERVER_RANDR_MAJOR_VERSION;
        rep.minorVersion = SERVER_RANDR_MINOR_VERSION;
    }

    if (client->swapped) {
        swaps(&rep.sequenceNumber);
        swapl(&rep.length);
        swapl(&rep.majorVersion);
        swapl(&rep.minorVersion);
    }
    WriteToClient(client, sizeof(xRRQueryVersionReply), &rep);
    return Success;
}

static int
ProcRRSelectInput(ClientPtr client)
{
    REQUEST(xRRSelectInputReq);
    rrClientPriv(client);
    RRTimesPtr pTimes;
    WindowPtr pWin;
    RREventPtr pRREvent, *pHead;
    XID clientResource;
    int rc;

    REQUEST_SIZE_MATCH(xRRSelectInputReq);
    rc = dixLookupWindow(&pWin, stuff->window, client, DixReceiveAccess);
    if (rc != Success)
        return rc;
    rc = dixLookupResourceByType((void **) &pHead, pWin->drawable.id,
                                 RREventType, client, DixWriteAccess);
    if (rc != Success && rc != BadValue)
        return rc;

    if (stuff->enable & (RRScreenChangeNotifyMask |
                         RRCrtcChangeNotifyMask |
                         RROutputChangeNotifyMask |
                         RROutputPropertyNotifyMask |
                         RRProviderChangeNotifyMask |
                         RRProviderPropertyNotifyMask |
                         RRResourceChangeNotifyMask)) {
        ScreenPtr pScreen = pWin->drawable.pScreen;

        rrScrPriv(pScreen);

        pRREvent = NULL;
        if (pHead) {
            /* check for existing entry. */
            for (pRREvent = *pHead; pRREvent; pRREvent = pRREvent->next)
                if (pRREvent->client == client)
                    break;
        }

        if (!pRREvent) {
            /* build the entry */
            pRREvent = (RREventPtr) malloc(sizeof(RREventRec));
            if (!pRREvent)
                return BadAlloc;
            pRREvent->next = 0;
            pRREvent->client = client;
            pRREvent->window = pWin;
            pRREvent->mask = stuff->enable;
            /*
             * add a resource that will be deleted when
             * the client goes away
             */
            clientResource = FakeClientID(client->index);
            pRREvent->clientResource = clientResource;
            if (!AddResource(clientResource, RRClientType, (void *) pRREvent))
                return BadAlloc;
            /*
             * create a resource to contain a pointer to the list
             * of clients selecting input.  This must be indirect as
             * the list may be arbitrarily rearranged which cannot be
             * done through the resource database.
             */
            if (!pHead) {
                pHead = (RREventPtr *) malloc(sizeof(RREventPtr));
                if (!pHead ||
                    !AddResource(pWin->drawable.id, RREventType,
                                 (void *) pHead)) {
                    FreeResource(clientResource, RT_NONE);
                    return BadAlloc;
                }
                *pHead = 0;
            }
            pRREvent->next = *pHead;
            *pHead = pRREvent;
        }
        /*
         * Now see if the client needs an event
         */
        if (pScrPriv) {
            pTimes = &((RRTimesPtr) (pRRClient + 1))[pScreen->myNum];
            if (CompareTimeStamps(pTimes->setTime,
                                  pScrPriv->lastSetTime) != 0 ||
                CompareTimeStamps(pTimes->configTime,
                                  pScrPriv->lastConfigTime) != 0) {
                if (pRREvent->mask & RRScreenChangeNotifyMask) {
                    RRDeliverScreenEvent(client, pWin, pScreen);
                }

                if (pRREvent->mask & RRCrtcChangeNotifyMask) {
                    int i;

                    for (i = 0; i < pScrPriv->numCrtcs; i++) {
                        RRDeliverCrtcEvent(client, pWin, pScrPriv->crtcs[i]);
                    }
                }

                if (pRREvent->mask & RROutputChangeNotifyMask) {
                    int i;

                    for (i = 0; i < pScrPriv->numOutputs; i++) {
                        RRDeliverOutputEvent(client, pWin,
                                             pScrPriv->outputs[i]);
                    }
                }

                /* We don't check for RROutputPropertyNotifyMask, as randrproto.txt doesn't
                 * say if there ought to be notifications of changes to output properties
                 * if those changes occurred before the time RRSelectInput is called.
                 */
            }
        }
    }
    else if (stuff->enable == 0) {
        /* delete the interest */
        if (pHead) {
            RREventPtr pNewRREvent = 0;

            for (pRREvent = *pHead; pRREvent; pRREvent = pRREvent->next) {
                if (pRREvent->client == client)
                    break;
                pNewRREvent = pRREvent;
            }
            if (pRREvent) {
                FreeResource(pRREvent->clientResource, RRClientType);
                if (pNewRREvent)
                    pNewRREvent->next = pRREvent->next;
                else
                    *pHead = pRREvent->next;
                free(pRREvent);
            }
        }
    }
    else {
        client->errorValue = stuff->enable;
        return BadValue;
    }
    return Success;
}

int (*ProcRandrVector[RRNumberRequests]) (ClientPtr) = {
    ProcRRQueryVersion,         /* 0 */
/* we skip 1 to make old clients fail pretty immediately */
        NULL,                   /* 1 ProcRandrOldGetScreenInfo */
/* V1.0 apps share the same set screen config request id */
        ProcRRSetScreenConfig,  /* 2 */
        NULL,                   /* 3 ProcRandrOldScreenChangeSelectInput */
/* 3 used to be ScreenChangeSelectInput; deprecated */
        ProcRRSelectInput,      /* 4 */
        ProcRRGetScreenInfo,    /* 5 */
/* V1.2 additions */
        ProcRRGetScreenSizeRange,       /* 6 */
        ProcRRSetScreenSize,    /* 7 */
        ProcRRGetScreenResources,       /* 8 */
        ProcRRGetOutputInfo,    /* 9 */
        ProcRRListOutputProperties,     /* 10 */
        ProcRRQueryOutputProperty,      /* 11 */
        ProcRRConfigureOutputProperty,  /* 12 */
        ProcRRChangeOutputProperty,     /* 13 */
        ProcRRDeleteOutputProperty,     /* 14 */
        ProcRRGetOutputProperty,        /* 15 */
        ProcRRCreateMode,       /* 16 */
        ProcRRDestroyMode,      /* 17 */
        ProcRRAddOutputMode,    /* 18 */
        ProcRRDeleteOutputMode, /* 19 */
        ProcRRGetCrtcInfo,      /* 20 */
        ProcRRSetCrtcConfig,    /* 21 */
        ProcRRGetCrtcGammaSize, /* 22 */
        ProcRRGetCrtcGamma,     /* 23 */
        ProcRRSetCrtcGamma,     /* 24 */
/* V1.3 additions */
        ProcRRGetScreenResourcesCurrent,        /* 25 */
        ProcRRSetCrtcTransform, /* 26 */
        ProcRRGetCrtcTransform, /* 27 */
        ProcRRGetPanning,       /* 28 */
        ProcRRSetPanning,       /* 29 */
        ProcRRSetOutputPrimary, /* 30 */
        ProcRRGetOutputPrimary, /* 31 */
/* V1.4 additions */
        ProcRRGetProviders,     /* 32 */
        ProcRRGetProviderInfo,  /* 33 */
        ProcRRSetProviderOffloadSink, /* 34 */
        ProcRRSetProviderOutputSource, /* 35 */
        ProcRRListProviderProperties,    /* 36 */
        ProcRRQueryProviderProperty,     /* 37 */
        ProcRRConfigureProviderProperty, /* 38 */
        ProcRRChangeProviderProperty, /* 39 */
        ProcRRDeleteProviderProperty, /* 40 */
        ProcRRGetProviderProperty,    /* 41 */
        ProcRRGetMonitors,            /* 42 */
        ProcRRSetMonitor,             /* 43 */
        ProcRRDeleteMonitor,          /* 44 */
};
@


1.9
log
@Update to xserver 1.17.4.
tested by naddy@@
@
text
@d259 3
@


1.8
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d95 3
a97 1
                         RRProviderPropertyNotifyMask)) {
@


1.7
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d86 1
a86 1
    rc = dixLookupResourceByType((pointer *) &pHead, pWin->drawable.id,
d123 1
a123 1
            if (!AddResource(clientResource, RRClientType, (pointer) pRREvent))
d135 1
a135 1
                                 (pointer) pHead)) {
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d38 5
a42 1
    xRRQueryVersionReply rep = { 0 };
a48 3
    rep.type = X_Reply;
    rep.length = 0;
    rep.sequenceNumber = client->sequence;
d67 1
a67 1
    WriteToClient(client, sizeof(xRRQueryVersionReply), (char *) &rep);
d94 2
a95 1
                         RROutputPropertyNotifyMask)) {
d246 11
@


1.5
log
@Update to xserver 1.11.2
@
text
@d27 1
a27 1
RRClientKnowsRates (ClientPtr	pClient)
d36 1
a36 1
ProcRRQueryVersion (ClientPtr client)
d38 1
a38 2
    xRRQueryVersionReply rep = {0};
    register int n;
d50 6
a55 6
                        SERVER_RANDR_MAJOR_VERSION, SERVER_RANDR_MINOR_VERSION) < 0)
    {
	rep.majorVersion = stuff->majorVersion;
	rep.minorVersion = stuff->minorVersion;
    } else
    {
d61 4
a64 4
    	swaps(&rep.sequenceNumber, n);
    	swapl(&rep.length, n);
	swapl(&rep.majorVersion, n);
	swapl(&rep.minorVersion, n);
d66 1
a66 1
    WriteToClient(client, sizeof(xRRQueryVersionReply), (char *)&rep);
d71 1
a71 1
ProcRRSelectInput (ClientPtr client)
d75 5
a79 5
    RRTimesPtr	pTimes;
    WindowPtr	pWin;
    RREventPtr	pRREvent, *pHead;
    XID		clientResource;
    int		rc;
d84 3
a86 3
	return rc;
    rc = dixLookupResourceByType((pointer *)&pHead, pWin->drawable.id,
				 RREventType, client, DixWriteAccess);
d88 1
a88 1
	return rc;
d90 112
a201 122
    if (stuff->enable & (RRScreenChangeNotifyMask|
			 RRCrtcChangeNotifyMask|
			 RROutputChangeNotifyMask|
			 RROutputPropertyNotifyMask)) 
    {
	ScreenPtr	pScreen = pWin->drawable.pScreen;
	rrScrPriv	(pScreen);

	pRREvent = NULL;
	if (pHead) 
	{
	    /* check for existing entry. */
	    for (pRREvent = *pHead; pRREvent; pRREvent = pRREvent->next)
		if (pRREvent->client == client)
		    break;
	}

	if (!pRREvent)
	{
	    /* build the entry */
	    pRREvent = (RREventPtr) malloc(sizeof (RREventRec));
	    if (!pRREvent)
		return BadAlloc;
	    pRREvent->next = 0;
	    pRREvent->client = client;
	    pRREvent->window = pWin;
	    pRREvent->mask = stuff->enable;
	    /*
	     * add a resource that will be deleted when
	     * the client goes away
	     */
	    clientResource = FakeClientID (client->index);
	    pRREvent->clientResource = clientResource;
	    if (!AddResource (clientResource, RRClientType, (pointer)pRREvent))
		return BadAlloc;
	    /*
	     * create a resource to contain a pointer to the list
	     * of clients selecting input.  This must be indirect as
	     * the list may be arbitrarily rearranged which cannot be
	     * done through the resource database.
	     */
	    if (!pHead)
	    {
		pHead = (RREventPtr *) malloc(sizeof (RREventPtr));
		if (!pHead ||
		    !AddResource (pWin->drawable.id, RREventType, (pointer)pHead))
		{
		    FreeResource (clientResource, RT_NONE);
		    return BadAlloc;
		}
		*pHead = 0;
	    }
	    pRREvent->next = *pHead;
	    *pHead = pRREvent;
	}
	/*
	 * Now see if the client needs an event
	 */
	if (pScrPriv)
	{
	    pTimes = &((RRTimesPtr) (pRRClient + 1))[pScreen->myNum];
	    if (CompareTimeStamps (pTimes->setTime, 
				   pScrPriv->lastSetTime) != 0 ||
		CompareTimeStamps (pTimes->configTime, 
				   pScrPriv->lastConfigTime) != 0)
	    {
		if (pRREvent->mask & RRScreenChangeNotifyMask)
		{
		    RRDeliverScreenEvent (client, pWin, pScreen);
		}

		if (pRREvent->mask & RRCrtcChangeNotifyMask)
		{
		    int i;

		    for (i = 0; i < pScrPriv->numCrtcs; i++)
		    {
			RRDeliverCrtcEvent (client, pWin, pScrPriv->crtcs[i]);
		    }
		}

		if (pRREvent->mask & RROutputChangeNotifyMask)
		{
		    int i;

		    for (i = 0; i < pScrPriv->numOutputs; i++)
		    {
			RRDeliverOutputEvent (client, pWin, pScrPriv->outputs[i]);
		    }
		}

		/* We don't check for RROutputPropertyNotifyMask, as randrproto.txt doesn't
		 * say if there ought to be notifications of changes to output properties
		 * if those changes occurred before the time RRSelectInput is called.
		 */
	    }
	}
    }
    else if (stuff->enable == 0) 
    {
	/* delete the interest */
	if (pHead) {
	    RREventPtr pNewRREvent = 0;
	    for (pRREvent = *pHead; pRREvent; pRREvent = pRREvent->next) {
		if (pRREvent->client == client)
		    break;
		pNewRREvent = pRREvent;
	    }
	    if (pRREvent) {
		FreeResource (pRREvent->clientResource, RRClientType);
		if (pNewRREvent)
		    pNewRREvent->next = pRREvent->next;
		else
		    *pHead = pRREvent->next;
		free(pRREvent);
	    }
	}
    }
    else 
    {
	client->errorValue = stuff->enable;
	return BadValue;
d206 2
a207 2
int (*ProcRandrVector[RRNumberRequests])(ClientPtr) = {
    ProcRRQueryVersion,	/* 0 */
d209 1
a209 1
    NULL,			/* 1 ProcRandrOldGetScreenInfo */
d211 2
a212 2
    ProcRRSetScreenConfig,	/* 2 */
    NULL,			/* 3 ProcRandrOldScreenChangeSelectInput */
d214 2
a215 2
    ProcRRSelectInput,		/* 4 */
    ProcRRGetScreenInfo,    	/* 5 */
d217 19
a235 19
    ProcRRGetScreenSizeRange,	/* 6 */
    ProcRRSetScreenSize,	/* 7 */
    ProcRRGetScreenResources,	/* 8 */
    ProcRRGetOutputInfo,	/* 9 */
    ProcRRListOutputProperties,	/* 10 */
    ProcRRQueryOutputProperty,	/* 11 */
    ProcRRConfigureOutputProperty,  /* 12 */
    ProcRRChangeOutputProperty,	/* 13 */
    ProcRRDeleteOutputProperty,	/* 14 */
    ProcRRGetOutputProperty,	/* 15 */
    ProcRRCreateMode,		/* 16 */
    ProcRRDestroyMode,		/* 17 */
    ProcRRAddOutputMode,	/* 18 */
    ProcRRDeleteOutputMode,	/* 19 */
    ProcRRGetCrtcInfo,		/* 20 */
    ProcRRSetCrtcConfig,	/* 21 */
    ProcRRGetCrtcGammaSize,	/* 22 */
    ProcRRGetCrtcGamma,		/* 23 */
    ProcRRSetCrtcGamma,		/* 24 */
d237 7
a243 7
    ProcRRGetScreenResourcesCurrent, /* 25 */
    ProcRRSetCrtcTransform,	/* 26 */
    ProcRRGetCrtcTransform,	/* 27 */
    ProcRRGetPanning,		/* 28 */
    ProcRRSetPanning,		/* 29 */
    ProcRRSetOutputPrimary,	/* 30 */
    ProcRRGetOutputPrimary,	/* 31 */
a244 1

@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d31 2
a32 2
    return (pRRClient->major_version > 1 ||
	    (pRRClient->major_version == 1 && pRRClient->minor_version >= 1));
d38 1
a38 1
    xRRQueryVersionReply rep;
d50 2
a51 2
    if ((stuff->majorVersion * 1000 + stuff->minorVersion) <
        (SERVER_RANDR_MAJOR_VERSION * 1000 + SERVER_RANDR_MINOR_VERSION))
d149 1
a149 1
	if (pScrPriv && (pRREvent->mask & RRScreenChangeNotifyMask))
d157 29
a185 1
		RRDeliverScreenEvent (client, pWin, pScreen);
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d68 1
a68 1
    return (client->noClientException);
d111 1
a111 1
	    pRREvent = (RREventPtr) xalloc (sizeof (RREventRec));
d134 1
a134 1
		pHead = (RREventPtr *) xalloc (sizeof (RREventPtr));
d177 1
a177 1
		xfree (pRREvent);
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d24 1
a24 3

#define SERVER_RANDR_MAJOR	1
#define SERVER_RANDR_MINOR	3
d49 12
a60 6
    /*
     * Report the current version; the current
     * spec says they're all compatible after 1.0
     */
    rep.majorVersion = SERVER_RANDR_MAJOR;
    rep.minorVersion = SERVER_RANDR_MINOR;
d86 4
a89 3
    pHead = (RREventPtr *)SecurityLookupIDByType(client,
						 pWin->drawable.id, RREventType,
						 DixWriteAccess);
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
#define SERVER_RANDR_MINOR	2
d79 1
a79 1
    rc = dixLookupWindow(&pWin, stuff->window, client, DixWriteAccess);
d88 2
a89 1
			 RROutputChangeNotifyMask)) 
d214 8
@


1.1.1.1
log
@xserver 1.4
@
text
@@
