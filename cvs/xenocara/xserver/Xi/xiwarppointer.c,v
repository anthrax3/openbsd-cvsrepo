head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.10
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.12.09.17.58.52;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	vcnjRBuLQw44cPHf;

1.3
date	2012.06.10.13.21.20;	author matthieu;	state Exp;
branches
	1.3.8.1
	1.3.10.1;
next	1.2;

1.2
date	2011.11.05.13.32.47;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.27.19.02.25;	author matthieu;	state Exp;
branches;
next	;

1.3.8.1
date	2014.12.09.18.00.12;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.3.10.1
date	2014.12.09.17.59.32;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.4
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@/*
 * Copyright 2007-2008 Peter Hutterer
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Author: Peter Hutterer, University of South Australia, NICTA
 */

/***********************************************************************
 *
 * Request to Warp the pointer location of an extension input device.
 *
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <X11/X.h>              /* for inputstr.h    */
#include <X11/Xproto.h>         /* Request macro     */
#include "inputstr.h"           /* DeviceIntPtr      */
#include "windowstr.h"          /* window structure  */
#include "scrnintstr.h"         /* screen structure  */
#include <X11/extensions/XI.h>
#include <X11/extensions/XI2proto.h>
#include "extnsionst.h"
#include "exevents.h"
#include "exglobals.h"
#include "mipointer.h"          /* for miPointerUpdateSprite */

#include "xiwarppointer.h"
/***********************************************************************
 *
 * This procedure allows a client to warp the pointer of a device.
 *
 */

int
SProcXIWarpPointer(ClientPtr client)
{
    REQUEST(xXIWarpPointerReq);
    REQUEST_SIZE_MATCH(xXIWarpPointerReq);

    swaps(&stuff->length);
    swapl(&stuff->src_win);
    swapl(&stuff->dst_win);
    swapl(&stuff->src_x);
    swapl(&stuff->src_y);
    swaps(&stuff->src_width);
    swaps(&stuff->src_height);
    swapl(&stuff->dst_x);
    swapl(&stuff->dst_y);
    swaps(&stuff->deviceid);
    return (ProcXIWarpPointer(client));
}

int
ProcXIWarpPointer(ClientPtr client)
{
    int rc;
    int x, y;
    WindowPtr dest = NULL;
    DeviceIntPtr pDev;
    SpritePtr pSprite;
    ScreenPtr newScreen;
    int src_x, src_y;
    int dst_x, dst_y;

    REQUEST(xXIWarpPointerReq);
    REQUEST_SIZE_MATCH(xXIWarpPointerReq);

    /* FIXME: panoramix stuff is missing, look at ProcWarpPointer */

    rc = dixLookupDevice(&pDev, stuff->deviceid, client, DixWriteAccess);

    if (rc != Success) {
        client->errorValue = stuff->deviceid;
        return rc;
    }

    if ((!IsMaster(pDev) && !IsFloating(pDev)) ||
        (IsMaster(pDev) && !IsPointerDevice(pDev))) {
        client->errorValue = stuff->deviceid;
        return BadDevice;
    }

    if (stuff->dst_win != None) {
        rc = dixLookupWindow(&dest, stuff->dst_win, client, DixGetAttrAccess);
        if (rc != Success) {
            client->errorValue = stuff->dst_win;
            return rc;
        }
    }

    pSprite = pDev->spriteInfo->sprite;
    x = pSprite->hotPhys.x;
    y = pSprite->hotPhys.y;

    src_x = stuff->src_x / (double) (1 << 16);
    src_y = stuff->src_y / (double) (1 << 16);
    dst_x = stuff->dst_x / (double) (1 << 16);
    dst_y = stuff->dst_y / (double) (1 << 16);

    if (stuff->src_win != None) {
        int winX, winY;
        WindowPtr src;

        rc = dixLookupWindow(&src, stuff->src_win, client, DixGetAttrAccess);
        if (rc != Success) {
            client->errorValue = stuff->src_win;
            return rc;
        }

        winX = src->drawable.x;
        winY = src->drawable.y;
        if (src->drawable.pScreen != pSprite->hotPhys.pScreen ||
            x < winX + src_x ||
            y < winY + src_y ||
            (stuff->src_width != 0 &&
             winX + src_x + (int) stuff->src_width < 0) ||
            (stuff->src_height != 0 &&
             winY + src_y + (int) stuff->src_height < y) ||
            !PointInWindowIsVisible(src, x, y))
            return Success;
    }

    if (dest) {
        x = dest->drawable.x;
        y = dest->drawable.y;
        newScreen = dest->drawable.pScreen;
    }
    else
        newScreen = pSprite->hotPhys.pScreen;

    x += dst_x;
    y += dst_y;

    if (x < 0)
        x = 0;
    else if (x > newScreen->width)
        x = newScreen->width - 1;

    if (y < 0)
        y = 0;
    else if (y > newScreen->height)
        y = newScreen->height - 1;

    if (newScreen == pSprite->hotPhys.pScreen) {
        if (x < pSprite->physLimits.x1)
            x = pSprite->physLimits.x1;
        else if (x >= pSprite->physLimits.x2)
            x = pSprite->physLimits.x2 - 1;

        if (y < pSprite->physLimits.y1)
            y = pSprite->physLimits.y1;
        else if (y >= pSprite->physLimits.y2)
            y = pSprite->physLimits.y2 - 1;

        if (pSprite->hotShape)
            ConfineToShape(pDev, pSprite->hotShape, &x, &y);
        (*newScreen->SetCursorPosition) (pDev, newScreen, x, y, TRUE);
    }
    else if (!PointerConfinedToScreen(pDev)) {
        NewCurrentScreen(pDev, newScreen, x, y);
    }

    /* if we don't update the device, we get a jump next time it moves */
    pDev->last.valuators[0] = x;
    pDev->last.valuators[1] = y;
    miPointerUpdateSprite(pDev);

    /* FIXME: XWarpPointer is supposed to generate an event. It doesn't do it
       here though. */
    return Success;
}
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d59 2
@


1.3.8.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a58 2
    REQUEST_SIZE_MATCH(xXIWarpPointerReq);

@


1.3.10.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a58 2
    REQUEST_SIZE_MATCH(xXIWarpPointerReq);

@


1.2
log
@Update to xserver 1.11.2
@
text
@d36 5
a40 5
#include <X11/X.h>	/* for inputstr.h    */
#include <X11/Xproto.h>	/* Request macro     */
#include "inputstr.h"	/* DeviceIntPtr      */
#include "windowstr.h"	/* window structure  */
#include "scrnintstr.h"	/* screen structure  */
d46 1
a46 2
#include "mipointer.h" /* for miPointerUpdateSprite */

a57 2
    char n;

d59 10
a68 10
    swaps(&stuff->length, n);
    swapl(&stuff->src_win, n);
    swapl(&stuff->dst_win, n);
    swapl(&stuff->src_x, n);
    swapl(&stuff->src_y, n);
    swaps(&stuff->src_width, n);
    swaps(&stuff->src_height, n);
    swapl(&stuff->dst_x, n);
    swapl(&stuff->dst_y, n);
    swaps(&stuff->deviceid, n);
d91 1
a91 2
    if (rc != Success)
    {
d97 1
a97 2
        (IsMaster(pDev) && !IsPointerDevice(pDev)))
    {
d102 1
a102 2
    if (stuff->dst_win != None)
    {
d104 1
a104 2
        if (rc != Success)
        {
d114 4
a117 4
    src_x = stuff->src_x / (double)(1 << 16);
    src_y = stuff->src_y / (double)(1 << 16);
    dst_x = stuff->dst_x / (double)(1 << 16);
    dst_y = stuff->dst_y / (double)(1 << 16);
d119 1
a119 2
    if (stuff->src_win != None)
    {
d124 1
a124 2
        if (rc != Success)
        {
d132 7
a138 7
                x < winX + src_x ||
                y < winY + src_y ||
                (stuff->src_width != 0 &&
                 winX + src_x + (int)stuff->src_width < 0) ||
                (stuff->src_height != 0 &&
                 winY + src_y + (int)stuff->src_height < y) ||
                !PointInWindowIsVisible(src, x, y))
d142 1
a142 2
    if (dest)
    {
d146 2
a147 1
    } else
d163 1
a163 2
    if (newScreen == pSprite->hotPhys.pScreen)
    {
d176 3
a178 3
        (*newScreen->SetCursorPosition)(pDev, newScreen, x, y, TRUE);
    } else if (!PointerConfinedToScreen(pDev))
    {
a184 2
    pDev->last.remainder[0] = 0;
    pDev->last.remainder[1] = 0;
a190 1

@


1.1
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d100 1
a100 1
    if ((!IsMaster(pDev) && pDev->u.master) ||
d195 2
@

