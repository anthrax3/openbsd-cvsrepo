head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.12
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.10
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.6
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.12.09.17.58.52;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	vcnjRBuLQw44cPHf;

1.8
date	2014.05.02.19.27.46;	author matthieu;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2013.06.07.17.28.46;	author matthieu;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2012.06.10.13.21.20;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.47;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.25;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.20;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.11;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.34;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.05.19;	author matthieu;	state Exp;
branches;
next	;

1.7.4.1
date	2014.12.09.18.00.12;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.8.2.1
date	2014.12.09.17.59.32;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.9
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@/************************************************************

Copyright 1989, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

Copyright 1989 by Hewlett-Packard Company, Palo Alto, California.

			All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Hewlett-Packard not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

HEWLETT-PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
HEWLETT-PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

********************************************************/

/********************************************************************
 *
 *  Change Device control attributes for an extension device.
 *
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "inputstr.h"           /* DeviceIntPtr      */
#include <X11/extensions/XI.h>
#include <X11/extensions/XIproto.h>     /* control constants */
#include "XIstubs.h"

#include "exglobals.h"
#include "exevents.h"

#include "chgdctl.h"

/***********************************************************************
 *
 * This procedure changes the control attributes for an extension device,
 * for clients on machines with a different byte ordering than the server.
 *
 */

int
SProcXChangeDeviceControl(ClientPtr client)
{
    xDeviceCtl *ctl;

    REQUEST(xChangeDeviceControlReq);
    swaps(&stuff->length);
    REQUEST_AT_LEAST_EXTRA_SIZE(xChangeDeviceControlReq, sizeof(xDeviceCtl));
    swaps(&stuff->control);
    ctl = (xDeviceCtl *) &stuff[1];
    swaps(&ctl->control);
    swaps(&ctl->length);
    switch (stuff->control) {
    case DEVICE_ABS_CALIB:
    case DEVICE_ABS_AREA:
    case DEVICE_CORE:
    case DEVICE_ENABLE:
    case DEVICE_RESOLUTION:
        /* hmm. beer. *drool* */
        break;

    }
    return (ProcXChangeDeviceControl(client));
}

/***********************************************************************
 *
 * Change the control attributes.
 *
 */

int
ProcXChangeDeviceControl(ClientPtr client)
{
    unsigned len;
    int i, status, ret = BadValue;
    DeviceIntPtr dev;
    xDeviceResolutionCtl *r;
    xChangeDeviceControlReply rep;
    AxisInfoPtr a;
    CARD32 *resolution;
    xDeviceEnableCtl *e;

    REQUEST(xChangeDeviceControlReq);
    REQUEST_AT_LEAST_EXTRA_SIZE(xChangeDeviceControlReq, sizeof(xDeviceCtl));

    len = stuff->length - bytes_to_int32(sizeof(xChangeDeviceControlReq));
    ret = dixLookupDevice(&dev, stuff->deviceid, client, DixManageAccess);
    if (ret != Success)
        goto out;

    /* XTest devices are special, none of the below apply to them anyway */
    if (IsXTestDevice(dev, NULL)) {
        ret = BadMatch;
        goto out;
    }

    rep = (xChangeDeviceControlReply) {
        .repType = X_Reply,
        .RepType = X_ChangeDeviceControl,
        .sequenceNumber = client->sequence,
        .length = 0,
        .status = Success,
    };

    switch (stuff->control) {
    case DEVICE_RESOLUTION:
        r = (xDeviceResolutionCtl *) &stuff[1];
        if ((len < bytes_to_int32(sizeof(xDeviceResolutionCtl))) ||
            (len !=
             bytes_to_int32(sizeof(xDeviceResolutionCtl)) + r->num_valuators)) {
            ret = BadLength;
            goto out;
        }
        if (!dev->valuator) {
            ret = BadMatch;
            goto out;
        }
        if ((dev->deviceGrab.grab) && !SameClient(dev->deviceGrab.grab, client)) {
            rep.status = AlreadyGrabbed;
            ret = Success;
            goto out;
        }
        resolution = (CARD32 *) (r + 1);
        if (r->first_valuator + r->num_valuators > dev->valuator->numAxes) {
            ret = BadValue;
            goto out;
        }
        status = ChangeDeviceControl(client, dev, (xDeviceCtl *) r);
        if (status == Success) {
            a = &dev->valuator->axes[r->first_valuator];
            for (i = 0; i < r->num_valuators; i++)
                if (*(resolution + i) < (a + i)->min_resolution ||
                    *(resolution + i) > (a + i)->max_resolution)
                    return BadValue;
            for (i = 0; i < r->num_valuators; i++)
                (a++)->resolution = *resolution++;

            ret = Success;
        }
        else if (status == DeviceBusy) {
            rep.status = DeviceBusy;
            ret = Success;
        }
        else {
            ret = BadMatch;
        }
        break;
    case DEVICE_ABS_CALIB:
    case DEVICE_ABS_AREA:
        /* Calibration is now done through properties, and never had any effect
         * on anything (in the open-source world). Thus, be honest. */
        ret = BadMatch;
        break;
    case DEVICE_CORE:
        /* Sorry, no device core switching no more. If you want a device to
         * send core events, attach it to a master device */
        ret = BadMatch;
        break;
    case DEVICE_ENABLE:
        e = (xDeviceEnableCtl *) &stuff[1];
        if ((len != bytes_to_int32(sizeof(xDeviceEnableCtl)))) {
            ret = BadLength;
            goto out;
        }

        if (IsXTestDevice(dev, NULL))
            status = !Success;
        else
            status = ChangeDeviceControl(client, dev, (xDeviceCtl *) e);

        if (status == Success) {
            if (e->enable)
                EnableDevice(dev, TRUE);
            else
                DisableDevice(dev, TRUE);
            ret = Success;
        }
        else if (status == DeviceBusy) {
            rep.status = DeviceBusy;
            ret = Success;
        }
        else {
            ret = BadMatch;
        }

        break;
    default:
        ret = BadValue;
    }

 out:
    if (ret == Success) {
        devicePresenceNotify dpn = {
            .type = DevicePresenceNotify,
            .time = currentTime.milliseconds,
            .devchange = DeviceControlChanged,
            .deviceid = dev->id,
            .control = stuff->control
        };
        SendEventToAllWindows(dev, DevicePresenceNotifyMask,
                              (xEvent *) &dpn, 1);

        WriteReplyToClient(client, sizeof(xChangeDeviceControlReply), &rep);
    }

    return ret;
}

/***********************************************************************
 *
 * This procedure writes the reply for the xChangeDeviceControl function,
 * if the client and server have a different byte ordering.
 *
 */

void
SRepXChangeDeviceControl(ClientPtr client, int size,
                         xChangeDeviceControlReply * rep)
{
    swaps(&rep->sequenceNumber);
    swapl(&rep->length);
    WriteToClient(client, size, rep);
}
@


1.8
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d81 1
a81 1
    REQUEST_AT_LEAST_SIZE(xChangeDeviceControlReq);
d118 1
a118 1
    REQUEST_AT_LEAST_SIZE(xChangeDeviceControlReq);
d195 4
@


1.8.2.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d81 1
a81 1
    REQUEST_AT_LEAST_EXTRA_SIZE(xChangeDeviceControlReq, sizeof(xDeviceCtl));
d118 1
a118 1
    REQUEST_AT_LEAST_EXTRA_SIZE(xChangeDeviceControlReq, sizeof(xDeviceCtl));
a194 4
        if ((len != bytes_to_int32(sizeof(xDeviceEnableCtl)))) {
            ret = BadLength;
            goto out;
        }
@


1.7
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d125 6
@


1.7.4.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d81 1
a81 1
    REQUEST_AT_LEAST_EXTRA_SIZE(xChangeDeviceControlReq, sizeof(xDeviceCtl));
d118 1
a118 1
    REQUEST_AT_LEAST_EXTRA_SIZE(xChangeDeviceControlReq, sizeof(xDeviceCtl));
a188 4
        if ((len != bytes_to_int32(sizeof(xDeviceEnableCtl)))) {
            ret = BadLength;
            goto out;
        }
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a115 1
    devicePresenceNotify dpn;
d125 7
a131 4
    rep.repType = X_Reply;
    rep.RepType = X_ChangeDeviceControl;
    rep.length = 0;
    rep.sequenceNumber = client->sequence;
d190 4
a193 1
        status = ChangeDeviceControl(client, dev, (xDeviceCtl *) e);
d217 7
a223 5
        dpn.type = DevicePresenceNotify;
        dpn.time = currentTime.milliseconds;
        dpn.devchange = DeviceControlChanged;
        dpn.deviceid = dev->id;
        dpn.control = stuff->control;
d246 1
a246 1
    WriteToClient(client, size, (char *) rep);
@


1.5
log
@Update to xserver 1.11.2
@
text
@d57 1
a57 1
#include "inputstr.h"	/* DeviceIntPtr      */
d59 1
a59 1
#include <X11/extensions/XIproto.h>	/* control constants */
a76 1
    char n;
d80 1
a80 1
    swaps(&stuff->length, n);
d82 12
a93 12
    swaps(&stuff->control, n);
    ctl = (xDeviceCtl*)&stuff[1];
    swaps(&ctl->control, n);
    swaps(&ctl->length, n);
    switch(stuff->control) {
        case DEVICE_ABS_CALIB:
        case DEVICE_ABS_AREA:
        case DEVICE_CORE:
        case DEVICE_ENABLE:
        case DEVICE_RESOLUTION:
            /* hmm. beer. *drool* */
            break;
d133 4
a136 3
	r = (xDeviceResolutionCtl *) & stuff[1];
	if ((len < bytes_to_int32(sizeof(xDeviceResolutionCtl))) ||
	    (len != bytes_to_int32(sizeof(xDeviceResolutionCtl)) + r->num_valuators)) {
d139 2
a140 2
	}
	if (!dev->valuator) {
d143 3
a145 3
	}
	if ((dev->deviceGrab.grab) && !SameClient(dev->deviceGrab.grab, client)) {
	    rep.status = AlreadyGrabbed;
d148 3
a150 3
	}
	resolution = (CARD32 *) (r + 1);
	if (r->first_valuator + r->num_valuators > dev->valuator->numAxes) {
d153 10
a162 10
	}
	status = ChangeDeviceControl(client, dev, (xDeviceCtl *) r);
	if (status == Success) {
	    a = &dev->valuator->axes[r->first_valuator];
	    for (i = 0; i < r->num_valuators; i++)
		if (*(resolution + i) < (a + i)->min_resolution ||
		    *(resolution + i) > (a + i)->max_resolution)
		    return BadValue;
	    for (i = 0; i < r->num_valuators; i++)
		(a++)->resolution = *resolution++;
d165 3
a167 2
	} else if (status == DeviceBusy) {
	    rep.status = DeviceBusy;
d169 2
a170 1
	} else {
d172 2
a173 2
	}
	break;
d186 1
a186 1
        e = (xDeviceEnableCtl *)&stuff[1];
d196 2
a197 1
        } else if (status == DeviceBusy) {
d200 2
a201 1
        } else {
d210 1
a210 1
out:
d235 1
a235 1
			 xChangeDeviceControlReply * rep)
d237 3
a239 5
    char n;

    swaps(&rep->sequenceNumber, n);
    swapl(&rep->length, n);
    WriteToClient(client, size, (char *)rep);
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a78 2
    xDeviceAbsCalibCtl *calib;
    xDeviceAbsAreaCtl *area;
a88 11
            calib = (xDeviceAbsCalibCtl*)ctl;
            swaps(&calib->length, n);
            swapl(&calib->min_x, n);
            swapl(&calib->max_x, n);
            swapl(&calib->min_y, n);
            swapl(&calib->max_y, n);
            swapl(&calib->flip_x, n);
            swapl(&calib->flip_y, n);
            swapl(&calib->rotation, n);
            swapl(&calib->button_threshold, n);
            break;
a89 8
            area = (xDeviceAbsAreaCtl*)ctl;
            swapl(&area->offset_x, n);
            swapl(&area->offset_y, n);
            swapl(&area->width, n);
            swapl(&area->height, n);
            swapl(&area->screen, n);
            swapl(&area->following, n);
            break;
a115 2
    xDeviceAbsCalibCtl *calib;
    xDeviceAbsAreaCtl *area;
a172 27
        calib = (xDeviceAbsCalibCtl *)&stuff[1];

        if (calib->button_threshold < 0 || calib->button_threshold > 255) {
            ret = BadValue;
            goto out;
        }

        status = ChangeDeviceControl(client, dev, (xDeviceCtl *) calib);

        if (status == Success) {
            dev->absolute->min_x = calib->min_x;
            dev->absolute->max_x = calib->max_x;
            dev->absolute->min_y = calib->min_y;
            dev->absolute->max_y = calib->max_y;
            dev->absolute->flip_x = calib->flip_x;
            dev->absolute->flip_y = calib->flip_y;
            dev->absolute->rotation = calib->rotation;
            dev->absolute->button_threshold = calib->button_threshold;
            ret = Success;
        } else if (status == DeviceBusy || status == BadValue) {
            rep.status = status;
            ret = Success;
        } else {
            ret = BadMatch;
        }

        break;
d174 3
a176 19
        area = (xDeviceAbsAreaCtl *)&stuff[1];

        status = ChangeDeviceControl(client, dev, (xDeviceCtl *) area);

        if (status == Success) {
            dev->absolute->offset_x = area->offset_x;
            dev->absolute->offset_y = area->offset_y;
            dev->absolute->width = area->width;
            dev->absolute->height = area->height;
            dev->absolute->screen = area->screen;
            dev->absolute->following = area->following;
            ret = Success;
        } else if (status == DeviceBusy || status == BadValue) {
            rep.status = status;
            ret = Success;
        } else {
            ret = Success;
        }

@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a52 2
#define	 NEED_EVENTS	/* for inputstr.h    */
#define	 NEED_REPLIES
d145 1
a145 1
    len = stuff->length - (sizeof(xChangeDeviceControlReq) >> 2);
d158 2
a159 2
	if ((len < (sizeof(xDeviceResolutionCtl) >> 2)) ||
	    (len != (sizeof(xDeviceResolutionCtl) >> 2) + r->num_valuators)) {
d256 1
a256 1
                EnableDevice(dev);
d258 1
a258 1
                DisableDevice(dev);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a140 1
    xDeviceCoreCtl *c;
d169 1
a169 1
	if ((dev->grab) && !SameClient(dev->grab, client)) {
d247 3
a249 14
        c = (xDeviceCoreCtl *)&stuff[1];

        status = ChangeDeviceControl(client, dev, (xDeviceCtl *) c);

        if (status == Success) {
            dev->coreEvents = c->status;
            ret = Success;
        } else if (status == DeviceBusy) {
            rep.status = DeviceBusy;
            ret = Success;
        } else {
            ret = BadMatch;
        }

@


1.1
log
@Initial revision
@
text
@a58 2
#include <X11/X.h>	/* for inputstr.h    */
#include <X11/Xproto.h>	/* Request macro     */
a63 2
#include "extnsionst.h"
#include "extinit.h"	/* LookupDeviceIntRec */
d65 1
d77 1
a77 1
SProcXChangeDeviceControl(register ClientPtr client)
d79 4
a82 1
    register char n;
d88 32
d133 1
a133 1
    int i, status;
d139 5
d149 3
a151 6
    dev = LookupDeviceIntRec(stuff->deviceid);
    if (dev == NULL) {
	SendErrorToClient(client, IReqCode, X_ChangeDeviceControl, 0,
			  BadDevice);
	return Success;
    }
d163 2
a164 3
	    SendErrorToClient(client, IReqCode, X_ChangeDeviceControl,
			      0, BadLength);
	    return Success;
d167 2
a168 3
	    SendErrorToClient(client, IReqCode, X_ChangeDeviceControl, 0,
			      BadMatch);
	    return Success;
d172 2
a173 2
	    WriteReplyToClient(client, sizeof(xChangeDeviceControlReply), &rep);
	    return Success;
d177 2
a178 3
	    SendErrorToClient(client, IReqCode, X_ChangeDeviceControl, 0,
			      BadValue);
	    return Success;
d185 2
a186 5
		    *(resolution + i) > (a + i)->max_resolution) {
		    SendErrorToClient(client, IReqCode,
				      X_ChangeDeviceControl, 0, BadValue);
		    return Success;
		}
d189 2
d193 1
a193 2
	    WriteReplyToClient(client, sizeof(xChangeDeviceControlReply), &rep);
	    return Success;
d195 1
a195 3
	    SendErrorToClient(client, IReqCode, X_ChangeDeviceControl, 0,
			      BadMatch);
	    return Success;
d198 84
d283 1
a283 2
	SendErrorToClient(client, IReqCode, X_ChangeDeviceControl, 0, BadValue);
	return Success;
d285 15
a299 2
    WriteReplyToClient(client, sizeof(xChangeDeviceControlReply), &rep);
    return Success;
d313 1
a313 1
    register char n;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@a68 1
#include "exevents.h"
d80 1
a80 1
SProcXChangeDeviceControl(ClientPtr client)
d82 1
a82 1
    char n;
d101 1
a101 1
    int i, status, ret = BadValue;
a106 5
    xDeviceAbsCalibCtl *calib;
    xDeviceAbsAreaCtl *area;
    xDeviceCoreCtl *c;
    xDeviceEnableCtl *e;
    devicePresenceNotify dpn;
d114 3
a116 2
        ret = BadDevice;
        goto out;
d129 3
a131 2
            ret = BadLength;
            goto out;
d134 3
a136 2
            ret = BadMatch;
            goto out;
d140 2
a141 2
            ret = Success;
            goto out;
d145 3
a147 2
            ret = BadValue;
            goto out;
a160 2

            ret = Success;
d163 2
a164 1
            ret = Success;
d166 3
a168 1
            ret = BadMatch;
a170 84
    case DEVICE_ABS_CALIB:
        calib = (xDeviceAbsCalibCtl *)&stuff[1];

        if (calib->button_threshold < 0 || calib->button_threshold > 255) {
            ret = BadValue;
            goto out;
        }

        status = ChangeDeviceControl(client, dev, (xDeviceCtl *) calib);

        if (status == Success) {
            dev->absolute->min_x = calib->min_x;
            dev->absolute->max_x = calib->max_x;
            dev->absolute->min_y = calib->min_y;
            dev->absolute->max_y = calib->max_y;
            dev->absolute->flip_x = calib->flip_x;
            dev->absolute->flip_y = calib->flip_y;
            dev->absolute->rotation = calib->rotation;
            dev->absolute->button_threshold = calib->button_threshold;
            ret = Success;
        } else if (status == DeviceBusy || status == BadValue) {
            rep.status = status;
            ret = Success;
        } else {
            ret = BadMatch;
        }

        break;
    case DEVICE_ABS_AREA:
        area = (xDeviceAbsAreaCtl *)&stuff[1];

        status = ChangeDeviceControl(client, dev, (xDeviceCtl *) area);

        if (status == Success) {
            dev->absolute->offset_x = area->offset_x;
            dev->absolute->offset_y = area->offset_y;
            dev->absolute->width = area->width;
            dev->absolute->height = area->height;
            dev->absolute->screen = area->screen;
            dev->absolute->following = area->following;
            ret = Success;
        } else if (status == DeviceBusy || status == BadValue) {
            rep.status = status;
            ret = Success;
        } else {
            ret = Success;
        }

        break;
    case DEVICE_CORE:
        c = (xDeviceCoreCtl *)&stuff[1];

        status = ChangeDeviceControl(client, dev, (xDeviceCtl *) c);

        if (status == Success) {
            dev->coreEvents = c->status;
            ret = Success;
        } else if (status == DeviceBusy) {
            rep.status = DeviceBusy;
            ret = Success;
        } else {
            ret = BadMatch;
        }

        break;
    case DEVICE_ENABLE:
        e = (xDeviceEnableCtl *)&stuff[1];

        status = ChangeDeviceControl(client, dev, (xDeviceCtl *) e);

        if (status == Success) {
            if (e->enable)
                EnableDevice(dev);
            else
                DisableDevice(dev);
            ret = Success;
        } else if (status == DeviceBusy) {
            rep.status = DeviceBusy;
            ret = Success;
        } else {
            ret = BadMatch;
        }

        break;
d172 2
a173 14
        ret = BadValue;
    }

out:
    if (ret == Success) {
        dpn.type = DevicePresenceNotify;
        dpn.time = currentTime.milliseconds;
        dpn.devchange = 1;
        dpn.deviceid = dev->id;
        dpn.control = stuff->control;
        SendEventToAllWindows(dev, DevicePresenceNotifyMask,
                              (xEvent *) &dpn, 1);

        WriteReplyToClient(client, sizeof(xChangeDeviceControlReply), &rep);
d175 1
a175 4
    else {
        SendErrorToClient(client, IReqCode, X_ChangeDeviceControl, 0, ret);
    }

d190 1
a190 1
    char n;
@

