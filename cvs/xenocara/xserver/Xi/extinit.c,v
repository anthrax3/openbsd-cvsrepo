head	1.17;
access;
symbols
	OPENBSD_6_0:1.17.0.8
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.6
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.2
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.15.0.2
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2014.09.27.17.52.59;	author matthieu;	state Exp;
branches;
next	1.16;
commitid	cVXoV5PxI8YrEaVA;

1.16
date	2014.05.02.19.27.46;	author matthieu;	state Exp;
branches;
next	1.15;

1.15
date	2013.08.24.19.44.29;	author matthieu;	state Exp;
branches;
next	1.14;

1.14
date	2013.06.07.17.28.46;	author matthieu;	state Exp;
branches;
next	1.13;

1.13
date	2012.08.05.18.11.37;	author matthieu;	state Exp;
branches;
next	1.12;

1.12
date	2012.06.10.13.21.20;	author matthieu;	state Exp;
branches;
next	1.11;

1.11
date	2011.12.18.16.08.59;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.05.13.32.47;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2011.04.01.21.28.00;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2011.04.01.21.27.04;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.27.19.51.09;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.12.21.20.10.44;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.03;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.25;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.20;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.11;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.32;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.32;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.05.21;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/************************************************************

Copyright 1989, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

Copyright 1989 by Hewlett-Packard Company, Palo Alto, California.

			All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Hewlett-Packard not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

HEWLETT-PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
HEWLETT-PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

********************************************************/

/********************************************************************
 *
 *  Dispatch routines and initialization routines for the X input extension.
 *
 */
#define	 NUMTYPES 15

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "inputstr.h"
#include "gcstruct.h"           /* pointer for extnsionst.h */
#include "extnsionst.h"         /* extension entry   */
#include <X11/extensions/XI.h>
#include <X11/extensions/XIproto.h>
#include <X11/extensions/XI2proto.h>
#include <X11/extensions/geproto.h>
#include "geext.h"              /* extension interfaces for ge */

#include "dixevents.h"
#include "exevents.h"
#include "extinit.h"
#include "exglobals.h"
#include "swaprep.h"
#include "privates.h"
#include "protocol-versions.h"

/* modules local to Xi */
#include "allowev.h"
#include "chgdctl.h"
#include "chgfctl.h"
#include "chgkbd.h"
#include "chgprop.h"
#include "chgptr.h"
#include "closedev.h"
#include "devbell.h"
#include "getbmap.h"
#include "getdctl.h"
#include "getfctl.h"
#include "getfocus.h"
#include "getkmap.h"
#include "getmmap.h"
#include "getprop.h"
#include "getselev.h"
#include "getvers.h"
#include "grabdev.h"
#include "grabdevb.h"
#include "grabdevk.h"
#include "gtmotion.h"
#include "listdev.h"
#include "opendev.h"
#include "queryst.h"
#include "selectev.h"
#include "sendexev.h"
#include "chgkmap.h"
#include "setbmap.h"
#include "setdval.h"
#include "setfocus.h"
#include "setmmap.h"
#include "setmode.h"
#include "ungrdev.h"
#include "ungrdevb.h"
#include "ungrdevk.h"
#include "xiallowev.h"
#include "xiselectev.h"
#include "xigrabdev.h"
#include "xipassivegrab.h"
#include "xisetdevfocus.h"
#include "xiproperty.h"
#include "xichangecursor.h"
#include "xichangehierarchy.h"
#include "xigetclientpointer.h"
#include "xiquerydevice.h"
#include "xiquerypointer.h"
#include "xiqueryversion.h"
#include "xisetclientpointer.h"
#include "xiwarppointer.h"
#include "xibarriers.h"

/* Masks for XI events have to be aligned with core event (partially anyway).
 * If DeviceButtonMotionMask is != ButtonMotionMask, event delivery
 * breaks down. The device needs the dev->button->motionMask. If DBMM is
 * the same as BMM, we can ensure that both core and device events can be
 * delivered, without the need for extra structures in the DeviceIntRec. */
const Mask DeviceKeyPressMask = KeyPressMask;
const Mask DeviceKeyReleaseMask = KeyReleaseMask;
const Mask DeviceButtonPressMask = ButtonPressMask;
const Mask DeviceButtonReleaseMask = ButtonReleaseMask;
const Mask DeviceProximityMask = (1L << 4);
const Mask DeviceStateNotifyMask = (1L << 5);
const Mask DevicePointerMotionMask = PointerMotionMask;
const Mask DevicePointerMotionHintMask = PointerMotionHintMask;
const Mask DeviceButton1MotionMask = Button1MotionMask;
const Mask DeviceButton2MotionMask = Button2MotionMask;
const Mask DeviceButton3MotionMask = Button3MotionMask;
const Mask DeviceButton4MotionMask = Button4MotionMask;
const Mask DeviceButton5MotionMask = Button5MotionMask;
const Mask DeviceButtonMotionMask = ButtonMotionMask;
const Mask DeviceFocusChangeMask = (1L << 14);
const Mask DeviceMappingNotifyMask = (1L << 15);
const Mask ChangeDeviceNotifyMask = (1L << 16);
const Mask DeviceButtonGrabMask = (1L << 17);
const Mask DeviceOwnerGrabButtonMask = (1L << 17);
const Mask DevicePresenceNotifyMask = (1L << 18);
const Mask DevicePropertyNotifyMask = (1L << 19);
const Mask XIAllMasks = (1L << 20) - 1;

int ExtEventIndex;
Mask ExtExclusiveMasks[EMASKSIZE];

static struct dev_type {
    Atom type;
    const char *name;
} dev_type[] = {
    {0, XI_KEYBOARD},
    {0, XI_MOUSE},
    {0, XI_TABLET},
    {0, XI_TOUCHSCREEN},
    {0, XI_TOUCHPAD},
    {0, XI_BARCODE},
    {0, XI_BUTTONBOX},
    {0, XI_KNOB_BOX},
    {0, XI_ONE_KNOB},
    {0, XI_NINE_KNOB},
    {0, XI_TRACKBALL},
    {0, XI_QUADRATURE},
    {0, XI_ID_MODULE},
    {0, XI_SPACEBALL},
    {0, XI_DATAGLOVE},
    {0, XI_EYETRACKER},
    {0, XI_CURSORKEYS},
    {0, XI_FOOTMOUSE}
};

CARD8 event_base[numInputClasses];
XExtEventInfo EventInfo[32];

static DeviceIntRec xi_all_devices;
static DeviceIntRec xi_all_master_devices;

/**
 * Dispatch vector. Functions defined in here will be called when the matching
 * request arrives.
 */
static int (*ProcIVector[]) (ClientPtr) = {
    NULL,                       /*  0 */
        ProcXGetExtensionVersion,       /*  1 */
        ProcXListInputDevices,  /*  2 */
        ProcXOpenDevice,        /*  3 */
        ProcXCloseDevice,       /*  4 */
        ProcXSetDeviceMode,     /*  5 */
        ProcXSelectExtensionEvent,      /*  6 */
        ProcXGetSelectedExtensionEvents,        /*  7 */
        ProcXChangeDeviceDontPropagateList,     /*  8 */
        ProcXGetDeviceDontPropagateList,        /*  9 */
        ProcXGetDeviceMotionEvents,     /* 10 */
        ProcXChangeKeyboardDevice,      /* 11 */
        ProcXChangePointerDevice,       /* 12 */
        ProcXGrabDevice,        /* 13 */
        ProcXUngrabDevice,      /* 14 */
        ProcXGrabDeviceKey,     /* 15 */
        ProcXUngrabDeviceKey,   /* 16 */
        ProcXGrabDeviceButton,  /* 17 */
        ProcXUngrabDeviceButton,        /* 18 */
        ProcXAllowDeviceEvents, /* 19 */
        ProcXGetDeviceFocus,    /* 20 */
        ProcXSetDeviceFocus,    /* 21 */
        ProcXGetFeedbackControl,        /* 22 */
        ProcXChangeFeedbackControl,     /* 23 */
        ProcXGetDeviceKeyMapping,       /* 24 */
        ProcXChangeDeviceKeyMapping,    /* 25 */
        ProcXGetDeviceModifierMapping,  /* 26 */
        ProcXSetDeviceModifierMapping,  /* 27 */
        ProcXGetDeviceButtonMapping,    /* 28 */
        ProcXSetDeviceButtonMapping,    /* 29 */
        ProcXQueryDeviceState,  /* 30 */
        ProcXSendExtensionEvent,        /* 31 */
        ProcXDeviceBell,        /* 32 */
        ProcXSetDeviceValuators,        /* 33 */
        ProcXGetDeviceControl,  /* 34 */
        ProcXChangeDeviceControl,       /* 35 */
        /* XI 1.5 */
        ProcXListDeviceProperties,      /* 36 */
        ProcXChangeDeviceProperty,      /* 37 */
        ProcXDeleteDeviceProperty,      /* 38 */
        ProcXGetDeviceProperty, /* 39 */
        /* XI 2 */
        ProcXIQueryPointer,     /* 40 */
        ProcXIWarpPointer,      /* 41 */
        ProcXIChangeCursor,     /* 42 */
        ProcXIChangeHierarchy,  /* 43 */
        ProcXISetClientPointer, /* 44 */
        ProcXIGetClientPointer, /* 45 */
        ProcXISelectEvents,     /* 46 */
        ProcXIQueryVersion,     /* 47 */
        ProcXIQueryDevice,      /* 48 */
        ProcXISetFocus,         /* 49 */
        ProcXIGetFocus,         /* 50 */
        ProcXIGrabDevice,       /* 51 */
        ProcXIUngrabDevice,     /* 52 */
        ProcXIAllowEvents,      /* 53 */
        ProcXIPassiveGrabDevice,        /* 54 */
        ProcXIPassiveUngrabDevice,      /* 55 */
        ProcXIListProperties,   /* 56 */
        ProcXIChangeProperty,   /* 57 */
        ProcXIDeleteProperty,   /* 58 */
        ProcXIGetProperty,      /* 59 */
        ProcXIGetSelectedEvents, /* 60 */
        ProcXIBarrierReleasePointer /* 61 */
};

/* For swapped clients */
static int (*SProcIVector[]) (ClientPtr) = {
    NULL,                       /*  0 */
        SProcXGetExtensionVersion,      /*  1 */
        SProcXListInputDevices, /*  2 */
        SProcXOpenDevice,       /*  3 */
        SProcXCloseDevice,      /*  4 */
        SProcXSetDeviceMode,    /*  5 */
        SProcXSelectExtensionEvent,     /*  6 */
        SProcXGetSelectedExtensionEvents,       /*  7 */
        SProcXChangeDeviceDontPropagateList,    /*  8 */
        SProcXGetDeviceDontPropagateList,       /*  9 */
        SProcXGetDeviceMotionEvents,    /* 10 */
        SProcXChangeKeyboardDevice,     /* 11 */
        SProcXChangePointerDevice,      /* 12 */
        SProcXGrabDevice,       /* 13 */
        SProcXUngrabDevice,     /* 14 */
        SProcXGrabDeviceKey,    /* 15 */
        SProcXUngrabDeviceKey,  /* 16 */
        SProcXGrabDeviceButton, /* 17 */
        SProcXUngrabDeviceButton,       /* 18 */
        SProcXAllowDeviceEvents,        /* 19 */
        SProcXGetDeviceFocus,   /* 20 */
        SProcXSetDeviceFocus,   /* 21 */
        SProcXGetFeedbackControl,       /* 22 */
        SProcXChangeFeedbackControl,    /* 23 */
        SProcXGetDeviceKeyMapping,      /* 24 */
        SProcXChangeDeviceKeyMapping,   /* 25 */
        SProcXGetDeviceModifierMapping, /* 26 */
        SProcXSetDeviceModifierMapping, /* 27 */
        SProcXGetDeviceButtonMapping,   /* 28 */
        SProcXSetDeviceButtonMapping,   /* 29 */
        SProcXQueryDeviceState, /* 30 */
        SProcXSendExtensionEvent,       /* 31 */
        SProcXDeviceBell,       /* 32 */
        SProcXSetDeviceValuators,       /* 33 */
        SProcXGetDeviceControl, /* 34 */
        SProcXChangeDeviceControl,      /* 35 */
        SProcXListDeviceProperties,     /* 36 */
        SProcXChangeDeviceProperty,     /* 37 */
        SProcXDeleteDeviceProperty,     /* 38 */
        SProcXGetDeviceProperty,        /* 39 */
        SProcXIQueryPointer,    /* 40 */
        SProcXIWarpPointer,     /* 41 */
        SProcXIChangeCursor,    /* 42 */
        SProcXIChangeHierarchy, /* 43 */
        SProcXISetClientPointer,        /* 44 */
        SProcXIGetClientPointer,        /* 45 */
        SProcXISelectEvents,    /* 46 */
        SProcXIQueryVersion,    /* 47 */
        SProcXIQueryDevice,     /* 48 */
        SProcXISetFocus,        /* 49 */
        SProcXIGetFocus,        /* 50 */
        SProcXIGrabDevice,      /* 51 */
        SProcXIUngrabDevice,    /* 52 */
        SProcXIAllowEvents,     /* 53 */
        SProcXIPassiveGrabDevice,       /* 54 */
        SProcXIPassiveUngrabDevice,     /* 55 */
        SProcXIListProperties,  /* 56 */
        SProcXIChangeProperty,  /* 57 */
        SProcXIDeleteProperty,  /* 58 */
        SProcXIGetProperty,     /* 59 */
        SProcXIGetSelectedEvents,       /* 60 */
        SProcXIBarrierReleasePointer /* 61 */
};

/*****************************************************************
 *
 * Globals referenced elsewhere in the server.
 *
 */

int IReqCode = 0;
int IEventBase = 0;
int BadDevice = 0;
static int BadEvent = 1;
int BadMode = 2;
int DeviceBusy = 3;
int BadClass = 4;

int DeviceValuator;
int DeviceKeyPress;
int DeviceKeyRelease;
int DeviceButtonPress;
int DeviceButtonRelease;
int DeviceMotionNotify;
int DeviceFocusIn;
int DeviceFocusOut;
int ProximityIn;
int ProximityOut;
int DeviceStateNotify;
int DeviceKeyStateNotify;
int DeviceButtonStateNotify;
int DeviceMappingNotify;
int ChangeDeviceNotify;
int DevicePresenceNotify;
int DevicePropertyNotify;

RESTYPE RT_INPUTCLIENT;

/*****************************************************************
 *
 * Externs defined elsewhere in the X server.
 *
 */

extern XExtensionVersion XIVersion;

Mask PropagateMask[EMASKSIZE];

/*****************************************************************
 *
 * Versioning support
 *
 */

DevPrivateKeyRec XIClientPrivateKeyRec;

/*****************************************************************
 *
 * Declarations of local routines.
 *
 */

static void
XIClientCallback(CallbackListPtr *list, void *closure, void *data)
{
    NewClientInfoRec *clientinfo = (NewClientInfoRec *) data;
    ClientPtr pClient = clientinfo->client;
    XIClientPtr pXIClient;

    pXIClient = dixLookupPrivate(&pClient->devPrivates, XIClientPrivateKey);
    pXIClient->major_version = 0;
    pXIClient->minor_version = 0;
}

/*************************************************************************
 *
 * ProcIDispatch - main dispatch routine for requests to this extension.
 * This routine is used if server and client have the same byte ordering.
 *
 */

static int
ProcIDispatch(ClientPtr client)
{
    REQUEST(xReq);
    if (stuff->data >= ARRAY_SIZE(ProcIVector) || !ProcIVector[stuff->data])
        return BadRequest;

    return (*ProcIVector[stuff->data]) (client);
}

/*******************************************************************************
 *
 * SProcXDispatch
 *
 * Main swapped dispatch routine for requests to this extension.
 * This routine is used if server and client do not have the same byte ordering.
 *
 */

static int
SProcIDispatch(ClientPtr client)
{
    REQUEST(xReq);
    if (stuff->data >= ARRAY_SIZE(SProcIVector) || !SProcIVector[stuff->data])
        return BadRequest;

    return (*SProcIVector[stuff->data]) (client);
}

/**********************************************************************
 *
 * SReplyIDispatch
 * Swap any replies defined in this extension.
 *
 */

static void
SReplyIDispatch(ClientPtr client, int len, xGrabDeviceReply * rep)
{
    /* All we look at is the type field */
    /* This is common to all replies    */
    if (rep->RepType == X_GetExtensionVersion)
        SRepXGetExtensionVersion(client, len,
                                 (xGetExtensionVersionReply *) rep);
    else if (rep->RepType == X_ListInputDevices)
        SRepXListInputDevices(client, len, (xListInputDevicesReply *) rep);
    else if (rep->RepType == X_OpenDevice)
        SRepXOpenDevice(client, len, (xOpenDeviceReply *) rep);
    else if (rep->RepType == X_SetDeviceMode)
        SRepXSetDeviceMode(client, len, (xSetDeviceModeReply *) rep);
    else if (rep->RepType == X_GetSelectedExtensionEvents)
        SRepXGetSelectedExtensionEvents(client, len,
                                        (xGetSelectedExtensionEventsReply *)
                                        rep);
    else if (rep->RepType == X_GetDeviceDontPropagateList)
        SRepXGetDeviceDontPropagateList(client, len,
                                        (xGetDeviceDontPropagateListReply *)
                                        rep);
    else if (rep->RepType == X_GetDeviceMotionEvents)
        SRepXGetDeviceMotionEvents(client, len,
                                   (xGetDeviceMotionEventsReply *) rep);
    else if (rep->RepType == X_GrabDevice)
        SRepXGrabDevice(client, len, (xGrabDeviceReply *) rep);
    else if (rep->RepType == X_GetDeviceFocus)
        SRepXGetDeviceFocus(client, len, (xGetDeviceFocusReply *) rep);
    else if (rep->RepType == X_GetFeedbackControl)
        SRepXGetFeedbackControl(client, len, (xGetFeedbackControlReply *) rep);
    else if (rep->RepType == X_GetDeviceKeyMapping)
        SRepXGetDeviceKeyMapping(client, len,
                                 (xGetDeviceKeyMappingReply *) rep);
    else if (rep->RepType == X_GetDeviceModifierMapping)
        SRepXGetDeviceModifierMapping(client, len,
                                      (xGetDeviceModifierMappingReply *) rep);
    else if (rep->RepType == X_SetDeviceModifierMapping)
        SRepXSetDeviceModifierMapping(client, len,
                                      (xSetDeviceModifierMappingReply *) rep);
    else if (rep->RepType == X_GetDeviceButtonMapping)
        SRepXGetDeviceButtonMapping(client, len,
                                    (xGetDeviceButtonMappingReply *) rep);
    else if (rep->RepType == X_SetDeviceButtonMapping)
        SRepXSetDeviceButtonMapping(client, len,
                                    (xSetDeviceButtonMappingReply *) rep);
    else if (rep->RepType == X_QueryDeviceState)
        SRepXQueryDeviceState(client, len, (xQueryDeviceStateReply *) rep);
    else if (rep->RepType == X_SetDeviceValuators)
        SRepXSetDeviceValuators(client, len, (xSetDeviceValuatorsReply *) rep);
    else if (rep->RepType == X_GetDeviceControl)
        SRepXGetDeviceControl(client, len, (xGetDeviceControlReply *) rep);
    else if (rep->RepType == X_ChangeDeviceControl)
        SRepXChangeDeviceControl(client, len,
                                 (xChangeDeviceControlReply *) rep);
    else if (rep->RepType == X_ListDeviceProperties)
        SRepXListDeviceProperties(client, len,
                                  (xListDevicePropertiesReply *) rep);
    else if (rep->RepType == X_GetDeviceProperty)
        SRepXGetDeviceProperty(client, len, (xGetDevicePropertyReply *) rep);
    else if (rep->RepType == X_XIQueryPointer)
        SRepXIQueryPointer(client, len, (xXIQueryPointerReply *) rep);
    else if (rep->RepType == X_XIGetClientPointer)
        SRepXIGetClientPointer(client, len, (xXIGetClientPointerReply *) rep);
    else if (rep->RepType == X_XIQueryVersion)
        SRepXIQueryVersion(client, len, (xXIQueryVersionReply *) rep);
    else if (rep->RepType == X_XIQueryDevice)
        SRepXIQueryDevice(client, len, (xXIQueryDeviceReply *) rep);
    else if (rep->RepType == X_XIGrabDevice)
        SRepXIGrabDevice(client, len, (xXIGrabDeviceReply *) rep);
    else if (rep->RepType == X_XIPassiveGrabDevice)
        SRepXIPassiveGrabDevice(client, len, (xXIPassiveGrabDeviceReply *) rep);
    else if (rep->RepType == X_XIListProperties)
        SRepXIListProperties(client, len, (xXIListPropertiesReply *) rep);
    else if (rep->RepType == X_XIGetProperty)
        SRepXIGetProperty(client, len, (xXIGetPropertyReply *) rep);
    else if (rep->RepType == X_XIGetSelectedEvents)
        SRepXIGetSelectedEvents(client, len, (xXIGetSelectedEventsReply *) rep);
    else if (rep->RepType == X_XIGetFocus)
        SRepXIGetFocus(client, len, (xXIGetFocusReply *) rep);
    else {
        FatalError("XINPUT confused sending swapped reply");
    }
}

/************************************************************************
 *
 * This function swaps the DeviceValuator event.
 *
 */

static void
SEventDeviceValuator(deviceValuator * from, deviceValuator * to)
{
    int i;
    INT32 *ip B32;

    *to = *from;
    swaps(&to->sequenceNumber);
    swaps(&to->device_state);
    ip = &to->valuator0;
    for (i = 0; i < 6; i++) {
        swapl(ip + i);
    }
}

static void
SEventFocus(deviceFocus * from, deviceFocus * to)
{
    *to = *from;
    swaps(&to->sequenceNumber);
    swapl(&to->time);
    swapl(&to->window);
}

static void
SDeviceStateNotifyEvent(deviceStateNotify * from, deviceStateNotify * to)
{
    int i;
    INT32 *ip B32;

    *to = *from;
    swaps(&to->sequenceNumber);
    swapl(&to->time);
    ip = &to->valuator0;
    for (i = 0; i < 3; i++) {
        swapl(ip + i);
    }
}

static void
SDeviceKeyStateNotifyEvent(deviceKeyStateNotify * from,
                           deviceKeyStateNotify * to)
{
    *to = *from;
    swaps(&to->sequenceNumber);
}

static void
SDeviceButtonStateNotifyEvent(deviceButtonStateNotify * from,
                              deviceButtonStateNotify * to)
{
    *to = *from;
    swaps(&to->sequenceNumber);
}

static void
SChangeDeviceNotifyEvent(changeDeviceNotify * from, changeDeviceNotify * to)
{
    *to = *from;
    swaps(&to->sequenceNumber);
    swapl(&to->time);
}

static void
SDeviceMappingNotifyEvent(deviceMappingNotify * from, deviceMappingNotify * to)
{
    *to = *from;
    swaps(&to->sequenceNumber);
    swapl(&to->time);
}

static void
SDevicePresenceNotifyEvent(devicePresenceNotify * from,
                           devicePresenceNotify * to)
{
    *to = *from;
    swaps(&to->sequenceNumber);
    swapl(&to->time);
    swaps(&to->control);
}

static void
SDevicePropertyNotifyEvent(devicePropertyNotify * from,
                           devicePropertyNotify * to)
{
    *to = *from;
    swaps(&to->sequenceNumber);
    swapl(&to->time);
    swapl(&to->atom);
}

static void
SDeviceLeaveNotifyEvent(xXILeaveEvent * from, xXILeaveEvent * to)
{
    *to = *from;
    swaps(&to->sequenceNumber);
    swapl(&to->length);
    swaps(&to->evtype);
    swaps(&to->deviceid);
    swapl(&to->time);
    swapl(&to->root);
    swapl(&to->event);
    swapl(&to->child);
    swapl(&to->root_x);
    swapl(&to->root_y);
    swapl(&to->event_x);
    swapl(&to->event_y);
    swaps(&to->sourceid);
    swaps(&to->buttons_len);
    swapl(&to->mods.base_mods);
    swapl(&to->mods.latched_mods);
    swapl(&to->mods.locked_mods);
}

static void
SDeviceChangedEvent(xXIDeviceChangedEvent * from, xXIDeviceChangedEvent * to)
{
    int i, j;
    xXIAnyInfo *any;

    *to = *from;
    memcpy(&to[1], &from[1], from->length * 4);

    any = (xXIAnyInfo *) &to[1];
    for (i = 0; i < to->num_classes; i++) {
        int length = any->length;

        switch (any->type) {
        case KeyClass:
        {
            xXIKeyInfo *ki = (xXIKeyInfo *) any;
            uint32_t *key = (uint32_t *) &ki[1];

            for (j = 0; j < ki->num_keycodes; j++, key++)
                swapl(key);
            swaps(&ki->num_keycodes);
        }
            break;
        case ButtonClass:
        {
            xXIButtonInfo *bi = (xXIButtonInfo *) any;
            Atom *labels = (Atom *) ((char *) bi + sizeof(xXIButtonInfo) +
                                     pad_to_int32(bits_to_bytes
                                                  (bi->num_buttons)));
            for (j = 0; j < bi->num_buttons; j++)
                swapl(&labels[j]);
            swaps(&bi->num_buttons);
        }
            break;
        case ValuatorClass:
        {
            xXIValuatorInfo *ai = (xXIValuatorInfo *) any;

            swapl(&ai->label);
            swapl(&ai->min.integral);
            swapl(&ai->min.frac);
            swapl(&ai->max.integral);
            swapl(&ai->max.frac);
            swapl(&ai->resolution);
            swaps(&ai->number);
        }
            break;
        }

        swaps(&any->type);
        swaps(&any->length);
        swaps(&any->sourceid);

        any = (xXIAnyInfo *) ((char *) any + length * 4);
    }

    swaps(&to->sequenceNumber);
    swapl(&to->length);
    swaps(&to->evtype);
    swaps(&to->deviceid);
    swapl(&to->time);
    swaps(&to->num_classes);
    swaps(&to->sourceid);

}

static void
SDeviceEvent(xXIDeviceEvent * from, xXIDeviceEvent * to)
{
    int i;
    char *ptr;
    char *vmask;

    memcpy(to, from, sizeof(xEvent) + from->length * 4);

    swaps(&to->sequenceNumber);
    swapl(&to->length);
    swaps(&to->evtype);
    swaps(&to->deviceid);
    swapl(&to->time);
    swapl(&to->detail);
    swapl(&to->root);
    swapl(&to->event);
    swapl(&to->child);
    swapl(&to->root_x);
    swapl(&to->root_y);
    swapl(&to->event_x);
    swapl(&to->event_y);
    swaps(&to->buttons_len);
    swaps(&to->valuators_len);
    swaps(&to->sourceid);
    swapl(&to->mods.base_mods);
    swapl(&to->mods.latched_mods);
    swapl(&to->mods.locked_mods);
    swapl(&to->mods.effective_mods);
    swapl(&to->flags);

    ptr = (char *) (&to[1]);
    ptr += from->buttons_len * 4;
    vmask = ptr;                /* valuator mask */
    ptr += from->valuators_len * 4;
    for (i = 0; i < from->valuators_len * 32; i++) {
        if (BitIsOn(vmask, i)) {
            swapl(((uint32_t *) ptr));
            ptr += 4;
            swapl(((uint32_t *) ptr));
            ptr += 4;
        }
    }
}

static void
SDeviceHierarchyEvent(xXIHierarchyEvent * from, xXIHierarchyEvent * to)
{
    int i;
    xXIHierarchyInfo *info;

    *to = *from;
    memcpy(&to[1], &from[1], from->length * 4);
    swaps(&to->sequenceNumber);
    swapl(&to->length);
    swaps(&to->evtype);
    swaps(&to->deviceid);
    swapl(&to->time);
    swapl(&to->flags);
    swaps(&to->num_info);

    info = (xXIHierarchyInfo *) &to[1];
    for (i = 0; i < from->num_info; i++) {
        swaps(&info->deviceid);
        swaps(&info->attachment);
        info++;
    }
}

static void
SXIPropertyEvent(xXIPropertyEvent * from, xXIPropertyEvent * to)
{
    *to = *from;
    swaps(&to->sequenceNumber);
    swapl(&to->length);
    swaps(&to->evtype);
    swaps(&to->deviceid);
    swapl(&to->property);
}

static void
SRawEvent(xXIRawEvent * from, xXIRawEvent * to)
{
    int i;
    FP3232 *values;
    unsigned char *mask;

    memcpy(to, from, sizeof(xEvent) + from->length * 4);

    swaps(&to->sequenceNumber);
    swapl(&to->length);
    swaps(&to->evtype);
    swaps(&to->deviceid);
    swapl(&to->time);
    swapl(&to->detail);

    mask = (unsigned char *) &to[1];
    values = (FP3232 *) (mask + from->valuators_len * 4);

    for (i = 0; i < from->valuators_len * 4 * 8; i++) {
        if (BitIsOn(mask, i)) {
            /* for each bit set there are two FP3232 values on the wire, in
             * the order abcABC for data and data_raw. Here we swap as if
             * they were in aAbBcC order because it's easier and really
             * doesn't matter.
             */
            swapl(&values->integral);
            swapl(&values->frac);
            values++;
            swapl(&values->integral);
            swapl(&values->frac);
            values++;
        }
    }

    swaps(&to->valuators_len);
}

static void
STouchOwnershipEvent(xXITouchOwnershipEvent * from, xXITouchOwnershipEvent * to)
{
    *to = *from;
    swaps(&to->sequenceNumber);
    swapl(&to->length);
    swaps(&to->evtype);
    swaps(&to->deviceid);
    swapl(&to->time);
    swaps(&to->sourceid);
    swapl(&to->touchid);
    swapl(&to->flags);
    swapl(&to->root);
    swapl(&to->event);
    swapl(&to->child);
}

static void
SBarrierEvent(xXIBarrierEvent * from,
              xXIBarrierEvent * to) {

    *to = *from;

    swaps(&to->sequenceNumber);
    swapl(&to->length);
    swaps(&to->evtype);
    swapl(&to->time);
    swaps(&to->deviceid);
    swaps(&to->sourceid);
    swapl(&to->event);
    swapl(&to->root);
    swapl(&to->root_x);
    swapl(&to->root_y);

    swapl(&to->dx.integral);
    swapl(&to->dx.frac);
    swapl(&to->dy.integral);
    swapl(&to->dy.frac);
    swapl(&to->dtime);
    swapl(&to->barrier);
    swapl(&to->eventid);
}

/** Event swapping function for XI2 events. */
void
XI2EventSwap(xGenericEvent *from, xGenericEvent *to)
{
    switch (from->evtype) {
    case XI_Enter:
    case XI_Leave:
    case XI_FocusIn:
    case XI_FocusOut:
        SDeviceLeaveNotifyEvent((xXILeaveEvent *) from, (xXILeaveEvent *) to);
        break;
    case XI_DeviceChanged:
        SDeviceChangedEvent((xXIDeviceChangedEvent *) from,
                            (xXIDeviceChangedEvent *) to);
        break;
    case XI_HierarchyChanged:
        SDeviceHierarchyEvent((xXIHierarchyEvent *) from,
                              (xXIHierarchyEvent *) to);
        break;
    case XI_PropertyEvent:
        SXIPropertyEvent((xXIPropertyEvent *) from, (xXIPropertyEvent *) to);
        break;
    case XI_Motion:
    case XI_KeyPress:
    case XI_KeyRelease:
    case XI_ButtonPress:
    case XI_ButtonRelease:
    case XI_TouchBegin:
    case XI_TouchUpdate:
    case XI_TouchEnd:
        SDeviceEvent((xXIDeviceEvent *) from, (xXIDeviceEvent *) to);
        break;
    case XI_TouchOwnership:
        STouchOwnershipEvent((xXITouchOwnershipEvent *) from,
                             (xXITouchOwnershipEvent *) to);
        break;
    case XI_RawMotion:
    case XI_RawKeyPress:
    case XI_RawKeyRelease:
    case XI_RawButtonPress:
    case XI_RawButtonRelease:
    case XI_RawTouchBegin:
    case XI_RawTouchUpdate:
    case XI_RawTouchEnd:
        SRawEvent((xXIRawEvent *) from, (xXIRawEvent *) to);
        break;
    case XI_BarrierHit:
    case XI_BarrierLeave:
        SBarrierEvent((xXIBarrierEvent *) from,
                      (xXIBarrierEvent *) to);
        break;
    default:
        ErrorF("[Xi] Unknown event type to swap. This is a bug.\n");
        break;
    }
}

/**************************************************************************
 *
 * Allow the specified event to have its propagation suppressed.
 * The default is to not allow suppression of propagation.
 *
 */

static void
AllowPropagateSuppress(Mask mask)
{
    int i;

    for (i = 0; i < MAXDEVICES; i++)
        PropagateMask[i] |= mask;
}

/**************************************************************************
 *
 * Record an event mask where there is no unique corresponding event type.
 * We can't call SetMaskForEvent, since that would clobber the existing
 * mask for that event.  MotionHint and ButtonMotion are examples.
 *
 * Since extension event types will never be less than 64, we can use
 * 0-63 in the EventInfo array as the "type" to be used to look up this
 * mask.  This means that the corresponding macros such as
 * DevicePointerMotionHint must have access to the same constants.
 *
 */

static void
SetEventInfo(Mask mask, int constant)
{
    EventInfo[ExtEventIndex].mask = mask;
    EventInfo[ExtEventIndex++].type = constant;
}

/**************************************************************************
 *
 * Allow the specified event to be restricted to being selected by one
 * client at a time.
 * The default is to allow more than one client to select the event.
 *
 */

static void
SetExclusiveAccess(Mask mask)
{
    int i;

    for (i = 0; i < MAXDEVICES; i++)
        ExtExclusiveMasks[i] |= mask;
}

/**************************************************************************
 *
 * Assign the specified mask to the specified event.
 *
 */

static void
SetMaskForExtEvent(Mask mask, int event)
{
    int i;

    EventInfo[ExtEventIndex].mask = mask;
    EventInfo[ExtEventIndex++].type = event;

    if ((event < LASTEvent) || (event >= 128))
        FatalError("MaskForExtensionEvent: bogus event number");

    for (i = 0; i < MAXDEVICES; i++)
        SetMaskForEvent(i, mask, event);
}

/************************************************************************
 *
 * This function sets up extension event types and masks.
 *
 */

static void
FixExtensionEvents(ExtensionEntry * extEntry)
{
    DeviceValuator = extEntry->eventBase;
    DeviceKeyPress = DeviceValuator + 1;
    DeviceKeyRelease = DeviceKeyPress + 1;
    DeviceButtonPress = DeviceKeyRelease + 1;
    DeviceButtonRelease = DeviceButtonPress + 1;
    DeviceMotionNotify = DeviceButtonRelease + 1;
    DeviceFocusIn = DeviceMotionNotify + 1;
    DeviceFocusOut = DeviceFocusIn + 1;
    ProximityIn = DeviceFocusOut + 1;
    ProximityOut = ProximityIn + 1;
    DeviceStateNotify = ProximityOut + 1;
    DeviceMappingNotify = DeviceStateNotify + 1;
    ChangeDeviceNotify = DeviceMappingNotify + 1;
    DeviceKeyStateNotify = ChangeDeviceNotify + 1;
    DeviceButtonStateNotify = DeviceKeyStateNotify + 1;
    DevicePresenceNotify = DeviceButtonStateNotify + 1;
    DevicePropertyNotify = DevicePresenceNotify + 1;

    event_base[KeyClass] = DeviceKeyPress;
    event_base[ButtonClass] = DeviceButtonPress;
    event_base[ValuatorClass] = DeviceMotionNotify;
    event_base[ProximityClass] = ProximityIn;
    event_base[FocusClass] = DeviceFocusIn;
    event_base[OtherClass] = DeviceStateNotify;

    BadDevice += extEntry->errorBase;
    BadEvent += extEntry->errorBase;
    BadMode += extEntry->errorBase;
    DeviceBusy += extEntry->errorBase;
    BadClass += extEntry->errorBase;

    SetMaskForExtEvent(DeviceKeyPressMask, DeviceKeyPress);
    AllowPropagateSuppress(DeviceKeyPressMask);
    SetCriticalEvent(DeviceKeyPress);

    SetMaskForExtEvent(DeviceKeyReleaseMask, DeviceKeyRelease);
    AllowPropagateSuppress(DeviceKeyReleaseMask);
    SetCriticalEvent(DeviceKeyRelease);

    SetMaskForExtEvent(DeviceButtonPressMask, DeviceButtonPress);
    AllowPropagateSuppress(DeviceButtonPressMask);
    SetCriticalEvent(DeviceButtonPress);

    SetMaskForExtEvent(DeviceButtonReleaseMask, DeviceButtonRelease);
    AllowPropagateSuppress(DeviceButtonReleaseMask);
    SetCriticalEvent(DeviceButtonRelease);

    SetMaskForExtEvent(DeviceProximityMask, ProximityIn);
    SetMaskForExtEvent(DeviceProximityMask, ProximityOut);

    SetMaskForExtEvent(DeviceStateNotifyMask, DeviceStateNotify);

    SetMaskForExtEvent(DevicePointerMotionMask, DeviceMotionNotify);
    AllowPropagateSuppress(DevicePointerMotionMask);
    SetCriticalEvent(DeviceMotionNotify);

    SetEventInfo(DevicePointerMotionHintMask, _devicePointerMotionHint);
    SetEventInfo(DeviceButton1MotionMask, _deviceButton1Motion);
    SetEventInfo(DeviceButton2MotionMask, _deviceButton2Motion);
    SetEventInfo(DeviceButton3MotionMask, _deviceButton3Motion);
    SetEventInfo(DeviceButton4MotionMask, _deviceButton4Motion);
    SetEventInfo(DeviceButton5MotionMask, _deviceButton5Motion);
    SetEventInfo(DeviceButtonMotionMask, _deviceButtonMotion);

    SetMaskForExtEvent(DeviceFocusChangeMask, DeviceFocusIn);
    SetMaskForExtEvent(DeviceFocusChangeMask, DeviceFocusOut);

    SetMaskForExtEvent(DeviceMappingNotifyMask, DeviceMappingNotify);
    SetMaskForExtEvent(ChangeDeviceNotifyMask, ChangeDeviceNotify);

    SetEventInfo(DeviceButtonGrabMask, _deviceButtonGrab);
    SetExclusiveAccess(DeviceButtonGrabMask);

    SetEventInfo(DeviceOwnerGrabButtonMask, _deviceOwnerGrabButton);
    SetEventInfo(DevicePresenceNotifyMask, _devicePresence);
    SetMaskForExtEvent(DevicePropertyNotifyMask, DevicePropertyNotify);

    SetEventInfo(0, _noExtensionEvent);
}

/************************************************************************
 *
 * This function restores extension event types and masks to their
 * initial state.
 *
 */

static void
RestoreExtensionEvents(void)
{
    int i, j;

    IReqCode = 0;
    IEventBase = 0;

    for (i = 0; i < ExtEventIndex - 1; i++) {
        if ((EventInfo[i].type >= LASTEvent) && (EventInfo[i].type < 128)) {
            for (j = 0; j < MAXDEVICES; j++)
                SetMaskForEvent(j, 0, EventInfo[i].type);
        }
        EventInfo[i].mask = 0;
        EventInfo[i].type = 0;
    }
    ExtEventIndex = 0;
    DeviceValuator = 0;
    DeviceKeyPress = 1;
    DeviceKeyRelease = 2;
    DeviceButtonPress = 3;
    DeviceButtonRelease = 4;
    DeviceMotionNotify = 5;
    DeviceFocusIn = 6;
    DeviceFocusOut = 7;
    ProximityIn = 8;
    ProximityOut = 9;
    DeviceStateNotify = 10;
    DeviceMappingNotify = 11;
    ChangeDeviceNotify = 12;
    DeviceKeyStateNotify = 13;
    DeviceButtonStateNotify = 13;
    DevicePresenceNotify = 14;
    DevicePropertyNotify = 15;

    BadDevice = 0;
    BadEvent = 1;
    BadMode = 2;
    DeviceBusy = 3;
    BadClass = 4;

}

/***********************************************************************
 *
 * IResetProc.
 * Remove reply-swapping routine.
 * Remove event-swapping routine.
 *
 */

static void
IResetProc(ExtensionEntry * unused)
{
    ReplySwapVector[IReqCode] = ReplyNotSwappd;
    EventSwapVector[DeviceValuator] = NotImplemented;
    EventSwapVector[DeviceKeyPress] = NotImplemented;
    EventSwapVector[DeviceKeyRelease] = NotImplemented;
    EventSwapVector[DeviceButtonPress] = NotImplemented;
    EventSwapVector[DeviceButtonRelease] = NotImplemented;
    EventSwapVector[DeviceMotionNotify] = NotImplemented;
    EventSwapVector[DeviceFocusIn] = NotImplemented;
    EventSwapVector[DeviceFocusOut] = NotImplemented;
    EventSwapVector[ProximityIn] = NotImplemented;
    EventSwapVector[ProximityOut] = NotImplemented;
    EventSwapVector[DeviceStateNotify] = NotImplemented;
    EventSwapVector[DeviceKeyStateNotify] = NotImplemented;
    EventSwapVector[DeviceButtonStateNotify] = NotImplemented;
    EventSwapVector[DeviceMappingNotify] = NotImplemented;
    EventSwapVector[ChangeDeviceNotify] = NotImplemented;
    EventSwapVector[DevicePresenceNotify] = NotImplemented;
    EventSwapVector[DevicePropertyNotify] = NotImplemented;
    RestoreExtensionEvents();

    free(xi_all_devices.name);
    free(xi_all_master_devices.name);

    XIBarrierReset();
}

/***********************************************************************
 *
 * Assign an id and type to an input device.
 *
 */

void
AssignTypeAndName(DeviceIntPtr dev, Atom type, const char *name)
{
    dev->xinput_type = type;
    dev->name = strdup(name);
}

/***********************************************************************
 *
 * Make device type atoms.
 *
 */

static void
MakeDeviceTypeAtoms(void)
{
    int i;

    for (i = 0; i < NUMTYPES; i++)
        dev_type[i].type =
            MakeAtom(dev_type[i].name, strlen(dev_type[i].name), 1);
}

/*****************************************************************************
 *
 *	SEventIDispatch
 *
 *	Swap any events defined in this extension.
 */
#define DO_SWAP(func,type) func ((type *)from, (type *)to)

static void
SEventIDispatch(xEvent *from, xEvent *to)
{
    int type = from->u.u.type & 0177;

    if (type == DeviceValuator)
        DO_SWAP(SEventDeviceValuator, deviceValuator);
    else if (type == DeviceKeyPress) {
        SKeyButtonPtrEvent(from, to);
        to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    }
    else if (type == DeviceKeyRelease) {
        SKeyButtonPtrEvent(from, to);
        to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    }
    else if (type == DeviceButtonPress) {
        SKeyButtonPtrEvent(from, to);
        to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    }
    else if (type == DeviceButtonRelease) {
        SKeyButtonPtrEvent(from, to);
        to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    }
    else if (type == DeviceMotionNotify) {
        SKeyButtonPtrEvent(from, to);
        to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    }
    else if (type == DeviceFocusIn)
        DO_SWAP(SEventFocus, deviceFocus);
    else if (type == DeviceFocusOut)
        DO_SWAP(SEventFocus, deviceFocus);
    else if (type == ProximityIn) {
        SKeyButtonPtrEvent(from, to);
        to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    }
    else if (type == ProximityOut) {
        SKeyButtonPtrEvent(from, to);
        to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    }
    else if (type == DeviceStateNotify)
        DO_SWAP(SDeviceStateNotifyEvent, deviceStateNotify);
    else if (type == DeviceKeyStateNotify)
        DO_SWAP(SDeviceKeyStateNotifyEvent, deviceKeyStateNotify);
    else if (type == DeviceButtonStateNotify)
        DO_SWAP(SDeviceButtonStateNotifyEvent, deviceButtonStateNotify);
    else if (type == DeviceMappingNotify)
        DO_SWAP(SDeviceMappingNotifyEvent, deviceMappingNotify);
    else if (type == ChangeDeviceNotify)
        DO_SWAP(SChangeDeviceNotifyEvent, changeDeviceNotify);
    else if (type == DevicePresenceNotify)
        DO_SWAP(SDevicePresenceNotifyEvent, devicePresenceNotify);
    else if (type == DevicePropertyNotify)
        DO_SWAP(SDevicePropertyNotifyEvent, devicePropertyNotify);
    else {
        FatalError("XInputExtension: Impossible event!\n");
    }
}

/**********************************************************************
 *
 * IExtensionInit - initialize the input extension.
 *
 * Called from InitExtensions in main() or from QueryExtension() if the
 * extension is dynamically loaded.
 *
 * This extension has several events and errors.
 *
 * XI is mandatory nowadays, so if we fail to init XI, we die.
 */

void
XInputExtensionInit(void)
{
    ExtensionEntry *extEntry;

    XExtensionVersion thisversion = { XI_Present,
        SERVER_XI_MAJOR_VERSION,
        SERVER_XI_MINOR_VERSION,
    };

    if (!dixRegisterPrivateKey
        (&XIClientPrivateKeyRec, PRIVATE_CLIENT, sizeof(XIClientRec)))
        FatalError("Cannot request private for XI.\n");

    if (!AddCallback(&ClientStateCallback, XIClientCallback, 0))
        FatalError("Failed to add callback to XI.\n");

    if (!XIBarrierInit())
        FatalError("Could not initialize barriers.\n");

    extEntry = AddExtension(INAME, IEVENTS, IERRORS, ProcIDispatch,
                            SProcIDispatch, IResetProc, StandardMinorOpcode);
    if (extEntry) {
        IReqCode = extEntry->base;
        IEventBase = extEntry->eventBase;
        XIVersion = thisversion;
        MakeDeviceTypeAtoms();
        RT_INPUTCLIENT = CreateNewResourceType((DeleteType) InputClientGone,
                                               "INPUTCLIENT");
        if (!RT_INPUTCLIENT)
            FatalError("Failed to add resource type for XI.\n");
        FixExtensionEvents(extEntry);
        ReplySwapVector[IReqCode] = (ReplySwapPtr) SReplyIDispatch;
        EventSwapVector[DeviceValuator] = SEventIDispatch;
        EventSwapVector[DeviceKeyPress] = SEventIDispatch;
        EventSwapVector[DeviceKeyRelease] = SEventIDispatch;
        EventSwapVector[DeviceButtonPress] = SEventIDispatch;
        EventSwapVector[DeviceButtonRelease] = SEventIDispatch;
        EventSwapVector[DeviceMotionNotify] = SEventIDispatch;
        EventSwapVector[DeviceFocusIn] = SEventIDispatch;
        EventSwapVector[DeviceFocusOut] = SEventIDispatch;
        EventSwapVector[ProximityIn] = SEventIDispatch;
        EventSwapVector[ProximityOut] = SEventIDispatch;
        EventSwapVector[DeviceStateNotify] = SEventIDispatch;
        EventSwapVector[DeviceKeyStateNotify] = SEventIDispatch;
        EventSwapVector[DeviceButtonStateNotify] = SEventIDispatch;
        EventSwapVector[DeviceMappingNotify] = SEventIDispatch;
        EventSwapVector[ChangeDeviceNotify] = SEventIDispatch;
        EventSwapVector[DevicePresenceNotify] = SEventIDispatch;

        GERegisterExtension(IReqCode, XI2EventSwap);

        memset(&xi_all_devices, 0, sizeof(xi_all_devices));
        memset(&xi_all_master_devices, 0, sizeof(xi_all_master_devices));
        xi_all_devices.id = XIAllDevices;
        xi_all_devices.name = strdup("XIAllDevices");
        xi_all_master_devices.id = XIAllMasterDevices;
        xi_all_master_devices.name = strdup("XIAllMasterDevices");

        inputInfo.all_devices = &xi_all_devices;
        inputInfo.all_master_devices = &xi_all_master_devices;

        XIResetProperties();
    }
    else {
        FatalError("IExtensionInit: AddExtensions failed\n");
    }
}
@


1.16
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d384 1
a384 1
XIClientCallback(CallbackListPtr *list, pointer closure, pointer data)
@


1.15
log
@Uodate to xserver 1.14.2. Tested by krw@@, shadchin@@, todd@@
@
text
@d1174 2
@


1.14
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d851 10
a860 10
    swaps(&from->sequenceNumber);
    swapl(&from->length);
    swaps(&from->evtype);
    swapl(&from->time);
    swaps(&from->deviceid);
    swaps(&from->sourceid);
    swapl(&from->event);
    swapl(&from->root);
    swapl(&from->root_x);
    swapl(&from->root_y);
d862 7
a868 7
    swapl(&from->dx.integral);
    swapl(&from->dx.frac);
    swapl(&from->dy.integral);
    swapl(&from->dy.frac);
    swapl(&from->dtime);
    swapl(&from->barrier);
    swapl(&from->eventid);
@


1.13
log
@Update to xserver 1.12.3.
@
text
@a51 2
#define ARRAY_SIZE(_a)        (sizeof((_a)) / sizeof((_a)[0]))

d125 1
d152 2
a153 4
const Mask DeviceEnterWindowMask = (1L << 18);
const Mask DeviceLeaveWindowMask = (1L << 19);
const Mask DevicePropertyNotifyMask = (1L << 20);
const Mask XIAllMasks = (1L << 21) - 1;
d162 19
a180 19
    {
    0, XI_KEYBOARD}, {
    0, XI_MOUSE}, {
    0, XI_TABLET}, {
    0, XI_TOUCHSCREEN}, {
    0, XI_TOUCHPAD}, {
    0, XI_BARCODE}, {
    0, XI_BUTTONBOX}, {
    0, XI_KNOB_BOX}, {
    0, XI_ONE_KNOB}, {
    0, XI_NINE_KNOB}, {
    0, XI_TRACKBALL}, {
    0, XI_QUADRATURE}, {
    0, XI_ID_MODULE}, {
    0, XI_SPACEBALL}, {
    0, XI_DATAGLOVE}, {
    0, XI_EYETRACKER}, {
    0, XI_CURSORKEYS}, {
0, XI_FOOTMOUSE}};
d255 2
a256 1
        ProcXIGetSelectedEvents /* 60 */
d321 2
a322 1
        SProcXIGetSelectedEvents        /* 60 */
d440 3
a442 2
                                        /* All we look at is the type field */
{                               /* This is common to all replies    */
d652 1
a652 1
    any = (xXIAnyInfo *) & to[1];
d660 1
a660 1
            uint32_t *key = (uint32_t *) & ki[1];
d771 1
a771 1
    info = (xXIHierarchyInfo *) & to[1];
d845 26
d917 5
d1171 3
d1300 3
d1338 1
a1338 1
        xi_all_devices.name = "XIAllDevices";
d1340 1
a1340 1
        xi_all_master_devices.name = "XIAllMasterDevices";
@


1.12
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d368 1
a368 1
Mask PropagateMask[MAXDEVICES];
@


1.11
log
@Bugfix Update to xserver 1.11.3
@
text
@d61 2
a62 2
#include "gcstruct.h"	/* pointer for extnsionst.h */
#include "extnsionst.h"	/* extension entry   */
d67 1
a67 1
#include "geext.h" /* extension interfaces for ge */
a127 1

d133 24
a156 24
const Mask DeviceKeyPressMask             = KeyPressMask;
const Mask DeviceKeyReleaseMask           = KeyReleaseMask;
const Mask DeviceButtonPressMask          = ButtonPressMask;
const Mask DeviceButtonReleaseMask        = ButtonReleaseMask;
const Mask DeviceProximityMask            = (1L << 4);
const Mask DeviceStateNotifyMask          = (1L << 5);
const Mask DevicePointerMotionMask        = PointerMotionMask;
const Mask DevicePointerMotionHintMask    = PointerMotionHintMask;
const Mask DeviceButton1MotionMask        = Button1MotionMask;
const Mask DeviceButton2MotionMask        = Button2MotionMask;
const Mask DeviceButton3MotionMask        = Button3MotionMask;
const Mask DeviceButton4MotionMask        = Button4MotionMask;
const Mask DeviceButton5MotionMask        = Button5MotionMask;
const Mask DeviceButtonMotionMask         = ButtonMotionMask;
const Mask DeviceFocusChangeMask          = (1L << 14);
const Mask DeviceMappingNotifyMask        = (1L << 15);
const Mask ChangeDeviceNotifyMask         = (1L << 16);
const Mask DeviceButtonGrabMask           = (1L << 17);
const Mask DeviceOwnerGrabButtonMask      = (1L << 17);
const Mask DevicePresenceNotifyMask       = (1L << 18);
const Mask DeviceEnterWindowMask          = (1L << 18);
const Mask DeviceLeaveWindowMask          = (1L << 19);
const Mask DevicePropertyNotifyMask       = (1L << 20);
const Mask XIAllMasks                     = (1L << 21) - 1;
d161 1
a161 2
static struct dev_type
{
d163 1
a163 1
    char *name;
d195 37
a231 37
static int (*ProcIVector[])(ClientPtr) = {
        NULL,                                   /*  0 */
	ProcXGetExtensionVersion,               /*  1 */
	ProcXListInputDevices,                  /*  2 */
	ProcXOpenDevice,                        /*  3 */
	ProcXCloseDevice,                       /*  4 */
	ProcXSetDeviceMode,                     /*  5 */
	ProcXSelectExtensionEvent,              /*  6 */
	ProcXGetSelectedExtensionEvents,        /*  7 */
	ProcXChangeDeviceDontPropagateList,     /*  8 */
	ProcXGetDeviceDontPropagateList,        /*  9 */
	ProcXGetDeviceMotionEvents,             /* 10 */
	ProcXChangeKeyboardDevice,              /* 11 */
	ProcXChangePointerDevice,               /* 12 */
	ProcXGrabDevice,                        /* 13 */
	ProcXUngrabDevice,                      /* 14 */
	ProcXGrabDeviceKey,                     /* 15 */
	ProcXUngrabDeviceKey,                   /* 16 */
	ProcXGrabDeviceButton,                  /* 17 */
	ProcXUngrabDeviceButton,                /* 18 */
	ProcXAllowDeviceEvents,                 /* 19 */
	ProcXGetDeviceFocus,                    /* 20 */
	ProcXSetDeviceFocus,                    /* 21 */
	ProcXGetFeedbackControl,                /* 22 */
	ProcXChangeFeedbackControl,             /* 23 */
	ProcXGetDeviceKeyMapping,               /* 24 */
	ProcXChangeDeviceKeyMapping,            /* 25 */
	ProcXGetDeviceModifierMapping,          /* 26 */
	ProcXSetDeviceModifierMapping,          /* 27 */
	ProcXGetDeviceButtonMapping,            /* 28 */
	ProcXSetDeviceButtonMapping,            /* 29 */
	ProcXQueryDeviceState,                  /* 30 */
	ProcXSendExtensionEvent,                /* 31 */
	ProcXDeviceBell,                        /* 32 */
	ProcXSetDeviceValuators,                /* 33 */
	ProcXGetDeviceControl,                  /* 34 */
	ProcXChangeDeviceControl,               /* 35 */
d233 4
a236 4
        ProcXListDeviceProperties,              /* 36 */
        ProcXChangeDeviceProperty,              /* 37 */
        ProcXDeleteDeviceProperty,              /* 38 */
        ProcXGetDeviceProperty,                 /* 39 */
d238 21
a258 21
        ProcXIQueryPointer,                     /* 40 */
        ProcXIWarpPointer,                      /* 41 */
        ProcXIChangeCursor,                     /* 42 */
        ProcXIChangeHierarchy,                  /* 43 */
        ProcXISetClientPointer,                 /* 44 */
        ProcXIGetClientPointer,                 /* 45 */
        ProcXISelectEvents,                     /* 46 */
        ProcXIQueryVersion,                     /* 47 */
        ProcXIQueryDevice,                      /* 48 */
        ProcXISetFocus,                         /* 49 */
        ProcXIGetFocus,                         /* 50 */
        ProcXIGrabDevice,                       /* 51 */
        ProcXIUngrabDevice,                     /* 52 */
        ProcXIAllowEvents,                      /* 53 */
        ProcXIPassiveGrabDevice,                /* 54 */
        ProcXIPassiveUngrabDevice,              /* 55 */
        ProcXIListProperties,                   /* 56 */
        ProcXIChangeProperty,                   /* 57 */
        ProcXIDeleteProperty,                   /* 58 */
        ProcXIGetProperty,                      /* 59 */
        ProcXIGetSelectedEvents                 /* 60 */
d262 62
a323 62
static int (*SProcIVector[])(ClientPtr) = {
        NULL,                                    /*  0 */
	SProcXGetExtensionVersion,               /*  1 */
	SProcXListInputDevices,                  /*  2 */
	SProcXOpenDevice,                        /*  3 */
	SProcXCloseDevice,                       /*  4 */
	SProcXSetDeviceMode,                     /*  5 */
	SProcXSelectExtensionEvent,              /*  6 */
	SProcXGetSelectedExtensionEvents,        /*  7 */
	SProcXChangeDeviceDontPropagateList,     /*  8 */
	SProcXGetDeviceDontPropagateList,        /*  9 */
	SProcXGetDeviceMotionEvents,             /* 10 */
	SProcXChangeKeyboardDevice,              /* 11 */
	SProcXChangePointerDevice,               /* 12 */
	SProcXGrabDevice,                        /* 13 */
	SProcXUngrabDevice,                      /* 14 */
	SProcXGrabDeviceKey,                     /* 15 */
	SProcXUngrabDeviceKey,                   /* 16 */
	SProcXGrabDeviceButton,                  /* 17 */
	SProcXUngrabDeviceButton,                /* 18 */
	SProcXAllowDeviceEvents,                 /* 19 */
	SProcXGetDeviceFocus,                    /* 20 */
	SProcXSetDeviceFocus,                    /* 21 */
	SProcXGetFeedbackControl,                /* 22 */
	SProcXChangeFeedbackControl,             /* 23 */
	SProcXGetDeviceKeyMapping,               /* 24 */
	SProcXChangeDeviceKeyMapping,            /* 25 */
	SProcXGetDeviceModifierMapping,          /* 26 */
	SProcXSetDeviceModifierMapping,          /* 27 */
	SProcXGetDeviceButtonMapping,            /* 28 */
	SProcXSetDeviceButtonMapping,            /* 29 */
	SProcXQueryDeviceState,                  /* 30 */
	SProcXSendExtensionEvent,                /* 31 */
	SProcXDeviceBell,                        /* 32 */
	SProcXSetDeviceValuators,                /* 33 */
	SProcXGetDeviceControl,                  /* 34 */
	SProcXChangeDeviceControl,               /* 35 */
        SProcXListDeviceProperties,              /* 36 */
        SProcXChangeDeviceProperty,              /* 37 */
        SProcXDeleteDeviceProperty,              /* 38 */
        SProcXGetDeviceProperty,                 /* 39 */
        SProcXIQueryPointer,                     /* 40 */
        SProcXIWarpPointer,                      /* 41 */
        SProcXIChangeCursor,                     /* 42 */
        SProcXIChangeHierarchy,                  /* 43 */
        SProcXISetClientPointer,                 /* 44 */
        SProcXIGetClientPointer,                 /* 45 */
        SProcXISelectEvents,                     /* 46 */
        SProcXIQueryVersion,                     /* 47 */
        SProcXIQueryDevice,                      /* 48 */
        SProcXISetFocus,                         /* 49 */
        SProcXIGetFocus,                         /* 50 */
        SProcXIGrabDevice,                       /* 51 */
        SProcXIUngrabDevice,                     /* 52 */
        SProcXIAllowEvents,                      /* 53 */
        SProcXIPassiveGrabDevice,                /* 54 */
        SProcXIPassiveUngrabDevice,              /* 55 */
        SProcXIListProperties,                   /* 56 */
        SProcXIChangeProperty,                   /* 57 */
        SProcXIDeleteProperty,                   /* 58 */
        SProcXIGetProperty,                      /* 59 */
        SProcXIGetSelectedEvents                 /* 60 */
a367 1

d385 1
a385 3
XIClientCallback(CallbackListPtr        *list,
                 pointer                closure,
                 pointer                data)
d387 1
a387 1
    NewClientInfoRec *clientinfo = (NewClientInfoRec*)data;
d410 1
a410 1
    return (*ProcIVector[stuff->data])(client);
d429 1
a429 1
    return (*SProcIVector[stuff->data])(client);
d441 2
a442 2
					/* All we look at is the type field */
{	/* This is common to all replies    */
d444 2
a445 2
	SRepXGetExtensionVersion(client, len,
				 (xGetExtensionVersionReply *) rep);
d447 1
a447 1
	SRepXListInputDevices(client, len, (xListInputDevicesReply *) rep);
d449 1
a449 1
	SRepXOpenDevice(client, len, (xOpenDeviceReply *) rep);
d451 1
a451 1
	SRepXSetDeviceMode(client, len, (xSetDeviceModeReply *) rep);
d453 3
a455 3
	SRepXGetSelectedExtensionEvents(client, len,
					(xGetSelectedExtensionEventsReply *)
					rep);
d457 3
a459 3
	SRepXGetDeviceDontPropagateList(client, len,
					(xGetDeviceDontPropagateListReply *)
					rep);
d461 2
a462 2
	SRepXGetDeviceMotionEvents(client, len,
				   (xGetDeviceMotionEventsReply *) rep);
d464 1
a464 1
	SRepXGrabDevice(client, len, (xGrabDeviceReply *) rep);
d466 1
a466 1
	SRepXGetDeviceFocus(client, len, (xGetDeviceFocusReply *) rep);
d468 1
a468 1
	SRepXGetFeedbackControl(client, len, (xGetFeedbackControlReply *) rep);
d470 2
a471 2
	SRepXGetDeviceKeyMapping(client, len,
				 (xGetDeviceKeyMappingReply *) rep);
d473 2
a474 2
	SRepXGetDeviceModifierMapping(client, len,
				      (xGetDeviceModifierMappingReply *) rep);
d476 2
a477 2
	SRepXSetDeviceModifierMapping(client, len,
				      (xSetDeviceModifierMappingReply *) rep);
d479 2
a480 2
	SRepXGetDeviceButtonMapping(client, len,
				    (xGetDeviceButtonMappingReply *) rep);
d482 2
a483 2
	SRepXSetDeviceButtonMapping(client, len,
				    (xSetDeviceButtonMappingReply *) rep);
d485 1
a485 1
	SRepXQueryDeviceState(client, len, (xQueryDeviceStateReply *) rep);
d487 1
a487 1
	SRepXSetDeviceValuators(client, len, (xSetDeviceValuatorsReply *) rep);
d489 1
a489 1
	SRepXGetDeviceControl(client, len, (xGetDeviceControlReply *) rep);
d491 2
a492 2
	SRepXChangeDeviceControl(client, len,
				 (xChangeDeviceControlReply *) rep);
d494 2
a495 1
        SRepXListDeviceProperties(client, len, (xListDevicePropertiesReply*)rep);
d497 1
a497 1
	SRepXGetDeviceProperty(client, len, (xGetDevicePropertyReply *) rep);
d499 1
a499 1
	SRepXIQueryPointer(client, len, (xXIQueryPointerReply *) rep);
d501 1
a501 1
        SRepXIGetClientPointer(client, len, (xXIGetClientPointerReply*) rep);
d503 1
a503 1
        SRepXIQueryVersion(client, len, (xXIQueryVersionReply*)rep);
d505 1
a505 1
        SRepXIQueryDevice(client, len, (xXIQueryDeviceReply*)rep);
d507 1
a507 1
	SRepXIGrabDevice(client, len, (xXIGrabDeviceReply *) rep);
d509 1
a509 1
	SRepXIPassiveGrabDevice(client, len, (xXIPassiveGrabDeviceReply *) rep);
d511 1
a511 1
	SRepXIListProperties(client, len, (xXIListPropertiesReply *) rep);
d513 1
a513 1
	SRepXIGetProperty(client, len, (xXIGetPropertyReply *) rep);
d515 1
a515 1
	SRepXIGetSelectedEvents(client, len, (xXIGetSelectedEventsReply *) rep);
d517 1
a517 1
	SRepXIGetFocus(client, len, (xXIGetFocusReply *) rep);
d519 1
a519 1
	FatalError("XINPUT confused sending swapped reply");
a531 1
    char n;
d536 2
a537 2
    swaps(&to->sequenceNumber, n);
    swaps(&to->device_state, n);
d540 1
a540 1
	swapl((ip + i), n);	/* macro - braces are required      */
a546 2
    char n;

d548 3
a550 3
    swaps(&to->sequenceNumber, n);
    swapl(&to->time, n);
    swapl(&to->window, n);
a556 1
    char n;
d560 2
a561 2
    swaps(&to->sequenceNumber, n);
    swapl(&to->time, n);
d564 1
a564 1
	swapl((ip + i), n);	/* macro - braces are required      */
d570 1
a570 1
			   deviceKeyStateNotify * to)
a571 2
    char n;

d573 1
a573 1
    swaps(&to->sequenceNumber, n);
d578 1
a578 1
			      deviceButtonStateNotify * to)
a579 2
    char n;

d581 1
a581 1
    swaps(&to->sequenceNumber, n);
a586 2
    char n;

d588 2
a589 2
    swaps(&to->sequenceNumber, n);
    swapl(&to->time, n);
a594 2
    char n;

d596 2
a597 2
    swaps(&to->sequenceNumber, n);
    swapl(&to->time, n);
d601 2
a602 1
SDevicePresenceNotifyEvent (devicePresenceNotify *from, devicePresenceNotify *to)
a603 2
    char n;

d605 3
a607 3
    swaps(&to->sequenceNumber,n);
    swapl(&to->time, n);
    swaps(&to->control, n);
d611 2
a612 1
SDevicePropertyNotifyEvent (devicePropertyNotify *from, devicePropertyNotify *to)
a613 2
    char n;

d615 3
a617 3
    swaps(&to->sequenceNumber,n);
    swapl(&to->time, n);
    swapl(&to->atom, n);
d621 1
a621 1
SDeviceLeaveNotifyEvent (xXILeaveEvent *from, xXILeaveEvent *to)
a622 2
    char n;

d624 17
a640 17
    swaps(&to->sequenceNumber,n);
    swapl(&to->length, n);
    swaps(&to->evtype, n);
    swaps(&to->deviceid, n);
    swapl(&to->time, n);
    swapl(&to->root, n);
    swapl(&to->event, n);
    swapl(&to->child, n);
    swapl(&to->root_x, n);
    swapl(&to->root_y, n);
    swapl(&to->event_x, n);
    swapl(&to->event_y, n);
    swaps(&to->sourceid, n);
    swaps(&to->buttons_len, n);
    swapl(&to->mods.base_mods, n);
    swapl(&to->mods.latched_mods, n);
    swapl(&to->mods.locked_mods, n);
d644 1
a644 1
SDeviceChangedEvent(xXIDeviceChangedEvent* from, xXIDeviceChangedEvent* to)
a645 1
    char n;
d652 2
a653 3
    any = (xXIAnyInfo*)&to[1];
    for (i = 0; i < to->num_classes; i++)
    {
d656 12
a667 1
        switch(any->type)
d669 22
a690 31
            case KeyClass:
                {
                    xXIKeyInfo *ki = (xXIKeyInfo*)any;
                    uint32_t *key = (uint32_t*)&ki[1];
                    for (j = 0; j < ki->num_keycodes; j++, key++)
                        swapl(key, n);
                    swaps(&ki->num_keycodes, n);
                }
                break;
            case ButtonClass:
                {
                    xXIButtonInfo *bi = (xXIButtonInfo*)any;
                    Atom *labels = (Atom*)((char*)bi + sizeof(xXIButtonInfo) +
                                           pad_to_int32(bits_to_bytes(bi->num_buttons)));
                    for (j = 0; j < bi->num_buttons; j++)
                        swapl(&labels[j], n);
                    swaps(&bi->num_buttons, n);
                }
                break;
            case ValuatorClass:
                {
                    xXIValuatorInfo* ai = (xXIValuatorInfo*)any;
                    swapl(&ai->label, n);
                    swapl(&ai->min.integral, n);
                    swapl(&ai->min.frac, n);
                    swapl(&ai->max.integral, n);
                    swapl(&ai->max.frac, n);
                    swapl(&ai->resolution, n);
                    swaps(&ai->number, n);
                }
                break;
d693 3
a695 3
        swaps(&any->type, n);
        swaps(&any->length, n);
        swaps(&any->sourceid, n);
d697 1
a697 1
        any = (xXIAnyInfo*)((char*)any + length * 4);
d700 7
a706 7
    swaps(&to->sequenceNumber, n);
    swapl(&to->length, n);
    swaps(&to->evtype, n);
    swaps(&to->deviceid, n);
    swapl(&to->time, n);
    swaps(&to->num_classes, n);
    swaps(&to->sourceid, n);
d710 2
a711 1
static void SDeviceEvent(xXIDeviceEvent *from, xXIDeviceEvent *to)
a713 1
    char n;
d719 21
a739 21
    swaps(&to->sequenceNumber, n);
    swapl(&to->length, n);
    swaps(&to->evtype, n);
    swaps(&to->deviceid, n);
    swapl(&to->time, n);
    swapl(&to->detail, n);
    swapl(&to->root, n);
    swapl(&to->event, n);
    swapl(&to->child, n);
    swapl(&to->root_x, n);
    swapl(&to->root_y, n);
    swapl(&to->event_x, n);
    swapl(&to->event_y, n);
    swaps(&to->buttons_len, n);
    swaps(&to->valuators_len, n);
    swaps(&to->sourceid, n);
    swapl(&to->mods.base_mods, n);
    swapl(&to->mods.latched_mods, n);
    swapl(&to->mods.locked_mods, n);
    swapl(&to->mods.effective_mods, n);
    swapl(&to->flags, n);
d741 1
a741 1
    ptr = (char*)(&to[1]);
d743 1
a743 1
    vmask = ptr; /* valuator mask */
d745 3
a747 5
    for (i = 0; i < from->valuators_len * 32; i++)
    {
        if (BitIsOn(vmask, i))
        {
            swapl(((uint32_t*)ptr), n);
d749 1
a749 1
            swapl(((uint32_t*)ptr), n);
d755 2
a756 2
static void SDeviceHierarchyEvent(xXIHierarchyEvent *from,
                                  xXIHierarchyEvent *to)
a758 1
    char n;
d763 12
a774 13
    swaps(&to->sequenceNumber, n);
    swapl(&to->length, n);
    swaps(&to->evtype, n);
    swaps(&to->deviceid, n);
    swapl(&to->time, n);
    swapl(&to->flags, n);
    swaps(&to->num_info, n);

    info = (xXIHierarchyInfo*)&to[1];
    for (i = 0; i< from->num_info; i++)
    {
        swaps(&info->deviceid, n);
        swaps(&info->attachment, n);
d779 2
a780 1
static void SXIPropertyEvent(xXIPropertyEvent *from, xXIPropertyEvent *to)
a781 2
    char n;

d783 5
a787 5
    swaps(&to->sequenceNumber, n);
    swapl(&to->length, n);
    swaps(&to->evtype, n);
    swaps(&to->deviceid, n);
    swapl(&to->property, n);
d790 2
a791 1
static void SRawEvent(xXIRawEvent *from, xXIRawEvent *to)
a792 1
    char n;
d799 6
a804 6
    swaps(&to->sequenceNumber, n);
    swapl(&to->length, n);
    swaps(&to->evtype, n);
    swaps(&to->deviceid, n);
    swapl(&to->time, n);
    swapl(&to->detail, n);
d806 2
d809 2
a810 7
    mask = (unsigned char*)&to[1];
    values = (FP3232*)(mask + from->valuators_len * 4);

    for (i = 0; i < from->valuators_len * 4 * 8; i++)
    {
        if (BitIsOn(mask, i))
        {
d816 2
a817 2
            swapl(&values->integral, n);
            swapl(&values->frac, n);
d819 2
a820 2
            swapl(&values->integral, n);
            swapl(&values->frac, n);
d825 1
a825 1
    swaps(&to->valuators_len, n);
d828 16
d849 45
a893 36
    switch(from->evtype)
    {
        case XI_Enter:
        case XI_Leave:
        case XI_FocusIn:
        case XI_FocusOut:
            SDeviceLeaveNotifyEvent((xXILeaveEvent*)from, (xXILeaveEvent*)to);
            break;
        case XI_DeviceChanged:
            SDeviceChangedEvent((xXIDeviceChangedEvent*)from,
                                (xXIDeviceChangedEvent*)to);
            break;
        case XI_HierarchyChanged:
            SDeviceHierarchyEvent((xXIHierarchyEvent*)from, (xXIHierarchyEvent*)to);
            break;
        case XI_PropertyEvent:
            SXIPropertyEvent((xXIPropertyEvent*)from,
                           (xXIPropertyEvent*)to);
            break;
        case XI_Motion:
        case XI_KeyPress:
        case XI_KeyRelease:
        case XI_ButtonPress:
        case XI_ButtonRelease:
            SDeviceEvent((xXIDeviceEvent*)from, (xXIDeviceEvent*)to);
            break;
        case XI_RawMotion:
        case XI_RawKeyPress:
        case XI_RawKeyRelease:
        case XI_RawButtonPress:
        case XI_RawButtonRelease:
            SRawEvent((xXIRawEvent*)from, (xXIRawEvent*)to);
            break;
        default:
            ErrorF("[Xi] Unknown event type to swap. This is a bug.\n");
            break;
d910 1
a910 1
	PropagateMask[i] |= mask;
d947 1
a947 1
	ExtExclusiveMasks[i] |= mask;
d965 1
a965 1
	FatalError("MaskForExtensionEvent: bogus event number");
d1076 1
a1076 2
	if ((EventInfo[i].type >= LASTEvent) && (EventInfo[i].type < 128))
        {
d1080 2
a1081 2
	EventInfo[i].mask = 0;
	EventInfo[i].type = 0;
a1141 1

d1149 1
a1149 1
AssignTypeAndName(DeviceIntPtr dev, Atom type, char *name)
d1167 2
a1168 2
	dev_type[i].type =
	    MakeAtom(dev_type[i].name, strlen(dev_type[i].name), 1);
d1180 1
a1180 1
SEventIDispatch(xEvent * from, xEvent * to)
d1185 1
a1185 1
	DO_SWAP(SEventDeviceValuator, deviceValuator);
d1187 21
a1207 16
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceKeyRelease) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceButtonPress) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceButtonRelease) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceMotionNotify) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceFocusIn)
	DO_SWAP(SEventFocus, deviceFocus);
d1209 1
a1209 1
	DO_SWAP(SEventFocus, deviceFocus);
d1211 9
a1219 7
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == ProximityOut) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceStateNotify)
	DO_SWAP(SDeviceStateNotifyEvent, deviceStateNotify);
d1221 1
a1221 1
	DO_SWAP(SDeviceKeyStateNotifyEvent, deviceKeyStateNotify);
d1223 1
a1223 1
	DO_SWAP(SDeviceButtonStateNotifyEvent, deviceButtonStateNotify);
d1225 1
a1225 1
	DO_SWAP(SDeviceMappingNotifyEvent, deviceMappingNotify);
d1227 1
a1227 1
	DO_SWAP(SChangeDeviceNotifyEvent, changeDeviceNotify);
d1229 1
a1229 1
	DO_SWAP(SDevicePresenceNotifyEvent, devicePresenceNotify);
d1231 1
a1231 1
	DO_SWAP(SDevicePropertyNotifyEvent, devicePropertyNotify);
d1233 1
a1233 1
	FatalError("XInputExtension: Impossible event!\n");
d1253 1
d1259 2
a1260 1
    if (!dixRegisterPrivateKey(&XIClientPrivateKeyRec, PRIVATE_CLIENT, sizeof(XIClientRec)))
d1267 1
a1267 1
			    SProcIDispatch, IResetProc, StandardMinorOpcode);
d1269 43
a1311 43
	IReqCode = extEntry->base;
	IEventBase = extEntry->eventBase;
	XIVersion = thisversion;
	MakeDeviceTypeAtoms();
	RT_INPUTCLIENT = CreateNewResourceType((DeleteType) InputClientGone,
					       "INPUTCLIENT");
	if (!RT_INPUTCLIENT)
	    FatalError("Failed to add resource type for XI.\n");
	FixExtensionEvents(extEntry);
	ReplySwapVector[IReqCode] = (ReplySwapPtr) SReplyIDispatch;
	EventSwapVector[DeviceValuator] = SEventIDispatch;
	EventSwapVector[DeviceKeyPress] = SEventIDispatch;
	EventSwapVector[DeviceKeyRelease] = SEventIDispatch;
	EventSwapVector[DeviceButtonPress] = SEventIDispatch;
	EventSwapVector[DeviceButtonRelease] = SEventIDispatch;
	EventSwapVector[DeviceMotionNotify] = SEventIDispatch;
	EventSwapVector[DeviceFocusIn] = SEventIDispatch;
	EventSwapVector[DeviceFocusOut] = SEventIDispatch;
	EventSwapVector[ProximityIn] = SEventIDispatch;
	EventSwapVector[ProximityOut] = SEventIDispatch;
	EventSwapVector[DeviceStateNotify] = SEventIDispatch;
	EventSwapVector[DeviceKeyStateNotify] = SEventIDispatch;
	EventSwapVector[DeviceButtonStateNotify] = SEventIDispatch;
	EventSwapVector[DeviceMappingNotify] = SEventIDispatch;
	EventSwapVector[ChangeDeviceNotify] = SEventIDispatch;
	EventSwapVector[DevicePresenceNotify] = SEventIDispatch;

	GERegisterExtension(IReqCode, XI2EventSwap);


	memset(&xi_all_devices, 0, sizeof(xi_all_devices));
	memset(&xi_all_master_devices, 0, sizeof(xi_all_master_devices));
	xi_all_devices.id = XIAllDevices;
	xi_all_devices.name = "XIAllDevices";
	xi_all_master_devices.id = XIAllMasterDevices;
	xi_all_master_devices.name = "XIAllMasterDevices";

	inputInfo.all_devices = &xi_all_devices;
	inputInfo.all_master_devices = &xi_all_master_devices;

	XIResetProperties();
    } else {
	FatalError("IExtensionInit: AddExtensions failed\n");
a1313 1

@


1.10
log
@Update to xserver 1.11.2
@
text
@d412 1
a412 1
    if (stuff->data > ARRAY_SIZE(ProcIVector) || !ProcIVector[stuff->data])
d431 1
a431 1
    if (stuff->data > ARRAY_SIZE(SProcIVector) || !SProcIVector[stuff->data])
@


1.9
log
@Xi: add XI_Focus{In,Out} to swapped events.
@
text
@a86 1
#include "getbmap.h"
a94 1
#include "getvers.h"
d360 1
a360 1
int RT_INPUTCLIENT;
d512 1
a512 1
    else if (rep->RepType == X_XIGrabDevice)
d759 1
d1157 1
a1157 2
    dev->name = (char *)malloc(strlen(name) + 1);
    strcpy(dev->name, name);
@


1.8
log
@Use the array size for checking the validity of request numbers
instead of hard-coded constants. Suggested by Julien Cristau.
@
text
@d866 2
@


1.7
log
@Give XI2 requests a chance if server and client endianess differ.
There are more bugs in this code though.
@
text
@d52 1
d414 1
a414 1
    if (stuff->data > (IREQUESTS + XI2REQUESTS) || !ProcIVector[stuff->data])
d433 1
a433 1
    if (stuff->data > (IREQUESTS  + XI2REQUESTS) || !SProcIVector[stuff->data])
@


1.6
log
@Update to xorg-server 1.9.3. Tested by japser@@, landry@@ and ajacoutot@@
in various configurations.
@
text
@d432 1
a432 1
    if (stuff->data > IREQUESTS || !SProcIVector[stuff->data])
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a1122 2
    XIResetProperties();

d1303 2
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d380 1
a380 3
static int XIClientPrivateKeyIndex;
DevPrivateKey XIClientPrivateKey = &XIClientPrivateKeyIndex;

d1157 1
a1157 1
    dev->name = (char *)xalloc(strlen(name) + 1);
d1257 1
a1257 1
    if (!dixRequestPrivate(XIClientPrivateKey, sizeof(XIClientRec)))
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a54 2
#define	 NEED_EVENTS
#define	 NEED_REPLIES
d64 1
a72 1
#include "registry.h"
d74 1
d114 5
d120 39
a159 2

static Mask lastExtEventMask = 1;
a160 1
Mask ExtValidMasks[EMASKSIZE];
d191 3
d239 23
a261 1
        ProcXGetDeviceProperty                  /* 39 */
d305 22
a326 1
        SProcXGetDeviceProperty                  /* 39 */
a342 12
Mask DevicePointerMotionMask;
Mask DevicePointerMotionHintMask;
Mask DeviceFocusChangeMask;
Mask DeviceStateNotifyMask;
static Mask ChangeDeviceNotifyMask;
Mask DeviceMappingNotifyMask;
Mask DeviceOwnerGrabButtonMask;
Mask DeviceButtonGrabMask;
Mask DeviceButtonMotionMask;
Mask DevicePresenceNotifyMask;
Mask DevicePropertyNotifyMask;

d369 1
a369 1
extern XExtensionVersion AllExtensionVersions[];
a382 5
static XExtensionVersion thisversion = { XI_Present,
    XI_Add_DeviceProperties_Major,
    XI_Add_DeviceProperties_Minor
};

d415 1
a415 1
    if (stuff->data > IREQUESTS || !ProcIVector[stuff->data])
d505 20
d641 24
a664 6
/**************************************************************************
 *
 * Allow the specified event to have its propagation suppressed.
 * The default is to not allow suppression of propagation.
 *
 */
d667 151
a817 1
AllowPropagateSuppress(Mask mask)
d819 1
d821 4
d826 72
a897 2
    for (i = 0; i < MAXDEVICES; i++)
	PropagateMask[i] |= mask;
d902 2
a903 1
 * Return the next available extension event mask.
d907 2
a908 2
static Mask
GetNextExtEventMask(void)
a910 6
    Mask mask = lastExtEventMask;

    if (lastExtEventMask == 0) {
	FatalError("GetNextExtEventMask: no more events are available.");
    }
    lastExtEventMask <<= 1;
d913 1
a913 2
	ExtValidMasks[i] |= mask;
    return mask;
a982 2
    Mask mask;

d1014 24
a1037 29
    mask = GetNextExtEventMask();
    SetMaskForExtEvent(mask, DeviceKeyPress);
    AllowPropagateSuppress(mask);

    mask = GetNextExtEventMask();
    SetMaskForExtEvent(mask, DeviceKeyRelease);
    AllowPropagateSuppress(mask);

    mask = GetNextExtEventMask();
    SetMaskForExtEvent(mask, DeviceButtonPress);
    AllowPropagateSuppress(mask);

    mask = GetNextExtEventMask();
    SetMaskForExtEvent(mask, DeviceButtonRelease);
    AllowPropagateSuppress(mask);

    mask = GetNextExtEventMask();
    SetMaskForExtEvent(mask, ProximityIn);
    SetMaskForExtEvent(mask, ProximityOut);
    AllowPropagateSuppress(mask);

    mask = GetNextExtEventMask();
    DeviceStateNotifyMask = mask;
    SetMaskForExtEvent(mask, DeviceStateNotify);

    mask = GetNextExtEventMask();
    DevicePointerMotionMask = mask;
    SetMaskForExtEvent(mask, DeviceMotionNotify);
    AllowPropagateSuppress(mask);
a1038 1
    DevicePointerMotionHintMask = GetNextExtEventMask();
d1040 5
a1044 12
    SetEventInfo(GetNextExtEventMask(), _deviceButton1Motion);
    SetEventInfo(GetNextExtEventMask(), _deviceButton2Motion);
    SetEventInfo(GetNextExtEventMask(), _deviceButton3Motion);
    SetEventInfo(GetNextExtEventMask(), _deviceButton4Motion);
    SetEventInfo(GetNextExtEventMask(), _deviceButton5Motion);

    /* If DeviceButtonMotionMask is != ButtonMotionMask, event delivery
     * breaks down. The device needs the dev->button->motionMask. If DBMM is
     * the same as BMM, we can ensure that both core and device events can be
     * delivered, without the need for extra structures in the DeviceIntRec.
     */
    DeviceButtonMotionMask = GetNextExtEventMask();
a1045 6
    if (DeviceButtonMotionMask != ButtonMotionMask)
    {
        /* This should never happen, but if it does, hide under the
         * bed and cry for help. */
        ErrorF("[Xi] DeviceButtonMotionMask != ButtonMotionMask. Trouble!\n");
    }
a1046 1
    DeviceFocusChangeMask = GetNextExtEventMask();
d1050 2
a1051 7
    mask = GetNextExtEventMask();
    SetMaskForExtEvent(mask, DeviceMappingNotify);
    DeviceMappingNotifyMask = mask;

    mask = GetNextExtEventMask();
    SetMaskForExtEvent(mask, ChangeDeviceNotify);
    ChangeDeviceNotifyMask = mask;
a1052 1
    DeviceButtonGrabMask = GetNextExtEventMask();
a1055 1
    DeviceOwnerGrabButtonMask = GetNextExtEventMask();
a1056 2

    DevicePresenceNotifyMask = GetNextExtEventMask();
a1057 2

    DevicePropertyNotifyMask = GetNextExtEventMask();
a1087 1
    lastExtEventMask = 1;
d1125 1
a1147 15
/*****************************************************************
 *
 * Returns TRUE if the device has some sort of pointer type.
 *
 */

Bool
DeviceIsPointerType(DeviceIntPtr dev)
{
    if (dev_type[1].type == dev->type)
        return TRUE;

    return FALSE;
}

d1158 1
a1158 1
    dev->type = type;
d1254 4
d1270 1
a1270 1
	AllExtensionVersions[IReqCode - 128] = thisversion;
d1272 4
a1275 3
	XIInitKnownProperties();
	RT_INPUTCLIENT = CreateNewResourceType((DeleteType) InputClientGone);
	RegisterResourceName(RT_INPUTCLIENT, "INPUTCLIENT");
d1295 12
d1311 1
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d66 2
d75 1
d115 2
d151 92
d250 1
d267 1
d285 1
d297 2
a298 1
Mask PropagateMask[MAX_DEVICES];
d302 1
a302 1
 * Declarations of local routines.
d306 3
d310 2
a311 2
    XI_Add_DevicePresenceNotify_Major,
    XI_Add_DevicePresenceNotify_Minor
d314 21
d346 2
a347 70
    if (stuff->data == X_GetExtensionVersion)
	return (ProcXGetExtensionVersion(client));
    if (stuff->data == X_ListInputDevices)
	return (ProcXListInputDevices(client));
    else if (stuff->data == X_OpenDevice)
	return (ProcXOpenDevice(client));
    else if (stuff->data == X_CloseDevice)
	return (ProcXCloseDevice(client));
    else if (stuff->data == X_SetDeviceMode)
	return (ProcXSetDeviceMode(client));
    else if (stuff->data == X_SelectExtensionEvent)
	return (ProcXSelectExtensionEvent(client));
    else if (stuff->data == X_GetSelectedExtensionEvents)
	return (ProcXGetSelectedExtensionEvents(client));
    else if (stuff->data == X_ChangeDeviceDontPropagateList)
	return (ProcXChangeDeviceDontPropagateList(client));
    else if (stuff->data == X_GetDeviceDontPropagateList)
	return (ProcXGetDeviceDontPropagateList(client));
    else if (stuff->data == X_GetDeviceMotionEvents)
	return (ProcXGetDeviceMotionEvents(client));
    else if (stuff->data == X_ChangeKeyboardDevice)
	return (ProcXChangeKeyboardDevice(client));
    else if (stuff->data == X_ChangePointerDevice)
	return (ProcXChangePointerDevice(client));
    else if (stuff->data == X_GrabDevice)
	return (ProcXGrabDevice(client));
    else if (stuff->data == X_UngrabDevice)
	return (ProcXUngrabDevice(client));
    else if (stuff->data == X_GrabDeviceKey)
	return (ProcXGrabDeviceKey(client));
    else if (stuff->data == X_UngrabDeviceKey)
	return (ProcXUngrabDeviceKey(client));
    else if (stuff->data == X_GrabDeviceButton)
	return (ProcXGrabDeviceButton(client));
    else if (stuff->data == X_UngrabDeviceButton)
	return (ProcXUngrabDeviceButton(client));
    else if (stuff->data == X_AllowDeviceEvents)
	return (ProcXAllowDeviceEvents(client));
    else if (stuff->data == X_GetDeviceFocus)
	return (ProcXGetDeviceFocus(client));
    else if (stuff->data == X_SetDeviceFocus)
	return (ProcXSetDeviceFocus(client));
    else if (stuff->data == X_GetFeedbackControl)
	return (ProcXGetFeedbackControl(client));
    else if (stuff->data == X_ChangeFeedbackControl)
	return (ProcXChangeFeedbackControl(client));
    else if (stuff->data == X_GetDeviceKeyMapping)
	return (ProcXGetDeviceKeyMapping(client));
    else if (stuff->data == X_ChangeDeviceKeyMapping)
	return (ProcXChangeDeviceKeyMapping(client));
    else if (stuff->data == X_GetDeviceModifierMapping)
	return (ProcXGetDeviceModifierMapping(client));
    else if (stuff->data == X_SetDeviceModifierMapping)
	return (ProcXSetDeviceModifierMapping(client));
    else if (stuff->data == X_GetDeviceButtonMapping)
	return (ProcXGetDeviceButtonMapping(client));
    else if (stuff->data == X_SetDeviceButtonMapping)
	return (ProcXSetDeviceButtonMapping(client));
    else if (stuff->data == X_QueryDeviceState)
	return (ProcXQueryDeviceState(client));
    else if (stuff->data == X_SendExtensionEvent)
	return (ProcXSendExtensionEvent(client));
    else if (stuff->data == X_DeviceBell)
	return (ProcXDeviceBell(client));
    else if (stuff->data == X_SetDeviceValuators)
	return (ProcXSetDeviceValuators(client));
    else if (stuff->data == X_GetDeviceControl)
	return (ProcXGetDeviceControl(client));
    else if (stuff->data == X_ChangeDeviceControl)
	return (ProcXChangeDeviceControl(client));
d349 1
a349 1
    return (BadRequest);
d354 1
a354 1
 * SProcXDispatch 
d365 2
a366 70
    if (stuff->data == X_GetExtensionVersion)
	return (SProcXGetExtensionVersion(client));
    if (stuff->data == X_ListInputDevices)
	return (SProcXListInputDevices(client));
    else if (stuff->data == X_OpenDevice)
	return (SProcXOpenDevice(client));
    else if (stuff->data == X_CloseDevice)
	return (SProcXCloseDevice(client));
    else if (stuff->data == X_SetDeviceMode)
	return (SProcXSetDeviceMode(client));
    else if (stuff->data == X_SelectExtensionEvent)
	return (SProcXSelectExtensionEvent(client));
    else if (stuff->data == X_GetSelectedExtensionEvents)
	return (SProcXGetSelectedExtensionEvents(client));
    else if (stuff->data == X_ChangeDeviceDontPropagateList)
	return (SProcXChangeDeviceDontPropagateList(client));
    else if (stuff->data == X_GetDeviceDontPropagateList)
	return (SProcXGetDeviceDontPropagateList(client));
    else if (stuff->data == X_GetDeviceMotionEvents)
	return (SProcXGetDeviceMotionEvents(client));
    else if (stuff->data == X_ChangeKeyboardDevice)
	return (SProcXChangeKeyboardDevice(client));
    else if (stuff->data == X_ChangePointerDevice)
	return (SProcXChangePointerDevice(client));
    else if (stuff->data == X_GrabDevice)
	return (SProcXGrabDevice(client));
    else if (stuff->data == X_UngrabDevice)
	return (SProcXUngrabDevice(client));
    else if (stuff->data == X_GrabDeviceKey)
	return (SProcXGrabDeviceKey(client));
    else if (stuff->data == X_UngrabDeviceKey)
	return (SProcXUngrabDeviceKey(client));
    else if (stuff->data == X_GrabDeviceButton)
	return (SProcXGrabDeviceButton(client));
    else if (stuff->data == X_UngrabDeviceButton)
	return (SProcXUngrabDeviceButton(client));
    else if (stuff->data == X_AllowDeviceEvents)
	return (SProcXAllowDeviceEvents(client));
    else if (stuff->data == X_GetDeviceFocus)
	return (SProcXGetDeviceFocus(client));
    else if (stuff->data == X_SetDeviceFocus)
	return (SProcXSetDeviceFocus(client));
    else if (stuff->data == X_GetFeedbackControl)
	return (SProcXGetFeedbackControl(client));
    else if (stuff->data == X_ChangeFeedbackControl)
	return (SProcXChangeFeedbackControl(client));
    else if (stuff->data == X_GetDeviceKeyMapping)
	return (SProcXGetDeviceKeyMapping(client));
    else if (stuff->data == X_ChangeDeviceKeyMapping)
	return (SProcXChangeDeviceKeyMapping(client));
    else if (stuff->data == X_GetDeviceModifierMapping)
	return (SProcXGetDeviceModifierMapping(client));
    else if (stuff->data == X_SetDeviceModifierMapping)
	return (SProcXSetDeviceModifierMapping(client));
    else if (stuff->data == X_GetDeviceButtonMapping)
	return (SProcXGetDeviceButtonMapping(client));
    else if (stuff->data == X_SetDeviceButtonMapping)
	return (SProcXSetDeviceButtonMapping(client));
    else if (stuff->data == X_QueryDeviceState)
	return (SProcXQueryDeviceState(client));
    else if (stuff->data == X_SendExtensionEvent)
	return (SProcXSendExtensionEvent(client));
    else if (stuff->data == X_DeviceBell)
	return (SProcXDeviceBell(client));
    else if (stuff->data == X_SetDeviceValuators)
	return (SProcXSetDeviceValuators(client));
    else if (stuff->data == X_GetDeviceControl)
	return (SProcXGetDeviceControl(client));
    else if (stuff->data == X_ChangeDeviceControl)
	return (SProcXChangeDeviceControl(client));
d368 1
a368 1
    return (BadRequest);
a377 5
/* FIXME: this would be more concise and readable in ANSI C */
#define DISPATCH(code) \
    if (rep->RepType == X_##code) \
	SRepX##code (client, len, (x##code##Reply *) rep)

d432 4
d541 11
d564 1
a564 1
    for (i = 0; i < MAX_DEVICES; i++)
d585 1
a585 1
    for (i = 0; i < MAX_DEVICES; i++)
d598 1
a598 1
 * mask.  This means that the corresponding macros such as 
d623 1
a623 1
    for (i = 0; i < MAX_DEVICES; i++)
d636 1
d643 3
a645 1
    SetMaskForEvent(mask, event);
d675 1
d727 6
d735 6
d763 4
d772 1
a772 1
 * This function restores extension event types and masks to their 
d780 1
a780 1
    int i;
d783 1
d787 4
a790 1
	    SetMaskForEvent(0, EventInfo[i].type);
d812 1
d851 1
d855 16
d877 1
a877 1
_X_EXPORT void
d953 2
d969 1
d977 6
d987 1
d990 1
d1011 1
@


1.1
log
@Initial revision
@
text
@a60 2
#include <X11/X.h>
#include <X11/Xproto.h>
d72 1
d118 1
a118 1
struct dev_type
d154 1
a154 1
int BadEvent = 1;
d163 1
a163 1
Mask ChangeDeviceNotifyMask;
d168 1
d185 1
d206 2
a207 2
    XI_Add_XChangeDeviceControl_Major,
    XI_Add_XChangeDeviceControl_Minor
a209 45
/**********************************************************************
 *
 * IExtensionInit - initialize the input extension.
 *
 * Called from InitExtensions in main() or from QueryExtension() if the
 * extension is dynamically loaded.
 *
 * This extension has several events and errors.
 *
 */

void
XInputExtensionInit(void)
{
    ExtensionEntry *extEntry;

    extEntry = AddExtension(INAME, IEVENTS, IERRORS, ProcIDispatch,
			    SProcIDispatch, IResetProc, StandardMinorOpcode);
    if (extEntry) {
	IReqCode = extEntry->base;
	AllExtensionVersions[IReqCode - 128] = thisversion;
	MakeDeviceTypeAtoms();
	RT_INPUTCLIENT = CreateNewResourceType((DeleteType) InputClientGone);
	FixExtensionEvents(extEntry);
	ReplySwapVector[IReqCode] = (ReplySwapPtr) SReplyIDispatch;
	EventSwapVector[DeviceValuator] = SEventIDispatch;
	EventSwapVector[DeviceKeyPress] = SEventIDispatch;
	EventSwapVector[DeviceKeyRelease] = SEventIDispatch;
	EventSwapVector[DeviceButtonPress] = SEventIDispatch;
	EventSwapVector[DeviceButtonRelease] = SEventIDispatch;
	EventSwapVector[DeviceMotionNotify] = SEventIDispatch;
	EventSwapVector[DeviceFocusIn] = SEventIDispatch;
	EventSwapVector[DeviceFocusOut] = SEventIDispatch;
	EventSwapVector[ProximityIn] = SEventIDispatch;
	EventSwapVector[ProximityOut] = SEventIDispatch;
	EventSwapVector[DeviceStateNotify] = SEventIDispatch;
	EventSwapVector[DeviceKeyStateNotify] = SEventIDispatch;
	EventSwapVector[DeviceButtonStateNotify] = SEventIDispatch;
	EventSwapVector[DeviceMappingNotify] = SEventIDispatch;
	EventSwapVector[ChangeDeviceNotify] = SEventIDispatch;
    } else {
	FatalError("IExtensionInit: AddExtensions failed\n");
    }
}

d217 2
a218 2
int
ProcIDispatch(register ClientPtr client)
d291 1
a291 3
    else {
	SendErrorToClient(client, IReqCode, stuff->data, 0, BadRequest);
    }
d304 2
a305 2
int
SProcIDispatch(register ClientPtr client)
d378 1
a378 3
    else {
	SendErrorToClient(client, IReqCode, stuff->data, 0, BadRequest);
    }
d394 1
a394 1
void
a417 6
    else if (rep->RepType == X_ChangeKeyboardDevice)
	SRepXChangeKeyboardDevice(client, len,
				  (xChangeKeyboardDeviceReply *) rep);
    else if (rep->RepType == X_ChangePointerDevice)
	SRepXChangePointerDevice(client, len,
				 (xChangePointerDeviceReply *) rep);
a452 55
/*****************************************************************************
 *
 *	SEventIDispatch
 *
 *	Swap any events defined in this extension.
 */
#define DO_SWAP(func,type) func ((type *)from, (type *)to)

void
SEventIDispatch(xEvent * from, xEvent * to)
{
    int type = from->u.u.type & 0177;

    if (type == DeviceValuator)
	DO_SWAP(SEventDeviceValuator, deviceValuator);
    else if (type == DeviceKeyPress) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceKeyRelease) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceButtonPress) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceButtonRelease) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceMotionNotify) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceFocusIn)
	DO_SWAP(SEventFocus, deviceFocus);
    else if (type == DeviceFocusOut)
	DO_SWAP(SEventFocus, deviceFocus);
    else if (type == ProximityIn) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == ProximityOut) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceStateNotify)
	DO_SWAP(SDeviceStateNotifyEvent, deviceStateNotify);
    else if (type == DeviceKeyStateNotify)
	DO_SWAP(SDeviceKeyStateNotifyEvent, deviceKeyStateNotify);
    else if (type == DeviceButtonStateNotify)
	DO_SWAP(SDeviceButtonStateNotifyEvent, deviceButtonStateNotify);
    else if (type == DeviceMappingNotify)
	DO_SWAP(SDeviceMappingNotifyEvent, deviceMappingNotify);
    else if (type == ChangeDeviceNotify)
	DO_SWAP(SChangeDeviceNotifyEvent, changeDeviceNotify);
    else {
	FatalError("XInputExtension: Impossible event!\n");
    }
}

d459 1
a459 1
void
d462 2
a463 2
    register char n;
    register int i;
d475 1
a475 1
void
d478 1
a478 1
    register char n;
d486 1
a486 1
void
d489 2
a490 2
    register int i;
    register char n;
d502 1
a502 1
void
d506 1
a506 1
    register char n;
d512 1
a512 1
void
d516 1
a516 1
    register char n;
d522 1
a522 1
void
d525 1
a525 1
    register char n;
d532 1
a532 1
void
d535 1
a535 1
    register char n;
d542 104
d652 1
a652 1
void
d672 1
d745 3
d758 1
a758 1
void
d788 1
d806 1
a806 1
void
d826 1
d850 1
a850 1
void
d860 1
a860 1
/**************************************************************************
d862 1
a862 2
 * Return a DeviceIntPtr corresponding to a specified device id.
 * This will not return the pointer or keyboard, or devices that are not on.
d864 1
d866 1
d868 2
a869 2
DeviceIntPtr
LookupDeviceIntRec(CARD8 id)
d871 1
a871 1
    DeviceIntPtr dev;
d873 41
a913 6
    for (dev = inputInfo.devices; dev; dev = dev->next) {
	if (dev->id == id) {
	    if (id == inputInfo.pointer->id || id == inputInfo.keyboard->id)
		return (NULL);
	    return (dev);
	}
a914 1
    return (NULL);
d917 1
a917 1
/**************************************************************************
d919 1
a919 3
 * Allow the specified event to be restricted to being selected by one
 * client at a time.
 * The default is to allow more than one client to select the event.
d921 2
a922 12
 */

void
SetExclusiveAccess(Mask mask)
{
    int i;

    for (i = 0; i < MAX_DEVICES; i++)
	ExtExclusiveMasks[i] |= mask;
}

/**************************************************************************
d924 1
a924 2
 * Allow the specified event to have its propagation suppressed.
 * The default is to not allow suppression of propagation.
d929 1
a929 1
AllowPropagateSuppress(Mask mask)
d931 1
a931 1
    int i;
d933 28
a960 18
    for (i = 0; i < MAX_DEVICES; i++)
	PropagateMask[i] |= mask;
}

/**************************************************************************
 *
 * Return the next available extension event mask.
 *
 */

Mask
GetNextExtEventMask(void)
{
    int i;
    Mask mask = lastExtEventMask;

    if (lastExtEventMask == 0) {
	FatalError("GetNextExtEventMask: no more events are available.");
a961 43
    lastExtEventMask <<= 1;

    for (i = 0; i < MAX_DEVICES; i++)
	ExtValidMasks[i] |= mask;
    return mask;
}

/**************************************************************************
 *
 * Assign the specified mask to the specified event.
 *
 */

void
SetMaskForExtEvent(Mask mask, int event)
{

    EventInfo[ExtEventIndex].mask = mask;
    EventInfo[ExtEventIndex++].type = event;

    if ((event < LASTEvent) || (event >= 128))
	FatalError("MaskForExtensionEvent: bogus event number");
    SetMaskForEvent(mask, event);
}

/**************************************************************************
 *
 * Record an event mask where there is no unique corresponding event type.
 * We can't call SetMaskForEvent, since that would clobber the existing
 * mask for that event.  MotionHint and ButtonMotion are examples.
 *
 * Since extension event types will never be less than 64, we can use
 * 0-63 in the EventInfo array as the "type" to be used to look up this
 * mask.  This means that the corresponding macros such as 
 * DevicePointerMotionHint must have access to the same constants.
 *
 */

void
SetEventInfo(Mask mask, int constant)
{
    EventInfo[ExtEventIndex].mask = mask;
    EventInfo[ExtEventIndex++].type = constant;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d119 1
a119 1
static struct dev_type
d155 1
a155 1
static int BadEvent = 1;
d164 1
a164 1
static Mask ChangeDeviceNotifyMask;
a168 1
Mask DevicePresenceNotifyMask;
a184 1
int DevicePresenceNotify;
d205 2
a206 2
    XI_Add_DevicePresenceNotify_Major,
    XI_Add_DevicePresenceNotify_Minor
d209 45
d261 2
a262 2
static int
ProcIDispatch(ClientPtr client)
d350 2
a351 2
static int
SProcIDispatch(ClientPtr client)
d442 1
a442 1
static void
d466 6
d507 55
d568 1
a568 1
static void
d571 2
a572 2
    char n;
    int i;
d584 1
a584 1
static void
d587 1
a587 1
    char n;
d595 1
a595 1
static void
d598 2
a599 2
    int i;
    char n;
d611 1
a611 1
static void
d615 1
a615 1
    char n;
d621 1
a621 1
static void
d625 1
a625 1
    char n;
d631 1
a631 1
static void
d634 1
a634 1
    char n;
d641 1
a641 1
static void
d644 1
a644 1
    char n;
a650 104
static void
SDevicePresenceNotifyEvent (devicePresenceNotify *from, devicePresenceNotify *to)
{
    char n;

    *to = *from;
    swaps(&to->sequenceNumber,n);
    swapl(&to->time, n);
    swaps(&to->control, n);
}

/**************************************************************************
 *
 * Allow the specified event to have its propagation suppressed.
 * The default is to not allow suppression of propagation.
 *
 */

static void
AllowPropagateSuppress(Mask mask)
{
    int i;

    for (i = 0; i < MAX_DEVICES; i++)
	PropagateMask[i] |= mask;
}

/**************************************************************************
 *
 * Return the next available extension event mask.
 *
 */

static Mask
GetNextExtEventMask(void)
{
    int i;
    Mask mask = lastExtEventMask;

    if (lastExtEventMask == 0) {
	FatalError("GetNextExtEventMask: no more events are available.");
    }
    lastExtEventMask <<= 1;

    for (i = 0; i < MAX_DEVICES; i++)
	ExtValidMasks[i] |= mask;
    return mask;
}

/**************************************************************************
 *
 * Record an event mask where there is no unique corresponding event type.
 * We can't call SetMaskForEvent, since that would clobber the existing
 * mask for that event.  MotionHint and ButtonMotion are examples.
 *
 * Since extension event types will never be less than 64, we can use
 * 0-63 in the EventInfo array as the "type" to be used to look up this
 * mask.  This means that the corresponding macros such as 
 * DevicePointerMotionHint must have access to the same constants.
 *
 */

static void
SetEventInfo(Mask mask, int constant)
{
    EventInfo[ExtEventIndex].mask = mask;
    EventInfo[ExtEventIndex++].type = constant;
}

/**************************************************************************
 *
 * Allow the specified event to be restricted to being selected by one
 * client at a time.
 * The default is to allow more than one client to select the event.
 *
 */

static void
SetExclusiveAccess(Mask mask)
{
    int i;

    for (i = 0; i < MAX_DEVICES; i++)
	ExtExclusiveMasks[i] |= mask;
}

/**************************************************************************
 *
 * Assign the specified mask to the specified event.
 *
 */

static void
SetMaskForExtEvent(Mask mask, int event)
{

    EventInfo[ExtEventIndex].mask = mask;
    EventInfo[ExtEventIndex++].type = event;

    if ((event < LASTEvent) || (event >= 128))
	FatalError("MaskForExtensionEvent: bogus event number");
    SetMaskForEvent(mask, event);
}

d657 1
a657 1
static void
a676 1
    DevicePresenceNotify = DeviceButtonStateNotify + 1;
a748 3

    DevicePresenceNotifyMask = GetNextExtEventMask();
    SetEventInfo(DevicePresenceNotifyMask, _devicePresence);
d759 1
a759 1
static void
a788 1
    DevicePresenceNotify = 14;
d806 1
a806 1
static void
a825 1
    EventSwapVector[DevicePresenceNotify] = NotImplemented;
d849 1
a849 1
static void
d860 1
d862 1
d872 5
a876 2
	if (dev->id == id)
	    return dev;
d878 2
d881 28
a908 4
    for (dev = inputInfo.off_devices; dev; dev = dev->next) {
	if (dev->id == id)
	    return dev;
    }
d910 2
a911 1
    return NULL;
d914 1
a914 1
/*****************************************************************************
d916 1
a916 1
 *	SEventIDispatch
a917 1
 *	Swap any events defined in this extension.
a918 1
#define DO_SWAP(func,type) func ((type *)from, (type *)to)
d920 2
a921 2
static void
SEventIDispatch(xEvent * from, xEvent * to)
d923 2
a924 1
    int type = from->u.u.type & 0177;
d926 2
a927 39
    if (type == DeviceValuator)
	DO_SWAP(SEventDeviceValuator, deviceValuator);
    else if (type == DeviceKeyPress) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceKeyRelease) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceButtonPress) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceButtonRelease) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceMotionNotify) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceFocusIn)
	DO_SWAP(SEventFocus, deviceFocus);
    else if (type == DeviceFocusOut)
	DO_SWAP(SEventFocus, deviceFocus);
    else if (type == ProximityIn) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == ProximityOut) {
	SKeyButtonPtrEvent(from, to);
	to->u.keyButtonPointer.pad1 = from->u.keyButtonPointer.pad1;
    } else if (type == DeviceStateNotify)
	DO_SWAP(SDeviceStateNotifyEvent, deviceStateNotify);
    else if (type == DeviceKeyStateNotify)
	DO_SWAP(SDeviceKeyStateNotifyEvent, deviceKeyStateNotify);
    else if (type == DeviceButtonStateNotify)
	DO_SWAP(SDeviceButtonStateNotifyEvent, deviceButtonStateNotify);
    else if (type == DeviceMappingNotify)
	DO_SWAP(SDeviceMappingNotifyEvent, deviceMappingNotify);
    else if (type == ChangeDeviceNotify)
	DO_SWAP(SChangeDeviceNotifyEvent, changeDeviceNotify);
    else {
	FatalError("XInputExtension: Impossible event!\n");
d929 5
d936 3
a938 1
/**********************************************************************
d940 15
a954 1
 * IExtensionInit - initialize the input extension.
d956 3
a958 2
 * Called from InitExtensions in main() or from QueryExtension() if the
 * extension is dynamically loaded.
d960 4
a963 1
 * This extension has several events and errors.
d968 1
a968 1
XInputExtensionInit(void)
d970 2
a971 29
    ExtensionEntry *extEntry;

    extEntry = AddExtension(INAME, IEVENTS, IERRORS, ProcIDispatch,
			    SProcIDispatch, IResetProc, StandardMinorOpcode);
    if (extEntry) {
	IReqCode = extEntry->base;
	AllExtensionVersions[IReqCode - 128] = thisversion;
	MakeDeviceTypeAtoms();
	RT_INPUTCLIENT = CreateNewResourceType((DeleteType) InputClientGone);
	FixExtensionEvents(extEntry);
	ReplySwapVector[IReqCode] = (ReplySwapPtr) SReplyIDispatch;
	EventSwapVector[DeviceValuator] = SEventIDispatch;
	EventSwapVector[DeviceKeyPress] = SEventIDispatch;
	EventSwapVector[DeviceKeyRelease] = SEventIDispatch;
	EventSwapVector[DeviceButtonPress] = SEventIDispatch;
	EventSwapVector[DeviceButtonRelease] = SEventIDispatch;
	EventSwapVector[DeviceMotionNotify] = SEventIDispatch;
	EventSwapVector[DeviceFocusIn] = SEventIDispatch;
	EventSwapVector[DeviceFocusOut] = SEventIDispatch;
	EventSwapVector[ProximityIn] = SEventIDispatch;
	EventSwapVector[ProximityOut] = SEventIDispatch;
	EventSwapVector[DeviceStateNotify] = SEventIDispatch;
	EventSwapVector[DeviceKeyStateNotify] = SEventIDispatch;
	EventSwapVector[DeviceButtonStateNotify] = SEventIDispatch;
	EventSwapVector[DeviceMappingNotify] = SEventIDispatch;
	EventSwapVector[ChangeDeviceNotify] = SEventIDispatch;
    } else {
	FatalError("IExtensionInit: AddExtensions failed\n");
    }
@

