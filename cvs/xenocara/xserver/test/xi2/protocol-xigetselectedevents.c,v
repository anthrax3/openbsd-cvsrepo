head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.09.27.17.53.05;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	cVXoV5PxI8YrEaVA;

1.3
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.05.13.32.58;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.27.19.02.38;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/**
 * Copyright Â© 2009 Red Hat, Inc.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice (including the next
 *  paragraph) shall be included in all copies or substantial portions of the
 *  Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

/*
 * Protocol testing for XIGetSelectedEvents request.
 *
 * Tests include:
 * BadWindow on wrong window.
 * Zero-length masks if no masks are set.
 * Valid masks for valid devices.
 * Masks set on non-existent devices are not returned.
 *
 * Note that this test is not connected to the XISelectEvents request.
 */
#include <stdint.h>
#include <X11/X.h>
#include <X11/Xproto.h>
#include <X11/extensions/XI2proto.h>
#include "inputstr.h"
#include "windowstr.h"
#include "extinit.h"            /* for XInputExtensionInit */
#include "scrnintstr.h"
#include "xiselectev.h"
#include "exevents.h"

#include "protocol-common.h"

static void reply_XIGetSelectedEvents(ClientPtr client, int len, char *data,
                                      void *userdata);
static void reply_XIGetSelectedEvents_data(ClientPtr client, int len,
                                           char *data, void *userdata);

struct {
    int num_masks_expected;
    unsigned char mask[MAXDEVICES][XI2LASTEVENT];       /* intentionally bigger */
    int mask_len;
} test_data;

/* dixLookupWindow requires a lot of setup not necessary for this test.
 * Simple wrapper that returns either one of the fake root window or the
 * fake client window. If the requested ID is neither of those wanted,
 * return whatever the real dixLookupWindow does.
 */
int
__wrap_dixLookupWindow(WindowPtr *win, XID id, ClientPtr client, Mask access)
{
    if (id == root.drawable.id) {
        *win = &root;
        return Success;
    }
    else if (id == window.drawable.id) {
        *win = &window;
        return Success;
    }

    return __real_dixLookupWindow(win, id, client, access);
}

/* AddResource is called from XISetSEventMask, we don't need this */
Bool
__wrap_AddResource(XID id, RESTYPE type, void *value)
{
    return TRUE;
}

static void
reply_XIGetSelectedEvents(ClientPtr client, int len, char *data, void *userdata)
{
    xXIGetSelectedEventsReply *rep = (xXIGetSelectedEventsReply *) data;

    if (client->swapped) {
        swapl(&rep->length);
        swaps(&rep->sequenceNumber);
        swaps(&rep->num_masks);
    }

    reply_check_defaults(rep, len, XIGetSelectedEvents);

    assert(rep->num_masks == test_data.num_masks_expected);

    reply_handler = reply_XIGetSelectedEvents_data;
}

static void
reply_XIGetSelectedEvents_data(ClientPtr client, int len, char *data,
                               void *userdata)
{
    int i;
    xXIEventMask *mask;
    unsigned char *bitmask;

    mask = (xXIEventMask *) data;
    for (i = 0; i < test_data.num_masks_expected; i++) {
        if (client->swapped) {
            swaps(&mask->deviceid);
            swaps(&mask->mask_len);
        }

        assert(mask->deviceid < 6);
        assert(mask->mask_len <= (((XI2LASTEVENT + 8) / 8) + 3) / 4);

        bitmask = (unsigned char *) &mask[1];
        assert(memcmp(bitmask,
                      test_data.mask[mask->deviceid], mask->mask_len * 4) == 0);

        mask =
            (xXIEventMask *) ((char *) mask + mask->mask_len * 4 +
                              sizeof(xXIEventMask));
    }

}

static void
request_XIGetSelectedEvents(xXIGetSelectedEventsReq * req, int error)
{
    int rc;
    ClientRec client;

    client = init_client(req->length, req);

    reply_handler = reply_XIGetSelectedEvents;

    rc = ProcXIGetSelectedEvents(&client);
    assert(rc == error);

    reply_handler = reply_XIGetSelectedEvents;
    client.swapped = TRUE;
    swapl(&req->win);
    swaps(&req->length);
    rc = SProcXIGetSelectedEvents(&client);
    assert(rc == error);
}

static void
test_XIGetSelectedEvents(void)
{
    int i, j;
    xXIGetSelectedEventsReq request;
    ClientRec client = init_client(0, NULL);
    unsigned char *mask;
    DeviceIntRec dev;

    request_init(&request, XIGetSelectedEvents);

    printf("Testing for BadWindow on invalid window.\n");
    request.win = None;
    request_XIGetSelectedEvents(&request, BadWindow);

    printf("Testing for zero-length (unset) masks.\n");
    /* No masks set yet */
    test_data.num_masks_expected = 0;
    request.win = ROOT_WINDOW_ID;
    request_XIGetSelectedEvents(&request, Success);

    request.win = CLIENT_WINDOW_ID;
    request_XIGetSelectedEvents(&request, Success);

    memset(test_data.mask, 0, sizeof(test_data.mask));

    printf("Testing for valid masks\n");
    memset(&dev, 0, sizeof(dev));       /* dev->id is enough for XISetEventMask */
    request.win = ROOT_WINDOW_ID;

    /* devices 6 - MAXDEVICES don't exist, they mustn't be included in the
     * reply even if a mask is set */
    for (j = 0; j < MAXDEVICES; j++) {
        test_data.num_masks_expected = min(j + 1, devices.num_devices + 2);
        dev.id = j;
        mask = test_data.mask[j];
        /* bits one-by-one */
        for (i = 0; i < XI2LASTEVENT; i++) {
            SetBit(mask, i);
            XISetEventMask(&dev, &root, &client, (i + 8) / 8, mask);
            request_XIGetSelectedEvents(&request, Success);
            ClearBit(mask, i);
        }

        /* all valid mask bits */
        for (i = 0; i < XI2LASTEVENT; i++) {
            SetBit(mask, i);
            XISetEventMask(&dev, &root, &client, (i + 8) / 8, mask);
            request_XIGetSelectedEvents(&request, Success);
        }
    }

    printf("Testing removing all masks\n");
    /* Unset all masks one-by-one */
    for (j = MAXDEVICES - 1; j >= 0; j--) {
        if (j < devices.num_devices + 2)
            test_data.num_masks_expected--;

        mask = test_data.mask[j];
        memset(mask, 0, XI2LASTEVENT);

        dev.id = j;
        XISetEventMask(&dev, &root, &client, 0, NULL);

        request_XIGetSelectedEvents(&request, Success);
    }
}

int
main(int argc, char **argv)
{
    init_simple();

    test_XIGetSelectedEvents();

    return 0;
}
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d85 1
a85 1
__wrap_AddResource(XID id, RESTYPE type, pointer value)
@


1.2
log
@Update to xserver 1.11.2
@
text
@d45 1
a45 1
#include "extinit.h" /* for XInputExtensionInit */
d52 4
a55 3
static void reply_XIGetSelectedEvents(ClientPtr client, int len, char *data, void *userdata);
static void reply_XIGetSelectedEvents_data(ClientPtr client, int len, char *data, void *userdata);

d59 1
a59 1
    unsigned char mask[MAXDEVICES][XI2LASTEVENT]; /* intentionally bigger */
d68 2
a69 1
int __wrap_dixLookupWindow(WindowPtr *win, XID id, ClientPtr client, Mask access)
d71 1
a71 2
    if (id == root.drawable.id)
    {
d74 2
a75 2
    } else if (id == window.drawable.id)
    {
d84 2
a85 1
Bool __wrap_AddResource(XID id, RESTYPE type, pointer value)
d90 2
a91 1
static void reply_XIGetSelectedEvents(ClientPtr client, int len, char *data, void *userdata)
d93 1
a93 1
    xXIGetSelectedEventsReply *rep = (xXIGetSelectedEventsReply*)data;
d95 4
a98 6
    if (client->swapped)
    {
        char n;
        swapl(&rep->length, n);
        swaps(&rep->sequenceNumber, n);
        swaps(&rep->num_masks, n);
d108 3
a110 1
static void reply_XIGetSelectedEvents_data(ClientPtr client, int len, char *data, void *userdata)
d116 5
a120 8
    mask = (xXIEventMask*)data;
    for (i = 0; i < test_data.num_masks_expected; i++)
    {
        if (client->swapped)
        {
            char n;
            swaps(&mask->deviceid, n);
            swaps(&mask->mask_len, n);
d124 1
a124 1
        assert(mask->mask_len <= (((XI2LASTEVENT + 8)/8) + 3)/4) ;
d126 1
a126 1
        bitmask = (unsigned char*)&mask[1];
d128 1
a128 2
                    test_data.mask[mask->deviceid],
                    mask->mask_len * 4) == 0);
d130 3
a132 1
        mask = (xXIEventMask*)((char*)mask + mask->mask_len * 4 + sizeof(xXIEventMask));
a134 1

d137 2
a138 1
static void request_XIGetSelectedEvents(xXIGetSelectedEventsReq* req, int error)
a139 1
    char n;
d142 1
d152 2
a153 2
    swapl(&req->win, n);
    swaps(&req->length, n);
d158 2
a159 1
static void test_XIGetSelectedEvents(void)
d182 1
a182 2
    memset(test_data.mask, 0,
           sizeof(test_data.mask));
d185 1
a185 1
    memset(&dev, 0, sizeof(dev)); /* dev->id is enough for XISetEventMask */
d190 1
a190 2
    for (j = 0; j < MAXDEVICES; j++)
    {
d195 1
a195 2
        for (i = 0; i < XI2LASTEVENT; i++)
        {
d197 1
a197 1
            XISetEventMask(&dev, &root, &client, (i + 8)/8, mask);
d203 1
a203 2
        for (i = 0; i < XI2LASTEVENT; i++)
        {
d205 1
a205 1
            XISetEventMask(&dev, &root, &client, (i + 8)/8, mask);
d212 1
a212 2
    for (j = MAXDEVICES - 1; j >= 0; j--)
    {
d226 2
a227 1
int main(int argc, char** argv)
a234 1

@


1.1
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a50 1
#include <glib.h>
d102 1
a102 1
    g_assert(rep->num_masks == test_data.num_masks_expected);
d123 2
a124 2
        g_assert(mask->deviceid < 6);
        g_assert(mask->mask_len <= (((XI2LASTEVENT + 8)/8) + 3)/4) ;
d127 1
a127 1
        g_assert(memcmp(bitmask,
d147 1
a147 1
    g_assert(rc == error);
d154 1
a154 1
    g_assert(rc == error);
d167 1
a167 1
    g_test_message("Testing for BadWindow on invalid window.");
d171 1
a171 1
    g_test_message("Testing for zero-length (unset) masks.");
d183 1
a183 1
    g_test_message("Testing for valid masks");
d212 1
a212 1
    g_test_message("Testing removing all masks");
a230 3
    g_test_init(&argc, &argv,NULL);
    g_test_bug_base("https://bugzilla.freedesktop.org/show_bug.cgi?id=");

d233 1
a233 1
    g_test_add_func("/xi2/protocol/XIGetSelectedEvents", test_XIGetSelectedEvents);
d235 1
a235 1
    return g_test_run();
@

