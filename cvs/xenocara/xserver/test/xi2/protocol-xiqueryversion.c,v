head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.09.27.17.53.05;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	cVXoV5PxI8YrEaVA;

1.5
date	2013.09.28.15.36.36;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.07.17.28.56;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.05.13.32.58;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.27.19.02.38;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/**
 * Copyright Â© 2009 Red Hat, Inc.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice (including the next
 *  paragraph) shall be included in all copies or substantial portions of the
 *  Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

/*
 * Protocol testing for XIQueryVersion request and reply.
 *
 * Test approach:
 * Wrap WriteToClient to intercept the server's reply.
 * Repeatedly test a client/server version combination, compare version in
 * reply with versions given. Version must be equal to either
 * server version or client version, whichever is smaller.
 * Client version less than 2 must return BadValue.
 */

#include <stdint.h>
#include <X11/X.h>
#include <X11/Xproto.h>
#include <X11/extensions/XI2proto.h>
#include "inputstr.h"
#include "extinit.h"            /* for XInputExtensionInit */
#include "scrnintstr.h"
#include "xiqueryversion.h"
#include "protocol-common.h"
#include "exglobals.h"

extern XExtensionVersion XIVersion;

struct test_data {
    int major_client;
    int minor_client;
    int major_server;
    int minor_server;
    int major_expected;
    int minor_expected;
};

static void
reply_XIQueryVersion(ClientPtr client, int len, char *data, void *closure)
{
    xXIQueryVersionReply *rep = (xXIQueryVersionReply *) data;
    struct test_data *versions = (struct test_data *) closure;
    unsigned int sver, cver, ver;

    if (client->swapped) {
        swapl(&rep->length);
        swaps(&rep->sequenceNumber);
        swaps(&rep->major_version);
        swaps(&rep->minor_version);
    }

    reply_check_defaults(rep, len, XIQueryVersion);

    assert(rep->length == 0);

    sver = versions->major_server * 1000 + versions->minor_server;
    cver = versions->major_client * 1000 + versions->minor_client;
    ver = rep->major_version * 1000 + rep->minor_version;

    assert(ver >= 2000);
    assert((sver > cver) ? ver == cver : ver == sver);
}

static void
reply_XIQueryVersion_multiple(ClientPtr client, int len, char *data, void *closure)
{
    xXIQueryVersionReply *rep = (xXIQueryVersionReply *) data;
    struct test_data *versions = (struct test_data *) closure;

    reply_check_defaults(rep, len, XIQueryVersion);
    assert(rep->length == 0);

    assert(versions->major_expected == rep->major_version);
    assert(versions->minor_expected == rep->minor_version);
}

/**
 * Run a single test with server version smaj.smin and client
 * version cmaj.cmin. Verify that return code is equal to 'error'.
 *
 * Test is run normal, then for a swapped client.
 */
static void
request_XIQueryVersion(int smaj, int smin, int cmaj, int cmin, int error)
{
    int rc;
    struct test_data versions;
    xXIQueryVersionReq request;
    ClientRec client;

    request_init(&request, XIQueryVersion);
    client = init_client(request.length, &request);
    global_userdata = (void *) &versions;

    /* Change the server to support smaj.smin */
    XIVersion.major_version = smaj;
    XIVersion.minor_version = smin;

    /* remember versions we send and expect */
    versions.major_client = cmaj;
    versions.minor_client = cmin;
    versions.major_server = XIVersion.major_version;
    versions.minor_server = XIVersion.minor_version;

    request.major_version = versions.major_client;
    request.minor_version = versions.minor_client;
    rc = ProcXIQueryVersion(&client);
    assert(rc == error);

    client = init_client(request.length, &request);
    client.swapped = TRUE;

    swaps(&request.length);
    swaps(&request.major_version);
    swaps(&request.minor_version);

    rc = SProcXIQueryVersion(&client);
    assert(rc == error);
}

/* Client version less than 2.0 must return BadValue, all other combinations
 * Success */
static void
test_XIQueryVersion(void)
{
    reply_handler = reply_XIQueryVersion;

    printf("Server version 2.0 - client versions [1..3].0\n");
    /* some simple tests to catch common errors quickly */
    request_XIQueryVersion(2, 0, 1, 0, BadValue);
    request_XIQueryVersion(2, 0, 2, 0, Success);
    request_XIQueryVersion(2, 0, 3, 0, Success);

    printf("Server version 3.0 - client versions [1..3].0\n");
    request_XIQueryVersion(3, 0, 1, 0, BadValue);
    request_XIQueryVersion(3, 0, 2, 0, Success);
    request_XIQueryVersion(3, 0, 3, 0, Success);

    printf("Server version 2.0 - client versions [1..3].[1..3]\n");
    request_XIQueryVersion(2, 0, 1, 1, BadValue);
    request_XIQueryVersion(2, 0, 2, 2, Success);
    request_XIQueryVersion(2, 0, 3, 3, Success);

    printf("Server version 2.2 - client versions [1..3].0\n");
    request_XIQueryVersion(2, 2, 1, 0, BadValue);
    request_XIQueryVersion(2, 2, 2, 0, Success);
    request_XIQueryVersion(2, 2, 3, 0, Success);

#if 0
    /* this one takes a while */
    unsigned int cmin, cmaj, smin, smaj;

    printf("Testing all combinations.\n");
    for (smaj = 2; smaj <= 0xFFFF; smaj++)
        for (smin = 0; smin <= 0xFFFF; smin++)
            for (cmin = 0; cmin <= 0xFFFF; cmin++)
                for (cmaj = 0; cmaj <= 0xFFFF; cmaj++) {
                    int error = (cmaj < 2) ? BadValue : Success;

                    request_XIQueryVersion(smaj, smin, cmaj, cmin, error);
                }

#endif

    reply_handler = NULL;
}


static void
test_XIQueryVersion_multiple(void)
{
    xXIQueryVersionReq request;
    ClientRec client;
    XIClientPtr pXIClient;
    struct test_data versions;
    int rc;

    request_init(&request, XIQueryVersion);
    client = init_client(request.length, &request);

    /* Change the server to support 2.2 */
    XIVersion.major_version = 2;
    XIVersion.minor_version = 2;

    reply_handler = reply_XIQueryVersion_multiple;
    global_userdata = (void *) &versions;

    /* run 1 */

    /* client is lower than server, nonexpected */
    versions.major_expected = request.major_version = 2;
    versions.minor_expected = request.minor_version = 1;
    rc = ProcXIQueryVersion(&client);
    assert(rc == Success);

    /* client is higher than server, no change */
    request.major_version = 2;
    request.minor_version = 3;
    rc = ProcXIQueryVersion(&client);
    assert(rc == Success);

    /* client tries to set higher version, stays same */
    request.major_version = 2;
    request.minor_version = 2;
    rc = ProcXIQueryVersion(&client);
    assert(rc == Success);

    /* client tries to set lower version, no change */
    request.major_version = 2;
    request.minor_version = 0;
    rc = ProcXIQueryVersion(&client);
    assert(rc == BadValue);

    /* run 2 */
    client = init_client(request.length, &request);
    XIVersion.major_version = 2;
    XIVersion.minor_version = 3;

    versions.major_expected = request.major_version = 2;
    versions.minor_expected = request.minor_version = 2;
    rc = ProcXIQueryVersion(&client);
    assert(rc == Success);

    /* client bumps version from 2.2 to 2.3 */
    request.major_version = 2;
    versions.minor_expected = request.minor_version = 3;
    rc = ProcXIQueryVersion(&client);
    assert(rc == Success);

    /* real version is changed, too! */
    pXIClient = dixLookupPrivate(&client.devPrivates, XIClientPrivateKey);
    assert(pXIClient->minor_version == 3);

    /* client tries to set lower version, no change */
    request.major_version = 2;
    request.minor_version = 1;
    rc = ProcXIQueryVersion(&client);
    assert(rc == BadValue);

    /* run 3 */
    client = init_client(request.length, &request);
    XIVersion.major_version = 2;
    XIVersion.minor_version = 3;

    versions.major_expected = request.major_version = 2;
    versions.minor_expected = request.minor_version = 3;
    rc = ProcXIQueryVersion(&client);
    assert(rc == Success);

    request.major_version = 2;
    versions.minor_expected = request.minor_version = 2;
    rc = ProcXIQueryVersion(&client);
    assert(rc == Success);

    /* but real client version must not be lowered */
    pXIClient = dixLookupPrivate(&client.devPrivates, XIClientPrivateKey);
    assert(pXIClient->minor_version == 3);

    request.major_version = 2;
    request.minor_version = 1;
    rc = ProcXIQueryVersion(&client);
    assert(rc == BadValue);
}

int
main(int argc, char **argv)
{
    init_simple();

    test_XIQueryVersion();
    test_XIQueryVersion_multiple();

    return 0;
}
@


1.5
log
@Update to xserver 1.14.3
@
text
@d116 1
a116 1
    userdata = (void *) &versions;
d209 1
a209 1
    userdata = (void *) &versions;
@


1.4
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a46 1

d48 1
d57 2
a58 2
    int major_cached;
    int minor_cached;
d96 2
a97 7
    if (versions->major_cached == -1) {
        versions->major_cached = rep->major_version;
        versions->minor_cached = rep->minor_version;
    }

    assert(versions->major_cached == rep->major_version);
    assert(versions->minor_cached == rep->minor_version);
d197 1
a211 2
    versions.major_cached = -1;
    versions.minor_cached = -1;
d213 3
a215 3
    /* client is lower than server, noncached */
    request.major_version = 2;
    request.minor_version = 1;
d219 1
a219 1
    /* client is higher than server, cached */
d225 1
a225 1
    /* client is equal, cached */
d231 1
a231 1
    /* client is low than cached */
d240 1
a240 3
    XIVersion.minor_version = 2;
    versions.major_cached = -1;
    versions.minor_cached = -1;
d242 2
a243 2
    request.major_version = 2;
    request.minor_version = 2;
d247 1
d249 1
a249 1
    request.minor_version = 3;
d253 5
d266 1
a266 3
    XIVersion.minor_version = 2;
    versions.major_cached = -1;
    versions.minor_cached = -1;
d268 2
a269 2
    request.major_version = 2;
    request.minor_version = 3;
d274 1
a274 1
    request.minor_version = 2;
d277 4
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d57 2
d62 1
a62 1
reply_XIQueryVersion(ClientPtr client, int len, char *data, void *userdata)
d65 1
a65 1
    struct test_data *versions = (struct test_data *) userdata;
d87 18
d138 1
d196 92
d294 1
@


1.2
log
@Update to xserver 1.11.2
@
text
@d44 1
a44 1
#include "extinit.h" /* for XInputExtensionInit */
d59 2
a60 1
static void reply_XIQueryVersion(ClientPtr client, int len, char* data, void *userdata)
d62 2
a63 2
    xXIQueryVersionReply *rep = (xXIQueryVersionReply*)data;
    struct test_data *versions = (struct test_data*)userdata;
d66 5
a70 7
    if (client->swapped)
    {
        char n;
        swapl(&rep->length, n);
        swaps(&rep->sequenceNumber, n);
        swaps(&rep->major_version, n);
        swaps(&rep->minor_version, n);
d91 2
a92 1
static void request_XIQueryVersion(int smaj, int smin, int cmaj, int cmin, int error)
a93 1
    char n;
d101 1
a101 1
    userdata = (void*)&versions;
d120 3
a122 3
    swaps(&request.length, n);
    swaps(&request.major_version, n);
    swaps(&request.minor_version, n);
d130 2
a131 1
static void test_XIQueryVersion(void)
d164 1
a164 2
                for (cmaj = 0; cmaj <= 0xFFFF; cmaj++)
                {
d166 1
d175 2
a176 1
int main(int argc, char** argv)
@


1.1
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a48 1
#include <glib.h>
d76 1
a76 1
    g_assert(rep->length == 0);
d82 2
a83 2
    g_assert(ver >= 2000);
    g_assert((sver > cver) ? ver == cver : ver == sver);
d117 1
a117 1
    g_assert(rc == error);
d126 1
a126 1
    g_assert(rc == error);
d135 1
a135 1
    g_test_message("Server version 2.0 - client versions [1..3].0");
d141 1
a141 1
    g_test_message("Server version 3.0 - client versions [1..3].0");
d146 1
a146 1
    g_test_message("Server version 2.0 - client versions [1..3].[1..3]");
d151 1
a151 1
    g_test_message("Server version 2.2 - client versions [1..3].0");
d160 1
a160 1
    g_test_message("Testing all combinations.");
a176 3
    g_test_init(&argc, &argv,NULL);
    g_test_bug_base("https://bugzilla.freedesktop.org/show_bug.cgi?id=");

d179 1
a179 1
    g_test_add_func("/xi2/protocol/XIQueryVersion", test_XIQueryVersion);
d181 1
a181 1
    return g_test_run();
@

