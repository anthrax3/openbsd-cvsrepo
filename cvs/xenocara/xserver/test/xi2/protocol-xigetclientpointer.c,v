head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.12.09.17.58.53;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	vcnjRBuLQw44cPHf;

1.3
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches
	1.3.8.1
	1.3.10.1;
next	1.2;

1.2
date	2011.11.05.13.32.58;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.27.19.02.38;	author matthieu;	state Exp;
branches;
next	;

1.3.8.1
date	2014.12.09.18.00.13;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.3.10.1
date	2014.12.09.17.59.33;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.4
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@/**
 * Copyright Â© 2009 Red Hat, Inc.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice (including the next
 *  paragraph) shall be included in all copies or substantial portions of the
 *  Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

/*
 * Protocol testing for XIGetClientPointer request.
 */
#include <stdint.h>
#include <X11/X.h>
#include <X11/Xproto.h>
#include <X11/extensions/XI2proto.h>
#include "inputstr.h"
#include "windowstr.h"
#include "scrnintstr.h"
#include "xigetclientpointer.h"
#include "exevents.h"

#include "protocol-common.h"

struct {
    int cp_is_set;
    DeviceIntPtr dev;
    int win;
} test_data;

static ClientRec client_window;
static ClientRec client_request;

int
__wrap_dixLookupClient(ClientPtr *pClient, XID rid, ClientPtr client,
                       Mask access)
{
    if (rid == ROOT_WINDOW_ID)
        return BadWindow;

    if (rid == CLIENT_WINDOW_ID) {
        *pClient = &client_window;
        return Success;
    }

    return __real_dixLookupClient(pClient, rid, client, access);
}

static void
reply_XIGetClientPointer(ClientPtr client, int len, char *data, void *userdata)
{
    xXIGetClientPointerReply *rep = (xXIGetClientPointerReply *) data;

    if (client->swapped) {
        swapl(&rep->length);
        swaps(&rep->sequenceNumber);
        swaps(&rep->deviceid);
    }

    reply_check_defaults(rep, len, XIGetClientPointer);

    assert(rep->set == test_data.cp_is_set);
    if (rep->set)
        assert(rep->deviceid == test_data.dev->id);
}

static void
request_XIGetClientPointer(ClientPtr client, xXIGetClientPointerReq * req,
                           int error)
{
    int rc;

    test_data.win = req->win;

    rc = ProcXIGetClientPointer(&client_request);
    assert(rc == error);

    if (rc == BadWindow)
        assert(client_request.errorValue == req->win);

    client_request.swapped = TRUE;
    swapl(&req->win);
    swaps(&req->length);
    rc = SProcXIGetClientPointer(&client_request);
    assert(rc == error);

    if (rc == BadWindow)
        assert(client_request.errorValue == req->win);

}

static void
test_XIGetClientPointer(void)
{
    xXIGetClientPointerReq request;

    request_init(&request, XIGetClientPointer);

    request.win = CLIENT_WINDOW_ID;

    reply_handler = reply_XIGetClientPointer;

    client_request = init_client(request.length, &request);

    printf("Testing invalid window\n");
    request.win = INVALID_WINDOW_ID;
    request_XIGetClientPointer(&client_request, &request, BadWindow);

    printf("Testing invalid length\n");
    client_request.req_len -= 4;
    request_XIGetClientPointer(&client_request, &request, BadLength);
    client_request.req_len += 4;

    test_data.cp_is_set = FALSE;

    printf("Testing window None, unset ClientPointer.\n");
    request.win = None;
    request_XIGetClientPointer(&client_request, &request, Success);

    printf("Testing valid window, unset ClientPointer.\n");
    request.win = CLIENT_WINDOW_ID;
    request_XIGetClientPointer(&client_request, &request, Success);

    printf("Testing valid window, set ClientPointer.\n");
    client_window.clientPtr = devices.vcp;
    test_data.dev = devices.vcp;
    test_data.cp_is_set = TRUE;
    request.win = CLIENT_WINDOW_ID;
    request_XIGetClientPointer(&client_request, &request, Success);

    client_window.clientPtr = NULL;

    printf("Testing window None, set ClientPointer.\n");
    client_request.clientPtr = devices.vcp;
    test_data.dev = devices.vcp;
    test_data.cp_is_set = TRUE;
    request.win = None;
    request_XIGetClientPointer(&client_request, &request, Success);
}

int
main(int argc, char **argv)
{
    init_simple();
    client_window = init_client(0, NULL);

    test_XIGetClientPointer();

    return 0;
}
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d127 5
@


1.3.8.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a126 5
    printf("Testing invalid length\n");
    client_request.req_len -= 4;
    request_XIGetClientPointer(&client_request, &request, BadLength);
    client_request.req_len += 4;

@


1.3.10.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a126 5
    printf("Testing invalid length\n");
    client_request.req_len -= 4;
    request_XIGetClientPointer(&client_request, &request, BadLength);
    client_request.req_len += 4;

@


1.2
log
@Update to xserver 1.11.2
@
text
@d52 3
a54 1
int __wrap_dixLookupClient(ClientPtr *pClient, XID rid, ClientPtr client, Mask access)
d59 1
a59 2
    if (rid == CLIENT_WINDOW_ID)
    {
d67 2
a68 2

static void reply_XIGetClientPointer(ClientPtr client, int len, char *data, void *userdata)
d70 1
a70 1
    xXIGetClientPointerReply *rep = (xXIGetClientPointerReply*)data;
d72 4
a75 6
    if (client->swapped)
    {
        char n;
        swapl(&rep->length, n);
        swaps(&rep->sequenceNumber, n);
        swaps(&rep->deviceid, n);
d85 3
a87 1
static void request_XIGetClientPointer(ClientPtr client, xXIGetClientPointerReq* req, int error)
a88 1
    char n;
d100 2
a101 2
    swapl(&req->win, n);
    swaps(&req->length, n);
d110 2
a111 1
static void test_XIGetClientPointer(void)
a118 1

d154 2
a155 1
int main(int argc, char** argv)
@


1.1
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a41 1
#include <glib.h>
d81 1
a81 1
    g_assert(rep->set == test_data.cp_is_set);
d83 1
a83 1
        g_assert(rep->deviceid == test_data.dev->id);
d94 1
a94 1
    g_assert(rc == error);
d97 1
a97 1
        g_assert(client_request.errorValue == req->win);
d103 1
a103 1
    g_assert(rc == error);
d106 1
a106 1
        g_assert(client_request.errorValue == req->win);
d123 1
a123 1
    g_test_message("Testing invalid window");
d129 1
a129 1
    g_test_message("Testing window None, unset ClientPointer.");
d133 1
a133 1
    g_test_message("Testing valid window, unset ClientPointer.");
d137 1
a137 1
    g_test_message("Testing valid window, set ClientPointer.");
d146 1
a146 1
    g_test_message("Testing window None, set ClientPointer.");
a155 3
    g_test_init(&argc, &argv,NULL);
    g_test_bug_base("https://bugzilla.freedesktop.org/show_bug.cgi?id=");

d159 1
d161 1
a161 3
    g_test_add_func("/xi2/protocol/XIGetClientPointer", test_XIGetClientPointer);

    return g_test_run();
@

