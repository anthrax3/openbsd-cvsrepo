head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.16
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.14
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.12
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.06.07.17.28.56;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.05.13.32.58;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.27.19.02.38;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/**
 * Copyright Â© 2009 Red Hat, Inc.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice (including the next
 *  paragraph) shall be included in all copies or substantial portions of the
 *  Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

/*
 * Protocol testing for XISelectEvents request.
 *
 * Test approach:
 *
 * Wrap XISetEventMask to intercept when the server tries to apply the event
 * mask. Ensure that the mask passed in is equivalent to the one supplied by
 * the client. Ensure that invalid devices and invalid masks return errors
 * as appropriate.
 *
 * Tests included:
 * BadValue for num_masks < 0
 * BadWindow for invalid windows
 * BadDevice for non-existing devices
 * BadImplemenation for devices >= 0xFF
 * BadValue if HierarchyChanged bit is set for devices other than
 *          XIAllDevices
 * BadValue for invalid mask bits
 * Sucecss for excessive mask lengths
 *
 */

#include <stdint.h>
#include <X11/X.h>
#include <X11/Xproto.h>
#include <X11/extensions/XI2proto.h>
#include "inputstr.h"
#include "windowstr.h"
#include "extinit.h"            /* for XInputExtensionInit */
#include "scrnintstr.h"
#include "exglobals.h"
#include "xiselectev.h"

#include "protocol-common.h"

static unsigned char *data[4096 * 20];  /* the request data buffer */

int
__wrap_XISetEventMask(DeviceIntPtr dev, WindowPtr win, int len,
                      unsigned char *mask)
{
    return Success;
}

/* dixLookupWindow requires a lot of setup not necessary for this test.
 * Simple wrapper that returns either one of the fake root window or the
 * fake client window. If the requested ID is neither of those wanted,
 * return whatever the real dixLookupWindow does.
 */
int
__wrap_dixLookupWindow(WindowPtr *win, XID id, ClientPtr client, Mask access)
{
    if (id == root.drawable.id) {
        *win = &root;
        return Success;
    }
    else if (id == window.drawable.id) {
        *win = &window;
        return Success;
    }

    return __real_dixLookupWindow(win, id, client, access);
}

static void
request_XISelectEvent(xXISelectEventsReq * req, int error)
{
    int i;
    int rc;
    ClientRec client;
    xXIEventMask *mask, *next;

    req->length = (sz_xXISelectEventsReq / 4);
    mask = (xXIEventMask *) &req[1];
    for (i = 0; i < req->num_masks; i++) {
        req->length += sizeof(xXIEventMask) / 4 + mask->mask_len;
        mask = (xXIEventMask *) ((char *) &mask[1] + mask->mask_len * 4);
    }

    client = init_client(req->length, req);

    rc = ProcXISelectEvents(&client);
    assert(rc == error);

    client.swapped = TRUE;

    mask = (xXIEventMask *) &req[1];
    for (i = 0; i < req->num_masks; i++) {
        next = (xXIEventMask *) ((char *) &mask[1] + mask->mask_len * 4);
        swaps(&mask->deviceid);
        swaps(&mask->mask_len);
        mask = next;
    }

    swapl(&req->win);
    swaps(&req->length);
    swaps(&req->num_masks);
    rc = SProcXISelectEvents(&client);
    assert(rc == error);
}

static void
_set_bit(unsigned char *bits, int bit)
{
    SetBit(bits, bit);
    if (bit >= XI_TouchBegin && bit <= XI_TouchOwnership) {
        SetBit(bits, XI_TouchBegin);
        SetBit(bits, XI_TouchUpdate);
        SetBit(bits, XI_TouchEnd);
    }
}

static void
_clear_bit(unsigned char *bits, int bit)
{
    ClearBit(bits, bit);
    if (bit >= XI_TouchBegin && bit <= XI_TouchOwnership) {
        ClearBit(bits, XI_TouchBegin);
        ClearBit(bits, XI_TouchUpdate);
        ClearBit(bits, XI_TouchEnd);
    }
}

static void
request_XISelectEvents_masks(xXISelectEventsReq * req)
{
    int i, j;
    xXIEventMask *mask;
    int nmasks = (XI2LASTEVENT + 7) / 8;
    unsigned char *bits;

    mask = (xXIEventMask *) &req[1];
    req->win = ROOT_WINDOW_ID;

    /* if a clients submits more than 100 masks, consider it insane and untested */
    for (i = 1; i <= 1000; i++) {
        req->num_masks = i;
        mask->deviceid = XIAllDevices;

        /* Test 0:
         * mask_len is 0 -> Success
         */
        mask->mask_len = 0;
        request_XISelectEvent(req, Success);

        /* Test 1:
         * mask may be larger than needed for XI2LASTEVENT.
         * Test setting each valid mask bit, while leaving unneeded bits 0.
         * -> Success
         */
        bits = (unsigned char *) &mask[1];
        mask->mask_len = (nmasks + 3) / 4 * 10;
        memset(bits, 0, mask->mask_len * 4);
        for (j = 0; j <= XI2LASTEVENT; j++) {
            _set_bit(bits, j);
            request_XISelectEvent(req, Success);
            _clear_bit(bits, j);
        }

        /* Test 2:
         * mask may be larger than needed for XI2LASTEVENT.
         * Test setting all valid mask bits, while leaving unneeded bits 0.
         * -> Success
         */
        bits = (unsigned char *) &mask[1];
        mask->mask_len = (nmasks + 3) / 4 * 10;
        memset(bits, 0, mask->mask_len * 4);

        for (j = 0; j <= XI2LASTEVENT; j++) {
            _set_bit(bits, j);
            request_XISelectEvent(req, Success);
        }

        /* Test 3:
         * mask is larger than needed for XI2LASTEVENT. If any unneeded bit
         * is set -> BadValue
         */
        bits = (unsigned char *) &mask[1];
        mask->mask_len = (nmasks + 3) / 4 * 10;
        memset(bits, 0, mask->mask_len * 4);

        for (j = XI2LASTEVENT + 1; j < mask->mask_len * 4; j++) {
            _set_bit(bits, j);
            request_XISelectEvent(req, BadValue);
            _clear_bit(bits, j);
        }

        /* Test 4:
         * Mask len is a sensible length, only valid bits are set -> Success
         */
        bits = (unsigned char *) &mask[1];
        mask->mask_len = (nmasks + 3) / 4;
        memset(bits, 0, mask->mask_len * 4);
        for (j = 0; j <= XI2LASTEVENT; j++) {
            _set_bit(bits, j);
            request_XISelectEvent(req, Success);
        }

        /* Test 5:
         * HierarchyChanged bit is BadValue for devices other than
         * XIAllDevices
         */
        bits = (unsigned char *) &mask[1];
        mask->mask_len = (nmasks + 3) / 4;
        memset(bits, 0, mask->mask_len * 4);
        SetBit(bits, XI_HierarchyChanged);
        mask->deviceid = XIAllDevices;
        request_XISelectEvent(req, Success);
        for (j = 1; j < devices.num_devices; j++) {
            mask->deviceid = j;
            request_XISelectEvent(req, BadValue);
        }

        /* Test 6:
         * All bits set minus hierarchy changed bit -> Success
         */
        bits = (unsigned char *) &mask[1];
        mask->mask_len = (nmasks + 3) / 4;
        memset(bits, 0, mask->mask_len * 4);
        for (j = 0; j <= XI2LASTEVENT; j++)
            _set_bit(bits, j);
        _clear_bit(bits, XI_HierarchyChanged);
        for (j = 1; j < 6; j++) {
            mask->deviceid = j;
            request_XISelectEvent(req, Success);
        }

        mask =
            (xXIEventMask *) ((char *) mask + sizeof(xXIEventMask) +
                              mask->mask_len * 4);
    }
}

static void
test_XISelectEvents(void)
{
    int i;
    xXIEventMask *mask;
    xXISelectEventsReq *req;

    req = (xXISelectEventsReq *) data;

    request_init(req, XISelectEvents);

    printf("Testing for BadValue on zero-length masks\n");
    /* zero masks are BadValue, regardless of the window */
    req->num_masks = 0;

    req->win = None;
    request_XISelectEvent(req, BadValue);

    req->win = ROOT_WINDOW_ID;
    request_XISelectEvent(req, BadValue);

    req->win = CLIENT_WINDOW_ID;
    request_XISelectEvent(req, BadValue);

    printf("Testing for BadWindow.\n");
    /* None window is BadWindow, regardless of the masks.
     * We don't actually need to set the masks here, BadWindow must occur
     * before checking the masks.
     */
    req->win = None;
    req->num_masks = 1;
    request_XISelectEvent(req, BadWindow);

    req->num_masks = 2;
    request_XISelectEvent(req, BadWindow);

    req->num_masks = 0xFF;
    request_XISelectEvent(req, BadWindow);

    /* request size is 3, so 0xFFFC is the highest num_mask that doesn't
     * overflow req->length */
    req->num_masks = 0xFFFC;
    request_XISelectEvent(req, BadWindow);

    printf("Triggering num_masks/length overflow\n");
    req->win = ROOT_WINDOW_ID;
    /* Integer overflow - req->length can't hold that much */
    req->num_masks = 0xFFFF;
    request_XISelectEvent(req, BadLength);

    req->win = ROOT_WINDOW_ID;
    req->num_masks = 1;

    printf("Triggering bogus mask length error\n");
    mask = (xXIEventMask *) &req[1];
    mask->deviceid = 0;
    mask->mask_len = 0xFFFF;
    request_XISelectEvent(req, BadLength);

    /* testing various device ids */
    printf("Testing existing device ids.\n");
    for (i = 0; i < 6; i++) {
        mask = (xXIEventMask *) &req[1];
        mask->deviceid = i;
        mask->mask_len = 1;
        req->win = ROOT_WINDOW_ID;
        req->num_masks = 1;
        request_XISelectEvent(req, Success);
    }

    printf("Testing non-existing device ids.\n");
    for (i = 6; i <= 0xFFFF; i++) {
        req->win = ROOT_WINDOW_ID;
        req->num_masks = 1;
        mask = (xXIEventMask *) &req[1];
        mask->deviceid = i;
        mask->mask_len = 1;
        request_XISelectEvent(req, BadDevice);
    }

    request_XISelectEvents_masks(req);
}

int
main(int argc, char **argv)
{
    init_simple();

    test_XISelectEvents();

    return 0;
}
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d58 1
d101 1
a101 1
    mask = (xXIEventMask *) & req[1];
d114 1
a114 1
    mask = (xXIEventMask *) & req[1];
d159 1
a159 1
    mask = (xXIEventMask *) & req[1];
d315 1
a315 1
    mask = (xXIEventMask *) & req[1];
d323 1
a323 1
        mask = (xXIEventMask *) & req[1];
d335 1
a335 1
        mask = (xXIEventMask *) & req[1];
@


1.2
log
@Update to xserver 1.11.2
@
text
@d56 1
a56 1
#include "extinit.h" /* for XInputExtensionInit */
d62 1
a62 1
static unsigned char *data[4096 * 20]; /* the request data buffer */
d64 3
a66 1
int __wrap_XISetEventMask(DeviceIntPtr dev, WindowPtr win, int len, unsigned char* mask)
d76 2
a77 1
int __wrap_dixLookupWindow(WindowPtr *win, XID id, ClientPtr client, Mask access)
d79 1
a79 2
    if (id == root.drawable.id)
    {
d82 2
a83 2
    } else if (id == window.drawable.id)
    {
d91 2
a92 2

static void request_XISelectEvent(xXISelectEventsReq *req, int error)
a93 1
    char n;
d99 5
a103 6
    req->length = (sz_xXISelectEventsReq/4);
    mask = (xXIEventMask*)&req[1];
    for (i = 0; i < req->num_masks; i++)
    {
        req->length += sizeof(xXIEventMask)/4 + mask->mask_len;
        mask = (xXIEventMask*)((char*)&mask[1] + mask->mask_len * 4);
d113 5
a117 6
    mask = (xXIEventMask*)&req[1];
    for (i = 0; i < req->num_masks; i++)
    {
        next = (xXIEventMask*)((char*)&mask[1] + mask->mask_len * 4);
        swaps(&mask->deviceid, n);
        swaps(&mask->mask_len, n);
d121 3
a123 3
    swapl(&req->win, n);
    swaps(&req->length, n);
    swaps(&req->num_masks, n);
d128 24
a151 1
static void request_XISelectEvents_masks(xXISelectEventsReq *req)
d155 1
a155 1
    int nmasks = (XI2LASTEVENT + 7)/8;
d158 1
a158 1
    mask = (xXIEventMask*)&req[1];
d162 1
a162 2
    for (i = 1; i <= 1000; i++)
    {
d177 2
a178 2
        bits = (unsigned char*)&mask[1];
        mask->mask_len = (nmasks + 3)/4 * 10;
d180 2
a181 3
        for (j = 0; j <= XI2LASTEVENT; j++)
        {
            SetBit(bits, j);
d183 1
a183 1
            ClearBit(bits, j);
d191 2
a192 2
        bits = (unsigned char*)&mask[1];
        mask->mask_len = (nmasks + 3)/4 * 10;
d195 2
a196 3
        for (j = 0; j <= XI2LASTEVENT; j++)
        {
            SetBit(bits, j);
d204 2
a205 2
        bits = (unsigned char*)&mask[1];
        mask->mask_len = (nmasks + 3)/4 * 10;
d208 2
a209 3
        for (j = XI2LASTEVENT + 1; j < mask->mask_len * 4; j++)
        {
            SetBit(bits, j);
d211 1
a211 1
            ClearBit(bits, j);
d217 2
a218 2
        bits = (unsigned char*)&mask[1];
        mask->mask_len = (nmasks + 3)/4;
d220 2
a221 3
        for (j = 0; j <= XI2LASTEVENT; j++)
        {
            SetBit(bits, j);
d229 2
a230 2
        bits = (unsigned char*)&mask[1];
        mask->mask_len = (nmasks + 3)/4;
d235 1
a235 2
        for (j = 1; j < devices.num_devices; j++)
        {
d243 2
a244 2
        bits = (unsigned char*)&mask[1];
        mask->mask_len = (nmasks + 3)/4;
d247 3
a249 4
            SetBit(bits, j);
        ClearBit(bits, XI_HierarchyChanged);
        for (j = 1; j < 6; j++)
        {
d254 3
a256 1
        mask = (xXIEventMask*)((char*)mask + sizeof(xXIEventMask) + mask->mask_len * 4);
d260 2
a261 1
static void test_XISelectEvents(void)
d266 2
a267 1
    req = (xXISelectEventsReq*)data;
d314 1
a314 1
    mask = (xXIEventMask*)&req[1];
d321 2
a322 3
    for (i = 0; i < 6; i++)
    {
        mask = (xXIEventMask*)&req[1];
d331 1
a331 2
    for (i = 6; i <= 0xFFFF; i++)
    {
d334 1
a334 1
        mask = (xXIEventMask*)&req[1];
d343 2
a344 1
int main(int argc, char** argv)
a351 1

@


1.1
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a60 1
#include <glib.h>
d109 1
a109 1
    g_assert(rc == error);
d126 1
a126 1
    g_assert(rc == error);
d133 1
a133 1
    int nmasks = (XI_LASTEVENT + 7)/8;
d152 1
a152 1
         * mask may be larger than needed for XI_LASTEVENT.
d159 1
a159 1
        for (j = 0; j <= XI_LASTEVENT; j++)
d167 1
a167 1
         * mask may be larger than needed for XI_LASTEVENT.
d175 1
a175 1
        for (j = 0; j <= XI_LASTEVENT; j++)
d182 1
a182 1
         * mask is larger than needed for XI_LASTEVENT. If any unneeded bit
d189 1
a189 1
        for (j = XI_LASTEVENT + 1; j < mask->mask_len * 4; j++)
d202 1
a202 1
        for (j = 0; j <= XI_LASTEVENT; j++)
d230 1
a230 1
        for (j = 0; j <= XI_LASTEVENT; j++)
d252 1
a252 1
    g_test_message("Testing for BadValue on zero-length masks");
d265 1
a265 1
    g_test_message("Testing for BadWindow.");
d285 1
a285 1
    g_test_message("Triggering num_masks/length overflow");
d294 1
a294 1
    g_test_message("Triggering bogus mask length error");
d301 1
a301 1
    g_test_message("Testing existing device ids.");
d312 1
a312 1
    g_test_message("Testing non-existing device ids.");
a327 3
    g_test_init(&argc, &argv,NULL);
    g_test_bug_base("https://bugzilla.freedesktop.org/show_bug.cgi?id=");

d330 1
a330 1
    g_test_add_func("/xi2/protocol/XISelectEvents", test_XISelectEvents);
d332 1
a332 1
    return g_test_run();
@

