head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.18
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.16
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.14
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.12
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.06.07.17.28.56;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.05.13.32.58;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.27.19.02.38;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/**
 * Copyright Â© 2009 Red Hat, Inc.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice (including the next
 *  paragraph) shall be included in all copies or substantial portions of the
 *  Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

/*
 * Protocol testing for XISetClientPointer request.
 *
 * Tests include:
 * BadDevice of all devices except master pointers.
 * Success for a valid window.
 * Success for window None.
 * BadWindow for invalid windows.
 */
#include <stdint.h>
#include <X11/X.h>
#include <X11/Xproto.h>
#include <X11/extensions/XI2proto.h>
#include "inputstr.h"
#include "windowstr.h"
#include "extinit.h"            /* for XInputExtensionInit */
#include "scrnintstr.h"
#include "xisetclientpointer.h"
#include "exevents.h"
#include "exglobals.h"

#include "protocol-common.h"

static ClientRec client_window;
static ClientRec client_request;

int
__wrap_dixLookupClient(ClientPtr *pClient, XID rid, ClientPtr client,
                       Mask access)
{
    if (rid == ROOT_WINDOW_ID)
        return BadWindow;

    if (rid == CLIENT_WINDOW_ID) {
        *pClient = &client_window;
        return Success;
    }

    return __real_dixLookupClient(pClient, rid, client, access);
}

static void
request_XISetClientPointer(xXISetClientPointerReq * req, int error)
{
    int rc;

    client_request = init_client(req->length, req);

    rc = ProcXISetClientPointer(&client_request);
    assert(rc == error);

    if (rc == BadDevice)
        assert(client_request.errorValue == req->deviceid);

    client_request.swapped = TRUE;
    swapl(&req->win);
    swaps(&req->length);
    swaps(&req->deviceid);
    rc = SProcXISetClientPointer(&client_request);
    assert(rc == error);

    if (rc == BadDevice)
        assert(client_request.errorValue == req->deviceid);

}

static void
test_XISetClientPointer(void)
{
    int i;
    xXISetClientPointerReq request;

    request_init(&request, XISetClientPointer);

    request.win = CLIENT_WINDOW_ID;

    printf("Testing BadDevice error for XIAllDevices and XIMasterDevices.\n");
    request.deviceid = XIAllDevices;
    request_XISetClientPointer(&request, BadDevice);

    request.deviceid = XIAllMasterDevices;
    request_XISetClientPointer(&request, BadDevice);

    printf("Testing Success for VCP and VCK.\n");
    request.deviceid = devices.vcp->id; /* 2 */
    request_XISetClientPointer(&request, Success);
    assert(client_window.clientPtr->id == 2);

    request.deviceid = devices.vck->id; /* 3 */
    request_XISetClientPointer(&request, Success);
    assert(client_window.clientPtr->id == 2);

    printf("Testing BadDevice error for all other devices.\n");
    for (i = 4; i <= 0xFFFF; i++) {
        request.deviceid = i;
        request_XISetClientPointer(&request, BadDevice);
    }

    printf("Testing window None\n");
    request.win = None;
    request.deviceid = devices.vcp->id; /* 2 */
    request_XISetClientPointer(&request, Success);
    assert(client_request.clientPtr->id == 2);

    printf("Testing invalid window\n");
    request.win = INVALID_WINDOW_ID;
    request.deviceid = devices.vcp->id;
    request_XISetClientPointer(&request, BadWindow);

}

int
main(int argc, char **argv)
{
    init_simple();
    client_window = init_client(0, NULL);

    test_XISetClientPointer();

    return 0;
}
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d47 1
@


1.2
log
@Update to xserver 1.11.2
@
text
@d43 1
a43 1
#include "extinit.h" /* for XInputExtensionInit */
d53 3
a55 1
int __wrap_dixLookupClient(ClientPtr *pClient, XID rid, ClientPtr client, Mask access)
d60 1
a60 2
    if (rid == CLIENT_WINDOW_ID)
    {
d68 2
a69 1
static void request_XISetClientPointer(xXISetClientPointerReq* req, int error)
a70 1
    char n;
d72 1
d82 3
a84 3
    swapl(&req->win, n);
    swaps(&req->length, n);
    swaps(&req->deviceid, n);
d93 2
a94 1
static void test_XISetClientPointer(void)
d120 1
a120 2
    for (i = 4; i <= 0xFFFF; i++)
    {
d138 2
a139 2

int main(int argc, char** argv)
@


1.1
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a48 1
#include <glib.h>
d74 1
a74 1
    g_assert(rc == error);
d77 1
a77 1
        g_assert(client_request.errorValue == req->deviceid);
d84 1
a84 1
    g_assert(rc == error);
d87 1
a87 1
        g_assert(client_request.errorValue == req->deviceid);
d100 1
a100 1
    g_test_message("Testing BadDevice error for XIAllDevices and XIMasterDevices.");
d107 1
a107 1
    g_test_message("Testing Success for VCP and VCK.");
d110 1
a110 1
    g_assert(client_window.clientPtr->id == 2);
d114 1
a114 1
    g_assert(client_window.clientPtr->id == 2);
d116 1
a116 1
    g_test_message("Testing BadDevice error for all other devices.");
d123 1
a123 1
    g_test_message("Testing window None");
d127 1
a127 1
    g_assert(client_request.clientPtr->id == 2);
d129 1
a129 1
    g_test_message("Testing invalid window");
a138 3
    g_test_init(&argc, &argv,NULL);
    g_test_bug_base("https://bugzilla.freedesktop.org/show_bug.cgi?id=");

d142 1
a142 1
    g_test_add_func("/xi2/protocol/XISetClientPointer", test_XISetClientPointer);
d144 1
a144 1
    return g_test_run();
@

