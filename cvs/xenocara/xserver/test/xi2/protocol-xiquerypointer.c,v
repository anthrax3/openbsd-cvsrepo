head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.12.09.17.58.53;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	vcnjRBuLQw44cPHf;

1.4
date	2013.06.07.17.28.56;	author matthieu;	state Exp;
branches
	1.4.4.1
	1.4.6.1;
next	1.3;

1.3
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.05.13.32.58;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.27.19.02.38;	author matthieu;	state Exp;
branches;
next	;

1.4.4.1
date	2014.12.09.18.00.13;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.4.6.1
date	2014.12.09.17.59.33;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.5
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@/**
 * Copyright Â© 2009 Red Hat, Inc.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice (including the next
 *  paragraph) shall be included in all copies or substantial portions of the
 *  Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

/*
 * Protocol testing for XIQueryPointer request.
 */
#include <stdint.h>
#include <X11/X.h>
#include <X11/Xproto.h>
#include <X11/extensions/XI2proto.h>
#include "inputstr.h"
#include "windowstr.h"
#include "scrnintstr.h"
#include "xiquerypointer.h"
#include "exevents.h"
#include "exglobals.h"

#include "protocol-common.h"

static ClientRec client_request;
static void reply_XIQueryPointer_data(ClientPtr client, int len,
                                      char *data, void *closure);

static struct {
    DeviceIntPtr dev;
    WindowPtr win;
} test_data;

/* dixLookupWindow requires a lot of setup not necessary for this test.
 * Simple wrapper that returns either one of the fake root window or the
 * fake client window. If the requested ID is neither of those wanted,
 * return whatever the real dixLookupWindow does.
 */
int
__wrap_dixLookupWindow(WindowPtr *win, XID id, ClientPtr client, Mask access)
{
    if (id == root.drawable.id) {
        *win = &root;
        return Success;
    }
    else if (id == window.drawable.id) {
        *win = &window;
        return Success;
    }

    return __real_dixLookupWindow(win, id, client, access);
}

static void
reply_XIQueryPointer(ClientPtr client, int len, char *data, void *closure)
{
    xXIQueryPointerReply *rep = (xXIQueryPointerReply *) data;
    SpritePtr sprite;

    if (!rep->repType)
        return;

    if (client->swapped) {
        swapl(&rep->length);
        swaps(&rep->sequenceNumber);
        swapl(&rep->root);
        swapl(&rep->child);
        swapl(&rep->root_x);
        swapl(&rep->root_y);
        swapl(&rep->win_x);
        swapl(&rep->win_y);
        swaps(&rep->buttons_len);
    }

    reply_check_defaults(rep, len, XIQueryPointer);

    assert(rep->root == root.drawable.id);
    assert(rep->same_screen == xTrue);

    sprite = test_data.dev->spriteInfo->sprite;
    assert((rep->root_x >> 16) == sprite->hot.x);
    assert((rep->root_y >> 16) == sprite->hot.y);

    if (test_data.win == &root) {
        assert(rep->root_x == rep->win_x);
        assert(rep->root_y == rep->win_y);
        assert(rep->child == window.drawable.id);
    }
    else {
        int x, y;

        x = sprite->hot.x - window.drawable.x;
        y = sprite->hot.y - window.drawable.y;

        assert((rep->win_x >> 16) == x);
        assert((rep->win_y >> 16) == y);
        assert(rep->child == None);
    }

    assert(rep->same_screen == xTrue);

    reply_handler = reply_XIQueryPointer_data;
}

static void
reply_XIQueryPointer_data(ClientPtr client, int len, char *data, void *closure)
{
    reply_handler = reply_XIQueryPointer;
}

static void
request_XIQueryPointer(ClientPtr client, xXIQueryPointerReq * req, int error)
{
    int rc;

    rc = ProcXIQueryPointer(&client_request);
    assert(rc == error);

    if (rc == BadDevice)
        assert(client_request.errorValue == req->deviceid);

    client_request.swapped = TRUE;
    swaps(&req->deviceid);
    swaps(&req->length);
    rc = SProcXIQueryPointer(&client_request);
    assert(rc == error);

    if (rc == BadDevice)
        assert(client_request.errorValue == req->deviceid);
}

static void
test_XIQueryPointer(void)
{
    int i;
    xXIQueryPointerReq request;

    memset(&request, 0, sizeof(request));

    request_init(&request, XIQueryPointer);

    reply_handler = reply_XIQueryPointer;

    client_request = init_client(request.length, &request);

    request.deviceid = XIAllDevices;
    request_XIQueryPointer(&client_request, &request, BadDevice);

    request.deviceid = XIAllMasterDevices;
    request_XIQueryPointer(&client_request, &request, BadDevice);

    request.win = root.drawable.id;
    test_data.win = &root;

    test_data.dev = devices.vcp;
    request.deviceid = devices.vcp->id;
    request_XIQueryPointer(&client_request, &request, Success);
    request.deviceid = devices.vck->id;
    request_XIQueryPointer(&client_request, &request, BadDevice);
    request.deviceid = devices.mouse->id;
    request_XIQueryPointer(&client_request, &request, BadDevice);
    request.deviceid = devices.kbd->id;
    request_XIQueryPointer(&client_request, &request, BadDevice);

    test_data.dev = devices.mouse;
    devices.mouse->master = NULL;       /* Float, kind-of */
    request.deviceid = devices.mouse->id;
    request_XIQueryPointer(&client_request, &request, Success);

    for (i = devices.kbd->id + 1; i <= 0xFFFF; i++) {
        request.deviceid = i;
        request_XIQueryPointer(&client_request, &request, BadDevice);
    }

    request.win = window.drawable.id;

    test_data.dev = devices.vcp;
    test_data.win = &window;
    request.deviceid = devices.vcp->id;
    request_XIQueryPointer(&client_request, &request, Success);

    test_data.dev = devices.mouse;
    request.deviceid = devices.mouse->id;
    request_XIQueryPointer(&client_request, &request, Success);

    /* test REQUEST_SIZE_MATCH */
    client_request.req_len -= 4;
    request_XIQueryPointer(&client_request, &request, BadLength);
}

int
main(int argc, char **argv)
{
    init_simple();

    test_XIQueryPointer();

    return 0;
}
@


1.4
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d204 4
@


1.4.4.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a203 4

    /* test REQUEST_SIZE_MATCH */
    client_request.req_len -= 4;
    request_XIQueryPointer(&client_request, &request, BadLength);
@


1.4.6.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a203 4

    /* test REQUEST_SIZE_MATCH */
    client_request.req_len -= 4;
    request_XIQueryPointer(&client_request, &request, BadLength);
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d40 1
d46 1
a46 1
                                      char *data, void *userdata);
d74 1
a74 1
reply_XIQueryPointer(ClientPtr client, int len, char *data, void *userdata)
d125 1
a125 1
reply_XIQueryPointer_data(ClientPtr client, int len, char *data, void *userdata)
@


1.2
log
@Update to xserver 1.11.2
@
text
@a51 1

d57 2
a58 1
int __wrap_dixLookupWindow(WindowPtr *win, XID id, ClientPtr client, Mask access)
d60 1
a60 2
    if (id == root.drawable.id)
    {
d63 2
a64 2
    } else if (id == window.drawable.id)
    {
d72 2
a73 2
static void reply_XIQueryPointer(ClientPtr client, int len, char *data,
                                 void *userdata)
d75 1
a75 1
    xXIQueryPointerReply *rep = (xXIQueryPointerReply*)data;
d81 10
a90 12
    if (client->swapped)
    {
        char n;
        swapl(&rep->length, n);
        swaps(&rep->sequenceNumber, n);
        swapl(&rep->root, n);
        swapl(&rep->child, n);
        swapl(&rep->root_x, n);
        swapl(&rep->root_y, n);
        swapl(&rep->win_x, n);
        swapl(&rep->win_y, n);
        swaps(&rep->buttons_len, n);
d102 1
a102 2
    if (test_data.win == &root)
    {
d106 2
a107 2
    } else
    {
a117 1

d123 2
a124 1
static void reply_XIQueryPointer_data(ClientPtr client, int len, char *data, void *userdata)
d129 2
a130 1
static void request_XIQueryPointer(ClientPtr client, xXIQueryPointerReq* req, int error)
a131 1
    char n;
d141 2
a142 2
    swaps(&req->deviceid, n);
    swaps(&req->length, n);
d150 2
a151 1
static void test_XIQueryPointer(void)
d184 1
a184 1
    devices.mouse->master = NULL; /* Float, kind-of */
d188 1
a188 2
    for (i = devices.kbd->id + 1; i <= 0xFFFF; i++)
    {
d205 2
a206 1
int main(int argc, char** argv)
@


1.1
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a41 1
#include <glib.h>
d98 2
a99 2
    g_assert(rep->root == root.drawable.id);
    g_assert(rep->same_screen == xTrue);
d102 2
a103 2
    g_assert((rep->root_x >> 16) == sprite->hot.x);
    g_assert((rep->root_y >> 16) == sprite->hot.y);
d107 3
a109 3
        g_assert(rep->root_x == rep->win_x);
        g_assert(rep->root_y == rep->win_y);
        g_assert(rep->child == window.drawable.id);
d117 3
a119 3
        g_assert((rep->win_x >> 16) == x);
        g_assert((rep->win_y >> 16) == y);
        g_assert(rep->child == None);
d123 1
a123 1
    g_assert(rep->same_screen == xTrue);
d139 1
a139 1
    g_assert(rc == error);
d142 1
a142 1
        g_assert(client_request.errorValue == req->deviceid);
d148 1
a148 1
    g_assert(rc == error);
d151 1
a151 1
        g_assert(client_request.errorValue == req->deviceid);
d187 1
a187 1
    devices.mouse->u.master = NULL; /* Float, kind-of */
a210 3
    g_test_init(&argc, &argv,NULL);
    g_test_bug_base("https://bugzilla.freedesktop.org/show_bug.cgi?id=");

d213 1
a213 1
    g_test_add_func("/xi2/protocol/XIQueryPointer", test_XIQueryPointer);
d215 1
a215 1
    return g_test_run();
@

