head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.09.16.19.10.21;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Te1daavkBLskZ8gc;

1.6
date	2014.12.09.17.58.52;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	vcnjRBuLQw44cPHf;

1.5
date	2014.05.02.19.27.47;	author matthieu;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	2010.07.27.19.02.26;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.14;	author matthieu;	state Exp;
branches;
next	;

1.4.8.1
date	2014.12.09.18.00.12;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.5.2.1
date	2014.12.09.17.59.32;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.7
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/* DO NOT EDIT - This file generated automatically by glX_proto_recv.py (from Mesa) script */

/*
 * (C) Copyright IBM Corporation 2005
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sub license,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * IBM,
 * AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <inttypes.h>
#include "glxserver.h"
#include "indirect_size.h"
#include "indirect_size_get.h"
#include "indirect_dispatch.h"
#include "glxbyteorder.h"
#include "indirect_util.h"
#include "singlesize.h"

#define __GLX_PAD(x)  (((x) + 3) & ~3)

typedef struct {
    __GLX_PIXEL_3D_HDR;
} __GLXpixel3DHeader;

extern GLboolean __glXErrorOccured(void);
extern void __glXClearErrorOccured(void);

static const unsigned dummy_answer[2] = { 0, 0 };

static GLsizei
bswap_CARD32(const void *src)
{
    union {
        uint32_t dst;
        GLsizei ret;
    } x;

    x.dst = bswap_32(*(uint32_t *) src);
    return x.ret;
}

static GLshort
bswap_CARD16(const void *src)
{
    union {
        uint16_t dst;
        GLshort ret;
    } x;

    x.dst = bswap_16(*(uint16_t *) src);
    return x.ret;
}

static GLenum
bswap_ENUM(const void *src)
{
    union {
        uint32_t dst;
        GLenum ret;
    } x;

    x.dst = bswap_32(*(uint32_t *) src);
    return x.ret;
}

static GLsync
bswap_CARD64(const void *src)
{
    union {
        uint64_t dst;
        GLsync ret;
    } x;

    x.dst = bswap_64(*(uint64_t *) src);
    return x.ret;
}

static GLdouble
bswap_FLOAT64(const void *src)
{
    union {
        uint64_t dst;
        GLdouble ret;
    } x;

    x.dst = bswap_64(*(uint64_t *) src);
    return x.ret;
}

static GLfloat
bswap_FLOAT32(const void *src)
{
    union {
        uint32_t dst;
        GLfloat ret;
    } x;

    x.dst = bswap_32(*(uint32_t *) src);
    return x.ret;
}

static void *
bswap_16_array(uint16_t * src, unsigned count)
{
    unsigned i;

    for (i = 0; i < count; i++) {
        uint16_t temp = bswap_16(src[i]);

        src[i] = temp;
    }

    return src;
}

static void *
bswap_32_array(uint32_t * src, unsigned count)
{
    unsigned i;

    for (i = 0; i < count; i++) {
        uint32_t temp = bswap_32(src[i]);

        src[i] = temp;
    }

    return src;
}

static void *
bswap_64_array(uint64_t * src, unsigned count)
{
    unsigned i;

    for (i = 0; i < count; i++) {
        uint64_t temp = bswap_64(src[i]);

        src[i] = temp;
    }

    return src;
}

int
__glXDispSwap_NewList(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        glNewList((GLuint) bswap_CARD32(pc + 0), (GLenum) bswap_ENUM(pc + 4));
        error = Success;
    }

    return error;
}

int
__glXDispSwap_EndList(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        glEndList();
        error = Success;
    }

    return error;
}

void
__glXDispSwap_CallList(GLbyte * pc)
{
    glCallList((GLuint) bswap_CARD32(pc + 0));
}

void
__glXDispSwap_CallLists(GLbyte * pc)
{
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);
    const GLenum type = (GLenum) bswap_ENUM(pc + 4);
    const GLvoid *lists;

    switch (type) {
    case GL_BYTE:
    case GL_UNSIGNED_BYTE:
    case GL_2_BYTES:
    case GL_3_BYTES:
    case GL_4_BYTES:
        lists = (const GLvoid *) (pc + 8);
        break;
    case GL_SHORT:
    case GL_UNSIGNED_SHORT:
        lists = (const GLvoid *) bswap_16_array((uint16_t *) (pc + 8), n);
        break;
    case GL_INT:
    case GL_UNSIGNED_INT:
    case GL_FLOAT:
        lists = (const GLvoid *) bswap_32_array((uint32_t *) (pc + 8), n);
        break;
    default:
        return;
    }

    glCallLists(n, type, lists);
}

int
__glXDispSwap_DeleteLists(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        glDeleteLists((GLuint) bswap_CARD32(pc + 0),
                      (GLsizei) bswap_CARD32(pc + 4));
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GenLists(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        GLuint retval;

        retval = glGenLists((GLsizei) bswap_CARD32(pc + 0));
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_ListBase(GLbyte * pc)
{
    glListBase((GLuint) bswap_CARD32(pc + 0));
}

void
__glXDispSwap_Begin(GLbyte * pc)
{
    glBegin((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_Bitmap(GLbyte * pc)
{
    const GLubyte *const bitmap = (const GLubyte *) ((pc + 44));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) bswap_CARD32(&hdr->rowLength));
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) bswap_CARD32(&hdr->skipRows));
    glPixelStorei(GL_UNPACK_SKIP_PIXELS,
                  (GLint) bswap_CARD32(&hdr->skipPixels));
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) bswap_CARD32(&hdr->alignment));

    glBitmap((GLsizei) bswap_CARD32(pc + 20),
             (GLsizei) bswap_CARD32(pc + 24),
             (GLfloat) bswap_FLOAT32(pc + 28),
             (GLfloat) bswap_FLOAT32(pc + 32),
             (GLfloat) bswap_FLOAT32(pc + 36),
             (GLfloat) bswap_FLOAT32(pc + 40), bitmap);
}

void
__glXDispSwap_Color3bv(GLbyte * pc)
{
    glColor3bv((const GLbyte *) (pc + 0));
}

void
__glXDispSwap_Color3dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    glColor3dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 3));
}

void
__glXDispSwap_Color3fv(GLbyte * pc)
{
    glColor3fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_Color3iv(GLbyte * pc)
{
    glColor3iv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_Color3sv(GLbyte * pc)
{
    glColor3sv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 3));
}

void
__glXDispSwap_Color3ubv(GLbyte * pc)
{
    glColor3ubv((const GLubyte *) (pc + 0));
}

void
__glXDispSwap_Color3uiv(GLbyte * pc)
{
    glColor3uiv((const GLuint *) bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_Color3usv(GLbyte * pc)
{
    glColor3usv((const GLushort *) bswap_16_array((uint16_t *) (pc + 0), 3));
}

void
__glXDispSwap_Color4bv(GLbyte * pc)
{
    glColor4bv((const GLbyte *) (pc + 0));
}

void
__glXDispSwap_Color4dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 32);
        pc -= 4;
    }
#endif

    glColor4dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 4));
}

void
__glXDispSwap_Color4fv(GLbyte * pc)
{
    glColor4fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 4));
}

void
__glXDispSwap_Color4iv(GLbyte * pc)
{
    glColor4iv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 4));
}

void
__glXDispSwap_Color4sv(GLbyte * pc)
{
    glColor4sv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 4));
}

void
__glXDispSwap_Color4ubv(GLbyte * pc)
{
    glColor4ubv((const GLubyte *) (pc + 0));
}

void
__glXDispSwap_Color4uiv(GLbyte * pc)
{
    glColor4uiv((const GLuint *) bswap_32_array((uint32_t *) (pc + 0), 4));
}

void
__glXDispSwap_Color4usv(GLbyte * pc)
{
    glColor4usv((const GLushort *) bswap_16_array((uint16_t *) (pc + 0), 4));
}

void
__glXDispSwap_EdgeFlagv(GLbyte * pc)
{
    glEdgeFlagv((const GLboolean *) (pc + 0));
}

void
__glXDispSwap_End(GLbyte * pc)
{
    glEnd();
}

void
__glXDispSwap_Indexdv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 8);
        pc -= 4;
    }
#endif

    glIndexdv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 1));
}

void
__glXDispSwap_Indexfv(GLbyte * pc)
{
    glIndexfv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 1));
}

void
__glXDispSwap_Indexiv(GLbyte * pc)
{
    glIndexiv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 1));
}

void
__glXDispSwap_Indexsv(GLbyte * pc)
{
    glIndexsv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 1));
}

void
__glXDispSwap_Normal3bv(GLbyte * pc)
{
    glNormal3bv((const GLbyte *) (pc + 0));
}

void
__glXDispSwap_Normal3dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    glNormal3dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 3));
}

void
__glXDispSwap_Normal3fv(GLbyte * pc)
{
    glNormal3fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_Normal3iv(GLbyte * pc)
{
    glNormal3iv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_Normal3sv(GLbyte * pc)
{
    glNormal3sv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 3));
}

void
__glXDispSwap_RasterPos2dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 16);
        pc -= 4;
    }
#endif

    glRasterPos2dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 2));
}

void
__glXDispSwap_RasterPos2fv(GLbyte * pc)
{
    glRasterPos2fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 2));
}

void
__glXDispSwap_RasterPos2iv(GLbyte * pc)
{
    glRasterPos2iv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 2));
}

void
__glXDispSwap_RasterPos2sv(GLbyte * pc)
{
    glRasterPos2sv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 2));
}

void
__glXDispSwap_RasterPos3dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    glRasterPos3dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 3));
}

void
__glXDispSwap_RasterPos3fv(GLbyte * pc)
{
    glRasterPos3fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_RasterPos3iv(GLbyte * pc)
{
    glRasterPos3iv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_RasterPos3sv(GLbyte * pc)
{
    glRasterPos3sv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 3));
}

void
__glXDispSwap_RasterPos4dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 32);
        pc -= 4;
    }
#endif

    glRasterPos4dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 4));
}

void
__glXDispSwap_RasterPos4fv(GLbyte * pc)
{
    glRasterPos4fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 4));
}

void
__glXDispSwap_RasterPos4iv(GLbyte * pc)
{
    glRasterPos4iv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 4));
}

void
__glXDispSwap_RasterPos4sv(GLbyte * pc)
{
    glRasterPos4sv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 4));
}

void
__glXDispSwap_Rectdv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 32);
        pc -= 4;
    }
#endif

    glRectdv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 2),
             (const GLdouble *) bswap_64_array((uint64_t *) (pc + 16), 2));
}

void
__glXDispSwap_Rectfv(GLbyte * pc)
{
    glRectfv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 2),
             (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8), 2));
}

void
__glXDispSwap_Rectiv(GLbyte * pc)
{
    glRectiv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 2),
             (const GLint *) bswap_32_array((uint32_t *) (pc + 8), 2));
}

void
__glXDispSwap_Rectsv(GLbyte * pc)
{
    glRectsv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 2),
             (const GLshort *) bswap_16_array((uint16_t *) (pc + 4), 2));
}

void
__glXDispSwap_TexCoord1dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 8);
        pc -= 4;
    }
#endif

    glTexCoord1dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 1));
}

void
__glXDispSwap_TexCoord1fv(GLbyte * pc)
{
    glTexCoord1fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 1));
}

void
__glXDispSwap_TexCoord1iv(GLbyte * pc)
{
    glTexCoord1iv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 1));
}

void
__glXDispSwap_TexCoord1sv(GLbyte * pc)
{
    glTexCoord1sv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 1));
}

void
__glXDispSwap_TexCoord2dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 16);
        pc -= 4;
    }
#endif

    glTexCoord2dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 2));
}

void
__glXDispSwap_TexCoord2fv(GLbyte * pc)
{
    glTexCoord2fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 2));
}

void
__glXDispSwap_TexCoord2iv(GLbyte * pc)
{
    glTexCoord2iv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 2));
}

void
__glXDispSwap_TexCoord2sv(GLbyte * pc)
{
    glTexCoord2sv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 2));
}

void
__glXDispSwap_TexCoord3dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    glTexCoord3dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 3));
}

void
__glXDispSwap_TexCoord3fv(GLbyte * pc)
{
    glTexCoord3fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_TexCoord3iv(GLbyte * pc)
{
    glTexCoord3iv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_TexCoord3sv(GLbyte * pc)
{
    glTexCoord3sv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 3));
}

void
__glXDispSwap_TexCoord4dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 32);
        pc -= 4;
    }
#endif

    glTexCoord4dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 4));
}

void
__glXDispSwap_TexCoord4fv(GLbyte * pc)
{
    glTexCoord4fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 4));
}

void
__glXDispSwap_TexCoord4iv(GLbyte * pc)
{
    glTexCoord4iv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 4));
}

void
__glXDispSwap_TexCoord4sv(GLbyte * pc)
{
    glTexCoord4sv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 4));
}

void
__glXDispSwap_Vertex2dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 16);
        pc -= 4;
    }
#endif

    glVertex2dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 2));
}

void
__glXDispSwap_Vertex2fv(GLbyte * pc)
{
    glVertex2fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 2));
}

void
__glXDispSwap_Vertex2iv(GLbyte * pc)
{
    glVertex2iv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 2));
}

void
__glXDispSwap_Vertex2sv(GLbyte * pc)
{
    glVertex2sv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 2));
}

void
__glXDispSwap_Vertex3dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    glVertex3dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 3));
}

void
__glXDispSwap_Vertex3fv(GLbyte * pc)
{
    glVertex3fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_Vertex3iv(GLbyte * pc)
{
    glVertex3iv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_Vertex3sv(GLbyte * pc)
{
    glVertex3sv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 3));
}

void
__glXDispSwap_Vertex4dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 32);
        pc -= 4;
    }
#endif

    glVertex4dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 4));
}

void
__glXDispSwap_Vertex4fv(GLbyte * pc)
{
    glVertex4fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 4));
}

void
__glXDispSwap_Vertex4iv(GLbyte * pc)
{
    glVertex4iv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 4));
}

void
__glXDispSwap_Vertex4sv(GLbyte * pc)
{
    glVertex4sv((const GLshort *) bswap_16_array((uint16_t *) (pc + 0), 4));
}

void
__glXDispSwap_ClipPlane(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 36);
        pc -= 4;
    }
#endif

    glClipPlane((GLenum) bswap_ENUM(pc + 32),
                (const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 4));
}

void
__glXDispSwap_ColorMaterial(GLbyte * pc)
{
    glColorMaterial((GLenum) bswap_ENUM(pc + 0), (GLenum) bswap_ENUM(pc + 4));
}

void
__glXDispSwap_CullFace(GLbyte * pc)
{
    glCullFace((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_Fogf(GLbyte * pc)
{
    glFogf((GLenum) bswap_ENUM(pc + 0), (GLfloat) bswap_FLOAT32(pc + 4));
}

void
__glXDispSwap_Fogfv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 0);
    const GLfloat *params;

    params =
        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
                                         __glFogfv_size(pname));

    glFogfv(pname, params);
}

void
__glXDispSwap_Fogi(GLbyte * pc)
{
    glFogi((GLenum) bswap_ENUM(pc + 0), (GLint) bswap_CARD32(pc + 4));
}

void
__glXDispSwap_Fogiv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 0);
    const GLint *params;

    params =
        (const GLint *) bswap_32_array((uint32_t *) (pc + 4),
                                       __glFogiv_size(pname));

    glFogiv(pname, params);
}

void
__glXDispSwap_FrontFace(GLbyte * pc)
{
    glFrontFace((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_Hint(GLbyte * pc)
{
    glHint((GLenum) bswap_ENUM(pc + 0), (GLenum) bswap_ENUM(pc + 4));
}

void
__glXDispSwap_Lightf(GLbyte * pc)
{
    glLightf((GLenum) bswap_ENUM(pc + 0),
             (GLenum) bswap_ENUM(pc + 4), (GLfloat) bswap_FLOAT32(pc + 8));
}

void
__glXDispSwap_Lightfv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLfloat *params;

    params =
        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
                                         __glLightfv_size(pname));

    glLightfv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_Lighti(GLbyte * pc)
{
    glLighti((GLenum) bswap_ENUM(pc + 0),
             (GLenum) bswap_ENUM(pc + 4), (GLint) bswap_CARD32(pc + 8));
}

void
__glXDispSwap_Lightiv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLint *params;

    params =
        (const GLint *) bswap_32_array((uint32_t *) (pc + 8),
                                       __glLightiv_size(pname));

    glLightiv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_LightModelf(GLbyte * pc)
{
    glLightModelf((GLenum) bswap_ENUM(pc + 0), (GLfloat) bswap_FLOAT32(pc + 4));
}

void
__glXDispSwap_LightModelfv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 0);
    const GLfloat *params;

    params =
        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
                                         __glLightModelfv_size(pname));

    glLightModelfv(pname, params);
}

void
__glXDispSwap_LightModeli(GLbyte * pc)
{
    glLightModeli((GLenum) bswap_ENUM(pc + 0), (GLint) bswap_CARD32(pc + 4));
}

void
__glXDispSwap_LightModeliv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 0);
    const GLint *params;

    params =
        (const GLint *) bswap_32_array((uint32_t *) (pc + 4),
                                       __glLightModeliv_size(pname));

    glLightModeliv(pname, params);
}

void
__glXDispSwap_LineStipple(GLbyte * pc)
{
    glLineStipple((GLint) bswap_CARD32(pc + 0),
                  (GLushort) bswap_CARD16(pc + 4));
}

void
__glXDispSwap_LineWidth(GLbyte * pc)
{
    glLineWidth((GLfloat) bswap_FLOAT32(pc + 0));
}

void
__glXDispSwap_Materialf(GLbyte * pc)
{
    glMaterialf((GLenum) bswap_ENUM(pc + 0),
                (GLenum) bswap_ENUM(pc + 4), (GLfloat) bswap_FLOAT32(pc + 8));
}

void
__glXDispSwap_Materialfv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLfloat *params;

    params =
        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
                                         __glMaterialfv_size(pname));

    glMaterialfv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_Materiali(GLbyte * pc)
{
    glMateriali((GLenum) bswap_ENUM(pc + 0),
                (GLenum) bswap_ENUM(pc + 4), (GLint) bswap_CARD32(pc + 8));
}

void
__glXDispSwap_Materialiv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLint *params;

    params =
        (const GLint *) bswap_32_array((uint32_t *) (pc + 8),
                                       __glMaterialiv_size(pname));

    glMaterialiv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_PointSize(GLbyte * pc)
{
    glPointSize((GLfloat) bswap_FLOAT32(pc + 0));
}

void
__glXDispSwap_PolygonMode(GLbyte * pc)
{
    glPolygonMode((GLenum) bswap_ENUM(pc + 0), (GLenum) bswap_ENUM(pc + 4));
}

void
__glXDispSwap_PolygonStipple(GLbyte * pc)
{
    const GLubyte *const mask = (const GLubyte *) ((pc + 20));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) bswap_CARD32(&hdr->rowLength));
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) bswap_CARD32(&hdr->skipRows));
    glPixelStorei(GL_UNPACK_SKIP_PIXELS,
                  (GLint) bswap_CARD32(&hdr->skipPixels));
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) bswap_CARD32(&hdr->alignment));

    glPolygonStipple(mask);
}

void
__glXDispSwap_Scissor(GLbyte * pc)
{
    glScissor((GLint) bswap_CARD32(pc + 0),
              (GLint) bswap_CARD32(pc + 4),
              (GLsizei) bswap_CARD32(pc + 8), (GLsizei) bswap_CARD32(pc + 12));
}

void
__glXDispSwap_ShadeModel(GLbyte * pc)
{
    glShadeModel((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_TexParameterf(GLbyte * pc)
{
    glTexParameterf((GLenum) bswap_ENUM(pc + 0),
                    (GLenum) bswap_ENUM(pc + 4),
                    (GLfloat) bswap_FLOAT32(pc + 8));
}

void
__glXDispSwap_TexParameterfv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLfloat *params;

    params =
        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
                                         __glTexParameterfv_size(pname));

    glTexParameterfv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_TexParameteri(GLbyte * pc)
{
    glTexParameteri((GLenum) bswap_ENUM(pc + 0),
                    (GLenum) bswap_ENUM(pc + 4), (GLint) bswap_CARD32(pc + 8));
}

void
__glXDispSwap_TexParameteriv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLint *params;

    params =
        (const GLint *) bswap_32_array((uint32_t *) (pc + 8),
                                       __glTexParameteriv_size(pname));

    glTexParameteriv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_TexImage1D(GLbyte * pc)
{
    const GLvoid *const pixels = (const GLvoid *) ((pc + 52));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) bswap_CARD32(&hdr->rowLength));
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) bswap_CARD32(&hdr->skipRows));
    glPixelStorei(GL_UNPACK_SKIP_PIXELS,
                  (GLint) bswap_CARD32(&hdr->skipPixels));
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) bswap_CARD32(&hdr->alignment));

    glTexImage1D((GLenum) bswap_ENUM(pc + 20),
                 (GLint) bswap_CARD32(pc + 24),
                 (GLint) bswap_CARD32(pc + 28),
                 (GLsizei) bswap_CARD32(pc + 32),
                 (GLint) bswap_CARD32(pc + 40),
                 (GLenum) bswap_ENUM(pc + 44),
                 (GLenum) bswap_ENUM(pc + 48), pixels);
}

void
__glXDispSwap_TexImage2D(GLbyte * pc)
{
    const GLvoid *const pixels = (const GLvoid *) ((pc + 52));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) bswap_CARD32(&hdr->rowLength));
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) bswap_CARD32(&hdr->skipRows));
    glPixelStorei(GL_UNPACK_SKIP_PIXELS,
                  (GLint) bswap_CARD32(&hdr->skipPixels));
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) bswap_CARD32(&hdr->alignment));

    glTexImage2D((GLenum) bswap_ENUM(pc + 20),
                 (GLint) bswap_CARD32(pc + 24),
                 (GLint) bswap_CARD32(pc + 28),
                 (GLsizei) bswap_CARD32(pc + 32),
                 (GLsizei) bswap_CARD32(pc + 36),
                 (GLint) bswap_CARD32(pc + 40),
                 (GLenum) bswap_ENUM(pc + 44),
                 (GLenum) bswap_ENUM(pc + 48), pixels);
}

void
__glXDispSwap_TexEnvf(GLbyte * pc)
{
    glTexEnvf((GLenum) bswap_ENUM(pc + 0),
              (GLenum) bswap_ENUM(pc + 4), (GLfloat) bswap_FLOAT32(pc + 8));
}

void
__glXDispSwap_TexEnvfv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLfloat *params;

    params =
        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
                                         __glTexEnvfv_size(pname));

    glTexEnvfv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_TexEnvi(GLbyte * pc)
{
    glTexEnvi((GLenum) bswap_ENUM(pc + 0),
              (GLenum) bswap_ENUM(pc + 4), (GLint) bswap_CARD32(pc + 8));
}

void
__glXDispSwap_TexEnviv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLint *params;

    params =
        (const GLint *) bswap_32_array((uint32_t *) (pc + 8),
                                       __glTexEnviv_size(pname));

    glTexEnviv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_TexGend(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 16);
        pc -= 4;
    }
#endif

    glTexGend((GLenum) bswap_ENUM(pc + 8),
              (GLenum) bswap_ENUM(pc + 12), (GLdouble) bswap_FLOAT64(pc + 0));
}

void
__glXDispSwap_TexGendv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLdouble *params;

#ifdef __GLX_ALIGN64
    const GLuint compsize = __glTexGendv_size(pname);
    const GLuint cmdlen = 12 + __GLX_PAD((compsize * 8)) - 4;

    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, cmdlen);
        pc -= 4;
    }
#endif

    params =
        (const GLdouble *) bswap_64_array((uint64_t *) (pc + 8),
                                          __glTexGendv_size(pname));

    glTexGendv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_TexGenf(GLbyte * pc)
{
    glTexGenf((GLenum) bswap_ENUM(pc + 0),
              (GLenum) bswap_ENUM(pc + 4), (GLfloat) bswap_FLOAT32(pc + 8));
}

void
__glXDispSwap_TexGenfv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLfloat *params;

    params =
        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
                                         __glTexGenfv_size(pname));

    glTexGenfv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_TexGeni(GLbyte * pc)
{
    glTexGeni((GLenum) bswap_ENUM(pc + 0),
              (GLenum) bswap_ENUM(pc + 4), (GLint) bswap_CARD32(pc + 8));
}

void
__glXDispSwap_TexGeniv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLint *params;

    params =
        (const GLint *) bswap_32_array((uint32_t *) (pc + 8),
                                       __glTexGeniv_size(pname));

    glTexGeniv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_InitNames(GLbyte * pc)
{
    glInitNames();
}

void
__glXDispSwap_LoadName(GLbyte * pc)
{
    glLoadName((GLuint) bswap_CARD32(pc + 0));
}

void
__glXDispSwap_PassThrough(GLbyte * pc)
{
    glPassThrough((GLfloat) bswap_FLOAT32(pc + 0));
}

void
__glXDispSwap_PopName(GLbyte * pc)
{
    glPopName();
}

void
__glXDispSwap_PushName(GLbyte * pc)
{
    glPushName((GLuint) bswap_CARD32(pc + 0));
}

void
__glXDispSwap_DrawBuffer(GLbyte * pc)
{
    glDrawBuffer((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_Clear(GLbyte * pc)
{
    glClear((GLbitfield) bswap_CARD32(pc + 0));
}

void
__glXDispSwap_ClearAccum(GLbyte * pc)
{
    glClearAccum((GLfloat) bswap_FLOAT32(pc + 0),
                 (GLfloat) bswap_FLOAT32(pc + 4),
                 (GLfloat) bswap_FLOAT32(pc + 8),
                 (GLfloat) bswap_FLOAT32(pc + 12));
}

void
__glXDispSwap_ClearIndex(GLbyte * pc)
{
    glClearIndex((GLfloat) bswap_FLOAT32(pc + 0));
}

void
__glXDispSwap_ClearColor(GLbyte * pc)
{
    glClearColor((GLclampf) bswap_FLOAT32(pc + 0),
                 (GLclampf) bswap_FLOAT32(pc + 4),
                 (GLclampf) bswap_FLOAT32(pc + 8),
                 (GLclampf) bswap_FLOAT32(pc + 12));
}

void
__glXDispSwap_ClearStencil(GLbyte * pc)
{
    glClearStencil((GLint) bswap_CARD32(pc + 0));
}

void
__glXDispSwap_ClearDepth(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 8);
        pc -= 4;
    }
#endif

    glClearDepth((GLclampd) bswap_FLOAT64(pc + 0));
}

void
__glXDispSwap_StencilMask(GLbyte * pc)
{
    glStencilMask((GLuint) bswap_CARD32(pc + 0));
}

void
__glXDispSwap_ColorMask(GLbyte * pc)
{
    glColorMask(*(GLboolean *) (pc + 0),
                *(GLboolean *) (pc + 1),
                *(GLboolean *) (pc + 2), *(GLboolean *) (pc + 3));
}

void
__glXDispSwap_DepthMask(GLbyte * pc)
{
    glDepthMask(*(GLboolean *) (pc + 0));
}

void
__glXDispSwap_IndexMask(GLbyte * pc)
{
    glIndexMask((GLuint) bswap_CARD32(pc + 0));
}

void
__glXDispSwap_Accum(GLbyte * pc)
{
    glAccum((GLenum) bswap_ENUM(pc + 0), (GLfloat) bswap_FLOAT32(pc + 4));
}

void
__glXDispSwap_Disable(GLbyte * pc)
{
    glDisable((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_Enable(GLbyte * pc)
{
    glEnable((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_PopAttrib(GLbyte * pc)
{
    glPopAttrib();
}

void
__glXDispSwap_PushAttrib(GLbyte * pc)
{
    glPushAttrib((GLbitfield) bswap_CARD32(pc + 0));
}

void
__glXDispSwap_MapGrid1d(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 20);
        pc -= 4;
    }
#endif

    glMapGrid1d((GLint) bswap_CARD32(pc + 16),
                (GLdouble) bswap_FLOAT64(pc + 0),
                (GLdouble) bswap_FLOAT64(pc + 8));
}

void
__glXDispSwap_MapGrid1f(GLbyte * pc)
{
    glMapGrid1f((GLint) bswap_CARD32(pc + 0),
                (GLfloat) bswap_FLOAT32(pc + 4),
                (GLfloat) bswap_FLOAT32(pc + 8));
}

void
__glXDispSwap_MapGrid2d(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 40);
        pc -= 4;
    }
#endif

    glMapGrid2d((GLint) bswap_CARD32(pc + 32),
                (GLdouble) bswap_FLOAT64(pc + 0),
                (GLdouble) bswap_FLOAT64(pc + 8),
                (GLint) bswap_CARD32(pc + 36),
                (GLdouble) bswap_FLOAT64(pc + 16),
                (GLdouble) bswap_FLOAT64(pc + 24));
}

void
__glXDispSwap_MapGrid2f(GLbyte * pc)
{
    glMapGrid2f((GLint) bswap_CARD32(pc + 0),
                (GLfloat) bswap_FLOAT32(pc + 4),
                (GLfloat) bswap_FLOAT32(pc + 8),
                (GLint) bswap_CARD32(pc + 12),
                (GLfloat) bswap_FLOAT32(pc + 16),
                (GLfloat) bswap_FLOAT32(pc + 20));
}

void
__glXDispSwap_EvalCoord1dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 8);
        pc -= 4;
    }
#endif

    glEvalCoord1dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 1));
}

void
__glXDispSwap_EvalCoord1fv(GLbyte * pc)
{
    glEvalCoord1fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 1));
}

void
__glXDispSwap_EvalCoord2dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 16);
        pc -= 4;
    }
#endif

    glEvalCoord2dv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 2));
}

void
__glXDispSwap_EvalCoord2fv(GLbyte * pc)
{
    glEvalCoord2fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 2));
}

void
__glXDispSwap_EvalMesh1(GLbyte * pc)
{
    glEvalMesh1((GLenum) bswap_ENUM(pc + 0),
                (GLint) bswap_CARD32(pc + 4), (GLint) bswap_CARD32(pc + 8));
}

void
__glXDispSwap_EvalPoint1(GLbyte * pc)
{
    glEvalPoint1((GLint) bswap_CARD32(pc + 0));
}

void
__glXDispSwap_EvalMesh2(GLbyte * pc)
{
    glEvalMesh2((GLenum) bswap_ENUM(pc + 0),
                (GLint) bswap_CARD32(pc + 4),
                (GLint) bswap_CARD32(pc + 8),
                (GLint) bswap_CARD32(pc + 12), (GLint) bswap_CARD32(pc + 16));
}

void
__glXDispSwap_EvalPoint2(GLbyte * pc)
{
    glEvalPoint2((GLint) bswap_CARD32(pc + 0), (GLint) bswap_CARD32(pc + 4));
}

void
__glXDispSwap_AlphaFunc(GLbyte * pc)
{
    glAlphaFunc((GLenum) bswap_ENUM(pc + 0), (GLclampf) bswap_FLOAT32(pc + 4));
}

void
__glXDispSwap_BlendFunc(GLbyte * pc)
{
    glBlendFunc((GLenum) bswap_ENUM(pc + 0), (GLenum) bswap_ENUM(pc + 4));
}

void
__glXDispSwap_LogicOp(GLbyte * pc)
{
    glLogicOp((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_StencilFunc(GLbyte * pc)
{
    glStencilFunc((GLenum) bswap_ENUM(pc + 0),
                  (GLint) bswap_CARD32(pc + 4), (GLuint) bswap_CARD32(pc + 8));
}

void
__glXDispSwap_StencilOp(GLbyte * pc)
{
    glStencilOp((GLenum) bswap_ENUM(pc + 0),
                (GLenum) bswap_ENUM(pc + 4), (GLenum) bswap_ENUM(pc + 8));
}

void
__glXDispSwap_DepthFunc(GLbyte * pc)
{
    glDepthFunc((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_PixelZoom(GLbyte * pc)
{
    glPixelZoom((GLfloat) bswap_FLOAT32(pc + 0),
                (GLfloat) bswap_FLOAT32(pc + 4));
}

void
__glXDispSwap_PixelTransferf(GLbyte * pc)
{
    glPixelTransferf((GLenum) bswap_ENUM(pc + 0),
                     (GLfloat) bswap_FLOAT32(pc + 4));
}

void
__glXDispSwap_PixelTransferi(GLbyte * pc)
{
    glPixelTransferi((GLenum) bswap_ENUM(pc + 0), (GLint) bswap_CARD32(pc + 4));
}

int
__glXDispSwap_PixelStoref(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        glPixelStoref((GLenum) bswap_ENUM(pc + 0),
                      (GLfloat) bswap_FLOAT32(pc + 4));
        error = Success;
    }

    return error;
}

int
__glXDispSwap_PixelStorei(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        glPixelStorei((GLenum) bswap_ENUM(pc + 0),
                      (GLint) bswap_CARD32(pc + 4));
        error = Success;
    }

    return error;
}

void
__glXDispSwap_PixelMapfv(GLbyte * pc)
{
    const GLsizei mapsize = (GLsizei) bswap_CARD32(pc + 4);

    glPixelMapfv((GLenum) bswap_ENUM(pc + 0),
                 mapsize,
                 (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8), 0));
}

void
__glXDispSwap_PixelMapuiv(GLbyte * pc)
{
    const GLsizei mapsize = (GLsizei) bswap_CARD32(pc + 4);

    glPixelMapuiv((GLenum) bswap_ENUM(pc + 0),
                  mapsize,
                  (const GLuint *) bswap_32_array((uint32_t *) (pc + 8), 0));
}

void
__glXDispSwap_PixelMapusv(GLbyte * pc)
{
    const GLsizei mapsize = (GLsizei) bswap_CARD32(pc + 4);

    glPixelMapusv((GLenum) bswap_ENUM(pc + 0),
                  mapsize,
                  (const GLushort *) bswap_16_array((uint16_t *) (pc + 8), 0));
}

void
__glXDispSwap_ReadBuffer(GLbyte * pc)
{
    glReadBuffer((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_CopyPixels(GLbyte * pc)
{
    glCopyPixels((GLint) bswap_CARD32(pc + 0),
                 (GLint) bswap_CARD32(pc + 4),
                 (GLsizei) bswap_CARD32(pc + 8),
                 (GLsizei) bswap_CARD32(pc + 12), (GLenum) bswap_ENUM(pc + 16));
}

void
__glXDispSwap_DrawPixels(GLbyte * pc)
{
    const GLvoid *const pixels = (const GLvoid *) ((pc + 36));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) bswap_CARD32(&hdr->rowLength));
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) bswap_CARD32(&hdr->skipRows));
    glPixelStorei(GL_UNPACK_SKIP_PIXELS,
                  (GLint) bswap_CARD32(&hdr->skipPixels));
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) bswap_CARD32(&hdr->alignment));

    glDrawPixels((GLsizei) bswap_CARD32(pc + 20),
                 (GLsizei) bswap_CARD32(pc + 24),
                 (GLenum) bswap_ENUM(pc + 28),
                 (GLenum) bswap_ENUM(pc + 32), pixels);
}

int
__glXDispSwap_GetBooleanv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 0);

        const GLuint compsize = __glGetBooleanv_size(pname);
        GLboolean answerBuffer[200];
        GLboolean *params =
            __glXGetAnswerBuffer(cl, compsize, answerBuffer,
                                 sizeof(answerBuffer), 1);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetBooleanv(pname, params);
        __glXSendReplySwap(cl->client, params, compsize, 1, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetClipPlane(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        GLdouble equation[4];

        glGetClipPlane((GLenum) bswap_ENUM(pc + 0), equation);
        (void) bswap_64_array((uint64_t *) equation, 4);
        __glXSendReplySwap(cl->client, equation, 4, 8, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetDoublev(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 0);

        const GLuint compsize = __glGetDoublev_size(pname);
        GLdouble answerBuffer[200];
        GLdouble *params =
            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
                                 sizeof(answerBuffer), 8);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetDoublev(pname, params);
        (void) bswap_64_array((uint64_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 8, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetError(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        GLenum retval;

        retval = glGetError();
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetFloatv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 0);

        const GLuint compsize = __glGetFloatv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetFloatv(pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetIntegerv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 0);

        const GLuint compsize = __glGetIntegerv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetIntegerv(pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetLightfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetLightfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetLightfv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetLightiv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetLightiv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetLightiv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetMapdv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum target = (GLenum) bswap_ENUM(pc + 0);
        const GLenum query = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetMapdv_size(target, query);
        GLdouble answerBuffer[200];
        GLdouble *v =
            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
                                 sizeof(answerBuffer), 8);

        if (v == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMapdv(target, query, v);
        (void) bswap_64_array((uint64_t *) v, compsize);
        __glXSendReplySwap(cl->client, v, compsize, 8, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetMapfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum target = (GLenum) bswap_ENUM(pc + 0);
        const GLenum query = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetMapfv_size(target, query);
        GLfloat answerBuffer[200];
        GLfloat *v =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (v == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMapfv(target, query, v);
        (void) bswap_32_array((uint32_t *) v, compsize);
        __glXSendReplySwap(cl->client, v, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetMapiv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum target = (GLenum) bswap_ENUM(pc + 0);
        const GLenum query = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetMapiv_size(target, query);
        GLint answerBuffer[200];
        GLint *v =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (v == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMapiv(target, query, v);
        (void) bswap_32_array((uint32_t *) v, compsize);
        __glXSendReplySwap(cl->client, v, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetMaterialfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetMaterialfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMaterialfv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetMaterialiv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetMaterialiv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMaterialiv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetPixelMapfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum map = (GLenum) bswap_ENUM(pc + 0);

        const GLuint compsize = __glGetPixelMapfv_size(map);
        GLfloat answerBuffer[200];
        GLfloat *values =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (values == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetPixelMapfv(map, values);
        (void) bswap_32_array((uint32_t *) values, compsize);
        __glXSendReplySwap(cl->client, values, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetPixelMapuiv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum map = (GLenum) bswap_ENUM(pc + 0);

        const GLuint compsize = __glGetPixelMapuiv_size(map);
        GLuint answerBuffer[200];
        GLuint *values =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (values == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetPixelMapuiv(map, values);
        (void) bswap_32_array((uint32_t *) values, compsize);
        __glXSendReplySwap(cl->client, values, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetPixelMapusv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum map = (GLenum) bswap_ENUM(pc + 0);

        const GLuint compsize = __glGetPixelMapusv_size(map);
        GLushort answerBuffer[200];
        GLushort *values =
            __glXGetAnswerBuffer(cl, compsize * 2, answerBuffer,
                                 sizeof(answerBuffer), 2);

        if (values == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetPixelMapusv(map, values);
        (void) bswap_16_array((uint16_t *) values, compsize);
        __glXSendReplySwap(cl->client, values, compsize, 2, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetTexEnvfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetTexEnvfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexEnvfv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetTexEnviv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetTexEnviv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexEnviv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetTexGendv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetTexGendv_size(pname);
        GLdouble answerBuffer[200];
        GLdouble *params =
            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
                                 sizeof(answerBuffer), 8);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexGendv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_64_array((uint64_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 8, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetTexGenfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetTexGenfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexGenfv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetTexGeniv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetTexGeniv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexGeniv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetTexParameterfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetTexParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexParameterfv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetTexParameteriv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetTexParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexParameteriv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetTexLevelParameterfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 8);

        const GLuint compsize = __glGetTexLevelParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexLevelParameterfv((GLenum) bswap_ENUM(pc + 0),
                                 (GLint) bswap_CARD32(pc + 4), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetTexLevelParameteriv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 8);

        const GLuint compsize = __glGetTexLevelParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexLevelParameteriv((GLenum) bswap_ENUM(pc + 0),
                                 (GLint) bswap_CARD32(pc + 4), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_IsEnabled(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = glIsEnabled((GLenum) bswap_ENUM(pc + 0));
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_IsList(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = glIsList((GLuint) bswap_CARD32(pc + 0));
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_DepthRange(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 16);
        pc -= 4;
    }
#endif

    glDepthRange((GLclampd) bswap_FLOAT64(pc + 0),
                 (GLclampd) bswap_FLOAT64(pc + 8));
}

void
__glXDispSwap_Frustum(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 48);
        pc -= 4;
    }
#endif

    glFrustum((GLdouble) bswap_FLOAT64(pc + 0),
              (GLdouble) bswap_FLOAT64(pc + 8),
              (GLdouble) bswap_FLOAT64(pc + 16),
              (GLdouble) bswap_FLOAT64(pc + 24),
              (GLdouble) bswap_FLOAT64(pc + 32),
              (GLdouble) bswap_FLOAT64(pc + 40));
}

void
__glXDispSwap_LoadIdentity(GLbyte * pc)
{
    glLoadIdentity();
}

void
__glXDispSwap_LoadMatrixf(GLbyte * pc)
{
    glLoadMatrixf((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 16));
}

void
__glXDispSwap_LoadMatrixd(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 128);
        pc -= 4;
    }
#endif

    glLoadMatrixd((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 16));
}

void
__glXDispSwap_MatrixMode(GLbyte * pc)
{
    glMatrixMode((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_MultMatrixf(GLbyte * pc)
{
    glMultMatrixf((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 16));
}

void
__glXDispSwap_MultMatrixd(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 128);
        pc -= 4;
    }
#endif

    glMultMatrixd((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 16));
}

void
__glXDispSwap_Ortho(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 48);
        pc -= 4;
    }
#endif

    glOrtho((GLdouble) bswap_FLOAT64(pc + 0),
            (GLdouble) bswap_FLOAT64(pc + 8),
            (GLdouble) bswap_FLOAT64(pc + 16),
            (GLdouble) bswap_FLOAT64(pc + 24),
            (GLdouble) bswap_FLOAT64(pc + 32),
            (GLdouble) bswap_FLOAT64(pc + 40));
}

void
__glXDispSwap_PopMatrix(GLbyte * pc)
{
    glPopMatrix();
}

void
__glXDispSwap_PushMatrix(GLbyte * pc)
{
    glPushMatrix();
}

void
__glXDispSwap_Rotated(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 32);
        pc -= 4;
    }
#endif

    glRotated((GLdouble) bswap_FLOAT64(pc + 0),
              (GLdouble) bswap_FLOAT64(pc + 8),
              (GLdouble) bswap_FLOAT64(pc + 16),
              (GLdouble) bswap_FLOAT64(pc + 24));
}

void
__glXDispSwap_Rotatef(GLbyte * pc)
{
    glRotatef((GLfloat) bswap_FLOAT32(pc + 0),
              (GLfloat) bswap_FLOAT32(pc + 4),
              (GLfloat) bswap_FLOAT32(pc + 8),
              (GLfloat) bswap_FLOAT32(pc + 12));
}

void
__glXDispSwap_Scaled(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    glScaled((GLdouble) bswap_FLOAT64(pc + 0),
             (GLdouble) bswap_FLOAT64(pc + 8),
             (GLdouble) bswap_FLOAT64(pc + 16));
}

void
__glXDispSwap_Scalef(GLbyte * pc)
{
    glScalef((GLfloat) bswap_FLOAT32(pc + 0),
             (GLfloat) bswap_FLOAT32(pc + 4), (GLfloat) bswap_FLOAT32(pc + 8));
}

void
__glXDispSwap_Translated(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    glTranslated((GLdouble) bswap_FLOAT64(pc + 0),
                 (GLdouble) bswap_FLOAT64(pc + 8),
                 (GLdouble) bswap_FLOAT64(pc + 16));
}

void
__glXDispSwap_Translatef(GLbyte * pc)
{
    glTranslatef((GLfloat) bswap_FLOAT32(pc + 0),
                 (GLfloat) bswap_FLOAT32(pc + 4),
                 (GLfloat) bswap_FLOAT32(pc + 8));
}

void
__glXDispSwap_Viewport(GLbyte * pc)
{
    glViewport((GLint) bswap_CARD32(pc + 0),
               (GLint) bswap_CARD32(pc + 4),
               (GLsizei) bswap_CARD32(pc + 8), (GLsizei) bswap_CARD32(pc + 12));
}

void
__glXDispSwap_BindTexture(GLbyte * pc)
{
    glBindTexture((GLenum) bswap_ENUM(pc + 0), (GLuint) bswap_CARD32(pc + 4));
}

void
__glXDispSwap_Indexubv(GLbyte * pc)
{
    glIndexubv((const GLubyte *) (pc + 0));
}

void
__glXDispSwap_PolygonOffset(GLbyte * pc)
{
    glPolygonOffset((GLfloat) bswap_FLOAT32(pc + 0),
                    (GLfloat) bswap_FLOAT32(pc + 4));
}

int
__glXDispSwap_AreTexturesResident(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

        GLboolean retval;
        GLboolean answerBuffer[200];
        GLboolean *residences =
            __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);

        if (residences == NULL)
            return BadAlloc;
        retval =
            glAreTexturesResident(n,
                                  (const GLuint *)
                                  bswap_32_array((uint32_t *) (pc + 4), 0),
                                  residences);
        __glXSendReplySwap(cl->client, residences, n, 1, GL_TRUE, retval);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_AreTexturesResidentEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

        GLboolean retval;
        GLboolean answerBuffer[200];
        GLboolean *residences =
            __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);

        if (residences == NULL)
            return BadAlloc;
        retval =
            glAreTexturesResident(n,
                                  (const GLuint *)
                                  bswap_32_array((uint32_t *) (pc + 4), 0),
                                  residences);
        __glXSendReplySwap(cl->client, residences, n, 1, GL_TRUE, retval);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_CopyTexImage1D(GLbyte * pc)
{
    glCopyTexImage1D((GLenum) bswap_ENUM(pc + 0),
                     (GLint) bswap_CARD32(pc + 4),
                     (GLenum) bswap_ENUM(pc + 8),
                     (GLint) bswap_CARD32(pc + 12),
                     (GLint) bswap_CARD32(pc + 16),
                     (GLsizei) bswap_CARD32(pc + 20),
                     (GLint) bswap_CARD32(pc + 24));
}

void
__glXDispSwap_CopyTexImage2D(GLbyte * pc)
{
    glCopyTexImage2D((GLenum) bswap_ENUM(pc + 0),
                     (GLint) bswap_CARD32(pc + 4),
                     (GLenum) bswap_ENUM(pc + 8),
                     (GLint) bswap_CARD32(pc + 12),
                     (GLint) bswap_CARD32(pc + 16),
                     (GLsizei) bswap_CARD32(pc + 20),
                     (GLsizei) bswap_CARD32(pc + 24),
                     (GLint) bswap_CARD32(pc + 28));
}

void
__glXDispSwap_CopyTexSubImage1D(GLbyte * pc)
{
    glCopyTexSubImage1D((GLenum) bswap_ENUM(pc + 0),
                        (GLint) bswap_CARD32(pc + 4),
                        (GLint) bswap_CARD32(pc + 8),
                        (GLint) bswap_CARD32(pc + 12),
                        (GLint) bswap_CARD32(pc + 16),
                        (GLsizei) bswap_CARD32(pc + 20));
}

void
__glXDispSwap_CopyTexSubImage2D(GLbyte * pc)
{
    glCopyTexSubImage2D((GLenum) bswap_ENUM(pc + 0),
                        (GLint) bswap_CARD32(pc + 4),
                        (GLint) bswap_CARD32(pc + 8),
                        (GLint) bswap_CARD32(pc + 12),
                        (GLint) bswap_CARD32(pc + 16),
                        (GLint) bswap_CARD32(pc + 20),
                        (GLsizei) bswap_CARD32(pc + 24),
                        (GLsizei) bswap_CARD32(pc + 28));
}

int
__glXDispSwap_DeleteTextures(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

        glDeleteTextures(n,
                         (const GLuint *) bswap_32_array((uint32_t *) (pc + 4),
                                                         0));
        error = Success;
    }

    return error;
}

int
__glXDispSwap_DeleteTexturesEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

        glDeleteTextures(n,
                         (const GLuint *) bswap_32_array((uint32_t *) (pc + 4),
                                                         0));
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GenTextures(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

        GLuint answerBuffer[200];
        GLuint *textures =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);

        if (textures == NULL)
            return BadAlloc;
        glGenTextures(n, textures);
        (void) bswap_32_array((uint32_t *) textures, n);
        __glXSendReplySwap(cl->client, textures, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GenTexturesEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

        GLuint answerBuffer[200];
        GLuint *textures =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);

        if (textures == NULL)
            return BadAlloc;
        glGenTextures(n, textures);
        (void) bswap_32_array((uint32_t *) textures, n);
        __glXSendReplySwap(cl->client, textures, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_IsTexture(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = glIsTexture((GLuint) bswap_CARD32(pc + 0));
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_IsTextureEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = glIsTexture((GLuint) bswap_CARD32(pc + 0));
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_PrioritizeTextures(GLbyte * pc)
{
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

    glPrioritizeTextures(n,
                         (const GLuint *) bswap_32_array((uint32_t *) (pc + 4),
                                                         0),
                         (const GLclampf *)
                         bswap_32_array((uint32_t *) (pc + 4), 0));
}

void
__glXDispSwap_TexSubImage1D(GLbyte * pc)
{
    const GLvoid *const pixels = (const GLvoid *) ((pc + 56));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) bswap_CARD32(&hdr->rowLength));
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) bswap_CARD32(&hdr->skipRows));
    glPixelStorei(GL_UNPACK_SKIP_PIXELS,
                  (GLint) bswap_CARD32(&hdr->skipPixels));
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) bswap_CARD32(&hdr->alignment));

    glTexSubImage1D((GLenum) bswap_ENUM(pc + 20),
                    (GLint) bswap_CARD32(pc + 24),
                    (GLint) bswap_CARD32(pc + 28),
                    (GLsizei) bswap_CARD32(pc + 36),
                    (GLenum) bswap_ENUM(pc + 44),
                    (GLenum) bswap_ENUM(pc + 48), pixels);
}

void
__glXDispSwap_TexSubImage2D(GLbyte * pc)
{
    const GLvoid *const pixels = (const GLvoid *) ((pc + 56));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) bswap_CARD32(&hdr->rowLength));
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) bswap_CARD32(&hdr->skipRows));
    glPixelStorei(GL_UNPACK_SKIP_PIXELS,
                  (GLint) bswap_CARD32(&hdr->skipPixels));
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) bswap_CARD32(&hdr->alignment));

    glTexSubImage2D((GLenum) bswap_ENUM(pc + 20),
                    (GLint) bswap_CARD32(pc + 24),
                    (GLint) bswap_CARD32(pc + 28),
                    (GLint) bswap_CARD32(pc + 32),
                    (GLsizei) bswap_CARD32(pc + 36),
                    (GLsizei) bswap_CARD32(pc + 40),
                    (GLenum) bswap_ENUM(pc + 44),
                    (GLenum) bswap_ENUM(pc + 48), pixels);
}

void
__glXDispSwap_BlendColor(GLbyte * pc)
{
    glBlendColor((GLclampf) bswap_FLOAT32(pc + 0),
                 (GLclampf) bswap_FLOAT32(pc + 4),
                 (GLclampf) bswap_FLOAT32(pc + 8),
                 (GLclampf) bswap_FLOAT32(pc + 12));
}

void
__glXDispSwap_BlendEquation(GLbyte * pc)
{
    glBlendEquation((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_ColorTable(GLbyte * pc)
{
    const GLvoid *const table = (const GLvoid *) ((pc + 40));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) bswap_CARD32(&hdr->rowLength));
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) bswap_CARD32(&hdr->skipRows));
    glPixelStorei(GL_UNPACK_SKIP_PIXELS,
                  (GLint) bswap_CARD32(&hdr->skipPixels));
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) bswap_CARD32(&hdr->alignment));

    glColorTable((GLenum) bswap_ENUM(pc + 20),
                 (GLenum) bswap_ENUM(pc + 24),
                 (GLsizei) bswap_CARD32(pc + 28),
                 (GLenum) bswap_ENUM(pc + 32),
                 (GLenum) bswap_ENUM(pc + 36), table);
}

void
__glXDispSwap_ColorTableParameterfv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLfloat *params;

    params =
        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
                                         __glColorTableParameterfv_size(pname));

    glColorTableParameterfv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_ColorTableParameteriv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLint *params;

    params =
        (const GLint *) bswap_32_array((uint32_t *) (pc + 8),
                                       __glColorTableParameteriv_size(pname));

    glColorTableParameteriv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_CopyColorTable(GLbyte * pc)
{
    glCopyColorTable((GLenum) bswap_ENUM(pc + 0),
                     (GLenum) bswap_ENUM(pc + 4),
                     (GLint) bswap_CARD32(pc + 8),
                     (GLint) bswap_CARD32(pc + 12),
                     (GLsizei) bswap_CARD32(pc + 16));
}

int
__glXDispSwap_GetColorTableParameterfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetColorTableParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetColorTableParameterfv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetColorTableParameterfvSGI(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetColorTableParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetColorTableParameterfv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetColorTableParameteriv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetColorTableParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetColorTableParameteriv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetColorTableParameterivSGI(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetColorTableParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetColorTableParameteriv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_ColorSubTable(GLbyte * pc)
{
    const GLvoid *const data = (const GLvoid *) ((pc + 40));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) bswap_CARD32(&hdr->rowLength));
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) bswap_CARD32(&hdr->skipRows));
    glPixelStorei(GL_UNPACK_SKIP_PIXELS,
                  (GLint) bswap_CARD32(&hdr->skipPixels));
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) bswap_CARD32(&hdr->alignment));

    glColorSubTable((GLenum) bswap_ENUM(pc + 20),
                    (GLsizei) bswap_CARD32(pc + 24),
                    (GLsizei) bswap_CARD32(pc + 28),
                    (GLenum) bswap_ENUM(pc + 32),
                    (GLenum) bswap_ENUM(pc + 36), data);
}

void
__glXDispSwap_CopyColorSubTable(GLbyte * pc)
{
    glCopyColorSubTable((GLenum) bswap_ENUM(pc + 0),
                        (GLsizei) bswap_CARD32(pc + 4),
                        (GLint) bswap_CARD32(pc + 8),
                        (GLint) bswap_CARD32(pc + 12),
                        (GLsizei) bswap_CARD32(pc + 16));
}

void
__glXDispSwap_ConvolutionFilter1D(GLbyte * pc)
{
    const GLvoid *const image = (const GLvoid *) ((pc + 44));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) bswap_CARD32(&hdr->rowLength));
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) bswap_CARD32(&hdr->skipRows));
    glPixelStorei(GL_UNPACK_SKIP_PIXELS,
                  (GLint) bswap_CARD32(&hdr->skipPixels));
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) bswap_CARD32(&hdr->alignment));

    glConvolutionFilter1D((GLenum) bswap_ENUM(pc + 20),
                          (GLenum) bswap_ENUM(pc + 24),
                          (GLsizei) bswap_CARD32(pc + 28),
                          (GLenum) bswap_ENUM(pc + 36),
                          (GLenum) bswap_ENUM(pc + 40), image);
}

void
__glXDispSwap_ConvolutionFilter2D(GLbyte * pc)
{
    const GLvoid *const image = (const GLvoid *) ((pc + 44));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) bswap_CARD32(&hdr->rowLength));
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) bswap_CARD32(&hdr->skipRows));
    glPixelStorei(GL_UNPACK_SKIP_PIXELS,
                  (GLint) bswap_CARD32(&hdr->skipPixels));
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) bswap_CARD32(&hdr->alignment));

    glConvolutionFilter2D((GLenum) bswap_ENUM(pc + 20),
                          (GLenum) bswap_ENUM(pc + 24),
                          (GLsizei) bswap_CARD32(pc + 28),
                          (GLsizei) bswap_CARD32(pc + 32),
                          (GLenum) bswap_ENUM(pc + 36),
                          (GLenum) bswap_ENUM(pc + 40), image);
}

void
__glXDispSwap_ConvolutionParameterf(GLbyte * pc)
{
    glConvolutionParameterf((GLenum) bswap_ENUM(pc + 0),
                            (GLenum) bswap_ENUM(pc + 4),
                            (GLfloat) bswap_FLOAT32(pc + 8));
}

void
__glXDispSwap_ConvolutionParameterfv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLfloat *params;

    params =
        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
                                         __glConvolutionParameterfv_size
                                         (pname));

    glConvolutionParameterfv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_ConvolutionParameteri(GLbyte * pc)
{
    glConvolutionParameteri((GLenum) bswap_ENUM(pc + 0),
                            (GLenum) bswap_ENUM(pc + 4),
                            (GLint) bswap_CARD32(pc + 8));
}

void
__glXDispSwap_ConvolutionParameteriv(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
    const GLint *params;

    params =
        (const GLint *) bswap_32_array((uint32_t *) (pc + 8),
                                       __glConvolutionParameteriv_size(pname));

    glConvolutionParameteriv((GLenum) bswap_ENUM(pc + 0), pname, params);
}

void
__glXDispSwap_CopyConvolutionFilter1D(GLbyte * pc)
{
    glCopyConvolutionFilter1D((GLenum) bswap_ENUM(pc + 0),
                              (GLenum) bswap_ENUM(pc + 4),
                              (GLint) bswap_CARD32(pc + 8),
                              (GLint) bswap_CARD32(pc + 12),
                              (GLsizei) bswap_CARD32(pc + 16));
}

void
__glXDispSwap_CopyConvolutionFilter2D(GLbyte * pc)
{
    glCopyConvolutionFilter2D((GLenum) bswap_ENUM(pc + 0),
                              (GLenum) bswap_ENUM(pc + 4),
                              (GLint) bswap_CARD32(pc + 8),
                              (GLint) bswap_CARD32(pc + 12),
                              (GLsizei) bswap_CARD32(pc + 16),
                              (GLsizei) bswap_CARD32(pc + 20));
}

int
__glXDispSwap_GetConvolutionParameterfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetConvolutionParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetConvolutionParameterfv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetConvolutionParameterfvEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetConvolutionParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetConvolutionParameterfv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetConvolutionParameteriv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetConvolutionParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetConvolutionParameteriv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetConvolutionParameterivEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetConvolutionParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetConvolutionParameteriv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetHistogramParameterfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetHistogramParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetHistogramParameterfv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetHistogramParameterfvEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetHistogramParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetHistogramParameterfv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetHistogramParameteriv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetHistogramParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetHistogramParameteriv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetHistogramParameterivEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetHistogramParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetHistogramParameteriv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetMinmaxParameterfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetMinmaxParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMinmaxParameterfv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetMinmaxParameterfvEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetMinmaxParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMinmaxParameterfv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetMinmaxParameteriv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetMinmaxParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMinmaxParameteriv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetMinmaxParameterivEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetMinmaxParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMinmaxParameteriv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_Histogram(GLbyte * pc)
{
    glHistogram((GLenum) bswap_ENUM(pc + 0),
                (GLsizei) bswap_CARD32(pc + 4),
                (GLenum) bswap_ENUM(pc + 8), *(GLboolean *) (pc + 12));
}

void
__glXDispSwap_Minmax(GLbyte * pc)
{
    glMinmax((GLenum) bswap_ENUM(pc + 0),
             (GLenum) bswap_ENUM(pc + 4), *(GLboolean *) (pc + 8));
}

void
__glXDispSwap_ResetHistogram(GLbyte * pc)
{
    glResetHistogram((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_ResetMinmax(GLbyte * pc)
{
    glResetMinmax((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_TexImage3D(GLbyte * pc)
{
    const CARD32 ptr_is_null = *(CARD32 *) (pc + 76);
    const GLvoid *const pixels =
        (const GLvoid *) ((ptr_is_null != 0) ? NULL : (pc + 80));
    __GLXpixel3DHeader *const hdr = (__GLXpixel3DHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) bswap_CARD32(&hdr->rowLength));
    glPixelStorei(GL_UNPACK_IMAGE_HEIGHT,
                  (GLint) bswap_CARD32(&hdr->imageHeight));
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) bswap_CARD32(&hdr->skipRows));
    glPixelStorei(GL_UNPACK_SKIP_IMAGES,
                  (GLint) bswap_CARD32(&hdr->skipImages));
    glPixelStorei(GL_UNPACK_SKIP_PIXELS,
                  (GLint) bswap_CARD32(&hdr->skipPixels));
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) bswap_CARD32(&hdr->alignment));

    glTexImage3D((GLenum) bswap_ENUM(pc + 36),
                 (GLint) bswap_CARD32(pc + 40),
                 (GLint) bswap_CARD32(pc + 44),
                 (GLsizei) bswap_CARD32(pc + 48),
                 (GLsizei) bswap_CARD32(pc + 52),
                 (GLsizei) bswap_CARD32(pc + 56),
                 (GLint) bswap_CARD32(pc + 64),
                 (GLenum) bswap_ENUM(pc + 68),
                 (GLenum) bswap_ENUM(pc + 72), pixels);
}

void
__glXDispSwap_TexSubImage3D(GLbyte * pc)
{
    const GLvoid *const pixels = (const GLvoid *) ((pc + 88));
    __GLXpixel3DHeader *const hdr = (__GLXpixel3DHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) bswap_CARD32(&hdr->rowLength));
    glPixelStorei(GL_UNPACK_IMAGE_HEIGHT,
                  (GLint) bswap_CARD32(&hdr->imageHeight));
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) bswap_CARD32(&hdr->skipRows));
    glPixelStorei(GL_UNPACK_SKIP_IMAGES,
                  (GLint) bswap_CARD32(&hdr->skipImages));
    glPixelStorei(GL_UNPACK_SKIP_PIXELS,
                  (GLint) bswap_CARD32(&hdr->skipPixels));
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) bswap_CARD32(&hdr->alignment));

    glTexSubImage3D((GLenum) bswap_ENUM(pc + 36),
                    (GLint) bswap_CARD32(pc + 40),
                    (GLint) bswap_CARD32(pc + 44),
                    (GLint) bswap_CARD32(pc + 48),
                    (GLint) bswap_CARD32(pc + 52),
                    (GLsizei) bswap_CARD32(pc + 60),
                    (GLsizei) bswap_CARD32(pc + 64),
                    (GLsizei) bswap_CARD32(pc + 68),
                    (GLenum) bswap_ENUM(pc + 76),
                    (GLenum) bswap_ENUM(pc + 80), pixels);
}

void
__glXDispSwap_CopyTexSubImage3D(GLbyte * pc)
{
    glCopyTexSubImage3D((GLenum) bswap_ENUM(pc + 0),
                        (GLint) bswap_CARD32(pc + 4),
                        (GLint) bswap_CARD32(pc + 8),
                        (GLint) bswap_CARD32(pc + 12),
                        (GLint) bswap_CARD32(pc + 16),
                        (GLint) bswap_CARD32(pc + 20),
                        (GLint) bswap_CARD32(pc + 24),
                        (GLsizei) bswap_CARD32(pc + 28),
                        (GLsizei) bswap_CARD32(pc + 32));
}

void
__glXDispSwap_ActiveTexture(GLbyte * pc)
{
    glActiveTextureARB((GLenum) bswap_ENUM(pc + 0));
}

void
__glXDispSwap_MultiTexCoord1dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 12);
        pc -= 4;
    }
#endif

    glMultiTexCoord1dvARB((GLenum) bswap_ENUM(pc + 8),
                          (const GLdouble *) bswap_64_array((uint64_t *) (pc + 0),
                                                         1));
}

void
__glXDispSwap_MultiTexCoord1fvARB(GLbyte * pc)
{
    glMultiTexCoord1fvARB((GLenum) bswap_ENUM(pc + 0),
                          (const GLfloat *)
                          bswap_32_array((uint32_t *) (pc + 4), 1));
}

void
__glXDispSwap_MultiTexCoord1iv(GLbyte * pc)
{
    glMultiTexCoord1ivARB((GLenum) bswap_ENUM(pc + 0),
                          (const GLint *) bswap_32_array((uint32_t *) (pc + 4),
                                                         1));
}

void
__glXDispSwap_MultiTexCoord1sv(GLbyte * pc)
{
    glMultiTexCoord1svARB((GLenum) bswap_ENUM(pc + 0),
                          (const GLshort *) bswap_16_array((uint16_t *) (pc + 4),
                                                           1));
}

void
__glXDispSwap_MultiTexCoord2dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 20);
        pc -= 4;
    }
#endif

    glMultiTexCoord2dvARB((GLenum) bswap_ENUM(pc + 16),
                          (const GLdouble *) bswap_64_array((uint64_t *) (pc + 0),
                                                            2));
}

void
__glXDispSwap_MultiTexCoord2fvARB(GLbyte * pc)
{
    glMultiTexCoord2fvARB((GLenum) bswap_ENUM(pc + 0),
                          (const GLfloat *)
                          bswap_32_array((uint32_t *) (pc + 4), 2));
}

void
__glXDispSwap_MultiTexCoord2iv(GLbyte * pc)
{
    glMultiTexCoord2ivARB((GLenum) bswap_ENUM(pc + 0),
                          (const GLint *) bswap_32_array((uint32_t *) (pc + 4),
                                                         2));
}

void
__glXDispSwap_MultiTexCoord2sv(GLbyte * pc)
{
    glMultiTexCoord2svARB((GLenum) bswap_ENUM(pc + 0),
                          (const GLshort *) bswap_16_array((uint16_t *) (pc + 4),
                                                           2));
}

void
__glXDispSwap_MultiTexCoord3dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 28);
        pc -= 4;
    }
#endif

    glMultiTexCoord3dvARB((GLenum) bswap_ENUM(pc + 24),
                          (const GLdouble *) bswap_64_array((uint64_t *) (pc + 0),
                                                            3));
}

void
__glXDispSwap_MultiTexCoord3fvARB(GLbyte * pc)
{
    glMultiTexCoord3fvARB((GLenum) bswap_ENUM(pc + 0),
                          (const GLfloat *)
                          bswap_32_array((uint32_t *) (pc + 4), 3));
}

void
__glXDispSwap_MultiTexCoord3iv(GLbyte * pc)
{
    glMultiTexCoord3ivARB((GLenum) bswap_ENUM(pc + 0),
                          (const GLint *) bswap_32_array((uint32_t *) (pc + 4),
                                                         3));
}

void
__glXDispSwap_MultiTexCoord3sv(GLbyte * pc)
{
    glMultiTexCoord3svARB((GLenum) bswap_ENUM(pc + 0),
                          (const GLshort *) bswap_16_array((uint16_t *) (pc + 4),
                                                           3));
}

void
__glXDispSwap_MultiTexCoord4dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 36);
        pc -= 4;
    }
#endif

    glMultiTexCoord4dvARB((GLenum) bswap_ENUM(pc + 32),
                          (const GLdouble *) bswap_64_array((uint64_t *) (pc + 0),
                                                            4));
}

void
__glXDispSwap_MultiTexCoord4fvARB(GLbyte * pc)
{
    glMultiTexCoord4fvARB((GLenum) bswap_ENUM(pc + 0),
                          (const GLfloat *)
                          bswap_32_array((uint32_t *) (pc + 4), 4));
}

void
__glXDispSwap_MultiTexCoord4iv(GLbyte * pc)
{
    glMultiTexCoord4ivARB((GLenum) bswap_ENUM(pc + 0),
                          (const GLint *) bswap_32_array((uint32_t *) (pc + 4),
                                                         4));
}

void
__glXDispSwap_MultiTexCoord4sv(GLbyte * pc)
{
    glMultiTexCoord4svARB((GLenum) bswap_ENUM(pc + 0),
                          (const GLshort *) bswap_16_array((uint16_t *) (pc + 4),
                                                           4));
}

void
__glXDispSwap_CompressedTexImage1D(GLbyte * pc)
{
    PFNGLCOMPRESSEDTEXIMAGE1DPROC CompressedTexImage1D =
        __glGetProcAddress("glCompressedTexImage1D");
    const GLsizei imageSize = (GLsizei) bswap_CARD32(pc + 20);

    CompressedTexImage1D((GLenum) bswap_ENUM(pc + 0),
                         (GLint) bswap_CARD32(pc + 4),
                         (GLenum) bswap_ENUM(pc + 8),
                         (GLsizei) bswap_CARD32(pc + 12),
                         (GLint) bswap_CARD32(pc + 16),
                         imageSize, (const GLvoid *) (pc + 24));
}

void
__glXDispSwap_CompressedTexImage2D(GLbyte * pc)
{
    PFNGLCOMPRESSEDTEXIMAGE2DPROC CompressedTexImage2D =
        __glGetProcAddress("glCompressedTexImage2D");
    const GLsizei imageSize = (GLsizei) bswap_CARD32(pc + 24);

    CompressedTexImage2D((GLenum) bswap_ENUM(pc + 0),
                         (GLint) bswap_CARD32(pc + 4),
                         (GLenum) bswap_ENUM(pc + 8),
                         (GLsizei) bswap_CARD32(pc + 12),
                         (GLsizei) bswap_CARD32(pc + 16),
                         (GLint) bswap_CARD32(pc + 20),
                         imageSize, (const GLvoid *) (pc + 28));
}

void
__glXDispSwap_CompressedTexImage3D(GLbyte * pc)
{
    PFNGLCOMPRESSEDTEXIMAGE3DPROC CompressedTexImage3D =
        __glGetProcAddress("glCompressedTexImage3D");
    const GLsizei imageSize = (GLsizei) bswap_CARD32(pc + 28);

    CompressedTexImage3D((GLenum) bswap_ENUM(pc + 0),
                         (GLint) bswap_CARD32(pc + 4),
                         (GLenum) bswap_ENUM(pc + 8),
                         (GLsizei) bswap_CARD32(pc + 12),
                         (GLsizei) bswap_CARD32(pc + 16),
                         (GLsizei) bswap_CARD32(pc + 20),
                         (GLint) bswap_CARD32(pc + 24),
                         imageSize, (const GLvoid *) (pc + 32));
}

void
__glXDispSwap_CompressedTexSubImage1D(GLbyte * pc)
{
    PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC CompressedTexSubImage1D =
        __glGetProcAddress("glCompressedTexSubImage1D");
    const GLsizei imageSize = (GLsizei) bswap_CARD32(pc + 20);

    CompressedTexSubImage1D((GLenum) bswap_ENUM(pc + 0),
                            (GLint) bswap_CARD32(pc + 4),
                            (GLint) bswap_CARD32(pc + 8),
                            (GLsizei) bswap_CARD32(pc + 12),
                            (GLenum) bswap_ENUM(pc + 16),
                            imageSize, (const GLvoid *) (pc + 24));
}

void
__glXDispSwap_CompressedTexSubImage2D(GLbyte * pc)
{
    PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC CompressedTexSubImage2D =
        __glGetProcAddress("glCompressedTexSubImage2D");
    const GLsizei imageSize = (GLsizei) bswap_CARD32(pc + 28);

    CompressedTexSubImage2D((GLenum) bswap_ENUM(pc + 0),
                            (GLint) bswap_CARD32(pc + 4),
                            (GLint) bswap_CARD32(pc + 8),
                            (GLint) bswap_CARD32(pc + 12),
                            (GLsizei) bswap_CARD32(pc + 16),
                            (GLsizei) bswap_CARD32(pc + 20),
                            (GLenum) bswap_ENUM(pc + 24),
                            imageSize, (const GLvoid *) (pc + 32));
}

void
__glXDispSwap_CompressedTexSubImage3D(GLbyte * pc)
{
    PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC CompressedTexSubImage3D =
        __glGetProcAddress("glCompressedTexSubImage3D");
    const GLsizei imageSize = (GLsizei) bswap_CARD32(pc + 36);

    CompressedTexSubImage3D((GLenum) bswap_ENUM(pc + 0),
                            (GLint) bswap_CARD32(pc + 4),
                            (GLint) bswap_CARD32(pc + 8),
                            (GLint) bswap_CARD32(pc + 12),
                            (GLint) bswap_CARD32(pc + 16),
                            (GLsizei) bswap_CARD32(pc + 20),
                            (GLsizei) bswap_CARD32(pc + 24),
                            (GLsizei) bswap_CARD32(pc + 28),
                            (GLenum) bswap_ENUM(pc + 32),
                            imageSize, (const GLvoid *) (pc + 40));
}

void
__glXDispSwap_SampleCoverage(GLbyte * pc)
{
    PFNGLSAMPLECOVERAGEPROC SampleCoverage =
        __glGetProcAddress("glSampleCoverage");
    SampleCoverage((GLclampf) bswap_FLOAT32(pc + 0), *(GLboolean *) (pc + 4));
}

void
__glXDispSwap_BlendFuncSeparate(GLbyte * pc)
{
    PFNGLBLENDFUNCSEPARATEPROC BlendFuncSeparate =
        __glGetProcAddress("glBlendFuncSeparate");
    BlendFuncSeparate((GLenum) bswap_ENUM(pc + 0), (GLenum) bswap_ENUM(pc + 4),
                      (GLenum) bswap_ENUM(pc + 8),
                      (GLenum) bswap_ENUM(pc + 12));
}

void
__glXDispSwap_FogCoorddv(GLbyte * pc)
{
    PFNGLFOGCOORDDVPROC FogCoorddv = __glGetProcAddress("glFogCoorddv");

#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 8);
        pc -= 4;
    }
#endif

    FogCoorddv((const GLdouble *) bswap_64_array((uint64_t *) (pc + 0), 1));
}

void
__glXDispSwap_PointParameterf(GLbyte * pc)
{
    PFNGLPOINTPARAMETERFPROC PointParameterf =
        __glGetProcAddress("glPointParameterf");
    PointParameterf((GLenum) bswap_ENUM(pc + 0),
                    (GLfloat) bswap_FLOAT32(pc + 4));
}

void
__glXDispSwap_PointParameterfv(GLbyte * pc)
{
    PFNGLPOINTPARAMETERFVPROC PointParameterfv =
        __glGetProcAddress("glPointParameterfv");
    const GLenum pname = (GLenum) bswap_ENUM(pc + 0);
    const GLfloat *params;

    params =
        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
                                         __glPointParameterfv_size(pname));

    PointParameterfv(pname, params);
}

void
__glXDispSwap_PointParameteri(GLbyte * pc)
{
    PFNGLPOINTPARAMETERIPROC PointParameteri =
        __glGetProcAddress("glPointParameteri");
    PointParameteri((GLenum) bswap_ENUM(pc + 0), (GLint) bswap_CARD32(pc + 4));
}

void
__glXDispSwap_PointParameteriv(GLbyte * pc)
{
    PFNGLPOINTPARAMETERIVPROC PointParameteriv =
        __glGetProcAddress("glPointParameteriv");
    const GLenum pname = (GLenum) bswap_ENUM(pc + 0);
    const GLint *params;

    params =
        (const GLint *) bswap_32_array((uint32_t *) (pc + 4),
                                       __glPointParameteriv_size(pname));

    PointParameteriv(pname, params);
}

void
__glXDispSwap_SecondaryColor3bv(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3BVPROC SecondaryColor3bv =
        __glGetProcAddress("glSecondaryColor3bv");
    SecondaryColor3bv((const GLbyte *) (pc + 0));
}

void
__glXDispSwap_SecondaryColor3dv(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3DVPROC SecondaryColor3dv =
        __glGetProcAddress("glSecondaryColor3dv");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    SecondaryColor3dv((const GLdouble *)
                      bswap_64_array((uint64_t *) (pc + 0), 3));
}

void
__glXDispSwap_SecondaryColor3iv(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3IVPROC SecondaryColor3iv =
        __glGetProcAddress("glSecondaryColor3iv");
    SecondaryColor3iv((const GLint *) bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_SecondaryColor3sv(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3SVPROC SecondaryColor3sv =
        __glGetProcAddress("glSecondaryColor3sv");
    SecondaryColor3sv((const GLshort *)
                      bswap_16_array((uint16_t *) (pc + 0), 3));
}

void
__glXDispSwap_SecondaryColor3ubv(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3UBVPROC SecondaryColor3ubv =
        __glGetProcAddress("glSecondaryColor3ubv");
    SecondaryColor3ubv((const GLubyte *) (pc + 0));
}

void
__glXDispSwap_SecondaryColor3uiv(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3UIVPROC SecondaryColor3uiv =
        __glGetProcAddress("glSecondaryColor3uiv");
    SecondaryColor3uiv((const GLuint *)
                       bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_SecondaryColor3usv(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3USVPROC SecondaryColor3usv =
        __glGetProcAddress("glSecondaryColor3usv");
    SecondaryColor3usv((const GLushort *)
                       bswap_16_array((uint16_t *) (pc + 0), 3));
}

void
__glXDispSwap_WindowPos3fv(GLbyte * pc)
{
    PFNGLWINDOWPOS3FVPROC WindowPos3fv = __glGetProcAddress("glWindowPos3fv");

    WindowPos3fv((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_BeginQuery(GLbyte * pc)
{
    PFNGLBEGINQUERYPROC BeginQuery = __glGetProcAddress("glBeginQuery");

    BeginQuery((GLenum) bswap_ENUM(pc + 0), (GLuint) bswap_CARD32(pc + 4));
}

int
__glXDispSwap_DeleteQueries(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLDELETEQUERIESPROC DeleteQueries =
        __glGetProcAddress("glDeleteQueries");
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

        DeleteQueries(n,
                      (const GLuint *) bswap_32_array((uint32_t *) (pc + 4),
                                                      0));
        error = Success;
    }

    return error;
}

void
__glXDispSwap_EndQuery(GLbyte * pc)
{
    PFNGLENDQUERYPROC EndQuery = __glGetProcAddress("glEndQuery");

    EndQuery((GLenum) bswap_ENUM(pc + 0));
}

int
__glXDispSwap_GenQueries(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGENQUERIESPROC GenQueries = __glGetProcAddress("glGenQueries");
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

        GLuint answerBuffer[200];
        GLuint *ids =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);
        if (ids == NULL)
            return BadAlloc;

        GenQueries(n, ids);
        (void) bswap_32_array((uint32_t *) ids, n);
        __glXSendReplySwap(cl->client, ids, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetQueryObjectiv(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETQUERYOBJECTIVPROC GetQueryObjectiv =
        __glGetProcAddress("glGetQueryObjectiv");
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetQueryObjectiv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        GetQueryObjectiv((GLuint) bswap_CARD32(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetQueryObjectuiv(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETQUERYOBJECTUIVPROC GetQueryObjectuiv =
        __glGetProcAddress("glGetQueryObjectuiv");
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetQueryObjectuiv_size(pname);
        GLuint answerBuffer[200];
        GLuint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        GetQueryObjectuiv((GLuint) bswap_CARD32(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetQueryiv(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETQUERYIVPROC GetQueryiv = __glGetProcAddress("glGetQueryiv");
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetQueryiv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        GetQueryiv((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_IsQuery(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLISQUERYPROC IsQuery = __glGetProcAddress("glIsQuery");
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = IsQuery((GLuint) bswap_CARD32(pc + 0));
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_BlendEquationSeparate(GLbyte * pc)
{
    PFNGLBLENDEQUATIONSEPARATEPROC BlendEquationSeparate =
        __glGetProcAddress("glBlendEquationSeparate");
    BlendEquationSeparate((GLenum) bswap_ENUM(pc + 0),
                          (GLenum) bswap_ENUM(pc + 4));
}

void
__glXDispSwap_DrawBuffers(GLbyte * pc)
{
    PFNGLDRAWBUFFERSPROC DrawBuffers = __glGetProcAddress("glDrawBuffers");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

    DrawBuffers(n, (const GLenum *) bswap_32_array((uint32_t *) (pc + 4), 0));
}

void
__glXDispSwap_VertexAttrib1dv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB1DVPROC VertexAttrib1dv =
        __glGetProcAddress("glVertexAttrib1dv");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 12);
        pc -= 4;
    }
#endif

    VertexAttrib1dv((GLuint) bswap_CARD32(pc + 0),
                    (const GLdouble *) bswap_64_array((uint64_t *) (pc + 4),
                                                      1));
}

void
__glXDispSwap_VertexAttrib1sv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB1SVPROC VertexAttrib1sv =
        __glGetProcAddress("glVertexAttrib1sv");
    VertexAttrib1sv((GLuint) bswap_CARD32(pc + 0),
                    (const GLshort *) bswap_16_array((uint16_t *) (pc + 4), 1));
}

void
__glXDispSwap_VertexAttrib2dv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB2DVPROC VertexAttrib2dv =
        __glGetProcAddress("glVertexAttrib2dv");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 20);
        pc -= 4;
    }
#endif

    VertexAttrib2dv((GLuint) bswap_CARD32(pc + 0),
                    (const GLdouble *) bswap_64_array((uint64_t *) (pc + 4),
                                                      2));
}

void
__glXDispSwap_VertexAttrib2sv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB2SVPROC VertexAttrib2sv =
        __glGetProcAddress("glVertexAttrib2sv");
    VertexAttrib2sv((GLuint) bswap_CARD32(pc + 0),
                    (const GLshort *) bswap_16_array((uint16_t *) (pc + 4), 2));
}

void
__glXDispSwap_VertexAttrib3dv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB3DVPROC VertexAttrib3dv =
        __glGetProcAddress("glVertexAttrib3dv");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 28);
        pc -= 4;
    }
#endif

    VertexAttrib3dv((GLuint) bswap_CARD32(pc + 0),
                    (const GLdouble *) bswap_64_array((uint64_t *) (pc + 4),
                                                      3));
}

void
__glXDispSwap_VertexAttrib3sv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB3SVPROC VertexAttrib3sv =
        __glGetProcAddress("glVertexAttrib3sv");
    VertexAttrib3sv((GLuint) bswap_CARD32(pc + 0),
                    (const GLshort *) bswap_16_array((uint16_t *) (pc + 4), 3));
}

void
__glXDispSwap_VertexAttrib4Nbv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4NBVPROC VertexAttrib4Nbv =
        __glGetProcAddress("glVertexAttrib4Nbv");
    VertexAttrib4Nbv((GLuint) bswap_CARD32(pc + 0), (const GLbyte *) (pc + 4));
}

void
__glXDispSwap_VertexAttrib4Niv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4NIVPROC VertexAttrib4Niv =
        __glGetProcAddress("glVertexAttrib4Niv");
    VertexAttrib4Niv((GLuint) bswap_CARD32(pc + 0),
                     (const GLint *) bswap_32_array((uint32_t *) (pc + 4), 4));
}

void
__glXDispSwap_VertexAttrib4Nsv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4NSVPROC VertexAttrib4Nsv =
        __glGetProcAddress("glVertexAttrib4Nsv");
    VertexAttrib4Nsv((GLuint) bswap_CARD32(pc + 0),
                     (const GLshort *) bswap_16_array((uint16_t *) (pc + 4),
                                                      4));
}

void
__glXDispSwap_VertexAttrib4Nubv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4NUBVPROC VertexAttrib4Nubv =
        __glGetProcAddress("glVertexAttrib4Nubv");
    VertexAttrib4Nubv((GLuint) bswap_CARD32(pc + 0),
                      (const GLubyte *) (pc + 4));
}

void
__glXDispSwap_VertexAttrib4Nuiv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4NUIVPROC VertexAttrib4Nuiv =
        __glGetProcAddress("glVertexAttrib4Nuiv");
    VertexAttrib4Nuiv((GLuint) bswap_CARD32(pc + 0),
                      (const GLuint *) bswap_32_array((uint32_t *) (pc + 4),
                                                      4));
}

void
__glXDispSwap_VertexAttrib4Nusv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4NUSVPROC VertexAttrib4Nusv =
        __glGetProcAddress("glVertexAttrib4Nusv");
    VertexAttrib4Nusv((GLuint) bswap_CARD32(pc + 0),
                      (const GLushort *) bswap_16_array((uint16_t *) (pc + 4),
                                                        4));
}

void
__glXDispSwap_VertexAttrib4bv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4BVPROC VertexAttrib4bv =
        __glGetProcAddress("glVertexAttrib4bv");
    VertexAttrib4bv((GLuint) bswap_CARD32(pc + 0), (const GLbyte *) (pc + 4));
}

void
__glXDispSwap_VertexAttrib4dv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4DVPROC VertexAttrib4dv =
        __glGetProcAddress("glVertexAttrib4dv");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 36);
        pc -= 4;
    }
#endif

    VertexAttrib4dv((GLuint) bswap_CARD32(pc + 0),
                    (const GLdouble *) bswap_64_array((uint64_t *) (pc + 4),
                                                      4));
}

void
__glXDispSwap_VertexAttrib4iv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4IVPROC VertexAttrib4iv =
        __glGetProcAddress("glVertexAttrib4iv");
    VertexAttrib4iv((GLuint) bswap_CARD32(pc + 0),
                    (const GLint *) bswap_32_array((uint32_t *) (pc + 4), 4));
}

void
__glXDispSwap_VertexAttrib4sv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4SVPROC VertexAttrib4sv =
        __glGetProcAddress("glVertexAttrib4sv");
    VertexAttrib4sv((GLuint) bswap_CARD32(pc + 0),
                    (const GLshort *) bswap_16_array((uint16_t *) (pc + 4), 4));
}

void
__glXDispSwap_VertexAttrib4ubv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4UBVPROC VertexAttrib4ubv =
        __glGetProcAddress("glVertexAttrib4ubv");
    VertexAttrib4ubv((GLuint) bswap_CARD32(pc + 0), (const GLubyte *) (pc + 4));
}

void
__glXDispSwap_VertexAttrib4uiv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4UIVPROC VertexAttrib4uiv =
        __glGetProcAddress("glVertexAttrib4uiv");
    VertexAttrib4uiv((GLuint) bswap_CARD32(pc + 0),
                     (const GLuint *) bswap_32_array((uint32_t *) (pc + 4), 4));
}

void
__glXDispSwap_VertexAttrib4usv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4USVPROC VertexAttrib4usv =
        __glGetProcAddress("glVertexAttrib4usv");
    VertexAttrib4usv((GLuint) bswap_CARD32(pc + 0),
                     (const GLushort *) bswap_16_array((uint16_t *) (pc + 4),
                                                       4));
}

void
__glXDispSwap_ClampColor(GLbyte * pc)
{
    PFNGLCLAMPCOLORPROC ClampColor = __glGetProcAddress("glClampColor");

    ClampColor((GLenum) bswap_ENUM(pc + 0), (GLenum) bswap_ENUM(pc + 4));
}

void
__glXDispSwap_BindProgramARB(GLbyte * pc)
{
    PFNGLBINDPROGRAMARBPROC BindProgramARB =
        __glGetProcAddress("glBindProgramARB");
    BindProgramARB((GLenum) bswap_ENUM(pc + 0), (GLuint) bswap_CARD32(pc + 4));
}

int
__glXDispSwap_DeleteProgramsARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLDELETEPROGRAMSARBPROC DeleteProgramsARB =
        __glGetProcAddress("glDeleteProgramsARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

        DeleteProgramsARB(n,
                          (const GLuint *) bswap_32_array((uint32_t *) (pc + 4),
                                                          0));
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GenProgramsARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGENPROGRAMSARBPROC GenProgramsARB =
        __glGetProcAddress("glGenProgramsARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

        GLuint answerBuffer[200];
        GLuint *programs =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);
        if (programs == NULL)
            return BadAlloc;

        GenProgramsARB(n, programs);
        (void) bswap_32_array((uint32_t *) programs, n);
        __glXSendReplySwap(cl->client, programs, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetProgramEnvParameterdvARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETPROGRAMENVPARAMETERDVARBPROC GetProgramEnvParameterdvARB =
        __glGetProcAddress("glGetProgramEnvParameterdvARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLdouble params[4];

        GetProgramEnvParameterdvARB((GLenum) bswap_ENUM(pc + 0),
                                    (GLuint) bswap_CARD32(pc + 4), params);
        (void) bswap_64_array((uint64_t *) params, 4);
        __glXSendReplySwap(cl->client, params, 4, 8, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetProgramEnvParameterfvARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETPROGRAMENVPARAMETERFVARBPROC GetProgramEnvParameterfvARB =
        __glGetProcAddress("glGetProgramEnvParameterfvARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLfloat params[4];

        GetProgramEnvParameterfvARB((GLenum) bswap_ENUM(pc + 0),
                                    (GLuint) bswap_CARD32(pc + 4), params);
        (void) bswap_32_array((uint32_t *) params, 4);
        __glXSendReplySwap(cl->client, params, 4, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetProgramLocalParameterdvARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC GetProgramLocalParameterdvARB =
        __glGetProcAddress("glGetProgramLocalParameterdvARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLdouble params[4];

        GetProgramLocalParameterdvARB((GLenum) bswap_ENUM(pc + 0),
                                      (GLuint) bswap_CARD32(pc + 4), params);
        (void) bswap_64_array((uint64_t *) params, 4);
        __glXSendReplySwap(cl->client, params, 4, 8, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetProgramLocalParameterfvARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC GetProgramLocalParameterfvARB =
        __glGetProcAddress("glGetProgramLocalParameterfvARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLfloat params[4];

        GetProgramLocalParameterfvARB((GLenum) bswap_ENUM(pc + 0),
                                      (GLuint) bswap_CARD32(pc + 4), params);
        (void) bswap_32_array((uint32_t *) params, 4);
        __glXSendReplySwap(cl->client, params, 4, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetProgramivARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETPROGRAMIVARBPROC GetProgramivARB =
        __glGetProcAddress("glGetProgramivARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetProgramivARB_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        GetProgramivARB((GLenum) bswap_ENUM(pc + 0), pname, params);
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_IsProgramARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLISPROGRAMARBPROC IsProgramARB = __glGetProcAddress("glIsProgramARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = IsProgramARB((GLuint) bswap_CARD32(pc + 0));
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_ProgramEnvParameter4dvARB(GLbyte * pc)
{
    PFNGLPROGRAMENVPARAMETER4DVARBPROC ProgramEnvParameter4dvARB =
        __glGetProcAddress("glProgramEnvParameter4dvARB");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 40);
        pc -= 4;
    }
#endif

    ProgramEnvParameter4dvARB((GLenum) bswap_ENUM(pc + 0),
                              (GLuint) bswap_CARD32(pc + 4),
                              (const GLdouble *)
                              bswap_64_array((uint64_t *) (pc + 8), 4));
}

void
__glXDispSwap_ProgramEnvParameter4fvARB(GLbyte * pc)
{
    PFNGLPROGRAMENVPARAMETER4FVARBPROC ProgramEnvParameter4fvARB =
        __glGetProcAddress("glProgramEnvParameter4fvARB");
    ProgramEnvParameter4fvARB((GLenum) bswap_ENUM(pc + 0),
                              (GLuint) bswap_CARD32(pc + 4),
                              (const GLfloat *)
                              bswap_32_array((uint32_t *) (pc + 8), 4));
}

void
__glXDispSwap_ProgramLocalParameter4dvARB(GLbyte * pc)
{
    PFNGLPROGRAMLOCALPARAMETER4DVARBPROC ProgramLocalParameter4dvARB =
        __glGetProcAddress("glProgramLocalParameter4dvARB");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 40);
        pc -= 4;
    }
#endif

    ProgramLocalParameter4dvARB((GLenum) bswap_ENUM(pc + 0),
                                (GLuint) bswap_CARD32(pc + 4),
                                (const GLdouble *)
                                bswap_64_array((uint64_t *) (pc + 8), 4));
}

void
__glXDispSwap_ProgramLocalParameter4fvARB(GLbyte * pc)
{
    PFNGLPROGRAMLOCALPARAMETER4FVARBPROC ProgramLocalParameter4fvARB =
        __glGetProcAddress("glProgramLocalParameter4fvARB");
    ProgramLocalParameter4fvARB((GLenum) bswap_ENUM(pc + 0),
                                (GLuint) bswap_CARD32(pc + 4),
                                (const GLfloat *)
                                bswap_32_array((uint32_t *) (pc + 8), 4));
}

void
__glXDispSwap_ProgramStringARB(GLbyte * pc)
{
    PFNGLPROGRAMSTRINGARBPROC ProgramStringARB =
        __glGetProcAddress("glProgramStringARB");
    const GLsizei len = (GLsizei) bswap_CARD32(pc + 8);

    ProgramStringARB((GLenum) bswap_ENUM(pc + 0),
                     (GLenum) bswap_ENUM(pc + 4),
                     len, (const GLvoid *) (pc + 12));
}

void
__glXDispSwap_VertexAttrib1fvARB(GLbyte * pc)
{
    PFNGLVERTEXATTRIB1FVARBPROC VertexAttrib1fvARB =
        __glGetProcAddress("glVertexAttrib1fvARB");
    VertexAttrib1fvARB((GLuint) bswap_CARD32(pc + 0),
                       (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
                                                        1));
}

void
__glXDispSwap_VertexAttrib2fvARB(GLbyte * pc)
{
    PFNGLVERTEXATTRIB2FVARBPROC VertexAttrib2fvARB =
        __glGetProcAddress("glVertexAttrib2fvARB");
    VertexAttrib2fvARB((GLuint) bswap_CARD32(pc + 0),
                       (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
                                                        2));
}

void
__glXDispSwap_VertexAttrib3fvARB(GLbyte * pc)
{
    PFNGLVERTEXATTRIB3FVARBPROC VertexAttrib3fvARB =
        __glGetProcAddress("glVertexAttrib3fvARB");
    VertexAttrib3fvARB((GLuint) bswap_CARD32(pc + 0),
                       (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
                                                        3));
}

void
__glXDispSwap_VertexAttrib4fvARB(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4FVARBPROC VertexAttrib4fvARB =
        __glGetProcAddress("glVertexAttrib4fvARB");
    VertexAttrib4fvARB((GLuint) bswap_CARD32(pc + 0),
                       (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
                                                        4));
}

void
__glXDispSwap_BindFramebuffer(GLbyte * pc)
{
    PFNGLBINDFRAMEBUFFERPROC BindFramebuffer =
        __glGetProcAddress("glBindFramebuffer");
    BindFramebuffer((GLenum) bswap_ENUM(pc + 0), (GLuint) bswap_CARD32(pc + 4));
}

void
__glXDispSwap_BindRenderbuffer(GLbyte * pc)
{
    PFNGLBINDRENDERBUFFERPROC BindRenderbuffer =
        __glGetProcAddress("glBindRenderbuffer");
    BindRenderbuffer((GLenum) bswap_ENUM(pc + 0),
                     (GLuint) bswap_CARD32(pc + 4));
}

void
__glXDispSwap_BlitFramebuffer(GLbyte * pc)
{
    PFNGLBLITFRAMEBUFFERPROC BlitFramebuffer =
        __glGetProcAddress("glBlitFramebuffer");
    BlitFramebuffer((GLint) bswap_CARD32(pc + 0), (GLint) bswap_CARD32(pc + 4),
                    (GLint) bswap_CARD32(pc + 8), (GLint) bswap_CARD32(pc + 12),
                    (GLint) bswap_CARD32(pc + 16),
                    (GLint) bswap_CARD32(pc + 20),
                    (GLint) bswap_CARD32(pc + 24),
                    (GLint) bswap_CARD32(pc + 28),
                    (GLbitfield) bswap_CARD32(pc + 32),
                    (GLenum) bswap_ENUM(pc + 36));
}

int
__glXDispSwap_CheckFramebufferStatus(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLCHECKFRAMEBUFFERSTATUSPROC CheckFramebufferStatus =
        __glGetProcAddress("glCheckFramebufferStatus");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLenum retval;

        retval = CheckFramebufferStatus((GLenum) bswap_ENUM(pc + 0));
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_DeleteFramebuffers(GLbyte * pc)
{
    PFNGLDELETEFRAMEBUFFERSPROC DeleteFramebuffers =
        __glGetProcAddress("glDeleteFramebuffers");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

    DeleteFramebuffers(n,
                       (const GLuint *) bswap_32_array((uint32_t *) (pc + 4),
                                                       0));
}

void
__glXDispSwap_DeleteRenderbuffers(GLbyte * pc)
{
    PFNGLDELETERENDERBUFFERSPROC DeleteRenderbuffers =
        __glGetProcAddress("glDeleteRenderbuffers");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

    DeleteRenderbuffers(n,
                        (const GLuint *) bswap_32_array((uint32_t *) (pc + 4),
                                                        0));
}

void
__glXDispSwap_FramebufferRenderbuffer(GLbyte * pc)
{
    PFNGLFRAMEBUFFERRENDERBUFFERPROC FramebufferRenderbuffer =
        __glGetProcAddress("glFramebufferRenderbuffer");
    FramebufferRenderbuffer((GLenum) bswap_ENUM(pc + 0),
                            (GLenum) bswap_ENUM(pc + 4),
                            (GLenum) bswap_ENUM(pc + 8),
                            (GLuint) bswap_CARD32(pc + 12));
}

void
__glXDispSwap_FramebufferTexture1D(GLbyte * pc)
{
    PFNGLFRAMEBUFFERTEXTURE1DPROC FramebufferTexture1D =
        __glGetProcAddress("glFramebufferTexture1D");
    FramebufferTexture1D((GLenum) bswap_ENUM(pc + 0),
                         (GLenum) bswap_ENUM(pc + 4),
                         (GLenum) bswap_ENUM(pc + 8),
                         (GLuint) bswap_CARD32(pc + 12),
                         (GLint) bswap_CARD32(pc + 16));
}

void
__glXDispSwap_FramebufferTexture2D(GLbyte * pc)
{
    PFNGLFRAMEBUFFERTEXTURE2DPROC FramebufferTexture2D =
        __glGetProcAddress("glFramebufferTexture2D");
    FramebufferTexture2D((GLenum) bswap_ENUM(pc + 0),
                         (GLenum) bswap_ENUM(pc + 4),
                         (GLenum) bswap_ENUM(pc + 8),
                         (GLuint) bswap_CARD32(pc + 12),
                         (GLint) bswap_CARD32(pc + 16));
}

void
__glXDispSwap_FramebufferTexture3D(GLbyte * pc)
{
    PFNGLFRAMEBUFFERTEXTURE3DPROC FramebufferTexture3D =
        __glGetProcAddress("glFramebufferTexture3D");
    FramebufferTexture3D((GLenum) bswap_ENUM(pc + 0),
                         (GLenum) bswap_ENUM(pc + 4),
                         (GLenum) bswap_ENUM(pc + 8),
                         (GLuint) bswap_CARD32(pc + 12),
                         (GLint) bswap_CARD32(pc + 16),
                         (GLint) bswap_CARD32(pc + 20));
}

void
__glXDispSwap_FramebufferTextureLayer(GLbyte * pc)
{
    PFNGLFRAMEBUFFERTEXTURELAYERPROC FramebufferTextureLayer =
        __glGetProcAddress("glFramebufferTextureLayer");
    FramebufferTextureLayer((GLenum) bswap_ENUM(pc + 0),
                            (GLenum) bswap_ENUM(pc + 4),
                            (GLuint) bswap_CARD32(pc + 8),
                            (GLint) bswap_CARD32(pc + 12),
                            (GLint) bswap_CARD32(pc + 16));
}

int
__glXDispSwap_GenFramebuffers(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGENFRAMEBUFFERSPROC GenFramebuffers =
        __glGetProcAddress("glGenFramebuffers");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

        GLuint answerBuffer[200];
        GLuint *framebuffers =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);

        if (framebuffers == NULL)
            return BadAlloc;

        GenFramebuffers(n, framebuffers);
        (void) bswap_32_array((uint32_t *) framebuffers, n);
        __glXSendReplySwap(cl->client, framebuffers, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GenRenderbuffers(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGENRENDERBUFFERSPROC GenRenderbuffers =
        __glGetProcAddress("glGenRenderbuffers");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

        GLuint answerBuffer[200];
        GLuint *renderbuffers =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);

        if (renderbuffers == NULL)
            return BadAlloc;

        GenRenderbuffers(n, renderbuffers);
        (void) bswap_32_array((uint32_t *) renderbuffers, n);
        __glXSendReplySwap(cl->client, renderbuffers, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_GenerateMipmap(GLbyte * pc)
{
    PFNGLGENERATEMIPMAPPROC GenerateMipmap =
        __glGetProcAddress("glGenerateMipmap");
    GenerateMipmap((GLenum) bswap_ENUM(pc + 0));
}

int
__glXDispSwap_GetFramebufferAttachmentParameteriv(__GLXclientState * cl,
                                                  GLbyte * pc)
{
    PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
        GetFramebufferAttachmentParameteriv =
        __glGetProcAddress("glGetFramebufferAttachmentParameteriv");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLint params[1];

        GetFramebufferAttachmentParameteriv((GLenum) bswap_ENUM(pc + 0),
                                            (GLenum) bswap_ENUM(pc + 4),
                                            (GLenum) bswap_ENUM(pc + 8),
                                            params);
        (void) bswap_32_array((uint32_t *) params, 1);
        __glXSendReplySwap(cl->client, params, 1, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetRenderbufferParameteriv(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETRENDERBUFFERPARAMETERIVPROC GetRenderbufferParameteriv =
        __glGetProcAddress("glGetRenderbufferParameteriv");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLint params[1];

        GetRenderbufferParameteriv((GLenum) bswap_ENUM(pc + 0),
                                   (GLenum) bswap_ENUM(pc + 4), params);
        (void) bswap_32_array((uint32_t *) params, 1);
        __glXSendReplySwap(cl->client, params, 1, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_IsFramebuffer(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLISFRAMEBUFFERPROC IsFramebuffer =
        __glGetProcAddress("glIsFramebuffer");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = IsFramebuffer((GLuint) bswap_CARD32(pc + 0));
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_IsRenderbuffer(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLISRENDERBUFFERPROC IsRenderbuffer =
        __glGetProcAddress("glIsRenderbuffer");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = IsRenderbuffer((GLuint) bswap_CARD32(pc + 0));
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_RenderbufferStorage(GLbyte * pc)
{
    PFNGLRENDERBUFFERSTORAGEPROC RenderbufferStorage =
        __glGetProcAddress("glRenderbufferStorage");
    RenderbufferStorage((GLenum) bswap_ENUM(pc + 0),
                        (GLenum) bswap_ENUM(pc + 4),
                        (GLsizei) bswap_CARD32(pc + 8),
                        (GLsizei) bswap_CARD32(pc + 12));
}

void
__glXDispSwap_RenderbufferStorageMultisample(GLbyte * pc)
{
    PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC RenderbufferStorageMultisample =
        __glGetProcAddress("glRenderbufferStorageMultisample");
    RenderbufferStorageMultisample((GLenum) bswap_ENUM(pc + 0),
                                   (GLsizei) bswap_CARD32(pc + 4),
                                   (GLenum) bswap_ENUM(pc + 8),
                                   (GLsizei) bswap_CARD32(pc + 12),
                                   (GLsizei) bswap_CARD32(pc + 16));
}

void
__glXDispSwap_SecondaryColor3fvEXT(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3FVEXTPROC SecondaryColor3fvEXT =
        __glGetProcAddress("glSecondaryColor3fvEXT");
    SecondaryColor3fvEXT((const GLfloat *)
                         bswap_32_array((uint32_t *) (pc + 0), 3));
}

void
__glXDispSwap_FogCoordfvEXT(GLbyte * pc)
{
    PFNGLFOGCOORDFVEXTPROC FogCoordfvEXT =
        __glGetProcAddress("glFogCoordfvEXT");
    FogCoordfvEXT((const GLfloat *) bswap_32_array((uint32_t *) (pc + 0), 1));
}

void
__glXDispSwap_VertexAttrib1dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB1DVNVPROC VertexAttrib1dvNV =
        __glGetProcAddress("glVertexAttrib1dvNV");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 12);
        pc -= 4;
    }
#endif

    VertexAttrib1dvNV((GLuint) bswap_CARD32(pc + 0),
                      (const GLdouble *) bswap_64_array((uint64_t *) (pc + 4),
                                                        1));
}

void
__glXDispSwap_VertexAttrib1fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB1FVNVPROC VertexAttrib1fvNV =
        __glGetProcAddress("glVertexAttrib1fvNV");
    VertexAttrib1fvNV((GLuint) bswap_CARD32(pc + 0),
                      (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
                                                       1));
}

void
__glXDispSwap_VertexAttrib1svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB1SVNVPROC VertexAttrib1svNV =
        __glGetProcAddress("glVertexAttrib1svNV");
    VertexAttrib1svNV((GLuint) bswap_CARD32(pc + 0),
                      (const GLshort *) bswap_16_array((uint16_t *) (pc + 4),
                                                       1));
}

void
__glXDispSwap_VertexAttrib2dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB2DVNVPROC VertexAttrib2dvNV =
        __glGetProcAddress("glVertexAttrib2dvNV");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 20);
        pc -= 4;
    }
#endif

    VertexAttrib2dvNV((GLuint) bswap_CARD32(pc + 0),
                      (const GLdouble *) bswap_64_array((uint64_t *) (pc + 4),
                                                        2));
}

void
__glXDispSwap_VertexAttrib2fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB2FVNVPROC VertexAttrib2fvNV =
        __glGetProcAddress("glVertexAttrib2fvNV");
    VertexAttrib2fvNV((GLuint) bswap_CARD32(pc + 0),
                      (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
                                                       2));
}

void
__glXDispSwap_VertexAttrib2svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB2SVNVPROC VertexAttrib2svNV =
        __glGetProcAddress("glVertexAttrib2svNV");
    VertexAttrib2svNV((GLuint) bswap_CARD32(pc + 0),
                      (const GLshort *) bswap_16_array((uint16_t *) (pc + 4),
                                                       2));
}

void
__glXDispSwap_VertexAttrib3dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB3DVNVPROC VertexAttrib3dvNV =
        __glGetProcAddress("glVertexAttrib3dvNV");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 28);
        pc -= 4;
    }
#endif

    VertexAttrib3dvNV((GLuint) bswap_CARD32(pc + 0),
                      (const GLdouble *) bswap_64_array((uint64_t *) (pc + 4),
                                                        3));
}

void
__glXDispSwap_VertexAttrib3fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB3FVNVPROC VertexAttrib3fvNV =
        __glGetProcAddress("glVertexAttrib3fvNV");
    VertexAttrib3fvNV((GLuint) bswap_CARD32(pc + 0),
                      (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
                                                       3));
}

void
__glXDispSwap_VertexAttrib3svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB3SVNVPROC VertexAttrib3svNV =
        __glGetProcAddress("glVertexAttrib3svNV");
    VertexAttrib3svNV((GLuint) bswap_CARD32(pc + 0),
                      (const GLshort *) bswap_16_array((uint16_t *) (pc + 4),
                                                       3));
}

void
__glXDispSwap_VertexAttrib4dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4DVNVPROC VertexAttrib4dvNV =
        __glGetProcAddress("glVertexAttrib4dvNV");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 36);
        pc -= 4;
    }
#endif

    VertexAttrib4dvNV((GLuint) bswap_CARD32(pc + 0),
                      (const GLdouble *) bswap_64_array((uint64_t *) (pc + 4),
                                                        4));
}

void
__glXDispSwap_VertexAttrib4fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4FVNVPROC VertexAttrib4fvNV =
        __glGetProcAddress("glVertexAttrib4fvNV");
    VertexAttrib4fvNV((GLuint) bswap_CARD32(pc + 0),
                      (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
                                                       4));
}

void
__glXDispSwap_VertexAttrib4svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4SVNVPROC VertexAttrib4svNV =
        __glGetProcAddress("glVertexAttrib4svNV");
    VertexAttrib4svNV((GLuint) bswap_CARD32(pc + 0),
                      (const GLshort *) bswap_16_array((uint16_t *) (pc + 4),
                                                       4));
}

void
__glXDispSwap_VertexAttrib4ubvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4UBVNVPROC VertexAttrib4ubvNV =
        __glGetProcAddress("glVertexAttrib4ubvNV");
    VertexAttrib4ubvNV((GLuint) bswap_CARD32(pc + 0),
                       (const GLubyte *) (pc + 4));
}

void
__glXDispSwap_VertexAttribs1dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS1DVNVPROC VertexAttribs1dvNV =
        __glGetProcAddress("glVertexAttribs1dvNV");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 4);

#ifdef __GLX_ALIGN64
    const GLuint cmdlen = 12 + __GLX_PAD((n * 8)) - 4;

    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, cmdlen);
        pc -= 4;
    }
#endif

    VertexAttribs1dvNV((GLuint) bswap_CARD32(pc + 0),
                       n,
                       (const GLdouble *) bswap_64_array((uint64_t *) (pc + 8),
                                                         0));
}

void
__glXDispSwap_VertexAttribs1fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS1FVNVPROC VertexAttribs1fvNV =
        __glGetProcAddress("glVertexAttribs1fvNV");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 4);

    VertexAttribs1fvNV((GLuint) bswap_CARD32(pc + 0),
                       n,
                       (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
                                                        0));
}

void
__glXDispSwap_VertexAttribs1svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS1SVNVPROC VertexAttribs1svNV =
        __glGetProcAddress("glVertexAttribs1svNV");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 4);

    VertexAttribs1svNV((GLuint) bswap_CARD32(pc + 0),
                       n,
                       (const GLshort *) bswap_16_array((uint16_t *) (pc + 8),
                                                        0));
}

void
__glXDispSwap_VertexAttribs2dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS2DVNVPROC VertexAttribs2dvNV =
        __glGetProcAddress("glVertexAttribs2dvNV");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 4);

#ifdef __GLX_ALIGN64
    const GLuint cmdlen = 12 + __GLX_PAD((n * 16)) - 4;

    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, cmdlen);
        pc -= 4;
    }
#endif

    VertexAttribs2dvNV((GLuint) bswap_CARD32(pc + 0),
                       n,
                       (const GLdouble *) bswap_64_array((uint64_t *) (pc + 8),
                                                         0));
}

void
__glXDispSwap_VertexAttribs2fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS2FVNVPROC VertexAttribs2fvNV =
        __glGetProcAddress("glVertexAttribs2fvNV");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 4);

    VertexAttribs2fvNV((GLuint) bswap_CARD32(pc + 0),
                       n,
                       (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
                                                        0));
}

void
__glXDispSwap_VertexAttribs2svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS2SVNVPROC VertexAttribs2svNV =
        __glGetProcAddress("glVertexAttribs2svNV");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 4);

    VertexAttribs2svNV((GLuint) bswap_CARD32(pc + 0),
                       n,
                       (const GLshort *) bswap_16_array((uint16_t *) (pc + 8),
                                                        0));
}

void
__glXDispSwap_VertexAttribs3dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS3DVNVPROC VertexAttribs3dvNV =
        __glGetProcAddress("glVertexAttribs3dvNV");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 4);

#ifdef __GLX_ALIGN64
    const GLuint cmdlen = 12 + __GLX_PAD((n * 24)) - 4;

    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, cmdlen);
        pc -= 4;
    }
#endif

    VertexAttribs3dvNV((GLuint) bswap_CARD32(pc + 0),
                       n,
                       (const GLdouble *) bswap_64_array((uint64_t *) (pc + 8),
                                                         0));
}

void
__glXDispSwap_VertexAttribs3fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS3FVNVPROC VertexAttribs3fvNV =
        __glGetProcAddress("glVertexAttribs3fvNV");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 4);

    VertexAttribs3fvNV((GLuint) bswap_CARD32(pc + 0),
                       n,
                       (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
                                                        0));
}

void
__glXDispSwap_VertexAttribs3svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS3SVNVPROC VertexAttribs3svNV =
        __glGetProcAddress("glVertexAttribs3svNV");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 4);

    VertexAttribs3svNV((GLuint) bswap_CARD32(pc + 0),
                       n,
                       (const GLshort *) bswap_16_array((uint16_t *) (pc + 8),
                                                        0));
}

void
__glXDispSwap_VertexAttribs4dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS4DVNVPROC VertexAttribs4dvNV =
        __glGetProcAddress("glVertexAttribs4dvNV");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 4);

#ifdef __GLX_ALIGN64
    const GLuint cmdlen = 12 + __GLX_PAD((n * 32)) - 4;

    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, cmdlen);
        pc -= 4;
    }
#endif

    VertexAttribs4dvNV((GLuint) bswap_CARD32(pc + 0),
                       n,
                       (const GLdouble *) bswap_64_array((uint64_t *) (pc + 8),
                                                         0));
}

void
__glXDispSwap_VertexAttribs4fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS4FVNVPROC VertexAttribs4fvNV =
        __glGetProcAddress("glVertexAttribs4fvNV");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 4);

    VertexAttribs4fvNV((GLuint) bswap_CARD32(pc + 0),
                       n,
                       (const GLfloat *) bswap_32_array((uint32_t *) (pc + 8),
                                                        0));
}

void
__glXDispSwap_VertexAttribs4svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS4SVNVPROC VertexAttribs4svNV =
        __glGetProcAddress("glVertexAttribs4svNV");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 4);

    VertexAttribs4svNV((GLuint) bswap_CARD32(pc + 0),
                       n,
                       (const GLshort *) bswap_16_array((uint16_t *) (pc + 8),
                                                        0));
}

void
__glXDispSwap_VertexAttribs4ubvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS4UBVNVPROC VertexAttribs4ubvNV =
        __glGetProcAddress("glVertexAttribs4ubvNV");
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 4);

    VertexAttribs4ubvNV((GLuint) bswap_CARD32(pc + 0),
                        n, (const GLubyte *) (pc + 8));
}

void
__glXDispSwap_ActiveStencilFaceEXT(GLbyte * pc)
{
    PFNGLACTIVESTENCILFACEEXTPROC ActiveStencilFaceEXT =
        __glGetProcAddress("glActiveStencilFaceEXT");
    ActiveStencilFaceEXT((GLenum) bswap_ENUM(pc + 0));
}
@


1.6
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d6 1
a6 1
 * 
d13 1
a13 1
 * 
d17 1
a17 1
 * 
@


1.5
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d2734 3
d2765 3
d2887 3
d2915 3
d4305 3
d4715 3
d5143 4
d5174 4
@


1.5.2.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a2733 3

        if (residences == NULL)
            return BadAlloc;
a2761 3

        if (residences == NULL)
            return BadAlloc;
a2880 3

        if (textures == NULL)
            return BadAlloc;
a2905 3

        if (textures == NULL)
            return BadAlloc;
a4292 3
        if (ids == NULL)
            return BadAlloc;

a4699 3
        if (programs == NULL)
            return BadAlloc;

a5124 4

        if (framebuffers == NULL)
            return BadAlloc;

a5151 4

        if (renderbuffers == NULL)
            return BadAlloc;

@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a27 3
#include <X11/Xmd.h>
#include <GL/gl.h>
#include <GL/glxproto.h>
d29 1
a32 1
#include "glxserver.h"
a35 4
#include "glapi.h"
#include "glapitable.h"
#include "glthread.h"
#include "dispatch.h"
d172 1
a172 3
        CALL_NewList(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                      (GLenum) bswap_ENUM(pc + 4)
                     ));
d189 1
a189 1
        CALL_EndList(GET_DISPATCH(), ());
d199 1
a199 2
    CALL_CallList(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
                  ));
d230 1
a230 1
    CALL_CallLists(GET_DISPATCH(), (n, type, lists));
d243 2
a244 3
        CALL_DeleteLists(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                          (GLsizei) bswap_CARD32(pc + 4)
                         ));
d263 1
a263 2
        retval = CALL_GenLists(GET_DISPATCH(), ((GLsizei) bswap_CARD32(pc + 0)
                               ));
d274 1
a274 2
    CALL_ListBase(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
                  ));
d280 1
a280 2
    CALL_Begin(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
               ));
d289 13
a301 20
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH,
                      (GLint) bswap_CARD32(&hdr->rowLength)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS,
                      (GLint) bswap_CARD32(&hdr->skipRows)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS,
                      (GLint) bswap_CARD32(&hdr->skipPixels)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT,
                      (GLint) bswap_CARD32(&hdr->alignment)));

    CALL_Bitmap(GET_DISPATCH(), ((GLsizei) bswap_CARD32(pc + 20),
                                 (GLsizei) bswap_CARD32(pc + 24),
                                 (GLfloat) bswap_FLOAT32(pc + 28),
                                 (GLfloat) bswap_FLOAT32(pc + 32),
                                 (GLfloat) bswap_FLOAT32(pc + 36),
                                 (GLfloat) bswap_FLOAT32(pc + 40), bitmap));
d307 1
a307 2
    CALL_Color3bv(GET_DISPATCH(), ((const GLbyte *) (pc + 0)
                  ));
d320 1
a320 3
    CALL_Color3dv(GET_DISPATCH(), ((const GLdouble *)
                                   bswap_64_array((uint64_t *) (pc + 0), 3)
                  ));
d326 1
a326 3
    CALL_Color3fv(GET_DISPATCH(), ((const GLfloat *)
                                   bswap_32_array((uint32_t *) (pc + 0), 3)
                  ));
d332 1
a332 3
    CALL_Color3iv(GET_DISPATCH(), ((const GLint *)
                                   bswap_32_array((uint32_t *) (pc + 0), 3)
                  ));
d338 1
a338 3
    CALL_Color3sv(GET_DISPATCH(), ((const GLshort *)
                                   bswap_16_array((uint16_t *) (pc + 0), 3)
                  ));
d344 1
a344 2
    CALL_Color3ubv(GET_DISPATCH(), ((const GLubyte *) (pc + 0)
                   ));
d350 1
a350 3
    CALL_Color3uiv(GET_DISPATCH(), ((const GLuint *)
                                    bswap_32_array((uint32_t *) (pc + 0), 3)
                   ));
d356 1
a356 3
    CALL_Color3usv(GET_DISPATCH(), ((const GLushort *)
                                    bswap_16_array((uint16_t *) (pc + 0), 3)
                   ));
d362 1
a362 2
    CALL_Color4bv(GET_DISPATCH(), ((const GLbyte *) (pc + 0)
                  ));
d375 1
a375 3
    CALL_Color4dv(GET_DISPATCH(), ((const GLdouble *)
                                   bswap_64_array((uint64_t *) (pc + 0), 4)
                  ));
d381 1
a381 3
    CALL_Color4fv(GET_DISPATCH(), ((const GLfloat *)
                                   bswap_32_array((uint32_t *) (pc + 0), 4)
                  ));
d387 1
a387 3
    CALL_Color4iv(GET_DISPATCH(), ((const GLint *)
                                   bswap_32_array((uint32_t *) (pc + 0), 4)
                  ));
d393 1
a393 3
    CALL_Color4sv(GET_DISPATCH(), ((const GLshort *)
                                   bswap_16_array((uint16_t *) (pc + 0), 4)
                  ));
d399 1
a399 2
    CALL_Color4ubv(GET_DISPATCH(), ((const GLubyte *) (pc + 0)
                   ));
d405 1
a405 3
    CALL_Color4uiv(GET_DISPATCH(), ((const GLuint *)
                                    bswap_32_array((uint32_t *) (pc + 0), 4)
                   ));
d411 1
a411 3
    CALL_Color4usv(GET_DISPATCH(), ((const GLushort *)
                                    bswap_16_array((uint16_t *) (pc + 0), 4)
                   ));
d417 1
a417 2
    CALL_EdgeFlagv(GET_DISPATCH(), ((const GLboolean *) (pc + 0)
                   ));
d423 1
a423 1
    CALL_End(GET_DISPATCH(), ());
d436 1
a436 3
    CALL_Indexdv(GET_DISPATCH(), ((const GLdouble *)
                                  bswap_64_array((uint64_t *) (pc + 0), 1)
                 ));
d442 1
a442 3
    CALL_Indexfv(GET_DISPATCH(), ((const GLfloat *)
                                  bswap_32_array((uint32_t *) (pc + 0), 1)
                 ));
d448 1
a448 3
    CALL_Indexiv(GET_DISPATCH(), ((const GLint *)
                                  bswap_32_array((uint32_t *) (pc + 0), 1)
                 ));
d454 1
a454 3
    CALL_Indexsv(GET_DISPATCH(), ((const GLshort *)
                                  bswap_16_array((uint16_t *) (pc + 0), 1)
                 ));
d460 1
a460 2
    CALL_Normal3bv(GET_DISPATCH(), ((const GLbyte *) (pc + 0)
                   ));
d473 1
a473 3
    CALL_Normal3dv(GET_DISPATCH(), ((const GLdouble *)
                                    bswap_64_array((uint64_t *) (pc + 0), 3)
                   ));
d479 1
a479 3
    CALL_Normal3fv(GET_DISPATCH(), ((const GLfloat *)
                                    bswap_32_array((uint32_t *) (pc + 0), 3)
                   ));
d485 1
a485 3
    CALL_Normal3iv(GET_DISPATCH(), ((const GLint *)
                                    bswap_32_array((uint32_t *) (pc + 0), 3)
                   ));
d491 1
a491 3
    CALL_Normal3sv(GET_DISPATCH(), ((const GLshort *)
                                    bswap_16_array((uint16_t *) (pc + 0), 3)
                   ));
d504 1
a504 3
    CALL_RasterPos2dv(GET_DISPATCH(), ((const GLdouble *)
                                       bswap_64_array((uint64_t *) (pc + 0), 2)
                      ));
d510 1
a510 3
    CALL_RasterPos2fv(GET_DISPATCH(), ((const GLfloat *)
                                       bswap_32_array((uint32_t *) (pc + 0), 2)
                      ));
d516 1
a516 3
    CALL_RasterPos2iv(GET_DISPATCH(), ((const GLint *)
                                       bswap_32_array((uint32_t *) (pc + 0), 2)
                      ));
d522 1
a522 3
    CALL_RasterPos2sv(GET_DISPATCH(), ((const GLshort *)
                                       bswap_16_array((uint16_t *) (pc + 0), 2)
                      ));
d535 1
a535 3
    CALL_RasterPos3dv(GET_DISPATCH(), ((const GLdouble *)
                                       bswap_64_array((uint64_t *) (pc + 0), 3)
                      ));
d541 1
a541 3
    CALL_RasterPos3fv(GET_DISPATCH(), ((const GLfloat *)
                                       bswap_32_array((uint32_t *) (pc + 0), 3)
                      ));
d547 1
a547 3
    CALL_RasterPos3iv(GET_DISPATCH(), ((const GLint *)
                                       bswap_32_array((uint32_t *) (pc + 0), 3)
                      ));
d553 1
a553 3
    CALL_RasterPos3sv(GET_DISPATCH(), ((const GLshort *)
                                       bswap_16_array((uint16_t *) (pc + 0), 3)
                      ));
d566 1
a566 3
    CALL_RasterPos4dv(GET_DISPATCH(), ((const GLdouble *)
                                       bswap_64_array((uint64_t *) (pc + 0), 4)
                      ));
d572 1
a572 3
    CALL_RasterPos4fv(GET_DISPATCH(), ((const GLfloat *)
                                       bswap_32_array((uint32_t *) (pc + 0), 4)
                      ));
d578 1
a578 3
    CALL_RasterPos4iv(GET_DISPATCH(), ((const GLint *)
                                       bswap_32_array((uint32_t *) (pc + 0), 4)
                      ));
d584 1
a584 3
    CALL_RasterPos4sv(GET_DISPATCH(), ((const GLshort *)
                                       bswap_16_array((uint16_t *) (pc + 0), 4)
                      ));
d597 2
a598 5
    CALL_Rectdv(GET_DISPATCH(), ((const GLdouble *)
                                 bswap_64_array((uint64_t *) (pc + 0), 2),
                                 (const GLdouble *)
                                 bswap_64_array((uint64_t *) (pc + 16), 2)
                ));
d604 2
a605 5
    CALL_Rectfv(GET_DISPATCH(), ((const GLfloat *)
                                 bswap_32_array((uint32_t *) (pc + 0), 2),
                                 (const GLfloat *)
                                 bswap_32_array((uint32_t *) (pc + 8), 2)
                ));
d611 2
a612 5
    CALL_Rectiv(GET_DISPATCH(), ((const GLint *)
                                 bswap_32_array((uint32_t *) (pc + 0), 2),
                                 (const GLint *)
                                 bswap_32_array((uint32_t *) (pc + 8), 2)
                ));
d618 2
a619 5
    CALL_Rectsv(GET_DISPATCH(), ((const GLshort *)
                                 bswap_16_array((uint16_t *) (pc + 0), 2),
                                 (const GLshort *)
                                 bswap_16_array((uint16_t *) (pc + 4), 2)
                ));
d632 1
a632 3
    CALL_TexCoord1dv(GET_DISPATCH(), ((const GLdouble *)
                                      bswap_64_array((uint64_t *) (pc + 0), 1)
                     ));
d638 1
a638 3
    CALL_TexCoord1fv(GET_DISPATCH(), ((const GLfloat *)
                                      bswap_32_array((uint32_t *) (pc + 0), 1)
                     ));
d644 1
a644 3
    CALL_TexCoord1iv(GET_DISPATCH(), ((const GLint *)
                                      bswap_32_array((uint32_t *) (pc + 0), 1)
                     ));
d650 1
a650 3
    CALL_TexCoord1sv(GET_DISPATCH(), ((const GLshort *)
                                      bswap_16_array((uint16_t *) (pc + 0), 1)
                     ));
d663 1
a663 3
    CALL_TexCoord2dv(GET_DISPATCH(), ((const GLdouble *)
                                      bswap_64_array((uint64_t *) (pc + 0), 2)
                     ));
d669 1
a669 3
    CALL_TexCoord2fv(GET_DISPATCH(), ((const GLfloat *)
                                      bswap_32_array((uint32_t *) (pc + 0), 2)
                     ));
d675 1
a675 3
    CALL_TexCoord2iv(GET_DISPATCH(), ((const GLint *)
                                      bswap_32_array((uint32_t *) (pc + 0), 2)
                     ));
d681 1
a681 3
    CALL_TexCoord2sv(GET_DISPATCH(), ((const GLshort *)
                                      bswap_16_array((uint16_t *) (pc + 0), 2)
                     ));
d694 1
a694 3
    CALL_TexCoord3dv(GET_DISPATCH(), ((const GLdouble *)
                                      bswap_64_array((uint64_t *) (pc + 0), 3)
                     ));
d700 1
a700 3
    CALL_TexCoord3fv(GET_DISPATCH(), ((const GLfloat *)
                                      bswap_32_array((uint32_t *) (pc + 0), 3)
                     ));
d706 1
a706 3
    CALL_TexCoord3iv(GET_DISPATCH(), ((const GLint *)
                                      bswap_32_array((uint32_t *) (pc + 0), 3)
                     ));
d712 1
a712 3
    CALL_TexCoord3sv(GET_DISPATCH(), ((const GLshort *)
                                      bswap_16_array((uint16_t *) (pc + 0), 3)
                     ));
d725 1
a725 3
    CALL_TexCoord4dv(GET_DISPATCH(), ((const GLdouble *)
                                      bswap_64_array((uint64_t *) (pc + 0), 4)
                     ));
d731 1
a731 3
    CALL_TexCoord4fv(GET_DISPATCH(), ((const GLfloat *)
                                      bswap_32_array((uint32_t *) (pc + 0), 4)
                     ));
d737 1
a737 3
    CALL_TexCoord4iv(GET_DISPATCH(), ((const GLint *)
                                      bswap_32_array((uint32_t *) (pc + 0), 4)
                     ));
d743 1
a743 3
    CALL_TexCoord4sv(GET_DISPATCH(), ((const GLshort *)
                                      bswap_16_array((uint16_t *) (pc + 0), 4)
                     ));
d756 1
a756 3
    CALL_Vertex2dv(GET_DISPATCH(), ((const GLdouble *)
                                    bswap_64_array((uint64_t *) (pc + 0), 2)
                   ));
d762 1
a762 3
    CALL_Vertex2fv(GET_DISPATCH(), ((const GLfloat *)
                                    bswap_32_array((uint32_t *) (pc + 0), 2)
                   ));
d768 1
a768 3
    CALL_Vertex2iv(GET_DISPATCH(), ((const GLint *)
                                    bswap_32_array((uint32_t *) (pc + 0), 2)
                   ));
d774 1
a774 3
    CALL_Vertex2sv(GET_DISPATCH(), ((const GLshort *)
                                    bswap_16_array((uint16_t *) (pc + 0), 2)
                   ));
d787 1
a787 3
    CALL_Vertex3dv(GET_DISPATCH(), ((const GLdouble *)
                                    bswap_64_array((uint64_t *) (pc + 0), 3)
                   ));
d793 1
a793 3
    CALL_Vertex3fv(GET_DISPATCH(), ((const GLfloat *)
                                    bswap_32_array((uint32_t *) (pc + 0), 3)
                   ));
d799 1
a799 3
    CALL_Vertex3iv(GET_DISPATCH(), ((const GLint *)
                                    bswap_32_array((uint32_t *) (pc + 0), 3)
                   ));
d805 1
a805 3
    CALL_Vertex3sv(GET_DISPATCH(), ((const GLshort *)
                                    bswap_16_array((uint16_t *) (pc + 0), 3)
                   ));
d818 1
a818 3
    CALL_Vertex4dv(GET_DISPATCH(), ((const GLdouble *)
                                    bswap_64_array((uint64_t *) (pc + 0), 4)
                   ));
d824 1
a824 3
    CALL_Vertex4fv(GET_DISPATCH(), ((const GLfloat *)
                                    bswap_32_array((uint32_t *) (pc + 0), 4)
                   ));
d830 1
a830 3
    CALL_Vertex4iv(GET_DISPATCH(), ((const GLint *)
                                    bswap_32_array((uint32_t *) (pc + 0), 4)
                   ));
d836 1
a836 3
    CALL_Vertex4sv(GET_DISPATCH(), ((const GLshort *)
                                    bswap_16_array((uint16_t *) (pc + 0), 4)
                   ));
d849 2
a850 4
    CALL_ClipPlane(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 32),
                                    (const GLdouble *)
                                    bswap_64_array((uint64_t *) (pc + 0), 4)
                   ));
d856 1
a856 3
    CALL_ColorMaterial(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                        (GLenum) bswap_ENUM(pc + 4)
                       ));
d862 1
a862 2
    CALL_CullFace(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                  ));
d868 1
a868 3
    CALL_Fogf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                               (GLfloat) bswap_FLOAT32(pc + 4)
              ));
d881 1
a881 1
    CALL_Fogfv(GET_DISPATCH(), (pname, params));
d887 1
a887 3
    CALL_Fogi(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                               (GLint) bswap_CARD32(pc + 4)
              ));
d900 1
a900 1
    CALL_Fogiv(GET_DISPATCH(), (pname, params));
d906 1
a906 2
    CALL_FrontFace(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                   ));
d912 1
a912 3
    CALL_Hint(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                               (GLenum) bswap_ENUM(pc + 4)
              ));
d918 2
a919 4
    CALL_Lightf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                 (GLenum) bswap_ENUM(pc + 4),
                                 (GLfloat) bswap_FLOAT32(pc + 8)
                ));
d932 1
a932 1
    CALL_Lightfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0), pname, params));
d938 2
a939 4
    CALL_Lighti(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                 (GLenum) bswap_ENUM(pc + 4),
                                 (GLint) bswap_CARD32(pc + 8)
                ));
d952 1
a952 1
    CALL_Lightiv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0), pname, params));
d958 1
a958 3
    CALL_LightModelf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                      (GLfloat) bswap_FLOAT32(pc + 4)
                     ));
d971 1
a971 1
    CALL_LightModelfv(GET_DISPATCH(), (pname, params));
d977 1
a977 3
    CALL_LightModeli(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                      (GLint) bswap_CARD32(pc + 4)
                     ));
d990 1
a990 1
    CALL_LightModeliv(GET_DISPATCH(), (pname, params));
d996 2
a997 3
    CALL_LineStipple(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
                                      (GLushort) bswap_CARD16(pc + 4)
                     ));
d1003 1
a1003 2
    CALL_LineWidth(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0)
                   ));
d1009 2
a1010 4
    CALL_Materialf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                    (GLenum) bswap_ENUM(pc + 4),
                                    (GLfloat) bswap_FLOAT32(pc + 8)
                   ));
d1023 1
a1023 2
    CALL_Materialfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                     pname, params));
d1029 2
a1030 4
    CALL_Materiali(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                    (GLenum) bswap_ENUM(pc + 4),
                                    (GLint) bswap_CARD32(pc + 8)
                   ));
d1043 1
a1043 2
    CALL_Materialiv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                     pname, params));
d1049 1
a1049 2
    CALL_PointSize(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0)
                   ));
d1055 1
a1055 3
    CALL_PolygonMode(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                      (GLenum) bswap_ENUM(pc + 4)
                     ));
d1064 6
a1069 13
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH,
                      (GLint) bswap_CARD32(&hdr->rowLength)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS,
                      (GLint) bswap_CARD32(&hdr->skipRows)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS,
                      (GLint) bswap_CARD32(&hdr->skipPixels)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT,
                      (GLint) bswap_CARD32(&hdr->alignment)));
d1071 1
a1071 1
    CALL_PolygonStipple(GET_DISPATCH(), (mask));
d1077 3
a1079 5
    CALL_Scissor(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
                                  (GLint) bswap_CARD32(pc + 4),
                                  (GLsizei) bswap_CARD32(pc + 8),
                                  (GLsizei) bswap_CARD32(pc + 12)
                 ));
d1085 1
a1085 2
    CALL_ShadeModel(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                    ));
d1091 3
a1093 4
    CALL_TexParameterf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                        (GLenum) bswap_ENUM(pc + 4),
                                        (GLfloat) bswap_FLOAT32(pc + 8)
                       ));
d1106 1
a1106 2
    CALL_TexParameterfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                         pname, params));
d1112 2
a1113 4
    CALL_TexParameteri(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                        (GLenum) bswap_ENUM(pc + 4),
                                        (GLint) bswap_CARD32(pc + 8)
                       ));
d1126 1
a1126 2
    CALL_TexParameteriv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                         pname, params));
d1135 15
a1149 22
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH,
                      (GLint) bswap_CARD32(&hdr->rowLength)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS,
                      (GLint) bswap_CARD32(&hdr->skipRows)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS,
                      (GLint) bswap_CARD32(&hdr->skipPixels)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT,
                      (GLint) bswap_CARD32(&hdr->alignment)));

    CALL_TexImage1D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
                                     (GLint) bswap_CARD32(pc + 24),
                                     (GLint) bswap_CARD32(pc + 28),
                                     (GLsizei) bswap_CARD32(pc + 32),
                                     (GLint) bswap_CARD32(pc + 40),
                                     (GLenum) bswap_ENUM(pc + 44),
                                     (GLenum) bswap_ENUM(pc + 48), pixels));
d1158 16
a1173 23
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH,
                      (GLint) bswap_CARD32(&hdr->rowLength)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS,
                      (GLint) bswap_CARD32(&hdr->skipRows)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS,
                      (GLint) bswap_CARD32(&hdr->skipPixels)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT,
                      (GLint) bswap_CARD32(&hdr->alignment)));

    CALL_TexImage2D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
                                     (GLint) bswap_CARD32(pc + 24),
                                     (GLint) bswap_CARD32(pc + 28),
                                     (GLsizei) bswap_CARD32(pc + 32),
                                     (GLsizei) bswap_CARD32(pc + 36),
                                     (GLint) bswap_CARD32(pc + 40),
                                     (GLenum) bswap_ENUM(pc + 44),
                                     (GLenum) bswap_ENUM(pc + 48), pixels));
d1179 2
a1180 4
    CALL_TexEnvf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                  (GLenum) bswap_ENUM(pc + 4),
                                  (GLfloat) bswap_FLOAT32(pc + 8)
                 ));
d1193 1
a1193 1
    CALL_TexEnvfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0), pname, params));
d1199 2
a1200 4
    CALL_TexEnvi(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                  (GLenum) bswap_ENUM(pc + 4),
                                  (GLint) bswap_CARD32(pc + 8)
                 ));
d1213 1
a1213 1
    CALL_TexEnviv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0), pname, params));
d1226 2
a1227 4
    CALL_TexGend(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 8),
                                  (GLenum) bswap_ENUM(pc + 12),
                                  (GLdouble) bswap_FLOAT64(pc + 0)
                 ));
d1250 1
a1250 1
    CALL_TexGendv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0), pname, params));
d1256 2
a1257 4
    CALL_TexGenf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                  (GLenum) bswap_ENUM(pc + 4),
                                  (GLfloat) bswap_FLOAT32(pc + 8)
                 ));
d1270 1
a1270 1
    CALL_TexGenfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0), pname, params));
d1276 2
a1277 4
    CALL_TexGeni(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                  (GLenum) bswap_ENUM(pc + 4),
                                  (GLint) bswap_CARD32(pc + 8)
                 ));
d1290 1
a1290 1
    CALL_TexGeniv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0), pname, params));
d1296 1
a1296 1
    CALL_InitNames(GET_DISPATCH(), ());
d1302 1
a1302 2
    CALL_LoadName(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
                  ));
d1308 1
a1308 2
    CALL_PassThrough(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0)
                     ));
d1314 1
a1314 1
    CALL_PopName(GET_DISPATCH(), ());
d1320 1
a1320 2
    CALL_PushName(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
                  ));
d1326 1
a1326 2
    CALL_DrawBuffer(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                    ));
d1332 1
a1332 2
    CALL_Clear(GET_DISPATCH(), ((GLbitfield) bswap_CARD32(pc + 0)
               ));
d1338 4
a1341 5
    CALL_ClearAccum(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0),
                                     (GLfloat) bswap_FLOAT32(pc + 4),
                                     (GLfloat) bswap_FLOAT32(pc + 8),
                                     (GLfloat) bswap_FLOAT32(pc + 12)
                    ));
d1347 1
a1347 2
    CALL_ClearIndex(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0)
                    ));
d1353 4
a1356 5
    CALL_ClearColor(GET_DISPATCH(), ((GLclampf) bswap_FLOAT32(pc + 0),
                                     (GLclampf) bswap_FLOAT32(pc + 4),
                                     (GLclampf) bswap_FLOAT32(pc + 8),
                                     (GLclampf) bswap_FLOAT32(pc + 12)
                    ));
d1362 1
a1362 2
    CALL_ClearStencil(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0)
                      ));
d1375 1
a1375 2
    CALL_ClearDepth(GET_DISPATCH(), ((GLclampd) bswap_FLOAT64(pc + 0)
                    ));
d1381 1
a1381 2
    CALL_StencilMask(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
                     ));
d1387 3
a1389 5
    CALL_ColorMask(GET_DISPATCH(), (*(GLboolean *) (pc + 0),
                                    *(GLboolean *) (pc + 1),
                                    *(GLboolean *) (pc + 2),
                                    *(GLboolean *) (pc + 3)
                   ));
d1395 1
a1395 2
    CALL_DepthMask(GET_DISPATCH(), (*(GLboolean *) (pc + 0)
                   ));
d1401 1
a1401 2
    CALL_IndexMask(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
                   ));
d1407 1
a1407 3
    CALL_Accum(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                (GLfloat) bswap_FLOAT32(pc + 4)
               ));
d1413 1
a1413 2
    CALL_Disable(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                 ));
d1419 1
a1419 2
    CALL_Enable(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                ));
d1425 1
a1425 1
    CALL_PopAttrib(GET_DISPATCH(), ());
d1431 1
a1431 2
    CALL_PushAttrib(GET_DISPATCH(), ((GLbitfield) bswap_CARD32(pc + 0)
                    ));
d1444 3
a1446 4
    CALL_MapGrid1d(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 16),
                                    (GLdouble) bswap_FLOAT64(pc + 0),
                                    (GLdouble) bswap_FLOAT64(pc + 8)
                   ));
d1452 3
a1454 4
    CALL_MapGrid1f(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
                                    (GLfloat) bswap_FLOAT32(pc + 4),
                                    (GLfloat) bswap_FLOAT32(pc + 8)
                   ));
d1467 6
a1472 7
    CALL_MapGrid2d(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 32),
                                    (GLdouble) bswap_FLOAT64(pc + 0),
                                    (GLdouble) bswap_FLOAT64(pc + 8),
                                    (GLint) bswap_CARD32(pc + 36),
                                    (GLdouble) bswap_FLOAT64(pc + 16),
                                    (GLdouble) bswap_FLOAT64(pc + 24)
                   ));
d1478 6
a1483 7
    CALL_MapGrid2f(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
                                    (GLfloat) bswap_FLOAT32(pc + 4),
                                    (GLfloat) bswap_FLOAT32(pc + 8),
                                    (GLint) bswap_CARD32(pc + 12),
                                    (GLfloat) bswap_FLOAT32(pc + 16),
                                    (GLfloat) bswap_FLOAT32(pc + 20)
                   ));
d1496 1
a1496 3
    CALL_EvalCoord1dv(GET_DISPATCH(), ((const GLdouble *)
                                       bswap_64_array((uint64_t *) (pc + 0), 1)
                      ));
d1502 1
a1502 3
    CALL_EvalCoord1fv(GET_DISPATCH(), ((const GLfloat *)
                                       bswap_32_array((uint32_t *) (pc + 0), 1)
                      ));
d1515 1
a1515 3
    CALL_EvalCoord2dv(GET_DISPATCH(), ((const GLdouble *)
                                       bswap_64_array((uint64_t *) (pc + 0), 2)
                      ));
d1521 1
a1521 3
    CALL_EvalCoord2fv(GET_DISPATCH(), ((const GLfloat *)
                                       bswap_32_array((uint32_t *) (pc + 0), 2)
                      ));
d1527 2
a1528 4
    CALL_EvalMesh1(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                    (GLint) bswap_CARD32(pc + 4),
                                    (GLint) bswap_CARD32(pc + 8)
                   ));
d1534 1
a1534 2
    CALL_EvalPoint1(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0)
                    ));
d1540 4
a1543 6
    CALL_EvalMesh2(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                    (GLint) bswap_CARD32(pc + 4),
                                    (GLint) bswap_CARD32(pc + 8),
                                    (GLint) bswap_CARD32(pc + 12),
                                    (GLint) bswap_CARD32(pc + 16)
                   ));
d1549 1
a1549 3
    CALL_EvalPoint2(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
                                     (GLint) bswap_CARD32(pc + 4)
                    ));
d1555 1
a1555 3
    CALL_AlphaFunc(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                    (GLclampf) bswap_FLOAT32(pc + 4)
                   ));
d1561 1
a1561 3
    CALL_BlendFunc(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                    (GLenum) bswap_ENUM(pc + 4)
                   ));
d1567 1
a1567 2
    CALL_LogicOp(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                 ));
d1573 2
a1574 4
    CALL_StencilFunc(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                      (GLint) bswap_CARD32(pc + 4),
                                      (GLuint) bswap_CARD32(pc + 8)
                     ));
d1580 2
a1581 4
    CALL_StencilOp(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                    (GLenum) bswap_ENUM(pc + 4),
                                    (GLenum) bswap_ENUM(pc + 8)
                   ));
d1587 1
a1587 2
    CALL_DepthFunc(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                   ));
d1593 2
a1594 3
    CALL_PixelZoom(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0),
                                    (GLfloat) bswap_FLOAT32(pc + 4)
                   ));
d1600 2
a1601 3
    CALL_PixelTransferf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                         (GLfloat) bswap_FLOAT32(pc + 4)
                        ));
d1607 1
a1607 3
    CALL_PixelTransferi(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                         (GLint) bswap_CARD32(pc + 4)
                        ));
d1620 2
a1621 3
        CALL_PixelStoref(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                          (GLfloat) bswap_FLOAT32(pc + 4)
                         ));
d1638 2
a1639 3
        CALL_PixelStorei(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                          (GLint) bswap_CARD32(pc + 4)
                         ));
d1651 3
a1653 5
    CALL_PixelMapfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                     mapsize,
                                     (const GLfloat *)
                                     bswap_32_array((uint32_t *) (pc + 8), 0)
                    ));
d1661 3
a1663 5
    CALL_PixelMapuiv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                      mapsize,
                                      (const GLuint *)
                                      bswap_32_array((uint32_t *) (pc + 8), 0)
                     ));
d1671 3
a1673 5
    CALL_PixelMapusv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                      mapsize,
                                      (const GLushort *)
                                      bswap_16_array((uint16_t *) (pc + 8), 0)
                     ));
d1679 1
a1679 2
    CALL_ReadBuffer(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                    ));
d1685 4
a1688 6
    CALL_CopyPixels(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
                                     (GLint) bswap_CARD32(pc + 4),
                                     (GLsizei) bswap_CARD32(pc + 8),
                                     (GLsizei) bswap_CARD32(pc + 12),
                                     (GLenum) bswap_ENUM(pc + 16)
                    ));
d1697 12
a1708 19
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH,
                      (GLint) bswap_CARD32(&hdr->rowLength)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS,
                      (GLint) bswap_CARD32(&hdr->skipRows)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS,
                      (GLint) bswap_CARD32(&hdr->skipPixels)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT,
                      (GLint) bswap_CARD32(&hdr->alignment)));

    CALL_DrawPixels(GET_DISPATCH(), ((GLsizei) bswap_CARD32(pc + 20),
                                     (GLsizei) bswap_CARD32(pc + 24),
                                     (GLenum) bswap_ENUM(pc + 28),
                                     (GLenum) bswap_ENUM(pc + 32), pixels));
d1733 1
a1733 1
        CALL_GetBooleanv(GET_DISPATCH(), (pname, params));
d1753 1
a1753 2
        CALL_GetClipPlane(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                           equation));
d1784 1
a1784 1
        CALL_GetDoublev(GET_DISPATCH(), (pname, params));
d1805 1
a1805 1
        retval = CALL_GetError(GET_DISPATCH(), ());
d1835 1
a1835 1
        CALL_GetFloatv(GET_DISPATCH(), (pname, params));
d1866 1
a1866 1
        CALL_GetIntegerv(GET_DISPATCH(), (pname, params));
d1897 1
a1897 2
        CALL_GetLightfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                         pname, params));
d1928 1
a1928 2
        CALL_GetLightiv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                         pname, params));
d1960 1
a1960 1
        CALL_GetMapdv(GET_DISPATCH(), (target, query, v));
d1992 1
a1992 1
        CALL_GetMapfv(GET_DISPATCH(), (target, query, v));
d2024 1
a2024 1
        CALL_GetMapiv(GET_DISPATCH(), (target, query, v));
d2055 1
a2055 2
        CALL_GetMaterialfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                            pname, params));
d2086 1
a2086 2
        CALL_GetMaterialiv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                            pname, params));
d2117 1
a2117 1
        CALL_GetPixelMapfv(GET_DISPATCH(), (map, values));
d2148 1
a2148 1
        CALL_GetPixelMapuiv(GET_DISPATCH(), (map, values));
d2179 1
a2179 1
        CALL_GetPixelMapusv(GET_DISPATCH(), (map, values));
d2210 1
a2210 2
        CALL_GetTexEnvfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                          pname, params));
d2241 1
a2241 2
        CALL_GetTexEnviv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                          pname, params));
d2272 1
a2272 2
        CALL_GetTexGendv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                          pname, params));
d2303 1
a2303 2
        CALL_GetTexGenfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                          pname, params));
d2334 1
a2334 2
        CALL_GetTexGeniv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                          pname, params));
d2365 1
a2365 2
        CALL_GetTexParameterfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                pname, params));
d2396 1
a2396 2
        CALL_GetTexParameteriv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                pname, params));
d2427 2
a2428 5
        CALL_GetTexLevelParameterfv(GET_DISPATCH(), ((GLenum)
                                                     bswap_ENUM(pc + 0),
                                                     (GLint) bswap_CARD32(pc +
                                                                          4),
                                                     pname, params));
d2459 2
a2460 5
        CALL_GetTexLevelParameteriv(GET_DISPATCH(), ((GLenum)
                                                     bswap_ENUM(pc + 0),
                                                     (GLint) bswap_CARD32(pc +
                                                                          4),
                                                     pname, params));
d2481 1
a2481 2
        retval = CALL_IsEnabled(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                                ));
d2501 1
a2501 2
        retval = CALL_IsList(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
                             ));
d2519 2
a2520 3
    CALL_DepthRange(GET_DISPATCH(), ((GLclampd) bswap_FLOAT64(pc + 0),
                                     (GLclampd) bswap_FLOAT64(pc + 8)
                    ));
d2533 6
a2538 7
    CALL_Frustum(GET_DISPATCH(), ((GLdouble) bswap_FLOAT64(pc + 0),
                                  (GLdouble) bswap_FLOAT64(pc + 8),
                                  (GLdouble) bswap_FLOAT64(pc + 16),
                                  (GLdouble) bswap_FLOAT64(pc + 24),
                                  (GLdouble) bswap_FLOAT64(pc + 32),
                                  (GLdouble) bswap_FLOAT64(pc + 40)
                 ));
d2544 1
a2544 1
    CALL_LoadIdentity(GET_DISPATCH(), ());
d2550 1
a2550 3
    CALL_LoadMatrixf(GET_DISPATCH(), ((const GLfloat *)
                                      bswap_32_array((uint32_t *) (pc + 0), 16)
                     ));
d2563 1
a2563 3
    CALL_LoadMatrixd(GET_DISPATCH(), ((const GLdouble *)
                                      bswap_64_array((uint64_t *) (pc + 0), 16)
                     ));
d2569 1
a2569 2
    CALL_MatrixMode(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                    ));
d2575 1
a2575 3
    CALL_MultMatrixf(GET_DISPATCH(), ((const GLfloat *)
                                      bswap_32_array((uint32_t *) (pc + 0), 16)
                     ));
d2588 1
a2588 3
    CALL_MultMatrixd(GET_DISPATCH(), ((const GLdouble *)
                                      bswap_64_array((uint64_t *) (pc + 0), 16)
                     ));
d2601 6
a2606 7
    CALL_Ortho(GET_DISPATCH(), ((GLdouble) bswap_FLOAT64(pc + 0),
                                (GLdouble) bswap_FLOAT64(pc + 8),
                                (GLdouble) bswap_FLOAT64(pc + 16),
                                (GLdouble) bswap_FLOAT64(pc + 24),
                                (GLdouble) bswap_FLOAT64(pc + 32),
                                (GLdouble) bswap_FLOAT64(pc + 40)
               ));
d2612 1
a2612 1
    CALL_PopMatrix(GET_DISPATCH(), ());
d2618 1
a2618 1
    CALL_PushMatrix(GET_DISPATCH(), ());
d2631 4
a2634 5
    CALL_Rotated(GET_DISPATCH(), ((GLdouble) bswap_FLOAT64(pc + 0),
                                  (GLdouble) bswap_FLOAT64(pc + 8),
                                  (GLdouble) bswap_FLOAT64(pc + 16),
                                  (GLdouble) bswap_FLOAT64(pc + 24)
                 ));
d2640 4
a2643 5
    CALL_Rotatef(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0),
                                  (GLfloat) bswap_FLOAT32(pc + 4),
                                  (GLfloat) bswap_FLOAT32(pc + 8),
                                  (GLfloat) bswap_FLOAT32(pc + 12)
                 ));
d2656 3
a2658 4
    CALL_Scaled(GET_DISPATCH(), ((GLdouble) bswap_FLOAT64(pc + 0),
                                 (GLdouble) bswap_FLOAT64(pc + 8),
                                 (GLdouble) bswap_FLOAT64(pc + 16)
                ));
d2664 2
a2665 4
    CALL_Scalef(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0),
                                 (GLfloat) bswap_FLOAT32(pc + 4),
                                 (GLfloat) bswap_FLOAT32(pc + 8)
                ));
d2678 3
a2680 4
    CALL_Translated(GET_DISPATCH(), ((GLdouble) bswap_FLOAT64(pc + 0),
                                     (GLdouble) bswap_FLOAT64(pc + 8),
                                     (GLdouble) bswap_FLOAT64(pc + 16)
                    ));
d2686 3
a2688 4
    CALL_Translatef(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0),
                                     (GLfloat) bswap_FLOAT32(pc + 4),
                                     (GLfloat) bswap_FLOAT32(pc + 8)
                    ));
d2694 3
a2696 5
    CALL_Viewport(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
                                   (GLint) bswap_CARD32(pc + 4),
                                   (GLsizei) bswap_CARD32(pc + 8),
                                   (GLsizei) bswap_CARD32(pc + 12)
                  ));
d2702 1
a2702 3
    CALL_BindTexture(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                      (GLuint) bswap_CARD32(pc + 4)
                     ));
d2708 1
a2708 2
    CALL_Indexubv(GET_DISPATCH(), ((const GLubyte *) (pc + 0)
                  ));
d2714 2
a2715 3
    CALL_PolygonOffset(GET_DISPATCH(), ((GLfloat) bswap_FLOAT32(pc + 0),
                                        (GLfloat) bswap_FLOAT32(pc + 4)
                       ));
d2735 4
a2738 5
            CALL_AreTexturesResident(GET_DISPATCH(),
                                     (n,
                                      (const GLuint *)
                                      bswap_32_array((uint32_t *) (pc + 4), 0),
                                      residences));
d2763 4
a2766 5
            CALL_AreTexturesResident(GET_DISPATCH(),
                                     (n,
                                      (const GLuint *)
                                      bswap_32_array((uint32_t *) (pc + 4), 0),
                                      residences));
d2777 7
a2783 8
    CALL_CopyTexImage1D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                         (GLint) bswap_CARD32(pc + 4),
                                         (GLenum) bswap_ENUM(pc + 8),
                                         (GLint) bswap_CARD32(pc + 12),
                                         (GLint) bswap_CARD32(pc + 16),
                                         (GLsizei) bswap_CARD32(pc + 20),
                                         (GLint) bswap_CARD32(pc + 24)
                        ));
d2789 8
a2796 9
    CALL_CopyTexImage2D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                         (GLint) bswap_CARD32(pc + 4),
                                         (GLenum) bswap_ENUM(pc + 8),
                                         (GLint) bswap_CARD32(pc + 12),
                                         (GLint) bswap_CARD32(pc + 16),
                                         (GLsizei) bswap_CARD32(pc + 20),
                                         (GLsizei) bswap_CARD32(pc + 24),
                                         (GLint) bswap_CARD32(pc + 28)
                        ));
d2802 6
a2807 7
    CALL_CopyTexSubImage1D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                            (GLint) bswap_CARD32(pc + 4),
                                            (GLint) bswap_CARD32(pc + 8),
                                            (GLint) bswap_CARD32(pc + 12),
                                            (GLint) bswap_CARD32(pc + 16),
                                            (GLsizei) bswap_CARD32(pc + 20)
                           ));
d2813 8
a2820 9
    CALL_CopyTexSubImage2D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                            (GLint) bswap_CARD32(pc + 4),
                                            (GLint) bswap_CARD32(pc + 8),
                                            (GLint) bswap_CARD32(pc + 12),
                                            (GLint) bswap_CARD32(pc + 16),
                                            (GLint) bswap_CARD32(pc + 20),
                                            (GLsizei) bswap_CARD32(pc + 24),
                                            (GLsizei) bswap_CARD32(pc + 28)
                           ));
d2835 3
a2837 5
        CALL_DeleteTextures(GET_DISPATCH(), (n,
                                             (const GLuint *)
                                             bswap_32_array((uint32_t *) (pc +
                                                                          4), 0)
                            ));
d2856 3
a2858 5
        CALL_DeleteTextures(GET_DISPATCH(), (n,
                                             (const GLuint *)
                                             bswap_32_array((uint32_t *) (pc +
                                                                          4), 0)
                            ));
d2881 1
a2881 1
        CALL_GenTextures(GET_DISPATCH(), (n, textures));
d2906 1
a2906 1
        CALL_GenTextures(GET_DISPATCH(), (n, textures));
d2927 1
a2927 2
        retval = CALL_IsTexture(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
                                ));
d2947 1
a2947 2
        retval = CALL_IsTexture(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
                                ));
d2960 5
a2964 9
    CALL_PrioritizeTextures(GET_DISPATCH(), (n,
                                             (const GLuint *)
                                             bswap_32_array((uint32_t *) (pc +
                                                                          4),
                                                            0),
                                             (const GLclampf *)
                                             bswap_32_array((uint32_t *) (pc +
                                                                          4), 0)
                            ));
d2973 14
a2986 21
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH,
                      (GLint) bswap_CARD32(&hdr->rowLength)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS,
                      (GLint) bswap_CARD32(&hdr->skipRows)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS,
                      (GLint) bswap_CARD32(&hdr->skipPixels)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT,
                      (GLint) bswap_CARD32(&hdr->alignment)));

    CALL_TexSubImage1D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
                                        (GLint) bswap_CARD32(pc + 24),
                                        (GLint) bswap_CARD32(pc + 28),
                                        (GLsizei) bswap_CARD32(pc + 36),
                                        (GLenum) bswap_ENUM(pc + 44),
                                        (GLenum) bswap_ENUM(pc + 48), pixels));
d2995 16
a3010 23
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH,
                      (GLint) bswap_CARD32(&hdr->rowLength)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS,
                      (GLint) bswap_CARD32(&hdr->skipRows)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS,
                      (GLint) bswap_CARD32(&hdr->skipPixels)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT,
                      (GLint) bswap_CARD32(&hdr->alignment)));

    CALL_TexSubImage2D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
                                        (GLint) bswap_CARD32(pc + 24),
                                        (GLint) bswap_CARD32(pc + 28),
                                        (GLint) bswap_CARD32(pc + 32),
                                        (GLsizei) bswap_CARD32(pc + 36),
                                        (GLsizei) bswap_CARD32(pc + 40),
                                        (GLenum) bswap_ENUM(pc + 44),
                                        (GLenum) bswap_ENUM(pc + 48), pixels));
d3016 4
a3019 5
    CALL_BlendColor(GET_DISPATCH(), ((GLclampf) bswap_FLOAT32(pc + 0),
                                     (GLclampf) bswap_FLOAT32(pc + 4),
                                     (GLclampf) bswap_FLOAT32(pc + 8),
                                     (GLclampf) bswap_FLOAT32(pc + 12)
                    ));
d3025 1
a3025 2
    CALL_BlendEquation(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                       ));
d3034 13
a3046 20
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH,
                      (GLint) bswap_CARD32(&hdr->rowLength)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS,
                      (GLint) bswap_CARD32(&hdr->skipRows)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS,
                      (GLint) bswap_CARD32(&hdr->skipPixels)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT,
                      (GLint) bswap_CARD32(&hdr->alignment)));

    CALL_ColorTable(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
                                     (GLenum) bswap_ENUM(pc + 24),
                                     (GLsizei) bswap_CARD32(pc + 28),
                                     (GLenum) bswap_ENUM(pc + 32),
                                     (GLenum) bswap_ENUM(pc + 36), table));
d3059 1
a3059 2
    CALL_ColorTableParameterfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                pname, params));
d3072 1
a3072 2
    CALL_ColorTableParameteriv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                pname, params));
d3078 5
a3082 6
    CALL_CopyColorTable(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                         (GLenum) bswap_ENUM(pc + 4),
                                         (GLint) bswap_CARD32(pc + 8),
                                         (GLint) bswap_CARD32(pc + 12),
                                         (GLsizei) bswap_CARD32(pc + 16)
                        ));
d3107 1
a3107 3
        CALL_GetColorTableParameterfv(GET_DISPATCH(), ((GLenum)
                                                       bswap_ENUM(pc + 0),
                                                       pname, params));
d3138 1
a3138 3
        CALL_GetColorTableParameterfv(GET_DISPATCH(), ((GLenum)
                                                       bswap_ENUM(pc + 0),
                                                       pname, params));
d3169 1
a3169 3
        CALL_GetColorTableParameteriv(GET_DISPATCH(), ((GLenum)
                                                       bswap_ENUM(pc + 0),
                                                       pname, params));
d3200 1
a3200 3
        CALL_GetColorTableParameteriv(GET_DISPATCH(), ((GLenum)
                                                       bswap_ENUM(pc + 0),
                                                       pname, params));
d3215 13
a3227 20
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH,
                      (GLint) bswap_CARD32(&hdr->rowLength)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS,
                      (GLint) bswap_CARD32(&hdr->skipRows)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS,
                      (GLint) bswap_CARD32(&hdr->skipPixels)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT,
                      (GLint) bswap_CARD32(&hdr->alignment)));

    CALL_ColorSubTable(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
                                        (GLsizei) bswap_CARD32(pc + 24),
                                        (GLsizei) bswap_CARD32(pc + 28),
                                        (GLenum) bswap_ENUM(pc + 32),
                                        (GLenum) bswap_ENUM(pc + 36), data));
d3233 5
a3237 6
    CALL_CopyColorSubTable(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                            (GLsizei) bswap_CARD32(pc + 4),
                                            (GLint) bswap_CARD32(pc + 8),
                                            (GLint) bswap_CARD32(pc + 12),
                                            (GLsizei) bswap_CARD32(pc + 16)
                           ));
d3246 13
a3258 21
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH,
                      (GLint) bswap_CARD32(&hdr->rowLength)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS,
                      (GLint) bswap_CARD32(&hdr->skipRows)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS,
                      (GLint) bswap_CARD32(&hdr->skipPixels)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT,
                      (GLint) bswap_CARD32(&hdr->alignment)));

    CALL_ConvolutionFilter1D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
                                              (GLenum) bswap_ENUM(pc + 24),
                                              (GLsizei) bswap_CARD32(pc + 28),
                                              (GLenum) bswap_ENUM(pc + 36),
                                              (GLenum) bswap_ENUM(pc + 40),
                                              image));
d3267 14
a3280 22
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH,
                      (GLint) bswap_CARD32(&hdr->rowLength)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS,
                      (GLint) bswap_CARD32(&hdr->skipRows)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS,
                      (GLint) bswap_CARD32(&hdr->skipPixels)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT,
                      (GLint) bswap_CARD32(&hdr->alignment)));

    CALL_ConvolutionFilter2D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 20),
                                              (GLenum) bswap_ENUM(pc + 24),
                                              (GLsizei) bswap_CARD32(pc + 28),
                                              (GLsizei) bswap_CARD32(pc + 32),
                                              (GLenum) bswap_ENUM(pc + 36),
                                              (GLenum) bswap_ENUM(pc + 40),
                                              image));
d3286 3
a3288 4
    CALL_ConvolutionParameterf(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                (GLenum) bswap_ENUM(pc + 4),
                                                (GLfloat) bswap_FLOAT32(pc + 8)
                               ));
d3302 1
a3302 2
    CALL_ConvolutionParameterfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                 pname, params));
d3308 3
a3310 4
    CALL_ConvolutionParameteri(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                (GLenum) bswap_ENUM(pc + 4),
                                                (GLint) bswap_CARD32(pc + 8)
                               ));
d3323 1
a3323 2
    CALL_ConvolutionParameteriv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                 pname, params));
d3329 5
a3333 7
    CALL_CopyConvolutionFilter1D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                  (GLenum) bswap_ENUM(pc + 4),
                                                  (GLint) bswap_CARD32(pc + 8),
                                                  (GLint) bswap_CARD32(pc + 12),
                                                  (GLsizei) bswap_CARD32(pc +
                                                                         16)
                                 ));
d3339 6
a3344 9
    CALL_CopyConvolutionFilter2D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                  (GLenum) bswap_ENUM(pc + 4),
                                                  (GLint) bswap_CARD32(pc + 8),
                                                  (GLint) bswap_CARD32(pc + 12),
                                                  (GLsizei) bswap_CARD32(pc +
                                                                         16),
                                                  (GLsizei) bswap_CARD32(pc +
                                                                         20)
                                 ));
d3369 1
a3369 3
        CALL_GetConvolutionParameterfv(GET_DISPATCH(), ((GLenum)
                                                        bswap_ENUM(pc + 0),
                                                        pname, params));
d3400 1
a3400 3
        CALL_GetConvolutionParameterfv(GET_DISPATCH(), ((GLenum)
                                                        bswap_ENUM(pc + 0),
                                                        pname, params));
d3431 1
a3431 3
        CALL_GetConvolutionParameteriv(GET_DISPATCH(), ((GLenum)
                                                        bswap_ENUM(pc + 0),
                                                        pname, params));
d3462 1
a3462 3
        CALL_GetConvolutionParameteriv(GET_DISPATCH(), ((GLenum)
                                                        bswap_ENUM(pc + 0),
                                                        pname, params));
d3493 1
a3493 3
        CALL_GetHistogramParameterfv(GET_DISPATCH(), ((GLenum)
                                                      bswap_ENUM(pc + 0), pname,
                                                      params));
d3524 1
a3524 3
        CALL_GetHistogramParameterfv(GET_DISPATCH(), ((GLenum)
                                                      bswap_ENUM(pc + 0), pname,
                                                      params));
d3555 1
a3555 3
        CALL_GetHistogramParameteriv(GET_DISPATCH(), ((GLenum)
                                                      bswap_ENUM(pc + 0), pname,
                                                      params));
d3586 1
a3586 3
        CALL_GetHistogramParameteriv(GET_DISPATCH(), ((GLenum)
                                                      bswap_ENUM(pc + 0), pname,
                                                      params));
d3617 1
a3617 2
        CALL_GetMinmaxParameterfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                   pname, params));
d3648 1
a3648 2
        CALL_GetMinmaxParameterfv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                   pname, params));
d3679 1
a3679 2
        CALL_GetMinmaxParameteriv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                   pname, params));
d3710 1
a3710 2
        CALL_GetMinmaxParameteriv(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                   pname, params));
d3722 3
a3724 5
    CALL_Histogram(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                    (GLsizei) bswap_CARD32(pc + 4),
                                    (GLenum) bswap_ENUM(pc + 8),
                                    *(GLboolean *) (pc + 12)
                   ));
d3730 2
a3731 4
    CALL_Minmax(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                 (GLenum) bswap_ENUM(pc + 4),
                                 *(GLboolean *) (pc + 8)
                ));
d3737 1
a3737 2
    CALL_ResetHistogram(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                        ));
d3743 1
a3743 2
    CALL_ResetMinmax(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                     ));
d3754 21
a3774 30
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH,
                      (GLint) bswap_CARD32(&hdr->rowLength)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_IMAGE_HEIGHT,
                      (GLint) bswap_CARD32(&hdr->imageHeight)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS,
                      (GLint) bswap_CARD32(&hdr->skipRows)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_IMAGES,
                      (GLint) bswap_CARD32(&hdr->skipImages)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS,
                      (GLint) bswap_CARD32(&hdr->skipPixels)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT,
                      (GLint) bswap_CARD32(&hdr->alignment)));

    CALL_TexImage3D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 36),
                                     (GLint) bswap_CARD32(pc + 40),
                                     (GLint) bswap_CARD32(pc + 44),
                                     (GLsizei) bswap_CARD32(pc + 48),
                                     (GLsizei) bswap_CARD32(pc + 52),
                                     (GLsizei) bswap_CARD32(pc + 56),
                                     (GLint) bswap_CARD32(pc + 64),
                                     (GLenum) bswap_ENUM(pc + 68),
                                     (GLenum) bswap_ENUM(pc + 72), pixels));
d3783 22
a3804 31
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH,
                      (GLint) bswap_CARD32(&hdr->rowLength)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_IMAGE_HEIGHT,
                      (GLint) bswap_CARD32(&hdr->imageHeight)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS,
                      (GLint) bswap_CARD32(&hdr->skipRows)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_IMAGES,
                      (GLint) bswap_CARD32(&hdr->skipImages)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS,
                      (GLint) bswap_CARD32(&hdr->skipPixels)));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT,
                      (GLint) bswap_CARD32(&hdr->alignment)));

    CALL_TexSubImage3D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 36),
                                        (GLint) bswap_CARD32(pc + 40),
                                        (GLint) bswap_CARD32(pc + 44),
                                        (GLint) bswap_CARD32(pc + 48),
                                        (GLint) bswap_CARD32(pc + 52),
                                        (GLsizei) bswap_CARD32(pc + 60),
                                        (GLsizei) bswap_CARD32(pc + 64),
                                        (GLsizei) bswap_CARD32(pc + 68),
                                        (GLenum) bswap_ENUM(pc + 76),
                                        (GLenum) bswap_ENUM(pc + 80), pixels));
d3810 9
a3818 10
    CALL_CopyTexSubImage3D(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                            (GLint) bswap_CARD32(pc + 4),
                                            (GLint) bswap_CARD32(pc + 8),
                                            (GLint) bswap_CARD32(pc + 12),
                                            (GLint) bswap_CARD32(pc + 16),
                                            (GLint) bswap_CARD32(pc + 20),
                                            (GLint) bswap_CARD32(pc + 24),
                                            (GLsizei) bswap_CARD32(pc + 28),
                                            (GLsizei) bswap_CARD32(pc + 32)
                           ));
d3822 1
a3822 1
__glXDispSwap_ActiveTextureARB(GLbyte * pc)
d3824 1
a3824 2
    CALL_ActiveTextureARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                          ));
d3828 1
a3828 1
__glXDispSwap_MultiTexCoord1dvARB(GLbyte * pc)
d3837 3
a3839 6
    CALL_MultiTexCoord1dvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 8),
                                              (const GLdouble *)
                                              bswap_64_array((uint64_t *) (pc +
                                                                           0),
                                                             1)
                             ));
d3845 3
a3847 6
    CALL_MultiTexCoord1fvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                              (const GLfloat *)
                                              bswap_32_array((uint32_t *) (pc +
                                                                           4),
                                                             1)
                             ));
d3851 1
a3851 1
__glXDispSwap_MultiTexCoord1ivARB(GLbyte * pc)
d3853 3
a3855 6
    CALL_MultiTexCoord1ivARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                              (const GLint *)
                                              bswap_32_array((uint32_t *) (pc +
                                                                           4),
                                                             1)
                             ));
d3859 1
a3859 1
__glXDispSwap_MultiTexCoord1svARB(GLbyte * pc)
d3861 3
a3863 6
    CALL_MultiTexCoord1svARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                              (const GLshort *)
                                              bswap_16_array((uint16_t *) (pc +
                                                                           4),
                                                             1)
                             ));
d3867 1
a3867 1
__glXDispSwap_MultiTexCoord2dvARB(GLbyte * pc)
d3876 3
a3878 6
    CALL_MultiTexCoord2dvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 16),
                                              (const GLdouble *)
                                              bswap_64_array((uint64_t *) (pc +
                                                                           0),
                                                             2)
                             ));
d3884 3
a3886 6
    CALL_MultiTexCoord2fvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                              (const GLfloat *)
                                              bswap_32_array((uint32_t *) (pc +
                                                                           4),
                                                             2)
                             ));
d3890 1
a3890 1
__glXDispSwap_MultiTexCoord2ivARB(GLbyte * pc)
d3892 3
a3894 6
    CALL_MultiTexCoord2ivARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                              (const GLint *)
                                              bswap_32_array((uint32_t *) (pc +
                                                                           4),
                                                             2)
                             ));
d3898 1
a3898 1
__glXDispSwap_MultiTexCoord2svARB(GLbyte * pc)
d3900 3
a3902 6
    CALL_MultiTexCoord2svARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                              (const GLshort *)
                                              bswap_16_array((uint16_t *) (pc +
                                                                           4),
                                                             2)
                             ));
d3906 1
a3906 1
__glXDispSwap_MultiTexCoord3dvARB(GLbyte * pc)
d3915 3
a3917 6
    CALL_MultiTexCoord3dvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 24),
                                              (const GLdouble *)
                                              bswap_64_array((uint64_t *) (pc +
                                                                           0),
                                                             3)
                             ));
d3923 3
a3925 6
    CALL_MultiTexCoord3fvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                              (const GLfloat *)
                                              bswap_32_array((uint32_t *) (pc +
                                                                           4),
                                                             3)
                             ));
d3929 1
a3929 1
__glXDispSwap_MultiTexCoord3ivARB(GLbyte * pc)
d3931 3
a3933 6
    CALL_MultiTexCoord3ivARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                              (const GLint *)
                                              bswap_32_array((uint32_t *) (pc +
                                                                           4),
                                                             3)
                             ));
d3937 1
a3937 1
__glXDispSwap_MultiTexCoord3svARB(GLbyte * pc)
d3939 3
a3941 6
    CALL_MultiTexCoord3svARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                              (const GLshort *)
                                              bswap_16_array((uint16_t *) (pc +
                                                                           4),
                                                             3)
                             ));
d3945 1
a3945 1
__glXDispSwap_MultiTexCoord4dvARB(GLbyte * pc)
d3954 3
a3956 6
    CALL_MultiTexCoord4dvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 32),
                                              (const GLdouble *)
                                              bswap_64_array((uint64_t *) (pc +
                                                                           0),
                                                             4)
                             ));
d3962 3
a3964 17
    CALL_MultiTexCoord4fvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                              (const GLfloat *)
                                              bswap_32_array((uint32_t *) (pc +
                                                                           4),
                                                             4)
                             ));
}

void
__glXDispSwap_MultiTexCoord4ivARB(GLbyte * pc)
{
    CALL_MultiTexCoord4ivARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                              (const GLint *)
                                              bswap_32_array((uint32_t *) (pc +
                                                                           4),
                                                             4)
                             ));
d3968 1
a3968 1
__glXDispSwap_MultiTexCoord4svARB(GLbyte * pc)
d3970 3
a3972 6
    CALL_MultiTexCoord4svARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                              (const GLshort *)
                                              bswap_16_array((uint16_t *) (pc +
                                                                           4),
                                                             4)
                             ));
d3976 1
a3976 1
__glXDispSwap_SampleCoverageARB(GLbyte * pc)
d3978 3
a3980 3
    CALL_SampleCoverageARB(GET_DISPATCH(), ((GLclampf) bswap_FLOAT32(pc + 0),
                                            *(GLboolean *) (pc + 4)
                           ));
d3984 1
a3984 1
__glXDispSwap_CompressedTexImage1DARB(GLbyte * pc)
d3986 2
d3990 6
a3995 9
    CALL_CompressedTexImage1DARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                  (GLint) bswap_CARD32(pc + 4),
                                                  (GLenum) bswap_ENUM(pc + 8),
                                                  (GLsizei) bswap_CARD32(pc +
                                                                         12),
                                                  (GLint) bswap_CARD32(pc + 16),
                                                  imageSize,
                                                  (const GLvoid *) (pc + 24)
                                 ));
d3999 1
a3999 1
__glXDispSwap_CompressedTexImage2DARB(GLbyte * pc)
d4001 2
d4005 7
a4011 11
    CALL_CompressedTexImage2DARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                  (GLint) bswap_CARD32(pc + 4),
                                                  (GLenum) bswap_ENUM(pc + 8),
                                                  (GLsizei) bswap_CARD32(pc +
                                                                         12),
                                                  (GLsizei) bswap_CARD32(pc +
                                                                         16),
                                                  (GLint) bswap_CARD32(pc + 20),
                                                  imageSize,
                                                  (const GLvoid *) (pc + 28)
                                 ));
d4015 1
a4015 1
__glXDispSwap_CompressedTexImage3DARB(GLbyte * pc)
d4017 2
d4021 8
a4028 13
    CALL_CompressedTexImage3DARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                  (GLint) bswap_CARD32(pc + 4),
                                                  (GLenum) bswap_ENUM(pc + 8),
                                                  (GLsizei) bswap_CARD32(pc +
                                                                         12),
                                                  (GLsizei) bswap_CARD32(pc +
                                                                         16),
                                                  (GLsizei) bswap_CARD32(pc +
                                                                         20),
                                                  (GLint) bswap_CARD32(pc + 24),
                                                  imageSize,
                                                  (const GLvoid *) (pc + 32)
                                 ));
d4032 1
a4032 1
__glXDispSwap_CompressedTexSubImage1DARB(GLbyte * pc)
d4034 2
d4038 6
a4043 13
    CALL_CompressedTexSubImage1DARB(GET_DISPATCH(), ((GLenum)
                                                     bswap_ENUM(pc + 0),
                                                     (GLint) bswap_CARD32(pc +
                                                                          4),
                                                     (GLint) bswap_CARD32(pc +
                                                                          8),
                                                     (GLsizei) bswap_CARD32(pc +
                                                                            12),
                                                     (GLenum) bswap_ENUM(pc +
                                                                         16),
                                                     imageSize,
                                                     (const GLvoid *) (pc + 24)
                                    ));
d4047 1
a4047 1
__glXDispSwap_CompressedTexSubImage2DARB(GLbyte * pc)
d4049 2
d4053 8
a4060 17
    CALL_CompressedTexSubImage2DARB(GET_DISPATCH(), ((GLenum)
                                                     bswap_ENUM(pc + 0),
                                                     (GLint) bswap_CARD32(pc +
                                                                          4),
                                                     (GLint) bswap_CARD32(pc +
                                                                          8),
                                                     (GLint) bswap_CARD32(pc +
                                                                          12),
                                                     (GLsizei) bswap_CARD32(pc +
                                                                            16),
                                                     (GLsizei) bswap_CARD32(pc +
                                                                            20),
                                                     (GLenum) bswap_ENUM(pc +
                                                                         24),
                                                     imageSize,
                                                     (const GLvoid *) (pc + 32)
                                    ));
d4064 1
a4064 1
__glXDispSwap_CompressedTexSubImage3DARB(GLbyte * pc)
d4066 2
d4070 18
a4087 21
    CALL_CompressedTexSubImage3DARB(GET_DISPATCH(), ((GLenum)
                                                     bswap_ENUM(pc + 0),
                                                     (GLint) bswap_CARD32(pc +
                                                                          4),
                                                     (GLint) bswap_CARD32(pc +
                                                                          8),
                                                     (GLint) bswap_CARD32(pc +
                                                                          12),
                                                     (GLint) bswap_CARD32(pc +
                                                                          16),
                                                     (GLsizei) bswap_CARD32(pc +
                                                                            20),
                                                     (GLsizei) bswap_CARD32(pc +
                                                                            24),
                                                     (GLsizei) bswap_CARD32(pc +
                                                                            28),
                                                     (GLenum) bswap_ENUM(pc +
                                                                         32),
                                                     imageSize,
                                                     (const GLvoid *) (pc + 40)
                                    ));
d4090 2
a4091 2
int
__glXDispSwap_GetProgramEnvParameterdvARB(__GLXclientState * cl, GLbyte * pc)
d4093 6
a4098 4
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
d4100 4
a4103 3
    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLdouble params[4];
d4105 4
a4108 8
        CALL_GetProgramEnvParameterdvARB(GET_DISPATCH(), ((GLenum)
                                                          bswap_ENUM(pc + 0),
                                                          (GLuint)
                                                          bswap_CARD32(pc + 4),
                                                          params));
        (void) bswap_64_array((uint64_t *) params, 4);
        __glXSendReplySwap(cl->client, params, 4, 8, GL_FALSE, 0);
        error = Success;
d4110 28
d4139 6
a4144 1
    return error;
d4147 2
a4148 2
int
__glXDispSwap_GetProgramEnvParameterfvARB(__GLXclientState * cl, GLbyte * pc)
d4150 11
a4160 4
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
d4162 7
a4168 3
    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLfloat params[4];
d4170 9
a4178 8
        CALL_GetProgramEnvParameterfvARB(GET_DISPATCH(), ((GLenum)
                                                          bswap_ENUM(pc + 0),
                                                          (GLuint)
                                                          bswap_CARD32(pc + 4),
                                                          params));
        (void) bswap_32_array((uint32_t *) params, 4);
        __glXSendReplySwap(cl->client, params, 4, 4, GL_FALSE, 0);
        error = Success;
d4180 61
d4242 1
a4242 1
    return error;
d4246 1
a4246 1
__glXDispSwap_GetProgramLocalParameterdvARB(__GLXclientState * cl, GLbyte * pc)
d4248 3
a4250 1
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
d4255 1
a4255 1
    pc += __GLX_VENDPRIV_HDR_SIZE;
d4257 1
a4257 1
        GLdouble params[4];
d4259 3
a4261 8
        CALL_GetProgramLocalParameterdvARB(GET_DISPATCH(), ((GLenum)
                                                            bswap_ENUM(pc + 0),
                                                            (GLuint)
                                                            bswap_CARD32(pc +
                                                                         4),
                                                            params));
        (void) bswap_64_array((uint64_t *) params, 4);
        __glXSendReplySwap(cl->client, params, 4, 8, GL_FALSE, 0);
d4268 8
d4277 1
a4277 1
__glXDispSwap_GetProgramLocalParameterfvARB(__GLXclientState * cl, GLbyte * pc)
d4279 2
a4280 1
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
d4285 1
a4285 1
    pc += __GLX_VENDPRIV_HDR_SIZE;
d4287 1
a4287 1
        GLfloat params[4];
d4289 7
a4295 8
        CALL_GetProgramLocalParameterfvARB(GET_DISPATCH(), ((GLenum)
                                                            bswap_ENUM(pc + 0),
                                                            (GLuint)
                                                            bswap_CARD32(pc +
                                                                         4),
                                                            params));
        (void) bswap_32_array((uint32_t *) params, 4);
        __glXSendReplySwap(cl->client, params, 4, 4, GL_FALSE, 0);
d4303 1
a4303 1
__glXDispSwap_GetProgramivARB(__GLXclientState * cl, GLbyte * pc)
d4305 3
a4307 1
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
d4312 1
a4312 1
    pc += __GLX_VENDPRIV_HDR_SIZE;
d4316 1
a4316 1
        const GLuint compsize = __glGetProgramivARB_size(pname);
d4326 1
a4326 2
        CALL_GetProgramivARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                              pname, params));
d4336 1
a4336 1
__glXDispSwap_GetVertexAttribdvARB(__GLXclientState * cl, GLbyte * pc)
d4338 3
a4340 1
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
d4345 1
a4345 1
    pc += __GLX_VENDPRIV_HDR_SIZE;
d4349 5
a4353 5
        const GLuint compsize = __glGetVertexAttribdvARB_size(pname);
        GLdouble answerBuffer[200];
        GLdouble *params =
            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
                                 sizeof(answerBuffer), 8);
d4359 3
a4361 5
        CALL_GetVertexAttribdvARB(GET_DISPATCH(), ((GLuint)
                                                   bswap_CARD32(pc + 0), pname,
                                                   params));
        (void) bswap_64_array((uint64_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 8, GL_FALSE, 0);
d4369 1
a4369 1
__glXDispSwap_GetVertexAttribfvARB(__GLXclientState * cl, GLbyte * pc)
d4371 2
a4372 1
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
d4377 1
a4377 1
    pc += __GLX_VENDPRIV_HDR_SIZE;
d4381 3
a4383 3
        const GLuint compsize = __glGetVertexAttribfvARB_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
d4391 1
a4391 3
        CALL_GetVertexAttribfvARB(GET_DISPATCH(), ((GLuint)
                                                   bswap_CARD32(pc + 0), pname,
                                                   params));
d4401 1
a4401 1
__glXDispSwap_GetVertexAttribivARB(__GLXclientState * cl, GLbyte * pc)
d4403 2
a4404 1
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
d4409 1
a4409 1
    pc += __GLX_VENDPRIV_HDR_SIZE;
d4411 1
a4411 1
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
d4413 2
a4414 15
        const GLuint compsize = __glGetVertexAttribivARB_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        CALL_GetVertexAttribivARB(GET_DISPATCH(), ((GLuint)
                                                   bswap_CARD32(pc + 0), pname,
                                                   params));
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
d4422 1
a4422 21
__glXDispSwap_ProgramEnvParameter4dvARB(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 40);
        pc -= 4;
    }
#endif

    CALL_ProgramEnvParameter4dvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                    (GLuint) bswap_CARD32(pc +
                                                                          4),
                                                    (const GLdouble *)
                                                    bswap_64_array((uint64_t
                                                                    *) (pc + 8),
                                                                   4)
                                   ));
}

void
__glXDispSwap_ProgramEnvParameter4fvARB(GLbyte * pc)
d4424 4
a4427 8
    CALL_ProgramEnvParameter4fvARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                    (GLuint) bswap_CARD32(pc +
                                                                          4),
                                                    (const GLfloat *)
                                                    bswap_32_array((uint32_t
                                                                    *) (pc + 8),
                                                                   4)
                                   ));
d4431 1
a4431 1
__glXDispSwap_ProgramLocalParameter4dvARB(GLbyte * pc)
d4433 2
a4434 31
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 40);
        pc -= 4;
    }
#endif

    CALL_ProgramLocalParameter4dvARB(GET_DISPATCH(), ((GLenum)
                                                      bswap_ENUM(pc + 0),
                                                      (GLuint) bswap_CARD32(pc +
                                                                            4),
                                                      (const GLdouble *)
                                                      bswap_64_array((uint64_t
                                                                      *) (pc +
                                                                          8), 4)
                                     ));
}

void
__glXDispSwap_ProgramLocalParameter4fvARB(GLbyte * pc)
{
    CALL_ProgramLocalParameter4fvARB(GET_DISPATCH(), ((GLenum)
                                                      bswap_ENUM(pc + 0),
                                                      (GLuint) bswap_CARD32(pc +
                                                                            4),
                                                      (const GLfloat *)
                                                      bswap_32_array((uint32_t
                                                                      *) (pc +
                                                                          8), 4)
                                     ));
}
d4436 1
a4436 9
void
__glXDispSwap_ProgramStringARB(GLbyte * pc)
{
    const GLsizei len = (GLsizei) bswap_CARD32(pc + 8);

    CALL_ProgramStringARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                           (GLenum) bswap_ENUM(pc + 4),
                                           len, (const GLvoid *) (pc + 12)
                          ));
d4440 1
a4440 1
__glXDispSwap_VertexAttrib1dvARB(GLbyte * pc)
d4442 2
d4451 3
a4453 15
    CALL_VertexAttrib1dvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLdouble *)
                                             bswap_64_array((uint64_t *) (pc +
                                                                          4), 1)
                            ));
}

void
__glXDispSwap_VertexAttrib1fvARB(GLbyte * pc)
{
    CALL_VertexAttrib1fvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLfloat *)
                                             bswap_32_array((uint32_t *) (pc +
                                                                          4), 1)
                            ));
d4457 1
a4457 1
__glXDispSwap_VertexAttrib1svARB(GLbyte * pc)
d4459 4
a4462 5
    CALL_VertexAttrib1svARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLshort *)
                                             bswap_16_array((uint16_t *) (pc +
                                                                          4), 1)
                            ));
d4466 1
a4466 1
__glXDispSwap_VertexAttrib2dvARB(GLbyte * pc)
d4468 2
d4477 3
a4479 15
    CALL_VertexAttrib2dvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLdouble *)
                                             bswap_64_array((uint64_t *) (pc +
                                                                          4), 2)
                            ));
}

void
__glXDispSwap_VertexAttrib2fvARB(GLbyte * pc)
{
    CALL_VertexAttrib2fvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLfloat *)
                                             bswap_32_array((uint32_t *) (pc +
                                                                          4), 2)
                            ));
d4483 1
a4483 1
__glXDispSwap_VertexAttrib2svARB(GLbyte * pc)
d4485 4
a4488 5
    CALL_VertexAttrib2svARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLshort *)
                                             bswap_16_array((uint16_t *) (pc +
                                                                          4), 2)
                            ));
d4492 1
a4492 1
__glXDispSwap_VertexAttrib3dvARB(GLbyte * pc)
d4494 2
d4503 3
a4505 15
    CALL_VertexAttrib3dvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLdouble *)
                                             bswap_64_array((uint64_t *) (pc +
                                                                          4), 3)
                            ));
}

void
__glXDispSwap_VertexAttrib3fvARB(GLbyte * pc)
{
    CALL_VertexAttrib3fvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLfloat *)
                                             bswap_32_array((uint32_t *) (pc +
                                                                          4), 3)
                            ));
d4509 1
a4509 1
__glXDispSwap_VertexAttrib3svARB(GLbyte * pc)
d4511 4
a4514 5
    CALL_VertexAttrib3svARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLshort *)
                                             bswap_16_array((uint16_t *) (pc +
                                                                          4), 3)
                            ));
d4518 1
a4518 1
__glXDispSwap_VertexAttrib4NbvARB(GLbyte * pc)
d4520 3
a4522 3
    CALL_VertexAttrib4NbvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                              (const GLbyte *) (pc + 4)
                             ));
d4526 1
a4526 1
__glXDispSwap_VertexAttrib4NivARB(GLbyte * pc)
d4528 4
a4531 6
    CALL_VertexAttrib4NivARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                              (const GLint *)
                                              bswap_32_array((uint32_t *) (pc +
                                                                           4),
                                                             4)
                             ));
d4535 1
a4535 1
__glXDispSwap_VertexAttrib4NsvARB(GLbyte * pc)
d4537 5
a4541 6
    CALL_VertexAttrib4NsvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                              (const GLshort *)
                                              bswap_16_array((uint16_t *) (pc +
                                                                           4),
                                                             4)
                             ));
d4545 1
a4545 1
__glXDispSwap_VertexAttrib4NubvARB(GLbyte * pc)
d4547 4
a4550 3
    CALL_VertexAttrib4NubvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                               (const GLubyte *) (pc + 4)
                              ));
d4554 1
a4554 1
__glXDispSwap_VertexAttrib4NuivARB(GLbyte * pc)
d4556 5
a4560 6
    CALL_VertexAttrib4NuivARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                               (const GLuint *)
                                               bswap_32_array((uint32_t *) (pc +
                                                                            4),
                                                              4)
                              ));
d4564 1
a4564 1
__glXDispSwap_VertexAttrib4NusvARB(GLbyte * pc)
d4566 5
a4570 6
    CALL_VertexAttrib4NusvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                               (const GLushort *)
                                               bswap_16_array((uint16_t *) (pc +
                                                                            4),
                                                              4)
                              ));
d4574 1
a4574 1
__glXDispSwap_VertexAttrib4bvARB(GLbyte * pc)
d4576 3
a4578 3
    CALL_VertexAttrib4bvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLbyte *) (pc + 4)
                            ));
d4582 1
a4582 1
__glXDispSwap_VertexAttrib4dvARB(GLbyte * pc)
d4584 2
d4593 3
a4595 5
    CALL_VertexAttrib4dvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLdouble *)
                                             bswap_64_array((uint64_t *) (pc +
                                                                          4), 4)
                            ));
d4599 1
a4599 1
__glXDispSwap_VertexAttrib4fvARB(GLbyte * pc)
d4601 4
a4604 5
    CALL_VertexAttrib4fvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLfloat *)
                                             bswap_32_array((uint32_t *) (pc +
                                                                          4), 4)
                            ));
d4608 1
a4608 1
__glXDispSwap_VertexAttrib4ivARB(GLbyte * pc)
d4610 4
a4613 5
    CALL_VertexAttrib4ivARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLint *)
                                             bswap_32_array((uint32_t *) (pc +
                                                                          4), 4)
                            ));
d4617 1
a4617 1
__glXDispSwap_VertexAttrib4svARB(GLbyte * pc)
d4619 3
a4621 5
    CALL_VertexAttrib4svARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLshort *)
                                             bswap_16_array((uint16_t *) (pc +
                                                                          4), 4)
                            ));
d4625 1
a4625 1
__glXDispSwap_VertexAttrib4ubvARB(GLbyte * pc)
d4627 4
a4630 3
    CALL_VertexAttrib4ubvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                              (const GLubyte *) (pc + 4)
                             ));
d4634 1
a4634 1
__glXDispSwap_VertexAttrib4uivARB(GLbyte * pc)
d4636 5
a4640 6
    CALL_VertexAttrib4uivARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                              (const GLuint *)
                                              bswap_32_array((uint32_t *) (pc +
                                                                           4),
                                                             4)
                             ));
d4644 1
a4644 1
__glXDispSwap_VertexAttrib4usvARB(GLbyte * pc)
d4646 3
a4648 6
    CALL_VertexAttrib4usvARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                              (const GLushort *)
                                              bswap_16_array((uint16_t *) (pc +
                                                                           4),
                                                             4)
                             ));
d4652 1
a4652 1
__glXDispSwap_BeginQueryARB(GLbyte * pc)
d4654 3
a4656 3
    CALL_BeginQueryARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                        (GLuint) bswap_CARD32(pc + 4)
                       ));
d4660 1
a4660 1
__glXDispSwap_DeleteQueriesARB(__GLXclientState * cl, GLbyte * pc)
d4662 3
a4664 1
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
d4669 1
a4669 1
    pc += __GLX_SINGLE_HDR_SIZE;
d4673 3
a4675 6
        CALL_DeleteQueriesARB(GET_DISPATCH(), (n,
                                               (const GLuint *)
                                               bswap_32_array((uint32_t *) (pc +
                                                                            4),
                                                              0)
                              ));
a4681 7
void
__glXDispSwap_EndQueryARB(GLbyte * pc)
{
    CALL_EndQueryARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                     ));
}

d4683 1
a4683 1
__glXDispSwap_GenQueriesARB(__GLXclientState * cl, GLbyte * pc)
d4685 3
a4687 1
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
d4692 1
a4692 1
    pc += __GLX_SINGLE_HDR_SIZE;
d4697 1
a4697 1
        GLuint *ids =
d4700 3
a4702 3
        CALL_GenQueriesARB(GET_DISPATCH(), (n, ids));
        (void) bswap_32_array((uint32_t *) ids, n);
        __glXSendReplySwap(cl->client, ids, n, 4, GL_TRUE, 0);
d4710 1
a4710 1
__glXDispSwap_GetQueryObjectivARB(__GLXclientState * cl, GLbyte * pc)
d4712 3
a4714 1
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
d4719 1
a4719 1
    pc += __GLX_SINGLE_HDR_SIZE;
d4721 11
a4731 1
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
d4733 9
a4741 5
        const GLuint compsize = __glGetQueryObjectivARB_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);
d4743 3
a4745 3
        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();
d4747 4
a4750 4
        CALL_GetQueryObjectivARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                                  pname, params));
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
d4758 1
a4758 1
__glXDispSwap_GetQueryObjectuivARB(__GLXclientState * cl, GLbyte * pc)
d4760 3
a4762 1
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
d4767 1
a4767 1
    pc += __GLX_SINGLE_HDR_SIZE;
d4769 11
a4779 1
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
d4781 9
a4789 5
        const GLuint compsize = __glGetQueryObjectuivARB_size(pname);
        GLuint answerBuffer[200];
        GLuint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);
d4791 3
a4793 3
        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();
d4795 4
a4798 5
        CALL_GetQueryObjectuivARB(GET_DISPATCH(), ((GLuint)
                                                   bswap_CARD32(pc + 0), pname,
                                                   params));
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
d4806 1
a4806 1
__glXDispSwap_GetQueryivARB(__GLXclientState * cl, GLbyte * pc)
d4808 3
a4810 1
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
d4815 1
a4815 1
    pc += __GLX_SINGLE_HDR_SIZE;
d4819 1
a4819 1
        const GLuint compsize = __glGetQueryivARB_size(pname);
d4829 1
a4829 2
        CALL_GetQueryivARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                            pname, params));
d4839 1
a4839 1
__glXDispSwap_IsQueryARB(__GLXclientState * cl, GLbyte * pc)
d4841 2
a4842 1
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
d4847 1
a4847 1
    pc += __GLX_SINGLE_HDR_SIZE;
d4851 1
a4851 2
        retval = CALL_IsQueryARB(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
                                 ));
d4860 1
a4860 1
__glXDispSwap_DrawBuffersARB(GLbyte * pc)
d4862 8
a4869 1
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);
d4871 4
a4874 5
    CALL_DrawBuffersARB(GET_DISPATCH(), (n,
                                         (const GLenum *)
                                         bswap_32_array((uint32_t *) (pc + 4),
                                                        0)
                        ));
d4878 1
a4878 1
__glXDispSwap_ClampColorARB(GLbyte * pc)
d4880 6
a4885 3
    CALL_ClampColorARB(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                        (GLenum) bswap_ENUM(pc + 4)
                       ));
d4889 1
a4889 61
__glXDispSwap_RenderbufferStorageMultisample(GLbyte * pc)
{
    CALL_RenderbufferStorageMultisample(GET_DISPATCH(), ((GLenum)
                                                         bswap_ENUM(pc + 0),
                                                         (GLsizei)
                                                         bswap_CARD32(pc + 4),
                                                         (GLenum) bswap_ENUM(pc
                                                                             +
                                                                             8),
                                                         (GLsizei)
                                                         bswap_CARD32(pc + 12),
                                                         (GLsizei)
                                                         bswap_CARD32(pc + 16)
                                        ));
}

void
__glXDispSwap_SampleMaskSGIS(GLbyte * pc)
{
    CALL_SampleMaskSGIS(GET_DISPATCH(), ((GLclampf) bswap_FLOAT32(pc + 0),
                                         *(GLboolean *) (pc + 4)
                        ));
}

void
__glXDispSwap_SamplePatternSGIS(GLbyte * pc)
{
    CALL_SamplePatternSGIS(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                           ));
}

void
__glXDispSwap_PointParameterfEXT(GLbyte * pc)
{
    CALL_PointParameterfEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                             (GLfloat) bswap_FLOAT32(pc + 4)
                            ));
}

void
__glXDispSwap_PointParameterfvEXT(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 0);
    const GLfloat *params;

    params =
        (const GLfloat *) bswap_32_array((uint32_t *) (pc + 4),
                                         __glPointParameterfvEXT_size(pname));

    CALL_PointParameterfvEXT(GET_DISPATCH(), (pname, params));
}

void
__glXDispSwap_SecondaryColor3bvEXT(GLbyte * pc)
{
    CALL_SecondaryColor3bvEXT(GET_DISPATCH(), ((const GLbyte *) (pc + 0)
                              ));
}

void
__glXDispSwap_SecondaryColor3dvEXT(GLbyte * pc)
d4891 2
d4895 1
a4895 1
        (void) memmove(pc - 4, pc, 24);
d4900 4
a4903 5
    CALL_SecondaryColor3dvEXT(GET_DISPATCH(), ((const GLdouble *)
                                               bswap_64_array((uint64_t *) (pc +
                                                                            0),
                                                              3)
                              ));
d4907 1
a4907 1
__glXDispSwap_SecondaryColor3fvEXT(GLbyte * pc)
d4909 6
a4914 5
    CALL_SecondaryColor3fvEXT(GET_DISPATCH(), ((const GLfloat *)
                                               bswap_32_array((uint32_t *) (pc +
                                                                            0),
                                                              3)
                              ));
d4918 1
a4918 1
__glXDispSwap_SecondaryColor3ivEXT(GLbyte * pc)
d4920 3
a4922 6
    CALL_SecondaryColor3ivEXT(GET_DISPATCH(), ((const GLint *)
                                               bswap_32_array((uint32_t *) (pc +
                                                                            0),
                                                              3)
                              ));
}
d4924 3
a4926 8
void
__glXDispSwap_SecondaryColor3svEXT(GLbyte * pc)
{
    CALL_SecondaryColor3svEXT(GET_DISPATCH(), ((const GLshort *)
                                               bswap_16_array((uint16_t *) (pc +
                                                                            0),
                                                              3)
                              ));
d4930 1
a4930 1
__glXDispSwap_SecondaryColor3ubvEXT(GLbyte * pc)
d4932 5
a4936 2
    CALL_SecondaryColor3ubvEXT(GET_DISPATCH(), ((const GLubyte *) (pc + 0)
                               ));
d4940 1
a4940 1
__glXDispSwap_SecondaryColor3uivEXT(GLbyte * pc)
d4942 5
a4946 6
    CALL_SecondaryColor3uivEXT(GET_DISPATCH(), ((const GLuint *)
                                                bswap_32_array((uint32_t *) (pc
                                                                             +
                                                                             0),
                                                               3)
                               ));
d4950 1
a4950 1
__glXDispSwap_SecondaryColor3usvEXT(GLbyte * pc)
d4952 5
a4956 6
    CALL_SecondaryColor3usvEXT(GET_DISPATCH(), ((const GLushort *)
                                                bswap_16_array((uint16_t *) (pc
                                                                             +
                                                                             0),
                                                               3)
                               ));
d4960 1
a4960 1
__glXDispSwap_FogCoorddvEXT(GLbyte * pc)
d4962 5
a4966 10
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 8);
        pc -= 4;
    }
#endif

    CALL_FogCoorddvEXT(GET_DISPATCH(), ((const GLdouble *)
                                        bswap_64_array((uint64_t *) (pc + 0), 1)
                       ));
d4970 1
a4970 1
__glXDispSwap_FogCoordfvEXT(GLbyte * pc)
d4972 3
a4974 3
    CALL_FogCoordfvEXT(GET_DISPATCH(), ((const GLfloat *)
                                        bswap_32_array((uint32_t *) (pc + 0), 1)
                       ));
d4978 1
a4978 1
__glXDispSwap_BlendFuncSeparateEXT(GLbyte * pc)
d4980 4
a4983 5
    CALL_BlendFuncSeparateEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                               (GLenum) bswap_ENUM(pc + 4),
                                               (GLenum) bswap_ENUM(pc + 8),
                                               (GLenum) bswap_ENUM(pc + 12)
                              ));
d4987 1
a4987 1
__glXDispSwap_WindowPos3fvMESA(GLbyte * pc)
d4989 10
a4998 4
    CALL_WindowPos3fvMESA(GET_DISPATCH(), ((const GLfloat *)
                                           bswap_32_array((uint32_t *) (pc + 0),
                                                          3)
                          ));
d5002 1
a5002 1
__glXDispSwap_AreProgramsResidentNV(__GLXclientState * cl, GLbyte * pc)
d5004 2
d5013 1
a5013 1
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);
d5015 2
a5016 11
        GLboolean retval;
        GLboolean answerBuffer[200];
        GLboolean *residences =
            __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);
        retval =
            CALL_AreProgramsResidentNV(GET_DISPATCH(),
                                       (n,
                                        (const GLuint *)
                                        bswap_32_array((uint32_t *) (pc + 4),
                                                       0), residences));
        __glXSendReplySwap(cl->client, residences, n, 1, GL_FALSE, retval);
d5024 1
a5024 1
__glXDispSwap_BindProgramNV(GLbyte * pc)
d5026 19
a5044 3
    CALL_BindProgramNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                        (GLuint) bswap_CARD32(pc + 4)
                       ));
d5047 2
a5048 2
int
__glXDispSwap_DeleteProgramsNV(__GLXclientState * cl, GLbyte * pc)
d5050 7
a5056 4
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
d5058 11
a5068 3
    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);
d5070 11
a5080 8
        CALL_DeleteProgramsNV(GET_DISPATCH(), (n,
                                               (const GLuint *)
                                               bswap_32_array((uint32_t *) (pc +
                                                                            4),
                                                              0)
                              ));
        error = Success;
    }
d5082 11
a5092 1
    return error;
d5096 1
a5096 1
__glXDispSwap_ExecuteProgramNV(GLbyte * pc)
d5098 7
a5104 6
    CALL_ExecuteProgramNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                           (GLuint) bswap_CARD32(pc + 4),
                                           (const GLfloat *)
                                           bswap_32_array((uint32_t *) (pc + 8),
                                                          4)
                          ));
d5108 1
a5108 1
__glXDispSwap_GenProgramsNV(__GLXclientState * cl, GLbyte * pc)
d5110 2
d5122 1
a5122 1
        GLuint *programs =
d5125 3
a5127 3
        CALL_GenProgramsNV(GET_DISPATCH(), (n, programs));
        (void) bswap_32_array((uint32_t *) programs, n);
        __glXSendReplySwap(cl->client, programs, n, 4, GL_TRUE, 0);
d5135 1
a5135 1
__glXDispSwap_GetProgramParameterdvNV(__GLXclientState * cl, GLbyte * pc)
d5137 2
d5146 1
a5146 1
        GLdouble params[4];
d5148 7
a5154 9
        CALL_GetProgramParameterdvNV(GET_DISPATCH(), ((GLenum)
                                                      bswap_ENUM(pc + 0),
                                                      (GLuint) bswap_CARD32(pc +
                                                                            4),
                                                      (GLenum) bswap_ENUM(pc +
                                                                          8),
                                                      params));
        (void) bswap_64_array((uint64_t *) params, 4);
        __glXSendReplySwap(cl->client, params, 4, 8, GL_FALSE, 0);
d5161 8
d5170 2
a5171 1
__glXDispSwap_GetProgramParameterfvNV(__GLXclientState * cl, GLbyte * pc)
d5173 3
d5183 1
a5183 1
        GLfloat params[4];
d5185 6
a5190 9
        CALL_GetProgramParameterfvNV(GET_DISPATCH(), ((GLenum)
                                                      bswap_ENUM(pc + 0),
                                                      (GLuint) bswap_CARD32(pc +
                                                                            4),
                                                      (GLenum) bswap_ENUM(pc +
                                                                          8),
                                                      params));
        (void) bswap_32_array((uint32_t *) params, 4);
        __glXSendReplySwap(cl->client, params, 4, 4, GL_FALSE, 0);
d5198 1
a5198 1
__glXDispSwap_GetProgramivNV(__GLXclientState * cl, GLbyte * pc)
d5200 2
d5209 1
a5209 1
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
d5211 4
a5214 14
        const GLuint compsize = __glGetProgramivNV_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        CALL_GetProgramivNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             pname, params));
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
d5222 1
a5222 1
__glXDispSwap_GetTrackMatrixivNV(__GLXclientState * cl, GLbyte * pc)
d5224 2
d5233 1
a5233 1
        GLint params[1];
d5235 2
a5236 6
        CALL_GetTrackMatrixivNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                 (GLuint) bswap_CARD32(pc + 4),
                                                 (GLenum) bswap_ENUM(pc + 8),
                                                 params));
        (void) bswap_32_array((uint32_t *) params, 1);
        __glXSendReplySwap(cl->client, params, 1, 4, GL_FALSE, 0);
d5244 1
a5244 1
__glXDispSwap_GetVertexAttribdvNV(__GLXclientState * cl, GLbyte * pc)
d5246 2
d5255 1
a5255 1
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
d5257 2
a5258 14
        const GLuint compsize = __glGetVertexAttribdvNV_size(pname);
        GLdouble answerBuffer[200];
        GLdouble *params =
            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
                                 sizeof(answerBuffer), 8);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        CALL_GetVertexAttribdvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                                  pname, params));
        (void) bswap_64_array((uint64_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 8, GL_FALSE, 0);
d5265 2
a5266 2
int
__glXDispSwap_GetVertexAttribfvNV(__GLXclientState * cl, GLbyte * pc)
d5268 7
a5274 4
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);
d5276 11
a5286 3
    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);
d5288 2
a5289 22
        const GLuint compsize = __glGetVertexAttribfvNV_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        CALL_GetVertexAttribfvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                                  pname, params));
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetVertexAttribivNV(__GLXclientState * cl, GLbyte * pc)
d5291 4
a5294 48
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = (GLenum) bswap_ENUM(pc + 4);

        const GLuint compsize = __glGetVertexAttribivNV_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        CALL_GetVertexAttribivNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                                  pname, params));
        (void) bswap_32_array((uint32_t *) params, compsize);
        __glXSendReplySwap(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_IsProgramNV(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = CALL_IsProgramNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0)
                                  ));
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
d5298 1
a5298 37
__glXDispSwap_LoadProgramNV(GLbyte * pc)
{
    const GLsizei len = (GLsizei) bswap_CARD32(pc + 8);

    CALL_LoadProgramNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                        (GLuint) bswap_CARD32(pc + 4),
                                        len, (const GLubyte *) (pc + 12)
                       ));
}

void
__glXDispSwap_ProgramParameters4dvNV(GLbyte * pc)
{
    const GLsizei num = (GLsizei) bswap_CARD32(pc + 8);

#ifdef __GLX_ALIGN64
    const GLuint cmdlen = 16 + __GLX_PAD((num * 32)) - 4;

    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, cmdlen);
        pc -= 4;
    }
#endif

    CALL_ProgramParameters4dvNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                 (GLuint) bswap_CARD32(pc + 4),
                                                 num,
                                                 (const GLdouble *)
                                                 bswap_64_array((uint64_t *) (pc
                                                                              +
                                                                              12),
                                                                0)
                                ));
}

void
__glXDispSwap_ProgramParameters4fvNV(GLbyte * pc)
d5300 3
a5302 34
    const GLsizei num = (GLsizei) bswap_CARD32(pc + 8);

    CALL_ProgramParameters4fvNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                 (GLuint) bswap_CARD32(pc + 4),
                                                 num,
                                                 (const GLfloat *)
                                                 bswap_32_array((uint32_t *) (pc
                                                                              +
                                                                              12),
                                                                0)
                                ));
}

void
__glXDispSwap_RequestResidentProgramsNV(GLbyte * pc)
{
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

    CALL_RequestResidentProgramsNV(GET_DISPATCH(), (n,
                                                    (const GLuint *)
                                                    bswap_32_array((uint32_t
                                                                    *) (pc + 4),
                                                                   0)
                                   ));
}

void
__glXDispSwap_TrackMatrixNV(GLbyte * pc)
{
    CALL_TrackMatrixNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                        (GLuint) bswap_CARD32(pc + 4),
                                        (GLenum) bswap_ENUM(pc + 8),
                                        (GLenum) bswap_ENUM(pc + 12)
                       ));
d5308 2
d5317 3
a5319 5
    CALL_VertexAttrib1dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                            (const GLdouble *)
                                            bswap_64_array((uint64_t *) (pc +
                                                                         4), 1)
                           ));
d5325 5
a5329 5
    CALL_VertexAttrib1fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                            (const GLfloat *)
                                            bswap_32_array((uint32_t *) (pc +
                                                                         4), 1)
                           ));
d5335 5
a5339 5
    CALL_VertexAttrib1svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                            (const GLshort *)
                                            bswap_16_array((uint16_t *) (pc +
                                                                         4), 1)
                           ));
d5345 2
d5354 3
a5356 5
    CALL_VertexAttrib2dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                            (const GLdouble *)
                                            bswap_64_array((uint64_t *) (pc +
                                                                         4), 2)
                           ));
d5362 5
a5366 5
    CALL_VertexAttrib2fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                            (const GLfloat *)
                                            bswap_32_array((uint32_t *) (pc +
                                                                         4), 2)
                           ));
d5372 5
a5376 5
    CALL_VertexAttrib2svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                            (const GLshort *)
                                            bswap_16_array((uint16_t *) (pc +
                                                                         4), 2)
                           ));
d5382 2
d5391 3
a5393 5
    CALL_VertexAttrib3dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                            (const GLdouble *)
                                            bswap_64_array((uint64_t *) (pc +
                                                                         4), 3)
                           ));
d5399 5
a5403 5
    CALL_VertexAttrib3fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                            (const GLfloat *)
                                            bswap_32_array((uint32_t *) (pc +
                                                                         4), 3)
                           ));
d5409 5
a5413 5
    CALL_VertexAttrib3svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                            (const GLshort *)
                                            bswap_16_array((uint16_t *) (pc +
                                                                         4), 3)
                           ));
d5419 2
d5428 3
a5430 5
    CALL_VertexAttrib4dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                            (const GLdouble *)
                                            bswap_64_array((uint64_t *) (pc +
                                                                         4), 4)
                           ));
d5436 5
a5440 5
    CALL_VertexAttrib4fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                            (const GLfloat *)
                                            bswap_32_array((uint32_t *) (pc +
                                                                         4), 4)
                           ));
d5446 5
a5450 5
    CALL_VertexAttrib4svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                            (const GLshort *)
                                            bswap_16_array((uint16_t *) (pc +
                                                                         4), 4)
                           ));
d5456 4
a5459 3
    CALL_VertexAttrib4ubvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             (const GLubyte *) (pc + 4)
                            ));
d5465 2
d5478 4
a5481 6
    CALL_VertexAttribs1dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             n,
                                             (const GLdouble *)
                                             bswap_64_array((uint64_t *) (pc +
                                                                          8), 0)
                            ));
d5487 2
d5491 4
a5494 6
    CALL_VertexAttribs1fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             n,
                                             (const GLfloat *)
                                             bswap_32_array((uint32_t *) (pc +
                                                                          8), 0)
                            ));
d5500 2
d5504 4
a5507 6
    CALL_VertexAttribs1svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             n,
                                             (const GLshort *)
                                             bswap_16_array((uint16_t *) (pc +
                                                                          8), 0)
                            ));
d5513 2
d5526 4
a5529 6
    CALL_VertexAttribs2dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             n,
                                             (const GLdouble *)
                                             bswap_64_array((uint64_t *) (pc +
                                                                          8), 0)
                            ));
d5535 2
d5539 4
a5542 6
    CALL_VertexAttribs2fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             n,
                                             (const GLfloat *)
                                             bswap_32_array((uint32_t *) (pc +
                                                                          8), 0)
                            ));
d5548 2
d5552 4
a5555 6
    CALL_VertexAttribs2svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             n,
                                             (const GLshort *)
                                             bswap_16_array((uint16_t *) (pc +
                                                                          8), 0)
                            ));
d5561 2
d5574 4
a5577 6
    CALL_VertexAttribs3dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             n,
                                             (const GLdouble *)
                                             bswap_64_array((uint64_t *) (pc +
                                                                          8), 0)
                            ));
d5583 2
d5587 4
a5590 6
    CALL_VertexAttribs3fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             n,
                                             (const GLfloat *)
                                             bswap_32_array((uint32_t *) (pc +
                                                                          8), 0)
                            ));
d5596 2
d5600 4
a5603 6
    CALL_VertexAttribs3svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             n,
                                             (const GLshort *)
                                             bswap_16_array((uint16_t *) (pc +
                                                                          8), 0)
                            ));
d5609 2
d5622 4
a5625 6
    CALL_VertexAttribs4dvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             n,
                                             (const GLdouble *)
                                             bswap_64_array((uint64_t *) (pc +
                                                                          8), 0)
                            ));
d5631 2
d5635 4
a5638 6
    CALL_VertexAttribs4fvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             n,
                                             (const GLfloat *)
                                             bswap_32_array((uint32_t *) (pc +
                                                                          8), 0)
                            ));
d5644 2
d5648 4
a5651 6
    CALL_VertexAttribs4svNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                             n,
                                             (const GLshort *)
                                             bswap_16_array((uint16_t *) (pc +
                                                                          8), 0)
                            ));
d5657 2
d5661 2
a5662 24
    CALL_VertexAttribs4ubvNV(GET_DISPATCH(), ((GLuint) bswap_CARD32(pc + 0),
                                              n, (const GLubyte *) (pc + 8)
                             ));
}

void
__glXDispSwap_PointParameteriNV(GLbyte * pc)
{
    CALL_PointParameteriNV(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                            (GLint) bswap_CARD32(pc + 4)
                           ));
}

void
__glXDispSwap_PointParameterivNV(GLbyte * pc)
{
    const GLenum pname = (GLenum) bswap_ENUM(pc + 0);
    const GLint *params;

    params =
        (const GLint *) bswap_32_array((uint32_t *) (pc + 4),
                                       __glPointParameterivNV_size(pname));

    CALL_PointParameterivNV(GET_DISPATCH(), (pname, params));
d5668 3
a5670 426
    CALL_ActiveStencilFaceEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                              ));
}

int
__glXDispSwap_GetProgramNamedParameterdvNV(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei len = (GLsizei) bswap_CARD32(pc + 4);

        GLdouble params[4];

        CALL_GetProgramNamedParameterdvNV(GET_DISPATCH(), ((GLuint)
                                                           bswap_CARD32(pc + 0),
                                                           len,
                                                           (const GLubyte *) (pc
                                                                              +
                                                                              8),
                                                           params));
        (void) bswap_64_array((uint64_t *) params, 4);
        __glXSendReplySwap(cl->client, params, 4, 8, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetProgramNamedParameterfvNV(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei len = (GLsizei) bswap_CARD32(pc + 4);

        GLfloat params[4];

        CALL_GetProgramNamedParameterfvNV(GET_DISPATCH(), ((GLuint)
                                                           bswap_CARD32(pc + 0),
                                                           len,
                                                           (const GLubyte *) (pc
                                                                              +
                                                                              8),
                                                           params));
        (void) bswap_32_array((uint32_t *) params, 4);
        __glXSendReplySwap(cl->client, params, 4, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_ProgramNamedParameter4dvNV(GLbyte * pc)
{
    const GLsizei len = (GLsizei) bswap_CARD32(pc + 36);

#ifdef __GLX_ALIGN64
    const GLuint cmdlen = 44 + __GLX_PAD(len) - 4;

    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, cmdlen);
        pc -= 4;
    }
#endif

    CALL_ProgramNamedParameter4dvNV(GET_DISPATCH(), ((GLuint)
                                                     bswap_CARD32(pc + 32), len,
                                                     (const GLubyte *) (pc +
                                                                        40),
                                                     (const GLdouble *)
                                                     bswap_64_array((uint64_t
                                                                     *) (pc +
                                                                         0), 4)
                                    ));
}

void
__glXDispSwap_ProgramNamedParameter4fvNV(GLbyte * pc)
{
    const GLsizei len = (GLsizei) bswap_CARD32(pc + 4);

    CALL_ProgramNamedParameter4fvNV(GET_DISPATCH(), ((GLuint)
                                                     bswap_CARD32(pc + 0), len,
                                                     (const GLubyte *) (pc +
                                                                        24),
                                                     (const GLfloat *)
                                                     bswap_32_array((uint32_t
                                                                     *) (pc +
                                                                         8), 4)
                                    ));
}

void
__glXDispSwap_BlendEquationSeparateEXT(GLbyte * pc)
{
    CALL_BlendEquationSeparateEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                   (GLenum) bswap_ENUM(pc + 4)
                                  ));
}

void
__glXDispSwap_BindFramebufferEXT(GLbyte * pc)
{
    CALL_BindFramebufferEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                             (GLuint) bswap_CARD32(pc + 4)
                            ));
}

void
__glXDispSwap_BindRenderbufferEXT(GLbyte * pc)
{
    CALL_BindRenderbufferEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                              (GLuint) bswap_CARD32(pc + 4)
                             ));
}

int
__glXDispSwap_CheckFramebufferStatusEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLenum retval;

        retval = CALL_CheckFramebufferStatusEXT(GET_DISPATCH(), ((GLenum)
                                                                 bswap_ENUM(pc +
                                                                            0)
                                                ));
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_DeleteFramebuffersEXT(GLbyte * pc)
{
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

    CALL_DeleteFramebuffersEXT(GET_DISPATCH(), (n,
                                                (const GLuint *)
                                                bswap_32_array((uint32_t *) (pc
                                                                             +
                                                                             4),
                                                               0)
                               ));
}

void
__glXDispSwap_DeleteRenderbuffersEXT(GLbyte * pc)
{
    const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

    CALL_DeleteRenderbuffersEXT(GET_DISPATCH(), (n,
                                                 (const GLuint *)
                                                 bswap_32_array((uint32_t *) (pc
                                                                              +
                                                                              4),
                                                                0)
                                ));
}

void
__glXDispSwap_FramebufferRenderbufferEXT(GLbyte * pc)
{
    CALL_FramebufferRenderbufferEXT(GET_DISPATCH(), ((GLenum)
                                                     bswap_ENUM(pc + 0),
                                                     (GLenum) bswap_ENUM(pc +
                                                                         4),
                                                     (GLenum) bswap_ENUM(pc +
                                                                         8),
                                                     (GLuint) bswap_CARD32(pc +
                                                                           12)
                                    ));
}

void
__glXDispSwap_FramebufferTexture1DEXT(GLbyte * pc)
{
    CALL_FramebufferTexture1DEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                  (GLenum) bswap_ENUM(pc + 4),
                                                  (GLenum) bswap_ENUM(pc + 8),
                                                  (GLuint) bswap_CARD32(pc +
                                                                        12),
                                                  (GLint) bswap_CARD32(pc + 16)
                                 ));
}

void
__glXDispSwap_FramebufferTexture2DEXT(GLbyte * pc)
{
    CALL_FramebufferTexture2DEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                  (GLenum) bswap_ENUM(pc + 4),
                                                  (GLenum) bswap_ENUM(pc + 8),
                                                  (GLuint) bswap_CARD32(pc +
                                                                        12),
                                                  (GLint) bswap_CARD32(pc + 16)
                                 ));
}

void
__glXDispSwap_FramebufferTexture3DEXT(GLbyte * pc)
{
    CALL_FramebufferTexture3DEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                  (GLenum) bswap_ENUM(pc + 4),
                                                  (GLenum) bswap_ENUM(pc + 8),
                                                  (GLuint) bswap_CARD32(pc +
                                                                        12),
                                                  (GLint) bswap_CARD32(pc + 16),
                                                  (GLint) bswap_CARD32(pc + 20)
                                 ));
}

int
__glXDispSwap_GenFramebuffersEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

        GLuint answerBuffer[200];
        GLuint *framebuffers =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);
        CALL_GenFramebuffersEXT(GET_DISPATCH(), (n, framebuffers));
        (void) bswap_32_array((uint32_t *) framebuffers, n);
        __glXSendReplySwap(cl->client, framebuffers, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GenRenderbuffersEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = (GLsizei) bswap_CARD32(pc + 0);

        GLuint answerBuffer[200];
        GLuint *renderbuffers =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);
        CALL_GenRenderbuffersEXT(GET_DISPATCH(), (n, renderbuffers));
        (void) bswap_32_array((uint32_t *) renderbuffers, n);
        __glXSendReplySwap(cl->client, renderbuffers, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_GenerateMipmapEXT(GLbyte * pc)
{
    CALL_GenerateMipmapEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0)
                           ));
}

int
__glXDispSwap_GetFramebufferAttachmentParameterivEXT(__GLXclientState * cl,
                                                     GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLint params[1];

        CALL_GetFramebufferAttachmentParameterivEXT(GET_DISPATCH(), ((GLenum)
                                                                     bswap_ENUM
                                                                     (pc + 0),
                                                                     (GLenum)
                                                                     bswap_ENUM
                                                                     (pc + 4),
                                                                     (GLenum)
                                                                     bswap_ENUM
                                                                     (pc + 8),
                                                                     params));
        (void) bswap_32_array((uint32_t *) params, 1);
        __glXSendReplySwap(cl->client, params, 1, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetRenderbufferParameterivEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLint params[1];

        CALL_GetRenderbufferParameterivEXT(GET_DISPATCH(), ((GLenum)
                                                            bswap_ENUM(pc + 0),
                                                            (GLenum)
                                                            bswap_ENUM(pc + 4),
                                                            params));
        (void) bswap_32_array((uint32_t *) params, 1);
        __glXSendReplySwap(cl->client, params, 1, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_IsFramebufferEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = CALL_IsFramebufferEXT(GET_DISPATCH(), ((GLuint)
                                                        bswap_CARD32(pc + 0)
                                       ));
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

int
__glXDispSwap_IsRenderbufferEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_CARD32(&req->contextTag), &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = CALL_IsRenderbufferEXT(GET_DISPATCH(), ((GLuint)
                                                         bswap_CARD32(pc + 0)
                                        ));
        __glXSendReplySwap(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDispSwap_RenderbufferStorageEXT(GLbyte * pc)
{
    CALL_RenderbufferStorageEXT(GET_DISPATCH(), ((GLenum) bswap_ENUM(pc + 0),
                                                 (GLenum) bswap_ENUM(pc + 4),
                                                 (GLsizei) bswap_CARD32(pc + 8),
                                                 (GLsizei) bswap_CARD32(pc + 12)
                                ));
}

void
__glXDispSwap_BlitFramebufferEXT(GLbyte * pc)
{
    CALL_BlitFramebufferEXT(GET_DISPATCH(), ((GLint) bswap_CARD32(pc + 0),
                                             (GLint) bswap_CARD32(pc + 4),
                                             (GLint) bswap_CARD32(pc + 8),
                                             (GLint) bswap_CARD32(pc + 12),
                                             (GLint) bswap_CARD32(pc + 16),
                                             (GLint) bswap_CARD32(pc + 20),
                                             (GLint) bswap_CARD32(pc + 24),
                                             (GLint) bswap_CARD32(pc + 28),
                                             (GLbitfield) bswap_CARD32(pc + 32),
                                             (GLenum) bswap_ENUM(pc + 36)
                            ));
}

void
__glXDispSwap_FramebufferTextureLayerEXT(GLbyte * pc)
{
    CALL_FramebufferTextureLayerEXT(GET_DISPATCH(), ((GLenum)
                                                     bswap_ENUM(pc + 0),
                                                     (GLenum) bswap_ENUM(pc +
                                                                         4),
                                                     (GLuint) bswap_CARD32(pc +
                                                                           8),
                                                     (GLint) bswap_CARD32(pc +
                                                                          12),
                                                     (GLint) bswap_CARD32(pc +
                                                                          16)
                                    ));
@


1.4.8.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a3078 3

        if (residences == NULL)
            return BadAlloc;
a3107 3

        if (residences == NULL)
            return BadAlloc;
a3235 2
        if (textures == NULL)
            return BadAlloc;
a3260 2
        if (textures == NULL)
            return BadAlloc;
a5261 2
        if (ids == NULL)
            return BadAlloc;
a5674 2
        if (programs == NULL)
            return BadAlloc;
a6612 2
        if (framebuffers == NULL)
            return BadAlloc;
a6637 2
        if (renderbuffers == NULL)
            return BadAlloc;
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d50 2
a51 2
extern GLboolean __glXErrorOccured( void );
extern void __glXClearErrorOccured( void );
d53 1
a53 1
static const unsigned dummy_answer[2] = {0, 0};
d56 1
a56 1
bswap_CARD32( const void * src )
d58 6
a63 2
    union { uint32_t dst; GLsizei ret; } x;
    x.dst = bswap_32( *(uint32_t *) src );
d68 1
a68 1
bswap_CARD16( const void * src )
d70 6
a75 2
    union { uint16_t dst; GLshort ret; } x;
    x.dst = bswap_16( *(uint16_t *) src );
d80 1
a80 1
bswap_ENUM( const void * src )
d82 18
a99 2
    union { uint32_t dst; GLenum ret; } x;
    x.dst = bswap_32( *(uint32_t *) src );
d104 1
a104 1
bswap_FLOAT64( const void * src )
d106 6
a111 2
    union { uint64_t dst; GLdouble ret; } x;
    x.dst = bswap_64( *(uint64_t *) src );
d116 1
a116 1
bswap_FLOAT32( const void * src )
d118 6
a123 2
    union { uint32_t dst; GLfloat ret; } x;
    x.dst = bswap_32( *(uint32_t *) src );
d128 1
a128 1
bswap_16_array( uint16_t * src, unsigned count )
d130 4
a133 1
    unsigned  i;
a134 2
    for ( i = 0 ; i < count ; i++ ) {
        uint16_t temp = bswap_16( src[i] );
d142 1
a142 1
bswap_32_array( uint32_t * src, unsigned count )
d144 4
a147 1
    unsigned  i;
a148 2
    for ( i = 0 ; i < count ; i++ ) {
        uint32_t temp = bswap_32( src[i] );
d156 1
a156 1
bswap_64_array( uint64_t * src, unsigned count )
d158 4
a161 1
    unsigned  i;
a162 2
    for ( i = 0 ; i < count ; i++ ) {
        uint64_t temp = bswap_64( src[i] );
d169 2
a170 1
int __glXDispSwap_NewList(__GLXclientState *cl, GLbyte *pc)
d172 1
a172 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d174 2
a175 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d178 4
a181 5
    if ( cx != NULL ) {
        CALL_NewList( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 ),
             (GLenum  )bswap_ENUM   ( pc +  4 )
        ) );
d188 2
a189 1
int __glXDispSwap_EndList(__GLXclientState *cl, GLbyte *pc)
d191 1
a191 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d193 2
a194 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d197 2
a198 2
    if ( cx != NULL ) {
        CALL_EndList( GET_DISPATCH(), () );
d205 2
a206 1
void __glXDispSwap_CallList(GLbyte * pc)
d208 2
a209 3
    CALL_CallList( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 )
    ) );
d212 2
a213 1
void __glXDispSwap_CallLists(GLbyte * pc)
d215 3
a217 3
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
    const GLenum type =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLvoid * lists;
d219 1
a219 1
    switch(type) {
d225 2
a226 1
        lists = (const GLvoid *) (pc + 8); break;
d229 2
a230 1
        lists = (const GLvoid *) bswap_16_array( (uint16_t *) (pc + 8), n ); break;
d234 2
a235 1
        lists = (const GLvoid *) bswap_32_array( (uint32_t *) (pc + 8), n ); break;
d240 1
a240 5
    CALL_CallLists( GET_DISPATCH(), (
        n,
        type,
        lists
    ) );
d243 2
a244 1
int __glXDispSwap_DeleteLists(__GLXclientState *cl, GLbyte *pc)
d246 1
a246 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d248 2
a249 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d252 4
a255 5
    if ( cx != NULL ) {
        CALL_DeleteLists( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 ),
             (GLsizei )bswap_CARD32 ( pc +  4 )
        ) );
d262 2
a263 1
int __glXDispSwap_GenLists(__GLXclientState *cl, GLbyte *pc)
d265 1
a265 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d267 2
a268 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d271 1
a271 1
    if ( cx != NULL ) {
d273 3
a275 3
        retval = CALL_GenLists( GET_DISPATCH(), (
             (GLsizei )bswap_CARD32 ( pc +  0 )
        ) );
d283 2
a284 1
void __glXDispSwap_ListBase(GLbyte * pc)
d286 2
a287 3
    CALL_ListBase( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 )
    ) );
d290 2
a291 1
void __glXDispSwap_Begin(GLbyte * pc)
d293 2
a294 3
    CALL_Begin( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d297 2
a298 1
void __glXDispSwap_Bitmap(GLbyte * pc)
d300 2
a301 2
    const GLubyte * const bitmap = (const GLubyte *) (pc + 44);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
d303 13
a315 5
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
d317 6
a322 9
    CALL_Bitmap( GET_DISPATCH(), (
         (GLsizei )bswap_CARD32 ( pc + 20 ),
         (GLsizei )bswap_CARD32 ( pc + 24 ),
         (GLfloat )bswap_FLOAT32( pc + 28 ),
         (GLfloat )bswap_FLOAT32( pc + 32 ),
         (GLfloat )bswap_FLOAT32( pc + 36 ),
         (GLfloat )bswap_FLOAT32( pc + 40 ),
        bitmap
    ) );
d325 2
a326 1
void __glXDispSwap_Color3bv(GLbyte * pc)
d328 2
a329 3
    CALL_Color3bv( GET_DISPATCH(), (
         (const GLbyte *)(pc +  0)
    ) );
d332 2
a333 1
void __glXDispSwap_Color3dv(GLbyte * pc)
d336 2
a337 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d342 3
a344 3
    CALL_Color3dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 3 )
    ) );
d347 2
a348 1
void __glXDispSwap_Color3fv(GLbyte * pc)
d350 3
a352 3
    CALL_Color3fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d355 2
a356 1
void __glXDispSwap_Color3iv(GLbyte * pc)
d358 3
a360 3
    CALL_Color3iv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d363 2
a364 1
void __glXDispSwap_Color3sv(GLbyte * pc)
d366 3
a368 3
    CALL_Color3sv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
    ) );
d371 2
a372 1
void __glXDispSwap_Color3ubv(GLbyte * pc)
d374 2
a375 3
    CALL_Color3ubv( GET_DISPATCH(), (
         (const GLubyte *)(pc +  0)
    ) );
d378 2
a379 1
void __glXDispSwap_Color3uiv(GLbyte * pc)
d381 3
a383 3
    CALL_Color3uiv( GET_DISPATCH(), (
         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d386 2
a387 1
void __glXDispSwap_Color3usv(GLbyte * pc)
d389 3
a391 3
    CALL_Color3usv( GET_DISPATCH(), (
         (const GLushort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
    ) );
d394 2
a395 1
void __glXDispSwap_Color4bv(GLbyte * pc)
d397 2
a398 3
    CALL_Color4bv( GET_DISPATCH(), (
         (const GLbyte *)(pc +  0)
    ) );
d401 2
a402 1
void __glXDispSwap_Color4dv(GLbyte * pc)
d405 2
a406 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 32);
d411 3
a413 3
    CALL_Color4dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 4 )
    ) );
d416 2
a417 1
void __glXDispSwap_Color4fv(GLbyte * pc)
d419 3
a421 3
    CALL_Color4fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
    ) );
d424 2
a425 1
void __glXDispSwap_Color4iv(GLbyte * pc)
d427 3
a429 3
    CALL_Color4iv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
    ) );
d432 2
a433 1
void __glXDispSwap_Color4sv(GLbyte * pc)
d435 3
a437 3
    CALL_Color4sv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 4 )
    ) );
d440 2
a441 1
void __glXDispSwap_Color4ubv(GLbyte * pc)
d443 2
a444 3
    CALL_Color4ubv( GET_DISPATCH(), (
         (const GLubyte *)(pc +  0)
    ) );
d447 2
a448 1
void __glXDispSwap_Color4uiv(GLbyte * pc)
d450 3
a452 3
    CALL_Color4uiv( GET_DISPATCH(), (
         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
    ) );
d455 2
a456 1
void __glXDispSwap_Color4usv(GLbyte * pc)
d458 3
a460 3
    CALL_Color4usv( GET_DISPATCH(), (
         (const GLushort *)bswap_16_array( (uint16_t *) (pc +  0), 4 )
    ) );
d463 2
a464 1
void __glXDispSwap_EdgeFlagv(GLbyte * pc)
d466 2
a467 3
    CALL_EdgeFlagv( GET_DISPATCH(), (
         (const GLboolean *)(pc +  0)
    ) );
d470 2
a471 1
void __glXDispSwap_End(GLbyte * pc)
d473 1
a473 1
    CALL_End( GET_DISPATCH(), () );
d476 2
a477 1
void __glXDispSwap_Indexdv(GLbyte * pc)
d480 2
a481 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 8);
d486 3
a488 3
    CALL_Indexdv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 1 )
    ) );
d491 2
a492 1
void __glXDispSwap_Indexfv(GLbyte * pc)
d494 3
a496 3
    CALL_Indexfv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 1 )
    ) );
d499 2
a500 1
void __glXDispSwap_Indexiv(GLbyte * pc)
d502 3
a504 3
    CALL_Indexiv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 1 )
    ) );
d507 2
a508 1
void __glXDispSwap_Indexsv(GLbyte * pc)
d510 3
a512 3
    CALL_Indexsv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 1 )
    ) );
d515 2
a516 1
void __glXDispSwap_Normal3bv(GLbyte * pc)
d518 2
a519 3
    CALL_Normal3bv( GET_DISPATCH(), (
         (const GLbyte *)(pc +  0)
    ) );
d522 2
a523 1
void __glXDispSwap_Normal3dv(GLbyte * pc)
d526 2
a527 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d532 3
a534 3
    CALL_Normal3dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 3 )
    ) );
d537 2
a538 1
void __glXDispSwap_Normal3fv(GLbyte * pc)
d540 3
a542 3
    CALL_Normal3fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d545 2
a546 1
void __glXDispSwap_Normal3iv(GLbyte * pc)
d548 3
a550 3
    CALL_Normal3iv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d553 2
a554 1
void __glXDispSwap_Normal3sv(GLbyte * pc)
d556 3
a558 3
    CALL_Normal3sv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
    ) );
d561 2
a562 1
void __glXDispSwap_RasterPos2dv(GLbyte * pc)
d565 2
a566 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 16);
d571 3
a573 3
    CALL_RasterPos2dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 2 )
    ) );
d576 2
a577 1
void __glXDispSwap_RasterPos2fv(GLbyte * pc)
d579 3
a581 3
    CALL_RasterPos2fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 2 )
    ) );
d584 2
a585 1
void __glXDispSwap_RasterPos2iv(GLbyte * pc)
d587 3
a589 3
    CALL_RasterPos2iv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 2 )
    ) );
d592 2
a593 1
void __glXDispSwap_RasterPos2sv(GLbyte * pc)
d595 3
a597 3
    CALL_RasterPos2sv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 2 )
    ) );
d600 2
a601 1
void __glXDispSwap_RasterPos3dv(GLbyte * pc)
d604 2
a605 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d610 3
a612 3
    CALL_RasterPos3dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 3 )
    ) );
d615 2
a616 1
void __glXDispSwap_RasterPos3fv(GLbyte * pc)
d618 3
a620 3
    CALL_RasterPos3fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d623 2
a624 1
void __glXDispSwap_RasterPos3iv(GLbyte * pc)
d626 3
a628 3
    CALL_RasterPos3iv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d631 2
a632 1
void __glXDispSwap_RasterPos3sv(GLbyte * pc)
d634 3
a636 3
    CALL_RasterPos3sv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
    ) );
d639 2
a640 1
void __glXDispSwap_RasterPos4dv(GLbyte * pc)
d643 2
a644 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 32);
d649 3
a651 3
    CALL_RasterPos4dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 4 )
    ) );
d654 2
a655 1
void __glXDispSwap_RasterPos4fv(GLbyte * pc)
d657 3
a659 3
    CALL_RasterPos4fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
    ) );
d662 2
a663 1
void __glXDispSwap_RasterPos4iv(GLbyte * pc)
d665 3
a667 3
    CALL_RasterPos4iv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
    ) );
d670 2
a671 1
void __glXDispSwap_RasterPos4sv(GLbyte * pc)
d673 3
a675 3
    CALL_RasterPos4sv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 4 )
    ) );
d678 2
a679 1
void __glXDispSwap_Rectdv(GLbyte * pc)
d682 2
a683 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 32);
d688 5
a692 4
    CALL_Rectdv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 2 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc + 16), 2 )
    ) );
d695 2
a696 1
void __glXDispSwap_Rectfv(GLbyte * pc)
d698 5
a702 4
    CALL_Rectfv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 2 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 2 )
    ) );
d705 2
a706 1
void __glXDispSwap_Rectiv(GLbyte * pc)
d708 5
a712 4
    CALL_Rectiv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 2 ),
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  8), 2 )
    ) );
d715 2
a716 1
void __glXDispSwap_Rectsv(GLbyte * pc)
d718 5
a722 4
    CALL_Rectsv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 2 ),
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 2 )
    ) );
d725 2
a726 1
void __glXDispSwap_TexCoord1dv(GLbyte * pc)
d729 2
a730 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 8);
d735 3
a737 3
    CALL_TexCoord1dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 1 )
    ) );
d740 2
a741 1
void __glXDispSwap_TexCoord1fv(GLbyte * pc)
d743 3
a745 3
    CALL_TexCoord1fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 1 )
    ) );
d748 2
a749 1
void __glXDispSwap_TexCoord1iv(GLbyte * pc)
d751 3
a753 3
    CALL_TexCoord1iv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 1 )
    ) );
d756 2
a757 1
void __glXDispSwap_TexCoord1sv(GLbyte * pc)
d759 3
a761 3
    CALL_TexCoord1sv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 1 )
    ) );
d764 2
a765 1
void __glXDispSwap_TexCoord2dv(GLbyte * pc)
d768 2
a769 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 16);
d774 3
a776 3
    CALL_TexCoord2dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 2 )
    ) );
d779 2
a780 1
void __glXDispSwap_TexCoord2fv(GLbyte * pc)
d782 3
a784 3
    CALL_TexCoord2fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 2 )
    ) );
d787 2
a788 1
void __glXDispSwap_TexCoord2iv(GLbyte * pc)
d790 3
a792 3
    CALL_TexCoord2iv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 2 )
    ) );
d795 2
a796 1
void __glXDispSwap_TexCoord2sv(GLbyte * pc)
d798 3
a800 3
    CALL_TexCoord2sv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 2 )
    ) );
d803 2
a804 1
void __glXDispSwap_TexCoord3dv(GLbyte * pc)
d807 2
a808 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d813 3
a815 3
    CALL_TexCoord3dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 3 )
    ) );
d818 2
a819 1
void __glXDispSwap_TexCoord3fv(GLbyte * pc)
d821 3
a823 3
    CALL_TexCoord3fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d826 2
a827 1
void __glXDispSwap_TexCoord3iv(GLbyte * pc)
d829 3
a831 3
    CALL_TexCoord3iv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d834 2
a835 1
void __glXDispSwap_TexCoord3sv(GLbyte * pc)
d837 3
a839 3
    CALL_TexCoord3sv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
    ) );
d842 2
a843 1
void __glXDispSwap_TexCoord4dv(GLbyte * pc)
d846 2
a847 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 32);
d852 3
a854 3
    CALL_TexCoord4dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 4 )
    ) );
d857 2
a858 1
void __glXDispSwap_TexCoord4fv(GLbyte * pc)
d860 3
a862 3
    CALL_TexCoord4fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
    ) );
d865 2
a866 1
void __glXDispSwap_TexCoord4iv(GLbyte * pc)
d868 3
a870 3
    CALL_TexCoord4iv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
    ) );
d873 2
a874 1
void __glXDispSwap_TexCoord4sv(GLbyte * pc)
d876 3
a878 3
    CALL_TexCoord4sv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 4 )
    ) );
d881 2
a882 1
void __glXDispSwap_Vertex2dv(GLbyte * pc)
d885 2
a886 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 16);
d891 3
a893 3
    CALL_Vertex2dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 2 )
    ) );
d896 2
a897 1
void __glXDispSwap_Vertex2fv(GLbyte * pc)
d899 3
a901 3
    CALL_Vertex2fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 2 )
    ) );
d904 2
a905 1
void __glXDispSwap_Vertex2iv(GLbyte * pc)
d907 3
a909 3
    CALL_Vertex2iv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 2 )
    ) );
d912 2
a913 1
void __glXDispSwap_Vertex2sv(GLbyte * pc)
d915 3
a917 3
    CALL_Vertex2sv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 2 )
    ) );
d920 2
a921 1
void __glXDispSwap_Vertex3dv(GLbyte * pc)
d924 2
a925 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d930 3
a932 3
    CALL_Vertex3dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 3 )
    ) );
d935 2
a936 1
void __glXDispSwap_Vertex3fv(GLbyte * pc)
d938 3
a940 3
    CALL_Vertex3fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d943 2
a944 1
void __glXDispSwap_Vertex3iv(GLbyte * pc)
d946 3
a948 3
    CALL_Vertex3iv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d951 2
a952 1
void __glXDispSwap_Vertex3sv(GLbyte * pc)
d954 3
a956 3
    CALL_Vertex3sv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
    ) );
d959 2
a960 1
void __glXDispSwap_Vertex4dv(GLbyte * pc)
d963 2
a964 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 32);
d969 3
a971 3
    CALL_Vertex4dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 4 )
    ) );
d974 2
a975 1
void __glXDispSwap_Vertex4fv(GLbyte * pc)
d977 3
a979 3
    CALL_Vertex4fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
    ) );
d982 2
a983 1
void __glXDispSwap_Vertex4iv(GLbyte * pc)
d985 3
a987 3
    CALL_Vertex4iv( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 4 )
    ) );
d990 2
a991 1
void __glXDispSwap_Vertex4sv(GLbyte * pc)
d993 3
a995 3
    CALL_Vertex4sv( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 4 )
    ) );
d998 2
a999 1
void __glXDispSwap_ClipPlane(GLbyte * pc)
d1002 2
a1003 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 36);
d1008 4
a1011 4
    CALL_ClipPlane( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc + 32 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 4 )
    ) );
d1014 2
a1015 1
void __glXDispSwap_ColorMaterial(GLbyte * pc)
d1017 3
a1019 4
    CALL_ColorMaterial( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 )
    ) );
d1022 2
a1023 1
void __glXDispSwap_CullFace(GLbyte * pc)
d1025 2
a1026 3
    CALL_CullFace( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d1029 2
a1030 1
void __glXDispSwap_Fogf(GLbyte * pc)
d1032 3
a1034 4
    CALL_Fogf( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLfloat )bswap_FLOAT32( pc +  4 )
    ) );
d1037 2
a1038 1
void __glXDispSwap_Fogfv(GLbyte * pc)
d1040 2
a1041 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
    const GLfloat * params;
d1043 3
a1045 1
    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 4), __glFogfv_size(pname) );
d1047 1
a1047 4
    CALL_Fogfv( GET_DISPATCH(), (
        pname,
        params
    ) );
d1050 2
a1051 1
void __glXDispSwap_Fogi(GLbyte * pc)
d1053 3
a1055 4
    CALL_Fogi( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 )
    ) );
d1058 2
a1059 1
void __glXDispSwap_Fogiv(GLbyte * pc)
d1061 2
a1062 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
    const GLint * params;
d1064 3
a1066 1
    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 4), __glFogiv_size(pname) );
d1068 1
a1068 4
    CALL_Fogiv( GET_DISPATCH(), (
        pname,
        params
    ) );
d1071 2
a1072 1
void __glXDispSwap_FrontFace(GLbyte * pc)
d1074 2
a1075 3
    CALL_FrontFace( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d1078 2
a1079 1
void __glXDispSwap_Hint(GLbyte * pc)
d1081 3
a1083 4
    CALL_Hint( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 )
    ) );
d1086 2
a1087 1
void __glXDispSwap_Lightf(GLbyte * pc)
d1089 4
a1092 5
    CALL_Lightf( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLfloat )bswap_FLOAT32( pc +  8 )
    ) );
d1095 2
a1096 1
void __glXDispSwap_Lightfv(GLbyte * pc)
d1098 2
a1099 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLfloat * params;
d1101 3
a1103 1
    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 8), __glLightfv_size(pname) );
d1105 1
a1105 5
    CALL_Lightfv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
d1108 2
a1109 1
void __glXDispSwap_Lighti(GLbyte * pc)
d1111 4
a1114 5
    CALL_Lighti( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 )
    ) );
d1117 2
a1118 1
void __glXDispSwap_Lightiv(GLbyte * pc)
d1120 2
a1121 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLint * params;
d1123 3
a1125 1
    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 8), __glLightiv_size(pname) );
d1127 1
a1127 5
    CALL_Lightiv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
d1130 2
a1131 1
void __glXDispSwap_LightModelf(GLbyte * pc)
d1133 3
a1135 4
    CALL_LightModelf( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLfloat )bswap_FLOAT32( pc +  4 )
    ) );
d1138 2
a1139 1
void __glXDispSwap_LightModelfv(GLbyte * pc)
d1141 2
a1142 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
    const GLfloat * params;
d1144 3
a1146 1
    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 4), __glLightModelfv_size(pname) );
d1148 1
a1148 4
    CALL_LightModelfv( GET_DISPATCH(), (
        pname,
        params
    ) );
d1151 2
a1152 1
void __glXDispSwap_LightModeli(GLbyte * pc)
d1154 3
a1156 4
    CALL_LightModeli( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 )
    ) );
d1159 2
a1160 1
void __glXDispSwap_LightModeliv(GLbyte * pc)
d1162 2
a1163 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
    const GLint * params;
d1165 3
a1167 1
    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 4), __glLightModeliv_size(pname) );
d1169 1
a1169 4
    CALL_LightModeliv( GET_DISPATCH(), (
        pname,
        params
    ) );
d1172 2
a1173 1
void __glXDispSwap_LineStipple(GLbyte * pc)
d1175 3
a1177 4
    CALL_LineStipple( GET_DISPATCH(), (
         (GLint   )bswap_CARD32 ( pc +  0 ),
         (GLushort)bswap_CARD16 ( pc +  4 )
    ) );
d1180 2
a1181 1
void __glXDispSwap_LineWidth(GLbyte * pc)
d1183 2
a1184 3
    CALL_LineWidth( GET_DISPATCH(), (
         (GLfloat )bswap_FLOAT32( pc +  0 )
    ) );
d1187 2
a1188 1
void __glXDispSwap_Materialf(GLbyte * pc)
d1190 4
a1193 5
    CALL_Materialf( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLfloat )bswap_FLOAT32( pc +  8 )
    ) );
d1196 2
a1197 1
void __glXDispSwap_Materialfv(GLbyte * pc)
d1199 2
a1200 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLfloat * params;
d1202 3
a1204 1
    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 8), __glMaterialfv_size(pname) );
d1206 2
a1207 5
    CALL_Materialfv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
d1210 2
a1211 1
void __glXDispSwap_Materiali(GLbyte * pc)
d1213 4
a1216 5
    CALL_Materiali( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 )
    ) );
d1219 2
a1220 1
void __glXDispSwap_Materialiv(GLbyte * pc)
d1222 2
a1223 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLint * params;
d1225 3
a1227 1
    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 8), __glMaterialiv_size(pname) );
d1229 2
a1230 5
    CALL_Materialiv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
d1233 2
a1234 1
void __glXDispSwap_PointSize(GLbyte * pc)
d1236 2
a1237 3
    CALL_PointSize( GET_DISPATCH(), (
         (GLfloat )bswap_FLOAT32( pc +  0 )
    ) );
d1240 2
a1241 1
void __glXDispSwap_PolygonMode(GLbyte * pc)
d1243 3
a1245 4
    CALL_PolygonMode( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 )
    ) );
d1248 2
a1249 1
void __glXDispSwap_PolygonStipple(GLbyte * pc)
d1251 2
a1252 2
    const GLubyte * const mask = (const GLubyte *) (pc + 20);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
d1254 13
a1266 5
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
d1268 1
a1268 3
    CALL_PolygonStipple( GET_DISPATCH(), (
        mask
    ) );
d1271 2
a1272 1
void __glXDispSwap_Scissor(GLbyte * pc)
d1274 5
a1278 6
    CALL_Scissor( GET_DISPATCH(), (
         (GLint   )bswap_CARD32 ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLsizei )bswap_CARD32 ( pc +  8 ),
         (GLsizei )bswap_CARD32 ( pc + 12 )
    ) );
d1281 2
a1282 1
void __glXDispSwap_ShadeModel(GLbyte * pc)
d1284 2
a1285 3
    CALL_ShadeModel( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d1288 2
a1289 1
void __glXDispSwap_TexParameterf(GLbyte * pc)
d1291 4
a1294 5
    CALL_TexParameterf( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLfloat )bswap_FLOAT32( pc +  8 )
    ) );
d1297 2
a1298 1
void __glXDispSwap_TexParameterfv(GLbyte * pc)
d1300 2
a1301 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLfloat * params;
d1303 3
a1305 1
    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 8), __glTexParameterfv_size(pname) );
d1307 2
a1308 5
    CALL_TexParameterfv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
d1311 2
a1312 1
void __glXDispSwap_TexParameteri(GLbyte * pc)
d1314 4
a1317 5
    CALL_TexParameteri( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 )
    ) );
d1320 2
a1321 1
void __glXDispSwap_TexParameteriv(GLbyte * pc)
d1323 2
a1324 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLint * params;
d1326 3
a1328 1
    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 8), __glTexParameteriv_size(pname) );
d1330 2
a1331 5
    CALL_TexParameteriv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
d1334 2
a1335 1
void __glXDispSwap_TexImage1D(GLbyte * pc)
d1337 2
a1338 2
    const GLvoid * const pixels = (const GLvoid *) (pc + 52);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
d1340 14
a1353 6
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
d1355 7
a1361 10
    CALL_TexImage1D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc + 20 ),
         (GLint   )bswap_CARD32 ( pc + 24 ),
         (GLint   )bswap_CARD32 ( pc + 28 ),
         (GLsizei )bswap_CARD32 ( pc + 32 ),
         (GLint   )bswap_CARD32 ( pc + 40 ),
         (GLenum  )bswap_ENUM   ( pc + 44 ),
         (GLenum  )bswap_ENUM   ( pc + 48 ),
        pixels
    ) );
d1364 2
a1365 1
void __glXDispSwap_TexImage2D(GLbyte * pc)
d1367 2
a1368 2
    const GLvoid * const pixels = (const GLvoid *) (pc + 52);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
d1370 14
a1383 6
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
d1385 8
a1392 11
    CALL_TexImage2D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc + 20 ),
         (GLint   )bswap_CARD32 ( pc + 24 ),
         (GLint   )bswap_CARD32 ( pc + 28 ),
         (GLsizei )bswap_CARD32 ( pc + 32 ),
         (GLsizei )bswap_CARD32 ( pc + 36 ),
         (GLint   )bswap_CARD32 ( pc + 40 ),
         (GLenum  )bswap_ENUM   ( pc + 44 ),
         (GLenum  )bswap_ENUM   ( pc + 48 ),
        pixels
    ) );
d1395 2
a1396 1
void __glXDispSwap_TexEnvf(GLbyte * pc)
d1398 4
a1401 5
    CALL_TexEnvf( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLfloat )bswap_FLOAT32( pc +  8 )
    ) );
d1404 2
a1405 1
void __glXDispSwap_TexEnvfv(GLbyte * pc)
d1407 2
a1408 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLfloat * params;
d1410 3
a1412 1
    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 8), __glTexEnvfv_size(pname) );
d1414 1
a1414 5
    CALL_TexEnvfv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
d1417 2
a1418 1
void __glXDispSwap_TexEnvi(GLbyte * pc)
d1420 4
a1423 5
    CALL_TexEnvi( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 )
    ) );
d1426 2
a1427 1
void __glXDispSwap_TexEnviv(GLbyte * pc)
d1429 2
a1430 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLint * params;
d1432 3
a1434 1
    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 8), __glTexEnviv_size(pname) );
d1436 1
a1436 5
    CALL_TexEnviv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
d1439 2
a1440 1
void __glXDispSwap_TexGend(GLbyte * pc)
d1443 2
a1444 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 16);
d1449 4
a1452 5
    CALL_TexGend( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  8 ),
         (GLenum  )bswap_ENUM   ( pc + 12 ),
         (GLdouble)bswap_FLOAT64( pc +  0 )
    ) );
d1455 2
a1456 1
void __glXDispSwap_TexGendv(GLbyte * pc)
d1458 2
a1459 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLdouble * params;
d1464 3
a1466 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, cmdlen);
d1471 3
a1473 1
    params = (const GLdouble *) bswap_64_array( (uint64_t *) (pc + 8), __glTexGendv_size(pname) );
d1475 1
a1475 5
    CALL_TexGendv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
d1478 2
a1479 1
void __glXDispSwap_TexGenf(GLbyte * pc)
d1481 4
a1484 5
    CALL_TexGenf( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLfloat )bswap_FLOAT32( pc +  8 )
    ) );
d1487 2
a1488 1
void __glXDispSwap_TexGenfv(GLbyte * pc)
d1490 2
a1491 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLfloat * params;
d1493 3
a1495 1
    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 8), __glTexGenfv_size(pname) );
d1497 1
a1497 5
    CALL_TexGenfv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
d1500 2
a1501 1
void __glXDispSwap_TexGeni(GLbyte * pc)
d1503 4
a1506 5
    CALL_TexGeni( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 )
    ) );
d1509 2
a1510 1
void __glXDispSwap_TexGeniv(GLbyte * pc)
d1512 2
a1513 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLint * params;
d1515 3
a1517 1
    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 8), __glTexGeniv_size(pname) );
d1519 1
a1519 5
    CALL_TexGeniv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
d1522 2
a1523 1
void __glXDispSwap_InitNames(GLbyte * pc)
d1525 1
a1525 1
    CALL_InitNames( GET_DISPATCH(), () );
d1528 2
a1529 1
void __glXDispSwap_LoadName(GLbyte * pc)
d1531 2
a1532 3
    CALL_LoadName( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 )
    ) );
d1535 2
a1536 1
void __glXDispSwap_PassThrough(GLbyte * pc)
d1538 2
a1539 3
    CALL_PassThrough( GET_DISPATCH(), (
         (GLfloat )bswap_FLOAT32( pc +  0 )
    ) );
d1542 2
a1543 1
void __glXDispSwap_PopName(GLbyte * pc)
d1545 1
a1545 1
    CALL_PopName( GET_DISPATCH(), () );
d1548 2
a1549 1
void __glXDispSwap_PushName(GLbyte * pc)
d1551 2
a1552 3
    CALL_PushName( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 )
    ) );
d1555 2
a1556 1
void __glXDispSwap_DrawBuffer(GLbyte * pc)
d1558 2
a1559 3
    CALL_DrawBuffer( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d1562 2
a1563 1
void __glXDispSwap_Clear(GLbyte * pc)
d1565 2
a1566 3
    CALL_Clear( GET_DISPATCH(), (
         (GLbitfield)bswap_CARD32 ( pc +  0 )
    ) );
d1569 2
a1570 1
void __glXDispSwap_ClearAccum(GLbyte * pc)
d1572 5
a1576 6
    CALL_ClearAccum( GET_DISPATCH(), (
         (GLfloat )bswap_FLOAT32( pc +  0 ),
         (GLfloat )bswap_FLOAT32( pc +  4 ),
         (GLfloat )bswap_FLOAT32( pc +  8 ),
         (GLfloat )bswap_FLOAT32( pc + 12 )
    ) );
d1579 2
a1580 1
void __glXDispSwap_ClearIndex(GLbyte * pc)
d1582 2
a1583 3
    CALL_ClearIndex( GET_DISPATCH(), (
         (GLfloat )bswap_FLOAT32( pc +  0 )
    ) );
d1586 2
a1587 1
void __glXDispSwap_ClearColor(GLbyte * pc)
d1589 5
a1593 6
    CALL_ClearColor( GET_DISPATCH(), (
         (GLclampf)bswap_FLOAT32( pc +  0 ),
         (GLclampf)bswap_FLOAT32( pc +  4 ),
         (GLclampf)bswap_FLOAT32( pc +  8 ),
         (GLclampf)bswap_FLOAT32( pc + 12 )
    ) );
d1596 2
a1597 1
void __glXDispSwap_ClearStencil(GLbyte * pc)
d1599 2
a1600 3
    CALL_ClearStencil( GET_DISPATCH(), (
         (GLint   )bswap_CARD32 ( pc +  0 )
    ) );
d1603 2
a1604 1
void __glXDispSwap_ClearDepth(GLbyte * pc)
d1607 2
a1608 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 8);
d1613 2
a1614 3
    CALL_ClearDepth( GET_DISPATCH(), (
         (GLclampd)bswap_FLOAT64( pc +  0 )
    ) );
d1617 2
a1618 1
void __glXDispSwap_StencilMask(GLbyte * pc)
d1620 2
a1621 3
    CALL_StencilMask( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 )
    ) );
d1624 2
a1625 1
void __glXDispSwap_ColorMask(GLbyte * pc)
d1627 5
a1631 6
    CALL_ColorMask( GET_DISPATCH(), (
        *(GLboolean *)(pc +  0),
        *(GLboolean *)(pc +  1),
        *(GLboolean *)(pc +  2),
        *(GLboolean *)(pc +  3)
    ) );
d1634 2
a1635 1
void __glXDispSwap_DepthMask(GLbyte * pc)
d1637 2
a1638 3
    CALL_DepthMask( GET_DISPATCH(), (
        *(GLboolean *)(pc +  0)
    ) );
d1641 2
a1642 1
void __glXDispSwap_IndexMask(GLbyte * pc)
d1644 2
a1645 3
    CALL_IndexMask( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 )
    ) );
d1648 2
a1649 1
void __glXDispSwap_Accum(GLbyte * pc)
d1651 3
a1653 4
    CALL_Accum( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLfloat )bswap_FLOAT32( pc +  4 )
    ) );
d1656 2
a1657 1
void __glXDispSwap_Disable(GLbyte * pc)
d1659 2
a1660 3
    CALL_Disable( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d1663 2
a1664 1
void __glXDispSwap_Enable(GLbyte * pc)
d1666 2
a1667 3
    CALL_Enable( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d1670 2
a1671 1
void __glXDispSwap_PopAttrib(GLbyte * pc)
d1673 1
a1673 1
    CALL_PopAttrib( GET_DISPATCH(), () );
d1676 2
a1677 1
void __glXDispSwap_PushAttrib(GLbyte * pc)
d1679 2
a1680 3
    CALL_PushAttrib( GET_DISPATCH(), (
         (GLbitfield)bswap_CARD32 ( pc +  0 )
    ) );
d1683 2
a1684 1
void __glXDispSwap_MapGrid1d(GLbyte * pc)
d1687 2
a1688 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 20);
d1693 4
a1696 5
    CALL_MapGrid1d( GET_DISPATCH(), (
         (GLint   )bswap_CARD32 ( pc + 16 ),
         (GLdouble)bswap_FLOAT64( pc +  0 ),
         (GLdouble)bswap_FLOAT64( pc +  8 )
    ) );
d1699 2
a1700 1
void __glXDispSwap_MapGrid1f(GLbyte * pc)
d1702 4
a1705 5
    CALL_MapGrid1f( GET_DISPATCH(), (
         (GLint   )bswap_CARD32 ( pc +  0 ),
         (GLfloat )bswap_FLOAT32( pc +  4 ),
         (GLfloat )bswap_FLOAT32( pc +  8 )
    ) );
d1708 2
a1709 1
void __glXDispSwap_MapGrid2d(GLbyte * pc)
d1712 2
a1713 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 40);
d1718 7
a1724 8
    CALL_MapGrid2d( GET_DISPATCH(), (
         (GLint   )bswap_CARD32 ( pc + 32 ),
         (GLdouble)bswap_FLOAT64( pc +  0 ),
         (GLdouble)bswap_FLOAT64( pc +  8 ),
         (GLint   )bswap_CARD32 ( pc + 36 ),
         (GLdouble)bswap_FLOAT64( pc + 16 ),
         (GLdouble)bswap_FLOAT64( pc + 24 )
    ) );
d1727 2
a1728 1
void __glXDispSwap_MapGrid2f(GLbyte * pc)
d1730 7
a1736 8
    CALL_MapGrid2f( GET_DISPATCH(), (
         (GLint   )bswap_CARD32 ( pc +  0 ),
         (GLfloat )bswap_FLOAT32( pc +  4 ),
         (GLfloat )bswap_FLOAT32( pc +  8 ),
         (GLint   )bswap_CARD32 ( pc + 12 ),
         (GLfloat )bswap_FLOAT32( pc + 16 ),
         (GLfloat )bswap_FLOAT32( pc + 20 )
    ) );
d1739 2
a1740 1
void __glXDispSwap_EvalCoord1dv(GLbyte * pc)
d1743 2
a1744 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 8);
d1749 3
a1751 3
    CALL_EvalCoord1dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 1 )
    ) );
d1754 2
a1755 1
void __glXDispSwap_EvalCoord1fv(GLbyte * pc)
d1757 3
a1759 3
    CALL_EvalCoord1fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 1 )
    ) );
d1762 2
a1763 1
void __glXDispSwap_EvalCoord2dv(GLbyte * pc)
d1766 2
a1767 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 16);
d1772 3
a1774 3
    CALL_EvalCoord2dv( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 2 )
    ) );
d1777 2
a1778 1
void __glXDispSwap_EvalCoord2fv(GLbyte * pc)
d1780 3
a1782 3
    CALL_EvalCoord2fv( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 2 )
    ) );
d1785 2
a1786 1
void __glXDispSwap_EvalMesh1(GLbyte * pc)
d1788 4
a1791 5
    CALL_EvalMesh1( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 )
    ) );
d1794 2
a1795 1
void __glXDispSwap_EvalPoint1(GLbyte * pc)
d1797 2
a1798 3
    CALL_EvalPoint1( GET_DISPATCH(), (
         (GLint   )bswap_CARD32 ( pc +  0 )
    ) );
d1801 2
a1802 1
void __glXDispSwap_EvalMesh2(GLbyte * pc)
d1804 6
a1809 7
    CALL_EvalMesh2( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 ),
         (GLint   )bswap_CARD32 ( pc + 12 ),
         (GLint   )bswap_CARD32 ( pc + 16 )
    ) );
d1812 2
a1813 1
void __glXDispSwap_EvalPoint2(GLbyte * pc)
d1815 3
a1817 4
    CALL_EvalPoint2( GET_DISPATCH(), (
         (GLint   )bswap_CARD32 ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 )
    ) );
d1820 2
a1821 1
void __glXDispSwap_AlphaFunc(GLbyte * pc)
d1823 3
a1825 4
    CALL_AlphaFunc( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLclampf)bswap_FLOAT32( pc +  4 )
    ) );
d1828 2
a1829 1
void __glXDispSwap_BlendFunc(GLbyte * pc)
d1831 3
a1833 4
    CALL_BlendFunc( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 )
    ) );
d1836 2
a1837 1
void __glXDispSwap_LogicOp(GLbyte * pc)
d1839 2
a1840 3
    CALL_LogicOp( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d1843 2
a1844 1
void __glXDispSwap_StencilFunc(GLbyte * pc)
d1846 4
a1849 5
    CALL_StencilFunc( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLuint  )bswap_CARD32 ( pc +  8 )
    ) );
d1852 2
a1853 1
void __glXDispSwap_StencilOp(GLbyte * pc)
d1855 4
a1858 5
    CALL_StencilOp( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLenum  )bswap_ENUM   ( pc +  8 )
    ) );
d1861 2
a1862 1
void __glXDispSwap_DepthFunc(GLbyte * pc)
d1864 2
a1865 3
    CALL_DepthFunc( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d1868 2
a1869 1
void __glXDispSwap_PixelZoom(GLbyte * pc)
d1871 3
a1873 4
    CALL_PixelZoom( GET_DISPATCH(), (
         (GLfloat )bswap_FLOAT32( pc +  0 ),
         (GLfloat )bswap_FLOAT32( pc +  4 )
    ) );
d1876 2
a1877 1
void __glXDispSwap_PixelTransferf(GLbyte * pc)
d1879 3
a1881 4
    CALL_PixelTransferf( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLfloat )bswap_FLOAT32( pc +  4 )
    ) );
d1884 2
a1885 1
void __glXDispSwap_PixelTransferi(GLbyte * pc)
d1887 3
a1889 4
    CALL_PixelTransferi( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 )
    ) );
d1892 2
a1893 1
int __glXDispSwap_PixelStoref(__GLXclientState *cl, GLbyte *pc)
d1895 1
a1895 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1897 2
a1898 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d1901 4
a1904 5
    if ( cx != NULL ) {
        CALL_PixelStoref( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
             (GLfloat )bswap_FLOAT32( pc +  4 )
        ) );
d1911 2
a1912 1
int __glXDispSwap_PixelStorei(__GLXclientState *cl, GLbyte *pc)
d1914 1
a1914 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1916 2
a1917 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d1920 4
a1923 5
    if ( cx != NULL ) {
        CALL_PixelStorei( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
             (GLint   )bswap_CARD32 ( pc +  4 )
        ) );
d1930 2
a1931 1
void __glXDispSwap_PixelMapfv(GLbyte * pc)
d1933 1
a1933 1
    const GLsizei mapsize =  (GLsizei )bswap_CARD32 ( pc +  4 );
d1935 5
a1939 5
    CALL_PixelMapfv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        mapsize,
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 0 )
    ) );
d1942 2
a1943 1
void __glXDispSwap_PixelMapuiv(GLbyte * pc)
d1945 1
a1945 1
    const GLsizei mapsize =  (GLsizei )bswap_CARD32 ( pc +  4 );
d1947 5
a1951 5
    CALL_PixelMapuiv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        mapsize,
         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  8), 0 )
    ) );
d1954 2
a1955 1
void __glXDispSwap_PixelMapusv(GLbyte * pc)
d1957 1
a1957 1
    const GLsizei mapsize =  (GLsizei )bswap_CARD32 ( pc +  4 );
d1959 5
a1963 5
    CALL_PixelMapusv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        mapsize,
         (const GLushort *)bswap_16_array( (uint16_t *) (pc +  8), 0 )
    ) );
d1966 2
a1967 1
void __glXDispSwap_ReadBuffer(GLbyte * pc)
d1969 2
a1970 3
    CALL_ReadBuffer( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d1973 2
a1974 1
void __glXDispSwap_CopyPixels(GLbyte * pc)
d1976 6
a1981 7
    CALL_CopyPixels( GET_DISPATCH(), (
         (GLint   )bswap_CARD32 ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLsizei )bswap_CARD32 ( pc +  8 ),
         (GLsizei )bswap_CARD32 ( pc + 12 ),
         (GLenum  )bswap_ENUM   ( pc + 16 )
    ) );
d1984 2
a1985 1
void __glXDispSwap_DrawPixels(GLbyte * pc)
d1987 2
a1988 2
    const GLvoid * const pixels = (const GLvoid *) (pc + 36);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
d1990 14
a2003 6
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
d2005 4
a2008 7
    CALL_DrawPixels( GET_DISPATCH(), (
         (GLsizei )bswap_CARD32 ( pc + 20 ),
         (GLsizei )bswap_CARD32 ( pc + 24 ),
         (GLenum  )bswap_ENUM   ( pc + 28 ),
         (GLenum  )bswap_ENUM   ( pc + 32 ),
        pixels
    ) );
d2011 2
a2012 1
int __glXDispSwap_GetBooleanv(__GLXclientState *cl, GLbyte *pc)
d2014 1
a2014 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2016 2
a2017 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2020 2
a2021 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
d2025 3
a2027 1
        GLboolean * params = __glXGetAnswerBuffer(cl, compsize, answerBuffer, sizeof(answerBuffer), 1);
d2029 2
a2030 1
        if (params == NULL) return BadAlloc;
d2033 1
a2033 4
        CALL_GetBooleanv( GET_DISPATCH(), (
            pname,
            params
        ) );
d2041 2
a2042 1
int __glXDispSwap_GetClipPlane(__GLXclientState *cl, GLbyte *pc)
d2044 1
a2044 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2046 2
a2047 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2050 1
a2050 1
    if ( cx != NULL ) {
d2052 4
a2055 5
        CALL_GetClipPlane( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            equation
        ) );
        (void) bswap_64_array( (uint64_t *) equation, 4 );
d2063 2
a2064 1
int __glXDispSwap_GetDoublev(__GLXclientState *cl, GLbyte *pc)
d2066 1
a2066 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2068 2
a2069 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2072 2
a2073 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
d2077 3
a2079 1
        GLdouble * params = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);
d2081 2
a2082 1
        if (params == NULL) return BadAlloc;
d2085 2
a2086 5
        CALL_GetDoublev( GET_DISPATCH(), (
            pname,
            params
        ) );
        (void) bswap_64_array( (uint64_t *) params, compsize );
d2094 2
a2095 1
int __glXDispSwap_GetError(__GLXclientState *cl, GLbyte *pc)
d2097 1
a2097 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2099 2
a2100 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2103 1
a2103 1
    if ( cx != NULL ) {
d2105 2
a2106 1
        retval = CALL_GetError( GET_DISPATCH(), () );
d2114 2
a2115 1
int __glXDispSwap_GetFloatv(__GLXclientState *cl, GLbyte *pc)
d2117 1
a2117 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2119 2
a2120 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2123 2
a2124 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
d2128 3
a2130 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2132 2
a2133 1
        if (params == NULL) return BadAlloc;
d2136 2
a2137 5
        CALL_GetFloatv( GET_DISPATCH(), (
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d2145 2
a2146 1
int __glXDispSwap_GetIntegerv(__GLXclientState *cl, GLbyte *pc)
d2148 1
a2148 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2150 2
a2151 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2154 2
a2155 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
d2159 3
a2161 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2163 2
a2164 1
        if (params == NULL) return BadAlloc;
d2167 2
a2168 5
        CALL_GetIntegerv( GET_DISPATCH(), (
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d2176 2
a2177 1
int __glXDispSwap_GetLightfv(__GLXclientState *cl, GLbyte *pc)
d2179 1
a2179 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2181 2
a2182 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2185 2
a2186 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d2190 3
a2192 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2194 2
a2195 1
        if (params == NULL) return BadAlloc;
d2198 3
a2200 6
        CALL_GetLightfv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d2208 2
a2209 1
int __glXDispSwap_GetLightiv(__GLXclientState *cl, GLbyte *pc)
d2211 1
a2211 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2213 2
a2214 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2217 2
a2218 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d2222 3
a2224 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2226 2
a2227 1
        if (params == NULL) return BadAlloc;
d2230 3
a2232 6
        CALL_GetLightiv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d2240 2
a2241 1
int __glXDispSwap_GetMapdv(__GLXclientState *cl, GLbyte *pc)
d2243 1
a2243 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2245 2
a2246 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2249 3
a2251 3
    if ( cx != NULL ) {
        const GLenum target =  (GLenum  )bswap_ENUM   ( pc +  0 );
        const GLenum query =  (GLenum  )bswap_ENUM   ( pc +  4 );
d2253 1
a2253 1
        const GLuint compsize = __glGetMapdv_size(target,query);
d2255 3
a2257 1
        GLdouble * v = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);
d2259 2
a2260 1
        if (v == NULL) return BadAlloc;
d2263 2
a2264 6
        CALL_GetMapdv( GET_DISPATCH(), (
            target,
            query,
            v
        ) );
        (void) bswap_64_array( (uint64_t *) v, compsize );
d2272 2
a2273 1
int __glXDispSwap_GetMapfv(__GLXclientState *cl, GLbyte *pc)
d2275 1
a2275 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2277 2
a2278 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2281 3
a2283 3
    if ( cx != NULL ) {
        const GLenum target =  (GLenum  )bswap_ENUM   ( pc +  0 );
        const GLenum query =  (GLenum  )bswap_ENUM   ( pc +  4 );
d2285 1
a2285 1
        const GLuint compsize = __glGetMapfv_size(target,query);
d2287 3
a2289 1
        GLfloat * v = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2291 2
a2292 1
        if (v == NULL) return BadAlloc;
d2295 2
a2296 6
        CALL_GetMapfv( GET_DISPATCH(), (
            target,
            query,
            v
        ) );
        (void) bswap_32_array( (uint32_t *) v, compsize );
d2304 2
a2305 1
int __glXDispSwap_GetMapiv(__GLXclientState *cl, GLbyte *pc)
d2307 1
a2307 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2309 2
a2310 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2313 3
a2315 3
    if ( cx != NULL ) {
        const GLenum target =  (GLenum  )bswap_ENUM   ( pc +  0 );
        const GLenum query =  (GLenum  )bswap_ENUM   ( pc +  4 );
d2317 1
a2317 1
        const GLuint compsize = __glGetMapiv_size(target,query);
d2319 3
a2321 1
        GLint * v = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2323 2
a2324 1
        if (v == NULL) return BadAlloc;
d2327 2
a2328 6
        CALL_GetMapiv( GET_DISPATCH(), (
            target,
            query,
            v
        ) );
        (void) bswap_32_array( (uint32_t *) v, compsize );
d2336 2
a2337 1
int __glXDispSwap_GetMaterialfv(__GLXclientState *cl, GLbyte *pc)
d2339 1
a2339 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2341 2
a2342 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2345 2
a2346 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d2350 3
a2352 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2354 2
a2355 1
        if (params == NULL) return BadAlloc;
d2358 3
a2360 6
        CALL_GetMaterialfv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d2368 2
a2369 1
int __glXDispSwap_GetMaterialiv(__GLXclientState *cl, GLbyte *pc)
d2371 1
a2371 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2373 2
a2374 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2377 2
a2378 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d2382 3
a2384 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2386 2
a2387 1
        if (params == NULL) return BadAlloc;
d2390 3
a2392 6
        CALL_GetMaterialiv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d2400 2
a2401 1
int __glXDispSwap_GetPixelMapfv(__GLXclientState *cl, GLbyte *pc)
d2403 1
a2403 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2405 2
a2406 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2409 2
a2410 2
    if ( cx != NULL ) {
        const GLenum map =  (GLenum  )bswap_ENUM   ( pc +  0 );
d2414 3
a2416 1
        GLfloat * values = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2418 2
a2419 1
        if (values == NULL) return BadAlloc;
d2422 2
a2423 5
        CALL_GetPixelMapfv( GET_DISPATCH(), (
            map,
            values
        ) );
        (void) bswap_32_array( (uint32_t *) values, compsize );
d2431 2
a2432 1
int __glXDispSwap_GetPixelMapuiv(__GLXclientState *cl, GLbyte *pc)
d2434 1
a2434 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2436 2
a2437 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2440 2
a2441 2
    if ( cx != NULL ) {
        const GLenum map =  (GLenum  )bswap_ENUM   ( pc +  0 );
d2445 3
a2447 1
        GLuint * values = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2449 2
a2450 1
        if (values == NULL) return BadAlloc;
d2453 2
a2454 5
        CALL_GetPixelMapuiv( GET_DISPATCH(), (
            map,
            values
        ) );
        (void) bswap_32_array( (uint32_t *) values, compsize );
d2462 2
a2463 1
int __glXDispSwap_GetPixelMapusv(__GLXclientState *cl, GLbyte *pc)
d2465 1
a2465 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2467 2
a2468 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2471 2
a2472 2
    if ( cx != NULL ) {
        const GLenum map =  (GLenum  )bswap_ENUM   ( pc +  0 );
d2476 3
a2478 1
        GLushort * values = __glXGetAnswerBuffer(cl, compsize * 2, answerBuffer, sizeof(answerBuffer), 2);
d2480 2
a2481 1
        if (values == NULL) return BadAlloc;
d2484 2
a2485 5
        CALL_GetPixelMapusv( GET_DISPATCH(), (
            map,
            values
        ) );
        (void) bswap_16_array( (uint16_t *) values, compsize );
d2493 2
a2494 1
int __glXDispSwap_GetTexEnvfv(__GLXclientState *cl, GLbyte *pc)
d2496 1
a2496 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2498 2
a2499 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2502 2
a2503 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d2507 3
a2509 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2511 2
a2512 1
        if (params == NULL) return BadAlloc;
d2515 3
a2517 6
        CALL_GetTexEnvfv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d2525 2
a2526 1
int __glXDispSwap_GetTexEnviv(__GLXclientState *cl, GLbyte *pc)
d2528 1
a2528 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2530 2
a2531 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2534 2
a2535 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d2539 3
a2541 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2543 2
a2544 1
        if (params == NULL) return BadAlloc;
d2547 3
a2549 6
        CALL_GetTexEnviv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d2557 2
a2558 1
int __glXDispSwap_GetTexGendv(__GLXclientState *cl, GLbyte *pc)
d2560 1
a2560 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2562 2
a2563 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2566 2
a2567 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d2571 3
a2573 1
        GLdouble * params = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);
d2575 2
a2576 1
        if (params == NULL) return BadAlloc;
d2579 3
a2581 6
        CALL_GetTexGendv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_64_array( (uint64_t *) params, compsize );
d2589 2
a2590 1
int __glXDispSwap_GetTexGenfv(__GLXclientState *cl, GLbyte *pc)
d2592 1
a2592 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2594 2
a2595 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2598 2
a2599 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d2603 3
a2605 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2607 2
a2608 1
        if (params == NULL) return BadAlloc;
d2611 3
a2613 6
        CALL_GetTexGenfv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d2621 2
a2622 1
int __glXDispSwap_GetTexGeniv(__GLXclientState *cl, GLbyte *pc)
d2624 1
a2624 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2626 2
a2627 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2630 2
a2631 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d2635 3
a2637 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2639 2
a2640 1
        if (params == NULL) return BadAlloc;
d2643 3
a2645 6
        CALL_GetTexGeniv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d2653 2
a2654 1
int __glXDispSwap_GetTexParameterfv(__GLXclientState *cl, GLbyte *pc)
d2656 1
a2656 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2658 2
a2659 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2662 2
a2663 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d2667 3
a2669 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2671 2
a2672 1
        if (params == NULL) return BadAlloc;
d2675 3
a2677 6
        CALL_GetTexParameterfv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d2685 2
a2686 1
int __glXDispSwap_GetTexParameteriv(__GLXclientState *cl, GLbyte *pc)
d2688 1
a2688 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2690 2
a2691 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2694 2
a2695 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d2699 3
a2701 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2703 2
a2704 1
        if (params == NULL) return BadAlloc;
d2707 3
a2709 6
        CALL_GetTexParameteriv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d2717 2
a2718 1
int __glXDispSwap_GetTexLevelParameterfv(__GLXclientState *cl, GLbyte *pc)
d2720 1
a2720 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2722 2
a2723 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2726 2
a2727 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  8 );
d2731 6
a2736 3
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d2739 6
a2744 7
        CALL_GetTexLevelParameterfv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
             (GLint   )bswap_CARD32 ( pc +  4 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d2752 2
a2753 1
int __glXDispSwap_GetTexLevelParameteriv(__GLXclientState *cl, GLbyte *pc)
d2755 1
a2755 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2757 2
a2758 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2761 2
a2762 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  8 );
d2766 6
a2771 3
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d2774 6
a2779 7
        CALL_GetTexLevelParameteriv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
             (GLint   )bswap_CARD32 ( pc +  4 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d2787 2
a2788 1
int __glXDispSwap_IsEnabled(__GLXclientState *cl, GLbyte *pc)
d2790 1
a2790 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2792 2
a2793 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2796 1
a2796 1
    if ( cx != NULL ) {
d2798 3
a2800 3
        retval = CALL_IsEnabled( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 )
        ) );
d2808 2
a2809 1
int __glXDispSwap_IsList(__GLXclientState *cl, GLbyte *pc)
d2811 1
a2811 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2813 2
a2814 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d2817 1
a2817 1
    if ( cx != NULL ) {
d2819 3
a2821 3
        retval = CALL_IsList( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 )
        ) );
d2829 2
a2830 1
void __glXDispSwap_DepthRange(GLbyte * pc)
d2833 2
a2834 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 16);
d2839 3
a2841 4
    CALL_DepthRange( GET_DISPATCH(), (
         (GLclampd)bswap_FLOAT64( pc +  0 ),
         (GLclampd)bswap_FLOAT64( pc +  8 )
    ) );
d2844 2
a2845 1
void __glXDispSwap_Frustum(GLbyte * pc)
d2848 2
a2849 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 48);
d2854 7
a2860 8
    CALL_Frustum( GET_DISPATCH(), (
         (GLdouble)bswap_FLOAT64( pc +  0 ),
         (GLdouble)bswap_FLOAT64( pc +  8 ),
         (GLdouble)bswap_FLOAT64( pc + 16 ),
         (GLdouble)bswap_FLOAT64( pc + 24 ),
         (GLdouble)bswap_FLOAT64( pc + 32 ),
         (GLdouble)bswap_FLOAT64( pc + 40 )
    ) );
d2863 2
a2864 1
void __glXDispSwap_LoadIdentity(GLbyte * pc)
d2866 1
a2866 1
    CALL_LoadIdentity( GET_DISPATCH(), () );
d2869 2
a2870 1
void __glXDispSwap_LoadMatrixf(GLbyte * pc)
d2872 3
a2874 3
    CALL_LoadMatrixf( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 16 )
    ) );
d2877 2
a2878 1
void __glXDispSwap_LoadMatrixd(GLbyte * pc)
d2881 2
a2882 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 128);
d2887 3
a2889 3
    CALL_LoadMatrixd( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 16 )
    ) );
d2892 2
a2893 1
void __glXDispSwap_MatrixMode(GLbyte * pc)
d2895 2
a2896 3
    CALL_MatrixMode( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d2899 2
a2900 1
void __glXDispSwap_MultMatrixf(GLbyte * pc)
d2902 3
a2904 3
    CALL_MultMatrixf( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 16 )
    ) );
d2907 2
a2908 1
void __glXDispSwap_MultMatrixd(GLbyte * pc)
d2911 2
a2912 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 128);
d2917 3
a2919 3
    CALL_MultMatrixd( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 16 )
    ) );
d2922 2
a2923 1
void __glXDispSwap_Ortho(GLbyte * pc)
d2926 2
a2927 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 48);
d2932 7
a2938 8
    CALL_Ortho( GET_DISPATCH(), (
         (GLdouble)bswap_FLOAT64( pc +  0 ),
         (GLdouble)bswap_FLOAT64( pc +  8 ),
         (GLdouble)bswap_FLOAT64( pc + 16 ),
         (GLdouble)bswap_FLOAT64( pc + 24 ),
         (GLdouble)bswap_FLOAT64( pc + 32 ),
         (GLdouble)bswap_FLOAT64( pc + 40 )
    ) );
d2941 2
a2942 1
void __glXDispSwap_PopMatrix(GLbyte * pc)
d2944 1
a2944 1
    CALL_PopMatrix( GET_DISPATCH(), () );
d2947 2
a2948 1
void __glXDispSwap_PushMatrix(GLbyte * pc)
d2950 1
a2950 1
    CALL_PushMatrix( GET_DISPATCH(), () );
d2953 2
a2954 1
void __glXDispSwap_Rotated(GLbyte * pc)
d2957 2
a2958 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 32);
d2963 5
a2967 6
    CALL_Rotated( GET_DISPATCH(), (
         (GLdouble)bswap_FLOAT64( pc +  0 ),
         (GLdouble)bswap_FLOAT64( pc +  8 ),
         (GLdouble)bswap_FLOAT64( pc + 16 ),
         (GLdouble)bswap_FLOAT64( pc + 24 )
    ) );
d2970 2
a2971 1
void __glXDispSwap_Rotatef(GLbyte * pc)
d2973 5
a2977 6
    CALL_Rotatef( GET_DISPATCH(), (
         (GLfloat )bswap_FLOAT32( pc +  0 ),
         (GLfloat )bswap_FLOAT32( pc +  4 ),
         (GLfloat )bswap_FLOAT32( pc +  8 ),
         (GLfloat )bswap_FLOAT32( pc + 12 )
    ) );
d2980 2
a2981 1
void __glXDispSwap_Scaled(GLbyte * pc)
d2984 2
a2985 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d2990 4
a2993 5
    CALL_Scaled( GET_DISPATCH(), (
         (GLdouble)bswap_FLOAT64( pc +  0 ),
         (GLdouble)bswap_FLOAT64( pc +  8 ),
         (GLdouble)bswap_FLOAT64( pc + 16 )
    ) );
d2996 2
a2997 1
void __glXDispSwap_Scalef(GLbyte * pc)
d2999 4
a3002 5
    CALL_Scalef( GET_DISPATCH(), (
         (GLfloat )bswap_FLOAT32( pc +  0 ),
         (GLfloat )bswap_FLOAT32( pc +  4 ),
         (GLfloat )bswap_FLOAT32( pc +  8 )
    ) );
d3005 2
a3006 1
void __glXDispSwap_Translated(GLbyte * pc)
d3009 2
a3010 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d3015 4
a3018 5
    CALL_Translated( GET_DISPATCH(), (
         (GLdouble)bswap_FLOAT64( pc +  0 ),
         (GLdouble)bswap_FLOAT64( pc +  8 ),
         (GLdouble)bswap_FLOAT64( pc + 16 )
    ) );
d3021 2
a3022 1
void __glXDispSwap_Translatef(GLbyte * pc)
d3024 4
a3027 5
    CALL_Translatef( GET_DISPATCH(), (
         (GLfloat )bswap_FLOAT32( pc +  0 ),
         (GLfloat )bswap_FLOAT32( pc +  4 ),
         (GLfloat )bswap_FLOAT32( pc +  8 )
    ) );
d3030 2
a3031 1
void __glXDispSwap_Viewport(GLbyte * pc)
d3033 5
a3037 6
    CALL_Viewport( GET_DISPATCH(), (
         (GLint   )bswap_CARD32 ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLsizei )bswap_CARD32 ( pc +  8 ),
         (GLsizei )bswap_CARD32 ( pc + 12 )
    ) );
d3040 2
a3041 1
void __glXDispSwap_BindTexture(GLbyte * pc)
d3043 3
a3045 4
    CALL_BindTexture( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLuint  )bswap_CARD32 ( pc +  4 )
    ) );
d3048 2
a3049 1
void __glXDispSwap_Indexubv(GLbyte * pc)
d3051 2
a3052 3
    CALL_Indexubv( GET_DISPATCH(), (
         (const GLubyte *)(pc +  0)
    ) );
d3055 2
a3056 1
void __glXDispSwap_PolygonOffset(GLbyte * pc)
d3058 3
a3060 4
    CALL_PolygonOffset( GET_DISPATCH(), (
         (GLfloat )bswap_FLOAT32( pc +  0 ),
         (GLfloat )bswap_FLOAT32( pc +  4 )
    ) );
d3063 2
a3064 1
int __glXDispSwap_AreTexturesResident(__GLXclientState *cl, GLbyte *pc)
d3066 1
a3066 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3068 2
a3069 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3072 2
a3073 2
    if ( cx != NULL ) {
        const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d3077 8
a3084 6
        GLboolean * residences = __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);
        retval = CALL_AreTexturesResident( GET_DISPATCH(), (
            n,
             (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 ),
            residences
        ) );
d3092 2
a3093 1
int __glXDispSwap_AreTexturesResidentEXT(__GLXclientState *cl, GLbyte *pc)
d3095 1
a3095 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3097 2
a3098 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3101 2
a3102 2
    if ( cx != NULL ) {
        const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d3106 8
a3113 6
        GLboolean * residences = __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);
        retval = CALL_AreTexturesResident( GET_DISPATCH(), (
            n,
             (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 ),
            residences
        ) );
d3121 2
a3122 1
void __glXDispSwap_CopyTexImage1D(GLbyte * pc)
d3124 8
a3131 9
    CALL_CopyTexImage1D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLenum  )bswap_ENUM   ( pc +  8 ),
         (GLint   )bswap_CARD32 ( pc + 12 ),
         (GLint   )bswap_CARD32 ( pc + 16 ),
         (GLsizei )bswap_CARD32 ( pc + 20 ),
         (GLint   )bswap_CARD32 ( pc + 24 )
    ) );
d3134 2
a3135 1
void __glXDispSwap_CopyTexImage2D(GLbyte * pc)
d3137 9
a3145 10
    CALL_CopyTexImage2D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLenum  )bswap_ENUM   ( pc +  8 ),
         (GLint   )bswap_CARD32 ( pc + 12 ),
         (GLint   )bswap_CARD32 ( pc + 16 ),
         (GLsizei )bswap_CARD32 ( pc + 20 ),
         (GLsizei )bswap_CARD32 ( pc + 24 ),
         (GLint   )bswap_CARD32 ( pc + 28 )
    ) );
d3148 2
a3149 1
void __glXDispSwap_CopyTexSubImage1D(GLbyte * pc)
d3151 7
a3157 8
    CALL_CopyTexSubImage1D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 ),
         (GLint   )bswap_CARD32 ( pc + 12 ),
         (GLint   )bswap_CARD32 ( pc + 16 ),
         (GLsizei )bswap_CARD32 ( pc + 20 )
    ) );
d3160 2
a3161 1
void __glXDispSwap_CopyTexSubImage2D(GLbyte * pc)
d3163 9
a3171 10
    CALL_CopyTexSubImage2D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 ),
         (GLint   )bswap_CARD32 ( pc + 12 ),
         (GLint   )bswap_CARD32 ( pc + 16 ),
         (GLint   )bswap_CARD32 ( pc + 20 ),
         (GLsizei )bswap_CARD32 ( pc + 24 ),
         (GLsizei )bswap_CARD32 ( pc + 28 )
    ) );
d3174 2
a3175 1
int __glXDispSwap_DeleteTextures(__GLXclientState *cl, GLbyte *pc)
d3177 1
a3177 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3179 2
a3180 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3183 2
a3184 2
    if ( cx != NULL ) {
        const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d3186 5
a3190 4
        CALL_DeleteTextures( GET_DISPATCH(), (
            n,
             (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
        ) );
d3197 2
a3198 1
int __glXDispSwap_DeleteTexturesEXT(__GLXclientState *cl, GLbyte *pc)
d3200 1
a3200 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3202 2
a3203 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3206 2
a3207 2
    if ( cx != NULL ) {
        const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d3209 5
a3213 4
        CALL_DeleteTextures( GET_DISPATCH(), (
            n,
             (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
        ) );
d3220 2
a3221 1
int __glXDispSwap_GenTextures(__GLXclientState *cl, GLbyte *pc)
d3223 1
a3223 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3225 2
a3226 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3229 2
a3230 2
    if ( cx != NULL ) {
        const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d3233 5
a3237 6
        GLuint * textures = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
        CALL_GenTextures( GET_DISPATCH(), (
            n,
            textures
        ) );
        (void) bswap_32_array( (uint32_t *) textures, n );
d3245 2
a3246 1
int __glXDispSwap_GenTexturesEXT(__GLXclientState *cl, GLbyte *pc)
d3248 1
a3248 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3250 2
a3251 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3254 2
a3255 2
    if ( cx != NULL ) {
        const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d3258 5
a3262 6
        GLuint * textures = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
        CALL_GenTextures( GET_DISPATCH(), (
            n,
            textures
        ) );
        (void) bswap_32_array( (uint32_t *) textures, n );
d3270 2
a3271 1
int __glXDispSwap_IsTexture(__GLXclientState *cl, GLbyte *pc)
d3273 1
a3273 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3275 2
a3276 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3279 1
a3279 1
    if ( cx != NULL ) {
d3281 3
a3283 3
        retval = CALL_IsTexture( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 )
        ) );
d3291 2
a3292 1
int __glXDispSwap_IsTextureEXT(__GLXclientState *cl, GLbyte *pc)
d3294 1
a3294 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3296 2
a3297 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3300 1
a3300 1
    if ( cx != NULL ) {
d3302 3
a3304 3
        retval = CALL_IsTexture( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 )
        ) );
d3312 2
a3313 12
void __glXDispSwap_PrioritizeTextures(GLbyte * pc)
{
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );

    CALL_PrioritizeTextures( GET_DISPATCH(), (
        n,
         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 ),
         (const GLclampf *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
    ) );
}

void __glXDispSwap_TexSubImage1D(GLbyte * pc)
d3315 1
a3315 2
    const GLvoid * const pixels = (const GLvoid *) (pc + 56);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
d3317 157
a3473 19
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );

    CALL_TexSubImage1D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc + 20 ),
         (GLint   )bswap_CARD32 ( pc + 24 ),
         (GLint   )bswap_CARD32 ( pc + 28 ),
         (GLsizei )bswap_CARD32 ( pc + 36 ),
         (GLenum  )bswap_ENUM   ( pc + 44 ),
         (GLenum  )bswap_ENUM   ( pc + 48 ),
        pixels
    ) );
}

void __glXDispSwap_TexSubImage2D(GLbyte * pc)
d3475 1
a3475 104
    const GLvoid * const pixels = (const GLvoid *) (pc + 56);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);

    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );

    CALL_TexSubImage2D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc + 20 ),
         (GLint   )bswap_CARD32 ( pc + 24 ),
         (GLint   )bswap_CARD32 ( pc + 28 ),
         (GLint   )bswap_CARD32 ( pc + 32 ),
         (GLsizei )bswap_CARD32 ( pc + 36 ),
         (GLsizei )bswap_CARD32 ( pc + 40 ),
         (GLenum  )bswap_ENUM   ( pc + 44 ),
         (GLenum  )bswap_ENUM   ( pc + 48 ),
        pixels
    ) );
}

void __glXDispSwap_BlendColor(GLbyte * pc)
{
    CALL_BlendColor( GET_DISPATCH(), (
         (GLclampf)bswap_FLOAT32( pc +  0 ),
         (GLclampf)bswap_FLOAT32( pc +  4 ),
         (GLclampf)bswap_FLOAT32( pc +  8 ),
         (GLclampf)bswap_FLOAT32( pc + 12 )
    ) );
}

void __glXDispSwap_BlendEquation(GLbyte * pc)
{
    CALL_BlendEquation( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
}

void __glXDispSwap_ColorTable(GLbyte * pc)
{
    const GLvoid * const table = (const GLvoid *) (pc + 40);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);

    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );

    CALL_ColorTable( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc + 20 ),
         (GLenum  )bswap_ENUM   ( pc + 24 ),
         (GLsizei )bswap_CARD32 ( pc + 28 ),
         (GLenum  )bswap_ENUM   ( pc + 32 ),
         (GLenum  )bswap_ENUM   ( pc + 36 ),
        table
    ) );
}

void __glXDispSwap_ColorTableParameterfv(GLbyte * pc)
{
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLfloat * params;

    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 8), __glColorTableParameterfv_size(pname) );

    CALL_ColorTableParameterfv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
}

void __glXDispSwap_ColorTableParameteriv(GLbyte * pc)
{
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLint * params;

    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 8), __glColorTableParameteriv_size(pname) );

    CALL_ColorTableParameteriv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
}

void __glXDispSwap_CopyColorTable(GLbyte * pc)
{
    CALL_CopyColorTable( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 ),
         (GLint   )bswap_CARD32 ( pc + 12 ),
         (GLsizei )bswap_CARD32 ( pc + 16 )
    ) );
}

int __glXDispSwap_GetColorTableParameterfv(__GLXclientState *cl, GLbyte *pc)
{
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3477 2
a3478 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3481 2
a3482 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d3486 6
a3491 3
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d3494 4
a3497 6
        CALL_GetColorTableParameterfv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d3505 2
a3506 1
int __glXDispSwap_GetColorTableParameterfvSGI(__GLXclientState *cl, GLbyte *pc)
d3508 1
a3508 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3510 2
a3511 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3514 2
a3515 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d3519 6
a3524 3
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d3527 4
a3530 6
        CALL_GetColorTableParameterfv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d3538 2
a3539 1
int __glXDispSwap_GetColorTableParameteriv(__GLXclientState *cl, GLbyte *pc)
d3541 1
a3541 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3543 2
a3544 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3547 2
a3548 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d3552 6
a3557 3
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d3560 4
a3563 6
        CALL_GetColorTableParameteriv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d3571 2
a3572 1
int __glXDispSwap_GetColorTableParameterivSGI(__GLXclientState *cl, GLbyte *pc)
d3574 1
a3574 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3576 2
a3577 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3580 2
a3581 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d3585 6
a3590 3
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d3593 4
a3596 6
        CALL_GetColorTableParameteriv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d3604 2
a3605 34
void __glXDispSwap_ColorSubTable(GLbyte * pc)
{
    const GLvoid * const data = (const GLvoid *) (pc + 40);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);

    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );

    CALL_ColorSubTable( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc + 20 ),
         (GLsizei )bswap_CARD32 ( pc + 24 ),
         (GLsizei )bswap_CARD32 ( pc + 28 ),
         (GLenum  )bswap_ENUM   ( pc + 32 ),
         (GLenum  )bswap_ENUM   ( pc + 36 ),
        data
    ) );
}

void __glXDispSwap_CopyColorSubTable(GLbyte * pc)
{
    CALL_CopyColorSubTable( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLsizei )bswap_CARD32 ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 ),
         (GLint   )bswap_CARD32 ( pc + 12 ),
         (GLsizei )bswap_CARD32 ( pc + 16 )
    ) );
}

void __glXDispSwap_ConvolutionFilter1D(GLbyte * pc)
d3607 2
a3608 2
    const GLvoid * const image = (const GLvoid *) (pc + 44);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
d3610 167
a3776 98
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );

    CALL_ConvolutionFilter1D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc + 20 ),
         (GLenum  )bswap_ENUM   ( pc + 24 ),
         (GLsizei )bswap_CARD32 ( pc + 28 ),
         (GLenum  )bswap_ENUM   ( pc + 36 ),
         (GLenum  )bswap_ENUM   ( pc + 40 ),
        image
    ) );
}

void __glXDispSwap_ConvolutionFilter2D(GLbyte * pc)
{
    const GLvoid * const image = (const GLvoid *) (pc + 44);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);

    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );

    CALL_ConvolutionFilter2D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc + 20 ),
         (GLenum  )bswap_ENUM   ( pc + 24 ),
         (GLsizei )bswap_CARD32 ( pc + 28 ),
         (GLsizei )bswap_CARD32 ( pc + 32 ),
         (GLenum  )bswap_ENUM   ( pc + 36 ),
         (GLenum  )bswap_ENUM   ( pc + 40 ),
        image
    ) );
}

void __glXDispSwap_ConvolutionParameterf(GLbyte * pc)
{
    CALL_ConvolutionParameterf( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLfloat )bswap_FLOAT32( pc +  8 )
    ) );
}

void __glXDispSwap_ConvolutionParameterfv(GLbyte * pc)
{
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLfloat * params;

    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 8), __glConvolutionParameterfv_size(pname) );

    CALL_ConvolutionParameterfv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
}

void __glXDispSwap_ConvolutionParameteri(GLbyte * pc)
{
    CALL_ConvolutionParameteri( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 )
    ) );
}

void __glXDispSwap_ConvolutionParameteriv(GLbyte * pc)
{
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
    const GLint * params;

    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 8), __glConvolutionParameteriv_size(pname) );

    CALL_ConvolutionParameteriv( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
        pname,
        params
    ) );
}

void __glXDispSwap_CopyConvolutionFilter1D(GLbyte * pc)
{
    CALL_CopyConvolutionFilter1D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 ),
         (GLint   )bswap_CARD32 ( pc + 12 ),
         (GLsizei )bswap_CARD32 ( pc + 16 )
    ) );
}

void __glXDispSwap_CopyConvolutionFilter2D(GLbyte * pc)
d3778 1
a3778 13
    CALL_CopyConvolutionFilter2D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 ),
         (GLint   )bswap_CARD32 ( pc + 12 ),
         (GLsizei )bswap_CARD32 ( pc + 16 ),
         (GLsizei )bswap_CARD32 ( pc + 20 )
    ) );
}

int __glXDispSwap_GetConvolutionParameterfv(__GLXclientState *cl, GLbyte *pc)
{
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3780 2
a3781 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3784 2
a3785 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d3789 6
a3794 3
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d3797 4
a3800 6
        CALL_GetConvolutionParameterfv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d3808 2
a3809 1
int __glXDispSwap_GetConvolutionParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
d3811 1
a3811 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3813 2
a3814 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3817 2
a3818 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d3822 6
a3827 3
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d3830 4
a3833 6
        CALL_GetConvolutionParameterfv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d3841 2
a3842 1
int __glXDispSwap_GetConvolutionParameteriv(__GLXclientState *cl, GLbyte *pc)
d3844 1
a3844 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3846 2
a3847 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3850 2
a3851 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d3855 6
a3860 3
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d3863 4
a3866 6
        CALL_GetConvolutionParameteriv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d3874 2
a3875 1
int __glXDispSwap_GetConvolutionParameterivEXT(__GLXclientState *cl, GLbyte *pc)
d3877 1
a3877 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3879 2
a3880 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3883 2
a3884 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d3888 6
a3893 3
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d3896 4
a3899 6
        CALL_GetConvolutionParameteriv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d3907 2
a3908 1
int __glXDispSwap_GetHistogramParameterfv(__GLXclientState *cl, GLbyte *pc)
d3910 1
a3910 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3912 2
a3913 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3916 2
a3917 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d3921 6
a3926 3
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d3929 4
a3932 6
        CALL_GetHistogramParameterfv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d3940 2
a3941 1
int __glXDispSwap_GetHistogramParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
d3943 1
a3943 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3945 2
a3946 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3949 2
a3950 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d3954 6
a3959 3
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d3962 4
a3965 6
        CALL_GetHistogramParameterfv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d3973 2
a3974 1
int __glXDispSwap_GetHistogramParameteriv(__GLXclientState *cl, GLbyte *pc)
d3976 1
a3976 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3978 2
a3979 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d3982 2
a3983 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d3987 6
a3992 3
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d3995 4
a3998 6
        CALL_GetHistogramParameteriv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d4006 2
a4007 1
int __glXDispSwap_GetHistogramParameterivEXT(__GLXclientState *cl, GLbyte *pc)
d4009 1
a4009 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4011 2
a4012 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d4015 2
a4016 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d4020 6
a4025 3
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d4028 4
a4031 6
        CALL_GetHistogramParameteriv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d4039 2
a4040 1
int __glXDispSwap_GetMinmaxParameterfv(__GLXclientState *cl, GLbyte *pc)
d4042 1
a4042 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d4044 2
a4045 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d4048 2
a4049 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d4053 3
a4055 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d4057 2
a4058 1
        if (params == NULL) return BadAlloc;
d4061 3
a4063 6
        CALL_GetMinmaxParameterfv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d4071 2
a4072 1
int __glXDispSwap_GetMinmaxParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
d4074 1
a4074 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4076 2
a4077 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d4080 2
a4081 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d4085 3
a4087 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d4089 2
a4090 1
        if (params == NULL) return BadAlloc;
d4093 3
a4095 6
        CALL_GetMinmaxParameterfv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d4103 2
a4104 1
int __glXDispSwap_GetMinmaxParameteriv(__GLXclientState *cl, GLbyte *pc)
d4106 1
a4106 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d4108 2
a4109 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d4112 2
a4113 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d4117 3
a4119 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d4121 2
a4122 1
        if (params == NULL) return BadAlloc;
d4125 3
a4127 6
        CALL_GetMinmaxParameteriv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d4135 2
a4136 1
int __glXDispSwap_GetMinmaxParameterivEXT(__GLXclientState *cl, GLbyte *pc)
d4138 1
a4138 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4140 2
a4141 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d4144 2
a4145 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d4149 3
a4151 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d4153 2
a4154 1
        if (params == NULL) return BadAlloc;
d4157 3
a4159 6
        CALL_GetMinmaxParameteriv( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d4167 2
a4168 1
void __glXDispSwap_Histogram(GLbyte * pc)
d4170 5
a4174 6
    CALL_Histogram( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLsizei )bswap_CARD32 ( pc +  4 ),
         (GLenum  )bswap_ENUM   ( pc +  8 ),
        *(GLboolean *)(pc + 12)
    ) );
d4177 2
a4178 1
void __glXDispSwap_Minmax(GLbyte * pc)
d4180 4
a4183 5
    CALL_Minmax( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
        *(GLboolean *)(pc +  8)
    ) );
d4186 2
a4187 1
void __glXDispSwap_ResetHistogram(GLbyte * pc)
d4189 2
a4190 3
    CALL_ResetHistogram( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d4193 2
a4194 1
void __glXDispSwap_ResetMinmax(GLbyte * pc)
d4196 2
a4197 3
    CALL_ResetMinmax( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d4200 2
a4201 1
void __glXDispSwap_TexImage3D(GLbyte * pc)
d4203 4
a4206 3
    const CARD32 ptr_is_null = *(CARD32 *)(pc + 76);
    const GLvoid * const pixels = (const GLvoid *) ((ptr_is_null != 0) ? NULL : (pc + 80));
    __GLXpixel3DHeader * const hdr = (__GLXpixel3DHeader *)(pc);
d4208 20
a4227 8
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_IMAGE_HEIGHT, (GLint) bswap_CARD32( & hdr->imageHeight )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_IMAGES,  (GLint) bswap_CARD32( & hdr->skipImages )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
d4229 9
a4237 12
    CALL_TexImage3D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc + 36 ),
         (GLint   )bswap_CARD32 ( pc + 40 ),
         (GLint   )bswap_CARD32 ( pc + 44 ),
         (GLsizei )bswap_CARD32 ( pc + 48 ),
         (GLsizei )bswap_CARD32 ( pc + 52 ),
         (GLsizei )bswap_CARD32 ( pc + 56 ),
         (GLint   )bswap_CARD32 ( pc + 64 ),
         (GLenum  )bswap_ENUM   ( pc + 68 ),
         (GLenum  )bswap_ENUM   ( pc + 72 ),
        pixels
    ) );
d4240 2
a4241 1
void __glXDispSwap_TexSubImage3D(GLbyte * pc)
d4243 2
a4244 2
    const GLvoid * const pixels = (const GLvoid *) (pc + 88);
    __GLXpixel3DHeader * const hdr = (__GLXpixel3DHeader *)(pc);
d4246 20
a4265 8
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) bswap_CARD32( & hdr->rowLength )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_IMAGE_HEIGHT, (GLint) bswap_CARD32( & hdr->imageHeight )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) bswap_CARD32( & hdr->skipRows )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_IMAGES,  (GLint) bswap_CARD32( & hdr->skipImages )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) bswap_CARD32( & hdr->skipPixels )) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) bswap_CARD32( & hdr->alignment )) );
d4267 10
a4276 13
    CALL_TexSubImage3D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc + 36 ),
         (GLint   )bswap_CARD32 ( pc + 40 ),
         (GLint   )bswap_CARD32 ( pc + 44 ),
         (GLint   )bswap_CARD32 ( pc + 48 ),
         (GLint   )bswap_CARD32 ( pc + 52 ),
         (GLsizei )bswap_CARD32 ( pc + 60 ),
         (GLsizei )bswap_CARD32 ( pc + 64 ),
         (GLsizei )bswap_CARD32 ( pc + 68 ),
         (GLenum  )bswap_ENUM   ( pc + 76 ),
         (GLenum  )bswap_ENUM   ( pc + 80 ),
        pixels
    ) );
d4279 2
a4280 1
void __glXDispSwap_CopyTexSubImage3D(GLbyte * pc)
d4282 10
a4291 11
    CALL_CopyTexSubImage3D( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 ),
         (GLint   )bswap_CARD32 ( pc + 12 ),
         (GLint   )bswap_CARD32 ( pc + 16 ),
         (GLint   )bswap_CARD32 ( pc + 20 ),
         (GLint   )bswap_CARD32 ( pc + 24 ),
         (GLsizei )bswap_CARD32 ( pc + 28 ),
         (GLsizei )bswap_CARD32 ( pc + 32 )
    ) );
d4294 2
a4295 1
void __glXDispSwap_ActiveTextureARB(GLbyte * pc)
d4297 2
a4298 3
    CALL_ActiveTextureARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d4301 2
a4302 1
void __glXDispSwap_MultiTexCoord1dvARB(GLbyte * pc)
d4305 2
a4306 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 12);
d4311 6
a4316 4
    CALL_MultiTexCoord1dvARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  8 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 1 )
    ) );
d4319 2
a4320 1
void __glXDispSwap_MultiTexCoord1fvARB(GLbyte * pc)
d4322 6
a4327 4
    CALL_MultiTexCoord1fvARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 1 )
    ) );
d4330 2
a4331 1
void __glXDispSwap_MultiTexCoord1ivARB(GLbyte * pc)
d4333 6
a4338 4
    CALL_MultiTexCoord1ivARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  4), 1 )
    ) );
d4341 2
a4342 1
void __glXDispSwap_MultiTexCoord1svARB(GLbyte * pc)
d4344 6
a4349 4
    CALL_MultiTexCoord1svARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 1 )
    ) );
d4352 2
a4353 1
void __glXDispSwap_MultiTexCoord2dvARB(GLbyte * pc)
d4356 2
a4357 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 20);
d4362 6
a4367 4
    CALL_MultiTexCoord2dvARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc + 16 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 2 )
    ) );
d4370 2
a4371 1
void __glXDispSwap_MultiTexCoord2fvARB(GLbyte * pc)
d4373 6
a4378 4
    CALL_MultiTexCoord2fvARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 2 )
    ) );
d4381 2
a4382 1
void __glXDispSwap_MultiTexCoord2ivARB(GLbyte * pc)
d4384 6
a4389 4
    CALL_MultiTexCoord2ivARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  4), 2 )
    ) );
d4392 2
a4393 1
void __glXDispSwap_MultiTexCoord2svARB(GLbyte * pc)
d4395 6
a4400 4
    CALL_MultiTexCoord2svARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 2 )
    ) );
d4403 2
a4404 1
void __glXDispSwap_MultiTexCoord3dvARB(GLbyte * pc)
d4407 2
a4408 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 28);
d4413 6
a4418 4
    CALL_MultiTexCoord3dvARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc + 24 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 3 )
    ) );
d4421 2
a4422 1
void __glXDispSwap_MultiTexCoord3fvARB(GLbyte * pc)
d4424 6
a4429 4
    CALL_MultiTexCoord3fvARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 3 )
    ) );
d4432 2
a4433 1
void __glXDispSwap_MultiTexCoord3ivARB(GLbyte * pc)
d4435 6
a4440 4
    CALL_MultiTexCoord3ivARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  4), 3 )
    ) );
d4443 2
a4444 1
void __glXDispSwap_MultiTexCoord3svARB(GLbyte * pc)
d4446 6
a4451 4
    CALL_MultiTexCoord3svARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 3 )
    ) );
d4454 2
a4455 1
void __glXDispSwap_MultiTexCoord4dvARB(GLbyte * pc)
d4458 2
a4459 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 36);
d4464 6
a4469 4
    CALL_MultiTexCoord4dvARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc + 32 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 4 )
    ) );
d4472 2
a4473 1
void __glXDispSwap_MultiTexCoord4fvARB(GLbyte * pc)
d4475 6
a4480 4
    CALL_MultiTexCoord4fvARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
    ) );
d4483 2
a4484 1
void __glXDispSwap_MultiTexCoord4ivARB(GLbyte * pc)
d4486 6
a4491 4
    CALL_MultiTexCoord4ivARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
    ) );
d4494 2
a4495 1
void __glXDispSwap_MultiTexCoord4svARB(GLbyte * pc)
d4497 6
a4502 4
    CALL_MultiTexCoord4svARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 4 )
    ) );
d4505 2
a4506 1
void __glXDispSwap_SampleCoverageARB(GLbyte * pc)
d4508 3
a4510 4
    CALL_SampleCoverageARB( GET_DISPATCH(), (
         (GLclampf)bswap_FLOAT32( pc +  0 ),
        *(GLboolean *)(pc +  4)
    ) );
d4513 2
a4514 1
void __glXDispSwap_CompressedTexImage1DARB(GLbyte * pc)
d4516 1
a4516 1
    const GLsizei imageSize =  (GLsizei )bswap_CARD32 ( pc + 20 );
d4518 9
a4526 9
    CALL_CompressedTexImage1DARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLenum  )bswap_ENUM   ( pc +  8 ),
         (GLsizei )bswap_CARD32 ( pc + 12 ),
         (GLint   )bswap_CARD32 ( pc + 16 ),
        imageSize,
         (const GLvoid *)(pc + 24)
    ) );
d4529 2
a4530 1
void __glXDispSwap_CompressedTexImage2DARB(GLbyte * pc)
d4532 1
a4532 1
    const GLsizei imageSize =  (GLsizei )bswap_CARD32 ( pc + 24 );
d4534 11
a4544 10
    CALL_CompressedTexImage2DARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLenum  )bswap_ENUM   ( pc +  8 ),
         (GLsizei )bswap_CARD32 ( pc + 12 ),
         (GLsizei )bswap_CARD32 ( pc + 16 ),
         (GLint   )bswap_CARD32 ( pc + 20 ),
        imageSize,
         (const GLvoid *)(pc + 28)
    ) );
d4547 2
a4548 1
void __glXDispSwap_CompressedTexImage3DARB(GLbyte * pc)
d4550 1
a4550 1
    const GLsizei imageSize =  (GLsizei )bswap_CARD32 ( pc + 28 );
d4552 13
a4564 11
    CALL_CompressedTexImage3DARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLenum  )bswap_ENUM   ( pc +  8 ),
         (GLsizei )bswap_CARD32 ( pc + 12 ),
         (GLsizei )bswap_CARD32 ( pc + 16 ),
         (GLsizei )bswap_CARD32 ( pc + 20 ),
         (GLint   )bswap_CARD32 ( pc + 24 ),
        imageSize,
         (const GLvoid *)(pc + 32)
    ) );
d4567 2
a4568 1
void __glXDispSwap_CompressedTexSubImage1DARB(GLbyte * pc)
d4570 1
a4570 1
    const GLsizei imageSize =  (GLsizei )bswap_CARD32 ( pc + 20 );
d4572 13
a4584 9
    CALL_CompressedTexSubImage1DARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 ),
         (GLsizei )bswap_CARD32 ( pc + 12 ),
         (GLenum  )bswap_ENUM   ( pc + 16 ),
        imageSize,
         (const GLvoid *)(pc + 24)
    ) );
d4587 2
a4588 1
void __glXDispSwap_CompressedTexSubImage2DARB(GLbyte * pc)
d4590 1
a4590 1
    const GLsizei imageSize =  (GLsizei )bswap_CARD32 ( pc + 28 );
d4592 17
a4608 11
    CALL_CompressedTexSubImage2DARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 ),
         (GLint   )bswap_CARD32 ( pc + 12 ),
         (GLsizei )bswap_CARD32 ( pc + 16 ),
         (GLsizei )bswap_CARD32 ( pc + 20 ),
         (GLenum  )bswap_ENUM   ( pc + 24 ),
        imageSize,
         (const GLvoid *)(pc + 32)
    ) );
d4611 2
a4612 1
void __glXDispSwap_CompressedTexSubImage3DARB(GLbyte * pc)
d4614 1
a4614 1
    const GLsizei imageSize =  (GLsizei )bswap_CARD32 ( pc + 36 );
d4616 21
a4636 13
    CALL_CompressedTexSubImage3DARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 ),
         (GLint   )bswap_CARD32 ( pc +  8 ),
         (GLint   )bswap_CARD32 ( pc + 12 ),
         (GLint   )bswap_CARD32 ( pc + 16 ),
         (GLsizei )bswap_CARD32 ( pc + 20 ),
         (GLsizei )bswap_CARD32 ( pc + 24 ),
         (GLsizei )bswap_CARD32 ( pc + 28 ),
         (GLenum  )bswap_ENUM   ( pc + 32 ),
        imageSize,
         (const GLvoid *)(pc + 40)
    ) );
d4639 2
a4640 1
int __glXDispSwap_GetProgramEnvParameterdvARB(__GLXclientState *cl, GLbyte *pc)
d4642 1
a4642 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4644 2
a4645 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d4648 1
a4648 1
    if ( cx != NULL ) {
d4650 7
a4656 6
        CALL_GetProgramEnvParameterdvARB( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
             (GLuint  )bswap_CARD32 ( pc +  4 ),
            params
        ) );
        (void) bswap_64_array( (uint64_t *) params, 4 );
d4664 2
a4665 1
int __glXDispSwap_GetProgramEnvParameterfvARB(__GLXclientState *cl, GLbyte *pc)
d4667 1
a4667 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4669 2
a4670 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d4673 1
a4673 1
    if ( cx != NULL ) {
d4675 7
a4681 6
        CALL_GetProgramEnvParameterfvARB( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
             (GLuint  )bswap_CARD32 ( pc +  4 ),
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, 4 );
d4689 2
a4690 1
int __glXDispSwap_GetProgramLocalParameterdvARB(__GLXclientState *cl, GLbyte *pc)
d4692 1
a4692 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4694 2
a4695 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d4698 1
a4698 1
    if ( cx != NULL ) {
d4700 8
a4707 6
        CALL_GetProgramLocalParameterdvARB( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
             (GLuint  )bswap_CARD32 ( pc +  4 ),
            params
        ) );
        (void) bswap_64_array( (uint64_t *) params, 4 );
d4715 2
a4716 1
int __glXDispSwap_GetProgramLocalParameterfvARB(__GLXclientState *cl, GLbyte *pc)
d4718 1
a4718 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4720 2
a4721 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d4724 1
a4724 1
    if ( cx != NULL ) {
d4726 8
a4733 6
        CALL_GetProgramLocalParameterfvARB( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
             (GLuint  )bswap_CARD32 ( pc +  4 ),
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, 4 );
d4741 2
a4742 1
int __glXDispSwap_GetProgramivARB(__GLXclientState *cl, GLbyte *pc)
d4744 1
a4744 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4746 2
a4747 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d4750 2
a4751 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d4755 3
a4757 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d4759 2
a4760 1
        if (params == NULL) return BadAlloc;
d4763 3
a4765 6
        CALL_GetProgramivARB( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d4773 2
a4774 1
int __glXDispSwap_GetVertexAttribdvARB(__GLXclientState *cl, GLbyte *pc)
d4776 1
a4776 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4778 2
a4779 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d4782 2
a4783 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d4787 6
a4792 3
        GLdouble * params = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);

        if (params == NULL) return BadAlloc;
d4795 4
a4798 6
        CALL_GetVertexAttribdvARB( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_64_array( (uint64_t *) params, compsize );
d4806 2
a4807 1
int __glXDispSwap_GetVertexAttribfvARB(__GLXclientState *cl, GLbyte *pc)
d4809 1
a4809 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4811 2
a4812 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d4815 2
a4816 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d4820 6
a4825 3
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d4828 4
a4831 6
        CALL_GetVertexAttribfvARB( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d4839 2
a4840 1
int __glXDispSwap_GetVertexAttribivARB(__GLXclientState *cl, GLbyte *pc)
d4842 1
a4842 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4844 2
a4845 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d4848 2
a4849 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d4853 6
a4858 3
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d4861 4
a4864 6
        CALL_GetVertexAttribivARB( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d4872 2
a4873 1
void __glXDispSwap_ProgramEnvParameter4dvARB(GLbyte * pc)
d4876 2
a4877 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 40);
d4882 8
a4889 5
    CALL_ProgramEnvParameter4dvARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLuint  )bswap_CARD32 ( pc +  4 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  8), 4 )
    ) );
d4892 2
a4893 1
void __glXDispSwap_ProgramEnvParameter4fvARB(GLbyte * pc)
d4895 8
a4902 5
    CALL_ProgramEnvParameter4fvARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLuint  )bswap_CARD32 ( pc +  4 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 4 )
    ) );
d4905 2
a4906 1
void __glXDispSwap_ProgramLocalParameter4dvARB(GLbyte * pc)
d4909 2
a4910 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 40);
d4915 9
a4923 5
    CALL_ProgramLocalParameter4dvARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLuint  )bswap_CARD32 ( pc +  4 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  8), 4 )
    ) );
d4926 2
a4927 1
void __glXDispSwap_ProgramLocalParameter4fvARB(GLbyte * pc)
d4929 9
a4937 5
    CALL_ProgramLocalParameter4fvARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLuint  )bswap_CARD32 ( pc +  4 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 4 )
    ) );
d4940 2
a4941 1
void __glXDispSwap_ProgramStringARB(GLbyte * pc)
d4943 1
a4943 1
    const GLsizei len =  (GLsizei )bswap_CARD32 ( pc +  8 );
d4945 4
a4948 6
    CALL_ProgramStringARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
        len,
         (const GLvoid *)(pc + 12)
    ) );
d4951 2
a4952 1
void __glXDispSwap_VertexAttrib1dvARB(GLbyte * pc)
d4955 2
a4956 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 12);
d4961 5
a4965 4
    CALL_VertexAttrib1dvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 1 )
    ) );
d4968 2
a4969 1
void __glXDispSwap_VertexAttrib1fvARB(GLbyte * pc)
d4971 5
a4975 4
    CALL_VertexAttrib1fvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 1 )
    ) );
d4978 2
a4979 1
void __glXDispSwap_VertexAttrib1svARB(GLbyte * pc)
d4981 5
a4985 4
    CALL_VertexAttrib1svARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 1 )
    ) );
d4988 2
a4989 1
void __glXDispSwap_VertexAttrib2dvARB(GLbyte * pc)
d4992 2
a4993 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 20);
d4998 5
a5002 4
    CALL_VertexAttrib2dvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 2 )
    ) );
d5005 2
a5006 1
void __glXDispSwap_VertexAttrib2fvARB(GLbyte * pc)
d5008 5
a5012 4
    CALL_VertexAttrib2fvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 2 )
    ) );
d5015 2
a5016 1
void __glXDispSwap_VertexAttrib2svARB(GLbyte * pc)
d5018 5
a5022 4
    CALL_VertexAttrib2svARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 2 )
    ) );
d5025 2
a5026 1
void __glXDispSwap_VertexAttrib3dvARB(GLbyte * pc)
d5029 2
a5030 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 28);
d5035 5
a5039 4
    CALL_VertexAttrib3dvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 3 )
    ) );
d5042 2
a5043 1
void __glXDispSwap_VertexAttrib3fvARB(GLbyte * pc)
d5045 5
a5049 4
    CALL_VertexAttrib3fvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 3 )
    ) );
d5052 2
a5053 1
void __glXDispSwap_VertexAttrib3svARB(GLbyte * pc)
d5055 5
a5059 4
    CALL_VertexAttrib3svARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 3 )
    ) );
d5062 2
a5063 1
void __glXDispSwap_VertexAttrib4NbvARB(GLbyte * pc)
d5065 3
a5067 4
    CALL_VertexAttrib4NbvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLbyte *)(pc +  4)
    ) );
d5070 2
a5071 1
void __glXDispSwap_VertexAttrib4NivARB(GLbyte * pc)
d5073 6
a5078 4
    CALL_VertexAttrib4NivARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
    ) );
d5081 2
a5082 1
void __glXDispSwap_VertexAttrib4NsvARB(GLbyte * pc)
d5084 6
a5089 4
    CALL_VertexAttrib4NsvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 4 )
    ) );
d5092 2
a5093 1
void __glXDispSwap_VertexAttrib4NubvARB(GLbyte * pc)
d5095 3
a5097 4
    CALL_VertexAttrib4NubvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLubyte *)(pc +  4)
    ) );
d5100 2
a5101 1
void __glXDispSwap_VertexAttrib4NuivARB(GLbyte * pc)
d5103 6
a5108 4
    CALL_VertexAttrib4NuivARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
    ) );
d5111 2
a5112 1
void __glXDispSwap_VertexAttrib4NusvARB(GLbyte * pc)
d5114 6
a5119 4
    CALL_VertexAttrib4NusvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLushort *)bswap_16_array( (uint16_t *) (pc +  4), 4 )
    ) );
d5122 2
a5123 1
void __glXDispSwap_VertexAttrib4bvARB(GLbyte * pc)
d5125 3
a5127 4
    CALL_VertexAttrib4bvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLbyte *)(pc +  4)
    ) );
d5130 2
a5131 1
void __glXDispSwap_VertexAttrib4dvARB(GLbyte * pc)
d5134 2
a5135 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 36);
d5140 5
a5144 4
    CALL_VertexAttrib4dvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 4 )
    ) );
d5147 2
a5148 1
void __glXDispSwap_VertexAttrib4fvARB(GLbyte * pc)
d5150 5
a5154 4
    CALL_VertexAttrib4fvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
    ) );
d5157 2
a5158 1
void __glXDispSwap_VertexAttrib4ivARB(GLbyte * pc)
d5160 5
a5164 4
    CALL_VertexAttrib4ivARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
    ) );
d5167 2
a5168 1
void __glXDispSwap_VertexAttrib4svARB(GLbyte * pc)
d5170 5
a5174 4
    CALL_VertexAttrib4svARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 4 )
    ) );
d5177 2
a5178 1
void __glXDispSwap_VertexAttrib4ubvARB(GLbyte * pc)
d5180 3
a5182 4
    CALL_VertexAttrib4ubvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLubyte *)(pc +  4)
    ) );
d5185 2
a5186 1
void __glXDispSwap_VertexAttrib4uivARB(GLbyte * pc)
d5188 6
a5193 4
    CALL_VertexAttrib4uivARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
    ) );
d5196 2
a5197 1
void __glXDispSwap_VertexAttrib4usvARB(GLbyte * pc)
d5199 6
a5204 4
    CALL_VertexAttrib4usvARB( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLushort *)bswap_16_array( (uint16_t *) (pc +  4), 4 )
    ) );
d5207 2
a5208 1
void __glXDispSwap_BeginQueryARB(GLbyte * pc)
d5210 3
a5212 4
    CALL_BeginQueryARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLuint  )bswap_CARD32 ( pc +  4 )
    ) );
d5215 2
a5216 1
int __glXDispSwap_DeleteQueriesARB(__GLXclientState *cl, GLbyte *pc)
d5218 1
a5218 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d5220 2
a5221 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5224 2
a5225 2
    if ( cx != NULL ) {
        const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d5227 6
a5232 4
        CALL_DeleteQueriesARB( GET_DISPATCH(), (
            n,
             (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
        ) );
d5239 2
a5240 1
void __glXDispSwap_EndQueryARB(GLbyte * pc)
d5242 2
a5243 3
    CALL_EndQueryARB( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d5246 2
a5247 1
int __glXDispSwap_GenQueriesARB(__GLXclientState *cl, GLbyte *pc)
d5249 1
a5249 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d5251 2
a5252 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5255 2
a5256 2
    if ( cx != NULL ) {
        const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d5259 5
a5263 6
        GLuint * ids = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
        CALL_GenQueriesARB( GET_DISPATCH(), (
            n,
            ids
        ) );
        (void) bswap_32_array( (uint32_t *) ids, n );
d5271 2
a5272 1
int __glXDispSwap_GetQueryObjectivARB(__GLXclientState *cl, GLbyte *pc)
d5274 1
a5274 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d5276 2
a5277 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5280 2
a5281 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d5285 3
a5287 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d5289 2
a5290 1
        if (params == NULL) return BadAlloc;
d5293 3
a5295 6
        CALL_GetQueryObjectivARB( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d5303 2
a5304 1
int __glXDispSwap_GetQueryObjectuivARB(__GLXclientState *cl, GLbyte *pc)
d5306 1
a5306 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d5308 2
a5309 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5312 2
a5313 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d5317 6
a5322 3
        GLuint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);

        if (params == NULL) return BadAlloc;
d5325 4
a5328 6
        CALL_GetQueryObjectuivARB( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d5336 2
a5337 1
int __glXDispSwap_GetQueryivARB(__GLXclientState *cl, GLbyte *pc)
d5339 1
a5339 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d5341 2
a5342 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5345 2
a5346 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d5350 3
a5352 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d5354 2
a5355 1
        if (params == NULL) return BadAlloc;
d5358 3
a5360 6
        CALL_GetQueryivARB( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d5368 2
a5369 1
int __glXDispSwap_IsQueryARB(__GLXclientState *cl, GLbyte *pc)
d5371 1
a5371 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d5373 2
a5374 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5377 1
a5377 1
    if ( cx != NULL ) {
d5379 3
a5381 3
        retval = CALL_IsQueryARB( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 )
        ) );
d5389 2
a5390 1
void __glXDispSwap_DrawBuffersARB(GLbyte * pc)
d5392 1
a5392 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d5394 5
a5398 4
    CALL_DrawBuffersARB( GET_DISPATCH(), (
        n,
         (const GLenum *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
    ) );
d5401 2
a5402 1
void __glXDispSwap_SampleMaskSGIS(GLbyte * pc)
d5404 3
a5406 4
    CALL_SampleMaskSGIS( GET_DISPATCH(), (
         (GLclampf)bswap_FLOAT32( pc +  0 ),
        *(GLboolean *)(pc +  4)
    ) );
d5409 2
a5410 1
void __glXDispSwap_SamplePatternSGIS(GLbyte * pc)
d5412 12
a5423 3
    CALL_SamplePatternSGIS( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d5426 2
a5427 1
void __glXDispSwap_PointParameterfEXT(GLbyte * pc)
d5429 3
a5431 4
    CALL_PointParameterfEXT( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLfloat )bswap_FLOAT32( pc +  4 )
    ) );
d5434 2
a5435 1
void __glXDispSwap_PointParameterfvEXT(GLbyte * pc)
d5437 3
a5439 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
    const GLfloat * params;
d5441 7
a5447 1
    params = (const GLfloat *) bswap_32_array( (uint32_t *) (pc + 4), __glPointParameterfvEXT_size(pname) );
d5449 11
a5459 4
    CALL_PointParameterfvEXT( GET_DISPATCH(), (
        pname,
        params
    ) );
d5462 2
a5463 1
void __glXDispSwap_SecondaryColor3bvEXT(GLbyte * pc)
d5465 2
a5466 3
    CALL_SecondaryColor3bvEXT( GET_DISPATCH(), (
         (const GLbyte *)(pc +  0)
    ) );
d5469 2
a5470 1
void __glXDispSwap_SecondaryColor3dvEXT(GLbyte * pc)
d5473 2
a5474 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d5479 5
a5483 3
    CALL_SecondaryColor3dvEXT( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 3 )
    ) );
d5486 2
a5487 1
void __glXDispSwap_SecondaryColor3fvEXT(GLbyte * pc)
d5489 5
a5493 3
    CALL_SecondaryColor3fvEXT( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d5496 2
a5497 1
void __glXDispSwap_SecondaryColor3ivEXT(GLbyte * pc)
d5499 5
a5503 3
    CALL_SecondaryColor3ivEXT( GET_DISPATCH(), (
         (const GLint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d5506 2
a5507 1
void __glXDispSwap_SecondaryColor3svEXT(GLbyte * pc)
d5509 5
a5513 3
    CALL_SecondaryColor3svEXT( GET_DISPATCH(), (
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
    ) );
d5516 2
a5517 1
void __glXDispSwap_SecondaryColor3ubvEXT(GLbyte * pc)
d5519 2
a5520 3
    CALL_SecondaryColor3ubvEXT( GET_DISPATCH(), (
         (const GLubyte *)(pc +  0)
    ) );
d5523 2
a5524 1
void __glXDispSwap_SecondaryColor3uivEXT(GLbyte * pc)
d5526 6
a5531 3
    CALL_SecondaryColor3uivEXT( GET_DISPATCH(), (
         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d5534 2
a5535 1
void __glXDispSwap_SecondaryColor3usvEXT(GLbyte * pc)
d5537 6
a5542 3
    CALL_SecondaryColor3usvEXT( GET_DISPATCH(), (
         (const GLushort *)bswap_16_array( (uint16_t *) (pc +  0), 3 )
    ) );
d5545 2
a5546 1
void __glXDispSwap_FogCoorddvEXT(GLbyte * pc)
d5549 2
a5550 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 8);
d5555 3
a5557 3
    CALL_FogCoorddvEXT( GET_DISPATCH(), (
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 1 )
    ) );
d5560 2
a5561 1
void __glXDispSwap_FogCoordfvEXT(GLbyte * pc)
d5563 3
a5565 3
    CALL_FogCoordfvEXT( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 1 )
    ) );
d5568 2
a5569 1
void __glXDispSwap_BlendFuncSeparateEXT(GLbyte * pc)
d5571 5
a5575 6
    CALL_BlendFuncSeparateEXT( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLenum  )bswap_ENUM   ( pc +  8 ),
         (GLenum  )bswap_ENUM   ( pc + 12 )
    ) );
d5578 2
a5579 1
void __glXDispSwap_WindowPos3fvMESA(GLbyte * pc)
d5581 4
a5584 3
    CALL_WindowPos3fvMESA( GET_DISPATCH(), (
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  0), 3 )
    ) );
d5587 2
a5588 1
int __glXDispSwap_AreProgramsResidentNV(__GLXclientState *cl, GLbyte *pc)
d5590 1
a5590 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5592 2
a5593 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5596 2
a5597 2
    if ( cx != NULL ) {
        const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d5601 8
a5608 6
        GLboolean * residences = __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);
        retval = CALL_AreProgramsResidentNV( GET_DISPATCH(), (
            n,
             (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 ),
            residences
        ) );
d5616 2
a5617 1
void __glXDispSwap_BindProgramNV(GLbyte * pc)
d5619 3
a5621 4
    CALL_BindProgramNV( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLuint  )bswap_CARD32 ( pc +  4 )
    ) );
d5624 2
a5625 1
int __glXDispSwap_DeleteProgramsNV(__GLXclientState *cl, GLbyte *pc)
d5627 1
a5627 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5629 2
a5630 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5633 2
a5634 2
    if ( cx != NULL ) {
        const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d5636 6
a5641 4
        CALL_DeleteProgramsNV( GET_DISPATCH(), (
            n,
             (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
        ) );
d5648 2
a5649 1
void __glXDispSwap_ExecuteProgramNV(GLbyte * pc)
d5651 6
a5656 5
    CALL_ExecuteProgramNV( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLuint  )bswap_CARD32 ( pc +  4 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 4 )
    ) );
d5659 2
a5660 1
int __glXDispSwap_GenProgramsNV(__GLXclientState *cl, GLbyte *pc)
d5662 1
a5662 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5664 2
a5665 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5668 2
a5669 2
    if ( cx != NULL ) {
        const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d5672 5
a5676 6
        GLuint * programs = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
        CALL_GenProgramsNV( GET_DISPATCH(), (
            n,
            programs
        ) );
        (void) bswap_32_array( (uint32_t *) programs, n );
d5684 2
a5685 1
int __glXDispSwap_GetProgramParameterdvNV(__GLXclientState *cl, GLbyte *pc)
d5687 1
a5687 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5689 2
a5690 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5693 1
a5693 1
    if ( cx != NULL ) {
d5695 9
a5703 7
        CALL_GetProgramParameterdvNV( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
             (GLuint  )bswap_CARD32 ( pc +  4 ),
             (GLenum  )bswap_ENUM   ( pc +  8 ),
            params
        ) );
        (void) bswap_64_array( (uint64_t *) params, 4 );
d5711 2
a5712 1
int __glXDispSwap_GetProgramParameterfvNV(__GLXclientState *cl, GLbyte *pc)
d5714 1
a5714 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5716 2
a5717 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5720 1
a5720 1
    if ( cx != NULL ) {
d5722 9
a5730 7
        CALL_GetProgramParameterfvNV( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
             (GLuint  )bswap_CARD32 ( pc +  4 ),
             (GLenum  )bswap_ENUM   ( pc +  8 ),
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, 4 );
d5738 2
a5739 1
int __glXDispSwap_GetProgramivNV(__GLXclientState *cl, GLbyte *pc)
d5741 1
a5741 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5743 2
a5744 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5747 2
a5748 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d5752 3
a5754 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d5756 2
a5757 1
        if (params == NULL) return BadAlloc;
d5760 3
a5762 6
        CALL_GetProgramivNV( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d5770 2
a5771 1
int __glXDispSwap_GetTrackMatrixivNV(__GLXclientState *cl, GLbyte *pc)
d5773 1
a5773 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5775 2
a5776 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5779 1
a5779 1
    if ( cx != NULL ) {
d5781 6
a5786 7
        CALL_GetTrackMatrixivNV( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
             (GLuint  )bswap_CARD32 ( pc +  4 ),
             (GLenum  )bswap_ENUM   ( pc +  8 ),
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, 1 );
d5794 2
a5795 1
int __glXDispSwap_GetVertexAttribdvNV(__GLXclientState *cl, GLbyte *pc)
d5797 1
a5797 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5799 2
a5800 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5803 2
a5804 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d5808 3
a5810 1
        GLdouble * params = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);
d5812 2
a5813 1
        if (params == NULL) return BadAlloc;
d5816 3
a5818 6
        CALL_GetVertexAttribdvNV( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_64_array( (uint64_t *) params, compsize );
d5826 2
a5827 1
int __glXDispSwap_GetVertexAttribfvNV(__GLXclientState *cl, GLbyte *pc)
d5829 1
a5829 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5831 2
a5832 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5835 2
a5836 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d5840 3
a5842 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d5844 2
a5845 1
        if (params == NULL) return BadAlloc;
d5848 3
a5850 6
        CALL_GetVertexAttribfvNV( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d5858 2
a5859 1
int __glXDispSwap_GetVertexAttribivNV(__GLXclientState *cl, GLbyte *pc)
d5861 1
a5861 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5863 2
a5864 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5867 2
a5868 2
    if ( cx != NULL ) {
        const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  4 );
d5872 3
a5874 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d5876 2
a5877 1
        if (params == NULL) return BadAlloc;
d5880 3
a5882 6
        CALL_GetVertexAttribivNV( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 ),
            pname,
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, compsize );
d5890 2
a5891 1
int __glXDispSwap_IsProgramNV(__GLXclientState *cl, GLbyte *pc)
d5893 1
a5893 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5895 2
a5896 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d5899 1
a5899 1
    if ( cx != NULL ) {
d5901 3
a5903 3
        retval = CALL_IsProgramNV( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 )
        ) );
d5911 2
a5912 1
void __glXDispSwap_LoadProgramNV(GLbyte * pc)
d5914 1
a5914 1
    const GLsizei len =  (GLsizei )bswap_CARD32 ( pc +  8 );
d5916 4
a5919 6
    CALL_LoadProgramNV( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLuint  )bswap_CARD32 ( pc +  4 ),
        len,
         (const GLubyte *)(pc + 12)
    ) );
d5922 2
a5923 1
void __glXDispSwap_ProgramParameters4dvNV(GLbyte * pc)
d5925 1
a5925 1
    const GLuint num =  (GLuint  )bswap_CARD32 ( pc +  8 );
d5929 3
a5931 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, cmdlen);
d5936 9
a5944 6
    CALL_ProgramParameters4dvNV( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLuint  )bswap_CARD32 ( pc +  4 ),
        num,
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc + 12), 0 )
    ) );
d5947 2
a5948 1
void __glXDispSwap_ProgramParameters4fvNV(GLbyte * pc)
d5950 1
a5950 1
    const GLuint num =  (GLuint  )bswap_CARD32 ( pc +  8 );
d5952 9
a5960 6
    CALL_ProgramParameters4fvNV( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLuint  )bswap_CARD32 ( pc +  4 ),
        num,
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc + 12), 0 )
    ) );
d5963 2
a5964 1
void __glXDispSwap_RequestResidentProgramsNV(GLbyte * pc)
d5966 1
a5966 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d5968 6
a5973 4
    CALL_RequestResidentProgramsNV( GET_DISPATCH(), (
        n,
         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
    ) );
d5976 2
a5977 1
void __glXDispSwap_TrackMatrixNV(GLbyte * pc)
d5979 5
a5983 6
    CALL_TrackMatrixNV( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLuint  )bswap_CARD32 ( pc +  4 ),
         (GLenum  )bswap_ENUM   ( pc +  8 ),
         (GLenum  )bswap_ENUM   ( pc + 12 )
    ) );
d5986 2
a5987 1
void __glXDispSwap_VertexAttrib1dvNV(GLbyte * pc)
d5990 2
a5991 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 12);
d5996 5
a6000 4
    CALL_VertexAttrib1dvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 1 )
    ) );
d6003 2
a6004 1
void __glXDispSwap_VertexAttrib1fvNV(GLbyte * pc)
d6006 5
a6010 4
    CALL_VertexAttrib1fvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 1 )
    ) );
d6013 2
a6014 1
void __glXDispSwap_VertexAttrib1svNV(GLbyte * pc)
d6016 5
a6020 4
    CALL_VertexAttrib1svNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 1 )
    ) );
d6023 2
a6024 1
void __glXDispSwap_VertexAttrib2dvNV(GLbyte * pc)
d6027 2
a6028 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 20);
d6033 5
a6037 4
    CALL_VertexAttrib2dvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 2 )
    ) );
d6040 2
a6041 1
void __glXDispSwap_VertexAttrib2fvNV(GLbyte * pc)
d6043 5
a6047 4
    CALL_VertexAttrib2fvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 2 )
    ) );
d6050 2
a6051 1
void __glXDispSwap_VertexAttrib2svNV(GLbyte * pc)
d6053 5
a6057 4
    CALL_VertexAttrib2svNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 2 )
    ) );
d6060 2
a6061 1
void __glXDispSwap_VertexAttrib3dvNV(GLbyte * pc)
d6064 2
a6065 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 28);
d6070 5
a6074 4
    CALL_VertexAttrib3dvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 3 )
    ) );
d6077 2
a6078 1
void __glXDispSwap_VertexAttrib3fvNV(GLbyte * pc)
d6080 5
a6084 4
    CALL_VertexAttrib3fvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 3 )
    ) );
d6087 2
a6088 1
void __glXDispSwap_VertexAttrib3svNV(GLbyte * pc)
d6090 5
a6094 4
    CALL_VertexAttrib3svNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 3 )
    ) );
d6097 2
a6098 1
void __glXDispSwap_VertexAttrib4dvNV(GLbyte * pc)
d6101 2
a6102 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 36);
d6107 5
a6111 4
    CALL_VertexAttrib4dvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  4), 4 )
    ) );
d6114 2
a6115 1
void __glXDispSwap_VertexAttrib4fvNV(GLbyte * pc)
d6117 5
a6121 4
    CALL_VertexAttrib4fvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  4), 4 )
    ) );
d6124 2
a6125 1
void __glXDispSwap_VertexAttrib4svNV(GLbyte * pc)
d6127 5
a6131 4
    CALL_VertexAttrib4svNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  4), 4 )
    ) );
d6134 2
a6135 1
void __glXDispSwap_VertexAttrib4ubvNV(GLbyte * pc)
d6137 3
a6139 4
    CALL_VertexAttrib4ubvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
         (const GLubyte *)(pc +  4)
    ) );
d6142 2
a6143 1
void __glXDispSwap_VertexAttribs1dvNV(GLbyte * pc)
d6145 1
a6145 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6149 3
a6151 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, cmdlen);
d6156 6
a6161 5
    CALL_VertexAttribs1dvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
        n,
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  8), 0 )
    ) );
d6164 2
a6165 1
void __glXDispSwap_VertexAttribs1fvNV(GLbyte * pc)
d6167 1
a6167 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6169 6
a6174 5
    CALL_VertexAttribs1fvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
        n,
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 0 )
    ) );
d6177 2
a6178 1
void __glXDispSwap_VertexAttribs1svNV(GLbyte * pc)
d6180 1
a6180 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6182 6
a6187 5
    CALL_VertexAttribs1svNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
        n,
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  8), 0 )
    ) );
d6190 2
a6191 1
void __glXDispSwap_VertexAttribs2dvNV(GLbyte * pc)
d6193 1
a6193 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6197 3
a6199 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, cmdlen);
d6204 6
a6209 5
    CALL_VertexAttribs2dvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
        n,
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  8), 0 )
    ) );
d6212 2
a6213 1
void __glXDispSwap_VertexAttribs2fvNV(GLbyte * pc)
d6215 1
a6215 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6217 6
a6222 5
    CALL_VertexAttribs2fvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
        n,
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 0 )
    ) );
d6225 2
a6226 1
void __glXDispSwap_VertexAttribs2svNV(GLbyte * pc)
d6228 1
a6228 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6230 6
a6235 5
    CALL_VertexAttribs2svNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
        n,
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  8), 0 )
    ) );
d6238 2
a6239 1
void __glXDispSwap_VertexAttribs3dvNV(GLbyte * pc)
d6241 1
a6241 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6245 3
a6247 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, cmdlen);
d6252 6
a6257 5
    CALL_VertexAttribs3dvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
        n,
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  8), 0 )
    ) );
d6260 2
a6261 1
void __glXDispSwap_VertexAttribs3fvNV(GLbyte * pc)
d6263 1
a6263 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6265 6
a6270 5
    CALL_VertexAttribs3fvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
        n,
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 0 )
    ) );
d6273 2
a6274 1
void __glXDispSwap_VertexAttribs3svNV(GLbyte * pc)
d6276 1
a6276 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6278 6
a6283 5
    CALL_VertexAttribs3svNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
        n,
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  8), 0 )
    ) );
d6286 2
a6287 1
void __glXDispSwap_VertexAttribs4dvNV(GLbyte * pc)
d6289 1
a6289 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6293 3
a6295 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, cmdlen);
d6300 6
a6305 5
    CALL_VertexAttribs4dvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
        n,
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  8), 0 )
    ) );
d6308 2
a6309 1
void __glXDispSwap_VertexAttribs4fvNV(GLbyte * pc)
d6311 1
a6311 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6313 6
a6318 5
    CALL_VertexAttribs4fvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
        n,
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 0 )
    ) );
d6321 2
a6322 1
void __glXDispSwap_VertexAttribs4svNV(GLbyte * pc)
d6324 1
a6324 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6326 6
a6331 5
    CALL_VertexAttribs4svNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
        n,
         (const GLshort *)bswap_16_array( (uint16_t *) (pc +  8), 0 )
    ) );
d6334 2
a6335 1
void __glXDispSwap_VertexAttribs4ubvNV(GLbyte * pc)
d6337 1
a6337 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6339 3
a6341 5
    CALL_VertexAttribs4ubvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
        n,
         (const GLubyte *)(pc +  8)
    ) );
d6344 2
a6345 1
void __glXDispSwap_PointParameteriNV(GLbyte * pc)
d6347 3
a6349 4
    CALL_PointParameteriNV( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLint   )bswap_CARD32 ( pc +  4 )
    ) );
d6352 2
a6353 1
void __glXDispSwap_PointParameterivNV(GLbyte * pc)
d6355 2
a6356 2
    const GLenum pname =  (GLenum  )bswap_ENUM   ( pc +  0 );
    const GLint * params;
d6358 3
a6360 1
    params = (const GLint *) bswap_32_array( (uint32_t *) (pc + 4), __glPointParameterivNV_size(pname) );
d6362 1
a6362 4
    CALL_PointParameterivNV( GET_DISPATCH(), (
        pname,
        params
    ) );
d6365 2
a6366 1
void __glXDispSwap_ActiveStencilFaceEXT(GLbyte * pc)
d6368 2
a6369 3
    CALL_ActiveStencilFaceEXT( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d6372 2
a6373 1
int __glXDispSwap_GetProgramNamedParameterdvNV(__GLXclientState *cl, GLbyte *pc)
d6375 1
a6375 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d6377 2
a6378 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d6381 2
a6382 2
    if ( cx != NULL ) {
        const GLsizei len =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6385 9
a6393 7
        CALL_GetProgramNamedParameterdvNV( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 ),
            len,
             (const GLubyte *)(pc +  8),
            params
        ) );
        (void) bswap_64_array( (uint64_t *) params, 4 );
d6401 2
a6402 1
int __glXDispSwap_GetProgramNamedParameterfvNV(__GLXclientState *cl, GLbyte *pc)
d6404 1
a6404 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d6406 2
a6407 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d6410 2
a6411 2
    if ( cx != NULL ) {
        const GLsizei len =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6414 9
a6422 7
        CALL_GetProgramNamedParameterfvNV( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 ),
            len,
             (const GLubyte *)(pc +  8),
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, 4 );
d6430 2
a6431 1
void __glXDispSwap_ProgramNamedParameter4dvNV(GLbyte * pc)
d6433 1
a6433 1
    const GLsizei len =  (GLsizei )bswap_CARD32 ( pc + 36 );
d6437 3
a6439 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, cmdlen);
d6444 9
a6452 6
    CALL_ProgramNamedParameter4dvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc + 32 ),
        len,
         (const GLubyte *)(pc + 40),
         (const GLdouble *)bswap_64_array( (uint64_t *) (pc +  0), 4 )
    ) );
d6455 2
a6456 1
void __glXDispSwap_ProgramNamedParameter4fvNV(GLbyte * pc)
d6458 1
a6458 1
    const GLsizei len =  (GLsizei )bswap_CARD32 ( pc +  4 );
d6460 9
a6468 6
    CALL_ProgramNamedParameter4fvNV( GET_DISPATCH(), (
         (GLuint  )bswap_CARD32 ( pc +  0 ),
        len,
         (const GLubyte *)(pc + 24),
         (const GLfloat *)bswap_32_array( (uint32_t *) (pc +  8), 4 )
    ) );
d6471 2
a6472 1
void __glXDispSwap_BlendEquationSeparateEXT(GLbyte * pc)
d6474 3
a6476 4
    CALL_BlendEquationSeparateEXT( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 )
    ) );
d6479 2
a6480 1
void __glXDispSwap_BindFramebufferEXT(GLbyte * pc)
d6482 3
a6484 4
    CALL_BindFramebufferEXT( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLuint  )bswap_CARD32 ( pc +  4 )
    ) );
d6487 2
a6488 1
void __glXDispSwap_BindRenderbufferEXT(GLbyte * pc)
d6490 3
a6492 4
    CALL_BindRenderbufferEXT( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLuint  )bswap_CARD32 ( pc +  4 )
    ) );
d6495 2
a6496 1
int __glXDispSwap_CheckFramebufferStatusEXT(__GLXclientState *cl, GLbyte *pc)
d6498 1
a6498 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d6500 2
a6501 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d6504 1
a6504 1
    if ( cx != NULL ) {
d6506 5
a6510 3
        retval = CALL_CheckFramebufferStatusEXT( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 )
        ) );
d6518 2
a6519 1
void __glXDispSwap_DeleteFramebuffersEXT(GLbyte * pc)
d6521 1
a6521 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d6523 7
a6529 4
    CALL_DeleteFramebuffersEXT( GET_DISPATCH(), (
        n,
         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
    ) );
d6532 2
a6533 1
void __glXDispSwap_DeleteRenderbuffersEXT(GLbyte * pc)
d6535 1
a6535 1
    const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d6537 7
a6543 4
    CALL_DeleteRenderbuffersEXT( GET_DISPATCH(), (
        n,
         (const GLuint *)bswap_32_array( (uint32_t *) (pc +  4), 0 )
    ) );
d6546 2
a6547 1
void __glXDispSwap_FramebufferRenderbufferEXT(GLbyte * pc)
d6549 9
a6557 6
    CALL_FramebufferRenderbufferEXT( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLenum  )bswap_ENUM   ( pc +  8 ),
         (GLuint  )bswap_CARD32 ( pc + 12 )
    ) );
d6560 2
a6561 1
void __glXDispSwap_FramebufferTexture1DEXT(GLbyte * pc)
d6563 7
a6569 7
    CALL_FramebufferTexture1DEXT( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLenum  )bswap_ENUM   ( pc +  8 ),
         (GLuint  )bswap_CARD32 ( pc + 12 ),
         (GLint   )bswap_CARD32 ( pc + 16 )
    ) );
d6572 2
a6573 1
void __glXDispSwap_FramebufferTexture2DEXT(GLbyte * pc)
d6575 7
a6581 7
    CALL_FramebufferTexture2DEXT( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLenum  )bswap_ENUM   ( pc +  8 ),
         (GLuint  )bswap_CARD32 ( pc + 12 ),
         (GLint   )bswap_CARD32 ( pc + 16 )
    ) );
d6584 2
a6585 1
void __glXDispSwap_FramebufferTexture3DEXT(GLbyte * pc)
d6587 8
a6594 8
    CALL_FramebufferTexture3DEXT( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLenum  )bswap_ENUM   ( pc +  8 ),
         (GLuint  )bswap_CARD32 ( pc + 12 ),
         (GLint   )bswap_CARD32 ( pc + 16 ),
         (GLint   )bswap_CARD32 ( pc + 20 )
    ) );
d6597 2
a6598 1
int __glXDispSwap_GenFramebuffersEXT(__GLXclientState *cl, GLbyte *pc)
d6600 1
a6600 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d6602 2
a6603 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d6606 2
a6607 2
    if ( cx != NULL ) {
        const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d6610 5
a6614 6
        GLuint * framebuffers = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
        CALL_GenFramebuffersEXT( GET_DISPATCH(), (
            n,
            framebuffers
        ) );
        (void) bswap_32_array( (uint32_t *) framebuffers, n );
d6622 2
a6623 1
int __glXDispSwap_GenRenderbuffersEXT(__GLXclientState *cl, GLbyte *pc)
d6625 1
a6625 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d6627 2
a6628 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d6631 2
a6632 2
    if ( cx != NULL ) {
        const GLsizei n =  (GLsizei )bswap_CARD32 ( pc +  0 );
d6635 5
a6639 6
        GLuint * renderbuffers = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
        CALL_GenRenderbuffersEXT( GET_DISPATCH(), (
            n,
            renderbuffers
        ) );
        (void) bswap_32_array( (uint32_t *) renderbuffers, n );
d6647 2
a6648 1
void __glXDispSwap_GenerateMipmapEXT(GLbyte * pc)
d6650 2
a6651 3
    CALL_GenerateMipmapEXT( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 )
    ) );
d6654 3
a6656 1
int __glXDispSwap_GetFramebufferAttachmentParameterivEXT(__GLXclientState *cl, GLbyte *pc)
d6658 1
a6658 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d6660 2
a6661 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d6664 1
a6664 1
    if ( cx != NULL ) {
d6666 12
a6677 7
        CALL_GetFramebufferAttachmentParameterivEXT( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
             (GLenum  )bswap_ENUM   ( pc +  4 ),
             (GLenum  )bswap_ENUM   ( pc +  8 ),
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, 1 );
d6685 2
a6686 1
int __glXDispSwap_GetRenderbufferParameterivEXT(__GLXclientState *cl, GLbyte *pc)
d6688 1
a6688 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d6690 2
a6691 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d6694 1
a6694 1
    if ( cx != NULL ) {
d6696 7
a6702 6
        CALL_GetRenderbufferParameterivEXT( GET_DISPATCH(), (
             (GLenum  )bswap_ENUM   ( pc +  0 ),
             (GLenum  )bswap_ENUM   ( pc +  4 ),
            params
        ) );
        (void) bswap_32_array( (uint32_t *) params, 1 );
d6710 2
a6711 1
int __glXDispSwap_IsFramebufferEXT(__GLXclientState *cl, GLbyte *pc)
d6713 1
a6713 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d6715 2
a6716 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d6719 1
a6719 1
    if ( cx != NULL ) {
d6721 4
a6724 3
        retval = CALL_IsFramebufferEXT( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 )
        ) );
d6732 2
a6733 1
int __glXDispSwap_IsRenderbufferEXT(__GLXclientState *cl, GLbyte *pc)
d6735 1
a6735 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d6737 2
a6738 1
    __GLXcontext * const cx = __glXForceCurrent(cl, bswap_CARD32( &req->contextTag ), &error);
d6741 1
a6741 1
    if ( cx != NULL ) {
d6743 4
a6746 3
        retval = CALL_IsRenderbufferEXT( GET_DISPATCH(), (
             (GLuint  )bswap_CARD32 ( pc +  0 )
        ) );
d6754 2
a6755 1
void __glXDispSwap_RenderbufferStorageEXT(GLbyte * pc)
d6757 37
a6793 6
    CALL_RenderbufferStorageEXT( GET_DISPATCH(), (
         (GLenum  )bswap_ENUM   ( pc +  0 ),
         (GLenum  )bswap_ENUM   ( pc +  4 ),
         (GLsizei )bswap_CARD32 ( pc +  8 ),
         (GLsizei )bswap_CARD32 ( pc + 12 )
    ) );
a6794 1

@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d3882 1
a3882 1
    const GLvoid * const pixels = (const GLvoid *) (ptr_is_null != 0) ? NULL : (pc + 80);
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d39 1
a40 1
#include "glapi.h"
d3095 1
a3095 2
    const CARD32 ptr_is_null = *(CARD32 *)(pc + 52);
    const GLvoid * const pixels = (const GLvoid *) (ptr_is_null != 0) ? NULL : (pc + 56);
d3118 1
a3118 2
    const CARD32 ptr_is_null = *(CARD32 *)(pc + 52);
    const GLvoid * const pixels = (const GLvoid *) (ptr_is_null != 0) ? NULL : (pc + 56);
d3910 1
a3910 2
    const CARD32 ptr_is_null = *(CARD32 *)(pc + 84);
    const GLvoid * const pixels = (const GLvoid *) (ptr_is_null != 0) ? NULL : (pc + 88);
@

