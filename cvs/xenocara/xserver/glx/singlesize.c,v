head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.14
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.12
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.8
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.05.02.19.27.47;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.14;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@/*
 * SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008)
 * Copyright (C) 1991-2000 Silicon Graphics, Inc. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice including the dates of first publication and
 * either this permission notice or a reference to
 * http://oss.sgi.com/projects/FreeB/
 * shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of Silicon Graphics, Inc.
 * shall not be used in advertising or otherwise to promote the sale, use or
 * other dealings in this Software without prior written authorization from
 * Silicon Graphics, Inc.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <GL/gl.h>
#include "glxserver.h"
#include "singlesize.h"
#include "indirect_size_get.h"

/*
** These routines compute the size of variable-size returned parameters.
** Unlike the similar routines that do the same thing for variable-size
** incoming parameters, the samplegl library itself doesn't use these routines.
** Hence, they are located here, in the GLX extension library.
*/

GLint
__glReadPixels_size(GLenum format, GLenum type, GLint w, GLint h)
{
    return __glXImageSize(format, type, 0, w, h, 1, 0, 0, 0, 0, 4);
}

GLint
__glGetMap_size(GLenum target, GLenum query)
{
    GLint k, order = 0, majorMinor[2];

    /*
     ** Assume target and query are both valid.
     */
    switch (target) {
    case GL_MAP1_COLOR_4:
    case GL_MAP1_NORMAL:
    case GL_MAP1_INDEX:
    case GL_MAP1_TEXTURE_COORD_1:
    case GL_MAP1_TEXTURE_COORD_2:
    case GL_MAP1_TEXTURE_COORD_3:
    case GL_MAP1_TEXTURE_COORD_4:
    case GL_MAP1_VERTEX_3:
    case GL_MAP1_VERTEX_4:
        switch (query) {
        case GL_COEFF:
            k = __glMap1d_size(target);
            glGetMapiv(target, GL_ORDER, &order);
            /*
             ** The query above might fail, but then order will be zero anyway.
             */
            return order * k;
        case GL_DOMAIN:
            return 2;
        case GL_ORDER:
            return 1;
        }
        break;
    case GL_MAP2_COLOR_4:
    case GL_MAP2_NORMAL:
    case GL_MAP2_INDEX:
    case GL_MAP2_TEXTURE_COORD_1:
    case GL_MAP2_TEXTURE_COORD_2:
    case GL_MAP2_TEXTURE_COORD_3:
    case GL_MAP2_TEXTURE_COORD_4:
    case GL_MAP2_VERTEX_3:
    case GL_MAP2_VERTEX_4:
        switch (query) {
        case GL_COEFF:
            k = __glMap2d_size(target);
            majorMinor[0] = majorMinor[1] = 0;
            glGetMapiv(target, GL_ORDER, majorMinor);
            /*
             ** The query above might fail, but then majorMinor will be zeroes
             */
            return majorMinor[0] * majorMinor[1] * k;
        case GL_DOMAIN:
            return 4;
        case GL_ORDER:
            return 2;
        }
        break;
    }
    return -1;
}

GLint
__glGetMapdv_size(GLenum target, GLenum query)
{
    return __glGetMap_size(target, query);
}

GLint
__glGetMapfv_size(GLenum target, GLenum query)
{
    return __glGetMap_size(target, query);
}

GLint
__glGetMapiv_size(GLenum target, GLenum query)
{
    return __glGetMap_size(target, query);
}

GLint
__glGetPixelMap_size(GLenum map)
{
    GLint size;
    GLenum query;

    switch (map) {
    case GL_PIXEL_MAP_I_TO_I:
        query = GL_PIXEL_MAP_I_TO_I_SIZE;
        break;
    case GL_PIXEL_MAP_S_TO_S:
        query = GL_PIXEL_MAP_S_TO_S_SIZE;
        break;
    case GL_PIXEL_MAP_I_TO_R:
        query = GL_PIXEL_MAP_I_TO_R_SIZE;
        break;
    case GL_PIXEL_MAP_I_TO_G:
        query = GL_PIXEL_MAP_I_TO_G_SIZE;
        break;
    case GL_PIXEL_MAP_I_TO_B:
        query = GL_PIXEL_MAP_I_TO_B_SIZE;
        break;
    case GL_PIXEL_MAP_I_TO_A:
        query = GL_PIXEL_MAP_I_TO_A_SIZE;
        break;
    case GL_PIXEL_MAP_R_TO_R:
        query = GL_PIXEL_MAP_R_TO_R_SIZE;
        break;
    case GL_PIXEL_MAP_G_TO_G:
        query = GL_PIXEL_MAP_G_TO_G_SIZE;
        break;
    case GL_PIXEL_MAP_B_TO_B:
        query = GL_PIXEL_MAP_B_TO_B_SIZE;
        break;
    case GL_PIXEL_MAP_A_TO_A:
        query = GL_PIXEL_MAP_A_TO_A_SIZE;
        break;
    default:
        return -1;
    }
    glGetIntegerv(query, &size);
    return size;
}

GLint
__glGetPixelMapfv_size(GLenum map)
{
    return __glGetPixelMap_size(map);
}

GLint
__glGetPixelMapuiv_size(GLenum map)
{
    return __glGetPixelMap_size(map);
}

GLint
__glGetPixelMapusv_size(GLenum map)
{
    return __glGetPixelMap_size(map);
}

GLint
__glGetTexImage_size(GLenum target, GLint level, GLenum format,
                     GLenum type, GLint width, GLint height, GLint depth)
{
    return __glXImageSize(format, type, target, width, height, depth,
                          0, 0, 0, 0, 4);
}
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a38 4
#include "glapitable.h"
#include "glapi.h"
#include "glthread.h"
#include "dispatch.h"
d74 1
a74 1
            CALL_GetMapiv(GET_DISPATCH(), (target, GL_ORDER, &order));
d98 1
a98 1
            CALL_GetMapiv(GET_DISPATCH(), (target, GL_ORDER, majorMinor));
d171 1
a171 1
    CALL_GetIntegerv(GET_DISPATCH(), (query, &size));
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d51 2
a52 1
GLint __glReadPixels_size(GLenum format, GLenum type, GLint w, GLint h)
d54 1
a54 1
    return __glXImageSize( format, type, 0, w, h, 1, 0, 0, 0, 0, 4 );
d57 2
a58 1
GLint __glGetMap_size(GLenum target, GLenum query)
d60 1
a60 1
    GLint k, order=0, majorMinor[2];
d63 2
a64 2
    ** Assume target and query are both valid.
    */
d66 47
a112 47
      case GL_MAP1_COLOR_4:
      case GL_MAP1_NORMAL:
      case GL_MAP1_INDEX:
      case GL_MAP1_TEXTURE_COORD_1:
      case GL_MAP1_TEXTURE_COORD_2:
      case GL_MAP1_TEXTURE_COORD_3:
      case GL_MAP1_TEXTURE_COORD_4:
      case GL_MAP1_VERTEX_3:
      case GL_MAP1_VERTEX_4:
	switch (query) {
	  case GL_COEFF:
	    k = __glMap1d_size(target);
	    CALL_GetMapiv( GET_DISPATCH(), (target, GL_ORDER, &order) );
	    /*
	    ** The query above might fail, but then order will be zero anyway.
	    */
	    return order * k;
	  case GL_DOMAIN:
	    return 2;
	  case GL_ORDER:
	    return 1;
	}
	break;
      case GL_MAP2_COLOR_4:
      case GL_MAP2_NORMAL:
      case GL_MAP2_INDEX:
      case GL_MAP2_TEXTURE_COORD_1:
      case GL_MAP2_TEXTURE_COORD_2:
      case GL_MAP2_TEXTURE_COORD_3:
      case GL_MAP2_TEXTURE_COORD_4:
      case GL_MAP2_VERTEX_3:
      case GL_MAP2_VERTEX_4:
	switch (query) {
	  case GL_COEFF:
	    k = __glMap2d_size(target);
	    majorMinor[0] = majorMinor[1] = 0;
	    CALL_GetMapiv( GET_DISPATCH(), (target, GL_ORDER, majorMinor) );
	    /*
	    ** The query above might fail, but then majorMinor will be zeroes
	    */
	    return majorMinor[0] * majorMinor[1] * k;
	  case GL_DOMAIN:
	    return 4;
	  case GL_ORDER:
	    return 2;
	}
	break;
d117 2
a118 1
GLint __glGetMapdv_size(GLenum target, GLenum query)
d123 2
a124 1
GLint __glGetMapfv_size(GLenum target, GLenum query)
d129 2
a130 1
GLint __glGetMapiv_size(GLenum target, GLenum query)
d135 2
a136 1
GLint __glGetPixelMap_size(GLenum map)
d142 32
a173 32
      case GL_PIXEL_MAP_I_TO_I:
	query = GL_PIXEL_MAP_I_TO_I_SIZE;
	break;
      case GL_PIXEL_MAP_S_TO_S:
	query = GL_PIXEL_MAP_S_TO_S_SIZE;
	break;
      case GL_PIXEL_MAP_I_TO_R:
	query = GL_PIXEL_MAP_I_TO_R_SIZE;
	break;
      case GL_PIXEL_MAP_I_TO_G:
	query = GL_PIXEL_MAP_I_TO_G_SIZE;
	break;
      case GL_PIXEL_MAP_I_TO_B:
	query = GL_PIXEL_MAP_I_TO_B_SIZE;
	break;
      case GL_PIXEL_MAP_I_TO_A:
	query = GL_PIXEL_MAP_I_TO_A_SIZE;
	break;
      case GL_PIXEL_MAP_R_TO_R:
	query = GL_PIXEL_MAP_R_TO_R_SIZE;
	break;
      case GL_PIXEL_MAP_G_TO_G:
	query = GL_PIXEL_MAP_G_TO_G_SIZE;
	break;
      case GL_PIXEL_MAP_B_TO_B:
	query = GL_PIXEL_MAP_B_TO_B_SIZE;
	break;
      case GL_PIXEL_MAP_A_TO_A:
	query = GL_PIXEL_MAP_A_TO_A_SIZE;
	break;
      default:
	return -1;
d175 1
a175 1
    CALL_GetIntegerv( GET_DISPATCH(), (query, &size) );
d179 2
a180 1
GLint __glGetPixelMapfv_size(GLenum map)
d185 2
a186 1
GLint __glGetPixelMapuiv_size(GLenum map)
d191 2
a192 1
GLint __glGetPixelMapusv_size(GLenum map)
d197 3
a199 2
GLint __glGetTexImage_size(GLenum target, GLint level, GLenum format,
			   GLenum type, GLint width, GLint height, GLint depth)
d201 2
a202 2
    return __glXImageSize( format, type, target, width, height, depth,
			   0, 0, 0, 0, 4 );
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d80 1
a80 1
	    return (order * k);
d104 1
a104 1
	    return (majorMinor[0] * majorMinor[1] * k);
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d2 28
a29 33
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
** 
** http://oss.sgi.com/projects/FreeB
** 
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
** 
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
** Copyright in any portions created by third parties is as indicated
** elsewhere herein. All Rights Reserved.
** 
** Additional Notice Provisions: The application programming interfaces
** established by SGI in conjunction with the Original Code are The
** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
** Window System(R) (Version 1.3), released October 19, 1998. This software
** was created using the OpenGL(R) version 1.2.1 Sample Implementation
** published by SGI, but has not been independently verified as being
** compliant with the OpenGL(R) version 1.2.1 Specification.
**
*/
@

