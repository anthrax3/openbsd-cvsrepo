head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.09.16.19.10.21;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Te1daavkBLskZ8gc;

1.6
date	2014.12.09.17.58.52;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	vcnjRBuLQw44cPHf;

1.5
date	2014.05.02.19.27.47;	author matthieu;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	2010.07.27.19.02.26;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.14;	author matthieu;	state Exp;
branches;
next	;

1.4.8.1
date	2014.12.09.18.00.12;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.5.2.1
date	2014.12.09.17.59.32;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.7
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/* DO NOT EDIT - This file generated automatically by glX_proto_recv.py (from Mesa) script */

/*
 * (C) Copyright IBM Corporation 2005
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sub license,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * IBM,
 * AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <inttypes.h>
#include "glxserver.h"
#include "indirect_size.h"
#include "indirect_size_get.h"
#include "indirect_dispatch.h"
#include "glxbyteorder.h"
#include "indirect_util.h"
#include "singlesize.h"

#define __GLX_PAD(x)  (((x) + 3) & ~3)

typedef struct {
    __GLX_PIXEL_3D_HDR;
} __GLXpixel3DHeader;

extern GLboolean __glXErrorOccured(void);
extern void __glXClearErrorOccured(void);

static const unsigned dummy_answer[2] = { 0, 0 };

int
__glXDisp_NewList(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        glNewList(*(GLuint *) (pc + 0), *(GLenum *) (pc + 4));
        error = Success;
    }

    return error;
}

int
__glXDisp_EndList(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        glEndList();
        error = Success;
    }

    return error;
}

void
__glXDisp_CallList(GLbyte * pc)
{
    glCallList(*(GLuint *) (pc + 0));
}

void
__glXDisp_CallLists(GLbyte * pc)
{
    const GLsizei n = *(GLsizei *) (pc + 0);
    const GLenum type = *(GLenum *) (pc + 4);
    const GLvoid *lists = (const GLvoid *) (pc + 8);

    lists = (const GLvoid *) (pc + 8);

    glCallLists(n, type, lists);
}

int
__glXDisp_DeleteLists(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        glDeleteLists(*(GLuint *) (pc + 0), *(GLsizei *) (pc + 4));
        error = Success;
    }

    return error;
}

int
__glXDisp_GenLists(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        GLuint retval;

        retval = glGenLists(*(GLsizei *) (pc + 0));
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDisp_ListBase(GLbyte * pc)
{
    glListBase(*(GLuint *) (pc + 0));
}

void
__glXDisp_Begin(GLbyte * pc)
{
    glBegin(*(GLenum *) (pc + 0));
}

void
__glXDisp_Bitmap(GLbyte * pc)
{
    const GLubyte *const bitmap = (const GLubyte *) ((pc + 44));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength);
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows);
    glPixelStorei(GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels);
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment);

    glBitmap(*(GLsizei *) (pc + 20),
             *(GLsizei *) (pc + 24),
             *(GLfloat *) (pc + 28),
             *(GLfloat *) (pc + 32),
             *(GLfloat *) (pc + 36), *(GLfloat *) (pc + 40), bitmap);
}

void
__glXDisp_Color3bv(GLbyte * pc)
{
    glColor3bv((const GLbyte *) (pc + 0));
}

void
__glXDisp_Color3dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    glColor3dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_Color3fv(GLbyte * pc)
{
    glColor3fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_Color3iv(GLbyte * pc)
{
    glColor3iv((const GLint *) (pc + 0));
}

void
__glXDisp_Color3sv(GLbyte * pc)
{
    glColor3sv((const GLshort *) (pc + 0));
}

void
__glXDisp_Color3ubv(GLbyte * pc)
{
    glColor3ubv((const GLubyte *) (pc + 0));
}

void
__glXDisp_Color3uiv(GLbyte * pc)
{
    glColor3uiv((const GLuint *) (pc + 0));
}

void
__glXDisp_Color3usv(GLbyte * pc)
{
    glColor3usv((const GLushort *) (pc + 0));
}

void
__glXDisp_Color4bv(GLbyte * pc)
{
    glColor4bv((const GLbyte *) (pc + 0));
}

void
__glXDisp_Color4dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 32);
        pc -= 4;
    }
#endif

    glColor4dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_Color4fv(GLbyte * pc)
{
    glColor4fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_Color4iv(GLbyte * pc)
{
    glColor4iv((const GLint *) (pc + 0));
}

void
__glXDisp_Color4sv(GLbyte * pc)
{
    glColor4sv((const GLshort *) (pc + 0));
}

void
__glXDisp_Color4ubv(GLbyte * pc)
{
    glColor4ubv((const GLubyte *) (pc + 0));
}

void
__glXDisp_Color4uiv(GLbyte * pc)
{
    glColor4uiv((const GLuint *) (pc + 0));
}

void
__glXDisp_Color4usv(GLbyte * pc)
{
    glColor4usv((const GLushort *) (pc + 0));
}

void
__glXDisp_EdgeFlagv(GLbyte * pc)
{
    glEdgeFlagv((const GLboolean *) (pc + 0));
}

void
__glXDisp_End(GLbyte * pc)
{
    glEnd();
}

void
__glXDisp_Indexdv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 8);
        pc -= 4;
    }
#endif

    glIndexdv((const GLdouble *) (pc + 0));
}

void
__glXDisp_Indexfv(GLbyte * pc)
{
    glIndexfv((const GLfloat *) (pc + 0));
}

void
__glXDisp_Indexiv(GLbyte * pc)
{
    glIndexiv((const GLint *) (pc + 0));
}

void
__glXDisp_Indexsv(GLbyte * pc)
{
    glIndexsv((const GLshort *) (pc + 0));
}

void
__glXDisp_Normal3bv(GLbyte * pc)
{
    glNormal3bv((const GLbyte *) (pc + 0));
}

void
__glXDisp_Normal3dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    glNormal3dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_Normal3fv(GLbyte * pc)
{
    glNormal3fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_Normal3iv(GLbyte * pc)
{
    glNormal3iv((const GLint *) (pc + 0));
}

void
__glXDisp_Normal3sv(GLbyte * pc)
{
    glNormal3sv((const GLshort *) (pc + 0));
}

void
__glXDisp_RasterPos2dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 16);
        pc -= 4;
    }
#endif

    glRasterPos2dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_RasterPos2fv(GLbyte * pc)
{
    glRasterPos2fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_RasterPos2iv(GLbyte * pc)
{
    glRasterPos2iv((const GLint *) (pc + 0));
}

void
__glXDisp_RasterPos2sv(GLbyte * pc)
{
    glRasterPos2sv((const GLshort *) (pc + 0));
}

void
__glXDisp_RasterPos3dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    glRasterPos3dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_RasterPos3fv(GLbyte * pc)
{
    glRasterPos3fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_RasterPos3iv(GLbyte * pc)
{
    glRasterPos3iv((const GLint *) (pc + 0));
}

void
__glXDisp_RasterPos3sv(GLbyte * pc)
{
    glRasterPos3sv((const GLshort *) (pc + 0));
}

void
__glXDisp_RasterPos4dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 32);
        pc -= 4;
    }
#endif

    glRasterPos4dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_RasterPos4fv(GLbyte * pc)
{
    glRasterPos4fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_RasterPos4iv(GLbyte * pc)
{
    glRasterPos4iv((const GLint *) (pc + 0));
}

void
__glXDisp_RasterPos4sv(GLbyte * pc)
{
    glRasterPos4sv((const GLshort *) (pc + 0));
}

void
__glXDisp_Rectdv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 32);
        pc -= 4;
    }
#endif

    glRectdv((const GLdouble *) (pc + 0), (const GLdouble *) (pc + 16));
}

void
__glXDisp_Rectfv(GLbyte * pc)
{
    glRectfv((const GLfloat *) (pc + 0), (const GLfloat *) (pc + 8));
}

void
__glXDisp_Rectiv(GLbyte * pc)
{
    glRectiv((const GLint *) (pc + 0), (const GLint *) (pc + 8));
}

void
__glXDisp_Rectsv(GLbyte * pc)
{
    glRectsv((const GLshort *) (pc + 0), (const GLshort *) (pc + 4));
}

void
__glXDisp_TexCoord1dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 8);
        pc -= 4;
    }
#endif

    glTexCoord1dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_TexCoord1fv(GLbyte * pc)
{
    glTexCoord1fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_TexCoord1iv(GLbyte * pc)
{
    glTexCoord1iv((const GLint *) (pc + 0));
}

void
__glXDisp_TexCoord1sv(GLbyte * pc)
{
    glTexCoord1sv((const GLshort *) (pc + 0));
}

void
__glXDisp_TexCoord2dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 16);
        pc -= 4;
    }
#endif

    glTexCoord2dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_TexCoord2fv(GLbyte * pc)
{
    glTexCoord2fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_TexCoord2iv(GLbyte * pc)
{
    glTexCoord2iv((const GLint *) (pc + 0));
}

void
__glXDisp_TexCoord2sv(GLbyte * pc)
{
    glTexCoord2sv((const GLshort *) (pc + 0));
}

void
__glXDisp_TexCoord3dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    glTexCoord3dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_TexCoord3fv(GLbyte * pc)
{
    glTexCoord3fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_TexCoord3iv(GLbyte * pc)
{
    glTexCoord3iv((const GLint *) (pc + 0));
}

void
__glXDisp_TexCoord3sv(GLbyte * pc)
{
    glTexCoord3sv((const GLshort *) (pc + 0));
}

void
__glXDisp_TexCoord4dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 32);
        pc -= 4;
    }
#endif

    glTexCoord4dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_TexCoord4fv(GLbyte * pc)
{
    glTexCoord4fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_TexCoord4iv(GLbyte * pc)
{
    glTexCoord4iv((const GLint *) (pc + 0));
}

void
__glXDisp_TexCoord4sv(GLbyte * pc)
{
    glTexCoord4sv((const GLshort *) (pc + 0));
}

void
__glXDisp_Vertex2dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 16);
        pc -= 4;
    }
#endif

    glVertex2dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_Vertex2fv(GLbyte * pc)
{
    glVertex2fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_Vertex2iv(GLbyte * pc)
{
    glVertex2iv((const GLint *) (pc + 0));
}

void
__glXDisp_Vertex2sv(GLbyte * pc)
{
    glVertex2sv((const GLshort *) (pc + 0));
}

void
__glXDisp_Vertex3dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    glVertex3dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_Vertex3fv(GLbyte * pc)
{
    glVertex3fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_Vertex3iv(GLbyte * pc)
{
    glVertex3iv((const GLint *) (pc + 0));
}

void
__glXDisp_Vertex3sv(GLbyte * pc)
{
    glVertex3sv((const GLshort *) (pc + 0));
}

void
__glXDisp_Vertex4dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 32);
        pc -= 4;
    }
#endif

    glVertex4dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_Vertex4fv(GLbyte * pc)
{
    glVertex4fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_Vertex4iv(GLbyte * pc)
{
    glVertex4iv((const GLint *) (pc + 0));
}

void
__glXDisp_Vertex4sv(GLbyte * pc)
{
    glVertex4sv((const GLshort *) (pc + 0));
}

void
__glXDisp_ClipPlane(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 36);
        pc -= 4;
    }
#endif

    glClipPlane(*(GLenum *) (pc + 32), (const GLdouble *) (pc + 0));
}

void
__glXDisp_ColorMaterial(GLbyte * pc)
{
    glColorMaterial(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4));
}

void
__glXDisp_CullFace(GLbyte * pc)
{
    glCullFace(*(GLenum *) (pc + 0));
}

void
__glXDisp_Fogf(GLbyte * pc)
{
    glFogf(*(GLenum *) (pc + 0), *(GLfloat *) (pc + 4));
}

void
__glXDisp_Fogfv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 0);
    const GLfloat *params;

    params = (const GLfloat *) (pc + 4);

    glFogfv(pname, params);
}

void
__glXDisp_Fogi(GLbyte * pc)
{
    glFogi(*(GLenum *) (pc + 0), *(GLint *) (pc + 4));
}

void
__glXDisp_Fogiv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 0);
    const GLint *params;

    params = (const GLint *) (pc + 4);

    glFogiv(pname, params);
}

void
__glXDisp_FrontFace(GLbyte * pc)
{
    glFrontFace(*(GLenum *) (pc + 0));
}

void
__glXDisp_Hint(GLbyte * pc)
{
    glHint(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4));
}

void
__glXDisp_Lightf(GLbyte * pc)
{
    glLightf(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4), *(GLfloat *) (pc + 8));
}

void
__glXDisp_Lightfv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLfloat *params;

    params = (const GLfloat *) (pc + 8);

    glLightfv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_Lighti(GLbyte * pc)
{
    glLighti(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4), *(GLint *) (pc + 8));
}

void
__glXDisp_Lightiv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLint *params;

    params = (const GLint *) (pc + 8);

    glLightiv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_LightModelf(GLbyte * pc)
{
    glLightModelf(*(GLenum *) (pc + 0), *(GLfloat *) (pc + 4));
}

void
__glXDisp_LightModelfv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 0);
    const GLfloat *params;

    params = (const GLfloat *) (pc + 4);

    glLightModelfv(pname, params);
}

void
__glXDisp_LightModeli(GLbyte * pc)
{
    glLightModeli(*(GLenum *) (pc + 0), *(GLint *) (pc + 4));
}

void
__glXDisp_LightModeliv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 0);
    const GLint *params;

    params = (const GLint *) (pc + 4);

    glLightModeliv(pname, params);
}

void
__glXDisp_LineStipple(GLbyte * pc)
{
    glLineStipple(*(GLint *) (pc + 0), *(GLushort *) (pc + 4));
}

void
__glXDisp_LineWidth(GLbyte * pc)
{
    glLineWidth(*(GLfloat *) (pc + 0));
}

void
__glXDisp_Materialf(GLbyte * pc)
{
    glMaterialf(*(GLenum *) (pc + 0),
                *(GLenum *) (pc + 4), *(GLfloat *) (pc + 8));
}

void
__glXDisp_Materialfv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLfloat *params;

    params = (const GLfloat *) (pc + 8);

    glMaterialfv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_Materiali(GLbyte * pc)
{
    glMateriali(*(GLenum *) (pc + 0),
                *(GLenum *) (pc + 4), *(GLint *) (pc + 8));
}

void
__glXDisp_Materialiv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLint *params;

    params = (const GLint *) (pc + 8);

    glMaterialiv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_PointSize(GLbyte * pc)
{
    glPointSize(*(GLfloat *) (pc + 0));
}

void
__glXDisp_PolygonMode(GLbyte * pc)
{
    glPolygonMode(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4));
}

void
__glXDisp_PolygonStipple(GLbyte * pc)
{
    const GLubyte *const mask = (const GLubyte *) ((pc + 20));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength);
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows);
    glPixelStorei(GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels);
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment);

    glPolygonStipple(mask);
}

void
__glXDisp_Scissor(GLbyte * pc)
{
    glScissor(*(GLint *) (pc + 0),
              *(GLint *) (pc + 4),
              *(GLsizei *) (pc + 8), *(GLsizei *) (pc + 12));
}

void
__glXDisp_ShadeModel(GLbyte * pc)
{
    glShadeModel(*(GLenum *) (pc + 0));
}

void
__glXDisp_TexParameterf(GLbyte * pc)
{
    glTexParameterf(*(GLenum *) (pc + 0),
                    *(GLenum *) (pc + 4), *(GLfloat *) (pc + 8));
}

void
__glXDisp_TexParameterfv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLfloat *params;

    params = (const GLfloat *) (pc + 8);

    glTexParameterfv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_TexParameteri(GLbyte * pc)
{
    glTexParameteri(*(GLenum *) (pc + 0),
                    *(GLenum *) (pc + 4), *(GLint *) (pc + 8));
}

void
__glXDisp_TexParameteriv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLint *params;

    params = (const GLint *) (pc + 8);

    glTexParameteriv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_TexImage1D(GLbyte * pc)
{
    const GLvoid *const pixels = (const GLvoid *) ((pc + 52));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength);
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows);
    glPixelStorei(GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels);
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment);

    glTexImage1D(*(GLenum *) (pc + 20),
                 *(GLint *) (pc + 24),
                 *(GLint *) (pc + 28),
                 *(GLsizei *) (pc + 32),
                 *(GLint *) (pc + 40),
                 *(GLenum *) (pc + 44), *(GLenum *) (pc + 48), pixels);
}

void
__glXDisp_TexImage2D(GLbyte * pc)
{
    const GLvoid *const pixels = (const GLvoid *) ((pc + 52));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength);
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows);
    glPixelStorei(GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels);
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment);

    glTexImage2D(*(GLenum *) (pc + 20),
                 *(GLint *) (pc + 24),
                 *(GLint *) (pc + 28),
                 *(GLsizei *) (pc + 32),
                 *(GLsizei *) (pc + 36),
                 *(GLint *) (pc + 40),
                 *(GLenum *) (pc + 44), *(GLenum *) (pc + 48), pixels);
}

void
__glXDisp_TexEnvf(GLbyte * pc)
{
    glTexEnvf(*(GLenum *) (pc + 0),
              *(GLenum *) (pc + 4), *(GLfloat *) (pc + 8));
}

void
__glXDisp_TexEnvfv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLfloat *params;

    params = (const GLfloat *) (pc + 8);

    glTexEnvfv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_TexEnvi(GLbyte * pc)
{
    glTexEnvi(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4), *(GLint *) (pc + 8));
}

void
__glXDisp_TexEnviv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLint *params;

    params = (const GLint *) (pc + 8);

    glTexEnviv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_TexGend(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 16);
        pc -= 4;
    }
#endif

    glTexGend(*(GLenum *) (pc + 8),
              *(GLenum *) (pc + 12), *(GLdouble *) (pc + 0));
}

void
__glXDisp_TexGendv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLdouble *params;

#ifdef __GLX_ALIGN64
    const GLuint compsize = __glTexGendv_size(pname);
    const GLuint cmdlen = 12 + __GLX_PAD((compsize * 8)) - 4;

    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, cmdlen);
        pc -= 4;
    }
#endif

    params = (const GLdouble *) (pc + 8);

    glTexGendv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_TexGenf(GLbyte * pc)
{
    glTexGenf(*(GLenum *) (pc + 0),
              *(GLenum *) (pc + 4), *(GLfloat *) (pc + 8));
}

void
__glXDisp_TexGenfv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLfloat *params;

    params = (const GLfloat *) (pc + 8);

    glTexGenfv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_TexGeni(GLbyte * pc)
{
    glTexGeni(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4), *(GLint *) (pc + 8));
}

void
__glXDisp_TexGeniv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLint *params;

    params = (const GLint *) (pc + 8);

    glTexGeniv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_InitNames(GLbyte * pc)
{
    glInitNames();
}

void
__glXDisp_LoadName(GLbyte * pc)
{
    glLoadName(*(GLuint *) (pc + 0));
}

void
__glXDisp_PassThrough(GLbyte * pc)
{
    glPassThrough(*(GLfloat *) (pc + 0));
}

void
__glXDisp_PopName(GLbyte * pc)
{
    glPopName();
}

void
__glXDisp_PushName(GLbyte * pc)
{
    glPushName(*(GLuint *) (pc + 0));
}

void
__glXDisp_DrawBuffer(GLbyte * pc)
{
    glDrawBuffer(*(GLenum *) (pc + 0));
}

void
__glXDisp_Clear(GLbyte * pc)
{
    glClear(*(GLbitfield *) (pc + 0));
}

void
__glXDisp_ClearAccum(GLbyte * pc)
{
    glClearAccum(*(GLfloat *) (pc + 0),
                 *(GLfloat *) (pc + 4),
                 *(GLfloat *) (pc + 8), *(GLfloat *) (pc + 12));
}

void
__glXDisp_ClearIndex(GLbyte * pc)
{
    glClearIndex(*(GLfloat *) (pc + 0));
}

void
__glXDisp_ClearColor(GLbyte * pc)
{
    glClearColor(*(GLclampf *) (pc + 0),
                 *(GLclampf *) (pc + 4),
                 *(GLclampf *) (pc + 8), *(GLclampf *) (pc + 12));
}

void
__glXDisp_ClearStencil(GLbyte * pc)
{
    glClearStencil(*(GLint *) (pc + 0));
}

void
__glXDisp_ClearDepth(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 8);
        pc -= 4;
    }
#endif

    glClearDepth(*(GLclampd *) (pc + 0));
}

void
__glXDisp_StencilMask(GLbyte * pc)
{
    glStencilMask(*(GLuint *) (pc + 0));
}

void
__glXDisp_ColorMask(GLbyte * pc)
{
    glColorMask(*(GLboolean *) (pc + 0),
                *(GLboolean *) (pc + 1),
                *(GLboolean *) (pc + 2), *(GLboolean *) (pc + 3));
}

void
__glXDisp_DepthMask(GLbyte * pc)
{
    glDepthMask(*(GLboolean *) (pc + 0));
}

void
__glXDisp_IndexMask(GLbyte * pc)
{
    glIndexMask(*(GLuint *) (pc + 0));
}

void
__glXDisp_Accum(GLbyte * pc)
{
    glAccum(*(GLenum *) (pc + 0), *(GLfloat *) (pc + 4));
}

void
__glXDisp_Disable(GLbyte * pc)
{
    glDisable(*(GLenum *) (pc + 0));
}

void
__glXDisp_Enable(GLbyte * pc)
{
    glEnable(*(GLenum *) (pc + 0));
}

void
__glXDisp_PopAttrib(GLbyte * pc)
{
    glPopAttrib();
}

void
__glXDisp_PushAttrib(GLbyte * pc)
{
    glPushAttrib(*(GLbitfield *) (pc + 0));
}

void
__glXDisp_MapGrid1d(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 20);
        pc -= 4;
    }
#endif

    glMapGrid1d(*(GLint *) (pc + 16),
                *(GLdouble *) (pc + 0), *(GLdouble *) (pc + 8));
}

void
__glXDisp_MapGrid1f(GLbyte * pc)
{
    glMapGrid1f(*(GLint *) (pc + 0),
                *(GLfloat *) (pc + 4), *(GLfloat *) (pc + 8));
}

void
__glXDisp_MapGrid2d(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 40);
        pc -= 4;
    }
#endif

    glMapGrid2d(*(GLint *) (pc + 32),
                *(GLdouble *) (pc + 0),
                *(GLdouble *) (pc + 8),
                *(GLint *) (pc + 36),
                *(GLdouble *) (pc + 16), *(GLdouble *) (pc + 24));
}

void
__glXDisp_MapGrid2f(GLbyte * pc)
{
    glMapGrid2f(*(GLint *) (pc + 0),
                *(GLfloat *) (pc + 4),
                *(GLfloat *) (pc + 8),
                *(GLint *) (pc + 12),
                *(GLfloat *) (pc + 16), *(GLfloat *) (pc + 20));
}

void
__glXDisp_EvalCoord1dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 8);
        pc -= 4;
    }
#endif

    glEvalCoord1dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_EvalCoord1fv(GLbyte * pc)
{
    glEvalCoord1fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_EvalCoord2dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 16);
        pc -= 4;
    }
#endif

    glEvalCoord2dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_EvalCoord2fv(GLbyte * pc)
{
    glEvalCoord2fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_EvalMesh1(GLbyte * pc)
{
    glEvalMesh1(*(GLenum *) (pc + 0), *(GLint *) (pc + 4), *(GLint *) (pc + 8));
}

void
__glXDisp_EvalPoint1(GLbyte * pc)
{
    glEvalPoint1(*(GLint *) (pc + 0));
}

void
__glXDisp_EvalMesh2(GLbyte * pc)
{
    glEvalMesh2(*(GLenum *) (pc + 0),
                *(GLint *) (pc + 4),
                *(GLint *) (pc + 8),
                *(GLint *) (pc + 12), *(GLint *) (pc + 16));
}

void
__glXDisp_EvalPoint2(GLbyte * pc)
{
    glEvalPoint2(*(GLint *) (pc + 0), *(GLint *) (pc + 4));
}

void
__glXDisp_AlphaFunc(GLbyte * pc)
{
    glAlphaFunc(*(GLenum *) (pc + 0), *(GLclampf *) (pc + 4));
}

void
__glXDisp_BlendFunc(GLbyte * pc)
{
    glBlendFunc(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4));
}

void
__glXDisp_LogicOp(GLbyte * pc)
{
    glLogicOp(*(GLenum *) (pc + 0));
}

void
__glXDisp_StencilFunc(GLbyte * pc)
{
    glStencilFunc(*(GLenum *) (pc + 0),
                  *(GLint *) (pc + 4), *(GLuint *) (pc + 8));
}

void
__glXDisp_StencilOp(GLbyte * pc)
{
    glStencilOp(*(GLenum *) (pc + 0),
                *(GLenum *) (pc + 4), *(GLenum *) (pc + 8));
}

void
__glXDisp_DepthFunc(GLbyte * pc)
{
    glDepthFunc(*(GLenum *) (pc + 0));
}

void
__glXDisp_PixelZoom(GLbyte * pc)
{
    glPixelZoom(*(GLfloat *) (pc + 0), *(GLfloat *) (pc + 4));
}

void
__glXDisp_PixelTransferf(GLbyte * pc)
{
    glPixelTransferf(*(GLenum *) (pc + 0), *(GLfloat *) (pc + 4));
}

void
__glXDisp_PixelTransferi(GLbyte * pc)
{
    glPixelTransferi(*(GLenum *) (pc + 0), *(GLint *) (pc + 4));
}

int
__glXDisp_PixelStoref(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        glPixelStoref(*(GLenum *) (pc + 0), *(GLfloat *) (pc + 4));
        error = Success;
    }

    return error;
}

int
__glXDisp_PixelStorei(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        glPixelStorei(*(GLenum *) (pc + 0), *(GLint *) (pc + 4));
        error = Success;
    }

    return error;
}

void
__glXDisp_PixelMapfv(GLbyte * pc)
{
    const GLsizei mapsize = *(GLsizei *) (pc + 4);

    glPixelMapfv(*(GLenum *) (pc + 0), mapsize, (const GLfloat *) (pc + 8));
}

void
__glXDisp_PixelMapuiv(GLbyte * pc)
{
    const GLsizei mapsize = *(GLsizei *) (pc + 4);

    glPixelMapuiv(*(GLenum *) (pc + 0), mapsize, (const GLuint *) (pc + 8));
}

void
__glXDisp_PixelMapusv(GLbyte * pc)
{
    const GLsizei mapsize = *(GLsizei *) (pc + 4);

    glPixelMapusv(*(GLenum *) (pc + 0), mapsize, (const GLushort *) (pc + 8));
}

void
__glXDisp_ReadBuffer(GLbyte * pc)
{
    glReadBuffer(*(GLenum *) (pc + 0));
}

void
__glXDisp_CopyPixels(GLbyte * pc)
{
    glCopyPixels(*(GLint *) (pc + 0),
                 *(GLint *) (pc + 4),
                 *(GLsizei *) (pc + 8),
                 *(GLsizei *) (pc + 12), *(GLenum *) (pc + 16));
}

void
__glXDisp_DrawPixels(GLbyte * pc)
{
    const GLvoid *const pixels = (const GLvoid *) ((pc + 36));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength);
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows);
    glPixelStorei(GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels);
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment);

    glDrawPixels(*(GLsizei *) (pc + 20),
                 *(GLsizei *) (pc + 24),
                 *(GLenum *) (pc + 28), *(GLenum *) (pc + 32), pixels);
}

int
__glXDisp_GetBooleanv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 0);

        const GLuint compsize = __glGetBooleanv_size(pname);
        GLboolean answerBuffer[200];
        GLboolean *params =
            __glXGetAnswerBuffer(cl, compsize, answerBuffer,
                                 sizeof(answerBuffer), 1);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetBooleanv(pname, params);
        __glXSendReply(cl->client, params, compsize, 1, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetClipPlane(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        GLdouble equation[4];

        glGetClipPlane(*(GLenum *) (pc + 0), equation);
        __glXSendReply(cl->client, equation, 4, 8, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetDoublev(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 0);

        const GLuint compsize = __glGetDoublev_size(pname);
        GLdouble answerBuffer[200];
        GLdouble *params =
            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
                                 sizeof(answerBuffer), 8);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetDoublev(pname, params);
        __glXSendReply(cl->client, params, compsize, 8, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetError(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        GLenum retval;

        retval = glGetError();
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetFloatv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 0);

        const GLuint compsize = __glGetFloatv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetFloatv(pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetIntegerv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 0);

        const GLuint compsize = __glGetIntegerv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetIntegerv(pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetLightfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetLightfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetLightfv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetLightiv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetLightiv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetLightiv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetMapdv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum target = *(GLenum *) (pc + 0);
        const GLenum query = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetMapdv_size(target, query);
        GLdouble answerBuffer[200];
        GLdouble *v =
            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
                                 sizeof(answerBuffer), 8);

        if (v == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMapdv(target, query, v);
        __glXSendReply(cl->client, v, compsize, 8, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetMapfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum target = *(GLenum *) (pc + 0);
        const GLenum query = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetMapfv_size(target, query);
        GLfloat answerBuffer[200];
        GLfloat *v =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (v == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMapfv(target, query, v);
        __glXSendReply(cl->client, v, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetMapiv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum target = *(GLenum *) (pc + 0);
        const GLenum query = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetMapiv_size(target, query);
        GLint answerBuffer[200];
        GLint *v =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (v == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMapiv(target, query, v);
        __glXSendReply(cl->client, v, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetMaterialfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetMaterialfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMaterialfv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetMaterialiv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetMaterialiv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMaterialiv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetPixelMapfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum map = *(GLenum *) (pc + 0);

        const GLuint compsize = __glGetPixelMapfv_size(map);
        GLfloat answerBuffer[200];
        GLfloat *values =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (values == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetPixelMapfv(map, values);
        __glXSendReply(cl->client, values, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetPixelMapuiv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum map = *(GLenum *) (pc + 0);

        const GLuint compsize = __glGetPixelMapuiv_size(map);
        GLuint answerBuffer[200];
        GLuint *values =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (values == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetPixelMapuiv(map, values);
        __glXSendReply(cl->client, values, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetPixelMapusv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum map = *(GLenum *) (pc + 0);

        const GLuint compsize = __glGetPixelMapusv_size(map);
        GLushort answerBuffer[200];
        GLushort *values =
            __glXGetAnswerBuffer(cl, compsize * 2, answerBuffer,
                                 sizeof(answerBuffer), 2);

        if (values == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetPixelMapusv(map, values);
        __glXSendReply(cl->client, values, compsize, 2, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetTexEnvfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetTexEnvfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexEnvfv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetTexEnviv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetTexEnviv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexEnviv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetTexGendv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetTexGendv_size(pname);
        GLdouble answerBuffer[200];
        GLdouble *params =
            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
                                 sizeof(answerBuffer), 8);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexGendv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 8, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetTexGenfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetTexGenfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexGenfv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetTexGeniv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetTexGeniv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexGeniv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetTexParameterfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetTexParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexParameterfv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetTexParameteriv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetTexParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexParameteriv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetTexLevelParameterfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 8);

        const GLuint compsize = __glGetTexLevelParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexLevelParameterfv(*(GLenum *) (pc + 0),
                                 *(GLint *) (pc + 4), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetTexLevelParameteriv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 8);

        const GLuint compsize = __glGetTexLevelParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetTexLevelParameteriv(*(GLenum *) (pc + 0),
                                 *(GLint *) (pc + 4), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_IsEnabled(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = glIsEnabled(*(GLenum *) (pc + 0));
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

int
__glXDisp_IsList(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = glIsList(*(GLuint *) (pc + 0));
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDisp_DepthRange(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 16);
        pc -= 4;
    }
#endif

    glDepthRange(*(GLclampd *) (pc + 0), *(GLclampd *) (pc + 8));
}

void
__glXDisp_Frustum(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 48);
        pc -= 4;
    }
#endif

    glFrustum(*(GLdouble *) (pc + 0),
              *(GLdouble *) (pc + 8),
              *(GLdouble *) (pc + 16),
              *(GLdouble *) (pc + 24),
              *(GLdouble *) (pc + 32), *(GLdouble *) (pc + 40));
}

void
__glXDisp_LoadIdentity(GLbyte * pc)
{
    glLoadIdentity();
}

void
__glXDisp_LoadMatrixf(GLbyte * pc)
{
    glLoadMatrixf((const GLfloat *) (pc + 0));
}

void
__glXDisp_LoadMatrixd(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 128);
        pc -= 4;
    }
#endif

    glLoadMatrixd((const GLdouble *) (pc + 0));
}

void
__glXDisp_MatrixMode(GLbyte * pc)
{
    glMatrixMode(*(GLenum *) (pc + 0));
}

void
__glXDisp_MultMatrixf(GLbyte * pc)
{
    glMultMatrixf((const GLfloat *) (pc + 0));
}

void
__glXDisp_MultMatrixd(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 128);
        pc -= 4;
    }
#endif

    glMultMatrixd((const GLdouble *) (pc + 0));
}

void
__glXDisp_Ortho(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 48);
        pc -= 4;
    }
#endif

    glOrtho(*(GLdouble *) (pc + 0),
            *(GLdouble *) (pc + 8),
            *(GLdouble *) (pc + 16),
            *(GLdouble *) (pc + 24),
            *(GLdouble *) (pc + 32), *(GLdouble *) (pc + 40));
}

void
__glXDisp_PopMatrix(GLbyte * pc)
{
    glPopMatrix();
}

void
__glXDisp_PushMatrix(GLbyte * pc)
{
    glPushMatrix();
}

void
__glXDisp_Rotated(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 32);
        pc -= 4;
    }
#endif

    glRotated(*(GLdouble *) (pc + 0),
              *(GLdouble *) (pc + 8),
              *(GLdouble *) (pc + 16), *(GLdouble *) (pc + 24));
}

void
__glXDisp_Rotatef(GLbyte * pc)
{
    glRotatef(*(GLfloat *) (pc + 0),
              *(GLfloat *) (pc + 4),
              *(GLfloat *) (pc + 8), *(GLfloat *) (pc + 12));
}

void
__glXDisp_Scaled(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    glScaled(*(GLdouble *) (pc + 0),
             *(GLdouble *) (pc + 8), *(GLdouble *) (pc + 16));
}

void
__glXDisp_Scalef(GLbyte * pc)
{
    glScalef(*(GLfloat *) (pc + 0),
             *(GLfloat *) (pc + 4), *(GLfloat *) (pc + 8));
}

void
__glXDisp_Translated(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    glTranslated(*(GLdouble *) (pc + 0),
                 *(GLdouble *) (pc + 8), *(GLdouble *) (pc + 16));
}

void
__glXDisp_Translatef(GLbyte * pc)
{
    glTranslatef(*(GLfloat *) (pc + 0),
                 *(GLfloat *) (pc + 4), *(GLfloat *) (pc + 8));
}

void
__glXDisp_Viewport(GLbyte * pc)
{
    glViewport(*(GLint *) (pc + 0),
               *(GLint *) (pc + 4),
               *(GLsizei *) (pc + 8), *(GLsizei *) (pc + 12));
}

void
__glXDisp_BindTexture(GLbyte * pc)
{
    glBindTexture(*(GLenum *) (pc + 0), *(GLuint *) (pc + 4));
}

void
__glXDisp_Indexubv(GLbyte * pc)
{
    glIndexubv((const GLubyte *) (pc + 0));
}

void
__glXDisp_PolygonOffset(GLbyte * pc)
{
    glPolygonOffset(*(GLfloat *) (pc + 0), *(GLfloat *) (pc + 4));
}

int
__glXDisp_AreTexturesResident(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = *(GLsizei *) (pc + 0);

        GLboolean retval;
        GLboolean answerBuffer[200];
        GLboolean *residences =
            __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);

        if (residences == NULL)
            return BadAlloc;
        retval =
            glAreTexturesResident(n, (const GLuint *) (pc + 4), residences);
        __glXSendReply(cl->client, residences, n, 1, GL_TRUE, retval);
        error = Success;
    }

    return error;
}

int
__glXDisp_AreTexturesResidentEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = *(GLsizei *) (pc + 0);

        GLboolean retval;
        GLboolean answerBuffer[200];
        GLboolean *residences =
            __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);

        if (residences == NULL)
            return BadAlloc;
        retval =
            glAreTexturesResident(n, (const GLuint *) (pc + 4), residences);
        __glXSendReply(cl->client, residences, n, 1, GL_TRUE, retval);
        error = Success;
    }

    return error;
}

void
__glXDisp_CopyTexImage1D(GLbyte * pc)
{
    glCopyTexImage1D(*(GLenum *) (pc + 0),
                     *(GLint *) (pc + 4),
                     *(GLenum *) (pc + 8),
                     *(GLint *) (pc + 12),
                     *(GLint *) (pc + 16),
                     *(GLsizei *) (pc + 20), *(GLint *) (pc + 24));
}

void
__glXDisp_CopyTexImage2D(GLbyte * pc)
{
    glCopyTexImage2D(*(GLenum *) (pc + 0),
                     *(GLint *) (pc + 4),
                     *(GLenum *) (pc + 8),
                     *(GLint *) (pc + 12),
                     *(GLint *) (pc + 16),
                     *(GLsizei *) (pc + 20),
                     *(GLsizei *) (pc + 24), *(GLint *) (pc + 28));
}

void
__glXDisp_CopyTexSubImage1D(GLbyte * pc)
{
    glCopyTexSubImage1D(*(GLenum *) (pc + 0),
                        *(GLint *) (pc + 4),
                        *(GLint *) (pc + 8),
                        *(GLint *) (pc + 12),
                        *(GLint *) (pc + 16), *(GLsizei *) (pc + 20));
}

void
__glXDisp_CopyTexSubImage2D(GLbyte * pc)
{
    glCopyTexSubImage2D(*(GLenum *) (pc + 0),
                        *(GLint *) (pc + 4),
                        *(GLint *) (pc + 8),
                        *(GLint *) (pc + 12),
                        *(GLint *) (pc + 16),
                        *(GLint *) (pc + 20),
                        *(GLsizei *) (pc + 24), *(GLsizei *) (pc + 28));
}

int
__glXDisp_DeleteTextures(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = *(GLsizei *) (pc + 0);

        glDeleteTextures(n, (const GLuint *) (pc + 4));
        error = Success;
    }

    return error;
}

int
__glXDisp_DeleteTexturesEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = *(GLsizei *) (pc + 0);

        glDeleteTextures(n, (const GLuint *) (pc + 4));
        error = Success;
    }

    return error;
}

int
__glXDisp_GenTextures(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = *(GLsizei *) (pc + 0);

        GLuint answerBuffer[200];
        GLuint *textures =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);

        if (textures == NULL)
            return BadAlloc;
        glGenTextures(n, textures);
        __glXSendReply(cl->client, textures, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GenTexturesEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = *(GLsizei *) (pc + 0);

        GLuint answerBuffer[200];
        GLuint *textures =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);

        if (textures == NULL)
            return BadAlloc;
        glGenTextures(n, textures);
        __glXSendReply(cl->client, textures, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_IsTexture(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = glIsTexture(*(GLuint *) (pc + 0));
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

int
__glXDisp_IsTextureEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = glIsTexture(*(GLuint *) (pc + 0));
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDisp_PrioritizeTextures(GLbyte * pc)
{
    const GLsizei n = *(GLsizei *) (pc + 0);

    glPrioritizeTextures(n,
                         (const GLuint *) (pc + 4),
                         (const GLclampf *) (pc + 4));
}

void
__glXDisp_TexSubImage1D(GLbyte * pc)
{
    const GLvoid *const pixels = (const GLvoid *) ((pc + 56));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength);
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows);
    glPixelStorei(GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels);
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment);

    glTexSubImage1D(*(GLenum *) (pc + 20),
                    *(GLint *) (pc + 24),
                    *(GLint *) (pc + 28),
                    *(GLsizei *) (pc + 36),
                    *(GLenum *) (pc + 44), *(GLenum *) (pc + 48), pixels);
}

void
__glXDisp_TexSubImage2D(GLbyte * pc)
{
    const GLvoid *const pixels = (const GLvoid *) ((pc + 56));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength);
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows);
    glPixelStorei(GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels);
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment);

    glTexSubImage2D(*(GLenum *) (pc + 20),
                    *(GLint *) (pc + 24),
                    *(GLint *) (pc + 28),
                    *(GLint *) (pc + 32),
                    *(GLsizei *) (pc + 36),
                    *(GLsizei *) (pc + 40),
                    *(GLenum *) (pc + 44), *(GLenum *) (pc + 48), pixels);
}

void
__glXDisp_BlendColor(GLbyte * pc)
{
    glBlendColor(*(GLclampf *) (pc + 0),
                 *(GLclampf *) (pc + 4),
                 *(GLclampf *) (pc + 8), *(GLclampf *) (pc + 12));
}

void
__glXDisp_BlendEquation(GLbyte * pc)
{
    glBlendEquation(*(GLenum *) (pc + 0));
}

void
__glXDisp_ColorTable(GLbyte * pc)
{
    const GLvoid *const table = (const GLvoid *) ((pc + 40));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength);
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows);
    glPixelStorei(GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels);
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment);

    glColorTable(*(GLenum *) (pc + 20),
                 *(GLenum *) (pc + 24),
                 *(GLsizei *) (pc + 28),
                 *(GLenum *) (pc + 32), *(GLenum *) (pc + 36), table);
}

void
__glXDisp_ColorTableParameterfv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLfloat *params;

    params = (const GLfloat *) (pc + 8);

    glColorTableParameterfv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_ColorTableParameteriv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLint *params;

    params = (const GLint *) (pc + 8);

    glColorTableParameteriv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_CopyColorTable(GLbyte * pc)
{
    glCopyColorTable(*(GLenum *) (pc + 0),
                     *(GLenum *) (pc + 4),
                     *(GLint *) (pc + 8),
                     *(GLint *) (pc + 12), *(GLsizei *) (pc + 16));
}

int
__glXDisp_GetColorTableParameterfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetColorTableParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetColorTableParameterfv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetColorTableParameterfvSGI(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetColorTableParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetColorTableParameterfv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetColorTableParameteriv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetColorTableParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetColorTableParameteriv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetColorTableParameterivSGI(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetColorTableParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetColorTableParameteriv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

void
__glXDisp_ColorSubTable(GLbyte * pc)
{
    const GLvoid *const data = (const GLvoid *) ((pc + 40));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength);
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows);
    glPixelStorei(GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels);
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment);

    glColorSubTable(*(GLenum *) (pc + 20),
                    *(GLsizei *) (pc + 24),
                    *(GLsizei *) (pc + 28),
                    *(GLenum *) (pc + 32), *(GLenum *) (pc + 36), data);
}

void
__glXDisp_CopyColorSubTable(GLbyte * pc)
{
    glCopyColorSubTable(*(GLenum *) (pc + 0),
                        *(GLsizei *) (pc + 4),
                        *(GLint *) (pc + 8),
                        *(GLint *) (pc + 12), *(GLsizei *) (pc + 16));
}

void
__glXDisp_ConvolutionFilter1D(GLbyte * pc)
{
    const GLvoid *const image = (const GLvoid *) ((pc + 44));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength);
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows);
    glPixelStorei(GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels);
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment);

    glConvolutionFilter1D(*(GLenum *) (pc + 20),
                          *(GLenum *) (pc + 24),
                          *(GLsizei *) (pc + 28),
                          *(GLenum *) (pc + 36), *(GLenum *) (pc + 40), image);
}

void
__glXDisp_ConvolutionFilter2D(GLbyte * pc)
{
    const GLvoid *const image = (const GLvoid *) ((pc + 44));
    __GLXpixelHeader *const hdr = (__GLXpixelHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength);
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows);
    glPixelStorei(GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels);
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment);

    glConvolutionFilter2D(*(GLenum *) (pc + 20),
                          *(GLenum *) (pc + 24),
                          *(GLsizei *) (pc + 28),
                          *(GLsizei *) (pc + 32),
                          *(GLenum *) (pc + 36), *(GLenum *) (pc + 40), image);
}

void
__glXDisp_ConvolutionParameterf(GLbyte * pc)
{
    glConvolutionParameterf(*(GLenum *) (pc + 0),
                            *(GLenum *) (pc + 4), *(GLfloat *) (pc + 8));
}

void
__glXDisp_ConvolutionParameterfv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLfloat *params;

    params = (const GLfloat *) (pc + 8);

    glConvolutionParameterfv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_ConvolutionParameteri(GLbyte * pc)
{
    glConvolutionParameteri(*(GLenum *) (pc + 0),
                            *(GLenum *) (pc + 4), *(GLint *) (pc + 8));
}

void
__glXDisp_ConvolutionParameteriv(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 4);
    const GLint *params;

    params = (const GLint *) (pc + 8);

    glConvolutionParameteriv(*(GLenum *) (pc + 0), pname, params);
}

void
__glXDisp_CopyConvolutionFilter1D(GLbyte * pc)
{
    glCopyConvolutionFilter1D(*(GLenum *) (pc + 0),
                              *(GLenum *) (pc + 4),
                              *(GLint *) (pc + 8),
                              *(GLint *) (pc + 12), *(GLsizei *) (pc + 16));
}

void
__glXDisp_CopyConvolutionFilter2D(GLbyte * pc)
{
    glCopyConvolutionFilter2D(*(GLenum *) (pc + 0),
                              *(GLenum *) (pc + 4),
                              *(GLint *) (pc + 8),
                              *(GLint *) (pc + 12),
                              *(GLsizei *) (pc + 16), *(GLsizei *) (pc + 20));
}

int
__glXDisp_GetConvolutionParameterfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetConvolutionParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetConvolutionParameterfv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetConvolutionParameterfvEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetConvolutionParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetConvolutionParameterfv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetConvolutionParameteriv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetConvolutionParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetConvolutionParameteriv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetConvolutionParameterivEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetConvolutionParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetConvolutionParameteriv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetHistogramParameterfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetHistogramParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetHistogramParameterfv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetHistogramParameterfvEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetHistogramParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetHistogramParameterfv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetHistogramParameteriv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetHistogramParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetHistogramParameteriv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetHistogramParameterivEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetHistogramParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetHistogramParameteriv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetMinmaxParameterfv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetMinmaxParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMinmaxParameterfv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetMinmaxParameterfvEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetMinmaxParameterfv_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMinmaxParameterfv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetMinmaxParameteriv(__GLXclientState * cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetMinmaxParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMinmaxParameteriv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetMinmaxParameterivEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetMinmaxParameteriv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        glGetMinmaxParameteriv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

void
__glXDisp_Histogram(GLbyte * pc)
{
    glHistogram(*(GLenum *) (pc + 0),
                *(GLsizei *) (pc + 4),
                *(GLenum *) (pc + 8), *(GLboolean *) (pc + 12));
}

void
__glXDisp_Minmax(GLbyte * pc)
{
    glMinmax(*(GLenum *) (pc + 0),
             *(GLenum *) (pc + 4), *(GLboolean *) (pc + 8));
}

void
__glXDisp_ResetHistogram(GLbyte * pc)
{
    glResetHistogram(*(GLenum *) (pc + 0));
}

void
__glXDisp_ResetMinmax(GLbyte * pc)
{
    glResetMinmax(*(GLenum *) (pc + 0));
}

void
__glXDisp_TexImage3D(GLbyte * pc)
{
    const CARD32 ptr_is_null = *(CARD32 *) (pc + 76);
    const GLvoid *const pixels =
        (const GLvoid *) ((ptr_is_null != 0) ? NULL : (pc + 80));
    __GLXpixel3DHeader *const hdr = (__GLXpixel3DHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength);
    glPixelStorei(GL_UNPACK_IMAGE_HEIGHT, (GLint) hdr->imageHeight);
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows);
    glPixelStorei(GL_UNPACK_SKIP_IMAGES, (GLint) hdr->skipImages);
    glPixelStorei(GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels);
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment);

    glTexImage3D(*(GLenum *) (pc + 36),
                 *(GLint *) (pc + 40),
                 *(GLint *) (pc + 44),
                 *(GLsizei *) (pc + 48),
                 *(GLsizei *) (pc + 52),
                 *(GLsizei *) (pc + 56),
                 *(GLint *) (pc + 64),
                 *(GLenum *) (pc + 68), *(GLenum *) (pc + 72), pixels);
}

void
__glXDisp_TexSubImage3D(GLbyte * pc)
{
    const GLvoid *const pixels = (const GLvoid *) ((pc + 88));
    __GLXpixel3DHeader *const hdr = (__GLXpixel3DHeader *) (pc);

    glPixelStorei(GL_UNPACK_SWAP_BYTES, hdr->swapBytes);
    glPixelStorei(GL_UNPACK_LSB_FIRST, hdr->lsbFirst);
    glPixelStorei(GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength);
    glPixelStorei(GL_UNPACK_IMAGE_HEIGHT, (GLint) hdr->imageHeight);
    glPixelStorei(GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows);
    glPixelStorei(GL_UNPACK_SKIP_IMAGES, (GLint) hdr->skipImages);
    glPixelStorei(GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels);
    glPixelStorei(GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment);

    glTexSubImage3D(*(GLenum *) (pc + 36),
                    *(GLint *) (pc + 40),
                    *(GLint *) (pc + 44),
                    *(GLint *) (pc + 48),
                    *(GLint *) (pc + 52),
                    *(GLsizei *) (pc + 60),
                    *(GLsizei *) (pc + 64),
                    *(GLsizei *) (pc + 68),
                    *(GLenum *) (pc + 76), *(GLenum *) (pc + 80), pixels);
}

void
__glXDisp_CopyTexSubImage3D(GLbyte * pc)
{
    glCopyTexSubImage3D(*(GLenum *) (pc + 0),
                        *(GLint *) (pc + 4),
                        *(GLint *) (pc + 8),
                        *(GLint *) (pc + 12),
                        *(GLint *) (pc + 16),
                        *(GLint *) (pc + 20),
                        *(GLint *) (pc + 24),
                        *(GLsizei *) (pc + 28), *(GLsizei *) (pc + 32));
}

void
__glXDisp_ActiveTexture(GLbyte * pc)
{
    glActiveTextureARB(*(GLenum *) (pc + 0));
}

void
__glXDisp_MultiTexCoord1dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 12);
        pc -= 4;
    }
#endif

    glMultiTexCoord1dvARB(*(GLenum *) (pc + 8), (const GLdouble *) (pc + 0));
}

void
__glXDisp_MultiTexCoord1fvARB(GLbyte * pc)
{
    glMultiTexCoord1fvARB(*(GLenum *) (pc + 0), (const GLfloat *) (pc + 4));
}

void
__glXDisp_MultiTexCoord1iv(GLbyte * pc)
{
    glMultiTexCoord1ivARB(*(GLenum *) (pc + 0), (const GLint *) (pc + 4));
}

void
__glXDisp_MultiTexCoord1sv(GLbyte * pc)
{
    glMultiTexCoord1svARB(*(GLenum *) (pc + 0), (const GLshort *) (pc + 4));
}

void
__glXDisp_MultiTexCoord2dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 20);
        pc -= 4;
    }
#endif

    glMultiTexCoord2dvARB(*(GLenum *) (pc + 16), (const GLdouble *) (pc + 0));
}

void
__glXDisp_MultiTexCoord2fvARB(GLbyte * pc)
{
    glMultiTexCoord2fvARB(*(GLenum *) (pc + 0), (const GLfloat *) (pc + 4));
}

void
__glXDisp_MultiTexCoord2iv(GLbyte * pc)
{
    glMultiTexCoord2ivARB(*(GLenum *) (pc + 0), (const GLint *) (pc + 4));
}

void
__glXDisp_MultiTexCoord2sv(GLbyte * pc)
{
    glMultiTexCoord2svARB(*(GLenum *) (pc + 0), (const GLshort *) (pc + 4));
}

void
__glXDisp_MultiTexCoord3dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 28);
        pc -= 4;
    }
#endif

    glMultiTexCoord3dvARB(*(GLenum *) (pc + 24), (const GLdouble *) (pc + 0));
}

void
__glXDisp_MultiTexCoord3fvARB(GLbyte * pc)
{
    glMultiTexCoord3fvARB(*(GLenum *) (pc + 0), (const GLfloat *) (pc + 4));
}

void
__glXDisp_MultiTexCoord3iv(GLbyte * pc)
{
    glMultiTexCoord3ivARB(*(GLenum *) (pc + 0), (const GLint *) (pc + 4));
}

void
__glXDisp_MultiTexCoord3sv(GLbyte * pc)
{
    glMultiTexCoord3svARB(*(GLenum *) (pc + 0), (const GLshort *) (pc + 4));
}

void
__glXDisp_MultiTexCoord4dv(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 36);
        pc -= 4;
    }
#endif

    glMultiTexCoord4dvARB(*(GLenum *) (pc + 32), (const GLdouble *) (pc + 0));
}

void
__glXDisp_MultiTexCoord4fvARB(GLbyte * pc)
{
    glMultiTexCoord4fvARB(*(GLenum *) (pc + 0), (const GLfloat *) (pc + 4));
}

void
__glXDisp_MultiTexCoord4iv(GLbyte * pc)
{
    glMultiTexCoord4ivARB(*(GLenum *) (pc + 0), (const GLint *) (pc + 4));
}

void
__glXDisp_MultiTexCoord4sv(GLbyte * pc)
{
    glMultiTexCoord4svARB(*(GLenum *) (pc + 0), (const GLshort *) (pc + 4));
}

void
__glXDisp_CompressedTexImage1D(GLbyte * pc)
{
    PFNGLCOMPRESSEDTEXIMAGE1DPROC CompressedTexImage1D =
        __glGetProcAddress("glCompressedTexImage1D");
    const GLsizei imageSize = *(GLsizei *) (pc + 20);

    CompressedTexImage1D(*(GLenum *) (pc + 0),
                         *(GLint *) (pc + 4),
                         *(GLenum *) (pc + 8),
                         *(GLsizei *) (pc + 12),
                         *(GLint *) (pc + 16),
                         imageSize, (const GLvoid *) (pc + 24));
}

void
__glXDisp_CompressedTexImage2D(GLbyte * pc)
{
    PFNGLCOMPRESSEDTEXIMAGE2DPROC CompressedTexImage2D =
        __glGetProcAddress("glCompressedTexImage2D");
    const GLsizei imageSize = *(GLsizei *) (pc + 24);

    CompressedTexImage2D(*(GLenum *) (pc + 0),
                         *(GLint *) (pc + 4),
                         *(GLenum *) (pc + 8),
                         *(GLsizei *) (pc + 12),
                         *(GLsizei *) (pc + 16),
                         *(GLint *) (pc + 20),
                         imageSize, (const GLvoid *) (pc + 28));
}

void
__glXDisp_CompressedTexImage3D(GLbyte * pc)
{
    PFNGLCOMPRESSEDTEXIMAGE3DPROC CompressedTexImage3D =
        __glGetProcAddress("glCompressedTexImage3D");
    const GLsizei imageSize = *(GLsizei *) (pc + 28);

    CompressedTexImage3D(*(GLenum *) (pc + 0),
                         *(GLint *) (pc + 4),
                         *(GLenum *) (pc + 8),
                         *(GLsizei *) (pc + 12),
                         *(GLsizei *) (pc + 16),
                         *(GLsizei *) (pc + 20),
                         *(GLint *) (pc + 24),
                         imageSize, (const GLvoid *) (pc + 32));
}

void
__glXDisp_CompressedTexSubImage1D(GLbyte * pc)
{
    PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC CompressedTexSubImage1D =
        __glGetProcAddress("glCompressedTexSubImage1D");
    const GLsizei imageSize = *(GLsizei *) (pc + 20);

    CompressedTexSubImage1D(*(GLenum *) (pc + 0),
                            *(GLint *) (pc + 4),
                            *(GLint *) (pc + 8),
                            *(GLsizei *) (pc + 12),
                            *(GLenum *) (pc + 16),
                            imageSize, (const GLvoid *) (pc + 24));
}

void
__glXDisp_CompressedTexSubImage2D(GLbyte * pc)
{
    PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC CompressedTexSubImage2D =
        __glGetProcAddress("glCompressedTexSubImage2D");
    const GLsizei imageSize = *(GLsizei *) (pc + 28);

    CompressedTexSubImage2D(*(GLenum *) (pc + 0),
                            *(GLint *) (pc + 4),
                            *(GLint *) (pc + 8),
                            *(GLint *) (pc + 12),
                            *(GLsizei *) (pc + 16),
                            *(GLsizei *) (pc + 20),
                            *(GLenum *) (pc + 24),
                            imageSize, (const GLvoid *) (pc + 32));
}

void
__glXDisp_CompressedTexSubImage3D(GLbyte * pc)
{
    PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC CompressedTexSubImage3D =
        __glGetProcAddress("glCompressedTexSubImage3D");
    const GLsizei imageSize = *(GLsizei *) (pc + 36);

    CompressedTexSubImage3D(*(GLenum *) (pc + 0),
                            *(GLint *) (pc + 4),
                            *(GLint *) (pc + 8),
                            *(GLint *) (pc + 12),
                            *(GLint *) (pc + 16),
                            *(GLsizei *) (pc + 20),
                            *(GLsizei *) (pc + 24),
                            *(GLsizei *) (pc + 28),
                            *(GLenum *) (pc + 32),
                            imageSize, (const GLvoid *) (pc + 40));
}

void
__glXDisp_SampleCoverage(GLbyte * pc)
{
    PFNGLSAMPLECOVERAGEPROC SampleCoverage =
        __glGetProcAddress("glSampleCoverage");
    SampleCoverage(*(GLclampf *) (pc + 0), *(GLboolean *) (pc + 4));
}

void
__glXDisp_BlendFuncSeparate(GLbyte * pc)
{
    PFNGLBLENDFUNCSEPARATEPROC BlendFuncSeparate =
        __glGetProcAddress("glBlendFuncSeparate");
    BlendFuncSeparate(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4),
                      *(GLenum *) (pc + 8), *(GLenum *) (pc + 12));
}

void
__glXDisp_FogCoorddv(GLbyte * pc)
{
    PFNGLFOGCOORDDVPROC FogCoorddv = __glGetProcAddress("glFogCoorddv");

#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 8);
        pc -= 4;
    }
#endif

    FogCoorddv((const GLdouble *) (pc + 0));
}

void
__glXDisp_PointParameterf(GLbyte * pc)
{
    PFNGLPOINTPARAMETERFPROC PointParameterf =
        __glGetProcAddress("glPointParameterf");
    PointParameterf(*(GLenum *) (pc + 0), *(GLfloat *) (pc + 4));
}

void
__glXDisp_PointParameterfv(GLbyte * pc)
{
    PFNGLPOINTPARAMETERFVPROC PointParameterfv =
        __glGetProcAddress("glPointParameterfv");
    const GLenum pname = *(GLenum *) (pc + 0);
    const GLfloat *params;

    params = (const GLfloat *) (pc + 4);

    PointParameterfv(pname, params);
}

void
__glXDisp_PointParameteri(GLbyte * pc)
{
    PFNGLPOINTPARAMETERIPROC PointParameteri =
        __glGetProcAddress("glPointParameteri");
    PointParameteri(*(GLenum *) (pc + 0), *(GLint *) (pc + 4));
}

void
__glXDisp_PointParameteriv(GLbyte * pc)
{
    PFNGLPOINTPARAMETERIVPROC PointParameteriv =
        __glGetProcAddress("glPointParameteriv");
    const GLenum pname = *(GLenum *) (pc + 0);
    const GLint *params;

    params = (const GLint *) (pc + 4);

    PointParameteriv(pname, params);
}

void
__glXDisp_SecondaryColor3bv(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3BVPROC SecondaryColor3bv =
        __glGetProcAddress("glSecondaryColor3bv");
    SecondaryColor3bv((const GLbyte *) (pc + 0));
}

void
__glXDisp_SecondaryColor3dv(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3DVPROC SecondaryColor3dv =
        __glGetProcAddress("glSecondaryColor3dv");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    SecondaryColor3dv((const GLdouble *) (pc + 0));
}

void
__glXDisp_SecondaryColor3iv(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3IVPROC SecondaryColor3iv =
        __glGetProcAddress("glSecondaryColor3iv");
    SecondaryColor3iv((const GLint *) (pc + 0));
}

void
__glXDisp_SecondaryColor3sv(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3SVPROC SecondaryColor3sv =
        __glGetProcAddress("glSecondaryColor3sv");
    SecondaryColor3sv((const GLshort *) (pc + 0));
}

void
__glXDisp_SecondaryColor3ubv(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3UBVPROC SecondaryColor3ubv =
        __glGetProcAddress("glSecondaryColor3ubv");
    SecondaryColor3ubv((const GLubyte *) (pc + 0));
}

void
__glXDisp_SecondaryColor3uiv(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3UIVPROC SecondaryColor3uiv =
        __glGetProcAddress("glSecondaryColor3uiv");
    SecondaryColor3uiv((const GLuint *) (pc + 0));
}

void
__glXDisp_SecondaryColor3usv(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3USVPROC SecondaryColor3usv =
        __glGetProcAddress("glSecondaryColor3usv");
    SecondaryColor3usv((const GLushort *) (pc + 0));
}

void
__glXDisp_WindowPos3fv(GLbyte * pc)
{
    PFNGLWINDOWPOS3FVPROC WindowPos3fv = __glGetProcAddress("glWindowPos3fv");

    WindowPos3fv((const GLfloat *) (pc + 0));
}

void
__glXDisp_BeginQuery(GLbyte * pc)
{
    PFNGLBEGINQUERYPROC BeginQuery = __glGetProcAddress("glBeginQuery");

    BeginQuery(*(GLenum *) (pc + 0), *(GLuint *) (pc + 4));
}

int
__glXDisp_DeleteQueries(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLDELETEQUERIESPROC DeleteQueries =
        __glGetProcAddress("glDeleteQueries");
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = *(GLsizei *) (pc + 0);

        DeleteQueries(n, (const GLuint *) (pc + 4));
        error = Success;
    }

    return error;
}

void
__glXDisp_EndQuery(GLbyte * pc)
{
    PFNGLENDQUERYPROC EndQuery = __glGetProcAddress("glEndQuery");

    EndQuery(*(GLenum *) (pc + 0));
}

int
__glXDisp_GenQueries(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGENQUERIESPROC GenQueries = __glGetProcAddress("glGenQueries");
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = *(GLsizei *) (pc + 0);

        GLuint answerBuffer[200];
        GLuint *ids =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);

        if (ids == NULL)
            return BadAlloc;
        GenQueries(n, ids);
        __glXSendReply(cl->client, ids, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetQueryObjectiv(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETQUERYOBJECTIVPROC GetQueryObjectiv =
        __glGetProcAddress("glGetQueryObjectiv");
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetQueryObjectiv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        GetQueryObjectiv(*(GLuint *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetQueryObjectuiv(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETQUERYOBJECTUIVPROC GetQueryObjectuiv =
        __glGetProcAddress("glGetQueryObjectuiv");
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetQueryObjectuiv_size(pname);
        GLuint answerBuffer[200];
        GLuint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        GetQueryObjectuiv(*(GLuint *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetQueryiv(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETQUERYIVPROC GetQueryiv = __glGetProcAddress("glGetQueryiv");
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetQueryiv_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        GetQueryiv(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_IsQuery(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLISQUERYPROC IsQuery = __glGetProcAddress("glIsQuery");
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = IsQuery(*(GLuint *) (pc + 0));
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDisp_BlendEquationSeparate(GLbyte * pc)
{
    PFNGLBLENDEQUATIONSEPARATEPROC BlendEquationSeparate =
        __glGetProcAddress("glBlendEquationSeparate");
    BlendEquationSeparate(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4));
}

void
__glXDisp_DrawBuffers(GLbyte * pc)
{
    PFNGLDRAWBUFFERSPROC DrawBuffers = __glGetProcAddress("glDrawBuffers");
    const GLsizei n = *(GLsizei *) (pc + 0);

    DrawBuffers(n, (const GLenum *) (pc + 4));
}

void
__glXDisp_VertexAttrib1dv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB1DVPROC VertexAttrib1dv =
        __glGetProcAddress("glVertexAttrib1dv");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 12);
        pc -= 4;
    }
#endif

    VertexAttrib1dv(*(GLuint *) (pc + 0), (const GLdouble *) (pc + 4));
}

void
__glXDisp_VertexAttrib1sv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB1SVPROC VertexAttrib1sv =
        __glGetProcAddress("glVertexAttrib1sv");
    VertexAttrib1sv(*(GLuint *) (pc + 0), (const GLshort *) (pc + 4));
}

void
__glXDisp_VertexAttrib2dv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB2DVPROC VertexAttrib2dv =
        __glGetProcAddress("glVertexAttrib2dv");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 20);
        pc -= 4;
    }
#endif

    VertexAttrib2dv(*(GLuint *) (pc + 0), (const GLdouble *) (pc + 4));
}

void
__glXDisp_VertexAttrib2sv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB2SVPROC VertexAttrib2sv =
        __glGetProcAddress("glVertexAttrib2sv");
    VertexAttrib2sv(*(GLuint *) (pc + 0), (const GLshort *) (pc + 4));
}

void
__glXDisp_VertexAttrib3dv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB3DVPROC VertexAttrib3dv =
        __glGetProcAddress("glVertexAttrib3dv");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 28);
        pc -= 4;
    }
#endif

    VertexAttrib3dv(*(GLuint *) (pc + 0), (const GLdouble *) (pc + 4));
}

void
__glXDisp_VertexAttrib3sv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB3SVPROC VertexAttrib3sv =
        __glGetProcAddress("glVertexAttrib3sv");
    VertexAttrib3sv(*(GLuint *) (pc + 0), (const GLshort *) (pc + 4));
}

void
__glXDisp_VertexAttrib4Nbv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4NBVPROC VertexAttrib4Nbv =
        __glGetProcAddress("glVertexAttrib4Nbv");
    VertexAttrib4Nbv(*(GLuint *) (pc + 0), (const GLbyte *) (pc + 4));
}

void
__glXDisp_VertexAttrib4Niv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4NIVPROC VertexAttrib4Niv =
        __glGetProcAddress("glVertexAttrib4Niv");
    VertexAttrib4Niv(*(GLuint *) (pc + 0), (const GLint *) (pc + 4));
}

void
__glXDisp_VertexAttrib4Nsv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4NSVPROC VertexAttrib4Nsv =
        __glGetProcAddress("glVertexAttrib4Nsv");
    VertexAttrib4Nsv(*(GLuint *) (pc + 0), (const GLshort *) (pc + 4));
}

void
__glXDisp_VertexAttrib4Nubv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4NUBVPROC VertexAttrib4Nubv =
        __glGetProcAddress("glVertexAttrib4Nubv");
    VertexAttrib4Nubv(*(GLuint *) (pc + 0), (const GLubyte *) (pc + 4));
}

void
__glXDisp_VertexAttrib4Nuiv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4NUIVPROC VertexAttrib4Nuiv =
        __glGetProcAddress("glVertexAttrib4Nuiv");
    VertexAttrib4Nuiv(*(GLuint *) (pc + 0), (const GLuint *) (pc + 4));
}

void
__glXDisp_VertexAttrib4Nusv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4NUSVPROC VertexAttrib4Nusv =
        __glGetProcAddress("glVertexAttrib4Nusv");
    VertexAttrib4Nusv(*(GLuint *) (pc + 0), (const GLushort *) (pc + 4));
}

void
__glXDisp_VertexAttrib4bv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4BVPROC VertexAttrib4bv =
        __glGetProcAddress("glVertexAttrib4bv");
    VertexAttrib4bv(*(GLuint *) (pc + 0), (const GLbyte *) (pc + 4));
}

void
__glXDisp_VertexAttrib4dv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4DVPROC VertexAttrib4dv =
        __glGetProcAddress("glVertexAttrib4dv");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 36);
        pc -= 4;
    }
#endif

    VertexAttrib4dv(*(GLuint *) (pc + 0), (const GLdouble *) (pc + 4));
}

void
__glXDisp_VertexAttrib4iv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4IVPROC VertexAttrib4iv =
        __glGetProcAddress("glVertexAttrib4iv");
    VertexAttrib4iv(*(GLuint *) (pc + 0), (const GLint *) (pc + 4));
}

void
__glXDisp_VertexAttrib4sv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4SVPROC VertexAttrib4sv =
        __glGetProcAddress("glVertexAttrib4sv");
    VertexAttrib4sv(*(GLuint *) (pc + 0), (const GLshort *) (pc + 4));
}

void
__glXDisp_VertexAttrib4ubv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4UBVPROC VertexAttrib4ubv =
        __glGetProcAddress("glVertexAttrib4ubv");
    VertexAttrib4ubv(*(GLuint *) (pc + 0), (const GLubyte *) (pc + 4));
}

void
__glXDisp_VertexAttrib4uiv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4UIVPROC VertexAttrib4uiv =
        __glGetProcAddress("glVertexAttrib4uiv");
    VertexAttrib4uiv(*(GLuint *) (pc + 0), (const GLuint *) (pc + 4));
}

void
__glXDisp_VertexAttrib4usv(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4USVPROC VertexAttrib4usv =
        __glGetProcAddress("glVertexAttrib4usv");
    VertexAttrib4usv(*(GLuint *) (pc + 0), (const GLushort *) (pc + 4));
}

void
__glXDisp_ClampColor(GLbyte * pc)
{
    PFNGLCLAMPCOLORPROC ClampColor = __glGetProcAddress("glClampColor");

    ClampColor(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4));
}

void
__glXDisp_BindProgramARB(GLbyte * pc)
{
    PFNGLBINDPROGRAMARBPROC BindProgramARB =
        __glGetProcAddress("glBindProgramARB");
    BindProgramARB(*(GLenum *) (pc + 0), *(GLuint *) (pc + 4));
}

int
__glXDisp_DeleteProgramsARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLDELETEPROGRAMSARBPROC DeleteProgramsARB =
        __glGetProcAddress("glDeleteProgramsARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = *(GLsizei *) (pc + 0);

        DeleteProgramsARB(n, (const GLuint *) (pc + 4));
        error = Success;
    }

    return error;
}

int
__glXDisp_GenProgramsARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGENPROGRAMSARBPROC GenProgramsARB =
        __glGetProcAddress("glGenProgramsARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = *(GLsizei *) (pc + 0);

        GLuint answerBuffer[200];
        GLuint *programs =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);

        if (programs == NULL)
            return BadAlloc;
        GenProgramsARB(n, programs);
        __glXSendReply(cl->client, programs, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetProgramEnvParameterdvARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETPROGRAMENVPARAMETERDVARBPROC GetProgramEnvParameterdvARB =
        __glGetProcAddress("glGetProgramEnvParameterdvARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLdouble params[4];

        GetProgramEnvParameterdvARB(*(GLenum *) (pc + 0),
                                    *(GLuint *) (pc + 4), params);
        __glXSendReply(cl->client, params, 4, 8, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetProgramEnvParameterfvARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETPROGRAMENVPARAMETERFVARBPROC GetProgramEnvParameterfvARB =
        __glGetProcAddress("glGetProgramEnvParameterfvARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLfloat params[4];

        GetProgramEnvParameterfvARB(*(GLenum *) (pc + 0),
                                    *(GLuint *) (pc + 4), params);
        __glXSendReply(cl->client, params, 4, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetProgramLocalParameterdvARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC GetProgramLocalParameterdvARB =
        __glGetProcAddress("glGetProgramLocalParameterdvARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLdouble params[4];

        GetProgramLocalParameterdvARB(*(GLenum *) (pc + 0),
                                      *(GLuint *) (pc + 4), params);
        __glXSendReply(cl->client, params, 4, 8, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetProgramLocalParameterfvARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC GetProgramLocalParameterfvARB =
        __glGetProcAddress("glGetProgramLocalParameterfvARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLfloat params[4];

        GetProgramLocalParameterfvARB(*(GLenum *) (pc + 0),
                                      *(GLuint *) (pc + 4), params);
        __glXSendReply(cl->client, params, 4, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetProgramivARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETPROGRAMIVARBPROC GetProgramivARB =
        __glGetProcAddress("glGetProgramivARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetProgramivARB_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        GetProgramivARB(*(GLenum *) (pc + 0), pname, params);
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_IsProgramARB(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLISPROGRAMARBPROC IsProgramARB = __glGetProcAddress("glIsProgramARB");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = IsProgramARB(*(GLuint *) (pc + 0));
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDisp_ProgramEnvParameter4dvARB(GLbyte * pc)
{
    PFNGLPROGRAMENVPARAMETER4DVARBPROC ProgramEnvParameter4dvARB =
        __glGetProcAddress("glProgramEnvParameter4dvARB");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 40);
        pc -= 4;
    }
#endif

    ProgramEnvParameter4dvARB(*(GLenum *) (pc + 0),
                              *(GLuint *) (pc + 4),
                              (const GLdouble *) (pc + 8));
}

void
__glXDisp_ProgramEnvParameter4fvARB(GLbyte * pc)
{
    PFNGLPROGRAMENVPARAMETER4FVARBPROC ProgramEnvParameter4fvARB =
        __glGetProcAddress("glProgramEnvParameter4fvARB");
    ProgramEnvParameter4fvARB(*(GLenum *) (pc + 0), *(GLuint *) (pc + 4),
                              (const GLfloat *) (pc + 8));
}

void
__glXDisp_ProgramLocalParameter4dvARB(GLbyte * pc)
{
    PFNGLPROGRAMLOCALPARAMETER4DVARBPROC ProgramLocalParameter4dvARB =
        __glGetProcAddress("glProgramLocalParameter4dvARB");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 40);
        pc -= 4;
    }
#endif

    ProgramLocalParameter4dvARB(*(GLenum *) (pc + 0),
                                *(GLuint *) (pc + 4),
                                (const GLdouble *) (pc + 8));
}

void
__glXDisp_ProgramLocalParameter4fvARB(GLbyte * pc)
{
    PFNGLPROGRAMLOCALPARAMETER4FVARBPROC ProgramLocalParameter4fvARB =
        __glGetProcAddress("glProgramLocalParameter4fvARB");
    ProgramLocalParameter4fvARB(*(GLenum *) (pc + 0), *(GLuint *) (pc + 4),
                                (const GLfloat *) (pc + 8));
}

void
__glXDisp_ProgramStringARB(GLbyte * pc)
{
    PFNGLPROGRAMSTRINGARBPROC ProgramStringARB =
        __glGetProcAddress("glProgramStringARB");
    const GLsizei len = *(GLsizei *) (pc + 8);

    ProgramStringARB(*(GLenum *) (pc + 0),
                     *(GLenum *) (pc + 4), len, (const GLvoid *) (pc + 12));
}

void
__glXDisp_VertexAttrib1fvARB(GLbyte * pc)
{
    PFNGLVERTEXATTRIB1FVARBPROC VertexAttrib1fvARB =
        __glGetProcAddress("glVertexAttrib1fvARB");
    VertexAttrib1fvARB(*(GLuint *) (pc + 0), (const GLfloat *) (pc + 4));
}

void
__glXDisp_VertexAttrib2fvARB(GLbyte * pc)
{
    PFNGLVERTEXATTRIB2FVARBPROC VertexAttrib2fvARB =
        __glGetProcAddress("glVertexAttrib2fvARB");
    VertexAttrib2fvARB(*(GLuint *) (pc + 0), (const GLfloat *) (pc + 4));
}

void
__glXDisp_VertexAttrib3fvARB(GLbyte * pc)
{
    PFNGLVERTEXATTRIB3FVARBPROC VertexAttrib3fvARB =
        __glGetProcAddress("glVertexAttrib3fvARB");
    VertexAttrib3fvARB(*(GLuint *) (pc + 0), (const GLfloat *) (pc + 4));
}

void
__glXDisp_VertexAttrib4fvARB(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4FVARBPROC VertexAttrib4fvARB =
        __glGetProcAddress("glVertexAttrib4fvARB");
    VertexAttrib4fvARB(*(GLuint *) (pc + 0), (const GLfloat *) (pc + 4));
}

void
__glXDisp_BindFramebuffer(GLbyte * pc)
{
    PFNGLBINDFRAMEBUFFERPROC BindFramebuffer =
        __glGetProcAddress("glBindFramebuffer");
    BindFramebuffer(*(GLenum *) (pc + 0), *(GLuint *) (pc + 4));
}

void
__glXDisp_BindRenderbuffer(GLbyte * pc)
{
    PFNGLBINDRENDERBUFFERPROC BindRenderbuffer =
        __glGetProcAddress("glBindRenderbuffer");
    BindRenderbuffer(*(GLenum *) (pc + 0), *(GLuint *) (pc + 4));
}

void
__glXDisp_BlitFramebuffer(GLbyte * pc)
{
    PFNGLBLITFRAMEBUFFERPROC BlitFramebuffer =
        __glGetProcAddress("glBlitFramebuffer");
    BlitFramebuffer(*(GLint *) (pc + 0), *(GLint *) (pc + 4),
                    *(GLint *) (pc + 8), *(GLint *) (pc + 12),
                    *(GLint *) (pc + 16), *(GLint *) (pc + 20),
                    *(GLint *) (pc + 24), *(GLint *) (pc + 28),
                    *(GLbitfield *) (pc + 32), *(GLenum *) (pc + 36));
}

int
__glXDisp_CheckFramebufferStatus(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLCHECKFRAMEBUFFERSTATUSPROC CheckFramebufferStatus =
        __glGetProcAddress("glCheckFramebufferStatus");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLenum retval;

        retval = CheckFramebufferStatus(*(GLenum *) (pc + 0));
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDisp_DeleteFramebuffers(GLbyte * pc)
{
    PFNGLDELETEFRAMEBUFFERSPROC DeleteFramebuffers =
        __glGetProcAddress("glDeleteFramebuffers");
    const GLsizei n = *(GLsizei *) (pc + 0);

    DeleteFramebuffers(n, (const GLuint *) (pc + 4));
}

void
__glXDisp_DeleteRenderbuffers(GLbyte * pc)
{
    PFNGLDELETERENDERBUFFERSPROC DeleteRenderbuffers =
        __glGetProcAddress("glDeleteRenderbuffers");
    const GLsizei n = *(GLsizei *) (pc + 0);

    DeleteRenderbuffers(n, (const GLuint *) (pc + 4));
}

void
__glXDisp_FramebufferRenderbuffer(GLbyte * pc)
{
    PFNGLFRAMEBUFFERRENDERBUFFERPROC FramebufferRenderbuffer =
        __glGetProcAddress("glFramebufferRenderbuffer");
    FramebufferRenderbuffer(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4),
                            *(GLenum *) (pc + 8), *(GLuint *) (pc + 12));
}

void
__glXDisp_FramebufferTexture1D(GLbyte * pc)
{
    PFNGLFRAMEBUFFERTEXTURE1DPROC FramebufferTexture1D =
        __glGetProcAddress("glFramebufferTexture1D");
    FramebufferTexture1D(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4),
                         *(GLenum *) (pc + 8), *(GLuint *) (pc + 12),
                         *(GLint *) (pc + 16));
}

void
__glXDisp_FramebufferTexture2D(GLbyte * pc)
{
    PFNGLFRAMEBUFFERTEXTURE2DPROC FramebufferTexture2D =
        __glGetProcAddress("glFramebufferTexture2D");
    FramebufferTexture2D(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4),
                         *(GLenum *) (pc + 8), *(GLuint *) (pc + 12),
                         *(GLint *) (pc + 16));
}

void
__glXDisp_FramebufferTexture3D(GLbyte * pc)
{
    PFNGLFRAMEBUFFERTEXTURE3DPROC FramebufferTexture3D =
        __glGetProcAddress("glFramebufferTexture3D");
    FramebufferTexture3D(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4),
                         *(GLenum *) (pc + 8), *(GLuint *) (pc + 12),
                         *(GLint *) (pc + 16), *(GLint *) (pc + 20));
}

void
__glXDisp_FramebufferTextureLayer(GLbyte * pc)
{
    PFNGLFRAMEBUFFERTEXTURELAYERPROC FramebufferTextureLayer =
        __glGetProcAddress("glFramebufferTextureLayer");
    FramebufferTextureLayer(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4),
                            *(GLuint *) (pc + 8), *(GLint *) (pc + 12),
                            *(GLint *) (pc + 16));
}

int
__glXDisp_GenFramebuffers(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGENFRAMEBUFFERSPROC GenFramebuffers =
        __glGetProcAddress("glGenFramebuffers");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = *(GLsizei *) (pc + 0);

        GLuint answerBuffer[200];
        GLuint *framebuffers =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);

        if (framebuffers == NULL)
            return BadAlloc;

        GenFramebuffers(n, framebuffers);
        __glXSendReply(cl->client, framebuffers, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GenRenderbuffers(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGENRENDERBUFFERSPROC GenRenderbuffers =
        __glGetProcAddress("glGenRenderbuffers");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = *(GLsizei *) (pc + 0);

        GLuint answerBuffer[200];
        GLuint *renderbuffers =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);

        if (renderbuffers == NULL)
            return BadAlloc;
        GenRenderbuffers(n, renderbuffers);
        __glXSendReply(cl->client, renderbuffers, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

void
__glXDisp_GenerateMipmap(GLbyte * pc)
{
    PFNGLGENERATEMIPMAPPROC GenerateMipmap =
        __glGetProcAddress("glGenerateMipmap");
    GenerateMipmap(*(GLenum *) (pc + 0));
}

int
__glXDisp_GetFramebufferAttachmentParameteriv(__GLXclientState * cl,
                                              GLbyte * pc)
{
    PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
        GetFramebufferAttachmentParameteriv =
        __glGetProcAddress("glGetFramebufferAttachmentParameteriv");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLint params[1];

        GetFramebufferAttachmentParameteriv(*(GLenum *) (pc + 0),
                                            *(GLenum *) (pc + 4),
                                            *(GLenum *) (pc + 8), params);
        __glXSendReply(cl->client, params, 1, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetRenderbufferParameteriv(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLGETRENDERBUFFERPARAMETERIVPROC GetRenderbufferParameteriv =
        __glGetProcAddress("glGetRenderbufferParameteriv");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLint params[1];

        GetRenderbufferParameteriv(*(GLenum *) (pc + 0),
                                   *(GLenum *) (pc + 4), params);
        __glXSendReply(cl->client, params, 1, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_IsFramebuffer(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLISFRAMEBUFFERPROC IsFramebuffer =
        __glGetProcAddress("glIsFramebuffer");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = IsFramebuffer(*(GLuint *) (pc + 0));
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

int
__glXDisp_IsRenderbuffer(__GLXclientState * cl, GLbyte * pc)
{
    PFNGLISRENDERBUFFERPROC IsRenderbuffer =
        __glGetProcAddress("glIsRenderbuffer");
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = IsRenderbuffer(*(GLuint *) (pc + 0));
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDisp_RenderbufferStorage(GLbyte * pc)
{
    PFNGLRENDERBUFFERSTORAGEPROC RenderbufferStorage =
        __glGetProcAddress("glRenderbufferStorage");
    RenderbufferStorage(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4),
                        *(GLsizei *) (pc + 8), *(GLsizei *) (pc + 12));
}

void
__glXDisp_RenderbufferStorageMultisample(GLbyte * pc)
{
    PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC RenderbufferStorageMultisample =
        __glGetProcAddress("glRenderbufferStorageMultisample");
    RenderbufferStorageMultisample(*(GLenum *) (pc + 0), *(GLsizei *) (pc + 4),
                                   *(GLenum *) (pc + 8), *(GLsizei *) (pc + 12),
                                   *(GLsizei *) (pc + 16));
}

void
__glXDisp_SecondaryColor3fvEXT(GLbyte * pc)
{
    PFNGLSECONDARYCOLOR3FVEXTPROC SecondaryColor3fvEXT =
        __glGetProcAddress("glSecondaryColor3fvEXT");
    SecondaryColor3fvEXT((const GLfloat *) (pc + 0));
}

void
__glXDisp_FogCoordfvEXT(GLbyte * pc)
{
    PFNGLFOGCOORDFVEXTPROC FogCoordfvEXT =
        __glGetProcAddress("glFogCoordfvEXT");
    FogCoordfvEXT((const GLfloat *) (pc + 0));
}

void
__glXDisp_VertexAttrib1dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB1DVNVPROC VertexAttrib1dvNV =
        __glGetProcAddress("glVertexAttrib1dvNV");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 12);
        pc -= 4;
    }
#endif

    VertexAttrib1dvNV(*(GLuint *) (pc + 0), (const GLdouble *) (pc + 4));
}

void
__glXDisp_VertexAttrib1fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB1FVNVPROC VertexAttrib1fvNV =
        __glGetProcAddress("glVertexAttrib1fvNV");
    VertexAttrib1fvNV(*(GLuint *) (pc + 0), (const GLfloat *) (pc + 4));
}

void
__glXDisp_VertexAttrib1svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB1SVNVPROC VertexAttrib1svNV =
        __glGetProcAddress("glVertexAttrib1svNV");
    VertexAttrib1svNV(*(GLuint *) (pc + 0), (const GLshort *) (pc + 4));
}

void
__glXDisp_VertexAttrib2dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB2DVNVPROC VertexAttrib2dvNV =
        __glGetProcAddress("glVertexAttrib2dvNV");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 20);
        pc -= 4;
    }
#endif

    VertexAttrib2dvNV(*(GLuint *) (pc + 0), (const GLdouble *) (pc + 4));
}

void
__glXDisp_VertexAttrib2fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB2FVNVPROC VertexAttrib2fvNV =
        __glGetProcAddress("glVertexAttrib2fvNV");
    VertexAttrib2fvNV(*(GLuint *) (pc + 0), (const GLfloat *) (pc + 4));
}

void
__glXDisp_VertexAttrib2svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB2SVNVPROC VertexAttrib2svNV =
        __glGetProcAddress("glVertexAttrib2svNV");
    VertexAttrib2svNV(*(GLuint *) (pc + 0), (const GLshort *) (pc + 4));
}

void
__glXDisp_VertexAttrib3dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB3DVNVPROC VertexAttrib3dvNV =
        __glGetProcAddress("glVertexAttrib3dvNV");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 28);
        pc -= 4;
    }
#endif

    VertexAttrib3dvNV(*(GLuint *) (pc + 0), (const GLdouble *) (pc + 4));
}

void
__glXDisp_VertexAttrib3fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB3FVNVPROC VertexAttrib3fvNV =
        __glGetProcAddress("glVertexAttrib3fvNV");
    VertexAttrib3fvNV(*(GLuint *) (pc + 0), (const GLfloat *) (pc + 4));
}

void
__glXDisp_VertexAttrib3svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB3SVNVPROC VertexAttrib3svNV =
        __glGetProcAddress("glVertexAttrib3svNV");
    VertexAttrib3svNV(*(GLuint *) (pc + 0), (const GLshort *) (pc + 4));
}

void
__glXDisp_VertexAttrib4dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4DVNVPROC VertexAttrib4dvNV =
        __glGetProcAddress("glVertexAttrib4dvNV");
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 36);
        pc -= 4;
    }
#endif

    VertexAttrib4dvNV(*(GLuint *) (pc + 0), (const GLdouble *) (pc + 4));
}

void
__glXDisp_VertexAttrib4fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4FVNVPROC VertexAttrib4fvNV =
        __glGetProcAddress("glVertexAttrib4fvNV");
    VertexAttrib4fvNV(*(GLuint *) (pc + 0), (const GLfloat *) (pc + 4));
}

void
__glXDisp_VertexAttrib4svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4SVNVPROC VertexAttrib4svNV =
        __glGetProcAddress("glVertexAttrib4svNV");
    VertexAttrib4svNV(*(GLuint *) (pc + 0), (const GLshort *) (pc + 4));
}

void
__glXDisp_VertexAttrib4ubvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIB4UBVNVPROC VertexAttrib4ubvNV =
        __glGetProcAddress("glVertexAttrib4ubvNV");
    VertexAttrib4ubvNV(*(GLuint *) (pc + 0), (const GLubyte *) (pc + 4));
}

void
__glXDisp_VertexAttribs1dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS1DVNVPROC VertexAttribs1dvNV =
        __glGetProcAddress("glVertexAttribs1dvNV");
    const GLsizei n = *(GLsizei *) (pc + 4);

#ifdef __GLX_ALIGN64
    const GLuint cmdlen = 12 + __GLX_PAD((n * 8)) - 4;

    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, cmdlen);
        pc -= 4;
    }
#endif

    VertexAttribs1dvNV(*(GLuint *) (pc + 0), n, (const GLdouble *) (pc + 8));
}

void
__glXDisp_VertexAttribs1fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS1FVNVPROC VertexAttribs1fvNV =
        __glGetProcAddress("glVertexAttribs1fvNV");
    const GLsizei n = *(GLsizei *) (pc + 4);

    VertexAttribs1fvNV(*(GLuint *) (pc + 0), n, (const GLfloat *) (pc + 8));
}

void
__glXDisp_VertexAttribs1svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS1SVNVPROC VertexAttribs1svNV =
        __glGetProcAddress("glVertexAttribs1svNV");
    const GLsizei n = *(GLsizei *) (pc + 4);

    VertexAttribs1svNV(*(GLuint *) (pc + 0), n, (const GLshort *) (pc + 8));
}

void
__glXDisp_VertexAttribs2dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS2DVNVPROC VertexAttribs2dvNV =
        __glGetProcAddress("glVertexAttribs2dvNV");
    const GLsizei n = *(GLsizei *) (pc + 4);

#ifdef __GLX_ALIGN64
    const GLuint cmdlen = 12 + __GLX_PAD((n * 16)) - 4;

    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, cmdlen);
        pc -= 4;
    }
#endif

    VertexAttribs2dvNV(*(GLuint *) (pc + 0), n, (const GLdouble *) (pc + 8));
}

void
__glXDisp_VertexAttribs2fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS2FVNVPROC VertexAttribs2fvNV =
        __glGetProcAddress("glVertexAttribs2fvNV");
    const GLsizei n = *(GLsizei *) (pc + 4);

    VertexAttribs2fvNV(*(GLuint *) (pc + 0), n, (const GLfloat *) (pc + 8));
}

void
__glXDisp_VertexAttribs2svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS2SVNVPROC VertexAttribs2svNV =
        __glGetProcAddress("glVertexAttribs2svNV");
    const GLsizei n = *(GLsizei *) (pc + 4);

    VertexAttribs2svNV(*(GLuint *) (pc + 0), n, (const GLshort *) (pc + 8));
}

void
__glXDisp_VertexAttribs3dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS3DVNVPROC VertexAttribs3dvNV =
        __glGetProcAddress("glVertexAttribs3dvNV");
    const GLsizei n = *(GLsizei *) (pc + 4);

#ifdef __GLX_ALIGN64
    const GLuint cmdlen = 12 + __GLX_PAD((n * 24)) - 4;

    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, cmdlen);
        pc -= 4;
    }
#endif

    VertexAttribs3dvNV(*(GLuint *) (pc + 0), n, (const GLdouble *) (pc + 8));
}

void
__glXDisp_VertexAttribs3fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS3FVNVPROC VertexAttribs3fvNV =
        __glGetProcAddress("glVertexAttribs3fvNV");
    const GLsizei n = *(GLsizei *) (pc + 4);

    VertexAttribs3fvNV(*(GLuint *) (pc + 0), n, (const GLfloat *) (pc + 8));
}

void
__glXDisp_VertexAttribs3svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS3SVNVPROC VertexAttribs3svNV =
        __glGetProcAddress("glVertexAttribs3svNV");
    const GLsizei n = *(GLsizei *) (pc + 4);

    VertexAttribs3svNV(*(GLuint *) (pc + 0), n, (const GLshort *) (pc + 8));
}

void
__glXDisp_VertexAttribs4dvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS4DVNVPROC VertexAttribs4dvNV =
        __glGetProcAddress("glVertexAttribs4dvNV");
    const GLsizei n = *(GLsizei *) (pc + 4);

#ifdef __GLX_ALIGN64
    const GLuint cmdlen = 12 + __GLX_PAD((n * 32)) - 4;

    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, cmdlen);
        pc -= 4;
    }
#endif

    VertexAttribs4dvNV(*(GLuint *) (pc + 0), n, (const GLdouble *) (pc + 8));
}

void
__glXDisp_VertexAttribs4fvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS4FVNVPROC VertexAttribs4fvNV =
        __glGetProcAddress("glVertexAttribs4fvNV");
    const GLsizei n = *(GLsizei *) (pc + 4);

    VertexAttribs4fvNV(*(GLuint *) (pc + 0), n, (const GLfloat *) (pc + 8));
}

void
__glXDisp_VertexAttribs4svNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS4SVNVPROC VertexAttribs4svNV =
        __glGetProcAddress("glVertexAttribs4svNV");
    const GLsizei n = *(GLsizei *) (pc + 4);

    VertexAttribs4svNV(*(GLuint *) (pc + 0), n, (const GLshort *) (pc + 8));
}

void
__glXDisp_VertexAttribs4ubvNV(GLbyte * pc)
{
    PFNGLVERTEXATTRIBS4UBVNVPROC VertexAttribs4ubvNV =
        __glGetProcAddress("glVertexAttribs4ubvNV");
    const GLsizei n = *(GLsizei *) (pc + 4);

    VertexAttribs4ubvNV(*(GLuint *) (pc + 0), n, (const GLubyte *) (pc + 8));
}

void
__glXDisp_ActiveStencilFaceEXT(GLbyte * pc)
{
    PFNGLACTIVESTENCILFACEEXTPROC ActiveStencilFaceEXT =
        __glGetProcAddress("glActiveStencilFaceEXT");
    ActiveStencilFaceEXT(*(GLenum *) (pc + 0));
}
@


1.6
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d6 1
a6 1
 * 
d13 1
a13 1
 * 
d17 1
a17 1
 * 
@


1.5
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d2467 3
d2494 3
d2602 3
d2628 3
d3898 3
d4271 3
d4651 4
d4680 3
@


1.5.2.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a2466 3

        if (residences == NULL)
            return BadAlloc;
a2490 3

        if (residences == NULL)
            return BadAlloc;
a2595 3

        if (textures == NULL)
            return BadAlloc;
a2618 3

        if (textures == NULL)
            return BadAlloc;
a3885 3

        if (ids == NULL)
            return BadAlloc;
a4255 3

        if (programs == NULL)
            return BadAlloc;
a4632 4

        if (framebuffers == NULL)
            return BadAlloc;

a4657 3

        if (renderbuffers == NULL)
            return BadAlloc;
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a27 3
#include <X11/Xmd.h>
#include <GL/gl.h>
#include <GL/glxproto.h>
d29 1
a32 1
#include "glxserver.h"
a35 4
#include "glapi.h"
#include "glapitable.h"
#include "glthread.h"
#include "dispatch.h"
d57 1
a57 2
        CALL_NewList(GET_DISPATCH(), (*(GLuint *) (pc + 0), *(GLenum *) (pc + 4)
                     ));
d73 1
a73 1
        CALL_EndList(GET_DISPATCH(), ());
d83 1
a83 2
    CALL_CallList(GET_DISPATCH(), (*(GLuint *) (pc + 0)
                  ));
d95 1
a95 1
    CALL_CallLists(GET_DISPATCH(), (n, type, lists));
d107 1
a107 3
        CALL_DeleteLists(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                          *(GLsizei *) (pc + 4)
                         ));
d125 1
a125 2
        retval = CALL_GenLists(GET_DISPATCH(), (*(GLsizei *) (pc + 0)
                               ));
d136 1
a136 2
    CALL_ListBase(GET_DISPATCH(), (*(GLuint *) (pc + 0)
                  ));
d142 1
a142 2
    CALL_Begin(GET_DISPATCH(), (*(GLenum *) (pc + 0)
               ));
d151 11
a161 16
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment));

    CALL_Bitmap(GET_DISPATCH(), (*(GLsizei *) (pc + 20),
                                 *(GLsizei *) (pc + 24),
                                 *(GLfloat *) (pc + 28),
                                 *(GLfloat *) (pc + 32),
                                 *(GLfloat *) (pc + 36),
                                 *(GLfloat *) (pc + 40), bitmap));
d167 1
a167 2
    CALL_Color3bv(GET_DISPATCH(), ((const GLbyte *) (pc + 0)
                  ));
d180 1
a180 2
    CALL_Color3dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                  ));
d186 1
a186 2
    CALL_Color3fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                  ));
d192 1
a192 2
    CALL_Color3iv(GET_DISPATCH(), ((const GLint *) (pc + 0)
                  ));
d198 1
a198 2
    CALL_Color3sv(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                  ));
d204 1
a204 2
    CALL_Color3ubv(GET_DISPATCH(), ((const GLubyte *) (pc + 0)
                   ));
d210 1
a210 2
    CALL_Color3uiv(GET_DISPATCH(), ((const GLuint *) (pc + 0)
                   ));
d216 1
a216 2
    CALL_Color3usv(GET_DISPATCH(), ((const GLushort *) (pc + 0)
                   ));
d222 1
a222 2
    CALL_Color4bv(GET_DISPATCH(), ((const GLbyte *) (pc + 0)
                  ));
d235 1
a235 2
    CALL_Color4dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                  ));
d241 1
a241 2
    CALL_Color4fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                  ));
d247 1
a247 2
    CALL_Color4iv(GET_DISPATCH(), ((const GLint *) (pc + 0)
                  ));
d253 1
a253 2
    CALL_Color4sv(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                  ));
d259 1
a259 2
    CALL_Color4ubv(GET_DISPATCH(), ((const GLubyte *) (pc + 0)
                   ));
d265 1
a265 2
    CALL_Color4uiv(GET_DISPATCH(), ((const GLuint *) (pc + 0)
                   ));
d271 1
a271 2
    CALL_Color4usv(GET_DISPATCH(), ((const GLushort *) (pc + 0)
                   ));
d277 1
a277 2
    CALL_EdgeFlagv(GET_DISPATCH(), ((const GLboolean *) (pc + 0)
                   ));
d283 1
a283 1
    CALL_End(GET_DISPATCH(), ());
d296 1
a296 2
    CALL_Indexdv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                 ));
d302 1
a302 2
    CALL_Indexfv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                 ));
d308 1
a308 2
    CALL_Indexiv(GET_DISPATCH(), ((const GLint *) (pc + 0)
                 ));
d314 1
a314 2
    CALL_Indexsv(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                 ));
d320 1
a320 2
    CALL_Normal3bv(GET_DISPATCH(), ((const GLbyte *) (pc + 0)
                   ));
d333 1
a333 2
    CALL_Normal3dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                   ));
d339 1
a339 2
    CALL_Normal3fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                   ));
d345 1
a345 2
    CALL_Normal3iv(GET_DISPATCH(), ((const GLint *) (pc + 0)
                   ));
d351 1
a351 2
    CALL_Normal3sv(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                   ));
d364 1
a364 2
    CALL_RasterPos2dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                      ));
d370 1
a370 2
    CALL_RasterPos2fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                      ));
d376 1
a376 2
    CALL_RasterPos2iv(GET_DISPATCH(), ((const GLint *) (pc + 0)
                      ));
d382 1
a382 2
    CALL_RasterPos2sv(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                      ));
d395 1
a395 2
    CALL_RasterPos3dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                      ));
d401 1
a401 2
    CALL_RasterPos3fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                      ));
d407 1
a407 2
    CALL_RasterPos3iv(GET_DISPATCH(), ((const GLint *) (pc + 0)
                      ));
d413 1
a413 2
    CALL_RasterPos3sv(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                      ));
d426 1
a426 2
    CALL_RasterPos4dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                      ));
d432 1
a432 2
    CALL_RasterPos4fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                      ));
d438 1
a438 2
    CALL_RasterPos4iv(GET_DISPATCH(), ((const GLint *) (pc + 0)
                      ));
d444 1
a444 2
    CALL_RasterPos4sv(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                      ));
d457 1
a457 3
    CALL_Rectdv(GET_DISPATCH(), ((const GLdouble *) (pc + 0),
                                 (const GLdouble *) (pc + 16)
                ));
d463 1
a463 3
    CALL_Rectfv(GET_DISPATCH(), ((const GLfloat *) (pc + 0),
                                 (const GLfloat *) (pc + 8)
                ));
d469 1
a469 3
    CALL_Rectiv(GET_DISPATCH(), ((const GLint *) (pc + 0),
                                 (const GLint *) (pc + 8)
                ));
d475 1
a475 3
    CALL_Rectsv(GET_DISPATCH(), ((const GLshort *) (pc + 0),
                                 (const GLshort *) (pc + 4)
                ));
d488 1
a488 2
    CALL_TexCoord1dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                     ));
d494 1
a494 2
    CALL_TexCoord1fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                     ));
d500 1
a500 2
    CALL_TexCoord1iv(GET_DISPATCH(), ((const GLint *) (pc + 0)
                     ));
d506 1
a506 2
    CALL_TexCoord1sv(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                     ));
d519 1
a519 2
    CALL_TexCoord2dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                     ));
d525 1
a525 2
    CALL_TexCoord2fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                     ));
d531 1
a531 2
    CALL_TexCoord2iv(GET_DISPATCH(), ((const GLint *) (pc + 0)
                     ));
d537 1
a537 2
    CALL_TexCoord2sv(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                     ));
d550 1
a550 2
    CALL_TexCoord3dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                     ));
d556 1
a556 2
    CALL_TexCoord3fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                     ));
d562 1
a562 2
    CALL_TexCoord3iv(GET_DISPATCH(), ((const GLint *) (pc + 0)
                     ));
d568 1
a568 2
    CALL_TexCoord3sv(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                     ));
d581 1
a581 2
    CALL_TexCoord4dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                     ));
d587 1
a587 2
    CALL_TexCoord4fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                     ));
d593 1
a593 2
    CALL_TexCoord4iv(GET_DISPATCH(), ((const GLint *) (pc + 0)
                     ));
d599 1
a599 2
    CALL_TexCoord4sv(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                     ));
d612 1
a612 2
    CALL_Vertex2dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                   ));
d618 1
a618 2
    CALL_Vertex2fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                   ));
d624 1
a624 2
    CALL_Vertex2iv(GET_DISPATCH(), ((const GLint *) (pc + 0)
                   ));
d630 1
a630 2
    CALL_Vertex2sv(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                   ));
d643 1
a643 2
    CALL_Vertex3dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                   ));
d649 1
a649 2
    CALL_Vertex3fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                   ));
d655 1
a655 2
    CALL_Vertex3iv(GET_DISPATCH(), ((const GLint *) (pc + 0)
                   ));
d661 1
a661 2
    CALL_Vertex3sv(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                   ));
d674 1
a674 2
    CALL_Vertex4dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                   ));
d680 1
a680 2
    CALL_Vertex4fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                   ));
d686 1
a686 2
    CALL_Vertex4iv(GET_DISPATCH(), ((const GLint *) (pc + 0)
                   ));
d692 1
a692 2
    CALL_Vertex4sv(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                   ));
d705 1
a705 3
    CALL_ClipPlane(GET_DISPATCH(), (*(GLenum *) (pc + 32),
                                    (const GLdouble *) (pc + 0)
                   ));
d711 1
a711 3
    CALL_ColorMaterial(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                        *(GLenum *) (pc + 4)
                       ));
d717 1
a717 2
    CALL_CullFace(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                  ));
d723 1
a723 2
    CALL_Fogf(GET_DISPATCH(), (*(GLenum *) (pc + 0), *(GLfloat *) (pc + 4)
              ));
d734 1
a734 1
    CALL_Fogfv(GET_DISPATCH(), (pname, params));
d740 1
a740 2
    CALL_Fogi(GET_DISPATCH(), (*(GLenum *) (pc + 0), *(GLint *) (pc + 4)
              ));
d751 1
a751 1
    CALL_Fogiv(GET_DISPATCH(), (pname, params));
d757 1
a757 2
    CALL_FrontFace(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                   ));
d763 1
a763 2
    CALL_Hint(GET_DISPATCH(), (*(GLenum *) (pc + 0), *(GLenum *) (pc + 4)
              ));
d769 1
a769 3
    CALL_Lightf(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                 *(GLenum *) (pc + 4), *(GLfloat *) (pc + 8)
                ));
d780 1
a780 1
    CALL_Lightfv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d786 1
a786 3
    CALL_Lighti(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                 *(GLenum *) (pc + 4), *(GLint *) (pc + 8)
                ));
d797 1
a797 1
    CALL_Lightiv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d803 1
a803 3
    CALL_LightModelf(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                      *(GLfloat *) (pc + 4)
                     ));
d814 1
a814 1
    CALL_LightModelfv(GET_DISPATCH(), (pname, params));
d820 1
a820 2
    CALL_LightModeli(GET_DISPATCH(), (*(GLenum *) (pc + 0), *(GLint *) (pc + 4)
                     ));
d831 1
a831 1
    CALL_LightModeliv(GET_DISPATCH(), (pname, params));
d837 1
a837 3
    CALL_LineStipple(GET_DISPATCH(), (*(GLint *) (pc + 0),
                                      *(GLushort *) (pc + 4)
                     ));
d843 1
a843 2
    CALL_LineWidth(GET_DISPATCH(), (*(GLfloat *) (pc + 0)
                   ));
d849 2
a850 3
    CALL_Materialf(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                    *(GLenum *) (pc + 4), *(GLfloat *) (pc + 8)
                   ));
d861 1
a861 1
    CALL_Materialfv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d867 2
a868 3
    CALL_Materiali(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                    *(GLenum *) (pc + 4), *(GLint *) (pc + 8)
                   ));
d879 1
a879 1
    CALL_Materialiv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d885 1
a885 2
    CALL_PointSize(GET_DISPATCH(), (*(GLfloat *) (pc + 0)
                   ));
d891 1
a891 2
    CALL_PolygonMode(GET_DISPATCH(), (*(GLenum *) (pc + 0), *(GLenum *) (pc + 4)
                     ));
d900 5
a904 9
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment));
d906 1
a906 1
    CALL_PolygonStipple(GET_DISPATCH(), (mask));
d912 3
a914 4
    CALL_Scissor(GET_DISPATCH(), (*(GLint *) (pc + 0),
                                  *(GLint *) (pc + 4),
                                  *(GLsizei *) (pc + 8), *(GLsizei *) (pc + 12)
                 ));
d920 1
a920 2
    CALL_ShadeModel(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                    ));
d926 2
a927 4
    CALL_TexParameterf(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                        *(GLenum *) (pc + 4),
                                        *(GLfloat *) (pc + 8)
                       ));
d938 1
a938 1
    CALL_TexParameterfv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d944 2
a945 4
    CALL_TexParameteri(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                        *(GLenum *) (pc + 4),
                                        *(GLint *) (pc + 8)
                       ));
d956 1
a956 1
    CALL_TexParameteriv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d965 13
a977 18
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment));

    CALL_TexImage1D(GET_DISPATCH(), (*(GLenum *) (pc + 20),
                                     *(GLint *) (pc + 24),
                                     *(GLint *) (pc + 28),
                                     *(GLsizei *) (pc + 32),
                                     *(GLint *) (pc + 40),
                                     *(GLenum *) (pc + 44),
                                     *(GLenum *) (pc + 48), pixels));
d986 14
a999 19
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment));

    CALL_TexImage2D(GET_DISPATCH(), (*(GLenum *) (pc + 20),
                                     *(GLint *) (pc + 24),
                                     *(GLint *) (pc + 28),
                                     *(GLsizei *) (pc + 32),
                                     *(GLsizei *) (pc + 36),
                                     *(GLint *) (pc + 40),
                                     *(GLenum *) (pc + 44),
                                     *(GLenum *) (pc + 48), pixels));
d1005 2
a1006 3
    CALL_TexEnvf(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                  *(GLenum *) (pc + 4), *(GLfloat *) (pc + 8)
                 ));
d1017 1
a1017 1
    CALL_TexEnvfv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d1023 1
a1023 3
    CALL_TexEnvi(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                  *(GLenum *) (pc + 4), *(GLint *) (pc + 8)
                 ));
d1034 1
a1034 1
    CALL_TexEnviv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d1047 2
a1048 3
    CALL_TexGend(GET_DISPATCH(), (*(GLenum *) (pc + 8),
                                  *(GLenum *) (pc + 12), *(GLdouble *) (pc + 0)
                 ));
d1069 1
a1069 1
    CALL_TexGendv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d1075 2
a1076 3
    CALL_TexGenf(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                  *(GLenum *) (pc + 4), *(GLfloat *) (pc + 8)
                 ));
d1087 1
a1087 1
    CALL_TexGenfv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d1093 1
a1093 3
    CALL_TexGeni(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                  *(GLenum *) (pc + 4), *(GLint *) (pc + 8)
                 ));
d1104 1
a1104 1
    CALL_TexGeniv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d1110 1
a1110 1
    CALL_InitNames(GET_DISPATCH(), ());
d1116 1
a1116 2
    CALL_LoadName(GET_DISPATCH(), (*(GLuint *) (pc + 0)
                  ));
d1122 1
a1122 2
    CALL_PassThrough(GET_DISPATCH(), (*(GLfloat *) (pc + 0)
                     ));
d1128 1
a1128 1
    CALL_PopName(GET_DISPATCH(), ());
d1134 1
a1134 2
    CALL_PushName(GET_DISPATCH(), (*(GLuint *) (pc + 0)
                  ));
d1140 1
a1140 2
    CALL_DrawBuffer(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                    ));
d1146 1
a1146 2
    CALL_Clear(GET_DISPATCH(), (*(GLbitfield *) (pc + 0)
               ));
d1152 3
a1154 5
    CALL_ClearAccum(GET_DISPATCH(), (*(GLfloat *) (pc + 0),
                                     *(GLfloat *) (pc + 4),
                                     *(GLfloat *) (pc + 8),
                                     *(GLfloat *) (pc + 12)
                    ));
d1160 1
a1160 2
    CALL_ClearIndex(GET_DISPATCH(), (*(GLfloat *) (pc + 0)
                    ));
d1166 3
a1168 5
    CALL_ClearColor(GET_DISPATCH(), (*(GLclampf *) (pc + 0),
                                     *(GLclampf *) (pc + 4),
                                     *(GLclampf *) (pc + 8),
                                     *(GLclampf *) (pc + 12)
                    ));
d1174 1
a1174 2
    CALL_ClearStencil(GET_DISPATCH(), (*(GLint *) (pc + 0)
                      ));
d1187 1
a1187 2
    CALL_ClearDepth(GET_DISPATCH(), (*(GLclampd *) (pc + 0)
                    ));
d1193 1
a1193 2
    CALL_StencilMask(GET_DISPATCH(), (*(GLuint *) (pc + 0)
                     ));
d1199 3
a1201 5
    CALL_ColorMask(GET_DISPATCH(), (*(GLboolean *) (pc + 0),
                                    *(GLboolean *) (pc + 1),
                                    *(GLboolean *) (pc + 2),
                                    *(GLboolean *) (pc + 3)
                   ));
d1207 1
a1207 2
    CALL_DepthMask(GET_DISPATCH(), (*(GLboolean *) (pc + 0)
                   ));
d1213 1
a1213 2
    CALL_IndexMask(GET_DISPATCH(), (*(GLuint *) (pc + 0)
                   ));
d1219 1
a1219 2
    CALL_Accum(GET_DISPATCH(), (*(GLenum *) (pc + 0), *(GLfloat *) (pc + 4)
               ));
d1225 1
a1225 2
    CALL_Disable(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                 ));
d1231 1
a1231 2
    CALL_Enable(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                ));
d1237 1
a1237 1
    CALL_PopAttrib(GET_DISPATCH(), ());
d1243 1
a1243 2
    CALL_PushAttrib(GET_DISPATCH(), (*(GLbitfield *) (pc + 0)
                    ));
d1256 2
a1257 4
    CALL_MapGrid1d(GET_DISPATCH(), (*(GLint *) (pc + 16),
                                    *(GLdouble *) (pc + 0),
                                    *(GLdouble *) (pc + 8)
                   ));
d1263 2
a1264 3
    CALL_MapGrid1f(GET_DISPATCH(), (*(GLint *) (pc + 0),
                                    *(GLfloat *) (pc + 4), *(GLfloat *) (pc + 8)
                   ));
d1277 5
a1281 7
    CALL_MapGrid2d(GET_DISPATCH(), (*(GLint *) (pc + 32),
                                    *(GLdouble *) (pc + 0),
                                    *(GLdouble *) (pc + 8),
                                    *(GLint *) (pc + 36),
                                    *(GLdouble *) (pc + 16),
                                    *(GLdouble *) (pc + 24)
                   ));
d1287 5
a1291 7
    CALL_MapGrid2f(GET_DISPATCH(), (*(GLint *) (pc + 0),
                                    *(GLfloat *) (pc + 4),
                                    *(GLfloat *) (pc + 8),
                                    *(GLint *) (pc + 12),
                                    *(GLfloat *) (pc + 16),
                                    *(GLfloat *) (pc + 20)
                   ));
d1304 1
a1304 2
    CALL_EvalCoord1dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                      ));
d1310 1
a1310 2
    CALL_EvalCoord1fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                      ));
d1323 1
a1323 2
    CALL_EvalCoord2dv(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                      ));
d1329 1
a1329 2
    CALL_EvalCoord2fv(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                      ));
d1335 1
a1335 3
    CALL_EvalMesh1(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                    *(GLint *) (pc + 4), *(GLint *) (pc + 8)
                   ));
d1341 1
a1341 2
    CALL_EvalPoint1(GET_DISPATCH(), (*(GLint *) (pc + 0)
                    ));
d1347 4
a1350 5
    CALL_EvalMesh2(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                    *(GLint *) (pc + 4),
                                    *(GLint *) (pc + 8),
                                    *(GLint *) (pc + 12), *(GLint *) (pc + 16)
                   ));
d1356 1
a1356 2
    CALL_EvalPoint2(GET_DISPATCH(), (*(GLint *) (pc + 0), *(GLint *) (pc + 4)
                    ));
d1362 1
a1362 2
    CALL_AlphaFunc(GET_DISPATCH(), (*(GLenum *) (pc + 0), *(GLclampf *) (pc + 4)
                   ));
d1368 1
a1368 2
    CALL_BlendFunc(GET_DISPATCH(), (*(GLenum *) (pc + 0), *(GLenum *) (pc + 4)
                   ));
d1374 1
a1374 2
    CALL_LogicOp(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                 ));
d1380 2
a1381 3
    CALL_StencilFunc(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                      *(GLint *) (pc + 4), *(GLuint *) (pc + 8)
                     ));
d1387 2
a1388 3
    CALL_StencilOp(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                    *(GLenum *) (pc + 4), *(GLenum *) (pc + 8)
                   ));
d1394 1
a1394 2
    CALL_DepthFunc(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                   ));
d1400 1
a1400 2
    CALL_PixelZoom(GET_DISPATCH(), (*(GLfloat *) (pc + 0), *(GLfloat *) (pc + 4)
                   ));
d1406 1
a1406 3
    CALL_PixelTransferf(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                         *(GLfloat *) (pc + 4)
                        ));
d1412 1
a1412 3
    CALL_PixelTransferi(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                         *(GLint *) (pc + 4)
                        ));
d1424 1
a1424 3
        CALL_PixelStoref(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                          *(GLfloat *) (pc + 4)
                         ));
d1440 1
a1440 3
        CALL_PixelStorei(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                          *(GLint *) (pc + 4)
                         ));
d1452 1
a1452 3
    CALL_PixelMapfv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                     mapsize, (const GLfloat *) (pc + 8)
                    ));
d1460 1
a1460 3
    CALL_PixelMapuiv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                      mapsize, (const GLuint *) (pc + 8)
                     ));
d1468 1
a1468 3
    CALL_PixelMapusv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                      mapsize, (const GLushort *) (pc + 8)
                     ));
d1474 1
a1474 2
    CALL_ReadBuffer(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                    ));
d1480 4
a1483 6
    CALL_CopyPixels(GET_DISPATCH(), (*(GLint *) (pc + 0),
                                     *(GLint *) (pc + 4),
                                     *(GLsizei *) (pc + 8),
                                     *(GLsizei *) (pc + 12),
                                     *(GLenum *) (pc + 16)
                    ));
d1492 10
a1501 15
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment));

    CALL_DrawPixels(GET_DISPATCH(), (*(GLsizei *) (pc + 20),
                                     *(GLsizei *) (pc + 24),
                                     *(GLenum *) (pc + 28),
                                     *(GLenum *) (pc + 32), pixels));
d1525 1
a1525 1
        CALL_GetBooleanv(GET_DISPATCH(), (pname, params));
d1544 1
a1544 1
        CALL_GetClipPlane(GET_DISPATCH(), (*(GLenum *) (pc + 0), equation));
d1573 1
a1573 1
        CALL_GetDoublev(GET_DISPATCH(), (pname, params));
d1592 1
a1592 1
        retval = CALL_GetError(GET_DISPATCH(), ());
d1621 1
a1621 1
        CALL_GetFloatv(GET_DISPATCH(), (pname, params));
d1650 1
a1650 1
        CALL_GetIntegerv(GET_DISPATCH(), (pname, params));
d1679 1
a1679 1
        CALL_GetLightfv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d1708 1
a1708 1
        CALL_GetLightiv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d1738 1
a1738 1
        CALL_GetMapdv(GET_DISPATCH(), (target, query, v));
d1768 1
a1768 1
        CALL_GetMapfv(GET_DISPATCH(), (target, query, v));
d1798 1
a1798 1
        CALL_GetMapiv(GET_DISPATCH(), (target, query, v));
d1827 1
a1827 2
        CALL_GetMaterialfv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                            pname, params));
d1856 1
a1856 2
        CALL_GetMaterialiv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                            pname, params));
d1885 1
a1885 1
        CALL_GetPixelMapfv(GET_DISPATCH(), (map, values));
d1914 1
a1914 1
        CALL_GetPixelMapuiv(GET_DISPATCH(), (map, values));
d1943 1
a1943 1
        CALL_GetPixelMapusv(GET_DISPATCH(), (map, values));
d1972 1
a1972 1
        CALL_GetTexEnvfv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d2001 1
a2001 1
        CALL_GetTexEnviv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d2030 1
a2030 1
        CALL_GetTexGendv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d2059 1
a2059 1
        CALL_GetTexGenfv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d2088 1
a2088 1
        CALL_GetTexGeniv(GET_DISPATCH(), (*(GLenum *) (pc + 0), pname, params));
d2117 1
a2117 2
        CALL_GetTexParameterfv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                pname, params));
d2146 1
a2146 2
        CALL_GetTexParameteriv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                pname, params));
d2175 2
a2176 3
        CALL_GetTexLevelParameterfv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                     *(GLint *) (pc + 4),
                                                     pname, params));
d2205 2
a2206 3
        CALL_GetTexLevelParameteriv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                     *(GLint *) (pc + 4),
                                                     pname, params));
d2225 1
a2225 2
        retval = CALL_IsEnabled(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                                ));
d2244 1
a2244 2
        retval = CALL_IsList(GET_DISPATCH(), (*(GLuint *) (pc + 0)
                             ));
d2262 1
a2262 3
    CALL_DepthRange(GET_DISPATCH(), (*(GLclampd *) (pc + 0),
                                     *(GLclampd *) (pc + 8)
                    ));
d2275 5
a2279 7
    CALL_Frustum(GET_DISPATCH(), (*(GLdouble *) (pc + 0),
                                  *(GLdouble *) (pc + 8),
                                  *(GLdouble *) (pc + 16),
                                  *(GLdouble *) (pc + 24),
                                  *(GLdouble *) (pc + 32),
                                  *(GLdouble *) (pc + 40)
                 ));
d2285 1
a2285 1
    CALL_LoadIdentity(GET_DISPATCH(), ());
d2291 1
a2291 2
    CALL_LoadMatrixf(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                     ));
d2304 1
a2304 2
    CALL_LoadMatrixd(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                     ));
d2310 1
a2310 2
    CALL_MatrixMode(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                    ));
d2316 1
a2316 2
    CALL_MultMatrixf(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                     ));
d2329 1
a2329 2
    CALL_MultMatrixd(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                     ));
d2342 5
a2346 6
    CALL_Ortho(GET_DISPATCH(), (*(GLdouble *) (pc + 0),
                                *(GLdouble *) (pc + 8),
                                *(GLdouble *) (pc + 16),
                                *(GLdouble *) (pc + 24),
                                *(GLdouble *) (pc + 32), *(GLdouble *) (pc + 40)
               ));
d2352 1
a2352 1
    CALL_PopMatrix(GET_DISPATCH(), ());
d2358 1
a2358 1
    CALL_PushMatrix(GET_DISPATCH(), ());
d2371 3
a2373 5
    CALL_Rotated(GET_DISPATCH(), (*(GLdouble *) (pc + 0),
                                  *(GLdouble *) (pc + 8),
                                  *(GLdouble *) (pc + 16),
                                  *(GLdouble *) (pc + 24)
                 ));
d2379 3
a2381 4
    CALL_Rotatef(GET_DISPATCH(), (*(GLfloat *) (pc + 0),
                                  *(GLfloat *) (pc + 4),
                                  *(GLfloat *) (pc + 8), *(GLfloat *) (pc + 12)
                 ));
d2394 2
a2395 3
    CALL_Scaled(GET_DISPATCH(), (*(GLdouble *) (pc + 0),
                                 *(GLdouble *) (pc + 8), *(GLdouble *) (pc + 16)
                ));
d2401 2
a2402 3
    CALL_Scalef(GET_DISPATCH(), (*(GLfloat *) (pc + 0),
                                 *(GLfloat *) (pc + 4), *(GLfloat *) (pc + 8)
                ));
d2415 2
a2416 4
    CALL_Translated(GET_DISPATCH(), (*(GLdouble *) (pc + 0),
                                     *(GLdouble *) (pc + 8),
                                     *(GLdouble *) (pc + 16)
                    ));
d2422 2
a2423 4
    CALL_Translatef(GET_DISPATCH(), (*(GLfloat *) (pc + 0),
                                     *(GLfloat *) (pc + 4),
                                     *(GLfloat *) (pc + 8)
                    ));
d2429 3
a2431 4
    CALL_Viewport(GET_DISPATCH(), (*(GLint *) (pc + 0),
                                   *(GLint *) (pc + 4),
                                   *(GLsizei *) (pc + 8), *(GLsizei *) (pc + 12)
                  ));
d2437 1
a2437 2
    CALL_BindTexture(GET_DISPATCH(), (*(GLenum *) (pc + 0), *(GLuint *) (pc + 4)
                     ));
d2443 1
a2443 2
    CALL_Indexubv(GET_DISPATCH(), ((const GLubyte *) (pc + 0)
                  ));
d2449 1
a2449 3
    CALL_PolygonOffset(GET_DISPATCH(), (*(GLfloat *) (pc + 0),
                                        *(GLfloat *) (pc + 4)
                       ));
d2468 1
a2468 3
            CALL_AreTexturesResident(GET_DISPATCH(),
                                     (n, (const GLuint *) (pc + 4),
                                      residences));
d2492 1
a2492 3
            CALL_AreTexturesResident(GET_DISPATCH(),
                                     (n, (const GLuint *) (pc + 4),
                                      residences));
d2503 6
a2508 8
    CALL_CopyTexImage1D(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                         *(GLint *) (pc + 4),
                                         *(GLenum *) (pc + 8),
                                         *(GLint *) (pc + 12),
                                         *(GLint *) (pc + 16),
                                         *(GLsizei *) (pc + 20),
                                         *(GLint *) (pc + 24)
                        ));
d2514 7
a2520 9
    CALL_CopyTexImage2D(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                         *(GLint *) (pc + 4),
                                         *(GLenum *) (pc + 8),
                                         *(GLint *) (pc + 12),
                                         *(GLint *) (pc + 16),
                                         *(GLsizei *) (pc + 20),
                                         *(GLsizei *) (pc + 24),
                                         *(GLint *) (pc + 28)
                        ));
d2526 5
a2530 7
    CALL_CopyTexSubImage1D(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                            *(GLint *) (pc + 4),
                                            *(GLint *) (pc + 8),
                                            *(GLint *) (pc + 12),
                                            *(GLint *) (pc + 16),
                                            *(GLsizei *) (pc + 20)
                           ));
d2536 7
a2542 9
    CALL_CopyTexSubImage2D(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                            *(GLint *) (pc + 4),
                                            *(GLint *) (pc + 8),
                                            *(GLint *) (pc + 12),
                                            *(GLint *) (pc + 16),
                                            *(GLint *) (pc + 20),
                                            *(GLsizei *) (pc + 24),
                                            *(GLsizei *) (pc + 28)
                           ));
d2556 1
a2556 2
        CALL_DeleteTextures(GET_DISPATCH(), (n, (const GLuint *) (pc + 4)
                            ));
d2574 1
a2574 2
        CALL_DeleteTextures(GET_DISPATCH(), (n, (const GLuint *) (pc + 4)
                            ));
d2596 1
a2596 1
        CALL_GenTextures(GET_DISPATCH(), (n, textures));
d2619 1
a2619 1
        CALL_GenTextures(GET_DISPATCH(), (n, textures));
d2638 1
a2638 2
        retval = CALL_IsTexture(GET_DISPATCH(), (*(GLuint *) (pc + 0)
                                ));
d2657 1
a2657 2
        retval = CALL_IsTexture(GET_DISPATCH(), (*(GLuint *) (pc + 0)
                                ));
d2670 3
a2672 4
    CALL_PrioritizeTextures(GET_DISPATCH(), (n,
                                             (const GLuint *) (pc + 4),
                                             (const GLclampf *) (pc + 4)
                            ));
d2681 12
a2692 17
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment));

    CALL_TexSubImage1D(GET_DISPATCH(), (*(GLenum *) (pc + 20),
                                        *(GLint *) (pc + 24),
                                        *(GLint *) (pc + 28),
                                        *(GLsizei *) (pc + 36),
                                        *(GLenum *) (pc + 44),
                                        *(GLenum *) (pc + 48), pixels));
d2701 14
a2714 19
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment));

    CALL_TexSubImage2D(GET_DISPATCH(), (*(GLenum *) (pc + 20),
                                        *(GLint *) (pc + 24),
                                        *(GLint *) (pc + 28),
                                        *(GLint *) (pc + 32),
                                        *(GLsizei *) (pc + 36),
                                        *(GLsizei *) (pc + 40),
                                        *(GLenum *) (pc + 44),
                                        *(GLenum *) (pc + 48), pixels));
d2720 3
a2722 5
    CALL_BlendColor(GET_DISPATCH(), (*(GLclampf *) (pc + 0),
                                     *(GLclampf *) (pc + 4),
                                     *(GLclampf *) (pc + 8),
                                     *(GLclampf *) (pc + 12)
                    ));
d2728 1
a2728 2
    CALL_BlendEquation(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                       ));
d2737 11
a2747 16
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment));

    CALL_ColorTable(GET_DISPATCH(), (*(GLenum *) (pc + 20),
                                     *(GLenum *) (pc + 24),
                                     *(GLsizei *) (pc + 28),
                                     *(GLenum *) (pc + 32),
                                     *(GLenum *) (pc + 36), table));
d2758 1
a2758 2
    CALL_ColorTableParameterfv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                pname, params));
d2769 1
a2769 2
    CALL_ColorTableParameteriv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                pname, params));
d2775 4
a2778 6
    CALL_CopyColorTable(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                         *(GLenum *) (pc + 4),
                                         *(GLint *) (pc + 8),
                                         *(GLint *) (pc + 12),
                                         *(GLsizei *) (pc + 16)
                        ));
d2802 1
a2802 2
        CALL_GetColorTableParameterfv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                       pname, params));
d2831 1
a2831 2
        CALL_GetColorTableParameterfv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                       pname, params));
d2860 1
a2860 2
        CALL_GetColorTableParameteriv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                       pname, params));
d2889 1
a2889 2
        CALL_GetColorTableParameteriv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                       pname, params));
d2903 11
a2913 16
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment));

    CALL_ColorSubTable(GET_DISPATCH(), (*(GLenum *) (pc + 20),
                                        *(GLsizei *) (pc + 24),
                                        *(GLsizei *) (pc + 28),
                                        *(GLenum *) (pc + 32),
                                        *(GLenum *) (pc + 36), data));
d2919 4
a2922 6
    CALL_CopyColorSubTable(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                            *(GLsizei *) (pc + 4),
                                            *(GLint *) (pc + 8),
                                            *(GLint *) (pc + 12),
                                            *(GLsizei *) (pc + 16)
                           ));
d2931 11
a2941 16
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment));

    CALL_ConvolutionFilter1D(GET_DISPATCH(), (*(GLenum *) (pc + 20),
                                              *(GLenum *) (pc + 24),
                                              *(GLsizei *) (pc + 28),
                                              *(GLenum *) (pc + 36),
                                              *(GLenum *) (pc + 40), image));
d2950 12
a2961 17
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment));

    CALL_ConvolutionFilter2D(GET_DISPATCH(), (*(GLenum *) (pc + 20),
                                              *(GLenum *) (pc + 24),
                                              *(GLsizei *) (pc + 28),
                                              *(GLsizei *) (pc + 32),
                                              *(GLenum *) (pc + 36),
                                              *(GLenum *) (pc + 40), image));
d2967 2
a2968 4
    CALL_ConvolutionParameterf(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                *(GLenum *) (pc + 4),
                                                *(GLfloat *) (pc + 8)
                               ));
d2979 1
a2979 2
    CALL_ConvolutionParameterfv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                 pname, params));
d2985 2
a2986 4
    CALL_ConvolutionParameteri(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                *(GLenum *) (pc + 4),
                                                *(GLint *) (pc + 8)
                               ));
d2997 1
a2997 2
    CALL_ConvolutionParameteriv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                 pname, params));
d3003 4
a3006 6
    CALL_CopyConvolutionFilter1D(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                  *(GLenum *) (pc + 4),
                                                  *(GLint *) (pc + 8),
                                                  *(GLint *) (pc + 12),
                                                  *(GLsizei *) (pc + 16)
                                 ));
d3012 5
a3016 7
    CALL_CopyConvolutionFilter2D(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                  *(GLenum *) (pc + 4),
                                                  *(GLint *) (pc + 8),
                                                  *(GLint *) (pc + 12),
                                                  *(GLsizei *) (pc + 16),
                                                  *(GLsizei *) (pc + 20)
                                 ));
d3040 1
a3040 2
        CALL_GetConvolutionParameterfv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                        pname, params));
d3069 1
a3069 2
        CALL_GetConvolutionParameterfv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                        pname, params));
d3098 1
a3098 2
        CALL_GetConvolutionParameteriv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                        pname, params));
d3127 1
a3127 2
        CALL_GetConvolutionParameteriv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                        pname, params));
d3156 1
a3156 2
        CALL_GetHistogramParameterfv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                      pname, params));
d3185 1
a3185 2
        CALL_GetHistogramParameterfv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                      pname, params));
d3214 1
a3214 2
        CALL_GetHistogramParameteriv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                      pname, params));
d3243 1
a3243 2
        CALL_GetHistogramParameteriv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                      pname, params));
d3272 1
a3272 2
        CALL_GetMinmaxParameterfv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                   pname, params));
d3301 1
a3301 2
        CALL_GetMinmaxParameterfv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                   pname, params));
d3330 1
a3330 2
        CALL_GetMinmaxParameteriv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                   pname, params));
d3359 1
a3359 2
        CALL_GetMinmaxParameteriv(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                   pname, params));
d3370 3
a3372 5
    CALL_Histogram(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                    *(GLsizei *) (pc + 4),
                                    *(GLenum *) (pc + 8),
                                    *(GLboolean *) (pc + 12)
                   ));
d3378 2
a3379 3
    CALL_Minmax(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                 *(GLenum *) (pc + 4), *(GLboolean *) (pc + 8)
                ));
d3385 1
a3385 2
    CALL_ResetHistogram(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                        ));
d3391 1
a3391 2
    CALL_ResetMinmax(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                     ));
d3402 17
a3418 24
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_IMAGE_HEIGHT, (GLint) hdr->imageHeight));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_IMAGES, (GLint) hdr->skipImages));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment));

    CALL_TexImage3D(GET_DISPATCH(), (*(GLenum *) (pc + 36),
                                     *(GLint *) (pc + 40),
                                     *(GLint *) (pc + 44),
                                     *(GLsizei *) (pc + 48),
                                     *(GLsizei *) (pc + 52),
                                     *(GLsizei *) (pc + 56),
                                     *(GLint *) (pc + 64),
                                     *(GLenum *) (pc + 68),
                                     *(GLenum *) (pc + 72), pixels));
d3427 18
a3444 25
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES, hdr->swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_UNPACK_LSB_FIRST, hdr->lsbFirst));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ROW_LENGTH, (GLint) hdr->rowLength));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_IMAGE_HEIGHT, (GLint) hdr->imageHeight));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_ROWS, (GLint) hdr->skipRows));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_IMAGES, (GLint) hdr->skipImages));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_SKIP_PIXELS, (GLint) hdr->skipPixels));
    CALL_PixelStorei(GET_DISPATCH(),
                     (GL_UNPACK_ALIGNMENT, (GLint) hdr->alignment));

    CALL_TexSubImage3D(GET_DISPATCH(), (*(GLenum *) (pc + 36),
                                        *(GLint *) (pc + 40),
                                        *(GLint *) (pc + 44),
                                        *(GLint *) (pc + 48),
                                        *(GLint *) (pc + 52),
                                        *(GLsizei *) (pc + 60),
                                        *(GLsizei *) (pc + 64),
                                        *(GLsizei *) (pc + 68),
                                        *(GLenum *) (pc + 76),
                                        *(GLenum *) (pc + 80), pixels));
d3450 8
a3457 10
    CALL_CopyTexSubImage3D(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                            *(GLint *) (pc + 4),
                                            *(GLint *) (pc + 8),
                                            *(GLint *) (pc + 12),
                                            *(GLint *) (pc + 16),
                                            *(GLint *) (pc + 20),
                                            *(GLint *) (pc + 24),
                                            *(GLsizei *) (pc + 28),
                                            *(GLsizei *) (pc + 32)
                           ));
d3461 1
a3461 1
__glXDisp_ActiveTextureARB(GLbyte * pc)
d3463 1
a3463 2
    CALL_ActiveTextureARB(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                          ));
d3467 1
a3467 1
__glXDisp_MultiTexCoord1dvARB(GLbyte * pc)
d3476 1
a3476 3
    CALL_MultiTexCoord1dvARB(GET_DISPATCH(), (*(GLenum *) (pc + 8),
                                              (const GLdouble *) (pc + 0)
                             ));
d3482 1
a3482 3
    CALL_MultiTexCoord1fvARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                              (const GLfloat *) (pc + 4)
                             ));
d3486 1
a3486 1
__glXDisp_MultiTexCoord1ivARB(GLbyte * pc)
d3488 1
a3488 3
    CALL_MultiTexCoord1ivARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                              (const GLint *) (pc + 4)
                             ));
d3492 1
a3492 1
__glXDisp_MultiTexCoord1svARB(GLbyte * pc)
d3494 1
a3494 3
    CALL_MultiTexCoord1svARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                              (const GLshort *) (pc + 4)
                             ));
d3498 1
a3498 1
__glXDisp_MultiTexCoord2dvARB(GLbyte * pc)
d3507 1
a3507 3
    CALL_MultiTexCoord2dvARB(GET_DISPATCH(), (*(GLenum *) (pc + 16),
                                              (const GLdouble *) (pc + 0)
                             ));
d3513 1
a3513 3
    CALL_MultiTexCoord2fvARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                              (const GLfloat *) (pc + 4)
                             ));
d3517 1
a3517 1
__glXDisp_MultiTexCoord2ivARB(GLbyte * pc)
d3519 1
a3519 3
    CALL_MultiTexCoord2ivARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                              (const GLint *) (pc + 4)
                             ));
d3523 1
a3523 1
__glXDisp_MultiTexCoord2svARB(GLbyte * pc)
d3525 1
a3525 3
    CALL_MultiTexCoord2svARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                              (const GLshort *) (pc + 4)
                             ));
d3529 1
a3529 1
__glXDisp_MultiTexCoord3dvARB(GLbyte * pc)
d3538 1
a3538 3
    CALL_MultiTexCoord3dvARB(GET_DISPATCH(), (*(GLenum *) (pc + 24),
                                              (const GLdouble *) (pc + 0)
                             ));
d3544 1
a3544 3
    CALL_MultiTexCoord3fvARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                              (const GLfloat *) (pc + 4)
                             ));
d3548 1
a3548 1
__glXDisp_MultiTexCoord3ivARB(GLbyte * pc)
d3550 1
a3550 3
    CALL_MultiTexCoord3ivARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                              (const GLint *) (pc + 4)
                             ));
d3554 1
a3554 1
__glXDisp_MultiTexCoord3svARB(GLbyte * pc)
d3556 1
a3556 3
    CALL_MultiTexCoord3svARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                              (const GLshort *) (pc + 4)
                             ));
d3560 1
a3560 1
__glXDisp_MultiTexCoord4dvARB(GLbyte * pc)
d3569 1
a3569 3
    CALL_MultiTexCoord4dvARB(GET_DISPATCH(), (*(GLenum *) (pc + 32),
                                              (const GLdouble *) (pc + 0)
                             ));
d3575 1
a3575 11
    CALL_MultiTexCoord4fvARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                              (const GLfloat *) (pc + 4)
                             ));
}

void
__glXDisp_MultiTexCoord4ivARB(GLbyte * pc)
{
    CALL_MultiTexCoord4ivARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                              (const GLint *) (pc + 4)
                             ));
d3579 1
a3579 1
__glXDisp_MultiTexCoord4svARB(GLbyte * pc)
d3581 1
a3581 3
    CALL_MultiTexCoord4svARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                              (const GLshort *) (pc + 4)
                             ));
d3585 1
a3585 1
__glXDisp_SampleCoverageARB(GLbyte * pc)
d3587 1
a3587 3
    CALL_SampleCoverageARB(GET_DISPATCH(), (*(GLclampf *) (pc + 0),
                                            *(GLboolean *) (pc + 4)
                           ));
d3591 1
a3591 1
__glXDisp_CompressedTexImage1DARB(GLbyte * pc)
d3593 2
d3597 6
a3602 8
    CALL_CompressedTexImage1DARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                  *(GLint *) (pc + 4),
                                                  *(GLenum *) (pc + 8),
                                                  *(GLsizei *) (pc + 12),
                                                  *(GLint *) (pc + 16),
                                                  imageSize,
                                                  (const GLvoid *) (pc + 24)
                                 ));
d3606 1
a3606 1
__glXDisp_CompressedTexImage2DARB(GLbyte * pc)
d3608 2
d3612 7
a3618 9
    CALL_CompressedTexImage2DARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                  *(GLint *) (pc + 4),
                                                  *(GLenum *) (pc + 8),
                                                  *(GLsizei *) (pc + 12),
                                                  *(GLsizei *) (pc + 16),
                                                  *(GLint *) (pc + 20),
                                                  imageSize,
                                                  (const GLvoid *) (pc + 28)
                                 ));
d3622 1
a3622 1
__glXDisp_CompressedTexImage3DARB(GLbyte * pc)
d3624 2
d3628 8
a3635 10
    CALL_CompressedTexImage3DARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                  *(GLint *) (pc + 4),
                                                  *(GLenum *) (pc + 8),
                                                  *(GLsizei *) (pc + 12),
                                                  *(GLsizei *) (pc + 16),
                                                  *(GLsizei *) (pc + 20),
                                                  *(GLint *) (pc + 24),
                                                  imageSize,
                                                  (const GLvoid *) (pc + 32)
                                 ));
d3639 1
a3639 1
__glXDisp_CompressedTexSubImage1DARB(GLbyte * pc)
d3641 2
d3645 6
a3650 8
    CALL_CompressedTexSubImage1DARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                     *(GLint *) (pc + 4),
                                                     *(GLint *) (pc + 8),
                                                     *(GLsizei *) (pc + 12),
                                                     *(GLenum *) (pc + 16),
                                                     imageSize,
                                                     (const GLvoid *) (pc + 24)
                                    ));
d3654 1
a3654 1
__glXDisp_CompressedTexSubImage2DARB(GLbyte * pc)
d3656 2
d3660 8
a3667 10
    CALL_CompressedTexSubImage2DARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                     *(GLint *) (pc + 4),
                                                     *(GLint *) (pc + 8),
                                                     *(GLint *) (pc + 12),
                                                     *(GLsizei *) (pc + 16),
                                                     *(GLsizei *) (pc + 20),
                                                     *(GLenum *) (pc + 24),
                                                     imageSize,
                                                     (const GLvoid *) (pc + 32)
                                    ));
d3671 1
a3671 1
__glXDisp_CompressedTexSubImage3DARB(GLbyte * pc)
d3673 2
d3677 18
a3694 12
    CALL_CompressedTexSubImage3DARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                     *(GLint *) (pc + 4),
                                                     *(GLint *) (pc + 8),
                                                     *(GLint *) (pc + 12),
                                                     *(GLint *) (pc + 16),
                                                     *(GLsizei *) (pc + 20),
                                                     *(GLsizei *) (pc + 24),
                                                     *(GLsizei *) (pc + 28),
                                                     *(GLenum *) (pc + 32),
                                                     imageSize,
                                                     (const GLvoid *) (pc + 40)
                                    ));
d3697 2
a3698 2
int
__glXDisp_GetProgramEnvParameterdvARB(__GLXclientState * cl, GLbyte * pc)
d3700 5
a3704 3
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3706 4
a3709 3
    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLdouble params[4];
d3711 4
a3714 5
        CALL_GetProgramEnvParameterdvARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                          *(GLuint *) (pc + 4),
                                                          params));
        __glXSendReply(cl->client, params, 4, 8, GL_FALSE, 0);
        error = Success;
d3716 20
d3737 11
a3747 1
    return error;
d3750 2
a3751 2
int
__glXDisp_GetProgramEnvParameterfvARB(__GLXclientState * cl, GLbyte * pc)
d3753 9
a3761 3
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3763 7
a3769 3
    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLfloat params[4];
d3771 9
a3779 5
        CALL_GetProgramEnvParameterfvARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                          *(GLuint *) (pc + 4),
                                                          params));
        __glXSendReply(cl->client, params, 4, 4, GL_FALSE, 0);
        error = Success;
d3781 44
d3826 14
a3839 1
    return error;
d3843 1
a3843 1
__glXDisp_GetProgramLocalParameterdvARB(__GLXclientState * cl, GLbyte * pc)
d3845 3
a3847 1
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
d3851 1
a3851 1
    pc += __GLX_VENDPRIV_HDR_SIZE;
d3853 1
a3853 1
        GLdouble params[4];
d3855 1
a3855 4
        CALL_GetProgramLocalParameterdvARB(GET_DISPATCH(),
                                           (*(GLenum *) (pc + 0),
                                            *(GLuint *) (pc + 4), params));
        __glXSendReply(cl->client, params, 4, 8, GL_FALSE, 0);
d3862 8
d3871 1
a3871 1
__glXDisp_GetProgramLocalParameterfvARB(__GLXclientState * cl, GLbyte * pc)
d3873 2
a3874 1
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
d3878 1
a3878 1
    pc += __GLX_VENDPRIV_HDR_SIZE;
d3880 1
a3880 1
        GLfloat params[4];
d3882 6
a3887 4
        CALL_GetProgramLocalParameterfvARB(GET_DISPATCH(),
                                           (*(GLenum *) (pc + 0),
                                            *(GLuint *) (pc + 4), params));
        __glXSendReply(cl->client, params, 4, 4, GL_FALSE, 0);
d3895 1
a3895 1
__glXDisp_GetProgramivARB(__GLXclientState * cl, GLbyte * pc)
d3897 3
a3899 1
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
d3903 1
a3903 1
    pc += __GLX_VENDPRIV_HDR_SIZE;
d3907 1
a3907 1
        const GLuint compsize = __glGetProgramivARB_size(pname);
d3917 1
a3917 2
        CALL_GetProgramivARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                              pname, params));
d3926 1
a3926 1
__glXDisp_GetVertexAttribdvARB(__GLXclientState * cl, GLbyte * pc)
d3928 3
a3930 1
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
d3934 1
a3934 1
    pc += __GLX_VENDPRIV_HDR_SIZE;
d3938 5
a3942 5
        const GLuint compsize = __glGetVertexAttribdvARB_size(pname);
        GLdouble answerBuffer[200];
        GLdouble *params =
            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
                                 sizeof(answerBuffer), 8);
d3948 2
a3949 3
        CALL_GetVertexAttribdvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                                   pname, params));
        __glXSendReply(cl->client, params, compsize, 8, GL_FALSE, 0);
d3957 1
a3957 1
__glXDisp_GetVertexAttribfvARB(__GLXclientState * cl, GLbyte * pc)
d3959 2
a3960 1
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
d3964 1
a3964 1
    pc += __GLX_VENDPRIV_HDR_SIZE;
d3968 3
a3970 3
        const GLuint compsize = __glGetVertexAttribfvARB_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
d3978 1
a3978 2
        CALL_GetVertexAttribfvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                                   pname, params));
d3987 1
a3987 1
__glXDisp_GetVertexAttribivARB(__GLXclientState * cl, GLbyte * pc)
d3989 2
a3990 1
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
d3994 1
a3994 1
    pc += __GLX_VENDPRIV_HDR_SIZE;
d3996 1
a3996 1
        const GLenum pname = *(GLenum *) (pc + 4);
d3998 2
a3999 13
        const GLuint compsize = __glGetVertexAttribivARB_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        CALL_GetVertexAttribivARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                                   pname, params));
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
d4007 1
a4007 17
__glXDisp_ProgramEnvParameter4dvARB(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 40);
        pc -= 4;
    }
#endif

    CALL_ProgramEnvParameter4dvARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                    *(GLuint *) (pc + 4),
                                                    (const GLdouble *) (pc + 8)
                                   ));
}

void
__glXDisp_ProgramEnvParameter4fvARB(GLbyte * pc)
d4009 3
a4011 4
    CALL_ProgramEnvParameter4fvARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                    *(GLuint *) (pc + 4),
                                                    (const GLfloat *) (pc + 8)
                                   ));
d4015 1
a4015 1
__glXDisp_ProgramLocalParameter4dvARB(GLbyte * pc)
d4017 2
a4018 27
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 40);
        pc -= 4;
    }
#endif

    CALL_ProgramLocalParameter4dvARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                      *(GLuint *) (pc + 4),
                                                      (const GLdouble *) (pc +
                                                                          8)
                                     ));
}

void
__glXDisp_ProgramLocalParameter4fvARB(GLbyte * pc)
{
    CALL_ProgramLocalParameter4fvARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                      *(GLuint *) (pc + 4),
                                                      (const GLfloat *) (pc + 8)
                                     ));
}

void
__glXDisp_ProgramStringARB(GLbyte * pc)
{
    const GLsizei len = *(GLsizei *) (pc + 8);
d4020 1
a4020 4
    CALL_ProgramStringARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                           *(GLenum *) (pc + 4),
                                           len, (const GLvoid *) (pc + 12)
                          ));
d4024 1
a4024 1
__glXDisp_VertexAttrib1dvARB(GLbyte * pc)
d4026 2
d4035 1
a4035 11
    CALL_VertexAttrib1dvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLdouble *) (pc + 4)
                            ));
}

void
__glXDisp_VertexAttrib1fvARB(GLbyte * pc)
{
    CALL_VertexAttrib1fvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLfloat *) (pc + 4)
                            ));
d4039 1
a4039 1
__glXDisp_VertexAttrib1svARB(GLbyte * pc)
d4041 3
a4043 3
    CALL_VertexAttrib1svARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLshort *) (pc + 4)
                            ));
d4047 1
a4047 1
__glXDisp_VertexAttrib2dvARB(GLbyte * pc)
d4049 2
d4058 1
a4058 11
    CALL_VertexAttrib2dvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLdouble *) (pc + 4)
                            ));
}

void
__glXDisp_VertexAttrib2fvARB(GLbyte * pc)
{
    CALL_VertexAttrib2fvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLfloat *) (pc + 4)
                            ));
d4062 1
a4062 1
__glXDisp_VertexAttrib2svARB(GLbyte * pc)
d4064 3
a4066 3
    CALL_VertexAttrib2svARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLshort *) (pc + 4)
                            ));
d4070 1
a4070 1
__glXDisp_VertexAttrib3dvARB(GLbyte * pc)
d4072 2
d4081 1
a4081 11
    CALL_VertexAttrib3dvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLdouble *) (pc + 4)
                            ));
}

void
__glXDisp_VertexAttrib3fvARB(GLbyte * pc)
{
    CALL_VertexAttrib3fvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLfloat *) (pc + 4)
                            ));
d4085 1
a4085 1
__glXDisp_VertexAttrib3svARB(GLbyte * pc)
d4087 3
a4089 3
    CALL_VertexAttrib3svARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLshort *) (pc + 4)
                            ));
d4093 1
a4093 1
__glXDisp_VertexAttrib4NbvARB(GLbyte * pc)
d4095 3
a4097 3
    CALL_VertexAttrib4NbvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                              (const GLbyte *) (pc + 4)
                             ));
d4101 1
a4101 1
__glXDisp_VertexAttrib4NivARB(GLbyte * pc)
d4103 3
a4105 3
    CALL_VertexAttrib4NivARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                              (const GLint *) (pc + 4)
                             ));
d4109 1
a4109 1
__glXDisp_VertexAttrib4NsvARB(GLbyte * pc)
d4111 3
a4113 3
    CALL_VertexAttrib4NsvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                              (const GLshort *) (pc + 4)
                             ));
d4117 1
a4117 1
__glXDisp_VertexAttrib4NubvARB(GLbyte * pc)
d4119 3
a4121 3
    CALL_VertexAttrib4NubvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                               (const GLubyte *) (pc + 4)
                              ));
d4125 1
a4125 1
__glXDisp_VertexAttrib4NuivARB(GLbyte * pc)
d4127 3
a4129 3
    CALL_VertexAttrib4NuivARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                               (const GLuint *) (pc + 4)
                              ));
d4133 1
a4133 1
__glXDisp_VertexAttrib4NusvARB(GLbyte * pc)
d4135 3
a4137 3
    CALL_VertexAttrib4NusvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                               (const GLushort *) (pc + 4)
                              ));
d4141 1
a4141 1
__glXDisp_VertexAttrib4bvARB(GLbyte * pc)
d4143 3
a4145 3
    CALL_VertexAttrib4bvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLbyte *) (pc + 4)
                            ));
d4149 1
a4149 1
__glXDisp_VertexAttrib4dvARB(GLbyte * pc)
d4151 2
d4160 1
a4160 3
    CALL_VertexAttrib4dvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLdouble *) (pc + 4)
                            ));
d4164 1
a4164 1
__glXDisp_VertexAttrib4fvARB(GLbyte * pc)
d4166 3
a4168 3
    CALL_VertexAttrib4fvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLfloat *) (pc + 4)
                            ));
d4172 1
a4172 1
__glXDisp_VertexAttrib4ivARB(GLbyte * pc)
d4174 3
a4176 3
    CALL_VertexAttrib4ivARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLint *) (pc + 4)
                            ));
d4180 1
a4180 1
__glXDisp_VertexAttrib4svARB(GLbyte * pc)
d4182 3
a4184 3
    CALL_VertexAttrib4svARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLshort *) (pc + 4)
                            ));
d4188 1
a4188 1
__glXDisp_VertexAttrib4ubvARB(GLbyte * pc)
d4190 3
a4192 3
    CALL_VertexAttrib4ubvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                              (const GLubyte *) (pc + 4)
                             ));
d4196 1
a4196 1
__glXDisp_VertexAttrib4uivARB(GLbyte * pc)
d4198 3
a4200 3
    CALL_VertexAttrib4uivARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                              (const GLuint *) (pc + 4)
                             ));
d4204 1
a4204 1
__glXDisp_VertexAttrib4usvARB(GLbyte * pc)
d4206 3
a4208 3
    CALL_VertexAttrib4usvARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                              (const GLushort *) (pc + 4)
                             ));
d4212 1
a4212 1
__glXDisp_BeginQueryARB(GLbyte * pc)
d4214 3
a4216 3
    CALL_BeginQueryARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                        *(GLuint *) (pc + 4)
                       ));
d4220 1
a4220 1
__glXDisp_DeleteQueriesARB(__GLXclientState * cl, GLbyte * pc)
d4222 3
a4224 1
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
d4228 1
a4228 1
    pc += __GLX_SINGLE_HDR_SIZE;
d4232 1
a4232 2
        CALL_DeleteQueriesARB(GET_DISPATCH(), (n, (const GLuint *) (pc + 4)
                              ));
a4238 7
void
__glXDisp_EndQueryARB(GLbyte * pc)
{
    CALL_EndQueryARB(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                     ));
}

d4240 1
a4240 1
__glXDisp_GenQueriesARB(__GLXclientState * cl, GLbyte * pc)
d4242 3
a4244 1
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
d4248 1
a4248 1
    pc += __GLX_SINGLE_HDR_SIZE;
d4253 1
a4253 1
        GLuint *ids =
d4256 2
a4257 2
        CALL_GenQueriesARB(GET_DISPATCH(), (n, ids));
        __glXSendReply(cl->client, ids, n, 4, GL_TRUE, 0);
d4265 1
a4265 1
__glXDisp_GetQueryObjectivARB(__GLXclientState * cl, GLbyte * pc)
d4267 3
a4269 1
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
d4273 1
a4273 1
    pc += __GLX_SINGLE_HDR_SIZE;
d4275 1
a4275 1
        const GLenum pname = *(GLenum *) (pc + 4);
d4277 5
a4281 5
        const GLuint compsize = __glGetQueryObjectivARB_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);
d4283 15
a4297 3
        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();
d4299 3
a4301 3
        CALL_GetQueryObjectivARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                                  pname, params));
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
d4309 1
a4309 1
__glXDisp_GetQueryObjectuivARB(__GLXclientState * cl, GLbyte * pc)
d4311 3
a4313 1
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
d4317 1
a4317 1
    pc += __GLX_SINGLE_HDR_SIZE;
d4319 10
a4328 1
        const GLenum pname = *(GLenum *) (pc + 4);
d4330 8
a4337 5
        const GLuint compsize = __glGetQueryObjectuivARB_size(pname);
        GLuint answerBuffer[200];
        GLuint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);
d4339 3
a4341 3
        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();
d4343 3
a4345 3
        CALL_GetQueryObjectuivARB(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                                   pname, params));
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
d4353 1
a4353 1
__glXDisp_GetQueryivARB(__GLXclientState * cl, GLbyte * pc)
d4355 3
a4357 1
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
d4361 1
a4361 1
    pc += __GLX_SINGLE_HDR_SIZE;
d4365 1
a4365 1
        const GLuint compsize = __glGetQueryivARB_size(pname);
d4375 1
a4375 2
        CALL_GetQueryivARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                            pname, params));
d4384 1
a4384 1
__glXDisp_IsQueryARB(__GLXclientState * cl, GLbyte * pc)
d4386 2
a4387 1
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
d4391 1
a4391 1
    pc += __GLX_SINGLE_HDR_SIZE;
d4395 1
a4395 2
        retval = CALL_IsQueryARB(GET_DISPATCH(), (*(GLuint *) (pc + 0)
                                 ));
d4404 1
a4404 1
__glXDisp_DrawBuffersARB(GLbyte * pc)
d4406 8
a4413 1
    const GLsizei n = *(GLsizei *) (pc + 0);
d4415 3
a4417 2
    CALL_DrawBuffersARB(GET_DISPATCH(), (n, (const GLenum *) (pc + 4)
                        ));
d4421 1
a4421 1
__glXDisp_ClampColorARB(GLbyte * pc)
d4423 4
a4426 3
    CALL_ClampColorARB(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                        *(GLenum *) (pc + 4)
                       ));
d4430 1
a4430 1
__glXDisp_RenderbufferStorageMultisample(GLbyte * pc)
d4432 12
a4443 6
    CALL_RenderbufferStorageMultisample(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                         *(GLsizei *) (pc + 4),
                                                         *(GLenum *) (pc + 8),
                                                         *(GLsizei *) (pc + 12),
                                                         *(GLsizei *) (pc + 16)
                                        ));
d4447 1
a4447 1
__glXDisp_SampleMaskSGIS(GLbyte * pc)
d4449 4
a4452 3
    CALL_SampleMaskSGIS(GET_DISPATCH(), (*(GLclampf *) (pc + 0),
                                         *(GLboolean *) (pc + 4)
                        ));
d4456 1
a4456 1
__glXDisp_SamplePatternSGIS(GLbyte * pc)
d4458 6
a4463 2
    CALL_SamplePatternSGIS(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                           ));
d4467 1
a4467 1
__glXDisp_PointParameterfEXT(GLbyte * pc)
d4469 3
a4471 3
    CALL_PointParameterfEXT(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                             *(GLfloat *) (pc + 4)
                            ));
d4475 1
a4475 1
__glXDisp_PointParameterfvEXT(GLbyte * pc)
d4477 4
a4480 2
    const GLenum pname = *(GLenum *) (pc + 0);
    const GLfloat *params;
d4482 6
a4487 3
    params = (const GLfloat *) (pc + 4);

    CALL_PointParameterfvEXT(GET_DISPATCH(), (pname, params));
d4491 1
a4491 1
__glXDisp_SecondaryColor3bvEXT(GLbyte * pc)
d4493 3
a4495 2
    CALL_SecondaryColor3bvEXT(GET_DISPATCH(), ((const GLbyte *) (pc + 0)
                              ));
d4499 1
a4499 1
__glXDisp_SecondaryColor3dvEXT(GLbyte * pc)
d4501 3
a4503 9
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 24);
        pc -= 4;
    }
#endif

    CALL_SecondaryColor3dvEXT(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                              ));
d4507 1
a4507 1
__glXDisp_SecondaryColor3fvEXT(GLbyte * pc)
d4509 3
a4511 2
    CALL_SecondaryColor3fvEXT(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                              ));
d4515 1
a4515 1
__glXDisp_SecondaryColor3ivEXT(GLbyte * pc)
d4517 7
a4523 2
    CALL_SecondaryColor3ivEXT(GET_DISPATCH(), ((const GLint *) (pc + 0)
                              ));
d4526 2
a4527 2
void
__glXDisp_SecondaryColor3svEXT(GLbyte * pc)
d4529 16
a4544 2
    CALL_SecondaryColor3svEXT(GET_DISPATCH(), ((const GLshort *) (pc + 0)
                              ));
d4548 1
a4548 1
__glXDisp_SecondaryColor3ubvEXT(GLbyte * pc)
d4550 5
a4554 2
    CALL_SecondaryColor3ubvEXT(GET_DISPATCH(), ((const GLubyte *) (pc + 0)
                               ));
d4558 1
a4558 1
__glXDisp_SecondaryColor3uivEXT(GLbyte * pc)
d4560 5
a4564 2
    CALL_SecondaryColor3uivEXT(GET_DISPATCH(), ((const GLuint *) (pc + 0)
                               ));
d4568 1
a4568 1
__glXDisp_SecondaryColor3usvEXT(GLbyte * pc)
d4570 4
a4573 2
    CALL_SecondaryColor3usvEXT(GET_DISPATCH(), ((const GLushort *) (pc + 0)
                               ));
d4577 1
a4577 1
__glXDisp_FogCoorddvEXT(GLbyte * pc)
d4579 5
a4583 9
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 8);
        pc -= 4;
    }
#endif

    CALL_FogCoorddvEXT(GET_DISPATCH(), ((const GLdouble *) (pc + 0)
                       ));
d4587 1
a4587 1
__glXDisp_FogCoordfvEXT(GLbyte * pc)
d4589 5
a4593 2
    CALL_FogCoordfvEXT(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                       ));
d4597 1
a4597 1
__glXDisp_BlendFuncSeparateEXT(GLbyte * pc)
d4599 5
a4603 5
    CALL_BlendFuncSeparateEXT(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                               *(GLenum *) (pc + 4),
                                               *(GLenum *) (pc + 8),
                                               *(GLenum *) (pc + 12)
                              ));
d4607 1
a4607 1
__glXDisp_WindowPos3fvMESA(GLbyte * pc)
d4609 5
a4613 2
    CALL_WindowPos3fvMESA(GET_DISPATCH(), ((const GLfloat *) (pc + 0)
                          ));
d4617 1
a4617 1
__glXDisp_AreProgramsResidentNV(__GLXclientState * cl, GLbyte * pc)
d4619 2
d4629 6
a4634 9
        GLboolean retval;
        GLboolean answerBuffer[200];
        GLboolean *residences =
            __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);
        retval =
            CALL_AreProgramsResidentNV(GET_DISPATCH(),
                                       (n, (const GLuint *) (pc + 4),
                                        residences));
        __glXSendReply(cl->client, residences, n, 1, GL_FALSE, retval);
a4640 8
void
__glXDisp_BindProgramNV(GLbyte * pc)
{
    CALL_BindProgramNV(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                        *(GLuint *) (pc + 4)
                       ));
}

d4642 1
a4642 1
__glXDisp_DeleteProgramsNV(__GLXclientState * cl, GLbyte * pc)
d4644 2
d4654 6
a4659 2
        CALL_DeleteProgramsNV(GET_DISPATCH(), (n, (const GLuint *) (pc + 4)
                              ));
d4667 1
a4667 1
__glXDisp_ExecuteProgramNV(GLbyte * pc)
d4669 3
a4671 4
    CALL_ExecuteProgramNV(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                           *(GLuint *) (pc + 4),
                                           (const GLfloat *) (pc + 8)
                          ));
d4675 2
a4676 1
__glXDisp_GenProgramsNV(__GLXclientState * cl, GLbyte * pc)
d4678 3
d4687 1
a4687 1
        const GLsizei n = *(GLsizei *) (pc + 0);
d4689 4
a4692 6
        GLuint answerBuffer[200];
        GLuint *programs =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);
        CALL_GenProgramsNV(GET_DISPATCH(), (n, programs));
        __glXSendReply(cl->client, programs, n, 4, GL_TRUE, 0);
d4700 1
a4700 1
__glXDisp_GetProgramParameterdvNV(__GLXclientState * cl, GLbyte * pc)
d4702 2
d4710 1
a4710 1
        GLdouble params[4];
d4712 3
a4714 5
        CALL_GetProgramParameterdvNV(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                      *(GLuint *) (pc + 4),
                                                      *(GLenum *) (pc + 8),
                                                      params));
        __glXSendReply(cl->client, params, 4, 8, GL_FALSE, 0);
d4722 1
a4722 1
__glXDisp_GetProgramParameterfvNV(__GLXclientState * cl, GLbyte * pc)
d4724 2
d4732 1
a4732 1
        GLfloat params[4];
d4734 2
a4735 5
        CALL_GetProgramParameterfvNV(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                      *(GLuint *) (pc + 4),
                                                      *(GLenum *) (pc + 8),
                                                      params));
        __glXSendReply(cl->client, params, 4, 4, GL_FALSE, 0);
d4743 1
a4743 1
__glXDisp_GetProgramivNV(__GLXclientState * cl, GLbyte * pc)
d4745 2
d4753 1
a4753 1
        const GLenum pname = *(GLenum *) (pc + 4);
d4755 2
a4756 13
        const GLuint compsize = __glGetProgramivNV_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        CALL_GetProgramivNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             pname, params));
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
d4763 2
a4764 2
int
__glXDisp_GetTrackMatrixivNV(__GLXclientState * cl, GLbyte * pc)
d4766 5
a4770 3
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4772 9
a4780 3
    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLint params[1];
d4782 7
a4788 6
        CALL_GetTrackMatrixivNV(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                 *(GLuint *) (pc + 4),
                                                 *(GLenum *) (pc + 8), params));
        __glXSendReply(cl->client, params, 1, 4, GL_FALSE, 0);
        error = Success;
    }
d4790 6
a4795 1
    return error;
d4798 2
a4799 2
int
__glXDisp_GetVertexAttribdvNV(__GLXclientState * cl, GLbyte * pc)
d4801 8
a4808 3
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4810 2
a4811 3
    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);
d4813 7
a4819 5
        const GLuint compsize = __glGetVertexAttribdvNV_size(pname);
        GLdouble answerBuffer[200];
        GLdouble *params =
            __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer,
                                 sizeof(answerBuffer), 8);
d4821 7
a4827 3
        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();
d4829 9
a4837 4
        CALL_GetVertexAttribdvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                                  pname, params));
        __glXSendReply(cl->client, params, compsize, 8, GL_FALSE, 0);
        error = Success;
d4839 1
d4841 1
a4841 1
    return error;
d4844 2
a4845 2
int
__glXDisp_GetVertexAttribfvNV(__GLXclientState * cl, GLbyte * pc)
d4847 4
a4850 3
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4852 7
a4858 197
    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetVertexAttribfvNV_size(pname);
        GLfloat answerBuffer[200];
        GLfloat *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        CALL_GetVertexAttribfvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                                  pname, params));
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetVertexAttribivNV(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLenum pname = *(GLenum *) (pc + 4);

        const GLuint compsize = __glGetVertexAttribivNV_size(pname);
        GLint answerBuffer[200];
        GLint *params =
            __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer,
                                 sizeof(answerBuffer), 4);

        if (params == NULL)
            return BadAlloc;
        __glXClearErrorOccured();

        CALL_GetVertexAttribivNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                                  pname, params));
        __glXSendReply(cl->client, params, compsize, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_IsProgramNV(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = CALL_IsProgramNV(GET_DISPATCH(), (*(GLuint *) (pc + 0)
                                  ));
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDisp_LoadProgramNV(GLbyte * pc)
{
    const GLsizei len = *(GLsizei *) (pc + 8);

    CALL_LoadProgramNV(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                        *(GLuint *) (pc + 4),
                                        len, (const GLubyte *) (pc + 12)
                       ));
}

void
__glXDisp_ProgramParameters4dvNV(GLbyte * pc)
{
    const GLsizei num = *(GLsizei *) (pc + 8);

#ifdef __GLX_ALIGN64
    const GLuint cmdlen = 16 + __GLX_PAD((num * 32)) - 4;

    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, cmdlen);
        pc -= 4;
    }
#endif

    CALL_ProgramParameters4dvNV(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                 *(GLuint *) (pc + 4),
                                                 num,
                                                 (const GLdouble *) (pc + 12)
                                ));
}

void
__glXDisp_ProgramParameters4fvNV(GLbyte * pc)
{
    const GLsizei num = *(GLsizei *) (pc + 8);

    CALL_ProgramParameters4fvNV(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                 *(GLuint *) (pc + 4),
                                                 num,
                                                 (const GLfloat *) (pc + 12)
                                ));
}

void
__glXDisp_RequestResidentProgramsNV(GLbyte * pc)
{
    const GLsizei n = *(GLsizei *) (pc + 0);

    CALL_RequestResidentProgramsNV(GET_DISPATCH(), (n, (const GLuint *) (pc + 4)
                                   ));
}

void
__glXDisp_TrackMatrixNV(GLbyte * pc)
{
    CALL_TrackMatrixNV(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                        *(GLuint *) (pc + 4),
                                        *(GLenum *) (pc + 8),
                                        *(GLenum *) (pc + 12)
                       ));
}

void
__glXDisp_VertexAttrib1dvNV(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 12);
        pc -= 4;
    }
#endif

    CALL_VertexAttrib1dvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                            (const GLdouble *) (pc + 4)
                           ));
}

void
__glXDisp_VertexAttrib1fvNV(GLbyte * pc)
{
    CALL_VertexAttrib1fvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                            (const GLfloat *) (pc + 4)
                           ));
}

void
__glXDisp_VertexAttrib1svNV(GLbyte * pc)
{
    CALL_VertexAttrib1svNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                            (const GLshort *) (pc + 4)
                           ));
}

void
__glXDisp_VertexAttrib2dvNV(GLbyte * pc)
{
#ifdef __GLX_ALIGN64
    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, 20);
        pc -= 4;
    }
#endif

    CALL_VertexAttrib2dvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                            (const GLdouble *) (pc + 4)
                           ));
}

void
__glXDisp_VertexAttrib2fvNV(GLbyte * pc)
{
    CALL_VertexAttrib2fvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                            (const GLfloat *) (pc + 4)
                           ));
}

void
__glXDisp_VertexAttrib2svNV(GLbyte * pc)
{
    CALL_VertexAttrib2svNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                            (const GLshort *) (pc + 4)
                           ));
}
d4863 2
d4872 1
a4872 3
    CALL_VertexAttrib3dvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                            (const GLdouble *) (pc + 4)
                           ));
d4878 3
a4880 3
    CALL_VertexAttrib3fvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                            (const GLfloat *) (pc + 4)
                           ));
d4886 3
a4888 3
    CALL_VertexAttrib3svNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                            (const GLshort *) (pc + 4)
                           ));
d4894 2
d4903 1
a4903 3
    CALL_VertexAttrib4dvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                            (const GLdouble *) (pc + 4)
                           ));
d4909 3
a4911 3
    CALL_VertexAttrib4fvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                            (const GLfloat *) (pc + 4)
                           ));
d4917 3
a4919 3
    CALL_VertexAttrib4svNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                            (const GLshort *) (pc + 4)
                           ));
d4925 3
a4927 3
    CALL_VertexAttrib4ubvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             (const GLubyte *) (pc + 4)
                            ));
d4933 2
d4946 1
a4946 3
    CALL_VertexAttribs1dvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             n, (const GLdouble *) (pc + 8)
                            ));
d4952 2
d4956 1
a4956 3
    CALL_VertexAttribs1fvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             n, (const GLfloat *) (pc + 8)
                            ));
d4962 2
d4966 1
a4966 3
    CALL_VertexAttribs1svNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             n, (const GLshort *) (pc + 8)
                            ));
d4972 2
d4985 1
a4985 3
    CALL_VertexAttribs2dvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             n, (const GLdouble *) (pc + 8)
                            ));
d4991 2
d4995 1
a4995 3
    CALL_VertexAttribs2fvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             n, (const GLfloat *) (pc + 8)
                            ));
d5001 2
d5005 1
a5005 3
    CALL_VertexAttribs2svNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             n, (const GLshort *) (pc + 8)
                            ));
d5011 2
d5024 1
a5024 3
    CALL_VertexAttribs3dvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             n, (const GLdouble *) (pc + 8)
                            ));
d5030 2
d5034 1
a5034 3
    CALL_VertexAttribs3fvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             n, (const GLfloat *) (pc + 8)
                            ));
d5040 2
d5044 1
a5044 3
    CALL_VertexAttribs3svNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             n, (const GLshort *) (pc + 8)
                            ));
d5050 2
d5063 1
a5063 3
    CALL_VertexAttribs4dvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             n, (const GLdouble *) (pc + 8)
                            ));
d5069 2
d5073 1
a5073 3
    CALL_VertexAttribs4fvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             n, (const GLfloat *) (pc + 8)
                            ));
d5079 2
d5083 1
a5083 3
    CALL_VertexAttribs4svNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                             n, (const GLshort *) (pc + 8)
                            ));
d5089 2
d5093 1
a5093 22
    CALL_VertexAttribs4ubvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                              n, (const GLubyte *) (pc + 8)
                             ));
}

void
__glXDisp_PointParameteriNV(GLbyte * pc)
{
    CALL_PointParameteriNV(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                            *(GLint *) (pc + 4)
                           ));
}

void
__glXDisp_PointParameterivNV(GLbyte * pc)
{
    const GLenum pname = *(GLenum *) (pc + 0);
    const GLint *params;

    params = (const GLint *) (pc + 4);

    CALL_PointParameterivNV(GET_DISPATCH(), (pname, params));
d5099 3
a5101 371
    CALL_ActiveStencilFaceEXT(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                              ));
}

int
__glXDisp_GetProgramNamedParameterdvNV(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei len = *(GLsizei *) (pc + 4);

        GLdouble params[4];

        CALL_GetProgramNamedParameterdvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                                           len,
                                                           (const GLubyte *) (pc
                                                                              +
                                                                              8),
                                                           params));
        __glXSendReply(cl->client, params, 4, 8, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetProgramNamedParameterfvNV(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei len = *(GLsizei *) (pc + 4);

        GLfloat params[4];

        CALL_GetProgramNamedParameterfvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                                           len,
                                                           (const GLubyte *) (pc
                                                                              +
                                                                              8),
                                                           params));
        __glXSendReply(cl->client, params, 4, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

void
__glXDisp_ProgramNamedParameter4dvNV(GLbyte * pc)
{
    const GLsizei len = *(GLsizei *) (pc + 36);

#ifdef __GLX_ALIGN64
    const GLuint cmdlen = 44 + __GLX_PAD(len) - 4;

    if ((unsigned long) (pc) & 7) {
        (void) memmove(pc - 4, pc, cmdlen);
        pc -= 4;
    }
#endif

    CALL_ProgramNamedParameter4dvNV(GET_DISPATCH(), (*(GLuint *) (pc + 32),
                                                     len,
                                                     (const GLubyte *) (pc +
                                                                        40),
                                                     (const GLdouble *) (pc + 0)
                                    ));
}

void
__glXDisp_ProgramNamedParameter4fvNV(GLbyte * pc)
{
    const GLsizei len = *(GLsizei *) (pc + 4);

    CALL_ProgramNamedParameter4fvNV(GET_DISPATCH(), (*(GLuint *) (pc + 0),
                                                     len,
                                                     (const GLubyte *) (pc +
                                                                        24),
                                                     (const GLfloat *) (pc + 8)
                                    ));
}

void
__glXDisp_BlendEquationSeparateEXT(GLbyte * pc)
{
    CALL_BlendEquationSeparateEXT(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                   *(GLenum *) (pc + 4)
                                  ));
}

void
__glXDisp_BindFramebufferEXT(GLbyte * pc)
{
    CALL_BindFramebufferEXT(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                             *(GLuint *) (pc + 4)
                            ));
}

void
__glXDisp_BindRenderbufferEXT(GLbyte * pc)
{
    CALL_BindRenderbufferEXT(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                              *(GLuint *) (pc + 4)
                             ));
}

int
__glXDisp_CheckFramebufferStatusEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLenum retval;

        retval =
            CALL_CheckFramebufferStatusEXT(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                                           ));
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDisp_DeleteFramebuffersEXT(GLbyte * pc)
{
    const GLsizei n = *(GLsizei *) (pc + 0);

    CALL_DeleteFramebuffersEXT(GET_DISPATCH(), (n, (const GLuint *) (pc + 4)
                               ));
}

void
__glXDisp_DeleteRenderbuffersEXT(GLbyte * pc)
{
    const GLsizei n = *(GLsizei *) (pc + 0);

    CALL_DeleteRenderbuffersEXT(GET_DISPATCH(), (n, (const GLuint *) (pc + 4)
                                ));
}

void
__glXDisp_FramebufferRenderbufferEXT(GLbyte * pc)
{
    CALL_FramebufferRenderbufferEXT(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                     *(GLenum *) (pc + 4),
                                                     *(GLenum *) (pc + 8),
                                                     *(GLuint *) (pc + 12)
                                    ));
}

void
__glXDisp_FramebufferTexture1DEXT(GLbyte * pc)
{
    CALL_FramebufferTexture1DEXT(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                  *(GLenum *) (pc + 4),
                                                  *(GLenum *) (pc + 8),
                                                  *(GLuint *) (pc + 12),
                                                  *(GLint *) (pc + 16)
                                 ));
}

void
__glXDisp_FramebufferTexture2DEXT(GLbyte * pc)
{
    CALL_FramebufferTexture2DEXT(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                  *(GLenum *) (pc + 4),
                                                  *(GLenum *) (pc + 8),
                                                  *(GLuint *) (pc + 12),
                                                  *(GLint *) (pc + 16)
                                 ));
}

void
__glXDisp_FramebufferTexture3DEXT(GLbyte * pc)
{
    CALL_FramebufferTexture3DEXT(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                  *(GLenum *) (pc + 4),
                                                  *(GLenum *) (pc + 8),
                                                  *(GLuint *) (pc + 12),
                                                  *(GLint *) (pc + 16),
                                                  *(GLint *) (pc + 20)
                                 ));
}

int
__glXDisp_GenFramebuffersEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = *(GLsizei *) (pc + 0);

        GLuint answerBuffer[200];
        GLuint *framebuffers =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);
        CALL_GenFramebuffersEXT(GET_DISPATCH(), (n, framebuffers));
        __glXSendReply(cl->client, framebuffers, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GenRenderbuffersEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        const GLsizei n = *(GLsizei *) (pc + 0);

        GLuint answerBuffer[200];
        GLuint *renderbuffers =
            __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer),
                                 4);
        CALL_GenRenderbuffersEXT(GET_DISPATCH(), (n, renderbuffers));
        __glXSendReply(cl->client, renderbuffers, n, 4, GL_TRUE, 0);
        error = Success;
    }

    return error;
}

void
__glXDisp_GenerateMipmapEXT(GLbyte * pc)
{
    CALL_GenerateMipmapEXT(GET_DISPATCH(), (*(GLenum *) (pc + 0)
                           ));
}

int
__glXDisp_GetFramebufferAttachmentParameterivEXT(__GLXclientState * cl,
                                                 GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLint params[1];

        CALL_GetFramebufferAttachmentParameterivEXT(GET_DISPATCH(),
                                                    (*(GLenum *) (pc + 0),
                                                     *(GLenum *) (pc + 4),
                                                     *(GLenum *) (pc + 8),
                                                     params));
        __glXSendReply(cl->client, params, 1, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_GetRenderbufferParameterivEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLint params[1];

        CALL_GetRenderbufferParameterivEXT(GET_DISPATCH(),
                                           (*(GLenum *) (pc + 0),
                                            *(GLenum *) (pc + 4), params));
        __glXSendReply(cl->client, params, 1, 4, GL_FALSE, 0);
        error = Success;
    }

    return error;
}

int
__glXDisp_IsFramebufferEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = CALL_IsFramebufferEXT(GET_DISPATCH(), (*(GLuint *) (pc + 0)
                                       ));
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

int
__glXDisp_IsRenderbufferEXT(__GLXclientState * cl, GLbyte * pc)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);

    pc += __GLX_VENDPRIV_HDR_SIZE;
    if (cx != NULL) {
        GLboolean retval;

        retval = CALL_IsRenderbufferEXT(GET_DISPATCH(), (*(GLuint *) (pc + 0)
                                        ));
        __glXSendReply(cl->client, dummy_answer, 0, 0, GL_FALSE, retval);
        error = Success;
    }

    return error;
}

void
__glXDisp_RenderbufferStorageEXT(GLbyte * pc)
{
    CALL_RenderbufferStorageEXT(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                 *(GLenum *) (pc + 4),
                                                 *(GLsizei *) (pc + 8),
                                                 *(GLsizei *) (pc + 12)
                                ));
}

void
__glXDisp_BlitFramebufferEXT(GLbyte * pc)
{
    CALL_BlitFramebufferEXT(GET_DISPATCH(), (*(GLint *) (pc + 0),
                                             *(GLint *) (pc + 4),
                                             *(GLint *) (pc + 8),
                                             *(GLint *) (pc + 12),
                                             *(GLint *) (pc + 16),
                                             *(GLint *) (pc + 20),
                                             *(GLint *) (pc + 24),
                                             *(GLint *) (pc + 28),
                                             *(GLbitfield *) (pc + 32),
                                             *(GLenum *) (pc + 36)
                            ));
}

void
__glXDisp_FramebufferTextureLayerEXT(GLbyte * pc)
{
    CALL_FramebufferTextureLayerEXT(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                                     *(GLenum *) (pc + 4),
                                                     *(GLuint *) (pc + 8),
                                                     *(GLint *) (pc + 12),
                                                     *(GLint *) (pc + 16)
                                    ));
@


1.4.8.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a2707 3

        if (residences == NULL)
            return BadAlloc;
a2733 3

        if (residences == NULL)
            return BadAlloc;
a2850 2
        if (textures == NULL)
            return BadAlloc;
a2873 2
        if (textures == NULL)
            return BadAlloc;
a4600 2
        if (ids == NULL)
            return BadAlloc;
a4958 2
        if (programs == NULL)
            return BadAlloc;
a5767 2
        if (framebuffers == NULL)
            return BadAlloc;
a5790 2
        if (renderbuffers == NULL)
            return BadAlloc;
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d50 2
a51 2
extern GLboolean __glXErrorOccured( void );
extern void __glXClearErrorOccured( void );
d53 1
a53 1
static const unsigned dummy_answer[2] = {0, 0};
d55 2
a56 1
int __glXDisp_NewList(__GLXclientState *cl, GLbyte *pc)
d58 1
a58 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d60 1
a60 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d63 3
a65 5
    if ( cx != NULL ) {
        CALL_NewList( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0),
            *(GLenum   *)(pc +  4)
        ) );
d72 2
a73 1
int __glXDisp_EndList(__GLXclientState *cl, GLbyte *pc)
d75 1
a75 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d77 1
a77 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d80 2
a81 2
    if ( cx != NULL ) {
        CALL_EndList( GET_DISPATCH(), () );
d88 2
a89 1
void __glXDisp_CallList(GLbyte * pc)
d91 2
a92 3
    CALL_CallList( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0)
    ) );
d95 2
a96 1
void __glXDisp_CallLists(GLbyte * pc)
d98 3
a100 3
    const GLsizei n = *(GLsizei  *)(pc +  0);
    const GLenum type = *(GLenum   *)(pc +  4);
    const GLvoid * lists =  (const GLvoid *)(pc +  8);
d102 3
a104 5
    CALL_CallLists( GET_DISPATCH(), (
        n,
        type,
        lists
    ) );
d107 2
a108 1
int __glXDisp_DeleteLists(__GLXclientState *cl, GLbyte *pc)
d110 1
a110 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d112 1
a112 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d115 4
a118 5
    if ( cx != NULL ) {
        CALL_DeleteLists( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0),
            *(GLsizei  *)(pc +  4)
        ) );
d125 2
a126 1
int __glXDisp_GenLists(__GLXclientState *cl, GLbyte *pc)
d128 1
a128 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d130 1
a130 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d133 1
a133 1
    if ( cx != NULL ) {
d135 3
a137 3
        retval = CALL_GenLists( GET_DISPATCH(), (
            *(GLsizei  *)(pc +  0)
        ) );
d145 2
a146 1
void __glXDisp_ListBase(GLbyte * pc)
d148 2
a149 3
    CALL_ListBase( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0)
    ) );
d152 2
a153 1
void __glXDisp_Begin(GLbyte * pc)
d155 2
a156 3
    CALL_Begin( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d159 2
a160 1
void __glXDisp_Bitmap(GLbyte * pc)
d162 2
a163 2
    const GLubyte * const bitmap = (const GLubyte *) (pc + 44);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
d165 9
a173 5
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) hdr->rowLength) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) hdr->skipRows) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) hdr->skipPixels) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) hdr->alignment) );
d175 6
a180 9
    CALL_Bitmap( GET_DISPATCH(), (
        *(GLsizei  *)(pc + 20),
        *(GLsizei  *)(pc + 24),
        *(GLfloat  *)(pc + 28),
        *(GLfloat  *)(pc + 32),
        *(GLfloat  *)(pc + 36),
        *(GLfloat  *)(pc + 40),
        bitmap
    ) );
d183 2
a184 1
void __glXDisp_Color3bv(GLbyte * pc)
d186 2
a187 3
    CALL_Color3bv( GET_DISPATCH(), (
         (const GLbyte *)(pc +  0)
    ) );
d190 2
a191 1
void __glXDisp_Color3dv(GLbyte * pc)
d194 2
a195 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d200 2
a201 3
    CALL_Color3dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d204 2
a205 1
void __glXDisp_Color3fv(GLbyte * pc)
d207 2
a208 3
    CALL_Color3fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d211 2
a212 1
void __glXDisp_Color3iv(GLbyte * pc)
d214 2
a215 3
    CALL_Color3iv( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d218 2
a219 1
void __glXDisp_Color3sv(GLbyte * pc)
d221 2
a222 3
    CALL_Color3sv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d225 2
a226 1
void __glXDisp_Color3ubv(GLbyte * pc)
d228 2
a229 3
    CALL_Color3ubv( GET_DISPATCH(), (
         (const GLubyte *)(pc +  0)
    ) );
d232 2
a233 1
void __glXDisp_Color3uiv(GLbyte * pc)
d235 2
a236 3
    CALL_Color3uiv( GET_DISPATCH(), (
         (const GLuint *)(pc +  0)
    ) );
d239 2
a240 1
void __glXDisp_Color3usv(GLbyte * pc)
d242 2
a243 3
    CALL_Color3usv( GET_DISPATCH(), (
         (const GLushort *)(pc +  0)
    ) );
d246 2
a247 1
void __glXDisp_Color4bv(GLbyte * pc)
d249 2
a250 3
    CALL_Color4bv( GET_DISPATCH(), (
         (const GLbyte *)(pc +  0)
    ) );
d253 2
a254 1
void __glXDisp_Color4dv(GLbyte * pc)
d257 2
a258 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 32);
d263 2
a264 3
    CALL_Color4dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d267 2
a268 1
void __glXDisp_Color4fv(GLbyte * pc)
d270 2
a271 3
    CALL_Color4fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d274 2
a275 1
void __glXDisp_Color4iv(GLbyte * pc)
d277 2
a278 3
    CALL_Color4iv( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d281 2
a282 1
void __glXDisp_Color4sv(GLbyte * pc)
d284 2
a285 3
    CALL_Color4sv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d288 2
a289 1
void __glXDisp_Color4ubv(GLbyte * pc)
d291 2
a292 3
    CALL_Color4ubv( GET_DISPATCH(), (
         (const GLubyte *)(pc +  0)
    ) );
d295 2
a296 1
void __glXDisp_Color4uiv(GLbyte * pc)
d298 2
a299 3
    CALL_Color4uiv( GET_DISPATCH(), (
         (const GLuint *)(pc +  0)
    ) );
d302 2
a303 1
void __glXDisp_Color4usv(GLbyte * pc)
d305 2
a306 3
    CALL_Color4usv( GET_DISPATCH(), (
         (const GLushort *)(pc +  0)
    ) );
d309 2
a310 1
void __glXDisp_EdgeFlagv(GLbyte * pc)
d312 2
a313 3
    CALL_EdgeFlagv( GET_DISPATCH(), (
         (const GLboolean *)(pc +  0)
    ) );
d316 2
a317 1
void __glXDisp_End(GLbyte * pc)
d319 1
a319 1
    CALL_End( GET_DISPATCH(), () );
d322 2
a323 1
void __glXDisp_Indexdv(GLbyte * pc)
d326 2
a327 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 8);
d332 2
a333 3
    CALL_Indexdv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d336 2
a337 1
void __glXDisp_Indexfv(GLbyte * pc)
d339 2
a340 3
    CALL_Indexfv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d343 2
a344 1
void __glXDisp_Indexiv(GLbyte * pc)
d346 2
a347 3
    CALL_Indexiv( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d350 2
a351 1
void __glXDisp_Indexsv(GLbyte * pc)
d353 2
a354 3
    CALL_Indexsv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d357 2
a358 1
void __glXDisp_Normal3bv(GLbyte * pc)
d360 2
a361 3
    CALL_Normal3bv( GET_DISPATCH(), (
         (const GLbyte *)(pc +  0)
    ) );
d364 2
a365 1
void __glXDisp_Normal3dv(GLbyte * pc)
d368 2
a369 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d374 2
a375 3
    CALL_Normal3dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d378 2
a379 1
void __glXDisp_Normal3fv(GLbyte * pc)
d381 2
a382 3
    CALL_Normal3fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d385 2
a386 1
void __glXDisp_Normal3iv(GLbyte * pc)
d388 2
a389 3
    CALL_Normal3iv( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d392 2
a393 1
void __glXDisp_Normal3sv(GLbyte * pc)
d395 2
a396 3
    CALL_Normal3sv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d399 2
a400 1
void __glXDisp_RasterPos2dv(GLbyte * pc)
d403 2
a404 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 16);
d409 2
a410 3
    CALL_RasterPos2dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d413 2
a414 1
void __glXDisp_RasterPos2fv(GLbyte * pc)
d416 2
a417 3
    CALL_RasterPos2fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d420 2
a421 1
void __glXDisp_RasterPos2iv(GLbyte * pc)
d423 2
a424 3
    CALL_RasterPos2iv( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d427 2
a428 1
void __glXDisp_RasterPos2sv(GLbyte * pc)
d430 2
a431 3
    CALL_RasterPos2sv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d434 2
a435 1
void __glXDisp_RasterPos3dv(GLbyte * pc)
d438 2
a439 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d444 2
a445 3
    CALL_RasterPos3dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d448 2
a449 1
void __glXDisp_RasterPos3fv(GLbyte * pc)
d451 2
a452 3
    CALL_RasterPos3fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d455 2
a456 1
void __glXDisp_RasterPos3iv(GLbyte * pc)
d458 2
a459 3
    CALL_RasterPos3iv( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d462 2
a463 1
void __glXDisp_RasterPos3sv(GLbyte * pc)
d465 2
a466 3
    CALL_RasterPos3sv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d469 2
a470 1
void __glXDisp_RasterPos4dv(GLbyte * pc)
d473 2
a474 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 32);
d479 2
a480 3
    CALL_RasterPos4dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d483 2
a484 1
void __glXDisp_RasterPos4fv(GLbyte * pc)
d486 2
a487 3
    CALL_RasterPos4fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d490 2
a491 1
void __glXDisp_RasterPos4iv(GLbyte * pc)
d493 2
a494 3
    CALL_RasterPos4iv( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d497 2
a498 1
void __glXDisp_RasterPos4sv(GLbyte * pc)
d500 2
a501 3
    CALL_RasterPos4sv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d504 2
a505 1
void __glXDisp_Rectdv(GLbyte * pc)
d508 2
a509 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 32);
d514 3
a516 4
    CALL_Rectdv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0),
         (const GLdouble *)(pc + 16)
    ) );
d519 2
a520 1
void __glXDisp_Rectfv(GLbyte * pc)
d522 3
a524 4
    CALL_Rectfv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0),
         (const GLfloat *)(pc +  8)
    ) );
d527 2
a528 1
void __glXDisp_Rectiv(GLbyte * pc)
d530 3
a532 4
    CALL_Rectiv( GET_DISPATCH(), (
         (const GLint *)(pc +  0),
         (const GLint *)(pc +  8)
    ) );
d535 2
a536 1
void __glXDisp_Rectsv(GLbyte * pc)
d538 3
a540 4
    CALL_Rectsv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0),
         (const GLshort *)(pc +  4)
    ) );
d543 2
a544 1
void __glXDisp_TexCoord1dv(GLbyte * pc)
d547 2
a548 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 8);
d553 2
a554 3
    CALL_TexCoord1dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d557 2
a558 1
void __glXDisp_TexCoord1fv(GLbyte * pc)
d560 2
a561 3
    CALL_TexCoord1fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d564 2
a565 1
void __glXDisp_TexCoord1iv(GLbyte * pc)
d567 2
a568 3
    CALL_TexCoord1iv( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d571 2
a572 1
void __glXDisp_TexCoord1sv(GLbyte * pc)
d574 2
a575 3
    CALL_TexCoord1sv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d578 2
a579 1
void __glXDisp_TexCoord2dv(GLbyte * pc)
d582 2
a583 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 16);
d588 2
a589 3
    CALL_TexCoord2dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d592 2
a593 1
void __glXDisp_TexCoord2fv(GLbyte * pc)
d595 2
a596 3
    CALL_TexCoord2fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d599 2
a600 1
void __glXDisp_TexCoord2iv(GLbyte * pc)
d602 2
a603 3
    CALL_TexCoord2iv( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d606 2
a607 1
void __glXDisp_TexCoord2sv(GLbyte * pc)
d609 2
a610 3
    CALL_TexCoord2sv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d613 2
a614 1
void __glXDisp_TexCoord3dv(GLbyte * pc)
d617 2
a618 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d623 2
a624 3
    CALL_TexCoord3dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d627 2
a628 1
void __glXDisp_TexCoord3fv(GLbyte * pc)
d630 2
a631 3
    CALL_TexCoord3fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d634 2
a635 1
void __glXDisp_TexCoord3iv(GLbyte * pc)
d637 2
a638 3
    CALL_TexCoord3iv( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d641 2
a642 1
void __glXDisp_TexCoord3sv(GLbyte * pc)
d644 2
a645 3
    CALL_TexCoord3sv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d648 2
a649 1
void __glXDisp_TexCoord4dv(GLbyte * pc)
d652 2
a653 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 32);
d658 2
a659 3
    CALL_TexCoord4dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d662 2
a663 1
void __glXDisp_TexCoord4fv(GLbyte * pc)
d665 2
a666 3
    CALL_TexCoord4fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d669 2
a670 1
void __glXDisp_TexCoord4iv(GLbyte * pc)
d672 2
a673 3
    CALL_TexCoord4iv( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d676 2
a677 1
void __glXDisp_TexCoord4sv(GLbyte * pc)
d679 2
a680 3
    CALL_TexCoord4sv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d683 2
a684 1
void __glXDisp_Vertex2dv(GLbyte * pc)
d687 2
a688 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 16);
d693 2
a694 3
    CALL_Vertex2dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d697 2
a698 1
void __glXDisp_Vertex2fv(GLbyte * pc)
d700 2
a701 3
    CALL_Vertex2fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d704 2
a705 1
void __glXDisp_Vertex2iv(GLbyte * pc)
d707 2
a708 3
    CALL_Vertex2iv( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d711 2
a712 1
void __glXDisp_Vertex2sv(GLbyte * pc)
d714 2
a715 3
    CALL_Vertex2sv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d718 2
a719 1
void __glXDisp_Vertex3dv(GLbyte * pc)
d722 2
a723 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d728 2
a729 3
    CALL_Vertex3dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d732 2
a733 1
void __glXDisp_Vertex3fv(GLbyte * pc)
d735 2
a736 3
    CALL_Vertex3fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d739 2
a740 1
void __glXDisp_Vertex3iv(GLbyte * pc)
d742 2
a743 3
    CALL_Vertex3iv( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d746 2
a747 1
void __glXDisp_Vertex3sv(GLbyte * pc)
d749 2
a750 3
    CALL_Vertex3sv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d753 2
a754 1
void __glXDisp_Vertex4dv(GLbyte * pc)
d757 2
a758 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 32);
d763 2
a764 3
    CALL_Vertex4dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d767 2
a768 1
void __glXDisp_Vertex4fv(GLbyte * pc)
d770 2
a771 3
    CALL_Vertex4fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d774 2
a775 1
void __glXDisp_Vertex4iv(GLbyte * pc)
d777 2
a778 3
    CALL_Vertex4iv( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d781 2
a782 1
void __glXDisp_Vertex4sv(GLbyte * pc)
d784 2
a785 3
    CALL_Vertex4sv( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d788 2
a789 1
void __glXDisp_ClipPlane(GLbyte * pc)
d792 2
a793 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 36);
d798 3
a800 4
    CALL_ClipPlane( GET_DISPATCH(), (
        *(GLenum   *)(pc + 32),
         (const GLdouble *)(pc +  0)
    ) );
d803 2
a804 1
void __glXDisp_ColorMaterial(GLbyte * pc)
d806 3
a808 4
    CALL_ColorMaterial( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4)
    ) );
d811 2
a812 1
void __glXDisp_CullFace(GLbyte * pc)
d814 2
a815 3
    CALL_CullFace( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d818 2
a819 1
void __glXDisp_Fogf(GLbyte * pc)
d821 2
a822 4
    CALL_Fogf( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLfloat  *)(pc +  4)
    ) );
d825 2
a826 1
void __glXDisp_Fogfv(GLbyte * pc)
d828 2
a829 2
    const GLenum pname = *(GLenum   *)(pc +  0);
    const GLfloat * params;
d833 1
a833 4
    CALL_Fogfv( GET_DISPATCH(), (
        pname,
        params
    ) );
d836 2
a837 1
void __glXDisp_Fogi(GLbyte * pc)
d839 2
a840 4
    CALL_Fogi( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4)
    ) );
d843 2
a844 1
void __glXDisp_Fogiv(GLbyte * pc)
d846 2
a847 2
    const GLenum pname = *(GLenum   *)(pc +  0);
    const GLint * params;
d851 1
a851 4
    CALL_Fogiv( GET_DISPATCH(), (
        pname,
        params
    ) );
d854 2
a855 1
void __glXDisp_FrontFace(GLbyte * pc)
d857 2
a858 3
    CALL_FrontFace( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d861 2
a862 1
void __glXDisp_Hint(GLbyte * pc)
d864 2
a865 4
    CALL_Hint( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4)
    ) );
d868 2
a869 1
void __glXDisp_Lightf(GLbyte * pc)
d871 3
a873 5
    CALL_Lightf( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLfloat  *)(pc +  8)
    ) );
d876 2
a877 1
void __glXDisp_Lightfv(GLbyte * pc)
d879 2
a880 2
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLfloat * params;
d884 1
a884 5
    CALL_Lightfv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
d887 2
a888 1
void __glXDisp_Lighti(GLbyte * pc)
d890 3
a892 5
    CALL_Lighti( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLint    *)(pc +  8)
    ) );
d895 2
a896 1
void __glXDisp_Lightiv(GLbyte * pc)
d898 2
a899 2
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLint * params;
d903 1
a903 5
    CALL_Lightiv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
d906 2
a907 1
void __glXDisp_LightModelf(GLbyte * pc)
d909 3
a911 4
    CALL_LightModelf( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLfloat  *)(pc +  4)
    ) );
d914 2
a915 1
void __glXDisp_LightModelfv(GLbyte * pc)
d917 2
a918 2
    const GLenum pname = *(GLenum   *)(pc +  0);
    const GLfloat * params;
d922 1
a922 4
    CALL_LightModelfv( GET_DISPATCH(), (
        pname,
        params
    ) );
d925 2
a926 1
void __glXDisp_LightModeli(GLbyte * pc)
d928 2
a929 4
    CALL_LightModeli( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4)
    ) );
d932 2
a933 1
void __glXDisp_LightModeliv(GLbyte * pc)
d935 2
a936 2
    const GLenum pname = *(GLenum   *)(pc +  0);
    const GLint * params;
d940 1
a940 4
    CALL_LightModeliv( GET_DISPATCH(), (
        pname,
        params
    ) );
d943 2
a944 1
void __glXDisp_LineStipple(GLbyte * pc)
d946 3
a948 4
    CALL_LineStipple( GET_DISPATCH(), (
        *(GLint    *)(pc +  0),
        *(GLushort *)(pc +  4)
    ) );
d951 2
a952 1
void __glXDisp_LineWidth(GLbyte * pc)
d954 2
a955 3
    CALL_LineWidth( GET_DISPATCH(), (
        *(GLfloat  *)(pc +  0)
    ) );
d958 2
a959 1
void __glXDisp_Materialf(GLbyte * pc)
d961 3
a963 5
    CALL_Materialf( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLfloat  *)(pc +  8)
    ) );
d966 2
a967 1
void __glXDisp_Materialfv(GLbyte * pc)
d969 2
a970 2
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLfloat * params;
d974 1
a974 5
    CALL_Materialfv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
d977 2
a978 1
void __glXDisp_Materiali(GLbyte * pc)
d980 3
a982 5
    CALL_Materiali( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLint    *)(pc +  8)
    ) );
d985 2
a986 1
void __glXDisp_Materialiv(GLbyte * pc)
d988 2
a989 2
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLint * params;
d993 1
a993 5
    CALL_Materialiv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
d996 2
a997 1
void __glXDisp_PointSize(GLbyte * pc)
d999 2
a1000 3
    CALL_PointSize( GET_DISPATCH(), (
        *(GLfloat  *)(pc +  0)
    ) );
d1003 2
a1004 1
void __glXDisp_PolygonMode(GLbyte * pc)
d1006 2
a1007 4
    CALL_PolygonMode( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4)
    ) );
d1010 2
a1011 1
void __glXDisp_PolygonStipple(GLbyte * pc)
d1013 2
a1014 2
    const GLubyte * const mask = (const GLubyte *) (pc + 20);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
d1016 9
a1024 5
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) hdr->rowLength) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) hdr->skipRows) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) hdr->skipPixels) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) hdr->alignment) );
d1026 1
a1026 3
    CALL_PolygonStipple( GET_DISPATCH(), (
        mask
    ) );
d1029 2
a1030 1
void __glXDisp_Scissor(GLbyte * pc)
d1032 4
a1035 6
    CALL_Scissor( GET_DISPATCH(), (
        *(GLint    *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLsizei  *)(pc +  8),
        *(GLsizei  *)(pc + 12)
    ) );
d1038 2
a1039 1
void __glXDisp_ShadeModel(GLbyte * pc)
d1041 2
a1042 3
    CALL_ShadeModel( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d1045 2
a1046 1
void __glXDisp_TexParameterf(GLbyte * pc)
d1048 4
a1051 5
    CALL_TexParameterf( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLfloat  *)(pc +  8)
    ) );
d1054 2
a1055 1
void __glXDisp_TexParameterfv(GLbyte * pc)
d1057 2
a1058 2
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLfloat * params;
d1062 1
a1062 5
    CALL_TexParameterfv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
d1065 2
a1066 1
void __glXDisp_TexParameteri(GLbyte * pc)
d1068 4
a1071 5
    CALL_TexParameteri( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLint    *)(pc +  8)
    ) );
d1074 2
a1075 1
void __glXDisp_TexParameteriv(GLbyte * pc)
d1077 2
a1078 2
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLint * params;
d1082 62
a1143 63
    CALL_TexParameteriv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
}

void __glXDisp_TexImage1D(GLbyte * pc)
{
    const GLvoid * const pixels = (const GLvoid *) (pc + 52);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);

    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) hdr->rowLength) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) hdr->skipRows) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) hdr->skipPixels) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) hdr->alignment) );

    CALL_TexImage1D( GET_DISPATCH(), (
        *(GLenum   *)(pc + 20),
        *(GLint    *)(pc + 24),
        *(GLint    *)(pc + 28),
        *(GLsizei  *)(pc + 32),
        *(GLint    *)(pc + 40),
        *(GLenum   *)(pc + 44),
        *(GLenum   *)(pc + 48),
        pixels
    ) );
}

void __glXDisp_TexImage2D(GLbyte * pc)
{
    const GLvoid * const pixels = (const GLvoid *) (pc + 52);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);

    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) hdr->rowLength) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) hdr->skipRows) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) hdr->skipPixels) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) hdr->alignment) );

    CALL_TexImage2D( GET_DISPATCH(), (
        *(GLenum   *)(pc + 20),
        *(GLint    *)(pc + 24),
        *(GLint    *)(pc + 28),
        *(GLsizei  *)(pc + 32),
        *(GLsizei  *)(pc + 36),
        *(GLint    *)(pc + 40),
        *(GLenum   *)(pc + 44),
        *(GLenum   *)(pc + 48),
        pixels
    ) );
}

void __glXDisp_TexEnvf(GLbyte * pc)
{
    CALL_TexEnvf( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLfloat  *)(pc +  8)
    ) );
d1146 2
a1147 1
void __glXDisp_TexEnvfv(GLbyte * pc)
d1149 2
a1150 2
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLfloat * params;
d1154 1
a1154 5
    CALL_TexEnvfv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
d1157 2
a1158 1
void __glXDisp_TexEnvi(GLbyte * pc)
d1160 3
a1162 5
    CALL_TexEnvi( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLint    *)(pc +  8)
    ) );
d1165 2
a1166 1
void __glXDisp_TexEnviv(GLbyte * pc)
d1168 2
a1169 2
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLint * params;
d1173 1
a1173 5
    CALL_TexEnviv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
d1176 2
a1177 1
void __glXDisp_TexGend(GLbyte * pc)
d1180 2
a1181 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 16);
d1186 3
a1188 5
    CALL_TexGend( GET_DISPATCH(), (
        *(GLenum   *)(pc +  8),
        *(GLenum   *)(pc + 12),
        *(GLdouble *)(pc +  0)
    ) );
d1191 2
a1192 1
void __glXDisp_TexGendv(GLbyte * pc)
d1194 2
a1195 2
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLdouble * params;
d1200 3
a1202 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, cmdlen);
d1209 1
a1209 5
    CALL_TexGendv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
d1212 2
a1213 1
void __glXDisp_TexGenf(GLbyte * pc)
d1215 3
a1217 5
    CALL_TexGenf( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLfloat  *)(pc +  8)
    ) );
d1220 2
a1221 1
void __glXDisp_TexGenfv(GLbyte * pc)
d1223 2
a1224 2
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLfloat * params;
d1228 1
a1228 5
    CALL_TexGenfv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
d1231 2
a1232 1
void __glXDisp_TexGeni(GLbyte * pc)
d1234 3
a1236 5
    CALL_TexGeni( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLint    *)(pc +  8)
    ) );
d1239 2
a1240 1
void __glXDisp_TexGeniv(GLbyte * pc)
d1242 2
a1243 2
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLint * params;
d1247 1
a1247 5
    CALL_TexGeniv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
d1250 2
a1251 1
void __glXDisp_InitNames(GLbyte * pc)
d1253 1
a1253 1
    CALL_InitNames( GET_DISPATCH(), () );
d1256 2
a1257 1
void __glXDisp_LoadName(GLbyte * pc)
d1259 2
a1260 3
    CALL_LoadName( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0)
    ) );
d1263 2
a1264 1
void __glXDisp_PassThrough(GLbyte * pc)
d1266 2
a1267 3
    CALL_PassThrough( GET_DISPATCH(), (
        *(GLfloat  *)(pc +  0)
    ) );
d1270 2
a1271 1
void __glXDisp_PopName(GLbyte * pc)
d1273 1
a1273 1
    CALL_PopName( GET_DISPATCH(), () );
d1276 2
a1277 1
void __glXDisp_PushName(GLbyte * pc)
d1279 2
a1280 3
    CALL_PushName( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0)
    ) );
d1283 2
a1284 1
void __glXDisp_DrawBuffer(GLbyte * pc)
d1286 2
a1287 3
    CALL_DrawBuffer( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d1290 2
a1291 1
void __glXDisp_Clear(GLbyte * pc)
d1293 2
a1294 3
    CALL_Clear( GET_DISPATCH(), (
        *(GLbitfield *)(pc +  0)
    ) );
d1297 2
a1298 1
void __glXDisp_ClearAccum(GLbyte * pc)
d1300 5
a1304 6
    CALL_ClearAccum( GET_DISPATCH(), (
        *(GLfloat  *)(pc +  0),
        *(GLfloat  *)(pc +  4),
        *(GLfloat  *)(pc +  8),
        *(GLfloat  *)(pc + 12)
    ) );
d1307 2
a1308 1
void __glXDisp_ClearIndex(GLbyte * pc)
d1310 2
a1311 3
    CALL_ClearIndex( GET_DISPATCH(), (
        *(GLfloat  *)(pc +  0)
    ) );
d1314 2
a1315 1
void __glXDisp_ClearColor(GLbyte * pc)
d1317 5
a1321 6
    CALL_ClearColor( GET_DISPATCH(), (
        *(GLclampf *)(pc +  0),
        *(GLclampf *)(pc +  4),
        *(GLclampf *)(pc +  8),
        *(GLclampf *)(pc + 12)
    ) );
d1324 2
a1325 1
void __glXDisp_ClearStencil(GLbyte * pc)
d1327 2
a1328 3
    CALL_ClearStencil( GET_DISPATCH(), (
        *(GLint    *)(pc +  0)
    ) );
d1331 2
a1332 1
void __glXDisp_ClearDepth(GLbyte * pc)
d1335 2
a1336 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 8);
d1341 2
a1342 3
    CALL_ClearDepth( GET_DISPATCH(), (
        *(GLclampd *)(pc +  0)
    ) );
d1345 2
a1346 1
void __glXDisp_StencilMask(GLbyte * pc)
d1348 2
a1349 3
    CALL_StencilMask( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0)
    ) );
d1352 2
a1353 1
void __glXDisp_ColorMask(GLbyte * pc)
d1355 5
a1359 6
    CALL_ColorMask( GET_DISPATCH(), (
        *(GLboolean *)(pc +  0),
        *(GLboolean *)(pc +  1),
        *(GLboolean *)(pc +  2),
        *(GLboolean *)(pc +  3)
    ) );
d1362 2
a1363 1
void __glXDisp_DepthMask(GLbyte * pc)
d1365 2
a1366 3
    CALL_DepthMask( GET_DISPATCH(), (
        *(GLboolean *)(pc +  0)
    ) );
d1369 2
a1370 1
void __glXDisp_IndexMask(GLbyte * pc)
d1372 2
a1373 3
    CALL_IndexMask( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0)
    ) );
d1376 2
a1377 1
void __glXDisp_Accum(GLbyte * pc)
d1379 2
a1380 4
    CALL_Accum( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLfloat  *)(pc +  4)
    ) );
d1383 2
a1384 1
void __glXDisp_Disable(GLbyte * pc)
d1386 2
a1387 3
    CALL_Disable( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d1390 2
a1391 1
void __glXDisp_Enable(GLbyte * pc)
d1393 2
a1394 3
    CALL_Enable( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d1397 2
a1398 1
void __glXDisp_PopAttrib(GLbyte * pc)
d1400 1
a1400 1
    CALL_PopAttrib( GET_DISPATCH(), () );
d1403 2
a1404 1
void __glXDisp_PushAttrib(GLbyte * pc)
d1406 2
a1407 3
    CALL_PushAttrib( GET_DISPATCH(), (
        *(GLbitfield *)(pc +  0)
    ) );
d1410 2
a1411 1
void __glXDisp_MapGrid1d(GLbyte * pc)
d1414 2
a1415 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 20);
d1420 4
a1423 5
    CALL_MapGrid1d( GET_DISPATCH(), (
        *(GLint    *)(pc + 16),
        *(GLdouble *)(pc +  0),
        *(GLdouble *)(pc +  8)
    ) );
d1426 2
a1427 1
void __glXDisp_MapGrid1f(GLbyte * pc)
d1429 3
a1431 5
    CALL_MapGrid1f( GET_DISPATCH(), (
        *(GLint    *)(pc +  0),
        *(GLfloat  *)(pc +  4),
        *(GLfloat  *)(pc +  8)
    ) );
d1434 2
a1435 1
void __glXDisp_MapGrid2d(GLbyte * pc)
d1438 2
a1439 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 40);
d1444 7
a1450 8
    CALL_MapGrid2d( GET_DISPATCH(), (
        *(GLint    *)(pc + 32),
        *(GLdouble *)(pc +  0),
        *(GLdouble *)(pc +  8),
        *(GLint    *)(pc + 36),
        *(GLdouble *)(pc + 16),
        *(GLdouble *)(pc + 24)
    ) );
d1453 2
a1454 1
void __glXDisp_MapGrid2f(GLbyte * pc)
d1456 7
a1462 8
    CALL_MapGrid2f( GET_DISPATCH(), (
        *(GLint    *)(pc +  0),
        *(GLfloat  *)(pc +  4),
        *(GLfloat  *)(pc +  8),
        *(GLint    *)(pc + 12),
        *(GLfloat  *)(pc + 16),
        *(GLfloat  *)(pc + 20)
    ) );
d1465 2
a1466 1
void __glXDisp_EvalCoord1dv(GLbyte * pc)
d1469 2
a1470 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 8);
d1475 2
a1476 3
    CALL_EvalCoord1dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d1479 2
a1480 1
void __glXDisp_EvalCoord1fv(GLbyte * pc)
d1482 2
a1483 3
    CALL_EvalCoord1fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d1486 2
a1487 1
void __glXDisp_EvalCoord2dv(GLbyte * pc)
d1490 2
a1491 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 16);
d1496 2
a1497 3
    CALL_EvalCoord2dv( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d1500 2
a1501 1
void __glXDisp_EvalCoord2fv(GLbyte * pc)
d1503 2
a1504 3
    CALL_EvalCoord2fv( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d1507 2
a1508 1
void __glXDisp_EvalMesh1(GLbyte * pc)
d1510 3
a1512 5
    CALL_EvalMesh1( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLint    *)(pc +  8)
    ) );
d1515 2
a1516 1
void __glXDisp_EvalPoint1(GLbyte * pc)
d1518 2
a1519 3
    CALL_EvalPoint1( GET_DISPATCH(), (
        *(GLint    *)(pc +  0)
    ) );
d1522 2
a1523 1
void __glXDisp_EvalMesh2(GLbyte * pc)
d1525 5
a1529 7
    CALL_EvalMesh2( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLint    *)(pc +  8),
        *(GLint    *)(pc + 12),
        *(GLint    *)(pc + 16)
    ) );
d1532 2
a1533 1
void __glXDisp_EvalPoint2(GLbyte * pc)
d1535 2
a1536 4
    CALL_EvalPoint2( GET_DISPATCH(), (
        *(GLint    *)(pc +  0),
        *(GLint    *)(pc +  4)
    ) );
d1539 2
a1540 1
void __glXDisp_AlphaFunc(GLbyte * pc)
d1542 2
a1543 4
    CALL_AlphaFunc( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLclampf *)(pc +  4)
    ) );
d1546 2
a1547 1
void __glXDisp_BlendFunc(GLbyte * pc)
d1549 2
a1550 4
    CALL_BlendFunc( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4)
    ) );
d1553 2
a1554 1
void __glXDisp_LogicOp(GLbyte * pc)
d1556 2
a1557 3
    CALL_LogicOp( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d1560 2
a1561 1
void __glXDisp_StencilFunc(GLbyte * pc)
d1563 3
a1565 5
    CALL_StencilFunc( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLuint   *)(pc +  8)
    ) );
d1568 2
a1569 1
void __glXDisp_StencilOp(GLbyte * pc)
d1571 3
a1573 5
    CALL_StencilOp( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLenum   *)(pc +  8)
    ) );
d1576 2
a1577 1
void __glXDisp_DepthFunc(GLbyte * pc)
d1579 2
a1580 3
    CALL_DepthFunc( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d1583 2
a1584 1
void __glXDisp_PixelZoom(GLbyte * pc)
d1586 2
a1587 4
    CALL_PixelZoom( GET_DISPATCH(), (
        *(GLfloat  *)(pc +  0),
        *(GLfloat  *)(pc +  4)
    ) );
d1590 2
a1591 1
void __glXDisp_PixelTransferf(GLbyte * pc)
d1593 3
a1595 4
    CALL_PixelTransferf( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLfloat  *)(pc +  4)
    ) );
d1598 2
a1599 1
void __glXDisp_PixelTransferi(GLbyte * pc)
d1601 3
a1603 4
    CALL_PixelTransferi( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4)
    ) );
d1606 2
a1607 1
int __glXDisp_PixelStoref(__GLXclientState *cl, GLbyte *pc)
d1609 1
a1609 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1611 1
a1611 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d1614 4
a1617 5
    if ( cx != NULL ) {
        CALL_PixelStoref( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            *(GLfloat  *)(pc +  4)
        ) );
d1624 2
a1625 1
int __glXDisp_PixelStorei(__GLXclientState *cl, GLbyte *pc)
d1627 1
a1627 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1629 1
a1629 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d1632 4
a1635 5
    if ( cx != NULL ) {
        CALL_PixelStorei( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            *(GLint    *)(pc +  4)
        ) );
d1642 2
a1643 1
void __glXDisp_PixelMapfv(GLbyte * pc)
d1645 1
a1645 1
    const GLsizei mapsize = *(GLsizei  *)(pc +  4);
d1647 3
a1649 5
    CALL_PixelMapfv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        mapsize,
         (const GLfloat *)(pc +  8)
    ) );
d1652 2
a1653 1
void __glXDisp_PixelMapuiv(GLbyte * pc)
d1655 1
a1655 1
    const GLsizei mapsize = *(GLsizei  *)(pc +  4);
d1657 3
a1659 5
    CALL_PixelMapuiv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        mapsize,
         (const GLuint *)(pc +  8)
    ) );
d1662 2
a1663 1
void __glXDisp_PixelMapusv(GLbyte * pc)
d1665 1
a1665 1
    const GLsizei mapsize = *(GLsizei  *)(pc +  4);
d1667 3
a1669 5
    CALL_PixelMapusv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        mapsize,
         (const GLushort *)(pc +  8)
    ) );
d1672 2
a1673 1
void __glXDisp_ReadBuffer(GLbyte * pc)
d1675 2
a1676 3
    CALL_ReadBuffer( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d1679 2
a1680 1
void __glXDisp_CopyPixels(GLbyte * pc)
d1682 6
a1687 7
    CALL_CopyPixels( GET_DISPATCH(), (
        *(GLint    *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLsizei  *)(pc +  8),
        *(GLsizei  *)(pc + 12),
        *(GLenum   *)(pc + 16)
    ) );
d1690 2
a1691 1
void __glXDisp_DrawPixels(GLbyte * pc)
d1693 2
a1694 2
    const GLvoid * const pixels = (const GLvoid *) (pc + 36);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
d1696 10
a1705 6
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) hdr->rowLength) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) hdr->skipRows) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) hdr->skipPixels) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) hdr->alignment) );
d1707 4
a1710 7
    CALL_DrawPixels( GET_DISPATCH(), (
        *(GLsizei  *)(pc + 20),
        *(GLsizei  *)(pc + 24),
        *(GLenum   *)(pc + 28),
        *(GLenum   *)(pc + 32),
        pixels
    ) );
d1713 2
a1714 1
int __glXDisp_GetBooleanv(__GLXclientState *cl, GLbyte *pc)
d1716 1
a1716 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1718 1
a1718 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d1721 2
a1722 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  0);
d1726 3
a1728 1
        GLboolean * params = __glXGetAnswerBuffer(cl, compsize, answerBuffer, sizeof(answerBuffer), 1);
d1730 2
a1731 1
        if (params == NULL) return BadAlloc;
d1734 1
a1734 4
        CALL_GetBooleanv( GET_DISPATCH(), (
            pname,
            params
        ) );
d1742 2
a1743 1
int __glXDisp_GetClipPlane(__GLXclientState *cl, GLbyte *pc)
d1745 1
a1745 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1747 1
a1747 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d1750 1
a1750 1
    if ( cx != NULL ) {
d1752 2
a1753 4
        CALL_GetClipPlane( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            equation
        ) );
d1761 2
a1762 1
int __glXDisp_GetDoublev(__GLXclientState *cl, GLbyte *pc)
d1764 1
a1764 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1766 1
a1766 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d1769 2
a1770 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  0);
d1774 3
a1776 1
        GLdouble * params = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);
d1778 2
a1779 1
        if (params == NULL) return BadAlloc;
d1782 1
a1782 4
        CALL_GetDoublev( GET_DISPATCH(), (
            pname,
            params
        ) );
d1790 2
a1791 1
int __glXDisp_GetError(__GLXclientState *cl, GLbyte *pc)
d1793 1
a1793 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1795 1
a1795 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d1798 1
a1798 1
    if ( cx != NULL ) {
d1800 2
a1801 1
        retval = CALL_GetError( GET_DISPATCH(), () );
d1809 2
a1810 1
int __glXDisp_GetFloatv(__GLXclientState *cl, GLbyte *pc)
d1812 1
a1812 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1814 1
a1814 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d1817 2
a1818 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  0);
d1822 3
a1824 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d1826 2
a1827 1
        if (params == NULL) return BadAlloc;
d1830 1
a1830 4
        CALL_GetFloatv( GET_DISPATCH(), (
            pname,
            params
        ) );
d1838 2
a1839 1
int __glXDisp_GetIntegerv(__GLXclientState *cl, GLbyte *pc)
d1841 1
a1841 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1843 1
a1843 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d1846 2
a1847 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  0);
d1851 3
a1853 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d1855 2
a1856 1
        if (params == NULL) return BadAlloc;
d1859 1
a1859 4
        CALL_GetIntegerv( GET_DISPATCH(), (
            pname,
            params
        ) );
d1867 2
a1868 1
int __glXDisp_GetLightfv(__GLXclientState *cl, GLbyte *pc)
d1870 1
a1870 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1872 1
a1872 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d1875 2
a1876 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d1880 3
a1882 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d1884 2
a1885 1
        if (params == NULL) return BadAlloc;
d1888 1
a1888 5
        CALL_GetLightfv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d1896 2
a1897 1
int __glXDisp_GetLightiv(__GLXclientState *cl, GLbyte *pc)
d1899 1
a1899 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1901 1
a1901 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d1904 2
a1905 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d1909 3
a1911 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d1913 2
a1914 1
        if (params == NULL) return BadAlloc;
d1917 1
a1917 5
        CALL_GetLightiv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d1925 2
a1926 1
int __glXDisp_GetMapdv(__GLXclientState *cl, GLbyte *pc)
d1928 1
a1928 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1930 1
a1930 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d1933 3
a1935 3
    if ( cx != NULL ) {
        const GLenum target = *(GLenum   *)(pc +  0);
        const GLenum query = *(GLenum   *)(pc +  4);
d1937 1
a1937 1
        const GLuint compsize = __glGetMapdv_size(target,query);
d1939 3
a1941 1
        GLdouble * v = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);
d1943 2
a1944 1
        if (v == NULL) return BadAlloc;
d1947 1
a1947 5
        CALL_GetMapdv( GET_DISPATCH(), (
            target,
            query,
            v
        ) );
d1955 2
a1956 1
int __glXDisp_GetMapfv(__GLXclientState *cl, GLbyte *pc)
d1958 1
a1958 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1960 1
a1960 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d1963 3
a1965 3
    if ( cx != NULL ) {
        const GLenum target = *(GLenum   *)(pc +  0);
        const GLenum query = *(GLenum   *)(pc +  4);
d1967 1
a1967 1
        const GLuint compsize = __glGetMapfv_size(target,query);
d1969 3
a1971 1
        GLfloat * v = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d1973 2
a1974 1
        if (v == NULL) return BadAlloc;
d1977 1
a1977 5
        CALL_GetMapfv( GET_DISPATCH(), (
            target,
            query,
            v
        ) );
d1985 2
a1986 1
int __glXDisp_GetMapiv(__GLXclientState *cl, GLbyte *pc)
d1988 1
a1988 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d1990 1
a1990 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d1993 3
a1995 3
    if ( cx != NULL ) {
        const GLenum target = *(GLenum   *)(pc +  0);
        const GLenum query = *(GLenum   *)(pc +  4);
d1997 1
a1997 1
        const GLuint compsize = __glGetMapiv_size(target,query);
d1999 3
a2001 1
        GLint * v = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2003 2
a2004 1
        if (v == NULL) return BadAlloc;
d2007 1
a2007 5
        CALL_GetMapiv( GET_DISPATCH(), (
            target,
            query,
            v
        ) );
d2015 2
a2016 1
int __glXDisp_GetMaterialfv(__GLXclientState *cl, GLbyte *pc)
d2018 1
a2018 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2020 1
a2020 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2023 2
a2024 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d2028 3
a2030 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2032 2
a2033 1
        if (params == NULL) return BadAlloc;
d2036 2
a2037 5
        CALL_GetMaterialfv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d2045 2
a2046 1
int __glXDisp_GetMaterialiv(__GLXclientState *cl, GLbyte *pc)
d2048 1
a2048 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2050 1
a2050 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2053 2
a2054 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d2058 3
a2060 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2062 2
a2063 1
        if (params == NULL) return BadAlloc;
d2066 2
a2067 5
        CALL_GetMaterialiv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d2075 2
a2076 1
int __glXDisp_GetPixelMapfv(__GLXclientState *cl, GLbyte *pc)
d2078 1
a2078 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2080 1
a2080 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2083 2
a2084 2
    if ( cx != NULL ) {
        const GLenum map = *(GLenum   *)(pc +  0);
d2088 3
a2090 1
        GLfloat * values = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2092 2
a2093 1
        if (values == NULL) return BadAlloc;
d2096 1
a2096 4
        CALL_GetPixelMapfv( GET_DISPATCH(), (
            map,
            values
        ) );
d2104 2
a2105 1
int __glXDisp_GetPixelMapuiv(__GLXclientState *cl, GLbyte *pc)
d2107 1
a2107 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2109 1
a2109 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2112 2
a2113 2
    if ( cx != NULL ) {
        const GLenum map = *(GLenum   *)(pc +  0);
d2117 3
a2119 1
        GLuint * values = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2121 2
a2122 1
        if (values == NULL) return BadAlloc;
d2125 1
a2125 4
        CALL_GetPixelMapuiv( GET_DISPATCH(), (
            map,
            values
        ) );
d2133 2
a2134 1
int __glXDisp_GetPixelMapusv(__GLXclientState *cl, GLbyte *pc)
d2136 1
a2136 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2138 1
a2138 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2141 2
a2142 2
    if ( cx != NULL ) {
        const GLenum map = *(GLenum   *)(pc +  0);
d2146 3
a2148 1
        GLushort * values = __glXGetAnswerBuffer(cl, compsize * 2, answerBuffer, sizeof(answerBuffer), 2);
d2150 2
a2151 1
        if (values == NULL) return BadAlloc;
d2154 1
a2154 4
        CALL_GetPixelMapusv( GET_DISPATCH(), (
            map,
            values
        ) );
d2162 2
a2163 1
int __glXDisp_GetTexEnvfv(__GLXclientState *cl, GLbyte *pc)
d2165 1
a2165 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2167 1
a2167 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2170 2
a2171 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d2175 3
a2177 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2179 2
a2180 1
        if (params == NULL) return BadAlloc;
d2183 1
a2183 5
        CALL_GetTexEnvfv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d2191 2
a2192 1
int __glXDisp_GetTexEnviv(__GLXclientState *cl, GLbyte *pc)
d2194 1
a2194 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2196 1
a2196 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2199 2
a2200 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d2204 3
a2206 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2208 2
a2209 1
        if (params == NULL) return BadAlloc;
d2212 1
a2212 5
        CALL_GetTexEnviv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d2220 2
a2221 1
int __glXDisp_GetTexGendv(__GLXclientState *cl, GLbyte *pc)
d2223 1
a2223 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2225 1
a2225 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2228 2
a2229 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d2233 3
a2235 1
        GLdouble * params = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);
d2237 2
a2238 1
        if (params == NULL) return BadAlloc;
d2241 1
a2241 5
        CALL_GetTexGendv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d2249 2
a2250 1
int __glXDisp_GetTexGenfv(__GLXclientState *cl, GLbyte *pc)
d2252 1
a2252 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2254 1
a2254 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2257 2
a2258 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d2262 3
a2264 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2266 2
a2267 1
        if (params == NULL) return BadAlloc;
d2270 1
a2270 5
        CALL_GetTexGenfv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d2278 2
a2279 1
int __glXDisp_GetTexGeniv(__GLXclientState *cl, GLbyte *pc)
d2281 1
a2281 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2283 1
a2283 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2286 2
a2287 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d2291 3
a2293 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2295 2
a2296 1
        if (params == NULL) return BadAlloc;
d2299 1
a2299 5
        CALL_GetTexGeniv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d2307 2
a2308 1
int __glXDisp_GetTexParameterfv(__GLXclientState *cl, GLbyte *pc)
d2310 1
a2310 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2312 1
a2312 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2315 2
a2316 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d2320 3
a2322 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2324 2
a2325 1
        if (params == NULL) return BadAlloc;
d2328 2
a2329 5
        CALL_GetTexParameterfv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d2337 2
a2338 1
int __glXDisp_GetTexParameteriv(__GLXclientState *cl, GLbyte *pc)
d2340 1
a2340 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2342 1
a2342 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2345 2
a2346 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d2350 3
a2352 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2354 2
a2355 1
        if (params == NULL) return BadAlloc;
d2358 2
a2359 5
        CALL_GetTexParameteriv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d2367 2
a2368 1
int __glXDisp_GetTexLevelParameterfv(__GLXclientState *cl, GLbyte *pc)
d2370 1
a2370 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2372 1
a2372 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2375 2
a2376 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  8);
d2380 3
a2382 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2384 2
a2385 1
        if (params == NULL) return BadAlloc;
d2388 3
a2390 6
        CALL_GetTexLevelParameterfv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            *(GLint    *)(pc +  4),
            pname,
            params
        ) );
d2398 2
a2399 1
int __glXDisp_GetTexLevelParameteriv(__GLXclientState *cl, GLbyte *pc)
d2401 1
a2401 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2403 1
a2403 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2406 2
a2407 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  8);
d2411 3
a2413 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d2415 2
a2416 1
        if (params == NULL) return BadAlloc;
d2419 3
a2421 6
        CALL_GetTexLevelParameteriv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            *(GLint    *)(pc +  4),
            pname,
            params
        ) );
d2429 2
a2430 1
int __glXDisp_IsEnabled(__GLXclientState *cl, GLbyte *pc)
d2432 1
a2432 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2434 1
a2434 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2437 1
a2437 1
    if ( cx != NULL ) {
d2439 3
a2441 3
        retval = CALL_IsEnabled( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0)
        ) );
d2449 2
a2450 1
int __glXDisp_IsList(__GLXclientState *cl, GLbyte *pc)
d2452 1
a2452 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2454 1
a2454 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2457 1
a2457 1
    if ( cx != NULL ) {
d2459 3
a2461 3
        retval = CALL_IsList( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0)
        ) );
d2469 2
a2470 1
void __glXDisp_DepthRange(GLbyte * pc)
d2473 2
a2474 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 16);
d2479 3
a2481 4
    CALL_DepthRange( GET_DISPATCH(), (
        *(GLclampd *)(pc +  0),
        *(GLclampd *)(pc +  8)
    ) );
d2484 2
a2485 1
void __glXDisp_Frustum(GLbyte * pc)
d2488 2
a2489 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 48);
d2494 7
a2500 8
    CALL_Frustum( GET_DISPATCH(), (
        *(GLdouble *)(pc +  0),
        *(GLdouble *)(pc +  8),
        *(GLdouble *)(pc + 16),
        *(GLdouble *)(pc + 24),
        *(GLdouble *)(pc + 32),
        *(GLdouble *)(pc + 40)
    ) );
d2503 2
a2504 1
void __glXDisp_LoadIdentity(GLbyte * pc)
d2506 1
a2506 1
    CALL_LoadIdentity( GET_DISPATCH(), () );
d2509 2
a2510 1
void __glXDisp_LoadMatrixf(GLbyte * pc)
d2512 2
a2513 3
    CALL_LoadMatrixf( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d2516 2
a2517 1
void __glXDisp_LoadMatrixd(GLbyte * pc)
d2520 2
a2521 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 128);
d2526 2
a2527 3
    CALL_LoadMatrixd( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d2530 2
a2531 1
void __glXDisp_MatrixMode(GLbyte * pc)
d2533 2
a2534 3
    CALL_MatrixMode( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d2537 2
a2538 1
void __glXDisp_MultMatrixf(GLbyte * pc)
d2540 2
a2541 3
    CALL_MultMatrixf( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d2544 2
a2545 1
void __glXDisp_MultMatrixd(GLbyte * pc)
d2548 2
a2549 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 128);
d2554 2
a2555 3
    CALL_MultMatrixd( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d2558 2
a2559 1
void __glXDisp_Ortho(GLbyte * pc)
d2562 2
a2563 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 48);
d2568 6
a2573 8
    CALL_Ortho( GET_DISPATCH(), (
        *(GLdouble *)(pc +  0),
        *(GLdouble *)(pc +  8),
        *(GLdouble *)(pc + 16),
        *(GLdouble *)(pc + 24),
        *(GLdouble *)(pc + 32),
        *(GLdouble *)(pc + 40)
    ) );
d2576 2
a2577 1
void __glXDisp_PopMatrix(GLbyte * pc)
d2579 1
a2579 1
    CALL_PopMatrix( GET_DISPATCH(), () );
d2582 2
a2583 1
void __glXDisp_PushMatrix(GLbyte * pc)
d2585 1
a2585 1
    CALL_PushMatrix( GET_DISPATCH(), () );
d2588 2
a2589 1
void __glXDisp_Rotated(GLbyte * pc)
d2592 2
a2593 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 32);
d2598 5
a2602 6
    CALL_Rotated( GET_DISPATCH(), (
        *(GLdouble *)(pc +  0),
        *(GLdouble *)(pc +  8),
        *(GLdouble *)(pc + 16),
        *(GLdouble *)(pc + 24)
    ) );
d2605 2
a2606 1
void __glXDisp_Rotatef(GLbyte * pc)
d2608 4
a2611 6
    CALL_Rotatef( GET_DISPATCH(), (
        *(GLfloat  *)(pc +  0),
        *(GLfloat  *)(pc +  4),
        *(GLfloat  *)(pc +  8),
        *(GLfloat  *)(pc + 12)
    ) );
d2614 2
a2615 1
void __glXDisp_Scaled(GLbyte * pc)
d2618 2
a2619 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d2624 3
a2626 5
    CALL_Scaled( GET_DISPATCH(), (
        *(GLdouble *)(pc +  0),
        *(GLdouble *)(pc +  8),
        *(GLdouble *)(pc + 16)
    ) );
d2629 2
a2630 1
void __glXDisp_Scalef(GLbyte * pc)
d2632 3
a2634 5
    CALL_Scalef( GET_DISPATCH(), (
        *(GLfloat  *)(pc +  0),
        *(GLfloat  *)(pc +  4),
        *(GLfloat  *)(pc +  8)
    ) );
d2637 2
a2638 1
void __glXDisp_Translated(GLbyte * pc)
d2641 2
a2642 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d2647 4
a2650 5
    CALL_Translated( GET_DISPATCH(), (
        *(GLdouble *)(pc +  0),
        *(GLdouble *)(pc +  8),
        *(GLdouble *)(pc + 16)
    ) );
d2653 2
a2654 1
void __glXDisp_Translatef(GLbyte * pc)
d2656 4
a2659 5
    CALL_Translatef( GET_DISPATCH(), (
        *(GLfloat  *)(pc +  0),
        *(GLfloat  *)(pc +  4),
        *(GLfloat  *)(pc +  8)
    ) );
d2662 2
a2663 1
void __glXDisp_Viewport(GLbyte * pc)
d2665 4
a2668 6
    CALL_Viewport( GET_DISPATCH(), (
        *(GLint    *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLsizei  *)(pc +  8),
        *(GLsizei  *)(pc + 12)
    ) );
d2671 2
a2672 1
void __glXDisp_BindTexture(GLbyte * pc)
d2674 2
a2675 4
    CALL_BindTexture( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLuint   *)(pc +  4)
    ) );
d2678 2
a2679 1
void __glXDisp_Indexubv(GLbyte * pc)
d2681 2
a2682 3
    CALL_Indexubv( GET_DISPATCH(), (
         (const GLubyte *)(pc +  0)
    ) );
d2685 2
a2686 1
void __glXDisp_PolygonOffset(GLbyte * pc)
d2688 3
a2690 4
    CALL_PolygonOffset( GET_DISPATCH(), (
        *(GLfloat  *)(pc +  0),
        *(GLfloat  *)(pc +  4)
    ) );
d2693 2
a2694 1
int __glXDisp_AreTexturesResident(__GLXclientState *cl, GLbyte *pc)
d2696 1
a2696 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2698 1
a2698 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2701 2
a2702 2
    if ( cx != NULL ) {
        const GLsizei n = *(GLsizei  *)(pc +  0);
d2706 6
a2711 6
        GLboolean * residences = __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);
        retval = CALL_AreTexturesResident( GET_DISPATCH(), (
            n,
             (const GLuint *)(pc +  4),
            residences
        ) );
d2719 2
a2720 1
int __glXDisp_AreTexturesResidentEXT(__GLXclientState *cl, GLbyte *pc)
d2722 1
a2722 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d2724 1
a2724 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2727 2
a2728 2
    if ( cx != NULL ) {
        const GLsizei n = *(GLsizei  *)(pc +  0);
d2732 6
a2737 6
        GLboolean * residences = __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);
        retval = CALL_AreTexturesResident( GET_DISPATCH(), (
            n,
             (const GLuint *)(pc +  4),
            residences
        ) );
d2745 2
a2746 1
void __glXDisp_CopyTexImage1D(GLbyte * pc)
d2748 8
a2755 9
    CALL_CopyTexImage1D( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLenum   *)(pc +  8),
        *(GLint    *)(pc + 12),
        *(GLint    *)(pc + 16),
        *(GLsizei  *)(pc + 20),
        *(GLint    *)(pc + 24)
    ) );
d2758 2
a2759 1
void __glXDisp_CopyTexImage2D(GLbyte * pc)
d2761 9
a2769 10
    CALL_CopyTexImage2D( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLenum   *)(pc +  8),
        *(GLint    *)(pc + 12),
        *(GLint    *)(pc + 16),
        *(GLsizei  *)(pc + 20),
        *(GLsizei  *)(pc + 24),
        *(GLint    *)(pc + 28)
    ) );
d2772 2
a2773 1
void __glXDisp_CopyTexSubImage1D(GLbyte * pc)
d2775 7
a2781 8
    CALL_CopyTexSubImage1D( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLint    *)(pc +  8),
        *(GLint    *)(pc + 12),
        *(GLint    *)(pc + 16),
        *(GLsizei  *)(pc + 20)
    ) );
d2784 2
a2785 1
void __glXDisp_CopyTexSubImage2D(GLbyte * pc)
d2787 9
a2795 10
    CALL_CopyTexSubImage2D( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLint    *)(pc +  8),
        *(GLint    *)(pc + 12),
        *(GLint    *)(pc + 16),
        *(GLint    *)(pc + 20),
        *(GLsizei  *)(pc + 24),
        *(GLsizei  *)(pc + 28)
    ) );
d2798 2
a2799 1
int __glXDisp_DeleteTextures(__GLXclientState *cl, GLbyte *pc)
d2801 1
a2801 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2803 1
a2803 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2806 2
a2807 2
    if ( cx != NULL ) {
        const GLsizei n = *(GLsizei  *)(pc +  0);
d2809 2
a2810 4
        CALL_DeleteTextures( GET_DISPATCH(), (
            n,
             (const GLuint *)(pc +  4)
        ) );
d2817 2
a2818 1
int __glXDisp_DeleteTexturesEXT(__GLXclientState *cl, GLbyte *pc)
d2820 1
a2820 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d2822 1
a2822 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2825 2
a2826 2
    if ( cx != NULL ) {
        const GLsizei n = *(GLsizei  *)(pc +  0);
d2828 2
a2829 4
        CALL_DeleteTextures( GET_DISPATCH(), (
            n,
             (const GLuint *)(pc +  4)
        ) );
d2836 2
a2837 1
int __glXDisp_GenTextures(__GLXclientState *cl, GLbyte *pc)
d2839 1
a2839 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2841 1
a2841 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2844 2
a2845 2
    if ( cx != NULL ) {
        const GLsizei n = *(GLsizei  *)(pc +  0);
d2848 4
a2851 5
        GLuint * textures = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
        CALL_GenTextures( GET_DISPATCH(), (
            n,
            textures
        ) );
d2859 2
a2860 1
int __glXDisp_GenTexturesEXT(__GLXclientState *cl, GLbyte *pc)
d2862 1
a2862 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d2864 1
a2864 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2867 2
a2868 2
    if ( cx != NULL ) {
        const GLsizei n = *(GLsizei  *)(pc +  0);
d2871 4
a2874 5
        GLuint * textures = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
        CALL_GenTextures( GET_DISPATCH(), (
            n,
            textures
        ) );
d2882 2
a2883 1
int __glXDisp_IsTexture(__GLXclientState *cl, GLbyte *pc)
d2885 1
a2885 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d2887 1
a2887 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2890 1
a2890 1
    if ( cx != NULL ) {
d2892 3
a2894 3
        retval = CALL_IsTexture( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0)
        ) );
d2902 2
a2903 1
int __glXDisp_IsTextureEXT(__GLXclientState *cl, GLbyte *pc)
d2905 1
a2905 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d2907 1
a2907 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d2910 1
a2910 1
    if ( cx != NULL ) {
d2912 3
a2914 3
        retval = CALL_IsTexture( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0)
        ) );
d2922 2
a2923 60
void __glXDisp_PrioritizeTextures(GLbyte * pc)
{
    const GLsizei n = *(GLsizei  *)(pc +  0);

    CALL_PrioritizeTextures( GET_DISPATCH(), (
        n,
         (const GLuint *)(pc +  4),
         (const GLclampf *)(pc +  4)
    ) );
}

void __glXDisp_TexSubImage1D(GLbyte * pc)
{
    const GLvoid * const pixels = (const GLvoid *) (pc + 56);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);

    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) hdr->rowLength) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) hdr->skipRows) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) hdr->skipPixels) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) hdr->alignment) );

    CALL_TexSubImage1D( GET_DISPATCH(), (
        *(GLenum   *)(pc + 20),
        *(GLint    *)(pc + 24),
        *(GLint    *)(pc + 28),
        *(GLsizei  *)(pc + 36),
        *(GLenum   *)(pc + 44),
        *(GLenum   *)(pc + 48),
        pixels
    ) );
}

void __glXDisp_TexSubImage2D(GLbyte * pc)
{
    const GLvoid * const pixels = (const GLvoid *) (pc + 56);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);

    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) hdr->rowLength) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) hdr->skipRows) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) hdr->skipPixels) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) hdr->alignment) );

    CALL_TexSubImage2D( GET_DISPATCH(), (
        *(GLenum   *)(pc + 20),
        *(GLint    *)(pc + 24),
        *(GLint    *)(pc + 28),
        *(GLint    *)(pc + 32),
        *(GLsizei  *)(pc + 36),
        *(GLsizei  *)(pc + 40),
        *(GLenum   *)(pc + 44),
        *(GLenum   *)(pc + 48),
        pixels
    ) );
}

void __glXDisp_BlendColor(GLbyte * pc)
d2925 1
a2925 7
    CALL_BlendColor( GET_DISPATCH(), (
        *(GLclampf *)(pc +  0),
        *(GLclampf *)(pc +  4),
        *(GLclampf *)(pc +  8),
        *(GLclampf *)(pc + 12)
    ) );
}
d2927 97
a3023 5
void __glXDisp_BlendEquation(GLbyte * pc)
{
    CALL_BlendEquation( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d3026 2
a3027 1
void __glXDisp_ColorTable(GLbyte * pc)
d3029 2
a3030 24
    const GLvoid * const table = (const GLvoid *) (pc + 40);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);

    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) hdr->rowLength) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) hdr->skipRows) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) hdr->skipPixels) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) hdr->alignment) );

    CALL_ColorTable( GET_DISPATCH(), (
        *(GLenum   *)(pc + 20),
        *(GLenum   *)(pc + 24),
        *(GLsizei  *)(pc + 28),
        *(GLenum   *)(pc + 32),
        *(GLenum   *)(pc + 36),
        table
    ) );
}

void __glXDisp_ColorTableParameterfv(GLbyte * pc)
{
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLfloat * params;
d3034 2
a3035 5
    CALL_ColorTableParameterfv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
d3038 2
a3039 1
void __glXDisp_ColorTableParameteriv(GLbyte * pc)
d3041 2
a3042 2
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLint * params;
d3046 2
a3047 5
    CALL_ColorTableParameteriv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
d3050 2
a3051 1
void __glXDisp_CopyColorTable(GLbyte * pc)
d3053 6
a3058 7
    CALL_CopyColorTable( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLint    *)(pc +  8),
        *(GLint    *)(pc + 12),
        *(GLsizei  *)(pc + 16)
    ) );
d3061 2
a3062 1
int __glXDisp_GetColorTableParameterfv(__GLXclientState *cl, GLbyte *pc)
d3064 1
a3064 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3066 1
a3066 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3069 2
a3070 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3074 3
a3076 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3078 2
a3079 1
        if (params == NULL) return BadAlloc;
d3082 2
a3083 5
        CALL_GetColorTableParameterfv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3091 2
a3092 1
int __glXDisp_GetColorTableParameterfvSGI(__GLXclientState *cl, GLbyte *pc)
d3094 1
a3094 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3096 1
a3096 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3099 2
a3100 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3104 3
a3106 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3108 2
a3109 1
        if (params == NULL) return BadAlloc;
d3112 2
a3113 5
        CALL_GetColorTableParameterfv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3121 2
a3122 1
int __glXDisp_GetColorTableParameteriv(__GLXclientState *cl, GLbyte *pc)
d3124 1
a3124 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3126 1
a3126 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3129 2
a3130 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3134 3
a3136 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3138 2
a3139 1
        if (params == NULL) return BadAlloc;
d3142 2
a3143 5
        CALL_GetColorTableParameteriv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3151 2
a3152 1
int __glXDisp_GetColorTableParameterivSGI(__GLXclientState *cl, GLbyte *pc)
d3154 1
a3154 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3156 1
a3156 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3159 2
a3160 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3164 3
a3166 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3168 2
a3169 1
        if (params == NULL) return BadAlloc;
d3172 2
a3173 5
        CALL_GetColorTableParameteriv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3181 2
a3182 1
void __glXDisp_ColorSubTable(GLbyte * pc)
d3184 2
a3185 2
    const GLvoid * const data = (const GLvoid *) (pc + 40);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);
d3187 85
a3271 80
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) hdr->rowLength) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) hdr->skipRows) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) hdr->skipPixels) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) hdr->alignment) );

    CALL_ColorSubTable( GET_DISPATCH(), (
        *(GLenum   *)(pc + 20),
        *(GLsizei  *)(pc + 24),
        *(GLsizei  *)(pc + 28),
        *(GLenum   *)(pc + 32),
        *(GLenum   *)(pc + 36),
        data
    ) );
}

void __glXDisp_CopyColorSubTable(GLbyte * pc)
{
    CALL_CopyColorSubTable( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLsizei  *)(pc +  4),
        *(GLint    *)(pc +  8),
        *(GLint    *)(pc + 12),
        *(GLsizei  *)(pc + 16)
    ) );
}

void __glXDisp_ConvolutionFilter1D(GLbyte * pc)
{
    const GLvoid * const image = (const GLvoid *) (pc + 44);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);

    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) hdr->rowLength) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) hdr->skipRows) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) hdr->skipPixels) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) hdr->alignment) );

    CALL_ConvolutionFilter1D( GET_DISPATCH(), (
        *(GLenum   *)(pc + 20),
        *(GLenum   *)(pc + 24),
        *(GLsizei  *)(pc + 28),
        *(GLenum   *)(pc + 36),
        *(GLenum   *)(pc + 40),
        image
    ) );
}

void __glXDisp_ConvolutionFilter2D(GLbyte * pc)
{
    const GLvoid * const image = (const GLvoid *) (pc + 44);
    __GLXpixelHeader * const hdr = (__GLXpixelHeader *)(pc);

    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) hdr->rowLength) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) hdr->skipRows) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) hdr->skipPixels) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) hdr->alignment) );

    CALL_ConvolutionFilter2D( GET_DISPATCH(), (
        *(GLenum   *)(pc + 20),
        *(GLenum   *)(pc + 24),
        *(GLsizei  *)(pc + 28),
        *(GLsizei  *)(pc + 32),
        *(GLenum   *)(pc + 36),
        *(GLenum   *)(pc + 40),
        image
    ) );
}

void __glXDisp_ConvolutionParameterf(GLbyte * pc)
{
    CALL_ConvolutionParameterf( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLfloat  *)(pc +  8)
    ) );
d3274 2
a3275 1
void __glXDisp_ConvolutionParameterfv(GLbyte * pc)
d3277 2
a3278 2
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLfloat * params;
d3282 2
a3283 5
    CALL_ConvolutionParameterfv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
d3286 2
a3287 1
void __glXDisp_ConvolutionParameteri(GLbyte * pc)
d3289 4
a3292 5
    CALL_ConvolutionParameteri( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLint    *)(pc +  8)
    ) );
d3295 2
a3296 1
void __glXDisp_ConvolutionParameteriv(GLbyte * pc)
d3298 2
a3299 2
    const GLenum pname = *(GLenum   *)(pc +  4);
    const GLint * params;
d3303 2
a3304 5
    CALL_ConvolutionParameteriv( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        pname,
        params
    ) );
d3307 2
a3308 1
void __glXDisp_CopyConvolutionFilter1D(GLbyte * pc)
d3310 6
a3315 7
    CALL_CopyConvolutionFilter1D( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLint    *)(pc +  8),
        *(GLint    *)(pc + 12),
        *(GLsizei  *)(pc + 16)
    ) );
d3318 2
a3319 1
void __glXDisp_CopyConvolutionFilter2D(GLbyte * pc)
d3321 7
a3327 8
    CALL_CopyConvolutionFilter2D( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLint    *)(pc +  8),
        *(GLint    *)(pc + 12),
        *(GLsizei  *)(pc + 16),
        *(GLsizei  *)(pc + 20)
    ) );
d3330 2
a3331 1
int __glXDisp_GetConvolutionParameterfv(__GLXclientState *cl, GLbyte *pc)
d3333 1
a3333 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3335 1
a3335 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3338 2
a3339 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3343 3
a3345 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3347 2
a3348 1
        if (params == NULL) return BadAlloc;
d3351 2
a3352 5
        CALL_GetConvolutionParameterfv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3360 2
a3361 1
int __glXDisp_GetConvolutionParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
d3363 1
a3363 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3365 1
a3365 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3368 2
a3369 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3373 3
a3375 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3377 2
a3378 1
        if (params == NULL) return BadAlloc;
d3381 2
a3382 5
        CALL_GetConvolutionParameterfv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3390 2
a3391 1
int __glXDisp_GetConvolutionParameteriv(__GLXclientState *cl, GLbyte *pc)
d3393 1
a3393 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3395 1
a3395 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3398 2
a3399 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3403 3
a3405 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3407 2
a3408 1
        if (params == NULL) return BadAlloc;
d3411 2
a3412 5
        CALL_GetConvolutionParameteriv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3420 2
a3421 1
int __glXDisp_GetConvolutionParameterivEXT(__GLXclientState *cl, GLbyte *pc)
d3423 1
a3423 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3425 1
a3425 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3428 2
a3429 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3433 3
a3435 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3437 2
a3438 1
        if (params == NULL) return BadAlloc;
d3441 2
a3442 5
        CALL_GetConvolutionParameteriv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3450 2
a3451 1
int __glXDisp_GetHistogramParameterfv(__GLXclientState *cl, GLbyte *pc)
d3453 1
a3453 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3455 1
a3455 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3458 2
a3459 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3463 3
a3465 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3467 2
a3468 1
        if (params == NULL) return BadAlloc;
d3471 2
a3472 5
        CALL_GetHistogramParameterfv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3480 2
a3481 1
int __glXDisp_GetHistogramParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
d3483 1
a3483 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3485 1
a3485 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3488 2
a3489 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3493 3
a3495 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3497 2
a3498 1
        if (params == NULL) return BadAlloc;
d3501 2
a3502 5
        CALL_GetHistogramParameterfv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3510 2
a3511 1
int __glXDisp_GetHistogramParameteriv(__GLXclientState *cl, GLbyte *pc)
d3513 1
a3513 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3515 1
a3515 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3518 2
a3519 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3523 3
a3525 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3527 2
a3528 1
        if (params == NULL) return BadAlloc;
d3531 2
a3532 5
        CALL_GetHistogramParameteriv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3540 2
a3541 1
int __glXDisp_GetHistogramParameterivEXT(__GLXclientState *cl, GLbyte *pc)
d3543 1
a3543 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3545 1
a3545 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3548 2
a3549 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3553 3
a3555 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3557 2
a3558 1
        if (params == NULL) return BadAlloc;
d3561 2
a3562 5
        CALL_GetHistogramParameteriv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3570 2
a3571 1
int __glXDisp_GetMinmaxParameterfv(__GLXclientState *cl, GLbyte *pc)
d3573 1
a3573 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3575 1
a3575 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3578 2
a3579 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3583 3
a3585 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3587 2
a3588 1
        if (params == NULL) return BadAlloc;
d3591 2
a3592 5
        CALL_GetMinmaxParameterfv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3600 2
a3601 1
int __glXDisp_GetMinmaxParameterfvEXT(__GLXclientState *cl, GLbyte *pc)
d3603 1
a3603 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3605 1
a3605 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3608 2
a3609 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3613 3
a3615 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3617 2
a3618 1
        if (params == NULL) return BadAlloc;
d3621 2
a3622 5
        CALL_GetMinmaxParameterfv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3630 2
a3631 1
int __glXDisp_GetMinmaxParameteriv(__GLXclientState *cl, GLbyte *pc)
d3633 1
a3633 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d3635 1
a3635 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3638 2
a3639 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3643 3
a3645 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3647 2
a3648 1
        if (params == NULL) return BadAlloc;
d3651 2
a3652 5
        CALL_GetMinmaxParameteriv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3660 2
a3661 1
int __glXDisp_GetMinmaxParameterivEXT(__GLXclientState *cl, GLbyte *pc)
d3663 1
a3663 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d3665 1
a3665 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d3668 2
a3669 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d3673 3
a3675 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d3677 2
a3678 1
        if (params == NULL) return BadAlloc;
d3681 2
a3682 5
        CALL_GetMinmaxParameteriv( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d3690 2
a3691 1
void __glXDisp_Histogram(GLbyte * pc)
d3693 5
a3697 6
    CALL_Histogram( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLsizei  *)(pc +  4),
        *(GLenum   *)(pc +  8),
        *(GLboolean *)(pc + 12)
    ) );
d3700 2
a3701 1
void __glXDisp_Minmax(GLbyte * pc)
d3703 3
a3705 5
    CALL_Minmax( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLboolean *)(pc +  8)
    ) );
d3708 2
a3709 1
void __glXDisp_ResetHistogram(GLbyte * pc)
d3711 2
a3712 3
    CALL_ResetHistogram( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d3715 2
a3716 1
void __glXDisp_ResetMinmax(GLbyte * pc)
d3718 2
a3719 3
    CALL_ResetMinmax( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d3722 2
a3723 1
void __glXDisp_TexImage3D(GLbyte * pc)
d3725 4
a3728 3
    const CARD32 ptr_is_null = *(CARD32 *)(pc + 76);
    const GLvoid * const pixels = (const GLvoid *) ((ptr_is_null != 0) ? NULL : (pc + 80));
    __GLXpixel3DHeader * const hdr = (__GLXpixel3DHeader *)(pc);
d3730 14
a3743 8
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) hdr->rowLength) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_IMAGE_HEIGHT, (GLint) hdr->imageHeight) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) hdr->skipRows) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_IMAGES,  (GLint) hdr->skipImages) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) hdr->skipPixels) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) hdr->alignment) );
d3745 9
a3753 12
    CALL_TexImage3D( GET_DISPATCH(), (
        *(GLenum   *)(pc + 36),
        *(GLint    *)(pc + 40),
        *(GLint    *)(pc + 44),
        *(GLsizei  *)(pc + 48),
        *(GLsizei  *)(pc + 52),
        *(GLsizei  *)(pc + 56),
        *(GLint    *)(pc + 64),
        *(GLenum   *)(pc + 68),
        *(GLenum   *)(pc + 72),
        pixels
    ) );
d3756 2
a3757 1
void __glXDisp_TexSubImage3D(GLbyte * pc)
d3759 2
a3760 2
    const GLvoid * const pixels = (const GLvoid *) (pc + 88);
    __GLXpixel3DHeader * const hdr = (__GLXpixel3DHeader *)(pc);
d3762 14
a3775 8
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SWAP_BYTES,   hdr->swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_LSB_FIRST,    hdr->lsbFirst) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ROW_LENGTH,   (GLint) hdr->rowLength) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_IMAGE_HEIGHT, (GLint) hdr->imageHeight) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_ROWS,    (GLint) hdr->skipRows) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_IMAGES,  (GLint) hdr->skipImages) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_SKIP_PIXELS,  (GLint) hdr->skipPixels) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_UNPACK_ALIGNMENT,    (GLint) hdr->alignment) );
d3777 10
a3786 13
    CALL_TexSubImage3D( GET_DISPATCH(), (
        *(GLenum   *)(pc + 36),
        *(GLint    *)(pc + 40),
        *(GLint    *)(pc + 44),
        *(GLint    *)(pc + 48),
        *(GLint    *)(pc + 52),
        *(GLsizei  *)(pc + 60),
        *(GLsizei  *)(pc + 64),
        *(GLsizei  *)(pc + 68),
        *(GLenum   *)(pc + 76),
        *(GLenum   *)(pc + 80),
        pixels
    ) );
d3789 2
a3790 1
void __glXDisp_CopyTexSubImage3D(GLbyte * pc)
d3792 10
a3801 11
    CALL_CopyTexSubImage3D( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLint    *)(pc +  8),
        *(GLint    *)(pc + 12),
        *(GLint    *)(pc + 16),
        *(GLint    *)(pc + 20),
        *(GLint    *)(pc + 24),
        *(GLsizei  *)(pc + 28),
        *(GLsizei  *)(pc + 32)
    ) );
d3804 2
a3805 1
void __glXDisp_ActiveTextureARB(GLbyte * pc)
d3807 2
a3808 3
    CALL_ActiveTextureARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d3811 2
a3812 1
void __glXDisp_MultiTexCoord1dvARB(GLbyte * pc)
d3815 2
a3816 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 12);
d3821 3
a3823 4
    CALL_MultiTexCoord1dvARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  8),
         (const GLdouble *)(pc +  0)
    ) );
d3826 2
a3827 1
void __glXDisp_MultiTexCoord1fvARB(GLbyte * pc)
d3829 3
a3831 4
    CALL_MultiTexCoord1fvARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
         (const GLfloat *)(pc +  4)
    ) );
d3834 2
a3835 1
void __glXDisp_MultiTexCoord1ivARB(GLbyte * pc)
d3837 3
a3839 4
    CALL_MultiTexCoord1ivARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
         (const GLint *)(pc +  4)
    ) );
d3842 2
a3843 1
void __glXDisp_MultiTexCoord1svARB(GLbyte * pc)
d3845 3
a3847 4
    CALL_MultiTexCoord1svARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
         (const GLshort *)(pc +  4)
    ) );
d3850 2
a3851 1
void __glXDisp_MultiTexCoord2dvARB(GLbyte * pc)
d3854 2
a3855 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 20);
d3860 3
a3862 4
    CALL_MultiTexCoord2dvARB( GET_DISPATCH(), (
        *(GLenum   *)(pc + 16),
         (const GLdouble *)(pc +  0)
    ) );
d3865 2
a3866 1
void __glXDisp_MultiTexCoord2fvARB(GLbyte * pc)
d3868 3
a3870 4
    CALL_MultiTexCoord2fvARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
         (const GLfloat *)(pc +  4)
    ) );
d3873 2
a3874 1
void __glXDisp_MultiTexCoord2ivARB(GLbyte * pc)
d3876 3
a3878 4
    CALL_MultiTexCoord2ivARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
         (const GLint *)(pc +  4)
    ) );
d3881 2
a3882 1
void __glXDisp_MultiTexCoord2svARB(GLbyte * pc)
d3884 3
a3886 4
    CALL_MultiTexCoord2svARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
         (const GLshort *)(pc +  4)
    ) );
d3889 2
a3890 1
void __glXDisp_MultiTexCoord3dvARB(GLbyte * pc)
d3893 2
a3894 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 28);
d3899 3
a3901 4
    CALL_MultiTexCoord3dvARB( GET_DISPATCH(), (
        *(GLenum   *)(pc + 24),
         (const GLdouble *)(pc +  0)
    ) );
d3904 2
a3905 1
void __glXDisp_MultiTexCoord3fvARB(GLbyte * pc)
d3907 3
a3909 4
    CALL_MultiTexCoord3fvARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
         (const GLfloat *)(pc +  4)
    ) );
d3912 2
a3913 1
void __glXDisp_MultiTexCoord3ivARB(GLbyte * pc)
d3915 3
a3917 4
    CALL_MultiTexCoord3ivARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
         (const GLint *)(pc +  4)
    ) );
d3920 2
a3921 1
void __glXDisp_MultiTexCoord3svARB(GLbyte * pc)
d3923 3
a3925 4
    CALL_MultiTexCoord3svARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
         (const GLshort *)(pc +  4)
    ) );
d3928 2
a3929 1
void __glXDisp_MultiTexCoord4dvARB(GLbyte * pc)
d3932 2
a3933 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 36);
d3938 3
a3940 4
    CALL_MultiTexCoord4dvARB( GET_DISPATCH(), (
        *(GLenum   *)(pc + 32),
         (const GLdouble *)(pc +  0)
    ) );
d3943 2
a3944 1
void __glXDisp_MultiTexCoord4fvARB(GLbyte * pc)
d3946 3
a3948 4
    CALL_MultiTexCoord4fvARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
         (const GLfloat *)(pc +  4)
    ) );
d3951 2
a3952 1
void __glXDisp_MultiTexCoord4ivARB(GLbyte * pc)
d3954 3
a3956 4
    CALL_MultiTexCoord4ivARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
         (const GLint *)(pc +  4)
    ) );
d3959 2
a3960 1
void __glXDisp_MultiTexCoord4svARB(GLbyte * pc)
d3962 3
a3964 4
    CALL_MultiTexCoord4svARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
         (const GLshort *)(pc +  4)
    ) );
d3967 2
a3968 1
void __glXDisp_SampleCoverageARB(GLbyte * pc)
d3970 3
a3972 4
    CALL_SampleCoverageARB( GET_DISPATCH(), (
        *(GLclampf *)(pc +  0),
        *(GLboolean *)(pc +  4)
    ) );
d3975 2
a3976 1
void __glXDisp_CompressedTexImage1DARB(GLbyte * pc)
d3978 1
a3978 1
    const GLsizei imageSize = *(GLsizei  *)(pc + 20);
d3980 8
a3987 9
    CALL_CompressedTexImage1DARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLenum   *)(pc +  8),
        *(GLsizei  *)(pc + 12),
        *(GLint    *)(pc + 16),
        imageSize,
         (const GLvoid *)(pc + 24)
    ) );
d3990 2
a3991 1
void __glXDisp_CompressedTexImage2DARB(GLbyte * pc)
d3993 1
a3993 1
    const GLsizei imageSize = *(GLsizei  *)(pc + 24);
d3995 9
a4003 10
    CALL_CompressedTexImage2DARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLenum   *)(pc +  8),
        *(GLsizei  *)(pc + 12),
        *(GLsizei  *)(pc + 16),
        *(GLint    *)(pc + 20),
        imageSize,
         (const GLvoid *)(pc + 28)
    ) );
d4006 2
a4007 1
void __glXDisp_CompressedTexImage3DARB(GLbyte * pc)
d4009 1
a4009 1
    const GLsizei imageSize = *(GLsizei  *)(pc + 28);
d4011 10
a4020 11
    CALL_CompressedTexImage3DARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLenum   *)(pc +  8),
        *(GLsizei  *)(pc + 12),
        *(GLsizei  *)(pc + 16),
        *(GLsizei  *)(pc + 20),
        *(GLint    *)(pc + 24),
        imageSize,
         (const GLvoid *)(pc + 32)
    ) );
d4023 2
a4024 1
void __glXDisp_CompressedTexSubImage1DARB(GLbyte * pc)
d4026 1
a4026 1
    const GLsizei imageSize = *(GLsizei  *)(pc + 20);
d4028 8
a4035 9
    CALL_CompressedTexSubImage1DARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLint    *)(pc +  8),
        *(GLsizei  *)(pc + 12),
        *(GLenum   *)(pc + 16),
        imageSize,
         (const GLvoid *)(pc + 24)
    ) );
d4038 2
a4039 1
void __glXDisp_CompressedTexSubImage2DARB(GLbyte * pc)
d4041 1
a4041 1
    const GLsizei imageSize = *(GLsizei  *)(pc + 28);
d4043 10
a4052 11
    CALL_CompressedTexSubImage2DARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLint    *)(pc +  8),
        *(GLint    *)(pc + 12),
        *(GLsizei  *)(pc + 16),
        *(GLsizei  *)(pc + 20),
        *(GLenum   *)(pc + 24),
        imageSize,
         (const GLvoid *)(pc + 32)
    ) );
d4055 2
a4056 1
void __glXDisp_CompressedTexSubImage3DARB(GLbyte * pc)
d4058 1
a4058 1
    const GLsizei imageSize = *(GLsizei  *)(pc + 36);
d4060 12
a4071 13
    CALL_CompressedTexSubImage3DARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4),
        *(GLint    *)(pc +  8),
        *(GLint    *)(pc + 12),
        *(GLint    *)(pc + 16),
        *(GLsizei  *)(pc + 20),
        *(GLsizei  *)(pc + 24),
        *(GLsizei  *)(pc + 28),
        *(GLenum   *)(pc + 32),
        imageSize,
         (const GLvoid *)(pc + 40)
    ) );
d4074 2
a4075 1
int __glXDisp_GetProgramEnvParameterdvARB(__GLXclientState *cl, GLbyte *pc)
d4077 1
a4077 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4079 1
a4079 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4082 1
a4082 1
    if ( cx != NULL ) {
d4084 4
a4087 5
        CALL_GetProgramEnvParameterdvARB( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            *(GLuint   *)(pc +  4),
            params
        ) );
d4095 2
a4096 1
int __glXDisp_GetProgramEnvParameterfvARB(__GLXclientState *cl, GLbyte *pc)
d4098 1
a4098 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4100 1
a4100 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4103 1
a4103 1
    if ( cx != NULL ) {
d4105 4
a4108 5
        CALL_GetProgramEnvParameterfvARB( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            *(GLuint   *)(pc +  4),
            params
        ) );
d4116 2
a4117 1
int __glXDisp_GetProgramLocalParameterdvARB(__GLXclientState *cl, GLbyte *pc)
d4119 1
a4119 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4121 1
a4121 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4124 1
a4124 1
    if ( cx != NULL ) {
d4126 4
a4129 5
        CALL_GetProgramLocalParameterdvARB( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            *(GLuint   *)(pc +  4),
            params
        ) );
d4137 2
a4138 1
int __glXDisp_GetProgramLocalParameterfvARB(__GLXclientState *cl, GLbyte *pc)
d4140 1
a4140 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4142 1
a4142 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4145 1
a4145 1
    if ( cx != NULL ) {
d4147 4
a4150 5
        CALL_GetProgramLocalParameterfvARB( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            *(GLuint   *)(pc +  4),
            params
        ) );
d4158 2
a4159 1
int __glXDisp_GetProgramivARB(__GLXclientState *cl, GLbyte *pc)
d4161 1
a4161 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4163 1
a4163 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4166 2
a4167 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d4171 3
a4173 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d4175 2
a4176 1
        if (params == NULL) return BadAlloc;
d4179 2
a4180 5
        CALL_GetProgramivARB( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d4188 2
a4189 1
int __glXDisp_GetVertexAttribdvARB(__GLXclientState *cl, GLbyte *pc)
d4191 1
a4191 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4193 1
a4193 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4196 2
a4197 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d4201 3
a4203 1
        GLdouble * params = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);
d4205 2
a4206 1
        if (params == NULL) return BadAlloc;
d4209 2
a4210 5
        CALL_GetVertexAttribdvARB( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0),
            pname,
            params
        ) );
d4218 2
a4219 1
int __glXDisp_GetVertexAttribfvARB(__GLXclientState *cl, GLbyte *pc)
d4221 1
a4221 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4223 1
a4223 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4226 2
a4227 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d4231 3
a4233 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d4235 2
a4236 1
        if (params == NULL) return BadAlloc;
d4239 2
a4240 5
        CALL_GetVertexAttribfvARB( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0),
            pname,
            params
        ) );
d4248 2
a4249 1
int __glXDisp_GetVertexAttribivARB(__GLXclientState *cl, GLbyte *pc)
d4251 1
a4251 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4253 1
a4253 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4256 2
a4257 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d4261 3
a4263 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d4265 2
a4266 1
        if (params == NULL) return BadAlloc;
d4269 2
a4270 5
        CALL_GetVertexAttribivARB( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0),
            pname,
            params
        ) );
d4278 2
a4279 1
void __glXDisp_ProgramEnvParameter4dvARB(GLbyte * pc)
d4282 2
a4283 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 40);
d4288 4
a4291 5
    CALL_ProgramEnvParameter4dvARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLuint   *)(pc +  4),
         (const GLdouble *)(pc +  8)
    ) );
d4294 2
a4295 1
void __glXDisp_ProgramEnvParameter4fvARB(GLbyte * pc)
d4297 4
a4300 5
    CALL_ProgramEnvParameter4fvARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLuint   *)(pc +  4),
         (const GLfloat *)(pc +  8)
    ) );
d4303 2
a4304 1
void __glXDisp_ProgramLocalParameter4dvARB(GLbyte * pc)
d4307 2
a4308 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 40);
d4313 5
a4317 5
    CALL_ProgramLocalParameter4dvARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLuint   *)(pc +  4),
         (const GLdouble *)(pc +  8)
    ) );
d4320 2
a4321 1
void __glXDisp_ProgramLocalParameter4fvARB(GLbyte * pc)
d4323 4
a4326 5
    CALL_ProgramLocalParameter4fvARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLuint   *)(pc +  4),
         (const GLfloat *)(pc +  8)
    ) );
d4329 2
a4330 1
void __glXDisp_ProgramStringARB(GLbyte * pc)
d4332 1
a4332 1
    const GLsizei len = *(GLsizei  *)(pc +  8);
d4334 4
a4337 6
    CALL_ProgramStringARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        len,
         (const GLvoid *)(pc + 12)
    ) );
d4340 2
a4341 1
void __glXDisp_VertexAttrib1dvARB(GLbyte * pc)
d4344 2
a4345 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 12);
d4350 3
a4352 4
    CALL_VertexAttrib1dvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLdouble *)(pc +  4)
    ) );
d4355 2
a4356 1
void __glXDisp_VertexAttrib1fvARB(GLbyte * pc)
d4358 3
a4360 4
    CALL_VertexAttrib1fvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLfloat *)(pc +  4)
    ) );
d4363 2
a4364 1
void __glXDisp_VertexAttrib1svARB(GLbyte * pc)
d4366 3
a4368 4
    CALL_VertexAttrib1svARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLshort *)(pc +  4)
    ) );
d4371 2
a4372 1
void __glXDisp_VertexAttrib2dvARB(GLbyte * pc)
d4375 2
a4376 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 20);
d4381 3
a4383 4
    CALL_VertexAttrib2dvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLdouble *)(pc +  4)
    ) );
d4386 2
a4387 1
void __glXDisp_VertexAttrib2fvARB(GLbyte * pc)
d4389 3
a4391 4
    CALL_VertexAttrib2fvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLfloat *)(pc +  4)
    ) );
d4394 2
a4395 1
void __glXDisp_VertexAttrib2svARB(GLbyte * pc)
d4397 3
a4399 4
    CALL_VertexAttrib2svARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLshort *)(pc +  4)
    ) );
d4402 2
a4403 1
void __glXDisp_VertexAttrib3dvARB(GLbyte * pc)
d4406 2
a4407 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 28);
d4412 3
a4414 4
    CALL_VertexAttrib3dvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLdouble *)(pc +  4)
    ) );
d4417 2
a4418 1
void __glXDisp_VertexAttrib3fvARB(GLbyte * pc)
d4420 3
a4422 4
    CALL_VertexAttrib3fvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLfloat *)(pc +  4)
    ) );
d4425 2
a4426 1
void __glXDisp_VertexAttrib3svARB(GLbyte * pc)
d4428 3
a4430 4
    CALL_VertexAttrib3svARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLshort *)(pc +  4)
    ) );
d4433 2
a4434 1
void __glXDisp_VertexAttrib4NbvARB(GLbyte * pc)
d4436 3
a4438 4
    CALL_VertexAttrib4NbvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLbyte *)(pc +  4)
    ) );
d4441 2
a4442 1
void __glXDisp_VertexAttrib4NivARB(GLbyte * pc)
d4444 3
a4446 4
    CALL_VertexAttrib4NivARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLint *)(pc +  4)
    ) );
d4449 2
a4450 1
void __glXDisp_VertexAttrib4NsvARB(GLbyte * pc)
d4452 3
a4454 4
    CALL_VertexAttrib4NsvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLshort *)(pc +  4)
    ) );
d4457 2
a4458 1
void __glXDisp_VertexAttrib4NubvARB(GLbyte * pc)
d4460 3
a4462 4
    CALL_VertexAttrib4NubvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLubyte *)(pc +  4)
    ) );
d4465 2
a4466 1
void __glXDisp_VertexAttrib4NuivARB(GLbyte * pc)
d4468 3
a4470 4
    CALL_VertexAttrib4NuivARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLuint *)(pc +  4)
    ) );
d4473 2
a4474 1
void __glXDisp_VertexAttrib4NusvARB(GLbyte * pc)
d4476 3
a4478 4
    CALL_VertexAttrib4NusvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLushort *)(pc +  4)
    ) );
d4481 2
a4482 1
void __glXDisp_VertexAttrib4bvARB(GLbyte * pc)
d4484 3
a4486 4
    CALL_VertexAttrib4bvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLbyte *)(pc +  4)
    ) );
d4489 2
a4490 1
void __glXDisp_VertexAttrib4dvARB(GLbyte * pc)
d4493 2
a4494 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 36);
d4499 3
a4501 4
    CALL_VertexAttrib4dvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLdouble *)(pc +  4)
    ) );
d4504 2
a4505 1
void __glXDisp_VertexAttrib4fvARB(GLbyte * pc)
d4507 3
a4509 4
    CALL_VertexAttrib4fvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLfloat *)(pc +  4)
    ) );
d4512 2
a4513 1
void __glXDisp_VertexAttrib4ivARB(GLbyte * pc)
d4515 3
a4517 4
    CALL_VertexAttrib4ivARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLint *)(pc +  4)
    ) );
d4520 2
a4521 1
void __glXDisp_VertexAttrib4svARB(GLbyte * pc)
d4523 3
a4525 4
    CALL_VertexAttrib4svARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLshort *)(pc +  4)
    ) );
d4528 2
a4529 1
void __glXDisp_VertexAttrib4ubvARB(GLbyte * pc)
d4531 3
a4533 4
    CALL_VertexAttrib4ubvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLubyte *)(pc +  4)
    ) );
d4536 2
a4537 1
void __glXDisp_VertexAttrib4uivARB(GLbyte * pc)
d4539 3
a4541 4
    CALL_VertexAttrib4uivARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLuint *)(pc +  4)
    ) );
d4544 2
a4545 1
void __glXDisp_VertexAttrib4usvARB(GLbyte * pc)
d4547 3
a4549 4
    CALL_VertexAttrib4usvARB( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLushort *)(pc +  4)
    ) );
d4552 2
a4553 1
void __glXDisp_BeginQueryARB(GLbyte * pc)
d4555 3
a4557 4
    CALL_BeginQueryARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLuint   *)(pc +  4)
    ) );
d4560 2
a4561 1
int __glXDisp_DeleteQueriesARB(__GLXclientState *cl, GLbyte *pc)
d4563 1
a4563 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d4565 1
a4565 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4568 2
a4569 2
    if ( cx != NULL ) {
        const GLsizei n = *(GLsizei  *)(pc +  0);
d4571 2
a4572 4
        CALL_DeleteQueriesARB( GET_DISPATCH(), (
            n,
             (const GLuint *)(pc +  4)
        ) );
d4579 2
a4580 1
void __glXDisp_EndQueryARB(GLbyte * pc)
d4582 2
a4583 3
    CALL_EndQueryARB( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d4586 2
a4587 1
int __glXDisp_GenQueriesARB(__GLXclientState *cl, GLbyte *pc)
d4589 1
a4589 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d4591 1
a4591 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4594 2
a4595 2
    if ( cx != NULL ) {
        const GLsizei n = *(GLsizei  *)(pc +  0);
d4598 4
a4601 5
        GLuint * ids = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
        CALL_GenQueriesARB( GET_DISPATCH(), (
            n,
            ids
        ) );
d4609 2
a4610 1
int __glXDisp_GetQueryObjectivARB(__GLXclientState *cl, GLbyte *pc)
d4612 1
a4612 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d4614 1
a4614 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4617 2
a4618 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d4622 3
a4624 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d4626 2
a4627 1
        if (params == NULL) return BadAlloc;
d4630 2
a4631 5
        CALL_GetQueryObjectivARB( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0),
            pname,
            params
        ) );
d4639 2
a4640 1
int __glXDisp_GetQueryObjectuivARB(__GLXclientState *cl, GLbyte *pc)
d4642 1
a4642 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d4644 1
a4644 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4647 2
a4648 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d4652 3
a4654 1
        GLuint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d4656 2
a4657 1
        if (params == NULL) return BadAlloc;
d4660 2
a4661 5
        CALL_GetQueryObjectuivARB( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0),
            pname,
            params
        ) );
d4669 2
a4670 1
int __glXDisp_GetQueryivARB(__GLXclientState *cl, GLbyte *pc)
d4672 1
a4672 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d4674 1
a4674 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4677 2
a4678 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d4682 3
a4684 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d4686 2
a4687 1
        if (params == NULL) return BadAlloc;
d4690 2
a4691 5
        CALL_GetQueryivARB( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            pname,
            params
        ) );
d4699 2
a4700 1
int __glXDisp_IsQueryARB(__GLXclientState *cl, GLbyte *pc)
d4702 1
a4702 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d4704 1
a4704 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4707 1
a4707 1
    if ( cx != NULL ) {
d4709 3
a4711 3
        retval = CALL_IsQueryARB( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0)
        ) );
d4719 11
a4729 1
void __glXDisp_DrawBuffersARB(GLbyte * pc)
d4731 4
a4734 1
    const GLsizei n = *(GLsizei  *)(pc +  0);
d4736 9
a4744 4
    CALL_DrawBuffersARB( GET_DISPATCH(), (
        n,
         (const GLenum *)(pc +  4)
    ) );
d4747 2
a4748 1
void __glXDisp_SampleMaskSGIS(GLbyte * pc)
d4750 3
a4752 4
    CALL_SampleMaskSGIS( GET_DISPATCH(), (
        *(GLclampf *)(pc +  0),
        *(GLboolean *)(pc +  4)
    ) );
d4755 2
a4756 1
void __glXDisp_SamplePatternSGIS(GLbyte * pc)
d4758 2
a4759 3
    CALL_SamplePatternSGIS( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d4762 2
a4763 1
void __glXDisp_PointParameterfEXT(GLbyte * pc)
d4765 3
a4767 4
    CALL_PointParameterfEXT( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLfloat  *)(pc +  4)
    ) );
d4770 2
a4771 1
void __glXDisp_PointParameterfvEXT(GLbyte * pc)
d4773 2
a4774 2
    const GLenum pname = *(GLenum   *)(pc +  0);
    const GLfloat * params;
d4778 1
a4778 4
    CALL_PointParameterfvEXT( GET_DISPATCH(), (
        pname,
        params
    ) );
d4781 2
a4782 1
void __glXDisp_SecondaryColor3bvEXT(GLbyte * pc)
d4784 2
a4785 3
    CALL_SecondaryColor3bvEXT( GET_DISPATCH(), (
         (const GLbyte *)(pc +  0)
    ) );
d4788 2
a4789 1
void __glXDisp_SecondaryColor3dvEXT(GLbyte * pc)
d4792 2
a4793 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 24);
d4798 2
a4799 3
    CALL_SecondaryColor3dvEXT( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d4802 2
a4803 1
void __glXDisp_SecondaryColor3fvEXT(GLbyte * pc)
d4805 2
a4806 3
    CALL_SecondaryColor3fvEXT( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d4809 2
a4810 1
void __glXDisp_SecondaryColor3ivEXT(GLbyte * pc)
d4812 2
a4813 3
    CALL_SecondaryColor3ivEXT( GET_DISPATCH(), (
         (const GLint *)(pc +  0)
    ) );
d4816 2
a4817 1
void __glXDisp_SecondaryColor3svEXT(GLbyte * pc)
d4819 2
a4820 3
    CALL_SecondaryColor3svEXT( GET_DISPATCH(), (
         (const GLshort *)(pc +  0)
    ) );
d4823 2
a4824 1
void __glXDisp_SecondaryColor3ubvEXT(GLbyte * pc)
d4826 2
a4827 3
    CALL_SecondaryColor3ubvEXT( GET_DISPATCH(), (
         (const GLubyte *)(pc +  0)
    ) );
d4830 2
a4831 1
void __glXDisp_SecondaryColor3uivEXT(GLbyte * pc)
d4833 2
a4834 3
    CALL_SecondaryColor3uivEXT( GET_DISPATCH(), (
         (const GLuint *)(pc +  0)
    ) );
d4837 2
a4838 1
void __glXDisp_SecondaryColor3usvEXT(GLbyte * pc)
d4840 2
a4841 3
    CALL_SecondaryColor3usvEXT( GET_DISPATCH(), (
         (const GLushort *)(pc +  0)
    ) );
d4844 2
a4845 1
void __glXDisp_FogCoorddvEXT(GLbyte * pc)
d4848 2
a4849 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 8);
d4854 2
a4855 3
    CALL_FogCoorddvEXT( GET_DISPATCH(), (
         (const GLdouble *)(pc +  0)
    ) );
d4858 2
a4859 1
void __glXDisp_FogCoordfvEXT(GLbyte * pc)
d4861 2
a4862 3
    CALL_FogCoordfvEXT( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d4865 2
a4866 1
void __glXDisp_BlendFuncSeparateEXT(GLbyte * pc)
d4868 5
a4872 6
    CALL_BlendFuncSeparateEXT( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLenum   *)(pc +  8),
        *(GLenum   *)(pc + 12)
    ) );
d4875 2
a4876 1
void __glXDisp_WindowPos3fvMESA(GLbyte * pc)
d4878 2
a4879 3
    CALL_WindowPos3fvMESA( GET_DISPATCH(), (
         (const GLfloat *)(pc +  0)
    ) );
d4882 2
a4883 1
int __glXDisp_AreProgramsResidentNV(__GLXclientState *cl, GLbyte *pc)
d4885 1
a4885 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4887 1
a4887 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4890 2
a4891 2
    if ( cx != NULL ) {
        const GLsizei n = *(GLsizei  *)(pc +  0);
d4895 6
a4900 6
        GLboolean * residences = __glXGetAnswerBuffer(cl, n, answerBuffer, sizeof(answerBuffer), 1);
        retval = CALL_AreProgramsResidentNV( GET_DISPATCH(), (
            n,
             (const GLuint *)(pc +  4),
            residences
        ) );
d4908 2
a4909 1
void __glXDisp_BindProgramNV(GLbyte * pc)
d4911 3
a4913 4
    CALL_BindProgramNV( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLuint   *)(pc +  4)
    ) );
d4916 2
a4917 1
int __glXDisp_DeleteProgramsNV(__GLXclientState *cl, GLbyte *pc)
d4919 1
a4919 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4921 1
a4921 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4924 2
a4925 2
    if ( cx != NULL ) {
        const GLsizei n = *(GLsizei  *)(pc +  0);
d4927 2
a4928 4
        CALL_DeleteProgramsNV( GET_DISPATCH(), (
            n,
             (const GLuint *)(pc +  4)
        ) );
d4935 2
a4936 1
void __glXDisp_ExecuteProgramNV(GLbyte * pc)
d4938 4
a4941 5
    CALL_ExecuteProgramNV( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLuint   *)(pc +  4),
         (const GLfloat *)(pc +  8)
    ) );
d4944 2
a4945 1
int __glXDisp_GenProgramsNV(__GLXclientState *cl, GLbyte *pc)
d4947 1
a4947 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4949 1
a4949 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4952 2
a4953 2
    if ( cx != NULL ) {
        const GLsizei n = *(GLsizei  *)(pc +  0);
d4956 4
a4959 5
        GLuint * programs = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
        CALL_GenProgramsNV( GET_DISPATCH(), (
            n,
            programs
        ) );
d4967 2
a4968 1
int __glXDisp_GetProgramParameterdvNV(__GLXclientState *cl, GLbyte *pc)
d4970 1
a4970 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4972 1
a4972 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4975 1
a4975 1
    if ( cx != NULL ) {
d4977 5
a4981 6
        CALL_GetProgramParameterdvNV( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            *(GLuint   *)(pc +  4),
            *(GLenum   *)(pc +  8),
            params
        ) );
d4989 2
a4990 1
int __glXDisp_GetProgramParameterfvNV(__GLXclientState *cl, GLbyte *pc)
d4992 1
a4992 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d4994 1
a4994 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d4997 1
a4997 1
    if ( cx != NULL ) {
d4999 5
a5003 6
        CALL_GetProgramParameterfvNV( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            *(GLuint   *)(pc +  4),
            *(GLenum   *)(pc +  8),
            params
        ) );
d5011 2
a5012 1
int __glXDisp_GetProgramivNV(__GLXclientState *cl, GLbyte *pc)
d5014 1
a5014 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5016 1
a5016 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5019 2
a5020 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d5024 3
a5026 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d5028 2
a5029 1
        if (params == NULL) return BadAlloc;
d5032 2
a5033 5
        CALL_GetProgramivNV( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0),
            pname,
            params
        ) );
d5041 2
a5042 1
int __glXDisp_GetTrackMatrixivNV(__GLXclientState *cl, GLbyte *pc)
d5044 1
a5044 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5046 1
a5046 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5049 1
a5049 1
    if ( cx != NULL ) {
d5051 4
a5054 6
        CALL_GetTrackMatrixivNV( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            *(GLuint   *)(pc +  4),
            *(GLenum   *)(pc +  8),
            params
        ) );
d5062 2
a5063 1
int __glXDisp_GetVertexAttribdvNV(__GLXclientState *cl, GLbyte *pc)
d5065 1
a5065 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5067 1
a5067 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5070 2
a5071 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d5075 3
a5077 1
        GLdouble * params = __glXGetAnswerBuffer(cl, compsize * 8, answerBuffer, sizeof(answerBuffer), 8);
d5079 2
a5080 1
        if (params == NULL) return BadAlloc;
d5083 2
a5084 5
        CALL_GetVertexAttribdvNV( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0),
            pname,
            params
        ) );
d5092 2
a5093 1
int __glXDisp_GetVertexAttribfvNV(__GLXclientState *cl, GLbyte *pc)
d5095 1
a5095 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5097 1
a5097 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5100 2
a5101 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d5105 3
a5107 1
        GLfloat * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d5109 2
a5110 1
        if (params == NULL) return BadAlloc;
d5113 2
a5114 5
        CALL_GetVertexAttribfvNV( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0),
            pname,
            params
        ) );
d5122 2
a5123 1
int __glXDisp_GetVertexAttribivNV(__GLXclientState *cl, GLbyte *pc)
d5125 1
a5125 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5127 1
a5127 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5130 2
a5131 2
    if ( cx != NULL ) {
        const GLenum pname = *(GLenum   *)(pc +  4);
d5135 3
a5137 1
        GLint * params = __glXGetAnswerBuffer(cl, compsize * 4, answerBuffer, sizeof(answerBuffer), 4);
d5139 2
a5140 1
        if (params == NULL) return BadAlloc;
d5143 2
a5144 5
        CALL_GetVertexAttribivNV( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0),
            pname,
            params
        ) );
d5152 2
a5153 1
int __glXDisp_IsProgramNV(__GLXclientState *cl, GLbyte *pc)
d5155 1
a5155 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5157 1
a5157 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5160 1
a5160 1
    if ( cx != NULL ) {
d5162 3
a5164 3
        retval = CALL_IsProgramNV( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0)
        ) );
d5172 2
a5173 1
void __glXDisp_LoadProgramNV(GLbyte * pc)
d5175 1
a5175 1
    const GLsizei len = *(GLsizei  *)(pc +  8);
d5177 4
a5180 6
    CALL_LoadProgramNV( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLuint   *)(pc +  4),
        len,
         (const GLubyte *)(pc + 12)
    ) );
d5183 2
a5184 1
void __glXDisp_ProgramParameters4dvNV(GLbyte * pc)
d5186 1
a5186 1
    const GLuint num = *(GLuint   *)(pc +  8);
d5190 3
a5192 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, cmdlen);
d5197 5
a5201 6
    CALL_ProgramParameters4dvNV( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLuint   *)(pc +  4),
        num,
         (const GLdouble *)(pc + 12)
    ) );
d5204 2
a5205 1
void __glXDisp_ProgramParameters4fvNV(GLbyte * pc)
d5207 1
a5207 1
    const GLuint num = *(GLuint   *)(pc +  8);
d5209 5
a5213 6
    CALL_ProgramParameters4fvNV( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLuint   *)(pc +  4),
        num,
         (const GLfloat *)(pc + 12)
    ) );
d5216 2
a5217 1
void __glXDisp_RequestResidentProgramsNV(GLbyte * pc)
d5219 1
a5219 1
    const GLsizei n = *(GLsizei  *)(pc +  0);
d5221 2
a5222 4
    CALL_RequestResidentProgramsNV( GET_DISPATCH(), (
        n,
         (const GLuint *)(pc +  4)
    ) );
d5225 2
a5226 1
void __glXDisp_TrackMatrixNV(GLbyte * pc)
d5228 5
a5232 6
    CALL_TrackMatrixNV( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLuint   *)(pc +  4),
        *(GLenum   *)(pc +  8),
        *(GLenum   *)(pc + 12)
    ) );
d5235 2
a5236 1
void __glXDisp_VertexAttrib1dvNV(GLbyte * pc)
d5239 2
a5240 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 12);
d5245 3
a5247 4
    CALL_VertexAttrib1dvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLdouble *)(pc +  4)
    ) );
d5250 2
a5251 1
void __glXDisp_VertexAttrib1fvNV(GLbyte * pc)
d5253 3
a5255 4
    CALL_VertexAttrib1fvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLfloat *)(pc +  4)
    ) );
d5258 2
a5259 1
void __glXDisp_VertexAttrib1svNV(GLbyte * pc)
d5261 3
a5263 4
    CALL_VertexAttrib1svNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLshort *)(pc +  4)
    ) );
d5266 2
a5267 1
void __glXDisp_VertexAttrib2dvNV(GLbyte * pc)
d5270 2
a5271 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 20);
d5276 3
a5278 4
    CALL_VertexAttrib2dvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLdouble *)(pc +  4)
    ) );
d5281 2
a5282 1
void __glXDisp_VertexAttrib2fvNV(GLbyte * pc)
d5284 3
a5286 4
    CALL_VertexAttrib2fvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLfloat *)(pc +  4)
    ) );
d5289 2
a5290 1
void __glXDisp_VertexAttrib2svNV(GLbyte * pc)
d5292 3
a5294 4
    CALL_VertexAttrib2svNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLshort *)(pc +  4)
    ) );
d5297 2
a5298 1
void __glXDisp_VertexAttrib3dvNV(GLbyte * pc)
d5301 2
a5302 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 28);
d5307 3
a5309 4
    CALL_VertexAttrib3dvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLdouble *)(pc +  4)
    ) );
d5312 2
a5313 1
void __glXDisp_VertexAttrib3fvNV(GLbyte * pc)
d5315 3
a5317 4
    CALL_VertexAttrib3fvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLfloat *)(pc +  4)
    ) );
d5320 2
a5321 1
void __glXDisp_VertexAttrib3svNV(GLbyte * pc)
d5323 3
a5325 4
    CALL_VertexAttrib3svNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLshort *)(pc +  4)
    ) );
d5328 2
a5329 1
void __glXDisp_VertexAttrib4dvNV(GLbyte * pc)
d5332 2
a5333 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, 36);
d5338 3
a5340 4
    CALL_VertexAttrib4dvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLdouble *)(pc +  4)
    ) );
d5343 2
a5344 1
void __glXDisp_VertexAttrib4fvNV(GLbyte * pc)
d5346 3
a5348 4
    CALL_VertexAttrib4fvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLfloat *)(pc +  4)
    ) );
d5351 2
a5352 1
void __glXDisp_VertexAttrib4svNV(GLbyte * pc)
d5354 3
a5356 4
    CALL_VertexAttrib4svNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLshort *)(pc +  4)
    ) );
d5359 2
a5360 1
void __glXDisp_VertexAttrib4ubvNV(GLbyte * pc)
d5362 3
a5364 4
    CALL_VertexAttrib4ubvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
         (const GLubyte *)(pc +  4)
    ) );
d5367 2
a5368 1
void __glXDisp_VertexAttribs1dvNV(GLbyte * pc)
d5370 1
a5370 1
    const GLsizei n = *(GLsizei  *)(pc +  4);
d5374 3
a5376 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, cmdlen);
d5381 3
a5383 5
    CALL_VertexAttribs1dvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
        n,
         (const GLdouble *)(pc +  8)
    ) );
d5386 2
a5387 1
void __glXDisp_VertexAttribs1fvNV(GLbyte * pc)
d5389 1
a5389 1
    const GLsizei n = *(GLsizei  *)(pc +  4);
d5391 3
a5393 5
    CALL_VertexAttribs1fvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
        n,
         (const GLfloat *)(pc +  8)
    ) );
d5396 2
a5397 1
void __glXDisp_VertexAttribs1svNV(GLbyte * pc)
d5399 1
a5399 1
    const GLsizei n = *(GLsizei  *)(pc +  4);
d5401 3
a5403 5
    CALL_VertexAttribs1svNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
        n,
         (const GLshort *)(pc +  8)
    ) );
d5406 2
a5407 1
void __glXDisp_VertexAttribs2dvNV(GLbyte * pc)
d5409 1
a5409 1
    const GLsizei n = *(GLsizei  *)(pc +  4);
d5413 3
a5415 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, cmdlen);
d5420 3
a5422 5
    CALL_VertexAttribs2dvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
        n,
         (const GLdouble *)(pc +  8)
    ) );
d5425 2
a5426 1
void __glXDisp_VertexAttribs2fvNV(GLbyte * pc)
d5428 1
a5428 1
    const GLsizei n = *(GLsizei  *)(pc +  4);
d5430 3
a5432 5
    CALL_VertexAttribs2fvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
        n,
         (const GLfloat *)(pc +  8)
    ) );
d5435 2
a5436 1
void __glXDisp_VertexAttribs2svNV(GLbyte * pc)
d5438 1
a5438 1
    const GLsizei n = *(GLsizei  *)(pc +  4);
d5440 3
a5442 5
    CALL_VertexAttribs2svNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
        n,
         (const GLshort *)(pc +  8)
    ) );
d5445 2
a5446 1
void __glXDisp_VertexAttribs3dvNV(GLbyte * pc)
d5448 1
a5448 1
    const GLsizei n = *(GLsizei  *)(pc +  4);
d5452 3
a5454 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, cmdlen);
d5459 3
a5461 5
    CALL_VertexAttribs3dvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
        n,
         (const GLdouble *)(pc +  8)
    ) );
d5464 2
a5465 1
void __glXDisp_VertexAttribs3fvNV(GLbyte * pc)
d5467 1
a5467 1
    const GLsizei n = *(GLsizei  *)(pc +  4);
d5469 3
a5471 5
    CALL_VertexAttribs3fvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
        n,
         (const GLfloat *)(pc +  8)
    ) );
d5474 2
a5475 1
void __glXDisp_VertexAttribs3svNV(GLbyte * pc)
d5477 1
a5477 1
    const GLsizei n = *(GLsizei  *)(pc +  4);
d5479 3
a5481 5
    CALL_VertexAttribs3svNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
        n,
         (const GLshort *)(pc +  8)
    ) );
d5484 2
a5485 1
void __glXDisp_VertexAttribs4dvNV(GLbyte * pc)
d5487 1
a5487 1
    const GLsizei n = *(GLsizei  *)(pc +  4);
d5491 3
a5493 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, cmdlen);
d5498 3
a5500 5
    CALL_VertexAttribs4dvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
        n,
         (const GLdouble *)(pc +  8)
    ) );
d5503 2
a5504 1
void __glXDisp_VertexAttribs4fvNV(GLbyte * pc)
d5506 1
a5506 1
    const GLsizei n = *(GLsizei  *)(pc +  4);
d5508 3
a5510 5
    CALL_VertexAttribs4fvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
        n,
         (const GLfloat *)(pc +  8)
    ) );
d5513 2
a5514 1
void __glXDisp_VertexAttribs4svNV(GLbyte * pc)
d5516 1
a5516 1
    const GLsizei n = *(GLsizei  *)(pc +  4);
d5518 3
a5520 5
    CALL_VertexAttribs4svNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
        n,
         (const GLshort *)(pc +  8)
    ) );
d5523 2
a5524 1
void __glXDisp_VertexAttribs4ubvNV(GLbyte * pc)
d5526 1
a5526 1
    const GLsizei n = *(GLsizei  *)(pc +  4);
d5528 3
a5530 5
    CALL_VertexAttribs4ubvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
        n,
         (const GLubyte *)(pc +  8)
    ) );
d5533 2
a5534 1
void __glXDisp_PointParameteriNV(GLbyte * pc)
d5536 3
a5538 4
    CALL_PointParameteriNV( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLint    *)(pc +  4)
    ) );
d5541 2
a5542 1
void __glXDisp_PointParameterivNV(GLbyte * pc)
d5544 2
a5545 2
    const GLenum pname = *(GLenum   *)(pc +  0);
    const GLint * params;
d5549 1
a5549 4
    CALL_PointParameterivNV( GET_DISPATCH(), (
        pname,
        params
    ) );
d5552 2
a5553 1
void __glXDisp_ActiveStencilFaceEXT(GLbyte * pc)
d5555 2
a5556 3
    CALL_ActiveStencilFaceEXT( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d5559 2
a5560 1
int __glXDisp_GetProgramNamedParameterdvNV(__GLXclientState *cl, GLbyte *pc)
d5562 1
a5562 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5564 1
a5564 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5567 2
a5568 2
    if ( cx != NULL ) {
        const GLsizei len = *(GLsizei  *)(pc +  4);
d5571 7
a5577 6
        CALL_GetProgramNamedParameterdvNV( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0),
            len,
             (const GLubyte *)(pc +  8),
            params
        ) );
d5585 2
a5586 1
int __glXDisp_GetProgramNamedParameterfvNV(__GLXclientState *cl, GLbyte *pc)
d5588 1
a5588 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5590 1
a5590 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5593 2
a5594 2
    if ( cx != NULL ) {
        const GLsizei len = *(GLsizei  *)(pc +  4);
d5597 7
a5603 6
        CALL_GetProgramNamedParameterfvNV( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0),
            len,
             (const GLubyte *)(pc +  8),
            params
        ) );
d5611 2
a5612 1
void __glXDisp_ProgramNamedParameter4dvNV(GLbyte * pc)
d5614 1
a5614 1
    const GLsizei len = *(GLsizei  *)(pc + 36);
d5618 3
a5620 2
    if ((unsigned long)(pc) & 7) {
        (void) memmove(pc-4, pc, cmdlen);
d5625 6
a5630 6
    CALL_ProgramNamedParameter4dvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc + 32),
        len,
         (const GLubyte *)(pc + 40),
         (const GLdouble *)(pc +  0)
    ) );
d5633 2
a5634 1
void __glXDisp_ProgramNamedParameter4fvNV(GLbyte * pc)
d5636 1
a5636 1
    const GLsizei len = *(GLsizei  *)(pc +  4);
d5638 6
a5643 6
    CALL_ProgramNamedParameter4fvNV( GET_DISPATCH(), (
        *(GLuint   *)(pc +  0),
        len,
         (const GLubyte *)(pc + 24),
         (const GLfloat *)(pc +  8)
    ) );
d5646 2
a5647 1
void __glXDisp_BlendEquationSeparateEXT(GLbyte * pc)
d5649 3
a5651 4
    CALL_BlendEquationSeparateEXT( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4)
    ) );
d5654 2
a5655 1
void __glXDisp_BindFramebufferEXT(GLbyte * pc)
d5657 3
a5659 4
    CALL_BindFramebufferEXT( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLuint   *)(pc +  4)
    ) );
d5662 2
a5663 1
void __glXDisp_BindRenderbufferEXT(GLbyte * pc)
d5665 3
a5667 4
    CALL_BindRenderbufferEXT( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLuint   *)(pc +  4)
    ) );
d5670 2
a5671 1
int __glXDisp_CheckFramebufferStatusEXT(__GLXclientState *cl, GLbyte *pc)
d5673 1
a5673 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5675 1
a5675 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5678 1
a5678 1
    if ( cx != NULL ) {
d5680 4
a5683 3
        retval = CALL_CheckFramebufferStatusEXT( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0)
        ) );
d5691 2
a5692 1
void __glXDisp_DeleteFramebuffersEXT(GLbyte * pc)
d5694 1
a5694 1
    const GLsizei n = *(GLsizei  *)(pc +  0);
d5696 2
a5697 4
    CALL_DeleteFramebuffersEXT( GET_DISPATCH(), (
        n,
         (const GLuint *)(pc +  4)
    ) );
d5700 2
a5701 1
void __glXDisp_DeleteRenderbuffersEXT(GLbyte * pc)
d5703 1
a5703 1
    const GLsizei n = *(GLsizei  *)(pc +  0);
d5705 2
a5706 4
    CALL_DeleteRenderbuffersEXT( GET_DISPATCH(), (
        n,
         (const GLuint *)(pc +  4)
    ) );
d5709 2
a5710 1
void __glXDisp_FramebufferRenderbufferEXT(GLbyte * pc)
d5712 5
a5716 6
    CALL_FramebufferRenderbufferEXT( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLenum   *)(pc +  8),
        *(GLuint   *)(pc + 12)
    ) );
d5719 2
a5720 1
void __glXDisp_FramebufferTexture1DEXT(GLbyte * pc)
d5722 6
a5727 7
    CALL_FramebufferTexture1DEXT( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLenum   *)(pc +  8),
        *(GLuint   *)(pc + 12),
        *(GLint    *)(pc + 16)
    ) );
d5730 2
a5731 1
void __glXDisp_FramebufferTexture2DEXT(GLbyte * pc)
d5733 6
a5738 7
    CALL_FramebufferTexture2DEXT( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLenum   *)(pc +  8),
        *(GLuint   *)(pc + 12),
        *(GLint    *)(pc + 16)
    ) );
d5741 2
a5742 1
void __glXDisp_FramebufferTexture3DEXT(GLbyte * pc)
d5744 7
a5750 8
    CALL_FramebufferTexture3DEXT( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLenum   *)(pc +  8),
        *(GLuint   *)(pc + 12),
        *(GLint    *)(pc + 16),
        *(GLint    *)(pc + 20)
    ) );
d5753 2
a5754 1
int __glXDisp_GenFramebuffersEXT(__GLXclientState *cl, GLbyte *pc)
d5756 1
a5756 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5758 1
a5758 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5761 2
a5762 2
    if ( cx != NULL ) {
        const GLsizei n = *(GLsizei  *)(pc +  0);
d5765 4
a5768 5
        GLuint * framebuffers = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
        CALL_GenFramebuffersEXT( GET_DISPATCH(), (
            n,
            framebuffers
        ) );
d5776 2
a5777 1
int __glXDisp_GenRenderbuffersEXT(__GLXclientState *cl, GLbyte *pc)
d5779 1
a5779 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5781 1
a5781 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5784 2
a5785 2
    if ( cx != NULL ) {
        const GLsizei n = *(GLsizei  *)(pc +  0);
d5788 4
a5791 5
        GLuint * renderbuffers = __glXGetAnswerBuffer(cl, n * 4, answerBuffer, sizeof(answerBuffer), 4);
        CALL_GenRenderbuffersEXT( GET_DISPATCH(), (
            n,
            renderbuffers
        ) );
d5799 2
a5800 1
void __glXDisp_GenerateMipmapEXT(GLbyte * pc)
d5802 2
a5803 3
    CALL_GenerateMipmapEXT( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0)
    ) );
d5806 3
a5808 1
int __glXDisp_GetFramebufferAttachmentParameterivEXT(__GLXclientState *cl, GLbyte *pc)
d5810 1
a5810 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5812 1
a5812 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5815 1
a5815 1
    if ( cx != NULL ) {
d5817 6
a5822 6
        CALL_GetFramebufferAttachmentParameterivEXT( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            *(GLenum   *)(pc +  4),
            *(GLenum   *)(pc +  8),
            params
        ) );
d5830 2
a5831 1
int __glXDisp_GetRenderbufferParameterivEXT(__GLXclientState *cl, GLbyte *pc)
d5833 1
a5833 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5835 1
a5835 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5838 1
a5838 1
    if ( cx != NULL ) {
d5840 4
a5843 5
        CALL_GetRenderbufferParameterivEXT( GET_DISPATCH(), (
            *(GLenum   *)(pc +  0),
            *(GLenum   *)(pc +  4),
            params
        ) );
d5851 2
a5852 1
int __glXDisp_IsFramebufferEXT(__GLXclientState *cl, GLbyte *pc)
d5854 1
a5854 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5856 1
a5856 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5859 1
a5859 1
    if ( cx != NULL ) {
d5861 3
a5863 3
        retval = CALL_IsFramebufferEXT( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0)
        ) );
d5871 2
a5872 1
int __glXDisp_IsRenderbufferEXT(__GLXclientState *cl, GLbyte *pc)
d5874 1
a5874 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
d5876 1
a5876 1
    __GLXcontext * const cx = __glXForceCurrent(cl, req->contextTag, &error);
d5879 1
a5879 1
    if ( cx != NULL ) {
d5881 3
a5883 3
        retval = CALL_IsRenderbufferEXT( GET_DISPATCH(), (
            *(GLuint   *)(pc +  0)
        ) );
d5891 2
a5892 1
void __glXDisp_RenderbufferStorageEXT(GLbyte * pc)
d5894 32
a5925 6
    CALL_RenderbufferStorageEXT( GET_DISPATCH(), (
        *(GLenum   *)(pc +  0),
        *(GLenum   *)(pc +  4),
        *(GLsizei  *)(pc +  8),
        *(GLsizei  *)(pc + 12)
    ) );
a5926 1

@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a100 2
    lists = (const GLvoid *) (pc + 8);

d3744 1
a3744 1
    const GLvoid * const pixels = (const GLvoid *) (ptr_is_null != 0) ? NULL : (pc + 80);
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d39 1
a40 1
#include "glapi.h"
d2975 1
a2975 2
    const CARD32 ptr_is_null = *(CARD32 *)(pc + 52);
    const GLvoid * const pixels = (const GLvoid *) (ptr_is_null != 0) ? NULL : (pc + 56);
d2998 1
a2998 2
    const CARD32 ptr_is_null = *(CARD32 *)(pc + 52);
    const GLvoid * const pixels = (const GLvoid *) (ptr_is_null != 0) ? NULL : (pc + 56);
d3774 1
a3774 2
    const CARD32 ptr_is_null = *(CARD32 *)(pc + 84);
    const GLvoid * const pixels = (const GLvoid *) (ptr_is_null != 0) ? NULL : (pc + 88);
@

