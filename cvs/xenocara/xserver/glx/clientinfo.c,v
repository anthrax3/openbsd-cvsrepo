head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.12
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.10
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.2.0.6
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.12.21.11.41.45;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	OOAr3LJJfv7DyAHR;

1.3
date	2014.12.09.17.58.52;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	vcnjRBuLQw44cPHf;

1.2
date	2013.06.07.17.28.47;	author matthieu;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2012.06.10.13.21.21;	author matthieu;	state Exp;
branches;
next	;

1.2.4.1
date	2014.12.09.18.00.12;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.2.6.1
date	2014.12.09.17.59.32;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.4
log
@Update to xorg-server  1.16.3.

Most of the 1.16.2->1.16.3 changes are the security patches that
where already there. This adds some extra fixes plus a few unrelated
bug fixes.
@
text
@/*
 * Copyright Â© 2011 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "glxserver.h"
#include "indirect_dispatch.h"
#include "glxbyteorder.h"
#include "unpack.h"

static int
set_client_info(__GLXclientState * cl, xGLXSetClientInfoARBReq * req,
                unsigned bytes_per_version)
{
    ClientPtr client = cl->client;
    char *gl_extensions;
    char *glx_extensions;
    int size;

    REQUEST_AT_LEAST_SIZE(xGLXSetClientInfoARBReq);

    /* Verify that the size of the packet matches the size inferred from the
     * sizes specified for the various fields.
     */
    size = sz_xGLXSetClientInfoARBReq;
    size = safe_add(size, safe_mul(req->numVersions, bytes_per_version));
    size = safe_add(size, safe_pad(req->numGLExtensionBytes));
    size = safe_add(size, safe_pad(req->numGLXExtensionBytes));

    if (size < 0 || req->length != (size / 4))
        return BadLength;

    /* Verify that the actual length of the GL extension string matches what's
     * encoded in protocol packet.
     */
    gl_extensions = (char *) (req + 1) + (req->numVersions * bytes_per_version);
    if (req->numGLExtensionBytes != 0
        && memchr(gl_extensions, 0,
                  __GLX_PAD(req->numGLExtensionBytes)) == NULL)
        return BadLength;

    /* Verify that the actual length of the GLX extension string matches
     * what's encoded in protocol packet.
     */
    glx_extensions = gl_extensions + __GLX_PAD(req->numGLExtensionBytes);
    if (req->numGLXExtensionBytes != 0
        && memchr(glx_extensions, 0,
                  __GLX_PAD(req->numGLXExtensionBytes)) == NULL)
        return BadLength;

    free(cl->GLClientextensions);
    cl->GLClientextensions = strdup(gl_extensions);

    return 0;
}

int
__glXDisp_SetClientInfoARB(__GLXclientState * cl, GLbyte * pc)
{
    return set_client_info(cl, (xGLXSetClientInfoARBReq *) pc, 8);
}

int
__glXDispSwap_SetClientInfoARB(__GLXclientState * cl, GLbyte * pc)
{
    ClientPtr client = cl->client;
    xGLXSetClientInfoARBReq *req = (xGLXSetClientInfoARBReq *) pc;

    REQUEST_AT_LEAST_SIZE(xGLXSetClientInfoARBReq);

    req->length = bswap_16(req->length);
    req->numVersions = bswap_32(req->numVersions);
    req->numGLExtensionBytes = bswap_32(req->numGLExtensionBytes);
    req->numGLXExtensionBytes = bswap_32(req->numGLXExtensionBytes);

    return __glXDisp_SetClientInfoARB(cl, pc);
}

int
__glXDisp_SetClientInfo2ARB(__GLXclientState * cl, GLbyte * pc)
{
    return set_client_info(cl, (xGLXSetClientInfoARBReq *) pc, 12);
}

int
__glXDispSwap_SetClientInfo2ARB(__GLXclientState * cl, GLbyte * pc)
{
    ClientPtr client = cl->client;
    xGLXSetClientInfoARBReq *req = (xGLXSetClientInfoARBReq *) pc;

    REQUEST_AT_LEAST_SIZE(xGLXSetClientInfoARBReq);

    req->length = bswap_16(req->length);
    req->numVersions = bswap_32(req->numVersions);
    req->numGLExtensionBytes = bswap_32(req->numGLExtensionBytes);
    req->numGLXExtensionBytes = bswap_32(req->numGLXExtensionBytes);

    return __glXDisp_SetClientInfo2ARB(cl, pc);
}
@


1.3
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d39 1
d46 1
a46 1
    int size = sz_xGLXSetClientInfoARBReq;
@


1.2
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d36 1
d40 2
d45 4
a48 4
    const unsigned expected_size = sz_xGLXSetClientInfoARBReq
        + (req->numVersions * bytes_per_version)
        + __GLX_PAD(req->numGLExtensionBytes)
        + __GLX_PAD(req->numGLXExtensionBytes);
d50 1
a50 1
    if (req->length != (expected_size / 4))
d86 1
d89 2
d108 1
d110 2
@


1.2.4.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a35 1
    ClientPtr client = cl->client;
a38 2
    REQUEST_AT_LEAST_SIZE(xGLXSetClientInfoARBReq);

d42 4
a45 4
    int size = sz_xGLXSetClientInfoARBReq;
    size = safe_add(size, safe_mul(req->numVersions, bytes_per_version));
    size = safe_add(size, safe_pad(req->numGLExtensionBytes));
    size = safe_add(size, safe_pad(req->numGLXExtensionBytes));
d47 1
a47 1
    if (size < 0 || req->length != (size / 4))
a82 1
    ClientPtr client = cl->client;
a84 2
    REQUEST_AT_LEAST_SIZE(xGLXSetClientInfoARBReq);

a101 1
    ClientPtr client = cl->client;
a102 2

    REQUEST_AT_LEAST_SIZE(xGLXSetClientInfoARBReq);
@


1.2.6.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a35 1
    ClientPtr client = cl->client;
a38 2
    REQUEST_AT_LEAST_SIZE(xGLXSetClientInfoARBReq);

d42 4
a45 4
    int size = sz_xGLXSetClientInfoARBReq;
    size = safe_add(size, safe_mul(req->numVersions, bytes_per_version));
    size = safe_add(size, safe_pad(req->numGLExtensionBytes));
    size = safe_add(size, safe_pad(req->numGLXExtensionBytes));
d47 1
a47 1
    if (size < 0 || req->length != (size / 4))
a82 1
    ClientPtr client = cl->client;
a84 2
    REQUEST_AT_LEAST_SIZE(xGLXSetClientInfoARBReq);

a101 1
    ClientPtr client = cl->client;
a102 2

    REQUEST_AT_LEAST_SIZE(xGLXSetClientInfoARBReq);
@


1.1
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d29 44
d77 1
a77 1
    return BadRequest;
d83 8
a90 1
    return BadRequest;
d96 1
a96 1
    return BadRequest;
d102 8
a109 1
    return BadRequest;
@

