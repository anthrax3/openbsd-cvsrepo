head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.09.16.19.10.21;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Te1daavkBLskZ8gc;

1.6
date	2014.12.09.17.58.52;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	vcnjRBuLQw44cPHf;

1.5
date	2014.05.02.19.27.47;	author matthieu;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	2010.07.27.19.02.26;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.14;	author matthieu;	state Exp;
branches;
next	;

1.4.8.1
date	2014.12.09.18.00.12;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.5.2.1
date	2014.12.09.17.59.32;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.7
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/* DO NOT EDIT - This file generated automatically by glX_proto_size.py (from Mesa) script */

/*
 * (C) Copyright IBM Corporation 2005
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sub license,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * IBM,
 * AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <GL/gl.h>
#include "glxserver.h"
#include "glxbyteorder.h"
#include "indirect_size.h"
#include "indirect_reqsize.h"

#if defined(__CYGWIN__) || defined(__MINGW32__)
#undef HAVE_ALIAS
#endif
#ifdef HAVE_ALIAS
#define ALIAS2(from,to) \
    GLint __glX ## from ## ReqSize( const GLbyte * pc, Bool swap, int reqlen ) \
        __attribute__ ((alias( # to )));
#define ALIAS(from,to) ALIAS2( from, __glX ## to ## ReqSize )
#else
#define ALIAS(from,to) \
    GLint __glX ## from ## ReqSize( const GLbyte * pc, Bool swap, int reqlen ) \
    { return __glX ## to ## ReqSize( pc, swap, reqlen ); }
#endif

int
__glXCallListsReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei n = *(GLsizei *) (pc + 0);
    GLenum type = *(GLenum *) (pc + 4);
    GLsizei compsize;

    if (swap) {
        n = bswap_32(n);
        type = bswap_32(type);
    }

    compsize = __glCallLists_size(type);
    return safe_pad(safe_mul(compsize, n));
}

int
__glXBitmapReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLint row_length = *(GLint *) (pc + 4);
    GLint image_height = 0;
    GLint skip_images = 0;
    GLint skip_rows = *(GLint *) (pc + 8);
    GLint alignment = *(GLint *) (pc + 16);
    GLsizei width = *(GLsizei *) (pc + 20);
    GLsizei height = *(GLsizei *) (pc + 24);

    if (swap) {
        row_length = bswap_32(row_length);
        skip_rows = bswap_32(skip_rows);
        alignment = bswap_32(alignment);
        width = bswap_32(width);
        height = bswap_32(height);
    }

    return __glXImageSize(GL_COLOR_INDEX, GL_BITMAP, 0, width, height, 1,
                          image_height, row_length, skip_images,
                          skip_rows, alignment);
}

int
__glXFogfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLenum pname = *(GLenum *) (pc + 0);
    GLsizei compsize;

    if (swap) {
        pname = bswap_32(pname);
    }

    compsize = __glFogfv_size(pname);
    return safe_pad(safe_mul(compsize, 4));
}

int
__glXLightfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLenum pname = *(GLenum *) (pc + 4);
    GLsizei compsize;

    if (swap) {
        pname = bswap_32(pname);
    }

    compsize = __glLightfv_size(pname);
    return safe_pad(safe_mul(compsize, 4));
}

int
__glXLightModelfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLenum pname = *(GLenum *) (pc + 0);
    GLsizei compsize;

    if (swap) {
        pname = bswap_32(pname);
    }

    compsize = __glLightModelfv_size(pname);
    return safe_pad(safe_mul(compsize, 4));
}

int
__glXMaterialfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLenum pname = *(GLenum *) (pc + 4);
    GLsizei compsize;

    if (swap) {
        pname = bswap_32(pname);
    }

    compsize = __glMaterialfv_size(pname);
    return safe_pad(safe_mul(compsize, 4));
}

int
__glXPolygonStippleReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLint row_length = *(GLint *) (pc + 4);
    GLint image_height = 0;
    GLint skip_images = 0;
    GLint skip_rows = *(GLint *) (pc + 8);
    GLint alignment = *(GLint *) (pc + 16);

    if (swap) {
        row_length = bswap_32(row_length);
        skip_rows = bswap_32(skip_rows);
        alignment = bswap_32(alignment);
    }

    return __glXImageSize(GL_COLOR_INDEX, GL_BITMAP, 0, 32, 32, 1,
                          image_height, row_length, skip_images,
                          skip_rows, alignment);
}

int
__glXTexParameterfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLenum pname = *(GLenum *) (pc + 4);
    GLsizei compsize;

    if (swap) {
        pname = bswap_32(pname);
    }

    compsize = __glTexParameterfv_size(pname);
    return safe_pad(safe_mul(compsize, 4));
}

int
__glXTexImage1DReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLint row_length = *(GLint *) (pc + 4);
    GLint image_height = 0;
    GLint skip_images = 0;
    GLint skip_rows = *(GLint *) (pc + 8);
    GLint alignment = *(GLint *) (pc + 16);
    GLenum target = *(GLenum *) (pc + 20);
    GLsizei width = *(GLsizei *) (pc + 32);
    GLenum format = *(GLenum *) (pc + 44);
    GLenum type = *(GLenum *) (pc + 48);

    if (swap) {
        row_length = bswap_32(row_length);
        skip_rows = bswap_32(skip_rows);
        alignment = bswap_32(alignment);
        target = bswap_32(target);
        width = bswap_32(width);
        format = bswap_32(format);
        type = bswap_32(type);
    }

    return __glXImageSize(format, type, target, width, 1, 1,
                          image_height, row_length, skip_images,
                          skip_rows, alignment);
}

int
__glXTexImage2DReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLint row_length = *(GLint *) (pc + 4);
    GLint image_height = 0;
    GLint skip_images = 0;
    GLint skip_rows = *(GLint *) (pc + 8);
    GLint alignment = *(GLint *) (pc + 16);
    GLenum target = *(GLenum *) (pc + 20);
    GLsizei width = *(GLsizei *) (pc + 32);
    GLsizei height = *(GLsizei *) (pc + 36);
    GLenum format = *(GLenum *) (pc + 44);
    GLenum type = *(GLenum *) (pc + 48);

    if (swap) {
        row_length = bswap_32(row_length);
        skip_rows = bswap_32(skip_rows);
        alignment = bswap_32(alignment);
        target = bswap_32(target);
        width = bswap_32(width);
        height = bswap_32(height);
        format = bswap_32(format);
        type = bswap_32(type);
    }

    return __glXImageSize(format, type, target, width, height, 1,
                          image_height, row_length, skip_images,
                          skip_rows, alignment);
}

int
__glXTexEnvfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLenum pname = *(GLenum *) (pc + 4);
    GLsizei compsize;

    if (swap) {
        pname = bswap_32(pname);
    }

    compsize = __glTexEnvfv_size(pname);
    return safe_pad(safe_mul(compsize, 4));
}

int
__glXTexGendvReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLenum pname = *(GLenum *) (pc + 4);
    GLsizei compsize;

    if (swap) {
        pname = bswap_32(pname);
    }

    compsize = __glTexGendv_size(pname);
    return safe_pad(safe_mul(compsize, 8));
}

int
__glXTexGenfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLenum pname = *(GLenum *) (pc + 4);
    GLsizei compsize;

    if (swap) {
        pname = bswap_32(pname);
    }

    compsize = __glTexGenfv_size(pname);
    return safe_pad(safe_mul(compsize, 4));
}

int
__glXPixelMapfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei mapsize = *(GLsizei *) (pc + 4);

    if (swap) {
        mapsize = bswap_32(mapsize);
    }

    return safe_pad(safe_mul(mapsize, 4));
}

int
__glXPixelMapusvReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei mapsize = *(GLsizei *) (pc + 4);

    if (swap) {
        mapsize = bswap_32(mapsize);
    }

    return safe_pad(safe_mul(mapsize, 2));
}

int
__glXDrawPixelsReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLint row_length = *(GLint *) (pc + 4);
    GLint image_height = 0;
    GLint skip_images = 0;
    GLint skip_rows = *(GLint *) (pc + 8);
    GLint alignment = *(GLint *) (pc + 16);
    GLsizei width = *(GLsizei *) (pc + 20);
    GLsizei height = *(GLsizei *) (pc + 24);
    GLenum format = *(GLenum *) (pc + 28);
    GLenum type = *(GLenum *) (pc + 32);

    if (swap) {
        row_length = bswap_32(row_length);
        skip_rows = bswap_32(skip_rows);
        alignment = bswap_32(alignment);
        width = bswap_32(width);
        height = bswap_32(height);
        format = bswap_32(format);
        type = bswap_32(type);
    }

    return __glXImageSize(format, type, 0, width, height, 1,
                          image_height, row_length, skip_images,
                          skip_rows, alignment);
}

int
__glXPrioritizeTexturesReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei n = *(GLsizei *) (pc + 0);

    if (swap) {
        n = bswap_32(n);
    }

    return safe_pad(safe_add(safe_mul(n, 4), safe_mul(n, 4)));
}

int
__glXTexSubImage1DReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLint row_length = *(GLint *) (pc + 4);
    GLint image_height = 0;
    GLint skip_images = 0;
    GLint skip_rows = *(GLint *) (pc + 8);
    GLint alignment = *(GLint *) (pc + 16);
    GLenum target = *(GLenum *) (pc + 20);
    GLsizei width = *(GLsizei *) (pc + 36);
    GLenum format = *(GLenum *) (pc + 44);
    GLenum type = *(GLenum *) (pc + 48);

    if (swap) {
        row_length = bswap_32(row_length);
        skip_rows = bswap_32(skip_rows);
        alignment = bswap_32(alignment);
        target = bswap_32(target);
        width = bswap_32(width);
        format = bswap_32(format);
        type = bswap_32(type);
    }

    return __glXImageSize(format, type, target, width, 1, 1,
                          image_height, row_length, skip_images,
                          skip_rows, alignment);
}

int
__glXTexSubImage2DReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLint row_length = *(GLint *) (pc + 4);
    GLint image_height = 0;
    GLint skip_images = 0;
    GLint skip_rows = *(GLint *) (pc + 8);
    GLint alignment = *(GLint *) (pc + 16);
    GLenum target = *(GLenum *) (pc + 20);
    GLsizei width = *(GLsizei *) (pc + 36);
    GLsizei height = *(GLsizei *) (pc + 40);
    GLenum format = *(GLenum *) (pc + 44);
    GLenum type = *(GLenum *) (pc + 48);

    if (swap) {
        row_length = bswap_32(row_length);
        skip_rows = bswap_32(skip_rows);
        alignment = bswap_32(alignment);
        target = bswap_32(target);
        width = bswap_32(width);
        height = bswap_32(height);
        format = bswap_32(format);
        type = bswap_32(type);
    }

    return __glXImageSize(format, type, target, width, height, 1,
                          image_height, row_length, skip_images,
                          skip_rows, alignment);
}

int
__glXColorTableReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLint row_length = *(GLint *) (pc + 4);
    GLint image_height = 0;
    GLint skip_images = 0;
    GLint skip_rows = *(GLint *) (pc + 8);
    GLint alignment = *(GLint *) (pc + 16);
    GLenum target = *(GLenum *) (pc + 20);
    GLsizei width = *(GLsizei *) (pc + 28);
    GLenum format = *(GLenum *) (pc + 32);
    GLenum type = *(GLenum *) (pc + 36);

    if (swap) {
        row_length = bswap_32(row_length);
        skip_rows = bswap_32(skip_rows);
        alignment = bswap_32(alignment);
        target = bswap_32(target);
        width = bswap_32(width);
        format = bswap_32(format);
        type = bswap_32(type);
    }

    return __glXImageSize(format, type, target, width, 1, 1,
                          image_height, row_length, skip_images,
                          skip_rows, alignment);
}

int
__glXColorTableParameterfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLenum pname = *(GLenum *) (pc + 4);
    GLsizei compsize;

    if (swap) {
        pname = bswap_32(pname);
    }

    compsize = __glColorTableParameterfv_size(pname);
    return safe_pad(safe_mul(compsize, 4));
}

int
__glXColorSubTableReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLint row_length = *(GLint *) (pc + 4);
    GLint image_height = 0;
    GLint skip_images = 0;
    GLint skip_rows = *(GLint *) (pc + 8);
    GLint alignment = *(GLint *) (pc + 16);
    GLenum target = *(GLenum *) (pc + 20);
    GLsizei count = *(GLsizei *) (pc + 28);
    GLenum format = *(GLenum *) (pc + 32);
    GLenum type = *(GLenum *) (pc + 36);

    if (swap) {
        row_length = bswap_32(row_length);
        skip_rows = bswap_32(skip_rows);
        alignment = bswap_32(alignment);
        target = bswap_32(target);
        count = bswap_32(count);
        format = bswap_32(format);
        type = bswap_32(type);
    }

    return __glXImageSize(format, type, target, count, 1, 1,
                          image_height, row_length, skip_images,
                          skip_rows, alignment);
}

int
__glXConvolutionFilter1DReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLint row_length = *(GLint *) (pc + 4);
    GLint image_height = 0;
    GLint skip_images = 0;
    GLint skip_rows = *(GLint *) (pc + 8);
    GLint alignment = *(GLint *) (pc + 16);
    GLenum target = *(GLenum *) (pc + 20);
    GLsizei width = *(GLsizei *) (pc + 28);
    GLenum format = *(GLenum *) (pc + 36);
    GLenum type = *(GLenum *) (pc + 40);

    if (swap) {
        row_length = bswap_32(row_length);
        skip_rows = bswap_32(skip_rows);
        alignment = bswap_32(alignment);
        target = bswap_32(target);
        width = bswap_32(width);
        format = bswap_32(format);
        type = bswap_32(type);
    }

    return __glXImageSize(format, type, target, width, 1, 1,
                          image_height, row_length, skip_images,
                          skip_rows, alignment);
}

int
__glXConvolutionFilter2DReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLint row_length = *(GLint *) (pc + 4);
    GLint image_height = 0;
    GLint skip_images = 0;
    GLint skip_rows = *(GLint *) (pc + 8);
    GLint alignment = *(GLint *) (pc + 16);
    GLenum target = *(GLenum *) (pc + 20);
    GLsizei width = *(GLsizei *) (pc + 28);
    GLsizei height = *(GLsizei *) (pc + 32);
    GLenum format = *(GLenum *) (pc + 36);
    GLenum type = *(GLenum *) (pc + 40);

    if (swap) {
        row_length = bswap_32(row_length);
        skip_rows = bswap_32(skip_rows);
        alignment = bswap_32(alignment);
        target = bswap_32(target);
        width = bswap_32(width);
        height = bswap_32(height);
        format = bswap_32(format);
        type = bswap_32(type);
    }

    return __glXImageSize(format, type, target, width, height, 1,
                          image_height, row_length, skip_images,
                          skip_rows, alignment);
}

int
__glXConvolutionParameterfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLenum pname = *(GLenum *) (pc + 4);
    GLsizei compsize;

    if (swap) {
        pname = bswap_32(pname);
    }

    compsize = __glConvolutionParameterfv_size(pname);
    return safe_pad(safe_mul(compsize, 4));
}

int
__glXTexImage3DReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLint row_length = *(GLint *) (pc + 4);
    GLint image_height = *(GLint *) (pc + 8);
    GLint skip_rows = *(GLint *) (pc + 16);
    GLint skip_images = *(GLint *) (pc + 20);
    GLint alignment = *(GLint *) (pc + 32);
    GLenum target = *(GLenum *) (pc + 36);
    GLsizei width = *(GLsizei *) (pc + 48);
    GLsizei height = *(GLsizei *) (pc + 52);
    GLsizei depth = *(GLsizei *) (pc + 56);
    GLenum format = *(GLenum *) (pc + 68);
    GLenum type = *(GLenum *) (pc + 72);

    if (swap) {
        row_length = bswap_32(row_length);
        image_height = bswap_32(image_height);
        skip_rows = bswap_32(skip_rows);
        skip_images = bswap_32(skip_images);
        alignment = bswap_32(alignment);
        target = bswap_32(target);
        width = bswap_32(width);
        height = bswap_32(height);
        depth = bswap_32(depth);
        format = bswap_32(format);
        type = bswap_32(type);
    }

    if (*(CARD32 *) (pc + 76))
        return 0;

    return __glXImageSize(format, type, target, width, height, depth,
                          image_height, row_length, skip_images,
                          skip_rows, alignment);
}

int
__glXTexSubImage3DReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLint row_length = *(GLint *) (pc + 4);
    GLint image_height = *(GLint *) (pc + 8);
    GLint skip_rows = *(GLint *) (pc + 16);
    GLint skip_images = *(GLint *) (pc + 20);
    GLint alignment = *(GLint *) (pc + 32);
    GLenum target = *(GLenum *) (pc + 36);
    GLsizei width = *(GLsizei *) (pc + 60);
    GLsizei height = *(GLsizei *) (pc + 64);
    GLsizei depth = *(GLsizei *) (pc + 68);
    GLenum format = *(GLenum *) (pc + 76);
    GLenum type = *(GLenum *) (pc + 80);

    if (swap) {
        row_length = bswap_32(row_length);
        image_height = bswap_32(image_height);
        skip_rows = bswap_32(skip_rows);
        skip_images = bswap_32(skip_images);
        alignment = bswap_32(alignment);
        target = bswap_32(target);
        width = bswap_32(width);
        height = bswap_32(height);
        depth = bswap_32(depth);
        format = bswap_32(format);
        type = bswap_32(type);
    }

    return __glXImageSize(format, type, target, width, height, depth,
                          image_height, row_length, skip_images,
                          skip_rows, alignment);
}

int
__glXCompressedTexImage1DReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei imageSize = *(GLsizei *) (pc + 20);

    if (swap) {
        imageSize = bswap_32(imageSize);
    }

    return safe_pad(imageSize);
}

int
__glXCompressedTexImage2DReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei imageSize = *(GLsizei *) (pc + 24);

    if (swap) {
        imageSize = bswap_32(imageSize);
    }

    return safe_pad(imageSize);
}

int
__glXCompressedTexImage3DReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei imageSize = *(GLsizei *) (pc + 28);

    if (swap) {
        imageSize = bswap_32(imageSize);
    }

    return safe_pad(imageSize);
}

int
__glXCompressedTexSubImage3DReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei imageSize = *(GLsizei *) (pc + 36);

    if (swap) {
        imageSize = bswap_32(imageSize);
    }

    return safe_pad(imageSize);
}

int
__glXPointParameterfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLenum pname = *(GLenum *) (pc + 0);
    GLsizei compsize;

    if (swap) {
        pname = bswap_32(pname);
    }

    compsize = __glPointParameterfv_size(pname);
    return safe_pad(safe_mul(compsize, 4));
}

int
__glXDrawBuffersReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei n = *(GLsizei *) (pc + 0);

    if (swap) {
        n = bswap_32(n);
    }

    return safe_pad(safe_mul(n, 4));
}

int
__glXProgramStringARBReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei len = *(GLsizei *) (pc + 8);

    if (swap) {
        len = bswap_32(len);
    }

    return safe_pad(len);
}

int
__glXVertexAttribs1dvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei n = *(GLsizei *) (pc + 4);

    if (swap) {
        n = bswap_32(n);
    }

    return safe_pad(safe_mul(n, 8));
}

int
__glXVertexAttribs2dvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei n = *(GLsizei *) (pc + 4);

    if (swap) {
        n = bswap_32(n);
    }

    return safe_pad(safe_mul(n, 16));
}

int
__glXVertexAttribs3dvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei n = *(GLsizei *) (pc + 4);

    if (swap) {
        n = bswap_32(n);
    }

    return safe_pad(safe_mul(n, 24));
}

int
__glXVertexAttribs3fvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei n = *(GLsizei *) (pc + 4);

    if (swap) {
        n = bswap_32(n);
    }

    return safe_pad(safe_mul(n, 12));
}

int
__glXVertexAttribs3svNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei n = *(GLsizei *) (pc + 4);

    if (swap) {
        n = bswap_32(n);
    }

    return safe_pad(safe_mul(n, 6));
}

int
__glXVertexAttribs4dvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
{
    GLsizei n = *(GLsizei *) (pc + 4);

    if (swap) {
        n = bswap_32(n);
    }

    return safe_pad(safe_mul(n, 32));
}

ALIAS(Fogiv, Fogfv)
    ALIAS(Lightiv, Lightfv)
    ALIAS(LightModeliv, LightModelfv)
    ALIAS(Materialiv, Materialfv)
    ALIAS(TexParameteriv, TexParameterfv)
    ALIAS(TexEnviv, TexEnvfv)
    ALIAS(TexGeniv, TexGenfv)
    ALIAS(PixelMapuiv, PixelMapfv)
    ALIAS(ColorTableParameteriv, ColorTableParameterfv)
    ALIAS(ConvolutionParameteriv, ConvolutionParameterfv)
    ALIAS(CompressedTexSubImage1D, CompressedTexImage1D)
    ALIAS(CompressedTexSubImage2D, CompressedTexImage3D)
    ALIAS(PointParameteriv, PointParameterfv)
    ALIAS(DeleteFramebuffers, DrawBuffers)
    ALIAS(DeleteRenderbuffers, DrawBuffers)
    ALIAS(VertexAttribs1fvNV, PixelMapfv)
    ALIAS(VertexAttribs1svNV, PixelMapusv)
    ALIAS(VertexAttribs2fvNV, VertexAttribs1dvNV)
    ALIAS(VertexAttribs2svNV, PixelMapfv)
    ALIAS(VertexAttribs4fvNV, VertexAttribs2dvNV)
    ALIAS(VertexAttribs4svNV, VertexAttribs1dvNV)
    ALIAS(VertexAttribs4ubvNV, PixelMapfv)
@


1.6
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d6 1
a6 1
 * 
d13 1
a13 1
 * 
d17 1
a17 1
 * 
@


1.5
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@a33 2
#define __GLX_PAD(x)  (((x) + 3) & ~3)

d39 1
a39 1
    GLint __glX ## from ## ReqSize( const GLbyte * pc, Bool swap ) \
d44 2
a45 2
    GLint __glX ## from ## ReqSize( const GLbyte * pc, Bool swap ) \
    { return __glX ## to ## ReqSize( pc, swap ); }
d49 1
a49 1
__glXCallListsReqSize(const GLbyte * pc, Bool swap)
d61 1
a61 1
    return __GLX_PAD((compsize * n));
d65 1
a65 1
__glXBitmapReqSize(const GLbyte * pc, Bool swap)
d89 1
a89 1
__glXFogfvReqSize(const GLbyte * pc, Bool swap)
d99 1
a99 1
    return __GLX_PAD((compsize * 4));
d103 1
a103 1
__glXLightfvReqSize(const GLbyte * pc, Bool swap)
d113 1
a113 1
    return __GLX_PAD((compsize * 4));
d117 1
a117 1
__glXLightModelfvReqSize(const GLbyte * pc, Bool swap)
d127 1
a127 1
    return __GLX_PAD((compsize * 4));
d131 1
a131 1
__glXMaterialfvReqSize(const GLbyte * pc, Bool swap)
d141 1
a141 1
    return __GLX_PAD((compsize * 4));
d145 1
a145 1
__glXPolygonStippleReqSize(const GLbyte * pc, Bool swap)
d165 1
a165 1
__glXTexParameterfvReqSize(const GLbyte * pc, Bool swap)
d175 1
a175 1
    return __GLX_PAD((compsize * 4));
d179 1
a179 1
__glXTexImage1DReqSize(const GLbyte * pc, Bool swap)
d207 1
a207 1
__glXTexImage2DReqSize(const GLbyte * pc, Bool swap)
d237 1
a237 1
__glXTexEnvfvReqSize(const GLbyte * pc, Bool swap)
d247 1
a247 1
    return __GLX_PAD((compsize * 4));
d251 1
a251 1
__glXTexGendvReqSize(const GLbyte * pc, Bool swap)
d261 1
a261 1
    return __GLX_PAD((compsize * 8));
d265 1
a265 1
__glXTexGenfvReqSize(const GLbyte * pc, Bool swap)
d275 1
a275 1
    return __GLX_PAD((compsize * 4));
d279 1
a279 1
__glXPixelMapfvReqSize(const GLbyte * pc, Bool swap)
d287 1
a287 1
    return __GLX_PAD((mapsize * 4));
d291 1
a291 1
__glXPixelMapusvReqSize(const GLbyte * pc, Bool swap)
d299 1
a299 1
    return __GLX_PAD((mapsize * 2));
d303 1
a303 1
__glXDrawPixelsReqSize(const GLbyte * pc, Bool swap)
d331 1
a331 1
__glXPrioritizeTexturesReqSize(const GLbyte * pc, Bool swap)
d339 1
a339 1
    return __GLX_PAD((n * 4) + (n * 4));
d343 1
a343 1
__glXTexSubImage1DReqSize(const GLbyte * pc, Bool swap)
d371 1
a371 1
__glXTexSubImage2DReqSize(const GLbyte * pc, Bool swap)
d401 1
a401 1
__glXColorTableReqSize(const GLbyte * pc, Bool swap)
d429 1
a429 1
__glXColorTableParameterfvReqSize(const GLbyte * pc, Bool swap)
d439 1
a439 1
    return __GLX_PAD((compsize * 4));
d443 1
a443 1
__glXColorSubTableReqSize(const GLbyte * pc, Bool swap)
d471 1
a471 1
__glXConvolutionFilter1DReqSize(const GLbyte * pc, Bool swap)
d499 1
a499 1
__glXConvolutionFilter2DReqSize(const GLbyte * pc, Bool swap)
d529 1
a529 1
__glXConvolutionParameterfvReqSize(const GLbyte * pc, Bool swap)
d539 1
a539 1
    return __GLX_PAD((compsize * 4));
d543 1
a543 1
__glXTexImage3DReqSize(const GLbyte * pc, Bool swap)
d580 1
a580 1
__glXTexSubImage3DReqSize(const GLbyte * pc, Bool swap)
d614 1
a614 1
__glXCompressedTexImage1DReqSize(const GLbyte * pc, Bool swap)
d622 1
a622 1
    return __GLX_PAD(imageSize);
d626 1
a626 1
__glXCompressedTexImage2DReqSize(const GLbyte * pc, Bool swap)
d634 1
a634 1
    return __GLX_PAD(imageSize);
d638 1
a638 1
__glXCompressedTexImage3DReqSize(const GLbyte * pc, Bool swap)
d646 1
a646 1
    return __GLX_PAD(imageSize);
d650 1
a650 1
__glXCompressedTexSubImage3DReqSize(const GLbyte * pc, Bool swap)
d658 1
a658 1
    return __GLX_PAD(imageSize);
d662 1
a662 1
__glXPointParameterfvReqSize(const GLbyte * pc, Bool swap)
d672 1
a672 1
    return __GLX_PAD((compsize * 4));
d676 1
a676 1
__glXDrawBuffersReqSize(const GLbyte * pc, Bool swap)
d684 1
a684 1
    return __GLX_PAD((n * 4));
d688 1
a688 1
__glXProgramStringARBReqSize(const GLbyte * pc, Bool swap)
d696 1
a696 1
    return __GLX_PAD(len);
d700 1
a700 1
__glXVertexAttribs1dvNVReqSize(const GLbyte * pc, Bool swap)
d708 1
a708 1
    return __GLX_PAD((n * 8));
d712 1
a712 1
__glXVertexAttribs2dvNVReqSize(const GLbyte * pc, Bool swap)
d720 1
a720 1
    return __GLX_PAD((n * 16));
d724 1
a724 1
__glXVertexAttribs3dvNVReqSize(const GLbyte * pc, Bool swap)
d732 1
a732 1
    return __GLX_PAD((n * 24));
d736 1
a736 1
__glXVertexAttribs3fvNVReqSize(const GLbyte * pc, Bool swap)
d744 1
a744 1
    return __GLX_PAD((n * 12));
d748 1
a748 1
__glXVertexAttribs3svNVReqSize(const GLbyte * pc, Bool swap)
d756 1
a756 1
    return __GLX_PAD((n * 6));
d760 1
a760 1
__glXVertexAttribs4dvNVReqSize(const GLbyte * pc, Bool swap)
d768 1
a768 1
    return __GLX_PAD((n * 32));
@


1.5.2.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d34 2
d41 1
a41 1
    GLint __glX ## from ## ReqSize( const GLbyte * pc, Bool swap, int reqlen ) \
d46 2
a47 2
    GLint __glX ## from ## ReqSize( const GLbyte * pc, Bool swap, int reqlen ) \
    { return __glX ## to ## ReqSize( pc, swap, reqlen ); }
d51 1
a51 1
__glXCallListsReqSize(const GLbyte * pc, Bool swap, int reqlen)
d63 1
a63 1
    return safe_pad(safe_mul(compsize, n));
d67 1
a67 1
__glXBitmapReqSize(const GLbyte * pc, Bool swap, int reqlen)
d91 1
a91 1
__glXFogfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d101 1
a101 1
    return safe_pad(safe_mul(compsize, 4));
d105 1
a105 1
__glXLightfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d115 1
a115 1
    return safe_pad(safe_mul(compsize, 4));
d119 1
a119 1
__glXLightModelfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d129 1
a129 1
    return safe_pad(safe_mul(compsize, 4));
d133 1
a133 1
__glXMaterialfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d143 1
a143 1
    return safe_pad(safe_mul(compsize, 4));
d147 1
a147 1
__glXPolygonStippleReqSize(const GLbyte * pc, Bool swap, int reqlen)
d167 1
a167 1
__glXTexParameterfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d177 1
a177 1
    return safe_pad(safe_mul(compsize, 4));
d181 1
a181 1
__glXTexImage1DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d209 1
a209 1
__glXTexImage2DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d239 1
a239 1
__glXTexEnvfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d249 1
a249 1
    return safe_pad(safe_mul(compsize, 4));
d253 1
a253 1
__glXTexGendvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d263 1
a263 1
    return safe_pad(safe_mul(compsize, 8));
d267 1
a267 1
__glXTexGenfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d277 1
a277 1
    return safe_pad(safe_mul(compsize, 4));
d281 1
a281 1
__glXPixelMapfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d289 1
a289 1
    return safe_pad(safe_mul(mapsize, 4));
d293 1
a293 1
__glXPixelMapusvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d301 1
a301 1
    return safe_pad(safe_mul(mapsize, 2));
d305 1
a305 1
__glXDrawPixelsReqSize(const GLbyte * pc, Bool swap, int reqlen)
d333 1
a333 1
__glXPrioritizeTexturesReqSize(const GLbyte * pc, Bool swap, int reqlen)
d341 1
a341 1
    return safe_pad(safe_add(safe_mul(n, 4), safe_mul(n, 4)));
d345 1
a345 1
__glXTexSubImage1DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d373 1
a373 1
__glXTexSubImage2DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d403 1
a403 1
__glXColorTableReqSize(const GLbyte * pc, Bool swap, int reqlen)
d431 1
a431 1
__glXColorTableParameterfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d441 1
a441 1
    return safe_pad(safe_mul(compsize, 4));
d445 1
a445 1
__glXColorSubTableReqSize(const GLbyte * pc, Bool swap, int reqlen)
d473 1
a473 1
__glXConvolutionFilter1DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d501 1
a501 1
__glXConvolutionFilter2DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d531 1
a531 1
__glXConvolutionParameterfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d541 1
a541 1
    return safe_pad(safe_mul(compsize, 4));
d545 1
a545 1
__glXTexImage3DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d582 1
a582 1
__glXTexSubImage3DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d616 1
a616 1
__glXCompressedTexImage1DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d624 1
a624 1
    return safe_pad(imageSize);
d628 1
a628 1
__glXCompressedTexImage2DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d636 1
a636 1
    return safe_pad(imageSize);
d640 1
a640 1
__glXCompressedTexImage3DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d648 1
a648 1
    return safe_pad(imageSize);
d652 1
a652 1
__glXCompressedTexSubImage3DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d660 1
a660 1
    return safe_pad(imageSize);
d664 1
a664 1
__glXPointParameterfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d674 1
a674 1
    return safe_pad(safe_mul(compsize, 4));
d678 1
a678 1
__glXDrawBuffersReqSize(const GLbyte * pc, Bool swap, int reqlen)
d686 1
a686 1
    return safe_pad(safe_mul(n, 4));
d690 1
a690 1
__glXProgramStringARBReqSize(const GLbyte * pc, Bool swap, int reqlen)
d698 1
a698 1
    return safe_pad(len);
d702 1
a702 1
__glXVertexAttribs1dvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d710 1
a710 1
    return safe_pad(safe_mul(n, 8));
d714 1
a714 1
__glXVertexAttribs2dvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d722 1
a722 1
    return safe_pad(safe_mul(n, 16));
d726 1
a726 1
__glXVertexAttribs3dvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d734 1
a734 1
    return safe_pad(safe_mul(n, 24));
d738 1
a738 1
__glXVertexAttribs3fvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d746 1
a746 1
    return safe_pad(safe_mul(n, 12));
d750 1
a750 1
__glXVertexAttribs3svNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d758 1
a758 1
    return safe_pad(safe_mul(n, 6));
d762 1
a762 1
__glXVertexAttribs4dvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d770 1
a770 1
    return safe_pad(safe_mul(n, 32));
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d616 1
a616 1
__glXCompressedTexImage1DARBReqSize(const GLbyte * pc, Bool swap)
d628 1
a628 1
__glXCompressedTexImage2DARBReqSize(const GLbyte * pc, Bool swap)
d640 1
a640 1
__glXCompressedTexImage3DARBReqSize(const GLbyte * pc, Bool swap)
d652 1
a652 1
__glXCompressedTexSubImage3DARBReqSize(const GLbyte * pc, Bool swap)
d664 1
a664 25
__glXProgramStringARBReqSize(const GLbyte * pc, Bool swap)
{
    GLsizei len = *(GLsizei *) (pc + 8);

    if (swap) {
        len = bswap_32(len);
    }

    return __GLX_PAD(len);
}

int
__glXDrawBuffersARBReqSize(const GLbyte * pc, Bool swap)
{
    GLsizei n = *(GLsizei *) (pc + 0);

    if (swap) {
        n = bswap_32(n);
    }

    return __GLX_PAD((n * 4));
}

int
__glXPointParameterfvEXTReqSize(const GLbyte * pc, Bool swap)
d673 1
a673 1
    compsize = __glPointParameterfvEXT_size(pname);
d678 1
a678 1
__glXProgramParameters4dvNVReqSize(const GLbyte * pc, Bool swap)
d680 1
a680 1
    GLsizei num = *(GLsizei *) (pc + 8);
d683 1
a683 1
        num = bswap_32(num);
d686 1
a686 1
    return __GLX_PAD((num * 32));
d690 1
a690 1
__glXProgramParameters4fvNVReqSize(const GLbyte * pc, Bool swap)
d692 1
a692 1
    GLsizei num = *(GLsizei *) (pc + 8);
d695 1
a695 1
        num = bswap_32(num);
d698 1
a698 1
    return __GLX_PAD((num * 16));
a772 12
int
__glXProgramNamedParameter4fvNVReqSize(const GLbyte * pc, Bool swap)
{
    GLsizei len = *(GLsizei *) (pc + 4);

    if (swap) {
        len = bswap_32(len);
    }

    return __GLX_PAD(len);
}

d783 5
a787 4
    ALIAS(CompressedTexSubImage1DARB, CompressedTexImage1DARB)
    ALIAS(CompressedTexSubImage2DARB, CompressedTexImage3DARB)
    ALIAS(LoadProgramNV, ProgramStringARB)
    ALIAS(RequestResidentProgramsNV, DrawBuffersARB)
a794 4
    ALIAS(PointParameterivNV, PointParameterfvEXT)
    ALIAS(ProgramNamedParameter4dvNV, CompressedTexSubImage3DARB)
    ALIAS(DeleteFramebuffersEXT, DrawBuffersARB)
    ALIAS(DeleteRenderbuffersEXT, DrawBuffersARB)
@


1.4.8.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d34 2
d41 1
a41 1
    GLint __glX ## from ## ReqSize( const GLbyte * pc, Bool swap, int reqlen ) \
d46 2
a47 2
    GLint __glX ## from ## ReqSize( const GLbyte * pc, Bool swap, int reqlen ) \
    { return __glX ## to ## ReqSize( pc, swap, reqlen ); }
d51 1
a51 1
__glXCallListsReqSize(const GLbyte * pc, Bool swap, int reqlen)
d63 1
a63 1
    return safe_pad(safe_mul(compsize, n));
d67 1
a67 1
__glXBitmapReqSize(const GLbyte * pc, Bool swap, int reqlen)
d91 1
a91 1
__glXFogfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d101 1
a101 1
    return safe_pad(safe_mul(compsize, 4));
d105 1
a105 1
__glXLightfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d115 1
a115 1
    return safe_pad(safe_mul(compsize, 4));
d119 1
a119 1
__glXLightModelfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d129 1
a129 1
    return safe_pad(safe_mul(compsize, 4));
d133 1
a133 1
__glXMaterialfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d143 1
a143 1
    return safe_pad(safe_mul(compsize, 4));
d147 1
a147 1
__glXPolygonStippleReqSize(const GLbyte * pc, Bool swap, int reqlen)
d167 1
a167 1
__glXTexParameterfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d177 1
a177 1
    return safe_pad(safe_mul(compsize, 4));
d181 1
a181 1
__glXTexImage1DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d209 1
a209 1
__glXTexImage2DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d239 1
a239 1
__glXTexEnvfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d249 1
a249 1
    return safe_pad(safe_mul(compsize, 4));
d253 1
a253 1
__glXTexGendvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d263 1
a263 1
    return safe_pad(safe_mul(compsize, 8));
d267 1
a267 1
__glXTexGenfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d277 1
a277 1
    return safe_pad(safe_mul(compsize, 4));
d281 1
a281 1
__glXPixelMapfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d289 1
a289 1
    return safe_pad(safe_mul(mapsize, 4));
d293 1
a293 1
__glXPixelMapusvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d301 1
a301 1
    return safe_pad(safe_mul(mapsize, 2));
d305 1
a305 1
__glXDrawPixelsReqSize(const GLbyte * pc, Bool swap, int reqlen)
d333 1
a333 1
__glXPrioritizeTexturesReqSize(const GLbyte * pc, Bool swap, int reqlen)
d341 1
a341 1
    return safe_pad(safe_add(safe_mul(n, 4), safe_mul(n, 4)));
d345 1
a345 1
__glXTexSubImage1DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d373 1
a373 1
__glXTexSubImage2DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d403 1
a403 1
__glXColorTableReqSize(const GLbyte * pc, Bool swap, int reqlen)
d431 1
a431 1
__glXColorTableParameterfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d441 1
a441 1
    return safe_pad(safe_mul(compsize, 4));
d445 1
a445 1
__glXColorSubTableReqSize(const GLbyte * pc, Bool swap, int reqlen)
d473 1
a473 1
__glXConvolutionFilter1DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d501 1
a501 1
__glXConvolutionFilter2DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d531 1
a531 1
__glXConvolutionParameterfvReqSize(const GLbyte * pc, Bool swap, int reqlen)
d541 1
a541 1
    return safe_pad(safe_mul(compsize, 4));
d545 1
a545 1
__glXTexImage3DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d582 1
a582 1
__glXTexSubImage3DReqSize(const GLbyte * pc, Bool swap, int reqlen)
d616 1
a616 1
__glXCompressedTexImage1DARBReqSize(const GLbyte * pc, Bool swap, int reqlen)
d624 1
a624 1
    return safe_pad(imageSize);
d628 1
a628 1
__glXCompressedTexImage2DARBReqSize(const GLbyte * pc, Bool swap, int reqlen)
d636 1
a636 1
    return safe_pad(imageSize);
d640 1
a640 1
__glXCompressedTexImage3DARBReqSize(const GLbyte * pc, Bool swap, int reqlen)
d648 1
a648 1
    return safe_pad(imageSize);
d652 1
a652 1
__glXCompressedTexSubImage3DARBReqSize(const GLbyte * pc, Bool swap, int reqlen)
d660 1
a660 1
    return safe_pad(imageSize);
d664 1
a664 1
__glXProgramStringARBReqSize(const GLbyte * pc, Bool swap, int reqlen)
d672 1
a672 1
    return safe_pad(len);
d676 1
a676 1
__glXDrawBuffersARBReqSize(const GLbyte * pc, Bool swap, int reqlen)
d684 1
a684 1
    return safe_pad(safe_mul(n, 4));
d688 1
a688 1
__glXPointParameterfvEXTReqSize(const GLbyte * pc, Bool swap, int reqlen)
d698 1
a698 1
    return safe_pad(safe_mul(compsize, 4));
d702 1
a702 1
__glXProgramParameters4dvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d710 1
a710 1
    return safe_pad(safe_mul(num, 32));
d714 1
a714 1
__glXProgramParameters4fvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d722 1
a722 1
    return safe_pad(safe_mul(num, 16));
d726 1
a726 1
__glXVertexAttribs1dvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d734 1
a734 1
    return safe_pad(safe_mul(n, 8));
d738 1
a738 1
__glXVertexAttribs2dvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d746 1
a746 1
    return safe_pad(safe_mul(n, 16));
d750 1
a750 1
__glXVertexAttribs3dvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d758 1
a758 1
    return safe_pad(safe_mul(n, 24));
d762 1
a762 1
__glXVertexAttribs3fvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d770 1
a770 1
    return safe_pad(safe_mul(n, 12));
d774 1
a774 1
__glXVertexAttribs3svNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d782 1
a782 1
    return safe_pad(safe_mul(n, 6));
d786 1
a786 1
__glXVertexAttribs4dvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d794 1
a794 1
    return safe_pad(safe_mul(n, 32));
d798 1
a798 1
__glXProgramNamedParameter4fvNVReqSize(const GLbyte * pc, Bool swap, int reqlen)
d806 1
a806 1
    return safe_pad(len);
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a27 1

d37 1
a37 1
#  undef HAVE_ALIAS
d40 2
a41 2
#  define ALIAS2(from,to) \
    int __glX ## from ## ReqSize( const GLbyte * pc, Bool swap ) \
d43 1
a43 1
#  define ALIAS(from,to) ALIAS2( from, __glX ## to ## ReqSize )
d45 2
a46 2
#  define ALIAS(from,to) \
    int __glX ## from ## ReqSize( const GLbyte * pc, Bool swap ) \
a49 1

d51 1
a51 1
__glXCallListsReqSize(const GLbyte *pc, Bool swap)
d67 1
a67 1
__glXBitmapReqSize(const GLbyte *pc, Bool swap)
d91 1
a91 1
__glXFogfvReqSize(const GLbyte *pc, Bool swap)
d105 1
a105 1
__glXLightfvReqSize(const GLbyte *pc, Bool swap)
d119 1
a119 1
__glXLightModelfvReqSize(const GLbyte *pc, Bool swap)
d133 1
a133 1
__glXMaterialfvReqSize(const GLbyte *pc, Bool swap)
d147 1
a147 1
__glXPolygonStippleReqSize(const GLbyte *pc, Bool swap)
d167 1
a167 1
__glXTexParameterfvReqSize(const GLbyte *pc, Bool swap)
d181 1
a181 1
__glXTexImage1DReqSize(const GLbyte *pc, Bool swap)
d209 1
a209 1
__glXTexImage2DReqSize(const GLbyte *pc, Bool swap)
d239 1
a239 1
__glXTexEnvfvReqSize(const GLbyte *pc, Bool swap)
d253 1
a253 1
__glXTexGendvReqSize(const GLbyte *pc, Bool swap)
d267 1
a267 1
__glXTexGenfvReqSize(const GLbyte *pc, Bool swap)
d281 1
a281 1
__glXPixelMapfvReqSize(const GLbyte *pc, Bool swap)
d293 1
a293 1
__glXPixelMapusvReqSize(const GLbyte *pc, Bool swap)
d305 1
a305 1
__glXDrawPixelsReqSize(const GLbyte *pc, Bool swap)
d333 1
a333 1
__glXPrioritizeTexturesReqSize(const GLbyte *pc, Bool swap)
d345 1
a345 1
__glXTexSubImage1DReqSize(const GLbyte *pc, Bool swap)
d373 1
a373 1
__glXTexSubImage2DReqSize(const GLbyte *pc, Bool swap)
d403 1
a403 1
__glXColorTableReqSize(const GLbyte *pc, Bool swap)
d431 1
a431 1
__glXColorTableParameterfvReqSize(const GLbyte *pc, Bool swap)
d445 1
a445 1
__glXColorSubTableReqSize(const GLbyte *pc, Bool swap)
d473 1
a473 1
__glXConvolutionFilter1DReqSize(const GLbyte *pc, Bool swap)
d501 1
a501 1
__glXConvolutionFilter2DReqSize(const GLbyte *pc, Bool swap)
d531 1
a531 1
__glXConvolutionParameterfvReqSize(const GLbyte *pc, Bool swap)
d545 1
a545 1
__glXTexImage3DReqSize(const GLbyte *pc, Bool swap)
d582 1
a582 1
__glXTexSubImage3DReqSize(const GLbyte *pc, Bool swap)
d616 1
a616 1
__glXCompressedTexImage1DARBReqSize(const GLbyte *pc, Bool swap)
d628 1
a628 1
__glXCompressedTexImage2DARBReqSize(const GLbyte *pc, Bool swap)
d640 1
a640 1
__glXCompressedTexImage3DARBReqSize(const GLbyte *pc, Bool swap)
d652 1
a652 1
__glXCompressedTexSubImage3DARBReqSize(const GLbyte *pc, Bool swap)
d664 1
a664 1
__glXProgramStringARBReqSize(const GLbyte *pc, Bool swap)
d676 1
a676 1
__glXDrawBuffersARBReqSize(const GLbyte *pc, Bool swap)
d688 1
a688 1
__glXPointParameterfvEXTReqSize(const GLbyte *pc, Bool swap)
d702 1
a702 1
__glXProgramParameters4dvNVReqSize(const GLbyte *pc, Bool swap)
d704 1
a704 1
    GLuint num = *(GLuint *) (pc + 8);
d714 1
a714 1
__glXProgramParameters4fvNVReqSize(const GLbyte *pc, Bool swap)
d716 1
a716 1
    GLuint num = *(GLuint *) (pc + 8);
d726 1
a726 1
__glXVertexAttribs1dvNVReqSize(const GLbyte *pc, Bool swap)
d738 1
a738 1
__glXVertexAttribs2dvNVReqSize(const GLbyte *pc, Bool swap)
d750 1
a750 1
__glXVertexAttribs3dvNVReqSize(const GLbyte *pc, Bool swap)
d762 1
a762 1
__glXVertexAttribs3fvNVReqSize(const GLbyte *pc, Bool swap)
d774 1
a774 1
__glXVertexAttribs3svNVReqSize(const GLbyte *pc, Bool swap)
d786 1
a786 1
__glXVertexAttribs4dvNVReqSize(const GLbyte *pc, Bool swap)
d798 1
a798 1
__glXProgramNamedParameter4fvNVReqSize(const GLbyte *pc, Bool swap)
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d42 1
a42 1
    GLint __glX ## from ## ReqSize( const GLbyte * pc, Bool swap ) \
d47 1
a47 1
    GLint __glX ## from ## ReqSize( const GLbyte * pc, Bool swap ) \
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d575 3
@

