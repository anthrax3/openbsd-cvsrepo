head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.09.16.19.10.21;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	Te1daavkBLskZ8gc;

1.7
date	2014.12.09.17.58.52;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	vcnjRBuLQw44cPHf;

1.6
date	2014.09.27.17.53.00;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	cVXoV5PxI8YrEaVA;

1.5
date	2014.05.02.19.27.47;	author matthieu;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2013.06.07.17.28.47;	author matthieu;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.14;	author matthieu;	state Exp;
branches;
next	;

1.4.4.1
date	2014.12.09.18.00.12;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.5.2.1
date	2014.12.09.17.59.32;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.8
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * (C) Copyright IBM Corporation 2005, 2006
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sub license,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * IBM,
 * AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "glxserver.h"
#include "glxbyteorder.h"
#include "glxext.h"
#include "singlesize.h"
#include "unpack.h"
#include "indirect_size_get.h"
#include "indirect_dispatch.h"

int
__glXDisp_GetCompressedTexImage(struct __GLXclientStateRec *cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx = __glXForceCurrent(cl, req->contextTag, &error);
    ClientPtr client = cl->client;

    REQUEST_FIXED_SIZE(xGLXSingleReq, 8);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum target = *(GLenum *) (pc + 0);
        const GLint level = *(GLint *) (pc + 4);
        GLint compsize = 0;
        char *answer = NULL, answerBuffer[200];

        glGetTexLevelParameteriv(target, level, GL_TEXTURE_COMPRESSED_IMAGE_SIZE,
                                 &compsize);

        if (compsize != 0) {
            PFNGLGETCOMPRESSEDTEXIMAGEARBPROC GetCompressedTexImageARB =
                __glGetProcAddress("glGetCompressedTexImageARB");
            __GLX_GET_ANSWER_BUFFER(answer, cl, compsize, 1);
            __glXClearErrorOccured();
            GetCompressedTexImageARB(target, level, answer);
        }

        if (__glXErrorOccured()) {
            __GLX_BEGIN_REPLY(0);
            __GLX_SEND_HEADER();
        }
        else {
            __GLX_BEGIN_REPLY(compsize);
            ((xGLXGetTexImageReply *) &__glXReply)->width = compsize;
            __GLX_SEND_HEADER();
            __GLX_SEND_VOID_ARRAY(compsize);
        }

        error = Success;
    }

    return error;
}

int
__glXDispSwap_GetCompressedTexImage(struct __GLXclientStateRec *cl, GLbyte * pc)
{
    xGLXSingleReq *const req = (xGLXSingleReq *) pc;
    int error;
    __GLXcontext *const cx =
        __glXForceCurrent(cl, bswap_32(req->contextTag), &error);
    ClientPtr client = cl->client;

    REQUEST_FIXED_SIZE(xGLXSingleReq, 8);

    pc += __GLX_SINGLE_HDR_SIZE;
    if (cx != NULL) {
        const GLenum target = (GLenum) bswap_32(*(int *) (pc + 0));
        const GLint level = (GLint) bswap_32(*(int *) (pc + 4));
        GLint compsize = 0;
        char *answer = NULL, answerBuffer[200];

        glGetTexLevelParameteriv(target, level, GL_TEXTURE_COMPRESSED_IMAGE_SIZE,
                                 &compsize);

        if (compsize != 0) {
            PFNGLGETCOMPRESSEDTEXIMAGEARBPROC GetCompressedTexImageARB =
                __glGetProcAddress("glGetCompressedTexImageARB");
            __GLX_GET_ANSWER_BUFFER(answer, cl, compsize, 1);
            __glXClearErrorOccured();
            GetCompressedTexImageARB(target, level, answer);
        }

        if (__glXErrorOccured()) {
            __GLX_BEGIN_REPLY(0);
            __GLX_SEND_HEADER();
        }
        else {
            __GLX_BEGIN_REPLY(compsize);
            ((xGLXGetTexImageReply *) &__glXReply)->width = compsize;
            __GLX_SEND_HEADER();
            __GLX_SEND_VOID_ARRAY(compsize);
        }

        error = Success;
    }

    return error;
}
@


1.7
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d4 1
a4 1
 * 
d11 1
a11 1
 * 
d15 1
a15 1
 * 
@


1.6
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d46 2
d91 2
@


1.5
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d57 2
d61 1
a61 1
            glGetCompressedTexImageARB(target, level, answer);
d101 2
d105 1
a105 1
            glGetCompressedTexImageARB(target, level, answer);
@


1.5.2.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a45 2
    REQUEST_FIXED_SIZE(xGLXSingleReq, 8);

a86 2

    REQUEST_FIXED_SIZE(xGLXSingleReq, 8);
@


1.4
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a36 4
#include "glapitable.h"
#include "glapi.h"
#include "glthread.h"
#include "dispatch.h"
d39 1
a39 1
__glXDisp_GetCompressedTexImageARB(struct __GLXclientStateRec *cl, GLbyte * pc)
d53 2
a54 4
        CALL_GetTexLevelParameteriv(GET_DISPATCH(),
                                    (target, level,
                                     GL_TEXTURE_COMPRESSED_IMAGE_SIZE,
                                     &compsize));
d59 1
a59 2
            CALL_GetCompressedTexImageARB(GET_DISPATCH(),
                                          (target, level, answer));
d80 1
a80 2
__glXDispSwap_GetCompressedTexImageARB(struct __GLXclientStateRec *cl,
                                       GLbyte * pc)
d95 2
a96 4
        CALL_GetTexLevelParameteriv(GET_DISPATCH(),
                                    (target, level,
                                     GL_TEXTURE_COMPRESSED_IMAGE_SIZE,
                                     &compsize));
d101 1
a101 2
            CALL_GetCompressedTexImageARB(GET_DISPATCH(),
                                          (target, level, answer));
@


1.4.4.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a49 2
    REQUEST_FIXED_SIZE(xGLXSingleReq, 8);

a94 2

    REQUEST_FIXED_SIZE(xGLXSingleReq, 8);
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d75 1
a75 1
            ((xGLXGetTexImageReply *) & __glXReply)->width = compsize;
d121 1
a121 1
            ((xGLXGetTexImageReply *) & __glXReply)->width = compsize;
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d42 2
a43 1
int __glXDisp_GetCompressedTexImageARB(struct __GLXclientStateRec *cl, GLbyte *pc)
d45 1
a45 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d47 1
a47 1
    __GLXcontext * const cx = __glXForceCurrent( cl, req->contextTag, & error );
a49 1

d51 28
a78 23
    if ( cx != NULL ) {
	const GLenum target = *(GLenum *)(pc + 0);
	const GLint  level  = *(GLint  *)(pc + 4);
	GLint compsize = 0;
	char *answer = NULL, answerBuffer[200];

	CALL_GetTexLevelParameteriv(GET_DISPATCH(), (target, level, GL_TEXTURE_COMPRESSED_IMAGE_SIZE, &compsize));

	if ( compsize != 0 ) {
	    __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
	    __glXClearErrorOccured();
	    CALL_GetCompressedTexImageARB(GET_DISPATCH(), (target, level, answer));
	}

	if (__glXErrorOccured()) {
	    __GLX_BEGIN_REPLY(0);
	    __GLX_SEND_HEADER();
	} else {
	    __GLX_BEGIN_REPLY(compsize);
	    ((xGLXGetTexImageReply *)&__glXReply)->width = compsize;
	    __GLX_SEND_HEADER();
	    __GLX_SEND_VOID_ARRAY(compsize);
	}
d80 1
a80 1
	error = Success;
d86 3
a88 2

int __glXDispSwap_GetCompressedTexImageARB(struct __GLXclientStateRec *cl, GLbyte *pc)
d90 1
a90 1
    xGLXSingleReq * const req = (xGLXSingleReq *) pc;
d92 2
a93 1
    __GLXcontext * const cx = __glXForceCurrent( cl, bswap_32( req->contextTag ), & error );
d96 29
d126 1
a126 26
    pc += __GLX_SINGLE_HDR_SIZE;
    if ( cx != NULL ) {
	const GLenum target = (GLenum) bswap_32( *(int *)(pc + 0) );
	const GLint  level =  (GLint ) bswap_32( *(int *)(pc + 4) );
	GLint compsize = 0;
	char *answer = NULL, answerBuffer[200];

	CALL_GetTexLevelParameteriv(GET_DISPATCH(), (target, level, GL_TEXTURE_COMPRESSED_IMAGE_SIZE, &compsize));

	if ( compsize != 0 ) {
	    __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
	    __glXClearErrorOccured();
	    CALL_GetCompressedTexImageARB(GET_DISPATCH(), (target, level, answer));
	}

	if (__glXErrorOccured()) {
	    __GLX_BEGIN_REPLY(0);
	    __GLX_SEND_HEADER();
	} else {
	    __GLX_BEGIN_REPLY(compsize);
	    ((xGLXGetTexImageReply *)&__glXReply)->width = compsize;
	    __GLX_SEND_HEADER();
	    __GLX_SEND_VOID_ARRAY(compsize);
	}
	
	error = Success;
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a25 1
#define NEED_REPLIES
d55 1
a55 1
	char *answer, answerBuffer[200];
d95 1
a95 1
	char *answer, answerBuffer[200];
@

