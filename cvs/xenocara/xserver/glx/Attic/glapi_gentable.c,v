head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2014.05.02.19.27.47;	author matthieu;	state dead;
branches;
next	1.2;

1.2
date	2012.06.10.13.21.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@/* DO NOT EDIT - This file generated automatically by gl_gen_table.py (from Mesa) script */

/*
 * Copyright (C) 1999-2001  Brian Paul   All Rights Reserved.
 * (C) Copyright IBM Corporation 2004, 2005
 * (C) Copyright Apple Inc 2011
 * All Rights Reserved.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sub license,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL, IBM,
 * AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* GLXEXT is the define used in the xserver when the GLX extension is being
 * built.  Hijack this to determine whether this file is being built for the
 * server or the client.
 */
#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#if (defined(GLXEXT) && defined(HAVE_BACKTRACE)) \
	|| (!defined(GLXEXT) && defined(DEBUG) && !defined(_WIN32_WCE))
#define USE_BACKTRACE
#endif

#ifdef USE_BACKTRACE
#include <execinfo.h>
#endif

#include <dlfcn.h>
#include <stdlib.h>
#include <stdio.h>

#include <GL/gl.h>

#include "glapi.h"
#include "glapitable.h"

#ifdef GLXEXT
#include "os.h"
#endif

static void
__glapi_gentable_NoOp(void)
{
    const char *fstr = "Unknown";

    /* Silence potential GCC warning for some #ifdef paths.
     */
    (void) fstr;
#if defined(USE_BACKTRACE)
#if !defined(GLXEXT)
    if (getenv("MESA_DEBUG") || getenv("LIBGL_DEBUG"))
#endif
    {
        void *frames[2];

        if (backtrace(frames, 2) == 2) {
            Dl_info info;

            dladdr(frames[1], &info);
            if (info.dli_sname)
                fstr = info.dli_sname;
        }

#if !defined(GLXEXT)
        fprintf(stderr, "Call to unimplemented API: %s\n", fstr);
#endif
    }
#endif
#if defined(GLXEXT)
    LogMessage(X_ERROR, "GLX: Call to unimplemented API: %s\n", fstr);
#endif
}

static void
__glapi_gentable_set_remaining_noop(struct _glapi_table *disp)
{
    GLuint entries = _glapi_get_dispatch_table_size();
    void **dispatch = (void **) disp;
    int i;

    /* ISO C is annoying sometimes */
    union {
        _glapi_proc p;
        void *v;
    } p;

    p.p = __glapi_gentable_NoOp;

    for (i = 0; i < entries; i++)
        if (dispatch[i] == NULL)
            dispatch[i] = p.v;
}

struct _glapi_table *
_glapi_create_table_from_handle(void *handle, const char *symbol_prefix)
{
    struct _glapi_table *disp = calloc(_glapi_get_dispatch_table_size(), sizeof(void*));
    char symboln[512];

    if (!disp)
        return NULL;

    if (symbol_prefix == NULL)
        symbol_prefix = "";

    if (!disp->NewList) {
        void **procp = (void **) &disp->NewList;

        snprintf(symboln, sizeof(symboln), "%sNewList", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EndList) {
        void **procp = (void **) &disp->EndList;

        snprintf(symboln, sizeof(symboln), "%sEndList", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CallList) {
        void **procp = (void **) &disp->CallList;

        snprintf(symboln, sizeof(symboln), "%sCallList", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CallLists) {
        void **procp = (void **) &disp->CallLists;

        snprintf(symboln, sizeof(symboln), "%sCallLists", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteLists) {
        void **procp = (void **) &disp->DeleteLists;

        snprintf(symboln, sizeof(symboln), "%sDeleteLists", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenLists) {
        void **procp = (void **) &disp->GenLists;

        snprintf(symboln, sizeof(symboln), "%sGenLists", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ListBase) {
        void **procp = (void **) &disp->ListBase;

        snprintf(symboln, sizeof(symboln), "%sListBase", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Begin) {
        void **procp = (void **) &disp->Begin;

        snprintf(symboln, sizeof(symboln), "%sBegin", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Bitmap) {
        void **procp = (void **) &disp->Bitmap;

        snprintf(symboln, sizeof(symboln), "%sBitmap", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3b) {
        void **procp = (void **) &disp->Color3b;

        snprintf(symboln, sizeof(symboln), "%sColor3b", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3bv) {
        void **procp = (void **) &disp->Color3bv;

        snprintf(symboln, sizeof(symboln), "%sColor3bv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3d) {
        void **procp = (void **) &disp->Color3d;

        snprintf(symboln, sizeof(symboln), "%sColor3d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3dv) {
        void **procp = (void **) &disp->Color3dv;

        snprintf(symboln, sizeof(symboln), "%sColor3dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3f) {
        void **procp = (void **) &disp->Color3f;

        snprintf(symboln, sizeof(symboln), "%sColor3f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3fv) {
        void **procp = (void **) &disp->Color3fv;

        snprintf(symboln, sizeof(symboln), "%sColor3fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3i) {
        void **procp = (void **) &disp->Color3i;

        snprintf(symboln, sizeof(symboln), "%sColor3i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3iv) {
        void **procp = (void **) &disp->Color3iv;

        snprintf(symboln, sizeof(symboln), "%sColor3iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3s) {
        void **procp = (void **) &disp->Color3s;

        snprintf(symboln, sizeof(symboln), "%sColor3s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3sv) {
        void **procp = (void **) &disp->Color3sv;

        snprintf(symboln, sizeof(symboln), "%sColor3sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3ub) {
        void **procp = (void **) &disp->Color3ub;

        snprintf(symboln, sizeof(symboln), "%sColor3ub", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3ubv) {
        void **procp = (void **) &disp->Color3ubv;

        snprintf(symboln, sizeof(symboln), "%sColor3ubv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3ui) {
        void **procp = (void **) &disp->Color3ui;

        snprintf(symboln, sizeof(symboln), "%sColor3ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3uiv) {
        void **procp = (void **) &disp->Color3uiv;

        snprintf(symboln, sizeof(symboln), "%sColor3uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3us) {
        void **procp = (void **) &disp->Color3us;

        snprintf(symboln, sizeof(symboln), "%sColor3us", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color3usv) {
        void **procp = (void **) &disp->Color3usv;

        snprintf(symboln, sizeof(symboln), "%sColor3usv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4b) {
        void **procp = (void **) &disp->Color4b;

        snprintf(symboln, sizeof(symboln), "%sColor4b", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4bv) {
        void **procp = (void **) &disp->Color4bv;

        snprintf(symboln, sizeof(symboln), "%sColor4bv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4d) {
        void **procp = (void **) &disp->Color4d;

        snprintf(symboln, sizeof(symboln), "%sColor4d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4dv) {
        void **procp = (void **) &disp->Color4dv;

        snprintf(symboln, sizeof(symboln), "%sColor4dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4f) {
        void **procp = (void **) &disp->Color4f;

        snprintf(symboln, sizeof(symboln), "%sColor4f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4fv) {
        void **procp = (void **) &disp->Color4fv;

        snprintf(symboln, sizeof(symboln), "%sColor4fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4i) {
        void **procp = (void **) &disp->Color4i;

        snprintf(symboln, sizeof(symboln), "%sColor4i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4iv) {
        void **procp = (void **) &disp->Color4iv;

        snprintf(symboln, sizeof(symboln), "%sColor4iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4s) {
        void **procp = (void **) &disp->Color4s;

        snprintf(symboln, sizeof(symboln), "%sColor4s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4sv) {
        void **procp = (void **) &disp->Color4sv;

        snprintf(symboln, sizeof(symboln), "%sColor4sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4ub) {
        void **procp = (void **) &disp->Color4ub;

        snprintf(symboln, sizeof(symboln), "%sColor4ub", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4ubv) {
        void **procp = (void **) &disp->Color4ubv;

        snprintf(symboln, sizeof(symboln), "%sColor4ubv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4ui) {
        void **procp = (void **) &disp->Color4ui;

        snprintf(symboln, sizeof(symboln), "%sColor4ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4uiv) {
        void **procp = (void **) &disp->Color4uiv;

        snprintf(symboln, sizeof(symboln), "%sColor4uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4us) {
        void **procp = (void **) &disp->Color4us;

        snprintf(symboln, sizeof(symboln), "%sColor4us", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Color4usv) {
        void **procp = (void **) &disp->Color4usv;

        snprintf(symboln, sizeof(symboln), "%sColor4usv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EdgeFlag) {
        void **procp = (void **) &disp->EdgeFlag;

        snprintf(symboln, sizeof(symboln), "%sEdgeFlag", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EdgeFlagv) {
        void **procp = (void **) &disp->EdgeFlagv;

        snprintf(symboln, sizeof(symboln), "%sEdgeFlagv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->End) {
        void **procp = (void **) &disp->End;

        snprintf(symboln, sizeof(symboln), "%sEnd", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Indexd) {
        void **procp = (void **) &disp->Indexd;

        snprintf(symboln, sizeof(symboln), "%sIndexd", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Indexdv) {
        void **procp = (void **) &disp->Indexdv;

        snprintf(symboln, sizeof(symboln), "%sIndexdv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Indexf) {
        void **procp = (void **) &disp->Indexf;

        snprintf(symboln, sizeof(symboln), "%sIndexf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Indexfv) {
        void **procp = (void **) &disp->Indexfv;

        snprintf(symboln, sizeof(symboln), "%sIndexfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Indexi) {
        void **procp = (void **) &disp->Indexi;

        snprintf(symboln, sizeof(symboln), "%sIndexi", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Indexiv) {
        void **procp = (void **) &disp->Indexiv;

        snprintf(symboln, sizeof(symboln), "%sIndexiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Indexs) {
        void **procp = (void **) &disp->Indexs;

        snprintf(symboln, sizeof(symboln), "%sIndexs", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Indexsv) {
        void **procp = (void **) &disp->Indexsv;

        snprintf(symboln, sizeof(symboln), "%sIndexsv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Normal3b) {
        void **procp = (void **) &disp->Normal3b;

        snprintf(symboln, sizeof(symboln), "%sNormal3b", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Normal3bv) {
        void **procp = (void **) &disp->Normal3bv;

        snprintf(symboln, sizeof(symboln), "%sNormal3bv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Normal3d) {
        void **procp = (void **) &disp->Normal3d;

        snprintf(symboln, sizeof(symboln), "%sNormal3d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Normal3dv) {
        void **procp = (void **) &disp->Normal3dv;

        snprintf(symboln, sizeof(symboln), "%sNormal3dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Normal3f) {
        void **procp = (void **) &disp->Normal3f;

        snprintf(symboln, sizeof(symboln), "%sNormal3f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Normal3fv) {
        void **procp = (void **) &disp->Normal3fv;

        snprintf(symboln, sizeof(symboln), "%sNormal3fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Normal3i) {
        void **procp = (void **) &disp->Normal3i;

        snprintf(symboln, sizeof(symboln), "%sNormal3i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Normal3iv) {
        void **procp = (void **) &disp->Normal3iv;

        snprintf(symboln, sizeof(symboln), "%sNormal3iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Normal3s) {
        void **procp = (void **) &disp->Normal3s;

        snprintf(symboln, sizeof(symboln), "%sNormal3s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Normal3sv) {
        void **procp = (void **) &disp->Normal3sv;

        snprintf(symboln, sizeof(symboln), "%sNormal3sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos2d) {
        void **procp = (void **) &disp->RasterPos2d;

        snprintf(symboln, sizeof(symboln), "%sRasterPos2d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos2dv) {
        void **procp = (void **) &disp->RasterPos2dv;

        snprintf(symboln, sizeof(symboln), "%sRasterPos2dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos2f) {
        void **procp = (void **) &disp->RasterPos2f;

        snprintf(symboln, sizeof(symboln), "%sRasterPos2f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos2fv) {
        void **procp = (void **) &disp->RasterPos2fv;

        snprintf(symboln, sizeof(symboln), "%sRasterPos2fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos2i) {
        void **procp = (void **) &disp->RasterPos2i;

        snprintf(symboln, sizeof(symboln), "%sRasterPos2i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos2iv) {
        void **procp = (void **) &disp->RasterPos2iv;

        snprintf(symboln, sizeof(symboln), "%sRasterPos2iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos2s) {
        void **procp = (void **) &disp->RasterPos2s;

        snprintf(symboln, sizeof(symboln), "%sRasterPos2s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos2sv) {
        void **procp = (void **) &disp->RasterPos2sv;

        snprintf(symboln, sizeof(symboln), "%sRasterPos2sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos3d) {
        void **procp = (void **) &disp->RasterPos3d;

        snprintf(symboln, sizeof(symboln), "%sRasterPos3d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos3dv) {
        void **procp = (void **) &disp->RasterPos3dv;

        snprintf(symboln, sizeof(symboln), "%sRasterPos3dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos3f) {
        void **procp = (void **) &disp->RasterPos3f;

        snprintf(symboln, sizeof(symboln), "%sRasterPos3f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos3fv) {
        void **procp = (void **) &disp->RasterPos3fv;

        snprintf(symboln, sizeof(symboln), "%sRasterPos3fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos3i) {
        void **procp = (void **) &disp->RasterPos3i;

        snprintf(symboln, sizeof(symboln), "%sRasterPos3i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos3iv) {
        void **procp = (void **) &disp->RasterPos3iv;

        snprintf(symboln, sizeof(symboln), "%sRasterPos3iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos3s) {
        void **procp = (void **) &disp->RasterPos3s;

        snprintf(symboln, sizeof(symboln), "%sRasterPos3s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos3sv) {
        void **procp = (void **) &disp->RasterPos3sv;

        snprintf(symboln, sizeof(symboln), "%sRasterPos3sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos4d) {
        void **procp = (void **) &disp->RasterPos4d;

        snprintf(symboln, sizeof(symboln), "%sRasterPos4d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos4dv) {
        void **procp = (void **) &disp->RasterPos4dv;

        snprintf(symboln, sizeof(symboln), "%sRasterPos4dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos4f) {
        void **procp = (void **) &disp->RasterPos4f;

        snprintf(symboln, sizeof(symboln), "%sRasterPos4f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos4fv) {
        void **procp = (void **) &disp->RasterPos4fv;

        snprintf(symboln, sizeof(symboln), "%sRasterPos4fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos4i) {
        void **procp = (void **) &disp->RasterPos4i;

        snprintf(symboln, sizeof(symboln), "%sRasterPos4i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos4iv) {
        void **procp = (void **) &disp->RasterPos4iv;

        snprintf(symboln, sizeof(symboln), "%sRasterPos4iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos4s) {
        void **procp = (void **) &disp->RasterPos4s;

        snprintf(symboln, sizeof(symboln), "%sRasterPos4s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RasterPos4sv) {
        void **procp = (void **) &disp->RasterPos4sv;

        snprintf(symboln, sizeof(symboln), "%sRasterPos4sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Rectd) {
        void **procp = (void **) &disp->Rectd;

        snprintf(symboln, sizeof(symboln), "%sRectd", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Rectdv) {
        void **procp = (void **) &disp->Rectdv;

        snprintf(symboln, sizeof(symboln), "%sRectdv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Rectf) {
        void **procp = (void **) &disp->Rectf;

        snprintf(symboln, sizeof(symboln), "%sRectf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Rectfv) {
        void **procp = (void **) &disp->Rectfv;

        snprintf(symboln, sizeof(symboln), "%sRectfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Recti) {
        void **procp = (void **) &disp->Recti;

        snprintf(symboln, sizeof(symboln), "%sRecti", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Rectiv) {
        void **procp = (void **) &disp->Rectiv;

        snprintf(symboln, sizeof(symboln), "%sRectiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Rects) {
        void **procp = (void **) &disp->Rects;

        snprintf(symboln, sizeof(symboln), "%sRects", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Rectsv) {
        void **procp = (void **) &disp->Rectsv;

        snprintf(symboln, sizeof(symboln), "%sRectsv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord1d) {
        void **procp = (void **) &disp->TexCoord1d;

        snprintf(symboln, sizeof(symboln), "%sTexCoord1d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord1dv) {
        void **procp = (void **) &disp->TexCoord1dv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord1dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord1f) {
        void **procp = (void **) &disp->TexCoord1f;

        snprintf(symboln, sizeof(symboln), "%sTexCoord1f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord1fv) {
        void **procp = (void **) &disp->TexCoord1fv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord1fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord1i) {
        void **procp = (void **) &disp->TexCoord1i;

        snprintf(symboln, sizeof(symboln), "%sTexCoord1i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord1iv) {
        void **procp = (void **) &disp->TexCoord1iv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord1iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord1s) {
        void **procp = (void **) &disp->TexCoord1s;

        snprintf(symboln, sizeof(symboln), "%sTexCoord1s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord1sv) {
        void **procp = (void **) &disp->TexCoord1sv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord1sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord2d) {
        void **procp = (void **) &disp->TexCoord2d;

        snprintf(symboln, sizeof(symboln), "%sTexCoord2d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord2dv) {
        void **procp = (void **) &disp->TexCoord2dv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord2dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord2f) {
        void **procp = (void **) &disp->TexCoord2f;

        snprintf(symboln, sizeof(symboln), "%sTexCoord2f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord2fv) {
        void **procp = (void **) &disp->TexCoord2fv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord2fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord2i) {
        void **procp = (void **) &disp->TexCoord2i;

        snprintf(symboln, sizeof(symboln), "%sTexCoord2i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord2iv) {
        void **procp = (void **) &disp->TexCoord2iv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord2iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord2s) {
        void **procp = (void **) &disp->TexCoord2s;

        snprintf(symboln, sizeof(symboln), "%sTexCoord2s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord2sv) {
        void **procp = (void **) &disp->TexCoord2sv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord2sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord3d) {
        void **procp = (void **) &disp->TexCoord3d;

        snprintf(symboln, sizeof(symboln), "%sTexCoord3d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord3dv) {
        void **procp = (void **) &disp->TexCoord3dv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord3dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord3f) {
        void **procp = (void **) &disp->TexCoord3f;

        snprintf(symboln, sizeof(symboln), "%sTexCoord3f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord3fv) {
        void **procp = (void **) &disp->TexCoord3fv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord3fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord3i) {
        void **procp = (void **) &disp->TexCoord3i;

        snprintf(symboln, sizeof(symboln), "%sTexCoord3i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord3iv) {
        void **procp = (void **) &disp->TexCoord3iv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord3iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord3s) {
        void **procp = (void **) &disp->TexCoord3s;

        snprintf(symboln, sizeof(symboln), "%sTexCoord3s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord3sv) {
        void **procp = (void **) &disp->TexCoord3sv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord3sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord4d) {
        void **procp = (void **) &disp->TexCoord4d;

        snprintf(symboln, sizeof(symboln), "%sTexCoord4d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord4dv) {
        void **procp = (void **) &disp->TexCoord4dv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord4dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord4f) {
        void **procp = (void **) &disp->TexCoord4f;

        snprintf(symboln, sizeof(symboln), "%sTexCoord4f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord4fv) {
        void **procp = (void **) &disp->TexCoord4fv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord4fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord4i) {
        void **procp = (void **) &disp->TexCoord4i;

        snprintf(symboln, sizeof(symboln), "%sTexCoord4i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord4iv) {
        void **procp = (void **) &disp->TexCoord4iv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord4iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord4s) {
        void **procp = (void **) &disp->TexCoord4s;

        snprintf(symboln, sizeof(symboln), "%sTexCoord4s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoord4sv) {
        void **procp = (void **) &disp->TexCoord4sv;

        snprintf(symboln, sizeof(symboln), "%sTexCoord4sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex2d) {
        void **procp = (void **) &disp->Vertex2d;

        snprintf(symboln, sizeof(symboln), "%sVertex2d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex2dv) {
        void **procp = (void **) &disp->Vertex2dv;

        snprintf(symboln, sizeof(symboln), "%sVertex2dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex2f) {
        void **procp = (void **) &disp->Vertex2f;

        snprintf(symboln, sizeof(symboln), "%sVertex2f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex2fv) {
        void **procp = (void **) &disp->Vertex2fv;

        snprintf(symboln, sizeof(symboln), "%sVertex2fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex2i) {
        void **procp = (void **) &disp->Vertex2i;

        snprintf(symboln, sizeof(symboln), "%sVertex2i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex2iv) {
        void **procp = (void **) &disp->Vertex2iv;

        snprintf(symboln, sizeof(symboln), "%sVertex2iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex2s) {
        void **procp = (void **) &disp->Vertex2s;

        snprintf(symboln, sizeof(symboln), "%sVertex2s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex2sv) {
        void **procp = (void **) &disp->Vertex2sv;

        snprintf(symboln, sizeof(symboln), "%sVertex2sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex3d) {
        void **procp = (void **) &disp->Vertex3d;

        snprintf(symboln, sizeof(symboln), "%sVertex3d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex3dv) {
        void **procp = (void **) &disp->Vertex3dv;

        snprintf(symboln, sizeof(symboln), "%sVertex3dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex3f) {
        void **procp = (void **) &disp->Vertex3f;

        snprintf(symboln, sizeof(symboln), "%sVertex3f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex3fv) {
        void **procp = (void **) &disp->Vertex3fv;

        snprintf(symboln, sizeof(symboln), "%sVertex3fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex3i) {
        void **procp = (void **) &disp->Vertex3i;

        snprintf(symboln, sizeof(symboln), "%sVertex3i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex3iv) {
        void **procp = (void **) &disp->Vertex3iv;

        snprintf(symboln, sizeof(symboln), "%sVertex3iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex3s) {
        void **procp = (void **) &disp->Vertex3s;

        snprintf(symboln, sizeof(symboln), "%sVertex3s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex3sv) {
        void **procp = (void **) &disp->Vertex3sv;

        snprintf(symboln, sizeof(symboln), "%sVertex3sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex4d) {
        void **procp = (void **) &disp->Vertex4d;

        snprintf(symboln, sizeof(symboln), "%sVertex4d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex4dv) {
        void **procp = (void **) &disp->Vertex4dv;

        snprintf(symboln, sizeof(symboln), "%sVertex4dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex4f) {
        void **procp = (void **) &disp->Vertex4f;

        snprintf(symboln, sizeof(symboln), "%sVertex4f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex4fv) {
        void **procp = (void **) &disp->Vertex4fv;

        snprintf(symboln, sizeof(symboln), "%sVertex4fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex4i) {
        void **procp = (void **) &disp->Vertex4i;

        snprintf(symboln, sizeof(symboln), "%sVertex4i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex4iv) {
        void **procp = (void **) &disp->Vertex4iv;

        snprintf(symboln, sizeof(symboln), "%sVertex4iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex4s) {
        void **procp = (void **) &disp->Vertex4s;

        snprintf(symboln, sizeof(symboln), "%sVertex4s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Vertex4sv) {
        void **procp = (void **) &disp->Vertex4sv;

        snprintf(symboln, sizeof(symboln), "%sVertex4sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClipPlane) {
        void **procp = (void **) &disp->ClipPlane;

        snprintf(symboln, sizeof(symboln), "%sClipPlane", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorMaterial) {
        void **procp = (void **) &disp->ColorMaterial;

        snprintf(symboln, sizeof(symboln), "%sColorMaterial", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CullFace) {
        void **procp = (void **) &disp->CullFace;

        snprintf(symboln, sizeof(symboln), "%sCullFace", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Fogf) {
        void **procp = (void **) &disp->Fogf;

        snprintf(symboln, sizeof(symboln), "%sFogf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Fogfv) {
        void **procp = (void **) &disp->Fogfv;

        snprintf(symboln, sizeof(symboln), "%sFogfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Fogi) {
        void **procp = (void **) &disp->Fogi;

        snprintf(symboln, sizeof(symboln), "%sFogi", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Fogiv) {
        void **procp = (void **) &disp->Fogiv;

        snprintf(symboln, sizeof(symboln), "%sFogiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FrontFace) {
        void **procp = (void **) &disp->FrontFace;

        snprintf(symboln, sizeof(symboln), "%sFrontFace", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Hint) {
        void **procp = (void **) &disp->Hint;

        snprintf(symboln, sizeof(symboln), "%sHint", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Lightf) {
        void **procp = (void **) &disp->Lightf;

        snprintf(symboln, sizeof(symboln), "%sLightf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Lightfv) {
        void **procp = (void **) &disp->Lightfv;

        snprintf(symboln, sizeof(symboln), "%sLightfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Lighti) {
        void **procp = (void **) &disp->Lighti;

        snprintf(symboln, sizeof(symboln), "%sLighti", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Lightiv) {
        void **procp = (void **) &disp->Lightiv;

        snprintf(symboln, sizeof(symboln), "%sLightiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LightModelf) {
        void **procp = (void **) &disp->LightModelf;

        snprintf(symboln, sizeof(symboln), "%sLightModelf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LightModelfv) {
        void **procp = (void **) &disp->LightModelfv;

        snprintf(symboln, sizeof(symboln), "%sLightModelfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LightModeli) {
        void **procp = (void **) &disp->LightModeli;

        snprintf(symboln, sizeof(symboln), "%sLightModeli", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LightModeliv) {
        void **procp = (void **) &disp->LightModeliv;

        snprintf(symboln, sizeof(symboln), "%sLightModeliv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LineStipple) {
        void **procp = (void **) &disp->LineStipple;

        snprintf(symboln, sizeof(symboln), "%sLineStipple", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LineWidth) {
        void **procp = (void **) &disp->LineWidth;

        snprintf(symboln, sizeof(symboln), "%sLineWidth", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Materialf) {
        void **procp = (void **) &disp->Materialf;

        snprintf(symboln, sizeof(symboln), "%sMaterialf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Materialfv) {
        void **procp = (void **) &disp->Materialfv;

        snprintf(symboln, sizeof(symboln), "%sMaterialfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Materiali) {
        void **procp = (void **) &disp->Materiali;

        snprintf(symboln, sizeof(symboln), "%sMateriali", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Materialiv) {
        void **procp = (void **) &disp->Materialiv;

        snprintf(symboln, sizeof(symboln), "%sMaterialiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PointSize) {
        void **procp = (void **) &disp->PointSize;

        snprintf(symboln, sizeof(symboln), "%sPointSize", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PolygonMode) {
        void **procp = (void **) &disp->PolygonMode;

        snprintf(symboln, sizeof(symboln), "%sPolygonMode", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PolygonStipple) {
        void **procp = (void **) &disp->PolygonStipple;

        snprintf(symboln, sizeof(symboln), "%sPolygonStipple", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Scissor) {
        void **procp = (void **) &disp->Scissor;

        snprintf(symboln, sizeof(symboln), "%sScissor", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ShadeModel) {
        void **procp = (void **) &disp->ShadeModel;

        snprintf(symboln, sizeof(symboln), "%sShadeModel", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexParameterf) {
        void **procp = (void **) &disp->TexParameterf;

        snprintf(symboln, sizeof(symboln), "%sTexParameterf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexParameterfv) {
        void **procp = (void **) &disp->TexParameterfv;

        snprintf(symboln, sizeof(symboln), "%sTexParameterfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexParameteri) {
        void **procp = (void **) &disp->TexParameteri;

        snprintf(symboln, sizeof(symboln), "%sTexParameteri", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexParameteriv) {
        void **procp = (void **) &disp->TexParameteriv;

        snprintf(symboln, sizeof(symboln), "%sTexParameteriv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexImage1D) {
        void **procp = (void **) &disp->TexImage1D;

        snprintf(symboln, sizeof(symboln), "%sTexImage1D", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexImage2D) {
        void **procp = (void **) &disp->TexImage2D;

        snprintf(symboln, sizeof(symboln), "%sTexImage2D", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexEnvf) {
        void **procp = (void **) &disp->TexEnvf;

        snprintf(symboln, sizeof(symboln), "%sTexEnvf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexEnvfv) {
        void **procp = (void **) &disp->TexEnvfv;

        snprintf(symboln, sizeof(symboln), "%sTexEnvfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexEnvi) {
        void **procp = (void **) &disp->TexEnvi;

        snprintf(symboln, sizeof(symboln), "%sTexEnvi", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexEnviv) {
        void **procp = (void **) &disp->TexEnviv;

        snprintf(symboln, sizeof(symboln), "%sTexEnviv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexGend) {
        void **procp = (void **) &disp->TexGend;

        snprintf(symboln, sizeof(symboln), "%sTexGend", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexGendv) {
        void **procp = (void **) &disp->TexGendv;

        snprintf(symboln, sizeof(symboln), "%sTexGendv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexGenf) {
        void **procp = (void **) &disp->TexGenf;

        snprintf(symboln, sizeof(symboln), "%sTexGenf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexGenfv) {
        void **procp = (void **) &disp->TexGenfv;

        snprintf(symboln, sizeof(symboln), "%sTexGenfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexGeni) {
        void **procp = (void **) &disp->TexGeni;

        snprintf(symboln, sizeof(symboln), "%sTexGeni", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexGeniv) {
        void **procp = (void **) &disp->TexGeniv;

        snprintf(symboln, sizeof(symboln), "%sTexGeniv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FeedbackBuffer) {
        void **procp = (void **) &disp->FeedbackBuffer;

        snprintf(symboln, sizeof(symboln), "%sFeedbackBuffer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SelectBuffer) {
        void **procp = (void **) &disp->SelectBuffer;

        snprintf(symboln, sizeof(symboln), "%sSelectBuffer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RenderMode) {
        void **procp = (void **) &disp->RenderMode;

        snprintf(symboln, sizeof(symboln), "%sRenderMode", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->InitNames) {
        void **procp = (void **) &disp->InitNames;

        snprintf(symboln, sizeof(symboln), "%sInitNames", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LoadName) {
        void **procp = (void **) &disp->LoadName;

        snprintf(symboln, sizeof(symboln), "%sLoadName", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PassThrough) {
        void **procp = (void **) &disp->PassThrough;

        snprintf(symboln, sizeof(symboln), "%sPassThrough", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PopName) {
        void **procp = (void **) &disp->PopName;

        snprintf(symboln, sizeof(symboln), "%sPopName", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PushName) {
        void **procp = (void **) &disp->PushName;

        snprintf(symboln, sizeof(symboln), "%sPushName", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawBuffer) {
        void **procp = (void **) &disp->DrawBuffer;

        snprintf(symboln, sizeof(symboln), "%sDrawBuffer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Clear) {
        void **procp = (void **) &disp->Clear;

        snprintf(symboln, sizeof(symboln), "%sClear", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClearAccum) {
        void **procp = (void **) &disp->ClearAccum;

        snprintf(symboln, sizeof(symboln), "%sClearAccum", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClearIndex) {
        void **procp = (void **) &disp->ClearIndex;

        snprintf(symboln, sizeof(symboln), "%sClearIndex", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClearColor) {
        void **procp = (void **) &disp->ClearColor;

        snprintf(symboln, sizeof(symboln), "%sClearColor", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClearStencil) {
        void **procp = (void **) &disp->ClearStencil;

        snprintf(symboln, sizeof(symboln), "%sClearStencil", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClearDepth) {
        void **procp = (void **) &disp->ClearDepth;

        snprintf(symboln, sizeof(symboln), "%sClearDepth", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->StencilMask) {
        void **procp = (void **) &disp->StencilMask;

        snprintf(symboln, sizeof(symboln), "%sStencilMask", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorMask) {
        void **procp = (void **) &disp->ColorMask;

        snprintf(symboln, sizeof(symboln), "%sColorMask", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DepthMask) {
        void **procp = (void **) &disp->DepthMask;

        snprintf(symboln, sizeof(symboln), "%sDepthMask", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IndexMask) {
        void **procp = (void **) &disp->IndexMask;

        snprintf(symboln, sizeof(symboln), "%sIndexMask", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Accum) {
        void **procp = (void **) &disp->Accum;

        snprintf(symboln, sizeof(symboln), "%sAccum", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Disable) {
        void **procp = (void **) &disp->Disable;

        snprintf(symboln, sizeof(symboln), "%sDisable", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Enable) {
        void **procp = (void **) &disp->Enable;

        snprintf(symboln, sizeof(symboln), "%sEnable", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Finish) {
        void **procp = (void **) &disp->Finish;

        snprintf(symboln, sizeof(symboln), "%sFinish", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Flush) {
        void **procp = (void **) &disp->Flush;

        snprintf(symboln, sizeof(symboln), "%sFlush", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PopAttrib) {
        void **procp = (void **) &disp->PopAttrib;

        snprintf(symboln, sizeof(symboln), "%sPopAttrib", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PushAttrib) {
        void **procp = (void **) &disp->PushAttrib;

        snprintf(symboln, sizeof(symboln), "%sPushAttrib", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Map1d) {
        void **procp = (void **) &disp->Map1d;

        snprintf(symboln, sizeof(symboln), "%sMap1d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Map1f) {
        void **procp = (void **) &disp->Map1f;

        snprintf(symboln, sizeof(symboln), "%sMap1f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Map2d) {
        void **procp = (void **) &disp->Map2d;

        snprintf(symboln, sizeof(symboln), "%sMap2d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Map2f) {
        void **procp = (void **) &disp->Map2f;

        snprintf(symboln, sizeof(symboln), "%sMap2f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MapGrid1d) {
        void **procp = (void **) &disp->MapGrid1d;

        snprintf(symboln, sizeof(symboln), "%sMapGrid1d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MapGrid1f) {
        void **procp = (void **) &disp->MapGrid1f;

        snprintf(symboln, sizeof(symboln), "%sMapGrid1f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MapGrid2d) {
        void **procp = (void **) &disp->MapGrid2d;

        snprintf(symboln, sizeof(symboln), "%sMapGrid2d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MapGrid2f) {
        void **procp = (void **) &disp->MapGrid2f;

        snprintf(symboln, sizeof(symboln), "%sMapGrid2f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EvalCoord1d) {
        void **procp = (void **) &disp->EvalCoord1d;

        snprintf(symboln, sizeof(symboln), "%sEvalCoord1d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EvalCoord1dv) {
        void **procp = (void **) &disp->EvalCoord1dv;

        snprintf(symboln, sizeof(symboln), "%sEvalCoord1dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EvalCoord1f) {
        void **procp = (void **) &disp->EvalCoord1f;

        snprintf(symboln, sizeof(symboln), "%sEvalCoord1f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EvalCoord1fv) {
        void **procp = (void **) &disp->EvalCoord1fv;

        snprintf(symboln, sizeof(symboln), "%sEvalCoord1fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EvalCoord2d) {
        void **procp = (void **) &disp->EvalCoord2d;

        snprintf(symboln, sizeof(symboln), "%sEvalCoord2d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EvalCoord2dv) {
        void **procp = (void **) &disp->EvalCoord2dv;

        snprintf(symboln, sizeof(symboln), "%sEvalCoord2dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EvalCoord2f) {
        void **procp = (void **) &disp->EvalCoord2f;

        snprintf(symboln, sizeof(symboln), "%sEvalCoord2f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EvalCoord2fv) {
        void **procp = (void **) &disp->EvalCoord2fv;

        snprintf(symboln, sizeof(symboln), "%sEvalCoord2fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EvalMesh1) {
        void **procp = (void **) &disp->EvalMesh1;

        snprintf(symboln, sizeof(symboln), "%sEvalMesh1", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EvalPoint1) {
        void **procp = (void **) &disp->EvalPoint1;

        snprintf(symboln, sizeof(symboln), "%sEvalPoint1", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EvalMesh2) {
        void **procp = (void **) &disp->EvalMesh2;

        snprintf(symboln, sizeof(symboln), "%sEvalMesh2", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EvalPoint2) {
        void **procp = (void **) &disp->EvalPoint2;

        snprintf(symboln, sizeof(symboln), "%sEvalPoint2", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->AlphaFunc) {
        void **procp = (void **) &disp->AlphaFunc;

        snprintf(symboln, sizeof(symboln), "%sAlphaFunc", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendFunc) {
        void **procp = (void **) &disp->BlendFunc;

        snprintf(symboln, sizeof(symboln), "%sBlendFunc", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LogicOp) {
        void **procp = (void **) &disp->LogicOp;

        snprintf(symboln, sizeof(symboln), "%sLogicOp", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->StencilFunc) {
        void **procp = (void **) &disp->StencilFunc;

        snprintf(symboln, sizeof(symboln), "%sStencilFunc", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->StencilOp) {
        void **procp = (void **) &disp->StencilOp;

        snprintf(symboln, sizeof(symboln), "%sStencilOp", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DepthFunc) {
        void **procp = (void **) &disp->DepthFunc;

        snprintf(symboln, sizeof(symboln), "%sDepthFunc", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PixelZoom) {
        void **procp = (void **) &disp->PixelZoom;

        snprintf(symboln, sizeof(symboln), "%sPixelZoom", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PixelTransferf) {
        void **procp = (void **) &disp->PixelTransferf;

        snprintf(symboln, sizeof(symboln), "%sPixelTransferf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PixelTransferi) {
        void **procp = (void **) &disp->PixelTransferi;

        snprintf(symboln, sizeof(symboln), "%sPixelTransferi", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PixelStoref) {
        void **procp = (void **) &disp->PixelStoref;

        snprintf(symboln, sizeof(symboln), "%sPixelStoref", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PixelStorei) {
        void **procp = (void **) &disp->PixelStorei;

        snprintf(symboln, sizeof(symboln), "%sPixelStorei", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PixelMapfv) {
        void **procp = (void **) &disp->PixelMapfv;

        snprintf(symboln, sizeof(symboln), "%sPixelMapfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PixelMapuiv) {
        void **procp = (void **) &disp->PixelMapuiv;

        snprintf(symboln, sizeof(symboln), "%sPixelMapuiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PixelMapusv) {
        void **procp = (void **) &disp->PixelMapusv;

        snprintf(symboln, sizeof(symboln), "%sPixelMapusv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ReadBuffer) {
        void **procp = (void **) &disp->ReadBuffer;

        snprintf(symboln, sizeof(symboln), "%sReadBuffer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyPixels) {
        void **procp = (void **) &disp->CopyPixels;

        snprintf(symboln, sizeof(symboln), "%sCopyPixels", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ReadPixels) {
        void **procp = (void **) &disp->ReadPixels;

        snprintf(symboln, sizeof(symboln), "%sReadPixels", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawPixels) {
        void **procp = (void **) &disp->DrawPixels;

        snprintf(symboln, sizeof(symboln), "%sDrawPixels", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetBooleanv) {
        void **procp = (void **) &disp->GetBooleanv;

        snprintf(symboln, sizeof(symboln), "%sGetBooleanv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetClipPlane) {
        void **procp = (void **) &disp->GetClipPlane;

        snprintf(symboln, sizeof(symboln), "%sGetClipPlane", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetDoublev) {
        void **procp = (void **) &disp->GetDoublev;

        snprintf(symboln, sizeof(symboln), "%sGetDoublev", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetError) {
        void **procp = (void **) &disp->GetError;

        snprintf(symboln, sizeof(symboln), "%sGetError", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetFloatv) {
        void **procp = (void **) &disp->GetFloatv;

        snprintf(symboln, sizeof(symboln), "%sGetFloatv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetIntegerv) {
        void **procp = (void **) &disp->GetIntegerv;

        snprintf(symboln, sizeof(symboln), "%sGetIntegerv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetLightfv) {
        void **procp = (void **) &disp->GetLightfv;

        snprintf(symboln, sizeof(symboln), "%sGetLightfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetLightiv) {
        void **procp = (void **) &disp->GetLightiv;

        snprintf(symboln, sizeof(symboln), "%sGetLightiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetMapdv) {
        void **procp = (void **) &disp->GetMapdv;

        snprintf(symboln, sizeof(symboln), "%sGetMapdv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetMapfv) {
        void **procp = (void **) &disp->GetMapfv;

        snprintf(symboln, sizeof(symboln), "%sGetMapfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetMapiv) {
        void **procp = (void **) &disp->GetMapiv;

        snprintf(symboln, sizeof(symboln), "%sGetMapiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetMaterialfv) {
        void **procp = (void **) &disp->GetMaterialfv;

        snprintf(symboln, sizeof(symboln), "%sGetMaterialfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetMaterialiv) {
        void **procp = (void **) &disp->GetMaterialiv;

        snprintf(symboln, sizeof(symboln), "%sGetMaterialiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetPixelMapfv) {
        void **procp = (void **) &disp->GetPixelMapfv;

        snprintf(symboln, sizeof(symboln), "%sGetPixelMapfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetPixelMapuiv) {
        void **procp = (void **) &disp->GetPixelMapuiv;

        snprintf(symboln, sizeof(symboln), "%sGetPixelMapuiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetPixelMapusv) {
        void **procp = (void **) &disp->GetPixelMapusv;

        snprintf(symboln, sizeof(symboln), "%sGetPixelMapusv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetPolygonStipple) {
        void **procp = (void **) &disp->GetPolygonStipple;

        snprintf(symboln, sizeof(symboln), "%sGetPolygonStipple",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetString) {
        void **procp = (void **) &disp->GetString;

        snprintf(symboln, sizeof(symboln), "%sGetString", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexEnvfv) {
        void **procp = (void **) &disp->GetTexEnvfv;

        snprintf(symboln, sizeof(symboln), "%sGetTexEnvfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexEnviv) {
        void **procp = (void **) &disp->GetTexEnviv;

        snprintf(symboln, sizeof(symboln), "%sGetTexEnviv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexGendv) {
        void **procp = (void **) &disp->GetTexGendv;

        snprintf(symboln, sizeof(symboln), "%sGetTexGendv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexGenfv) {
        void **procp = (void **) &disp->GetTexGenfv;

        snprintf(symboln, sizeof(symboln), "%sGetTexGenfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexGeniv) {
        void **procp = (void **) &disp->GetTexGeniv;

        snprintf(symboln, sizeof(symboln), "%sGetTexGeniv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexImage) {
        void **procp = (void **) &disp->GetTexImage;

        snprintf(symboln, sizeof(symboln), "%sGetTexImage", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexParameterfv) {
        void **procp = (void **) &disp->GetTexParameterfv;

        snprintf(symboln, sizeof(symboln), "%sGetTexParameterfv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexParameteriv) {
        void **procp = (void **) &disp->GetTexParameteriv;

        snprintf(symboln, sizeof(symboln), "%sGetTexParameteriv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexLevelParameterfv) {
        void **procp = (void **) &disp->GetTexLevelParameterfv;

        snprintf(symboln, sizeof(symboln), "%sGetTexLevelParameterfv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexLevelParameteriv) {
        void **procp = (void **) &disp->GetTexLevelParameteriv;

        snprintf(symboln, sizeof(symboln), "%sGetTexLevelParameteriv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsEnabled) {
        void **procp = (void **) &disp->IsEnabled;

        snprintf(symboln, sizeof(symboln), "%sIsEnabled", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsList) {
        void **procp = (void **) &disp->IsList;

        snprintf(symboln, sizeof(symboln), "%sIsList", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DepthRange) {
        void **procp = (void **) &disp->DepthRange;

        snprintf(symboln, sizeof(symboln), "%sDepthRange", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Frustum) {
        void **procp = (void **) &disp->Frustum;

        snprintf(symboln, sizeof(symboln), "%sFrustum", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LoadIdentity) {
        void **procp = (void **) &disp->LoadIdentity;

        snprintf(symboln, sizeof(symboln), "%sLoadIdentity", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LoadMatrixf) {
        void **procp = (void **) &disp->LoadMatrixf;

        snprintf(symboln, sizeof(symboln), "%sLoadMatrixf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LoadMatrixd) {
        void **procp = (void **) &disp->LoadMatrixd;

        snprintf(symboln, sizeof(symboln), "%sLoadMatrixd", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MatrixMode) {
        void **procp = (void **) &disp->MatrixMode;

        snprintf(symboln, sizeof(symboln), "%sMatrixMode", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultMatrixf) {
        void **procp = (void **) &disp->MultMatrixf;

        snprintf(symboln, sizeof(symboln), "%sMultMatrixf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultMatrixd) {
        void **procp = (void **) &disp->MultMatrixd;

        snprintf(symboln, sizeof(symboln), "%sMultMatrixd", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Ortho) {
        void **procp = (void **) &disp->Ortho;

        snprintf(symboln, sizeof(symboln), "%sOrtho", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PopMatrix) {
        void **procp = (void **) &disp->PopMatrix;

        snprintf(symboln, sizeof(symboln), "%sPopMatrix", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PushMatrix) {
        void **procp = (void **) &disp->PushMatrix;

        snprintf(symboln, sizeof(symboln), "%sPushMatrix", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Rotated) {
        void **procp = (void **) &disp->Rotated;

        snprintf(symboln, sizeof(symboln), "%sRotated", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Rotatef) {
        void **procp = (void **) &disp->Rotatef;

        snprintf(symboln, sizeof(symboln), "%sRotatef", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Scaled) {
        void **procp = (void **) &disp->Scaled;

        snprintf(symboln, sizeof(symboln), "%sScaled", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Scalef) {
        void **procp = (void **) &disp->Scalef;

        snprintf(symboln, sizeof(symboln), "%sScalef", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Translated) {
        void **procp = (void **) &disp->Translated;

        snprintf(symboln, sizeof(symboln), "%sTranslated", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Translatef) {
        void **procp = (void **) &disp->Translatef;

        snprintf(symboln, sizeof(symboln), "%sTranslatef", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Viewport) {
        void **procp = (void **) &disp->Viewport;

        snprintf(symboln, sizeof(symboln), "%sViewport", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ArrayElement) {
        void **procp = (void **) &disp->ArrayElement;

        snprintf(symboln, sizeof(symboln), "%sArrayElement", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ArrayElement) {
        void **procp = (void **) &disp->ArrayElement;

        snprintf(symboln, sizeof(symboln), "%sArrayElementEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindTexture) {
        void **procp = (void **) &disp->BindTexture;

        snprintf(symboln, sizeof(symboln), "%sBindTexture", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindTexture) {
        void **procp = (void **) &disp->BindTexture;

        snprintf(symboln, sizeof(symboln), "%sBindTextureEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorPointer) {
        void **procp = (void **) &disp->ColorPointer;

        snprintf(symboln, sizeof(symboln), "%sColorPointer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DisableClientState) {
        void **procp = (void **) &disp->DisableClientState;

        snprintf(symboln, sizeof(symboln), "%sDisableClientState",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawArrays) {
        void **procp = (void **) &disp->DrawArrays;

        snprintf(symboln, sizeof(symboln), "%sDrawArrays", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawArrays) {
        void **procp = (void **) &disp->DrawArrays;

        snprintf(symboln, sizeof(symboln), "%sDrawArraysEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawElements) {
        void **procp = (void **) &disp->DrawElements;

        snprintf(symboln, sizeof(symboln), "%sDrawElements", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EdgeFlagPointer) {
        void **procp = (void **) &disp->EdgeFlagPointer;

        snprintf(symboln, sizeof(symboln), "%sEdgeFlagPointer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EnableClientState) {
        void **procp = (void **) &disp->EnableClientState;

        snprintf(symboln, sizeof(symboln), "%sEnableClientState",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IndexPointer) {
        void **procp = (void **) &disp->IndexPointer;

        snprintf(symboln, sizeof(symboln), "%sIndexPointer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Indexub) {
        void **procp = (void **) &disp->Indexub;

        snprintf(symboln, sizeof(symboln), "%sIndexub", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Indexubv) {
        void **procp = (void **) &disp->Indexubv;

        snprintf(symboln, sizeof(symboln), "%sIndexubv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->InterleavedArrays) {
        void **procp = (void **) &disp->InterleavedArrays;

        snprintf(symboln, sizeof(symboln), "%sInterleavedArrays",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->NormalPointer) {
        void **procp = (void **) &disp->NormalPointer;

        snprintf(symboln, sizeof(symboln), "%sNormalPointer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PolygonOffset) {
        void **procp = (void **) &disp->PolygonOffset;

        snprintf(symboln, sizeof(symboln), "%sPolygonOffset", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoordPointer) {
        void **procp = (void **) &disp->TexCoordPointer;

        snprintf(symboln, sizeof(symboln), "%sTexCoordPointer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexPointer) {
        void **procp = (void **) &disp->VertexPointer;

        snprintf(symboln, sizeof(symboln), "%sVertexPointer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->AreTexturesResident) {
        void **procp = (void **) &disp->AreTexturesResident;

        snprintf(symboln, sizeof(symboln), "%sAreTexturesResident",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->AreTexturesResident) {
        void **procp = (void **) &disp->AreTexturesResident;

        snprintf(symboln, sizeof(symboln), "%sAreTexturesResidentEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyTexImage1D) {
        void **procp = (void **) &disp->CopyTexImage1D;

        snprintf(symboln, sizeof(symboln), "%sCopyTexImage1D", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyTexImage1D) {
        void **procp = (void **) &disp->CopyTexImage1D;

        snprintf(symboln, sizeof(symboln), "%sCopyTexImage1DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyTexImage2D) {
        void **procp = (void **) &disp->CopyTexImage2D;

        snprintf(symboln, sizeof(symboln), "%sCopyTexImage2D", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyTexImage2D) {
        void **procp = (void **) &disp->CopyTexImage2D;

        snprintf(symboln, sizeof(symboln), "%sCopyTexImage2DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyTexSubImage1D) {
        void **procp = (void **) &disp->CopyTexSubImage1D;

        snprintf(symboln, sizeof(symboln), "%sCopyTexSubImage1D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyTexSubImage1D) {
        void **procp = (void **) &disp->CopyTexSubImage1D;

        snprintf(symboln, sizeof(symboln), "%sCopyTexSubImage1DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyTexSubImage2D) {
        void **procp = (void **) &disp->CopyTexSubImage2D;

        snprintf(symboln, sizeof(symboln), "%sCopyTexSubImage2D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyTexSubImage2D) {
        void **procp = (void **) &disp->CopyTexSubImage2D;

        snprintf(symboln, sizeof(symboln), "%sCopyTexSubImage2DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteTextures) {
        void **procp = (void **) &disp->DeleteTextures;

        snprintf(symboln, sizeof(symboln), "%sDeleteTextures", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteTextures) {
        void **procp = (void **) &disp->DeleteTextures;

        snprintf(symboln, sizeof(symboln), "%sDeleteTexturesEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenTextures) {
        void **procp = (void **) &disp->GenTextures;

        snprintf(symboln, sizeof(symboln), "%sGenTextures", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenTextures) {
        void **procp = (void **) &disp->GenTextures;

        snprintf(symboln, sizeof(symboln), "%sGenTexturesEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetPointerv) {
        void **procp = (void **) &disp->GetPointerv;

        snprintf(symboln, sizeof(symboln), "%sGetPointerv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetPointerv) {
        void **procp = (void **) &disp->GetPointerv;

        snprintf(symboln, sizeof(symboln), "%sGetPointervEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsTexture) {
        void **procp = (void **) &disp->IsTexture;

        snprintf(symboln, sizeof(symboln), "%sIsTexture", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsTexture) {
        void **procp = (void **) &disp->IsTexture;

        snprintf(symboln, sizeof(symboln), "%sIsTextureEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PrioritizeTextures) {
        void **procp = (void **) &disp->PrioritizeTextures;

        snprintf(symboln, sizeof(symboln), "%sPrioritizeTextures",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PrioritizeTextures) {
        void **procp = (void **) &disp->PrioritizeTextures;

        snprintf(symboln, sizeof(symboln), "%sPrioritizeTexturesEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexSubImage1D) {
        void **procp = (void **) &disp->TexSubImage1D;

        snprintf(symboln, sizeof(symboln), "%sTexSubImage1D", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexSubImage1D) {
        void **procp = (void **) &disp->TexSubImage1D;

        snprintf(symboln, sizeof(symboln), "%sTexSubImage1DEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexSubImage2D) {
        void **procp = (void **) &disp->TexSubImage2D;

        snprintf(symboln, sizeof(symboln), "%sTexSubImage2D", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexSubImage2D) {
        void **procp = (void **) &disp->TexSubImage2D;

        snprintf(symboln, sizeof(symboln), "%sTexSubImage2DEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PopClientAttrib) {
        void **procp = (void **) &disp->PopClientAttrib;

        snprintf(symboln, sizeof(symboln), "%sPopClientAttrib", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PushClientAttrib) {
        void **procp = (void **) &disp->PushClientAttrib;

        snprintf(symboln, sizeof(symboln), "%sPushClientAttrib", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendColor) {
        void **procp = (void **) &disp->BlendColor;

        snprintf(symboln, sizeof(symboln), "%sBlendColor", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendColor) {
        void **procp = (void **) &disp->BlendColor;

        snprintf(symboln, sizeof(symboln), "%sBlendColorEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendEquation) {
        void **procp = (void **) &disp->BlendEquation;

        snprintf(symboln, sizeof(symboln), "%sBlendEquation", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendEquation) {
        void **procp = (void **) &disp->BlendEquation;

        snprintf(symboln, sizeof(symboln), "%sBlendEquationEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawRangeElements) {
        void **procp = (void **) &disp->DrawRangeElements;

        snprintf(symboln, sizeof(symboln), "%sDrawRangeElements",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawRangeElements) {
        void **procp = (void **) &disp->DrawRangeElements;

        snprintf(symboln, sizeof(symboln), "%sDrawRangeElementsEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorTable) {
        void **procp = (void **) &disp->ColorTable;

        snprintf(symboln, sizeof(symboln), "%sColorTable", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorTable) {
        void **procp = (void **) &disp->ColorTable;

        snprintf(symboln, sizeof(symboln), "%sColorTableSGI", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorTable) {
        void **procp = (void **) &disp->ColorTable;

        snprintf(symboln, sizeof(symboln), "%sColorTableEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorTableParameterfv) {
        void **procp = (void **) &disp->ColorTableParameterfv;

        snprintf(symboln, sizeof(symboln), "%sColorTableParameterfv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorTableParameterfv) {
        void **procp = (void **) &disp->ColorTableParameterfv;

        snprintf(symboln, sizeof(symboln), "%sColorTableParameterfvSGI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorTableParameteriv) {
        void **procp = (void **) &disp->ColorTableParameteriv;

        snprintf(symboln, sizeof(symboln), "%sColorTableParameteriv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorTableParameteriv) {
        void **procp = (void **) &disp->ColorTableParameteriv;

        snprintf(symboln, sizeof(symboln), "%sColorTableParameterivSGI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyColorTable) {
        void **procp = (void **) &disp->CopyColorTable;

        snprintf(symboln, sizeof(symboln), "%sCopyColorTable", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyColorTable) {
        void **procp = (void **) &disp->CopyColorTable;

        snprintf(symboln, sizeof(symboln), "%sCopyColorTableSGI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetColorTable) {
        void **procp = (void **) &disp->GetColorTable;

        snprintf(symboln, sizeof(symboln), "%sGetColorTable", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetColorTable) {
        void **procp = (void **) &disp->GetColorTable;

        snprintf(symboln, sizeof(symboln), "%sGetColorTableSGI", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetColorTable) {
        void **procp = (void **) &disp->GetColorTable;

        snprintf(symboln, sizeof(symboln), "%sGetColorTableEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetColorTableParameterfv) {
        void **procp = (void **) &disp->GetColorTableParameterfv;

        snprintf(symboln, sizeof(symboln), "%sGetColorTableParameterfv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetColorTableParameterfv) {
        void **procp = (void **) &disp->GetColorTableParameterfv;

        snprintf(symboln, sizeof(symboln), "%sGetColorTableParameterfvSGI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetColorTableParameterfv) {
        void **procp = (void **) &disp->GetColorTableParameterfv;

        snprintf(symboln, sizeof(symboln), "%sGetColorTableParameterfvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetColorTableParameteriv) {
        void **procp = (void **) &disp->GetColorTableParameteriv;

        snprintf(symboln, sizeof(symboln), "%sGetColorTableParameteriv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetColorTableParameteriv) {
        void **procp = (void **) &disp->GetColorTableParameteriv;

        snprintf(symboln, sizeof(symboln), "%sGetColorTableParameterivSGI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetColorTableParameteriv) {
        void **procp = (void **) &disp->GetColorTableParameteriv;

        snprintf(symboln, sizeof(symboln), "%sGetColorTableParameterivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorSubTable) {
        void **procp = (void **) &disp->ColorSubTable;

        snprintf(symboln, sizeof(symboln), "%sColorSubTable", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorSubTable) {
        void **procp = (void **) &disp->ColorSubTable;

        snprintf(symboln, sizeof(symboln), "%sColorSubTableEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyColorSubTable) {
        void **procp = (void **) &disp->CopyColorSubTable;

        snprintf(symboln, sizeof(symboln), "%sCopyColorSubTable",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyColorSubTable) {
        void **procp = (void **) &disp->CopyColorSubTable;

        snprintf(symboln, sizeof(symboln), "%sCopyColorSubTableEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ConvolutionFilter1D) {
        void **procp = (void **) &disp->ConvolutionFilter1D;

        snprintf(symboln, sizeof(symboln), "%sConvolutionFilter1D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ConvolutionFilter1D) {
        void **procp = (void **) &disp->ConvolutionFilter1D;

        snprintf(symboln, sizeof(symboln), "%sConvolutionFilter1DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ConvolutionFilter2D) {
        void **procp = (void **) &disp->ConvolutionFilter2D;

        snprintf(symboln, sizeof(symboln), "%sConvolutionFilter2D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ConvolutionFilter2D) {
        void **procp = (void **) &disp->ConvolutionFilter2D;

        snprintf(symboln, sizeof(symboln), "%sConvolutionFilter2DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ConvolutionParameterf) {
        void **procp = (void **) &disp->ConvolutionParameterf;

        snprintf(symboln, sizeof(symboln), "%sConvolutionParameterf",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ConvolutionParameterf) {
        void **procp = (void **) &disp->ConvolutionParameterf;

        snprintf(symboln, sizeof(symboln), "%sConvolutionParameterfEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ConvolutionParameterfv) {
        void **procp = (void **) &disp->ConvolutionParameterfv;

        snprintf(symboln, sizeof(symboln), "%sConvolutionParameterfv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ConvolutionParameterfv) {
        void **procp = (void **) &disp->ConvolutionParameterfv;

        snprintf(symboln, sizeof(symboln), "%sConvolutionParameterfvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ConvolutionParameteri) {
        void **procp = (void **) &disp->ConvolutionParameteri;

        snprintf(symboln, sizeof(symboln), "%sConvolutionParameteri",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ConvolutionParameteri) {
        void **procp = (void **) &disp->ConvolutionParameteri;

        snprintf(symboln, sizeof(symboln), "%sConvolutionParameteriEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ConvolutionParameteriv) {
        void **procp = (void **) &disp->ConvolutionParameteriv;

        snprintf(symboln, sizeof(symboln), "%sConvolutionParameteriv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ConvolutionParameteriv) {
        void **procp = (void **) &disp->ConvolutionParameteriv;

        snprintf(symboln, sizeof(symboln), "%sConvolutionParameterivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyConvolutionFilter1D) {
        void **procp = (void **) &disp->CopyConvolutionFilter1D;

        snprintf(symboln, sizeof(symboln), "%sCopyConvolutionFilter1D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyConvolutionFilter1D) {
        void **procp = (void **) &disp->CopyConvolutionFilter1D;

        snprintf(symboln, sizeof(symboln), "%sCopyConvolutionFilter1DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyConvolutionFilter2D) {
        void **procp = (void **) &disp->CopyConvolutionFilter2D;

        snprintf(symboln, sizeof(symboln), "%sCopyConvolutionFilter2D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyConvolutionFilter2D) {
        void **procp = (void **) &disp->CopyConvolutionFilter2D;

        snprintf(symboln, sizeof(symboln), "%sCopyConvolutionFilter2DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetConvolutionFilter) {
        void **procp = (void **) &disp->GetConvolutionFilter;

        snprintf(symboln, sizeof(symboln), "%sGetConvolutionFilter",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetConvolutionFilter) {
        void **procp = (void **) &disp->GetConvolutionFilter;

        snprintf(symboln, sizeof(symboln), "%sGetConvolutionFilterEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetConvolutionParameterfv) {
        void **procp = (void **) &disp->GetConvolutionParameterfv;

        snprintf(symboln, sizeof(symboln), "%sGetConvolutionParameterfv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetConvolutionParameterfv) {
        void **procp = (void **) &disp->GetConvolutionParameterfv;

        snprintf(symboln, sizeof(symboln), "%sGetConvolutionParameterfvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetConvolutionParameteriv) {
        void **procp = (void **) &disp->GetConvolutionParameteriv;

        snprintf(symboln, sizeof(symboln), "%sGetConvolutionParameteriv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetConvolutionParameteriv) {
        void **procp = (void **) &disp->GetConvolutionParameteriv;

        snprintf(symboln, sizeof(symboln), "%sGetConvolutionParameterivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetSeparableFilter) {
        void **procp = (void **) &disp->GetSeparableFilter;

        snprintf(symboln, sizeof(symboln), "%sGetSeparableFilter",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetSeparableFilter) {
        void **procp = (void **) &disp->GetSeparableFilter;

        snprintf(symboln, sizeof(symboln), "%sGetSeparableFilterEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SeparableFilter2D) {
        void **procp = (void **) &disp->SeparableFilter2D;

        snprintf(symboln, sizeof(symboln), "%sSeparableFilter2D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SeparableFilter2D) {
        void **procp = (void **) &disp->SeparableFilter2D;

        snprintf(symboln, sizeof(symboln), "%sSeparableFilter2DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetHistogram) {
        void **procp = (void **) &disp->GetHistogram;

        snprintf(symboln, sizeof(symboln), "%sGetHistogram", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetHistogram) {
        void **procp = (void **) &disp->GetHistogram;

        snprintf(symboln, sizeof(symboln), "%sGetHistogramEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetHistogramParameterfv) {
        void **procp = (void **) &disp->GetHistogramParameterfv;

        snprintf(symboln, sizeof(symboln), "%sGetHistogramParameterfv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetHistogramParameterfv) {
        void **procp = (void **) &disp->GetHistogramParameterfv;

        snprintf(symboln, sizeof(symboln), "%sGetHistogramParameterfvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetHistogramParameteriv) {
        void **procp = (void **) &disp->GetHistogramParameteriv;

        snprintf(symboln, sizeof(symboln), "%sGetHistogramParameteriv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetHistogramParameteriv) {
        void **procp = (void **) &disp->GetHistogramParameteriv;

        snprintf(symboln, sizeof(symboln), "%sGetHistogramParameterivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetMinmax) {
        void **procp = (void **) &disp->GetMinmax;

        snprintf(symboln, sizeof(symboln), "%sGetMinmax", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetMinmax) {
        void **procp = (void **) &disp->GetMinmax;

        snprintf(symboln, sizeof(symboln), "%sGetMinmaxEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetMinmaxParameterfv) {
        void **procp = (void **) &disp->GetMinmaxParameterfv;

        snprintf(symboln, sizeof(symboln), "%sGetMinmaxParameterfv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetMinmaxParameterfv) {
        void **procp = (void **) &disp->GetMinmaxParameterfv;

        snprintf(symboln, sizeof(symboln), "%sGetMinmaxParameterfvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetMinmaxParameteriv) {
        void **procp = (void **) &disp->GetMinmaxParameteriv;

        snprintf(symboln, sizeof(symboln), "%sGetMinmaxParameteriv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetMinmaxParameteriv) {
        void **procp = (void **) &disp->GetMinmaxParameteriv;

        snprintf(symboln, sizeof(symboln), "%sGetMinmaxParameterivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Histogram) {
        void **procp = (void **) &disp->Histogram;

        snprintf(symboln, sizeof(symboln), "%sHistogram", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Histogram) {
        void **procp = (void **) &disp->Histogram;

        snprintf(symboln, sizeof(symboln), "%sHistogramEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Minmax) {
        void **procp = (void **) &disp->Minmax;

        snprintf(symboln, sizeof(symboln), "%sMinmax", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Minmax) {
        void **procp = (void **) &disp->Minmax;

        snprintf(symboln, sizeof(symboln), "%sMinmaxEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ResetHistogram) {
        void **procp = (void **) &disp->ResetHistogram;

        snprintf(symboln, sizeof(symboln), "%sResetHistogram", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ResetHistogram) {
        void **procp = (void **) &disp->ResetHistogram;

        snprintf(symboln, sizeof(symboln), "%sResetHistogramEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ResetMinmax) {
        void **procp = (void **) &disp->ResetMinmax;

        snprintf(symboln, sizeof(symboln), "%sResetMinmax", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ResetMinmax) {
        void **procp = (void **) &disp->ResetMinmax;

        snprintf(symboln, sizeof(symboln), "%sResetMinmaxEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexImage3D) {
        void **procp = (void **) &disp->TexImage3D;

        snprintf(symboln, sizeof(symboln), "%sTexImage3D", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexImage3D) {
        void **procp = (void **) &disp->TexImage3D;

        snprintf(symboln, sizeof(symboln), "%sTexImage3DEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexSubImage3D) {
        void **procp = (void **) &disp->TexSubImage3D;

        snprintf(symboln, sizeof(symboln), "%sTexSubImage3D", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexSubImage3D) {
        void **procp = (void **) &disp->TexSubImage3D;

        snprintf(symboln, sizeof(symboln), "%sTexSubImage3DEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyTexSubImage3D) {
        void **procp = (void **) &disp->CopyTexSubImage3D;

        snprintf(symboln, sizeof(symboln), "%sCopyTexSubImage3D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyTexSubImage3D) {
        void **procp = (void **) &disp->CopyTexSubImage3D;

        snprintf(symboln, sizeof(symboln), "%sCopyTexSubImage3DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ActiveTextureARB) {
        void **procp = (void **) &disp->ActiveTextureARB;

        snprintf(symboln, sizeof(symboln), "%sActiveTexture", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ActiveTextureARB) {
        void **procp = (void **) &disp->ActiveTextureARB;

        snprintf(symboln, sizeof(symboln), "%sActiveTextureARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClientActiveTextureARB) {
        void **procp = (void **) &disp->ClientActiveTextureARB;

        snprintf(symboln, sizeof(symboln), "%sClientActiveTexture",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClientActiveTextureARB) {
        void **procp = (void **) &disp->ClientActiveTextureARB;

        snprintf(symboln, sizeof(symboln), "%sClientActiveTextureARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1dARB) {
        void **procp = (void **) &disp->MultiTexCoord1dARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1dARB) {
        void **procp = (void **) &disp->MultiTexCoord1dARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1dARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1dvARB) {
        void **procp = (void **) &disp->MultiTexCoord1dvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1dvARB) {
        void **procp = (void **) &disp->MultiTexCoord1dvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1dvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1fARB) {
        void **procp = (void **) &disp->MultiTexCoord1fARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1fARB) {
        void **procp = (void **) &disp->MultiTexCoord1fARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1fARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1fvARB) {
        void **procp = (void **) &disp->MultiTexCoord1fvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1fvARB) {
        void **procp = (void **) &disp->MultiTexCoord1fvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1fvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1iARB) {
        void **procp = (void **) &disp->MultiTexCoord1iARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1iARB) {
        void **procp = (void **) &disp->MultiTexCoord1iARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1iARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1ivARB) {
        void **procp = (void **) &disp->MultiTexCoord1ivARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1ivARB) {
        void **procp = (void **) &disp->MultiTexCoord1ivARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1ivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1sARB) {
        void **procp = (void **) &disp->MultiTexCoord1sARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1sARB) {
        void **procp = (void **) &disp->MultiTexCoord1sARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1sARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1svARB) {
        void **procp = (void **) &disp->MultiTexCoord1svARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord1svARB) {
        void **procp = (void **) &disp->MultiTexCoord1svARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1svARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2dARB) {
        void **procp = (void **) &disp->MultiTexCoord2dARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2dARB) {
        void **procp = (void **) &disp->MultiTexCoord2dARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2dARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2dvARB) {
        void **procp = (void **) &disp->MultiTexCoord2dvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2dvARB) {
        void **procp = (void **) &disp->MultiTexCoord2dvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2dvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2fARB) {
        void **procp = (void **) &disp->MultiTexCoord2fARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2fARB) {
        void **procp = (void **) &disp->MultiTexCoord2fARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2fARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2fvARB) {
        void **procp = (void **) &disp->MultiTexCoord2fvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2fvARB) {
        void **procp = (void **) &disp->MultiTexCoord2fvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2fvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2iARB) {
        void **procp = (void **) &disp->MultiTexCoord2iARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2iARB) {
        void **procp = (void **) &disp->MultiTexCoord2iARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2iARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2ivARB) {
        void **procp = (void **) &disp->MultiTexCoord2ivARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2ivARB) {
        void **procp = (void **) &disp->MultiTexCoord2ivARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2ivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2sARB) {
        void **procp = (void **) &disp->MultiTexCoord2sARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2sARB) {
        void **procp = (void **) &disp->MultiTexCoord2sARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2sARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2svARB) {
        void **procp = (void **) &disp->MultiTexCoord2svARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord2svARB) {
        void **procp = (void **) &disp->MultiTexCoord2svARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2svARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3dARB) {
        void **procp = (void **) &disp->MultiTexCoord3dARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3dARB) {
        void **procp = (void **) &disp->MultiTexCoord3dARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3dARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3dvARB) {
        void **procp = (void **) &disp->MultiTexCoord3dvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3dvARB) {
        void **procp = (void **) &disp->MultiTexCoord3dvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3dvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3fARB) {
        void **procp = (void **) &disp->MultiTexCoord3fARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3fARB) {
        void **procp = (void **) &disp->MultiTexCoord3fARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3fARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3fvARB) {
        void **procp = (void **) &disp->MultiTexCoord3fvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3fvARB) {
        void **procp = (void **) &disp->MultiTexCoord3fvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3fvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3iARB) {
        void **procp = (void **) &disp->MultiTexCoord3iARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3iARB) {
        void **procp = (void **) &disp->MultiTexCoord3iARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3iARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3ivARB) {
        void **procp = (void **) &disp->MultiTexCoord3ivARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3ivARB) {
        void **procp = (void **) &disp->MultiTexCoord3ivARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3ivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3sARB) {
        void **procp = (void **) &disp->MultiTexCoord3sARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3sARB) {
        void **procp = (void **) &disp->MultiTexCoord3sARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3sARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3svARB) {
        void **procp = (void **) &disp->MultiTexCoord3svARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord3svARB) {
        void **procp = (void **) &disp->MultiTexCoord3svARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3svARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4dARB) {
        void **procp = (void **) &disp->MultiTexCoord4dARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4dARB) {
        void **procp = (void **) &disp->MultiTexCoord4dARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4dARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4dvARB) {
        void **procp = (void **) &disp->MultiTexCoord4dvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4dvARB) {
        void **procp = (void **) &disp->MultiTexCoord4dvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4dvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4fARB) {
        void **procp = (void **) &disp->MultiTexCoord4fARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4fARB) {
        void **procp = (void **) &disp->MultiTexCoord4fARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4fARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4fvARB) {
        void **procp = (void **) &disp->MultiTexCoord4fvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4fvARB) {
        void **procp = (void **) &disp->MultiTexCoord4fvARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4fvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4iARB) {
        void **procp = (void **) &disp->MultiTexCoord4iARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4iARB) {
        void **procp = (void **) &disp->MultiTexCoord4iARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4iARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4ivARB) {
        void **procp = (void **) &disp->MultiTexCoord4ivARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4ivARB) {
        void **procp = (void **) &disp->MultiTexCoord4ivARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4ivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4sARB) {
        void **procp = (void **) &disp->MultiTexCoord4sARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4sARB) {
        void **procp = (void **) &disp->MultiTexCoord4sARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4sARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4svARB) {
        void **procp = (void **) &disp->MultiTexCoord4svARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoord4svARB) {
        void **procp = (void **) &disp->MultiTexCoord4svARB;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4svARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->AttachShader) {
        void **procp = (void **) &disp->AttachShader;

        snprintf(symboln, sizeof(symboln), "%sAttachShader", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CreateProgram) {
        void **procp = (void **) &disp->CreateProgram;

        snprintf(symboln, sizeof(symboln), "%sCreateProgram", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CreateShader) {
        void **procp = (void **) &disp->CreateShader;

        snprintf(symboln, sizeof(symboln), "%sCreateShader", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteProgram) {
        void **procp = (void **) &disp->DeleteProgram;

        snprintf(symboln, sizeof(symboln), "%sDeleteProgram", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteShader) {
        void **procp = (void **) &disp->DeleteShader;

        snprintf(symboln, sizeof(symboln), "%sDeleteShader", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DetachShader) {
        void **procp = (void **) &disp->DetachShader;

        snprintf(symboln, sizeof(symboln), "%sDetachShader", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetAttachedShaders) {
        void **procp = (void **) &disp->GetAttachedShaders;

        snprintf(symboln, sizeof(symboln), "%sGetAttachedShaders",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetProgramInfoLog) {
        void **procp = (void **) &disp->GetProgramInfoLog;

        snprintf(symboln, sizeof(symboln), "%sGetProgramInfoLog",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetProgramiv) {
        void **procp = (void **) &disp->GetProgramiv;

        snprintf(symboln, sizeof(symboln), "%sGetProgramiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetShaderInfoLog) {
        void **procp = (void **) &disp->GetShaderInfoLog;

        snprintf(symboln, sizeof(symboln), "%sGetShaderInfoLog", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetShaderiv) {
        void **procp = (void **) &disp->GetShaderiv;

        snprintf(symboln, sizeof(symboln), "%sGetShaderiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsProgram) {
        void **procp = (void **) &disp->IsProgram;

        snprintf(symboln, sizeof(symboln), "%sIsProgram", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsShader) {
        void **procp = (void **) &disp->IsShader;

        snprintf(symboln, sizeof(symboln), "%sIsShader", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->StencilFuncSeparate) {
        void **procp = (void **) &disp->StencilFuncSeparate;

        snprintf(symboln, sizeof(symboln), "%sStencilFuncSeparate",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->StencilMaskSeparate) {
        void **procp = (void **) &disp->StencilMaskSeparate;

        snprintf(symboln, sizeof(symboln), "%sStencilMaskSeparate",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->StencilOpSeparate) {
        void **procp = (void **) &disp->StencilOpSeparate;

        snprintf(symboln, sizeof(symboln), "%sStencilOpSeparate",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->StencilOpSeparate) {
        void **procp = (void **) &disp->StencilOpSeparate;

        snprintf(symboln, sizeof(symboln), "%sStencilOpSeparateATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UniformMatrix2x3fv) {
        void **procp = (void **) &disp->UniformMatrix2x3fv;

        snprintf(symboln, sizeof(symboln), "%sUniformMatrix2x3fv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UniformMatrix2x4fv) {
        void **procp = (void **) &disp->UniformMatrix2x4fv;

        snprintf(symboln, sizeof(symboln), "%sUniformMatrix2x4fv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UniformMatrix3x2fv) {
        void **procp = (void **) &disp->UniformMatrix3x2fv;

        snprintf(symboln, sizeof(symboln), "%sUniformMatrix3x2fv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UniformMatrix3x4fv) {
        void **procp = (void **) &disp->UniformMatrix3x4fv;

        snprintf(symboln, sizeof(symboln), "%sUniformMatrix3x4fv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UniformMatrix4x2fv) {
        void **procp = (void **) &disp->UniformMatrix4x2fv;

        snprintf(symboln, sizeof(symboln), "%sUniformMatrix4x2fv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UniformMatrix4x3fv) {
        void **procp = (void **) &disp->UniformMatrix4x3fv;

        snprintf(symboln, sizeof(symboln), "%sUniformMatrix4x3fv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClampColor) {
        void **procp = (void **) &disp->ClampColor;

        snprintf(symboln, sizeof(symboln), "%sClampColor", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClearBufferfi) {
        void **procp = (void **) &disp->ClearBufferfi;

        snprintf(symboln, sizeof(symboln), "%sClearBufferfi", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClearBufferfv) {
        void **procp = (void **) &disp->ClearBufferfv;

        snprintf(symboln, sizeof(symboln), "%sClearBufferfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClearBufferiv) {
        void **procp = (void **) &disp->ClearBufferiv;

        snprintf(symboln, sizeof(symboln), "%sClearBufferiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClearBufferuiv) {
        void **procp = (void **) &disp->ClearBufferuiv;

        snprintf(symboln, sizeof(symboln), "%sClearBufferuiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetStringi) {
        void **procp = (void **) &disp->GetStringi;

        snprintf(symboln, sizeof(symboln), "%sGetStringi", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexBuffer) {
        void **procp = (void **) &disp->TexBuffer;

        snprintf(symboln, sizeof(symboln), "%sTexBuffer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FramebufferTexture) {
        void **procp = (void **) &disp->FramebufferTexture;

        snprintf(symboln, sizeof(symboln), "%sFramebufferTexture",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetBufferParameteri64v) {
        void **procp = (void **) &disp->GetBufferParameteri64v;

        snprintf(symboln, sizeof(symboln), "%sGetBufferParameteri64v",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetInteger64i_v) {
        void **procp = (void **) &disp->GetInteger64i_v;

        snprintf(symboln, sizeof(symboln), "%sGetInteger64i_v", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribDivisor) {
        void **procp = (void **) &disp->VertexAttribDivisor;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribDivisor",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LoadTransposeMatrixdARB) {
        void **procp = (void **) &disp->LoadTransposeMatrixdARB;

        snprintf(symboln, sizeof(symboln), "%sLoadTransposeMatrixd",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LoadTransposeMatrixdARB) {
        void **procp = (void **) &disp->LoadTransposeMatrixdARB;

        snprintf(symboln, sizeof(symboln), "%sLoadTransposeMatrixdARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LoadTransposeMatrixfARB) {
        void **procp = (void **) &disp->LoadTransposeMatrixfARB;

        snprintf(symboln, sizeof(symboln), "%sLoadTransposeMatrixf",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LoadTransposeMatrixfARB) {
        void **procp = (void **) &disp->LoadTransposeMatrixfARB;

        snprintf(symboln, sizeof(symboln), "%sLoadTransposeMatrixfARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultTransposeMatrixdARB) {
        void **procp = (void **) &disp->MultTransposeMatrixdARB;

        snprintf(symboln, sizeof(symboln), "%sMultTransposeMatrixd",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultTransposeMatrixdARB) {
        void **procp = (void **) &disp->MultTransposeMatrixdARB;

        snprintf(symboln, sizeof(symboln), "%sMultTransposeMatrixdARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultTransposeMatrixfARB) {
        void **procp = (void **) &disp->MultTransposeMatrixfARB;

        snprintf(symboln, sizeof(symboln), "%sMultTransposeMatrixf",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultTransposeMatrixfARB) {
        void **procp = (void **) &disp->MultTransposeMatrixfARB;

        snprintf(symboln, sizeof(symboln), "%sMultTransposeMatrixfARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SampleCoverageARB) {
        void **procp = (void **) &disp->SampleCoverageARB;

        snprintf(symboln, sizeof(symboln), "%sSampleCoverage", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SampleCoverageARB) {
        void **procp = (void **) &disp->SampleCoverageARB;

        snprintf(symboln, sizeof(symboln), "%sSampleCoverageARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CompressedTexImage1DARB) {
        void **procp = (void **) &disp->CompressedTexImage1DARB;

        snprintf(symboln, sizeof(symboln), "%sCompressedTexImage1D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CompressedTexImage1DARB) {
        void **procp = (void **) &disp->CompressedTexImage1DARB;

        snprintf(symboln, sizeof(symboln), "%sCompressedTexImage1DARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CompressedTexImage2DARB) {
        void **procp = (void **) &disp->CompressedTexImage2DARB;

        snprintf(symboln, sizeof(symboln), "%sCompressedTexImage2D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CompressedTexImage2DARB) {
        void **procp = (void **) &disp->CompressedTexImage2DARB;

        snprintf(symboln, sizeof(symboln), "%sCompressedTexImage2DARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CompressedTexImage3DARB) {
        void **procp = (void **) &disp->CompressedTexImage3DARB;

        snprintf(symboln, sizeof(symboln), "%sCompressedTexImage3D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CompressedTexImage3DARB) {
        void **procp = (void **) &disp->CompressedTexImage3DARB;

        snprintf(symboln, sizeof(symboln), "%sCompressedTexImage3DARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CompressedTexSubImage1DARB) {
        void **procp = (void **) &disp->CompressedTexSubImage1DARB;

        snprintf(symboln, sizeof(symboln), "%sCompressedTexSubImage1D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CompressedTexSubImage1DARB) {
        void **procp = (void **) &disp->CompressedTexSubImage1DARB;

        snprintf(symboln, sizeof(symboln), "%sCompressedTexSubImage1DARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CompressedTexSubImage2DARB) {
        void **procp = (void **) &disp->CompressedTexSubImage2DARB;

        snprintf(symboln, sizeof(symboln), "%sCompressedTexSubImage2D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CompressedTexSubImage2DARB) {
        void **procp = (void **) &disp->CompressedTexSubImage2DARB;

        snprintf(symboln, sizeof(symboln), "%sCompressedTexSubImage2DARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CompressedTexSubImage3DARB) {
        void **procp = (void **) &disp->CompressedTexSubImage3DARB;

        snprintf(symboln, sizeof(symboln), "%sCompressedTexSubImage3D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CompressedTexSubImage3DARB) {
        void **procp = (void **) &disp->CompressedTexSubImage3DARB;

        snprintf(symboln, sizeof(symboln), "%sCompressedTexSubImage3DARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetCompressedTexImageARB) {
        void **procp = (void **) &disp->GetCompressedTexImageARB;

        snprintf(symboln, sizeof(symboln), "%sGetCompressedTexImage",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetCompressedTexImageARB) {
        void **procp = (void **) &disp->GetCompressedTexImageARB;

        snprintf(symboln, sizeof(symboln), "%sGetCompressedTexImageARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DisableVertexAttribArrayARB) {
        void **procp = (void **) &disp->DisableVertexAttribArrayARB;

        snprintf(symboln, sizeof(symboln), "%sDisableVertexAttribArray",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DisableVertexAttribArrayARB) {
        void **procp = (void **) &disp->DisableVertexAttribArrayARB;

        snprintf(symboln, sizeof(symboln), "%sDisableVertexAttribArrayARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EnableVertexAttribArrayARB) {
        void **procp = (void **) &disp->EnableVertexAttribArrayARB;

        snprintf(symboln, sizeof(symboln), "%sEnableVertexAttribArray",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EnableVertexAttribArrayARB) {
        void **procp = (void **) &disp->EnableVertexAttribArrayARB;

        snprintf(symboln, sizeof(symboln), "%sEnableVertexAttribArrayARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetProgramEnvParameterdvARB) {
        void **procp = (void **) &disp->GetProgramEnvParameterdvARB;

        snprintf(symboln, sizeof(symboln), "%sGetProgramEnvParameterdvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetProgramEnvParameterfvARB) {
        void **procp = (void **) &disp->GetProgramEnvParameterfvARB;

        snprintf(symboln, sizeof(symboln), "%sGetProgramEnvParameterfvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetProgramLocalParameterdvARB) {
        void **procp = (void **) &disp->GetProgramLocalParameterdvARB;

        snprintf(symboln, sizeof(symboln), "%sGetProgramLocalParameterdvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetProgramLocalParameterfvARB) {
        void **procp = (void **) &disp->GetProgramLocalParameterfvARB;

        snprintf(symboln, sizeof(symboln), "%sGetProgramLocalParameterfvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetProgramStringARB) {
        void **procp = (void **) &disp->GetProgramStringARB;

        snprintf(symboln, sizeof(symboln), "%sGetProgramStringARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetProgramivARB) {
        void **procp = (void **) &disp->GetProgramivARB;

        snprintf(symboln, sizeof(symboln), "%sGetProgramivARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribdvARB) {
        void **procp = (void **) &disp->GetVertexAttribdvARB;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribdv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribdvARB) {
        void **procp = (void **) &disp->GetVertexAttribdvARB;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribdvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribfvARB) {
        void **procp = (void **) &disp->GetVertexAttribfvARB;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribfv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribfvARB) {
        void **procp = (void **) &disp->GetVertexAttribfvARB;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribfvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribivARB) {
        void **procp = (void **) &disp->GetVertexAttribivARB;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribivARB) {
        void **procp = (void **) &disp->GetVertexAttribivARB;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramEnvParameter4dARB) {
        void **procp = (void **) &disp->ProgramEnvParameter4dARB;

        snprintf(symboln, sizeof(symboln), "%sProgramEnvParameter4dARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramEnvParameter4dARB) {
        void **procp = (void **) &disp->ProgramEnvParameter4dARB;

        snprintf(symboln, sizeof(symboln), "%sProgramParameter4dNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramEnvParameter4dvARB) {
        void **procp = (void **) &disp->ProgramEnvParameter4dvARB;

        snprintf(symboln, sizeof(symboln), "%sProgramEnvParameter4dvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramEnvParameter4dvARB) {
        void **procp = (void **) &disp->ProgramEnvParameter4dvARB;

        snprintf(symboln, sizeof(symboln), "%sProgramParameter4dvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramEnvParameter4fARB) {
        void **procp = (void **) &disp->ProgramEnvParameter4fARB;

        snprintf(symboln, sizeof(symboln), "%sProgramEnvParameter4fARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramEnvParameter4fARB) {
        void **procp = (void **) &disp->ProgramEnvParameter4fARB;

        snprintf(symboln, sizeof(symboln), "%sProgramParameter4fNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramEnvParameter4fvARB) {
        void **procp = (void **) &disp->ProgramEnvParameter4fvARB;

        snprintf(symboln, sizeof(symboln), "%sProgramEnvParameter4fvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramEnvParameter4fvARB) {
        void **procp = (void **) &disp->ProgramEnvParameter4fvARB;

        snprintf(symboln, sizeof(symboln), "%sProgramParameter4fvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramLocalParameter4dARB) {
        void **procp = (void **) &disp->ProgramLocalParameter4dARB;

        snprintf(symboln, sizeof(symboln), "%sProgramLocalParameter4dARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramLocalParameter4dvARB) {
        void **procp = (void **) &disp->ProgramLocalParameter4dvARB;

        snprintf(symboln, sizeof(symboln), "%sProgramLocalParameter4dvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramLocalParameter4fARB) {
        void **procp = (void **) &disp->ProgramLocalParameter4fARB;

        snprintf(symboln, sizeof(symboln), "%sProgramLocalParameter4fARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramLocalParameter4fvARB) {
        void **procp = (void **) &disp->ProgramLocalParameter4fvARB;

        snprintf(symboln, sizeof(symboln), "%sProgramLocalParameter4fvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramStringARB) {
        void **procp = (void **) &disp->ProgramStringARB;

        snprintf(symboln, sizeof(symboln), "%sProgramStringARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1dARB) {
        void **procp = (void **) &disp->VertexAttrib1dARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1dARB) {
        void **procp = (void **) &disp->VertexAttrib1dARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1dARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1dvARB) {
        void **procp = (void **) &disp->VertexAttrib1dvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1dvARB) {
        void **procp = (void **) &disp->VertexAttrib1dvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1dvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1fARB) {
        void **procp = (void **) &disp->VertexAttrib1fARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1fARB) {
        void **procp = (void **) &disp->VertexAttrib1fARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1fARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1fvARB) {
        void **procp = (void **) &disp->VertexAttrib1fvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1fvARB) {
        void **procp = (void **) &disp->VertexAttrib1fvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1fvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1sARB) {
        void **procp = (void **) &disp->VertexAttrib1sARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1sARB) {
        void **procp = (void **) &disp->VertexAttrib1sARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1sARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1svARB) {
        void **procp = (void **) &disp->VertexAttrib1svARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1svARB) {
        void **procp = (void **) &disp->VertexAttrib1svARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1svARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2dARB) {
        void **procp = (void **) &disp->VertexAttrib2dARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2dARB) {
        void **procp = (void **) &disp->VertexAttrib2dARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2dARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2dvARB) {
        void **procp = (void **) &disp->VertexAttrib2dvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2dvARB) {
        void **procp = (void **) &disp->VertexAttrib2dvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2dvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2fARB) {
        void **procp = (void **) &disp->VertexAttrib2fARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2fARB) {
        void **procp = (void **) &disp->VertexAttrib2fARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2fARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2fvARB) {
        void **procp = (void **) &disp->VertexAttrib2fvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2fvARB) {
        void **procp = (void **) &disp->VertexAttrib2fvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2fvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2sARB) {
        void **procp = (void **) &disp->VertexAttrib2sARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2sARB) {
        void **procp = (void **) &disp->VertexAttrib2sARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2sARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2svARB) {
        void **procp = (void **) &disp->VertexAttrib2svARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2svARB) {
        void **procp = (void **) &disp->VertexAttrib2svARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2svARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3dARB) {
        void **procp = (void **) &disp->VertexAttrib3dARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3dARB) {
        void **procp = (void **) &disp->VertexAttrib3dARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3dARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3dvARB) {
        void **procp = (void **) &disp->VertexAttrib3dvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3dvARB) {
        void **procp = (void **) &disp->VertexAttrib3dvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3dvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3fARB) {
        void **procp = (void **) &disp->VertexAttrib3fARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3fARB) {
        void **procp = (void **) &disp->VertexAttrib3fARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3fARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3fvARB) {
        void **procp = (void **) &disp->VertexAttrib3fvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3fvARB) {
        void **procp = (void **) &disp->VertexAttrib3fvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3fvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3sARB) {
        void **procp = (void **) &disp->VertexAttrib3sARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3sARB) {
        void **procp = (void **) &disp->VertexAttrib3sARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3sARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3svARB) {
        void **procp = (void **) &disp->VertexAttrib3svARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3svARB) {
        void **procp = (void **) &disp->VertexAttrib3svARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3svARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4NbvARB) {
        void **procp = (void **) &disp->VertexAttrib4NbvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4Nbv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4NbvARB) {
        void **procp = (void **) &disp->VertexAttrib4NbvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4NbvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4NivARB) {
        void **procp = (void **) &disp->VertexAttrib4NivARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4Niv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4NivARB) {
        void **procp = (void **) &disp->VertexAttrib4NivARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4NivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4NsvARB) {
        void **procp = (void **) &disp->VertexAttrib4NsvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4Nsv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4NsvARB) {
        void **procp = (void **) &disp->VertexAttrib4NsvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4NsvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4NubARB) {
        void **procp = (void **) &disp->VertexAttrib4NubARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4Nub", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4NubARB) {
        void **procp = (void **) &disp->VertexAttrib4NubARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4NubARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4NubvARB) {
        void **procp = (void **) &disp->VertexAttrib4NubvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4Nubv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4NubvARB) {
        void **procp = (void **) &disp->VertexAttrib4NubvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4NubvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4NuivARB) {
        void **procp = (void **) &disp->VertexAttrib4NuivARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4Nuiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4NuivARB) {
        void **procp = (void **) &disp->VertexAttrib4NuivARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4NuivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4NusvARB) {
        void **procp = (void **) &disp->VertexAttrib4NusvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4Nusv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4NusvARB) {
        void **procp = (void **) &disp->VertexAttrib4NusvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4NusvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4bvARB) {
        void **procp = (void **) &disp->VertexAttrib4bvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4bv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4bvARB) {
        void **procp = (void **) &disp->VertexAttrib4bvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4bvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4dARB) {
        void **procp = (void **) &disp->VertexAttrib4dARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4dARB) {
        void **procp = (void **) &disp->VertexAttrib4dARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4dARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4dvARB) {
        void **procp = (void **) &disp->VertexAttrib4dvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4dvARB) {
        void **procp = (void **) &disp->VertexAttrib4dvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4dvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4fARB) {
        void **procp = (void **) &disp->VertexAttrib4fARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4fARB) {
        void **procp = (void **) &disp->VertexAttrib4fARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4fARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4fvARB) {
        void **procp = (void **) &disp->VertexAttrib4fvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4fvARB) {
        void **procp = (void **) &disp->VertexAttrib4fvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4fvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4ivARB) {
        void **procp = (void **) &disp->VertexAttrib4ivARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4ivARB) {
        void **procp = (void **) &disp->VertexAttrib4ivARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4ivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4sARB) {
        void **procp = (void **) &disp->VertexAttrib4sARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4sARB) {
        void **procp = (void **) &disp->VertexAttrib4sARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4sARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4svARB) {
        void **procp = (void **) &disp->VertexAttrib4svARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4svARB) {
        void **procp = (void **) &disp->VertexAttrib4svARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4svARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4ubvARB) {
        void **procp = (void **) &disp->VertexAttrib4ubvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4ubv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4ubvARB) {
        void **procp = (void **) &disp->VertexAttrib4ubvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4ubvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4uivARB) {
        void **procp = (void **) &disp->VertexAttrib4uivARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4uivARB) {
        void **procp = (void **) &disp->VertexAttrib4uivARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4uivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4usvARB) {
        void **procp = (void **) &disp->VertexAttrib4usvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4usv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4usvARB) {
        void **procp = (void **) &disp->VertexAttrib4usvARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4usvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribPointerARB) {
        void **procp = (void **) &disp->VertexAttribPointerARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribPointer",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribPointerARB) {
        void **procp = (void **) &disp->VertexAttribPointerARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribPointerARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindBufferARB) {
        void **procp = (void **) &disp->BindBufferARB;

        snprintf(symboln, sizeof(symboln), "%sBindBuffer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindBufferARB) {
        void **procp = (void **) &disp->BindBufferARB;

        snprintf(symboln, sizeof(symboln), "%sBindBufferARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BufferDataARB) {
        void **procp = (void **) &disp->BufferDataARB;

        snprintf(symboln, sizeof(symboln), "%sBufferData", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BufferDataARB) {
        void **procp = (void **) &disp->BufferDataARB;

        snprintf(symboln, sizeof(symboln), "%sBufferDataARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BufferSubDataARB) {
        void **procp = (void **) &disp->BufferSubDataARB;

        snprintf(symboln, sizeof(symboln), "%sBufferSubData", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BufferSubDataARB) {
        void **procp = (void **) &disp->BufferSubDataARB;

        snprintf(symboln, sizeof(symboln), "%sBufferSubDataARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteBuffersARB) {
        void **procp = (void **) &disp->DeleteBuffersARB;

        snprintf(symboln, sizeof(symboln), "%sDeleteBuffers", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteBuffersARB) {
        void **procp = (void **) &disp->DeleteBuffersARB;

        snprintf(symboln, sizeof(symboln), "%sDeleteBuffersARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenBuffersARB) {
        void **procp = (void **) &disp->GenBuffersARB;

        snprintf(symboln, sizeof(symboln), "%sGenBuffers", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenBuffersARB) {
        void **procp = (void **) &disp->GenBuffersARB;

        snprintf(symboln, sizeof(symboln), "%sGenBuffersARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetBufferParameterivARB) {
        void **procp = (void **) &disp->GetBufferParameterivARB;

        snprintf(symboln, sizeof(symboln), "%sGetBufferParameteriv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetBufferParameterivARB) {
        void **procp = (void **) &disp->GetBufferParameterivARB;

        snprintf(symboln, sizeof(symboln), "%sGetBufferParameterivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetBufferPointervARB) {
        void **procp = (void **) &disp->GetBufferPointervARB;

        snprintf(symboln, sizeof(symboln), "%sGetBufferPointerv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetBufferPointervARB) {
        void **procp = (void **) &disp->GetBufferPointervARB;

        snprintf(symboln, sizeof(symboln), "%sGetBufferPointervARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetBufferSubDataARB) {
        void **procp = (void **) &disp->GetBufferSubDataARB;

        snprintf(symboln, sizeof(symboln), "%sGetBufferSubData", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetBufferSubDataARB) {
        void **procp = (void **) &disp->GetBufferSubDataARB;

        snprintf(symboln, sizeof(symboln), "%sGetBufferSubDataARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsBufferARB) {
        void **procp = (void **) &disp->IsBufferARB;

        snprintf(symboln, sizeof(symboln), "%sIsBuffer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsBufferARB) {
        void **procp = (void **) &disp->IsBufferARB;

        snprintf(symboln, sizeof(symboln), "%sIsBufferARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MapBufferARB) {
        void **procp = (void **) &disp->MapBufferARB;

        snprintf(symboln, sizeof(symboln), "%sMapBuffer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MapBufferARB) {
        void **procp = (void **) &disp->MapBufferARB;

        snprintf(symboln, sizeof(symboln), "%sMapBufferARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UnmapBufferARB) {
        void **procp = (void **) &disp->UnmapBufferARB;

        snprintf(symboln, sizeof(symboln), "%sUnmapBuffer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UnmapBufferARB) {
        void **procp = (void **) &disp->UnmapBufferARB;

        snprintf(symboln, sizeof(symboln), "%sUnmapBufferARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BeginQueryARB) {
        void **procp = (void **) &disp->BeginQueryARB;

        snprintf(symboln, sizeof(symboln), "%sBeginQuery", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BeginQueryARB) {
        void **procp = (void **) &disp->BeginQueryARB;

        snprintf(symboln, sizeof(symboln), "%sBeginQueryARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteQueriesARB) {
        void **procp = (void **) &disp->DeleteQueriesARB;

        snprintf(symboln, sizeof(symboln), "%sDeleteQueries", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteQueriesARB) {
        void **procp = (void **) &disp->DeleteQueriesARB;

        snprintf(symboln, sizeof(symboln), "%sDeleteQueriesARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EndQueryARB) {
        void **procp = (void **) &disp->EndQueryARB;

        snprintf(symboln, sizeof(symboln), "%sEndQuery", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EndQueryARB) {
        void **procp = (void **) &disp->EndQueryARB;

        snprintf(symboln, sizeof(symboln), "%sEndQueryARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenQueriesARB) {
        void **procp = (void **) &disp->GenQueriesARB;

        snprintf(symboln, sizeof(symboln), "%sGenQueries", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenQueriesARB) {
        void **procp = (void **) &disp->GenQueriesARB;

        snprintf(symboln, sizeof(symboln), "%sGenQueriesARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetQueryObjectivARB) {
        void **procp = (void **) &disp->GetQueryObjectivARB;

        snprintf(symboln, sizeof(symboln), "%sGetQueryObjectiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetQueryObjectivARB) {
        void **procp = (void **) &disp->GetQueryObjectivARB;

        snprintf(symboln, sizeof(symboln), "%sGetQueryObjectivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetQueryObjectuivARB) {
        void **procp = (void **) &disp->GetQueryObjectuivARB;

        snprintf(symboln, sizeof(symboln), "%sGetQueryObjectuiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetQueryObjectuivARB) {
        void **procp = (void **) &disp->GetQueryObjectuivARB;

        snprintf(symboln, sizeof(symboln), "%sGetQueryObjectuivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetQueryivARB) {
        void **procp = (void **) &disp->GetQueryivARB;

        snprintf(symboln, sizeof(symboln), "%sGetQueryiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetQueryivARB) {
        void **procp = (void **) &disp->GetQueryivARB;

        snprintf(symboln, sizeof(symboln), "%sGetQueryivARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsQueryARB) {
        void **procp = (void **) &disp->IsQueryARB;

        snprintf(symboln, sizeof(symboln), "%sIsQuery", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsQueryARB) {
        void **procp = (void **) &disp->IsQueryARB;

        snprintf(symboln, sizeof(symboln), "%sIsQueryARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->AttachObjectARB) {
        void **procp = (void **) &disp->AttachObjectARB;

        snprintf(symboln, sizeof(symboln), "%sAttachObjectARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CompileShaderARB) {
        void **procp = (void **) &disp->CompileShaderARB;

        snprintf(symboln, sizeof(symboln), "%sCompileShader", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CompileShaderARB) {
        void **procp = (void **) &disp->CompileShaderARB;

        snprintf(symboln, sizeof(symboln), "%sCompileShaderARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CreateProgramObjectARB) {
        void **procp = (void **) &disp->CreateProgramObjectARB;

        snprintf(symboln, sizeof(symboln), "%sCreateProgramObjectARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CreateShaderObjectARB) {
        void **procp = (void **) &disp->CreateShaderObjectARB;

        snprintf(symboln, sizeof(symboln), "%sCreateShaderObjectARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteObjectARB) {
        void **procp = (void **) &disp->DeleteObjectARB;

        snprintf(symboln, sizeof(symboln), "%sDeleteObjectARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DetachObjectARB) {
        void **procp = (void **) &disp->DetachObjectARB;

        snprintf(symboln, sizeof(symboln), "%sDetachObjectARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetActiveUniformARB) {
        void **procp = (void **) &disp->GetActiveUniformARB;

        snprintf(symboln, sizeof(symboln), "%sGetActiveUniform", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetActiveUniformARB) {
        void **procp = (void **) &disp->GetActiveUniformARB;

        snprintf(symboln, sizeof(symboln), "%sGetActiveUniformARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetAttachedObjectsARB) {
        void **procp = (void **) &disp->GetAttachedObjectsARB;

        snprintf(symboln, sizeof(symboln), "%sGetAttachedObjectsARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetHandleARB) {
        void **procp = (void **) &disp->GetHandleARB;

        snprintf(symboln, sizeof(symboln), "%sGetHandleARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetInfoLogARB) {
        void **procp = (void **) &disp->GetInfoLogARB;

        snprintf(symboln, sizeof(symboln), "%sGetInfoLogARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetObjectParameterfvARB) {
        void **procp = (void **) &disp->GetObjectParameterfvARB;

        snprintf(symboln, sizeof(symboln), "%sGetObjectParameterfvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetObjectParameterivARB) {
        void **procp = (void **) &disp->GetObjectParameterivARB;

        snprintf(symboln, sizeof(symboln), "%sGetObjectParameterivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetShaderSourceARB) {
        void **procp = (void **) &disp->GetShaderSourceARB;

        snprintf(symboln, sizeof(symboln), "%sGetShaderSource", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetShaderSourceARB) {
        void **procp = (void **) &disp->GetShaderSourceARB;

        snprintf(symboln, sizeof(symboln), "%sGetShaderSourceARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetUniformLocationARB) {
        void **procp = (void **) &disp->GetUniformLocationARB;

        snprintf(symboln, sizeof(symboln), "%sGetUniformLocation",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetUniformLocationARB) {
        void **procp = (void **) &disp->GetUniformLocationARB;

        snprintf(symboln, sizeof(symboln), "%sGetUniformLocationARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetUniformfvARB) {
        void **procp = (void **) &disp->GetUniformfvARB;

        snprintf(symboln, sizeof(symboln), "%sGetUniformfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetUniformfvARB) {
        void **procp = (void **) &disp->GetUniformfvARB;

        snprintf(symboln, sizeof(symboln), "%sGetUniformfvARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetUniformivARB) {
        void **procp = (void **) &disp->GetUniformivARB;

        snprintf(symboln, sizeof(symboln), "%sGetUniformiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetUniformivARB) {
        void **procp = (void **) &disp->GetUniformivARB;

        snprintf(symboln, sizeof(symboln), "%sGetUniformivARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LinkProgramARB) {
        void **procp = (void **) &disp->LinkProgramARB;

        snprintf(symboln, sizeof(symboln), "%sLinkProgram", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LinkProgramARB) {
        void **procp = (void **) &disp->LinkProgramARB;

        snprintf(symboln, sizeof(symboln), "%sLinkProgramARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ShaderSourceARB) {
        void **procp = (void **) &disp->ShaderSourceARB;

        snprintf(symboln, sizeof(symboln), "%sShaderSource", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ShaderSourceARB) {
        void **procp = (void **) &disp->ShaderSourceARB;

        snprintf(symboln, sizeof(symboln), "%sShaderSourceARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform1fARB) {
        void **procp = (void **) &disp->Uniform1fARB;

        snprintf(symboln, sizeof(symboln), "%sUniform1f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform1fARB) {
        void **procp = (void **) &disp->Uniform1fARB;

        snprintf(symboln, sizeof(symboln), "%sUniform1fARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform1fvARB) {
        void **procp = (void **) &disp->Uniform1fvARB;

        snprintf(symboln, sizeof(symboln), "%sUniform1fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform1fvARB) {
        void **procp = (void **) &disp->Uniform1fvARB;

        snprintf(symboln, sizeof(symboln), "%sUniform1fvARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform1iARB) {
        void **procp = (void **) &disp->Uniform1iARB;

        snprintf(symboln, sizeof(symboln), "%sUniform1i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform1iARB) {
        void **procp = (void **) &disp->Uniform1iARB;

        snprintf(symboln, sizeof(symboln), "%sUniform1iARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform1ivARB) {
        void **procp = (void **) &disp->Uniform1ivARB;

        snprintf(symboln, sizeof(symboln), "%sUniform1iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform1ivARB) {
        void **procp = (void **) &disp->Uniform1ivARB;

        snprintf(symboln, sizeof(symboln), "%sUniform1ivARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform2fARB) {
        void **procp = (void **) &disp->Uniform2fARB;

        snprintf(symboln, sizeof(symboln), "%sUniform2f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform2fARB) {
        void **procp = (void **) &disp->Uniform2fARB;

        snprintf(symboln, sizeof(symboln), "%sUniform2fARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform2fvARB) {
        void **procp = (void **) &disp->Uniform2fvARB;

        snprintf(symboln, sizeof(symboln), "%sUniform2fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform2fvARB) {
        void **procp = (void **) &disp->Uniform2fvARB;

        snprintf(symboln, sizeof(symboln), "%sUniform2fvARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform2iARB) {
        void **procp = (void **) &disp->Uniform2iARB;

        snprintf(symboln, sizeof(symboln), "%sUniform2i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform2iARB) {
        void **procp = (void **) &disp->Uniform2iARB;

        snprintf(symboln, sizeof(symboln), "%sUniform2iARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform2ivARB) {
        void **procp = (void **) &disp->Uniform2ivARB;

        snprintf(symboln, sizeof(symboln), "%sUniform2iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform2ivARB) {
        void **procp = (void **) &disp->Uniform2ivARB;

        snprintf(symboln, sizeof(symboln), "%sUniform2ivARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform3fARB) {
        void **procp = (void **) &disp->Uniform3fARB;

        snprintf(symboln, sizeof(symboln), "%sUniform3f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform3fARB) {
        void **procp = (void **) &disp->Uniform3fARB;

        snprintf(symboln, sizeof(symboln), "%sUniform3fARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform3fvARB) {
        void **procp = (void **) &disp->Uniform3fvARB;

        snprintf(symboln, sizeof(symboln), "%sUniform3fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform3fvARB) {
        void **procp = (void **) &disp->Uniform3fvARB;

        snprintf(symboln, sizeof(symboln), "%sUniform3fvARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform3iARB) {
        void **procp = (void **) &disp->Uniform3iARB;

        snprintf(symboln, sizeof(symboln), "%sUniform3i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform3iARB) {
        void **procp = (void **) &disp->Uniform3iARB;

        snprintf(symboln, sizeof(symboln), "%sUniform3iARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform3ivARB) {
        void **procp = (void **) &disp->Uniform3ivARB;

        snprintf(symboln, sizeof(symboln), "%sUniform3iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform3ivARB) {
        void **procp = (void **) &disp->Uniform3ivARB;

        snprintf(symboln, sizeof(symboln), "%sUniform3ivARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform4fARB) {
        void **procp = (void **) &disp->Uniform4fARB;

        snprintf(symboln, sizeof(symboln), "%sUniform4f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform4fARB) {
        void **procp = (void **) &disp->Uniform4fARB;

        snprintf(symboln, sizeof(symboln), "%sUniform4fARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform4fvARB) {
        void **procp = (void **) &disp->Uniform4fvARB;

        snprintf(symboln, sizeof(symboln), "%sUniform4fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform4fvARB) {
        void **procp = (void **) &disp->Uniform4fvARB;

        snprintf(symboln, sizeof(symboln), "%sUniform4fvARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform4iARB) {
        void **procp = (void **) &disp->Uniform4iARB;

        snprintf(symboln, sizeof(symboln), "%sUniform4i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform4iARB) {
        void **procp = (void **) &disp->Uniform4iARB;

        snprintf(symboln, sizeof(symboln), "%sUniform4iARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform4ivARB) {
        void **procp = (void **) &disp->Uniform4ivARB;

        snprintf(symboln, sizeof(symboln), "%sUniform4iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform4ivARB) {
        void **procp = (void **) &disp->Uniform4ivARB;

        snprintf(symboln, sizeof(symboln), "%sUniform4ivARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UniformMatrix2fvARB) {
        void **procp = (void **) &disp->UniformMatrix2fvARB;

        snprintf(symboln, sizeof(symboln), "%sUniformMatrix2fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UniformMatrix2fvARB) {
        void **procp = (void **) &disp->UniformMatrix2fvARB;

        snprintf(symboln, sizeof(symboln), "%sUniformMatrix2fvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UniformMatrix3fvARB) {
        void **procp = (void **) &disp->UniformMatrix3fvARB;

        snprintf(symboln, sizeof(symboln), "%sUniformMatrix3fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UniformMatrix3fvARB) {
        void **procp = (void **) &disp->UniformMatrix3fvARB;

        snprintf(symboln, sizeof(symboln), "%sUniformMatrix3fvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UniformMatrix4fvARB) {
        void **procp = (void **) &disp->UniformMatrix4fvARB;

        snprintf(symboln, sizeof(symboln), "%sUniformMatrix4fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UniformMatrix4fvARB) {
        void **procp = (void **) &disp->UniformMatrix4fvARB;

        snprintf(symboln, sizeof(symboln), "%sUniformMatrix4fvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UseProgramObjectARB) {
        void **procp = (void **) &disp->UseProgramObjectARB;

        snprintf(symboln, sizeof(symboln), "%sUseProgram", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UseProgramObjectARB) {
        void **procp = (void **) &disp->UseProgramObjectARB;

        snprintf(symboln, sizeof(symboln), "%sUseProgramObjectARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ValidateProgramARB) {
        void **procp = (void **) &disp->ValidateProgramARB;

        snprintf(symboln, sizeof(symboln), "%sValidateProgram", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ValidateProgramARB) {
        void **procp = (void **) &disp->ValidateProgramARB;

        snprintf(symboln, sizeof(symboln), "%sValidateProgramARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindAttribLocationARB) {
        void **procp = (void **) &disp->BindAttribLocationARB;

        snprintf(symboln, sizeof(symboln), "%sBindAttribLocation",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindAttribLocationARB) {
        void **procp = (void **) &disp->BindAttribLocationARB;

        snprintf(symboln, sizeof(symboln), "%sBindAttribLocationARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetActiveAttribARB) {
        void **procp = (void **) &disp->GetActiveAttribARB;

        snprintf(symboln, sizeof(symboln), "%sGetActiveAttrib", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetActiveAttribARB) {
        void **procp = (void **) &disp->GetActiveAttribARB;

        snprintf(symboln, sizeof(symboln), "%sGetActiveAttribARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetAttribLocationARB) {
        void **procp = (void **) &disp->GetAttribLocationARB;

        snprintf(symboln, sizeof(symboln), "%sGetAttribLocation",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetAttribLocationARB) {
        void **procp = (void **) &disp->GetAttribLocationARB;

        snprintf(symboln, sizeof(symboln), "%sGetAttribLocationARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawBuffersARB) {
        void **procp = (void **) &disp->DrawBuffersARB;

        snprintf(symboln, sizeof(symboln), "%sDrawBuffers", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawBuffersARB) {
        void **procp = (void **) &disp->DrawBuffersARB;

        snprintf(symboln, sizeof(symboln), "%sDrawBuffersARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawBuffersARB) {
        void **procp = (void **) &disp->DrawBuffersARB;

        snprintf(symboln, sizeof(symboln), "%sDrawBuffersATI", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawBuffersARB) {
        void **procp = (void **) &disp->DrawBuffersARB;

        snprintf(symboln, sizeof(symboln), "%sDrawBuffersNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClampColorARB) {
        void **procp = (void **) &disp->ClampColorARB;

        snprintf(symboln, sizeof(symboln), "%sClampColorARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawArraysInstancedARB) {
        void **procp = (void **) &disp->DrawArraysInstancedARB;

        snprintf(symboln, sizeof(symboln), "%sDrawArraysInstancedARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawArraysInstancedARB) {
        void **procp = (void **) &disp->DrawArraysInstancedARB;

        snprintf(symboln, sizeof(symboln), "%sDrawArraysInstancedEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawArraysInstancedARB) {
        void **procp = (void **) &disp->DrawArraysInstancedARB;

        snprintf(symboln, sizeof(symboln), "%sDrawArraysInstanced",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawElementsInstancedARB) {
        void **procp = (void **) &disp->DrawElementsInstancedARB;

        snprintf(symboln, sizeof(symboln), "%sDrawElementsInstancedARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawElementsInstancedARB) {
        void **procp = (void **) &disp->DrawElementsInstancedARB;

        snprintf(symboln, sizeof(symboln), "%sDrawElementsInstancedEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawElementsInstancedARB) {
        void **procp = (void **) &disp->DrawElementsInstancedARB;

        snprintf(symboln, sizeof(symboln), "%sDrawElementsInstanced",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RenderbufferStorageMultisample) {
        void **procp = (void **) &disp->RenderbufferStorageMultisample;

        snprintf(symboln, sizeof(symboln), "%sRenderbufferStorageMultisample",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RenderbufferStorageMultisample) {
        void **procp = (void **) &disp->RenderbufferStorageMultisample;

        snprintf(symboln, sizeof(symboln),
                 "%sRenderbufferStorageMultisampleEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FramebufferTextureARB) {
        void **procp = (void **) &disp->FramebufferTextureARB;

        snprintf(symboln, sizeof(symboln), "%sFramebufferTextureARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FramebufferTextureFaceARB) {
        void **procp = (void **) &disp->FramebufferTextureFaceARB;

        snprintf(symboln, sizeof(symboln), "%sFramebufferTextureFaceARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramParameteriARB) {
        void **procp = (void **) &disp->ProgramParameteriARB;

        snprintf(symboln, sizeof(symboln), "%sProgramParameteriARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribDivisorARB) {
        void **procp = (void **) &disp->VertexAttribDivisorARB;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribDivisorARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FlushMappedBufferRange) {
        void **procp = (void **) &disp->FlushMappedBufferRange;

        snprintf(symboln, sizeof(symboln), "%sFlushMappedBufferRange",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MapBufferRange) {
        void **procp = (void **) &disp->MapBufferRange;

        snprintf(symboln, sizeof(symboln), "%sMapBufferRange", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexBufferARB) {
        void **procp = (void **) &disp->TexBufferARB;

        snprintf(symboln, sizeof(symboln), "%sTexBufferARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindVertexArray) {
        void **procp = (void **) &disp->BindVertexArray;

        snprintf(symboln, sizeof(symboln), "%sBindVertexArray", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenVertexArrays) {
        void **procp = (void **) &disp->GenVertexArrays;

        snprintf(symboln, sizeof(symboln), "%sGenVertexArrays", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CopyBufferSubData) {
        void **procp = (void **) &disp->CopyBufferSubData;

        snprintf(symboln, sizeof(symboln), "%sCopyBufferSubData",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClientWaitSync) {
        void **procp = (void **) &disp->ClientWaitSync;

        snprintf(symboln, sizeof(symboln), "%sClientWaitSync", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteSync) {
        void **procp = (void **) &disp->DeleteSync;

        snprintf(symboln, sizeof(symboln), "%sDeleteSync", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FenceSync) {
        void **procp = (void **) &disp->FenceSync;

        snprintf(symboln, sizeof(symboln), "%sFenceSync", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetInteger64v) {
        void **procp = (void **) &disp->GetInteger64v;

        snprintf(symboln, sizeof(symboln), "%sGetInteger64v", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetSynciv) {
        void **procp = (void **) &disp->GetSynciv;

        snprintf(symboln, sizeof(symboln), "%sGetSynciv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsSync) {
        void **procp = (void **) &disp->IsSync;

        snprintf(symboln, sizeof(symboln), "%sIsSync", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WaitSync) {
        void **procp = (void **) &disp->WaitSync;

        snprintf(symboln, sizeof(symboln), "%sWaitSync", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawElementsBaseVertex) {
        void **procp = (void **) &disp->DrawElementsBaseVertex;

        snprintf(symboln, sizeof(symboln), "%sDrawElementsBaseVertex",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawElementsInstancedBaseVertex) {
        void **procp = (void **) &disp->DrawElementsInstancedBaseVertex;

        snprintf(symboln, sizeof(symboln), "%sDrawElementsInstancedBaseVertex",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawRangeElementsBaseVertex) {
        void **procp = (void **) &disp->DrawRangeElementsBaseVertex;

        snprintf(symboln, sizeof(symboln), "%sDrawRangeElementsBaseVertex",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiDrawElementsBaseVertex) {
        void **procp = (void **) &disp->MultiDrawElementsBaseVertex;

        snprintf(symboln, sizeof(symboln), "%sMultiDrawElementsBaseVertex",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendEquationSeparateiARB) {
        void **procp = (void **) &disp->BlendEquationSeparateiARB;

        snprintf(symboln, sizeof(symboln), "%sBlendEquationSeparateiARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendEquationSeparateiARB) {
        void **procp = (void **) &disp->BlendEquationSeparateiARB;

        snprintf(symboln, sizeof(symboln), "%sBlendEquationSeparateIndexedAMD",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendEquationiARB) {
        void **procp = (void **) &disp->BlendEquationiARB;

        snprintf(symboln, sizeof(symboln), "%sBlendEquationiARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendEquationiARB) {
        void **procp = (void **) &disp->BlendEquationiARB;

        snprintf(symboln, sizeof(symboln), "%sBlendEquationIndexedAMD",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendFuncSeparateiARB) {
        void **procp = (void **) &disp->BlendFuncSeparateiARB;

        snprintf(symboln, sizeof(symboln), "%sBlendFuncSeparateiARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendFuncSeparateiARB) {
        void **procp = (void **) &disp->BlendFuncSeparateiARB;

        snprintf(symboln, sizeof(symboln), "%sBlendFuncSeparateIndexedAMD",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendFunciARB) {
        void **procp = (void **) &disp->BlendFunciARB;

        snprintf(symboln, sizeof(symboln), "%sBlendFunciARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendFunciARB) {
        void **procp = (void **) &disp->BlendFunciARB;

        snprintf(symboln, sizeof(symboln), "%sBlendFuncIndexedAMD",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindSampler) {
        void **procp = (void **) &disp->BindSampler;

        snprintf(symboln, sizeof(symboln), "%sBindSampler", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteSamplers) {
        void **procp = (void **) &disp->DeleteSamplers;

        snprintf(symboln, sizeof(symboln), "%sDeleteSamplers", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenSamplers) {
        void **procp = (void **) &disp->GenSamplers;

        snprintf(symboln, sizeof(symboln), "%sGenSamplers", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetSamplerParameterIiv) {
        void **procp = (void **) &disp->GetSamplerParameterIiv;

        snprintf(symboln, sizeof(symboln), "%sGetSamplerParameterIiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetSamplerParameterIuiv) {
        void **procp = (void **) &disp->GetSamplerParameterIuiv;

        snprintf(symboln, sizeof(symboln), "%sGetSamplerParameterIuiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetSamplerParameterfv) {
        void **procp = (void **) &disp->GetSamplerParameterfv;

        snprintf(symboln, sizeof(symboln), "%sGetSamplerParameterfv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetSamplerParameteriv) {
        void **procp = (void **) &disp->GetSamplerParameteriv;

        snprintf(symboln, sizeof(symboln), "%sGetSamplerParameteriv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsSampler) {
        void **procp = (void **) &disp->IsSampler;

        snprintf(symboln, sizeof(symboln), "%sIsSampler", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SamplerParameterIiv) {
        void **procp = (void **) &disp->SamplerParameterIiv;

        snprintf(symboln, sizeof(symboln), "%sSamplerParameterIiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SamplerParameterIuiv) {
        void **procp = (void **) &disp->SamplerParameterIuiv;

        snprintf(symboln, sizeof(symboln), "%sSamplerParameterIuiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SamplerParameterf) {
        void **procp = (void **) &disp->SamplerParameterf;

        snprintf(symboln, sizeof(symboln), "%sSamplerParameterf",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SamplerParameterfv) {
        void **procp = (void **) &disp->SamplerParameterfv;

        snprintf(symboln, sizeof(symboln), "%sSamplerParameterfv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SamplerParameteri) {
        void **procp = (void **) &disp->SamplerParameteri;

        snprintf(symboln, sizeof(symboln), "%sSamplerParameteri",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SamplerParameteriv) {
        void **procp = (void **) &disp->SamplerParameteriv;

        snprintf(symboln, sizeof(symboln), "%sSamplerParameteriv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorP3ui) {
        void **procp = (void **) &disp->ColorP3ui;

        snprintf(symboln, sizeof(symboln), "%sColorP3ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorP3uiv) {
        void **procp = (void **) &disp->ColorP3uiv;

        snprintf(symboln, sizeof(symboln), "%sColorP3uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorP4ui) {
        void **procp = (void **) &disp->ColorP4ui;

        snprintf(symboln, sizeof(symboln), "%sColorP4ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorP4uiv) {
        void **procp = (void **) &disp->ColorP4uiv;

        snprintf(symboln, sizeof(symboln), "%sColorP4uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoordP1ui) {
        void **procp = (void **) &disp->MultiTexCoordP1ui;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoordP1ui",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoordP1uiv) {
        void **procp = (void **) &disp->MultiTexCoordP1uiv;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoordP1uiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoordP2ui) {
        void **procp = (void **) &disp->MultiTexCoordP2ui;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoordP2ui",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoordP2uiv) {
        void **procp = (void **) &disp->MultiTexCoordP2uiv;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoordP2uiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoordP3ui) {
        void **procp = (void **) &disp->MultiTexCoordP3ui;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoordP3ui",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoordP3uiv) {
        void **procp = (void **) &disp->MultiTexCoordP3uiv;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoordP3uiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoordP4ui) {
        void **procp = (void **) &disp->MultiTexCoordP4ui;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoordP4ui",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiTexCoordP4uiv) {
        void **procp = (void **) &disp->MultiTexCoordP4uiv;

        snprintf(symboln, sizeof(symboln), "%sMultiTexCoordP4uiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->NormalP3ui) {
        void **procp = (void **) &disp->NormalP3ui;

        snprintf(symboln, sizeof(symboln), "%sNormalP3ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->NormalP3uiv) {
        void **procp = (void **) &disp->NormalP3uiv;

        snprintf(symboln, sizeof(symboln), "%sNormalP3uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColorP3ui) {
        void **procp = (void **) &disp->SecondaryColorP3ui;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColorP3ui",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColorP3uiv) {
        void **procp = (void **) &disp->SecondaryColorP3uiv;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColorP3uiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoordP1ui) {
        void **procp = (void **) &disp->TexCoordP1ui;

        snprintf(symboln, sizeof(symboln), "%sTexCoordP1ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoordP1uiv) {
        void **procp = (void **) &disp->TexCoordP1uiv;

        snprintf(symboln, sizeof(symboln), "%sTexCoordP1uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoordP2ui) {
        void **procp = (void **) &disp->TexCoordP2ui;

        snprintf(symboln, sizeof(symboln), "%sTexCoordP2ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoordP2uiv) {
        void **procp = (void **) &disp->TexCoordP2uiv;

        snprintf(symboln, sizeof(symboln), "%sTexCoordP2uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoordP3ui) {
        void **procp = (void **) &disp->TexCoordP3ui;

        snprintf(symboln, sizeof(symboln), "%sTexCoordP3ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoordP3uiv) {
        void **procp = (void **) &disp->TexCoordP3uiv;

        snprintf(symboln, sizeof(symboln), "%sTexCoordP3uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoordP4ui) {
        void **procp = (void **) &disp->TexCoordP4ui;

        snprintf(symboln, sizeof(symboln), "%sTexCoordP4ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoordP4uiv) {
        void **procp = (void **) &disp->TexCoordP4uiv;

        snprintf(symboln, sizeof(symboln), "%sTexCoordP4uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribP1ui) {
        void **procp = (void **) &disp->VertexAttribP1ui;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribP1ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribP1uiv) {
        void **procp = (void **) &disp->VertexAttribP1uiv;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribP1uiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribP2ui) {
        void **procp = (void **) &disp->VertexAttribP2ui;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribP2ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribP2uiv) {
        void **procp = (void **) &disp->VertexAttribP2uiv;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribP2uiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribP3ui) {
        void **procp = (void **) &disp->VertexAttribP3ui;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribP3ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribP3uiv) {
        void **procp = (void **) &disp->VertexAttribP3uiv;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribP3uiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribP4ui) {
        void **procp = (void **) &disp->VertexAttribP4ui;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribP4ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribP4uiv) {
        void **procp = (void **) &disp->VertexAttribP4uiv;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribP4uiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexP2ui) {
        void **procp = (void **) &disp->VertexP2ui;

        snprintf(symboln, sizeof(symboln), "%sVertexP2ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexP2uiv) {
        void **procp = (void **) &disp->VertexP2uiv;

        snprintf(symboln, sizeof(symboln), "%sVertexP2uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexP3ui) {
        void **procp = (void **) &disp->VertexP3ui;

        snprintf(symboln, sizeof(symboln), "%sVertexP3ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexP3uiv) {
        void **procp = (void **) &disp->VertexP3uiv;

        snprintf(symboln, sizeof(symboln), "%sVertexP3uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexP4ui) {
        void **procp = (void **) &disp->VertexP4ui;

        snprintf(symboln, sizeof(symboln), "%sVertexP4ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexP4uiv) {
        void **procp = (void **) &disp->VertexP4uiv;

        snprintf(symboln, sizeof(symboln), "%sVertexP4uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindTransformFeedback) {
        void **procp = (void **) &disp->BindTransformFeedback;

        snprintf(symboln, sizeof(symboln), "%sBindTransformFeedback",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteTransformFeedbacks) {
        void **procp = (void **) &disp->DeleteTransformFeedbacks;

        snprintf(symboln, sizeof(symboln), "%sDeleteTransformFeedbacks",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DrawTransformFeedback) {
        void **procp = (void **) &disp->DrawTransformFeedback;

        snprintf(symboln, sizeof(symboln), "%sDrawTransformFeedback",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenTransformFeedbacks) {
        void **procp = (void **) &disp->GenTransformFeedbacks;

        snprintf(symboln, sizeof(symboln), "%sGenTransformFeedbacks",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsTransformFeedback) {
        void **procp = (void **) &disp->IsTransformFeedback;

        snprintf(symboln, sizeof(symboln), "%sIsTransformFeedback",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PauseTransformFeedback) {
        void **procp = (void **) &disp->PauseTransformFeedback;

        snprintf(symboln, sizeof(symboln), "%sPauseTransformFeedback",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ResumeTransformFeedback) {
        void **procp = (void **) &disp->ResumeTransformFeedback;

        snprintf(symboln, sizeof(symboln), "%sResumeTransformFeedback",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClearDepthf) {
        void **procp = (void **) &disp->ClearDepthf;

        snprintf(symboln, sizeof(symboln), "%sClearDepthf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DepthRangef) {
        void **procp = (void **) &disp->DepthRangef;

        snprintf(symboln, sizeof(symboln), "%sDepthRangef", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetShaderPrecisionFormat) {
        void **procp = (void **) &disp->GetShaderPrecisionFormat;

        snprintf(symboln, sizeof(symboln), "%sGetShaderPrecisionFormat",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ReleaseShaderCompiler) {
        void **procp = (void **) &disp->ReleaseShaderCompiler;

        snprintf(symboln, sizeof(symboln), "%sReleaseShaderCompiler",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ShaderBinary) {
        void **procp = (void **) &disp->ShaderBinary;

        snprintf(symboln, sizeof(symboln), "%sShaderBinary", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetGraphicsResetStatusARB) {
        void **procp = (void **) &disp->GetGraphicsResetStatusARB;

        snprintf(symboln, sizeof(symboln), "%sGetGraphicsResetStatusARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnColorTableARB) {
        void **procp = (void **) &disp->GetnColorTableARB;

        snprintf(symboln, sizeof(symboln), "%sGetnColorTableARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnCompressedTexImageARB) {
        void **procp = (void **) &disp->GetnCompressedTexImageARB;

        snprintf(symboln, sizeof(symboln), "%sGetnCompressedTexImageARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnConvolutionFilterARB) {
        void **procp = (void **) &disp->GetnConvolutionFilterARB;

        snprintf(symboln, sizeof(symboln), "%sGetnConvolutionFilterARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnHistogramARB) {
        void **procp = (void **) &disp->GetnHistogramARB;

        snprintf(symboln, sizeof(symboln), "%sGetnHistogramARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnMapdvARB) {
        void **procp = (void **) &disp->GetnMapdvARB;

        snprintf(symboln, sizeof(symboln), "%sGetnMapdvARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnMapfvARB) {
        void **procp = (void **) &disp->GetnMapfvARB;

        snprintf(symboln, sizeof(symboln), "%sGetnMapfvARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnMapivARB) {
        void **procp = (void **) &disp->GetnMapivARB;

        snprintf(symboln, sizeof(symboln), "%sGetnMapivARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnMinmaxARB) {
        void **procp = (void **) &disp->GetnMinmaxARB;

        snprintf(symboln, sizeof(symboln), "%sGetnMinmaxARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnPixelMapfvARB) {
        void **procp = (void **) &disp->GetnPixelMapfvARB;

        snprintf(symboln, sizeof(symboln), "%sGetnPixelMapfvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnPixelMapuivARB) {
        void **procp = (void **) &disp->GetnPixelMapuivARB;

        snprintf(symboln, sizeof(symboln), "%sGetnPixelMapuivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnPixelMapusvARB) {
        void **procp = (void **) &disp->GetnPixelMapusvARB;

        snprintf(symboln, sizeof(symboln), "%sGetnPixelMapusvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnPolygonStippleARB) {
        void **procp = (void **) &disp->GetnPolygonStippleARB;

        snprintf(symboln, sizeof(symboln), "%sGetnPolygonStippleARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnSeparableFilterARB) {
        void **procp = (void **) &disp->GetnSeparableFilterARB;

        snprintf(symboln, sizeof(symboln), "%sGetnSeparableFilterARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnTexImageARB) {
        void **procp = (void **) &disp->GetnTexImageARB;

        snprintf(symboln, sizeof(symboln), "%sGetnTexImageARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnUniformdvARB) {
        void **procp = (void **) &disp->GetnUniformdvARB;

        snprintf(symboln, sizeof(symboln), "%sGetnUniformdvARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnUniformfvARB) {
        void **procp = (void **) &disp->GetnUniformfvARB;

        snprintf(symboln, sizeof(symboln), "%sGetnUniformfvARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnUniformivARB) {
        void **procp = (void **) &disp->GetnUniformivARB;

        snprintf(symboln, sizeof(symboln), "%sGetnUniformivARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetnUniformuivARB) {
        void **procp = (void **) &disp->GetnUniformuivARB;

        snprintf(symboln, sizeof(symboln), "%sGetnUniformuivARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ReadnPixelsARB) {
        void **procp = (void **) &disp->ReadnPixelsARB;

        snprintf(symboln, sizeof(symboln), "%sReadnPixelsARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexStorage1D) {
        void **procp = (void **) &disp->TexStorage1D;

        snprintf(symboln, sizeof(symboln), "%sTexStorage1D", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexStorage2D) {
        void **procp = (void **) &disp->TexStorage2D;

        snprintf(symboln, sizeof(symboln), "%sTexStorage2D", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexStorage3D) {
        void **procp = (void **) &disp->TexStorage3D;

        snprintf(symboln, sizeof(symboln), "%sTexStorage3D", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TextureStorage1DEXT) {
        void **procp = (void **) &disp->TextureStorage1DEXT;

        snprintf(symboln, sizeof(symboln), "%sTextureStorage1DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TextureStorage2DEXT) {
        void **procp = (void **) &disp->TextureStorage2DEXT;

        snprintf(symboln, sizeof(symboln), "%sTextureStorage2DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TextureStorage3DEXT) {
        void **procp = (void **) &disp->TextureStorage3DEXT;

        snprintf(symboln, sizeof(symboln), "%sTextureStorage3DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PolygonOffsetEXT) {
        void **procp = (void **) &disp->PolygonOffsetEXT;

        snprintf(symboln, sizeof(symboln), "%sPolygonOffsetEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetPixelTexGenParameterfvSGIS) {
        void **procp = (void **) &disp->GetPixelTexGenParameterfvSGIS;

        snprintf(symboln, sizeof(symboln), "%sGetPixelTexGenParameterfvSGIS",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetPixelTexGenParameterivSGIS) {
        void **procp = (void **) &disp->GetPixelTexGenParameterivSGIS;

        snprintf(symboln, sizeof(symboln), "%sGetPixelTexGenParameterivSGIS",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PixelTexGenParameterfSGIS) {
        void **procp = (void **) &disp->PixelTexGenParameterfSGIS;

        snprintf(symboln, sizeof(symboln), "%sPixelTexGenParameterfSGIS",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PixelTexGenParameterfvSGIS) {
        void **procp = (void **) &disp->PixelTexGenParameterfvSGIS;

        snprintf(symboln, sizeof(symboln), "%sPixelTexGenParameterfvSGIS",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PixelTexGenParameteriSGIS) {
        void **procp = (void **) &disp->PixelTexGenParameteriSGIS;

        snprintf(symboln, sizeof(symboln), "%sPixelTexGenParameteriSGIS",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PixelTexGenParameterivSGIS) {
        void **procp = (void **) &disp->PixelTexGenParameterivSGIS;

        snprintf(symboln, sizeof(symboln), "%sPixelTexGenParameterivSGIS",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SampleMaskSGIS) {
        void **procp = (void **) &disp->SampleMaskSGIS;

        snprintf(symboln, sizeof(symboln), "%sSampleMaskSGIS", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SampleMaskSGIS) {
        void **procp = (void **) &disp->SampleMaskSGIS;

        snprintf(symboln, sizeof(symboln), "%sSampleMaskEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SamplePatternSGIS) {
        void **procp = (void **) &disp->SamplePatternSGIS;

        snprintf(symboln, sizeof(symboln), "%sSamplePatternSGIS",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SamplePatternSGIS) {
        void **procp = (void **) &disp->SamplePatternSGIS;

        snprintf(symboln, sizeof(symboln), "%sSamplePatternEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorPointerEXT) {
        void **procp = (void **) &disp->ColorPointerEXT;

        snprintf(symboln, sizeof(symboln), "%sColorPointerEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EdgeFlagPointerEXT) {
        void **procp = (void **) &disp->EdgeFlagPointerEXT;

        snprintf(symboln, sizeof(symboln), "%sEdgeFlagPointerEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IndexPointerEXT) {
        void **procp = (void **) &disp->IndexPointerEXT;

        snprintf(symboln, sizeof(symboln), "%sIndexPointerEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->NormalPointerEXT) {
        void **procp = (void **) &disp->NormalPointerEXT;

        snprintf(symboln, sizeof(symboln), "%sNormalPointerEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexCoordPointerEXT) {
        void **procp = (void **) &disp->TexCoordPointerEXT;

        snprintf(symboln, sizeof(symboln), "%sTexCoordPointerEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexPointerEXT) {
        void **procp = (void **) &disp->VertexPointerEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexPointerEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PointParameterfEXT) {
        void **procp = (void **) &disp->PointParameterfEXT;

        snprintf(symboln, sizeof(symboln), "%sPointParameterf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PointParameterfEXT) {
        void **procp = (void **) &disp->PointParameterfEXT;

        snprintf(symboln, sizeof(symboln), "%sPointParameterfARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PointParameterfEXT) {
        void **procp = (void **) &disp->PointParameterfEXT;

        snprintf(symboln, sizeof(symboln), "%sPointParameterfEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PointParameterfEXT) {
        void **procp = (void **) &disp->PointParameterfEXT;

        snprintf(symboln, sizeof(symboln), "%sPointParameterfSGIS",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PointParameterfvEXT) {
        void **procp = (void **) &disp->PointParameterfvEXT;

        snprintf(symboln, sizeof(symboln), "%sPointParameterfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PointParameterfvEXT) {
        void **procp = (void **) &disp->PointParameterfvEXT;

        snprintf(symboln, sizeof(symboln), "%sPointParameterfvARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PointParameterfvEXT) {
        void **procp = (void **) &disp->PointParameterfvEXT;

        snprintf(symboln, sizeof(symboln), "%sPointParameterfvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PointParameterfvEXT) {
        void **procp = (void **) &disp->PointParameterfvEXT;

        snprintf(symboln, sizeof(symboln), "%sPointParameterfvSGIS",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LockArraysEXT) {
        void **procp = (void **) &disp->LockArraysEXT;

        snprintf(symboln, sizeof(symboln), "%sLockArraysEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UnlockArraysEXT) {
        void **procp = (void **) &disp->UnlockArraysEXT;

        snprintf(symboln, sizeof(symboln), "%sUnlockArraysEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3bEXT) {
        void **procp = (void **) &disp->SecondaryColor3bEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3b", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3bEXT) {
        void **procp = (void **) &disp->SecondaryColor3bEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3bEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3bvEXT) {
        void **procp = (void **) &disp->SecondaryColor3bvEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3bv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3bvEXT) {
        void **procp = (void **) &disp->SecondaryColor3bvEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3bvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3dEXT) {
        void **procp = (void **) &disp->SecondaryColor3dEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3dEXT) {
        void **procp = (void **) &disp->SecondaryColor3dEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3dEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3dvEXT) {
        void **procp = (void **) &disp->SecondaryColor3dvEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3dv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3dvEXT) {
        void **procp = (void **) &disp->SecondaryColor3dvEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3dvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3fEXT) {
        void **procp = (void **) &disp->SecondaryColor3fEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3fEXT) {
        void **procp = (void **) &disp->SecondaryColor3fEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3fEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3fvEXT) {
        void **procp = (void **) &disp->SecondaryColor3fvEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3fv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3fvEXT) {
        void **procp = (void **) &disp->SecondaryColor3fvEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3fvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3iEXT) {
        void **procp = (void **) &disp->SecondaryColor3iEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3iEXT) {
        void **procp = (void **) &disp->SecondaryColor3iEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3iEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3ivEXT) {
        void **procp = (void **) &disp->SecondaryColor3ivEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3iv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3ivEXT) {
        void **procp = (void **) &disp->SecondaryColor3ivEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3ivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3sEXT) {
        void **procp = (void **) &disp->SecondaryColor3sEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3sEXT) {
        void **procp = (void **) &disp->SecondaryColor3sEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3sEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3svEXT) {
        void **procp = (void **) &disp->SecondaryColor3svEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3sv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3svEXT) {
        void **procp = (void **) &disp->SecondaryColor3svEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3svEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3ubEXT) {
        void **procp = (void **) &disp->SecondaryColor3ubEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3ub",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3ubEXT) {
        void **procp = (void **) &disp->SecondaryColor3ubEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3ubEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3ubvEXT) {
        void **procp = (void **) &disp->SecondaryColor3ubvEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3ubv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3ubvEXT) {
        void **procp = (void **) &disp->SecondaryColor3ubvEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3ubvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3uiEXT) {
        void **procp = (void **) &disp->SecondaryColor3uiEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3ui",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3uiEXT) {
        void **procp = (void **) &disp->SecondaryColor3uiEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3uiEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3uivEXT) {
        void **procp = (void **) &disp->SecondaryColor3uivEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3uiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3uivEXT) {
        void **procp = (void **) &disp->SecondaryColor3uivEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3uivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3usEXT) {
        void **procp = (void **) &disp->SecondaryColor3usEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3us",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3usEXT) {
        void **procp = (void **) &disp->SecondaryColor3usEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3usEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3usvEXT) {
        void **procp = (void **) &disp->SecondaryColor3usvEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3usv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColor3usvEXT) {
        void **procp = (void **) &disp->SecondaryColor3usvEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3usvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColorPointerEXT) {
        void **procp = (void **) &disp->SecondaryColorPointerEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColorPointer",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SecondaryColorPointerEXT) {
        void **procp = (void **) &disp->SecondaryColorPointerEXT;

        snprintf(symboln, sizeof(symboln), "%sSecondaryColorPointerEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiDrawArraysEXT) {
        void **procp = (void **) &disp->MultiDrawArraysEXT;

        snprintf(symboln, sizeof(symboln), "%sMultiDrawArrays", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiDrawArraysEXT) {
        void **procp = (void **) &disp->MultiDrawArraysEXT;

        snprintf(symboln, sizeof(symboln), "%sMultiDrawArraysEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiDrawElementsEXT) {
        void **procp = (void **) &disp->MultiDrawElementsEXT;

        snprintf(symboln, sizeof(symboln), "%sMultiDrawElements",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiDrawElementsEXT) {
        void **procp = (void **) &disp->MultiDrawElementsEXT;

        snprintf(symboln, sizeof(symboln), "%sMultiDrawElementsEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FogCoordPointerEXT) {
        void **procp = (void **) &disp->FogCoordPointerEXT;

        snprintf(symboln, sizeof(symboln), "%sFogCoordPointer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FogCoordPointerEXT) {
        void **procp = (void **) &disp->FogCoordPointerEXT;

        snprintf(symboln, sizeof(symboln), "%sFogCoordPointerEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FogCoorddEXT) {
        void **procp = (void **) &disp->FogCoorddEXT;

        snprintf(symboln, sizeof(symboln), "%sFogCoordd", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FogCoorddEXT) {
        void **procp = (void **) &disp->FogCoorddEXT;

        snprintf(symboln, sizeof(symboln), "%sFogCoorddEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FogCoorddvEXT) {
        void **procp = (void **) &disp->FogCoorddvEXT;

        snprintf(symboln, sizeof(symboln), "%sFogCoorddv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FogCoorddvEXT) {
        void **procp = (void **) &disp->FogCoorddvEXT;

        snprintf(symboln, sizeof(symboln), "%sFogCoorddvEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FogCoordfEXT) {
        void **procp = (void **) &disp->FogCoordfEXT;

        snprintf(symboln, sizeof(symboln), "%sFogCoordf", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FogCoordfEXT) {
        void **procp = (void **) &disp->FogCoordfEXT;

        snprintf(symboln, sizeof(symboln), "%sFogCoordfEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FogCoordfvEXT) {
        void **procp = (void **) &disp->FogCoordfvEXT;

        snprintf(symboln, sizeof(symboln), "%sFogCoordfv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FogCoordfvEXT) {
        void **procp = (void **) &disp->FogCoordfvEXT;

        snprintf(symboln, sizeof(symboln), "%sFogCoordfvEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PixelTexGenSGIX) {
        void **procp = (void **) &disp->PixelTexGenSGIX;

        snprintf(symboln, sizeof(symboln), "%sPixelTexGenSGIX", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendFuncSeparateEXT) {
        void **procp = (void **) &disp->BlendFuncSeparateEXT;

        snprintf(symboln, sizeof(symboln), "%sBlendFuncSeparate",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendFuncSeparateEXT) {
        void **procp = (void **) &disp->BlendFuncSeparateEXT;

        snprintf(symboln, sizeof(symboln), "%sBlendFuncSeparateEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendFuncSeparateEXT) {
        void **procp = (void **) &disp->BlendFuncSeparateEXT;

        snprintf(symboln, sizeof(symboln), "%sBlendFuncSeparateINGR",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FlushVertexArrayRangeNV) {
        void **procp = (void **) &disp->FlushVertexArrayRangeNV;

        snprintf(symboln, sizeof(symboln), "%sFlushVertexArrayRangeNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexArrayRangeNV) {
        void **procp = (void **) &disp->VertexArrayRangeNV;

        snprintf(symboln, sizeof(symboln), "%sVertexArrayRangeNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CombinerInputNV) {
        void **procp = (void **) &disp->CombinerInputNV;

        snprintf(symboln, sizeof(symboln), "%sCombinerInputNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CombinerOutputNV) {
        void **procp = (void **) &disp->CombinerOutputNV;

        snprintf(symboln, sizeof(symboln), "%sCombinerOutputNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CombinerParameterfNV) {
        void **procp = (void **) &disp->CombinerParameterfNV;

        snprintf(symboln, sizeof(symboln), "%sCombinerParameterfNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CombinerParameterfvNV) {
        void **procp = (void **) &disp->CombinerParameterfvNV;

        snprintf(symboln, sizeof(symboln), "%sCombinerParameterfvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CombinerParameteriNV) {
        void **procp = (void **) &disp->CombinerParameteriNV;

        snprintf(symboln, sizeof(symboln), "%sCombinerParameteriNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CombinerParameterivNV) {
        void **procp = (void **) &disp->CombinerParameterivNV;

        snprintf(symboln, sizeof(symboln), "%sCombinerParameterivNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FinalCombinerInputNV) {
        void **procp = (void **) &disp->FinalCombinerInputNV;

        snprintf(symboln, sizeof(symboln), "%sFinalCombinerInputNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetCombinerInputParameterfvNV) {
        void **procp = (void **) &disp->GetCombinerInputParameterfvNV;

        snprintf(symboln, sizeof(symboln), "%sGetCombinerInputParameterfvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetCombinerInputParameterivNV) {
        void **procp = (void **) &disp->GetCombinerInputParameterivNV;

        snprintf(symboln, sizeof(symboln), "%sGetCombinerInputParameterivNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetCombinerOutputParameterfvNV) {
        void **procp = (void **) &disp->GetCombinerOutputParameterfvNV;

        snprintf(symboln, sizeof(symboln), "%sGetCombinerOutputParameterfvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetCombinerOutputParameterivNV) {
        void **procp = (void **) &disp->GetCombinerOutputParameterivNV;

        snprintf(symboln, sizeof(symboln), "%sGetCombinerOutputParameterivNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetFinalCombinerInputParameterfvNV) {
        void **procp = (void **) &disp->GetFinalCombinerInputParameterfvNV;

        snprintf(symboln, sizeof(symboln),
                 "%sGetFinalCombinerInputParameterfvNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetFinalCombinerInputParameterivNV) {
        void **procp = (void **) &disp->GetFinalCombinerInputParameterivNV;

        snprintf(symboln, sizeof(symboln),
                 "%sGetFinalCombinerInputParameterivNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ResizeBuffersMESA) {
        void **procp = (void **) &disp->ResizeBuffersMESA;

        snprintf(symboln, sizeof(symboln), "%sResizeBuffersMESA",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2dMESA) {
        void **procp = (void **) &disp->WindowPos2dMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2dMESA) {
        void **procp = (void **) &disp->WindowPos2dMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2dARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2dMESA) {
        void **procp = (void **) &disp->WindowPos2dMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2dMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2dvMESA) {
        void **procp = (void **) &disp->WindowPos2dvMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2dvMESA) {
        void **procp = (void **) &disp->WindowPos2dvMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2dvARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2dvMESA) {
        void **procp = (void **) &disp->WindowPos2dvMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2dvMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2fMESA) {
        void **procp = (void **) &disp->WindowPos2fMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2fMESA) {
        void **procp = (void **) &disp->WindowPos2fMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2fARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2fMESA) {
        void **procp = (void **) &disp->WindowPos2fMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2fMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2fvMESA) {
        void **procp = (void **) &disp->WindowPos2fvMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2fvMESA) {
        void **procp = (void **) &disp->WindowPos2fvMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2fvARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2fvMESA) {
        void **procp = (void **) &disp->WindowPos2fvMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2fvMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2iMESA) {
        void **procp = (void **) &disp->WindowPos2iMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2iMESA) {
        void **procp = (void **) &disp->WindowPos2iMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2iARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2iMESA) {
        void **procp = (void **) &disp->WindowPos2iMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2iMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2ivMESA) {
        void **procp = (void **) &disp->WindowPos2ivMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2ivMESA) {
        void **procp = (void **) &disp->WindowPos2ivMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2ivARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2ivMESA) {
        void **procp = (void **) &disp->WindowPos2ivMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2ivMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2sMESA) {
        void **procp = (void **) &disp->WindowPos2sMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2sMESA) {
        void **procp = (void **) &disp->WindowPos2sMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2sARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2sMESA) {
        void **procp = (void **) &disp->WindowPos2sMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2sMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2svMESA) {
        void **procp = (void **) &disp->WindowPos2svMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2svMESA) {
        void **procp = (void **) &disp->WindowPos2svMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2svARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos2svMESA) {
        void **procp = (void **) &disp->WindowPos2svMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos2svMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3dMESA) {
        void **procp = (void **) &disp->WindowPos3dMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3d", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3dMESA) {
        void **procp = (void **) &disp->WindowPos3dMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3dARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3dMESA) {
        void **procp = (void **) &disp->WindowPos3dMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3dMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3dvMESA) {
        void **procp = (void **) &disp->WindowPos3dvMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3dv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3dvMESA) {
        void **procp = (void **) &disp->WindowPos3dvMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3dvARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3dvMESA) {
        void **procp = (void **) &disp->WindowPos3dvMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3dvMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3fMESA) {
        void **procp = (void **) &disp->WindowPos3fMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3f", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3fMESA) {
        void **procp = (void **) &disp->WindowPos3fMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3fARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3fMESA) {
        void **procp = (void **) &disp->WindowPos3fMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3fMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3fvMESA) {
        void **procp = (void **) &disp->WindowPos3fvMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3fv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3fvMESA) {
        void **procp = (void **) &disp->WindowPos3fvMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3fvARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3fvMESA) {
        void **procp = (void **) &disp->WindowPos3fvMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3fvMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3iMESA) {
        void **procp = (void **) &disp->WindowPos3iMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3iMESA) {
        void **procp = (void **) &disp->WindowPos3iMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3iARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3iMESA) {
        void **procp = (void **) &disp->WindowPos3iMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3iMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3ivMESA) {
        void **procp = (void **) &disp->WindowPos3ivMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3ivMESA) {
        void **procp = (void **) &disp->WindowPos3ivMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3ivARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3ivMESA) {
        void **procp = (void **) &disp->WindowPos3ivMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3ivMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3sMESA) {
        void **procp = (void **) &disp->WindowPos3sMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3s", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3sMESA) {
        void **procp = (void **) &disp->WindowPos3sMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3sARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3sMESA) {
        void **procp = (void **) &disp->WindowPos3sMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3sMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3svMESA) {
        void **procp = (void **) &disp->WindowPos3svMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3svMESA) {
        void **procp = (void **) &disp->WindowPos3svMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3svARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos3svMESA) {
        void **procp = (void **) &disp->WindowPos3svMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos3svMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos4dMESA) {
        void **procp = (void **) &disp->WindowPos4dMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos4dMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos4dvMESA) {
        void **procp = (void **) &disp->WindowPos4dvMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos4dvMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos4fMESA) {
        void **procp = (void **) &disp->WindowPos4fMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos4fMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos4fvMESA) {
        void **procp = (void **) &disp->WindowPos4fvMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos4fvMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos4iMESA) {
        void **procp = (void **) &disp->WindowPos4iMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos4iMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos4ivMESA) {
        void **procp = (void **) &disp->WindowPos4ivMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos4ivMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos4sMESA) {
        void **procp = (void **) &disp->WindowPos4sMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos4sMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->WindowPos4svMESA) {
        void **procp = (void **) &disp->WindowPos4svMESA;

        snprintf(symboln, sizeof(symboln), "%sWindowPos4svMESA", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiModeDrawArraysIBM) {
        void **procp = (void **) &disp->MultiModeDrawArraysIBM;

        snprintf(symboln, sizeof(symboln), "%sMultiModeDrawArraysIBM",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->MultiModeDrawElementsIBM) {
        void **procp = (void **) &disp->MultiModeDrawElementsIBM;

        snprintf(symboln, sizeof(symboln), "%sMultiModeDrawElementsIBM",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteFencesNV) {
        void **procp = (void **) &disp->DeleteFencesNV;

        snprintf(symboln, sizeof(symboln), "%sDeleteFencesNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FinishFenceNV) {
        void **procp = (void **) &disp->FinishFenceNV;

        snprintf(symboln, sizeof(symboln), "%sFinishFenceNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenFencesNV) {
        void **procp = (void **) &disp->GenFencesNV;

        snprintf(symboln, sizeof(symboln), "%sGenFencesNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetFenceivNV) {
        void **procp = (void **) &disp->GetFenceivNV;

        snprintf(symboln, sizeof(symboln), "%sGetFenceivNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsFenceNV) {
        void **procp = (void **) &disp->IsFenceNV;

        snprintf(symboln, sizeof(symboln), "%sIsFenceNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SetFenceNV) {
        void **procp = (void **) &disp->SetFenceNV;

        snprintf(symboln, sizeof(symboln), "%sSetFenceNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TestFenceNV) {
        void **procp = (void **) &disp->TestFenceNV;

        snprintf(symboln, sizeof(symboln), "%sTestFenceNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->AreProgramsResidentNV) {
        void **procp = (void **) &disp->AreProgramsResidentNV;

        snprintf(symboln, sizeof(symboln), "%sAreProgramsResidentNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindProgramNV) {
        void **procp = (void **) &disp->BindProgramNV;

        snprintf(symboln, sizeof(symboln), "%sBindProgramARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindProgramNV) {
        void **procp = (void **) &disp->BindProgramNV;

        snprintf(symboln, sizeof(symboln), "%sBindProgramNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteProgramsNV) {
        void **procp = (void **) &disp->DeleteProgramsNV;

        snprintf(symboln, sizeof(symboln), "%sDeleteProgramsARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteProgramsNV) {
        void **procp = (void **) &disp->DeleteProgramsNV;

        snprintf(symboln, sizeof(symboln), "%sDeleteProgramsNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ExecuteProgramNV) {
        void **procp = (void **) &disp->ExecuteProgramNV;

        snprintf(symboln, sizeof(symboln), "%sExecuteProgramNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenProgramsNV) {
        void **procp = (void **) &disp->GenProgramsNV;

        snprintf(symboln, sizeof(symboln), "%sGenProgramsARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenProgramsNV) {
        void **procp = (void **) &disp->GenProgramsNV;

        snprintf(symboln, sizeof(symboln), "%sGenProgramsNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetProgramParameterdvNV) {
        void **procp = (void **) &disp->GetProgramParameterdvNV;

        snprintf(symboln, sizeof(symboln), "%sGetProgramParameterdvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetProgramParameterfvNV) {
        void **procp = (void **) &disp->GetProgramParameterfvNV;

        snprintf(symboln, sizeof(symboln), "%sGetProgramParameterfvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetProgramStringNV) {
        void **procp = (void **) &disp->GetProgramStringNV;

        snprintf(symboln, sizeof(symboln), "%sGetProgramStringNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetProgramivNV) {
        void **procp = (void **) &disp->GetProgramivNV;

        snprintf(symboln, sizeof(symboln), "%sGetProgramivNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTrackMatrixivNV) {
        void **procp = (void **) &disp->GetTrackMatrixivNV;

        snprintf(symboln, sizeof(symboln), "%sGetTrackMatrixivNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribPointervNV) {
        void **procp = (void **) &disp->GetVertexAttribPointervNV;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribPointerv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribPointervNV) {
        void **procp = (void **) &disp->GetVertexAttribPointervNV;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribPointervARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribPointervNV) {
        void **procp = (void **) &disp->GetVertexAttribPointervNV;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribPointervNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribdvNV) {
        void **procp = (void **) &disp->GetVertexAttribdvNV;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribdvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribfvNV) {
        void **procp = (void **) &disp->GetVertexAttribfvNV;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribfvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribivNV) {
        void **procp = (void **) &disp->GetVertexAttribivNV;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribivNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsProgramNV) {
        void **procp = (void **) &disp->IsProgramNV;

        snprintf(symboln, sizeof(symboln), "%sIsProgramARB", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsProgramNV) {
        void **procp = (void **) &disp->IsProgramNV;

        snprintf(symboln, sizeof(symboln), "%sIsProgramNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->LoadProgramNV) {
        void **procp = (void **) &disp->LoadProgramNV;

        snprintf(symboln, sizeof(symboln), "%sLoadProgramNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramParameters4dvNV) {
        void **procp = (void **) &disp->ProgramParameters4dvNV;

        snprintf(symboln, sizeof(symboln), "%sProgramParameters4dvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramParameters4fvNV) {
        void **procp = (void **) &disp->ProgramParameters4fvNV;

        snprintf(symboln, sizeof(symboln), "%sProgramParameters4fvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RequestResidentProgramsNV) {
        void **procp = (void **) &disp->RequestResidentProgramsNV;

        snprintf(symboln, sizeof(symboln), "%sRequestResidentProgramsNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TrackMatrixNV) {
        void **procp = (void **) &disp->TrackMatrixNV;

        snprintf(symboln, sizeof(symboln), "%sTrackMatrixNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1dNV) {
        void **procp = (void **) &disp->VertexAttrib1dNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1dNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1dvNV) {
        void **procp = (void **) &disp->VertexAttrib1dvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1dvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1fNV) {
        void **procp = (void **) &disp->VertexAttrib1fNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1fNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1fvNV) {
        void **procp = (void **) &disp->VertexAttrib1fvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1fvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1sNV) {
        void **procp = (void **) &disp->VertexAttrib1sNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1sNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib1svNV) {
        void **procp = (void **) &disp->VertexAttrib1svNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1svNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2dNV) {
        void **procp = (void **) &disp->VertexAttrib2dNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2dNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2dvNV) {
        void **procp = (void **) &disp->VertexAttrib2dvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2dvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2fNV) {
        void **procp = (void **) &disp->VertexAttrib2fNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2fNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2fvNV) {
        void **procp = (void **) &disp->VertexAttrib2fvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2fvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2sNV) {
        void **procp = (void **) &disp->VertexAttrib2sNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2sNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib2svNV) {
        void **procp = (void **) &disp->VertexAttrib2svNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2svNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3dNV) {
        void **procp = (void **) &disp->VertexAttrib3dNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3dNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3dvNV) {
        void **procp = (void **) &disp->VertexAttrib3dvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3dvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3fNV) {
        void **procp = (void **) &disp->VertexAttrib3fNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3fNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3fvNV) {
        void **procp = (void **) &disp->VertexAttrib3fvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3fvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3sNV) {
        void **procp = (void **) &disp->VertexAttrib3sNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3sNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib3svNV) {
        void **procp = (void **) &disp->VertexAttrib3svNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3svNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4dNV) {
        void **procp = (void **) &disp->VertexAttrib4dNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4dNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4dvNV) {
        void **procp = (void **) &disp->VertexAttrib4dvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4dvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4fNV) {
        void **procp = (void **) &disp->VertexAttrib4fNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4fNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4fvNV) {
        void **procp = (void **) &disp->VertexAttrib4fvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4fvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4sNV) {
        void **procp = (void **) &disp->VertexAttrib4sNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4sNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4svNV) {
        void **procp = (void **) &disp->VertexAttrib4svNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4svNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4ubNV) {
        void **procp = (void **) &disp->VertexAttrib4ubNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4ubNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttrib4ubvNV) {
        void **procp = (void **) &disp->VertexAttrib4ubvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4ubvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribPointerNV) {
        void **procp = (void **) &disp->VertexAttribPointerNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribPointerNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribs1dvNV) {
        void **procp = (void **) &disp->VertexAttribs1dvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribs1dvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribs1fvNV) {
        void **procp = (void **) &disp->VertexAttribs1fvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribs1fvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribs1svNV) {
        void **procp = (void **) &disp->VertexAttribs1svNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribs1svNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribs2dvNV) {
        void **procp = (void **) &disp->VertexAttribs2dvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribs2dvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribs2fvNV) {
        void **procp = (void **) &disp->VertexAttribs2fvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribs2fvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribs2svNV) {
        void **procp = (void **) &disp->VertexAttribs2svNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribs2svNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribs3dvNV) {
        void **procp = (void **) &disp->VertexAttribs3dvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribs3dvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribs3fvNV) {
        void **procp = (void **) &disp->VertexAttribs3fvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribs3fvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribs3svNV) {
        void **procp = (void **) &disp->VertexAttribs3svNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribs3svNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribs4dvNV) {
        void **procp = (void **) &disp->VertexAttribs4dvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribs4dvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribs4fvNV) {
        void **procp = (void **) &disp->VertexAttribs4fvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribs4fvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribs4svNV) {
        void **procp = (void **) &disp->VertexAttribs4svNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribs4svNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribs4ubvNV) {
        void **procp = (void **) &disp->VertexAttribs4ubvNV;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribs4ubvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexBumpParameterfvATI) {
        void **procp = (void **) &disp->GetTexBumpParameterfvATI;

        snprintf(symboln, sizeof(symboln), "%sGetTexBumpParameterfvATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexBumpParameterivATI) {
        void **procp = (void **) &disp->GetTexBumpParameterivATI;

        snprintf(symboln, sizeof(symboln), "%sGetTexBumpParameterivATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexBumpParameterfvATI) {
        void **procp = (void **) &disp->TexBumpParameterfvATI;

        snprintf(symboln, sizeof(symboln), "%sTexBumpParameterfvATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexBumpParameterivATI) {
        void **procp = (void **) &disp->TexBumpParameterivATI;

        snprintf(symboln, sizeof(symboln), "%sTexBumpParameterivATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->AlphaFragmentOp1ATI) {
        void **procp = (void **) &disp->AlphaFragmentOp1ATI;

        snprintf(symboln, sizeof(symboln), "%sAlphaFragmentOp1ATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->AlphaFragmentOp2ATI) {
        void **procp = (void **) &disp->AlphaFragmentOp2ATI;

        snprintf(symboln, sizeof(symboln), "%sAlphaFragmentOp2ATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->AlphaFragmentOp3ATI) {
        void **procp = (void **) &disp->AlphaFragmentOp3ATI;

        snprintf(symboln, sizeof(symboln), "%sAlphaFragmentOp3ATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BeginFragmentShaderATI) {
        void **procp = (void **) &disp->BeginFragmentShaderATI;

        snprintf(symboln, sizeof(symboln), "%sBeginFragmentShaderATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindFragmentShaderATI) {
        void **procp = (void **) &disp->BindFragmentShaderATI;

        snprintf(symboln, sizeof(symboln), "%sBindFragmentShaderATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorFragmentOp1ATI) {
        void **procp = (void **) &disp->ColorFragmentOp1ATI;

        snprintf(symboln, sizeof(symboln), "%sColorFragmentOp1ATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorFragmentOp2ATI) {
        void **procp = (void **) &disp->ColorFragmentOp2ATI;

        snprintf(symboln, sizeof(symboln), "%sColorFragmentOp2ATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorFragmentOp3ATI) {
        void **procp = (void **) &disp->ColorFragmentOp3ATI;

        snprintf(symboln, sizeof(symboln), "%sColorFragmentOp3ATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteFragmentShaderATI) {
        void **procp = (void **) &disp->DeleteFragmentShaderATI;

        snprintf(symboln, sizeof(symboln), "%sDeleteFragmentShaderATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EndFragmentShaderATI) {
        void **procp = (void **) &disp->EndFragmentShaderATI;

        snprintf(symboln, sizeof(symboln), "%sEndFragmentShaderATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenFragmentShadersATI) {
        void **procp = (void **) &disp->GenFragmentShadersATI;

        snprintf(symboln, sizeof(symboln), "%sGenFragmentShadersATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PassTexCoordATI) {
        void **procp = (void **) &disp->PassTexCoordATI;

        snprintf(symboln, sizeof(symboln), "%sPassTexCoordATI", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SampleMapATI) {
        void **procp = (void **) &disp->SampleMapATI;

        snprintf(symboln, sizeof(symboln), "%sSampleMapATI", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->SetFragmentShaderConstantATI) {
        void **procp = (void **) &disp->SetFragmentShaderConstantATI;

        snprintf(symboln, sizeof(symboln), "%sSetFragmentShaderConstantATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PointParameteriNV) {
        void **procp = (void **) &disp->PointParameteriNV;

        snprintf(symboln, sizeof(symboln), "%sPointParameteri", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PointParameteriNV) {
        void **procp = (void **) &disp->PointParameteriNV;

        snprintf(symboln, sizeof(symboln), "%sPointParameteriNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PointParameterivNV) {
        void **procp = (void **) &disp->PointParameterivNV;

        snprintf(symboln, sizeof(symboln), "%sPointParameteriv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PointParameterivNV) {
        void **procp = (void **) &disp->PointParameterivNV;

        snprintf(symboln, sizeof(symboln), "%sPointParameterivNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ActiveStencilFaceEXT) {
        void **procp = (void **) &disp->ActiveStencilFaceEXT;

        snprintf(symboln, sizeof(symboln), "%sActiveStencilFaceEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindVertexArrayAPPLE) {
        void **procp = (void **) &disp->BindVertexArrayAPPLE;

        snprintf(symboln, sizeof(symboln), "%sBindVertexArrayAPPLE",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteVertexArraysAPPLE) {
        void **procp = (void **) &disp->DeleteVertexArraysAPPLE;

        snprintf(symboln, sizeof(symboln), "%sDeleteVertexArrays",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteVertexArraysAPPLE) {
        void **procp = (void **) &disp->DeleteVertexArraysAPPLE;

        snprintf(symboln, sizeof(symboln), "%sDeleteVertexArraysAPPLE",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenVertexArraysAPPLE) {
        void **procp = (void **) &disp->GenVertexArraysAPPLE;

        snprintf(symboln, sizeof(symboln), "%sGenVertexArraysAPPLE",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsVertexArrayAPPLE) {
        void **procp = (void **) &disp->IsVertexArrayAPPLE;

        snprintf(symboln, sizeof(symboln), "%sIsVertexArray", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsVertexArrayAPPLE) {
        void **procp = (void **) &disp->IsVertexArrayAPPLE;

        snprintf(symboln, sizeof(symboln), "%sIsVertexArrayAPPLE",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetProgramNamedParameterdvNV) {
        void **procp = (void **) &disp->GetProgramNamedParameterdvNV;

        snprintf(symboln, sizeof(symboln), "%sGetProgramNamedParameterdvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetProgramNamedParameterfvNV) {
        void **procp = (void **) &disp->GetProgramNamedParameterfvNV;

        snprintf(symboln, sizeof(symboln), "%sGetProgramNamedParameterfvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramNamedParameter4dNV) {
        void **procp = (void **) &disp->ProgramNamedParameter4dNV;

        snprintf(symboln, sizeof(symboln), "%sProgramNamedParameter4dNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramNamedParameter4dvNV) {
        void **procp = (void **) &disp->ProgramNamedParameter4dvNV;

        snprintf(symboln, sizeof(symboln), "%sProgramNamedParameter4dvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramNamedParameter4fNV) {
        void **procp = (void **) &disp->ProgramNamedParameter4fNV;

        snprintf(symboln, sizeof(symboln), "%sProgramNamedParameter4fNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramNamedParameter4fvNV) {
        void **procp = (void **) &disp->ProgramNamedParameter4fvNV;

        snprintf(symboln, sizeof(symboln), "%sProgramNamedParameter4fvNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PrimitiveRestartIndexNV) {
        void **procp = (void **) &disp->PrimitiveRestartIndexNV;

        snprintf(symboln, sizeof(symboln), "%sPrimitiveRestartIndexNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PrimitiveRestartIndexNV) {
        void **procp = (void **) &disp->PrimitiveRestartIndexNV;

        snprintf(symboln, sizeof(symboln), "%sPrimitiveRestartIndex",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->PrimitiveRestartNV) {
        void **procp = (void **) &disp->PrimitiveRestartNV;

        snprintf(symboln, sizeof(symboln), "%sPrimitiveRestartNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DepthBoundsEXT) {
        void **procp = (void **) &disp->DepthBoundsEXT;

        snprintf(symboln, sizeof(symboln), "%sDepthBoundsEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendEquationSeparateEXT) {
        void **procp = (void **) &disp->BlendEquationSeparateEXT;

        snprintf(symboln, sizeof(symboln), "%sBlendEquationSeparate",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendEquationSeparateEXT) {
        void **procp = (void **) &disp->BlendEquationSeparateEXT;

        snprintf(symboln, sizeof(symboln), "%sBlendEquationSeparateEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlendEquationSeparateEXT) {
        void **procp = (void **) &disp->BlendEquationSeparateEXT;

        snprintf(symboln, sizeof(symboln), "%sBlendEquationSeparateATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindFramebufferEXT) {
        void **procp = (void **) &disp->BindFramebufferEXT;

        snprintf(symboln, sizeof(symboln), "%sBindFramebuffer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindFramebufferEXT) {
        void **procp = (void **) &disp->BindFramebufferEXT;

        snprintf(symboln, sizeof(symboln), "%sBindFramebufferEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindRenderbufferEXT) {
        void **procp = (void **) &disp->BindRenderbufferEXT;

        snprintf(symboln, sizeof(symboln), "%sBindRenderbuffer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindRenderbufferEXT) {
        void **procp = (void **) &disp->BindRenderbufferEXT;

        snprintf(symboln, sizeof(symboln), "%sBindRenderbufferEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CheckFramebufferStatusEXT) {
        void **procp = (void **) &disp->CheckFramebufferStatusEXT;

        snprintf(symboln, sizeof(symboln), "%sCheckFramebufferStatus",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CheckFramebufferStatusEXT) {
        void **procp = (void **) &disp->CheckFramebufferStatusEXT;

        snprintf(symboln, sizeof(symboln), "%sCheckFramebufferStatusEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteFramebuffersEXT) {
        void **procp = (void **) &disp->DeleteFramebuffersEXT;

        snprintf(symboln, sizeof(symboln), "%sDeleteFramebuffers",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteFramebuffersEXT) {
        void **procp = (void **) &disp->DeleteFramebuffersEXT;

        snprintf(symboln, sizeof(symboln), "%sDeleteFramebuffersEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteRenderbuffersEXT) {
        void **procp = (void **) &disp->DeleteRenderbuffersEXT;

        snprintf(symboln, sizeof(symboln), "%sDeleteRenderbuffers",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DeleteRenderbuffersEXT) {
        void **procp = (void **) &disp->DeleteRenderbuffersEXT;

        snprintf(symboln, sizeof(symboln), "%sDeleteRenderbuffersEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FramebufferRenderbufferEXT) {
        void **procp = (void **) &disp->FramebufferRenderbufferEXT;

        snprintf(symboln, sizeof(symboln), "%sFramebufferRenderbuffer",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FramebufferRenderbufferEXT) {
        void **procp = (void **) &disp->FramebufferRenderbufferEXT;

        snprintf(symboln, sizeof(symboln), "%sFramebufferRenderbufferEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FramebufferTexture1DEXT) {
        void **procp = (void **) &disp->FramebufferTexture1DEXT;

        snprintf(symboln, sizeof(symboln), "%sFramebufferTexture1D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FramebufferTexture1DEXT) {
        void **procp = (void **) &disp->FramebufferTexture1DEXT;

        snprintf(symboln, sizeof(symboln), "%sFramebufferTexture1DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FramebufferTexture2DEXT) {
        void **procp = (void **) &disp->FramebufferTexture2DEXT;

        snprintf(symboln, sizeof(symboln), "%sFramebufferTexture2D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FramebufferTexture2DEXT) {
        void **procp = (void **) &disp->FramebufferTexture2DEXT;

        snprintf(symboln, sizeof(symboln), "%sFramebufferTexture2DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FramebufferTexture3DEXT) {
        void **procp = (void **) &disp->FramebufferTexture3DEXT;

        snprintf(symboln, sizeof(symboln), "%sFramebufferTexture3D",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FramebufferTexture3DEXT) {
        void **procp = (void **) &disp->FramebufferTexture3DEXT;

        snprintf(symboln, sizeof(symboln), "%sFramebufferTexture3DEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenFramebuffersEXT) {
        void **procp = (void **) &disp->GenFramebuffersEXT;

        snprintf(symboln, sizeof(symboln), "%sGenFramebuffers", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenFramebuffersEXT) {
        void **procp = (void **) &disp->GenFramebuffersEXT;

        snprintf(symboln, sizeof(symboln), "%sGenFramebuffersEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenRenderbuffersEXT) {
        void **procp = (void **) &disp->GenRenderbuffersEXT;

        snprintf(symboln, sizeof(symboln), "%sGenRenderbuffers", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenRenderbuffersEXT) {
        void **procp = (void **) &disp->GenRenderbuffersEXT;

        snprintf(symboln, sizeof(symboln), "%sGenRenderbuffersEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenerateMipmapEXT) {
        void **procp = (void **) &disp->GenerateMipmapEXT;

        snprintf(symboln, sizeof(symboln), "%sGenerateMipmap", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GenerateMipmapEXT) {
        void **procp = (void **) &disp->GenerateMipmapEXT;

        snprintf(symboln, sizeof(symboln), "%sGenerateMipmapEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetFramebufferAttachmentParameterivEXT) {
        void **procp = (void **) &disp->GetFramebufferAttachmentParameterivEXT;

        snprintf(symboln, sizeof(symboln),
                 "%sGetFramebufferAttachmentParameteriv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetFramebufferAttachmentParameterivEXT) {
        void **procp = (void **) &disp->GetFramebufferAttachmentParameterivEXT;

        snprintf(symboln, sizeof(symboln),
                 "%sGetFramebufferAttachmentParameterivEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetRenderbufferParameterivEXT) {
        void **procp = (void **) &disp->GetRenderbufferParameterivEXT;

        snprintf(symboln, sizeof(symboln), "%sGetRenderbufferParameteriv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetRenderbufferParameterivEXT) {
        void **procp = (void **) &disp->GetRenderbufferParameterivEXT;

        snprintf(symboln, sizeof(symboln), "%sGetRenderbufferParameterivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsFramebufferEXT) {
        void **procp = (void **) &disp->IsFramebufferEXT;

        snprintf(symboln, sizeof(symboln), "%sIsFramebuffer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsFramebufferEXT) {
        void **procp = (void **) &disp->IsFramebufferEXT;

        snprintf(symboln, sizeof(symboln), "%sIsFramebufferEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsRenderbufferEXT) {
        void **procp = (void **) &disp->IsRenderbufferEXT;

        snprintf(symboln, sizeof(symboln), "%sIsRenderbuffer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsRenderbufferEXT) {
        void **procp = (void **) &disp->IsRenderbufferEXT;

        snprintf(symboln, sizeof(symboln), "%sIsRenderbufferEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RenderbufferStorageEXT) {
        void **procp = (void **) &disp->RenderbufferStorageEXT;

        snprintf(symboln, sizeof(symboln), "%sRenderbufferStorage",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->RenderbufferStorageEXT) {
        void **procp = (void **) &disp->RenderbufferStorageEXT;

        snprintf(symboln, sizeof(symboln), "%sRenderbufferStorageEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlitFramebufferEXT) {
        void **procp = (void **) &disp->BlitFramebufferEXT;

        snprintf(symboln, sizeof(symboln), "%sBlitFramebuffer", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BlitFramebufferEXT) {
        void **procp = (void **) &disp->BlitFramebufferEXT;

        snprintf(symboln, sizeof(symboln), "%sBlitFramebufferEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BufferParameteriAPPLE) {
        void **procp = (void **) &disp->BufferParameteriAPPLE;

        snprintf(symboln, sizeof(symboln), "%sBufferParameteriAPPLE",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FlushMappedBufferRangeAPPLE) {
        void **procp = (void **) &disp->FlushMappedBufferRangeAPPLE;

        snprintf(symboln, sizeof(symboln), "%sFlushMappedBufferRangeAPPLE",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindFragDataLocationEXT) {
        void **procp = (void **) &disp->BindFragDataLocationEXT;

        snprintf(symboln, sizeof(symboln), "%sBindFragDataLocationEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindFragDataLocationEXT) {
        void **procp = (void **) &disp->BindFragDataLocationEXT;

        snprintf(symboln, sizeof(symboln), "%sBindFragDataLocation",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetFragDataLocationEXT) {
        void **procp = (void **) &disp->GetFragDataLocationEXT;

        snprintf(symboln, sizeof(symboln), "%sGetFragDataLocationEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetFragDataLocationEXT) {
        void **procp = (void **) &disp->GetFragDataLocationEXT;

        snprintf(symboln, sizeof(symboln), "%sGetFragDataLocation",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetUniformuivEXT) {
        void **procp = (void **) &disp->GetUniformuivEXT;

        snprintf(symboln, sizeof(symboln), "%sGetUniformuivEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetUniformuivEXT) {
        void **procp = (void **) &disp->GetUniformuivEXT;

        snprintf(symboln, sizeof(symboln), "%sGetUniformuiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribIivEXT) {
        void **procp = (void **) &disp->GetVertexAttribIivEXT;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribIivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribIivEXT) {
        void **procp = (void **) &disp->GetVertexAttribIivEXT;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribIiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribIuivEXT) {
        void **procp = (void **) &disp->GetVertexAttribIuivEXT;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribIuivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetVertexAttribIuivEXT) {
        void **procp = (void **) &disp->GetVertexAttribIuivEXT;

        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribIuiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform1uiEXT) {
        void **procp = (void **) &disp->Uniform1uiEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform1uiEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform1uiEXT) {
        void **procp = (void **) &disp->Uniform1uiEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform1ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform1uivEXT) {
        void **procp = (void **) &disp->Uniform1uivEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform1uivEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform1uivEXT) {
        void **procp = (void **) &disp->Uniform1uivEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform1uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform2uiEXT) {
        void **procp = (void **) &disp->Uniform2uiEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform2uiEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform2uiEXT) {
        void **procp = (void **) &disp->Uniform2uiEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform2ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform2uivEXT) {
        void **procp = (void **) &disp->Uniform2uivEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform2uivEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform2uivEXT) {
        void **procp = (void **) &disp->Uniform2uivEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform2uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform3uiEXT) {
        void **procp = (void **) &disp->Uniform3uiEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform3uiEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform3uiEXT) {
        void **procp = (void **) &disp->Uniform3uiEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform3ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform3uivEXT) {
        void **procp = (void **) &disp->Uniform3uivEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform3uivEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform3uivEXT) {
        void **procp = (void **) &disp->Uniform3uivEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform3uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform4uiEXT) {
        void **procp = (void **) &disp->Uniform4uiEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform4uiEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform4uiEXT) {
        void **procp = (void **) &disp->Uniform4uiEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform4ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform4uivEXT) {
        void **procp = (void **) &disp->Uniform4uivEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform4uivEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->Uniform4uivEXT) {
        void **procp = (void **) &disp->Uniform4uivEXT;

        snprintf(symboln, sizeof(symboln), "%sUniform4uiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI1iEXT) {
        void **procp = (void **) &disp->VertexAttribI1iEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI1iEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI1iEXT) {
        void **procp = (void **) &disp->VertexAttribI1iEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI1i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI1ivEXT) {
        void **procp = (void **) &disp->VertexAttribI1ivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI1ivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI1ivEXT) {
        void **procp = (void **) &disp->VertexAttribI1ivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI1iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI1uiEXT) {
        void **procp = (void **) &disp->VertexAttribI1uiEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI1uiEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI1uiEXT) {
        void **procp = (void **) &disp->VertexAttribI1uiEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI1ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI1uivEXT) {
        void **procp = (void **) &disp->VertexAttribI1uivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI1uivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI1uivEXT) {
        void **procp = (void **) &disp->VertexAttribI1uivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI1uiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI2iEXT) {
        void **procp = (void **) &disp->VertexAttribI2iEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI2iEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI2iEXT) {
        void **procp = (void **) &disp->VertexAttribI2iEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI2i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI2ivEXT) {
        void **procp = (void **) &disp->VertexAttribI2ivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI2ivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI2ivEXT) {
        void **procp = (void **) &disp->VertexAttribI2ivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI2iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI2uiEXT) {
        void **procp = (void **) &disp->VertexAttribI2uiEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI2uiEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI2uiEXT) {
        void **procp = (void **) &disp->VertexAttribI2uiEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI2ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI2uivEXT) {
        void **procp = (void **) &disp->VertexAttribI2uivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI2uivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI2uivEXT) {
        void **procp = (void **) &disp->VertexAttribI2uivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI2uiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI3iEXT) {
        void **procp = (void **) &disp->VertexAttribI3iEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI3iEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI3iEXT) {
        void **procp = (void **) &disp->VertexAttribI3iEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI3i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI3ivEXT) {
        void **procp = (void **) &disp->VertexAttribI3ivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI3ivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI3ivEXT) {
        void **procp = (void **) &disp->VertexAttribI3ivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI3iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI3uiEXT) {
        void **procp = (void **) &disp->VertexAttribI3uiEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI3uiEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI3uiEXT) {
        void **procp = (void **) &disp->VertexAttribI3uiEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI3ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI3uivEXT) {
        void **procp = (void **) &disp->VertexAttribI3uivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI3uivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI3uivEXT) {
        void **procp = (void **) &disp->VertexAttribI3uivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI3uiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4bvEXT) {
        void **procp = (void **) &disp->VertexAttribI4bvEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4bvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4bvEXT) {
        void **procp = (void **) &disp->VertexAttribI4bvEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4bv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4iEXT) {
        void **procp = (void **) &disp->VertexAttribI4iEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4iEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4iEXT) {
        void **procp = (void **) &disp->VertexAttribI4iEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4i", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4ivEXT) {
        void **procp = (void **) &disp->VertexAttribI4ivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4ivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4ivEXT) {
        void **procp = (void **) &disp->VertexAttribI4ivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4iv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4svEXT) {
        void **procp = (void **) &disp->VertexAttribI4svEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4svEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4svEXT) {
        void **procp = (void **) &disp->VertexAttribI4svEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4sv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4ubvEXT) {
        void **procp = (void **) &disp->VertexAttribI4ubvEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4ubvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4ubvEXT) {
        void **procp = (void **) &disp->VertexAttribI4ubvEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4ubv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4uiEXT) {
        void **procp = (void **) &disp->VertexAttribI4uiEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4uiEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4uiEXT) {
        void **procp = (void **) &disp->VertexAttribI4uiEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4ui", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4uivEXT) {
        void **procp = (void **) &disp->VertexAttribI4uivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4uivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4uivEXT) {
        void **procp = (void **) &disp->VertexAttribI4uivEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4uiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4usvEXT) {
        void **procp = (void **) &disp->VertexAttribI4usvEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4usvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribI4usvEXT) {
        void **procp = (void **) &disp->VertexAttribI4usvEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribI4usv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribIPointerEXT) {
        void **procp = (void **) &disp->VertexAttribIPointerEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribIPointerEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->VertexAttribIPointerEXT) {
        void **procp = (void **) &disp->VertexAttribIPointerEXT;

        snprintf(symboln, sizeof(symboln), "%sVertexAttribIPointer",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FramebufferTextureLayerEXT) {
        void **procp = (void **) &disp->FramebufferTextureLayerEXT;

        snprintf(symboln, sizeof(symboln), "%sFramebufferTextureLayer",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FramebufferTextureLayerEXT) {
        void **procp = (void **) &disp->FramebufferTextureLayerEXT;

        snprintf(symboln, sizeof(symboln), "%sFramebufferTextureLayerARB",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->FramebufferTextureLayerEXT) {
        void **procp = (void **) &disp->FramebufferTextureLayerEXT;

        snprintf(symboln, sizeof(symboln), "%sFramebufferTextureLayerEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorMaskIndexedEXT) {
        void **procp = (void **) &disp->ColorMaskIndexedEXT;

        snprintf(symboln, sizeof(symboln), "%sColorMaskIndexedEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ColorMaskIndexedEXT) {
        void **procp = (void **) &disp->ColorMaskIndexedEXT;

        snprintf(symboln, sizeof(symboln), "%sColorMaski", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DisableIndexedEXT) {
        void **procp = (void **) &disp->DisableIndexedEXT;

        snprintf(symboln, sizeof(symboln), "%sDisableIndexedEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->DisableIndexedEXT) {
        void **procp = (void **) &disp->DisableIndexedEXT;

        snprintf(symboln, sizeof(symboln), "%sDisablei", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EnableIndexedEXT) {
        void **procp = (void **) &disp->EnableIndexedEXT;

        snprintf(symboln, sizeof(symboln), "%sEnableIndexedEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EnableIndexedEXT) {
        void **procp = (void **) &disp->EnableIndexedEXT;

        snprintf(symboln, sizeof(symboln), "%sEnablei", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetBooleanIndexedvEXT) {
        void **procp = (void **) &disp->GetBooleanIndexedvEXT;

        snprintf(symboln, sizeof(symboln), "%sGetBooleanIndexedvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetBooleanIndexedvEXT) {
        void **procp = (void **) &disp->GetBooleanIndexedvEXT;

        snprintf(symboln, sizeof(symboln), "%sGetBooleani_v", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetIntegerIndexedvEXT) {
        void **procp = (void **) &disp->GetIntegerIndexedvEXT;

        snprintf(symboln, sizeof(symboln), "%sGetIntegerIndexedvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetIntegerIndexedvEXT) {
        void **procp = (void **) &disp->GetIntegerIndexedvEXT;

        snprintf(symboln, sizeof(symboln), "%sGetIntegeri_v", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsEnabledIndexedEXT) {
        void **procp = (void **) &disp->IsEnabledIndexedEXT;

        snprintf(symboln, sizeof(symboln), "%sIsEnabledIndexedEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->IsEnabledIndexedEXT) {
        void **procp = (void **) &disp->IsEnabledIndexedEXT;

        snprintf(symboln, sizeof(symboln), "%sIsEnabledi", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClearColorIiEXT) {
        void **procp = (void **) &disp->ClearColorIiEXT;

        snprintf(symboln, sizeof(symboln), "%sClearColorIiEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ClearColorIuiEXT) {
        void **procp = (void **) &disp->ClearColorIuiEXT;

        snprintf(symboln, sizeof(symboln), "%sClearColorIuiEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexParameterIivEXT) {
        void **procp = (void **) &disp->GetTexParameterIivEXT;

        snprintf(symboln, sizeof(symboln), "%sGetTexParameterIivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexParameterIivEXT) {
        void **procp = (void **) &disp->GetTexParameterIivEXT;

        snprintf(symboln, sizeof(symboln), "%sGetTexParameterIiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexParameterIuivEXT) {
        void **procp = (void **) &disp->GetTexParameterIuivEXT;

        snprintf(symboln, sizeof(symboln), "%sGetTexParameterIuivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexParameterIuivEXT) {
        void **procp = (void **) &disp->GetTexParameterIuivEXT;

        snprintf(symboln, sizeof(symboln), "%sGetTexParameterIuiv",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexParameterIivEXT) {
        void **procp = (void **) &disp->TexParameterIivEXT;

        snprintf(symboln, sizeof(symboln), "%sTexParameterIivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexParameterIivEXT) {
        void **procp = (void **) &disp->TexParameterIivEXT;

        snprintf(symboln, sizeof(symboln), "%sTexParameterIiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexParameterIuivEXT) {
        void **procp = (void **) &disp->TexParameterIuivEXT;

        snprintf(symboln, sizeof(symboln), "%sTexParameterIuivEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TexParameterIuivEXT) {
        void **procp = (void **) &disp->TexParameterIuivEXT;

        snprintf(symboln, sizeof(symboln), "%sTexParameterIuiv", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BeginConditionalRenderNV) {
        void **procp = (void **) &disp->BeginConditionalRenderNV;

        snprintf(symboln, sizeof(symboln), "%sBeginConditionalRenderNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BeginConditionalRenderNV) {
        void **procp = (void **) &disp->BeginConditionalRenderNV;

        snprintf(symboln, sizeof(symboln), "%sBeginConditionalRender",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EndConditionalRenderNV) {
        void **procp = (void **) &disp->EndConditionalRenderNV;

        snprintf(symboln, sizeof(symboln), "%sEndConditionalRenderNV",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EndConditionalRenderNV) {
        void **procp = (void **) &disp->EndConditionalRenderNV;

        snprintf(symboln, sizeof(symboln), "%sEndConditionalRender",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BeginTransformFeedbackEXT) {
        void **procp = (void **) &disp->BeginTransformFeedbackEXT;

        snprintf(symboln, sizeof(symboln), "%sBeginTransformFeedbackEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BeginTransformFeedbackEXT) {
        void **procp = (void **) &disp->BeginTransformFeedbackEXT;

        snprintf(symboln, sizeof(symboln), "%sBeginTransformFeedback",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindBufferBaseEXT) {
        void **procp = (void **) &disp->BindBufferBaseEXT;

        snprintf(symboln, sizeof(symboln), "%sBindBufferBaseEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindBufferBaseEXT) {
        void **procp = (void **) &disp->BindBufferBaseEXT;

        snprintf(symboln, sizeof(symboln), "%sBindBufferBase", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindBufferOffsetEXT) {
        void **procp = (void **) &disp->BindBufferOffsetEXT;

        snprintf(symboln, sizeof(symboln), "%sBindBufferOffsetEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindBufferRangeEXT) {
        void **procp = (void **) &disp->BindBufferRangeEXT;

        snprintf(symboln, sizeof(symboln), "%sBindBufferRangeEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->BindBufferRangeEXT) {
        void **procp = (void **) &disp->BindBufferRangeEXT;

        snprintf(symboln, sizeof(symboln), "%sBindBufferRange", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EndTransformFeedbackEXT) {
        void **procp = (void **) &disp->EndTransformFeedbackEXT;

        snprintf(symboln, sizeof(symboln), "%sEndTransformFeedbackEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EndTransformFeedbackEXT) {
        void **procp = (void **) &disp->EndTransformFeedbackEXT;

        snprintf(symboln, sizeof(symboln), "%sEndTransformFeedback",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTransformFeedbackVaryingEXT) {
        void **procp = (void **) &disp->GetTransformFeedbackVaryingEXT;

        snprintf(symboln, sizeof(symboln), "%sGetTransformFeedbackVaryingEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTransformFeedbackVaryingEXT) {
        void **procp = (void **) &disp->GetTransformFeedbackVaryingEXT;

        snprintf(symboln, sizeof(symboln), "%sGetTransformFeedbackVarying",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TransformFeedbackVaryingsEXT) {
        void **procp = (void **) &disp->TransformFeedbackVaryingsEXT;

        snprintf(symboln, sizeof(symboln), "%sTransformFeedbackVaryingsEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TransformFeedbackVaryingsEXT) {
        void **procp = (void **) &disp->TransformFeedbackVaryingsEXT;

        snprintf(symboln, sizeof(symboln), "%sTransformFeedbackVaryings",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProvokingVertexEXT) {
        void **procp = (void **) &disp->ProvokingVertexEXT;

        snprintf(symboln, sizeof(symboln), "%sProvokingVertexEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProvokingVertexEXT) {
        void **procp = (void **) &disp->ProvokingVertexEXT;

        snprintf(symboln, sizeof(symboln), "%sProvokingVertex", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetTexParameterPointervAPPLE) {
        void **procp = (void **) &disp->GetTexParameterPointervAPPLE;

        snprintf(symboln, sizeof(symboln), "%sGetTexParameterPointervAPPLE",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TextureRangeAPPLE) {
        void **procp = (void **) &disp->TextureRangeAPPLE;

        snprintf(symboln, sizeof(symboln), "%sTextureRangeAPPLE",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetObjectParameterivAPPLE) {
        void **procp = (void **) &disp->GetObjectParameterivAPPLE;

        snprintf(symboln, sizeof(symboln), "%sGetObjectParameterivAPPLE",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ObjectPurgeableAPPLE) {
        void **procp = (void **) &disp->ObjectPurgeableAPPLE;

        snprintf(symboln, sizeof(symboln), "%sObjectPurgeableAPPLE",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ObjectUnpurgeableAPPLE) {
        void **procp = (void **) &disp->ObjectUnpurgeableAPPLE;

        snprintf(symboln, sizeof(symboln), "%sObjectUnpurgeableAPPLE",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ActiveProgramEXT) {
        void **procp = (void **) &disp->ActiveProgramEXT;

        snprintf(symboln, sizeof(symboln), "%sActiveProgramEXT", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->CreateShaderProgramEXT) {
        void **procp = (void **) &disp->CreateShaderProgramEXT;

        snprintf(symboln, sizeof(symboln), "%sCreateShaderProgramEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->UseShaderProgramEXT) {
        void **procp = (void **) &disp->UseShaderProgramEXT;

        snprintf(symboln, sizeof(symboln), "%sUseShaderProgramEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->TextureBarrierNV) {
        void **procp = (void **) &disp->TextureBarrierNV;

        snprintf(symboln, sizeof(symboln), "%sTextureBarrierNV", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->StencilFuncSeparateATI) {
        void **procp = (void **) &disp->StencilFuncSeparateATI;

        snprintf(symboln, sizeof(symboln), "%sStencilFuncSeparateATI",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramEnvParameters4fvEXT) {
        void **procp = (void **) &disp->ProgramEnvParameters4fvEXT;

        snprintf(symboln, sizeof(symboln), "%sProgramEnvParameters4fvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->ProgramLocalParameters4fvEXT) {
        void **procp = (void **) &disp->ProgramLocalParameters4fvEXT;

        snprintf(symboln, sizeof(symboln), "%sProgramLocalParameters4fvEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetQueryObjecti64vEXT) {
        void **procp = (void **) &disp->GetQueryObjecti64vEXT;

        snprintf(symboln, sizeof(symboln), "%sGetQueryObjecti64vEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->GetQueryObjectui64vEXT) {
        void **procp = (void **) &disp->GetQueryObjectui64vEXT;

        snprintf(symboln, sizeof(symboln), "%sGetQueryObjectui64vEXT",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EGLImageTargetRenderbufferStorageOES) {
        void **procp = (void **) &disp->EGLImageTargetRenderbufferStorageOES;

        snprintf(symboln, sizeof(symboln),
                 "%sEGLImageTargetRenderbufferStorageOES", symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    if (!disp->EGLImageTargetTexture2DOES) {
        void **procp = (void **) &disp->EGLImageTargetTexture2DOES;

        snprintf(symboln, sizeof(symboln), "%sEGLImageTargetTexture2DOES",
                 symbol_prefix);
        *procp = dlsym(handle, symboln);
    }

    __glapi_gentable_set_remaining_noop(disp);

    return disp;
}
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.1
log
@Update to xserver 1.11.2
@
text
@d30 4
d38 6
a43 1
#ifdef HAVE_BACKTRACE
d56 1
d58 1
d61 2
a62 1
__glapi_gentable_NoOp(void) {
a63 2
#ifdef HAVE_BACKTRACE
    void *frames[2];
d65 21
a85 5
    if(backtrace(frames, 2) == 2) {
        Dl_info info;
        dladdr(frames[1], &info);
        if(info.dli_sname)
            fstr = info.dli_sname;
d88 1
a88 1

d90 1
d94 2
a95 1
__glapi_gentable_set_remaining_noop(struct _glapi_table *disp) {
d101 5
a105 1
    union {_glapi_proc p; void *v;} p;
d108 2
a109 2
    for(i=0; i < entries; i++)
        if(dispatch[i] == NULL)
d114 3
a116 2
_glapi_create_table_from_handle(void *handle, const char *symbol_prefix) {
    struct _glapi_table *disp = calloc(1, sizeof(struct _glapi_table));
a117 1
    void ** procp;
d119 1
a119 1
    if(!disp)
d122 1
a122 1
    if(symbol_prefix == NULL)
d125 2
a127 1
    if(!disp->NewList) {
a128 1
        procp = (void **) &disp->NewList;
d132 2
a134 1
    if(!disp->EndList) {
a135 1
        procp = (void **) &disp->EndList;
d139 2
a141 1
    if(!disp->CallList) {
a142 1
        procp = (void **) &disp->CallList;
d146 2
a148 1
    if(!disp->CallLists) {
a149 1
        procp = (void **) &disp->CallLists;
d153 2
a155 1
    if(!disp->DeleteLists) {
a156 1
        procp = (void **) &disp->DeleteLists;
d160 2
a162 1
    if(!disp->GenLists) {
a163 1
        procp = (void **) &disp->GenLists;
d167 2
a169 1
    if(!disp->ListBase) {
a170 1
        procp = (void **) &disp->ListBase;
d174 2
a176 1
    if(!disp->Begin) {
a177 1
        procp = (void **) &disp->Begin;
d181 2
a183 1
    if(!disp->Bitmap) {
a184 1
        procp = (void **) &disp->Bitmap;
d188 2
a190 1
    if(!disp->Color3b) {
a191 1
        procp = (void **) &disp->Color3b;
d195 2
a197 1
    if(!disp->Color3bv) {
a198 1
        procp = (void **) &disp->Color3bv;
d202 2
a204 1
    if(!disp->Color3d) {
a205 1
        procp = (void **) &disp->Color3d;
d209 2
a211 1
    if(!disp->Color3dv) {
a212 1
        procp = (void **) &disp->Color3dv;
d216 2
a218 1
    if(!disp->Color3f) {
a219 1
        procp = (void **) &disp->Color3f;
d223 2
a225 1
    if(!disp->Color3fv) {
a226 1
        procp = (void **) &disp->Color3fv;
d230 2
a232 1
    if(!disp->Color3i) {
a233 1
        procp = (void **) &disp->Color3i;
d237 2
a239 1
    if(!disp->Color3iv) {
a240 1
        procp = (void **) &disp->Color3iv;
d244 2
a246 1
    if(!disp->Color3s) {
a247 1
        procp = (void **) &disp->Color3s;
d251 2
a253 1
    if(!disp->Color3sv) {
a254 1
        procp = (void **) &disp->Color3sv;
d258 2
a260 1
    if(!disp->Color3ub) {
a261 1
        procp = (void **) &disp->Color3ub;
d265 2
a267 1
    if(!disp->Color3ubv) {
a268 1
        procp = (void **) &disp->Color3ubv;
d272 2
a274 1
    if(!disp->Color3ui) {
a275 1
        procp = (void **) &disp->Color3ui;
d279 2
a281 1
    if(!disp->Color3uiv) {
a282 1
        procp = (void **) &disp->Color3uiv;
d286 2
a288 1
    if(!disp->Color3us) {
a289 1
        procp = (void **) &disp->Color3us;
d293 2
a295 1
    if(!disp->Color3usv) {
a296 1
        procp = (void **) &disp->Color3usv;
d300 2
a302 1
    if(!disp->Color4b) {
a303 1
        procp = (void **) &disp->Color4b;
d307 2
a309 1
    if(!disp->Color4bv) {
a310 1
        procp = (void **) &disp->Color4bv;
d314 2
a316 1
    if(!disp->Color4d) {
a317 1
        procp = (void **) &disp->Color4d;
d321 2
a323 1
    if(!disp->Color4dv) {
a324 1
        procp = (void **) &disp->Color4dv;
d328 2
a330 1
    if(!disp->Color4f) {
a331 1
        procp = (void **) &disp->Color4f;
d335 2
a337 1
    if(!disp->Color4fv) {
a338 1
        procp = (void **) &disp->Color4fv;
d342 2
a344 1
    if(!disp->Color4i) {
a345 1
        procp = (void **) &disp->Color4i;
d349 2
a351 1
    if(!disp->Color4iv) {
a352 1
        procp = (void **) &disp->Color4iv;
d356 2
a358 1
    if(!disp->Color4s) {
a359 1
        procp = (void **) &disp->Color4s;
d363 2
a365 1
    if(!disp->Color4sv) {
a366 1
        procp = (void **) &disp->Color4sv;
d370 2
a372 1
    if(!disp->Color4ub) {
a373 1
        procp = (void **) &disp->Color4ub;
d377 2
a379 1
    if(!disp->Color4ubv) {
a380 1
        procp = (void **) &disp->Color4ubv;
d384 2
a386 1
    if(!disp->Color4ui) {
a387 1
        procp = (void **) &disp->Color4ui;
d391 2
a393 1
    if(!disp->Color4uiv) {
a394 1
        procp = (void **) &disp->Color4uiv;
d398 2
a400 1
    if(!disp->Color4us) {
a401 1
        procp = (void **) &disp->Color4us;
d405 2
a407 1
    if(!disp->Color4usv) {
a408 1
        procp = (void **) &disp->Color4usv;
d412 2
a414 1
    if(!disp->EdgeFlag) {
a415 1
        procp = (void **) &disp->EdgeFlag;
d419 2
a421 1
    if(!disp->EdgeFlagv) {
a422 1
        procp = (void **) &disp->EdgeFlagv;
d426 2
a428 1
    if(!disp->End) {
a429 1
        procp = (void **) &disp->End;
d433 2
a435 1
    if(!disp->Indexd) {
a436 1
        procp = (void **) &disp->Indexd;
d440 2
a442 1
    if(!disp->Indexdv) {
a443 1
        procp = (void **) &disp->Indexdv;
d447 2
a449 1
    if(!disp->Indexf) {
a450 1
        procp = (void **) &disp->Indexf;
d454 2
a456 1
    if(!disp->Indexfv) {
a457 1
        procp = (void **) &disp->Indexfv;
d461 2
a463 1
    if(!disp->Indexi) {
a464 1
        procp = (void **) &disp->Indexi;
d468 2
a470 1
    if(!disp->Indexiv) {
a471 1
        procp = (void **) &disp->Indexiv;
d475 2
a477 1
    if(!disp->Indexs) {
a478 1
        procp = (void **) &disp->Indexs;
d482 2
a484 1
    if(!disp->Indexsv) {
a485 1
        procp = (void **) &disp->Indexsv;
d489 2
a491 1
    if(!disp->Normal3b) {
a492 1
        procp = (void **) &disp->Normal3b;
d496 2
a498 1
    if(!disp->Normal3bv) {
a499 1
        procp = (void **) &disp->Normal3bv;
d503 2
a505 1
    if(!disp->Normal3d) {
a506 1
        procp = (void **) &disp->Normal3d;
d510 2
a512 1
    if(!disp->Normal3dv) {
a513 1
        procp = (void **) &disp->Normal3dv;
d517 2
a519 1
    if(!disp->Normal3f) {
a520 1
        procp = (void **) &disp->Normal3f;
d524 2
a526 1
    if(!disp->Normal3fv) {
a527 1
        procp = (void **) &disp->Normal3fv;
d531 2
a533 1
    if(!disp->Normal3i) {
a534 1
        procp = (void **) &disp->Normal3i;
d538 2
a540 1
    if(!disp->Normal3iv) {
a541 1
        procp = (void **) &disp->Normal3iv;
d545 2
a547 1
    if(!disp->Normal3s) {
a548 1
        procp = (void **) &disp->Normal3s;
d552 2
a554 1
    if(!disp->Normal3sv) {
a555 1
        procp = (void **) &disp->Normal3sv;
d559 2
a561 1
    if(!disp->RasterPos2d) {
a562 1
        procp = (void **) &disp->RasterPos2d;
d566 2
a568 1
    if(!disp->RasterPos2dv) {
a569 1
        procp = (void **) &disp->RasterPos2dv;
d573 2
a575 1
    if(!disp->RasterPos2f) {
a576 1
        procp = (void **) &disp->RasterPos2f;
d580 2
a582 1
    if(!disp->RasterPos2fv) {
a583 1
        procp = (void **) &disp->RasterPos2fv;
d587 2
a589 1
    if(!disp->RasterPos2i) {
a590 1
        procp = (void **) &disp->RasterPos2i;
d594 2
a596 1
    if(!disp->RasterPos2iv) {
a597 1
        procp = (void **) &disp->RasterPos2iv;
d601 2
a603 1
    if(!disp->RasterPos2s) {
a604 1
        procp = (void **) &disp->RasterPos2s;
d608 2
a610 1
    if(!disp->RasterPos2sv) {
a611 1
        procp = (void **) &disp->RasterPos2sv;
d615 2
a617 1
    if(!disp->RasterPos3d) {
a618 1
        procp = (void **) &disp->RasterPos3d;
d622 2
a624 1
    if(!disp->RasterPos3dv) {
a625 1
        procp = (void **) &disp->RasterPos3dv;
d629 2
a631 1
    if(!disp->RasterPos3f) {
a632 1
        procp = (void **) &disp->RasterPos3f;
d636 2
a638 1
    if(!disp->RasterPos3fv) {
a639 1
        procp = (void **) &disp->RasterPos3fv;
d643 2
a645 1
    if(!disp->RasterPos3i) {
a646 1
        procp = (void **) &disp->RasterPos3i;
d650 2
a652 1
    if(!disp->RasterPos3iv) {
a653 1
        procp = (void **) &disp->RasterPos3iv;
d657 2
a659 1
    if(!disp->RasterPos3s) {
a660 1
        procp = (void **) &disp->RasterPos3s;
d664 2
a666 1
    if(!disp->RasterPos3sv) {
a667 1
        procp = (void **) &disp->RasterPos3sv;
d671 2
a673 1
    if(!disp->RasterPos4d) {
a674 1
        procp = (void **) &disp->RasterPos4d;
d678 2
a680 1
    if(!disp->RasterPos4dv) {
a681 1
        procp = (void **) &disp->RasterPos4dv;
d685 2
a687 1
    if(!disp->RasterPos4f) {
a688 1
        procp = (void **) &disp->RasterPos4f;
d692 2
a694 1
    if(!disp->RasterPos4fv) {
a695 1
        procp = (void **) &disp->RasterPos4fv;
d699 2
a701 1
    if(!disp->RasterPos4i) {
a702 1
        procp = (void **) &disp->RasterPos4i;
d706 2
a708 1
    if(!disp->RasterPos4iv) {
a709 1
        procp = (void **) &disp->RasterPos4iv;
d713 2
a715 1
    if(!disp->RasterPos4s) {
a716 1
        procp = (void **) &disp->RasterPos4s;
d720 2
a722 1
    if(!disp->RasterPos4sv) {
a723 1
        procp = (void **) &disp->RasterPos4sv;
d727 2
a729 1
    if(!disp->Rectd) {
a730 1
        procp = (void **) &disp->Rectd;
d734 2
a736 1
    if(!disp->Rectdv) {
a737 1
        procp = (void **) &disp->Rectdv;
d741 2
a743 1
    if(!disp->Rectf) {
a744 1
        procp = (void **) &disp->Rectf;
d748 2
a750 1
    if(!disp->Rectfv) {
a751 1
        procp = (void **) &disp->Rectfv;
d755 2
a757 1
    if(!disp->Recti) {
a758 1
        procp = (void **) &disp->Recti;
d762 2
a764 1
    if(!disp->Rectiv) {
a765 1
        procp = (void **) &disp->Rectiv;
d769 2
a771 1
    if(!disp->Rects) {
a772 1
        procp = (void **) &disp->Rects;
d776 2
a778 1
    if(!disp->Rectsv) {
a779 1
        procp = (void **) &disp->Rectsv;
d783 2
a785 1
    if(!disp->TexCoord1d) {
a786 1
        procp = (void **) &disp->TexCoord1d;
d790 2
a792 1
    if(!disp->TexCoord1dv) {
a793 1
        procp = (void **) &disp->TexCoord1dv;
d797 2
a799 1
    if(!disp->TexCoord1f) {
a800 1
        procp = (void **) &disp->TexCoord1f;
d804 2
a806 1
    if(!disp->TexCoord1fv) {
a807 1
        procp = (void **) &disp->TexCoord1fv;
d811 2
a813 1
    if(!disp->TexCoord1i) {
a814 1
        procp = (void **) &disp->TexCoord1i;
d818 2
a820 1
    if(!disp->TexCoord1iv) {
a821 1
        procp = (void **) &disp->TexCoord1iv;
d825 2
a827 1
    if(!disp->TexCoord1s) {
a828 1
        procp = (void **) &disp->TexCoord1s;
d832 2
a834 1
    if(!disp->TexCoord1sv) {
a835 1
        procp = (void **) &disp->TexCoord1sv;
d839 2
a841 1
    if(!disp->TexCoord2d) {
a842 1
        procp = (void **) &disp->TexCoord2d;
d846 2
a848 1
    if(!disp->TexCoord2dv) {
a849 1
        procp = (void **) &disp->TexCoord2dv;
d853 2
a855 1
    if(!disp->TexCoord2f) {
a856 1
        procp = (void **) &disp->TexCoord2f;
d860 2
a862 1
    if(!disp->TexCoord2fv) {
a863 1
        procp = (void **) &disp->TexCoord2fv;
d867 2
a869 1
    if(!disp->TexCoord2i) {
a870 1
        procp = (void **) &disp->TexCoord2i;
d874 2
a876 1
    if(!disp->TexCoord2iv) {
a877 1
        procp = (void **) &disp->TexCoord2iv;
d881 2
a883 1
    if(!disp->TexCoord2s) {
a884 1
        procp = (void **) &disp->TexCoord2s;
d888 2
a890 1
    if(!disp->TexCoord2sv) {
a891 1
        procp = (void **) &disp->TexCoord2sv;
d895 2
a897 1
    if(!disp->TexCoord3d) {
a898 1
        procp = (void **) &disp->TexCoord3d;
d902 2
a904 1
    if(!disp->TexCoord3dv) {
a905 1
        procp = (void **) &disp->TexCoord3dv;
d909 2
a911 1
    if(!disp->TexCoord3f) {
a912 1
        procp = (void **) &disp->TexCoord3f;
d916 2
a918 1
    if(!disp->TexCoord3fv) {
a919 1
        procp = (void **) &disp->TexCoord3fv;
d923 2
a925 1
    if(!disp->TexCoord3i) {
a926 1
        procp = (void **) &disp->TexCoord3i;
d930 2
a932 1
    if(!disp->TexCoord3iv) {
a933 1
        procp = (void **) &disp->TexCoord3iv;
d937 2
a939 1
    if(!disp->TexCoord3s) {
a940 1
        procp = (void **) &disp->TexCoord3s;
d944 2
a946 1
    if(!disp->TexCoord3sv) {
a947 1
        procp = (void **) &disp->TexCoord3sv;
d951 2
a953 1
    if(!disp->TexCoord4d) {
a954 1
        procp = (void **) &disp->TexCoord4d;
d958 2
a960 1
    if(!disp->TexCoord4dv) {
a961 1
        procp = (void **) &disp->TexCoord4dv;
d965 2
a967 1
    if(!disp->TexCoord4f) {
a968 1
        procp = (void **) &disp->TexCoord4f;
d972 2
a974 1
    if(!disp->TexCoord4fv) {
a975 1
        procp = (void **) &disp->TexCoord4fv;
d979 2
a981 1
    if(!disp->TexCoord4i) {
a982 1
        procp = (void **) &disp->TexCoord4i;
d986 2
a988 1
    if(!disp->TexCoord4iv) {
a989 1
        procp = (void **) &disp->TexCoord4iv;
d993 2
a995 1
    if(!disp->TexCoord4s) {
a996 1
        procp = (void **) &disp->TexCoord4s;
d1000 2
a1002 1
    if(!disp->TexCoord4sv) {
a1003 1
        procp = (void **) &disp->TexCoord4sv;
d1007 2
a1009 1
    if(!disp->Vertex2d) {
a1010 1
        procp = (void **) &disp->Vertex2d;
d1014 2
a1016 1
    if(!disp->Vertex2dv) {
a1017 1
        procp = (void **) &disp->Vertex2dv;
d1021 2
a1023 1
    if(!disp->Vertex2f) {
a1024 1
        procp = (void **) &disp->Vertex2f;
d1028 2
a1030 1
    if(!disp->Vertex2fv) {
a1031 1
        procp = (void **) &disp->Vertex2fv;
d1035 2
a1037 1
    if(!disp->Vertex2i) {
a1038 1
        procp = (void **) &disp->Vertex2i;
d1042 2
a1044 1
    if(!disp->Vertex2iv) {
a1045 1
        procp = (void **) &disp->Vertex2iv;
d1049 2
a1051 1
    if(!disp->Vertex2s) {
a1052 1
        procp = (void **) &disp->Vertex2s;
d1056 2
a1058 1
    if(!disp->Vertex2sv) {
a1059 1
        procp = (void **) &disp->Vertex2sv;
d1063 2
a1065 1
    if(!disp->Vertex3d) {
a1066 1
        procp = (void **) &disp->Vertex3d;
d1070 2
a1072 1
    if(!disp->Vertex3dv) {
a1073 1
        procp = (void **) &disp->Vertex3dv;
d1077 2
a1079 1
    if(!disp->Vertex3f) {
a1080 1
        procp = (void **) &disp->Vertex3f;
d1084 2
a1086 1
    if(!disp->Vertex3fv) {
a1087 1
        procp = (void **) &disp->Vertex3fv;
d1091 2
a1093 1
    if(!disp->Vertex3i) {
a1094 1
        procp = (void **) &disp->Vertex3i;
d1098 2
a1100 1
    if(!disp->Vertex3iv) {
a1101 1
        procp = (void **) &disp->Vertex3iv;
d1105 2
a1107 1
    if(!disp->Vertex3s) {
a1108 1
        procp = (void **) &disp->Vertex3s;
d1112 2
a1114 1
    if(!disp->Vertex3sv) {
a1115 1
        procp = (void **) &disp->Vertex3sv;
d1119 2
a1121 1
    if(!disp->Vertex4d) {
a1122 1
        procp = (void **) &disp->Vertex4d;
d1126 2
a1128 1
    if(!disp->Vertex4dv) {
a1129 1
        procp = (void **) &disp->Vertex4dv;
d1133 2
a1135 1
    if(!disp->Vertex4f) {
a1136 1
        procp = (void **) &disp->Vertex4f;
d1140 2
a1142 1
    if(!disp->Vertex4fv) {
a1143 1
        procp = (void **) &disp->Vertex4fv;
d1147 2
a1149 1
    if(!disp->Vertex4i) {
a1150 1
        procp = (void **) &disp->Vertex4i;
d1154 2
a1156 1
    if(!disp->Vertex4iv) {
a1157 1
        procp = (void **) &disp->Vertex4iv;
d1161 2
a1163 1
    if(!disp->Vertex4s) {
a1164 1
        procp = (void **) &disp->Vertex4s;
d1168 2
a1170 1
    if(!disp->Vertex4sv) {
a1171 1
        procp = (void **) &disp->Vertex4sv;
d1175 2
a1177 1
    if(!disp->ClipPlane) {
a1178 1
        procp = (void **) &disp->ClipPlane;
d1182 2
a1184 1
    if(!disp->ColorMaterial) {
a1185 1
        procp = (void **) &disp->ColorMaterial;
d1189 2
a1191 1
    if(!disp->CullFace) {
a1192 1
        procp = (void **) &disp->CullFace;
d1196 2
a1198 1
    if(!disp->Fogf) {
a1199 1
        procp = (void **) &disp->Fogf;
d1203 2
a1205 1
    if(!disp->Fogfv) {
a1206 1
        procp = (void **) &disp->Fogfv;
d1210 2
a1212 1
    if(!disp->Fogi) {
a1213 1
        procp = (void **) &disp->Fogi;
d1217 2
a1219 1
    if(!disp->Fogiv) {
a1220 1
        procp = (void **) &disp->Fogiv;
d1224 2
a1226 1
    if(!disp->FrontFace) {
a1227 1
        procp = (void **) &disp->FrontFace;
d1231 2
a1233 1
    if(!disp->Hint) {
a1234 1
        procp = (void **) &disp->Hint;
d1238 2
a1240 1
    if(!disp->Lightf) {
a1241 1
        procp = (void **) &disp->Lightf;
d1245 2
a1247 1
    if(!disp->Lightfv) {
a1248 1
        procp = (void **) &disp->Lightfv;
d1252 2
a1254 1
    if(!disp->Lighti) {
a1255 1
        procp = (void **) &disp->Lighti;
d1259 2
a1261 1
    if(!disp->Lightiv) {
a1262 1
        procp = (void **) &disp->Lightiv;
d1266 2
a1268 1
    if(!disp->LightModelf) {
a1269 1
        procp = (void **) &disp->LightModelf;
d1273 2
a1275 1
    if(!disp->LightModelfv) {
a1276 1
        procp = (void **) &disp->LightModelfv;
d1280 2
a1282 1
    if(!disp->LightModeli) {
a1283 1
        procp = (void **) &disp->LightModeli;
d1287 2
a1289 1
    if(!disp->LightModeliv) {
a1290 1
        procp = (void **) &disp->LightModeliv;
d1294 2
a1296 1
    if(!disp->LineStipple) {
a1297 1
        procp = (void **) &disp->LineStipple;
d1301 2
a1303 1
    if(!disp->LineWidth) {
a1304 1
        procp = (void **) &disp->LineWidth;
d1308 2
a1310 1
    if(!disp->Materialf) {
a1311 1
        procp = (void **) &disp->Materialf;
d1315 2
a1317 1
    if(!disp->Materialfv) {
a1318 1
        procp = (void **) &disp->Materialfv;
d1322 2
a1324 1
    if(!disp->Materiali) {
a1325 1
        procp = (void **) &disp->Materiali;
d1329 2
a1331 1
    if(!disp->Materialiv) {
a1332 1
        procp = (void **) &disp->Materialiv;
d1336 2
a1338 1
    if(!disp->PointSize) {
a1339 1
        procp = (void **) &disp->PointSize;
d1343 2
a1345 1
    if(!disp->PolygonMode) {
a1346 1
        procp = (void **) &disp->PolygonMode;
d1350 2
a1352 1
    if(!disp->PolygonStipple) {
a1353 1
        procp = (void **) &disp->PolygonStipple;
d1357 2
a1359 1
    if(!disp->Scissor) {
a1360 1
        procp = (void **) &disp->Scissor;
d1364 2
a1366 1
    if(!disp->ShadeModel) {
a1367 1
        procp = (void **) &disp->ShadeModel;
d1371 2
a1373 1
    if(!disp->TexParameterf) {
a1374 1
        procp = (void **) &disp->TexParameterf;
d1378 2
a1380 1
    if(!disp->TexParameterfv) {
a1381 1
        procp = (void **) &disp->TexParameterfv;
d1385 2
a1387 1
    if(!disp->TexParameteri) {
a1388 1
        procp = (void **) &disp->TexParameteri;
d1392 2
a1394 1
    if(!disp->TexParameteriv) {
a1395 1
        procp = (void **) &disp->TexParameteriv;
d1399 2
a1401 1
    if(!disp->TexImage1D) {
a1402 1
        procp = (void **) &disp->TexImage1D;
d1406 2
a1408 1
    if(!disp->TexImage2D) {
a1409 1
        procp = (void **) &disp->TexImage2D;
d1413 2
a1415 1
    if(!disp->TexEnvf) {
a1416 1
        procp = (void **) &disp->TexEnvf;
d1420 2
a1422 1
    if(!disp->TexEnvfv) {
a1423 1
        procp = (void **) &disp->TexEnvfv;
d1427 2
a1429 1
    if(!disp->TexEnvi) {
a1430 1
        procp = (void **) &disp->TexEnvi;
d1434 2
a1436 1
    if(!disp->TexEnviv) {
a1437 1
        procp = (void **) &disp->TexEnviv;
d1441 2
a1443 1
    if(!disp->TexGend) {
a1444 1
        procp = (void **) &disp->TexGend;
d1448 2
a1450 1
    if(!disp->TexGendv) {
a1451 1
        procp = (void **) &disp->TexGendv;
d1455 2
a1457 1
    if(!disp->TexGenf) {
a1458 1
        procp = (void **) &disp->TexGenf;
d1462 2
a1464 1
    if(!disp->TexGenfv) {
a1465 1
        procp = (void **) &disp->TexGenfv;
d1469 2
a1471 1
    if(!disp->TexGeni) {
a1472 1
        procp = (void **) &disp->TexGeni;
d1476 2
a1478 1
    if(!disp->TexGeniv) {
a1479 1
        procp = (void **) &disp->TexGeniv;
d1483 2
a1485 1
    if(!disp->FeedbackBuffer) {
a1486 1
        procp = (void **) &disp->FeedbackBuffer;
d1490 2
a1492 1
    if(!disp->SelectBuffer) {
a1493 1
        procp = (void **) &disp->SelectBuffer;
d1497 2
a1499 1
    if(!disp->RenderMode) {
a1500 1
        procp = (void **) &disp->RenderMode;
d1504 2
a1506 1
    if(!disp->InitNames) {
a1507 1
        procp = (void **) &disp->InitNames;
d1511 2
a1513 1
    if(!disp->LoadName) {
a1514 1
        procp = (void **) &disp->LoadName;
d1518 2
a1520 1
    if(!disp->PassThrough) {
a1521 1
        procp = (void **) &disp->PassThrough;
d1525 2
a1527 1
    if(!disp->PopName) {
a1528 1
        procp = (void **) &disp->PopName;
d1532 2
a1534 1
    if(!disp->PushName) {
a1535 1
        procp = (void **) &disp->PushName;
d1539 2
a1541 1
    if(!disp->DrawBuffer) {
a1542 1
        procp = (void **) &disp->DrawBuffer;
d1546 2
a1548 1
    if(!disp->Clear) {
a1549 1
        procp = (void **) &disp->Clear;
d1553 2
a1555 1
    if(!disp->ClearAccum) {
a1556 1
        procp = (void **) &disp->ClearAccum;
d1560 2
a1562 1
    if(!disp->ClearIndex) {
a1563 1
        procp = (void **) &disp->ClearIndex;
d1567 2
a1569 1
    if(!disp->ClearColor) {
a1570 1
        procp = (void **) &disp->ClearColor;
d1574 2
a1576 1
    if(!disp->ClearStencil) {
a1577 1
        procp = (void **) &disp->ClearStencil;
d1581 2
a1583 1
    if(!disp->ClearDepth) {
a1584 1
        procp = (void **) &disp->ClearDepth;
d1588 2
a1590 1
    if(!disp->StencilMask) {
a1591 1
        procp = (void **) &disp->StencilMask;
d1595 2
a1597 1
    if(!disp->ColorMask) {
a1598 1
        procp = (void **) &disp->ColorMask;
d1602 2
a1604 1
    if(!disp->DepthMask) {
a1605 1
        procp = (void **) &disp->DepthMask;
d1609 2
a1611 1
    if(!disp->IndexMask) {
a1612 1
        procp = (void **) &disp->IndexMask;
d1616 2
a1618 1
    if(!disp->Accum) {
a1619 1
        procp = (void **) &disp->Accum;
d1623 2
a1625 1
    if(!disp->Disable) {
a1626 1
        procp = (void **) &disp->Disable;
d1630 2
a1632 1
    if(!disp->Enable) {
a1633 1
        procp = (void **) &disp->Enable;
d1637 2
a1639 1
    if(!disp->Finish) {
a1640 1
        procp = (void **) &disp->Finish;
d1644 2
a1646 1
    if(!disp->Flush) {
a1647 1
        procp = (void **) &disp->Flush;
d1651 2
a1653 1
    if(!disp->PopAttrib) {
a1654 1
        procp = (void **) &disp->PopAttrib;
d1658 2
a1660 1
    if(!disp->PushAttrib) {
a1661 1
        procp = (void **) &disp->PushAttrib;
d1665 2
a1667 1
    if(!disp->Map1d) {
a1668 1
        procp = (void **) &disp->Map1d;
d1672 2
a1674 1
    if(!disp->Map1f) {
a1675 1
        procp = (void **) &disp->Map1f;
d1679 2
a1681 1
    if(!disp->Map2d) {
a1682 1
        procp = (void **) &disp->Map2d;
d1686 2
a1688 1
    if(!disp->Map2f) {
a1689 1
        procp = (void **) &disp->Map2f;
d1693 2
a1695 1
    if(!disp->MapGrid1d) {
a1696 1
        procp = (void **) &disp->MapGrid1d;
d1700 2
a1702 1
    if(!disp->MapGrid1f) {
a1703 1
        procp = (void **) &disp->MapGrid1f;
d1707 2
a1709 1
    if(!disp->MapGrid2d) {
a1710 1
        procp = (void **) &disp->MapGrid2d;
d1714 2
a1716 1
    if(!disp->MapGrid2f) {
a1717 1
        procp = (void **) &disp->MapGrid2f;
d1721 2
a1723 1
    if(!disp->EvalCoord1d) {
a1724 1
        procp = (void **) &disp->EvalCoord1d;
d1728 2
a1730 1
    if(!disp->EvalCoord1dv) {
a1731 1
        procp = (void **) &disp->EvalCoord1dv;
d1735 2
a1737 1
    if(!disp->EvalCoord1f) {
a1738 1
        procp = (void **) &disp->EvalCoord1f;
d1742 2
a1744 1
    if(!disp->EvalCoord1fv) {
a1745 1
        procp = (void **) &disp->EvalCoord1fv;
d1749 2
a1751 1
    if(!disp->EvalCoord2d) {
a1752 1
        procp = (void **) &disp->EvalCoord2d;
d1756 2
a1758 1
    if(!disp->EvalCoord2dv) {
a1759 1
        procp = (void **) &disp->EvalCoord2dv;
d1763 2
a1765 1
    if(!disp->EvalCoord2f) {
a1766 1
        procp = (void **) &disp->EvalCoord2f;
d1770 2
a1772 1
    if(!disp->EvalCoord2fv) {
a1773 1
        procp = (void **) &disp->EvalCoord2fv;
d1777 2
a1779 1
    if(!disp->EvalMesh1) {
a1780 1
        procp = (void **) &disp->EvalMesh1;
d1784 2
a1786 1
    if(!disp->EvalPoint1) {
a1787 1
        procp = (void **) &disp->EvalPoint1;
d1791 2
a1793 1
    if(!disp->EvalMesh2) {
a1794 1
        procp = (void **) &disp->EvalMesh2;
d1798 2
a1800 1
    if(!disp->EvalPoint2) {
a1801 1
        procp = (void **) &disp->EvalPoint2;
d1805 2
a1807 1
    if(!disp->AlphaFunc) {
a1808 1
        procp = (void **) &disp->AlphaFunc;
d1812 2
a1814 1
    if(!disp->BlendFunc) {
a1815 1
        procp = (void **) &disp->BlendFunc;
d1819 2
a1821 1
    if(!disp->LogicOp) {
a1822 1
        procp = (void **) &disp->LogicOp;
d1826 2
a1828 1
    if(!disp->StencilFunc) {
a1829 1
        procp = (void **) &disp->StencilFunc;
d1833 2
a1835 1
    if(!disp->StencilOp) {
a1836 1
        procp = (void **) &disp->StencilOp;
d1840 2
a1842 1
    if(!disp->DepthFunc) {
a1843 1
        procp = (void **) &disp->DepthFunc;
d1847 2
a1849 1
    if(!disp->PixelZoom) {
a1850 1
        procp = (void **) &disp->PixelZoom;
d1854 2
a1856 1
    if(!disp->PixelTransferf) {
a1857 1
        procp = (void **) &disp->PixelTransferf;
d1861 2
a1863 1
    if(!disp->PixelTransferi) {
a1864 1
        procp = (void **) &disp->PixelTransferi;
d1868 2
a1870 1
    if(!disp->PixelStoref) {
a1871 1
        procp = (void **) &disp->PixelStoref;
d1875 2
a1877 1
    if(!disp->PixelStorei) {
a1878 1
        procp = (void **) &disp->PixelStorei;
d1882 2
a1884 1
    if(!disp->PixelMapfv) {
a1885 1
        procp = (void **) &disp->PixelMapfv;
d1889 2
a1891 1
    if(!disp->PixelMapuiv) {
a1892 1
        procp = (void **) &disp->PixelMapuiv;
d1896 2
a1898 1
    if(!disp->PixelMapusv) {
a1899 1
        procp = (void **) &disp->PixelMapusv;
d1903 2
a1905 1
    if(!disp->ReadBuffer) {
a1906 1
        procp = (void **) &disp->ReadBuffer;
d1910 2
a1912 1
    if(!disp->CopyPixels) {
a1913 1
        procp = (void **) &disp->CopyPixels;
d1917 2
a1919 1
    if(!disp->ReadPixels) {
a1920 1
        procp = (void **) &disp->ReadPixels;
d1924 2
a1926 1
    if(!disp->DrawPixels) {
a1927 1
        procp = (void **) &disp->DrawPixels;
d1931 2
a1933 1
    if(!disp->GetBooleanv) {
a1934 1
        procp = (void **) &disp->GetBooleanv;
d1938 2
a1940 1
    if(!disp->GetClipPlane) {
a1941 1
        procp = (void **) &disp->GetClipPlane;
d1945 2
a1947 1
    if(!disp->GetDoublev) {
a1948 1
        procp = (void **) &disp->GetDoublev;
d1952 2
a1954 1
    if(!disp->GetError) {
a1955 1
        procp = (void **) &disp->GetError;
d1959 2
a1961 1
    if(!disp->GetFloatv) {
a1962 1
        procp = (void **) &disp->GetFloatv;
d1966 2
a1968 1
    if(!disp->GetIntegerv) {
a1969 1
        procp = (void **) &disp->GetIntegerv;
d1973 2
a1975 1
    if(!disp->GetLightfv) {
a1976 1
        procp = (void **) &disp->GetLightfv;
d1980 2
a1982 1
    if(!disp->GetLightiv) {
a1983 1
        procp = (void **) &disp->GetLightiv;
d1987 2
a1989 1
    if(!disp->GetMapdv) {
a1990 1
        procp = (void **) &disp->GetMapdv;
d1994 2
a1996 1
    if(!disp->GetMapfv) {
a1997 1
        procp = (void **) &disp->GetMapfv;
d2001 2
a2003 1
    if(!disp->GetMapiv) {
a2004 1
        procp = (void **) &disp->GetMapiv;
d2008 2
a2010 1
    if(!disp->GetMaterialfv) {
a2011 1
        procp = (void **) &disp->GetMaterialfv;
d2015 2
a2017 1
    if(!disp->GetMaterialiv) {
a2018 1
        procp = (void **) &disp->GetMaterialiv;
d2022 2
a2024 1
    if(!disp->GetPixelMapfv) {
a2025 1
        procp = (void **) &disp->GetPixelMapfv;
d2029 2
a2031 1
    if(!disp->GetPixelMapuiv) {
a2032 1
        procp = (void **) &disp->GetPixelMapuiv;
d2036 2
a2038 1
    if(!disp->GetPixelMapusv) {
a2039 1
        procp = (void **) &disp->GetPixelMapusv;
d2043 2
d2046 2
a2047 3
    if(!disp->GetPolygonStipple) {
        snprintf(symboln, sizeof(symboln), "%sGetPolygonStipple", symbol_prefix);
        procp = (void **) &disp->GetPolygonStipple;
d2051 2
a2053 1
    if(!disp->GetString) {
a2054 1
        procp = (void **) &disp->GetString;
d2058 2
a2060 1
    if(!disp->GetTexEnvfv) {
a2061 1
        procp = (void **) &disp->GetTexEnvfv;
d2065 2
a2067 1
    if(!disp->GetTexEnviv) {
a2068 1
        procp = (void **) &disp->GetTexEnviv;
d2072 2
a2074 1
    if(!disp->GetTexGendv) {
a2075 1
        procp = (void **) &disp->GetTexGendv;
d2079 2
a2081 1
    if(!disp->GetTexGenfv) {
a2082 1
        procp = (void **) &disp->GetTexGenfv;
d2086 2
a2088 1
    if(!disp->GetTexGeniv) {
a2089 1
        procp = (void **) &disp->GetTexGeniv;
d2093 2
a2095 1
    if(!disp->GetTexImage) {
a2096 1
        procp = (void **) &disp->GetTexImage;
d2100 2
d2103 2
a2104 3
    if(!disp->GetTexParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sGetTexParameterfv", symbol_prefix);
        procp = (void **) &disp->GetTexParameterfv;
d2108 2
d2111 2
a2112 3
    if(!disp->GetTexParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sGetTexParameteriv", symbol_prefix);
        procp = (void **) &disp->GetTexParameteriv;
d2116 2
d2119 2
a2120 3
    if(!disp->GetTexLevelParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sGetTexLevelParameterfv", symbol_prefix);
        procp = (void **) &disp->GetTexLevelParameterfv;
d2124 2
d2127 2
a2128 3
    if(!disp->GetTexLevelParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sGetTexLevelParameteriv", symbol_prefix);
        procp = (void **) &disp->GetTexLevelParameteriv;
d2132 2
a2134 1
    if(!disp->IsEnabled) {
a2135 1
        procp = (void **) &disp->IsEnabled;
d2139 2
a2141 1
    if(!disp->IsList) {
a2142 1
        procp = (void **) &disp->IsList;
d2146 2
a2148 1
    if(!disp->DepthRange) {
a2149 1
        procp = (void **) &disp->DepthRange;
d2153 2
a2155 1
    if(!disp->Frustum) {
a2156 1
        procp = (void **) &disp->Frustum;
d2160 2
a2162 1
    if(!disp->LoadIdentity) {
a2163 1
        procp = (void **) &disp->LoadIdentity;
d2167 2
a2169 1
    if(!disp->LoadMatrixf) {
a2170 1
        procp = (void **) &disp->LoadMatrixf;
d2174 2
a2176 1
    if(!disp->LoadMatrixd) {
a2177 1
        procp = (void **) &disp->LoadMatrixd;
d2181 2
a2183 1
    if(!disp->MatrixMode) {
a2184 1
        procp = (void **) &disp->MatrixMode;
d2188 2
a2190 1
    if(!disp->MultMatrixf) {
a2191 1
        procp = (void **) &disp->MultMatrixf;
d2195 2
a2197 1
    if(!disp->MultMatrixd) {
a2198 1
        procp = (void **) &disp->MultMatrixd;
d2202 2
a2204 1
    if(!disp->Ortho) {
a2205 1
        procp = (void **) &disp->Ortho;
d2209 2
a2211 1
    if(!disp->PopMatrix) {
a2212 1
        procp = (void **) &disp->PopMatrix;
d2216 2
a2218 1
    if(!disp->PushMatrix) {
a2219 1
        procp = (void **) &disp->PushMatrix;
d2223 2
a2225 1
    if(!disp->Rotated) {
a2226 1
        procp = (void **) &disp->Rotated;
d2230 2
a2232 1
    if(!disp->Rotatef) {
a2233 1
        procp = (void **) &disp->Rotatef;
d2237 2
a2239 1
    if(!disp->Scaled) {
a2240 1
        procp = (void **) &disp->Scaled;
d2244 2
a2246 1
    if(!disp->Scalef) {
a2247 1
        procp = (void **) &disp->Scalef;
d2251 2
a2253 1
    if(!disp->Translated) {
a2254 1
        procp = (void **) &disp->Translated;
d2258 2
a2260 1
    if(!disp->Translatef) {
a2261 1
        procp = (void **) &disp->Translatef;
d2265 2
a2267 1
    if(!disp->Viewport) {
a2268 1
        procp = (void **) &disp->Viewport;
d2272 2
a2274 1
    if(!disp->ArrayElement) {
a2275 1
        procp = (void **) &disp->ArrayElement;
d2279 2
a2281 1
    if(!disp->ArrayElement) {
a2282 1
        procp = (void **) &disp->ArrayElement;
d2286 2
a2288 1
    if(!disp->BindTexture) {
a2289 1
        procp = (void **) &disp->BindTexture;
d2293 2
a2295 1
    if(!disp->BindTexture) {
a2296 1
        procp = (void **) &disp->BindTexture;
d2300 2
a2302 1
    if(!disp->ColorPointer) {
a2303 1
        procp = (void **) &disp->ColorPointer;
d2307 2
d2310 2
a2311 3
    if(!disp->DisableClientState) {
        snprintf(symboln, sizeof(symboln), "%sDisableClientState", symbol_prefix);
        procp = (void **) &disp->DisableClientState;
d2315 2
a2317 1
    if(!disp->DrawArrays) {
a2318 1
        procp = (void **) &disp->DrawArrays;
d2322 2
a2324 1
    if(!disp->DrawArrays) {
a2325 1
        procp = (void **) &disp->DrawArrays;
d2329 2
a2331 1
    if(!disp->DrawElements) {
a2332 1
        procp = (void **) &disp->DrawElements;
d2336 2
a2338 1
    if(!disp->EdgeFlagPointer) {
a2339 1
        procp = (void **) &disp->EdgeFlagPointer;
d2343 2
d2346 2
a2347 3
    if(!disp->EnableClientState) {
        snprintf(symboln, sizeof(symboln), "%sEnableClientState", symbol_prefix);
        procp = (void **) &disp->EnableClientState;
d2351 2
a2353 1
    if(!disp->IndexPointer) {
a2354 1
        procp = (void **) &disp->IndexPointer;
d2358 2
a2360 1
    if(!disp->Indexub) {
a2361 1
        procp = (void **) &disp->Indexub;
d2365 2
a2367 1
    if(!disp->Indexubv) {
a2368 1
        procp = (void **) &disp->Indexubv;
d2372 2
d2375 2
a2376 3
    if(!disp->InterleavedArrays) {
        snprintf(symboln, sizeof(symboln), "%sInterleavedArrays", symbol_prefix);
        procp = (void **) &disp->InterleavedArrays;
d2380 2
a2382 1
    if(!disp->NormalPointer) {
a2383 1
        procp = (void **) &disp->NormalPointer;
d2387 2
a2389 1
    if(!disp->PolygonOffset) {
a2390 1
        procp = (void **) &disp->PolygonOffset;
d2394 2
a2396 1
    if(!disp->TexCoordPointer) {
a2397 1
        procp = (void **) &disp->TexCoordPointer;
d2401 2
a2403 1
    if(!disp->VertexPointer) {
a2404 1
        procp = (void **) &disp->VertexPointer;
d2408 2
d2411 2
a2412 3
    if(!disp->AreTexturesResident) {
        snprintf(symboln, sizeof(symboln), "%sAreTexturesResident", symbol_prefix);
        procp = (void **) &disp->AreTexturesResident;
d2416 2
d2419 2
a2420 3
    if(!disp->AreTexturesResident) {
        snprintf(symboln, sizeof(symboln), "%sAreTexturesResidentEXT", symbol_prefix);
        procp = (void **) &disp->AreTexturesResident;
d2424 2
a2426 1
    if(!disp->CopyTexImage1D) {
a2427 1
        procp = (void **) &disp->CopyTexImage1D;
d2431 2
d2434 2
a2435 3
    if(!disp->CopyTexImage1D) {
        snprintf(symboln, sizeof(symboln), "%sCopyTexImage1DEXT", symbol_prefix);
        procp = (void **) &disp->CopyTexImage1D;
d2439 2
a2441 1
    if(!disp->CopyTexImage2D) {
a2442 1
        procp = (void **) &disp->CopyTexImage2D;
d2446 2
d2449 2
a2450 3
    if(!disp->CopyTexImage2D) {
        snprintf(symboln, sizeof(symboln), "%sCopyTexImage2DEXT", symbol_prefix);
        procp = (void **) &disp->CopyTexImage2D;
d2454 2
d2457 2
a2458 3
    if(!disp->CopyTexSubImage1D) {
        snprintf(symboln, sizeof(symboln), "%sCopyTexSubImage1D", symbol_prefix);
        procp = (void **) &disp->CopyTexSubImage1D;
d2462 2
d2465 2
a2466 3
    if(!disp->CopyTexSubImage1D) {
        snprintf(symboln, sizeof(symboln), "%sCopyTexSubImage1DEXT", symbol_prefix);
        procp = (void **) &disp->CopyTexSubImage1D;
d2470 2
d2473 2
a2474 3
    if(!disp->CopyTexSubImage2D) {
        snprintf(symboln, sizeof(symboln), "%sCopyTexSubImage2D", symbol_prefix);
        procp = (void **) &disp->CopyTexSubImage2D;
d2478 2
d2481 2
a2482 3
    if(!disp->CopyTexSubImage2D) {
        snprintf(symboln, sizeof(symboln), "%sCopyTexSubImage2DEXT", symbol_prefix);
        procp = (void **) &disp->CopyTexSubImage2D;
d2486 2
a2488 1
    if(!disp->DeleteTextures) {
a2489 1
        procp = (void **) &disp->DeleteTextures;
d2493 2
d2496 2
a2497 3
    if(!disp->DeleteTextures) {
        snprintf(symboln, sizeof(symboln), "%sDeleteTexturesEXT", symbol_prefix);
        procp = (void **) &disp->DeleteTextures;
d2501 2
a2503 1
    if(!disp->GenTextures) {
a2504 1
        procp = (void **) &disp->GenTextures;
d2508 2
a2510 1
    if(!disp->GenTextures) {
a2511 1
        procp = (void **) &disp->GenTextures;
d2515 2
a2517 1
    if(!disp->GetPointerv) {
a2518 1
        procp = (void **) &disp->GetPointerv;
d2522 2
a2524 1
    if(!disp->GetPointerv) {
a2525 1
        procp = (void **) &disp->GetPointerv;
d2529 2
a2531 1
    if(!disp->IsTexture) {
a2532 1
        procp = (void **) &disp->IsTexture;
d2536 2
a2538 1
    if(!disp->IsTexture) {
a2539 1
        procp = (void **) &disp->IsTexture;
d2543 2
d2546 2
a2547 3
    if(!disp->PrioritizeTextures) {
        snprintf(symboln, sizeof(symboln), "%sPrioritizeTextures", symbol_prefix);
        procp = (void **) &disp->PrioritizeTextures;
d2551 2
d2554 2
a2555 3
    if(!disp->PrioritizeTextures) {
        snprintf(symboln, sizeof(symboln), "%sPrioritizeTexturesEXT", symbol_prefix);
        procp = (void **) &disp->PrioritizeTextures;
d2559 2
a2561 1
    if(!disp->TexSubImage1D) {
a2562 1
        procp = (void **) &disp->TexSubImage1D;
d2566 2
a2568 1
    if(!disp->TexSubImage1D) {
a2569 1
        procp = (void **) &disp->TexSubImage1D;
d2573 2
a2575 1
    if(!disp->TexSubImage2D) {
a2576 1
        procp = (void **) &disp->TexSubImage2D;
d2580 2
a2582 1
    if(!disp->TexSubImage2D) {
a2583 1
        procp = (void **) &disp->TexSubImage2D;
d2587 2
a2589 1
    if(!disp->PopClientAttrib) {
a2590 1
        procp = (void **) &disp->PopClientAttrib;
d2594 2
a2596 1
    if(!disp->PushClientAttrib) {
a2597 1
        procp = (void **) &disp->PushClientAttrib;
d2601 2
a2603 1
    if(!disp->BlendColor) {
a2604 1
        procp = (void **) &disp->BlendColor;
d2608 2
a2610 1
    if(!disp->BlendColor) {
a2611 1
        procp = (void **) &disp->BlendColor;
d2615 2
a2617 1
    if(!disp->BlendEquation) {
a2618 1
        procp = (void **) &disp->BlendEquation;
d2622 2
a2624 1
    if(!disp->BlendEquation) {
a2625 1
        procp = (void **) &disp->BlendEquation;
d2629 2
d2632 2
a2633 3
    if(!disp->DrawRangeElements) {
        snprintf(symboln, sizeof(symboln), "%sDrawRangeElements", symbol_prefix);
        procp = (void **) &disp->DrawRangeElements;
d2637 2
d2640 2
a2641 3
    if(!disp->DrawRangeElements) {
        snprintf(symboln, sizeof(symboln), "%sDrawRangeElementsEXT", symbol_prefix);
        procp = (void **) &disp->DrawRangeElements;
d2645 2
a2647 1
    if(!disp->ColorTable) {
a2648 1
        procp = (void **) &disp->ColorTable;
d2652 2
a2654 1
    if(!disp->ColorTable) {
a2655 1
        procp = (void **) &disp->ColorTable;
d2659 2
a2661 1
    if(!disp->ColorTable) {
a2662 1
        procp = (void **) &disp->ColorTable;
d2666 2
d2669 2
a2670 3
    if(!disp->ColorTableParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sColorTableParameterfv", symbol_prefix);
        procp = (void **) &disp->ColorTableParameterfv;
d2674 2
d2677 2
a2678 3
    if(!disp->ColorTableParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sColorTableParameterfvSGI", symbol_prefix);
        procp = (void **) &disp->ColorTableParameterfv;
d2682 2
d2685 2
a2686 3
    if(!disp->ColorTableParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sColorTableParameteriv", symbol_prefix);
        procp = (void **) &disp->ColorTableParameteriv;
d2690 2
d2693 2
a2694 3
    if(!disp->ColorTableParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sColorTableParameterivSGI", symbol_prefix);
        procp = (void **) &disp->ColorTableParameteriv;
d2698 2
a2700 1
    if(!disp->CopyColorTable) {
a2701 1
        procp = (void **) &disp->CopyColorTable;
d2705 2
d2708 2
a2709 3
    if(!disp->CopyColorTable) {
        snprintf(symboln, sizeof(symboln), "%sCopyColorTableSGI", symbol_prefix);
        procp = (void **) &disp->CopyColorTable;
d2713 2
a2715 1
    if(!disp->GetColorTable) {
a2716 1
        procp = (void **) &disp->GetColorTable;
d2720 2
a2722 1
    if(!disp->GetColorTable) {
a2723 1
        procp = (void **) &disp->GetColorTable;
d2727 2
a2729 1
    if(!disp->GetColorTable) {
a2730 1
        procp = (void **) &disp->GetColorTable;
d2734 2
d2737 2
a2738 3
    if(!disp->GetColorTableParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sGetColorTableParameterfv", symbol_prefix);
        procp = (void **) &disp->GetColorTableParameterfv;
d2742 2
d2745 2
a2746 3
    if(!disp->GetColorTableParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sGetColorTableParameterfvSGI", symbol_prefix);
        procp = (void **) &disp->GetColorTableParameterfv;
d2750 2
d2753 2
a2754 3
    if(!disp->GetColorTableParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sGetColorTableParameterfvEXT", symbol_prefix);
        procp = (void **) &disp->GetColorTableParameterfv;
d2758 2
d2761 2
a2762 3
    if(!disp->GetColorTableParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sGetColorTableParameteriv", symbol_prefix);
        procp = (void **) &disp->GetColorTableParameteriv;
d2766 2
d2769 2
a2770 3
    if(!disp->GetColorTableParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sGetColorTableParameterivSGI", symbol_prefix);
        procp = (void **) &disp->GetColorTableParameteriv;
d2774 2
d2777 2
a2778 3
    if(!disp->GetColorTableParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sGetColorTableParameterivEXT", symbol_prefix);
        procp = (void **) &disp->GetColorTableParameteriv;
d2782 2
a2784 1
    if(!disp->ColorSubTable) {
a2785 1
        procp = (void **) &disp->ColorSubTable;
d2789 2
a2791 1
    if(!disp->ColorSubTable) {
a2792 1
        procp = (void **) &disp->ColorSubTable;
d2796 2
d2799 2
a2800 3
    if(!disp->CopyColorSubTable) {
        snprintf(symboln, sizeof(symboln), "%sCopyColorSubTable", symbol_prefix);
        procp = (void **) &disp->CopyColorSubTable;
d2804 2
d2807 2
a2808 3
    if(!disp->CopyColorSubTable) {
        snprintf(symboln, sizeof(symboln), "%sCopyColorSubTableEXT", symbol_prefix);
        procp = (void **) &disp->CopyColorSubTable;
d2812 2
d2815 2
a2816 3
    if(!disp->ConvolutionFilter1D) {
        snprintf(symboln, sizeof(symboln), "%sConvolutionFilter1D", symbol_prefix);
        procp = (void **) &disp->ConvolutionFilter1D;
d2820 2
d2823 2
a2824 3
    if(!disp->ConvolutionFilter1D) {
        snprintf(symboln, sizeof(symboln), "%sConvolutionFilter1DEXT", symbol_prefix);
        procp = (void **) &disp->ConvolutionFilter1D;
d2828 2
d2831 2
a2832 3
    if(!disp->ConvolutionFilter2D) {
        snprintf(symboln, sizeof(symboln), "%sConvolutionFilter2D", symbol_prefix);
        procp = (void **) &disp->ConvolutionFilter2D;
d2836 2
d2839 2
a2840 3
    if(!disp->ConvolutionFilter2D) {
        snprintf(symboln, sizeof(symboln), "%sConvolutionFilter2DEXT", symbol_prefix);
        procp = (void **) &disp->ConvolutionFilter2D;
d2844 2
d2847 2
a2848 3
    if(!disp->ConvolutionParameterf) {
        snprintf(symboln, sizeof(symboln), "%sConvolutionParameterf", symbol_prefix);
        procp = (void **) &disp->ConvolutionParameterf;
d2852 2
d2855 2
a2856 3
    if(!disp->ConvolutionParameterf) {
        snprintf(symboln, sizeof(symboln), "%sConvolutionParameterfEXT", symbol_prefix);
        procp = (void **) &disp->ConvolutionParameterf;
d2860 2
d2863 2
a2864 3
    if(!disp->ConvolutionParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sConvolutionParameterfv", symbol_prefix);
        procp = (void **) &disp->ConvolutionParameterfv;
d2868 2
d2871 2
a2872 3
    if(!disp->ConvolutionParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sConvolutionParameterfvEXT", symbol_prefix);
        procp = (void **) &disp->ConvolutionParameterfv;
d2876 2
d2879 2
a2880 3
    if(!disp->ConvolutionParameteri) {
        snprintf(symboln, sizeof(symboln), "%sConvolutionParameteri", symbol_prefix);
        procp = (void **) &disp->ConvolutionParameteri;
d2884 2
d2887 2
a2888 3
    if(!disp->ConvolutionParameteri) {
        snprintf(symboln, sizeof(symboln), "%sConvolutionParameteriEXT", symbol_prefix);
        procp = (void **) &disp->ConvolutionParameteri;
d2892 2
d2895 2
a2896 3
    if(!disp->ConvolutionParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sConvolutionParameteriv", symbol_prefix);
        procp = (void **) &disp->ConvolutionParameteriv;
d2900 2
d2903 2
a2904 3
    if(!disp->ConvolutionParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sConvolutionParameterivEXT", symbol_prefix);
        procp = (void **) &disp->ConvolutionParameteriv;
d2908 2
d2911 2
a2912 3
    if(!disp->CopyConvolutionFilter1D) {
        snprintf(symboln, sizeof(symboln), "%sCopyConvolutionFilter1D", symbol_prefix);
        procp = (void **) &disp->CopyConvolutionFilter1D;
d2916 2
d2919 2
a2920 3
    if(!disp->CopyConvolutionFilter1D) {
        snprintf(symboln, sizeof(symboln), "%sCopyConvolutionFilter1DEXT", symbol_prefix);
        procp = (void **) &disp->CopyConvolutionFilter1D;
d2924 2
d2927 2
a2928 3
    if(!disp->CopyConvolutionFilter2D) {
        snprintf(symboln, sizeof(symboln), "%sCopyConvolutionFilter2D", symbol_prefix);
        procp = (void **) &disp->CopyConvolutionFilter2D;
d2932 2
d2935 2
a2936 3
    if(!disp->CopyConvolutionFilter2D) {
        snprintf(symboln, sizeof(symboln), "%sCopyConvolutionFilter2DEXT", symbol_prefix);
        procp = (void **) &disp->CopyConvolutionFilter2D;
d2940 2
d2943 2
a2944 3
    if(!disp->GetConvolutionFilter) {
        snprintf(symboln, sizeof(symboln), "%sGetConvolutionFilter", symbol_prefix);
        procp = (void **) &disp->GetConvolutionFilter;
d2948 2
d2951 2
a2952 3
    if(!disp->GetConvolutionFilter) {
        snprintf(symboln, sizeof(symboln), "%sGetConvolutionFilterEXT", symbol_prefix);
        procp = (void **) &disp->GetConvolutionFilter;
d2956 2
d2959 2
a2960 3
    if(!disp->GetConvolutionParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sGetConvolutionParameterfv", symbol_prefix);
        procp = (void **) &disp->GetConvolutionParameterfv;
d2964 2
d2967 2
a2968 3
    if(!disp->GetConvolutionParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sGetConvolutionParameterfvEXT", symbol_prefix);
        procp = (void **) &disp->GetConvolutionParameterfv;
d2972 2
d2975 2
a2976 3
    if(!disp->GetConvolutionParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sGetConvolutionParameteriv", symbol_prefix);
        procp = (void **) &disp->GetConvolutionParameteriv;
d2980 2
d2983 2
a2984 3
    if(!disp->GetConvolutionParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sGetConvolutionParameterivEXT", symbol_prefix);
        procp = (void **) &disp->GetConvolutionParameteriv;
d2988 2
d2991 2
a2992 3
    if(!disp->GetSeparableFilter) {
        snprintf(symboln, sizeof(symboln), "%sGetSeparableFilter", symbol_prefix);
        procp = (void **) &disp->GetSeparableFilter;
d2996 2
d2999 2
a3000 3
    if(!disp->GetSeparableFilter) {
        snprintf(symboln, sizeof(symboln), "%sGetSeparableFilterEXT", symbol_prefix);
        procp = (void **) &disp->GetSeparableFilter;
d3004 2
d3007 2
a3008 3
    if(!disp->SeparableFilter2D) {
        snprintf(symboln, sizeof(symboln), "%sSeparableFilter2D", symbol_prefix);
        procp = (void **) &disp->SeparableFilter2D;
d3012 2
d3015 2
a3016 3
    if(!disp->SeparableFilter2D) {
        snprintf(symboln, sizeof(symboln), "%sSeparableFilter2DEXT", symbol_prefix);
        procp = (void **) &disp->SeparableFilter2D;
d3020 2
a3022 1
    if(!disp->GetHistogram) {
a3023 1
        procp = (void **) &disp->GetHistogram;
d3027 2
a3029 1
    if(!disp->GetHistogram) {
a3030 1
        procp = (void **) &disp->GetHistogram;
d3034 2
d3037 2
a3038 3
    if(!disp->GetHistogramParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sGetHistogramParameterfv", symbol_prefix);
        procp = (void **) &disp->GetHistogramParameterfv;
d3042 2
d3045 2
a3046 3
    if(!disp->GetHistogramParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sGetHistogramParameterfvEXT", symbol_prefix);
        procp = (void **) &disp->GetHistogramParameterfv;
d3050 2
d3053 2
a3054 3
    if(!disp->GetHistogramParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sGetHistogramParameteriv", symbol_prefix);
        procp = (void **) &disp->GetHistogramParameteriv;
d3058 2
d3061 2
a3062 3
    if(!disp->GetHistogramParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sGetHistogramParameterivEXT", symbol_prefix);
        procp = (void **) &disp->GetHistogramParameteriv;
d3066 2
a3068 1
    if(!disp->GetMinmax) {
a3069 1
        procp = (void **) &disp->GetMinmax;
d3073 2
a3075 1
    if(!disp->GetMinmax) {
a3076 1
        procp = (void **) &disp->GetMinmax;
d3080 2
d3083 2
a3084 3
    if(!disp->GetMinmaxParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sGetMinmaxParameterfv", symbol_prefix);
        procp = (void **) &disp->GetMinmaxParameterfv;
d3088 2
d3091 2
a3092 3
    if(!disp->GetMinmaxParameterfv) {
        snprintf(symboln, sizeof(symboln), "%sGetMinmaxParameterfvEXT", symbol_prefix);
        procp = (void **) &disp->GetMinmaxParameterfv;
d3096 2
d3099 2
a3100 3
    if(!disp->GetMinmaxParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sGetMinmaxParameteriv", symbol_prefix);
        procp = (void **) &disp->GetMinmaxParameteriv;
d3104 2
d3107 2
a3108 3
    if(!disp->GetMinmaxParameteriv) {
        snprintf(symboln, sizeof(symboln), "%sGetMinmaxParameterivEXT", symbol_prefix);
        procp = (void **) &disp->GetMinmaxParameteriv;
d3112 2
a3114 1
    if(!disp->Histogram) {
a3115 1
        procp = (void **) &disp->Histogram;
d3119 2
a3121 1
    if(!disp->Histogram) {
a3122 1
        procp = (void **) &disp->Histogram;
d3126 2
a3128 1
    if(!disp->Minmax) {
a3129 1
        procp = (void **) &disp->Minmax;
d3133 2
a3135 1
    if(!disp->Minmax) {
a3136 1
        procp = (void **) &disp->Minmax;
d3140 2
a3142 1
    if(!disp->ResetHistogram) {
a3143 1
        procp = (void **) &disp->ResetHistogram;
d3147 2
d3150 2
a3151 3
    if(!disp->ResetHistogram) {
        snprintf(symboln, sizeof(symboln), "%sResetHistogramEXT", symbol_prefix);
        procp = (void **) &disp->ResetHistogram;
d3155 2
a3157 1
    if(!disp->ResetMinmax) {
a3158 1
        procp = (void **) &disp->ResetMinmax;
d3162 2
a3164 1
    if(!disp->ResetMinmax) {
a3165 1
        procp = (void **) &disp->ResetMinmax;
d3169 2
a3171 1
    if(!disp->TexImage3D) {
a3172 1
        procp = (void **) &disp->TexImage3D;
d3176 2
a3178 1
    if(!disp->TexImage3D) {
a3179 1
        procp = (void **) &disp->TexImage3D;
d3183 2
a3185 1
    if(!disp->TexSubImage3D) {
a3186 1
        procp = (void **) &disp->TexSubImage3D;
d3190 2
a3192 1
    if(!disp->TexSubImage3D) {
a3193 1
        procp = (void **) &disp->TexSubImage3D;
d3197 2
d3200 2
a3201 3
    if(!disp->CopyTexSubImage3D) {
        snprintf(symboln, sizeof(symboln), "%sCopyTexSubImage3D", symbol_prefix);
        procp = (void **) &disp->CopyTexSubImage3D;
d3205 2
d3208 2
a3209 3
    if(!disp->CopyTexSubImage3D) {
        snprintf(symboln, sizeof(symboln), "%sCopyTexSubImage3DEXT", symbol_prefix);
        procp = (void **) &disp->CopyTexSubImage3D;
d3213 2
a3215 1
    if(!disp->ActiveTextureARB) {
a3216 1
        procp = (void **) &disp->ActiveTextureARB;
d3220 2
a3222 1
    if(!disp->ActiveTextureARB) {
a3223 1
        procp = (void **) &disp->ActiveTextureARB;
d3227 2
d3230 2
a3231 3
    if(!disp->ClientActiveTextureARB) {
        snprintf(symboln, sizeof(symboln), "%sClientActiveTexture", symbol_prefix);
        procp = (void **) &disp->ClientActiveTextureARB;
d3235 2
d3238 2
a3239 3
    if(!disp->ClientActiveTextureARB) {
        snprintf(symboln, sizeof(symboln), "%sClientActiveTextureARB", symbol_prefix);
        procp = (void **) &disp->ClientActiveTextureARB;
d3243 2
a3245 1
    if(!disp->MultiTexCoord1dARB) {
a3246 1
        procp = (void **) &disp->MultiTexCoord1dARB;
d3250 2
d3253 2
a3254 3
    if(!disp->MultiTexCoord1dARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1dARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord1dARB;
d3258 2
a3260 1
    if(!disp->MultiTexCoord1dvARB) {
a3261 1
        procp = (void **) &disp->MultiTexCoord1dvARB;
d3265 2
d3268 2
a3269 3
    if(!disp->MultiTexCoord1dvARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1dvARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord1dvARB;
d3273 2
a3275 1
    if(!disp->MultiTexCoord1fARB) {
a3276 1
        procp = (void **) &disp->MultiTexCoord1fARB;
d3280 2
d3283 2
a3284 3
    if(!disp->MultiTexCoord1fARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1fARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord1fARB;
d3288 2
a3290 1
    if(!disp->MultiTexCoord1fvARB) {
a3291 1
        procp = (void **) &disp->MultiTexCoord1fvARB;
d3295 2
d3298 2
a3299 3
    if(!disp->MultiTexCoord1fvARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1fvARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord1fvARB;
d3303 2
a3305 1
    if(!disp->MultiTexCoord1iARB) {
a3306 1
        procp = (void **) &disp->MultiTexCoord1iARB;
d3310 2
d3313 2
a3314 3
    if(!disp->MultiTexCoord1iARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1iARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord1iARB;
d3318 2
a3320 1
    if(!disp->MultiTexCoord1ivARB) {
a3321 1
        procp = (void **) &disp->MultiTexCoord1ivARB;
d3325 2
d3328 2
a3329 3
    if(!disp->MultiTexCoord1ivARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1ivARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord1ivARB;
d3333 2
a3335 1
    if(!disp->MultiTexCoord1sARB) {
a3336 1
        procp = (void **) &disp->MultiTexCoord1sARB;
d3340 2
d3343 2
a3344 3
    if(!disp->MultiTexCoord1sARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1sARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord1sARB;
d3348 2
a3350 1
    if(!disp->MultiTexCoord1svARB) {
a3351 1
        procp = (void **) &disp->MultiTexCoord1svARB;
d3355 2
d3358 2
a3359 3
    if(!disp->MultiTexCoord1svARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord1svARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord1svARB;
d3363 2
a3365 1
    if(!disp->MultiTexCoord2dARB) {
a3366 1
        procp = (void **) &disp->MultiTexCoord2dARB;
d3370 2
d3373 2
a3374 3
    if(!disp->MultiTexCoord2dARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2dARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord2dARB;
d3378 2
a3380 1
    if(!disp->MultiTexCoord2dvARB) {
a3381 1
        procp = (void **) &disp->MultiTexCoord2dvARB;
d3385 2
d3388 2
a3389 3
    if(!disp->MultiTexCoord2dvARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2dvARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord2dvARB;
d3393 2
a3395 1
    if(!disp->MultiTexCoord2fARB) {
a3396 1
        procp = (void **) &disp->MultiTexCoord2fARB;
d3400 2
d3403 2
a3404 3
    if(!disp->MultiTexCoord2fARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2fARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord2fARB;
d3408 2
a3410 1
    if(!disp->MultiTexCoord2fvARB) {
a3411 1
        procp = (void **) &disp->MultiTexCoord2fvARB;
d3415 2
d3418 2
a3419 3
    if(!disp->MultiTexCoord2fvARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2fvARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord2fvARB;
d3423 2
a3425 1
    if(!disp->MultiTexCoord2iARB) {
a3426 1
        procp = (void **) &disp->MultiTexCoord2iARB;
d3430 2
d3433 2
a3434 3
    if(!disp->MultiTexCoord2iARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2iARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord2iARB;
d3438 2
a3440 1
    if(!disp->MultiTexCoord2ivARB) {
a3441 1
        procp = (void **) &disp->MultiTexCoord2ivARB;
d3445 2
d3448 2
a3449 3
    if(!disp->MultiTexCoord2ivARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2ivARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord2ivARB;
d3453 2
a3455 1
    if(!disp->MultiTexCoord2sARB) {
a3456 1
        procp = (void **) &disp->MultiTexCoord2sARB;
d3460 2
d3463 2
a3464 3
    if(!disp->MultiTexCoord2sARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2sARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord2sARB;
d3468 2
a3470 1
    if(!disp->MultiTexCoord2svARB) {
a3471 1
        procp = (void **) &disp->MultiTexCoord2svARB;
d3475 2
d3478 2
a3479 3
    if(!disp->MultiTexCoord2svARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord2svARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord2svARB;
d3483 2
a3485 1
    if(!disp->MultiTexCoord3dARB) {
a3486 1
        procp = (void **) &disp->MultiTexCoord3dARB;
d3490 2
d3493 2
a3494 3
    if(!disp->MultiTexCoord3dARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3dARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord3dARB;
d3498 2
a3500 1
    if(!disp->MultiTexCoord3dvARB) {
a3501 1
        procp = (void **) &disp->MultiTexCoord3dvARB;
d3505 2
d3508 2
a3509 3
    if(!disp->MultiTexCoord3dvARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3dvARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord3dvARB;
d3513 2
a3515 1
    if(!disp->MultiTexCoord3fARB) {
a3516 1
        procp = (void **) &disp->MultiTexCoord3fARB;
d3520 2
d3523 2
a3524 3
    if(!disp->MultiTexCoord3fARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3fARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord3fARB;
d3528 2
a3530 1
    if(!disp->MultiTexCoord3fvARB) {
a3531 1
        procp = (void **) &disp->MultiTexCoord3fvARB;
d3535 2
d3538 2
a3539 3
    if(!disp->MultiTexCoord3fvARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3fvARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord3fvARB;
d3543 2
a3545 1
    if(!disp->MultiTexCoord3iARB) {
a3546 1
        procp = (void **) &disp->MultiTexCoord3iARB;
d3550 2
d3553 2
a3554 3
    if(!disp->MultiTexCoord3iARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3iARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord3iARB;
d3558 2
a3560 1
    if(!disp->MultiTexCoord3ivARB) {
a3561 1
        procp = (void **) &disp->MultiTexCoord3ivARB;
d3565 2
d3568 2
a3569 3
    if(!disp->MultiTexCoord3ivARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3ivARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord3ivARB;
d3573 2
a3575 1
    if(!disp->MultiTexCoord3sARB) {
a3576 1
        procp = (void **) &disp->MultiTexCoord3sARB;
d3580 2
d3583 2
a3584 3
    if(!disp->MultiTexCoord3sARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3sARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord3sARB;
d3588 2
a3590 1
    if(!disp->MultiTexCoord3svARB) {
a3591 1
        procp = (void **) &disp->MultiTexCoord3svARB;
d3595 2
d3598 2
a3599 3
    if(!disp->MultiTexCoord3svARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord3svARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord3svARB;
d3603 2
a3605 1
    if(!disp->MultiTexCoord4dARB) {
a3606 1
        procp = (void **) &disp->MultiTexCoord4dARB;
d3610 2
d3613 2
a3614 3
    if(!disp->MultiTexCoord4dARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4dARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord4dARB;
d3618 2
a3620 1
    if(!disp->MultiTexCoord4dvARB) {
a3621 1
        procp = (void **) &disp->MultiTexCoord4dvARB;
d3625 2
d3628 2
a3629 3
    if(!disp->MultiTexCoord4dvARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4dvARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord4dvARB;
d3633 2
a3635 1
    if(!disp->MultiTexCoord4fARB) {
a3636 1
        procp = (void **) &disp->MultiTexCoord4fARB;
d3640 2
d3643 2
a3644 3
    if(!disp->MultiTexCoord4fARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4fARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord4fARB;
d3648 2
a3650 1
    if(!disp->MultiTexCoord4fvARB) {
a3651 1
        procp = (void **) &disp->MultiTexCoord4fvARB;
d3655 2
d3658 2
a3659 3
    if(!disp->MultiTexCoord4fvARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4fvARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord4fvARB;
d3663 2
a3665 1
    if(!disp->MultiTexCoord4iARB) {
a3666 1
        procp = (void **) &disp->MultiTexCoord4iARB;
d3670 2
d3673 2
a3674 3
    if(!disp->MultiTexCoord4iARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4iARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord4iARB;
d3678 2
a3680 1
    if(!disp->MultiTexCoord4ivARB) {
a3681 1
        procp = (void **) &disp->MultiTexCoord4ivARB;
d3685 2
d3688 2
a3689 3
    if(!disp->MultiTexCoord4ivARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4ivARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord4ivARB;
d3693 2
a3695 1
    if(!disp->MultiTexCoord4sARB) {
a3696 1
        procp = (void **) &disp->MultiTexCoord4sARB;
d3700 2
d3703 2
a3704 3
    if(!disp->MultiTexCoord4sARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4sARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord4sARB;
d3708 2
a3710 1
    if(!disp->MultiTexCoord4svARB) {
a3711 1
        procp = (void **) &disp->MultiTexCoord4svARB;
d3715 2
d3718 2
a3719 3
    if(!disp->MultiTexCoord4svARB) {
        snprintf(symboln, sizeof(symboln), "%sMultiTexCoord4svARB", symbol_prefix);
        procp = (void **) &disp->MultiTexCoord4svARB;
d3723 2
a3725 1
    if(!disp->AttachShader) {
a3726 1
        procp = (void **) &disp->AttachShader;
d3730 2
a3732 1
    if(!disp->CreateProgram) {
a3733 1
        procp = (void **) &disp->CreateProgram;
d3737 2
a3739 1
    if(!disp->CreateShader) {
a3740 1
        procp = (void **) &disp->CreateShader;
d3744 2
a3746 1
    if(!disp->DeleteProgram) {
a3747 1
        procp = (void **) &disp->DeleteProgram;
d3751 2
a3753 1
    if(!disp->DeleteShader) {
a3754 1
        procp = (void **) &disp->DeleteShader;
d3758 2
a3760 1
    if(!disp->DetachShader) {
a3761 1
        procp = (void **) &disp->DetachShader;
d3765 2
d3768 2
a3769 3
    if(!disp->GetAttachedShaders) {
        snprintf(symboln, sizeof(symboln), "%sGetAttachedShaders", symbol_prefix);
        procp = (void **) &disp->GetAttachedShaders;
d3773 2
d3776 2
a3777 3
    if(!disp->GetProgramInfoLog) {
        snprintf(symboln, sizeof(symboln), "%sGetProgramInfoLog", symbol_prefix);
        procp = (void **) &disp->GetProgramInfoLog;
d3781 2
a3783 1
    if(!disp->GetProgramiv) {
a3784 1
        procp = (void **) &disp->GetProgramiv;
d3788 2
a3790 1
    if(!disp->GetShaderInfoLog) {
a3791 1
        procp = (void **) &disp->GetShaderInfoLog;
d3795 2
a3797 1
    if(!disp->GetShaderiv) {
a3798 1
        procp = (void **) &disp->GetShaderiv;
d3802 2
a3804 1
    if(!disp->IsProgram) {
a3805 1
        procp = (void **) &disp->IsProgram;
d3809 2
a3811 1
    if(!disp->IsShader) {
a3812 1
        procp = (void **) &disp->IsShader;
d3816 89
d3906 1
a3906 3
    if(!disp->StencilFuncSeparate) {
        snprintf(symboln, sizeof(symboln), "%sStencilFuncSeparate", symbol_prefix);
        procp = (void **) &disp->StencilFuncSeparate;
d3910 2
d3913 1
a3913 3
    if(!disp->StencilMaskSeparate) {
        snprintf(symboln, sizeof(symboln), "%sStencilMaskSeparate", symbol_prefix);
        procp = (void **) &disp->StencilMaskSeparate;
d3917 2
d3920 1
a3920 3
    if(!disp->StencilOpSeparate) {
        snprintf(symboln, sizeof(symboln), "%sStencilOpSeparate", symbol_prefix);
        procp = (void **) &disp->StencilOpSeparate;
d3924 2
d3927 1
a3927 3
    if(!disp->StencilOpSeparate) {
        snprintf(symboln, sizeof(symboln), "%sStencilOpSeparateATI", symbol_prefix);
        procp = (void **) &disp->StencilOpSeparate;
d3931 2
d3934 1
a3934 3
    if(!disp->UniformMatrix2x3fv) {
        snprintf(symboln, sizeof(symboln), "%sUniformMatrix2x3fv", symbol_prefix);
        procp = (void **) &disp->UniformMatrix2x3fv;
d3938 2
d3941 1
a3941 3
    if(!disp->UniformMatrix2x4fv) {
        snprintf(symboln, sizeof(symboln), "%sUniformMatrix2x4fv", symbol_prefix);
        procp = (void **) &disp->UniformMatrix2x4fv;
d3945 2
d3948 2
a3949 3
    if(!disp->UniformMatrix3x2fv) {
        snprintf(symboln, sizeof(symboln), "%sUniformMatrix3x2fv", symbol_prefix);
        procp = (void **) &disp->UniformMatrix3x2fv;
d3953 2
d3956 2
a3957 3
    if(!disp->UniformMatrix3x4fv) {
        snprintf(symboln, sizeof(symboln), "%sUniformMatrix3x4fv", symbol_prefix);
        procp = (void **) &disp->UniformMatrix3x4fv;
d3961 2
d3964 1
a3964 3
    if(!disp->UniformMatrix4x2fv) {
        snprintf(symboln, sizeof(symboln), "%sUniformMatrix4x2fv", symbol_prefix);
        procp = (void **) &disp->UniformMatrix4x2fv;
d3968 2
d3971 2
a3972 3
    if(!disp->UniformMatrix4x3fv) {
        snprintf(symboln, sizeof(symboln), "%sUniformMatrix4x3fv", symbol_prefix);
        procp = (void **) &disp->UniformMatrix4x3fv;
d3976 2
d3979 2
a3980 3
    if(!disp->LoadTransposeMatrixdARB) {
        snprintf(symboln, sizeof(symboln), "%sLoadTransposeMatrixd", symbol_prefix);
        procp = (void **) &disp->LoadTransposeMatrixdARB;
d3984 2
d3987 2
a3988 3
    if(!disp->LoadTransposeMatrixdARB) {
        snprintf(symboln, sizeof(symboln), "%sLoadTransposeMatrixdARB", symbol_prefix);
        procp = (void **) &disp->LoadTransposeMatrixdARB;
d3992 2
d3995 2
a3996 3
    if(!disp->LoadTransposeMatrixfARB) {
        snprintf(symboln, sizeof(symboln), "%sLoadTransposeMatrixf", symbol_prefix);
        procp = (void **) &disp->LoadTransposeMatrixfARB;
d4000 2
d4003 2
a4004 3
    if(!disp->LoadTransposeMatrixfARB) {
        snprintf(symboln, sizeof(symboln), "%sLoadTransposeMatrixfARB", symbol_prefix);
        procp = (void **) &disp->LoadTransposeMatrixfARB;
d4008 2
d4011 2
a4012 3
    if(!disp->MultTransposeMatrixdARB) {
        snprintf(symboln, sizeof(symboln), "%sMultTransposeMatrixd", symbol_prefix);
        procp = (void **) &disp->MultTransposeMatrixdARB;
d4016 2
d4019 2
a4020 3
    if(!disp->MultTransposeMatrixdARB) {
        snprintf(symboln, sizeof(symboln), "%sMultTransposeMatrixdARB", symbol_prefix);
        procp = (void **) &disp->MultTransposeMatrixdARB;
d4024 2
d4027 2
a4028 3
    if(!disp->MultTransposeMatrixfARB) {
        snprintf(symboln, sizeof(symboln), "%sMultTransposeMatrixf", symbol_prefix);
        procp = (void **) &disp->MultTransposeMatrixfARB;
d4032 2
d4035 2
a4036 3
    if(!disp->MultTransposeMatrixfARB) {
        snprintf(symboln, sizeof(symboln), "%sMultTransposeMatrixfARB", symbol_prefix);
        procp = (void **) &disp->MultTransposeMatrixfARB;
d4040 2
a4042 1
    if(!disp->SampleCoverageARB) {
a4043 1
        procp = (void **) &disp->SampleCoverageARB;
d4047 2
d4050 2
a4051 3
    if(!disp->SampleCoverageARB) {
        snprintf(symboln, sizeof(symboln), "%sSampleCoverageARB", symbol_prefix);
        procp = (void **) &disp->SampleCoverageARB;
d4055 2
d4058 2
a4059 3
    if(!disp->CompressedTexImage1DARB) {
        snprintf(symboln, sizeof(symboln), "%sCompressedTexImage1D", symbol_prefix);
        procp = (void **) &disp->CompressedTexImage1DARB;
d4063 2
d4066 2
a4067 3
    if(!disp->CompressedTexImage1DARB) {
        snprintf(symboln, sizeof(symboln), "%sCompressedTexImage1DARB", symbol_prefix);
        procp = (void **) &disp->CompressedTexImage1DARB;
d4071 2
d4074 2
a4075 3
    if(!disp->CompressedTexImage2DARB) {
        snprintf(symboln, sizeof(symboln), "%sCompressedTexImage2D", symbol_prefix);
        procp = (void **) &disp->CompressedTexImage2DARB;
d4079 2
d4082 2
a4083 3
    if(!disp->CompressedTexImage2DARB) {
        snprintf(symboln, sizeof(symboln), "%sCompressedTexImage2DARB", symbol_prefix);
        procp = (void **) &disp->CompressedTexImage2DARB;
d4087 2
d4090 2
a4091 3
    if(!disp->CompressedTexImage3DARB) {
        snprintf(symboln, sizeof(symboln), "%sCompressedTexImage3D", symbol_prefix);
        procp = (void **) &disp->CompressedTexImage3DARB;
d4095 2
d4098 2
a4099 3
    if(!disp->CompressedTexImage3DARB) {
        snprintf(symboln, sizeof(symboln), "%sCompressedTexImage3DARB", symbol_prefix);
        procp = (void **) &disp->CompressedTexImage3DARB;
d4103 2
d4106 2
a4107 3
    if(!disp->CompressedTexSubImage1DARB) {
        snprintf(symboln, sizeof(symboln), "%sCompressedTexSubImage1D", symbol_prefix);
        procp = (void **) &disp->CompressedTexSubImage1DARB;
d4111 2
d4114 2
a4115 3
    if(!disp->CompressedTexSubImage1DARB) {
        snprintf(symboln, sizeof(symboln), "%sCompressedTexSubImage1DARB", symbol_prefix);
        procp = (void **) &disp->CompressedTexSubImage1DARB;
d4119 2
d4122 2
a4123 3
    if(!disp->CompressedTexSubImage2DARB) {
        snprintf(symboln, sizeof(symboln), "%sCompressedTexSubImage2D", symbol_prefix);
        procp = (void **) &disp->CompressedTexSubImage2DARB;
d4127 2
d4130 2
a4131 3
    if(!disp->CompressedTexSubImage2DARB) {
        snprintf(symboln, sizeof(symboln), "%sCompressedTexSubImage2DARB", symbol_prefix);
        procp = (void **) &disp->CompressedTexSubImage2DARB;
d4135 2
d4138 2
a4139 3
    if(!disp->CompressedTexSubImage3DARB) {
        snprintf(symboln, sizeof(symboln), "%sCompressedTexSubImage3D", symbol_prefix);
        procp = (void **) &disp->CompressedTexSubImage3DARB;
d4143 2
d4146 2
a4147 3
    if(!disp->CompressedTexSubImage3DARB) {
        snprintf(symboln, sizeof(symboln), "%sCompressedTexSubImage3DARB", symbol_prefix);
        procp = (void **) &disp->CompressedTexSubImage3DARB;
d4151 2
d4154 2
a4155 3
    if(!disp->GetCompressedTexImageARB) {
        snprintf(symboln, sizeof(symboln), "%sGetCompressedTexImage", symbol_prefix);
        procp = (void **) &disp->GetCompressedTexImageARB;
d4159 2
d4162 2
a4163 3
    if(!disp->GetCompressedTexImageARB) {
        snprintf(symboln, sizeof(symboln), "%sGetCompressedTexImageARB", symbol_prefix);
        procp = (void **) &disp->GetCompressedTexImageARB;
d4167 2
d4170 2
a4171 3
    if(!disp->DisableVertexAttribArrayARB) {
        snprintf(symboln, sizeof(symboln), "%sDisableVertexAttribArray", symbol_prefix);
        procp = (void **) &disp->DisableVertexAttribArrayARB;
d4175 2
d4178 2
a4179 3
    if(!disp->DisableVertexAttribArrayARB) {
        snprintf(symboln, sizeof(symboln), "%sDisableVertexAttribArrayARB", symbol_prefix);
        procp = (void **) &disp->DisableVertexAttribArrayARB;
d4183 2
d4186 2
a4187 3
    if(!disp->EnableVertexAttribArrayARB) {
        snprintf(symboln, sizeof(symboln), "%sEnableVertexAttribArray", symbol_prefix);
        procp = (void **) &disp->EnableVertexAttribArrayARB;
d4191 2
d4194 2
a4195 3
    if(!disp->EnableVertexAttribArrayARB) {
        snprintf(symboln, sizeof(symboln), "%sEnableVertexAttribArrayARB", symbol_prefix);
        procp = (void **) &disp->EnableVertexAttribArrayARB;
d4199 2
d4202 2
a4203 3
    if(!disp->GetProgramEnvParameterdvARB) {
        snprintf(symboln, sizeof(symboln), "%sGetProgramEnvParameterdvARB", symbol_prefix);
        procp = (void **) &disp->GetProgramEnvParameterdvARB;
d4207 2
d4210 2
a4211 3
    if(!disp->GetProgramEnvParameterfvARB) {
        snprintf(symboln, sizeof(symboln), "%sGetProgramEnvParameterfvARB", symbol_prefix);
        procp = (void **) &disp->GetProgramEnvParameterfvARB;
d4215 2
d4218 2
a4219 3
    if(!disp->GetProgramLocalParameterdvARB) {
        snprintf(symboln, sizeof(symboln), "%sGetProgramLocalParameterdvARB", symbol_prefix);
        procp = (void **) &disp->GetProgramLocalParameterdvARB;
d4223 2
d4226 2
a4227 3
    if(!disp->GetProgramLocalParameterfvARB) {
        snprintf(symboln, sizeof(symboln), "%sGetProgramLocalParameterfvARB", symbol_prefix);
        procp = (void **) &disp->GetProgramLocalParameterfvARB;
d4231 2
d4234 2
a4235 3
    if(!disp->GetProgramStringARB) {
        snprintf(symboln, sizeof(symboln), "%sGetProgramStringARB", symbol_prefix);
        procp = (void **) &disp->GetProgramStringARB;
d4239 2
a4241 1
    if(!disp->GetProgramivARB) {
a4242 1
        procp = (void **) &disp->GetProgramivARB;
d4246 2
d4249 2
a4250 3
    if(!disp->GetVertexAttribdvARB) {
        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribdv", symbol_prefix);
        procp = (void **) &disp->GetVertexAttribdvARB;
d4254 2
d4257 2
a4258 3
    if(!disp->GetVertexAttribdvARB) {
        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribdvARB", symbol_prefix);
        procp = (void **) &disp->GetVertexAttribdvARB;
d4262 2
d4265 2
a4266 3
    if(!disp->GetVertexAttribfvARB) {
        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribfv", symbol_prefix);
        procp = (void **) &disp->GetVertexAttribfvARB;
d4270 2
d4273 2
a4274 3
    if(!disp->GetVertexAttribfvARB) {
        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribfvARB", symbol_prefix);
        procp = (void **) &disp->GetVertexAttribfvARB;
d4278 2
d4281 2
a4282 3
    if(!disp->GetVertexAttribivARB) {
        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribiv", symbol_prefix);
        procp = (void **) &disp->GetVertexAttribivARB;
d4286 2
d4289 2
a4290 3
    if(!disp->GetVertexAttribivARB) {
        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribivARB", symbol_prefix);
        procp = (void **) &disp->GetVertexAttribivARB;
d4294 2
d4297 2
a4298 3
    if(!disp->ProgramEnvParameter4dARB) {
        snprintf(symboln, sizeof(symboln), "%sProgramEnvParameter4dARB", symbol_prefix);
        procp = (void **) &disp->ProgramEnvParameter4dARB;
d4302 2
d4305 2
a4306 3
    if(!disp->ProgramEnvParameter4dARB) {
        snprintf(symboln, sizeof(symboln), "%sProgramParameter4dNV", symbol_prefix);
        procp = (void **) &disp->ProgramEnvParameter4dARB;
d4310 2
d4313 2
a4314 3
    if(!disp->ProgramEnvParameter4dvARB) {
        snprintf(symboln, sizeof(symboln), "%sProgramEnvParameter4dvARB", symbol_prefix);
        procp = (void **) &disp->ProgramEnvParameter4dvARB;
d4318 2
d4321 2
a4322 3
    if(!disp->ProgramEnvParameter4dvARB) {
        snprintf(symboln, sizeof(symboln), "%sProgramParameter4dvNV", symbol_prefix);
        procp = (void **) &disp->ProgramEnvParameter4dvARB;
d4326 2
d4329 2
a4330 3
    if(!disp->ProgramEnvParameter4fARB) {
        snprintf(symboln, sizeof(symboln), "%sProgramEnvParameter4fARB", symbol_prefix);
        procp = (void **) &disp->ProgramEnvParameter4fARB;
d4334 2
d4337 2
a4338 3
    if(!disp->ProgramEnvParameter4fARB) {
        snprintf(symboln, sizeof(symboln), "%sProgramParameter4fNV", symbol_prefix);
        procp = (void **) &disp->ProgramEnvParameter4fARB;
d4342 2
d4345 2
a4346 3
    if(!disp->ProgramEnvParameter4fvARB) {
        snprintf(symboln, sizeof(symboln), "%sProgramEnvParameter4fvARB", symbol_prefix);
        procp = (void **) &disp->ProgramEnvParameter4fvARB;
d4350 2
d4353 2
a4354 3
    if(!disp->ProgramEnvParameter4fvARB) {
        snprintf(symboln, sizeof(symboln), "%sProgramParameter4fvNV", symbol_prefix);
        procp = (void **) &disp->ProgramEnvParameter4fvARB;
d4358 2
d4361 2
a4362 3
    if(!disp->ProgramLocalParameter4dARB) {
        snprintf(symboln, sizeof(symboln), "%sProgramLocalParameter4dARB", symbol_prefix);
        procp = (void **) &disp->ProgramLocalParameter4dARB;
d4366 2
d4369 2
a4370 3
    if(!disp->ProgramLocalParameter4dvARB) {
        snprintf(symboln, sizeof(symboln), "%sProgramLocalParameter4dvARB", symbol_prefix);
        procp = (void **) &disp->ProgramLocalParameter4dvARB;
d4374 2
d4377 2
a4378 3
    if(!disp->ProgramLocalParameter4fARB) {
        snprintf(symboln, sizeof(symboln), "%sProgramLocalParameter4fARB", symbol_prefix);
        procp = (void **) &disp->ProgramLocalParameter4fARB;
d4382 2
d4385 2
a4386 3
    if(!disp->ProgramLocalParameter4fvARB) {
        snprintf(symboln, sizeof(symboln), "%sProgramLocalParameter4fvARB", symbol_prefix);
        procp = (void **) &disp->ProgramLocalParameter4fvARB;
d4390 2
a4392 1
    if(!disp->ProgramStringARB) {
a4393 1
        procp = (void **) &disp->ProgramStringARB;
d4397 2
a4399 1
    if(!disp->VertexAttrib1dARB) {
a4400 1
        procp = (void **) &disp->VertexAttrib1dARB;
d4404 2
d4407 2
a4408 3
    if(!disp->VertexAttrib1dARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1dARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib1dARB;
d4412 2
a4414 1
    if(!disp->VertexAttrib1dvARB) {
a4415 1
        procp = (void **) &disp->VertexAttrib1dvARB;
d4419 2
d4422 2
a4423 3
    if(!disp->VertexAttrib1dvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1dvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib1dvARB;
d4427 2
a4429 1
    if(!disp->VertexAttrib1fARB) {
a4430 1
        procp = (void **) &disp->VertexAttrib1fARB;
d4434 2
d4437 2
a4438 3
    if(!disp->VertexAttrib1fARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1fARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib1fARB;
d4442 2
a4444 1
    if(!disp->VertexAttrib1fvARB) {
a4445 1
        procp = (void **) &disp->VertexAttrib1fvARB;
d4449 2
d4452 2
a4453 3
    if(!disp->VertexAttrib1fvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1fvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib1fvARB;
d4457 2
a4459 1
    if(!disp->VertexAttrib1sARB) {
a4460 1
        procp = (void **) &disp->VertexAttrib1sARB;
d4464 2
d4467 2
a4468 3
    if(!disp->VertexAttrib1sARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1sARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib1sARB;
d4472 2
a4474 1
    if(!disp->VertexAttrib1svARB) {
a4475 1
        procp = (void **) &disp->VertexAttrib1svARB;
d4479 2
d4482 2
a4483 3
    if(!disp->VertexAttrib1svARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1svARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib1svARB;
d4487 2
a4489 1
    if(!disp->VertexAttrib2dARB) {
a4490 1
        procp = (void **) &disp->VertexAttrib2dARB;
d4494 2
d4497 2
a4498 3
    if(!disp->VertexAttrib2dARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2dARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib2dARB;
d4502 2
a4504 1
    if(!disp->VertexAttrib2dvARB) {
a4505 1
        procp = (void **) &disp->VertexAttrib2dvARB;
d4509 2
d4512 2
a4513 3
    if(!disp->VertexAttrib2dvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2dvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib2dvARB;
d4517 2
a4519 1
    if(!disp->VertexAttrib2fARB) {
a4520 1
        procp = (void **) &disp->VertexAttrib2fARB;
d4524 2
d4527 2
a4528 3
    if(!disp->VertexAttrib2fARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2fARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib2fARB;
d4532 2
a4534 1
    if(!disp->VertexAttrib2fvARB) {
a4535 1
        procp = (void **) &disp->VertexAttrib2fvARB;
d4539 2
d4542 2
a4543 3
    if(!disp->VertexAttrib2fvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2fvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib2fvARB;
d4547 2
a4549 1
    if(!disp->VertexAttrib2sARB) {
a4550 1
        procp = (void **) &disp->VertexAttrib2sARB;
d4554 2
d4557 2
a4558 3
    if(!disp->VertexAttrib2sARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2sARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib2sARB;
d4562 2
a4564 1
    if(!disp->VertexAttrib2svARB) {
a4565 1
        procp = (void **) &disp->VertexAttrib2svARB;
d4569 2
d4572 2
a4573 3
    if(!disp->VertexAttrib2svARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2svARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib2svARB;
d4577 2
a4579 1
    if(!disp->VertexAttrib3dARB) {
a4580 1
        procp = (void **) &disp->VertexAttrib3dARB;
d4584 2
d4587 2
a4588 3
    if(!disp->VertexAttrib3dARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3dARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib3dARB;
d4592 2
a4594 1
    if(!disp->VertexAttrib3dvARB) {
a4595 1
        procp = (void **) &disp->VertexAttrib3dvARB;
d4599 2
d4602 2
a4603 3
    if(!disp->VertexAttrib3dvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3dvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib3dvARB;
d4607 2
a4609 1
    if(!disp->VertexAttrib3fARB) {
a4610 1
        procp = (void **) &disp->VertexAttrib3fARB;
d4614 2
d4617 2
a4618 3
    if(!disp->VertexAttrib3fARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3fARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib3fARB;
d4622 2
a4624 1
    if(!disp->VertexAttrib3fvARB) {
a4625 1
        procp = (void **) &disp->VertexAttrib3fvARB;
d4629 2
d4632 2
a4633 3
    if(!disp->VertexAttrib3fvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3fvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib3fvARB;
d4637 2
a4639 1
    if(!disp->VertexAttrib3sARB) {
a4640 1
        procp = (void **) &disp->VertexAttrib3sARB;
d4644 2
d4647 2
a4648 3
    if(!disp->VertexAttrib3sARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3sARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib3sARB;
d4652 2
a4654 1
    if(!disp->VertexAttrib3svARB) {
a4655 1
        procp = (void **) &disp->VertexAttrib3svARB;
d4659 2
d4662 2
a4663 3
    if(!disp->VertexAttrib3svARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3svARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib3svARB;
d4667 2
a4669 1
    if(!disp->VertexAttrib4NbvARB) {
a4670 1
        procp = (void **) &disp->VertexAttrib4NbvARB;
d4674 2
d4677 2
a4678 3
    if(!disp->VertexAttrib4NbvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4NbvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4NbvARB;
d4682 2
a4684 1
    if(!disp->VertexAttrib4NivARB) {
a4685 1
        procp = (void **) &disp->VertexAttrib4NivARB;
d4689 2
d4692 2
a4693 3
    if(!disp->VertexAttrib4NivARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4NivARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4NivARB;
d4697 2
a4699 1
    if(!disp->VertexAttrib4NsvARB) {
a4700 1
        procp = (void **) &disp->VertexAttrib4NsvARB;
d4704 2
d4707 2
a4708 3
    if(!disp->VertexAttrib4NsvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4NsvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4NsvARB;
d4712 2
a4714 1
    if(!disp->VertexAttrib4NubARB) {
a4715 1
        procp = (void **) &disp->VertexAttrib4NubARB;
d4719 2
d4722 2
a4723 3
    if(!disp->VertexAttrib4NubARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4NubARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4NubARB;
d4727 2
d4730 2
a4731 3
    if(!disp->VertexAttrib4NubvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4Nubv", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4NubvARB;
d4735 2
d4738 2
a4739 3
    if(!disp->VertexAttrib4NubvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4NubvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4NubvARB;
d4743 2
d4746 2
a4747 3
    if(!disp->VertexAttrib4NuivARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4Nuiv", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4NuivARB;
d4751 2
d4754 2
a4755 3
    if(!disp->VertexAttrib4NuivARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4NuivARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4NuivARB;
d4759 2
d4762 2
a4763 3
    if(!disp->VertexAttrib4NusvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4Nusv", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4NusvARB;
d4767 2
d4770 2
a4771 3
    if(!disp->VertexAttrib4NusvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4NusvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4NusvARB;
d4775 2
a4777 1
    if(!disp->VertexAttrib4bvARB) {
a4778 1
        procp = (void **) &disp->VertexAttrib4bvARB;
d4782 2
d4785 2
a4786 3
    if(!disp->VertexAttrib4bvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4bvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4bvARB;
d4790 2
a4792 1
    if(!disp->VertexAttrib4dARB) {
a4793 1
        procp = (void **) &disp->VertexAttrib4dARB;
d4797 2
d4800 2
a4801 3
    if(!disp->VertexAttrib4dARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4dARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4dARB;
d4805 2
a4807 1
    if(!disp->VertexAttrib4dvARB) {
a4808 1
        procp = (void **) &disp->VertexAttrib4dvARB;
d4812 2
d4815 2
a4816 3
    if(!disp->VertexAttrib4dvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4dvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4dvARB;
d4820 2
a4822 1
    if(!disp->VertexAttrib4fARB) {
a4823 1
        procp = (void **) &disp->VertexAttrib4fARB;
d4827 2
d4830 2
a4831 3
    if(!disp->VertexAttrib4fARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4fARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4fARB;
d4835 2
a4837 1
    if(!disp->VertexAttrib4fvARB) {
a4838 1
        procp = (void **) &disp->VertexAttrib4fvARB;
d4842 2
d4845 2
a4846 3
    if(!disp->VertexAttrib4fvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4fvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4fvARB;
d4850 2
a4852 1
    if(!disp->VertexAttrib4ivARB) {
a4853 1
        procp = (void **) &disp->VertexAttrib4ivARB;
d4857 2
d4860 2
a4861 3
    if(!disp->VertexAttrib4ivARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4ivARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4ivARB;
d4865 2
a4867 1
    if(!disp->VertexAttrib4sARB) {
a4868 1
        procp = (void **) &disp->VertexAttrib4sARB;
d4872 2
d4875 2
a4876 3
    if(!disp->VertexAttrib4sARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4sARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4sARB;
d4880 2
a4882 1
    if(!disp->VertexAttrib4svARB) {
a4883 1
        procp = (void **) &disp->VertexAttrib4svARB;
d4887 2
d4890 2
a4891 3
    if(!disp->VertexAttrib4svARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4svARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4svARB;
d4895 2
a4897 1
    if(!disp->VertexAttrib4ubvARB) {
a4898 1
        procp = (void **) &disp->VertexAttrib4ubvARB;
d4902 2
d4905 2
a4906 3
    if(!disp->VertexAttrib4ubvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4ubvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4ubvARB;
d4910 2
a4912 1
    if(!disp->VertexAttrib4uivARB) {
a4913 1
        procp = (void **) &disp->VertexAttrib4uivARB;
d4917 2
d4920 2
a4921 3
    if(!disp->VertexAttrib4uivARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4uivARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4uivARB;
d4925 2
a4927 1
    if(!disp->VertexAttrib4usvARB) {
a4928 1
        procp = (void **) &disp->VertexAttrib4usvARB;
d4932 2
d4935 2
a4936 3
    if(!disp->VertexAttrib4usvARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4usvARB", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4usvARB;
d4940 2
d4943 2
a4944 3
    if(!disp->VertexAttribPointerARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribPointer", symbol_prefix);
        procp = (void **) &disp->VertexAttribPointerARB;
d4948 2
d4951 2
a4952 3
    if(!disp->VertexAttribPointerARB) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribPointerARB", symbol_prefix);
        procp = (void **) &disp->VertexAttribPointerARB;
d4956 2
a4958 1
    if(!disp->BindBufferARB) {
a4959 1
        procp = (void **) &disp->BindBufferARB;
d4963 2
a4965 1
    if(!disp->BindBufferARB) {
a4966 1
        procp = (void **) &disp->BindBufferARB;
d4970 2
a4972 1
    if(!disp->BufferDataARB) {
a4973 1
        procp = (void **) &disp->BufferDataARB;
d4977 2
a4979 1
    if(!disp->BufferDataARB) {
a4980 1
        procp = (void **) &disp->BufferDataARB;
d4984 2
a4986 1
    if(!disp->BufferSubDataARB) {
a4987 1
        procp = (void **) &disp->BufferSubDataARB;
d4991 2
a4993 1
    if(!disp->BufferSubDataARB) {
a4994 1
        procp = (void **) &disp->BufferSubDataARB;
d4998 2
a5000 1
    if(!disp->DeleteBuffersARB) {
a5001 1
        procp = (void **) &disp->DeleteBuffersARB;
d5005 2
a5007 1
    if(!disp->DeleteBuffersARB) {
a5008 1
        procp = (void **) &disp->DeleteBuffersARB;
d5012 2
a5014 1
    if(!disp->GenBuffersARB) {
a5015 1
        procp = (void **) &disp->GenBuffersARB;
d5019 2
a5021 1
    if(!disp->GenBuffersARB) {
a5022 1
        procp = (void **) &disp->GenBuffersARB;
d5026 2
d5029 2
a5030 3
    if(!disp->GetBufferParameterivARB) {
        snprintf(symboln, sizeof(symboln), "%sGetBufferParameteriv", symbol_prefix);
        procp = (void **) &disp->GetBufferParameterivARB;
d5034 2
d5037 2
a5038 3
    if(!disp->GetBufferParameterivARB) {
        snprintf(symboln, sizeof(symboln), "%sGetBufferParameterivARB", symbol_prefix);
        procp = (void **) &disp->GetBufferParameterivARB;
d5042 2
d5045 2
a5046 3
    if(!disp->GetBufferPointervARB) {
        snprintf(symboln, sizeof(symboln), "%sGetBufferPointerv", symbol_prefix);
        procp = (void **) &disp->GetBufferPointervARB;
d5050 2
d5053 2
a5054 3
    if(!disp->GetBufferPointervARB) {
        snprintf(symboln, sizeof(symboln), "%sGetBufferPointervARB", symbol_prefix);
        procp = (void **) &disp->GetBufferPointervARB;
d5058 2
a5060 1
    if(!disp->GetBufferSubDataARB) {
a5061 1
        procp = (void **) &disp->GetBufferSubDataARB;
d5065 2
d5068 2
a5069 3
    if(!disp->GetBufferSubDataARB) {
        snprintf(symboln, sizeof(symboln), "%sGetBufferSubDataARB", symbol_prefix);
        procp = (void **) &disp->GetBufferSubDataARB;
d5073 2
a5075 1
    if(!disp->IsBufferARB) {
a5076 1
        procp = (void **) &disp->IsBufferARB;
d5080 2
a5082 1
    if(!disp->IsBufferARB) {
a5083 1
        procp = (void **) &disp->IsBufferARB;
d5087 2
a5089 1
    if(!disp->MapBufferARB) {
a5090 1
        procp = (void **) &disp->MapBufferARB;
d5094 2
a5096 1
    if(!disp->MapBufferARB) {
a5097 1
        procp = (void **) &disp->MapBufferARB;
d5101 2
a5103 1
    if(!disp->UnmapBufferARB) {
a5104 1
        procp = (void **) &disp->UnmapBufferARB;
d5108 2
a5110 1
    if(!disp->UnmapBufferARB) {
a5111 1
        procp = (void **) &disp->UnmapBufferARB;
d5115 2
a5117 1
    if(!disp->BeginQueryARB) {
a5118 1
        procp = (void **) &disp->BeginQueryARB;
d5122 2
a5124 1
    if(!disp->BeginQueryARB) {
a5125 1
        procp = (void **) &disp->BeginQueryARB;
d5129 2
a5131 1
    if(!disp->DeleteQueriesARB) {
a5132 1
        procp = (void **) &disp->DeleteQueriesARB;
d5136 2
a5138 1
    if(!disp->DeleteQueriesARB) {
a5139 1
        procp = (void **) &disp->DeleteQueriesARB;
d5143 2
a5145 1
    if(!disp->EndQueryARB) {
a5146 1
        procp = (void **) &disp->EndQueryARB;
d5150 2
a5152 1
    if(!disp->EndQueryARB) {
a5153 1
        procp = (void **) &disp->EndQueryARB;
d5157 2
a5159 1
    if(!disp->GenQueriesARB) {
a5160 1
        procp = (void **) &disp->GenQueriesARB;
d5164 2
a5166 1
    if(!disp->GenQueriesARB) {
a5167 1
        procp = (void **) &disp->GenQueriesARB;
d5171 2
a5173 1
    if(!disp->GetQueryObjectivARB) {
a5174 1
        procp = (void **) &disp->GetQueryObjectivARB;
d5178 2
d5181 2
a5182 3
    if(!disp->GetQueryObjectivARB) {
        snprintf(symboln, sizeof(symboln), "%sGetQueryObjectivARB", symbol_prefix);
        procp = (void **) &disp->GetQueryObjectivARB;
d5186 2
d5189 2
a5190 3
    if(!disp->GetQueryObjectuivARB) {
        snprintf(symboln, sizeof(symboln), "%sGetQueryObjectuiv", symbol_prefix);
        procp = (void **) &disp->GetQueryObjectuivARB;
d5194 2
d5197 2
a5198 3
    if(!disp->GetQueryObjectuivARB) {
        snprintf(symboln, sizeof(symboln), "%sGetQueryObjectuivARB", symbol_prefix);
        procp = (void **) &disp->GetQueryObjectuivARB;
d5202 2
a5204 1
    if(!disp->GetQueryivARB) {
a5205 1
        procp = (void **) &disp->GetQueryivARB;
d5209 2
a5211 1
    if(!disp->GetQueryivARB) {
a5212 1
        procp = (void **) &disp->GetQueryivARB;
d5216 2
a5218 1
    if(!disp->IsQueryARB) {
a5219 1
        procp = (void **) &disp->IsQueryARB;
d5223 2
a5225 1
    if(!disp->IsQueryARB) {
a5226 1
        procp = (void **) &disp->IsQueryARB;
d5230 2
a5232 1
    if(!disp->AttachObjectARB) {
a5233 1
        procp = (void **) &disp->AttachObjectARB;
d5237 2
a5239 1
    if(!disp->CompileShaderARB) {
a5240 1
        procp = (void **) &disp->CompileShaderARB;
d5244 2
a5246 1
    if(!disp->CompileShaderARB) {
a5247 1
        procp = (void **) &disp->CompileShaderARB;
d5251 2
d5254 2
a5255 3
    if(!disp->CreateProgramObjectARB) {
        snprintf(symboln, sizeof(symboln), "%sCreateProgramObjectARB", symbol_prefix);
        procp = (void **) &disp->CreateProgramObjectARB;
d5259 2
d5262 2
a5263 3
    if(!disp->CreateShaderObjectARB) {
        snprintf(symboln, sizeof(symboln), "%sCreateShaderObjectARB", symbol_prefix);
        procp = (void **) &disp->CreateShaderObjectARB;
d5267 2
a5269 1
    if(!disp->DeleteObjectARB) {
a5270 1
        procp = (void **) &disp->DeleteObjectARB;
d5274 2
a5276 1
    if(!disp->DetachObjectARB) {
a5277 1
        procp = (void **) &disp->DetachObjectARB;
d5281 2
a5283 1
    if(!disp->GetActiveUniformARB) {
a5284 1
        procp = (void **) &disp->GetActiveUniformARB;
d5288 2
d5291 2
a5292 3
    if(!disp->GetActiveUniformARB) {
        snprintf(symboln, sizeof(symboln), "%sGetActiveUniformARB", symbol_prefix);
        procp = (void **) &disp->GetActiveUniformARB;
d5296 2
d5299 2
a5300 3
    if(!disp->GetAttachedObjectsARB) {
        snprintf(symboln, sizeof(symboln), "%sGetAttachedObjectsARB", symbol_prefix);
        procp = (void **) &disp->GetAttachedObjectsARB;
d5304 2
a5306 1
    if(!disp->GetHandleARB) {
a5307 1
        procp = (void **) &disp->GetHandleARB;
d5311 2
a5313 1
    if(!disp->GetInfoLogARB) {
a5314 1
        procp = (void **) &disp->GetInfoLogARB;
d5318 2
d5321 2
a5322 3
    if(!disp->GetObjectParameterfvARB) {
        snprintf(symboln, sizeof(symboln), "%sGetObjectParameterfvARB", symbol_prefix);
        procp = (void **) &disp->GetObjectParameterfvARB;
d5326 2
d5329 2
a5330 3
    if(!disp->GetObjectParameterivARB) {
        snprintf(symboln, sizeof(symboln), "%sGetObjectParameterivARB", symbol_prefix);
        procp = (void **) &disp->GetObjectParameterivARB;
d5334 2
a5336 1
    if(!disp->GetShaderSourceARB) {
a5337 1
        procp = (void **) &disp->GetShaderSourceARB;
d5341 2
d5344 2
a5345 3
    if(!disp->GetShaderSourceARB) {
        snprintf(symboln, sizeof(symboln), "%sGetShaderSourceARB", symbol_prefix);
        procp = (void **) &disp->GetShaderSourceARB;
d5349 2
d5352 2
a5353 3
    if(!disp->GetUniformLocationARB) {
        snprintf(symboln, sizeof(symboln), "%sGetUniformLocation", symbol_prefix);
        procp = (void **) &disp->GetUniformLocationARB;
d5357 2
d5360 2
a5361 3
    if(!disp->GetUniformLocationARB) {
        snprintf(symboln, sizeof(symboln), "%sGetUniformLocationARB", symbol_prefix);
        procp = (void **) &disp->GetUniformLocationARB;
d5365 2
a5367 1
    if(!disp->GetUniformfvARB) {
a5368 1
        procp = (void **) &disp->GetUniformfvARB;
d5372 2
a5374 1
    if(!disp->GetUniformfvARB) {
a5375 1
        procp = (void **) &disp->GetUniformfvARB;
d5379 2
a5381 1
    if(!disp->GetUniformivARB) {
a5382 1
        procp = (void **) &disp->GetUniformivARB;
d5386 2
a5388 1
    if(!disp->GetUniformivARB) {
a5389 1
        procp = (void **) &disp->GetUniformivARB;
d5393 2
a5395 1
    if(!disp->LinkProgramARB) {
a5396 1
        procp = (void **) &disp->LinkProgramARB;
d5400 2
a5402 1
    if(!disp->LinkProgramARB) {
a5403 1
        procp = (void **) &disp->LinkProgramARB;
d5407 2
a5409 1
    if(!disp->ShaderSourceARB) {
a5410 1
        procp = (void **) &disp->ShaderSourceARB;
d5414 2
a5416 1
    if(!disp->ShaderSourceARB) {
a5417 1
        procp = (void **) &disp->ShaderSourceARB;
d5421 2
a5423 1
    if(!disp->Uniform1fARB) {
a5424 1
        procp = (void **) &disp->Uniform1fARB;
d5428 2
a5430 1
    if(!disp->Uniform1fARB) {
a5431 1
        procp = (void **) &disp->Uniform1fARB;
d5435 2
a5437 1
    if(!disp->Uniform1fvARB) {
a5438 1
        procp = (void **) &disp->Uniform1fvARB;
d5442 2
a5444 1
    if(!disp->Uniform1fvARB) {
a5445 1
        procp = (void **) &disp->Uniform1fvARB;
d5449 2
a5451 1
    if(!disp->Uniform1iARB) {
a5452 1
        procp = (void **) &disp->Uniform1iARB;
d5456 2
a5458 1
    if(!disp->Uniform1iARB) {
a5459 1
        procp = (void **) &disp->Uniform1iARB;
d5463 2
a5465 1
    if(!disp->Uniform1ivARB) {
a5466 1
        procp = (void **) &disp->Uniform1ivARB;
d5470 2
a5472 1
    if(!disp->Uniform1ivARB) {
a5473 1
        procp = (void **) &disp->Uniform1ivARB;
d5477 2
a5479 1
    if(!disp->Uniform2fARB) {
a5480 1
        procp = (void **) &disp->Uniform2fARB;
d5484 2
a5486 1
    if(!disp->Uniform2fARB) {
a5487 1
        procp = (void **) &disp->Uniform2fARB;
d5491 2
a5493 1
    if(!disp->Uniform2fvARB) {
a5494 1
        procp = (void **) &disp->Uniform2fvARB;
d5498 2
a5500 1
    if(!disp->Uniform2fvARB) {
a5501 1
        procp = (void **) &disp->Uniform2fvARB;
d5505 2
a5507 1
    if(!disp->Uniform2iARB) {
a5508 1
        procp = (void **) &disp->Uniform2iARB;
d5512 2
a5514 1
    if(!disp->Uniform2iARB) {
a5515 1
        procp = (void **) &disp->Uniform2iARB;
d5519 2
a5521 1
    if(!disp->Uniform2ivARB) {
a5522 1
        procp = (void **) &disp->Uniform2ivARB;
d5526 2
a5528 1
    if(!disp->Uniform2ivARB) {
a5529 1
        procp = (void **) &disp->Uniform2ivARB;
d5533 2
a5535 1
    if(!disp->Uniform3fARB) {
a5536 1
        procp = (void **) &disp->Uniform3fARB;
d5540 2
a5542 1
    if(!disp->Uniform3fARB) {
a5543 1
        procp = (void **) &disp->Uniform3fARB;
d5547 2
a5549 1
    if(!disp->Uniform3fvARB) {
a5550 1
        procp = (void **) &disp->Uniform3fvARB;
d5554 2
a5556 1
    if(!disp->Uniform3fvARB) {
a5557 1
        procp = (void **) &disp->Uniform3fvARB;
d5561 2
a5563 1
    if(!disp->Uniform3iARB) {
a5564 1
        procp = (void **) &disp->Uniform3iARB;
d5568 2
a5570 1
    if(!disp->Uniform3iARB) {
a5571 1
        procp = (void **) &disp->Uniform3iARB;
d5575 2
a5577 1
    if(!disp->Uniform3ivARB) {
a5578 1
        procp = (void **) &disp->Uniform3ivARB;
d5582 2
a5584 1
    if(!disp->Uniform3ivARB) {
a5585 1
        procp = (void **) &disp->Uniform3ivARB;
d5589 2
a5591 1
    if(!disp->Uniform4fARB) {
a5592 1
        procp = (void **) &disp->Uniform4fARB;
d5596 2
a5598 1
    if(!disp->Uniform4fARB) {
a5599 1
        procp = (void **) &disp->Uniform4fARB;
d5603 2
a5605 1
    if(!disp->Uniform4fvARB) {
a5606 1
        procp = (void **) &disp->Uniform4fvARB;
d5610 2
a5612 1
    if(!disp->Uniform4fvARB) {
a5613 1
        procp = (void **) &disp->Uniform4fvARB;
d5617 2
a5619 1
    if(!disp->Uniform4iARB) {
a5620 1
        procp = (void **) &disp->Uniform4iARB;
d5624 2
a5626 1
    if(!disp->Uniform4iARB) {
a5627 1
        procp = (void **) &disp->Uniform4iARB;
d5631 2
a5633 1
    if(!disp->Uniform4ivARB) {
a5634 1
        procp = (void **) &disp->Uniform4ivARB;
d5638 2
a5640 1
    if(!disp->Uniform4ivARB) {
a5641 1
        procp = (void **) &disp->Uniform4ivARB;
d5645 2
a5647 1
    if(!disp->UniformMatrix2fvARB) {
a5648 1
        procp = (void **) &disp->UniformMatrix2fvARB;
d5652 2
d5655 2
a5656 3
    if(!disp->UniformMatrix2fvARB) {
        snprintf(symboln, sizeof(symboln), "%sUniformMatrix2fvARB", symbol_prefix);
        procp = (void **) &disp->UniformMatrix2fvARB;
d5660 2
a5662 1
    if(!disp->UniformMatrix3fvARB) {
a5663 1
        procp = (void **) &disp->UniformMatrix3fvARB;
d5667 2
d5670 2
a5671 3
    if(!disp->UniformMatrix3fvARB) {
        snprintf(symboln, sizeof(symboln), "%sUniformMatrix3fvARB", symbol_prefix);
        procp = (void **) &disp->UniformMatrix3fvARB;
d5675 2
a5677 1
    if(!disp->UniformMatrix4fvARB) {
a5678 1
        procp = (void **) &disp->UniformMatrix4fvARB;
d5682 2
d5685 2
a5686 3
    if(!disp->UniformMatrix4fvARB) {
        snprintf(symboln, sizeof(symboln), "%sUniformMatrix4fvARB", symbol_prefix);
        procp = (void **) &disp->UniformMatrix4fvARB;
d5690 2
a5692 1
    if(!disp->UseProgramObjectARB) {
a5693 1
        procp = (void **) &disp->UseProgramObjectARB;
d5697 2
d5700 2
a5701 3
    if(!disp->UseProgramObjectARB) {
        snprintf(symboln, sizeof(symboln), "%sUseProgramObjectARB", symbol_prefix);
        procp = (void **) &disp->UseProgramObjectARB;
d5705 2
a5707 1
    if(!disp->ValidateProgramARB) {
a5708 1
        procp = (void **) &disp->ValidateProgramARB;
d5712 2
d5715 2
a5716 3
    if(!disp->ValidateProgramARB) {
        snprintf(symboln, sizeof(symboln), "%sValidateProgramARB", symbol_prefix);
        procp = (void **) &disp->ValidateProgramARB;
d5720 2
d5723 2
a5724 3
    if(!disp->BindAttribLocationARB) {
        snprintf(symboln, sizeof(symboln), "%sBindAttribLocation", symbol_prefix);
        procp = (void **) &disp->BindAttribLocationARB;
d5728 2
d5731 2
a5732 3
    if(!disp->BindAttribLocationARB) {
        snprintf(symboln, sizeof(symboln), "%sBindAttribLocationARB", symbol_prefix);
        procp = (void **) &disp->BindAttribLocationARB;
d5736 2
a5738 1
    if(!disp->GetActiveAttribARB) {
a5739 1
        procp = (void **) &disp->GetActiveAttribARB;
d5743 2
d5746 2
a5747 3
    if(!disp->GetActiveAttribARB) {
        snprintf(symboln, sizeof(symboln), "%sGetActiveAttribARB", symbol_prefix);
        procp = (void **) &disp->GetActiveAttribARB;
d5751 2
d5754 2
a5755 3
    if(!disp->GetAttribLocationARB) {
        snprintf(symboln, sizeof(symboln), "%sGetAttribLocation", symbol_prefix);
        procp = (void **) &disp->GetAttribLocationARB;
d5759 2
d5762 2
a5763 3
    if(!disp->GetAttribLocationARB) {
        snprintf(symboln, sizeof(symboln), "%sGetAttribLocationARB", symbol_prefix);
        procp = (void **) &disp->GetAttribLocationARB;
d5767 2
a5769 1
    if(!disp->DrawBuffersARB) {
a5770 1
        procp = (void **) &disp->DrawBuffersARB;
d5774 2
a5776 1
    if(!disp->DrawBuffersARB) {
a5777 1
        procp = (void **) &disp->DrawBuffersARB;
d5781 2
a5783 1
    if(!disp->DrawBuffersARB) {
a5784 1
        procp = (void **) &disp->DrawBuffersARB;
d5788 2
d5791 1
a5791 3
    if(!disp->PolygonOffsetEXT) {
        snprintf(symboln, sizeof(symboln), "%sPolygonOffsetEXT", symbol_prefix);
        procp = (void **) &disp->PolygonOffsetEXT;
d5795 2
d5798 1
a5798 3
    if(!disp->GetPixelTexGenParameterfvSGIS) {
        snprintf(symboln, sizeof(symboln), "%sGetPixelTexGenParameterfvSGIS", symbol_prefix);
        procp = (void **) &disp->GetPixelTexGenParameterfvSGIS;
d5802 2
d5805 2
a5806 3
    if(!disp->GetPixelTexGenParameterivSGIS) {
        snprintf(symboln, sizeof(symboln), "%sGetPixelTexGenParameterivSGIS", symbol_prefix);
        procp = (void **) &disp->GetPixelTexGenParameterivSGIS;
d5810 2
d5813 2
a5814 3
    if(!disp->PixelTexGenParameterfSGIS) {
        snprintf(symboln, sizeof(symboln), "%sPixelTexGenParameterfSGIS", symbol_prefix);
        procp = (void **) &disp->PixelTexGenParameterfSGIS;
d5818 2
d5821 2
a5822 3
    if(!disp->PixelTexGenParameterfvSGIS) {
        snprintf(symboln, sizeof(symboln), "%sPixelTexGenParameterfvSGIS", symbol_prefix);
        procp = (void **) &disp->PixelTexGenParameterfvSGIS;
d5826 2
d5829 2
a5830 3
    if(!disp->PixelTexGenParameteriSGIS) {
        snprintf(symboln, sizeof(symboln), "%sPixelTexGenParameteriSGIS", symbol_prefix);
        procp = (void **) &disp->PixelTexGenParameteriSGIS;
d5834 2
d5837 2
a5838 3
    if(!disp->PixelTexGenParameterivSGIS) {
        snprintf(symboln, sizeof(symboln), "%sPixelTexGenParameterivSGIS", symbol_prefix);
        procp = (void **) &disp->PixelTexGenParameterivSGIS;
d5842 2
d5845 2
a5846 3
    if(!disp->SampleMaskSGIS) {
        snprintf(symboln, sizeof(symboln), "%sSampleMaskSGIS", symbol_prefix);
        procp = (void **) &disp->SampleMaskSGIS;
d5850 2
d5853 2
a5854 3
    if(!disp->SampleMaskSGIS) {
        snprintf(symboln, sizeof(symboln), "%sSampleMaskEXT", symbol_prefix);
        procp = (void **) &disp->SampleMaskSGIS;
d5858 2
d5861 2
a5862 3
    if(!disp->SamplePatternSGIS) {
        snprintf(symboln, sizeof(symboln), "%sSamplePatternSGIS", symbol_prefix);
        procp = (void **) &disp->SamplePatternSGIS;
d5866 2
d5869 2
a5870 3
    if(!disp->SamplePatternSGIS) {
        snprintf(symboln, sizeof(symboln), "%sSamplePatternEXT", symbol_prefix);
        procp = (void **) &disp->SamplePatternSGIS;
d5874 2
d5877 2
a5878 3
    if(!disp->ColorPointerEXT) {
        snprintf(symboln, sizeof(symboln), "%sColorPointerEXT", symbol_prefix);
        procp = (void **) &disp->ColorPointerEXT;
d5882 2
d5885 2
a5886 3
    if(!disp->EdgeFlagPointerEXT) {
        snprintf(symboln, sizeof(symboln), "%sEdgeFlagPointerEXT", symbol_prefix);
        procp = (void **) &disp->EdgeFlagPointerEXT;
d5890 2
d5893 2
a5894 3
    if(!disp->IndexPointerEXT) {
        snprintf(symboln, sizeof(symboln), "%sIndexPointerEXT", symbol_prefix);
        procp = (void **) &disp->IndexPointerEXT;
d5898 2
d5901 2
a5902 3
    if(!disp->NormalPointerEXT) {
        snprintf(symboln, sizeof(symboln), "%sNormalPointerEXT", symbol_prefix);
        procp = (void **) &disp->NormalPointerEXT;
d5906 2
d5909 1
a5909 3
    if(!disp->TexCoordPointerEXT) {
        snprintf(symboln, sizeof(symboln), "%sTexCoordPointerEXT", symbol_prefix);
        procp = (void **) &disp->TexCoordPointerEXT;
d5913 2
d5916 1
a5916 3
    if(!disp->VertexPointerEXT) {
        snprintf(symboln, sizeof(symboln), "%sVertexPointerEXT", symbol_prefix);
        procp = (void **) &disp->VertexPointerEXT;
d5920 2
d5923 1
a5923 3
    if(!disp->PointParameterfEXT) {
        snprintf(symboln, sizeof(symboln), "%sPointParameterf", symbol_prefix);
        procp = (void **) &disp->PointParameterfEXT;
d5927 2
d5930 1
a5930 3
    if(!disp->PointParameterfEXT) {
        snprintf(symboln, sizeof(symboln), "%sPointParameterfARB", symbol_prefix);
        procp = (void **) &disp->PointParameterfEXT;
d5934 2
d5937 2
a5938 3
    if(!disp->PointParameterfEXT) {
        snprintf(symboln, sizeof(symboln), "%sPointParameterfEXT", symbol_prefix);
        procp = (void **) &disp->PointParameterfEXT;
d5942 2
d5945 1
a5945 3
    if(!disp->PointParameterfEXT) {
        snprintf(symboln, sizeof(symboln), "%sPointParameterfSGIS", symbol_prefix);
        procp = (void **) &disp->PointParameterfEXT;
d5949 2
d5952 1
a5952 3
    if(!disp->PointParameterfvEXT) {
        snprintf(symboln, sizeof(symboln), "%sPointParameterfv", symbol_prefix);
        procp = (void **) &disp->PointParameterfvEXT;
d5956 2
d5959 1
a5959 3
    if(!disp->PointParameterfvEXT) {
        snprintf(symboln, sizeof(symboln), "%sPointParameterfvARB", symbol_prefix);
        procp = (void **) &disp->PointParameterfvEXT;
d5963 2
d5966 1
a5966 3
    if(!disp->PointParameterfvEXT) {
        snprintf(symboln, sizeof(symboln), "%sPointParameterfvEXT", symbol_prefix);
        procp = (void **) &disp->PointParameterfvEXT;
d5970 2
d5973 1
a5973 3
    if(!disp->PointParameterfvEXT) {
        snprintf(symboln, sizeof(symboln), "%sPointParameterfvSGIS", symbol_prefix);
        procp = (void **) &disp->PointParameterfvEXT;
d5977 2
d5980 1
a5980 3
    if(!disp->LockArraysEXT) {
        snprintf(symboln, sizeof(symboln), "%sLockArraysEXT", symbol_prefix);
        procp = (void **) &disp->LockArraysEXT;
d5984 2
d5987 1
a5987 3
    if(!disp->UnlockArraysEXT) {
        snprintf(symboln, sizeof(symboln), "%sUnlockArraysEXT", symbol_prefix);
        procp = (void **) &disp->UnlockArraysEXT;
d5991 2
d5994 2
a5995 3
    if(!disp->SecondaryColor3bEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3b", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3bEXT;
d5999 2
d6002 2
a6003 3
    if(!disp->SecondaryColor3bEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3bEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3bEXT;
d6007 2
d6010 2
a6011 3
    if(!disp->SecondaryColor3bvEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3bv", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3bvEXT;
d6015 2
d6018 2
a6019 3
    if(!disp->SecondaryColor3bvEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3bvEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3bvEXT;
d6023 2
d6026 2
a6027 3
    if(!disp->SecondaryColor3dEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3d", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3dEXT;
d6031 2
d6034 2
a6035 3
    if(!disp->SecondaryColor3dEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3dEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3dEXT;
d6039 2
d6042 2
a6043 3
    if(!disp->SecondaryColor3dvEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3dv", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3dvEXT;
d6047 2
d6050 2
a6051 3
    if(!disp->SecondaryColor3dvEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3dvEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3dvEXT;
d6055 2
d6058 2
a6059 3
    if(!disp->SecondaryColor3fEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3f", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3fEXT;
d6063 2
d6066 2
a6067 3
    if(!disp->SecondaryColor3fEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3fEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3fEXT;
d6071 2
d6074 1
a6074 3
    if(!disp->SecondaryColor3fvEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3fv", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3fvEXT;
d6078 2
d6081 2
a6082 3
    if(!disp->SecondaryColor3fvEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3fvEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3fvEXT;
d6086 2
d6089 1
a6089 3
    if(!disp->SecondaryColor3iEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3i", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3iEXT;
d6093 2
d6096 1
a6096 3
    if(!disp->SecondaryColor3iEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3iEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3iEXT;
d6100 2
d6103 1
a6103 3
    if(!disp->SecondaryColor3ivEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3iv", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3ivEXT;
d6107 2
d6110 2
a6111 3
    if(!disp->SecondaryColor3ivEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3ivEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3ivEXT;
d6115 2
d6118 2
a6119 3
    if(!disp->SecondaryColor3sEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3s", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3sEXT;
d6123 2
d6126 2
a6127 3
    if(!disp->SecondaryColor3sEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3sEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3sEXT;
d6131 2
d6134 2
a6135 3
    if(!disp->SecondaryColor3svEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3sv", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3svEXT;
d6139 2
d6142 1
a6142 3
    if(!disp->SecondaryColor3svEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3svEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3svEXT;
d6146 2
d6149 2
a6150 3
    if(!disp->SecondaryColor3ubEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3ub", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3ubEXT;
d6154 2
d6157 2
a6158 3
    if(!disp->SecondaryColor3ubEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3ubEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3ubEXT;
d6162 2
d6165 2
a6166 3
    if(!disp->SecondaryColor3ubvEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3ubv", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3ubvEXT;
d6170 2
d6173 2
a6174 3
    if(!disp->SecondaryColor3ubvEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3ubvEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3ubvEXT;
d6178 2
d6181 2
a6182 3
    if(!disp->SecondaryColor3uiEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3ui", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3uiEXT;
d6186 2
d6189 2
a6190 3
    if(!disp->SecondaryColor3uiEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3uiEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3uiEXT;
d6194 2
d6197 1
a6197 3
    if(!disp->SecondaryColor3uivEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3uiv", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3uivEXT;
d6201 2
d6204 1
a6204 3
    if(!disp->SecondaryColor3uivEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3uivEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3uivEXT;
d6208 2
d6211 1
a6211 3
    if(!disp->SecondaryColor3usEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3us", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3usEXT;
d6215 2
d6218 1
a6218 3
    if(!disp->SecondaryColor3usEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3usEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3usEXT;
d6222 2
d6225 2
a6226 3
    if(!disp->SecondaryColor3usvEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3usv", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3usvEXT;
d6230 2
d6233 2
a6234 3
    if(!disp->SecondaryColor3usvEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColor3usvEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColor3usvEXT;
d6238 2
d6241 2
a6242 3
    if(!disp->SecondaryColorPointerEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColorPointer", symbol_prefix);
        procp = (void **) &disp->SecondaryColorPointerEXT;
d6246 2
d6249 2
a6250 3
    if(!disp->SecondaryColorPointerEXT) {
        snprintf(symboln, sizeof(symboln), "%sSecondaryColorPointerEXT", symbol_prefix);
        procp = (void **) &disp->SecondaryColorPointerEXT;
d6254 2
d6257 2
a6258 3
    if(!disp->MultiDrawArraysEXT) {
        snprintf(symboln, sizeof(symboln), "%sMultiDrawArrays", symbol_prefix);
        procp = (void **) &disp->MultiDrawArraysEXT;
d6262 2
d6265 2
a6266 3
    if(!disp->MultiDrawArraysEXT) {
        snprintf(symboln, sizeof(symboln), "%sMultiDrawArraysEXT", symbol_prefix);
        procp = (void **) &disp->MultiDrawArraysEXT;
d6270 2
d6273 2
a6274 3
    if(!disp->MultiDrawElementsEXT) {
        snprintf(symboln, sizeof(symboln), "%sMultiDrawElements", symbol_prefix);
        procp = (void **) &disp->MultiDrawElementsEXT;
d6278 2
d6281 2
a6282 3
    if(!disp->MultiDrawElementsEXT) {
        snprintf(symboln, sizeof(symboln), "%sMultiDrawElementsEXT", symbol_prefix);
        procp = (void **) &disp->MultiDrawElementsEXT;
d6286 2
d6289 1
a6289 3
    if(!disp->FogCoordPointerEXT) {
        snprintf(symboln, sizeof(symboln), "%sFogCoordPointer", symbol_prefix);
        procp = (void **) &disp->FogCoordPointerEXT;
d6293 2
d6296 1
a6296 3
    if(!disp->FogCoordPointerEXT) {
        snprintf(symboln, sizeof(symboln), "%sFogCoordPointerEXT", symbol_prefix);
        procp = (void **) &disp->FogCoordPointerEXT;
d6300 2
d6303 2
a6304 3
    if(!disp->FogCoorddEXT) {
        snprintf(symboln, sizeof(symboln), "%sFogCoordd", symbol_prefix);
        procp = (void **) &disp->FogCoorddEXT;
d6308 2
d6311 2
a6312 3
    if(!disp->FogCoorddEXT) {
        snprintf(symboln, sizeof(symboln), "%sFogCoorddEXT", symbol_prefix);
        procp = (void **) &disp->FogCoorddEXT;
d6316 2
d6319 1
a6319 3
    if(!disp->FogCoorddvEXT) {
        snprintf(symboln, sizeof(symboln), "%sFogCoorddv", symbol_prefix);
        procp = (void **) &disp->FogCoorddvEXT;
d6323 2
d6326 1
a6326 3
    if(!disp->FogCoorddvEXT) {
        snprintf(symboln, sizeof(symboln), "%sFogCoorddvEXT", symbol_prefix);
        procp = (void **) &disp->FogCoorddvEXT;
d6330 2
d6333 1
a6333 3
    if(!disp->FogCoordfEXT) {
        snprintf(symboln, sizeof(symboln), "%sFogCoordf", symbol_prefix);
        procp = (void **) &disp->FogCoordfEXT;
d6337 2
d6340 1
a6340 3
    if(!disp->FogCoordfEXT) {
        snprintf(symboln, sizeof(symboln), "%sFogCoordfEXT", symbol_prefix);
        procp = (void **) &disp->FogCoordfEXT;
d6344 2
d6347 1
a6347 3
    if(!disp->FogCoordfvEXT) {
        snprintf(symboln, sizeof(symboln), "%sFogCoordfv", symbol_prefix);
        procp = (void **) &disp->FogCoordfvEXT;
d6351 2
d6354 1
a6354 3
    if(!disp->FogCoordfvEXT) {
        snprintf(symboln, sizeof(symboln), "%sFogCoordfvEXT", symbol_prefix);
        procp = (void **) &disp->FogCoordfvEXT;
d6358 2
d6361 1
a6361 3
    if(!disp->PixelTexGenSGIX) {
        snprintf(symboln, sizeof(symboln), "%sPixelTexGenSGIX", symbol_prefix);
        procp = (void **) &disp->PixelTexGenSGIX;
d6365 2
d6368 1
a6368 3
    if(!disp->BlendFuncSeparateEXT) {
        snprintf(symboln, sizeof(symboln), "%sBlendFuncSeparate", symbol_prefix);
        procp = (void **) &disp->BlendFuncSeparateEXT;
d6372 2
d6375 1
a6375 3
    if(!disp->BlendFuncSeparateEXT) {
        snprintf(symboln, sizeof(symboln), "%sBlendFuncSeparateEXT", symbol_prefix);
        procp = (void **) &disp->BlendFuncSeparateEXT;
d6379 2
d6382 2
a6383 3
    if(!disp->BlendFuncSeparateEXT) {
        snprintf(symboln, sizeof(symboln), "%sBlendFuncSeparateINGR", symbol_prefix);
        procp = (void **) &disp->BlendFuncSeparateEXT;
d6387 2
d6390 1
a6390 3
    if(!disp->FlushVertexArrayRangeNV) {
        snprintf(symboln, sizeof(symboln), "%sFlushVertexArrayRangeNV", symbol_prefix);
        procp = (void **) &disp->FlushVertexArrayRangeNV;
d6394 2
d6397 2
a6398 3
    if(!disp->VertexArrayRangeNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexArrayRangeNV", symbol_prefix);
        procp = (void **) &disp->VertexArrayRangeNV;
d6402 2
d6405 1
a6405 3
    if(!disp->CombinerInputNV) {
        snprintf(symboln, sizeof(symboln), "%sCombinerInputNV", symbol_prefix);
        procp = (void **) &disp->CombinerInputNV;
d6409 2
d6412 2
a6413 3
    if(!disp->CombinerOutputNV) {
        snprintf(symboln, sizeof(symboln), "%sCombinerOutputNV", symbol_prefix);
        procp = (void **) &disp->CombinerOutputNV;
d6417 2
d6420 1
a6420 3
    if(!disp->CombinerParameterfNV) {
        snprintf(symboln, sizeof(symboln), "%sCombinerParameterfNV", symbol_prefix);
        procp = (void **) &disp->CombinerParameterfNV;
d6424 2
d6427 2
a6428 3
    if(!disp->CombinerParameterfvNV) {
        snprintf(symboln, sizeof(symboln), "%sCombinerParameterfvNV", symbol_prefix);
        procp = (void **) &disp->CombinerParameterfvNV;
d6432 2
d6435 1
a6435 3
    if(!disp->CombinerParameteriNV) {
        snprintf(symboln, sizeof(symboln), "%sCombinerParameteriNV", symbol_prefix);
        procp = (void **) &disp->CombinerParameteriNV;
d6439 2
d6442 1
a6442 3
    if(!disp->CombinerParameterivNV) {
        snprintf(symboln, sizeof(symboln), "%sCombinerParameterivNV", symbol_prefix);
        procp = (void **) &disp->CombinerParameterivNV;
d6446 2
d6449 1
a6449 3
    if(!disp->FinalCombinerInputNV) {
        snprintf(symboln, sizeof(symboln), "%sFinalCombinerInputNV", symbol_prefix);
        procp = (void **) &disp->FinalCombinerInputNV;
d6453 2
d6456 1
a6456 3
    if(!disp->GetCombinerInputParameterfvNV) {
        snprintf(symboln, sizeof(symboln), "%sGetCombinerInputParameterfvNV", symbol_prefix);
        procp = (void **) &disp->GetCombinerInputParameterfvNV;
d6460 2
d6463 1
a6463 3
    if(!disp->GetCombinerInputParameterivNV) {
        snprintf(symboln, sizeof(symboln), "%sGetCombinerInputParameterivNV", symbol_prefix);
        procp = (void **) &disp->GetCombinerInputParameterivNV;
d6467 2
d6470 1
a6470 3
    if(!disp->GetCombinerOutputParameterfvNV) {
        snprintf(symboln, sizeof(symboln), "%sGetCombinerOutputParameterfvNV", symbol_prefix);
        procp = (void **) &disp->GetCombinerOutputParameterfvNV;
d6474 2
d6477 2
a6478 3
    if(!disp->GetCombinerOutputParameterivNV) {
        snprintf(symboln, sizeof(symboln), "%sGetCombinerOutputParameterivNV", symbol_prefix);
        procp = (void **) &disp->GetCombinerOutputParameterivNV;
d6482 2
d6485 2
a6486 3
    if(!disp->GetFinalCombinerInputParameterfvNV) {
        snprintf(symboln, sizeof(symboln), "%sGetFinalCombinerInputParameterfvNV", symbol_prefix);
        procp = (void **) &disp->GetFinalCombinerInputParameterfvNV;
d6490 2
d6493 2
a6494 3
    if(!disp->GetFinalCombinerInputParameterivNV) {
        snprintf(symboln, sizeof(symboln), "%sGetFinalCombinerInputParameterivNV", symbol_prefix);
        procp = (void **) &disp->GetFinalCombinerInputParameterivNV;
d6498 2
d6501 2
a6502 3
    if(!disp->ResizeBuffersMESA) {
        snprintf(symboln, sizeof(symboln), "%sResizeBuffersMESA", symbol_prefix);
        procp = (void **) &disp->ResizeBuffersMESA;
d6506 2
d6509 2
a6510 3
    if(!disp->WindowPos2dMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2d", symbol_prefix);
        procp = (void **) &disp->WindowPos2dMESA;
d6514 2
d6517 2
a6518 3
    if(!disp->WindowPos2dMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2dARB", symbol_prefix);
        procp = (void **) &disp->WindowPos2dMESA;
d6522 2
d6525 2
a6526 3
    if(!disp->WindowPos2dMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2dMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos2dMESA;
d6530 2
d6533 1
a6533 3
    if(!disp->WindowPos2dvMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2dv", symbol_prefix);
        procp = (void **) &disp->WindowPos2dvMESA;
d6537 2
d6540 1
a6540 3
    if(!disp->WindowPos2dvMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2dvARB", symbol_prefix);
        procp = (void **) &disp->WindowPos2dvMESA;
d6544 2
d6547 2
a6548 3
    if(!disp->WindowPos2dvMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2dvMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos2dvMESA;
d6552 2
d6555 2
a6556 3
    if(!disp->WindowPos2fMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2f", symbol_prefix);
        procp = (void **) &disp->WindowPos2fMESA;
d6560 2
d6563 1
a6563 3
    if(!disp->WindowPos2fMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2fARB", symbol_prefix);
        procp = (void **) &disp->WindowPos2fMESA;
d6567 2
d6570 2
a6571 3
    if(!disp->WindowPos2fMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2fMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos2fMESA;
d6575 2
d6578 2
a6579 3
    if(!disp->WindowPos2fvMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2fv", symbol_prefix);
        procp = (void **) &disp->WindowPos2fvMESA;
d6583 2
d6586 2
a6587 3
    if(!disp->WindowPos2fvMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2fvARB", symbol_prefix);
        procp = (void **) &disp->WindowPos2fvMESA;
d6591 2
d6594 2
a6595 3
    if(!disp->WindowPos2fvMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2fvMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos2fvMESA;
d6599 2
d6602 1
a6602 3
    if(!disp->WindowPos2iMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2i", symbol_prefix);
        procp = (void **) &disp->WindowPos2iMESA;
d6606 2
d6609 1
a6609 3
    if(!disp->WindowPos2iMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2iARB", symbol_prefix);
        procp = (void **) &disp->WindowPos2iMESA;
d6613 2
d6616 1
a6616 3
    if(!disp->WindowPos2iMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2iMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos2iMESA;
d6620 2
d6623 1
a6623 3
    if(!disp->WindowPos2ivMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2iv", symbol_prefix);
        procp = (void **) &disp->WindowPos2ivMESA;
d6627 2
d6630 1
a6630 3
    if(!disp->WindowPos2ivMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2ivARB", symbol_prefix);
        procp = (void **) &disp->WindowPos2ivMESA;
d6634 2
d6637 2
a6638 3
    if(!disp->WindowPos2ivMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2ivMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos2ivMESA;
d6642 2
d6645 2
a6646 3
    if(!disp->WindowPos2sMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2s", symbol_prefix);
        procp = (void **) &disp->WindowPos2sMESA;
d6650 2
d6653 2
a6654 3
    if(!disp->WindowPos2sMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2sARB", symbol_prefix);
        procp = (void **) &disp->WindowPos2sMESA;
d6658 2
d6661 2
a6662 3
    if(!disp->WindowPos2sMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2sMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos2sMESA;
d6666 2
d6669 2
a6670 3
    if(!disp->WindowPos2svMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2sv", symbol_prefix);
        procp = (void **) &disp->WindowPos2svMESA;
d6674 2
d6677 1
a6677 3
    if(!disp->WindowPos2svMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2svARB", symbol_prefix);
        procp = (void **) &disp->WindowPos2svMESA;
d6681 2
d6684 1
a6684 3
    if(!disp->WindowPos2svMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos2svMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos2svMESA;
d6688 2
d6691 1
a6691 3
    if(!disp->WindowPos3dMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3d", symbol_prefix);
        procp = (void **) &disp->WindowPos3dMESA;
d6695 2
d6698 1
a6698 3
    if(!disp->WindowPos3dMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3dARB", symbol_prefix);
        procp = (void **) &disp->WindowPos3dMESA;
d6702 2
d6705 2
a6706 3
    if(!disp->WindowPos3dMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3dMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos3dMESA;
d6710 2
d6713 1
a6713 3
    if(!disp->WindowPos3dvMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3dv", symbol_prefix);
        procp = (void **) &disp->WindowPos3dvMESA;
d6717 2
d6720 1
a6720 3
    if(!disp->WindowPos3dvMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3dvARB", symbol_prefix);
        procp = (void **) &disp->WindowPos3dvMESA;
d6724 2
d6727 1
a6727 3
    if(!disp->WindowPos3dvMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3dvMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos3dvMESA;
d6731 2
d6734 1
a6734 3
    if(!disp->WindowPos3fMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3f", symbol_prefix);
        procp = (void **) &disp->WindowPos3fMESA;
d6738 2
d6741 2
a6742 3
    if(!disp->WindowPos3fMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3fARB", symbol_prefix);
        procp = (void **) &disp->WindowPos3fMESA;
d6746 2
d6749 2
a6750 3
    if(!disp->WindowPos3fMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3fMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos3fMESA;
d6754 2
d6757 2
a6758 3
    if(!disp->WindowPos3fvMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3fv", symbol_prefix);
        procp = (void **) &disp->WindowPos3fvMESA;
d6762 2
d6765 1
a6765 3
    if(!disp->WindowPos3fvMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3fvARB", symbol_prefix);
        procp = (void **) &disp->WindowPos3fvMESA;
d6769 2
d6772 2
a6773 3
    if(!disp->WindowPos3fvMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3fvMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos3fvMESA;
d6777 2
d6780 2
a6781 3
    if(!disp->WindowPos3iMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3i", symbol_prefix);
        procp = (void **) &disp->WindowPos3iMESA;
d6785 2
d6788 2
a6789 3
    if(!disp->WindowPos3iMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3iARB", symbol_prefix);
        procp = (void **) &disp->WindowPos3iMESA;
d6793 2
d6796 2
a6797 3
    if(!disp->WindowPos3iMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3iMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos3iMESA;
d6801 2
d6804 2
a6805 3
    if(!disp->WindowPos3ivMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3iv", symbol_prefix);
        procp = (void **) &disp->WindowPos3ivMESA;
d6809 2
d6812 2
a6813 3
    if(!disp->WindowPos3ivMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3ivARB", symbol_prefix);
        procp = (void **) &disp->WindowPos3ivMESA;
d6817 2
d6820 1
a6820 3
    if(!disp->WindowPos3ivMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3ivMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos3ivMESA;
d6824 2
d6827 1
a6827 3
    if(!disp->WindowPos3sMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3s", symbol_prefix);
        procp = (void **) &disp->WindowPos3sMESA;
d6831 2
d6834 2
a6835 3
    if(!disp->WindowPos3sMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3sARB", symbol_prefix);
        procp = (void **) &disp->WindowPos3sMESA;
d6839 2
d6842 1
a6842 3
    if(!disp->WindowPos3sMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3sMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos3sMESA;
d6846 2
d6849 1
a6849 3
    if(!disp->WindowPos3svMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3sv", symbol_prefix);
        procp = (void **) &disp->WindowPos3svMESA;
d6853 2
d6856 2
a6857 3
    if(!disp->WindowPos3svMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3svARB", symbol_prefix);
        procp = (void **) &disp->WindowPos3svMESA;
d6861 2
d6864 1
a6864 3
    if(!disp->WindowPos3svMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos3svMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos3svMESA;
d6868 2
d6871 1
a6871 3
    if(!disp->WindowPos4dMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos4dMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos4dMESA;
d6875 2
d6878 2
a6879 3
    if(!disp->WindowPos4dvMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos4dvMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos4dvMESA;
d6883 2
d6886 1
a6886 3
    if(!disp->WindowPos4fMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos4fMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos4fMESA;
d6890 2
d6893 1
a6893 3
    if(!disp->WindowPos4fvMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos4fvMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos4fvMESA;
d6897 2
d6900 2
a6901 3
    if(!disp->WindowPos4iMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos4iMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos4iMESA;
d6905 2
d6908 2
a6909 3
    if(!disp->WindowPos4ivMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos4ivMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos4ivMESA;
d6913 2
d6916 2
a6917 3
    if(!disp->WindowPos4sMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos4sMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos4sMESA;
d6921 2
d6924 1
a6924 3
    if(!disp->WindowPos4svMESA) {
        snprintf(symboln, sizeof(symboln), "%sWindowPos4svMESA", symbol_prefix);
        procp = (void **) &disp->WindowPos4svMESA;
d6928 2
d6931 2
a6932 3
    if(!disp->MultiModeDrawArraysIBM) {
        snprintf(symboln, sizeof(symboln), "%sMultiModeDrawArraysIBM", symbol_prefix);
        procp = (void **) &disp->MultiModeDrawArraysIBM;
d6936 2
d6939 2
a6940 3
    if(!disp->MultiModeDrawElementsIBM) {
        snprintf(symboln, sizeof(symboln), "%sMultiModeDrawElementsIBM", symbol_prefix);
        procp = (void **) &disp->MultiModeDrawElementsIBM;
d6944 2
d6947 2
a6948 3
    if(!disp->DeleteFencesNV) {
        snprintf(symboln, sizeof(symboln), "%sDeleteFencesNV", symbol_prefix);
        procp = (void **) &disp->DeleteFencesNV;
d6952 2
d6955 1
a6955 3
    if(!disp->FinishFenceNV) {
        snprintf(symboln, sizeof(symboln), "%sFinishFenceNV", symbol_prefix);
        procp = (void **) &disp->FinishFenceNV;
d6959 2
d6962 1
a6962 3
    if(!disp->GenFencesNV) {
        snprintf(symboln, sizeof(symboln), "%sGenFencesNV", symbol_prefix);
        procp = (void **) &disp->GenFencesNV;
d6966 2
d6969 1
a6969 3
    if(!disp->GetFenceivNV) {
        snprintf(symboln, sizeof(symboln), "%sGetFenceivNV", symbol_prefix);
        procp = (void **) &disp->GetFenceivNV;
d6973 2
d6976 2
a6977 3
    if(!disp->IsFenceNV) {
        snprintf(symboln, sizeof(symboln), "%sIsFenceNV", symbol_prefix);
        procp = (void **) &disp->IsFenceNV;
d6981 2
d6984 2
a6985 3
    if(!disp->SetFenceNV) {
        snprintf(symboln, sizeof(symboln), "%sSetFenceNV", symbol_prefix);
        procp = (void **) &disp->SetFenceNV;
d6989 2
d6992 2
a6993 3
    if(!disp->TestFenceNV) {
        snprintf(symboln, sizeof(symboln), "%sTestFenceNV", symbol_prefix);
        procp = (void **) &disp->TestFenceNV;
d6997 2
d7000 1
a7000 3
    if(!disp->AreProgramsResidentNV) {
        snprintf(symboln, sizeof(symboln), "%sAreProgramsResidentNV", symbol_prefix);
        procp = (void **) &disp->AreProgramsResidentNV;
d7004 2
d7007 2
a7008 3
    if(!disp->BindProgramNV) {
        snprintf(symboln, sizeof(symboln), "%sBindProgramARB", symbol_prefix);
        procp = (void **) &disp->BindProgramNV;
d7012 2
d7015 2
a7016 3
    if(!disp->BindProgramNV) {
        snprintf(symboln, sizeof(symboln), "%sBindProgramNV", symbol_prefix);
        procp = (void **) &disp->BindProgramNV;
d7020 2
d7023 2
a7024 3
    if(!disp->DeleteProgramsNV) {
        snprintf(symboln, sizeof(symboln), "%sDeleteProgramsARB", symbol_prefix);
        procp = (void **) &disp->DeleteProgramsNV;
d7028 2
d7031 1
a7031 3
    if(!disp->DeleteProgramsNV) {
        snprintf(symboln, sizeof(symboln), "%sDeleteProgramsNV", symbol_prefix);
        procp = (void **) &disp->DeleteProgramsNV;
d7035 2
d7038 2
a7039 3
    if(!disp->ExecuteProgramNV) {
        snprintf(symboln, sizeof(symboln), "%sExecuteProgramNV", symbol_prefix);
        procp = (void **) &disp->ExecuteProgramNV;
d7043 2
d7046 2
a7047 3
    if(!disp->GenProgramsNV) {
        snprintf(symboln, sizeof(symboln), "%sGenProgramsARB", symbol_prefix);
        procp = (void **) &disp->GenProgramsNV;
d7051 2
d7054 2
a7055 3
    if(!disp->GenProgramsNV) {
        snprintf(symboln, sizeof(symboln), "%sGenProgramsNV", symbol_prefix);
        procp = (void **) &disp->GenProgramsNV;
d7059 2
d7062 1
a7062 3
    if(!disp->GetProgramParameterdvNV) {
        snprintf(symboln, sizeof(symboln), "%sGetProgramParameterdvNV", symbol_prefix);
        procp = (void **) &disp->GetProgramParameterdvNV;
d7066 2
d7069 2
a7070 3
    if(!disp->GetProgramParameterfvNV) {
        snprintf(symboln, sizeof(symboln), "%sGetProgramParameterfvNV", symbol_prefix);
        procp = (void **) &disp->GetProgramParameterfvNV;
d7074 2
d7077 2
a7078 3
    if(!disp->GetProgramStringNV) {
        snprintf(symboln, sizeof(symboln), "%sGetProgramStringNV", symbol_prefix);
        procp = (void **) &disp->GetProgramStringNV;
d7082 2
d7085 2
a7086 3
    if(!disp->GetProgramivNV) {
        snprintf(symboln, sizeof(symboln), "%sGetProgramivNV", symbol_prefix);
        procp = (void **) &disp->GetProgramivNV;
d7090 2
d7093 1
a7093 3
    if(!disp->GetTrackMatrixivNV) {
        snprintf(symboln, sizeof(symboln), "%sGetTrackMatrixivNV", symbol_prefix);
        procp = (void **) &disp->GetTrackMatrixivNV;
d7097 2
d7100 2
a7101 3
    if(!disp->GetVertexAttribPointervNV) {
        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribPointerv", symbol_prefix);
        procp = (void **) &disp->GetVertexAttribPointervNV;
d7105 2
d7108 2
a7109 3
    if(!disp->GetVertexAttribPointervNV) {
        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribPointervARB", symbol_prefix);
        procp = (void **) &disp->GetVertexAttribPointervNV;
d7113 2
d7116 2
a7117 3
    if(!disp->GetVertexAttribPointervNV) {
        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribPointervNV", symbol_prefix);
        procp = (void **) &disp->GetVertexAttribPointervNV;
d7121 2
d7124 2
a7125 3
    if(!disp->GetVertexAttribdvNV) {
        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribdvNV", symbol_prefix);
        procp = (void **) &disp->GetVertexAttribdvNV;
d7129 2
d7132 2
a7133 3
    if(!disp->GetVertexAttribfvNV) {
        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribfvNV", symbol_prefix);
        procp = (void **) &disp->GetVertexAttribfvNV;
d7137 2
d7140 2
a7141 3
    if(!disp->GetVertexAttribivNV) {
        snprintf(symboln, sizeof(symboln), "%sGetVertexAttribivNV", symbol_prefix);
        procp = (void **) &disp->GetVertexAttribivNV;
d7145 2
d7148 2
a7149 3
    if(!disp->IsProgramNV) {
        snprintf(symboln, sizeof(symboln), "%sIsProgramARB", symbol_prefix);
        procp = (void **) &disp->IsProgramNV;
d7153 2
d7156 2
a7157 3
    if(!disp->IsProgramNV) {
        snprintf(symboln, sizeof(symboln), "%sIsProgramNV", symbol_prefix);
        procp = (void **) &disp->IsProgramNV;
d7161 2
d7164 2
a7165 3
    if(!disp->LoadProgramNV) {
        snprintf(symboln, sizeof(symboln), "%sLoadProgramNV", symbol_prefix);
        procp = (void **) &disp->LoadProgramNV;
d7169 2
d7172 2
a7173 3
    if(!disp->ProgramParameters4dvNV) {
        snprintf(symboln, sizeof(symboln), "%sProgramParameters4dvNV", symbol_prefix);
        procp = (void **) &disp->ProgramParameters4dvNV;
d7177 2
d7180 2
a7181 3
    if(!disp->ProgramParameters4fvNV) {
        snprintf(symboln, sizeof(symboln), "%sProgramParameters4fvNV", symbol_prefix);
        procp = (void **) &disp->ProgramParameters4fvNV;
d7185 2
d7188 2
a7189 3
    if(!disp->RequestResidentProgramsNV) {
        snprintf(symboln, sizeof(symboln), "%sRequestResidentProgramsNV", symbol_prefix);
        procp = (void **) &disp->RequestResidentProgramsNV;
d7193 2
d7196 2
a7197 3
    if(!disp->TrackMatrixNV) {
        snprintf(symboln, sizeof(symboln), "%sTrackMatrixNV", symbol_prefix);
        procp = (void **) &disp->TrackMatrixNV;
d7201 2
d7204 2
a7205 3
    if(!disp->VertexAttrib1dNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1dNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib1dNV;
d7209 2
d7212 2
a7213 3
    if(!disp->VertexAttrib1dvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1dvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib1dvNV;
d7217 2
d7220 2
a7221 3
    if(!disp->VertexAttrib1fNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1fNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib1fNV;
d7225 2
d7228 2
a7229 3
    if(!disp->VertexAttrib1fvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1fvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib1fvNV;
d7233 2
d7236 1
a7236 3
    if(!disp->VertexAttrib1sNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1sNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib1sNV;
d7240 2
d7243 2
a7244 3
    if(!disp->VertexAttrib1svNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib1svNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib1svNV;
d7248 2
d7251 2
a7252 3
    if(!disp->VertexAttrib2dNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2dNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib2dNV;
d7256 2
d7259 2
a7260 3
    if(!disp->VertexAttrib2dvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2dvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib2dvNV;
d7264 2
d7267 1
a7267 3
    if(!disp->VertexAttrib2fNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2fNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib2fNV;
d7271 2
d7274 2
a7275 3
    if(!disp->VertexAttrib2fvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2fvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib2fvNV;
d7279 2
d7282 1
a7282 3
    if(!disp->VertexAttrib2sNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2sNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib2sNV;
d7286 2
d7289 1
a7289 3
    if(!disp->VertexAttrib2svNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib2svNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib2svNV;
d7293 2
d7296 1
a7296 3
    if(!disp->VertexAttrib3dNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3dNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib3dNV;
d7300 2
d7303 1
a7303 3
    if(!disp->VertexAttrib3dvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3dvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib3dvNV;
d7307 2
d7310 1
a7310 3
    if(!disp->VertexAttrib3fNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3fNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib3fNV;
d7314 2
d7317 1
a7317 3
    if(!disp->VertexAttrib3fvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3fvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib3fvNV;
d7321 2
d7324 1
a7324 3
    if(!disp->VertexAttrib3sNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3sNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib3sNV;
d7328 2
d7331 1
a7331 3
    if(!disp->VertexAttrib3svNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib3svNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib3svNV;
d7335 2
d7338 1
a7338 3
    if(!disp->VertexAttrib4dNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4dNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4dNV;
d7342 2
d7345 2
a7346 3
    if(!disp->VertexAttrib4dvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4dvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4dvNV;
d7350 2
d7353 2
a7354 3
    if(!disp->VertexAttrib4fNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4fNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4fNV;
d7358 2
d7361 2
a7362 3
    if(!disp->VertexAttrib4fvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4fvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4fvNV;
d7366 2
d7369 2
a7370 3
    if(!disp->VertexAttrib4sNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4sNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4sNV;
d7374 2
d7377 2
a7378 3
    if(!disp->VertexAttrib4svNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4svNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4svNV;
d7382 2
d7385 1
a7385 3
    if(!disp->VertexAttrib4ubNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4ubNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4ubNV;
d7389 2
d7392 1
a7392 3
    if(!disp->VertexAttrib4ubvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttrib4ubvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttrib4ubvNV;
d7396 2
d7399 2
a7400 3
    if(!disp->VertexAttribPointerNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribPointerNV", symbol_prefix);
        procp = (void **) &disp->VertexAttribPointerNV;
d7404 2
d7407 2
a7408 3
    if(!disp->VertexAttribs1dvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribs1dvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttribs1dvNV;
d7412 2
d7415 2
a7416 3
    if(!disp->VertexAttribs1fvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribs1fvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttribs1fvNV;
d7420 2
d7423 2
a7424 3
    if(!disp->VertexAttribs1svNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribs1svNV", symbol_prefix);
        procp = (void **) &disp->VertexAttribs1svNV;
d7428 2
d7431 2
a7432 3
    if(!disp->VertexAttribs2dvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribs2dvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttribs2dvNV;
d7436 2
d7439 2
a7440 3
    if(!disp->VertexAttribs2fvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribs2fvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttribs2fvNV;
d7444 2
d7447 2
a7448 3
    if(!disp->VertexAttribs2svNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribs2svNV", symbol_prefix);
        procp = (void **) &disp->VertexAttribs2svNV;
d7452 2
d7455 2
a7456 3
    if(!disp->VertexAttribs3dvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribs3dvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttribs3dvNV;
d7460 2
d7463 2
a7464 3
    if(!disp->VertexAttribs3fvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribs3fvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttribs3fvNV;
d7468 2
d7471 2
a7472 3
    if(!disp->VertexAttribs3svNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribs3svNV", symbol_prefix);
        procp = (void **) &disp->VertexAttribs3svNV;
d7476 2
d7479 2
a7480 3
    if(!disp->VertexAttribs4dvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribs4dvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttribs4dvNV;
d7484 2
d7487 2
a7488 3
    if(!disp->VertexAttribs4fvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribs4fvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttribs4fvNV;
d7492 2
d7495 1
a7495 3
    if(!disp->VertexAttribs4svNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribs4svNV", symbol_prefix);
        procp = (void **) &disp->VertexAttribs4svNV;
d7499 2
d7502 1
a7502 3
    if(!disp->VertexAttribs4ubvNV) {
        snprintf(symboln, sizeof(symboln), "%sVertexAttribs4ubvNV", symbol_prefix);
        procp = (void **) &disp->VertexAttribs4ubvNV;
d7506 2
d7509 1
a7509 3
    if(!disp->AlphaFragmentOp1ATI) {
        snprintf(symboln, sizeof(symboln), "%sAlphaFragmentOp1ATI", symbol_prefix);
        procp = (void **) &disp->AlphaFragmentOp1ATI;
d7513 2
d7516 1
a7516 3
    if(!disp->AlphaFragmentOp2ATI) {
        snprintf(symboln, sizeof(symboln), "%sAlphaFragmentOp2ATI", symbol_prefix);
        procp = (void **) &disp->AlphaFragmentOp2ATI;
d7520 2
d7523 1
a7523 3
    if(!disp->AlphaFragmentOp3ATI) {
        snprintf(symboln, sizeof(symboln), "%sAlphaFragmentOp3ATI", symbol_prefix);
        procp = (void **) &disp->AlphaFragmentOp3ATI;
d7527 2
d7530 1
a7530 3
    if(!disp->BeginFragmentShaderATI) {
        snprintf(symboln, sizeof(symboln), "%sBeginFragmentShaderATI", symbol_prefix);
        procp = (void **) &disp->BeginFragmentShaderATI;
d7534 2
d7537 1
a7537 3
    if(!disp->BindFragmentShaderATI) {
        snprintf(symboln, sizeof(symboln), "%sBindFragmentShaderATI", symbol_prefix);
        procp = (void **) &disp->BindFragmentShaderATI;
d7541 2
d7544 1
a7544 3
    if(!disp->ColorFragmentOp1ATI) {
        snprintf(symboln, sizeof(symboln), "%sColorFragmentOp1ATI", symbol_prefix);
        procp = (void **) &disp->ColorFragmentOp1ATI;
d7548 2
d7551 1
a7551 3
    if(!disp->ColorFragmentOp2ATI) {
        snprintf(symboln, sizeof(symboln), "%sColorFragmentOp2ATI", symbol_prefix);
        procp = (void **) &disp->ColorFragmentOp2ATI;
d7555 2
d7558 1
a7558 3
    if(!disp->ColorFragmentOp3ATI) {
        snprintf(symboln, sizeof(symboln), "%sColorFragmentOp3ATI", symbol_prefix);
        procp = (void **) &disp->ColorFragmentOp3ATI;
d7562 2
d7565 1
a7565 3
    if(!disp->DeleteFragmentShaderATI) {
        snprintf(symboln, sizeof(symboln), "%sDeleteFragmentShaderATI", symbol_prefix);
        procp = (void **) &disp->DeleteFragmentShaderATI;
d7569 2
d7572 1
a7572 3
    if(!disp->EndFragmentShaderATI) {
        snprintf(symboln, sizeof(symboln), "%sEndFragmentShaderATI", symbol_prefix);
        procp = (void **) &disp->EndFragmentShaderATI;
d7576 2
d7579 1
a7579 3
    if(!disp->GenFragmentShadersATI) {
        snprintf(symboln, sizeof(symboln), "%sGenFragmentShadersATI", symbol_prefix);
        procp = (void **) &disp->GenFragmentShadersATI;
d7583 2
d7586 1
a7586 3
    if(!disp->PassTexCoordATI) {
        snprintf(symboln, sizeof(symboln), "%sPassTexCoordATI", symbol_prefix);
        procp = (void **) &disp->PassTexCoordATI;
d7590 2
d7593 1
a7593 3
    if(!disp->SampleMapATI) {
        snprintf(symboln, sizeof(symboln), "%sSampleMapATI", symbol_prefix);
        procp = (void **) &disp->SampleMapATI;
d7597 2
d7600 1
a7600 3
    if(!disp->SetFragmentShaderConstantATI) {
        snprintf(symboln, sizeof(symboln), "%sSetFragmentShaderConstantATI", symbol_prefix);
        procp = (void **) &disp->SetFragmentShaderConstantATI;
d7604 2
d7607 1
a7607 3
    if(!disp->PointParameteriNV) {
        snprintf(symboln, sizeof(symboln), "%sPointParameteri", symbol_prefix);
        procp = (void **) &disp->PointParameteriNV;
d7611 2
d7614 1
a7614 3
    if(!disp->PointParameteriNV) {
        snprintf(symboln, sizeof(symboln), "%sPointParameteriNV", symbol_prefix);
        procp = (void **) &disp->PointParameteriNV;
d7618 2
d7621 1
a7621 3
    if(!disp->PointParameterivNV) {
        snprintf(symboln, sizeof(symboln), "%sPointParameteriv", symbol_prefix);
        procp = (void **) &disp->PointParameterivNV;
d7625 2
d7628 1
a7628 3
    if(!disp->PointParameterivNV) {
        snprintf(symboln, sizeof(symboln), "%sPointParameterivNV", symbol_prefix);
        procp = (void **) &disp->PointParameterivNV;
d7632 2
d7635 1
a7635 3
    if(!disp->ActiveStencilFaceEXT) {
        snprintf(symboln, sizeof(symboln), "%sActiveStencilFaceEXT", symbol_prefix);
        procp = (void **) &disp->ActiveStencilFaceEXT;
d7639 2
d7642 1
a7642 3
    if(!disp->BindVertexArrayAPPLE) {
        snprintf(symboln, sizeof(symboln), "%sBindVertexArrayAPPLE", symbol_prefix);
        procp = (void **) &disp->BindVertexArrayAPPLE;
d7646 2
d7649 1
a7649 3
    if(!disp->DeleteVertexArraysAPPLE) {
        snprintf(symboln, sizeof(symboln), "%sDeleteVertexArrays", symbol_prefix);
        procp = (void **) &disp->DeleteVertexArraysAPPLE;
d7653 2
d7656 1
a7656 3
    if(!disp->DeleteVertexArraysAPPLE) {
        snprintf(symboln, sizeof(symboln), "%sDeleteVertexArraysAPPLE", symbol_prefix);
        procp = (void **) &disp->DeleteVertexArraysAPPLE;
d7660 2
d7663 1
a7663 3
    if(!disp->GenVertexArraysAPPLE) {
        snprintf(symboln, sizeof(symboln), "%sGenVertexArraysAPPLE", symbol_prefix);
        procp = (void **) &disp->GenVertexArraysAPPLE;
d7667 2
d7670 1
a7670 3
    if(!disp->IsVertexArrayAPPLE) {
        snprintf(symboln, sizeof(symboln), "%sIsVertexArray", symbol_prefix);
        procp = (void **) &disp->IsVertexArrayAPPLE;
d7674 2
d7677 1
a7677 3
    if(!disp->IsVertexArrayAPPLE) {
        snprintf(symboln, sizeof(symboln), "%sIsVertexArrayAPPLE", symbol_prefix);
        procp = (void **) &disp->IsVertexArrayAPPLE;
d7681 2
d7684 1
a7684 3
    if(!disp->GetProgramNamedParameterdvNV) {
        snprintf(symboln, sizeof(symboln), "%sGetProgramNamedParameterdvNV", symbol_prefix);
        procp = (void **) &disp->GetProgramNamedParameterdvNV;
d7688 2
d7691 1
a7691 3
    if(!disp->GetProgramNamedParameterfvNV) {
        snprintf(symboln, sizeof(symboln), "%sGetProgramNamedParameterfvNV", symbol_prefix);
        procp = (void **) &disp->GetProgramNamedParameterfvNV;
d7695 2
d7698 1
a7698 3
    if(!disp->ProgramNamedParameter4dNV) {
        snprintf(symboln, sizeof(symboln), "%sProgramNamedParameter4dNV", symbol_prefix);
        procp = (void **) &disp->ProgramNamedParameter4dNV;
d7702 2
d7705 1
a7705 3
    if(!disp->ProgramNamedParameter4dvNV) {
        snprintf(symboln, sizeof(symboln), "%sProgramNamedParameter4dvNV", symbol_prefix);
        procp = (void **) &disp->ProgramNamedParameter4dvNV;
d7709 2
d7712 1
a7712 3
    if(!disp->ProgramNamedParameter4fNV) {
        snprintf(symboln, sizeof(symboln), "%sProgramNamedParameter4fNV", symbol_prefix);
        procp = (void **) &disp->ProgramNamedParameter4fNV;
d7716 2
d7719 1
a7719 3
    if(!disp->ProgramNamedParameter4fvNV) {
        snprintf(symboln, sizeof(symboln), "%sProgramNamedParameter4fvNV", symbol_prefix);
        procp = (void **) &disp->ProgramNamedParameter4fvNV;
d7723 2
d7726 1
a7726 3
    if(!disp->DepthBoundsEXT) {
        snprintf(symboln, sizeof(symboln), "%sDepthBoundsEXT", symbol_prefix);
        procp = (void **) &disp->DepthBoundsEXT;
d7730 2
d7733 1
a7733 3
    if(!disp->BlendEquationSeparateEXT) {
        snprintf(symboln, sizeof(symboln), "%sBlendEquationSeparate", symbol_prefix);
        procp = (void **) &disp->BlendEquationSeparateEXT;
d7737 2
d7740 1
a7740 3
    if(!disp->BlendEquationSeparateEXT) {
        snprintf(symboln, sizeof(symboln), "%sBlendEquationSeparateEXT", symbol_prefix);
        procp = (void **) &disp->BlendEquationSeparateEXT;
d7744 2
d7747 1
a7747 3
    if(!disp->BlendEquationSeparateEXT) {
        snprintf(symboln, sizeof(symboln), "%sBlendEquationSeparateATI", symbol_prefix);
        procp = (void **) &disp->BlendEquationSeparateEXT;
d7751 2
d7754 1
a7754 3
    if(!disp->BindFramebufferEXT) {
        snprintf(symboln, sizeof(symboln), "%sBindFramebuffer", symbol_prefix);
        procp = (void **) &disp->BindFramebufferEXT;
d7758 2
d7761 1
a7761 3
    if(!disp->BindFramebufferEXT) {
        snprintf(symboln, sizeof(symboln), "%sBindFramebufferEXT", symbol_prefix);
        procp = (void **) &disp->BindFramebufferEXT;
d7765 2
d7768 1
a7768 3
    if(!disp->BindRenderbufferEXT) {
        snprintf(symboln, sizeof(symboln), "%sBindRenderbuffer", symbol_prefix);
        procp = (void **) &disp->BindRenderbufferEXT;
d7772 2
d7775 1
a7775 3
    if(!disp->BindRenderbufferEXT) {
        snprintf(symboln, sizeof(symboln), "%sBindRenderbufferEXT", symbol_prefix);
        procp = (void **) &disp->BindRenderbufferEXT;
d7779 2
d7782 1
a7782 3
    if(!disp->CheckFramebufferStatusEXT) {
        snprintf(symboln, sizeof(symboln), "%sCheckFramebufferStatus", symbol_prefix);
        procp = (void **) &disp->CheckFramebufferStatusEXT;
d7786 2
d7789 1
a7789 3
    if(!disp->CheckFramebufferStatusEXT) {
        snprintf(symboln, sizeof(symboln), "%sCheckFramebufferStatusEXT", symbol_prefix);
        procp = (void **) &disp->CheckFramebufferStatusEXT;
d7793 2
d7796 1
a7796 3
    if(!disp->DeleteFramebuffersEXT) {
        snprintf(symboln, sizeof(symboln), "%sDeleteFramebuffers", symbol_prefix);
        procp = (void **) &disp->DeleteFramebuffersEXT;
d7800 2
d7803 1
a7803 3
    if(!disp->DeleteFramebuffersEXT) {
        snprintf(symboln, sizeof(symboln), "%sDeleteFramebuffersEXT", symbol_prefix);
        procp = (void **) &disp->DeleteFramebuffersEXT;
d7807 2
d7810 1
a7810 3
    if(!disp->DeleteRenderbuffersEXT) {
        snprintf(symboln, sizeof(symboln), "%sDeleteRenderbuffers", symbol_prefix);
        procp = (void **) &disp->DeleteRenderbuffersEXT;
d7814 2
d7817 1
a7817 3
    if(!disp->DeleteRenderbuffersEXT) {
        snprintf(symboln, sizeof(symboln), "%sDeleteRenderbuffersEXT", symbol_prefix);
        procp = (void **) &disp->DeleteRenderbuffersEXT;
d7821 2
d7824 1953
a9776 3
    if(!disp->FramebufferRenderbufferEXT) {
        snprintf(symboln, sizeof(symboln), "%sFramebufferRenderbuffer", symbol_prefix);
        procp = (void **) &disp->FramebufferRenderbufferEXT;
d9780 2
d9783 2
a9784 3
    if(!disp->FramebufferRenderbufferEXT) {
        snprintf(symboln, sizeof(symboln), "%sFramebufferRenderbufferEXT", symbol_prefix);
        procp = (void **) &disp->FramebufferRenderbufferEXT;
d9788 2
d9791 2
a9792 3
    if(!disp->FramebufferTexture1DEXT) {
        snprintf(symboln, sizeof(symboln), "%sFramebufferTexture1D", symbol_prefix);
        procp = (void **) &disp->FramebufferTexture1DEXT;
d9796 2
d9799 2
a9800 3
    if(!disp->FramebufferTexture1DEXT) {
        snprintf(symboln, sizeof(symboln), "%sFramebufferTexture1DEXT", symbol_prefix);
        procp = (void **) &disp->FramebufferTexture1DEXT;
d9804 2
d9807 2
a9808 3
    if(!disp->FramebufferTexture2DEXT) {
        snprintf(symboln, sizeof(symboln), "%sFramebufferTexture2D", symbol_prefix);
        procp = (void **) &disp->FramebufferTexture2DEXT;
d9812 2
d9815 2
a9816 3
    if(!disp->FramebufferTexture2DEXT) {
        snprintf(symboln, sizeof(symboln), "%sFramebufferTexture2DEXT", symbol_prefix);
        procp = (void **) &disp->FramebufferTexture2DEXT;
d9820 2
d9823 2
a9824 3
    if(!disp->FramebufferTexture3DEXT) {
        snprintf(symboln, sizeof(symboln), "%sFramebufferTexture3D", symbol_prefix);
        procp = (void **) &disp->FramebufferTexture3DEXT;
d9828 2
d9831 2
a9832 3
    if(!disp->FramebufferTexture3DEXT) {
        snprintf(symboln, sizeof(symboln), "%sFramebufferTexture3DEXT", symbol_prefix);
        procp = (void **) &disp->FramebufferTexture3DEXT;
d9836 2
d9839 1
a9839 3
    if(!disp->GenFramebuffersEXT) {
        snprintf(symboln, sizeof(symboln), "%sGenFramebuffers", symbol_prefix);
        procp = (void **) &disp->GenFramebuffersEXT;
d9843 2
d9846 2
a9847 3
    if(!disp->GenFramebuffersEXT) {
        snprintf(symboln, sizeof(symboln), "%sGenFramebuffersEXT", symbol_prefix);
        procp = (void **) &disp->GenFramebuffersEXT;
d9851 2
d9854 2
a9855 3
    if(!disp->GenRenderbuffersEXT) {
        snprintf(symboln, sizeof(symboln), "%sGenRenderbuffers", symbol_prefix);
        procp = (void **) &disp->GenRenderbuffersEXT;
d9859 2
d9862 1
a9862 3
    if(!disp->GenRenderbuffersEXT) {
        snprintf(symboln, sizeof(symboln), "%sGenRenderbuffersEXT", symbol_prefix);
        procp = (void **) &disp->GenRenderbuffersEXT;
d9866 2
d9869 2
a9870 3
    if(!disp->GenerateMipmapEXT) {
        snprintf(symboln, sizeof(symboln), "%sGenerateMipmap", symbol_prefix);
        procp = (void **) &disp->GenerateMipmapEXT;
d9874 2
d9877 2
a9878 3
    if(!disp->GenerateMipmapEXT) {
        snprintf(symboln, sizeof(symboln), "%sGenerateMipmapEXT", symbol_prefix);
        procp = (void **) &disp->GenerateMipmapEXT;
d9882 2
d9885 2
a9886 3
    if(!disp->GetFramebufferAttachmentParameterivEXT) {
        snprintf(symboln, sizeof(symboln), "%sGetFramebufferAttachmentParameteriv", symbol_prefix);
        procp = (void **) &disp->GetFramebufferAttachmentParameterivEXT;
d9890 2
d9893 2
a9894 3
    if(!disp->GetFramebufferAttachmentParameterivEXT) {
        snprintf(symboln, sizeof(symboln), "%sGetFramebufferAttachmentParameterivEXT", symbol_prefix);
        procp = (void **) &disp->GetFramebufferAttachmentParameterivEXT;
d9898 2
d9901 2
a9902 3
    if(!disp->GetRenderbufferParameterivEXT) {
        snprintf(symboln, sizeof(symboln), "%sGetRenderbufferParameteriv", symbol_prefix);
        procp = (void **) &disp->GetRenderbufferParameterivEXT;
d9906 2
d9909 2
a9910 3
    if(!disp->GetRenderbufferParameterivEXT) {
        snprintf(symboln, sizeof(symboln), "%sGetRenderbufferParameterivEXT", symbol_prefix);
        procp = (void **) &disp->GetRenderbufferParameterivEXT;
d9914 2
d9917 2
a9918 3
    if(!disp->IsFramebufferEXT) {
        snprintf(symboln, sizeof(symboln), "%sIsFramebuffer", symbol_prefix);
        procp = (void **) &disp->IsFramebufferEXT;
d9922 2
d9925 1
a9925 3
    if(!disp->IsFramebufferEXT) {
        snprintf(symboln, sizeof(symboln), "%sIsFramebufferEXT", symbol_prefix);
        procp = (void **) &disp->IsFramebufferEXT;
d9929 2
d9932 2
a9933 3
    if(!disp->IsRenderbufferEXT) {
        snprintf(symboln, sizeof(symboln), "%sIsRenderbuffer", symbol_prefix);
        procp = (void **) &disp->IsRenderbufferEXT;
d9937 2
d9940 2
a9941 3
    if(!disp->IsRenderbufferEXT) {
        snprintf(symboln, sizeof(symboln), "%sIsRenderbufferEXT", symbol_prefix);
        procp = (void **) &disp->IsRenderbufferEXT;
d9945 2
d9948 2
a9949 3
    if(!disp->RenderbufferStorageEXT) {
        snprintf(symboln, sizeof(symboln), "%sRenderbufferStorage", symbol_prefix);
        procp = (void **) &disp->RenderbufferStorageEXT;
d9953 2
d9956 2
a9957 3
    if(!disp->RenderbufferStorageEXT) {
        snprintf(symboln, sizeof(symboln), "%sRenderbufferStorageEXT", symbol_prefix);
        procp = (void **) &disp->RenderbufferStorageEXT;
d9961 2
d9964 2
a9965 3
    if(!disp->BlitFramebufferEXT) {
        snprintf(symboln, sizeof(symboln), "%sBlitFramebuffer", symbol_prefix);
        procp = (void **) &disp->BlitFramebufferEXT;
d9969 2
d9972 1
a9972 3
    if(!disp->BlitFramebufferEXT) {
        snprintf(symboln, sizeof(symboln), "%sBlitFramebufferEXT", symbol_prefix);
        procp = (void **) &disp->BlitFramebufferEXT;
d9976 2
d9979 2
a9980 3
    if(!disp->FramebufferTextureLayerEXT) {
        snprintf(symboln, sizeof(symboln), "%sFramebufferTextureLayer", symbol_prefix);
        procp = (void **) &disp->FramebufferTextureLayerEXT;
d9984 2
d9987 2
a9988 3
    if(!disp->FramebufferTextureLayerEXT) {
        snprintf(symboln, sizeof(symboln), "%sFramebufferTextureLayerEXT", symbol_prefix);
        procp = (void **) &disp->FramebufferTextureLayerEXT;
d9992 2
d9995 1
a9995 3
    if(!disp->StencilFuncSeparateATI) {
        snprintf(symboln, sizeof(symboln), "%sStencilFuncSeparateATI", symbol_prefix);
        procp = (void **) &disp->StencilFuncSeparateATI;
d9999 2
d10002 2
a10003 3
    if(!disp->ProgramEnvParameters4fvEXT) {
        snprintf(symboln, sizeof(symboln), "%sProgramEnvParameters4fvEXT", symbol_prefix);
        procp = (void **) &disp->ProgramEnvParameters4fvEXT;
d10007 2
d10010 2
a10011 3
    if(!disp->ProgramLocalParameters4fvEXT) {
        snprintf(symboln, sizeof(symboln), "%sProgramLocalParameters4fvEXT", symbol_prefix);
        procp = (void **) &disp->ProgramLocalParameters4fvEXT;
d10015 2
d10018 2
a10019 3
    if(!disp->GetQueryObjecti64vEXT) {
        snprintf(symboln, sizeof(symboln), "%sGetQueryObjecti64vEXT", symbol_prefix);
        procp = (void **) &disp->GetQueryObjecti64vEXT;
d10023 2
d10026 2
a10027 3
    if(!disp->GetQueryObjectui64vEXT) {
        snprintf(symboln, sizeof(symboln), "%sGetQueryObjectui64vEXT", symbol_prefix);
        procp = (void **) &disp->GetQueryObjectui64vEXT;
d10031 2
d10034 2
a10035 3
    if(!disp->CullParameterdvEXT) {
        snprintf(symboln, sizeof(symboln), "%sCullParameterdvEXT", symbol_prefix);
        procp = (void **) &disp->CullParameterdvEXT;
d10039 2
d10042 2
a10043 3
    if(!disp->CullParameterfvEXT) {
        snprintf(symboln, sizeof(symboln), "%sCullParameterfvEXT", symbol_prefix);
        procp = (void **) &disp->CullParameterfvEXT;
d10047 7
a10058 1

@

