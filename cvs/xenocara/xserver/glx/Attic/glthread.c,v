head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.05.02.19.27.47;	author matthieu;	state dead;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.26;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.13;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  6.5.1
 *
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/*
 * XXX There's probably some work to do in order to make this file
 * truly reusable outside of Mesa.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#include <X11/Xfuncproto.h>
#endif

#include <stdlib.h>
#include <stdio.h>
#include "glthread.h"

/*
 * This file should still compile even when THREADS is not defined.
 * This is to make things easier to deal with on the makefile scene..
 */
#ifdef THREADS
#include <errno.h>

/*
 * Error messages
 */
#define INIT_TSD_ERROR "_glthread_: failed to allocate key for thread specific data"
#define GET_TSD_ERROR "_glthread_: failed to get thread specific data"
#define SET_TSD_ERROR "_glthread_: thread failed to set thread specific data"

/*
 * Magic number to determine if a TSD object has been initialized.
 * Kind of a hack but there doesn't appear to be a better cross-platform
 * solution.
 */
#define INIT_MAGIC 0xff8adc98

/*
 * POSIX Threads -- The best way to go if your platform supports them.
 *                  Solaris >= 2.5 have POSIX threads, IRIX >= 6.4 reportedly
 *                  has them, and many of the free Unixes now have them.
 *                  Be sure to use appropriate -mt or -D_REENTRANT type
 *                  compile flags when building.
 */
#ifdef PTHREADS

_X_EXPORT unsigned long
_glthread_GetID(void)
{
    return (unsigned long) pthread_self();
}

void
_glthread_InitTSD(_glthread_TSD * tsd)
{
    if (pthread_key_create(&tsd->key, NULL /*free */ ) != 0) {
        perror(INIT_TSD_ERROR);
        exit(-1);
    }
    tsd->initMagic = INIT_MAGIC;
}

void *
_glthread_GetTSD(_glthread_TSD * tsd)
{
    if (tsd->initMagic != (int) INIT_MAGIC) {
        _glthread_InitTSD(tsd);
    }
    return pthread_getspecific(tsd->key);
}

void
_glthread_SetTSD(_glthread_TSD * tsd, void *ptr)
{
    if (tsd->initMagic != (int) INIT_MAGIC) {
        _glthread_InitTSD(tsd);
    }
    if (pthread_setspecific(tsd->key, ptr) != 0) {
        perror(SET_TSD_ERROR);
        exit(-1);
    }
}

#endif                          /* PTHREADS */

/*
 * Win32 Threads.  The only available option for Windows 95/NT.
 * Be sure that you compile using the Multithreaded runtime, otherwise
 * bad things will happen.
 */
#ifdef WIN32_THREADS

void
FreeTSD(_glthread_TSD * p)
{
    if (p->initMagic == INIT_MAGIC) {
        TlsFree(p->key);
        p->initMagic = 0;
    }
}

void
InsteadOf_exit(int nCode)
{
    DWORD dwErr = GetLastError();
}

unsigned long
_glthread_GetID(void)
{
    return GetCurrentThreadId();
}

void
_glthread_InitTSD(_glthread_TSD * tsd)
{
    tsd->key = TlsAlloc();
    if (tsd->key == TLS_OUT_OF_INDEXES) {
        perror("Mesa:_glthread_InitTSD");
        InsteadOf_exit(-1);
    }
    tsd->initMagic = INIT_MAGIC;
}

void *
_glthread_GetTSD(_glthread_TSD * tsd)
{
    if (tsd->initMagic != INIT_MAGIC) {
        _glthread_InitTSD(tsd);
    }
    return TlsGetValue(tsd->key);
}

void
_glthread_SetTSD(_glthread_TSD * tsd, void *ptr)
{
    /* the following code assumes that the _glthread_TSD has been initialized
       to zero at creation */
    if (tsd->initMagic != INIT_MAGIC) {
        _glthread_InitTSD(tsd);
    }
    if (TlsSetValue(tsd->key, ptr) == 0) {
        perror("Mesa:_glthread_SetTSD");
        InsteadOf_exit(-1);
    }
}

#endif                          /* WIN32_THREADS */

#else                           /* THREADS */

/*
 * no-op functions
 */

_X_EXPORT unsigned long
_glthread_GetID(void)
{
    return 0;
}

void
_glthread_InitTSD(_glthread_TSD * tsd)
{
    (void) tsd;
}

void *
_glthread_GetTSD(_glthread_TSD * tsd)
{
    (void) tsd;
    return NULL;
}

void
_glthread_SetTSD(_glthread_TSD * tsd, void *ptr)
{
    (void) tsd;
    (void) ptr;
}

#endif                          /* THREADS */
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.4
log
@Update to xserver 1.11.2
@
text
@a24 1

a29 1

a38 1

a52 1

a59 2


d72 1
a72 1
   return (unsigned long) pthread_self();
a74 1

d76 1
a76 1
_glthread_InitTSD(_glthread_TSD *tsd)
d78 5
a82 5
   if (pthread_key_create(&tsd->key, NULL/*free*/) != 0) {
      perror(INIT_TSD_ERROR);
      exit(-1);
   }
   tsd->initMagic = INIT_MAGIC;
a84 1

d86 1
a86 1
_glthread_GetTSD(_glthread_TSD *tsd)
d88 4
a91 4
   if (tsd->initMagic != (int) INIT_MAGIC) {
      _glthread_InitTSD(tsd);
   }
   return pthread_getspecific(tsd->key);
a93 1

d95 1
a95 1
_glthread_SetTSD(_glthread_TSD *tsd, void *ptr)
d97 7
a103 7
   if (tsd->initMagic != (int) INIT_MAGIC) {
      _glthread_InitTSD(tsd);
   }
   if (pthread_setspecific(tsd->key, ptr) != 0) {
      perror(SET_TSD_ERROR);
      exit(-1);
   }
d106 1
a106 1
#endif /* PTHREADS */
d115 2
a116 1
void FreeTSD(_glthread_TSD *p)
d118 4
a121 4
   if (p->initMagic==INIT_MAGIC) {
      TlsFree(p->key);
      p->initMagic=0;
   }
d124 2
a125 1
void InsteadOf_exit(int nCode)
d127 1
a127 1
   DWORD dwErr=GetLastError();
d133 1
a133 1
   return GetCurrentThreadId();
a135 1

d137 1
a137 1
_glthread_InitTSD(_glthread_TSD *tsd)
d139 6
a144 6
   tsd->key = TlsAlloc();
   if (tsd->key == TLS_OUT_OF_INDEXES) {
      perror("Mesa:_glthread_InitTSD");
      InsteadOf_exit(-1);
   }
   tsd->initMagic = INIT_MAGIC;
a146 1

d148 1
a148 1
_glthread_GetTSD(_glthread_TSD *tsd)
d150 4
a153 4
   if (tsd->initMagic != INIT_MAGIC) {
      _glthread_InitTSD(tsd);
   }
   return TlsGetValue(tsd->key);
a155 1

d157 1
a157 1
_glthread_SetTSD(_glthread_TSD *tsd, void *ptr)
d159 9
a167 9
   /* the following code assumes that the _glthread_TSD has been initialized
      to zero at creation */
   if (tsd->initMagic != INIT_MAGIC) {
      _glthread_InitTSD(tsd);
   }
   if (TlsSetValue(tsd->key, ptr) == 0) {
	  perror("Mesa:_glthread_SetTSD");
	  InsteadOf_exit(-1);
   }
d170 1
a170 1
#endif /* WIN32_THREADS */
d172 1
a172 1
#else  /* THREADS */
d181 1
a181 1
   return 0;
a183 1

d185 1
a185 1
_glthread_InitTSD(_glthread_TSD *tsd)
d187 1
a187 1
   (void) tsd;
a189 1

d191 1
a191 1
_glthread_GetTSD(_glthread_TSD *tsd)
d193 2
a194 2
   (void) tsd;
   return NULL;
a196 1

d198 1
a198 1
_glthread_SetTSD(_glthread_TSD *tsd, void *ptr)
d200 2
a201 2
   (void) tsd;
   (void) ptr;
d204 1
a204 2

#endif /* THREADS */
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a116 70


/*
 * Solaris/Unix International Threads -- Use only if POSIX threads
 *   aren't available on your Unix platform.  Solaris 2.[34] are examples
 *   of platforms where this is the case.  Be sure to use -mt and/or
 *   -D_REENTRANT when compiling.
 */
#ifdef SOLARIS_THREADS
#define USE_LOCK_FOR_KEY	/* undef this to try a version without
				   lock for the global key... */

_X_EXPORT unsigned long
_glthread_GetID(void)
{
   OsAbort();   /* XXX not implemented yet */
   return (unsigned long) 0;
}


void
_glthread_InitTSD(_glthread_TSD *tsd)
{
   if ((errno = mutex_init(&tsd->keylock, 0, NULL)) != 0 ||
      (errno = thr_keycreate(&(tsd->key), free)) != 0) {
      perror(INIT_TSD_ERROR);
      exit(-1);
   }
   tsd->initMagic = INIT_MAGIC;
}


void *
_glthread_GetTSD(_glthread_TSD *tsd)
{
   void* ret;
   if (tsd->initMagic != INIT_MAGIC) {
      _glthread_InitTSD(tsd);
   }
#ifdef USE_LOCK_FOR_KEY
   mutex_lock(&tsd->keylock);
   thr_getspecific(tsd->key, &ret);
   mutex_unlock(&tsd->keylock);
#else
   if ((errno = thr_getspecific(tsd->key, &ret)) != 0) {
      perror(GET_TSD_ERROR);
      exit(-1);
   }
#endif
   return ret;
}


void
_glthread_SetTSD(_glthread_TSD *tsd, void *ptr)
{
   if (tsd->initMagic != INIT_MAGIC) {
      _glthread_InitTSD(tsd);
   }
   if ((errno = thr_setspecific(tsd->key, ptr)) != 0) {
      perror(SET_TSD_ERROR);
      exit(-1);
   }
}

#undef USE_LOCK_FOR_KEY
#endif /* SOLARIS_THREADS */



a181 91


/*
 * XFree86 has its own thread wrapper, Xthreads.h
 * We wrap it again for GL.
 */
#ifdef USE_XTHREADS

_X_EXPORT unsigned long
_glthread_GetID(void)
{
   return (unsigned long) xthread_self();
}


void
_glthread_InitTSD(_glthread_TSD *tsd)
{
   if (xthread_key_create(&tsd->key, NULL) != 0) {
      perror(INIT_TSD_ERROR);
      exit(-1);
   }
   tsd->initMagic = INIT_MAGIC;
}


void *
_glthread_GetTSD(_glthread_TSD *tsd)
{
   void *ptr;
   if (tsd->initMagic != INIT_MAGIC) {
      _glthread_InitTSD(tsd);
   }
   xthread_get_specific(tsd->key, &ptr);
   return ptr;
}


void
_glthread_SetTSD(_glthread_TSD *tsd, void *ptr)
{
   if (tsd->initMagic != INIT_MAGIC) {
      _glthread_InitTSD(tsd);
   }
   xthread_set_specific(tsd->key, ptr);
}

#endif /* XTHREAD */



/*
 * BeOS threads
 */
#ifdef BEOS_THREADS

unsigned long
_glthread_GetID(void)
{
   return (unsigned long) find_thread(NULL);
}

void
_glthread_InitTSD(_glthread_TSD *tsd)
{
   tsd->key = tls_allocate();
   tsd->initMagic = INIT_MAGIC;
}

void *
_glthread_GetTSD(_glthread_TSD *tsd)
{
   if (tsd->initMagic != (int) INIT_MAGIC) {
      _glthread_InitTSD(tsd);
   }
   return tls_get(tsd->key);
}

void
_glthread_SetTSD(_glthread_TSD *tsd, void *ptr)
{
   if (tsd->initMagic != (int) INIT_MAGIC) {
      _glthread_InitTSD(tsd);
   }
   tls_set(tsd->key, ptr);
}

#endif /* BEOS_THREADS */



a182 1

@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d34 1
d75 1
a75 1
unsigned long
d129 1
a129 1
unsigned long
d132 1
a132 1
   abort();   /* XXX not implemented yet */
d260 1
a260 1
unsigned long
d350 1
a350 1
unsigned long
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d37 1
@

