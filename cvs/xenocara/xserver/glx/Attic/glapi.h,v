head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.05.02.19.27.47;	author matthieu;	state dead;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.21;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.13;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@/*
 * Mesa 3-D graphics library
 * Version:  7.1
 *
 * Copyright (C) 1999-2008  Brian Paul   All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
 * AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * \mainpage Mesa GL API Module
 *
 * \section GLAPIIntroduction Introduction
 *
 * The Mesa GL API module is responsible for dispatching all the
 * gl*() functions.  All GL functions are dispatched by jumping through
 * the current dispatch table (basically a struct full of function
 * pointers.)
 *
 * A per-thread current dispatch table and per-thread current context
 * pointer are managed by this module too.
 *
 * This module is intended to be non-Mesa-specific so it can be used
 * with the X/DRI libGL also.
 */

#ifndef _GLAPI_H
#define _GLAPI_H

#define GL_GLEXT_PROTOTYPES

#include "GL/gl.h"
#include "GL/glext.h"
#include "glthread.h"

struct _glapi_table;

typedef void (*_glapi_proc) (void);     /* generic function pointer */

typedef void (*_glapi_warning_func) (void *ctx, const char *str, ...);

#if defined(USE_MGL_NAMESPACE)
#define _glapi_set_dispatch _mglapi_set_dispatch
#define _glapi_get_dispatch _mglapi_get_dispatch
#define _glapi_set_context _mglapi_set_context
#define _glapi_get_context _mglapi_get_context
#define _glapi_Context _mglapi_Context
#define _glapi_Dispatch _mglapi_Dispatch
#endif

/*
 * Number of extension functions which we can dynamically add at runtime.
 */
#define MAX_EXTENSION_FUNCS 300

/**
 ** Define the GET_CURRENT_CONTEXT() macro.
 ** \param C local variable which will hold the current context.
 **/
#if defined (GLX_USE_TLS)

const extern void *_glapi_Context;
const extern struct _glapi_table *_glapi_Dispatch;

extern TLS void *_glapi_tls_Context;

#define GET_CURRENT_CONTEXT(C)  GLcontext *C = (GLcontext *) _glapi_tls_Context

#else

extern void *_glapi_Context;
extern struct _glapi_table *_glapi_Dispatch;

#ifdef THREADS
#define GET_CURRENT_CONTEXT(C)  GLcontext *C = (GLcontext *) (_glapi_Context ? _glapi_Context : _glapi_get_context())
#else
#define GET_CURRENT_CONTEXT(C)  GLcontext *C = (GLcontext *) _glapi_Context
#endif

#endif                          /* defined (GLX_USE_TLS) */

/**
 ** GL API public functions
 **/

extern void
 _glapi_check_multithread(void);

extern void
 _glapi_set_context(void *context);

extern void *_glapi_get_context(void);

extern void
 _glapi_set_dispatch(struct _glapi_table *dispatch);

extern struct _glapi_table *_glapi_get_dispatch(void);

extern int
 _glapi_begin_dispatch_override(struct _glapi_table *override);

extern void
 _glapi_end_dispatch_override(int layer);

struct _glapi_table *_glapi_get_override_dispatch(int layer);

extern GLuint _glapi_get_dispatch_table_size(void);

extern int

_glapi_add_dispatch(const char *const *function_names,
                    const char *parameter_signature);

extern _glapi_proc _glapi_get_proc_address(const char *funcName);

extern struct _glapi_table *_glapi_create_table_from_handle(void *handle,
                                                            const char
                                                            *symbol_prefix);

#endif
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.3
log
@Update to xserver 1.11.2
@
text
@a24 1

a41 1

a50 1

d53 1
a53 3
typedef void (*_glapi_proc)(void); /* generic function pointer */

typedef void (*_glapi_warning_func)(void *ctx, const char *str, ...);
d55 1
a65 1

a70 1

d80 1
a80 1
extern TLS void * _glapi_tls_Context;
d82 1
a82 1
# define GET_CURRENT_CONTEXT(C)  GLcontext *C = (GLcontext *) _glapi_tls_Context
d89 5
a93 7
# ifdef THREADS
#  define GET_CURRENT_CONTEXT(C)  GLcontext *C = (GLcontext *) (_glapi_Context ? _glapi_Context : _glapi_get_context())
# else
#  define GET_CURRENT_CONTEXT(C)  GLcontext *C = (GLcontext *) _glapi_Context
# endif

#endif /* defined (GLX_USE_TLS) */
d95 1
d102 1
a102 1
_glapi_check_multithread(void);
d105 1
a105 1
_glapi_set_context(void *context);
d107 1
a107 2
extern void *
_glapi_get_context(void);
d110 1
a110 1
_glapi_set_dispatch(struct _glapi_table *dispatch);
d112 1
a112 2
extern struct _glapi_table *
_glapi_get_dispatch(void);
d115 1
a115 1
_glapi_begin_dispatch_override(struct _glapi_table *override);
d118 1
a118 1
_glapi_end_dispatch_override(int layer);
d120 1
a120 2
struct _glapi_table *
_glapi_get_override_dispatch(int layer);
d122 1
a122 2
extern GLuint
_glapi_get_dispatch_table_size(void);
a124 2
_glapi_add_dispatch( const char * const * function_names,
		     const char * parameter_signature );
d126 4
a129 2
extern _glapi_proc
_glapi_get_proc_address(const char *funcName);
d131 3
a133 2
extern struct _glapi_table *
_glapi_create_table_from_handle(void *handle, const char *symbol_prefix);
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d86 1
a86 2
extern __thread void * _glapi_tls_Context
    __attribute__((tls_model("initial-exec")));
a108 6
_glapi_noop_enable_warnings(GLboolean enable);

extern void
_glapi_set_warning_func(_glapi_warning_func func);

extern void
a110 1

a113 1

a116 1

a119 1

a122 1

a125 1

a128 1

a131 1

a134 5

extern void
_glapi_check_table(const struct _glapi_table *table);


a138 4
extern GLint
_glapi_get_proc_offset(const char *funcName);


d142 2
a143 4

extern const char *
_glapi_get_proc_name(GLuint offset);

@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d3 1
a3 1
 * Version:  6.5
d5 1
a5 1
 * Copyright (C) 1999-2006  Brian Paul   All Rights Reserved.
d47 1
d50 1
a50 1
#include "glapitable.h"
d54 4
d69 6
@

