head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.09.16.19.10.21;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	Te1daavkBLskZ8gc;

1.7
date	2014.12.09.17.58.52;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	vcnjRBuLQw44cPHf;

1.6
date	2014.05.02.19.27.47;	author matthieu;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2013.06.07.17.28.47;	author matthieu;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.04;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.14;	author matthieu;	state Exp;
branches;
next	;

1.5.4.1
date	2014.12.09.18.00.12;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.6.2.1
date	2014.12.09.17.59.32;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.8
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * (C) Copyright IBM Corporation 2005
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sub license,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * IBM,
 * AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <string.h>

#include <X11/Xmd.h>
#include <GL/gl.h>
#include <GL/glxproto.h>
#include <inttypes.h>
#include "indirect_size.h"
#include "indirect_size_get.h"
#include "indirect_dispatch.h"
#include "glxserver.h"
#include "glxbyteorder.h"
#include "singlesize.h"
#include "glxext.h"
#include "indirect_table.h"
#include "indirect_util.h"

#define __GLX_PAD(a) (((a)+3)&~3)

extern xGLXSingleReply __glXReply;

GLint
__glGetBooleanv_variable_size(GLenum e)
{
    if (e == GL_COMPRESSED_TEXTURE_FORMATS) {
        GLint temp;

        glGetIntegerv(GL_NUM_COMPRESSED_TEXTURE_FORMATS, &temp);
        return temp;
    }
    else {
        return 0;
    }
}

/**
 * Get a properly aligned buffer to hold reply data.
 *
 * \warning
 * This function assumes that \c local_buffer is already properly aligned.
 * It also assumes that \c alignment is a power of two.
 */
void *
__glXGetAnswerBuffer(__GLXclientState * cl, size_t required_size,
                     void *local_buffer, size_t local_size, unsigned alignment)
{
    void *buffer = local_buffer;
    const intptr_t mask = alignment - 1;

    if (local_size < required_size) {
        size_t worst_case_size;
        intptr_t temp_buf;

        if (required_size < SIZE_MAX - alignment)
            worst_case_size = required_size + alignment;
        else
            return NULL;

        if (cl->returnBufSize < worst_case_size) {
            void *temp = realloc(cl->returnBuf, worst_case_size);

            if (temp == NULL) {
                return NULL;
            }

            cl->returnBuf = temp;
            cl->returnBufSize = worst_case_size;
        }

        temp_buf = (intptr_t) cl->returnBuf;
        temp_buf = (temp_buf + mask) & ~mask;
        buffer = (void *) temp_buf;
    }

    return buffer;
}

/**
 * Send a GLX reply to the client.
 *
 * Technically speaking, there are several different ways to encode a GLX
 * reply.  The primary difference is whether or not certain fields (e.g.,
 * retval, size, and "pad3") are set.  This function gets around that by
 * always setting all of the fields to "reasonable" values.  This does no
 * harm to clients, but it does make the server-side code much more compact.
 */
void
__glXSendReply(ClientPtr client, const void *data, size_t elements,
               size_t element_size, GLboolean always_array, CARD32 retval)
{
    size_t reply_ints = 0;

    if (__glXErrorOccured()) {
        elements = 0;
    }
    else if ((elements > 1) || always_array) {
        reply_ints = bytes_to_int32(elements * element_size);
    }

    __glXReply.length = reply_ints;
    __glXReply.type = X_Reply;
    __glXReply.sequenceNumber = client->sequence;
    __glXReply.size = elements;
    __glXReply.retval = retval;

    /* It is faster on almost always every architecture to just copy the 8
     * bytes, even when not necessary, than check to see of the value of
     * elements requires it.  Copying the data when not needed will do no
     * harm.
     */

    (void) memcpy(&__glXReply.pad3, data, 8);
    WriteToClient(client, sz_xGLXSingleReply, &__glXReply);

    if (reply_ints != 0) {
        WriteToClient(client, reply_ints * 4, data);
    }
}

/**
 * Send a GLX reply to the client.
 *
 * Technically speaking, there are several different ways to encode a GLX
 * reply.  The primary difference is whether or not certain fields (e.g.,
 * retval, size, and "pad3") are set.  This function gets around that by
 * always setting all of the fields to "reasonable" values.  This does no
 * harm to clients, but it does make the server-side code much more compact.
 *
 * \warning
 * This function assumes that values stored in \c data will be byte-swapped
 * by the caller if necessary.
 */
void
__glXSendReplySwap(ClientPtr client, const void *data, size_t elements,
                   size_t element_size, GLboolean always_array, CARD32 retval)
{
    size_t reply_ints = 0;

    if (__glXErrorOccured()) {
        elements = 0;
    }
    else if ((elements > 1) || always_array) {
        reply_ints = bytes_to_int32(elements * element_size);
    }

    __glXReply.length = bswap_32(reply_ints);
    __glXReply.type = X_Reply;
    __glXReply.sequenceNumber = bswap_16(client->sequence);
    __glXReply.size = bswap_32(elements);
    __glXReply.retval = bswap_32(retval);

    /* It is faster on almost always every architecture to just copy the 8
     * bytes, even when not necessary, than check to see of the value of
     * elements requires it.  Copying the data when not needed will do no
     * harm.
     */

    (void) memcpy(&__glXReply.pad3, data, 8);
    WriteToClient(client, sz_xGLXSingleReply, &__glXReply);

    if (reply_ints != 0) {
        WriteToClient(client, reply_ints * 4, data);
    }
}

static int
get_decode_index(const struct __glXDispatchInfo *dispatch_info, unsigned opcode)
{
    int remaining_bits;
    int next_remain;
    const int_fast16_t *const tree = dispatch_info->dispatch_tree;
    int_fast16_t index;

    remaining_bits = dispatch_info->bits;
    if (opcode >= (1U << remaining_bits)) {
        return -1;
    }

    index = 0;
    for ( /* empty */ ; remaining_bits > 0; remaining_bits = next_remain) {
        unsigned mask;
        unsigned child_index;

        /* Calculate the slice of bits used by this node.
         *
         * If remaining_bits = 8 and tree[index] = 3, the mask of just the
         * remaining bits is 0x00ff and the mask for the remaining bits after
         * this node is 0x001f.  By taking 0x00ff & ~0x001f, we get 0x00e0.
         * This masks the 3 bits that we would want for this node.
         */

        next_remain = remaining_bits - tree[index];
        mask = ((1 << remaining_bits) - 1) & ~((1 << next_remain) - 1);

        /* Using the mask, calculate the index of the opcode in the node.
         * With that index, fetch the index of the next node.
         */

        child_index = (opcode & mask) >> next_remain;
        index = tree[index + 1 + child_index];

        /* If the next node is an empty leaf, the opcode is for a non-existant
         * function.  We're done.
         *
         * If the next node is a non-empty leaf, look up the function pointer
         * and return it.
         */

        if (index == EMPTY_LEAF) {
            return -1;
        }
        else if (IS_LEAF_INDEX(index)) {
            unsigned func_index;

            /* The value stored in the tree for a leaf node is the base of
             * the function pointers for that leaf node.  The offset for the
             * function for a particular opcode is the remaining bits in the
             * opcode.
             */

            func_index = -index;
            func_index += opcode & ((1 << next_remain) - 1);
            return func_index;
        }
    }

    /* We should *never* get here!!!
     */
    return -1;
}

void *
__glXGetProtocolDecodeFunction(const struct __glXDispatchInfo *dispatch_info,
                               int opcode, int swapped_version)
{
    const int func_index = get_decode_index(dispatch_info, opcode);

    return (func_index < 0)
        ? NULL
        : (void *) dispatch_info->
        dispatch_functions[func_index][swapped_version];
}

int
__glXGetProtocolSizeData(const struct __glXDispatchInfo *dispatch_info,
                         int opcode, __GLXrenderSizeData * data)
{
    if (dispatch_info->size_table != NULL) {
        const int func_index = get_decode_index(dispatch_info, opcode);

        if ((func_index >= 0)
            && (dispatch_info->size_table[func_index][0] != 0)) {
            const int var_offset = dispatch_info->size_table[func_index][1];

            data->bytes = dispatch_info->size_table[func_index][0];
            data->varsize = (var_offset != ~0)
                ? dispatch_info->size_func_table[var_offset]
                : NULL;

            return 0;
        }
    }

    return -1;
}
@


1.7
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d4 1
a4 1
 * 
d11 1
a11 1
 * 
d15 1
a15 1
 * 
d213 1
a213 1
         * 
@


1.6
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d76 1
a76 1
    const unsigned mask = alignment - 1;
d79 1
a79 1
        const size_t worst_case_size = required_size + alignment;
d81 5
@


1.6.2.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d76 1
a76 1
    const intptr_t mask = alignment - 1;
d79 1
a79 1
        size_t worst_case_size;
a80 5

        if (required_size < SIZE_MAX - alignment)
            worst_case_size = required_size + alignment;
        else
            return NULL;
@


1.5
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a41 4
#include "glapitable.h"
#include "glapi.h"
#include "glthread.h"
#include "dispatch.h"
d56 1
a56 2
        CALL_GetIntegerv(GET_DISPATCH(),
                         (GL_NUM_COMPRESSED_TEXTURE_FORMATS, &temp));
@


1.5.4.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d81 1
a81 1
    const intptr_t mask = alignment - 1;
d84 1
a84 1
        size_t worst_case_size;
a85 5

        if (required_size < SIZE_MAX - alignment)
            worst_case_size = required_size + alignment;
        else
            return NULL;
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d141 1
a141 1
    WriteToClient(client, sz_xGLXSingleReply, (char *) &__glXReply);
d144 1
a144 1
        WriteToClient(client, reply_ints * 4, (char *) data);
d187 1
a187 1
    WriteToClient(client, sz_xGLXSingleReply, (char *) &__glXReply);
d190 1
a190 1
        WriteToClient(client, reply_ints * 4, (char *) data);
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a49 1

a53 1

d55 1
a55 1
__glGetBooleanv_variable_size( GLenum e )
d57 2
a58 2
    if ( e == GL_COMPRESSED_TEXTURE_FORMATS ) {
	GLint temp;
d60 3
a62 3
	CALL_GetIntegerv( GET_DISPATCH(),
			  (GL_NUM_COMPRESSED_TEXTURE_FORMATS, & temp) );
	return temp;
d65 1
a65 1
	return 0;
a68 1

d77 2
a78 2
__glXGetAnswerBuffer( __GLXclientState * cl, size_t required_size,
    void * local_buffer, size_t local_size, unsigned alignment )
d80 1
a80 1
    void * buffer = local_buffer;
d83 1
a83 1
    if ( local_size < required_size ) {
d85 4
a88 1
        intptr_t  temp_buf;
d90 11
a100 14
        if ( cl->returnBufSize < worst_case_size ) {
	    void * temp = realloc( cl->returnBuf, worst_case_size );
	    
	    if ( temp == NULL ) {
	        return NULL;
	    }
	    
	    cl->returnBuf = temp;
	    cl->returnBufSize = worst_case_size;
	}
	
	temp_buf = (intptr_t) cl->returnBuf;
	temp_buf = (temp_buf + mask) & ~mask;
	buffer = (void *) temp_buf;
a105 1

d116 2
a117 2
__glXSendReply( ClientPtr client, const void * data, size_t elements,
    size_t element_size, GLboolean always_array, CARD32 retval )
d121 1
a121 1
    if ( __glXErrorOccured() ) {
d124 1
a124 1
    else if ( (elements > 1) || always_array ) {
d128 2
a129 2
    __glXReply.length =         reply_ints;
    __glXReply.type =           X_Reply;
d131 2
a132 3
    __glXReply.size =           elements;
    __glXReply.retval =         retval;

d140 2
a141 2
    (void) memcpy( & __glXReply.pad3, data, 8 );
    WriteToClient( client, sz_xGLXSingleReply, (char *) & __glXReply );
d143 2
a144 2
    if ( reply_ints != 0 ) {
        WriteToClient( client, reply_ints * 4, (char *) data );
a147 1

d162 2
a163 2
__glXSendReplySwap( ClientPtr client, const void * data, size_t elements,
    size_t element_size, GLboolean always_array, CARD32 retval )
d167 1
a167 1
    if ( __glXErrorOccured() ) {
d170 1
a170 1
    else if ( (elements > 1) || always_array ) {
d174 5
a178 6
    __glXReply.length =         bswap_32( reply_ints );
    __glXReply.type =           X_Reply;
    __glXReply.sequenceNumber = bswap_16( client->sequence );
    __glXReply.size =           bswap_32( elements );
    __glXReply.retval =         bswap_32( retval );

d186 2
a187 2
    (void) memcpy( & __glXReply.pad3, data, 8 );
    WriteToClient( client, sz_xGLXSingleReply, (char *) & __glXReply );
d189 2
a190 2
    if ( reply_ints != 0 ) {
        WriteToClient( client, reply_ints * 4, (char *) data );
a193 1

d195 1
a195 2
get_decode_index(const struct __glXDispatchInfo *dispatch_info,
		 unsigned opcode)
d199 1
a199 1
    const int_fast16_t * const tree = dispatch_info->dispatch_tree;
a201 1

d204 1
a204 1
	return -1;
d206 1
a206 1
    
d208 45
a252 50
    for (/* empty */; remaining_bits > 0; remaining_bits = next_remain) {
	unsigned mask;
	unsigned child_index;


	/* Calculate the slice of bits used by this node.
	 * 
	 * If remaining_bits = 8 and tree[index] = 3, the mask of just the
	 * remaining bits is 0x00ff and the mask for the remaining bits after
	 * this node is 0x001f.  By taking 0x00ff & ~0x001f, we get 0x00e0.
	 * This masks the 3 bits that we would want for this node.
	 */

	next_remain = remaining_bits - tree[index];
	mask = ((1 << remaining_bits) - 1) &
	  ~((1 << next_remain) - 1);


	/* Using the mask, calculate the index of the opcode in the node.
	 * With that index, fetch the index of the next node.
	 */

	child_index = (opcode & mask) >> next_remain;
	index = tree[index + 1 + child_index];


	/* If the next node is an empty leaf, the opcode is for a non-existant
	 * function.  We're done.
	 *
	 * If the next node is a non-empty leaf, look up the function pointer
	 * and return it.
	 */

	if (index == EMPTY_LEAF) {
	    return -1;
	}
	else if (IS_LEAF_INDEX(index)) {
	    unsigned func_index;


	    /* The value stored in the tree for a leaf node is the base of
	     * the function pointers for that leaf node.  The offset for the
	     * function for a particular opcode is the remaining bits in the
	     * opcode.
	     */

	    func_index = -index;
	    func_index += opcode & ((1 << next_remain) - 1);
	    return func_index;
	}
a259 1

d262 1
a262 1
			       int opcode, int swapped_version)
d266 4
a269 3
    return (func_index < 0) 
	? NULL 
	: (void *) dispatch_info->dispatch_functions[func_index][swapped_version];
a271 1

d274 1
a274 1
			 int opcode, __GLXrenderSizeData *data)
d277 1
a277 1
	const int func_index = get_decode_index(dispatch_info, opcode);
d279 8
a286 9
	if ((func_index >= 0) 
	    && (dispatch_info->size_table[func_index][0] != 0)) {
	    const int var_offset = 
		dispatch_info->size_table[func_index][1];

	    data->bytes = dispatch_info->size_table[func_index][0];
	    data->varsize = (var_offset != ~0)
		? dispatch_info->size_func_table[var_offset]
		: NULL;
d288 2
a289 2
	    return 0;
	}
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d91 1
a91 1
	    void * temp = xrealloc( cl->returnBuf, worst_case_size );
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d129 1
a129 1
        reply_ints = ((elements * element_size) + 3) >> 2;
d177 1
a177 1
        reply_ints = ((elements * element_size) + 3) >> 2;
@

