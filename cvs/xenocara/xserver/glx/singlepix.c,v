head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.12
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.10
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.6
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.12.21.11.41.45;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	OOAr3LJJfv7DyAHR;

1.8
date	2014.12.09.17.58.52;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	vcnjRBuLQw44cPHf;

1.7
date	2014.05.02.19.27.47;	author matthieu;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2013.06.07.17.28.48;	author matthieu;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.49;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.26;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.22;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.14;	author matthieu;	state Exp;
branches;
next	;

1.6.4.1
date	2014.12.09.18.00.12;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.7.2.1
date	2014.12.09.17.59.33;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.9
log
@Update to xorg-server  1.16.3.

Most of the 1.16.2->1.16.3 changes are the security patches that
where already there. This adds some extra fixes plus a few unrelated
bug fixes.
@
text
@/*
 * SGI FREE SOFTWARE LICENSE B (Version 2.0, Sept. 18, 2008)
 * Copyright (C) 1991-2000 Silicon Graphics, Inc. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice including the dates of first publication and
 * either this permission notice or a reference to
 * http://oss.sgi.com/projects/FreeB/
 * shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * SILICON GRAPHICS, INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of Silicon Graphics, Inc.
 * shall not be used in advertising or otherwise to promote the sale, use or
 * other dealings in this Software without prior written authorization from
 * Silicon Graphics, Inc.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "glxserver.h"
#include "glxext.h"
#include "singlesize.h"
#include "unpack.h"
#include "indirect_size_get.h"
#include "indirect_dispatch.h"

int
__glXDisp_ReadPixels(__GLXclientState * cl, GLbyte * pc)
{
    GLsizei width, height;
    GLenum format, type;
    GLboolean swapBytes, lsbFirst;
    GLint compsize;
    __GLXcontext *cx;
    ClientPtr client = cl->client;
    int error;
    char *answer, answerBuffer[200];

    REQUEST_FIXED_SIZE(xGLXSingleReq, 28);

    cx = __glXForceCurrent(cl, __GLX_GET_SINGLE_CONTEXT_TAG(pc), &error);
    if (!cx) {
        return error;
    }

    pc += __GLX_SINGLE_HDR_SIZE;
    width = *(GLsizei *) (pc + 8);
    height = *(GLsizei *) (pc + 12);
    format = *(GLenum *) (pc + 16);
    type = *(GLenum *) (pc + 20);
    swapBytes = *(GLboolean *) (pc + 24);
    lsbFirst = *(GLboolean *) (pc + 25);
    compsize = __glReadPixels_size(format, type, width, height);
    if (compsize < 0)
        return BadLength;

    glPixelStorei(GL_PACK_SWAP_BYTES, swapBytes);
    glPixelStorei(GL_PACK_LSB_FIRST, lsbFirst);
    __GLX_GET_ANSWER_BUFFER(answer, cl, compsize, 1);
    __glXClearErrorOccured();
    glReadPixels(*(GLint *) (pc + 0), *(GLint *) (pc + 4),
                 *(GLsizei *) (pc + 8), *(GLsizei *) (pc + 12),
                 *(GLenum *) (pc + 16), *(GLenum *) (pc + 20), answer);

    if (__glXErrorOccured()) {
        __GLX_BEGIN_REPLY(0);
        __GLX_SEND_HEADER();
    }
    else {
        __GLX_BEGIN_REPLY(compsize);
        __GLX_SEND_HEADER();
        __GLX_SEND_VOID_ARRAY(compsize);
    }
    cx->hasUnflushedCommands = GL_FALSE;
    return Success;
}

int
__glXDisp_GetTexImage(__GLXclientState * cl, GLbyte * pc)
{
    GLint level, compsize;
    GLenum format, type, target;
    GLboolean swapBytes;
    __GLXcontext *cx;
    ClientPtr client = cl->client;
    int error;
    char *answer, answerBuffer[200];
    GLint width = 0, height = 0, depth = 1;

    REQUEST_FIXED_SIZE(xGLXSingleReq, 20);

    cx = __glXForceCurrent(cl, __GLX_GET_SINGLE_CONTEXT_TAG(pc), &error);
    if (!cx) {
        return error;
    }

    pc += __GLX_SINGLE_HDR_SIZE;
    level = *(GLint *) (pc + 4);
    format = *(GLenum *) (pc + 8);
    type = *(GLenum *) (pc + 12);
    target = *(GLenum *) (pc + 0);
    swapBytes = *(GLboolean *) (pc + 16);

    glGetTexLevelParameteriv(target, level, GL_TEXTURE_WIDTH, &width);
    glGetTexLevelParameteriv(target, level, GL_TEXTURE_HEIGHT, &height);
    if (target == GL_TEXTURE_3D) {
        glGetTexLevelParameteriv(target, level, GL_TEXTURE_DEPTH, &depth);
    }
    /*
     * The three queries above might fail if we're in a state where queries
     * are illegal, but then width, height, and depth would still be zero anyway.
     */
    compsize =
        __glGetTexImage_size(target, level, format, type, width, height, depth);
    if (compsize < 0)
        return BadLength;

    glPixelStorei(GL_PACK_SWAP_BYTES, swapBytes);
    __GLX_GET_ANSWER_BUFFER(answer, cl, compsize, 1);
    __glXClearErrorOccured();
    glGetTexImage(*(GLenum *) (pc + 0), *(GLint *) (pc + 4),
                  *(GLenum *) (pc + 8), *(GLenum *) (pc + 12), answer);

    if (__glXErrorOccured()) {
        __GLX_BEGIN_REPLY(0);
        __GLX_SEND_HEADER();
    }
    else {
        __GLX_BEGIN_REPLY(compsize);
        ((xGLXGetTexImageReply *) &__glXReply)->width = width;
        ((xGLXGetTexImageReply *) &__glXReply)->height = height;
        ((xGLXGetTexImageReply *) &__glXReply)->depth = depth;
        __GLX_SEND_HEADER();
        __GLX_SEND_VOID_ARRAY(compsize);
    }
    return Success;
}

int
__glXDisp_GetPolygonStipple(__GLXclientState * cl, GLbyte * pc)
{
    GLboolean lsbFirst;
    __GLXcontext *cx;
    ClientPtr client = cl->client;
    int error;
    GLubyte answerBuffer[200];
    char *answer;

    REQUEST_FIXED_SIZE(xGLXSingleReq, 4);

    cx = __glXForceCurrent(cl, __GLX_GET_SINGLE_CONTEXT_TAG(pc), &error);
    if (!cx) {
        return error;
    }

    pc += __GLX_SINGLE_HDR_SIZE;
    lsbFirst = *(GLboolean *) (pc + 0);

    glPixelStorei(GL_PACK_LSB_FIRST, lsbFirst);
    __GLX_GET_ANSWER_BUFFER(answer, cl, 128, 1);

    __glXClearErrorOccured();
    glGetPolygonStipple((GLubyte *) answer);

    if (__glXErrorOccured()) {
        __GLX_BEGIN_REPLY(0);
        __GLX_SEND_HEADER();
    }
    else {
        __GLX_BEGIN_REPLY(128);
        __GLX_SEND_HEADER();
        __GLX_SEND_BYTE_ARRAY(128);
    }
    return Success;
}

static int
GetSeparableFilter(__GLXclientState * cl, GLbyte * pc, GLXContextTag tag)
{
    GLint compsize, compsize2;
    GLenum format, type, target;
    GLboolean swapBytes;
    __GLXcontext *cx;
    ClientPtr client = cl->client;
    int error;
    char *answer, answerBuffer[200];
    GLint width = 0, height = 0;

    cx = __glXForceCurrent(cl, tag, &error);
    if (!cx) {
        return error;
    }

    format = *(GLenum *) (pc + 4);
    type = *(GLenum *) (pc + 8);
    target = *(GLenum *) (pc + 0);
    swapBytes = *(GLboolean *) (pc + 12);

    /* target must be SEPARABLE_2D, however I guess we can let the GL
       barf on this one.... */

    glGetConvolutionParameteriv(target, GL_CONVOLUTION_WIDTH, &width);
    glGetConvolutionParameteriv(target, GL_CONVOLUTION_HEIGHT, &height);
    /*
     * The two queries above might fail if we're in a state where queries
     * are illegal, but then width and height would still be zero anyway.
     */
    compsize = __glGetTexImage_size(target, 1, format, type, width, 1, 1);
    compsize2 = __glGetTexImage_size(target, 1, format, type, height, 1, 1);

    if ((compsize = safe_pad(compsize)) < 0)
        return BadLength;
    if ((compsize2 = safe_pad(compsize2)) < 0)
        return BadLength;

    glPixelStorei(GL_PACK_SWAP_BYTES, swapBytes);
    __GLX_GET_ANSWER_BUFFER(answer, cl, safe_add(compsize, compsize2), 1);
    __glXClearErrorOccured();
    glGetSeparableFilter(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4),
                         *(GLenum *) (pc + 8), answer, answer + compsize, NULL);

    if (__glXErrorOccured()) {
        __GLX_BEGIN_REPLY(0);
        __GLX_SEND_HEADER();
    }
    else {
        __GLX_BEGIN_REPLY(compsize + compsize2);
        ((xGLXGetSeparableFilterReply *) &__glXReply)->width = width;
        ((xGLXGetSeparableFilterReply *) &__glXReply)->height = height;
        __GLX_SEND_HEADER();
        __GLX_SEND_VOID_ARRAY(compsize + compsize2);
    }

    return Success;
}

int
__glXDisp_GetSeparableFilter(__GLXclientState * cl, GLbyte * pc)
{
    const GLXContextTag tag = __GLX_GET_SINGLE_CONTEXT_TAG(pc);
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
    return GetSeparableFilter(cl, pc + __GLX_SINGLE_HDR_SIZE, tag);
}

int
__glXDisp_GetSeparableFilterEXT(__GLXclientState * cl, GLbyte * pc)
{
    const GLXContextTag tag = __GLX_GET_VENDPRIV_CONTEXT_TAG(pc);
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
    return GetSeparableFilter(cl, pc + __GLX_VENDPRIV_HDR_SIZE, tag);
}

static int
GetConvolutionFilter(__GLXclientState * cl, GLbyte * pc, GLXContextTag tag)
{
    GLint compsize;
    GLenum format, type, target;
    GLboolean swapBytes;
    __GLXcontext *cx;
    ClientPtr client = cl->client;
    int error;
    char *answer, answerBuffer[200];
    GLint width = 0, height = 0;

    cx = __glXForceCurrent(cl, tag, &error);
    if (!cx) {
        return error;
    }

    format = *(GLenum *) (pc + 4);
    type = *(GLenum *) (pc + 8);
    target = *(GLenum *) (pc + 0);
    swapBytes = *(GLboolean *) (pc + 12);

    glGetConvolutionParameteriv(target, GL_CONVOLUTION_WIDTH, &width);
    if (target == GL_CONVOLUTION_1D) {
        height = 1;
    }
    else {
        glGetConvolutionParameteriv(target, GL_CONVOLUTION_HEIGHT, &height);
    }
    /*
     * The two queries above might fail if we're in a state where queries
     * are illegal, but then width and height would still be zero anyway.
     */
    compsize = __glGetTexImage_size(target, 1, format, type, width, height, 1);
    if (compsize < 0)
        return BadLength;

    glPixelStorei(GL_PACK_SWAP_BYTES, swapBytes);
    __GLX_GET_ANSWER_BUFFER(answer, cl, compsize, 1);
    __glXClearErrorOccured();
    glGetConvolutionFilter(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4),
                           *(GLenum *) (pc + 8), answer);

    if (__glXErrorOccured()) {
        __GLX_BEGIN_REPLY(0);
        __GLX_SEND_HEADER();
    }
    else {
        __GLX_BEGIN_REPLY(compsize);
        ((xGLXGetConvolutionFilterReply *) &__glXReply)->width = width;
        ((xGLXGetConvolutionFilterReply *) &__glXReply)->height = height;
        __GLX_SEND_HEADER();
        __GLX_SEND_VOID_ARRAY(compsize);
    }

    return Success;
}

int
__glXDisp_GetConvolutionFilter(__GLXclientState * cl, GLbyte * pc)
{
    const GLXContextTag tag = __GLX_GET_SINGLE_CONTEXT_TAG(pc);
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
    return GetConvolutionFilter(cl, pc + __GLX_SINGLE_HDR_SIZE, tag);
}

int
__glXDisp_GetConvolutionFilterEXT(__GLXclientState * cl, GLbyte * pc)
{
    const GLXContextTag tag = __GLX_GET_VENDPRIV_CONTEXT_TAG(pc);
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
    return GetConvolutionFilter(cl, pc + __GLX_VENDPRIV_HDR_SIZE, tag);
}

static int
GetHistogram(__GLXclientState * cl, GLbyte * pc, GLXContextTag tag)
{
    GLint compsize;
    GLenum format, type, target;
    GLboolean swapBytes, reset;
    __GLXcontext *cx;
    ClientPtr client = cl->client;
    int error;
    char *answer, answerBuffer[200];
    GLint width = 0;

    cx = __glXForceCurrent(cl, tag, &error);
    if (!cx) {
        return error;
    }

    format = *(GLenum *) (pc + 4);
    type = *(GLenum *) (pc + 8);
    target = *(GLenum *) (pc + 0);
    swapBytes = *(GLboolean *) (pc + 12);
    reset = *(GLboolean *) (pc + 13);

    glGetHistogramParameteriv(target, GL_HISTOGRAM_WIDTH, &width);
    /*
     * The one query above might fail if we're in a state where queries
     * are illegal, but then width would still be zero anyway.
     */
    compsize = __glGetTexImage_size(target, 1, format, type, width, 1, 1);
    if (compsize < 0)
        return BadLength;

    glPixelStorei(GL_PACK_SWAP_BYTES, swapBytes);
    __GLX_GET_ANSWER_BUFFER(answer, cl, compsize, 1);
    __glXClearErrorOccured();
    glGetHistogram(target, reset, format, type, answer);

    if (__glXErrorOccured()) {
        __GLX_BEGIN_REPLY(0);
        __GLX_SEND_HEADER();
    }
    else {
        __GLX_BEGIN_REPLY(compsize);
        ((xGLXGetHistogramReply *) &__glXReply)->width = width;
        __GLX_SEND_HEADER();
        __GLX_SEND_VOID_ARRAY(compsize);
    }

    return Success;
}

int
__glXDisp_GetHistogram(__GLXclientState * cl, GLbyte * pc)
{
    const GLXContextTag tag = __GLX_GET_SINGLE_CONTEXT_TAG(pc);
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
    return GetHistogram(cl, pc + __GLX_SINGLE_HDR_SIZE, tag);
}

int
__glXDisp_GetHistogramEXT(__GLXclientState * cl, GLbyte * pc)
{
    const GLXContextTag tag = __GLX_GET_VENDPRIV_CONTEXT_TAG(pc);
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
    return GetHistogram(cl, pc + __GLX_VENDPRIV_HDR_SIZE, tag);
}

static int
GetMinmax(__GLXclientState * cl, GLbyte * pc, GLXContextTag tag)
{
    GLint compsize;
    GLenum format, type, target;
    GLboolean swapBytes, reset;
    __GLXcontext *cx;
    ClientPtr client = cl->client;
    int error;
    char *answer, answerBuffer[200];

    cx = __glXForceCurrent(cl, tag, &error);
    if (!cx) {
        return error;
    }

    format = *(GLenum *) (pc + 4);
    type = *(GLenum *) (pc + 8);
    target = *(GLenum *) (pc + 0);
    swapBytes = *(GLboolean *) (pc + 12);
    reset = *(GLboolean *) (pc + 13);

    compsize = __glGetTexImage_size(target, 1, format, type, 2, 1, 1);
    if (compsize < 0)
        return BadLength;

    glPixelStorei(GL_PACK_SWAP_BYTES, swapBytes);
    __GLX_GET_ANSWER_BUFFER(answer, cl, compsize, 1);
    __glXClearErrorOccured();
    glGetMinmax(target, reset, format, type, answer);

    if (__glXErrorOccured()) {
        __GLX_BEGIN_REPLY(0);
        __GLX_SEND_HEADER();
    }
    else {
        __GLX_BEGIN_REPLY(compsize);
        __GLX_SEND_HEADER();
        __GLX_SEND_VOID_ARRAY(compsize);
    }

    return Success;
}

int
__glXDisp_GetMinmax(__GLXclientState * cl, GLbyte * pc)
{
    const GLXContextTag tag = __GLX_GET_SINGLE_CONTEXT_TAG(pc);
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
    return GetMinmax(cl, pc + __GLX_SINGLE_HDR_SIZE, tag);
}

int
__glXDisp_GetMinmaxEXT(__GLXclientState * cl, GLbyte * pc)
{
    const GLXContextTag tag = __GLX_GET_VENDPRIV_CONTEXT_TAG(pc);
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
    return GetMinmax(cl, pc + __GLX_VENDPRIV_HDR_SIZE, tag);
}

static int
GetColorTable(__GLXclientState * cl, GLbyte * pc, GLXContextTag tag)
{
    GLint compsize;
    GLenum format, type, target;
    GLboolean swapBytes;
    __GLXcontext *cx;
    ClientPtr client = cl->client;
    int error;
    char *answer, answerBuffer[200];
    GLint width = 0;

    cx = __glXForceCurrent(cl, tag, &error);
    if (!cx) {
        return error;
    }

    target = *(GLenum *) (pc + 0);
    format = *(GLenum *) (pc + 4);
    type = *(GLenum *) (pc + 8);
    swapBytes = *(GLboolean *) (pc + 12);

    glGetColorTableParameteriv(target, GL_COLOR_TABLE_WIDTH, &width);
    /*
     * The one query above might fail if we're in a state where queries
     * are illegal, but then width would still be zero anyway.
     */
    compsize = __glGetTexImage_size(target, 1, format, type, width, 1, 1);
    if (compsize < 0)
        return BadLength;

    glPixelStorei(GL_PACK_SWAP_BYTES, swapBytes);
    __GLX_GET_ANSWER_BUFFER(answer, cl, compsize, 1);
    __glXClearErrorOccured();
    glGetColorTable(*(GLenum *) (pc + 0), *(GLenum *) (pc + 4),
                    *(GLenum *) (pc + 8), answer);

    if (__glXErrorOccured()) {
        __GLX_BEGIN_REPLY(0);
        __GLX_SEND_HEADER();
    }
    else {
        __GLX_BEGIN_REPLY(compsize);
        ((xGLXGetColorTableReply *) &__glXReply)->width = width;
        __GLX_SEND_HEADER();
        __GLX_SEND_VOID_ARRAY(compsize);
    }

    return Success;
}

int
__glXDisp_GetColorTable(__GLXclientState * cl, GLbyte * pc)
{
    const GLXContextTag tag = __GLX_GET_SINGLE_CONTEXT_TAG(pc);
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
    return GetColorTable(cl, pc + __GLX_SINGLE_HDR_SIZE, tag);
}

int
__glXDisp_GetColorTableSGI(__GLXclientState * cl, GLbyte * pc)
{
    const GLXContextTag tag = __GLX_GET_VENDPRIV_CONTEXT_TAG(pc);
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
    return GetColorTable(cl, pc + __GLX_VENDPRIV_HDR_SIZE, tag);
}
@


1.8
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d70 1
a70 1
        compsize = 0;
d131 1
a131 1
        compsize = 0;
d227 1
a227 1
        compsize = 0;
d229 1
a229 1
        compsize2 = 0;
d305 1
a305 1
        compsize = 0;
d376 1
a376 1
        compsize = 0;
d439 1
a439 1
        compsize = 0;
d506 1
a506 1
        compsize = 0;
@


1.7
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d54 2
d105 2
d164 2
d226 1
a226 1
    if (compsize < 0)
d228 1
a228 1
    if (compsize2 < 0)
a229 2
    compsize = __GLX_PAD(compsize);
    compsize2 = __GLX_PAD(compsize2);
d232 1
a232 1
    __GLX_GET_ANSWER_BUFFER(answer, cl, compsize + compsize2, 1);
d256 2
a257 1

d265 2
a266 1

d332 2
a333 1

d341 2
a342 1

d401 2
a402 1

d410 2
a411 1

d463 2
a464 1

d472 2
a473 1

d532 2
a533 1

d541 2
a542 1

@


1.7.2.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a53 2
    REQUEST_FIXED_SIZE(xGLXSingleReq, 28);

a102 2
    REQUEST_FIXED_SIZE(xGLXSingleReq, 20);

a159 2
    REQUEST_FIXED_SIZE(xGLXSingleReq, 4);

d220 1
a220 1
    if ((compsize = safe_pad(compsize)) < 0)
d222 1
a222 1
    if ((compsize2 = safe_pad(compsize2)) < 0)
d224 2
d228 1
a228 1
    __GLX_GET_ANSWER_BUFFER(answer, cl, safe_add(compsize, compsize2), 1);
d252 1
a252 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
d260 1
a260 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
d326 1
a326 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
d334 1
a334 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
d393 1
a393 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
d401 1
a401 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
d453 1
a453 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
d461 1
a461 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
d520 1
a520 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
d528 1
a528 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a40 4
#include "glapitable.h"
#include "glapi.h"
#include "glthread.h"
#include "dispatch.h"
d70 2
a71 2
    CALL_PixelStorei(GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes));
    CALL_PixelStorei(GET_DISPATCH(), (GL_PACK_LSB_FIRST, lsbFirst));
d74 3
a76 6
    CALL_ReadPixels(GET_DISPATCH(), (*(GLint *) (pc + 0),
                                     *(GLint *) (pc + 4),
                                     *(GLsizei *) (pc + 8),
                                     *(GLsizei *) (pc + 12),
                                     *(GLenum *) (pc + 16),
                                     *(GLenum *) (pc + 20), answer));
d115 2
a116 4
    CALL_GetTexLevelParameteriv(GET_DISPATCH(),
                                (target, level, GL_TEXTURE_WIDTH, &width));
    CALL_GetTexLevelParameteriv(GET_DISPATCH(),
                                (target, level, GL_TEXTURE_HEIGHT, &height));
d118 1
a118 2
        CALL_GetTexLevelParameteriv(GET_DISPATCH(),
                                    (target, level, GL_TEXTURE_DEPTH, &depth));
d129 1
a129 1
    CALL_PixelStorei(GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes));
d132 2
a133 4
    CALL_GetTexImage(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                      *(GLint *) (pc + 4),
                                      *(GLenum *) (pc + 8),
                                      *(GLenum *) (pc + 12), answer));
d168 1
a168 1
    CALL_PixelStorei(GET_DISPATCH(), (GL_PACK_LSB_FIRST, lsbFirst));
d172 1
a172 1
    CALL_GetPolygonStipple(GET_DISPATCH(), ((GLubyte *) answer));
d211 2
a212 4
    CALL_GetConvolutionParameteriv(GET_DISPATCH(),
                                   (target, GL_CONVOLUTION_WIDTH, &width));
    CALL_GetConvolutionParameteriv(GET_DISPATCH(),
                                   (target, GL_CONVOLUTION_HEIGHT, &height));
d227 1
a227 1
    CALL_PixelStorei(GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes));
d230 2
a231 4
    CALL_GetSeparableFilter(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                             *(GLenum *) (pc + 4),
                                             *(GLenum *) (pc + 8),
                                             answer, answer + compsize, NULL));
d286 1
a286 2
    CALL_GetConvolutionParameteriv(GET_DISPATCH(),
                                   (target, GL_CONVOLUTION_WIDTH, &width));
d291 1
a291 3
        CALL_GetConvolutionParameteriv(GET_DISPATCH(),
                                       (target, GL_CONVOLUTION_HEIGHT,
                                        &height));
d301 1
a301 1
    CALL_PixelStorei(GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes));
d304 2
a305 3
    CALL_GetConvolutionFilter(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                               *(GLenum *) (pc + 4),
                                               *(GLenum *) (pc + 8), answer));
d361 1
a361 2
    CALL_GetHistogramParameteriv(GET_DISPATCH(),
                                 (target, GL_HISTOGRAM_WIDTH, &width));
d370 1
a370 1
    CALL_PixelStorei(GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes));
d373 1
a373 1
    CALL_GetHistogram(GET_DISPATCH(), (target, reset, format, type, answer));
d431 1
a431 1
    CALL_PixelStorei(GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes));
d434 1
a434 1
    CALL_GetMinmax(GET_DISPATCH(), (target, reset, format, type, answer));
d487 1
a487 2
    CALL_GetColorTableParameteriv(GET_DISPATCH(),
                                  (target, GL_COLOR_TABLE_WIDTH, &width));
d496 1
a496 1
    CALL_PixelStorei(GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes));
d499 2
a500 3
    CALL_GetColorTable(GET_DISPATCH(), (*(GLenum *) (pc + 0),
                                        *(GLenum *) (pc + 4),
                                        *(GLenum *) (pc + 8), answer));
@


1.6.4.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a57 2
    REQUEST_FIXED_SIZE(xGLXSingleReq, 28);

a109 2
    REQUEST_FIXED_SIZE(xGLXSingleReq, 20);

a171 2
    REQUEST_FIXED_SIZE(xGLXSingleReq, 4);

d234 1
a234 1
    if ((compsize = safe_pad(compsize)) < 0)
d236 1
a236 1
    if ((compsize2 = safe_pad(compsize2)) < 0)
d238 2
d242 1
a242 1
    __GLX_GET_ANSWER_BUFFER(answer, cl, safe_add(compsize, compsize2), 1);
d268 1
a268 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
d276 1
a276 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
d346 1
a346 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
d354 1
a354 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
d414 1
a414 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
d422 1
a422 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
d474 1
a474 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
d482 1
a482 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
d543 1
a543 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXSingleReq, 16);
d551 1
a551 2
    ClientPtr client = cl->client;
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 16);
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d153 3
a155 3
        ((xGLXGetTexImageReply *) & __glXReply)->width = width;
        ((xGLXGetTexImageReply *) & __glXReply)->height = height;
        ((xGLXGetTexImageReply *) & __glXReply)->depth = depth;
d255 2
a256 2
        ((xGLXGetSeparableFilterReply *) & __glXReply)->width = width;
        ((xGLXGetSeparableFilterReply *) & __glXReply)->height = height;
d333 2
a334 2
        ((xGLXGetConvolutionFilterReply *) & __glXReply)->width = width;
        ((xGLXGetConvolutionFilterReply *) & __glXReply)->height = height;
d402 1
a402 1
        ((xGLXGetHistogramReply *) & __glXReply)->width = width;
d531 1
a531 1
        ((xGLXGetColorTableReply *) & __glXReply)->width = width;
@


1.4
log
@Update to xserver 1.11.2
@
text
@d46 2
a47 1
int __glXDisp_ReadPixels(__GLXclientState *cl, GLbyte *pc)
d60 1
a60 1
	return error;
d64 13
a76 12
    width = *(GLsizei *)(pc + 8);
    height = *(GLsizei *)(pc + 12);
    format = *(GLenum *)(pc + 16);
    type = *(GLenum *)(pc + 20);
    swapBytes = *(GLboolean *)(pc + 24);
    lsbFirst = *(GLboolean *)(pc + 25);
    compsize = __glReadPixels_size(format,type,width,height);
    if (compsize < 0) compsize = 0;

    CALL_PixelStorei( GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes) );
    CALL_PixelStorei( GET_DISPATCH(), (GL_PACK_LSB_FIRST, lsbFirst) );
    __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
d78 6
a83 9
    CALL_ReadPixels( GET_DISPATCH(), (
		 *(GLint    *)(pc + 0),
		 *(GLint    *)(pc + 4),
		 *(GLsizei  *)(pc + 8),
		 *(GLsizei  *)(pc + 12),
		 *(GLenum   *)(pc + 16),
		 *(GLenum   *)(pc + 20),
		 answer
		 ) );
d86 7
a92 6
	__GLX_BEGIN_REPLY(0);
	__GLX_SEND_HEADER();
    } else {
	__GLX_BEGIN_REPLY(compsize);
	__GLX_SEND_HEADER();
	__GLX_SEND_VOID_ARRAY(compsize);
d98 2
a99 1
int __glXDisp_GetTexImage(__GLXclientState *cl, GLbyte *pc)
d108 1
a108 1
    GLint width=0, height=0, depth=1;
d112 1
a112 1
	return error;
d116 13
a128 10
    level = *(GLint *)(pc + 4);
    format = *(GLenum *)(pc + 8);
    type = *(GLenum *)(pc + 12);
    target = *(GLenum *)(pc + 0);
    swapBytes = *(GLboolean *)(pc + 16);

    CALL_GetTexLevelParameteriv( GET_DISPATCH(), (target, level, GL_TEXTURE_WIDTH, &width) );
    CALL_GetTexLevelParameteriv( GET_DISPATCH(), (target, level, GL_TEXTURE_HEIGHT, &height) );
    if ( target == GL_TEXTURE_3D) {
	CALL_GetTexLevelParameteriv( GET_DISPATCH(), (target, level, GL_TEXTURE_DEPTH, &depth) );
d134 4
a137 2
    compsize = __glGetTexImage_size(target,level,format,type,width,height,depth);
    if (compsize < 0) compsize = 0;
d139 2
a140 2
    CALL_PixelStorei( GET_DISPATCH(), (GL_PACK_SWAP_BYTES, swapBytes) );
    __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
d142 4
a145 7
    CALL_GetTexImage( GET_DISPATCH(), (
		  *(GLenum   *)(pc + 0),
		  *(GLint    *)(pc + 4),
		  *(GLenum   *)(pc + 8),
		  *(GLenum   *)(pc + 12),
		  answer
		  ) );
d148 10
a157 9
	__GLX_BEGIN_REPLY(0);
	__GLX_SEND_HEADER();
    } else {
	__GLX_BEGIN_REPLY(compsize);
	((xGLXGetTexImageReply *)&__glXReply)->width = width;
	((xGLXGetTexImageReply *)&__glXReply)->height = height;
	((xGLXGetTexImageReply *)&__glXReply)->depth = depth;
	__GLX_SEND_HEADER();
	__GLX_SEND_VOID_ARRAY(compsize);
d162 2
a163 1
int __glXDisp_GetPolygonStipple(__GLXclientState *cl, GLbyte *pc)
d174 1
a174 1
	return error;
d178 1
a178 1
    lsbFirst = *(GLboolean *)(pc + 0);
d180 2
a181 2
    CALL_PixelStorei( GET_DISPATCH(), (GL_PACK_LSB_FIRST, lsbFirst) );
    __GLX_GET_ANSWER_BUFFER(answer,cl,128,1);
d184 1
a184 1
    CALL_GetPolygonStipple( GET_DISPATCH(), ((GLubyte  *) answer) );
d187 7
a193 6
	__GLX_BEGIN_REPLY(0);
	__GLX_SEND_HEADER();
    } else {
	__GLX_BEGIN_REPLY(128);
	__GLX_SEND_HEADER();
	__GLX_SEND_BYTE_ARRAY(128);
d198 2
a199 1
static int GetSeparableFilter(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
d208 1
a208 1
    GLint width=0, height=0;
d212 1
a212 1
	return error;
d215 4
a218 4
    format = *(GLenum *)(pc + 4);
    type = *(GLenum *)(pc + 8);
    target = *(GLenum *)(pc + 0);
    swapBytes = *(GLboolean *)(pc + 12);
d223 4
a226 2
    CALL_GetConvolutionParameteriv(GET_DISPATCH(), (target, GL_CONVOLUTION_WIDTH, &width));
    CALL_GetConvolutionParameteriv(GET_DISPATCH(), (target, GL_CONVOLUTION_HEIGHT, &height));
d231 2
a232 2
    compsize = __glGetTexImage_size(target,1,format,type,width,1,1);
    compsize2 = __glGetTexImage_size(target,1,format,type,height,1,1);
d234 4
a237 2
    if (compsize < 0) compsize = 0;
    if (compsize2 < 0) compsize2 = 0;
d242 1
a242 1
    __GLX_GET_ANSWER_BUFFER(answer,cl,compsize + compsize2,1);
d244 4
a247 8
    CALL_GetSeparableFilter( GET_DISPATCH(), (
		  *(GLenum   *)(pc + 0),
		  *(GLenum   *)(pc + 4),
		  *(GLenum   *)(pc + 8),
		  answer,
		  answer + compsize,
		  NULL
		  ) );
d250 9
a258 8
	__GLX_BEGIN_REPLY(0);
	__GLX_SEND_HEADER();
    } else {
	__GLX_BEGIN_REPLY(compsize + compsize2);
	((xGLXGetSeparableFilterReply *)&__glXReply)->width = width;
	((xGLXGetSeparableFilterReply *)&__glXReply)->height = height;
	__GLX_SEND_HEADER();
	__GLX_SEND_VOID_ARRAY(compsize + compsize2);
d264 2
a265 1
int __glXDisp_GetSeparableFilter(__GLXclientState *cl, GLbyte *pc)
d272 2
a273 1
int __glXDisp_GetSeparableFilterEXT(__GLXclientState *cl, GLbyte *pc)
d280 2
a281 2
static int GetConvolutionFilter(__GLXclientState *cl, GLbyte *pc,
				GLXContextTag tag)
d290 1
a290 1
    GLint width=0, height=0;
d294 1
a294 1
	return error;
d297 4
a300 4
    format = *(GLenum *)(pc + 4);
    type = *(GLenum *)(pc + 8);
    target = *(GLenum *)(pc + 0);
    swapBytes = *(GLboolean *)(pc + 12);
d302 2
a303 2
    CALL_GetConvolutionParameteriv(GET_DISPATCH(), 
				   (target, GL_CONVOLUTION_WIDTH, &width));
d306 5
a310 3
    } else {
	CALL_GetConvolutionParameteriv(GET_DISPATCH(),
				       (target, GL_CONVOLUTION_HEIGHT, &height));
d316 3
a318 2
    compsize = __glGetTexImage_size(target,1,format,type,width,height,1);
    if (compsize < 0) compsize = 0;
d321 1
a321 1
    __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
d323 3
a325 6
    CALL_GetConvolutionFilter( GET_DISPATCH(), (
		  *(GLenum   *)(pc + 0),
		  *(GLenum   *)(pc + 4),
		  *(GLenum   *)(pc + 8),
		  answer
		  ) );
d328 9
a336 8
	__GLX_BEGIN_REPLY(0);
	__GLX_SEND_HEADER();
    } else {
	__GLX_BEGIN_REPLY(compsize);
	((xGLXGetConvolutionFilterReply *)&__glXReply)->width = width;
	((xGLXGetConvolutionFilterReply *)&__glXReply)->height = height;
	__GLX_SEND_HEADER();
	__GLX_SEND_VOID_ARRAY(compsize);
d342 2
a343 1
int __glXDisp_GetConvolutionFilter(__GLXclientState *cl, GLbyte *pc)
d350 2
a351 1
int __glXDisp_GetConvolutionFilterEXT(__GLXclientState *cl, GLbyte *pc)
d358 2
a359 1
static int GetHistogram(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
d368 1
a368 1
    GLint width=0;
d372 1
a372 1
	return error;
d375 5
a379 5
    format = *(GLenum *)(pc + 4);
    type = *(GLenum *)(pc + 8);
    target = *(GLenum *)(pc + 0);
    swapBytes = *(GLboolean *)(pc + 12);
    reset = *(GLboolean *)(pc + 13);
d382 1
a382 1
				 (target, GL_HISTOGRAM_WIDTH, &width));
d387 3
a389 2
    compsize = __glGetTexImage_size(target,1,format,type,width,1,1);
    if (compsize < 0) compsize = 0;
d392 1
a392 1
    __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
d397 8
a404 7
	__GLX_BEGIN_REPLY(0);
	__GLX_SEND_HEADER();
    } else {
	__GLX_BEGIN_REPLY(compsize);
	((xGLXGetHistogramReply *)&__glXReply)->width = width;
	__GLX_SEND_HEADER();
	__GLX_SEND_VOID_ARRAY(compsize);
d410 2
a411 1
int __glXDisp_GetHistogram(__GLXclientState *cl, GLbyte *pc)
d418 2
a419 1
int __glXDisp_GetHistogramEXT(__GLXclientState *cl, GLbyte *pc)
d426 2
a427 1
static int GetMinmax(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
d439 1
a439 1
	return error;
d442 9
a450 8
    format = *(GLenum *)(pc + 4);
    type = *(GLenum *)(pc + 8);
    target = *(GLenum *)(pc + 0);
    swapBytes = *(GLboolean *)(pc + 12);
    reset = *(GLboolean *)(pc + 13);

    compsize = __glGetTexImage_size(target,1,format,type,2,1,1);
    if (compsize < 0) compsize = 0;
d453 1
a453 1
    __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
d458 7
a464 6
	__GLX_BEGIN_REPLY(0);
	__GLX_SEND_HEADER();
    } else {
	__GLX_BEGIN_REPLY(compsize);
	__GLX_SEND_HEADER();
	__GLX_SEND_VOID_ARRAY(compsize);
d470 2
a471 1
int __glXDisp_GetMinmax(__GLXclientState *cl, GLbyte *pc)
d478 2
a479 1
int __glXDisp_GetMinmaxEXT(__GLXclientState *cl, GLbyte *pc)
d486 2
a487 1
static int GetColorTable(__GLXclientState *cl, GLbyte *pc, GLXContextTag tag)
d496 1
a496 1
    GLint width=0;
d500 1
a500 1
	return error;
d503 4
a506 4
    target = *(GLenum *)(pc + 0);
    format = *(GLenum *)(pc + 4);
    type = *(GLenum *)(pc + 8);
    swapBytes = *(GLboolean *)(pc + 12);
d508 2
a509 2
    CALL_GetColorTableParameteriv(GET_DISPATCH(), 
				  (target, GL_COLOR_TABLE_WIDTH, &width));
d514 3
a516 2
    compsize = __glGetTexImage_size(target,1,format,type,width,1,1);
    if (compsize < 0) compsize = 0;
d519 1
a519 1
    __GLX_GET_ANSWER_BUFFER(answer,cl,compsize,1);
d521 3
a523 6
    CALL_GetColorTable( GET_DISPATCH(), (
		  *(GLenum   *)(pc + 0),
		  *(GLenum   *)(pc + 4),
		  *(GLenum   *)(pc + 8),
		  answer
		  ) );
d526 8
a533 7
	__GLX_BEGIN_REPLY(0);
	__GLX_SEND_HEADER();
    } else {
	__GLX_BEGIN_REPLY(compsize);
	((xGLXGetColorTableReply *)&__glXReply)->width = width;
	__GLX_SEND_HEADER();
	__GLX_SEND_VOID_ARRAY(compsize);
d539 2
a540 1
int __glXDisp_GetColorTable(__GLXclientState *cl, GLbyte *pc)
d547 2
a548 1
int __glXDisp_GetColorTableSGI(__GLXclientState *cl, GLbyte *pc)
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d94 1
a94 1
    __GLX_NOTE_FLUSHED_CMDS(cx);
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a30 1
#define NEED_REPLIES
d94 1
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d2 28
a29 33
** License Applicability. Except to the extent portions of this file are
** made subject to an alternative license as permitted in the SGI Free
** Software License B, Version 1.1 (the "License"), the contents of this
** file are subject only to the provisions of the License. You may not use
** this file except in compliance with the License. You may obtain a copy
** of the License at Silicon Graphics, Inc., attn: Legal Services, 1600
** Amphitheatre Parkway, Mountain View, CA 94043-1351, or at:
** 
** http://oss.sgi.com/projects/FreeB
** 
** Note that, as provided in the License, the Software is distributed on an
** "AS IS" basis, with ALL EXPRESS AND IMPLIED WARRANTIES AND CONDITIONS
** DISCLAIMED, INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTIES AND
** CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A
** PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
** 
** Original Code. The Original Code is: OpenGL Sample Implementation,
** Version 1.2.1, released January 26, 2000, developed by Silicon Graphics,
** Inc. The Original Code is Copyright (c) 1991-2000 Silicon Graphics, Inc.
** Copyright in any portions created by third parties is as indicated
** elsewhere herein. All Rights Reserved.
** 
** Additional Notice Provisions: The application programming interfaces
** established by SGI in conjunction with the Original Code are The
** OpenGL(R) Graphics System: A Specification (Version 1.2.1), released
** April 1, 1999; The OpenGL(R) Graphics System Utility Library (Version
** 1.3), released November 4, 1998; and OpenGL(R) Graphics with the X
** Window System(R) (Version 1.3), released October 19, 1998. This software
** was created using the OpenGL(R) version 1.2.1 Sample Implementation
** published by SGI, but has not been independently verified as being
** compliant with the OpenGL(R) version 1.2.1 Specification.
**
*/
@

