head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.12.09.17.58.52;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	vcnjRBuLQw44cPHf;

1.4
date	2014.05.02.19.27.47;	author matthieu;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2012.06.10.13.21.22;	author matthieu;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	2010.07.27.19.02.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.14;	author matthieu;	state Exp;
branches;
next	;

1.3.8.1
date	2014.12.09.18.00.12;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.4.2.1
date	2014.12.09.17.59.33;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.5
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@/*
 * (C) Copyright IBM Corporation 2006
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * on the rights to use, copy, modify, merge, publish, distribute, sub
 * license, and/or sell copies of the Software, and to permit persons to whom
 * the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
 * THE COPYRIGHT HOLDERS AND/OR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "glxserver.h"
#include "glxutil.h"
#include "glxext.h"
#include "singlesize.h"
#include "unpack.h"
#include "indirect_size_get.h"
#include "indirect_dispatch.h"
#include "glxbyteorder.h"

static int DoSwapInterval(__GLXclientState * cl, GLbyte * pc, int do_swap);

int
DoSwapInterval(__GLXclientState * cl, GLbyte * pc, int do_swap)
{
    xGLXVendorPrivateReq *const req = (xGLXVendorPrivateReq *) pc;
    ClientPtr client = cl->client;
    const GLXContextTag tag = req->contextTag;
    __GLXcontext *cx;
    GLint interval;

    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 4);

    cx = __glXLookupContextByTag(cl, tag);

    if ((cx == NULL) || (cx->pGlxScreen == NULL)) {
        client->errorValue = tag;
        return __glXError(GLXBadContext);
    }

    if (cx->pGlxScreen->swapInterval == NULL) {
        LogMessage(X_ERROR, "AIGLX: cx->pGlxScreen->swapInterval == NULL\n");
        client->errorValue = tag;
        return __glXError(GLXUnsupportedPrivateRequest);
    }

    if (cx->drawPriv == NULL) {
        client->errorValue = tag;
        return BadValue;
    }

    pc += __GLX_VENDPRIV_HDR_SIZE;
    interval = (do_swap)
        ? bswap_32(*(int *) (pc + 0))
        : *(int *) (pc + 0);

    if (interval <= 0)
        return BadValue;

    (void) (*cx->pGlxScreen->swapInterval) (cx->drawPriv, interval);
    return Success;
}

int
__glXDisp_SwapIntervalSGI(__GLXclientState * cl, GLbyte * pc)
{
    return DoSwapInterval(cl, pc, 0);
}

int
__glXDispSwap_SwapIntervalSGI(__GLXclientState * cl, GLbyte * pc)
{
    return DoSwapInterval(cl, pc, 1);
}
@


1.4
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d49 2
@


1.4.2.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a48 2
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 4);

@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a35 4
#include "glapitable.h"
#include "glapi.h"
#include "glthread.h"
#include "dispatch.h"
@


1.3.8.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a52 2
    REQUEST_FIXED_SIZE(xGLXVendorPrivateReq, 4);

@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a39 1
#include "glapioffsets.h"
d42 1
a42 1
static int DoSwapInterval(__GLXclientState *cl, GLbyte *pc, int do_swap);
d44 2
a45 1
int DoSwapInterval(__GLXclientState *cl, GLbyte *pc, int do_swap)
d47 1
a47 1
    xGLXVendorPrivateReq * const req = (xGLXVendorPrivateReq *) pc;
a52 1

d56 2
a57 2
	client->errorValue = tag;
	return __glXError(GLXBadContext);
d59 1
a59 1
    
d61 3
a63 3
	LogMessage(X_ERROR, "AIGLX: cx->pGlxScreen->swapInterval == NULL\n");
	client->errorValue = tag;
	return __glXError(GLXUnsupportedPrivateRequest);
d67 2
a68 2
	client->errorValue = tag;
	return BadValue;
d70 1
a70 1
    
d73 2
a74 2
      ? bswap_32(*(int *)(pc + 0))
      :          *(int *)(pc + 0);
d77 1
a77 1
	return BadValue;
d79 1
a79 1
    (void) (*cx->pGlxScreen->swapInterval)(cx->drawPriv, interval);
d83 2
a84 1
int __glXDisp_SwapIntervalSGI(__GLXclientState *cl, GLbyte *pc)
d89 2
a90 1
int __glXDispSwap_SwapIntervalSGI(__GLXclientState *cl, GLbyte *pc)
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a24 1
#define NEED_REPLIES
a55 2
    LogMessage(X_ERROR, "%s: cx = %p, GLX screen = %p\n", __func__,
	       cx, (cx == NULL) ? NULL : cx->pGlxScreen);
d69 1
a69 1
	return __glXError(GLXBadDrawable);
d76 3
@

