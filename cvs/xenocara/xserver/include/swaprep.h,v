head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.16
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.14
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.05.29.12.02.39;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	s0SI41sEunLdyFfd;

1.3
date	2012.06.10.13.21.30;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.17;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.17;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.12;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/************************************************************

Copyright 1996 by Thomas E. Dickey <dickey@@clark.net>

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of the above listed
copyright holder(s) not be used in advertising or publicity pertaining
to distribution of the software without specific, written prior
permission.

THE ABOVE LISTED COPYRIGHT HOLDER(S) DISCLAIM ALL WARRANTIES WITH REGARD
TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS, IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE
LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

********************************************************/

#ifndef SWAPREP_H
#define SWAPREP_H 1

extern void Swap32Write(ClientPtr /* pClient */ ,
                        int /* size */ ,
                        CARD32 * /* pbuf */ );

extern void CopySwap32Write(ClientPtr /* pClient */ ,
                            int /* size */ ,
                            CARD32 * /* pbuf */ );

extern void CopySwap16Write(ClientPtr /* pClient */ ,
                            int /* size */ ,
                            short * /* pbuf */ );

extern void SGenericReply(ClientPtr /* pClient */ ,
                          int /* size */ ,
                          xGenericReply * /* pRep */ );

extern void SGetWindowAttributesReply(ClientPtr /* pClient */ ,
                                      int /* size */ ,
                                      xGetWindowAttributesReply *
                                      /* pRep */ );

extern void SGetGeometryReply(ClientPtr /* pClient */ ,
                              int /* size */ ,
                              xGetGeometryReply * /* pRep */ );

extern void SQueryTreeReply(ClientPtr /* pClient */ ,
                            int /* size */ ,
                            xQueryTreeReply * /* pRep */ );

extern void SInternAtomReply(ClientPtr /* pClient */ ,
                             int /* size */ ,
                             xInternAtomReply * /* pRep */ );

extern void SGetAtomNameReply(ClientPtr /* pClient */ ,
                              int /* size */ ,
                              xGetAtomNameReply * /* pRep */ );

extern void SGetPropertyReply(ClientPtr /* pClient */ ,
                              int /* size */ ,
                              xGetPropertyReply * /* pRep */ );

extern void SListPropertiesReply(ClientPtr /* pClient */ ,
                                 int /* size */ ,
                                 xListPropertiesReply * /* pRep */ );

extern void SGetSelectionOwnerReply(ClientPtr /* pClient */ ,
                                    int /* size */ ,
                                    xGetSelectionOwnerReply *
                                    /* pRep */ );

extern void SQueryPointerReply(ClientPtr /* pClient */ ,
                               int /* size */ ,
                               xQueryPointerReply * /* pRep */ );

extern void SwapTimeCoordWrite(ClientPtr /* pClient */ ,
                               int /* size */ ,
                               xTimecoord * /* pRep */ );

extern void SGetMotionEventsReply(ClientPtr /* pClient */ ,
                                  int /* size */ ,
                                  xGetMotionEventsReply *       /* pRep */
    );

extern void STranslateCoordsReply(ClientPtr /* pClient */ ,
                                  int /* size */ ,
                                  xTranslateCoordsReply *       /* pRep */
    );

extern void SGetInputFocusReply(ClientPtr /* pClient */ ,
                                int /* size */ ,
                                xGetInputFocusReply * /* pRep */ );

extern void SQueryKeymapReply(ClientPtr /* pClient */ ,
                              int /* size */ ,
                              xQueryKeymapReply * /* pRep */ );

extern void SQueryFontReply(ClientPtr /* pClient */ ,
                            int /* size */ ,
                            xQueryFontReply * /* pRep */ );

extern void SQueryTextExtentsReply(ClientPtr /* pClient */ ,
                                   int /* size */ ,
                                   xQueryTextExtentsReply *     /* pRep */
    );

extern void SListFontsReply(ClientPtr /* pClient */ ,
                            int /* size */ ,
                            xListFontsReply * /* pRep */ );

extern void SListFontsWithInfoReply(ClientPtr /* pClient */ ,
                                    int /* size */ ,
                                    xListFontsWithInfoReply *
                                    /* pRep */ );

extern void SGetFontPathReply(ClientPtr /* pClient */ ,
                              int /* size */ ,
                              xGetFontPathReply * /* pRep */ );

extern void SGetImageReply(ClientPtr /* pClient */ ,
                           int /* size */ ,
                           xGetImageReply * /* pRep */ );

extern void SListInstalledColormapsReply(ClientPtr /* pClient */ ,
                                         int /* size */ ,
                                         xListInstalledColormapsReply
                                         * /* pRep */ );

extern void SAllocColorReply(ClientPtr /* pClient */ ,
                             int /* size */ ,
                             xAllocColorReply * /* pRep */ );

extern void SAllocNamedColorReply(ClientPtr /* pClient */ ,
                                  int /* size */ ,
                                  xAllocNamedColorReply *       /* pRep */
    );

extern void SAllocColorCellsReply(ClientPtr /* pClient */ ,
                                  int /* size */ ,
                                  xAllocColorCellsReply *       /* pRep */
    );

extern void SAllocColorPlanesReply(ClientPtr /* pClient */ ,
                                   int /* size */ ,
                                   xAllocColorPlanesReply *     /* pRep */
    );

extern void SQColorsExtend(ClientPtr /* pClient */ ,
                           int /* size */ ,
                           xrgb * /* prgb */ );

extern void SQueryColorsReply(ClientPtr /* pClient */ ,
                              int /* size */ ,
                              xQueryColorsReply * /* pRep */ );

extern void SLookupColorReply(ClientPtr /* pClient */ ,
                              int /* size */ ,
                              xLookupColorReply * /* pRep */ );

extern void SQueryBestSizeReply(ClientPtr /* pClient */ ,
                                int /* size */ ,
                                xQueryBestSizeReply * /* pRep */ );

extern void SListExtensionsReply(ClientPtr /* pClient */ ,
                                 int /* size */ ,
                                 xListExtensionsReply * /* pRep */ );

extern void SGetKeyboardMappingReply(ClientPtr /* pClient */ ,
                                     int /* size */ ,
                                     xGetKeyboardMappingReply *
                                     /* pRep */ );

extern void SGetPointerMappingReply(ClientPtr /* pClient */ ,
                                    int /* size */ ,
                                    xGetPointerMappingReply *
                                    /* pRep */ );

extern void SGetModifierMappingReply(ClientPtr /* pClient */ ,
                                     int /* size */ ,
                                     xGetModifierMappingReply *
                                     /* pRep */ );

extern void SGetKeyboardControlReply(ClientPtr /* pClient */ ,
                                     int /* size */ ,
                                     xGetKeyboardControlReply *
                                     /* pRep */ );

extern void SGetPointerControlReply(ClientPtr /* pClient */ ,
                                    int /* size */ ,
                                    xGetPointerControlReply *
                                    /* pRep */ );

extern void SGetScreenSaverReply(ClientPtr /* pClient */ ,
                                 int /* size */ ,
                                 xGetScreenSaverReply * /* pRep */ );

extern void SLHostsExtend(ClientPtr /* pClient */ ,
                          int /* size */ ,
                          char * /* buf */ );

extern void SListHostsReply(ClientPtr /* pClient */ ,
                            int /* size */ ,
                            xListHostsReply * /* pRep */ );

extern void SErrorEvent(xError * /* from */ ,
                        xError * /* to */ );

extern void SwapConnSetupInfo(char * /* pInfo */ ,
                              char * /* pInfoTBase */ );

extern void WriteSConnectionInfo(ClientPtr /* pClient */ ,
                                 unsigned long /* size */ ,
                                 char * /* pInfo */ );

extern void SwapConnSetupPrefix(xConnSetupPrefix * /* pcspFrom */ ,
                                xConnSetupPrefix * /* pcspTo */ );

extern void WriteSConnSetupPrefix(ClientPtr /* pClient */ ,
                                  xConnSetupPrefix * /* pcsp */ );

#undef SWAPREP_PROC
#define SWAPREP_PROC(func) extern void func(xEvent * /* from */, xEvent * /* to */)

SWAPREP_PROC(SCirculateEvent);
SWAPREP_PROC(SClientMessageEvent);
SWAPREP_PROC(SColormapEvent);
SWAPREP_PROC(SConfigureNotifyEvent);
SWAPREP_PROC(SConfigureRequestEvent);
SWAPREP_PROC(SCreateNotifyEvent);
SWAPREP_PROC(SDestroyNotifyEvent);
SWAPREP_PROC(SEnterLeaveEvent);
SWAPREP_PROC(SExposeEvent);
SWAPREP_PROC(SFocusEvent);
SWAPREP_PROC(SGraphicsExposureEvent);
SWAPREP_PROC(SGravityEvent);
SWAPREP_PROC(SKeyButtonPtrEvent);
SWAPREP_PROC(SKeymapNotifyEvent);
SWAPREP_PROC(SMapNotifyEvent);
SWAPREP_PROC(SMapRequestEvent);
SWAPREP_PROC(SMappingEvent);
SWAPREP_PROC(SNoExposureEvent);
SWAPREP_PROC(SPropertyEvent);
SWAPREP_PROC(SReparentEvent);
SWAPREP_PROC(SResizeRequestEvent);
SWAPREP_PROC(SSelectionClearEvent);
SWAPREP_PROC(SSelectionNotifyEvent);
SWAPREP_PROC(SSelectionRequestEvent);
SWAPREP_PROC(SUnmapNotifyEvent);
SWAPREP_PROC(SVisibilityEvent);

#undef SWAPREP_PROC

#endif                          /* SWAPREP_H */
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d29 15
a43 3
extern _X_EXPORT void Swap32Write(ClientPtr /* pClient */ ,
                                  int /* size */ ,
                                  CARD32 * /* pbuf */ );
d45 1
a45 1
extern _X_EXPORT void CopySwap32Write(ClientPtr /* pClient */ ,
d47 14
a60 1
                                      CARD32 * /* pbuf */ );
d62 11
a72 3
extern _X_EXPORT void CopySwap16Write(ClientPtr /* pClient */ ,
                                      int /* size */ ,
                                      short * /* pbuf */ );
d74 1
a74 1
extern _X_EXPORT void SGenericReply(ClientPtr /* pClient */ ,
d76 10
a85 1
                                    xGenericReply * /* pRep */ );
d87 9
a95 8
extern _X_EXPORT void SGetWindowAttributesReply(ClientPtr /* pClient */ ,
                                                int /* size */ ,
                                                xGetWindowAttributesReply *
                                                /* pRep */ );

extern _X_EXPORT void SGetGeometryReply(ClientPtr /* pClient */ ,
                                        int /* size */ ,
                                        xGetGeometryReply * /* pRep */ );
d97 20
a116 3
extern _X_EXPORT void SQueryTreeReply(ClientPtr /* pClient */ ,
                                      int /* size */ ,
                                      xQueryTreeReply * /* pRep */ );
d118 4
a121 20
extern _X_EXPORT void SInternAtomReply(ClientPtr /* pClient */ ,
                                       int /* size */ ,
                                       xInternAtomReply * /* pRep */ );

extern _X_EXPORT void SGetAtomNameReply(ClientPtr /* pClient */ ,
                                        int /* size */ ,
                                        xGetAtomNameReply * /* pRep */ );

extern _X_EXPORT void SGetPropertyReply(ClientPtr /* pClient */ ,
                                        int /* size */ ,
                                        xGetPropertyReply * /* pRep */ );

extern _X_EXPORT void SListPropertiesReply(ClientPtr /* pClient */ ,
                                           int /* size */ ,
                                           xListPropertiesReply * /* pRep */ );

extern _X_EXPORT void SGetSelectionOwnerReply(ClientPtr /* pClient */ ,
                                              int /* size */ ,
                                              xGetSelectionOwnerReply *
                                              /* pRep */ );
d123 7
a129 3
extern _X_EXPORT void SQueryPointerReply(ClientPtr /* pClient */ ,
                                         int /* size */ ,
                                         xQueryPointerReply * /* pRep */ );
d131 1
a131 1
extern _X_EXPORT void SwapTimeCoordWrite(ClientPtr /* pClient */ ,
d133 2
a134 1
                                         xTimecoord * /* pRep */ );
d136 3
a138 17
extern _X_EXPORT void SGetMotionEventsReply(ClientPtr /* pClient */ ,
                                            int /* size */ ,
                                            xGetMotionEventsReply * /* pRep */
                                            );

extern _X_EXPORT void STranslateCoordsReply(ClientPtr /* pClient */ ,
                                            int /* size */ ,
                                            xTranslateCoordsReply * /* pRep */
                                            );

extern _X_EXPORT void SGetInputFocusReply(ClientPtr /* pClient */ ,
                                          int /* size */ ,
                                          xGetInputFocusReply * /* pRep */ );

extern _X_EXPORT void SQueryKeymapReply(ClientPtr /* pClient */ ,
                                        int /* size */ ,
                                        xQueryKeymapReply * /* pRep */ );
d140 4
a143 3
extern _X_EXPORT void SQueryFontReply(ClientPtr /* pClient */ ,
                                      int /* size */ ,
                                      xQueryFontReply * /* pRep */ );
d145 4
a148 4
extern _X_EXPORT void SQueryTextExtentsReply(ClientPtr /* pClient */ ,
                                             int /* size */ ,
                                             xQueryTextExtentsReply * /* pRep */
                                             );
d150 24
a173 3
extern _X_EXPORT void SListFontsReply(ClientPtr /* pClient */ ,
                                      int /* size */ ,
                                      xListFontsReply * /* pRep */ );
d175 1
a175 10
extern _X_EXPORT void SListFontsWithInfoReply(ClientPtr /* pClient */ ,
                                              int /* size */ ,
                                              xListFontsWithInfoReply *
                                              /* pRep */ );

extern _X_EXPORT void SGetFontPathReply(ClientPtr /* pClient */ ,
                                        int /* size */ ,
                                        xGetFontPathReply * /* pRep */ );

extern _X_EXPORT void SGetImageReply(ClientPtr /* pClient */ ,
d177 2
a178 1
                                     xGetImageReply * /* pRep */ );
d180 4
a183 23
extern _X_EXPORT void SListInstalledColormapsReply(ClientPtr /* pClient */ ,
                                                   int /* size */ ,
                                                   xListInstalledColormapsReply
                                                   * /* pRep */ );

extern _X_EXPORT void SAllocColorReply(ClientPtr /* pClient */ ,
                                       int /* size */ ,
                                       xAllocColorReply * /* pRep */ );

extern _X_EXPORT void SAllocNamedColorReply(ClientPtr /* pClient */ ,
                                            int /* size */ ,
                                            xAllocNamedColorReply * /* pRep */
                                            );

extern _X_EXPORT void SAllocColorCellsReply(ClientPtr /* pClient */ ,
                                            int /* size */ ,
                                            xAllocColorCellsReply * /* pRep */
                                            );

extern _X_EXPORT void SAllocColorPlanesReply(ClientPtr /* pClient */ ,
                                             int /* size */ ,
                                             xAllocColorPlanesReply * /* pRep */
                                             );
d185 1
a185 1
extern _X_EXPORT void SQColorsExtend(ClientPtr /* pClient */ ,
d187 2
a188 1
                                     xrgb * /* prgb */ );
d190 4
a193 44
extern _X_EXPORT void SQueryColorsReply(ClientPtr /* pClient */ ,
                                        int /* size */ ,
                                        xQueryColorsReply * /* pRep */ );

extern _X_EXPORT void SLookupColorReply(ClientPtr /* pClient */ ,
                                        int /* size */ ,
                                        xLookupColorReply * /* pRep */ );

extern _X_EXPORT void SQueryBestSizeReply(ClientPtr /* pClient */ ,
                                          int /* size */ ,
                                          xQueryBestSizeReply * /* pRep */ );

extern _X_EXPORT void SListExtensionsReply(ClientPtr /* pClient */ ,
                                           int /* size */ ,
                                           xListExtensionsReply * /* pRep */ );

extern _X_EXPORT void SGetKeyboardMappingReply(ClientPtr /* pClient */ ,
                                               int /* size */ ,
                                               xGetKeyboardMappingReply *
                                               /* pRep */ );

extern _X_EXPORT void SGetPointerMappingReply(ClientPtr /* pClient */ ,
                                              int /* size */ ,
                                              xGetPointerMappingReply *
                                              /* pRep */ );

extern _X_EXPORT void SGetModifierMappingReply(ClientPtr /* pClient */ ,
                                               int /* size */ ,
                                               xGetModifierMappingReply *
                                               /* pRep */ );

extern _X_EXPORT void SGetKeyboardControlReply(ClientPtr /* pClient */ ,
                                               int /* size */ ,
                                               xGetKeyboardControlReply *
                                               /* pRep */ );

extern _X_EXPORT void SGetPointerControlReply(ClientPtr /* pClient */ ,
                                              int /* size */ ,
                                              xGetPointerControlReply *
                                              /* pRep */ );

extern _X_EXPORT void SGetScreenSaverReply(ClientPtr /* pClient */ ,
                                           int /* size */ ,
                                           xGetScreenSaverReply * /* pRep */ );
d195 1
a195 1
extern _X_EXPORT void SLHostsExtend(ClientPtr /* pClient */ ,
d197 2
a198 1
                                    char * /* buf */ );
d200 11
a210 3
extern _X_EXPORT void SListHostsReply(ClientPtr /* pClient */ ,
                                      int /* size */ ,
                                      xListHostsReply * /* pRep */ );
d212 2
a213 2
extern _X_EXPORT void SErrorEvent(xError * /* from */ ,
                                  xError * /* to */ );
d215 2
a216 2
extern _X_EXPORT void SwapConnSetupInfo(char * /* pInfo */ ,
                                        char * /* pInfoTBase */ );
d218 3
a220 3
extern _X_EXPORT void WriteSConnectionInfo(ClientPtr /* pClient */ ,
                                           unsigned long /* size */ ,
                                           char * /* pInfo */ );
d222 2
a223 2
extern _X_EXPORT void SwapConnSetupPrefix(xConnSetupPrefix * /* pcspFrom */ ,
                                          xConnSetupPrefix * /* pcspTo */ );
d225 2
a226 2
extern _X_EXPORT void WriteSConnSetupPrefix(ClientPtr /* pClient */ ,
                                            xConnSetupPrefix * /* pcsp */ );
d229 1
a229 1
#define SWAPREP_PROC(func) extern _X_EXPORT void func(xEvent * /* from */, xEvent * /* to */)
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d29 198
a226 230
extern _X_EXPORT void Swap32Write(
    ClientPtr /* pClient */,
    int /* size */,
    CARD32 * /* pbuf */);

extern _X_EXPORT void CopySwap32Write(
    ClientPtr /* pClient */,
    int /* size */,
    CARD32 * /* pbuf */);

extern _X_EXPORT void CopySwap16Write(
    ClientPtr /* pClient */,
    int /* size */,
    short * /* pbuf */);

extern _X_EXPORT void SGenericReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGenericReply * /* pRep */);

extern _X_EXPORT void SGetWindowAttributesReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetWindowAttributesReply * /* pRep */);

extern _X_EXPORT void SGetGeometryReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetGeometryReply * /* pRep */);

extern _X_EXPORT void SQueryTreeReply(
    ClientPtr /* pClient */,
    int /* size */,
    xQueryTreeReply * /* pRep */);

extern _X_EXPORT void SInternAtomReply(
    ClientPtr /* pClient */,
    int /* size */,
    xInternAtomReply * /* pRep */);

extern _X_EXPORT void SGetAtomNameReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetAtomNameReply * /* pRep */);

extern _X_EXPORT void SGetPropertyReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetPropertyReply * /* pRep */);

extern _X_EXPORT void SListPropertiesReply(
    ClientPtr /* pClient */,
    int /* size */,
    xListPropertiesReply * /* pRep */);

extern _X_EXPORT void SGetSelectionOwnerReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetSelectionOwnerReply * /* pRep */);

extern _X_EXPORT void SQueryPointerReply(
    ClientPtr /* pClient */,
    int /* size */,
    xQueryPointerReply * /* pRep */);

extern _X_EXPORT void SwapTimeCoordWrite(
    ClientPtr /* pClient */,
    int /* size */,
    xTimecoord * /* pRep */);

extern _X_EXPORT void SGetMotionEventsReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetMotionEventsReply * /* pRep */);

extern _X_EXPORT void STranslateCoordsReply(
    ClientPtr /* pClient */,
    int /* size */,
    xTranslateCoordsReply * /* pRep */);

extern _X_EXPORT void SGetInputFocusReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetInputFocusReply * /* pRep */);

extern _X_EXPORT void SQueryKeymapReply(
    ClientPtr /* pClient */,
    int /* size */,
    xQueryKeymapReply * /* pRep */);

extern _X_EXPORT void SQueryFontReply(
    ClientPtr /* pClient */,
    int /* size */,
    xQueryFontReply * /* pRep */);

extern _X_EXPORT void SQueryTextExtentsReply(
    ClientPtr /* pClient */,
    int /* size */,
    xQueryTextExtentsReply * /* pRep */);

extern _X_EXPORT void SListFontsReply(
    ClientPtr /* pClient */,
    int /* size */,
    xListFontsReply * /* pRep */);

extern _X_EXPORT void SListFontsWithInfoReply(
    ClientPtr /* pClient */,
    int /* size */,
    xListFontsWithInfoReply * /* pRep */);

extern _X_EXPORT void SGetFontPathReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetFontPathReply * /* pRep */);

extern _X_EXPORT void SGetImageReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetImageReply * /* pRep */);

extern _X_EXPORT void SListInstalledColormapsReply(
    ClientPtr /* pClient */,
    int /* size */,
    xListInstalledColormapsReply * /* pRep */);

extern _X_EXPORT void SAllocColorReply(
    ClientPtr /* pClient */,
    int /* size */,
    xAllocColorReply * /* pRep */);

extern _X_EXPORT void SAllocNamedColorReply(
    ClientPtr /* pClient */,
    int /* size */,
    xAllocNamedColorReply * /* pRep */);

extern _X_EXPORT void SAllocColorCellsReply(
    ClientPtr /* pClient */,
    int /* size */,
    xAllocColorCellsReply * /* pRep */);

extern _X_EXPORT void SAllocColorPlanesReply(
    ClientPtr /* pClient */,
    int /* size */,
    xAllocColorPlanesReply * /* pRep */);

extern _X_EXPORT void SQColorsExtend(
    ClientPtr /* pClient */,
    int /* size */,
    xrgb * /* prgb */);

extern _X_EXPORT void SQueryColorsReply(
    ClientPtr /* pClient */,
    int /* size */,
    xQueryColorsReply * /* pRep */);

extern _X_EXPORT void SLookupColorReply(
    ClientPtr /* pClient */,
    int /* size */,
    xLookupColorReply * /* pRep */);

extern _X_EXPORT void SQueryBestSizeReply(
    ClientPtr /* pClient */,
    int /* size */,
    xQueryBestSizeReply * /* pRep */);

extern _X_EXPORT void SListExtensionsReply(
    ClientPtr /* pClient */,
    int /* size */,
    xListExtensionsReply * /* pRep */);

extern _X_EXPORT void SGetKeyboardMappingReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetKeyboardMappingReply * /* pRep */);

extern _X_EXPORT void SGetPointerMappingReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetPointerMappingReply * /* pRep */);

extern _X_EXPORT void SGetModifierMappingReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetModifierMappingReply * /* pRep */);

extern _X_EXPORT void SGetKeyboardControlReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetKeyboardControlReply * /* pRep */);

extern _X_EXPORT void SGetPointerControlReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetPointerControlReply * /* pRep */);

extern _X_EXPORT void SGetScreenSaverReply(
    ClientPtr /* pClient */,
    int /* size */,
    xGetScreenSaverReply * /* pRep */);

extern _X_EXPORT void SLHostsExtend(
    ClientPtr /* pClient */,
    int /* size */,
    char * /* buf */);

extern _X_EXPORT void SListHostsReply(
    ClientPtr /* pClient */,
    int /* size */,
    xListHostsReply * /* pRep */);

extern _X_EXPORT void SErrorEvent(
    xError * /* from */,
    xError * /* to */);

extern _X_EXPORT void SwapConnSetupInfo(
    char * /* pInfo */,
    char * /* pInfoTBase */);

extern _X_EXPORT void WriteSConnectionInfo(
    ClientPtr /* pClient */,
    unsigned long /* size */,
    char * /* pInfo */);

extern _X_EXPORT void SwapConnSetupPrefix(
    xConnSetupPrefix * /* pcspFrom */,
    xConnSetupPrefix * /* pcspTo */);

extern _X_EXPORT void WriteSConnSetupPrefix(
    ClientPtr /* pClient */,
    xConnSetupPrefix * /* pcsp */);
d260 1
a260 1
#endif /* SWAPREP_H */
@


1.1
log
@Initial revision
@
text
@d29 1
a29 1
extern void Swap32Write(
d34 1
a34 1
extern void CopySwap32Write(
d39 1
a39 1
extern void CopySwap16Write(
d44 1
a44 1
extern void SGenericReply(
d49 1
a49 1
extern void SGetWindowAttributesReply(
d54 1
a54 1
extern void SGetGeometryReply(
d59 1
a59 1
extern void SQueryTreeReply(
d64 1
a64 1
extern void SInternAtomReply(
d69 1
a69 1
extern void SGetAtomNameReply(
d74 1
a74 1
extern void SGetPropertyReply(
d79 1
a79 1
extern void SListPropertiesReply(
d84 1
a84 1
extern void SGetSelectionOwnerReply(
d89 1
a89 1
extern void SQueryPointerReply(
d94 1
a94 4
extern void SwapTimecoord(
    xTimecoord * /* pCoord */);

extern void SwapTimeCoordWrite(
d99 1
a99 1
extern void SGetMotionEventsReply(
d104 1
a104 1
extern void STranslateCoordsReply(
d109 1
a109 1
extern void SGetInputFocusReply(
d114 1
a114 1
extern void SQueryKeymapReply(
d119 1
a119 1
extern void SQueryFontReply(
d124 1
a124 1
extern void SQueryTextExtentsReply(
d129 1
a129 1
extern void SListFontsReply(
d134 1
a134 1
extern void SListFontsWithInfoReply(
d139 1
a139 1
extern void SGetFontPathReply(
d144 1
a144 1
extern void SGetImageReply(
d149 1
a149 1
extern void SListInstalledColormapsReply(
d154 1
a154 1
extern void SAllocColorReply(
d159 1
a159 1
extern void SAllocNamedColorReply(
d164 1
a164 1
extern void SAllocColorCellsReply(
d169 1
a169 1
extern void SAllocColorPlanesReply(
d174 1
a174 4
extern void SwapRGB(
    xrgb * /* prgb */);

extern void SQColorsExtend(
d179 1
a179 1
extern void SQueryColorsReply(
d184 1
a184 1
extern void SLookupColorReply(
d189 1
a189 1
extern void SQueryBestSizeReply(
d194 1
a194 1
extern void SListExtensionsReply(
d199 1
a199 1
extern void SGetKeyboardMappingReply(
d204 1
a204 1
extern void SGetPointerMappingReply(
d209 1
a209 1
extern void SGetModifierMappingReply(
d214 1
a214 1
extern void SGetKeyboardControlReply(
d219 1
a219 1
extern void SGetPointerControlReply(
d224 1
a224 1
extern void SGetScreenSaverReply(
d229 1
a229 1
extern void SLHostsExtend(
d234 1
a234 1
extern void SListHostsReply(
d239 1
a239 1
extern void SErrorEvent(
d243 1
a243 1
extern void SwapConnSetupInfo(
d247 1
a247 1
extern void WriteSConnectionInfo(
d252 1
a252 13
extern void SwapConnSetup(
    xConnSetup * /* pConnSetup */,
    xConnSetup * /* pConnSetupT */);

extern void SwapWinRoot(
    xWindowRoot * /* pRoot */,
    xWindowRoot * /* pRootT */);

extern void SwapVisual(
    xVisualType * /* pVis */,
    xVisualType * /* pVisT */);

extern void SwapConnSetupPrefix(
d256 1
a256 1
extern void WriteSConnSetupPrefix(
d261 1
a261 1
#define SWAPREP_PROC(func) void func(xEvent * /* from */, xEvent * /* to */)
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d94 3
d177 3
d257 12
@

