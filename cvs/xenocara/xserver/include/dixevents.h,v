head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.14
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.12
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.8
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.30;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.19;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.19;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.09;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/************************************************************

Copyright 1996 by Thomas E. Dickey <dickey@@clark.net>

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of the above listed
copyright holder(s) not be used in advertising or publicity pertaining
to distribution of the software without specific, written prior
permission.

THE ABOVE LISTED COPYRIGHT HOLDER(S) DISCLAIM ALL WARRANTIES WITH REGARD
TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS, IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT HOLDER(S) BE
LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

********************************************************/

#ifndef DIXEVENTS_H
#define DIXEVENTS_H

extern _X_EXPORT void SetCriticalEvent(int /* event */ );

extern _X_EXPORT CursorPtr GetSpriteCursor(DeviceIntPtr /*pDev */ );

extern _X_EXPORT int ProcAllowEvents(ClientPtr /* client */ );

extern _X_EXPORT int MaybeDeliverEventsToClient(WindowPtr /* pWin */ ,
                                                xEvent * /* pEvents */ ,
                                                int /* count */ ,
                                                Mask /* filter */ ,
                                                ClientPtr /* dontClient */ );

extern _X_EXPORT int ProcWarpPointer(ClientPtr /* client */ );

extern _X_EXPORT int EventSelectForWindow(WindowPtr /* pWin */ ,
                                          ClientPtr /* client */ ,
                                          Mask /* mask */ );

extern _X_EXPORT int EventSuppressForWindow(WindowPtr /* pWin */ ,
                                            ClientPtr /* client */ ,
                                            Mask /* mask */ ,
                                            Bool * /* checkOptional */ );

extern _X_EXPORT int ProcSetInputFocus(ClientPtr /* client */ );

extern _X_EXPORT int ProcGetInputFocus(ClientPtr /* client */ );

extern _X_EXPORT int ProcGrabPointer(ClientPtr /* client */ );

extern _X_EXPORT int ProcChangeActivePointerGrab(ClientPtr /* client */ );

extern _X_EXPORT int ProcUngrabPointer(ClientPtr /* client */ );

extern _X_EXPORT int ProcGrabKeyboard(ClientPtr /* client */ );

extern _X_EXPORT int ProcUngrabKeyboard(ClientPtr /* client */ );

extern _X_EXPORT int ProcQueryPointer(ClientPtr /* client */ );

extern _X_EXPORT int ProcSendEvent(ClientPtr /* client */ );

extern _X_EXPORT int ProcUngrabKey(ClientPtr /* client */ );

extern _X_EXPORT int ProcGrabKey(ClientPtr /* client */ );

extern _X_EXPORT int ProcGrabButton(ClientPtr /* client */ );

extern _X_EXPORT int ProcUngrabButton(ClientPtr /* client */ );

extern _X_EXPORT int ProcRecolorCursor(ClientPtr /* client */ );

#endif                          /* DIXEVENTS_H */
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a79 7
#ifdef PANORAMIX
extern _X_EXPORT void PostSyntheticMotion(DeviceIntPtr pDev,
                                          int x,
                                          int y,
                                          int screen, unsigned long time);
#endif

@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d29 1
a29 1
extern _X_EXPORT void SetCriticalEvent(int /* event */);
d31 1
a31 1
extern _X_EXPORT CursorPtr GetSpriteCursor(DeviceIntPtr /*pDev*/);
d33 1
a33 1
extern _X_EXPORT int ProcAllowEvents(ClientPtr /* client */);
d35 5
a39 6
extern _X_EXPORT int MaybeDeliverEventsToClient(
	WindowPtr              /* pWin */,
	xEvent *               /* pEvents */,
	int                    /* count */,
	Mask                   /* filter */,
	ClientPtr              /* dontClient */);
d41 1
a41 1
extern _X_EXPORT int ProcWarpPointer(ClientPtr /* client */);
d43 3
a45 4
extern _X_EXPORT int EventSelectForWindow(
	WindowPtr              /* pWin */,
	ClientPtr              /* client */,
	Mask                   /* mask */);
d47 4
a50 5
extern _X_EXPORT int EventSuppressForWindow(
	WindowPtr              /* pWin */,
	ClientPtr              /* client */,
	Mask                   /* mask */,
	Bool *                 /* checkOptional */);
d52 1
a52 1
extern _X_EXPORT int ProcSetInputFocus(ClientPtr /* client */);
d54 1
a54 1
extern _X_EXPORT int ProcGetInputFocus(ClientPtr /* client */);
d56 1
a56 1
extern _X_EXPORT int ProcGrabPointer(ClientPtr /* client */);
d58 1
a58 1
extern _X_EXPORT int ProcChangeActivePointerGrab(ClientPtr /* client */);
d60 1
a60 1
extern _X_EXPORT int ProcUngrabPointer(ClientPtr /* client */);
d62 1
a62 1
extern _X_EXPORT int ProcGrabKeyboard(ClientPtr /* client */);
d64 1
a64 1
extern _X_EXPORT int ProcUngrabKeyboard(ClientPtr /* client */);
d66 1
a66 1
extern _X_EXPORT int ProcQueryPointer(ClientPtr /* client */);
d68 1
a68 1
extern _X_EXPORT int ProcSendEvent(ClientPtr /* client */);
d70 1
a70 1
extern _X_EXPORT int ProcUngrabKey(ClientPtr /* client */);
d72 1
a72 1
extern _X_EXPORT int ProcGrabKey(ClientPtr /* client */);
d74 1
a74 1
extern _X_EXPORT int ProcGrabButton(ClientPtr /* client */);
d76 1
a76 1
extern _X_EXPORT int ProcUngrabButton(ClientPtr /* client */);
d78 1
a78 1
extern _X_EXPORT int ProcRecolorCursor(ClientPtr /* client */);
d82 3
a84 4
                                int x, 
                                int y, 
                                int screen,
                                unsigned long time);
d87 1
a87 1
#endif /* DIXEVENTS_H */
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d29 1
a29 1
extern void SetCriticalEvent(int /* event */);
d31 1
a31 1
extern CursorPtr GetSpriteCursor(DeviceIntPtr /*pDev*/);
d33 1
a33 1
extern int ProcAllowEvents(ClientPtr /* client */);
d35 1
a35 1
extern int MaybeDeliverEventsToClient(
d42 1
a42 1
extern int ProcWarpPointer(ClientPtr /* client */);
d44 1
a44 1
extern int EventSelectForWindow(
d49 1
a49 1
extern int EventSuppressForWindow(
d55 1
a55 1
extern int ProcSetInputFocus(ClientPtr /* client */);
d57 1
a57 1
extern int ProcGetInputFocus(ClientPtr /* client */);
d59 1
a59 1
extern int ProcGrabPointer(ClientPtr /* client */);
d61 1
a61 1
extern int ProcChangeActivePointerGrab(ClientPtr /* client */);
d63 1
a63 1
extern int ProcUngrabPointer(ClientPtr /* client */);
d65 1
a65 1
extern int ProcGrabKeyboard(ClientPtr /* client */);
d67 1
a67 1
extern int ProcUngrabKeyboard(ClientPtr /* client */);
d69 1
a69 1
extern int ProcQueryPointer(ClientPtr /* client */);
d71 1
a71 1
extern int ProcSendEvent(ClientPtr /* client */);
d73 1
a73 1
extern int ProcUngrabKey(ClientPtr /* client */);
d75 1
a75 1
extern int ProcGrabKey(ClientPtr /* client */);
d77 1
a77 1
extern int ProcGrabButton(ClientPtr /* client */);
d79 1
a79 1
extern int ProcUngrabButton(ClientPtr /* client */);
d81 1
a81 1
extern int ProcRecolorCursor(ClientPtr /* client */);
d84 1
a84 1
extern void PostSyntheticMotion(DeviceIntPtr pDev, 
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d31 1
a31 1
extern CursorPtr GetSpriteCursor(void);
d84 5
a88 1
extern void PostSyntheticMotion(int x, int y, int screen, unsigned long time);
@


1.1
log
@Initial revision
@
text
@a43 22
#if 0
extern void
#ifdef XKB
CoreProcessKeyboardEvent (
#else
ProcessKeyboardEvent (
#endif
	xEvent *               /* xE */,
	DeviceIntPtr           /* keybd */,
	int                    /* count */);

extern void
#ifdef XKB
CoreProcessPointerEvent (
#else
ProcessPointerEvent (
#endif
	xEvent *               /* xE */,
	DeviceIntPtr           /* mouse */,
	int                    /* count */);
#endif

d82 4
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@a104 4
#ifdef PANORAMIX
extern void PostSyntheticMotion(int x, int y, int screen, unsigned long time);
#endif

@

