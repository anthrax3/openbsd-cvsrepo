head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.05.29.12.02.39;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	s0SI41sEunLdyFfd;

1.9
date	2015.09.16.19.10.25;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	Te1daavkBLskZ8gc;

1.8
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	cVXoV5PxI8YrEaVA;

1.7
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.10.13.21.30;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.19;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.19;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/***********************************************************
Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

#ifndef DIXFONT_H
#define DIXFONT_H 1

#include "dix.h"
#include <X11/fonts/font.h>
#include "closure.h"
#include <X11/fonts/fontstruct.h>
#include <X11/fonts/fontproto.h>
#include <X11/fonts/fontutil.h>

#define NullDIXFontProp ((DIXFontPropPtr)0)

typedef struct _DIXFontProp *DIXFontPropPtr;

extern _X_EXPORT Bool SetDefaultFont(const char * /*defaultfontname */ );

extern _X_EXPORT int OpenFont(ClientPtr /*client */ ,
                              XID /*fid */ ,
                              Mask /*flags */ ,
                              unsigned /*lenfname */ ,
                              const char * /*pfontname */ );

extern _X_EXPORT int CloseFont(void *pfont,
                               XID fid);

typedef struct _xQueryFontReply *xQueryFontReplyPtr;

extern _X_EXPORT void QueryFont(FontPtr /*pFont */ ,
                                xQueryFontReplyPtr /*pReply */ ,
                                int /*nProtoCCIStructs */ );

extern _X_EXPORT int ListFonts(ClientPtr /*client */ ,
                               unsigned char * /*pattern */ ,
                               unsigned int /*length */ ,
                               unsigned int /*max_names */ );

extern _X_EXPORT int PolyText(ClientPtr /*client */ ,
                              DrawablePtr /*pDraw */ ,
                              GCPtr /*pGC */ ,
                              unsigned char * /*pElt */ ,
                              unsigned char * /*endReq */ ,
                              int /*xorg */ ,
                              int /*yorg */ ,
                              int /*reqType */ ,
                              XID /*did */ );

extern _X_EXPORT int ImageText(ClientPtr /*client */ ,
                               DrawablePtr /*pDraw */ ,
                               GCPtr /*pGC */ ,
                               int /*nChars */ ,
                               unsigned char * /*data */ ,
                               int /*xorg */ ,
                               int /*yorg */ ,
                               int /*reqType */ ,
                               XID /*did */ );

extern _X_EXPORT int SetFontPath(ClientPtr /*client */ ,
                                 int /*npaths */ ,
                                 unsigned char * /*paths */ );

extern _X_EXPORT int SetDefaultFontPath(const char * /*path */ );

extern _X_EXPORT int GetFontPath(ClientPtr client,
                                 int *count,
                                 int *length, unsigned char **result);

extern _X_EXPORT void DeleteClientFontStuff(ClientPtr /*client */ );

/* Quartz support on Mac OS X pulls in the QuickDraw
   framework whose InitFonts function conflicts here. */
#ifdef __APPLE__
#define InitFonts Darwin_X_InitFonts
#endif
extern _X_EXPORT void InitFonts(void);

extern _X_EXPORT void FreeFonts(void);

extern _X_EXPORT FontPtr find_old_font(XID /*id */ );

#define GetGlyphs dixGetGlyphs
extern _X_EXPORT void dixGetGlyphs(FontPtr /*font */ ,
                                   unsigned long /*count */ ,
                                   unsigned char * /*chars */ ,
                                   FontEncoding /*fontEncoding */ ,
                                   unsigned long * /*glyphcount */ ,
                                   CharInfoPtr * /*glyphs */ );

extern _X_EXPORT void register_fpe_functions(void);

#endif                          /* DIXFONT_H */
@


1.9
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d32 1
a39 8
extern _X_EXPORT void QueueFontWakeup(FontPathElementPtr /*fpe */ );

extern _X_EXPORT void RemoveFontWakeup(FontPathElementPtr /*fpe */ );

extern _X_EXPORT void FontWakeup(void *data,
                                 int count,
                                 void *LastSelectMask);

a59 8
extern _X_EXPORT int
 doListFontsWithInfo(ClientPtr /*client */ ,
                     LFWIclosurePtr /*c */ );

extern _X_EXPORT int doPolyText(ClientPtr /*client */ ,
                                PTclosurePtr    /*c */
    );

a69 3
extern _X_EXPORT int doImageText(ClientPtr /*client */ ,
                                 ITclosurePtr /*c */ );

a109 16

extern _X_EXPORT void QueryGlyphExtents(FontPtr /*pFont */ ,
                                        CharInfoPtr * /*charinfo */ ,
                                        unsigned long /*count */ ,
                                        ExtentInfoPtr /*info */ );

extern _X_EXPORT Bool QueryTextExtents(FontPtr /*pFont */ ,
                                       unsigned long /*count */ ,
                                       unsigned char * /*chars */ ,
                                       ExtentInfoPtr /*info */ );

extern _X_EXPORT Bool ParseGlyphCachingMode(char * /*str */ );

extern _X_EXPORT void InitGlyphCaching(void);

extern _X_EXPORT void SetGlyphCachingMode(int /*newmode */ );
@


1.8
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d43 3
a45 3
extern _X_EXPORT void FontWakeup(void */*data */ ,
                                 int /*count */ ,
                                 void */*LastSelectMask */ );
d53 2
a54 2
extern _X_EXPORT int CloseFont(void */*pfont */ ,
                               XID /*fid */ );
@


1.7
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d37 1
a37 1
extern _X_EXPORT Bool SetDefaultFont(char * /*defaultfontname */ );
d43 1
a43 1
extern _X_EXPORT void FontWakeup(pointer /*data */ ,
d45 1
a45 1
                                 pointer /*LastSelectMask */ );
d51 1
a51 1
                              char * /*pfontname */ );
d53 1
a53 1
extern _X_EXPORT int CloseFont(pointer /*pfont */ ,
d102 1
a102 1
extern _X_EXPORT int SetDefaultFontPath(char * /*path */ );
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d31 1
d121 7
a127 6
extern _X_EXPORT void GetGlyphs(FontPtr /*font */ ,
                                unsigned long /*count */ ,
                                unsigned char * /*chars */ ,
                                FontEncoding /*fontEncoding */ ,
                                unsigned long * /*glyphcount */ ,
                                CharInfoPtr * /*glyphs */ );
a145 38

/*
 * libXfont stubs.
 */
extern _X_EXPORT int client_auth_generation(ClientPtr client);

extern _X_EXPORT void DeleteFontClientID(Font id);

extern _X_EXPORT FontResolutionPtr GetClientResolutions(int *num);

extern _X_EXPORT int GetDefaultPointSize(void);

extern _X_EXPORT Font GetNewFontClientID(void);

extern _X_EXPORT int init_fs_handlers(FontPathElementPtr fpe,
                                      BlockHandlerProcPtr block_handler);

extern _X_EXPORT int RegisterFPEFunctions(NameCheckFunc name_func,
                                          InitFpeFunc init_func,
                                          FreeFpeFunc free_func,
                                          ResetFpeFunc reset_func,
                                          OpenFontFunc open_func,
                                          CloseFontFunc close_func,
                                          ListFontsFunc list_func,
                                          StartLfwiFunc start_lfwi_func,
                                          NextLfwiFunc next_lfwi_func,
                                          WakeupFpeFunc wakeup_func,
                                          ClientDiedFunc client_died,
                                          LoadGlyphsFunc load_glyphs,
                                          StartLaFunc start_list_alias_func,
                                          NextLaFunc next_list_alias_func,
                                          SetPathFunc set_path_func);

extern _X_EXPORT void remove_fs_handlers(FontPathElementPtr fpe,
                                         BlockHandlerProcPtr blockHandler,
                                         Bool all);

extern _X_EXPORT int StoreFontClientFont(FontPtr pfont, Font id);
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d36 1
a36 1
extern _X_EXPORT Bool SetDefaultFont(char * /*defaultfontname*/);
d38 1
a38 1
extern _X_EXPORT void QueueFontWakeup(FontPathElementPtr /*fpe*/);
d40 1
a40 1
extern _X_EXPORT void RemoveFontWakeup(FontPathElementPtr /*fpe*/);
d42 3
a44 3
extern _X_EXPORT void FontWakeup(pointer /*data*/,
		       int /*count*/,
		       pointer /*LastSelectMask*/);
d46 5
a50 5
extern _X_EXPORT int OpenFont(ClientPtr /*client*/,
		    XID /*fid*/,
		    Mask /*flags*/,
		    unsigned /*lenfname*/,
		    char * /*pfontname*/);
d52 2
a53 2
extern _X_EXPORT int CloseFont(pointer /*pfont*/,
		     XID /*fid*/);
d57 8
a64 8
extern _X_EXPORT void QueryFont(FontPtr /*pFont*/,
		      xQueryFontReplyPtr /*pReply*/,
		      int /*nProtoCCIStructs*/);

extern _X_EXPORT int ListFonts(ClientPtr /*client*/,
		     unsigned char * /*pattern*/,
		     unsigned int /*length*/,
		     unsigned int /*max_names*/);
d67 2
a68 2
doListFontsWithInfo(ClientPtr /*client*/,
		    LFWIclosurePtr /*c*/);
d70 30
a99 30
extern _X_EXPORT int doPolyText(ClientPtr /*client*/,
		      PTclosurePtr /*c*/
);

extern _X_EXPORT int PolyText(ClientPtr /*client*/,
		    DrawablePtr /*pDraw*/,
		    GCPtr /*pGC*/,
		    unsigned char * /*pElt*/,
		    unsigned char * /*endReq*/,
		    int /*xorg*/,
		    int /*yorg*/,
		    int /*reqType*/,
		    XID /*did*/);

extern _X_EXPORT int doImageText(ClientPtr /*client*/,
		       ITclosurePtr /*c*/);

extern _X_EXPORT int ImageText(ClientPtr /*client*/,
		     DrawablePtr /*pDraw*/,
		     GCPtr /*pGC*/,
		     int /*nChars*/,
		     unsigned char * /*data*/,
		     int /*xorg*/,
		     int /*yorg*/,
		     int /*reqType*/,
		     XID /*did*/);

extern _X_EXPORT int SetFontPath(ClientPtr /*client*/,
		       int /*npaths*/,
		       unsigned char * /*paths*/);
d101 1
a101 1
extern _X_EXPORT int SetDefaultFontPath(char * /*path*/);
d104 2
a105 3
		       int *count,
		       int *length,
		       unsigned char **result);
d107 1
a107 1
extern _X_EXPORT void DeleteClientFontStuff(ClientPtr /*client*/);
d118 1
a118 1
extern _X_EXPORT FontPtr find_old_font(XID /*id*/);
d120 16
a135 16
extern _X_EXPORT void GetGlyphs(FontPtr     /*font*/,
		      unsigned long /*count*/,
		      unsigned char * /*chars*/,
		      FontEncoding /*fontEncoding*/,
		      unsigned long * /*glyphcount*/,
		      CharInfoPtr * /*glyphs*/);

extern _X_EXPORT void QueryGlyphExtents(FontPtr     /*pFont*/,
			      CharInfoPtr * /*charinfo*/,
			      unsigned long /*count*/,
			      ExtentInfoPtr /*info*/);

extern _X_EXPORT Bool QueryTextExtents(FontPtr     /*pFont*/,
			     unsigned long /*count*/,
			     unsigned char * /*chars*/,
			     ExtentInfoPtr /*info*/);
d137 1
a137 1
extern _X_EXPORT Bool ParseGlyphCachingMode(char * /*str*/);
d141 1
a141 1
extern _X_EXPORT void SetGlyphCachingMode(int /*newmode*/);
d159 1
a159 1
				      BlockHandlerProcPtr block_handler);
d162 14
a175 14
					  InitFpeFunc init_func,
					  FreeFpeFunc free_func,
					  ResetFpeFunc reset_func,
					  OpenFontFunc open_func,
					  CloseFontFunc close_func,
					  ListFontsFunc list_func,
					  StartLfwiFunc start_lfwi_func,
					  NextLfwiFunc next_lfwi_func,
					  WakeupFpeFunc wakeup_func,
					  ClientDiedFunc client_died,
					  LoadGlyphsFunc load_glyphs,
					  StartLaFunc start_list_alias_func,
					  NextLaFunc next_list_alias_func,
					  SetPathFunc set_path_func);
d178 2
a179 2
					 BlockHandlerProcPtr blockHandler,
					 Bool all);
d183 1
a183 1
#endif				/* DIXFONT_H */
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d99 1
a99 2
		       unsigned char * /*paths*/,
		       int * /*error*/);
d144 1
a144 4
/*
 * libXfont/src/builtins/builtin.h
 */
extern _X_EXPORT void BuiltinRegisterFpeFunctions(void);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d36 1
a36 1
extern Bool SetDefaultFont(char * /*defaultfontname*/);
d38 1
a38 1
extern void QueueFontWakeup(FontPathElementPtr /*fpe*/);
d40 1
a40 1
extern void RemoveFontWakeup(FontPathElementPtr /*fpe*/);
d42 1
a42 1
extern void FontWakeup(pointer /*data*/,
d46 1
a46 1
extern int OpenFont(ClientPtr /*client*/,
d52 1
a52 1
extern int CloseFont(pointer /*pfont*/,
d57 1
a57 1
extern void QueryFont(FontPtr /*pFont*/,
d61 1
a61 1
extern int ListFonts(ClientPtr /*client*/,
d66 1
a66 1
int
d70 1
a70 1
extern int doPolyText(ClientPtr /*client*/,
d74 1
a74 1
extern int PolyText(ClientPtr /*client*/,
d84 1
a84 1
extern int doImageText(ClientPtr /*client*/,
d87 1
a87 1
extern int ImageText(ClientPtr /*client*/,
d97 1
a97 1
extern int SetFontPath(ClientPtr /*client*/,
d102 1
a102 1
extern int SetDefaultFontPath(char * /*path*/);
d104 1
a104 1
extern int GetFontPath(ClientPtr client,
d109 1
a109 1
extern void DeleteClientFontStuff(ClientPtr /*client*/);
d116 1
a116 1
extern void InitFonts(void);
d118 1
a118 1
extern void FreeFonts(void);
d120 1
a120 1
extern FontPtr find_old_font(XID /*id*/);
d122 1
a122 1
extern void GetGlyphs(FontPtr     /*font*/,
d129 1
a129 1
extern void QueryGlyphExtents(FontPtr     /*pFont*/,
d134 1
a134 1
extern Bool QueryTextExtents(FontPtr     /*pFont*/,
d139 1
a139 1
extern Bool ParseGlyphCachingMode(char * /*str*/);
d141 1
a141 1
extern void InitGlyphCaching(void);
d143 1
a143 1
extern void SetGlyphCachingMode(int /*newmode*/);
d148 1
a148 1
extern void BuiltinRegisterFpeFunctions(void);
d153 1
a153 1
extern int client_auth_generation(ClientPtr client);
d155 1
a155 1
extern void DeleteFontClientID(Font id);
d157 1
a157 1
extern FontResolutionPtr GetClientResolutions(int *num);
d159 1
a159 1
extern int GetDefaultPointSize(void);
d161 1
a161 1
extern Font GetNewFontClientID(void);
d163 1
a163 1
extern int init_fs_handlers(FontPathElementPtr fpe,
d166 1
a166 1
extern int RegisterFPEFunctions(NameCheckFunc name_func,
d182 1
a182 1
extern void remove_fs_handlers(FontPathElementPtr fpe,
d186 1
a186 1
extern int StoreFontClientFont(FontPtr pfont, Font id);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a35 4
extern FPEFunctions *fpe_functions;

extern int FontToXError(int /*err*/);

a108 6
extern int LoadGlyphs(ClientPtr /*client*/,
		      FontPtr /*pfont*/,
		      unsigned /*nchars*/,
		      int /*item_size*/,
		      unsigned char * /*data*/);

d144 43
@


1.1
log
@Initial revision
@
text
@d108 4
a111 2
extern unsigned char *GetFontPath(int * /*count*/,
				  int * /*length*/);
d123 1
a123 1
#ifdef __DARWIN__
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
