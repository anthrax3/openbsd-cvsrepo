head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.09.16.19.10.25;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	Te1daavkBLskZ8gc;

1.10
date	2015.02.11.20.58.46;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	dgcmwPGRv39E4MF9;

1.9
date	2014.12.21.11.41.45;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	OOAr3LJJfv7DyAHR;

1.8
date	2014.12.09.17.58.53;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	vcnjRBuLQw44cPHf;

1.7
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2012.06.10.13.21.30;	author matthieu;	state Exp;
branches
	1.6.8.1;
next	1.5;

1.5
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.17;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.17;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.11;	author matthieu;	state Exp;
branches;
next	;

1.6.8.1
date	2014.12.09.18.00.12;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.7.2.1
date	2014.12.09.17.59.33;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.11
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/***********************************************************

Copyright 1987, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

#ifndef REGIONSTRUCT_H
#define REGIONSTRUCT_H

typedef struct pixman_region16 RegionRec, *RegionPtr;

#include "miscstruct.h"

/* Return values from RectIn() */

#define rgnOUT 0
#define rgnIN  1
#define rgnPART 2

#define NullRegion ((RegionPtr)0)

/*
 *   clip region
 */

typedef struct pixman_region16_data RegDataRec, *RegDataPtr;

extern _X_EXPORT BoxRec RegionEmptyBox;
extern _X_EXPORT RegDataRec RegionEmptyData;
extern _X_EXPORT RegDataRec RegionBrokenData;
static inline Bool
RegionNil(RegionPtr reg)
{
    return ((reg)->data && !(reg)->data->numRects);
}

/* not a region */

static inline Bool
RegionNar(RegionPtr reg)
{
    return ((reg)->data == &RegionBrokenData);
}

static inline int
RegionNumRects(RegionPtr reg)
{
    return ((reg)->data ? (reg)->data->numRects : 1);
}

static inline int
RegionSize(RegionPtr reg)
{
    return ((reg)->data ? (reg)->data->size : 0);
}

static inline BoxPtr
RegionRects(RegionPtr reg)
{
    return ((reg)->data ? (BoxPtr) ((reg)->data + 1) : &(reg)->extents);
}

static inline BoxPtr
RegionBoxptr(RegionPtr reg)
{
    return ((BoxPtr) ((reg)->data + 1));
}

static inline BoxPtr
RegionBox(RegionPtr reg, int i)
{
    return (&RegionBoxptr(reg)[i]);
}

static inline BoxPtr
RegionTop(RegionPtr reg)
{
    return RegionBox(reg, (reg)->data->numRects);
}

static inline BoxPtr
RegionEnd(RegionPtr reg)
{
    return RegionBox(reg, (reg)->data->numRects - 1);
}

static inline size_t
RegionSizeof(size_t n)
{
    if (n < ((INT_MAX - sizeof(RegDataRec)) / sizeof(BoxRec)))
        return (sizeof(RegDataRec) + ((n) * sizeof(BoxRec)));
    else
        return 0;
}

static inline void
RegionInit(RegionPtr _pReg, BoxPtr _rect, int _size)
{
    if ((_rect) != NULL) {
        (_pReg)->extents = *(_rect);
        (_pReg)->data = (RegDataPtr) NULL;
    }
    else {
        size_t rgnSize;
        (_pReg)->extents = RegionEmptyBox;
        if (((_size) > 1) && ((rgnSize = RegionSizeof(_size)) > 0) &&
            (((_pReg)->data = (RegDataPtr) malloc(rgnSize)) != NULL)) {
            (_pReg)->data->size = (_size);
            (_pReg)->data->numRects = 0;
        }
        else
            (_pReg)->data = &RegionEmptyData;
    }
}

static inline Bool
RegionInitBoxes(RegionPtr pReg, BoxPtr boxes, int nBoxes)
{
    return pixman_region_init_rects(pReg, boxes, nBoxes);
}

static inline void
RegionUninit(RegionPtr _pReg)
{
    if ((_pReg)->data && (_pReg)->data->size) {
        free((_pReg)->data);
        (_pReg)->data = NULL;
    }
}

static inline void
RegionReset(RegionPtr _pReg, BoxPtr _pBox)
{
    (_pReg)->extents = *(_pBox);
    RegionUninit(_pReg);
    (_pReg)->data = (RegDataPtr) NULL;
}

static inline Bool
RegionNotEmpty(RegionPtr _pReg)
{
    return !RegionNil(_pReg);
}

static inline Bool
RegionBroken(RegionPtr _pReg)
{
    return RegionNar(_pReg);
}

static inline void
RegionEmpty(RegionPtr _pReg)
{
    RegionUninit(_pReg);
    (_pReg)->extents.x2 = (_pReg)->extents.x1;
    (_pReg)->extents.y2 = (_pReg)->extents.y1;
    (_pReg)->data = &RegionEmptyData;
}

static inline BoxPtr
RegionExtents(RegionPtr _pReg)
{
    return (&(_pReg)->extents);
}

static inline void
RegionNull(RegionPtr _pReg)
{
    (_pReg)->extents = RegionEmptyBox;
    (_pReg)->data = &RegionEmptyData;
}

extern _X_EXPORT void InitRegions(void);

extern _X_EXPORT RegionPtr RegionCreate(BoxPtr /*rect */ ,
                                        int /*size */ );

extern _X_EXPORT void RegionDestroy(RegionPtr /*pReg */ );

extern _X_EXPORT RegionPtr RegionDuplicate(RegionPtr /* pOld */);

static inline Bool
RegionCopy(RegionPtr dst, RegionPtr src)
{
    return pixman_region_copy(dst, src);
}

static inline Bool
RegionIntersect(RegionPtr newReg,       /* destination Region */
                RegionPtr reg1, RegionPtr reg2  /* source regions     */
    )
{
    return pixman_region_intersect(newReg, reg1, reg2);
}

static inline Bool
RegionUnion(RegionPtr newReg,   /* destination Region */
            RegionPtr reg1, RegionPtr reg2      /* source regions     */
    )
{
    return pixman_region_union(newReg, reg1, reg2);
}

extern _X_EXPORT Bool RegionAppend(RegionPtr /*dstrgn */ ,
                                   RegionPtr /*rgn */ );

extern _X_EXPORT Bool RegionValidate(RegionPtr /*badreg */ ,
                                     Bool * /*pOverlap */ );

extern _X_EXPORT RegionPtr RegionFromRects(int /*nrects */ ,
                                           xRectanglePtr /*prect */ ,
                                           int /*ctype */ );

/*-
 *-----------------------------------------------------------------------
 * Subtract --
 *	Subtract regS from regM and leave the result in regD.
 *	S stands for subtrahend, M for minuend and D for difference.
 *
 * Results:
 *	TRUE if successful.
 *
 * Side Effects:
 *	regD is overwritten.
 *
 *-----------------------------------------------------------------------
 */
static inline Bool
RegionSubtract(RegionPtr regD, RegionPtr regM, RegionPtr regS)
{
    return pixman_region_subtract(regD, regM, regS);
}

/*-
 *-----------------------------------------------------------------------
 * Inverse --
 *	Take a region and a box and return a region that is everything
 *	in the box but not in the region. The careful reader will note
 *	that this is the same as subtracting the region from the box...
 *
 * Results:
 *	TRUE.
 *
 * Side Effects:
 *	newReg is overwritten.
 *
 *-----------------------------------------------------------------------
 */

static inline Bool
RegionInverse(RegionPtr newReg, /* Destination region */
              RegionPtr reg1,   /* Region to invert */
              BoxPtr invRect    /* Bounding box for inversion */
    )
{
    return pixman_region_inverse(newReg, reg1, invRect);
}

static inline int
RegionContainsRect(RegionPtr region, BoxPtr prect)
{
    return pixman_region_contains_rectangle(region, prect);
}

/* TranslateRegion(pReg, x, y)
   translates in place
*/

static inline void
RegionTranslate(RegionPtr pReg, int x, int y)
{
    pixman_region_translate(pReg, x, y);
}

extern _X_EXPORT Bool RegionBreak(RegionPtr /*pReg */ );

static inline Bool
RegionContainsPoint(RegionPtr pReg, int x, int y, BoxPtr box    /* "return" value */
    )
{
    return pixman_region_contains_point(pReg, x, y, box);
}

static inline Bool
RegionEqual(RegionPtr reg1, RegionPtr reg2)
{
    return pixman_region_equal(reg1, reg2);
}

extern _X_EXPORT Bool RegionRectAlloc(RegionPtr /*pRgn */ ,
                                      int       /*n */
    );

#ifdef DEBUG
extern _X_EXPORT Bool RegionIsValid(RegionPtr   /*prgn */
    );
#endif

extern _X_EXPORT void RegionPrint(RegionPtr /*pReg */ );

#define INCLUDE_LEGACY_REGION_DEFINES
#ifdef INCLUDE_LEGACY_REGION_DEFINES

#define REGION_NIL				RegionNil
#define REGION_NAR				RegionNar
#define REGION_NUM_RECTS			RegionNumRects
#define REGION_SIZE				RegionSize
#define REGION_RECTS				RegionRects
#define REGION_BOXPTR				RegionBoxptr
#define REGION_BOX				RegionBox
#define REGION_TOP				RegionTop
#define REGION_END				RegionEnd
#define REGION_SZOF				RegionSizeof
#define BITMAP_TO_REGION			BitmapToRegion
#define REGION_CREATE(pScreen, r, s)		RegionCreate(r,s)
#define REGION_COPY(pScreen, d, r)		RegionCopy(d, r)
#define REGION_DESTROY(pScreen, r)		RegionDestroy(r)
#define REGION_INTERSECT(pScreen, res, r1, r2)	RegionIntersect(res, r1, r2)
#define REGION_UNION(pScreen, res, r1, r2)	RegionUnion(res, r1, r2)
#define REGION_SUBTRACT(pScreen, res, r1, r2)	RegionSubtract(res, r1, r2)
#define REGION_INVERSE(pScreen, n, r, b)	RegionInverse(n, r, b)
#define REGION_TRANSLATE(pScreen, r, x, y)	RegionTranslate(r, x, y)
#define RECT_IN_REGION(pScreen, r, b) 		RegionContainsRect(r, b)
#define POINT_IN_REGION(pScreen, r, x, y, b) 	RegionContainsPoint(r, x, y, b)
#define REGION_EQUAL(pScreen, r1, r2)		RegionEqual(r1, r2)
#define REGION_APPEND(pScreen, d, r)		RegionAppend(d, r)
#define REGION_VALIDATE(pScreen, r, o)		RegionValidate(r, o)
#define RECTS_TO_REGION(pScreen, n, r, c)	RegionFromRects(n, r, c)
#define REGION_BREAK(pScreen, r)		RegionBreak(r)
#define REGION_INIT(pScreen, r, b, s)		RegionInit(r, b, s)
#define REGION_UNINIT(pScreen, r)		RegionUninit(r)
#define REGION_RESET(pScreen, r, b)		RegionReset(r, b)
#define REGION_NOTEMPTY(pScreen, r)		RegionNotEmpty(r)
#define REGION_BROKEN(pScreen, r)		RegionBroken(r)
#define REGION_EMPTY(pScreen, r)		RegionEmpty(r)
#define REGION_EXTENTS(pScreen, r)		RegionExtents(r)
#define REGION_NULL(pScreen, r)			RegionNull(r)

#endif                          /* INCLUDE_LEGACY_REGION_DEFINES */
#endif                          /* REGIONSTRUCT_H */
@


1.10
log
@Update to xserver 1.16.4.
Contains fix for CVE-2015-0255. ok dcoppa@@
@
text
@d128 1
a128 1
RegionSizeof(int n)
@


1.9
log
@Update to xorg-server  1.16.3.

Most of the 1.16.2->1.16.3 changes are the security patches that
where already there. This adds some extra fixes plus a few unrelated
bug fixes.
@
text
@d147 1
a147 1
            (((_pReg)->data = malloc(rgnSize)) != NULL)) {
@


1.8
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d128 1
a128 1
RegionSizeof(unsigned int n)
@


1.7
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d128 1
a128 1
RegionSizeof(int n)
d130 4
a133 1
    return (sizeof(RegDataRec) + ((n) * sizeof(BoxRec)));
d144 1
d146 2
a147 2
        if (((_size) > 1) && ((_pReg)->data =
                              (RegDataPtr) malloc(RegionSizeof(_size)))) {
@


1.7.2.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d128 1
a128 1
RegionSizeof(unsigned int n)
d130 1
a130 4
    if (n < ((INT_MAX - sizeof(RegDataRec)) / sizeof(BoxRec)))
        return (sizeof(RegDataRec) + ((n) * sizeof(BoxRec)));
    else
        return 0;
a140 1
        size_t rgnSize;
d142 2
a143 2
        if (((_size) > 1) && ((rgnSize = RegionSizeof(_size)) > 0) &&
            (((_pReg)->data = malloc(rgnSize)) != NULL)) {
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d216 2
@


1.6.8.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d128 1
a128 1
RegionSizeof(unsigned int n)
d130 1
a130 4
    if (n < ((INT_MAX - sizeof(RegDataRec)) / sizeof(BoxRec)))
        return (sizeof(RegDataRec) + ((n) * sizeof(BoxRec)));
    else
        return 0;
a140 1
        size_t rgnSize;
d142 2
a143 2
        if (((_size) > 1) && ((rgnSize = RegionSizeof(_size)) > 0) &&
            (((_pReg)->data = malloc(rgnSize)) != NULL)) {
@


1.5
log
@Update to xserver 1.11.2
@
text
@a24 1

d71 3
a73 1
static inline Bool RegionNil(RegionPtr reg) {
d79 3
a81 1
static inline Bool RegionNar(RegionPtr reg) {
d85 3
a87 1
static inline int RegionNumRects(RegionPtr reg) {
d91 3
a93 1
static inline int RegionSize(RegionPtr reg) {
d97 4
a100 2
static inline BoxPtr RegionRects(RegionPtr reg) {
    return ((reg)->data ? (BoxPtr)((reg)->data + 1) : &(reg)->extents);
d103 4
a106 2
static inline BoxPtr RegionBoxptr(RegionPtr reg) {
    return ((BoxPtr)((reg)->data + 1));
d109 3
a111 1
static inline BoxPtr RegionBox(RegionPtr reg, int i) {
d115 3
a117 1
static inline BoxPtr RegionTop(RegionPtr reg) {
d121 3
a123 1
static inline BoxPtr RegionEnd(RegionPtr reg) {
d127 3
a129 1
static inline size_t RegionSizeof(int n) {
d133 2
a134 1
static inline void RegionInit(RegionPtr _pReg, BoxPtr _rect, int _size)
d136 1
a136 2
    if ((_rect) != NULL)
    {
d138 1
a138 1
        (_pReg)->data = (RegDataPtr)NULL;
d140 1
a140 2
    else
    {
d143 1
a143 2
			      (RegDataPtr)malloc(RegionSizeof(_size))))
        {
d152 2
a153 1
static inline Bool RegionInitBoxes(RegionPtr pReg, BoxPtr boxes, int nBoxes)
d155 1
a155 1
    return pixman_region_init_rects (pReg, boxes, nBoxes);
d158 2
a159 1
static inline void RegionUninit(RegionPtr _pReg)
d162 2
a163 2
	free((_pReg)->data);
	(_pReg)->data = NULL;
d167 2
a168 1
static inline void RegionReset(RegionPtr _pReg, BoxPtr _pBox)
d172 1
a172 1
    (_pReg)->data = (RegDataPtr)NULL;
d175 3
a177 1
static inline Bool RegionNotEmpty(RegionPtr _pReg) {
d181 3
a183 1
static inline Bool RegionBroken(RegionPtr _pReg) {
d187 2
a188 1
static inline void RegionEmpty(RegionPtr _pReg)
d196 2
a197 1
static inline BoxPtr RegionExtents(RegionPtr _pReg)
d202 2
a203 1
static inline void RegionNull(RegionPtr _pReg)
d211 2
a212 3
extern _X_EXPORT RegionPtr RegionCreate(
    BoxPtr /*rect*/,
    int /*size*/);
d214 1
a214 2
extern _X_EXPORT void RegionDestroy(
    RegionPtr /*pReg*/);
d219 1
a219 1
    return pixman_region_copy (dst, src);
d223 2
a224 4
RegionIntersect(
    RegionPtr	newReg,     /* destination Region */
    RegionPtr	reg1,
    RegionPtr	reg2        /* source regions     */
d227 1
a227 1
    return pixman_region_intersect (newReg, reg1, reg2);
d231 2
a232 4
RegionUnion(
    RegionPtr	newReg,          /* destination Region */
    RegionPtr	reg1,
    RegionPtr	reg2             /* source regions     */
d235 1
a235 1
    return pixman_region_union (newReg, reg1, reg2);
d238 2
a239 3
extern _X_EXPORT Bool RegionAppend(
    RegionPtr /*dstrgn*/,
    RegionPtr /*rgn*/);
d241 2
a242 3
extern _X_EXPORT Bool RegionValidate(
    RegionPtr /*badreg*/,
    Bool * /*pOverlap*/);
d244 3
a246 4
extern _X_EXPORT RegionPtr RegionFromRects(
    int /*nrects*/,
    xRectanglePtr /*prect*/,
    int /*ctype*/);
d265 1
a265 1
    return pixman_region_subtract (regD, regM, regS);
d285 3
a287 4
RegionInverse(
    RegionPtr	  newReg,       /* Destination region */
    RegionPtr	  reg1,         /* Region to invert */
    BoxPtr	  invRect	/* Bounding box for inversion */
d290 1
a290 1
    return pixman_region_inverse (newReg, reg1, invRect);
d296 1
a296 1
    return pixman_region_contains_rectangle (region, prect);
d306 1
a306 1
    pixman_region_translate (pReg, x, y);
d309 1
a309 2
extern _X_EXPORT Bool RegionBreak(
    RegionPtr /*pReg*/);
d312 1
a312 5
RegionContainsPoint(
    RegionPtr pReg,
    int x,
    int y,
    BoxPtr box      /* "return" value */
d315 1
a315 1
    return pixman_region_contains_point (pReg, x, y, box);
d321 1
a321 1
    return pixman_region_equal (reg1, reg2);
d324 3
a326 4
extern _X_EXPORT Bool RegionRectAlloc(
    RegionPtr /*pRgn*/,
    int /*n*/
);
d329 2
a330 3
extern _X_EXPORT Bool RegionIsValid(
    RegionPtr /*prgn*/
);
d333 1
a333 2
extern _X_EXPORT void RegionPrint(
    RegionPtr /*pReg*/);
d373 2
a374 2
#endif /* INCLUDE_LEGACY_REGION_DEFINES */
#endif /* REGIONSTRUCT_H */
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d135 5
a324 10

extern _X_EXPORT int RegionClipSpans(
    RegionPtr /*prgnDst*/,
    DDXPointPtr /*ppt*/,
    int * /*pwidth*/,
    int /*nspans*/,
    DDXPointPtr /*pptNew*/,
    int * /*pwidthNew*/,
    int /*fSorted*/
);
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d69 6
a74 3
extern _X_EXPORT BoxRec miEmptyBox;
extern _X_EXPORT RegDataRec miEmptyData;
extern _X_EXPORT RegDataRec miBrokenData;
a75 1
#define REGION_NIL(reg) ((reg)->data && !(reg)->data->numRects)
a76 123
#define REGION_NAR(reg)	((reg)->data == &miBrokenData)
#define REGION_NUM_RECTS(reg) ((reg)->data ? (reg)->data->numRects : 1)
#define REGION_SIZE(reg) ((reg)->data ? (reg)->data->size : 0)
#define REGION_RECTS(reg) ((reg)->data ? (BoxPtr)((reg)->data + 1) \
			               : &(reg)->extents)
#define REGION_BOXPTR(reg) ((BoxPtr)((reg)->data + 1))
#define REGION_BOX(reg,i) (&REGION_BOXPTR(reg)[i])
#define REGION_TOP(reg) REGION_BOX(reg, (reg)->data->numRects)
#define REGION_END(reg) REGION_BOX(reg, (reg)->data->numRects - 1)
#define REGION_SZOF(n) (sizeof(RegDataRec) + ((n) * sizeof(BoxRec)))

#define REGION_CREATE(_pScreen, _rect, _size) \
    miRegionCreate(_rect, _size)

#define REGION_COPY(_pScreen, dst, src) \
    miRegionCopy(dst, src)

#define REGION_DESTROY(_pScreen, _pReg) \
    miRegionDestroy(_pReg)

#define REGION_INTERSECT(_pScreen, newReg, reg1, reg2) \
    miIntersect(newReg, reg1, reg2)

#define REGION_UNION(_pScreen, newReg, reg1, reg2) \
    miUnion(newReg, reg1, reg2)

#define REGION_SUBTRACT(_pScreen, newReg, reg1, reg2) \
    miSubtract(newReg, reg1, reg2)

#define REGION_INVERSE(_pScreen, newReg, reg1, invRect) \
    miInverse(newReg, reg1, invRect)

#define REGION_TRANSLATE(_pScreen, _pReg, _x, _y) \
    miTranslateRegion(_pReg, _x, _y)

#define RECT_IN_REGION(_pScreen, _pReg, prect) \
    miRectIn(_pReg, prect)

#define POINT_IN_REGION(_pScreen, _pReg, _x, _y, prect) \
    miPointInRegion(_pReg, _x, _y, prect)

#define REGION_APPEND(_pScreen, dstrgn, rgn) \
    miRegionAppend(dstrgn, rgn)

#define REGION_VALIDATE(_pScreen, badreg, pOverlap) \
    miRegionValidate(badreg, pOverlap)

#define BITMAP_TO_REGION(_pScreen, pPix) \
    (*(_pScreen)->BitmapToRegion)(pPix) /* no mi version?! */

#define RECTS_TO_REGION(_pScreen, nrects, prect, ctype) \
    miRectsToRegion(nrects, prect, ctype)

#define REGION_EQUAL(_pScreen, _pReg1, _pReg2) \
    miRegionEqual(_pReg1, _pReg2)

#define REGION_BREAK(_pScreen, _pReg) \
    miRegionBreak(_pReg)

#define REGION_INIT(_pScreen, _pReg, _rect, _size) \
{ \
    if ((_rect) != NULL)				\
    { \
        (_pReg)->extents = *(_rect); \
        (_pReg)->data = (RegDataPtr)NULL; \
    } \
    else \
    { \
        (_pReg)->extents = miEmptyBox; \
        if (((_size) > 1) && ((_pReg)->data = \
                             (RegDataPtr)xalloc(REGION_SZOF(_size)))) \
        { \
            (_pReg)->data->size = (_size); \
            (_pReg)->data->numRects = 0; \
        } \
        else \
            (_pReg)->data = &miEmptyData; \
    } \
 }


#define REGION_UNINIT(_pScreen, _pReg) \
{ \
    if ((_pReg)->data && (_pReg)->data->size) { \
	xfree((_pReg)->data); \
	(_pReg)->data = NULL; \
    } \
}

#define REGION_RESET(_pScreen, _pReg, _pBox) \
{ \
    (_pReg)->extents = *(_pBox); \
    REGION_UNINIT(_pScreen, _pReg); \
    (_pReg)->data = (RegDataPtr)NULL; \
}

#define REGION_NOTEMPTY(_pScreen, _pReg) \
    !REGION_NIL(_pReg)

#define REGION_BROKEN(_pScreen, _pReg) \
    REGION_NAR(_pReg)

#define REGION_EMPTY(_pScreen, _pReg) \
{ \
    REGION_UNINIT(_pScreen, _pReg); \
    (_pReg)->extents.x2 = (_pReg)->extents.x1; \
    (_pReg)->extents.y2 = (_pReg)->extents.y1; \
    (_pReg)->data = &miEmptyData; \
}

#define REGION_EXTENTS(_pScreen, _pReg) \
    (&(_pReg)->extents)

#define REGION_NULL(_pScreen, _pReg) \
{ \
    (_pReg)->extents = miEmptyBox; \
    (_pReg)->data = &miEmptyData; \
}

#ifndef REGION_NULL
#define REGION_NULL(_pScreen, _pReg) \
    REGION_INIT(_pScreen, _pReg, NullBox, 1)
#endif
d78 92
a169 1
/* moved from mi.h */
d171 5
a175 1
extern _X_EXPORT void InitRegions (void);
d177 1
a177 3
extern _X_EXPORT RegionPtr miRegionCreate(
    BoxPtr /*rect*/,
    int /*size*/);
d179 1
a179 2
extern _X_EXPORT void miRegionInit(
    RegionPtr /*pReg*/,
d183 1
a183 1
extern _X_EXPORT void miRegionDestroy(
d186 15
a200 2
extern _X_EXPORT void miRegionUninit(
    RegionPtr /*pReg*/);
d202 9
a210 13
extern _X_EXPORT Bool miRegionCopy(
    RegionPtr /*dst*/,
    RegionPtr /*src*/);

extern _X_EXPORT Bool miIntersect(
    RegionPtr /*newReg*/,
    RegionPtr /*reg1*/,
    RegionPtr /*reg2*/);

extern _X_EXPORT Bool miUnion(
    RegionPtr /*newReg*/,
    RegionPtr /*reg1*/,
    RegionPtr /*reg2*/);
d212 1
a212 1
extern _X_EXPORT Bool miRegionAppend(
d216 1
a216 1
extern _X_EXPORT Bool miRegionValidate(
d220 1
a220 1
extern _X_EXPORT RegionPtr miRectsToRegion(
d225 61
a285 22
extern _X_EXPORT Bool miSubtract(
    RegionPtr /*regD*/,
    RegionPtr /*regM*/,
    RegionPtr /*regS*/);

extern _X_EXPORT Bool miInverse(
    RegionPtr /*newReg*/,
    RegionPtr /*reg1*/,
    BoxPtr /*invRect*/);

extern _X_EXPORT int miRectIn(
    RegionPtr /*region*/,
    BoxPtr /*prect*/);

extern _X_EXPORT void miTranslateRegion(
    RegionPtr /*pReg*/,
    int /*x*/,
    int /*y*/);

extern _X_EXPORT void miRegionReset(
    RegionPtr /*pReg*/,
    BoxPtr /*pBox*/);
d287 1
a287 1
extern _X_EXPORT Bool miRegionBreak(
d290 10
a299 9
extern _X_EXPORT Bool miPointInRegion(
    RegionPtr /*pReg*/,
    int /*x*/,
    int /*y*/,
    BoxPtr /*box*/);

extern _X_EXPORT Bool miRegionEqual(
    RegionPtr /*pReg1*/,
    RegionPtr /*pReg2*/);
d301 5
a305 2
extern _X_EXPORT Bool miRegionNotEmpty(
    RegionPtr /*pReg*/);
d307 10
a316 2
extern _X_EXPORT void miRegionEmpty(
    RegionPtr /*pReg*/);
d318 1
a318 1
extern _X_EXPORT BoxPtr miRegionExtents(
d321 47
a367 2
extern _X_EXPORT void miPrintRegion(
    RegionPtr /*pReg*/);
d369 1
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d69 3
a71 3
extern BoxRec miEmptyBox;
extern RegDataRec miEmptyData;
extern RegDataRec miBrokenData;
d201 1
a201 1
extern void InitRegions (void);
d203 1
a203 1
extern RegionPtr miRegionCreate(
d207 1
a207 1
extern void miRegionInit(
d212 1
a212 1
extern void miRegionDestroy(
d215 1
a215 1
extern void miRegionUninit(
d218 1
a218 1
extern Bool miRegionCopy(
d222 1
a222 1
extern Bool miIntersect(
d227 1
a227 1
extern Bool miUnion(
d232 1
a232 1
extern Bool miRegionAppend(
d236 1
a236 1
extern Bool miRegionValidate(
d240 1
a240 1
extern RegionPtr miRectsToRegion(
d245 1
a245 1
extern Bool miSubtract(
d250 1
a250 1
extern Bool miInverse(
d255 1
a255 1
extern int miRectIn(
d259 1
a259 1
extern void miTranslateRegion(
d264 1
a264 1
extern void miRegionReset(
d268 1
a268 1
extern Bool miRegionBreak(
d271 1
a271 1
extern Bool miPointInRegion(
d277 1
a277 1
extern Bool miRegionEqual(
d281 1
a281 1
extern Bool miRegionNotEmpty(
d284 1
a284 1
extern void miRegionEmpty(
d287 1
a287 1
extern BoxPtr miRegionExtents(
d290 1
a290 1
extern void miPrintRegion(
@


1.1
log
@Initial revision
@
text
@d51 1
a51 1
typedef struct _Region RegionRec, *RegionPtr;
d67 1
a67 10
typedef struct _RegData {
    long	size;
    long 	numRects;
/*  BoxRec	rects[size];   in memory but not explicitly declared */
} RegDataRec, *RegDataPtr;

struct _Region {
    BoxRec 	extents;
    RegDataPtr	data;
};
a133 25
#ifdef DONT_INLINE_REGION_OPS

#define REGION_INIT(_pScreen, _pReg, _rect, _size) \
    miRegionInit(_pReg, _rect, _size)

#define REGION_UNINIT(_pScreen, _pReg) \
    miRegionUninit(_pReg)

#define REGION_RESET(_pScreen, _pReg, _pBox) \
    miRegionReset(_pReg, _pBox)

#define REGION_NOTEMPTY(_pScreen, _pReg) \
    miRegionNotEmpty(_pReg)

#define REGION_BROKEN(_pScreen, _pReg) \
    miRegionBroken(_pReg)

#define REGION_EMPTY(_pScreen, _pReg) \
    miRegionEmpty(_pReg)

#define REGION_EXTENTS(_pScreen, _pReg) \
    miRegionExtents(_pReg)

#else /* inline certain simple region ops for performance */

d136 1
a136 1
    if (_rect) \
a193 2
#endif /* DONT_INLINE_REGION_OPS */

d201 2
d288 3
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d51 1
a51 1
typedef struct pixman_region16 RegionRec, *RegionPtr;
d67 10
a76 1
typedef struct pixman_region16_data RegDataRec, *RegDataPtr;
a236 2
extern void InitRegions (void);

a321 3
    RegionPtr /*pReg*/);

extern void miPrintRegion(
@

