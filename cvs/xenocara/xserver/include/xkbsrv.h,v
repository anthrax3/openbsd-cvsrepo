head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.2
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.2
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.4
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2016.08.09.18.59.54;	author matthieu;	state Exp;
branches;
next	1.13;
commitid	6HLO5qdN5N4nPDjW;

1.13
date	2015.09.16.19.10.25;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	Te1daavkBLskZ8gc;

1.12
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	cVXoV5PxI8YrEaVA;

1.11
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.07.17.28.55;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2012.06.10.13.21.30;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2009.09.06.19.44.37;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.02.15.26.32;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.15.00.17.33;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.05.07.06.07.09;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.24.17.56.12;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.11.24.17.56.12;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.12.13.21.06.25;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Update to xserver 1.18.4

tested by krw@@ and dcoppa@@ ok dcoppa@@
@
text
@/************************************************************
Copyright (c) 1993 by Silicon Graphics Computer Systems, Inc.

Permission to use, copy, modify, and distribute this
software and its documentation for any purpose and without
fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting
documentation, and that the name of Silicon Graphics not be
used in advertising or publicity pertaining to distribution
of the software without specific prior written permission.
Silicon Graphics makes no representation about the suitability
of this software for any purpose. It is provided "as is"
without any express or implied warranty.

SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
THE USE OR PERFORMANCE OF THIS SOFTWARE.

********************************************************/

#ifndef _XKBSRV_H_
#define	_XKBSRV_H_

#define XkbAllocClientMap		SrvXkbAllocClientMap
#define XkbAllocServerMap		SrvXkbAllocServerMap
#define XkbChangeTypesOfKey		SrvXkbChangeTypesOfKey
#define XkbCopyKeyTypes			SrvXkbCopyKeyTypes
#define XkbFreeClientMap		SrvXkbFreeClientMap
#define XkbFreeServerMap		SrvXkbFreeServerMap
#define	XkbKeyTypesForCoreSymbols	SrvXkbKeyTypesForCoreSymbols
#define	XkbApplyCompatMapToKey		SrvXkbApplyCompatMapToKey
#define XkbResizeKeyActions		SrvXkbResizeKeyActions
#define XkbResizeKeySyms		SrvXkbResizeKeySyms
#define XkbResizeKeyType		SrvXkbResizeKeyType
#define XkbAllocCompatMap		SrvXkbAllocCompatMap
#define XkbAllocControls		SrvXkbAllocControls
#define XkbAllocIndicatorMaps		SrvXkbAllocIndicatorMaps
#define XkbAllocKeyboard		SrvXkbAllocKeyboard
#define XkbAllocNames			SrvXkbAllocNames
#define XkbFreeCompatMap		SrvXkbFreeCompatMap
#define XkbFreeKeyboard			SrvXkbFreeKeyboard
#define XkbFreeNames			SrvXkbFreeNames
#define XkbLatchModifiers		SrvXkbLatchModifiers
#define XkbLatchGroup			SrvXkbLatchGroup
#define XkbVirtualModsToReal		SrvXkbVirtualModsToReal
#define	XkbChangeKeycodeRange		SrvXkbChangeKeycodeRange
#define	XkbApplyVirtualModChanges	SrvXkbApplyVirtualModChanges

#include <X11/extensions/XKBproto.h>
#include "xkbstr.h"
#include "xkbrules.h"
#include "inputstr.h"
#include "events.h"

typedef struct _XkbInterest {
    DeviceIntPtr dev;
    ClientPtr client;
    XID resource;
    struct _XkbInterest *next;
    CARD16 extDevNotifyMask;
    CARD16 stateNotifyMask;
    CARD16 namesNotifyMask;
    CARD32 ctrlsNotifyMask;
    CARD8 compatNotifyMask;
    BOOL bellNotifyMask;
    BOOL actionMessageMask;
    CARD16 accessXNotifyMask;
    CARD32 iStateNotifyMask;
    CARD32 iMapNotifyMask;
    CARD16 altSymsNotifyMask;
    CARD32 autoCtrls;
    CARD32 autoCtrlValues;
} XkbInterestRec, *XkbInterestPtr;

typedef struct _XkbRadioGroup {
    CARD8 flags;
    CARD8 nMembers;
    CARD8 dfltDown;
    CARD8 currentDown;
    CARD8 members[XkbRGMaxMembers];
} XkbRadioGroupRec, *XkbRadioGroupPtr;

typedef struct _XkbEventCause {
    CARD8 kc;
    CARD8 event;
    CARD8 mjr;
    CARD8 mnr;
    ClientPtr client;
} XkbEventCauseRec, *XkbEventCausePtr;

#define	XkbSetCauseKey(c,k,e)	{ (c)->kc= (k),(c)->event= (e),\
				  (c)->mjr= (c)->mnr= 0; \
				  (c)->client= NULL; }
#define	XkbSetCauseReq(c,j,n,cl) { (c)->kc= (c)->event= 0,\
				  (c)->mjr= (j),(c)->mnr= (n);\
				  (c)->client= (cl); }
#define	XkbSetCauseCoreReq(c,e,cl) XkbSetCauseReq(c,e,0,cl)
#define	XkbSetCauseXkbReq(c,e,cl)  XkbSetCauseReq(c,XkbReqCode,e,cl)
#define	XkbSetCauseUnknown(c)	   XkbSetCauseKey(c,0,0)

#define	_OFF_TIMER		0
#define	_KRG_WARN_TIMER		1
#define	_KRG_TIMER		2
#define	_SK_TIMEOUT_TIMER	3
#define	_ALL_TIMEOUT_TIMER	4

#define	_BEEP_NONE		0
#define	_BEEP_FEATURE_ON	1
#define	_BEEP_FEATURE_OFF	2
#define	_BEEP_FEATURE_CHANGE	3
#define	_BEEP_SLOW_WARN		4
#define	_BEEP_SLOW_PRESS	5
#define	_BEEP_SLOW_ACCEPT	6
#define	_BEEP_SLOW_REJECT	7
#define	_BEEP_SLOW_RELEASE	8
#define	_BEEP_STICKY_LATCH	9
#define	_BEEP_STICKY_LOCK	10
#define	_BEEP_STICKY_UNLOCK	11
#define	_BEEP_LED_ON		12
#define	_BEEP_LED_OFF		13
#define	_BEEP_LED_CHANGE	14
#define	_BEEP_BOUNCE_REJECT	15

typedef struct _XkbFilter {
    CARD16 keycode;
    CARD8 what;
    CARD8 active;
    CARD8 filterOthers;
    CARD32 priv;
    XkbAction upAction;
    int (*filter) (struct _XkbSrvInfo * /* xkbi */ ,
                   struct _XkbFilter * /* filter */ ,
                   unsigned /* keycode */ ,
                   XkbAction *  /* action */
        );
    struct _XkbFilter *next;
} XkbFilterRec, *XkbFilterPtr;

typedef struct _XkbSrvInfo {
    XkbStateRec prev_state;
    XkbStateRec state;
    XkbDescPtr desc;

    DeviceIntPtr device;
    KbdCtrlProcPtr kbdProc;

    XkbRadioGroupPtr radioGroups;
    CARD8 nRadioGroups;
    CARD8 clearMods;
    CARD8 setMods;
    INT16 groupChange;

    CARD16 dfltPtrDelta;

    double mouseKeysCurve;
    double mouseKeysCurveFactor;
    INT16 mouseKeysDX;
    INT16 mouseKeysDY;
    CARD8 mouseKeysFlags;
    Bool mouseKeysAccel;
    CARD8 mouseKeysCounter;

    CARD8 lockedPtrButtons;
    CARD8 shiftKeyCount;
    KeyCode mouseKey;
    KeyCode inactiveKey;
    KeyCode slowKey;
    KeyCode slowKeyEnableKey;
    KeyCode repeatKey;
    CARD8 krgTimerActive;
    CARD8 beepType;
    CARD8 beepCount;

    CARD32 flags;
    CARD32 lastPtrEventTime;
    CARD32 lastShiftEventTime;
    OsTimerPtr beepTimer;
    OsTimerPtr mouseKeyTimer;
    OsTimerPtr slowKeysTimer;
    OsTimerPtr bounceKeysTimer;
    OsTimerPtr repeatKeyTimer;
    OsTimerPtr krgTimer;

    int szFilters;
    XkbFilterPtr filters;
} XkbSrvInfoRec, *XkbSrvInfoPtr;

#define	XkbSLI_IsDefault	(1L<<0)
#define	XkbSLI_HasOwnState	(1L<<1)

typedef struct _XkbSrvLedInfo {
    CARD16 flags;
    CARD16 class;
    CARD16 id;
    union {
        KbdFeedbackPtr kf;
        LedFeedbackPtr lf;
    } fb;

    CARD32 physIndicators;
    CARD32 autoState;
    CARD32 explicitState;
    CARD32 effectiveState;

    CARD32 mapsPresent;
    CARD32 namesPresent;
    XkbIndicatorMapPtr maps;
    Atom *names;

    CARD32 usesBase;
    CARD32 usesLatched;
    CARD32 usesLocked;
    CARD32 usesEffective;
    CARD32 usesCompat;
    CARD32 usesControls;

    CARD32 usedComponents;
} XkbSrvLedInfoRec, *XkbSrvLedInfoPtr;

/*
 * Settings for xkbClientFlags field (used by DIX)
 * These flags _must_ not overlap with XkbPCF_*
 */
#define	_XkbClientInitialized		(1<<15)

#define	_XkbWantsDetectableAutoRepeat(c)\
	((c)->xkbClientFlags&XkbPCF_DetectableAutoRepeatMask)

/*
 * Settings for flags field
 */
#define	_XkbStateNotifyInProgress	(1<<0)

typedef struct {
    ProcessInputProc processInputProc;
    /* If processInputProc is set to something different than realInputProc,
     * UNWRAP and COND_WRAP will not touch processInputProc and update only
     * realInputProc.  This ensures that
     *   processInputProc == (frozen ? EnqueueEvent : realInputProc)
     *
     * WRAP_PROCESS_INPUT_PROC should only be called during initialization,
     * since it may destroy this invariant.
     */
    ProcessInputProc realInputProc;
    DeviceUnwrapProc unwrapProc;
} xkbDeviceInfoRec, *xkbDeviceInfoPtr;

#define WRAP_PROCESS_INPUT_PROC(device, oldprocs, proc, unwrapproc) \
	device->public.processInputProc = proc; \
	oldprocs->processInputProc = \
	oldprocs->realInputProc = device->public.realInputProc; \
	device->public.realInputProc = proc; \
	oldprocs->unwrapProc = device->unwrapProc; \
	device->unwrapProc = unwrapproc;

#define COND_WRAP_PROCESS_INPUT_PROC(device, oldprocs, proc, unwrapproc) \
	if (device->public.processInputProc == device->public.realInputProc)\
	    device->public.processInputProc = proc; \
	oldprocs->processInputProc = \
	oldprocs->realInputProc = device->public.realInputProc; \
	device->public.realInputProc = proc; \
	oldprocs->unwrapProc = device->unwrapProc; \
	device->unwrapProc = unwrapproc;

#define UNWRAP_PROCESS_INPUT_PROC(device, oldprocs, backupproc) \
        backupproc = device->public.realInputProc; \
	if (device->public.processInputProc == device->public.realInputProc)\
	    device->public.processInputProc = oldprocs->realInputProc; \
	device->public.realInputProc = oldprocs->realInputProc; \
	device->unwrapProc = oldprocs->unwrapProc;

extern _X_EXPORT DevPrivateKeyRec xkbDevicePrivateKeyRec;

#define xkbDevicePrivateKey (&xkbDevicePrivateKeyRec)

#define XKBDEVICEINFO(dev) ((xkbDeviceInfoPtr)dixLookupPrivate(&(dev)->devPrivates, xkbDevicePrivateKey))

extern void xkbUnwrapProc(DeviceIntPtr, DeviceHandleProc, void *);

/***====================================================================***/

/***====================================================================***/

#define XkbAX_KRGMask	 (XkbSlowKeysMask|XkbBounceKeysMask)
#define	XkbAllFilteredEventsMask \
	(XkbAccessXKeysMask|XkbRepeatKeysMask|XkbMouseKeysAccelMask|XkbAX_KRGMask)

/***====================================================================***/

extern _X_EXPORT int XkbReqCode;
extern _X_EXPORT int XkbEventBase;
extern _X_EXPORT int XkbKeyboardErrorCode;
extern _X_EXPORT const char *XkbBaseDirectory;
extern _X_EXPORT const char *XkbBinDirectory;

extern _X_EXPORT CARD32 xkbDebugFlags;

#define	_XkbLibError(c,l,d)     /* Epoch fail */

/* "a" is a "unique" numeric identifier that just defines which error
 * code statement it is. _XkbErrCode2(4, foo) means "this is the 4th error
 * statement in this function". lovely.
 */
#define	_XkbErrCode2(a,b) ((XID)((((unsigned int)(a))<<24)|((b)&0xffffff)))
#define	_XkbErrCode3(a,b,c)	_XkbErrCode2(a,(((unsigned int)(b))<<16)|(c))
#define	_XkbErrCode4(a,b,c,d) _XkbErrCode3(a,b,((((unsigned int)(c))<<8)|(d)))

#define	Status		int

extern _X_EXPORT void XkbUseMsg(void
    );

extern _X_EXPORT int XkbProcessArguments(int /* argc */ ,
                                         char ** /* argv */ ,
                                         int    /* i */
    );

extern _X_EXPORT Bool XkbInitPrivates(void);

extern _X_EXPORT void XkbSetExtension(DeviceIntPtr device,
                                      ProcessInputProc proc);

extern _X_EXPORT void XkbFreeCompatMap(XkbDescPtr /* xkb */ ,
                                       unsigned int /* which */ ,
                                       Bool     /* freeMap */
    );

extern _X_EXPORT void XkbFreeNames(XkbDescPtr /* xkb */ ,
                                   unsigned int /* which */ ,
                                   Bool /* freeMap */
    );

extern _X_EXPORT int _XkbLookupAnyDevice(DeviceIntPtr *pDev,
                                         int id,
                                         ClientPtr client,
                                         Mask access_mode, int *xkb_err);

extern _X_EXPORT int _XkbLookupKeyboard(DeviceIntPtr *pDev,
                                        int id,
                                        ClientPtr client,
                                        Mask access_mode, int *xkb_err);

extern _X_EXPORT int _XkbLookupBellDevice(DeviceIntPtr *pDev,
                                          int id,
                                          ClientPtr client,
                                          Mask access_mode, int *xkb_err);

extern _X_EXPORT int _XkbLookupLedDevice(DeviceIntPtr *pDev,
                                         int id,
                                         ClientPtr client,
                                         Mask access_mode, int *xkb_err);

extern _X_EXPORT int _XkbLookupButtonDevice(DeviceIntPtr *pDev,
                                            int id,
                                            ClientPtr client,
                                            Mask access_mode, int *xkb_err);

extern _X_EXPORT XkbDescPtr XkbAllocKeyboard(void
    );

extern _X_EXPORT Status XkbAllocClientMap(XkbDescPtr /* xkb */ ,
                                          unsigned int /* which */ ,
                                          unsigned int  /* nTypes */
    );

extern _X_EXPORT Status XkbAllocServerMap(XkbDescPtr /* xkb */ ,
                                          unsigned int /* which */ ,
                                          unsigned int  /* nNewActions */
    );

extern _X_EXPORT void XkbFreeClientMap(XkbDescPtr /* xkb */ ,
                                       unsigned int /* what */ ,
                                       Bool     /* freeMap */
    );

extern _X_EXPORT void XkbFreeServerMap(XkbDescPtr /* xkb */ ,
                                       unsigned int /* what */ ,
                                       Bool     /* freeMap */
    );

extern _X_EXPORT Status XkbAllocIndicatorMaps(XkbDescPtr        /* xkb */
    );

extern _X_EXPORT Status XkbAllocCompatMap(XkbDescPtr /* xkb */ ,
                                          unsigned int /* which */ ,
                                          unsigned int  /* nInterpret */
    );

extern _X_EXPORT Status XkbAllocNames(XkbDescPtr /* xkb */ ,
                                      unsigned int /* which */ ,
                                      int /* nTotalRG */ ,
                                      int       /* nTotalAliases */
    );

extern _X_EXPORT Status XkbAllocControls(XkbDescPtr /* xkb */ ,
                                         unsigned int   /* which */
    );

extern _X_EXPORT Status XkbCopyKeyTypes(XkbKeyTypePtr /* from */ ,
                                        XkbKeyTypePtr /* into */ ,
                                        int     /* num_types */
    );

extern _X_EXPORT Status XkbResizeKeyType(XkbDescPtr /* xkb */ ,
                                         int /* type_ndx */ ,
                                         int /* map_count */ ,
                                         Bool /* want_preserve */ ,
                                         int    /* new_num_lvls */
    );

extern _X_EXPORT void XkbFreeKeyboard(XkbDescPtr /* xkb */ ,
                                      unsigned int /* which */ ,
                                      Bool      /* freeDesc */
    );

extern _X_EXPORT void XkbFreeComponentNames(XkbComponentNamesPtr /* names */ ,
                                            Bool        /* freeNames */
    );

extern _X_EXPORT void XkbSetActionKeyMods(XkbDescPtr /* xkb */ ,
                                          XkbAction * /* act */ ,
                                          unsigned int  /* mods */
    );

extern _X_EXPORT unsigned int XkbMaskForVMask(XkbDescPtr /* xkb */ ,
                                              unsigned int      /* vmask */
    );

extern _X_EXPORT Bool XkbVirtualModsToReal(XkbDescPtr /* xkb */ ,
                                           unsigned int /* virtua_mask */ ,
                                           unsigned int *       /* mask_rtrn */
    );

extern _X_EXPORT unsigned int XkbAdjustGroup(int /* group */ ,
                                             XkbControlsPtr     /* ctrls */
    );

extern _X_EXPORT KeySym *XkbResizeKeySyms(XkbDescPtr /* xkb */ ,
                                          int /* key */ ,
                                          int   /* needed */
    );

extern _X_EXPORT XkbAction *XkbResizeKeyActions(XkbDescPtr /* xkb */ ,
                                                int /* key */ ,
                                                int     /* needed */
    );

extern _X_EXPORT void XkbUpdateKeyTypesFromCore(DeviceIntPtr /* pXDev */ ,
                                                KeySymsPtr /* syms */ ,
                                                KeyCode /* first */ ,
                                                CARD8 /* num */ ,
                                                XkbChangesPtr   /* pChanges */
    );

extern _X_EXPORT void XkbUpdateDescActions(XkbDescPtr /* xkb */ ,
                                           KeyCode /* first */ ,
                                           CARD8 /* num */ ,
                                           XkbChangesPtr        /* changes */
    );

extern _X_EXPORT void XkbUpdateActions(DeviceIntPtr /* pXDev */ ,
                                       KeyCode /* first */ ,
                                       CARD8 /* num */ ,
                                       XkbChangesPtr /* pChanges */ ,
                                       unsigned int * /* needChecksRtrn */ ,
                                       XkbEventCausePtr /* cause */
    );

extern _X_EXPORT KeySymsPtr XkbGetCoreMap(DeviceIntPtr  /* keybd */
    );

extern _X_EXPORT void XkbApplyMappingChange(DeviceIntPtr /* pXDev */ ,
                                            KeySymsPtr /* map */ ,
                                            KeyCode /* firstKey */ ,
                                            CARD8 /* num */ ,
                                            CARD8 * /* modmap */ ,
                                            ClientPtr   /* client */
    );

extern _X_EXPORT void XkbSetIndicators(DeviceIntPtr /* pXDev */ ,
                                       CARD32 /* affect */ ,
                                       CARD32 /* values */ ,
                                       XkbEventCausePtr /* cause */
    );

extern _X_EXPORT void XkbUpdateIndicators(DeviceIntPtr /* keybd */ ,
                                          CARD32 /* changed */ ,
                                          Bool /* check_edevs */ ,
                                          XkbChangesPtr /* pChanges */ ,
                                          XkbEventCausePtr      /* cause */
    );

extern _X_EXPORT void XkbUpdateAllDeviceIndicators(XkbChangesPtr /* changes */,
                                                   XkbEventCausePtr /* cause */
    );

extern _X_EXPORT XkbSrvLedInfoPtr XkbAllocSrvLedInfo(DeviceIntPtr /* dev */ ,
                                                     KbdFeedbackPtr /* kf */ ,
                                                     LedFeedbackPtr /* lf */ ,
                                                     unsigned int       /* needed_parts */
    );

extern _X_EXPORT XkbSrvLedInfoPtr XkbCopySrvLedInfo(DeviceIntPtr /* dev */ ,
                                                    XkbSrvLedInfoPtr /* src */ ,
                                                    KbdFeedbackPtr /* kf */ ,
                                                    LedFeedbackPtr      /* lf */
    );

extern _X_EXPORT XkbSrvLedInfoPtr XkbFindSrvLedInfo(DeviceIntPtr /* dev */ ,
                                                    unsigned int /* class */ ,
                                                    unsigned int /* id */ ,
                                                    unsigned int        /* needed_parts */
    );

extern _X_EXPORT void XkbApplyLedNameChanges(DeviceIntPtr /* dev */ ,
                                             XkbSrvLedInfoPtr /* sli */ ,
                                             unsigned int /* changed_names */ ,
                                             xkbExtensionDeviceNotify * /* ed */
                                             ,
                                             XkbChangesPtr /* changes */ ,
                                             XkbEventCausePtr   /* cause */
    );

extern _X_EXPORT void XkbApplyLedMapChanges(DeviceIntPtr /* dev */ ,
                                            XkbSrvLedInfoPtr /* sli */ ,
                                            unsigned int /* changed_maps */ ,
                                            xkbExtensionDeviceNotify * /* ed */
                                            ,
                                            XkbChangesPtr /* changes */ ,
                                            XkbEventCausePtr    /* cause */
    );

extern _X_EXPORT void XkbApplyLedStateChanges(DeviceIntPtr /* dev */ ,
                                              XkbSrvLedInfoPtr /* sli */ ,
                                              unsigned int /* changed_leds */ ,
                                              xkbExtensionDeviceNotify *
                                              /* ed */ ,
                                              XkbChangesPtr /* changes */ ,
                                              XkbEventCausePtr  /* cause */
    );

extern _X_EXPORT void XkbFlushLedEvents(DeviceIntPtr /* dev */ ,
                                        DeviceIntPtr /* kbd */ ,
                                        XkbSrvLedInfoPtr /* sli */ ,
                                        xkbExtensionDeviceNotify * /* ed */ ,
                                        XkbChangesPtr /* changes */ ,
                                        XkbEventCausePtr        /* cause */
    );

extern _X_EXPORT unsigned int XkbIndicatorsToUpdate(DeviceIntPtr /* dev */ ,
                                                    unsigned long
                                                    /* state_changes */ ,
                                                    Bool        /* enabled_ctrl_changes */
    );

extern _X_EXPORT void XkbComputeDerivedState(XkbSrvInfoPtr      /* xkbi */
    );

extern _X_EXPORT void XkbCheckSecondaryEffects(XkbSrvInfoPtr /* xkbi */ ,
                                               unsigned int /* which */ ,
                                               XkbChangesPtr /* changes */ ,
                                               XkbEventCausePtr /* cause */
    );

extern _X_EXPORT void XkbCheckIndicatorMaps(DeviceIntPtr /* dev */ ,
                                            XkbSrvLedInfoPtr /* sli */ ,
                                            unsigned int        /* which */
    );

extern _X_EXPORT unsigned int XkbStateChangedFlags(XkbStatePtr /* old */ ,
                                                   XkbStatePtr  /* new */
    );

extern _X_EXPORT void XkbSendStateNotify(DeviceIntPtr /* kbd */ ,
                                         xkbStateNotify *       /* pSN */
    );

extern _X_EXPORT void XkbSendMapNotify(DeviceIntPtr /* kbd */ ,
                                       xkbMapNotify *   /* ev */
    );

extern _X_EXPORT int XkbComputeControlsNotify(DeviceIntPtr /* kbd */ ,
                                              XkbControlsPtr /* old */ ,
                                              XkbControlsPtr /* new */ ,
                                              xkbControlsNotify * /* pCN */ ,
                                              Bool      /* forceCtrlProc */
    );

extern _X_EXPORT void XkbSendControlsNotify(DeviceIntPtr /* kbd */ ,
                                            xkbControlsNotify * /* ev */
    );

extern _X_EXPORT void XkbSendCompatMapNotify(DeviceIntPtr /* kbd */ ,
                                             xkbCompatMapNotify *       /* ev */
    );

extern _X_EXPORT void XkbHandleBell(BOOL force,
                                    BOOL eventOnly,
                                    DeviceIntPtr kbd,
                                    CARD8 percent,
                                    void *ctrl,
                                    CARD8 class,
                                    Atom name,
                                    WindowPtr pWin,
                                    ClientPtr pClient
    );

extern _X_EXPORT void XkbSendAccessXNotify(DeviceIntPtr /* kbd */ ,
                                           xkbAccessXNotify *   /* pEv */
    );

extern _X_EXPORT void XkbSendNamesNotify(DeviceIntPtr /* kbd */ ,
                                         xkbNamesNotify *       /* ev */
    );

extern _X_EXPORT void XkbSendActionMessage(DeviceIntPtr /* kbd */ ,
                                           xkbActionMessage *   /* ev */
    );

extern _X_EXPORT void XkbSendExtensionDeviceNotify(DeviceIntPtr /* kbd */ ,
                                                   ClientPtr /* client */ ,
                                                   xkbExtensionDeviceNotify *   /* ev */
    );

extern _X_EXPORT void XkbSendNotification(DeviceIntPtr /* kbd */ ,
                                          XkbChangesPtr /* pChanges */ ,
                                          XkbEventCausePtr      /* cause */
    );

extern _X_EXPORT void XkbProcessKeyboardEvent(DeviceEvent * /* event */ ,
                                              DeviceIntPtr      /* keybd */
    );

extern _X_EXPORT void XkbHandleActions(DeviceIntPtr /* dev */ ,
                                       DeviceIntPtr /* kbd */ ,
                                       DeviceEvent *    /* event */
    );

extern void XkbPushLockedStateToSlaves(DeviceIntPtr /* master */,
                                       int /* evtype */,
                                       int /* key */);

extern _X_EXPORT Bool XkbEnableDisableControls(XkbSrvInfoPtr /* xkbi */ ,
                                               unsigned long /* change */ ,
                                               unsigned long /* newValues */ ,
                                               XkbChangesPtr /* changes */ ,
                                               XkbEventCausePtr /* cause */
    );

extern _X_EXPORT void AccessXInit(DeviceIntPtr  /* dev */
    );

extern _X_EXPORT Bool AccessXFilterPressEvent(DeviceEvent * /* event */ ,
                                              DeviceIntPtr      /* keybd */
    );

extern _X_EXPORT Bool AccessXFilterReleaseEvent(DeviceEvent * /* event */ ,
                                                DeviceIntPtr    /* keybd */
    );

extern _X_EXPORT void AccessXCancelRepeatKey(XkbSrvInfoPtr /* xkbi */ ,
                                             KeyCode    /* key */
    );

extern _X_EXPORT void AccessXComputeCurveFactor(XkbSrvInfoPtr /* xkbi */ ,
                                                XkbControlsPtr  /* ctrls */
    );

extern _X_EXPORT XkbInterestPtr XkbFindClientResource(DevicePtr /* inDev */ ,
                                                      ClientPtr /* client */
    );

extern _X_EXPORT XkbInterestPtr XkbAddClientResource(DevicePtr /* inDev */ ,
                                                     ClientPtr /* client */ ,
                                                     XID        /* id */
    );

extern _X_EXPORT int XkbRemoveResourceClient(DevicePtr /* inDev */ ,
                                             XID        /* id */
    );

extern _X_EXPORT int XkbDDXAccessXBeep(DeviceIntPtr /* dev */ ,
                                       unsigned int /* what */ ,
                                       unsigned int     /* which */
    );

extern _X_EXPORT int XkbDDXUsesSoftRepeat(DeviceIntPtr  /* dev */
    );

extern _X_EXPORT void XkbDDXKeybdCtrlProc(DeviceIntPtr /* dev */ ,
                                          KeybdCtrl *   /* ctrl */
    );

extern _X_EXPORT void XkbDDXChangeControls(DeviceIntPtr /* dev */ ,
                                           XkbControlsPtr /* old */ ,
                                           XkbControlsPtr       /* new */
    );

extern _X_EXPORT void XkbDDXUpdateDeviceIndicators(DeviceIntPtr /* dev */ ,
                                                   XkbSrvLedInfoPtr /* sli */ ,
                                                   CARD32       /* newState */
    );

extern _X_EXPORT int XkbDDXTerminateServer(DeviceIntPtr /* dev */ ,
                                           KeyCode /* key */ ,
                                           XkbAction *  /* act */
    );

extern _X_EXPORT int XkbDDXSwitchScreen(DeviceIntPtr /* dev */ ,
                                        KeyCode /* key */ ,
                                        XkbAction *     /* act */
    );

extern _X_EXPORT int XkbDDXPrivate(DeviceIntPtr /* dev */ ,
                                   KeyCode /* key */ ,
                                   XkbAction *  /* act */
    );

extern _X_EXPORT void XkbDisableComputedAutoRepeats(DeviceIntPtr /* pXDev */ ,
                                                    unsigned int        /* key */
    );

extern _X_EXPORT void XkbSetRepeatKeys(DeviceIntPtr /* pXDev */ ,
                                       int /* key */ ,
                                       int      /* onoff */
    );

extern _X_EXPORT int XkbLatchModifiers(DeviceIntPtr /* pXDev */ ,
                                       CARD8 /* mask */ ,
                                       CARD8    /* latches */
    );

extern _X_EXPORT int XkbLatchGroup(DeviceIntPtr /* pXDev */ ,
                                   int  /* group */
    );

extern _X_EXPORT void XkbClearAllLatchesAndLocks(DeviceIntPtr /* dev */ ,
                                                 XkbSrvInfoPtr /* xkbi */ ,
                                                 Bool /* genEv */ ,
                                                 XkbEventCausePtr       /* cause */
    );

extern _X_EXPORT void XkbInitRules(XkbRMLVOSet * /* rmlvo   */,
                                   const char *  /* rules   */,
                                   const char *  /* model   */,
                                   const char *  /* layout  */,
                                   const char *  /* variant */,
                                   const char *  /* options */
    ) ;

extern _X_EXPORT void XkbGetRulesDflts(XkbRMLVOSet *    /* rmlvo */
    );

extern _X_EXPORT void XkbFreeRMLVOSet(XkbRMLVOSet * /* rmlvo */ ,
                                      Bool      /* freeRMLVO */
    );

extern _X_EXPORT void XkbSetRulesDflts(XkbRMLVOSet *    /* rmlvo */
    );

extern _X_EXPORT void XkbDeleteRulesDflts(void
    );

extern _X_EXPORT void XkbDeleteRulesUsed(void
    );

extern _X_EXPORT int SProcXkbDispatch(ClientPtr /* client */
    );

extern _X_EXPORT XkbGeometryPtr XkbLookupNamedGeometry(DeviceIntPtr /* dev */ ,
                                                       Atom /* name */ ,
                                                       Bool *   /* shouldFree */
    );

extern _X_EXPORT void XkbConvertCase(KeySym /* sym */ ,
                                     KeySym * /* lower */ ,
                                     KeySym *   /* upper */
    );

extern _X_EXPORT Status XkbChangeKeycodeRange(XkbDescPtr /* xkb */ ,
                                              int /* minKC */ ,
                                              int /* maxKC */ ,
                                              XkbChangesPtr     /* changes */
    );

extern _X_EXPORT void XkbFreeSrvLedInfo(XkbSrvLedInfoPtr        /* sli */
    );

extern _X_EXPORT void XkbFreeInfo(XkbSrvInfoPtr /* xkbi */
    );

extern _X_EXPORT Status XkbChangeTypesOfKey(XkbDescPtr /* xkb */ ,
                                            int /* key */ ,
                                            int /* nGroups */ ,
                                            unsigned int /* groups */ ,
                                            int * /* newTypesIn */ ,
                                            XkbMapChangesPtr    /* changes */
    );

extern _X_EXPORT int XkbKeyTypesForCoreSymbols(XkbDescPtr /* xkb */ ,
                                               int /* map_width */ ,
                                               KeySym * /* core_syms */ ,
                                               unsigned int /* protected */ ,
                                               int * /* types_inout */ ,
                                               KeySym * /* xkb_syms_rtrn */
    );

extern _X_EXPORT Bool XkbApplyCompatMapToKey(XkbDescPtr /* xkb */ ,
                                             KeyCode /* key */ ,
                                             XkbChangesPtr      /* changes */
    );

extern _X_EXPORT Bool XkbApplyVirtualModChanges(XkbDescPtr /* xkb */ ,
                                                unsigned int /* changed */ ,
                                                XkbChangesPtr   /* changes */
    );

extern _X_EXPORT void XkbSendNewKeyboardNotify(DeviceIntPtr /* kbd */ ,
                                               xkbNewKeyboardNotify *   /* pNKN */
    );

extern Bool XkbCopyKeymap(XkbDescPtr /* dst */ ,
                          XkbDescPtr /* src */ );

extern _X_EXPORT Bool XkbCopyDeviceKeymap(DeviceIntPtr /* dst */,
					  DeviceIntPtr /* src */);

extern _X_EXPORT Bool XkbDeviceApplyKeymap(DeviceIntPtr /* dst */ ,
                                           XkbDescPtr /* src */ );

extern void XkbFilterEvents(ClientPtr /* pClient */ ,
                            int /* nEvents */ ,
                            xEvent * /* xE */ );

extern int XkbGetEffectiveGroup(XkbSrvInfoPtr /* xkbi */ ,
                                XkbStatePtr /* xkbstate */ ,
                                CARD8 /* keycode */ );

extern void XkbMergeLockedPtrBtns(DeviceIntPtr /* master */ );

extern void XkbFakeDeviceButton(DeviceIntPtr /* dev */ ,
                                int /* press */ ,
                                int /* button */ );

extern _X_EXPORT void XkbCopyControls(XkbDescPtr /* dst */ ,
                                      XkbDescPtr /* src */ );

#include "xkbfile.h"
#include "xkbrules.h"

#define	_XkbListKeycodes	0
#define	_XkbListTypes		1
#define	_XkbListCompat		2
#define	_XkbListSymbols		3
#define	_XkbListGeometry	4
#define	_XkbListNumComponents	5

extern _X_EXPORT unsigned int XkbDDXLoadKeymapByNames(DeviceIntPtr /* keybd */ ,
                                                      XkbComponentNamesPtr
                                                      /* names */ ,
                                                      unsigned int /* want */ ,
                                                      unsigned int /* need */ ,
                                                      XkbDescPtr *
                                                      /* finfoRtrn */ ,
                                                      char *
                                                      /* keymapNameRtrn */ ,
                                                      int       /* keymapNameRtrnLen */
    );

extern _X_EXPORT Bool XkbDDXNamesFromRules(DeviceIntPtr /* keybd */ ,
                                           const char * /* rules */ ,
                                           XkbRF_VarDefsPtr /* defs */ ,
                                           XkbComponentNamesPtr /* names */
    );

extern _X_EXPORT XkbDescPtr XkbCompileKeymap(DeviceIntPtr /* dev */ ,
                                             XkbRMLVOSet *      /* rmlvo */
    );

extern _X_EXPORT XkbDescPtr XkbCompileKeymapFromString(DeviceIntPtr dev,
						       const char *keymap,
						       int keymap_length);

#endif                          /* _XKBSRV_H_ */
@


1.13
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d499 4
@


1.12
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d9 2
a10 2
documentation, and that the name of Silicon Graphics not be 
used in advertising or publicity pertaining to distribution 
d12 1
a12 1
Silicon Graphics makes no representation about the suitability 
d16 2
a17 2
SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d19 3
a21 3
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
d599 9
a607 9
extern _X_EXPORT void XkbHandleBell(BOOL /* force */ ,
                                    BOOL /* eventOnly */ ,
                                    DeviceIntPtr /* kbd */ ,
                                    CARD8 /* percent */ ,
                                    void */* ctrl */ ,
                                    CARD8 /* class */ ,
                                    Atom /* name */ ,
                                    WindowPtr /* pWin */ ,
                                    ClientPtr   /* pClient */
@


1.11
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d284 1
a284 1
extern void xkbUnwrapProc(DeviceIntPtr, DeviceHandleProc, pointer);
d603 1
a603 1
                                    pointer /* ctrl */ ,
d641 4
d745 8
d827 5
a831 2
extern _X_EXPORT Bool XkbCopyDeviceKeymap(DeviceIntPtr /* dst */ ,
                                          DeviceIntPtr /* src */ );
d847 3
d873 1
a873 1
                                           char * /* rules */ ,
d881 4
@


1.10
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d754 3
@


1.9
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d174 1
d305 5
a313 3
extern _X_EXPORT int DeviceKeyPress, DeviceKeyRelease, DeviceMotionNotify;
extern _X_EXPORT int DeviceButtonPress, DeviceButtonRelease;

a837 17

typedef struct _XkbSrvListInfo {
    int szPool;
    int nPool;
    char *pool;

    int maxRtrn;
    int nTotal;

    char *pattern[_XkbListNumComponents];
    int nFound[_XkbListNumComponents];
} XkbSrvListInfoRec, *XkbSrvListInfoPtr;

extern _X_EXPORT Status XkbDDXList(DeviceIntPtr /* dev */ ,
                                   XkbSrvListInfoPtr /* listing */ ,
                                   ClientPtr    /* client */
    );
@


1.8
log
@Update to xserver 1.11.2
@
text
@d62 18
a79 18
	DeviceIntPtr		dev;
	ClientPtr		client;
	XID			resource;
	struct _XkbInterest *	next;
	CARD16			extDevNotifyMask;
	CARD16			stateNotifyMask;
	CARD16			namesNotifyMask;
	CARD32 			ctrlsNotifyMask;
	CARD8			compatNotifyMask;
	BOOL			bellNotifyMask;
	BOOL			actionMessageMask;
	CARD16			accessXNotifyMask;
	CARD32			iStateNotifyMask;
	CARD32			iMapNotifyMask;
	CARD16			altSymsNotifyMask;
	CARD32			autoCtrls;
	CARD32			autoCtrlValues;
} XkbInterestRec,*XkbInterestPtr;
d82 5
a86 5
	CARD8		flags;
	CARD8		nMembers;
	CARD8		dfltDown;
	CARD8		currentDown;
	CARD8		members[XkbRGMaxMembers];
d89 8
a96 7
typedef struct	_XkbEventCause {
	CARD8		kc;
	CARD8		event;
	CARD8		mjr;
	CARD8		mnr;
	ClientPtr	client;
} XkbEventCauseRec,*XkbEventCausePtr;
d131 13
a143 14
	CARD16			  keycode;
	CARD8			  what;
	CARD8			  active;
	CARD8			  filterOthers;
	CARD32			  priv;
	XkbAction		  upAction;
	int			(*filter)(
					struct _XkbSrvInfo* 	/* xkbi */,
					struct _XkbFilter *	/* filter */,
					unsigned		/* keycode */,
					XkbAction *		/* action */
				  );
	struct _XkbFilter	 *next;
} XkbFilterRec,*XkbFilterPtr;
d146 42
a187 42
	XkbStateRec	 prev_state;
	XkbStateRec	 state;
	XkbDescPtr	 desc;

	DeviceIntPtr	 device;
	KbdCtrlProcPtr	 kbdProc;

	XkbRadioGroupPtr radioGroups;
	CARD8		 nRadioGroups;
	CARD8		 clearMods;
	CARD8		 setMods;
	INT16		 groupChange;

	CARD16		 dfltPtrDelta;

	double		 mouseKeysCurve;
	double		 mouseKeysCurveFactor;
	INT16		 mouseKeysDX;
	INT16		 mouseKeysDY;
	CARD8		 mouseKeysFlags;
	Bool		 mouseKeysAccel;
	CARD8		 mouseKeysCounter;

	CARD8		 lockedPtrButtons;
	CARD8		 shiftKeyCount;
	KeyCode		 mouseKey;
	KeyCode		 inactiveKey;
	KeyCode		 slowKey;
	KeyCode		 repeatKey;
	CARD8		 krgTimerActive;
	CARD8		 beepType;
	CARD8		 beepCount;

	CARD32		 flags;
	CARD32		 lastPtrEventTime;
	CARD32		 lastShiftEventTime;
	OsTimerPtr	 beepTimer;
	OsTimerPtr	 mouseKeyTimer;
	OsTimerPtr	 slowKeysTimer;
	OsTimerPtr	 bounceKeysTimer;
	OsTimerPtr	 repeatKeyTimer;
	OsTimerPtr	 krgTimer;
d189 2
a190 2
	int		 szFilters;
	XkbFilterPtr	 filters;
d196 25
a220 25
typedef struct	_XkbSrvLedInfo {
	CARD16			flags;
	CARD16			class;
	CARD16			id;
	union {
	    KbdFeedbackPtr	kf;
	    LedFeedbackPtr	lf;
	} 			fb;

	CARD32			physIndicators;
	CARD32			autoState;
	CARD32			explicitState;
	CARD32			effectiveState;

	CARD32			mapsPresent;
	CARD32			namesPresent;
	XkbIndicatorMapPtr	maps;
	Atom *			names;

	CARD32			usesBase;
	CARD32			usesLatched;
	CARD32			usesLocked;
	CARD32			usesEffective;
	CARD32			usesCompat;
	CARD32			usesControls;
d222 1
a222 1
	CARD32			usedComponents;
d239 1
a239 2
typedef struct
{
d278 1
a286 1

d295 5
a299 5
extern _X_EXPORT int	XkbReqCode;
extern _X_EXPORT int	XkbEventBase;
extern _X_EXPORT int	XkbKeyboardErrorCode;
extern _X_EXPORT char *	XkbBaseDirectory;
extern _X_EXPORT char *	XkbBinDirectory;
d301 1
a301 1
extern _X_EXPORT CARD32	xkbDebugFlags;
d303 1
a303 1
#define	_XkbLibError(c,l,d) /* Epoch fail */
d308 2
a309 2
extern	_X_EXPORT int	DeviceKeyPress,DeviceKeyRelease,DeviceMotionNotify;
extern	_X_EXPORT int	DeviceButtonPress,DeviceButtonRelease;
d313 2
a314 621
extern _X_EXPORT void XkbUseMsg(
    void
);

extern _X_EXPORT int XkbProcessArguments(
    int				/* argc */,
    char **			/* argv */,
    int				/* i */
);

extern _X_EXPORT Bool   XkbInitPrivates(void);

extern _X_EXPORT void	XkbSetExtension(DeviceIntPtr device, ProcessInputProc proc);

extern _X_EXPORT void	XkbFreeCompatMap(
    XkbDescPtr			/* xkb */,
    unsigned int		/* which */,
    Bool			/* freeMap */
);

extern _X_EXPORT void XkbFreeNames(
	XkbDescPtr		/* xkb */,
	unsigned int		/* which */,
	Bool			/* freeMap */
);

extern _X_EXPORT int _XkbLookupAnyDevice(
    DeviceIntPtr *pDev,
    int id,
    ClientPtr client,
    Mask access_mode,
    int *xkb_err
);

extern _X_EXPORT int _XkbLookupKeyboard(
    DeviceIntPtr *pDev,
    int id,
    ClientPtr client,
    Mask access_mode,
    int *xkb_err
);

extern _X_EXPORT int _XkbLookupBellDevice(
    DeviceIntPtr *pDev,
    int id,
    ClientPtr client,
    Mask access_mode,
    int *xkb_err
);

extern _X_EXPORT int _XkbLookupLedDevice(
    DeviceIntPtr *pDev,
    int id,
    ClientPtr client,
    Mask access_mode,
    int *xkb_err
);

extern _X_EXPORT int _XkbLookupButtonDevice(
    DeviceIntPtr *pDev,
    int id,
    ClientPtr client,
    Mask access_mode,
    int *xkb_err
);

extern _X_EXPORT XkbDescPtr XkbAllocKeyboard(
	void
);

extern _X_EXPORT Status XkbAllocClientMap(
	XkbDescPtr		/* xkb */,
	unsigned int		/* which */,
	unsigned int		/* nTypes */
);

extern _X_EXPORT Status XkbAllocServerMap(
	XkbDescPtr		/* xkb */,
	unsigned int		/* which */,
	unsigned int		/* nNewActions */
);

extern _X_EXPORT void	XkbFreeClientMap(
    XkbDescPtr			/* xkb */,
    unsigned int		/* what */,
    Bool			/* freeMap */
);

extern _X_EXPORT void	XkbFreeServerMap(
    XkbDescPtr			/* xkb */,
    unsigned int		/* what */,
    Bool			/* freeMap */
);

extern _X_EXPORT Status XkbAllocIndicatorMaps(
	XkbDescPtr		/* xkb */
);

extern _X_EXPORT Status	XkbAllocCompatMap(
    XkbDescPtr			/* xkb */,
    unsigned int		/* which */,
    unsigned int		/* nInterpret */
);

extern _X_EXPORT Status XkbAllocNames(
	XkbDescPtr		/* xkb */,
	unsigned int		/* which */,
	int			/* nTotalRG */,
	int			/* nTotalAliases */
);

extern _X_EXPORT Status	XkbAllocControls(
	XkbDescPtr		/* xkb */,
	unsigned int		/* which*/
);

extern _X_EXPORT Status	XkbCopyKeyTypes(
    XkbKeyTypePtr		/* from */,
    XkbKeyTypePtr		/* into */,
    int				/* num_types */
);

extern _X_EXPORT Status	XkbResizeKeyType(
    XkbDescPtr		/* xkb */,
    int			/* type_ndx */,
    int			/* map_count */,
    Bool		/* want_preserve */,
    int			/* new_num_lvls */
);

extern _X_EXPORT void	XkbFreeKeyboard(
	XkbDescPtr		/* xkb */,
	unsigned int		/* which */,
	Bool			/* freeDesc */
);

extern _X_EXPORT void	XkbFreeComponentNames(
	XkbComponentNamesPtr	/* names */,
	Bool			/* freeNames */
);

extern _X_EXPORT  void XkbSetActionKeyMods(
	XkbDescPtr		/* xkb */,
	XkbAction *		/* act */,
	unsigned int 		/* mods */
);

extern _X_EXPORT unsigned int XkbMaskForVMask(
    XkbDescPtr		/* xkb */,
    unsigned int	/* vmask */
);

extern _X_EXPORT Bool XkbVirtualModsToReal(
	XkbDescPtr	/* xkb */,
	unsigned int	/* virtua_mask */,
	unsigned int *	/* mask_rtrn */
);

extern _X_EXPORT unsigned int	XkbAdjustGroup(
    int			/* group */,
    XkbControlsPtr	/* ctrls */
);

extern _X_EXPORT KeySym *XkbResizeKeySyms(
    XkbDescPtr		/* xkb */,
    int 		/* key */,
    int 		/* needed */
);

extern _X_EXPORT XkbAction *XkbResizeKeyActions(
    XkbDescPtr		/* xkb */,
    int 		/* key */,
    int 		/* needed */
);

extern _X_EXPORT void XkbUpdateKeyTypesFromCore(
    DeviceIntPtr	/* pXDev */,
    KeySymsPtr          /* syms */,
    KeyCode 		/* first */,
    CARD8 		/* num */,
    XkbChangesPtr	/* pChanges */
);

extern _X_EXPORT void XkbUpdateDescActions(
    XkbDescPtr		/* xkb */,
    KeyCode		/* first */,
    CARD8		/* num */,
    XkbChangesPtr	/* changes */
);

extern _X_EXPORT void XkbUpdateActions(
    DeviceIntPtr	/* pXDev */,
    KeyCode 		/* first */,
    CARD8 		/* num */,
    XkbChangesPtr  	/* pChanges */,
    unsigned int *	/* needChecksRtrn */,
    XkbEventCausePtr	/* cause */
);

extern _X_EXPORT KeySymsPtr XkbGetCoreMap(
    DeviceIntPtr        /* keybd */
);

extern _X_EXPORT void XkbApplyMappingChange(
    DeviceIntPtr	/* pXDev */,
    KeySymsPtr          /* map */,
    KeyCode		/* firstKey */,
    CARD8		/* num */,
    CARD8 *             /* modmap */,
    ClientPtr		/* client */
);

extern _X_EXPORT void XkbSetIndicators(
    DeviceIntPtr		/* pXDev */,
    CARD32			/* affect */,
    CARD32			/* values */,
    XkbEventCausePtr		/* cause */
);

extern _X_EXPORT void XkbUpdateIndicators(
    DeviceIntPtr		/* keybd */,
    CARD32		 	/* changed */,
    Bool			/* check_edevs */,
    XkbChangesPtr		/* pChanges */,
    XkbEventCausePtr		/* cause */
);

extern _X_EXPORT XkbSrvLedInfoPtr XkbAllocSrvLedInfo(
    DeviceIntPtr		/* dev */,
    KbdFeedbackPtr		/* kf */,
    LedFeedbackPtr		/* lf */,
    unsigned int		/* needed_parts */
);

extern _X_EXPORT XkbSrvLedInfoPtr XkbCopySrvLedInfo(
    DeviceIntPtr		/* dev */,
    XkbSrvLedInfoPtr		/* src */,
    KbdFeedbackPtr		/* kf */,
    LedFeedbackPtr		/* lf */
);


extern _X_EXPORT XkbSrvLedInfoPtr XkbFindSrvLedInfo(
    DeviceIntPtr		/* dev */,
    unsigned int		/* class */,
    unsigned int		/* id */,
    unsigned int		/* needed_parts */
);

extern _X_EXPORT void XkbApplyLedNameChanges(
    DeviceIntPtr		/* dev */,
    XkbSrvLedInfoPtr		/* sli */,
    unsigned int		/* changed_names */,
    xkbExtensionDeviceNotify *	/* ed */,
    XkbChangesPtr		/* changes */,
    XkbEventCausePtr		/* cause */
);

extern _X_EXPORT void XkbApplyLedMapChanges(
    DeviceIntPtr		/* dev */,
    XkbSrvLedInfoPtr		/* sli */,
    unsigned int		/* changed_maps */,
    xkbExtensionDeviceNotify *	/* ed */,
    XkbChangesPtr		/* changes */,
    XkbEventCausePtr		/* cause */
);

extern _X_EXPORT void XkbApplyLedStateChanges(
    DeviceIntPtr		/* dev */,
    XkbSrvLedInfoPtr		/* sli */,
    unsigned int		/* changed_leds */,
    xkbExtensionDeviceNotify *	/* ed */,
    XkbChangesPtr		/* changes */,
    XkbEventCausePtr		/* cause */
);

extern _X_EXPORT void XkbFlushLedEvents(
    DeviceIntPtr		/* dev */,
    DeviceIntPtr		/* kbd */,
    XkbSrvLedInfoPtr		/* sli */,
    xkbExtensionDeviceNotify *	/* ed */,
    XkbChangesPtr		/* changes */,
    XkbEventCausePtr		/* cause */
);

extern _X_EXPORT unsigned int XkbIndicatorsToUpdate(
    DeviceIntPtr		/* dev */,
    unsigned long		/* state_changes */,
    Bool			/* enabled_ctrl_changes */
);

extern _X_EXPORT void XkbComputeDerivedState(
    XkbSrvInfoPtr		/* xkbi */
);

extern _X_EXPORT void XkbCheckSecondaryEffects(
    XkbSrvInfoPtr		/* xkbi */,
    unsigned int		/* which */,
    XkbChangesPtr		/* changes */,
    XkbEventCausePtr		/* cause */
);

extern _X_EXPORT void XkbCheckIndicatorMaps(
    DeviceIntPtr		/* dev */,
    XkbSrvLedInfoPtr		/* sli */,
    unsigned int		/* which */
);

extern _X_EXPORT unsigned int XkbStateChangedFlags(
    XkbStatePtr			/* old */,
    XkbStatePtr			/* new */
);

extern _X_EXPORT void XkbSendStateNotify(
       DeviceIntPtr	/* kbd */,
       xkbStateNotify *	/* pSN */
);

extern _X_EXPORT void XkbSendMapNotify(
       DeviceIntPtr	/* kbd */,
       xkbMapNotify *	/* ev */
);

extern _X_EXPORT int  XkbComputeControlsNotify(
	DeviceIntPtr		/* kbd */,
	XkbControlsPtr		/* old */,
	XkbControlsPtr		/* new */,
	xkbControlsNotify *	/* pCN */,
	Bool			/* forceCtrlProc */
);

extern _X_EXPORT void XkbSendControlsNotify(
       DeviceIntPtr		/* kbd */,
       xkbControlsNotify *	/* ev */
);

extern _X_EXPORT void XkbSendCompatMapNotify(
	DeviceIntPtr		/* kbd */,
	xkbCompatMapNotify *	/* ev */
);

extern _X_EXPORT void XkbHandleBell(
       BOOL		/* force */,
       BOOL		/* eventOnly */,
       DeviceIntPtr	/* kbd */,
       CARD8		/* percent */,
       pointer 		/* ctrl */,
       CARD8		/* class */,
       Atom		/* name */,
       WindowPtr	/* pWin */,
       ClientPtr	/* pClient */
);

extern _X_EXPORT void XkbSendAccessXNotify(
       DeviceIntPtr		/* kbd */,
       xkbAccessXNotify *	/* pEv */
);

extern _X_EXPORT void XkbSendNamesNotify(
       DeviceIntPtr	/* kbd */,
       xkbNamesNotify *	/* ev */
);

extern _X_EXPORT void XkbSendActionMessage(
       DeviceIntPtr		/* kbd */,
       xkbActionMessage *	/* ev */
);

extern _X_EXPORT void XkbSendExtensionDeviceNotify(
       DeviceIntPtr			/* kbd */,
       ClientPtr			/* client */,
       xkbExtensionDeviceNotify *	/* ev */
);

extern _X_EXPORT void XkbSendNotification(
    DeviceIntPtr		/* kbd */,
    XkbChangesPtr		/* pChanges */,
    XkbEventCausePtr		/* cause */
);

extern _X_EXPORT void XkbProcessKeyboardEvent(
    DeviceEvent*		/* event */,
    DeviceIntPtr		/* keybd */
);

extern _X_EXPORT void XkbHandleActions(
    DeviceIntPtr		/* dev */,
    DeviceIntPtr		/* kbd */,
    DeviceEvent*		/* event */
);

extern _X_EXPORT Bool XkbEnableDisableControls(
    XkbSrvInfoPtr	/* xkbi */,
    unsigned long	/* change */,
    unsigned long	/* newValues */,
    XkbChangesPtr	/* changes */,
    XkbEventCausePtr	/* cause */
);

extern _X_EXPORT void AccessXInit(
    DeviceIntPtr        /* dev */
);

extern _X_EXPORT Bool AccessXFilterPressEvent(
    DeviceEvent*	/* event */,
    DeviceIntPtr	/* keybd */
);

extern _X_EXPORT Bool AccessXFilterReleaseEvent(
    DeviceEvent*	/* event */,
    DeviceIntPtr	/* keybd */
);

extern _X_EXPORT void AccessXCancelRepeatKey(
    XkbSrvInfoPtr	/* xkbi */,
    KeyCode		/* key */
);

extern _X_EXPORT void AccessXComputeCurveFactor(
    XkbSrvInfoPtr	/* xkbi */,
    XkbControlsPtr	/* ctrls */
);

extern _X_EXPORT XkbInterestPtr XkbFindClientResource(
       DevicePtr	/* inDev */,
       ClientPtr	/* client */
);

extern _X_EXPORT XkbInterestPtr XkbAddClientResource(
       DevicePtr	/* inDev */,
       ClientPtr	/* client */,
       XID		/* id */
);

extern _X_EXPORT int XkbRemoveResourceClient(
       DevicePtr	/* inDev */,
       XID		/* id */
);

extern _X_EXPORT int XkbDDXAccessXBeep(
    DeviceIntPtr        /* dev */,
    unsigned int	/* what */,
    unsigned int	/* which */
);

extern _X_EXPORT int XkbDDXUsesSoftRepeat(
    DeviceIntPtr	/* dev */
);

extern _X_EXPORT void XkbDDXKeybdCtrlProc(
	DeviceIntPtr	/* dev */,
	KeybdCtrl *	/* ctrl */
);

extern _X_EXPORT void XkbDDXChangeControls(
	DeviceIntPtr	/* dev */,
	XkbControlsPtr 	/* old */,
	XkbControlsPtr 	/* new */
);

extern _X_EXPORT void XkbDDXUpdateDeviceIndicators(
	DeviceIntPtr		/* dev */,
	XkbSrvLedInfoPtr	/* sli */,
	CARD32			/* newState */
);

extern _X_EXPORT int XkbDDXTerminateServer(
	DeviceIntPtr	/* dev */,
	KeyCode		/* key */,
	XkbAction *	/* act */
);

extern _X_EXPORT int XkbDDXSwitchScreen(
	DeviceIntPtr	/* dev */,
	KeyCode		/* key */,
	XkbAction *	/* act */
);

extern _X_EXPORT int XkbDDXPrivate(
	DeviceIntPtr	/* dev */,
	KeyCode		/* key */,
	XkbAction *	/* act */
);

extern _X_EXPORT void XkbDisableComputedAutoRepeats(
	DeviceIntPtr 	/* pXDev */,
	unsigned int	/* key */
);

extern _X_EXPORT void XkbSetRepeatKeys(
	DeviceIntPtr 	/* pXDev */,
	int		/* key */,
	int	 	/* onoff */
);

extern _X_EXPORT int XkbLatchModifiers(
	DeviceIntPtr 	/* pXDev */,
	CARD8 		/* mask */,
	CARD8 		/* latches */
);

extern _X_EXPORT int XkbLatchGroup(
	DeviceIntPtr  	/* pXDev */,
	int	  	/* group */
);

extern _X_EXPORT void XkbClearAllLatchesAndLocks(
	DeviceIntPtr		/* dev */,
	XkbSrvInfoPtr		/* xkbi */,
	Bool			/* genEv */,
	XkbEventCausePtr	/* cause */
);

extern _X_EXPORT void	XkbGetRulesDflts(
        XkbRMLVOSet *           /* rmlvo */
);

extern _X_EXPORT void   XkbFreeRMLVOSet(
        XkbRMLVOSet *           /* rmlvo */,
        Bool                    /* freeRMLVO */
);

extern _X_EXPORT void	XkbSetRulesDflts(
        XkbRMLVOSet *           /* rmlvo */
);

extern _X_EXPORT void	XkbDeleteRulesDflts(
	void
);

extern _X_EXPORT int SProcXkbDispatch(
	ClientPtr		/* client */
);

extern _X_EXPORT XkbGeometryPtr XkbLookupNamedGeometry(
	DeviceIntPtr		/* dev */,
	Atom			/* name */,
	Bool *			/* shouldFree */
);

extern _X_EXPORT void	XkbConvertCase(
	KeySym 			/* sym */,
	KeySym *		/* lower */,
	KeySym *		/* upper */
);

extern _X_EXPORT Status	 XkbChangeKeycodeRange(
	XkbDescPtr		/* xkb */,
	int 			/* minKC */,
	int 			/* maxKC */,
	XkbChangesPtr		/* changes */
);

extern _X_EXPORT void XkbFreeSrvLedInfo(
	XkbSrvLedInfoPtr	/* sli */
);

extern _X_EXPORT void XkbFreeInfo(
	XkbSrvInfoPtr		/* xkbi */
);

extern _X_EXPORT Status XkbChangeTypesOfKey(
	XkbDescPtr		/* xkb */,
	int			/* key */,
	int			/* nGroups */,
	unsigned int		/* groups */,
	int *			/* newTypesIn */,
	XkbMapChangesPtr	/* changes */
);

extern _X_EXPORT int XkbKeyTypesForCoreSymbols(
	XkbDescPtr		/* xkb */,
	int			/* map_width */,
	KeySym *		/* core_syms */,
	unsigned int		/* protected */,
	int *			/* types_inout */,
	KeySym *		/* xkb_syms_rtrn */
);

extern _X_EXPORT Bool XkbApplyCompatMapToKey(
	XkbDescPtr		/* xkb */,
	KeyCode			/* key */,
	XkbChangesPtr		/* changes */
);

extern _X_EXPORT Bool XkbApplyVirtualModChanges(
	XkbDescPtr		/* xkb */,
	unsigned int		/* changed */,
	XkbChangesPtr		/* changes */
);

extern _X_EXPORT void XkbSendNewKeyboardNotify(
	DeviceIntPtr		/* kbd */,
	xkbNewKeyboardNotify *	/* pNKN */
);

extern Bool XkbCopyKeymap(
        XkbDescPtr              /* dst */,
        XkbDescPtr              /* src */);

extern _X_EXPORT Bool XkbCopyDeviceKeymap(
        DeviceIntPtr            /* dst */,
        DeviceIntPtr            /* src */);

extern void XkbFilterEvents(
        ClientPtr               /* pClient */,
        int                     /* nEvents */,
        xEvent*                 /* xE */);

extern int XkbGetEffectiveGroup(
        XkbSrvInfoPtr           /* xkbi */,
        XkbStatePtr             /* xkbstate */,
        CARD8                   /* keycode */);

extern void XkbMergeLockedPtrBtns(
        DeviceIntPtr            /* master */);

extern void XkbFakeDeviceButton(
        DeviceIntPtr            /* dev */,
        int                     /* press */,
        int                     /* button */);
d316 509
d837 37
a873 38
	int		szPool;
	int		nPool;
	char *		pool;

	int		maxRtrn;
	int		nTotal;

	char *		pattern[_XkbListNumComponents];
	int		nFound[_XkbListNumComponents];
} XkbSrvListInfoRec,*XkbSrvListInfoPtr;

extern _X_EXPORT Status	XkbDDXList(
	DeviceIntPtr		/* dev */,
	XkbSrvListInfoPtr	/* listing */,
	ClientPtr		/* client */
);

extern _X_EXPORT unsigned int XkbDDXLoadKeymapByNames(
	DeviceIntPtr		/* keybd */,
	XkbComponentNamesPtr	/* names */,
	unsigned int		/* want */,
	unsigned int		/* need */,
	XkbDescPtr *		/* finfoRtrn */,
	char *			/* keymapNameRtrn */,
	int 			/* keymapNameRtrnLen */
);

extern _X_EXPORT Bool XkbDDXNamesFromRules(
	DeviceIntPtr		/* keybd */,
	char *			/* rules */,
	XkbRF_VarDefsPtr	/* defs */,
	XkbComponentNamesPtr	/* names */
);

extern _X_EXPORT XkbDescPtr XkbCompileKeymap(
        DeviceIntPtr    /* dev */,
        XkbRMLVOSet *   /* rmlvo */
);
d875 1
a875 1
#endif /* _XKBSRV_H_ */
@


1.7
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d450 5
a851 4
);

extern _X_EXPORT char *	_XkbDupString(
	const char *		/* str */
@


1.6
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d278 3
a280 1
extern DevPrivateKey xkbDevicePrivateKey;
d324 2
a774 13
extern _X_EXPORT void XkbDDXFakePointerMotion(
	DeviceIntPtr	/* dev */,
 	unsigned int	/* flags */,
	int		/* x */,
	int		/* y */
);

extern _X_EXPORT void XkbDDXFakeDeviceButton(
	DeviceIntPtr	/* dev */,
	Bool		/* press */,
	int		/* button */
);

d926 9
@


1.5
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d57 1
d59 1
d294 7
a300 24
extern int	XkbReqCode;
extern int	XkbEventBase;
extern int	XkbDisableLockActions;
extern int	XkbKeyboardErrorCode;
extern char *	XkbBaseDirectory;
extern char *	XkbBinDirectory;
extern char *	XkbInitialMap;
extern unsigned	int XkbXIUnsupported;

extern Bool	noXkbExtension;

extern pointer	XkbLastRepeatEvent;

extern CARD32	xkbDebugFlags;

#define	_XkbAlloc(s)		xalloc((s))
#define	_XkbCalloc(n,s)		Xcalloc((n)*(s))
#define	_XkbRealloc(o,s)	Xrealloc((o),(s))
#define	_XkbTypedAlloc(t)	((t *)xalloc(sizeof(t)))
#define	_XkbTypedCalloc(n,t)	((t *)Xcalloc((n)*sizeof(t)))
#define	_XkbTypedRealloc(o,n,t) \
	((o)?(t *)Xrealloc((o),(n)*sizeof(t)):_XkbTypedCalloc(n,t))
#define	_XkbClearElems(a,f,l,t)	bzero(&(a)[f],((l)-(f)+1)*sizeof(t))
#define	_XkbFree(p)		Xfree(p)
d307 2
a308 15
extern	int	DeviceKeyPress,DeviceKeyRelease,DeviceMotionNotify;
extern	int	DeviceButtonPress,DeviceButtonRelease;
extern	int	DeviceEnterNotify,DeviceLeaveNotify;

#define	_XkbIsPressEvent(t)	(((t)==KeyPress)||((t)==DeviceKeyPress))
#define	_XkbIsReleaseEvent(t)	(((t)==KeyRelease)||((t)==DeviceKeyRelease))

#define	_XkbCoreKeycodeInRange(c,k)	(((k)>=(c)->curKeySyms.minKeyCode)&&\
					 ((k)<=(c)->curKeySyms.maxKeyCode))
#define	_XkbCoreNumKeys(c)	((c)->curKeySyms.maxKeyCode-\
				 (c)->curKeySyms.minKeyCode+1)

#define	XConvertCase(s,l,u)	XkbConvertCase(s,l,u)
#undef	IsKeypadKey
#define	IsKeypadKey(s)		XkbKSIsKeypad(s)
d312 1
a312 8
#ifndef True
#define	True	TRUE
#define	False	FALSE
#endif

_XFUNCPROTOBEGIN

extern void XkbUseMsg(
d316 1
a316 1
extern int XkbProcessArguments(
d322 1
a322 1
extern	void	XkbSetExtension(DeviceIntPtr device, ProcessInputProc proc);
d324 1
a324 1
extern	void	XkbFreeCompatMap(
d330 1
a330 1
extern	void XkbFreeNames(
d336 1
a336 1
extern int _XkbLookupAnyDevice(
d344 1
a344 1
extern int _XkbLookupKeyboard(
d352 1
a352 1
extern int _XkbLookupBellDevice(
d360 1
a360 1
extern int _XkbLookupLedDevice(
d368 1
a368 1
extern int _XkbLookupButtonDevice(
d376 1
a376 1
extern	XkbDescPtr XkbAllocKeyboard(
d380 1
a380 1
extern	Status XkbAllocClientMap(
d386 1
a386 1
extern	Status XkbAllocServerMap(
d392 1
a392 1
extern	void	XkbFreeClientMap(
d398 1
a398 1
extern	void	XkbFreeServerMap(
d404 1
a404 1
extern	Status XkbAllocIndicatorMaps(
d408 1
a408 1
extern	Status	XkbAllocCompatMap(
d414 1
a414 1
extern	Status XkbAllocNames(
d421 1
a421 1
extern	Status	XkbAllocControls(
d426 1
a426 1
extern	Status	XkbCopyKeyTypes(
d432 1
a432 1
extern	Status	XkbResizeKeyType(
d440 1
a440 1
extern	void	XkbFreeKeyboard(
d446 1
a446 1
extern  void XkbSetActionKeyMods(
d452 1
a452 7
extern Bool XkbCheckActionVMods(
	XkbDescPtr		/* xkb */,
	XkbAction *		/* act */,
	unsigned int 		/* changed */
);

extern	unsigned int XkbMaskForVMask(
d457 1
a457 1
extern Bool XkbVirtualModsToReal(
d463 1
a463 1
extern	unsigned int	XkbAdjustGroup(
d468 1
a468 1
extern KeySym *XkbResizeKeySyms(
d474 1
a474 1
extern XkbAction *XkbResizeKeyActions(
d480 1
a480 1
extern void XkbUpdateKeyTypesFromCore(
d482 1
d488 1
a488 1
extern	void XkbUpdateDescActions(	
d495 1
a495 1
extern void XkbUpdateActions(
d504 2
a505 3
extern void XkbUpdateCoreDescription(
    DeviceIntPtr	/* keybd */,
    Bool		/* resize */
d508 1
a508 1
extern void XkbApplyMappingChange(
d510 4
a513 3
    CARD8 		/* request */,
    KeyCode 		/* firstKey */,
    CARD8 		/* num */,
d517 1
a517 1
extern void XkbSetIndicators(
d524 1
a524 1
extern void XkbUpdateIndicators(
d532 1
a532 1
extern XkbSrvLedInfoPtr XkbAllocSrvLedInfo(
d539 1
a539 1
extern XkbSrvLedInfoPtr XkbCopySrvLedInfo(
d547 1
a547 1
extern XkbSrvLedInfoPtr XkbFindSrvLedInfo(
d554 1
a554 1
extern void XkbApplyLedNameChanges(
d563 1
a563 1
extern void XkbApplyLedMapChanges(
d572 1
a572 1
extern void XkbApplyLedStateChanges(
d581 1
a581 1
extern void XkbFlushLedEvents(	
d590 1
a590 1
extern unsigned int XkbIndicatorsToUpdate(
d596 1
a596 1
extern void XkbComputeDerivedState(
d600 1
a600 1
extern void XkbCheckSecondaryEffects(
d607 1
a607 1
extern void XkbCheckIndicatorMaps(
d613 1
a613 1
extern unsigned int XkbStateChangedFlags(
d618 1
a618 1
extern	void XkbSendStateNotify(
d623 1
a623 1
extern	void XkbSendMapNotify(
d628 1
a628 1
extern	int  XkbComputeControlsNotify(
d636 1
a636 1
extern	void XkbSendControlsNotify(
d641 1
a641 1
extern	void XkbSendCompatMapNotify(
d646 1
a646 1
extern	void XkbHandleBell(
d658 1
a658 1
extern	void XkbSendAccessXNotify(
d663 1
a663 1
extern	void XkbSendNamesNotify(
d668 1
a668 6
extern	void XkbSendCompatNotify(
       DeviceIntPtr		/* kbd */,
       xkbCompatMapNotify *	/* ev */
);

extern	void XkbSendActionMessage(
d673 1
a673 1
extern	void XkbSendExtensionDeviceNotify(
d679 1
a679 1
extern void XkbSendNotification(
d685 3
a687 4
extern void XkbProcessKeyboardEvent(
    struct _xEvent * 		/* xE */,
    DeviceIntPtr		/* keybd */,
    int 			/* count */
d690 1
a690 1
extern void XkbHandleActions(
d693 1
a693 2
    struct _xEvent * 		/* xE */,
    int 			/* count */
d696 1
a696 1
extern Bool XkbEnableDisableControls(
d704 1
a704 1
extern void AccessXInit(
d708 3
a710 4
extern Bool AccessXFilterPressEvent(
    struct _xEvent *	/* xE */,
    DeviceIntPtr	/* keybd */,
    int				/* count */
d713 3
a715 4
extern Bool AccessXFilterReleaseEvent(
    struct _xEvent *	/* xE */,
    DeviceIntPtr	/* keybd */,
    int				/* count */
d718 1
a718 1
extern void AccessXCancelRepeatKey(
d723 1
a723 1
extern void AccessXComputeCurveFactor(
d728 1
a728 1
extern	XkbInterestPtr XkbFindClientResource(
d733 1
a733 1
extern	XkbInterestPtr XkbAddClientResource(
d739 1
a739 1
extern	int XkbRemoveResourceClient(
d744 1
a744 5
extern int XkbDDXInitDevice(
    DeviceIntPtr        /* dev */
);

extern	int XkbDDXAccessXBeep(
d750 1
a750 7
extern	void XkbDDXKeyClick(
    DeviceIntPtr	/* dev */,
    int			/* keycode */,
    int			/* synthetic */
);

extern 	int XkbDDXUsesSoftRepeat(
d754 1
a754 1
extern	void XkbDDXKeybdCtrlProc(
d759 1
a759 1
extern void XkbDDXChangeControls(
d765 1
a765 1
extern void XkbDDXUpdateDeviceIndicators(
d771 2
a772 6
extern void XkbDDXFakePointerButton(
	int 		/* event */,
	int		/* button */
);

extern void XkbDDXFakePointerMotion(
d778 1
a778 1
extern void XkbDDXFakeDeviceButton(
d784 1
a784 1
extern int XkbDDXTerminateServer(
d790 1
a790 1
extern int XkbDDXSwitchScreen(
d796 1
a796 1
extern int XkbDDXPrivate(
d802 1
a802 1
extern void XkbDisableComputedAutoRepeats(
d807 1
a807 1
extern void XkbSetRepeatKeys(
d813 1
a813 1
extern	int XkbLatchModifiers(
d819 1
a819 1
extern	int XkbLatchGroup(
d824 1
a824 1
extern	void XkbClearAllLatchesAndLocks(
d831 2
a832 6
extern	void	XkbSetRulesDflts(
	char *			/* rulesFile */,
	char *			/* model */,
	char *			/* layout */,
	char *			/* variant */,
	char *			/* options */
d835 3
a837 2
extern	void	XkbDeleteRulesDflts(
	void
d840 2
a841 2
extern	void	XkbInitDevice(
	DeviceIntPtr 	/* pXDev */
d844 2
a845 7
extern	Bool	XkbInitKeyboardDeviceStruct(
	DeviceIntPtr 		/* pXDev */,
	XkbComponentNamesPtr	/* pNames */,
	KeySymsPtr		/* pSyms */,
	CARD8 			/* pMods */[],
	BellProcPtr		/* bellProc */,
	KbdCtrlProcPtr		/* ctrlProc */
d848 1
a848 1
extern	int SProcXkbDispatch(
d852 1
a852 1
extern XkbGeometryPtr XkbLookupNamedGeometry(
d858 2
a859 2
extern char *	_XkbDupString(
	char *			/* str */
d862 1
a862 1
extern void	XkbConvertCase(
d868 1
a868 1
extern	Status	 XkbChangeKeycodeRange(	
d875 1
a875 5
extern int XkbFinishDeviceInit(
	DeviceIntPtr		/* pXDev */
);

extern void XkbFreeSrvLedInfo(
d879 1
a879 1
extern void XkbFreeInfo(
d883 1
a883 1
extern Status XkbChangeTypesOfKey(
d892 1
a892 1
extern int XkbKeyTypesForCoreSymbols(
d901 1
a901 1
extern Bool XkbApplyCompatMapToKey(
d907 1
a907 1
extern Bool XkbApplyVirtualModChanges(
d913 1
a913 1
extern void XkbSendNewKeyboardNotify(
d918 18
a936 1
#include <X11/extensions/XKMformat.h>
d939 6
a944 7
#define	_XkbListKeymaps		0
#define	_XkbListKeycodes	1
#define	_XkbListTypes		2
#define	_XkbListCompat		3
#define	_XkbListSymbols		4
#define	_XkbListGeometry	5
#define	_XkbListNumComponents	6
d958 1
a958 1
extern	Status	XkbDDXList(
d964 1
a964 1
extern	unsigned int XkbDDXLoadKeymapByNames(
d974 1
a974 1
extern	Bool XkbDDXNamesFromRules(
d981 3
a983 3
extern	Bool XkbDDXApplyConfig(
	void *	/* cfg_in */,
	XkbSrvInfoPtr	/* xkbi */
a984 9

extern	int _XkbStrCaseCmp(
	char *			/* str1 */,
	char *			/* str2 */
);

_XFUNCPROTOEND

#define	XkbAtomGetString(s)	NameForAtom(s)
@


1.4
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d579 8
d756 2
a757 2
    register struct _xEvent *	/* xE */,
    register DeviceIntPtr	/* keybd */,
d762 2
a763 2
    register struct _xEvent *	/* xE */,
    register DeviceIntPtr	/* keybd */,
d902 4
d995 1
a995 1
#include <X11/extensions/XKBrules.h>
@


1.3
log
@Update to xserver 1.4.2. Tested by landry@@, ckuethe@@, jsing@@ mbalmer@@.
@
text
@a29 1
#ifdef XKB_IN_SERVER
a53 1
#endif
a54 1
#include <X11/extensions/XKBstr.h>
d56 1
a126 2
struct _XkbSrvInfo; /* definition see below */

d276 2
a277 2
extern int xkbDevicePrivateIndex;
#define XKBDEVICEINFO(dev) ((xkbDeviceInfoPtr) (dev)->devPrivates[xkbDevicePrivateIndex].ptr)
d295 1
d317 1
a317 2
#define	_XkbLibError(c,l,d) \
	{ _XkbErrCode= (c); _XkbErrLocation= (l); _XkbErrData= (d); }
a325 1
#ifdef XINPUT
a327 4
#else
#define	_XkbIsPressEvent(t)	((t)==KeyPress)
#define	_XkbIsReleaseEvent(t)	((t)==KeyRelease)
#endif
a338 2
#define	XPointer	pointer
#define	Display		struct _XDisplay
d341 2
a342 10
#define	True	1
#define	False	0
#endif

#ifndef PATH_MAX
#ifdef MAXPATHLEN
#define	PATH_MAX MAXPATHLEN
#else
#define	PATH_MAX 1024
#endif
d371 38
a408 23
extern DeviceIntPtr _XkbLookupAnyDevice(
    int			/* id */,
    int *		/* why_rtrn */
);

extern DeviceIntPtr _XkbLookupKeyboard(
    int			/* id */,
    int *		/* why_rtrn */
);

extern DeviceIntPtr _XkbLookupBellDevice(
    int			/* id */,
    int *		/* why_rtrn */
);

extern DeviceIntPtr _XkbLookupLedDevice(
    int			/* id */,
    int *		/* why_rtrn */
);

extern DeviceIntPtr _XkbLookupButtonDevice(
    int			/* id */,
    int *		/* why_rtrn */
d981 1
a981 2
#ifdef XKBSRV_NEED_FILE_FUNCS

a982 1
#include <X11/extensions/XKBfile.h>
d1016 1
a1016 1
	XkbFileInfoPtr		/* finfoRtrn */,
d1029 1
a1029 1
	XPointer	/* cfg_in */,
a1032 7
extern XPointer XkbDDXPreloadConfig(
	char **			/* rulesFileRtrn */,
	XkbRF_VarDefsPtr	/* defs */,
	XkbComponentNamesPtr	/* names */,
	DeviceIntPtr		/* dev */
);

a1037 2
#endif /* XKBSRV_NEED_FILE_FUNCS */

d1040 1
a1040 1
#define	XkbAtomGetString(d,s)	NameForAtom(s)
@


1.2
log
@- fix an infinite loop by ensuring that realInputProc is never
overwritten with the enqueueInputProc (from upstream git)
cf. https://bugs.freedesktop.org/show_bug.cgi?id=13511

This should fix hangs people were seeing with icewm, cwm and most
probably other WM under some circumstances.

ok matthieu@@
@
text
@d244 8
d269 1
a269 2
	if (proc != device->public.enqueueInputProc) \
	    device->public.realInputProc = proc; \
d274 3
a276 2
        backupproc = device->public.processInputProc; \
	device->public.processInputProc = oldprocs->processInputProc; \
@


1.1
log
@Initial revision
@
text
@d129 18
d190 3
d261 2
a262 1
	device->public.realInputProc = proc; \
d266 2
a267 1
#define UNWRAP_PROCESS_INPUT_PROC(device, oldprocs) \
d272 1
d275 2
d318 1
a318 1
extern	int	DeviceKeyPress,DeviceKeyRelease;
d320 1
@


1.1.1.1
log
@xserver 1.4
@
text
@@


1.1.1.2
log
@xserver 1.4.0.90
@
text
@a128 18
struct _XkbSrvInfo; /* definition see below */

typedef struct _XkbFilter {
	CARD16			  keycode;
	CARD8			  what;
	CARD8			  active;
	CARD8			  filterOthers;
	CARD32			  priv;
	XkbAction		  upAction;
	int			(*filter)(
					struct _XkbSrvInfo* 	/* xkbi */,
					struct _XkbFilter *	/* filter */,
					unsigned		/* keycode */,
					XkbAction *		/* action */
				  );
	struct _XkbFilter	 *next;
} XkbFilterRec,*XkbFilterPtr;

a171 3

	int		 szFilters;
	XkbFilterPtr	 filters;
d244 1
a244 2
#define UNWRAP_PROCESS_INPUT_PROC(device, oldprocs, backupproc) \
        backupproc = device->public.processInputProc; \
a248 1
extern int xkbDevicePrivateIndex;
a250 2
extern void xkbUnwrapProc(DeviceIntPtr, DeviceHandleProc, pointer);

d292 1
a292 1
extern	int	DeviceKeyPress,DeviceKeyRelease,DeviceMotionNotify;
a293 1
extern	int	DeviceEnterNotify,DeviceLeaveNotify;
@

