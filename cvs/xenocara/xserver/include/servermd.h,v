head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.8
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.2
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.4
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.09.16.19.10.25;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	Te1daavkBLskZ8gc;

1.12
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	cVXoV5PxI8YrEaVA;

1.11
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2012.06.10.13.21.30;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2009.09.06.19.44.36;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.02.15.26.32;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2008.02.20.17.47.56;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.24.19.04.06;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.03.20.57.39;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.28.20.29.32;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.16;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.16;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.12;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/***********************************************************

Copyright 1987, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

#ifndef SERVERMD_H
#define SERVERMD_H 1

#if !defined(_DIX_CONFIG_H_) && !defined(_XORG_SERVER_H_)
#error Drivers must include xorg-server.h before any other xserver headers
#error xserver code must include dix-config.h before any other headers
#endif

#include <X11/Xarch.h>		/* for X_LITTLE_ENDIAN/X_BIG_ENDIAN */

#if X_BYTE_ORDER == X_LITTLE_ENDIAN
#define IMAGE_BYTE_ORDER        LSBFirst
#define BITMAP_BIT_ORDER        LSBFirst
#elif X_BYTE_ORDER == X_BIG_ENDIAN
#define IMAGE_BYTE_ORDER        MSBFirst
#define BITMAP_BIT_ORDER        MSBFirst
#else
#error "Too weird to live."
#endif

#ifndef GLYPHPADBYTES
#define GLYPHPADBYTES           4
#endif

/* size of buffer to use with GetImage, measured in bytes. There's obviously
 * a trade-off between the amount of heap used and the number of times the
 * ddx routine has to be called.
 */
#ifndef IMAGE_BUFSIZE
#define IMAGE_BUFSIZE		(64*1024)
#endif

/* pad scanline to a longword */
#ifndef BITMAP_SCANLINE_UNIT
#define BITMAP_SCANLINE_UNIT	32
#endif

#ifndef BITMAP_SCANLINE_PAD
#define BITMAP_SCANLINE_PAD  32
#define LOG2_BITMAP_PAD		5
#define LOG2_BYTES_PER_SCANLINE_PAD	2
#endif

#include <X11/Xfuncproto.h>
/*
 *   This returns the number of padding units, for depth d and width w.
 * For bitmaps this can be calculated with the macros above.
 * Other depths require either grovelling over the formats field of the
 * screenInfo or hardwired constants.
 */

typedef struct _PaddingInfo {
    int padRoundUp;             /* pixels per pad unit - 1 */
    int padPixelsLog2;          /* log 2 (pixels per pad unit) */
    int padBytesLog2;           /* log 2 (bytes per pad unit) */
    int notPower2;              /* bitsPerPixel not a power of 2 */
    int bytesPerPixel;          /* only set when notPower2 is TRUE */
    int bitsPerPixel;           /* bits per pixel */
} PaddingInfo;
extern _X_EXPORT PaddingInfo PixmapWidthPaddingInfo[];

/* The only portable way to get the bpp from the depth is to look it up */
#define BitsPerPixel(d) (PixmapWidthPaddingInfo[d].bitsPerPixel)

#define PixmapWidthInPadUnits(w, d) \
    (PixmapWidthPaddingInfo[d].notPower2 ? \
    (((int)(w) * PixmapWidthPaddingInfo[d].bytesPerPixel +  \
	         PixmapWidthPaddingInfo[d].bytesPerPixel) >> \
	PixmapWidthPaddingInfo[d].padBytesLog2) : \
    ((int)((w) + PixmapWidthPaddingInfo[d].padRoundUp) >> \
	PixmapWidthPaddingInfo[d].padPixelsLog2))

/*
 *	Return the number of bytes to which a scanline of the given
 * depth and width will be padded.
 */
#define PixmapBytePad(w, d) \
    (PixmapWidthInPadUnits(w, d) << PixmapWidthPaddingInfo[d].padBytesLog2)

#define BitmapBytePad(w) \
    (((int)((w) + BITMAP_SCANLINE_PAD - 1) >> LOG2_BITMAP_PAD) << LOG2_BYTES_PER_SCANLINE_PAD)

#endif                          /* SERVERMD_H */
@


1.12
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d29 2
a30 2
Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
d32 1
a32 1
both that copyright notice and this permission notice appear in 
d35 1
a35 1
software without specific, written prior permission.  
d50 3
a52 230
/*
 * Note: much of this is vestigial from mfb/cfb times.  This should
 * really be simplified even further.
 */

/*
 * Machine dependent values:
 * GLYPHPADBYTES should be chosen with consideration for the space-time
 * trade-off.  Padding to 0 bytes means that there is no wasted space
 * in the font bitmaps (both on disk and in memory), but that access of
 * the bitmaps will cause odd-address memory references.  Padding to
 * 2 bytes would ensure even address memory references and would
 * be suitable for a 68010-class machine, but at the expense of wasted
 * space in the font bitmaps.  Padding to 4 bytes would be good
 * for real 32 bit machines, etc.  Be sure that you tell the font
 * compiler what kind of padding you want because its defines are
 * kept separate from this.  See server/include/font.h for how
 * GLYPHPADBYTES is used.
 */


#ifdef __avr32__

#define IMAGE_BYTE_ORDER        MSBFirst
#define BITMAP_BIT_ORDER        MSBFirst
#define GLYPHPADBYTES           4

#endif                          /* __avr32__ */

#if defined(vax) || defined(__vax__)

#define IMAGE_BYTE_ORDER	LSBFirst        /* Values for the VAX only */
#define BITMAP_BIT_ORDER	LSBFirst
#define GLYPHPADBYTES		4	/* to make fb work */
#define GETLEFTBITS_ALIGNMENT	1
#define FAST_UNALIGNED_READS

#endif /* vax */ 

#if defined(__arm32__) || defined(__arm__) && defined(__OpenBSD__)

#define IMAGE_BYTE_ORDER        LSBFirst
#define BITMAP_BIT_ORDER        LSBFirst
#define GLYPHPADBYTES           4

#endif                          /* __arm32__ */

#if defined(__nds32__)

#define IMAGE_BYTE_ORDER	LSBFirst

#if defined(XF86MONOVGA) || defined(XF86VGA16) || defined(XF86MONO)
#define BITMAP_BIT_ORDER	MSBFirst
#else
#define BITMAP_BIT_ORDER	LSBFirst
#endif

#if defined(XF86MONOVGA) || defined(XF86VGA16)
#define BITMAP_SCANLINE_UNIT	8
#endif

#define GLYPHPADBYTES		4
#define GETLEFTBITS_ALIGNMENT	1
#define LARGE_INSTRUCTION_CACHE
#define AVOID_MEMORY_READ

#endif                          /* __nds32__ */

#if defined __hppa__

#define IMAGE_BYTE_ORDER	MSBFirst
#define BITMAP_BIT_ORDER	MSBFirst
#define GLYPHPADBYTES		4       /* to make fb work */
                                        /* byte boundries */
#endif                          /* hpux || __hppa__ */

#if defined (__m88k__)

#define IMAGE_BYTE_ORDER       MSBFirst
#define BITMAP_BIT_ORDER       MSBFirst
#define GLYPHPADBYTES          4
#define GETLEFTBITS_ALIGNMENT  1

#endif /* __m88k__ */

#if defined(__powerpc__) || defined(__ppc__) || defined(__ppc64__)

#if defined(__LITTLE_ENDIAN__)
#define IMAGE_BYTE_ORDER      LSBFirst
#define BITMAP_BIT_ORDER      LSBFirst
#else
#define IMAGE_BYTE_ORDER      MSBFirst
#define BITMAP_BIT_ORDER      MSBFirst
#endif
#define GLYPHPADBYTES           4

#endif                          /* PowerPC */

#if defined(__sh__)

#if defined(__BIG_ENDIAN__)
#define IMAGE_BYTE_ORDER	MSBFirst
#define BITMAP_BIT_ORDER	MSBFirst
#define GLYPHPADBYTES		4
#else
#define IMAGE_BYTE_ORDER	LSBFirst
#define BITMAP_BIT_ORDER	LSBFirst
#define GLYPHPADBYTES		4
#endif

#endif                          /* SuperH */

#if defined(__m32r__)

#if defined(__BIG_ENDIAN__)
#define IMAGE_BYTE_ORDER      MSBFirst
#define BITMAP_BIT_ORDER      MSBFirst
#define GLYPHPADBYTES         4
#else
#define IMAGE_BYTE_ORDER      LSBFirst
#define BITMAP_BIT_ORDER      LSBFirst
#define GLYPHPADBYTES         4
#endif

#endif                          /* __m32r__ */

#if (defined(sun) && (defined(__sparc) || defined(sparc))) || \
    (defined(__uxp__) && (defined(sparc) || defined(mc68000))) || \
    defined(__sparc__) || defined(__mc68000__)

#if defined(__sparc) || defined(__sparc__)
#if !defined(sparc)
#define sparc 1
#endif
#endif

#if defined(sun386) || defined(sun5)
#define IMAGE_BYTE_ORDER	LSBFirst        /* Values for the SUN only */
#define BITMAP_BIT_ORDER	LSBFirst
#else
#define IMAGE_BYTE_ORDER	MSBFirst        /* Values for the SUN only */
#define BITMAP_BIT_ORDER	MSBFirst
#endif

#define	GLYPHPADBYTES		4

#endif                          /* sun && !(i386 && SVR4) */

#if defined(ibm032) || defined (ibm)

#ifdef __i386__
#define IMAGE_BYTE_ORDER	LSBFirst        /* Value for PS/2 only */
#else
#define IMAGE_BYTE_ORDER	MSBFirst        /* Values for the RT only */
#endif
#define BITMAP_BIT_ORDER	MSBFirst
#define	GLYPHPADBYTES		1
/* ibm pcc doesn't understand pragmas. */

#ifdef __i386__
#define BITMAP_SCANLINE_UNIT	8
#endif

#endif                          /* ibm */

#if (defined(mips) || defined(__mips))

#if defined(MIPSEL) || defined(__MIPSEL__)
#define IMAGE_BYTE_ORDER	LSBFirst        /* Values for the PMAX only */
#define BITMAP_BIT_ORDER	LSBFirst
#define GLYPHPADBYTES		4
#else
#define IMAGE_BYTE_ORDER	MSBFirst        /* Values for the MIPS only */
#define BITMAP_BIT_ORDER	MSBFirst
#define GLYPHPADBYTES		4
#endif

#endif                          /* mips */

#if defined(__alpha) || defined(__alpha__)
#define IMAGE_BYTE_ORDER	LSBFirst        /* Values for the Alpha only */
#define BITMAP_BIT_ORDER       LSBFirst
#define GLYPHPADBYTES		4

#endif                          /* alpha */

#if defined (linux) && defined (__s390__)

#define IMAGE_BYTE_ORDER      	MSBFirst
#define BITMAP_BIT_ORDER      	MSBFirst
#define GLYPHPADBYTES         	4

#define BITMAP_SCANLINE_UNIT	8
#define FAST_UNALIGNED_READ

#endif                          /* linux/s390 */

#if defined (linux) && defined (__s390x__)

#define IMAGE_BYTE_ORDER       MSBFirst
#define BITMAP_BIT_ORDER       MSBFirst
#define GLYPHPADBYTES          4

#define BITMAP_SCANLINE_UNIT	8
#define FAST_UNALIGNED_READ

#endif                          /* linux/s390x */

#if defined(__ia64__) || defined(ia64)

#define IMAGE_BYTE_ORDER	LSBFirst
#define BITMAP_BIT_ORDER       LSBFirst
#define GLYPHPADBYTES		4

#endif                          /* ia64 */

#if defined(__amd64__) || defined(amd64) || defined(__amd64)
#define IMAGE_BYTE_ORDER	LSBFirst
#define BITMAP_BIT_ORDER       LSBFirst
#define GLYPHPADBYTES		4
/* ???? */
#endif                          /* AMD64 */

#if	defined(SVR4) && (defined(__i386__) || defined(__i386) ) ||	\
	defined(__alpha__) || defined(__alpha) || \
	defined(__i386__) || \
	defined(__s390x__) || defined(__s390__)

#ifndef IMAGE_BYTE_ORDER
#define IMAGE_BYTE_ORDER	LSBFirst
d55 1
a55 15
#ifndef BITMAP_BIT_ORDER
#define BITMAP_BIT_ORDER      LSBFirst
#endif

#ifndef GLYPHPADBYTES
#define GLYPHPADBYTES           4
#endif

#endif                          /* SVR4 / BSD / i386 */

#if defined (linux) && defined (__mc68000__)

#define IMAGE_BYTE_ORDER       MSBFirst
#define BITMAP_BIT_ORDER       MSBFirst
#define GLYPHPADBYTES          4
d57 1
a57 42
#endif                          /* linux/m68k */

#if defined (__OpenBSD__) && defined (__mc68020__)

#define IMAGE_BYTE_ORDER       MSBFirst
#define BITMAP_BIT_ORDER       MSBFirst
#define FAST_UNALIGNED_READS
#define GLYPHPADBYTES          4
#define GETLEFTBITS_ALIGNMENT  1

#endif /* OpenBSD/m68k */

#ifdef sgi

#define IMAGE_BYTE_ORDER	MSBFirst
#define BITMAP_BIT_ORDER	MSBFirst
#define GLYPHPADBYTES		4
#define GETLEFTBITS_ALIGNMENT	1
#define AVOID_MEMORY_READ
#define FAST_CONSTANT_OFFSET_MODE
#define LARGE_INSTRUCTION_CACHE
#define PLENTIFUL_REGISTERS

#endif

/* linux on ARM */
#if defined(linux) && defined(__arm__)
#define IMAGE_BYTE_ORDER	LSBFirst
#define BITMAP_BIT_ORDER	LSBFirst
#define GLYPHPADBYTES		4
#endif

/* linux on IBM S/390 */
#if defined (linux) && defined (__s390__)
#define IMAGE_BYTE_ORDER	MSBFirst
#define BITMAP_BIT_ORDER	MSBFirst
#define GLYPHPADBYTES		4
#endif                          /* linux/s390 */

#ifdef __aarch64__

#ifdef __AARCH64EL__
d60 1
a60 2
#endif
#ifdef __AARCH64EB__
a62 10
#endif
#define GLYPHPADBYTES           4

#endif                          /* __aarch64__ */

#if defined(__arc__)

#if defined(__BIG_ENDIAN__)
#define IMAGE_BYTE_ORDER	MSBFirst
#define BITMAP_BIT_ORDER	MSBFirst
d64 1
a64 2
#define IMAGE_BYTE_ORDER	LSBFirst
#define BITMAP_BIT_ORDER	LSBFirst
a65 1
#define GLYPHPADBYTES		4
d67 2
a68 7
#endif                          /* ARC */

#ifdef __xtensa__

#ifdef __XTENSA_EL__
#define IMAGE_BYTE_ORDER        LSBFirst
#define BITMAP_BIT_ORDER        LSBFirst
a69 7
#ifdef __XTENSA_EB__
#define IMAGE_BYTE_ORDER        MSBFirst
#define BITMAP_BIT_ORDER        MSBFirst
#endif
#define GLYPHPADBYTES           4

#endif                          /* __xtensa__ */
d91 1
a91 1
/* 
a127 4

#define PixmapWidthInPadUnitsProto(w, d) PixmapWidthInPadUnits(w, d)
#define PixmapBytePadProto(w, d) PixmapBytePad(w, d)
#define BitmapBytePadProto(w) BitmapBytePad(w)
@


1.11
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d137 7
a143 2
#define IMAGE_BYTE_ORDER        MSBFirst
#define BITMAP_BIT_ORDER        MSBFirst
d350 27
@


1.10
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d332 14
@


1.9
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d70 1
d81 4
a84 4
#define IMAGE_BYTE_ORDER       LSBFirst        /* Values for the VAX only */
#define BITMAP_BIT_ORDER       LSBFirst
#define GLYPHPADBYTES          4       /* to make fb work */
#define GETLEFTBITS_ALIGNMENT  1
d295 1
a295 1
#if defined (OpenBSD) && defined (__mc68020__)
d307 4
a310 4
#define IMAGE_BYTE_ORDER       MSBFirst
#define BITMAP_BIT_ORDER       MSBFirst
#define GLYPHPADBYTES          4
#define GETLEFTBITS_ALIGNMENT  1
@


1.8
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a24 1

a69 1

d76 1
a76 1
#endif /* __avr32__ */ 
d80 4
a83 4
#define IMAGE_BYTE_ORDER	LSBFirst        /* Values for the VAX only */
#define BITMAP_BIT_ORDER	LSBFirst
#define GLYPHPADBYTES		4	/* to make fb work */
#define GETLEFTBITS_ALIGNMENT	1
d94 15
a108 1
#endif /* __arm32__ */
d110 8
a117 1
#if defined(hpux) || defined(__hppa__)
d121 3
a123 3
#define GLYPHPADBYTES		4	/* to make fb work */
					/* byte boundries */
#endif /* hpux || __hppa__ */
d140 1
a140 1
#endif /* PowerPC */
d145 3
a147 3
# define IMAGE_BYTE_ORDER	MSBFirst
# define BITMAP_BIT_ORDER	MSBFirst
# define GLYPHPADBYTES		4
d149 3
a151 3
# define IMAGE_BYTE_ORDER	LSBFirst
# define BITMAP_BIT_ORDER	LSBFirst
# define GLYPHPADBYTES		4
d154 1
a154 1
#endif /* SuperH */
d159 3
a161 3
# define IMAGE_BYTE_ORDER      MSBFirst
# define BITMAP_BIT_ORDER      MSBFirst
# define GLYPHPADBYTES         4
d163 3
a165 3
# define IMAGE_BYTE_ORDER      LSBFirst
# define BITMAP_BIT_ORDER      LSBFirst
# define GLYPHPADBYTES         4
d168 1
a168 1
#endif /* __m32r__ */
d175 3
a177 3
# if !defined(sparc)
#  define sparc 1
# endif
d181 2
a182 2
# define IMAGE_BYTE_ORDER	LSBFirst        /* Values for the SUN only */
# define BITMAP_BIT_ORDER	LSBFirst
d184 2
a185 2
# define IMAGE_BYTE_ORDER	MSBFirst        /* Values for the SUN only */
# define BITMAP_BIT_ORDER	MSBFirst
d190 1
a190 2
#endif /* sun && !(i386 && SVR4) */

d195 1
a195 1
# define IMAGE_BYTE_ORDER	LSBFirst	/* Value for PS/2 only */
d197 1
a197 1
# define IMAGE_BYTE_ORDER	MSBFirst        /* Values for the RT only*/
d207 1
a207 1
#endif /* ibm */
d209 1
a209 1
#if (defined(mips) || defined(__mips)) 
d212 3
a214 3
# define IMAGE_BYTE_ORDER	LSBFirst        /* Values for the PMAX only */
# define BITMAP_BIT_ORDER	LSBFirst
# define GLYPHPADBYTES		4
d216 3
a218 3
# define IMAGE_BYTE_ORDER	MSBFirst        /* Values for the MIPS only */
# define BITMAP_BIT_ORDER	MSBFirst
# define GLYPHPADBYTES		4
d221 1
a221 1
#endif /* mips */
d224 3
a226 3
# define IMAGE_BYTE_ORDER	LSBFirst	/* Values for the Alpha only */
# define BITMAP_BIT_ORDER       LSBFirst
# define GLYPHPADBYTES		4
d228 1
a228 1
#endif /* alpha */
d239 1
a239 1
#endif /* linux/s390 */
d250 1
a250 2
#endif /* linux/s390x */

d254 3
a256 3
# define IMAGE_BYTE_ORDER	LSBFirst
# define BITMAP_BIT_ORDER       LSBFirst
# define GLYPHPADBYTES		4
d258 1
a258 1
#endif /* ia64 */
d261 3
a263 3
# define IMAGE_BYTE_ORDER	LSBFirst
# define BITMAP_BIT_ORDER       LSBFirst
# define GLYPHPADBYTES		4
d265 1
a265 1
#endif /* AMD64 */
d271 1
a271 1
  
d277 1
a277 1
# define BITMAP_BIT_ORDER      LSBFirst
d284 1
a284 1
#endif /* SVR4 / BSD / i386 */
d292 1
a292 1
#endif /* linux/m68k */
d306 4
a309 4
#define IMAGE_BYTE_ORDER	MSBFirst
#define BITMAP_BIT_ORDER	MSBFirst
#define GLYPHPADBYTES		4
#define GETLEFTBITS_ALIGNMENT	1
d329 1
a329 1
#endif /* linux/s390 */ 
d359 6
a364 6
	int     padRoundUp;	/* pixels per pad unit - 1 */
	int	padPixelsLog2;	/* log 2 (pixels per pad unit) */
	int     padBytesLog2;	/* log 2 (bytes per pad unit) */
	int	notPower2;	/* bitsPerPixel not a power of 2 */
	int	bytesPerPixel;	/* only set when notPower2 is TRUE */
	int	bitsPerPixel;	/* bits per pixel */
d393 1
a393 1
#endif /* SERVERMD_H */
@


1.7
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d333 1
d349 1
a349 1
extern PaddingInfo PixmapWidthPaddingInfo[];
@


1.6
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d52 5
a68 57
 *
 * Along with this, you should choose an appropriate value for
 * GETLEFTBITS_ALIGNMENT, which is used in ddx/mfb/maskbits.h.  This
 * constant choses what kind of memory references are guarenteed during
 * font access; either 1, 2 or 4, for byte, word or longword access,
 * respectively.  For instance, if you have decided to to have
 * GLYPHPADBYTES == 4, then it is pointless for you to have a
 * GETLEFTBITS_ALIGNMENT > 1, because the padding of the fonts has already
 * guarenteed you that your fonts are longword aligned.  On the other
 * hand, even if you have chosen GLYPHPADBYTES == 1 to save space, you may
 * also decide that the computing involved in aligning the pointer is more
 * costly than an odd-address access; you choose GETLEFTBITS_ALIGNMENT == 1.
 *
 * Next, choose the tuning parameters which are appropriate for your
 * hardware; these modify the behaviour of the raw frame buffer code
 * in ddx/mfb and ddx/cfb.  Defining these incorrectly will not cause
 * the server to run incorrectly, but defining these correctly will
 * cause some noticeable speed improvements:
 *
 *  AVOID_MEMORY_READ - (8-bit cfb only)
 *	When stippling pixels on the screen (polytext and pushpixels),
 *	don't read long words from the display and mask in the
 *	appropriate values.  Rather, perform multiple byte/short/long
 *	writes as appropriate.  This option uses many more instructions
 *	but runs much faster when the destination is much slower than
 *	the CPU and at least 1 level of write buffer is availible (2
 *	is much better).  Defined currently for SPARC and MIPS.
 *
 *  FAST_CONSTANT_OFFSET_MODE - (cfb and mfb)
 *	This define is used on machines which have no auto-increment
 *	addressing mode, but do have an effectively free constant-offset
 *	addressing mode.  Currently defined for MIPS and SPARC, even though
 *	I remember the cg6 as performing better without it (cg3 definitely
 *	performs better with it).
 *	
 *  LARGE_INSTRUCTION_CACHE -
 *	This define increases the number of times some loops are
 *	unrolled.  On 68020 machines (with 256 bytes of i-cache),
 *	this define will slow execution down as instructions miss
 *	the cache frequently.  On machines with real i-caches, this
 *	reduces loop overhead, causing a slight performance improvement.
 *	Currently defined for MIPS and SPARC
 *
 *  FAST_UNALIGNED_READS -
 *	For machines with more memory bandwidth than CPU, this
 *	define uses unaligned reads for 8-bit BitBLT instead of doing
 *	aligned reads and combining the results with shifts and
 *	logical-ors.  Currently defined for 68020 and vax.
 *  PLENTIFUL_REGISTERS -
 *	For machines with > 20 registers.  Currently used for
 *	unrolling the text painting code a bit more.  Currently
 *	defined for MIPS.
 *  SHARED_IDCACHE -
 *	For non-Harvard RISC machines, those which share the same
 *	CPU memory bus for instructions and data.  This unrolls some
 *	solid fill loops which are otherwise best left rolled up.
 *	Currently defined for SPARC.
d71 9
d88 1
a88 1
#endif /* vax */
d93 1
a93 11

# if defined(XF86MONOVGA) || defined(XF86VGA16) || defined(XF86MONO)
#  define BITMAP_BIT_ORDER      MSBFirst
# else
#  define BITMAP_BIT_ORDER      LSBFirst
# endif

# if defined(XF86MONOVGA) || defined(XF86VGA16)
#  define BITMAP_SCANLINE_UNIT  8
# endif

a94 3
#define GETLEFTBITS_ALIGNMENT   1
#define LARGE_INSTRUCTION_CACHE
#define AVOID_MEMORY_READ
a102 1
#define GETLEFTBITS_ALIGNMENT	1	/* PA forces longs to 4 */
a103 5
#define AVOID_MEMORY_READ
#define FAST_CONSTANT_OFFSET_MODE
#define LARGE_INSTRUCTION_CACHE
#define PLENTIFUL_REGISTERS

d115 1
a115 1
#if defined(__powerpc__) || defined(__ppc__)
a119 13
#define GETLEFTBITS_ALIGNMENT   1

/* XXX Should this be for Lynx only? */
#ifdef Lynx
#define BITMAP_SCANLINE_UNIT	8
#endif

#define LARGE_INSTRUCTION_CACHE
#define FAST_CONSTANT_OFFSET_MODE
#define PLENTIFUL_REGISTERS
#define AVOID_MEMORY_READ

#define FAST_MEMCPY
a128 1
# define GETLEFTBITS_ALIGNMENT	1
a132 1
# define GETLEFTBITS_ALIGNMENT	1
d135 3
a137 4
#define AVOID_MEMORY_READ
#define FAST_CONSTANT_OFFSET_MODE
#define LARGE_INSTRUCTION_CACHE
#define PLENTIFUL_REGISTERS
d139 9
a147 1
#endif /* SuperH */
d149 1
a168 11
#ifdef sparc
# define AVOID_MEMORY_READ
# define LARGE_INSTRUCTION_CACHE
# define FAST_CONSTANT_OFFSET_MODE
# define SHARED_IDCACHE
#endif

#ifdef mc68020
#define FAST_UNALIGNED_READS
#endif

a169 1
#define GETLEFTBITS_ALIGNMENT	1
a173 15
#if defined(AIXV3)

#define IMAGE_BYTE_ORDER        MSBFirst        /* Values for the RISC/6000 */
#define BITMAP_BIT_ORDER        MSBFirst
#define GLYPHPADBYTES           4
#define GETLEFTBITS_ALIGNMENT   1

#define LARGE_INSTRUCTION_CACHE
#define FAST_CONSTANT_OFFSET_MODE
#define PLENTIFUL_REGISTERS
#define AVOID_MEMORY_READ

#define FAST_MEMCPY
#endif /* AIXV3 */

a182 1
#define GETLEFTBITS_ALIGNMENT	4
d191 1
a191 23
#if defined (M4310) || defined(M4315) || defined(M4317) || defined(M4319) || defined(M4330)

#define IMAGE_BYTE_ORDER	MSBFirst        /* Values for Pegasus only */
#define BITMAP_BIT_ORDER	MSBFirst
#define GLYPHPADBYTES		4
#define GETLEFTBITS_ALIGNMENT	1

#define FAST_UNALIGNED_READS

#endif /* tektronix */

#ifdef macII

#define IMAGE_BYTE_ORDER      	MSBFirst        /* Values for the MacII only */
#define BITMAP_BIT_ORDER      	MSBFirst
#define GLYPHPADBYTES         	4
#define GETLEFTBITS_ALIGNMENT 	1

/* might want FAST_UNALIGNED_READS for frame buffers with < 1us latency */

#endif /* macII */

#if (defined(mips) || defined(__mips)) && !defined(sgi)
a196 1
# define GETLEFTBITS_ALIGNMENT	1
a200 1
# define GETLEFTBITS_ALIGNMENT	1
a202 5
#define AVOID_MEMORY_READ
#define FAST_CONSTANT_OFFSET_MODE
#define LARGE_INSTRUCTION_CACHE
#define PLENTIFUL_REGISTERS

d205 1
a205 1
#if defined(__alpha) || defined(__alpha__) || defined(__alphaCross)
d207 1
a207 11

# if defined(XF86MONOVGA) || defined(XF86VGA16) || defined(XF86MONO)
#  define BITMAP_BIT_ORDER      MSBFirst
# else
#  define BITMAP_BIT_ORDER      LSBFirst
# endif

# if defined(XF86MONOVGA) || defined(XF86VGA16)
#  define BITMAP_SCANLINE_UNIT  8
# endif

a208 4
# define GETLEFTBITS_ALIGNMENT	1
# define FAST_CONSTANT_OFFSET_MODE
# define LARGE_INSTRUCTION_CACHE
# define PLENTIFUL_REGISTERS
a216 1
#define GETLEFTBITS_ALIGNMENT  1	
a218 2
#define LARGE_INSTRUCTION_CACHE
#define FAST_CONSTANT_OFFSET_MODE
a220 2
#define FAST_MEMCPY

a227 1
#define GETLEFTBITS_ALIGNMENT  1
a229 2
#define LARGE_INSTRUCTION_CACHE
#define FAST_CONSTANT_OFFSET_MODE
a231 1
#define FAST_MEMCPY
d236 1
d238 1
a238 11

# if defined(XF86MONOVGA) || defined(XF86VGA16) || defined(XF86MONO)
#  define BITMAP_BIT_ORDER      MSBFirst
# else
#  define BITMAP_BIT_ORDER      LSBFirst
# endif

# if defined(XF86MONOVGA) || defined(XF86VGA16)
#  define BITMAP_SCANLINE_UNIT  8
# endif

a239 4
# define GETLEFTBITS_ALIGNMENT	1
# define FAST_CONSTANT_OFFSET_MODE
# define LARGE_INSTRUCTION_CACHE
# define PLENTIFUL_REGISTERS
d243 1
a243 1
#if defined(__amd64__) || defined(amd64) || defined(__amd64) || defined(__x86_64__)
d245 1
a245 11

# if defined(XF86MONOVGA) || defined(XF86VGA16) || defined(XF86MONO)
#  define BITMAP_BIT_ORDER      MSBFirst
# else
#  define BITMAP_BIT_ORDER      LSBFirst
# endif

# if defined(XF86MONOVGA) || defined(XF86VGA16)
#  define BITMAP_SCANLINE_UNIT  8
# endif

a246 3
# define GETLEFTBITS_ALIGNMENT	1
# define LARGE_INSTRUCTION_CACHE
# define FAST_CONSTANT_OFFSET_MODE
a247 1
# define FAST_UNALIGNED_READS
d250 1
a250 31
#ifdef stellar

#define IMAGE_BYTE_ORDER	MSBFirst       /* Values for the stellar only*/
#define BITMAP_BIT_ORDER	MSBFirst
#define	GLYPHPADBYTES		4
#define GETLEFTBITS_ALIGNMENT	4
#define IMAGE_BUFSIZE		(64*1024)
/*
 * Use SysV random number generator.
 */
#define random rand

#endif /* stellar */

#ifdef luna

#define IMAGE_BYTE_ORDER        MSBFirst   	/* Values for the OMRON only*/
#define BITMAP_BIT_ORDER	MSBFirst
#define	GLYPHPADBYTES		4
#define GETLEFTBITS_ALIGNMENT	1

#ifndef mc68000
#define FAST_CONSTANT_OFFSET_MODE
#define AVOID_MEMORY_READ
#define LARGE_INSTRUCTION_CACHE
#define PLENTIFUL_REGISTERS
#endif

#endif /* luna */

#if	(defined(SVR4) && (defined(__i386__) || (defined(__i386)))) ||	\
d252 1
a252 1
	defined(__i386__) || defined(__QNX__) || \
d260 1
a260 11
# if defined(XF86MONOVGA) || defined(XF86VGA16) || defined(XF86MONO)
#  define BITMAP_BIT_ORDER      MSBFirst
# else
#  define BITMAP_BIT_ORDER      LSBFirst
# endif
#endif

#ifndef BITMAP_SCANLINE_UNIT
# if defined(XF86MONOVGA) || defined(XF86VGA16)
#  define BITMAP_SCANLINE_UNIT  8
# endif
a266 9
#define GETLEFTBITS_ALIGNMENT	1
#define AVOID_MEMORY_READ
#ifdef XSVGA
#define AVOID_GLYPHBLT
#define FAST_CONSTANT_OFFSET_MODE
#define FAST_MEMCPY
#define NO_ONE_RECT
#endif

a272 1
#define FAST_UNALIGNED_READS
a273 1
#define GETLEFTBITS_ALIGNMENT  1
d300 1
a300 1
/* linux on the Compaq Itsy */
a304 1
#define GETLEFTBITS_ALIGNMENT	1
a311 1
#define GETLEFTBITS_ALIGNMENT	1
d315 2
a316 2
 * a trade-off between the amount of stack (or whatever ALLOCATE_LOCAL gives
 * you) used and the number of times the ddx routine has to be called.
@


1.5
log
@endianness definitions for m88k, ok matthieu@@
@
text
@d272 1
a272 1
#ifdef i386
d282 1
a282 1
#ifdef i386
d405 1
a405 1
#if defined(__amd64__) || defined(amd64) || defined(__amd64)
d456 1
a456 1
#if	(defined(SVR4) && defined(i386)) || \
d458 1
a458 2
	defined(__i386__) || defined(__i386) || \
	defined(__QNX__) || \
@


1.4
log
@merge xserver 1.4, 1st pass
@
text
@d168 9
d513 1
a513 1
#endif /* OpenBSD/hp300 */
@


1.3
log
@Build fixes for OpenBSD/zaurus:
- __arm32__ isn't defined by gcc on OpenBSD/arm
- ioperm_noop.c is needed in libxorgos
@
text
@a449 2
	defined(__UNIXOS2__) || \
	defined(__OS2ELF__) || \
d526 9
a534 1
 
@


1.2
log
@OpenBSD local modifications:
- privilege separation
- some snprintf/strlc{at,py} conversions
- support for more architectures
- signal handler fixes
- default mouse wheel support in config tools
- sunmouse protocol
@
text
@d133 1
a133 1
#ifdef __arm32__
@


1.1
log
@Initial revision
@
text
@d123 1
a123 1
#ifdef vax
d127 2
a128 2
#define	GLYPHPADBYTES		1
#define GETLEFTBITS_ALIGNMENT	4
d154 1
a154 1
#if defined (hpux) || defined __hppa__
d497 10
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d450 2
d518 1
a518 9

/* linux on IBM S/390 */
#if defined (linux) && defined (__s390__)
#define IMAGE_BYTE_ORDER	MSBFirst
#define BITMAP_BIT_ORDER	MSBFirst
#define GLYPHPADBYTES		4
#define GETLEFTBITS_ALIGNMENT	1
#endif /* linux/s390 */ 

@

