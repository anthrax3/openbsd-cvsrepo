head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.6
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.6
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.4
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.05.29.12.02.35;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	s0SI41sEunLdyFfd;

1.10
date	2014.12.09.17.58.52;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	vcnjRBuLQw44cPHf;

1.9
date	2013.06.07.17.28.46;	author matthieu;	state Exp;
branches
	1.9.4.1
	1.9.6.1;
next	1.8;

1.8
date	2012.06.10.13.21.20;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.05.13.32.47;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.12.05.15.36.03;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.27.19.02.25;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.06.19.44.20;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.02.15.26.11;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2007.04.04.02.50.29;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.14.51;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.14.51;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.57;	author matthieu;	state Exp;
branches;
next	;

1.9.4.1
date	2014.12.09.18.00.12;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.9.6.1
date	2014.12.09.17.59.32;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.11
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*

Copyright 1993, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.

*/

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <X11/X.h>
#include <X11/Xproto.h>
#include "misc.h"
#include "os.h"
#include "dixstruct.h"
#include "extnsionst.h"
#include "swaprep.h"
#include <X11/extensions/xcmiscproto.h>
#include "extinit.h"

#include <stdint.h>

static int
ProcXCMiscGetVersion(ClientPtr client)
{
    xXCMiscGetVersionReply rep = {
        .type = X_Reply,
        .sequenceNumber = client->sequence,
        .length = 0,
        .majorVersion = XCMiscMajorVersion,
        .minorVersion = XCMiscMinorVersion
    };

    REQUEST_SIZE_MATCH(xXCMiscGetVersionReq);

    if (client->swapped) {
        swaps(&rep.sequenceNumber);
        swaps(&rep.majorVersion);
        swaps(&rep.minorVersion);
    }
    WriteToClient(client, sizeof(xXCMiscGetVersionReply), &rep);
    return Success;
}

static int
ProcXCMiscGetXIDRange(ClientPtr client)
{
    xXCMiscGetXIDRangeReply rep;
    XID min_id, max_id;

    REQUEST_SIZE_MATCH(xXCMiscGetXIDRangeReq);
    GetXIDRange(client->index, FALSE, &min_id, &max_id);
    rep = (xXCMiscGetXIDRangeReply) {
        .type = X_Reply,
        .sequenceNumber = client->sequence,
        .length = 0,
        .start_id = min_id,
        .count = max_id - min_id + 1
    };
    if (client->swapped) {
        swaps(&rep.sequenceNumber);
        swapl(&rep.start_id);
        swapl(&rep.count);
    }
    WriteToClient(client, sizeof(xXCMiscGetXIDRangeReply), &rep);
    return Success;
}

static int
ProcXCMiscGetXIDList(ClientPtr client)
{
    REQUEST(xXCMiscGetXIDListReq);
    xXCMiscGetXIDListReply rep;
    XID *pids;
    unsigned int count;

    REQUEST_SIZE_MATCH(xXCMiscGetXIDListReq);

    if (stuff->count > UINT32_MAX / sizeof(XID))
        return BadAlloc;

    pids = xallocarray(stuff->count, sizeof(XID));
    if (!pids) {
        return BadAlloc;
    }
    count = GetXIDList(client, stuff->count, pids);
    rep = (xXCMiscGetXIDListReply) {
        .type = X_Reply,
        .sequenceNumber = client->sequence,
        .length = count,
        .count = count
    };
    if (client->swapped) {
        swaps(&rep.sequenceNumber);
        swapl(&rep.length);
        swapl(&rep.count);
    }
    WriteToClient(client, sizeof(xXCMiscGetXIDListReply), &rep);
    if (count) {
        client->pSwapReplyFunc = (ReplySwapPtr) Swap32Write;
        WriteSwappedDataToClient(client, count * sizeof(XID), pids);
    }
    free(pids);
    return Success;
}

static int
ProcXCMiscDispatch(ClientPtr client)
{
    REQUEST(xReq);
    switch (stuff->data) {
    case X_XCMiscGetVersion:
        return ProcXCMiscGetVersion(client);
    case X_XCMiscGetXIDRange:
        return ProcXCMiscGetXIDRange(client);
    case X_XCMiscGetXIDList:
        return ProcXCMiscGetXIDList(client);
    default:
        return BadRequest;
    }
}

static int
SProcXCMiscGetVersion(ClientPtr client)
{
    REQUEST(xXCMiscGetVersionReq);

    swaps(&stuff->length);
    REQUEST_SIZE_MATCH(xXCMiscGetVersionReq);
    swaps(&stuff->majorVersion);
    swaps(&stuff->minorVersion);
    return ProcXCMiscGetVersion(client);
}

static int
SProcXCMiscGetXIDRange(ClientPtr client)
{
    REQUEST(xReq);

    swaps(&stuff->length);
    return ProcXCMiscGetXIDRange(client);
}

static int
SProcXCMiscGetXIDList(ClientPtr client)
{
    REQUEST(xXCMiscGetXIDListReq);
    REQUEST_SIZE_MATCH(xXCMiscGetXIDListReq);

    swaps(&stuff->length);
    swapl(&stuff->count);
    return ProcXCMiscGetXIDList(client);
}

static int
SProcXCMiscDispatch(ClientPtr client)
{
    REQUEST(xReq);
    switch (stuff->data) {
    case X_XCMiscGetVersion:
        return SProcXCMiscGetVersion(client);
    case X_XCMiscGetXIDRange:
        return SProcXCMiscGetXIDRange(client);
    case X_XCMiscGetXIDList:
        return SProcXCMiscGetXIDList(client);
    default:
        return BadRequest;
    }
}

void
XCMiscExtensionInit(void)
{
    AddExtension(XCMiscExtensionName, 0, 0,
                 ProcXCMiscDispatch, SProcXCMiscDispatch,
                 NULL, StandardMinorOpcode);
}
@


1.10
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@d104 1
a104 1
    pids = (XID *) malloc(stuff->count * sizeof(XID));
@


1.9
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d170 1
@


1.9.4.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a169 1
    REQUEST_SIZE_MATCH(xXCMiscGetXIDListReq);
@


1.9.6.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a169 1
    REQUEST_SIZE_MATCH(xXCMiscGetXIDListReq);
@


1.8
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d41 1
a41 1
#include "modinit.h"
d48 7
a54 1
    xXCMiscGetVersionReply rep;
d57 1
a57 5
    rep.type = X_Reply;
    rep.length = 0;
    rep.sequenceNumber = client->sequence;
    rep.majorVersion = XCMiscMajorVersion;
    rep.minorVersion = XCMiscMinorVersion;
d63 1
a63 1
    WriteToClient(client, sizeof(xXCMiscGetVersionReply), (char *) &rep);
d75 7
a81 5
    rep.type = X_Reply;
    rep.length = 0;
    rep.sequenceNumber = client->sequence;
    rep.start_id = min_id;
    rep.count = max_id - min_id + 1;
d87 1
a87 1
    WriteToClient(client, sizeof(xXCMiscGetXIDRangeReply), (char *) &rep);
d109 6
a114 4
    rep.type = X_Reply;
    rep.sequenceNumber = client->sequence;
    rep.length = count;
    rep.count = count;
d120 1
a120 1
    WriteToClient(client, sizeof(xXCMiscGetXIDListReply), (char *) &rep);
d193 1
a193 1
XCMiscExtensionInit(INITARGS)
@


1.7
log
@Update to xserver 1.11.2
@
text
@a42 1
#if HAVE_STDINT_H
a43 4
#elif !defined(UINT32_MAX)
#define UINT32_MAX 0xffffffffU
#endif

a48 1
    int n;
d57 3
a59 3
    	swaps(&rep.sequenceNumber, n);
	swaps(&rep.majorVersion, n);
	swaps(&rep.minorVersion, n);
d61 1
a61 1
    WriteToClient(client, sizeof(xXCMiscGetVersionReply), (char *)&rep);
a68 1
    int n;
d79 3
a81 3
    	swaps(&rep.sequenceNumber, n);
	swapl(&rep.start_id, n);
	swapl(&rep.count, n);
d83 1
a83 1
    WriteToClient(client, sizeof(xXCMiscGetXIDRangeReply), (char *)&rep);
a91 1
    int n;
d98 1
a98 1
	    return BadAlloc;
d100 3
a102 4
    pids = (XID *)malloc(stuff->count * sizeof(XID));
    if (!pids)
    {
	return BadAlloc;
d110 8
a117 9
    	swaps(&rep.sequenceNumber, n);
	swapl(&rep.length, n);
	swapl(&rep.count, n);
    }
    WriteToClient(client, sizeof(xXCMiscGetXIDListReply), (char *)&rep);
    if (count)
    {
    	client->pSwapReplyFunc = (ReplySwapPtr) Swap32Write;
	WriteSwappedDataToClient(client, count * sizeof(XID), pids);
d124 1
a124 1
ProcXCMiscDispatch (ClientPtr client)
d127 1
a127 2
    switch (stuff->data)
    {
d129 1
a129 1
	return ProcXCMiscGetVersion(client);
d131 1
a131 1
	return ProcXCMiscGetXIDRange(client);
d133 1
a133 1
	return ProcXCMiscGetXIDList(client);
d135 1
a135 1
	return BadRequest;
a141 1
    int n;
d144 1
a144 1
    swaps(&stuff->length, n);
d146 2
a147 2
    swaps(&stuff->majorVersion, n);
    swaps(&stuff->minorVersion, n);
a153 1
    int n;
d156 1
a156 1
    swaps(&stuff->length, n);
a162 1
    int n;
d165 2
a166 2
    swaps(&stuff->length, n);
    swapl(&stuff->count, n);
d171 1
a171 1
SProcXCMiscDispatch (ClientPtr client)
d174 1
a174 2
    switch (stuff->data)
    {
d176 1
a176 1
	return SProcXCMiscGetVersion(client);
d178 1
a178 1
	return SProcXCMiscGetXIDRange(client);
d180 1
a180 1
	return SProcXCMiscGetXIDList(client);
d182 1
a182 1
	return BadRequest;
d190 2
a191 2
		 ProcXCMiscDispatch, SProcXCMiscDispatch,
		 NULL, StandardMinorOpcode);
@


1.6
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a48 18
static DISPATCH_PROC(ProcXCMiscDispatch);
static DISPATCH_PROC(ProcXCMiscGetVersion);
static DISPATCH_PROC(ProcXCMiscGetXIDList);
static DISPATCH_PROC(ProcXCMiscGetXIDRange);
static DISPATCH_PROC(SProcXCMiscDispatch);
static DISPATCH_PROC(SProcXCMiscGetVersion);
static DISPATCH_PROC(SProcXCMiscGetXIDList);
static DISPATCH_PROC(SProcXCMiscGetXIDRange);

void XCMiscExtensionInit(INITARGS);

void
XCMiscExtensionInit(INITARGS)
{
    AddExtension(XCMiscExtensionName, 0, 0,
		 ProcXCMiscDispatch, SProcXCMiscDispatch,
		 NULL, StandardMinorOpcode);
}
d199 8
@


1.5
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d86 1
a86 1
    return(client->noClientException);
d109 1
a109 1
    return(client->noClientException);
d126 1
a126 1
    pids = (XID *)Xalloc(stuff->count * sizeof(XID));
d147 2
a148 2
    Xfree(pids);
    return(client->noClientException);
@


1.4
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a28 2
#define NEED_EVENTS
#define NEED_REPLIES
d40 1
a40 1
#include <X11/extensions/xcmiscstr.h>
d58 2
d69 1
a69 2
ProcXCMiscGetVersion(client)
    ClientPtr client;
d90 1
a90 2
ProcXCMiscGetXIDRange(client)
    ClientPtr client;
d113 1
a113 2
ProcXCMiscGetXIDList(client)
    ClientPtr client;
d152 1
a152 2
ProcXCMiscDispatch (client)
    ClientPtr	client;
d169 1
a169 2
SProcXCMiscGetVersion(client)
    ClientPtr	client;
d182 1
a182 2
SProcXCMiscGetXIDRange(client)
    ClientPtr	client;
d192 1
a192 2
SProcXCMiscGetXIDList(client)
    ClientPtr	client;
d203 1
a203 2
SProcXCMiscDispatch (client)
    ClientPtr	client;
@


1.3
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a50 4
static void XCMiscResetProc(
    ExtensionEntry * /* extEntry */
);

d65 1
a65 8
		 XCMiscResetProc, StandardMinorOpcode);
}

/*ARGSUSED*/
static void
XCMiscResetProc (extEntry)
    ExtensionEntry	*extEntry;
{
d70 1
a70 1
    register ClientPtr client;
d73 1
a73 1
    register int n;
d92 1
a92 1
    register ClientPtr client;
d95 1
a95 1
    register int n;
d116 1
a116 1
    register ClientPtr client;
d120 1
a120 1
    register int n;
d156 1
a156 1
    register ClientPtr	client;
d174 1
a174 1
    register ClientPtr	client;
d176 1
a176 1
    register int n;
d188 1
a188 1
    register ClientPtr	client;
d190 1
a190 1
    register int n;
d199 1
a199 1
    register ClientPtr	client;
d201 1
a201 1
    register int n;
d211 1
a211 1
    register ClientPtr	client;
@


1.2
log
@XC-MISC CVE-2007-1003

 XC-MISC Extension ProcXCMiscGetXIDList Memory Corruption
 Vulnerability

This vulnerability was discovered by Sean Larsson, iDefense Labs.

from matthieu@@
@
text
@a50 4
#if 0
static unsigned char XCMiscCode;
#endif

d67 3
a69 14
#if 0
    ExtensionEntry *extEntry;

    if ((extEntry = AddExtension(XCMiscExtensionName, 0, 0,
				ProcXCMiscDispatch, SProcXCMiscDispatch,
				XCMiscResetProc, StandardMinorOpcode)) != 0)
	XCMiscCode = (unsigned char)extEntry->base;
#else
    (void) AddExtension(XCMiscExtensionName, 0, 0,
			ProcXCMiscDispatch, SProcXCMiscDispatch,
			XCMiscResetProc, StandardMinorOpcode);
#endif

    DeclareExtensionSecurity(XCMiscExtensionName, TRUE);
@


1.1
log
@Initial revision
@
text
@d45 6
d152 4
a155 1
    pids = (XID *)ALLOCATE_LOCAL(stuff->count * sizeof(XID));
d176 1
a176 1
    DEALLOCATE_LOCAL(pids);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@a44 6
#if HAVE_STDINT_H
#include <stdint.h>
#elif !defined(UINT32_MAX)
#define UINT32_MAX 0xffffffffU
#endif

d146 1
a146 4
    if (stuff->count > UINT32_MAX / sizeof(XID))
	    return BadAlloc;

    pids = (XID *)Xalloc(stuff->count * sizeof(XID));
d167 1
a167 1
    Xfree(pids);
@

