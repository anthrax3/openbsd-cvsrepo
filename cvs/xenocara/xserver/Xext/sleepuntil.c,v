head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.09.27.17.52.59;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	cVXoV5PxI8YrEaVA;

1.4
date	2012.06.10.13.21.20;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.03;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.25;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.14.48;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.14.48;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/*
 *
Copyright 1992, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.
 *
 * Author:  Keith Packard, MIT X Consortium
 */

/* dixsleep.c - implement millisecond timeouts for X clients */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "sleepuntil.h"
#include <X11/X.h>
#include <X11/Xmd.h>
#include "misc.h"
#include "windowstr.h"
#include "dixstruct.h"
#include "pixmapstr.h"
#include "scrnintstr.h"

typedef struct _Sertafied {
    struct _Sertafied *next;
    TimeStamp revive;
    ClientPtr pClient;
    XID id;
    void (*notifyFunc) (ClientPtr /* client */ ,
                        void *    /* closure */
        );

    void *closure;
} SertafiedRec, *SertafiedPtr;

static SertafiedPtr pPending;
static RESTYPE SertafiedResType;
static Bool BlockHandlerRegistered;
static int SertafiedGeneration;

static void ClientAwaken(ClientPtr /* client */ ,
                         void *    /* closure */
    );
static int SertafiedDelete(void *  /* value */ ,
                           XID     /* id */
    );
static void SertafiedBlockHandler(void *    /* data */ ,
                                  OSTimePtr /* wt */ ,
                                  void *    /* LastSelectMask */
    );
static void SertafiedWakeupHandler(void *   /* data */ ,
                                   int      /* i */ ,
                                   void *   /* LastSelectMask */
    );

int
ClientSleepUntil(ClientPtr client,
                 TimeStamp *revive,
                 void (*notifyFunc) (ClientPtr, void *), void *closure)
{
    SertafiedPtr pRequest, pReq, pPrev;

    if (SertafiedGeneration != serverGeneration) {
        SertafiedResType = CreateNewResourceType(SertafiedDelete,
                                                 "ClientSleep");
        if (!SertafiedResType)
            return FALSE;
        SertafiedGeneration = serverGeneration;
        BlockHandlerRegistered = FALSE;
    }
    pRequest = malloc(sizeof(SertafiedRec));
    if (!pRequest)
        return FALSE;
    pRequest->pClient = client;
    pRequest->revive = *revive;
    pRequest->id = FakeClientID(client->index);
    pRequest->closure = closure;
    if (!BlockHandlerRegistered) {
        if (!RegisterBlockAndWakeupHandlers(SertafiedBlockHandler,
                                            SertafiedWakeupHandler,
                                            (void *) 0)) {
            free(pRequest);
            return FALSE;
        }
        BlockHandlerRegistered = TRUE;
    }
    pRequest->notifyFunc = 0;
    if (!AddResource(pRequest->id, SertafiedResType, (void *) pRequest))
        return FALSE;
    if (!notifyFunc)
        notifyFunc = ClientAwaken;
    pRequest->notifyFunc = notifyFunc;
    /* Insert into time-ordered queue, with earliest activation time coming first. */
    pPrev = 0;
    for (pReq = pPending; pReq; pReq = pReq->next) {
        if (CompareTimeStamps(pReq->revive, *revive) == LATER)
            break;
        pPrev = pReq;
    }
    if (pPrev)
        pPrev->next = pRequest;
    else
        pPending = pRequest;
    pRequest->next = pReq;
    IgnoreClient(client);
    return TRUE;
}

static void
ClientAwaken(ClientPtr client, void *closure)
{
    if (!client->clientGone)
        AttendClient(client);
}

static int
SertafiedDelete(void *value, XID id)
{
    SertafiedPtr pRequest = (SertafiedPtr) value;
    SertafiedPtr pReq, pPrev;

    pPrev = 0;
    for (pReq = pPending; pReq; pPrev = pReq, pReq = pReq->next)
        if (pReq == pRequest) {
            if (pPrev)
                pPrev->next = pReq->next;
            else
                pPending = pReq->next;
            break;
        }
    if (pRequest->notifyFunc)
        (*pRequest->notifyFunc) (pRequest->pClient, pRequest->closure);
    free(pRequest);
    return TRUE;
}

static void
SertafiedBlockHandler(void *data, OSTimePtr wt, void *LastSelectMask)
{
    SertafiedPtr pReq, pNext;
    unsigned long delay;
    TimeStamp now;

    if (!pPending)
        return;
    now.milliseconds = GetTimeInMillis();
    now.months = currentTime.months;
    if ((int) (now.milliseconds - currentTime.milliseconds) < 0)
        now.months++;
    for (pReq = pPending; pReq; pReq = pNext) {
        pNext = pReq->next;
        if (CompareTimeStamps(pReq->revive, now) == LATER)
            break;
        FreeResource(pReq->id, RT_NONE);

        /* AttendClient() may have been called via the resource delete
         * function so a client may have input to be processed and so
         *  set delay to 0 to prevent blocking in WaitForSomething().
         */
        AdjustWaitForDelay(wt, 0);
    }
    pReq = pPending;
    if (!pReq)
        return;
    delay = pReq->revive.milliseconds - now.milliseconds;
    AdjustWaitForDelay(wt, delay);
}

static void
SertafiedWakeupHandler(void *data, int i, void *LastSelectMask)
{
    SertafiedPtr pReq, pNext;
    TimeStamp now;

    now.milliseconds = GetTimeInMillis();
    now.months = currentTime.months;
    if ((int) (now.milliseconds - currentTime.milliseconds) < 0)
        now.months++;
    for (pReq = pPending; pReq; pReq = pNext) {
        pNext = pReq->next;
        if (CompareTimeStamps(pReq->revive, now) == LATER)
            break;
        FreeResource(pReq->id, RT_NONE);
    }
    if (!pPending) {
        RemoveBlockAndWakeupHandlers(SertafiedBlockHandler,
                                     SertafiedWakeupHandler, (void *) 0);
        BlockHandlerRegistered = FALSE;
    }
}
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d49 1
a49 1
                        pointer /* closure */
d52 1
a52 1
    pointer closure;
d61 1
a61 1
                         pointer        /* closure */
d63 2
a64 2
static int SertafiedDelete(pointer /* value */ ,
                           XID  /* id */
d66 1
a66 1
static void SertafiedBlockHandler(pointer /* data */ ,
d68 1
a68 1
                                  pointer       /* LastSelectMask */
d70 3
a72 3
static void SertafiedWakeupHandler(pointer /* data */ ,
                                   int /* i */ ,
                                   pointer      /* LastSelectMask */
d78 1
a78 1
                 void (*notifyFunc) (ClientPtr, pointer), pointer closure)
d100 1
a100 1
                                            (pointer) 0)) {
d107 1
a107 1
    if (!AddResource(pRequest->id, SertafiedResType, (pointer) pRequest))
d129 1
a129 1
ClientAwaken(ClientPtr client, pointer closure)
d136 1
a136 1
SertafiedDelete(pointer value, XID id)
d157 1
a157 1
SertafiedBlockHandler(pointer data, OSTimePtr wt, pointer LastSelectMask)
d189 1
a189 1
SertafiedWakeupHandler(pointer data, int i, pointer LastSelectMask)
d206 1
a206 1
                                     SertafiedWakeupHandler, (pointer) 0);
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d44 7
a50 8
    struct _Sertafied	*next;
    TimeStamp		revive;
    ClientPtr		pClient;
    XID			id;
    void		(*notifyFunc)(
			ClientPtr /* client */,
			pointer /* closure */
			);
d52 1
a52 1
    pointer		closure;
d56 18
a73 22
static RESTYPE	    SertafiedResType;
static Bool	    BlockHandlerRegistered;
static int	    SertafiedGeneration;

static void	    ClientAwaken(
    ClientPtr /* client */,
    pointer /* closure */
);
static int	    SertafiedDelete(
    pointer /* value */,
    XID /* id */
);
static void	    SertafiedBlockHandler(
    pointer /* data */,
    OSTimePtr /* wt */,
    pointer /* LastSelectMask */
);
static void	    SertafiedWakeupHandler(
    pointer /* data */,
    int /* i */,
    pointer /* LastSelectMask */
);
d76 3
a78 4
ClientSleepUntil (ClientPtr client,
                  TimeStamp *revive,
                  void (*notifyFunc)(ClientPtr, pointer),
                  pointer closure)
d80 1
a80 1
    SertafiedPtr	pRequest, pReq, pPrev;
d82 7
a88 8
    if (SertafiedGeneration != serverGeneration)
    {
	SertafiedResType = CreateNewResourceType (SertafiedDelete,
						  "ClientSleep");
	if (!SertafiedResType)
	    return FALSE;
	SertafiedGeneration = serverGeneration;
	BlockHandlerRegistered = FALSE;
d90 1
a90 1
    pRequest = malloc(sizeof (SertafiedRec));
d92 1
a92 1
	return FALSE;
d95 1
a95 1
    pRequest->id = FakeClientID (client->index);
d97 8
a104 10
    if (!BlockHandlerRegistered)
    {
	if (!RegisterBlockAndWakeupHandlers (SertafiedBlockHandler,
					     SertafiedWakeupHandler,
					     (pointer) 0))
	{
	    free(pRequest);
	    return FALSE;
	}
	BlockHandlerRegistered = TRUE;
d107 2
a108 2
    if (!AddResource (pRequest->id, SertafiedResType, (pointer) pRequest))
	return FALSE;
d110 1
a110 1
	notifyFunc = ClientAwaken;
d114 4
a117 5
    for (pReq = pPending; pReq; pReq = pReq->next)
    {
	if (CompareTimeStamps (pReq->revive, *revive) == LATER)
	    break;
	pPrev = pReq;
d120 1
a120 1
	pPrev->next = pRequest;
d122 1
a122 1
	pPending = pRequest;
d124 1
a124 1
    IgnoreClient (client);
d129 1
a129 1
ClientAwaken (ClientPtr client, pointer closure)
d132 1
a132 1
	AttendClient (client);
a134 1

d136 1
a136 1
SertafiedDelete (pointer value, XID id)
d138 2
a139 2
    SertafiedPtr	pRequest = (SertafiedPtr)value;
    SertafiedPtr	pReq, pPrev;
d143 7
a149 8
	if (pReq == pRequest)
	{
	    if (pPrev)
		pPrev->next = pReq->next;
	    else
		pPending = pReq->next;
	    break;
	}
d151 1
a151 1
	(*pRequest->notifyFunc) (pRequest->pClient, pRequest->closure);
d157 1
a157 1
SertafiedBlockHandler (pointer data, OSTimePtr wt, pointer LastSelectMask)
d159 3
a161 3
    SertafiedPtr	    pReq, pNext;
    unsigned long	    delay;
    TimeStamp		    now;
d164 2
a165 2
	return;
    now.milliseconds = GetTimeInMillis ();
d168 12
a179 13
	now.months++;
    for (pReq = pPending; pReq; pReq = pNext)
    {
	pNext = pReq->next;
	if (CompareTimeStamps (pReq->revive, now) == LATER)
	    break;
	FreeResource (pReq->id, RT_NONE);

 	/* AttendClient() may have been called via the resource delete
 	 * function so a client may have input to be processed and so
 	 *  set delay to 0 to prevent blocking in WaitForSomething().
 	 */
 	AdjustWaitForDelay (wt, 0);
d183 1
a183 1
	return;
d185 1
a185 1
    AdjustWaitForDelay (wt, delay);
d189 1
a189 1
SertafiedWakeupHandler (pointer data, int i, pointer LastSelectMask)
d191 2
a192 2
    SertafiedPtr	pReq, pNext;
    TimeStamp		now;
d194 1
a194 1
    now.milliseconds = GetTimeInMillis ();
d197 6
a202 7
	now.months++;
    for (pReq = pPending; pReq; pReq = pNext)
    {
	pNext = pReq->next;
	if (CompareTimeStamps (pReq->revive, now) == LATER)
	    break;
	FreeResource (pReq->id, RT_NONE);
d204 4
a207 6
    if (!pPending)
    {
	RemoveBlockAndWakeupHandlers (SertafiedBlockHandler,
				      SertafiedWakeupHandler,
				      (pointer) 0);
	BlockHandlerRegistered = FALSE;
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d97 1
a97 1
    pRequest = xalloc (sizeof (SertafiedRec));
d110 1
a110 1
	    xfree (pRequest);
d164 1
a164 1
    xfree (pRequest);
@


1.1
log
@Initial revision
@
text
@d80 5
a84 8
_X_EXPORT int
ClientSleepUntil (client, revive, notifyFunc, closure)
    ClientPtr	client;
    TimeStamp	*revive;
    void	(*notifyFunc)(
        ClientPtr /* client */,
        pointer   /* closure */);
    pointer	closure;
d90 2
a91 1
	SertafiedResType = CreateNewResourceType (SertafiedDelete);
d97 1
a97 1
    pRequest = (SertafiedPtr) xalloc (sizeof (SertafiedRec));
d139 1
a139 3
ClientAwaken (client, closure)
    ClientPtr	client;
    pointer	closure;
d147 1
a147 3
SertafiedDelete (value, id)
    pointer value;
    XID id;
d169 1
a169 4
SertafiedBlockHandler (data, wt, LastSelectMask)
    pointer	    data;		/* unused */
    OSTimePtr	    wt;			/* wait time */
    pointer	    LastSelectMask;
d202 1
a202 4
SertafiedWakeupHandler (data, i, LastSelectMask)
    pointer	    data;
    int		    i;
    pointer	    LastSelectMask;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
