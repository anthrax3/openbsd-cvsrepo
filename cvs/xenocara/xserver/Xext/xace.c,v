head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.05.29.12.02.35;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	s0SI41sEunLdyFfd;

1.9
date	2015.11.07.16.48.52;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	7pAEtF6Y5EgemkuY;

1.8
date	2014.09.27.17.52.59;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	cVXoV5PxI8YrEaVA;

1.7
date	2013.06.07.17.28.46;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.10.13.21.20;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.01.31.07.52.35;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.03;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.25;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.11;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.14.58;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.14.58;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.52;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/************************************************************

Author: Eamon Walsh <ewalsh@@tycho.nsa.gov>

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
this permission notice appear in supporting documentation.  This permission
notice shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

********************************************************/

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <stdarg.h>
#include "scrnintstr.h"
#include "extnsionst.h"
#include "pixmapstr.h"
#include "regionstr.h"
#include "gcstruct.h"
#include "xacestr.h"

_X_EXPORT CallbackListPtr XaceHooks[XACE_NUM_HOOKS] = { 0 };

/* Special-cased hook functions.  Called by Xserver.
 */
int
XaceHookDispatch(ClientPtr client, int major)
{
    /* Call the audit begin callback, there is no return value. */
    XaceAuditRec rec = { client, 0 };
    CallCallbacks(&XaceHooks[XACE_AUDIT_BEGIN], &rec);

    if (major < 128) {
        /* Call the core dispatch hook */
        XaceCoreDispatchRec drec = { client, Success /* default allow */  };
        CallCallbacks(&XaceHooks[XACE_CORE_DISPATCH], &drec);
        return drec.status;
    }
    else {
        /* Call the extension dispatch hook */
        ExtensionEntry *ext = GetExtensionEntry(major);
        XaceExtAccessRec erec = { client, ext, DixUseAccess, Success };
        if (ext)
            CallCallbacks(&XaceHooks[XACE_EXT_DISPATCH], &erec);
        /* On error, pretend extension doesn't exist */
        return (erec.status == Success) ? Success : BadRequest;
    }
}

int
XaceHookPropertyAccess(ClientPtr client, WindowPtr pWin,
                       PropertyPtr *ppProp, Mask access_mode)
{
    XacePropertyAccessRec rec = { client, pWin, ppProp, access_mode, Success };
    CallCallbacks(&XaceHooks[XACE_PROPERTY_ACCESS], &rec);
    return rec.status;
}

int
XaceHookSelectionAccess(ClientPtr client, Selection ** ppSel, Mask access_mode)
{
    XaceSelectionAccessRec rec = { client, ppSel, access_mode, Success };
    CallCallbacks(&XaceHooks[XACE_SELECTION_ACCESS], &rec);
    return rec.status;
}

void
XaceHookAuditEnd(ClientPtr ptr, int result)
{
    XaceAuditRec rec = { ptr, result };
    /* call callbacks, there is no return value. */
    CallCallbacks(&XaceHooks[XACE_AUDIT_END], &rec);
}

/* Entry point for hook functions.  Called by Xserver.
 */
int
XaceHook(int hook, ...)
{
    union {
        XaceResourceAccessRec res;
        XaceDeviceAccessRec dev;
        XaceSendAccessRec send;
        XaceReceiveAccessRec recv;
        XaceClientAccessRec client;
        XaceExtAccessRec ext;
        XaceServerAccessRec server;
        XaceScreenAccessRec screen;
        XaceAuthAvailRec auth;
        XaceKeyAvailRec key;
    } u;
    int *prv = NULL;            /* points to return value from callback */
    va_list ap;                 /* argument list */

    if (!XaceHooks[hook])
        return Success;

    va_start(ap, hook);

    /* Marshal arguments for passing to callback.
     * Each callback has its own case, which sets up a structure to hold
     * the arguments and integer return parameter, or in some cases just
     * sets calldata directly to a single argument (with no return result)
     */
    switch (hook) {
    case XACE_RESOURCE_ACCESS:
        u.res.client = va_arg(ap, ClientPtr);
        u.res.id = va_arg(ap, XID);
        u.res.rtype = va_arg(ap, RESTYPE);
        u.res.res = va_arg(ap, void *);
        u.res.ptype = va_arg(ap, RESTYPE);
        u.res.parent = va_arg(ap, void *);
        u.res.access_mode = va_arg(ap, Mask);

        u.res.status = Success; /* default allow */
        prv = &u.res.status;
        break;
    case XACE_DEVICE_ACCESS:
        u.dev.client = va_arg(ap, ClientPtr);
        u.dev.dev = va_arg(ap, DeviceIntPtr);
        u.dev.access_mode = va_arg(ap, Mask);

        u.dev.status = Success; /* default allow */
        prv = &u.dev.status;
        break;
    case XACE_SEND_ACCESS:
        u.send.client = va_arg(ap, ClientPtr);
        u.send.dev = va_arg(ap, DeviceIntPtr);
        u.send.pWin = va_arg(ap, WindowPtr);

        u.send.events = va_arg(ap, xEventPtr);
        u.send.count = va_arg(ap, int);

        u.send.status = Success;        /* default allow */
        prv = &u.send.status;
        break;
    case XACE_RECEIVE_ACCESS:
        u.recv.client = va_arg(ap, ClientPtr);
        u.recv.pWin = va_arg(ap, WindowPtr);

        u.recv.events = va_arg(ap, xEventPtr);
        u.recv.count = va_arg(ap, int);

        u.recv.status = Success;        /* default allow */
        prv = &u.recv.status;
        break;
    case XACE_CLIENT_ACCESS:
        u.client.client = va_arg(ap, ClientPtr);
        u.client.target = va_arg(ap, ClientPtr);
        u.client.access_mode = va_arg(ap, Mask);

        u.client.status = Success;      /* default allow */
        prv = &u.client.status;
        break;
    case XACE_EXT_ACCESS:
        u.ext.client = va_arg(ap, ClientPtr);

        u.ext.ext = va_arg(ap, ExtensionEntry *);
        u.ext.access_mode = DixGetAttrAccess;
        u.ext.status = Success; /* default allow */
        prv = &u.ext.status;
        break;
    case XACE_SERVER_ACCESS:
        u.server.client = va_arg(ap, ClientPtr);
        u.server.access_mode = va_arg(ap, Mask);

        u.server.status = Success;      /* default allow */
        prv = &u.server.status;
        break;
    case XACE_SCREEN_ACCESS:
    case XACE_SCREENSAVER_ACCESS:
        u.screen.client = va_arg(ap, ClientPtr);
        u.screen.screen = va_arg(ap, ScreenPtr);
        u.screen.access_mode = va_arg(ap, Mask);

        u.screen.status = Success;      /* default allow */
        prv = &u.screen.status;
        break;
    case XACE_AUTH_AVAIL:
        u.auth.client = va_arg(ap, ClientPtr);
        u.auth.authId = va_arg(ap, XID);

        break;
    case XACE_KEY_AVAIL:
        u.key.event = va_arg(ap, xEventPtr);
        u.key.keybd = va_arg(ap, DeviceIntPtr);
        u.key.count = va_arg(ap, int);

        break;
    default:
        va_end(ap);
        return 0;               /* unimplemented hook number */
    }
    va_end(ap);

    /* call callbacks and return result, if any. */
    CallCallbacks(&XaceHooks[hook], &u);
    return prv ? *prv : Success;
}

/* XaceHookIsSet
 *
 * Utility function to determine whether there are any callbacks listening on a
 * particular XACE hook.
 *
 * Returns non-zero if there is a callback, zero otherwise.
 */
int
XaceHookIsSet(int hook)
{
    if (hook < 0 || hook >= XACE_NUM_HOOKS)
        return 0;
    return XaceHooks[hook] != NULL;
}

/* XaceCensorImage
 *
 * Called after pScreen->GetImage to prevent pieces or trusted windows from
 * being returned in image data from an untrusted window.
 *
 * Arguments:
 *	client is the client doing the GetImage.
 *      pVisibleRegion is the visible region of the window.
 *	widthBytesLine is the width in bytes of one horizontal line in pBuf.
 *	pDraw is the source window.
 *	x, y, w, h is the rectangle of image data from pDraw in pBuf.
 *	format is the format of the image data in pBuf: ZPixmap or XYPixmap.
 *	pBuf is the image data.
 *
 * Returns: nothing.
 *
 * Side Effects:
 *	Any part of the rectangle (x, y, w, h) that is outside the visible
 *	region of the window will be destroyed (overwritten) in pBuf.
 */
void
XaceCensorImage(ClientPtr client,
                RegionPtr pVisibleRegion,
                long widthBytesLine,
                DrawablePtr pDraw,
                int x, int y, int w, int h, unsigned int format, char *pBuf)
{
    RegionRec imageRegion;      /* region representing x,y,w,h */
    RegionRec censorRegion;     /* region to obliterate */
    BoxRec imageBox;
    int nRects;

    imageBox.x1 = x;
    imageBox.y1 = y;
    imageBox.x2 = x + w;
    imageBox.y2 = y + h;
    RegionInit(&imageRegion, &imageBox, 1);
    RegionNull(&censorRegion);

    /* censorRegion = imageRegion - visibleRegion */
    RegionSubtract(&censorRegion, &imageRegion, pVisibleRegion);
    nRects = RegionNumRects(&censorRegion);
    if (nRects > 0) {           /* we have something to censor */
        GCPtr pScratchGC = NULL;
        PixmapPtr pPix = NULL;
        xRectangle *pRects = NULL;
        Bool failed = FALSE;
        int depth = 1;
        int bitsPerPixel = 1;
        int i;
        BoxPtr pBox;

        /* convert region to list-of-rectangles for PolyFillRect */

        pRects = malloc(nRects * sizeof(xRectangle));
        if (!pRects) {
            failed = TRUE;
            goto failSafe;
        }
        for (pBox = RegionRects(&censorRegion), i = 0; i < nRects; i++, pBox++) {
            pRects[i].x = pBox->x1;
            pRects[i].y = pBox->y1 - imageBox.y1;
            pRects[i].width = pBox->x2 - pBox->x1;
            pRects[i].height = pBox->y2 - pBox->y1;
        }

        /* use pBuf as a fake pixmap */

        if (format == ZPixmap) {
            depth = pDraw->depth;
            bitsPerPixel = pDraw->bitsPerPixel;
        }

        pPix = GetScratchPixmapHeader(pDraw->pScreen, w, h,
                                      depth, bitsPerPixel,
                                      widthBytesLine, (void *) pBuf);
        if (!pPix) {
            failed = TRUE;
            goto failSafe;
        }

        pScratchGC = GetScratchGC(depth, pPix->drawable.pScreen);
        if (!pScratchGC) {
            failed = TRUE;
            goto failSafe;
        }

        ValidateGC(&pPix->drawable, pScratchGC);
        (*pScratchGC->ops->PolyFillRect) (&pPix->drawable,
                                          pScratchGC, nRects, pRects);

 failSafe:
        if (failed) {
            /* Censoring was not completed above.  To be safe, wipe out
             * all the image data so that nothing trusted gets out.
             */
            memset(pBuf, 0, (int) (widthBytesLine * h));
        }
        free(pRects);
        if (pScratchGC)
            FreeScratchGC(pScratchGC);
        if (pPix)
            FreeScratchPixmapHeader(pPix);
    }
    RegionUninit(&imageRegion);
    RegionUninit(&censorRegion);
}                               /* XaceCensorImage */

/*
 * Xtrans wrappers for use by modules
 */
int
XaceGetConnectionNumber(ClientPtr client)
{
    return GetClientFd(client);
}

int
XaceIsLocal(ClientPtr client)
{
    return ClientIsLocal(client);
}
@


1.9
log
@Update to xserver 1.17.4.
tested by naddy@@
@
text
@a31 5
#define XSERV_t
#define TRANS_SERVER
#include <X11/Xtrans/Xtrans.h>
#include "../os/osdep.h"

d340 1
a340 3
    XtransConnInfo ci = ((OsCommPtr) client->osPrivate)->trans_conn;

    return _XSERVTransGetConnectionNumber(ci);
d346 1
a346 3
    XtransConnInfo ci = ((OsCommPtr) client->osPrivate)->trans_conn;

    return _XSERVTransIsLocal(ci);
@


1.8
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d216 15
@


1.7
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d125 1
a125 1
        u.res.res = va_arg(ap, pointer);
d127 1
a127 1
        u.res.parent = va_arg(ap, pointer);
d291 1
a291 1
                                      widthBytesLine, (pointer) pBuf);
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d50 3
a52 3
        XaceCoreDispatchRec rec = { client, Success /* default allow */  };
        CallCallbacks(&XaceHooks[XACE_CORE_DISPATCH], &rec);
        return rec.status;
d57 1
a57 1
        XaceExtAccessRec rec = { client, ext, DixUseAccess, Success };
d59 1
a59 1
            CallCallbacks(&XaceHooks[XACE_EXT_DISPATCH], &rec);
d61 1
a61 1
        return (rec.status == Success) ? Success : BadRequest;
@


1.5
log
@Update to xserver 1.11.4. tested by krw@@, shadchin@@.
@
text
@d37 1
a37 1
_X_EXPORT CallbackListPtr XaceHooks[XACE_NUM_HOOKS] = {0};
d41 2
a42 1
int XaceHookDispatch(ClientPtr client, int major)
d49 13
a61 12
	/* Call the core dispatch hook */
	XaceCoreDispatchRec rec = { client, Success /* default allow */ };
	CallCallbacks(&XaceHooks[XACE_CORE_DISPATCH], &rec);
	return rec.status;
    } else {
	/* Call the extension dispatch hook */
	ExtensionEntry *ext = GetExtensionEntry(major);
	XaceExtAccessRec rec = { client, ext, DixUseAccess, Success };
	if (ext)
	    CallCallbacks(&XaceHooks[XACE_EXT_DISPATCH], &rec);
	/* On error, pretend extension doesn't exist */
	return (rec.status == Success) ? Success : BadRequest;
d65 3
a67 2
int XaceHookPropertyAccess(ClientPtr client, WindowPtr pWin,
			   PropertyPtr *ppProp, Mask access_mode)
d74 2
a75 2
int XaceHookSelectionAccess(ClientPtr client,
			    Selection **ppSel, Mask access_mode)
d82 2
a83 1
void XaceHookAuditEnd(ClientPtr ptr, int result)
d92 2
a93 1
int XaceHook(int hook, ...)
d96 10
a105 10
	XaceResourceAccessRec res;
	XaceDeviceAccessRec dev;
	XaceSendAccessRec send;
	XaceReceiveAccessRec recv;
	XaceClientAccessRec client;
	XaceExtAccessRec ext;
	XaceServerAccessRec server;
	XaceScreenAccessRec screen;
	XaceAuthAvailRec auth;
	XaceKeyAvailRec key;
d107 2
a108 2
    int *prv = NULL;	/* points to return value from callback */
    va_list ap;		/* argument list */
d111 1
a111 1
	return Success;
d120 88
a207 77
    switch (hook)
    {
	case XACE_RESOURCE_ACCESS:
	    u.res.client = va_arg(ap, ClientPtr);
	    u.res.id = va_arg(ap, XID);
	    u.res.rtype = va_arg(ap, RESTYPE);
	    u.res.res = va_arg(ap, pointer);
	    u.res.ptype = va_arg(ap, RESTYPE);
	    u.res.parent = va_arg(ap, pointer);
	    u.res.access_mode = va_arg(ap, Mask);
	    u.res.status = Success; /* default allow */
	    prv = &u.res.status;
	    break;
	case XACE_DEVICE_ACCESS:
	    u.dev.client = va_arg(ap, ClientPtr);
	    u.dev.dev = va_arg(ap, DeviceIntPtr);
	    u.dev.access_mode = va_arg(ap, Mask);
	    u.dev.status = Success; /* default allow */
	    prv = &u.dev.status;
	    break;
	case XACE_SEND_ACCESS:
	    u.send.client = va_arg(ap, ClientPtr);
	    u.send.dev = va_arg(ap, DeviceIntPtr);
	    u.send.pWin = va_arg(ap, WindowPtr);
	    u.send.events = va_arg(ap, xEventPtr);
	    u.send.count = va_arg(ap, int);
	    u.send.status = Success; /* default allow */
	    prv = &u.send.status;
	    break;
	case XACE_RECEIVE_ACCESS:
	    u.recv.client = va_arg(ap, ClientPtr);
	    u.recv.pWin = va_arg(ap, WindowPtr);
	    u.recv.events = va_arg(ap, xEventPtr);
	    u.recv.count = va_arg(ap, int);
	    u.recv.status = Success; /* default allow */
	    prv = &u.recv.status;
	    break;
	case XACE_CLIENT_ACCESS:
	    u.client.client = va_arg(ap, ClientPtr);
	    u.client.target = va_arg(ap, ClientPtr);
	    u.client.access_mode = va_arg(ap, Mask);
	    u.client.status = Success; /* default allow */
	    prv = &u.client.status;
	    break;
	case XACE_EXT_ACCESS:
	    u.ext.client = va_arg(ap, ClientPtr);
	    u.ext.ext = va_arg(ap, ExtensionEntry*);
	    u.ext.access_mode = DixGetAttrAccess;
	    u.ext.status = Success; /* default allow */
	    prv = &u.ext.status;
	    break;
	case XACE_SERVER_ACCESS:
	    u.server.client = va_arg(ap, ClientPtr);
	    u.server.access_mode = va_arg(ap, Mask);
	    u.server.status = Success; /* default allow */
	    prv = &u.server.status;
	    break;
	case XACE_SCREEN_ACCESS:
	case XACE_SCREENSAVER_ACCESS:
	    u.screen.client = va_arg(ap, ClientPtr);
	    u.screen.screen = va_arg(ap, ScreenPtr);
	    u.screen.access_mode = va_arg(ap, Mask);
	    u.screen.status = Success; /* default allow */
	    prv = &u.screen.status;
	    break;
	case XACE_AUTH_AVAIL:
	    u.auth.client = va_arg(ap, ClientPtr);
	    u.auth.authId = va_arg(ap, XID);
	    break;
	case XACE_KEY_AVAIL:
	    u.key.event = va_arg(ap, xEventPtr);
	    u.key.keybd = va_arg(ap, DeviceIntPtr);
	    u.key.count = va_arg(ap, int);
	    break;
	default:
	    va_end(ap);
	    return 0;	/* unimplemented hook number */
d210 1
a210 1
 
d237 5
a241 8
XaceCensorImage(
	ClientPtr client,
	RegionPtr pVisibleRegion,
	long widthBytesLine,
	DrawablePtr pDraw,
	int x, int y, int w, int h,
	unsigned int format,
	char *pBuf)
d243 2
a244 2
    RegionRec imageRegion;  /* region representing x,y,w,h */
    RegionRec censorRegion; /* region to obliterate */
d258 61
a318 68
    if (nRects > 0)
    { /* we have something to censor */
	GCPtr pScratchGC = NULL;
	PixmapPtr pPix = NULL;
	xRectangle *pRects = NULL;
	Bool failed = FALSE;
	int depth = 1;
	int bitsPerPixel = 1;
	int i;
	BoxPtr pBox;

	/* convert region to list-of-rectangles for PolyFillRect */

	pRects = malloc(nRects * sizeof(xRectangle));
	if (!pRects)
	{
	    failed = TRUE;
	    goto failSafe;
	}
	for (pBox = RegionRects(&censorRegion), i = 0;
	     i < nRects;
	     i++, pBox++)
	{
	    pRects[i].x = pBox->x1;
	    pRects[i].y = pBox->y1 - imageBox.y1;
	    pRects[i].width  = pBox->x2 - pBox->x1;
	    pRects[i].height = pBox->y2 - pBox->y1;
	}

	/* use pBuf as a fake pixmap */

	if (format == ZPixmap)
	{
	    depth = pDraw->depth;
	    bitsPerPixel = pDraw->bitsPerPixel;
	}

	pPix = GetScratchPixmapHeader(pDraw->pScreen, w, h,
		    depth, bitsPerPixel,
		    widthBytesLine, (pointer)pBuf);
	if (!pPix)
	{
	    failed = TRUE;
	    goto failSafe;
	}

	pScratchGC = GetScratchGC(depth, pPix->drawable.pScreen);
	if (!pScratchGC)
	{
	    failed = TRUE;
	    goto failSafe;
	}

	ValidateGC(&pPix->drawable, pScratchGC);
	(* pScratchGC->ops->PolyFillRect)(&pPix->drawable,
			    pScratchGC, nRects, pRects);

    failSafe:
	if (failed)
	{
	    /* Censoring was not completed above.  To be safe, wipe out
	     * all the image data so that nothing trusted gets out.
	     */
	    memset(pBuf, 0, (int)(widthBytesLine * h));
	}
	free(pRects);
	if (pScratchGC) FreeScratchGC(pScratchGC);
	if (pPix)       FreeScratchPixmapHeader(pPix);
d322 1
a322 1
} /* XaceCensorImage */
d327 2
a328 1
int XaceGetConnectionNumber(ClientPtr client)
d330 2
a331 1
    XtransConnInfo ci = ((OsCommPtr)client->osPrivate)->trans_conn;
d335 2
a336 1
int XaceIsLocal(ClientPtr client)
d338 2
a339 1
    XtransConnInfo ci = ((OsCommPtr)client->osPrivate)->trans_conn;
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d104 4
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d90 12
a101 1
    pointer calldata;	/* data passed to callback */
d113 54
a166 74
	case XACE_RESOURCE_ACCESS: {
	    XaceResourceAccessRec rec;
	    rec.client = va_arg(ap, ClientPtr);
	    rec.id = va_arg(ap, XID);
	    rec.rtype = va_arg(ap, RESTYPE);
	    rec.res = va_arg(ap, pointer);
	    rec.ptype = va_arg(ap, RESTYPE);
	    rec.parent = va_arg(ap, pointer);
	    rec.access_mode = va_arg(ap, Mask);
	    rec.status = Success; /* default allow */
	    calldata = &rec;
	    prv = &rec.status;
	    break;
	}
	case XACE_DEVICE_ACCESS: {
	    XaceDeviceAccessRec rec;
	    rec.client = va_arg(ap, ClientPtr);
	    rec.dev = va_arg(ap, DeviceIntPtr);
	    rec.access_mode = va_arg(ap, Mask);
	    rec.status = Success; /* default allow */
	    calldata = &rec;
	    prv = &rec.status;
	    break;
	}
	case XACE_SEND_ACCESS: {
	    XaceSendAccessRec rec;
	    rec.client = va_arg(ap, ClientPtr);
	    rec.dev = va_arg(ap, DeviceIntPtr);
	    rec.pWin = va_arg(ap, WindowPtr);
	    rec.events = va_arg(ap, xEventPtr);
	    rec.count = va_arg(ap, int);
	    rec.status = Success; /* default allow */
	    calldata = &rec;
	    prv = &rec.status;
	    break;
	}
	case XACE_RECEIVE_ACCESS: {
	    XaceReceiveAccessRec rec;
	    rec.client = va_arg(ap, ClientPtr);
	    rec.pWin = va_arg(ap, WindowPtr);
	    rec.events = va_arg(ap, xEventPtr);
	    rec.count = va_arg(ap, int);
	    rec.status = Success; /* default allow */
	    calldata = &rec;
	    prv = &rec.status;
	    break;
	}
	case XACE_CLIENT_ACCESS: {
	    XaceClientAccessRec rec;
	    rec.client = va_arg(ap, ClientPtr);
	    rec.target = va_arg(ap, ClientPtr);
	    rec.access_mode = va_arg(ap, Mask);
	    rec.status = Success; /* default allow */
	    calldata = &rec;
	    prv = &rec.status;
	    break;
	}
	case XACE_EXT_ACCESS: {
	    XaceExtAccessRec rec;
	    rec.client = va_arg(ap, ClientPtr);
	    rec.ext = va_arg(ap, ExtensionEntry*);
	    rec.access_mode = DixGetAttrAccess;
	    rec.status = Success; /* default allow */
	    calldata = &rec;
	    prv = &rec.status;
	    break;
	}
	case XACE_SERVER_ACCESS: {
	    XaceServerAccessRec rec;
	    rec.client = va_arg(ap, ClientPtr);
	    rec.access_mode = va_arg(ap, Mask);
	    rec.status = Success; /* default allow */
	    calldata = &rec;
	    prv = &rec.status;
a167 1
	}
d169 15
a183 23
	case XACE_SCREENSAVER_ACCESS: {
	    XaceScreenAccessRec rec;
	    rec.client = va_arg(ap, ClientPtr);
	    rec.screen = va_arg(ap, ScreenPtr);
	    rec.access_mode = va_arg(ap, Mask);
	    rec.status = Success; /* default allow */
	    calldata = &rec;
	    prv = &rec.status;
	    break;
	}
	case XACE_AUTH_AVAIL: {
	    XaceAuthAvailRec rec;
	    rec.client = va_arg(ap, ClientPtr);
	    rec.authId = va_arg(ap, XID);
	    calldata = &rec;
	    break;
	}
	case XACE_KEY_AVAIL: {
	    XaceKeyAvailRec rec;
	    rec.event = va_arg(ap, xEventPtr);
	    rec.keybd = va_arg(ap, DeviceIntPtr);
	    rec.count = va_arg(ap, int);
	    calldata = &rec;
d185 1
a185 2
	}
	default: {
a187 1
	}
d192 1
a192 1
    CallCallbacks(&XaceHooks[hook], calldata);
a225 1
    ScreenPtr pScreen;
a230 2
    pScreen = pDraw->pScreen;

d235 2
a236 2
    REGION_INIT(pScreen, &imageRegion, &imageBox, 1);
    REGION_NULL(pScreen, &censorRegion);
d239 2
a240 2
    REGION_SUBTRACT(pScreen, &censorRegion, &imageRegion, pVisibleRegion);
    nRects = REGION_NUM_RECTS(&censorRegion);
d254 1
a254 1
	pRects = xalloc(nRects * sizeof(xRectangle));
d260 1
a260 1
	for (pBox = REGION_RECTS(&censorRegion), i = 0;
d304 1
a304 1
	    bzero(pBuf, (int)(widthBytesLine * h));
d306 1
a306 1
	if (pRects)     xfree(pRects);
d310 2
a311 2
    REGION_UNINIT(pScreen, &imageRegion);
    REGION_UNINIT(pScreen, &censorRegion);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d3 1
a3 1
Author: Eamon Walsh <ewalsh@@epoch.ncsc.mil>
d32 6
a37 1
CallbackListPtr XaceHooks[XACE_NUM_HOOKS] = {0};
d103 9
a111 10
	    XaceResourceAccessRec rec = {
		va_arg(ap, ClientPtr),
		va_arg(ap, XID),
		va_arg(ap, RESTYPE),
		va_arg(ap, pointer),
		va_arg(ap, RESTYPE),
		va_arg(ap, pointer),
		va_arg(ap, Mask),
		Success /* default allow */
	    };
d117 5
a121 6
	    XaceDeviceAccessRec rec = {
		va_arg(ap, ClientPtr),
		va_arg(ap, DeviceIntPtr),
		va_arg(ap, Mask),
		Success /* default allow */
	    };
d127 7
a133 8
	    XaceSendAccessRec rec = {
		va_arg(ap, ClientPtr),
		va_arg(ap, DeviceIntPtr),
		va_arg(ap, WindowPtr),
		va_arg(ap, xEventPtr),
		va_arg(ap, int),
		Success /* default allow */
	    };
d139 6
a144 7
	    XaceReceiveAccessRec rec = {
		va_arg(ap, ClientPtr),
		va_arg(ap, WindowPtr),
		va_arg(ap, xEventPtr),
		va_arg(ap, int),
		Success /* default allow */
	    };
d150 5
a154 6
	    XaceClientAccessRec rec = {
		va_arg(ap, ClientPtr),
		va_arg(ap, ClientPtr),
		va_arg(ap, Mask),
		Success /* default allow */
	    };
d160 5
a164 6
	    XaceExtAccessRec rec = {
		va_arg(ap, ClientPtr),
		va_arg(ap, ExtensionEntry*),
		DixGetAttrAccess,
		Success /* default allow */
	    };
d170 4
a173 5
	    XaceServerAccessRec rec = {
		va_arg(ap, ClientPtr),
		va_arg(ap, Mask),
		Success /* default allow */
	    };
d180 5
a184 6
	    XaceScreenAccessRec rec = {
		va_arg(ap, ClientPtr),
		va_arg(ap, ScreenPtr),
		va_arg(ap, Mask),
		Success /* default allow */
	    };
d190 3
a192 4
	    XaceAuthAvailRec rec = {
		va_arg(ap, ClientPtr),
		va_arg(ap, XID)
	    };
d197 4
a200 5
	    XaceKeyAvailRec rec = {
		va_arg(ap, xEventPtr),
		va_arg(ap, DeviceIntPtr),
		va_arg(ap, int)
	    };
d237 8
a244 9
XaceCensorImage(client, pVisibleRegion, widthBytesLine, pDraw, x, y, w, h,
		format, pBuf)
    ClientPtr client;
    RegionPtr pVisibleRegion;
    long widthBytesLine;
    DrawablePtr pDraw;
    int x, y, w, h;
    unsigned int format;
    char * pBuf;
d277 1
a277 1
	pRects = (xRectangle *)xalloc(nRects * sizeof(xRectangle));
d336 15
@


1.1
log
@Initial revision
@
text
@a24 1
#include "windowstr.h"
d26 3
a30 1
#include "modinit.h"
d34 1
a34 6
/* Proc vectors for untrusted clients, swapped and unswapped versions.
 * These are the same as the normal proc vectors except that extensions
 * that haven't declared themselves secure will have ProcBadRequest plugged
 * in for their major opcode dispatcher.  This prevents untrusted clients
 * from guessing extension major opcodes and using the extension even though
 * the extension can't be listed or queried.
d36 44
a79 6
int (*UntrustedProcVector[256])(
    ClientPtr /*client*/
);
int (*SwappedUntrustedProcVector[256])(
    ClientPtr /*client*/
);
a96 9
	case XACE_CORE_DISPATCH: {
	    XaceCoreDispatchRec rec = {
		va_arg(ap, ClientPtr),
		TRUE	/* default allow */
	    };
	    calldata = &rec;
	    prv = &rec.rval;
	    break;
	}
d102 3
d106 1
a106 2
		va_arg(ap, pointer),
		TRUE	/* default allow */
d109 1
a109 1
	    prv = &rec.rval;
d116 2
a117 2
		va_arg(ap, Bool),
		TRUE	/* default allow */
d120 1
a120 1
	    prv = &rec.rval;
d123 2
a124 2
	case XACE_PROPERTY_ACCESS: {
	    XacePropertyAccessRec rec = {
d126 1
d128 3
a130 3
		va_arg(ap, Atom),
		va_arg(ap, Mask),
		SecurityAllowOperation   /* default allow */
d133 1
a133 1
	    prv = &rec.rval;
d136 2
a137 2
	case XACE_DRAWABLE_ACCESS: {
	    XaceDrawableAccessRec rec = {
d139 4
a142 2
		va_arg(ap, DrawablePtr),
		TRUE	/* default allow */
d145 1
a145 1
	    prv = &rec.rval;
d148 3
a150 3
	case XACE_MAP_ACCESS:
	case XACE_BACKGRND_ACCESS: {
	    XaceMapAccessRec rec = {
d152 2
a153 2
		va_arg(ap, WindowPtr),
		TRUE	/* default allow */
d156 1
a156 1
	    prv = &rec.rval;
a158 1
	case XACE_EXT_DISPATCH:
d163 2
a164 1
		TRUE	/* default allow */
d167 1
a167 1
	    prv = &rec.rval;
d170 2
a171 2
	case XACE_HOSTLIST_ACCESS: {
	    XaceHostlistAccessRec rec = {
d174 1
a174 1
		TRUE	/* default allow */
d177 1
a177 1
	    prv = &rec.rval;
d180 7
a186 14
	case XACE_SITE_POLICY: {
	    XaceSitePolicyRec rec = {
		va_arg(ap, char*),
		va_arg(ap, int),
		FALSE	/* default unrecognized */
	    };
	    calldata = &rec;
	    prv = &rec.rval;
	    break;
	}
	case XACE_DECLARE_EXT_SECURE: {
	    XaceDeclareExtSecureRec rec = {
		va_arg(ap, ExtensionEntry*),
		va_arg(ap, Bool)
d189 1
a208 24
	case XACE_WINDOW_INIT: {
	    XaceWindowRec rec = {
		va_arg(ap, ClientPtr),
		va_arg(ap, WindowPtr)
	    };
	    calldata = &rec;
	    break;
	}
	case XACE_AUDIT_BEGIN: {
	    XaceAuditRec rec = {
		va_arg(ap, ClientPtr),
		0
	    };
	    calldata = &rec;
	    break;
	}
	case XACE_AUDIT_END: {
	    XaceAuditRec rec = {
		va_arg(ap, ClientPtr),
		va_arg(ap, int)
	    };
	    calldata = &rec;
	    break;
	}
d218 1
a218 158
    return prv ? *prv : 0;
}

static int
ProcXaceDispatch(ClientPtr client)
{
    REQUEST(xReq);

    switch (stuff->data)
    {
	default:
	    return BadRequest;
    }
} /* ProcXaceDispatch */

static int
SProcXaceDispatch(ClientPtr client)
{
    REQUEST(xReq);

    switch (stuff->data)
    {
	default:
	    return BadRequest;
    }
} /* SProcXaceDispatch */


/* XaceResetProc
 *
 * Arguments:
 *	extEntry is the extension information for the XACE extension.
 *
 * Returns: nothing.
 *
 * Side Effects:
 *	Performs any cleanup needed by XACE at server shutdown time.
 */
static void
XaceResetProc(ExtensionEntry *extEntry)
{
    int i;

    for (i=0; i<XACE_NUM_HOOKS; i++)
    {
	DeleteCallbackList(&XaceHooks[i]);
	XaceHooks[i] = NULL;
    }
} /* XaceResetProc */


static int
XaceCatchDispatchProc(ClientPtr client)
{
    REQUEST(xReq);
    int major = stuff->reqType;

    if (!ProcVector[major])
	return (BadRequest);

    if (!XaceHook(XACE_CORE_DISPATCH, client))
	return (BadAccess);

    return client->swapped ? 
	(* SwappedProcVector[major])(client) :
	(* ProcVector[major])(client);
}

static int
XaceCatchExtProc(ClientPtr client)
{
    REQUEST(xReq);
    int major = stuff->reqType;
    ExtensionEntry *ext = GetExtensionEntry(major);

    if (!ext || !ProcVector[major])
	return (BadRequest);

    if (!XaceHook(XACE_EXT_DISPATCH, client, ext))
	return (BadRequest); /* pretend extension doesn't exist */

    return client->swapped ?
	(* SwappedProcVector[major])(client) :
	(* ProcVector[major])(client);
}

	
/* SecurityClientStateCallback
 *
 * Arguments:
 *	pcbl is &ClientStateCallback.
 *	nullata is NULL.
 *	calldata is a pointer to a NewClientInfoRec (include/dixstruct.h)
 *	which contains information about client state changes.
 *
 * Returns: nothing.
 *
 * Side Effects:
 * 
 * If a new client is connecting, its authorization ID is copied to
 * client->authID.  If this is a generated authorization, its reference
 * count is bumped, its timer is cancelled if it was running, and its
 * trustlevel is copied to TRUSTLEVEL(client).
 * 
 * If a client is disconnecting and the client was using a generated
 * authorization, the authorization's reference count is decremented, and
 * if it is now zero, the timer for this authorization is started.
 */

static void
XaceClientStateCallback(
    CallbackListPtr *pcbl,
    pointer nulldata,
    pointer calldata)
{
    NewClientInfoRec *pci = (NewClientInfoRec *)calldata;
    ClientPtr client = pci->client;

    switch (client->clientState)
    {
	case ClientStateRunning:
	{ 
	    client->requestVector = client->swapped ?
		SwappedUntrustedProcVector : UntrustedProcVector;
	    break;
	}
	default: break; 
    }
} /* XaceClientStateCallback */

/* XaceExtensionInit
 *
 * Initialize the XACE Extension
 */
void XaceExtensionInit(INITARGS)
{
    ExtensionEntry	*extEntry;
    int i;

    if (!AddCallback(&ClientStateCallback, XaceClientStateCallback, NULL))
	return;

    extEntry = AddExtension(XACE_EXTENSION_NAME,
			    XaceNumberEvents, XaceNumberErrors,
			    ProcXaceDispatch, SProcXaceDispatch,
			    XaceResetProc, StandardMinorOpcode);

    /* initialize dispatching intercept functions */
    for (i = 0; i < 128; i++)
    {
	UntrustedProcVector[i] = XaceCatchDispatchProc;
	SwappedUntrustedProcVector[i] = XaceCatchDispatchProc;
    }
    for (i = 128; i < 256; i++)
    {
	UntrustedProcVector[i] = XaceCatchExtProc;
	SwappedUntrustedProcVector[i] = XaceCatchExtProc;
    }
d252 1
a252 1
    ScreenPtr pScreen = pDraw->pScreen;
d258 2
d283 1
a283 1
	pRects = (xRectangle *)ALLOCATE_LOCAL(nRects * sizeof(xRectangle *));
d335 1
a335 1
	if (pRects)     DEALLOCATE_LOCAL(pRects);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d40 1
a40 1
static int (*UntrustedProcVector[256])(
d43 1
a43 1
static int (*SwappedUntrustedProcVector[256])(
d102 1
a102 1
		XaceAllowOperation   /* default allow */
d409 1
a409 1
    ScreenPtr pScreen;
a413 2

    pScreen = pDraw->pScreen;
@

