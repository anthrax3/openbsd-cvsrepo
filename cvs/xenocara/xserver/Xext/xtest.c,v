head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.6
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.05.29.12.02.35;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	s0SI41sEunLdyFfd;

1.10
date	2014.09.27.17.52.59;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	cVXoV5PxI8YrEaVA;

1.9
date	2013.06.07.17.28.46;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.10.13.21.20;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.05.13.32.47;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.12.05.15.36.03;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.27.19.02.25;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.13.19.54.46;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.20;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.11;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.14.51;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.14.51;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.56.50;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*

   Copyright 1992, 1998  The Open Group

   Permission to use, copy, modify, distribute, and sell this software and its
   documentation for any purpose is hereby granted without fee, provided that
   the above copyright notice appear in all copies and that both that
   copyright notice and this permission notice appear in supporting
   documentation.

   The above copyright notice and this permission notice shall be included
   in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
   IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   OTHER DEALINGS IN THE SOFTWARE.

   Except as contained in this notice, the name of The Open Group shall
   not be used in advertising or otherwise to promote the sale, use or
   other dealings in this Software without prior written authorization
   from The Open Group.

 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <X11/X.h>
#include <X11/Xproto.h>
#include <X11/Xatom.h>
#include "misc.h"
#include "os.h"
#include "dixstruct.h"
#include "extnsionst.h"
#include "windowstr.h"
#include "inputstr.h"
#include "scrnintstr.h"
#include "dixevents.h"
#include "sleepuntil.h"
#include "mi.h"
#include "xkbsrv.h"
#include "xkbstr.h"
#include <X11/extensions/xtestproto.h>
#include <X11/extensions/XI.h>
#include <X11/extensions/XIproto.h>
#include "exglobals.h"
#include "mipointer.h"
#include "xserver-properties.h"
#include "exevents.h"
#include "eventstr.h"
#include "inpututils.h"

#include "extinit.h"

/* XTest events are sent during request processing and may be interruped by
 * a SIGIO. We need a separate event list to avoid events overwriting each
 * other's memory */
static InternalEvent *xtest_evlist;

/**
 * xtestpointer
 * is the virtual pointer for XTest. It is the first slave
 * device of the VCP.
 * xtestkeyboard
 * is the virtual keyboard for XTest. It is the first slave
 * device of the VCK
 *
 * Neither of these devices can be deleted.
 */
DeviceIntPtr xtestpointer, xtestkeyboard;

#ifdef PANORAMIX
#include "panoramiX.h"
#include "panoramiXsrv.h"
#endif

static int XTestSwapFakeInput(ClientPtr /* client */ ,
                              xReq *    /* req */
    );

static int
ProcXTestGetVersion(ClientPtr client)
{
    xXTestGetVersionReply rep = {
        .type = X_Reply,
        .sequenceNumber = client->sequence,
        .length = 0,
        .majorVersion = XTestMajorVersion,
        .minorVersion = XTestMinorVersion
    };

    REQUEST_SIZE_MATCH(xXTestGetVersionReq);

    if (client->swapped) {
        swaps(&rep.sequenceNumber);
        swaps(&rep.minorVersion);
    }
    WriteToClient(client, sizeof(xXTestGetVersionReply), &rep);
    return Success;
}

static int
ProcXTestCompareCursor(ClientPtr client)
{
    REQUEST(xXTestCompareCursorReq);
    xXTestCompareCursorReply rep;
    WindowPtr pWin;
    CursorPtr pCursor;
    int rc;
    DeviceIntPtr ptr = PickPointer(client);

    REQUEST_SIZE_MATCH(xXTestCompareCursorReq);
    rc = dixLookupWindow(&pWin, stuff->window, client, DixGetAttrAccess);
    if (rc != Success)
        return rc;

    if (!ptr)
        return BadAccess;

    if (stuff->cursor == None)
        pCursor = NullCursor;
    else if (stuff->cursor == XTestCurrentCursor)
        pCursor = GetSpriteCursor(ptr);
    else {
        rc = dixLookupResourceByType((void **) &pCursor, stuff->cursor,
                                     RT_CURSOR, client, DixReadAccess);
        if (rc != Success) {
            client->errorValue = stuff->cursor;
            return rc;
        }
    }
    rep = (xXTestCompareCursorReply) {
        .type = X_Reply,
        .sequenceNumber = client->sequence,
        .length = 0,
        .same = (wCursor(pWin) == pCursor)
    };
    if (client->swapped) {
        swaps(&rep.sequenceNumber);
    }
    WriteToClient(client, sizeof(xXTestCompareCursorReply), &rep);
    return Success;
}

static int
ProcXTestFakeInput(ClientPtr client)
{
    REQUEST(xXTestFakeInputReq);
    int nev, n, type, rc;
    xEvent *ev;
    DeviceIntPtr dev = NULL;
    WindowPtr root;
    Bool extension = FALSE;
    ValuatorMask mask;
    int valuators[MAX_VALUATORS] = { 0 };
    int numValuators = 0;
    int firstValuator = 0;
    int nevents = 0;
    int i;
    int base = 0;
    int flags = 0;
    int need_ptr_update = 1;

    nev = (stuff->length << 2) - sizeof(xReq);
    if ((nev % sizeof(xEvent)) || !nev)
        return BadLength;
    nev /= sizeof(xEvent);
    UpdateCurrentTime();
    ev = (xEvent *) &((xReq *) stuff)[1];
    type = ev->u.u.type & 0177;

    if (type >= EXTENSION_EVENT_BASE) {
        extension = TRUE;

        /* check device */
        rc = dixLookupDevice(&dev, stuff->deviceid & 0177, client,
                             DixWriteAccess);
        if (rc != Success) {
            client->errorValue = stuff->deviceid & 0177;
            return rc;
        }

        /* check type */
        type -= DeviceValuator;
        switch (type) {
        case XI_DeviceKeyPress:
        case XI_DeviceKeyRelease:
            if (!dev->key) {
                client->errorValue = ev->u.u.type;
                return BadValue;
            }
            break;
        case XI_DeviceButtonPress:
        case XI_DeviceButtonRelease:
            if (!dev->button) {
                client->errorValue = ev->u.u.type;
                return BadValue;
            }
            break;
        case XI_DeviceMotionNotify:
            if (!dev->valuator) {
                client->errorValue = ev->u.u.type;
                return BadValue;
            }
            break;
        case XI_ProximityIn:
        case XI_ProximityOut:
            if (!dev->proximity) {
                client->errorValue = ev->u.u.type;
                return BadValue;
            }
            break;
        default:
            client->errorValue = ev->u.u.type;
            return BadValue;
        }

        /* check validity */
        if (nev == 1 && type == XI_DeviceMotionNotify)
            return BadLength;   /* DevMotion must be followed by DevValuator */

        if (type == XI_DeviceMotionNotify) {
            firstValuator = ((deviceValuator *) (ev + 1))->first_valuator;
            if (firstValuator > dev->valuator->numAxes) {
                client->errorValue = ev->u.u.type;
                return BadValue;
            }

            if (ev->u.u.detail == xFalse)
                flags |= POINTER_ABSOLUTE;
        }
        else {
            firstValuator = 0;
            flags |= POINTER_ABSOLUTE;
        }

        if (nev > 1 && !dev->valuator) {
            client->errorValue = firstValuator;
            return BadValue;
        }

        /* check validity of valuator events */
        base = firstValuator;
        for (n = 1; n < nev; n++) {
            deviceValuator *dv = (deviceValuator *) (ev + n);
            if (dv->type != DeviceValuator) {
                client->errorValue = dv->type;
                return BadValue;
            }
            if (dv->first_valuator != base) {
                client->errorValue = dv->first_valuator;
                return BadValue;
            }
            switch (dv->num_valuators) {
            case 6:
                valuators[base + 5] = dv->valuator5;
            case 5:
                valuators[base + 4] = dv->valuator4;
            case 4:
                valuators[base + 3] = dv->valuator3;
            case 3:
                valuators[base + 2] = dv->valuator2;
            case 2:
                valuators[base + 1] = dv->valuator1;
            case 1:
                valuators[base] = dv->valuator0;
                break;
            default:
                client->errorValue = dv->num_valuators;
                return BadValue;
            }

            base += dv->num_valuators;
            numValuators += dv->num_valuators;

            if (firstValuator + numValuators > dev->valuator->numAxes) {
                client->errorValue = dv->num_valuators;
                return BadValue;
            }
        }
        type = type - XI_DeviceKeyPress + KeyPress;

    }
    else {
        if (nev != 1)
            return BadLength;
        switch (type) {
        case KeyPress:
        case KeyRelease:
            dev = PickKeyboard(client);
            break;
        case ButtonPress:
        case ButtonRelease:
            dev = PickPointer(client);
            break;
        case MotionNotify:
            dev = PickPointer(client);
            valuators[0] = ev->u.keyButtonPointer.rootX;
            valuators[1] = ev->u.keyButtonPointer.rootY;
            numValuators = 2;
            firstValuator = 0;
            if (ev->u.u.detail == xFalse)
                flags = POINTER_ABSOLUTE | POINTER_DESKTOP;
            break;
        default:
            client->errorValue = ev->u.u.type;
            return BadValue;
        }

        /* Technically the protocol doesn't allow for BadAccess here but
         * this can only happen when all MDs are disabled.  */
        if (!dev)
            return BadAccess;

        dev = GetXTestDevice(dev);
    }


    /* If the event has a time set, wait for it to pass */
    if (ev->u.keyButtonPointer.time) {
        TimeStamp activateTime;
        CARD32 ms;

        activateTime = currentTime;
        ms = activateTime.milliseconds + ev->u.keyButtonPointer.time;
        if (ms < activateTime.milliseconds)
            activateTime.months++;
        activateTime.milliseconds = ms;
        ev->u.keyButtonPointer.time = 0;

        /* see mbuf.c:QueueDisplayRequest (from the deprecated Multibuffer
         * extension) for code similar to this */

        if (!ClientSleepUntil(client, &activateTime, NULL, NULL)) {
            return BadAlloc;
        }
        /* swap the request back so we can simply re-execute it */
        if (client->swapped) {
            (void) XTestSwapFakeInput(client, (xReq *) stuff);
            swaps(&stuff->length);
        }
        ResetCurrentRequest(client);
        client->sequence--;
        return Success;
    }

    switch (type) {
    case KeyPress:
    case KeyRelease:
        if (!dev->key)
            return BadDevice;

        if (ev->u.u.detail < dev->key->xkbInfo->desc->min_key_code ||
            ev->u.u.detail > dev->key->xkbInfo->desc->max_key_code) {
            client->errorValue = ev->u.u.detail;
            return BadValue;
        }

        need_ptr_update = 0;
        break;
    case MotionNotify:
        if (!dev->valuator)
            return BadDevice;

        if (!(extension || ev->u.keyButtonPointer.root == None)) {
            rc = dixLookupWindow(&root, ev->u.keyButtonPointer.root,
                                 client, DixGetAttrAccess);
            if (rc != Success)
                return rc;
            if (root->parent) {
                client->errorValue = ev->u.keyButtonPointer.root;
                return BadValue;
            }

            /* Add the root window's offset to the valuators */
            if ((flags & POINTER_ABSOLUTE) && firstValuator <= 1 && numValuators > 0) {
                if (firstValuator == 0)
                    valuators[0] += root->drawable.pScreen->x;
                if (firstValuator < 2 && firstValuator + numValuators > 1)
                    valuators[1 - firstValuator] += root->drawable.pScreen->y;
            }
        }
        if (ev->u.u.detail != xTrue && ev->u.u.detail != xFalse) {
            client->errorValue = ev->u.u.detail;
            return BadValue;
        }

        /* FIXME: Xinerama! */

        break;
    case ButtonPress:
    case ButtonRelease:
        if (!dev->button)
            return BadDevice;

        if (!ev->u.u.detail || ev->u.u.detail > dev->button->numButtons) {
            client->errorValue = ev->u.u.detail;
            return BadValue;
        }
        break;
    }
    if (screenIsSaved == SCREEN_SAVER_ON)
        dixSaveScreens(serverClient, SCREEN_SAVER_OFF, ScreenSaverReset);

    switch (type) {
    case MotionNotify:
        valuator_mask_set_range(&mask, firstValuator, numValuators, valuators);
        nevents = GetPointerEvents(xtest_evlist, dev, type, 0, flags, &mask);
        break;
    case ButtonPress:
    case ButtonRelease:
        valuator_mask_set_range(&mask, firstValuator, numValuators, valuators);
        nevents = GetPointerEvents(xtest_evlist, dev, type, ev->u.u.detail,
                                   flags, &mask);
        break;
    case KeyPress:
    case KeyRelease:
        nevents =
            GetKeyboardEvents(xtest_evlist, dev, type, ev->u.u.detail);
        break;
    }

    for (i = 0; i < nevents; i++)
        mieqProcessDeviceEvent(dev, &xtest_evlist[i], miPointerGetScreen(inputInfo.pointer));

    if (need_ptr_update)
        miPointerUpdateSprite(dev);
    return Success;
}

static int
ProcXTestGrabControl(ClientPtr client)
{
    REQUEST(xXTestGrabControlReq);

    REQUEST_SIZE_MATCH(xXTestGrabControlReq);
    if ((stuff->impervious != xTrue) && (stuff->impervious != xFalse)) {
        client->errorValue = stuff->impervious;
        return BadValue;
    }
    if (stuff->impervious)
        MakeClientGrabImpervious(client);
    else
        MakeClientGrabPervious(client);
    return Success;
}

static int
ProcXTestDispatch(ClientPtr client)
{
    REQUEST(xReq);
    switch (stuff->data) {
    case X_XTestGetVersion:
        return ProcXTestGetVersion(client);
    case X_XTestCompareCursor:
        return ProcXTestCompareCursor(client);
    case X_XTestFakeInput:
        return ProcXTestFakeInput(client);
    case X_XTestGrabControl:
        return ProcXTestGrabControl(client);
    default:
        return BadRequest;
    }
}

static int
SProcXTestGetVersion(ClientPtr client)
{
    REQUEST(xXTestGetVersionReq);

    swaps(&stuff->length);
    REQUEST_SIZE_MATCH(xXTestGetVersionReq);
    swaps(&stuff->minorVersion);
    return ProcXTestGetVersion(client);
}

static int
SProcXTestCompareCursor(ClientPtr client)
{
    REQUEST(xXTestCompareCursorReq);

    swaps(&stuff->length);
    REQUEST_SIZE_MATCH(xXTestCompareCursorReq);
    swapl(&stuff->window);
    swapl(&stuff->cursor);
    return ProcXTestCompareCursor(client);
}

static int
XTestSwapFakeInput(ClientPtr client, xReq * req)
{
    int nev;
    xEvent *ev;
    xEvent sev;
    EventSwapPtr proc;

    nev = ((req->length << 2) - sizeof(xReq)) / sizeof(xEvent);
    for (ev = (xEvent *) &req[1]; --nev >= 0; ev++) {
        /* Swap event */
        proc = EventSwapVector[ev->u.u.type & 0177];
        /* no swapping proc; invalid event type? */
        if (!proc || proc == NotImplemented) {
            client->errorValue = ev->u.u.type;
            return BadValue;
        }
        (*proc) (ev, &sev);
        *ev = sev;
    }
    return Success;
}

static int
SProcXTestFakeInput(ClientPtr client)
{
    int n;

    REQUEST(xReq);

    swaps(&stuff->length);
    n = XTestSwapFakeInput(client, stuff);
    if (n != Success)
        return n;
    return ProcXTestFakeInput(client);
}

static int
SProcXTestGrabControl(ClientPtr client)
{
    REQUEST(xXTestGrabControlReq);

    swaps(&stuff->length);
    REQUEST_SIZE_MATCH(xXTestGrabControlReq);
    return ProcXTestGrabControl(client);
}

static int
SProcXTestDispatch(ClientPtr client)
{
    REQUEST(xReq);
    switch (stuff->data) {
    case X_XTestGetVersion:
        return SProcXTestGetVersion(client);
    case X_XTestCompareCursor:
        return SProcXTestCompareCursor(client);
    case X_XTestFakeInput:
        return SProcXTestFakeInput(client);
    case X_XTestGrabControl:
        return SProcXTestGrabControl(client);
    default:
        return BadRequest;
    }
}

/**
 * Allocate an virtual slave device for xtest events, this
 * is a slave device to inputInfo master devices
 */
void
InitXTestDevices(void)
{
    if (AllocXTestDevice(serverClient, "Virtual core",
                         &xtestpointer, &xtestkeyboard,
                         inputInfo.pointer, inputInfo.keyboard) != Success)
         FatalError("Failed to allocate XTest devices");

    if (ActivateDevice(xtestpointer, TRUE) != Success ||
        ActivateDevice(xtestkeyboard, TRUE) != Success)
        FatalError("Failed to activate XTest core devices.");
    if (!EnableDevice(xtestpointer, TRUE) || !EnableDevice(xtestkeyboard, TRUE))
        FatalError("Failed to enable XTest core devices.");

    AttachDevice(NULL, xtestpointer, inputInfo.pointer);

    AttachDevice(NULL, xtestkeyboard, inputInfo.keyboard);
}

/**
 * Don't allow changing the XTest property.
 */
static int
DeviceSetXTestProperty(DeviceIntPtr dev, Atom property,
                       XIPropertyValuePtr prop, BOOL checkonly)
{
    if (property == XIGetKnownProperty(XI_PROP_XTEST_DEVICE))
        return BadAccess;

    return Success;
}

/**
 * Allocate a device pair that is initialised as a slave
 * device with properties that identify the devices as belonging
 * to XTest subsystem.
 * This only creates the pair, Activate/Enable Device
 * still need to be called.
 */
int
AllocXTestDevice(ClientPtr client, const char *name,
                 DeviceIntPtr *ptr, DeviceIntPtr *keybd,
                 DeviceIntPtr master_ptr, DeviceIntPtr master_keybd)
{
    int retval;
    char *xtestname;
    char dummy = 1;

    if (asprintf(&xtestname, "%s XTEST", name) == -1)
        return BadAlloc;

    retval =
        AllocDevicePair(client, xtestname, ptr, keybd, CorePointerProc,
                        CoreKeyboardProc, FALSE);
    if (retval == Success) {
        (*ptr)->xtest_master_id = master_ptr->id;
        (*keybd)->xtest_master_id = master_keybd->id;

        XIChangeDeviceProperty(*ptr, XIGetKnownProperty(XI_PROP_XTEST_DEVICE),
                               XA_INTEGER, 8, PropModeReplace, 1, &dummy,
                               FALSE);
        XISetDevicePropertyDeletable(*ptr,
                                     XIGetKnownProperty(XI_PROP_XTEST_DEVICE),
                                     FALSE);
        XIRegisterPropertyHandler(*ptr, DeviceSetXTestProperty, NULL, NULL);
        XIChangeDeviceProperty(*keybd, XIGetKnownProperty(XI_PROP_XTEST_DEVICE),
                               XA_INTEGER, 8, PropModeReplace, 1, &dummy,
                               FALSE);
        XISetDevicePropertyDeletable(*keybd,
                                     XIGetKnownProperty(XI_PROP_XTEST_DEVICE),
                                     FALSE);
        XIRegisterPropertyHandler(*keybd, DeviceSetXTestProperty, NULL, NULL);
    }

    free(xtestname);

    return retval;
}

/**
 * If master is NULL, return TRUE if the given device is an xtest device or
 * FALSE otherwise.
 * If master is not NULL, return TRUE if the given device is this master's
 * xtest device.
 */
BOOL
IsXTestDevice(DeviceIntPtr dev, DeviceIntPtr master)
{
    if (IsMaster(dev))
        return FALSE;

    /* deviceid 0 is reserved for XIAllDevices, non-zero mid means XTest
     * device */
    if (master)
        return dev->xtest_master_id == master->id;

    return dev->xtest_master_id != 0;
}

/**
 * @@return The X Test virtual device for the given master.
 */
DeviceIntPtr
GetXTestDevice(DeviceIntPtr master)
{
    DeviceIntPtr it;

    for (it = inputInfo.devices; it; it = it->next) {
        if (IsXTestDevice(it, master))
            return it;
    }

    /* This only happens if master is a slave device. don't do that */
    return NULL;
}

static void
XTestExtensionTearDown(ExtensionEntry * e)
{
    FreeEventList(xtest_evlist, GetMaximumEventsNum());
    xtest_evlist = NULL;
}

void
XTestExtensionInit(void)
{
    AddExtension(XTestExtensionName, 0, 0,
                 ProcXTestDispatch, SProcXTestDispatch,
                 XTestExtensionTearDown, StandardMinorOpcode);

    xtest_evlist = InitEventList(GetMaximumEventsNum());
}
@


1.10
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d424 1
a424 1
            GetKeyboardEvents(xtest_evlist, dev, type, ev->u.u.detail, NULL);
@


1.9
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d130 1
a130 1
        rc = dixLookupResourceByType((pointer *) &pCursor, stuff->cursor,
@


1.8
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d58 1
a58 3
#include "modinit.h"

extern int DeviceValuator;
d89 7
a95 1
    xXTestGetVersionReply rep;
d98 1
a98 5
    rep.type = X_Reply;
    rep.length = 0;
    rep.sequenceNumber = client->sequence;
    rep.majorVersion = XTestMajorVersion;
    rep.minorVersion = XTestMinorVersion;
d103 1
a103 1
    WriteToClient(client, sizeof(xXTestGetVersionReply), (char *) &rep);
d137 6
a142 4
    rep.type = X_Reply;
    rep.length = 0;
    rep.sequenceNumber = client->sequence;
    rep.same = (wCursor(pWin) == pCursor);
d146 1
a146 1
    WriteToClient(client, sizeof(xXTestCompareCursorReply), (char *) &rep);
a158 1
    deviceValuator *dv = NULL;
d243 1
a243 1
            client->errorValue = dv->first_valuator;
d250 1
a250 1
            dv = (deviceValuator *) (ev + n);
d308 1
a308 1
                flags = POINTER_ABSOLUTE | POINTER_SCREEN;
d379 8
d429 1
a429 1
        mieqProcessDeviceEvent(dev, &xtest_evlist[i], NULL);
d687 1
a687 1
XTestExtensionInit(INITARGS)
@


1.7
log
@Update to xserver 1.11.2
@
text
@d65 1
a65 1
static InternalEvent* xtest_evlist;
d84 3
a86 5
static int XTestSwapFakeInput(
        ClientPtr /* client */,
        xReq * /* req */
        );

a91 1
    int n;
d100 2
a101 2
        swaps(&rep.sequenceNumber, n);
        swaps(&rep.minorVersion, n);
d103 1
a103 1
    WriteToClient(client, sizeof(xXTestGetVersionReply), (char *)&rep);
d114 1
a114 1
    int n, rc;
d121 4
d130 3
a132 4
        rc = dixLookupResourceByType((pointer *)&pCursor, stuff->cursor, RT_CURSOR,
				     client, DixReadAccess);
        if (rc != Success)
        {
d142 1
a142 1
        swaps(&rep.sequenceNumber, n);
d144 1
a144 1
    WriteToClient(client, sizeof(xXTestCompareCursorReply), (char *)&rep);
d159 1
a159 1
    int valuators[MAX_VALUATORS] = {0};
d173 1
a173 1
    ev = (xEvent *)&((xReq *)stuff)[1];
d176 1
a176 2
    if (type >= EXTENSION_EVENT_BASE)
    {
d181 2
a182 3
                DixWriteAccess);
        if (rc != Success)
        {
d190 23
a212 32
            case XI_DeviceKeyPress:
            case XI_DeviceKeyRelease:
                if (!dev->key)
                {
                    client->errorValue = ev->u.u.type;
                    return BadValue;
                }
                break;
            case XI_DeviceButtonPress:
            case XI_DeviceButtonRelease:
                if (!dev->button)
                {
                    client->errorValue = ev->u.u.type;
                    return BadValue;
                }
                break;
            case XI_DeviceMotionNotify:
                if (!dev->valuator)
                {
                    client->errorValue = ev->u.u.type;
                    return BadValue;
                }
                break;
            case XI_ProximityIn:
            case XI_ProximityOut:
                if (!dev->proximity)
                {
                    client->errorValue = ev->u.u.type;
                    return BadValue;
                }
                break;
            default:
d215 5
d224 1
a224 1
            return BadLength; /* DevMotion must be followed by DevValuator */
d226 3
a228 5
        if (type == XI_DeviceMotionNotify)
        {
            firstValuator = ((deviceValuator *)(ev+1))->first_valuator;
            if (firstValuator > dev->valuator->numAxes)
            {
d235 2
a236 2
        } else
        {
d241 1
a241 2
        if (nev > 1 && !dev->valuator)
        {
a245 1

d248 3
a250 5
        for (n = 1; n < nev; n++)
        {
            dv = (deviceValuator *)(ev + n);
            if (dv->type != DeviceValuator)
            {
d254 1
a254 2
            if (dv->first_valuator != base)
            {
d258 17
a274 12
            switch(dv->num_valuators)
            {
                case 6: valuators[base + 5] = dv->valuator5;
                case 5: valuators[base + 4] = dv->valuator4;
                case 4: valuators[base + 3] = dv->valuator3;
                case 3: valuators[base + 2] = dv->valuator2;
                case 2: valuators[base + 1] = dv->valuator1;
                case 1: valuators[base] = dv->valuator0;
                        break;
                default:
                        client->errorValue = dv->num_valuators;
                        return BadValue;
d280 1
a280 2
            if (firstValuator + numValuators > dev->valuator->numAxes)
            {
d287 2
a288 2
    } else
    {
d291 21
a311 22
        switch (type)
        {
            case KeyPress:
            case KeyRelease:
                dev = PickKeyboard(client);
                break;
            case ButtonPress:
            case ButtonRelease:
                dev = PickPointer(client);
                break;
            case MotionNotify:
                dev = PickPointer(client);
                valuators[0] = ev->u.keyButtonPointer.rootX;
                valuators[1] = ev->u.keyButtonPointer.rootY;
                numValuators = 2;
                firstValuator = 0;
                if (ev->u.u.detail == xFalse)
                    flags = POINTER_ABSOLUTE | POINTER_SCREEN;
                break;
            default:
                client->errorValue = ev->u.u.type;
                return BadValue;
d314 5
d322 1
d324 1
a324 2
    if (ev->u.keyButtonPointer.time)
    {
d338 1
a338 2
        if (!ClientSleepUntil(client, &activateTime, NULL, NULL))
        {
d342 3
a344 4
        if (client->swapped)
        {
            (void) XTestSwapFakeInput(client, (xReq *)stuff);
            swaps(&stuff->length, n);
d346 1
a346 1
        ResetCurrentRequest (client);
d351 11
a361 6
    switch (type)
    {
        case KeyPress:
        case KeyRelease:
            if (!dev->key)
                return BadDevice;
d363 13
a375 4
            if (ev->u.u.detail < dev->key->xkbInfo->desc->min_key_code ||
                ev->u.u.detail > dev->key->xkbInfo->desc->max_key_code)
            {
                client->errorValue = ev->u.u.detail;
d378 5
d384 1
a384 23
            need_ptr_update = 0;
            break;
        case MotionNotify:
            if (!dev->valuator)
                return BadDevice;

            if (!(extension || ev->u.keyButtonPointer.root == None))
            {
                rc = dixLookupWindow(&root, ev->u.keyButtonPointer.root,
                                     client, DixGetAttrAccess);
                if (rc != Success)
                    return rc;
                if (root->parent)
                {
                    client->errorValue = ev->u.keyButtonPointer.root;
                    return BadValue;
                }
            }
            if (ev->u.u.detail != xTrue && ev->u.u.detail != xFalse)
            {
                client->errorValue = ev->u.u.detail;
                return BadValue;
            }
d386 5
a390 1
            /* FIXME: Xinerama! */
d392 5
a396 12
            break;
        case ButtonPress:
        case ButtonRelease:
            if (!dev->button)
                return BadDevice;

            if (!ev->u.u.detail || ev->u.u.detail > dev->button->numButtons)
            {
                client->errorValue = ev->u.u.detail;
                return BadValue;
            }
            break;
d401 16
a416 15
    switch(type) {
        case MotionNotify:
            valuator_mask_set_range(&mask, firstValuator, numValuators, valuators);
            nevents = GetPointerEvents(xtest_evlist, dev, type, 0, flags, &mask);
            break;
        case ButtonPress:
        case ButtonRelease:
            valuator_mask_set_range(&mask, firstValuator, numValuators, valuators);
            nevents = GetPointerEvents(xtest_evlist, dev, type, ev->u.u.detail,
                                       flags, &mask);
            break;
        case KeyPress:
        case KeyRelease:
            nevents = GetKeyboardEvents(xtest_evlist, dev, type, ev->u.u.detail, NULL);
            break;
d433 1
a433 2
    if ((stuff->impervious != xTrue) && (stuff->impervious != xFalse))
    {
d445 1
a445 1
ProcXTestDispatch (ClientPtr client)
d448 11
a458 12
    switch (stuff->data)
    {
        case X_XTestGetVersion:
            return ProcXTestGetVersion(client);
        case X_XTestCompareCursor:
            return ProcXTestCompareCursor(client);
        case X_XTestFakeInput:
            return ProcXTestFakeInput(client);
        case X_XTestGrabControl:
            return ProcXTestGrabControl(client);
        default:
            return BadRequest;
a464 1
    int n;
d467 1
a467 1
    swaps(&stuff->length, n);
d469 1
a469 1
    swaps(&stuff->minorVersion, n);
a475 1
    int n;
d478 1
a478 1
    swaps(&stuff->length, n);
d480 2
a481 2
    swapl(&stuff->window, n);
    swapl(&stuff->cursor, n);
d486 1
a486 1
XTestSwapFakeInput(ClientPtr client, xReq *req)
d494 1
a494 2
    for (ev = (xEvent *)&req[1]; --nev >= 0; ev++)
    {
d498 1
a498 1
        if (!proc ||  proc ==  NotImplemented) {
d502 1
a502 1
        (*proc)(ev, &sev);
d512 1
d515 1
a515 1
    swaps(&stuff->length, n);
a524 1
    int n;
d527 1
a527 1
    swaps(&stuff->length, n);
d533 1
a533 1
SProcXTestDispatch (ClientPtr client)
d536 11
a546 12
    switch (stuff->data)
    {
        case X_XTestGetVersion:
            return SProcXTestGetVersion(client);
        case X_XTestCompareCursor:
            return SProcXTestCompareCursor(client);
        case X_XTestFakeInput:
            return SProcXTestFakeInput(client);
        case X_XTestGrabControl:
            return SProcXTestGrabControl(client);
        default:
            return BadRequest;
d554 2
a555 1
void InitXTestDevices(void)
d557 4
a560 4
    if(AllocXTestDevice(serverClient, "Virtual core",
                       &xtestpointer, &xtestkeyboard,
                       inputInfo.pointer, inputInfo.keyboard) != Success)
        FatalError("Failed to allocate XTest devices");
d565 1
a565 2
    if (!EnableDevice(xtestpointer, TRUE) ||
        !EnableDevice(xtestkeyboard, TRUE))
d569 1
d578 1
a578 1
                      XIPropertyValuePtr prop, BOOL checkonly)
d593 4
a596 3
int AllocXTestDevice (ClientPtr client, char* name,
                     DeviceIntPtr* ptr, DeviceIntPtr* keybd,
                     DeviceIntPtr master_ptr, DeviceIntPtr master_keybd)
d599 1
a599 2
    int len = strlen(name);
    char *xtestname = calloc(len + 7, 1 );
d602 2
a603 2
    strncpy( xtestname, name, len);
    strncat( xtestname, " XTEST", 6 );
d605 6
a610 4
    retval = AllocDevicePair( client, xtestname, ptr, keybd, CorePointerProc, CoreKeyboardProc, FALSE);
    if ( retval == Success ){
	(*ptr)->xtest_master_id = master_ptr->id;
	(*keybd)->xtest_master_id = master_keybd->id;
d613 5
a617 3
                XA_INTEGER, 8, PropModeReplace, 1, &dummy,
                FALSE);
        XISetDevicePropertyDeletable(*ptr, XIGetKnownProperty(XI_PROP_XTEST_DEVICE), FALSE);
d620 5
a624 3
                XA_INTEGER, 8, PropModeReplace, 1, &dummy,
                FALSE);
        XISetDevicePropertyDeletable(*keybd, XIGetKnownProperty(XI_PROP_XTEST_DEVICE), FALSE);
d628 1
a628 1
    free( xtestname );
d648 1
a648 1
	return dev->xtest_master_id == master->id;
d661 1
a661 2
    for (it = inputInfo.devices; it; it = it->next)
    {
d671 1
a671 1
XTestExtensionTearDown(ExtensionEntry *e)
d681 2
a682 2
            ProcXTestDispatch, SProcXTestDispatch,
            XTestExtensionTearDown, StandardMinorOpcode);
@


1.6
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d55 2
d65 1
a65 1
static EventListPtr xtest_evlist;
a88 20
static DISPATCH_PROC(ProcXTestCompareCursor);
static DISPATCH_PROC(ProcXTestDispatch);
static DISPATCH_PROC(ProcXTestFakeInput);
static DISPATCH_PROC(ProcXTestGetVersion);
static DISPATCH_PROC(ProcXTestGrabControl);
static DISPATCH_PROC(SProcXTestCompareCursor);
static DISPATCH_PROC(SProcXTestDispatch);
static DISPATCH_PROC(SProcXTestFakeInput);
static DISPATCH_PROC(SProcXTestGetVersion);
static DISPATCH_PROC(SProcXTestGrabControl);

void
XTestExtensionInit(INITARGS)
{
    AddExtension(XTestExtensionName, 0, 0,
            ProcXTestDispatch, SProcXTestDispatch,
            NULL, StandardMinorOpcode);

    xtest_evlist = InitEventList(GetMaximumEventsNum());
}
d158 1
d378 1
a378 4
            /* broken lib, XI events have root uninitialized */
            if (extension || ev->u.keyButtonPointer.root == None)
                root = GetCurrentRootWindow(dev);
            else
d416 2
a417 2
            nevents = GetPointerEvents(xtest_evlist, dev, type, 0, flags,
                            firstValuator, numValuators, valuators);
d421 1
d423 1
a423 2
                                       flags, firstValuator,
                                       numValuators, valuators);
d427 1
a427 1
            nevents = GetKeyboardEvents(xtest_evlist, dev, type, ev->u.u.detail);
d432 1
a432 1
        mieqProcessDeviceEvent(dev, (InternalEvent*)(xtest_evlist+i)->event, NULL);
d682 16
@


1.5
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a64 4
/* Used to store if a device is an XTest Virtual device */
static int XTestDevicePrivateKeyIndex;
DevPrivateKey XTestDevicePrivateKey = &XTestDevicePrivateKeyIndex;

d125 1
a125 1
    return(client->noClientException);
d152 1
a152 1
            return (rc == BadValue) ? BadCursor : rc;
d163 1
a163 1
    return(client->noClientException);
d357 2
a358 1
        /* see mbuf.c:QueueDisplayRequest for code similar to this */
d456 1
a456 1
    return client->noClientException;
d468 1
a468 1
        return(BadValue);
d474 1
a474 1
    return(client->noClientException);
d636 1
a636 1
    char *xtestname = xcalloc(len + 7, 1 );
d644 2
a645 2
        dixSetPrivate(&((*ptr)->devPrivates), XTestDevicePrivateKey, (void *)(intptr_t)master_ptr->id);
        dixSetPrivate(&((*keybd)->devPrivates), XTestDevicePrivateKey, (void *)(intptr_t)master_keybd->id);
d659 1
a659 1
    xfree( xtestname );
a672 4
    int is_XTest = FALSE;
    int mid;
    void *tmp; /* shut up, gcc! */

d674 1
a674 4
        return is_XTest;

    tmp = dixLookupPrivate(&dev->devPrivates, XTestDevicePrivateKey);
    mid = (intptr_t)tmp;
d678 2
a679 3
    if ((!master && mid) ||
        (master && mid == master->id))
        is_XTest = TRUE;
d681 1
a681 1
    return is_XTest;
@


1.4
log
@Add a configure test for newer proto headers and use it to enable
building xserver 1.6 with those headers. ok oga@@.
@
text
@a33 1
#define NEED_EVENTS
d35 1
d46 2
a47 1
#ifdef HAVE_X11_EXTENSIONS_XTESTPROTO_H
a48 5
#else
#define _XTEST_SERVER_
#include <X11/extensions/XTest.h>
#include <X11/extensions/xteststr.h>
#endif
d51 4
d59 21
a79 1
extern int DeviceMotionNotify;
d108 2
d113 1
a113 2
ProcXTestGetVersion(client)
    ClientPtr client;
d133 1
a133 2
ProcXTestCompareCursor(client)
    ClientPtr client;
d171 1
a171 2
ProcXTestFakeInput(client)
    ClientPtr client;
a182 1
    EventListPtr events;
d187 1
d215 6
d223 6
d230 6
d238 5
d270 1
a270 1
        if (nev == 1 && type == XI_DeviceMotionNotify && !dev->valuator)
d345 1
a345 2
        if (dev->u.lastSlave)
            dev = dev->u.lastSlave;
d382 5
a386 2
            if (ev->u.u.detail < dev->key->curKeySyms.minKeyCode ||
                    ev->u.u.detail > dev->key->curKeySyms.maxKeyCode)
d391 2
d395 3
d424 3
a426 6
            if (!extension)
            {
                dev = PickPointer(client);
                if (dev->u.lastSlave)
                    dev = dev->u.lastSlave;
            }
a436 2
    OsBlockSignals();
    GetEventList(&events);
d439 1
a439 1
            nevents = GetPointerEvents(events, dev, type, 0, flags,
d444 1
a444 1
            nevents = GetPointerEvents(events, dev, type, ev->u.u.detail,
d450 1
a450 1
            nevents = GetKeyboardEvents(events, dev, type, ev->u.u.detail);
d455 1
a455 2
        mieqEnqueue(dev, (events+i)->event);
    OsReleaseSignals();
d457 2
d463 1
a463 2
ProcXTestGrabControl(client)
    ClientPtr client;
d481 1
a481 2
ProcXTestDispatch (client)
    ClientPtr	client;
d500 1
a500 2
SProcXTestGetVersion(client)
    ClientPtr	client;
d512 1
a512 2
SProcXTestCompareCursor(client)
    ClientPtr	client;
d525 1
a525 3
XTestSwapFakeInput(client, req)
    ClientPtr	client;
    xReq *req;
d549 1
a549 2
SProcXTestFakeInput(client)
    ClientPtr	client;
d562 1
a562 2
SProcXTestGrabControl(client)
    ClientPtr	client;
d573 1
a573 2
SProcXTestDispatch (client)
    ClientPtr	client;
d590 123
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d46 3
d52 1
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d3 1
a3 1
Copyright 1992, 1998  The Open Group
d5 21
a25 21
Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.
d27 1
a27 1
*/
d45 1
a48 1
#ifdef XINPUT
a50 2
#define EXTENSION_EVENT_BASE	64
#endif /* XINPUT */
a53 1
#ifdef XINPUT
d55 1
a55 1
#endif /* XINPUT */
a61 3
static void XTestResetProc(
    ExtensionEntry * /* extEntry */
);
d63 3
a65 3
    ClientPtr /* client */,
    xReq * /* req */
);
d82 2
a83 9
		 ProcXTestDispatch, SProcXTestDispatch,
		 XTestResetProc, StandardMinorOpcode);
}

/*ARGSUSED*/
static void
XTestResetProc (extEntry)
ExtensionEntry	*extEntry;
{
d88 1
a88 1
    register ClientPtr client;
d91 1
a91 1
    register int n;
d100 2
a101 2
    	swaps(&rep.sequenceNumber, n);
	swaps(&rep.minorVersion, n);
d109 1
a109 1
    register ClientPtr client;
d115 2
a116 1
    register int n, rc;
d123 1
a123 1
	pCursor = NullCursor;
d125 1
a125 1
	pCursor = GetSpriteCursor();
d127 7
a133 7
	rc = dixLookupResource((pointer *)&pCursor, stuff->cursor, RT_CURSOR,
			       client, DixReadAccess);
	if (rc != Success) 
	{
	    client->errorValue = stuff->cursor;
	    return (rc == BadValue) ? BadCursor : rc;
	}
d140 1
a140 1
    	swaps(&rep.sequenceNumber, n);
d148 1
a148 1
    register ClientPtr client;
a154 1
#ifdef XINPUT
d157 8
a164 3
    int base;
    int *values;
#endif /* XINPUT */
d168 1
a168 1
	return BadLength;
d173 1
a173 1
#ifdef XINPUT
d176 96
a271 45
	type -= DeviceValuator;
	switch (type) {
	case XI_DeviceKeyPress:
	case XI_DeviceKeyRelease:
	case XI_DeviceButtonPress:
	case XI_DeviceButtonRelease:
	case XI_DeviceMotionNotify:
	case XI_ProximityIn:
	case XI_ProximityOut:
	    break;
	default:
	    client->errorValue = ev->u.u.type;
	    return BadValue;
	}
	if (nev == 1 && type == XI_DeviceMotionNotify)
	    return BadLength;
	if (type == XI_DeviceMotionNotify)
	    base = ((deviceValuator *)(ev+1))->first_valuator;
	else
	    base = 0;
	for (n = 1; n < nev; n++)
	{
	    dv = (deviceValuator *)(ev + n);
	    if (dv->type != DeviceValuator)
	    {
		client->errorValue = dv->type;
		return BadValue;
	    }
	    if (dv->first_valuator != base)
	    {
		client->errorValue = dv->first_valuator;
		return BadValue;
	    }
	    if (!dv->num_valuators || dv->num_valuators > 6)
	    {
		client->errorValue = dv->num_valuators;
		return BadValue;
	    }
	    base += dv->num_valuators;
	}
	type = type - XI_DeviceKeyPress + KeyPress;
	extension = TRUE;
    }
    else
#endif /* XINPUT */
d273 28
a300 14
	if (nev != 1)
	    return BadLength;
	switch (type)
	{
	case KeyPress:
	case KeyRelease:
	case MotionNotify:
	case ButtonPress:
	case ButtonRelease:
	    break;
	default:
	    client->errorValue = ev->u.u.type;
	    return BadValue;
	}
d302 2
d306 2
a307 2
	TimeStamp activateTime;
	CARD32 ms;
d309 22
a330 22
	activateTime = currentTime;
	ms = activateTime.milliseconds + ev->u.keyButtonPointer.time;
	if (ms < activateTime.milliseconds)
	    activateTime.months++;
	activateTime.milliseconds = ms;
	ev->u.keyButtonPointer.time = 0;

	/* see mbuf.c:QueueDisplayRequest for code similar to this */

	if (!ClientSleepUntil(client, &activateTime, NULL, NULL))
	{
	    return BadAlloc;
	}
	/* swap the request back so we can simply re-execute it */
	if (client->swapped)
	{
    	    (void) XTestSwapFakeInput(client, (xReq *)stuff);
	    swaps(&stuff->length, n);
	}
	ResetCurrentRequest (client);
	client->sequence--;
	return Success;
d332 2
a333 2
#ifdef XINPUT
    if (extension)
d335 48
a382 22
	rc = dixLookupDevice(&dev, stuff->deviceid & 0177, client,
			     DixWriteAccess);
	if (rc != Success)
	{
	    client->errorValue = stuff->deviceid & 0177;
	    return rc;
	}
	if (nev > 1)
	{
	    dv = (deviceValuator *)(ev + 1);
	    if (!dev->valuator || dv->first_valuator >= dev->valuator->numAxes)
	    {
		client->errorValue = dv->first_valuator;
		return BadValue;
	    }
	    if (dv->first_valuator + dv->num_valuators >
		dev->valuator->numAxes)
	    {
		client->errorValue = dv->num_valuators;
		return BadValue;
	    }
	}
d384 2
a385 105
#endif /* XINPUT */
    switch (type)
    {
    case KeyPress:
    case KeyRelease:
#ifdef XINPUT
	if (!extension)
#endif /* XINPUT */
	    dev = inputInfo.keyboard;
	if (ev->u.u.detail < dev->key->curKeySyms.minKeyCode ||
	    ev->u.u.detail > dev->key->curKeySyms.maxKeyCode)
	{
	    client->errorValue = ev->u.u.detail;
	    return BadValue;
	}
	break;
    case MotionNotify:
#ifdef XINPUT
	if (extension)
	{
	    if (ev->u.u.detail != xFalse && ev->u.u.detail != xTrue)
	    {
		client->errorValue = ev->u.u.detail;
		return BadValue;
	    }
	    if (ev->u.u.detail == xTrue && dev->valuator->mode == Absolute)
	    {
		values = dev->valuator->axisVal + dv->first_valuator;
		for (n = 1; n < nev; n++)
		{
		    dv = (deviceValuator *)(ev + n);
		    switch (dv->num_valuators)
		    {
		    case 6:
			dv->valuator5 += values[5];
		    case 5:
			dv->valuator4 += values[4];
		    case 4:
			dv->valuator3 += values[3];
		    case 3:
			dv->valuator2 += values[2];
		    case 2:
			dv->valuator1 += values[1];
		    case 1:
			dv->valuator0 += values[0];
		    }
		    values += 6;
		}
	    }
	    break;
	}
#endif /* XINPUT */
	dev = inputInfo.pointer;
	if (ev->u.keyButtonPointer.root == None)
	    root = GetCurrentRootWindow();
	else
	{
	    rc = dixLookupWindow(&root, ev->u.keyButtonPointer.root, client,
				 DixGetAttrAccess);
	    if (rc != Success)
		return rc;
	    if (root->parent)
	    {
		client->errorValue = ev->u.keyButtonPointer.root;
		return BadValue;
	    }
	}
	if (ev->u.u.detail == xTrue)
	{
	    int x, y;
	    GetSpritePosition(&x, &y);
	    ev->u.keyButtonPointer.rootX += x;
	    ev->u.keyButtonPointer.rootY += y;
	}
	else if (ev->u.u.detail != xFalse)
	{
	    client->errorValue = ev->u.u.detail;
	    return BadValue;
	}

#ifdef PANORAMIX
	if (!noPanoramiXExtension) {
	    ScreenPtr pScreen = root->drawable.pScreen;
	    BoxRec    box;
	    int       i;
	    int       x = ev->u.keyButtonPointer.rootX + panoramiXdataPtr[0].x;
	    int       y = ev->u.keyButtonPointer.rootY + panoramiXdataPtr[0].y;
	    if (!POINT_IN_REGION(pScreen, &XineramaScreenRegions[pScreen->myNum],
				 x, y, &box)) {
		FOR_NSCREENS(i) {
		    if (i == pScreen->myNum) continue;
		    if (POINT_IN_REGION(pScreen,
					&XineramaScreenRegions[i],
					x, y, &box)) {
			root = WindowTable[i];
			x   -= panoramiXdataPtr[i].x;
			y   -= panoramiXdataPtr[i].y;
			ev->u.keyButtonPointer.rootX = x;
			ev->u.keyButtonPointer.rootY = y;
			break;
		    }
		}
	    }
	}
#endif
d387 22
a408 8
	if (ev->u.keyButtonPointer.rootX < 0)
	    ev->u.keyButtonPointer.rootX = 0;
	else if (ev->u.keyButtonPointer.rootX >= root->drawable.width)
	    ev->u.keyButtonPointer.rootX = root->drawable.width - 1;
	if (ev->u.keyButtonPointer.rootY < 0)
	    ev->u.keyButtonPointer.rootY = 0;
	else if (ev->u.keyButtonPointer.rootY >= root->drawable.height)
	    ev->u.keyButtonPointer.rootY = root->drawable.height - 1;
a409 38
#ifdef PANORAMIX
	if ((!noPanoramiXExtension
	     && root->drawable.pScreen->myNum != XineramaGetCursorScreen())
	    || (noPanoramiXExtension && root != GetCurrentRootWindow()))

#else
	if (root != GetCurrentRootWindow())
#endif
	{
	    NewCurrentScreen(root->drawable.pScreen,
			     ev->u.keyButtonPointer.rootX,
			     ev->u.keyButtonPointer.rootY);
	    return client->noClientException;
	}
	(*root->drawable.pScreen->SetCursorPosition)
	    (root->drawable.pScreen,
	     ev->u.keyButtonPointer.rootX,
	     ev->u.keyButtonPointer.rootY, FALSE);
        dev->valuator->lastx = ev->u.keyButtonPointer.rootX;
        dev->valuator->lasty = ev->u.keyButtonPointer.rootY;
	break;
    case ButtonPress:
    case ButtonRelease:
#ifdef XINPUT
	if (!extension)
#endif /* XINPUT */
	    dev = inputInfo.pointer;
	if (!ev->u.u.detail || ev->u.u.detail > dev->button->numButtons)
	{
	    client->errorValue = ev->u.u.detail;
	    return BadValue;
	}
	break;
    }
    if (screenIsSaved == SCREEN_SAVER_ON)
	dixSaveScreens(serverClient, SCREEN_SAVER_OFF, ScreenSaverReset);
    ev->u.keyButtonPointer.time = currentTime.milliseconds;
    (*dev->public.processInputProc)(ev, dev, nev);
d415 1
a415 1
    register ClientPtr client;
d422 1
a422 1
	client->errorValue = stuff->impervious;
d426 1
a426 1
	MakeClientGrabImpervious(client);
d428 1
a428 1
	MakeClientGrabPervious(client);
d434 1
a434 1
    register ClientPtr	client;
d439 10
a448 10
    case X_XTestGetVersion:
	return ProcXTestGetVersion(client);
    case X_XTestCompareCursor:
	return ProcXTestCompareCursor(client);
    case X_XTestFakeInput:
	return ProcXTestFakeInput(client);
    case X_XTestGrabControl:
	return ProcXTestGrabControl(client);
    default:
	return BadRequest;
d454 1
a454 1
    register ClientPtr	client;
d456 1
a456 1
    register int n;
d467 1
a467 1
    register ClientPtr	client;
d469 1
a469 1
    register int n;
d481 1
a481 1
    register ClientPtr	client;
d484 2
a485 2
    register int nev;
    register xEvent *ev;
d492 9
a500 9
    	/* Swap event */
    	proc = EventSwapVector[ev->u.u.type & 0177];
	/* no swapping proc; invalid event type? */
    	if (!proc ||  proc ==  NotImplemented) {
	    client->errorValue = ev->u.u.type;
	    return BadValue;
	}
    	(*proc)(ev, &sev);
	*ev = sev;
d507 1
a507 1
    register ClientPtr	client;
d509 1
a509 1
    register int n;
d515 1
a515 1
	return n;
d521 1
a521 1
    register ClientPtr	client;
d523 1
a523 1
    register int n;
d533 1
a533 1
    register ClientPtr	client;
d538 10
a547 10
    case X_XTestGetVersion:
	return SProcXTestGetVersion(client);
    case X_XTestCompareCursor:
	return SProcXTestCompareCursor(client);
    case X_XTestFakeInput:
	return SProcXTestFakeInput(client);
    case X_XTestGrabControl:
	return SProcXTestGrabControl(client);
    default:
	return BadRequest;
@


1.1
log
@Initial revision
@
text
@a51 1
#include "extinit.h"		/* LookupDeviceIntRec */
a55 4
#if 0
static unsigned char XTestReqCode;
#endif

d87 3
a89 12
#if 0
    ExtensionEntry *extEntry;

    if ((extEntry = AddExtension(XTestExtensionName, 0, 0,
				 ProcXTestDispatch, SProcXTestDispatch,
				 XTestResetProc, StandardMinorOpcode)) != 0)
	XTestReqCode = (unsigned char)extEntry->base;
#else
    (void) AddExtension(XTestExtensionName, 0, 0,
			ProcXTestDispatch, SProcXTestDispatch,
			XTestResetProc, StandardMinorOpcode);
#endif
d128 1
a128 1
    register int n;
d131 3
a133 3
    pWin = (WindowPtr)LookupWindow(stuff->window, client);
    if (!pWin)
        return(BadWindow);
d139 3
a141 2
	pCursor = (CursorPtr)LookupIDByType(stuff->cursor, RT_CURSOR);
	if (!pCursor) 
d144 1
a144 1
	    return (BadCursor);
d163 1
a163 2
    int nev;
    int	n;
a166 1
    int type;
d276 3
a278 2
	dev = LookupDeviceIntRec(stuff->deviceid & 0177);
	if (!dev)
d281 1
a281 1
	    return BadValue;
d307 1
a307 1
	    dev = (DeviceIntPtr)LookupKeyboardDevice();
d351 1
a351 1
	dev = (DeviceIntPtr)LookupPointerDevice();
d356 4
a359 3
	    root = LookupWindow(ev->u.keyButtonPointer.root, client);
	    if (!root)
		return BadWindow;
d432 2
d440 1
a440 1
	    dev = (DeviceIntPtr)LookupPointerDevice();
d449 1
a449 1
	SaveScreens(SCREEN_SAVER_OFF, ScreenSaverReset);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d142 1
a142 1
    register int n, rc;
d145 3
a147 3
    rc = dixLookupWindow(&pWin, stuff->window, client, DixUnknownAccess);
    if (rc != Success)
        return rc;
d176 2
a177 1
    int nev, n, type, rc;
d181 1
d370 3
a372 4
	    rc = dixLookupWindow(&root, ev->u.keyButtonPointer.root, client,
				 DixUnknownAccess);
	    if (rc != Success)
		return rc;
a444 2
        dev->valuator->lastx = ev->u.keyButtonPointer.rootX;
        dev->valuator->lasty = ev->u.keyButtonPointer.rootY;
@

