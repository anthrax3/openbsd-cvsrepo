head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.7.0.12
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.10
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.8
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.05.29.12.02.40;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	s0SI41sEunLdyFfd;

1.7
date	2013.06.07.17.28.55;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.38;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.21;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.21;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.05.16;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * Copyright Â© 2002 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "misc.h"
#include "scrnintstr.h"
#include "os.h"
#include "regionstr.h"
#include "validate.h"
#include "windowstr.h"
#include "input.h"
#include "resource.h"
#include "colormapst.h"
#include "cursorstr.h"
#include "dixstruct.h"
#include "gcstruct.h"
#include "servermd.h"
#include "picturestr.h"

static char **filterNames;
static int nfilterNames;

/*
 * standard but not required filters don't have constant indices
 */

int
PictureGetFilterId(const char *filter, int len, Bool makeit)
{
    int i;
    char *name;
    char **names;

    if (len < 0)
        len = strlen(filter);
    for (i = 0; i < nfilterNames; i++)
        if (!CompareISOLatin1Lowered((const unsigned char *) filterNames[i], -1,
                                     (const unsigned char *) filter, len))
            return i;
    if (!makeit)
        return -1;
    name = malloc(len + 1);
    if (!name)
        return -1;
    memcpy(name, filter, len);
    name[len] = '\0';
    if (filterNames)
        names = reallocarray(filterNames, nfilterNames + 1, sizeof(char *));
    else
        names = malloc(sizeof(char *));
    if (!names) {
        free(name);
        return -1;
    }
    filterNames = names;
    i = nfilterNames++;
    filterNames[i] = name;
    return i;
}

static Bool
PictureSetDefaultIds(void)
{
    /* careful here -- this list must match the #define values */

    if (PictureGetFilterId(FilterNearest, -1, TRUE) != PictFilterNearest)
        return FALSE;
    if (PictureGetFilterId(FilterBilinear, -1, TRUE) != PictFilterBilinear)
        return FALSE;

    if (PictureGetFilterId(FilterFast, -1, TRUE) != PictFilterFast)
        return FALSE;
    if (PictureGetFilterId(FilterGood, -1, TRUE) != PictFilterGood)
        return FALSE;
    if (PictureGetFilterId(FilterBest, -1, TRUE) != PictFilterBest)
        return FALSE;

    if (PictureGetFilterId(FilterConvolution, -1, TRUE) !=
        PictFilterConvolution)
        return FALSE;
    return TRUE;
}

char *
PictureGetFilterName(int id)
{
    if (0 <= id && id < nfilterNames)
        return filterNames[id];
    else
        return 0;
}

static void
PictureFreeFilterIds(void)
{
    int i;

    for (i = 0; i < nfilterNames; i++)
        free(filterNames[i]);
    free(filterNames);
    nfilterNames = 0;
    filterNames = 0;
}

int
PictureAddFilter(ScreenPtr pScreen,
                 const char *filter,
                 PictFilterValidateParamsProcPtr ValidateParams,
                 int width, int height)
{
    PictureScreenPtr ps = GetPictureScreen(pScreen);
    int id = PictureGetFilterId(filter, -1, TRUE);
    int i;
    PictFilterPtr filters;

    if (id < 0)
        return -1;
    /*
     * It's an error to attempt to reregister a filter
     */
    for (i = 0; i < ps->nfilters; i++)
        if (ps->filters[i].id == id)
            return -1;
    if (ps->filters)
        filters =
            reallocarray(ps->filters, ps->nfilters + 1, sizeof(PictFilterRec));
    else
        filters = malloc(sizeof(PictFilterRec));
    if (!filters)
        return -1;
    ps->filters = filters;
    i = ps->nfilters++;
    ps->filters[i].name = PictureGetFilterName(id);
    ps->filters[i].id = id;
    ps->filters[i].ValidateParams = ValidateParams;
    ps->filters[i].width = width;
    ps->filters[i].height = height;
    return id;
}

Bool
PictureSetFilterAlias(ScreenPtr pScreen, const char *filter, const char *alias)
{
    PictureScreenPtr ps = GetPictureScreen(pScreen);
    int filter_id = PictureGetFilterId(filter, -1, FALSE);
    int alias_id = PictureGetFilterId(alias, -1, TRUE);
    int i;

    if (filter_id < 0 || alias_id < 0)
        return FALSE;
    for (i = 0; i < ps->nfilterAliases; i++)
        if (ps->filterAliases[i].alias_id == alias_id)
            break;
    if (i == ps->nfilterAliases) {
        PictFilterAliasPtr aliases;

        if (ps->filterAliases)
            aliases = reallocarray(ps->filterAliases,
                                   ps->nfilterAliases + 1,
                                   sizeof(PictFilterAliasRec));
        else
            aliases = malloc(sizeof(PictFilterAliasRec));
        if (!aliases)
            return FALSE;
        ps->filterAliases = aliases;
        ps->filterAliases[i].alias = PictureGetFilterName(alias_id);
        ps->filterAliases[i].alias_id = alias_id;
        ps->nfilterAliases++;
    }
    ps->filterAliases[i].filter_id = filter_id;
    return TRUE;
}

PictFilterPtr
PictureFindFilter(ScreenPtr pScreen, char *name, int len)
{
    PictureScreenPtr ps = GetPictureScreen(pScreen);
    int id = PictureGetFilterId(name, len, FALSE);
    int i;

    if (id < 0)
        return 0;
    /* Check for an alias, allow them to recurse */
    for (i = 0; i < ps->nfilterAliases; i++)
        if (ps->filterAliases[i].alias_id == id) {
            id = ps->filterAliases[i].filter_id;
            i = 0;
        }
    /* find the filter */
    for (i = 0; i < ps->nfilters; i++)
        if (ps->filters[i].id == id)
            return &ps->filters[i];
    return 0;
}

static Bool
convolutionFilterValidateParams(ScreenPtr pScreen,
                                int filter,
                                xFixed * params,
                                int nparams, int *width, int *height)
{
    int w, h;

    if (nparams < 3)
        return FALSE;

    if (xFixedFrac(params[0]) || xFixedFrac(params[1]))
        return FALSE;

    w = xFixedToInt(params[0]);
    h = xFixedToInt(params[1]);

    nparams -= 2;
    if (w * h > nparams)
        return FALSE;

    *width = w;
    *height = h;
    return TRUE;
}

Bool
PictureSetDefaultFilters(ScreenPtr pScreen)
{
    if (!filterNames)
        if (!PictureSetDefaultIds())
            return FALSE;
    if (PictureAddFilter(pScreen, FilterNearest, 0, 1, 1) < 0)
        return FALSE;
    if (PictureAddFilter(pScreen, FilterBilinear, 0, 2, 2) < 0)
        return FALSE;

    if (!PictureSetFilterAlias(pScreen, FilterNearest, FilterFast))
        return FALSE;
    if (!PictureSetFilterAlias(pScreen, FilterBilinear, FilterGood))
        return FALSE;
    if (!PictureSetFilterAlias(pScreen, FilterBilinear, FilterBest))
        return FALSE;

    if (PictureAddFilter
        (pScreen, FilterConvolution, convolutionFilterValidateParams, 0, 0) < 0)
        return FALSE;

    return TRUE;
}

void
PictureResetFilters(ScreenPtr pScreen)
{
    PictureScreenPtr ps = GetPictureScreen(pScreen);

    free(ps->filters);
    free(ps->filterAliases);

    /* Free the filters when the last screen is closed */
    if (pScreen->myNum == 0)
        PictureFreeFilterIds();
}

int
SetPictureFilter(PicturePtr pPicture, char *name, int len, xFixed * params,
                 int nparams)
{
    PictFilterPtr pFilter;
    ScreenPtr pScreen;

    if (pPicture->pDrawable != NULL)
        pScreen = pPicture->pDrawable->pScreen;
    else
        pScreen = screenInfo.screens[0];

    pFilter = PictureFindFilter(pScreen, name, len);

    if (!pFilter)
        return BadName;

    if (pPicture->pDrawable == NULL) {
        int s;

        /* For source pictures, the picture isn't tied to a screen.  So, ensure
         * that all screens can handle a filter we set for the picture.
         */
        for (s = 1; s < screenInfo.numScreens; s++) {
            PictFilterPtr pScreenFilter;

            pScreenFilter = PictureFindFilter(screenInfo.screens[s], name, len);
            if (!pScreenFilter || pScreenFilter->id != pFilter->id)
                return BadMatch;
        }
    }
    return SetPicturePictFilter(pPicture, pFilter, params, nparams);
}

int
SetPicturePictFilter(PicturePtr pPicture, PictFilterPtr pFilter,
                     xFixed * params, int nparams)
{
    ScreenPtr pScreen;
    int i;

    if (pPicture->pDrawable)
        pScreen = pPicture->pDrawable->pScreen;
    else
        pScreen = screenInfo.screens[0];

    if (pFilter->ValidateParams) {
        int width, height;

        if (!(*pFilter->ValidateParams)
            (pScreen, pFilter->id, params, nparams, &width, &height))
            return BadMatch;
    }
    else if (nparams)
        return BadMatch;

    if (nparams != pPicture->filter_nparams) {
        xFixed *new_params = xallocarray(nparams, sizeof(xFixed));

        if (!new_params && nparams)
            return BadAlloc;
        free(pPicture->filter_params);
        pPicture->filter_params = new_params;
        pPicture->filter_nparams = nparams;
    }
    for (i = 0; i < nparams; i++)
        pPicture->filter_params[i] = params[i];
    pPicture->filter = pFilter->id;

    if (pPicture->pDrawable) {
        PictureScreenPtr ps = GetPictureScreen(pScreen);
        int result;

        result = (*ps->ChangePictureFilter) (pPicture, pPicture->filter,
                                             params, nparams);
        return result;
    }
    return Success;
}
@


1.7
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d70 1
a70 1
        names = realloc(filterNames, (nfilterNames + 1) * sizeof(char *));
d148 1
a148 1
            realloc(ps->filters, (ps->nfilters + 1) * sizeof(PictFilterRec));
d180 3
a182 3
            aliases = realloc(ps->filterAliases,
                              (ps->nfilterAliases + 1) *
                              sizeof(PictFilterAliasRec));
d339 1
a339 1
        xFixed *new_params = malloc(nparams * sizeof(xFixed));
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d276 4
a279 1
    PictureFreeFilterIds();
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d43 1
a43 1
static int  nfilterNames;
d50 1
a50 1
PictureGetFilterId (char *filter, int len, Bool makeit)
d52 3
a54 3
    int	    i;
    char    *name;
    char    **names;
d57 1
a57 1
	len = strlen (filter);
d59 3
a61 2
	if (!CompareISOLatin1Lowered ((unsigned char *) filterNames[i], -1, (unsigned char *) filter, len))
	    return i;
d63 1
a63 1
	return -1;
d66 2
a67 2
	return -1;
    memcpy (name, filter, len);
d70 1
a70 1
	names = realloc(filterNames, (nfilterNames + 1) * sizeof (char *));
d72 4
a75 5
	names = malloc(sizeof (char *));
    if (!names)
    {
	free(name);
	return -1;
d84 1
a84 1
PictureSetDefaultIds (void)
d88 11
a98 11
    if (PictureGetFilterId (FilterNearest, -1, TRUE) != PictFilterNearest)
	return FALSE;
    if (PictureGetFilterId (FilterBilinear, -1, TRUE) != PictFilterBilinear)
	return FALSE;

    if (PictureGetFilterId (FilterFast, -1, TRUE) != PictFilterFast)
	return FALSE;
    if (PictureGetFilterId (FilterGood, -1, TRUE) != PictFilterGood)
	return FALSE;
    if (PictureGetFilterId (FilterBest, -1, TRUE) != PictFilterBest)
	return FALSE;
d100 3
a102 2
    if (PictureGetFilterId (FilterConvolution, -1, TRUE) != PictFilterConvolution)
	return FALSE;
d107 1
a107 1
PictureGetFilterName (int id)
d110 1
a110 1
	return filterNames[id];
d112 1
a112 1
	return 0;
d116 1
a116 1
PictureFreeFilterIds (void)
d118 1
a118 1
    int	    i;
d121 1
a121 1
	free(filterNames[i]);
d128 9
a136 10
PictureAddFilter (ScreenPtr			    pScreen,
		  char				    *filter,
		  PictFilterValidateParamsProcPtr   ValidateParams,
		  int				    width,
		  int				    height)
{
    PictureScreenPtr    ps = GetPictureScreen(pScreen);
    int			id = PictureGetFilterId (filter, -1,  TRUE);
    int			i;
    PictFilterPtr	filters;
d139 1
a139 1
	return -1;
d144 2
a145 2
	if (ps->filters[i].id == id)
	    return -1;
d147 2
a148 1
	filters = realloc(ps->filters, (ps->nfilters + 1) * sizeof (PictFilterRec));
d150 1
a150 1
	filters = malloc(sizeof (PictFilterRec));
d152 1
a152 1
	return -1;
d155 1
a155 1
    ps->filters[i].name = PictureGetFilterName (id);
d164 1
a164 1
PictureSetFilterAlias (ScreenPtr pScreen, char *filter, char *alias)
d166 4
a169 4
    PictureScreenPtr    ps = GetPictureScreen(pScreen);
    int			filter_id = PictureGetFilterId (filter, -1, FALSE);
    int			alias_id = PictureGetFilterId (alias, -1, TRUE);
    int			i;
d172 1
a172 1
	return FALSE;
d174 17
a190 18
	if (ps->filterAliases[i].alias_id == alias_id)
	    break;
    if (i == ps->nfilterAliases)
    {
	PictFilterAliasPtr  aliases;

	if (ps->filterAliases)
	    aliases = realloc(ps->filterAliases,
				(ps->nfilterAliases + 1) *
				sizeof (PictFilterAliasRec));
	else
	    aliases = malloc(sizeof (PictFilterAliasRec));
	if (!aliases)
	    return FALSE;
	ps->filterAliases = aliases;
	ps->filterAliases[i].alias = PictureGetFilterName (alias_id);
	ps->filterAliases[i].alias_id = alias_id;
	ps->nfilterAliases++;
d197 1
a197 1
PictureFindFilter (ScreenPtr pScreen, char *name, int len)
d199 3
a201 3
    PictureScreenPtr    ps = GetPictureScreen(pScreen);
    int			id = PictureGetFilterId (name, len, FALSE);
    int			i;
d204 1
a204 1
	return 0;
d207 4
a210 5
	if (ps->filterAliases[i].alias_id == id)
	{
	    id = ps->filterAliases[i].filter_id;
	    i = 0;
	}
d213 2
a214 2
	if (ps->filters[i].id == id)
	    return &ps->filters[i];
d219 4
a222 6
convolutionFilterValidateParams (ScreenPtr pScreen,
                                 int	   filter,
                                 xFixed	   *params,
                                 int	   nparams,
				 int       *width,
				 int	   *height)
d224 2
a225 1
    int	w, h;
d229 1
a229 1
    if (xFixedFrac (params[0]) || xFixedFrac (params[1]))
d232 2
a233 2
    w = xFixedToInt (params[0]);
    h = xFixedToInt (params[1]);
a243 1

d245 1
a245 1
PictureSetDefaultFilters (ScreenPtr pScreen)
d248 13
a260 13
	if (!PictureSetDefaultIds ())
	    return FALSE;
    if (PictureAddFilter (pScreen, FilterNearest, 0, 1, 1) < 0)
	return FALSE;
    if (PictureAddFilter (pScreen, FilterBilinear, 0, 2, 2) < 0)
	return FALSE;

    if (!PictureSetFilterAlias (pScreen, FilterNearest, FilterFast))
	return FALSE;
    if (!PictureSetFilterAlias (pScreen, FilterBilinear, FilterGood))
	return FALSE;
    if (!PictureSetFilterAlias (pScreen, FilterBilinear, FilterBest))
	return FALSE;
d262 2
a263 1
    if (PictureAddFilter (pScreen, FilterConvolution, convolutionFilterValidateParams, 0, 0) < 0)
d270 1
a270 1
PictureResetFilters (ScreenPtr pScreen)
d272 1
a272 1
    PictureScreenPtr    ps = GetPictureScreen(pScreen);
d276 1
a276 1
    PictureFreeFilterIds ();
d280 2
a281 1
SetPictureFilter (PicturePtr pPicture, char *name, int len, xFixed *params, int nparams)
d283 2
a284 2
    PictFilterPtr	pFilter;
    ScreenPtr		pScreen;
d287 1
a287 1
	pScreen = pPicture->pDrawable->pScreen;
d289 1
a289 1
	pScreen = screenInfo.screens[0];
d291 1
a291 1
    pFilter = PictureFindFilter (pScreen, name, len);
d294 4
a297 1
	return BadName;
d299 10
a308 14
    if (pPicture->pDrawable == NULL)
    {
	int s;
	/* For source pictures, the picture isn't tied to a screen.  So, ensure
	 * that all screens can handle a filter we set for the picture.
	 */
	for (s = 1; s < screenInfo.numScreens; s++)
	{
	    PictFilterPtr   pScreenFilter;
	    pScreenFilter = PictureFindFilter (screenInfo.screens[s],
					       name, len);
	    if (!pScreenFilter || pScreenFilter->id != pFilter->id)
		return BadMatch;
	}
d310 1
a310 1
    return SetPicturePictFilter (pPicture, pFilter, params, nparams);
d314 2
a315 2
SetPicturePictFilter (PicturePtr pPicture, PictFilterPtr pFilter,
		      xFixed *params, int nparams)
d317 2
a318 2
    ScreenPtr	pScreen;
    int		i;
d321 1
a321 1
	pScreen = pPicture->pDrawable->pScreen;
d323 4
a326 1
	pScreen = screenInfo.screens[0];
d328 3
a330 5
    if (pFilter->ValidateParams)
    {
	int width, height;
	if (!(*pFilter->ValidateParams) (pScreen, pFilter->id, params, nparams, &width, &height))
	    return BadMatch;
d333 1
a333 1
	return BadMatch;
d335 8
a342 8
    if (nparams != pPicture->filter_nparams)
    {
	xFixed *new_params = malloc(nparams * sizeof (xFixed));
	if (!new_params && nparams)
	    return BadAlloc;
	free(pPicture->filter_params);
	pPicture->filter_params = new_params;
	pPicture->filter_nparams = nparams;
d345 1
a345 1
	pPicture->filter_params[i] = params[i];
d348 7
a354 8
    if (pPicture->pDrawable)
    {
	PictureScreenPtr    ps = GetPictureScreen(pScreen);
	int		    result;

	result = (*ps->ChangePictureFilter) (pPicture, pPicture->filter,
					     params, nparams);
	return result;
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d63 1
a63 1
    name = xalloc (len + 1);
d69 1
a69 1
	names = xrealloc (filterNames, (nfilterNames + 1) * sizeof (char *));
d71 1
a71 1
	names = xalloc (sizeof (char *));
d74 1
a74 1
	xfree (name);
d120 2
a121 2
	xfree (filterNames[i]);
    xfree (filterNames);
d147 1
a147 1
	filters = xrealloc (ps->filters, (ps->nfilters + 1) * sizeof (PictFilterRec));
d149 1
a149 1
	filters = xalloc (sizeof (PictFilterRec));
d180 1
a180 1
	    aliases = xrealloc (ps->filterAliases,
d184 1
a184 1
	    aliases = xalloc (sizeof (PictFilterAliasRec));
d276 2
a277 2
    xfree (ps->filters);
    xfree (ps->filterAliases);
d338 1
a338 1
	xFixed *new_params = xalloc (nparams * sizeof (xFixed));
d341 1
a341 1
	xfree (pPicture->filter_params);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d126 1
a126 1
_X_EXPORT int
d162 1
a162 1
_X_EXPORT Bool
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d129 3
a131 1
		  PictFilterValidateParamsProcPtr   ValidateParams)
d157 2
d220 1
a220 1
convolutionFilterValidateParams (PicturePtr pPicture,
d223 3
a225 1
                                 int	   nparams)
d227 1
d234 3
d238 1
a238 1
    if ((xFixedToInt (params[0]) * xFixedToInt (params[1])) > nparams)
d241 2
d253 1
a253 1
    if (PictureAddFilter (pScreen, FilterNearest, 0) < 0)
d255 1
a255 1
    if (PictureAddFilter (pScreen, FilterBilinear, 0) < 0)
d265 1
a265 1
    if (PictureAddFilter (pScreen, FilterConvolution, convolutionFilterValidateParams) < 0)
d285 6
a290 2
    xFixed		*new_params;
    int			i, s, result;
d292 1
a292 1
    pFilter = PictureFindFilter (screenInfo.screens[0], name, len);
d294 6
a299 1
    if (pPicture->pDrawable == NULL) {
d303 6
a308 4
	for (s = 0; s < screenInfo.numScreens; s++) {
	    if (PictureFindFilter (screenInfo.screens[s], name, len)->id !=
		pFilter->id)
	    {
a309 1
	    }
d312 14
a326 2
    if (!pFilter)
	return BadName;
d329 2
a330 1
	if (!(*pFilter->ValidateParams) (pPicture, pFilter->id, params, nparams))
d338 1
a338 1
	new_params = xalloc (nparams * sizeof (xFixed));
d349 4
a352 3
    if (pPicture->pDrawable) {
	ScreenPtr pScreen = pPicture->pDrawable->pScreen;
	PictureScreenPtr ps = GetPictureScreen(pScreen);
@


1.1
log
@Initial revision
@
text
@a1 2
 * $Id$
 *
d304 1
a304 1
	if (!new_params)
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
@

