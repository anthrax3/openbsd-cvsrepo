head	1.8;
access;
symbols
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.08.09.18.59.55;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	6HLO5qdN5N4nPDjW;

1.7
date	2016.05.29.12.02.40;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	s0SI41sEunLdyFfd;

1.6
date	2015.09.16.19.10.26;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	Te1daavkBLskZ8gc;

1.5
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.21;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.21;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.05.15;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xserver 1.18.4

tested by krw@@ and dcoppa@@ ok dcoppa@@
@
text
@/*
 *
 * Copyright Â© 2000 SuSE, Inc.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of SuSE not be used in advertising or
 * publicity pertaining to distribution of the software without specific,
 * written prior permission.  SuSE makes no representations about the
 * suitability of this software for any purpose.  It is provided "as is"
 * without express or implied warranty.
 *
 * SuSE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL SuSE
 * BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Author:  Keith Packard, SuSE, Inc.
 */

#ifndef _PICTURE_H_
#define _PICTURE_H_

#include "privates.h"

#include <pixman.h>

typedef struct _DirectFormat *DirectFormatPtr;
typedef struct _PictFormat *PictFormatPtr;
typedef struct _Picture *PicturePtr;

/*
 * While the protocol is generous in format support, the
 * sample implementation allows only packed RGB and GBR
 * representations for data to simplify software rendering,
 */
#define PICT_FORMAT(bpp,type,a,r,g,b)	PIXMAN_FORMAT(bpp, type, a, r, g, b)

/*
 * gray/color formats use a visual index instead of argb
 */
#define PICT_VISFORMAT(bpp,type,vi)	(((bpp) << 24) |  \
					 ((type) << 16) | \
					 ((vi)))

#define PICT_FORMAT_BPP(f)	PIXMAN_FORMAT_BPP(f)
#define PICT_FORMAT_TYPE(f)	PIXMAN_FORMAT_TYPE(f)
#define PICT_FORMAT_A(f)	PIXMAN_FORMAT_A(f)
#define PICT_FORMAT_R(f)	PIXMAN_FORMAT_R(f)
#define PICT_FORMAT_G(f)	PIXMAN_FORMAT_G(f)
#define PICT_FORMAT_B(f)	PIXMAN_FORMAT_B(f)
#define PICT_FORMAT_RGB(f)	PIXMAN_FORMAT_RGB(f)
#define PICT_FORMAT_VIS(f)	PIXMAN_FORMAT_VIS(f)

#define PICT_TYPE_OTHER		PIXMAN_TYPE_OTHER
#define PICT_TYPE_A		PIXMAN_TYPE_A
#define PICT_TYPE_ARGB		PIXMAN_TYPE_ARGB
#define PICT_TYPE_ABGR		PIXMAN_TYPE_ABGR
#define PICT_TYPE_COLOR		PIXMAN_TYPE_COLOR
#define PICT_TYPE_GRAY		PIXMAN_TYPE_GRAY
#define PICT_TYPE_BGRA		PIXMAN_TYPE_BGRA

#define PICT_FORMAT_COLOR(f)	PIXMAN_FORMAT_COLOR(f)

/* 32bpp formats */
typedef enum _PictFormatShort {
    PICT_a2r10g10b10 = PIXMAN_a2r10g10b10,
    PICT_x2r10g10b10 = PIXMAN_x2r10g10b10,
    PICT_a2b10g10r10 = PIXMAN_a2b10g10r10,
    PICT_x2b10g10r10 = PIXMAN_x2b10g10r10,

    PICT_a8r8g8b8 = PIXMAN_a8r8g8b8,
    PICT_x8r8g8b8 = PIXMAN_x8r8g8b8,
    PICT_a8b8g8r8 = PIXMAN_a8b8g8r8,
    PICT_x8b8g8r8 = PIXMAN_x8b8g8r8,
    PICT_b8g8r8a8 = PIXMAN_b8g8r8a8,
    PICT_b8g8r8x8 = PIXMAN_b8g8r8x8,

/* 24bpp formats */
    PICT_r8g8b8 = PIXMAN_r8g8b8,
    PICT_b8g8r8 = PIXMAN_b8g8r8,

/* 16bpp formats */
    PICT_r5g6b5 = PIXMAN_r5g6b5,
    PICT_b5g6r5 = PIXMAN_b5g6r5,

    PICT_a1r5g5b5 = PIXMAN_a1r5g5b5,
    PICT_x1r5g5b5 = PIXMAN_x1r5g5b5,
    PICT_a1b5g5r5 = PIXMAN_a1b5g5r5,
    PICT_x1b5g5r5 = PIXMAN_x1b5g5r5,
    PICT_a4r4g4b4 = PIXMAN_a4r4g4b4,
    PICT_x4r4g4b4 = PIXMAN_x4r4g4b4,
    PICT_a4b4g4r4 = PIXMAN_a4b4g4r4,
    PICT_x4b4g4r4 = PIXMAN_x4b4g4r4,

/* 8bpp formats */
    PICT_a8 = PIXMAN_a8,
    PICT_r3g3b2 = PIXMAN_r3g3b2,
    PICT_b2g3r3 = PIXMAN_b2g3r3,
    PICT_a2r2g2b2 = PIXMAN_a2r2g2b2,
    PICT_a2b2g2r2 = PIXMAN_a2b2g2r2,

    PICT_c8 = PIXMAN_c8,
    PICT_g8 = PIXMAN_g8,

    PICT_x4a4 = PIXMAN_x4a4,

    PICT_x4c4 = PIXMAN_x4c4,
    PICT_x4g4 = PIXMAN_x4g4,

/* 4bpp formats */
    PICT_a4 = PIXMAN_a4,
    PICT_r1g2b1 = PIXMAN_r1g2b1,
    PICT_b1g2r1 = PIXMAN_b1g2r1,
    PICT_a1r1g1b1 = PIXMAN_a1r1g1b1,
    PICT_a1b1g1r1 = PIXMAN_a1b1g1r1,

    PICT_c4 = PIXMAN_c4,
    PICT_g4 = PIXMAN_g4,

/* 1bpp formats */
    PICT_a1 = PIXMAN_a1,

    PICT_g1 = PIXMAN_g1
} PictFormatShort;

/*
 * For dynamic indexed visuals (GrayScale and PseudoColor), these control the
 * selection of colors allocated for drawing to Pictures.  The default
 * policy depends on the size of the colormap:
 *
 * Size		Default Policy
 * ----------------------------
 *  < 64	PolicyMono
 *  < 256	PolicyGray
 *  256		PolicyColor (only on PseudoColor)
 *
 * The actual allocation code lives in miindex.c, and so is
 * austensibly server dependent, but that code does:
 *
 * PolicyMono	    Allocate no additional colors, use black and white
 * PolicyGray	    Allocate 13 gray levels (11 cells used)
 * PolicyColor	    Allocate a 4x4x4 cube and 13 gray levels (71 cells used)
 * PolicyAll	    Allocate as big a cube as possible, fill with gray (all)
 *
 * Here's a picture to help understand how many colors are
 * actually allocated (this is just the gray ramp):
 *
 *                 gray level
 * all   0000 1555 2aaa 4000 5555 6aaa 8000 9555 aaaa bfff d555 eaaa ffff
 * b/w   0000                                                        ffff
 * 4x4x4                     5555                aaaa
 * extra      1555 2aaa 4000      6aaa 8000 9555      bfff d555 eaaa
 *
 * The default colormap supplies two gray levels (black/white), the
 * 4x4x4 cube allocates another two and nine more are allocated to fill
 * in the 13 levels.  When the 4x4x4 cube is not allocated, a total of
 * 11 cells are allocated.
 */

#define PictureCmapPolicyInvalid    -1
#define PictureCmapPolicyDefault    0
#define PictureCmapPolicyMono	    1
#define PictureCmapPolicyGray	    2
#define PictureCmapPolicyColor	    3
#define PictureCmapPolicyAll	    4

extern int PictureCmapPolicy;

extern int PictureParseCmapPolicy(const char *name);

extern int RenderErrBase;

/* Fixed point updates from Carl Worth, USC, Information Sciences Institute */

typedef pixman_fixed_32_32_t xFixed_32_32;

typedef pixman_fixed_48_16_t xFixed_48_16;

#define MAX_FIXED_48_16		pixman_max_fixed_48_16
#define MIN_FIXED_48_16		pixman_min_fixed_48_16

typedef pixman_fixed_1_31_t xFixed_1_31;
typedef pixman_fixed_1_16_t xFixed_1_16;
typedef pixman_fixed_16_16_t xFixed_16_16;

/*
 * An unadorned "xFixed" is the same as xFixed_16_16,
 * (since it's quite common in the code)
 */
typedef pixman_fixed_t xFixed;

#define XFIXED_BITS	16

#define xFixedToInt(f)	pixman_fixed_to_int(f)
#define IntToxFixed(i)	pixman_int_to_fixed(i)
#define xFixedE		pixman_fixed_e
#define xFixed1		pixman_fixed_1
#define xFixed1MinusE	pixman_fixed_1_minus_e
#define xFixedFrac(f)	pixman_fixed_frac(f)
#define xFixedFloor(f)	pixman_fixed_floor(f)
#define xFixedCeil(f)	pixman_fixed_ceil(f)

#define xFixedFraction(f)	pixman_fixed_fraction(f)
#define xFixedMod2(f)		pixman_fixed_mod2(f)

/* whether 't' is a well defined not obviously empty trapezoid */
#define xTrapezoidValid(t)  ((t)->left.p1.y != (t)->left.p2.y && \
			     (t)->right.p1.y != (t)->right.p2.y && \
			     ((t)->bottom > (t)->top))

/*
 * Standard NTSC luminance conversions:
 *
 *  y = r * 0.299 + g * 0.587 + b * 0.114
 *
 * Approximate this for a bit more speed:
 *
 *  y = (r * 153 + g * 301 + b * 58) / 512
 *
 * This gives 17 bits of luminance; to get 15 bits, lop the low two
 */

#define CvtR8G8B8toY15(s)	(((((s) >> 16) & 0xff) * 153 + \
				  (((s) >>  8) & 0xff) * 301 + \
				  (((s)      ) & 0xff) * 58) >> 2)

#endif                          /* _PICTURE_H_ */
@


1.7
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@d214 1
a214 1
			     (int) ((t)->bottom - (t)->top) > 0)
@


1.6
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d172 1
a172 1
extern _X_EXPORT int PictureCmapPolicy;
d174 1
a174 1
extern _X_EXPORT int PictureParseCmapPolicy(const char *name);
d176 1
a176 1
extern _X_EXPORT int RenderErrBase;
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d19 1
a19 1
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
d132 1
a132 1
 * For dynamic indexed visuals (GrayScale and PseudoColor), these control the 
d192 2
a193 2
 * An unadorned "xFixed" is the same as xFixed_16_16, 
 * (since it's quite common in the code) 
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d32 3
a34 3
typedef struct _DirectFormat	*DirectFormatPtr;
typedef struct _PictFormat	*PictFormatPtr;
typedef struct _Picture		*PicturePtr;
d71 11
a81 11
    PICT_a2r10g10b10 =	PIXMAN_a2r10g10b10,
    PICT_x2r10g10b10 =	PIXMAN_x2r10g10b10,
    PICT_a2b10g10r10 =	PIXMAN_a2b10g10r10,
    PICT_x2b10g10r10 =	PIXMAN_x2b10g10r10,

    PICT_a8r8g8b8 =	PIXMAN_a8r8g8b8,
    PICT_x8r8g8b8 =	PIXMAN_x8r8g8b8,
    PICT_a8b8g8r8 =	PIXMAN_a8b8g8r8,
    PICT_x8b8g8r8 =	PIXMAN_x8b8g8r8,
    PICT_b8g8r8a8 =	PIXMAN_b8g8r8a8,
    PICT_b8g8r8x8 =	PIXMAN_b8g8r8x8,
d84 2
a85 2
    PICT_r8g8b8 =	PIXMAN_r8g8b8,
    PICT_b8g8r8 =	PIXMAN_b8g8r8,
d88 2
a89 2
    PICT_r5g6b5 =	PIXMAN_r5g6b5,
    PICT_b5g6r5 =	PIXMAN_b5g6r5,
d91 8
a98 8
    PICT_a1r5g5b5 =	PIXMAN_a1r5g5b5,
    PICT_x1r5g5b5 =	PIXMAN_x1r5g5b5,
    PICT_a1b5g5r5 =	PIXMAN_a1b5g5r5,
    PICT_x1b5g5r5 =	PIXMAN_x1b5g5r5,
    PICT_a4r4g4b4 =	PIXMAN_a4r4g4b4,
    PICT_x4r4g4b4 =	PIXMAN_x4r4g4b4,
    PICT_a4b4g4r4 =	PIXMAN_a4b4g4r4,
    PICT_x4b4g4r4 =	PIXMAN_x4b4g4r4,
d101 13
a113 13
    PICT_a8 =		PIXMAN_a8,
    PICT_r3g3b2 =	PIXMAN_r3g3b2,
    PICT_b2g3r3 =	PIXMAN_b2g3r3,
    PICT_a2r2g2b2 =	PIXMAN_a2r2g2b2,
    PICT_a2b2g2r2 =	PIXMAN_a2b2g2r2,

    PICT_c8 =		PIXMAN_c8,
    PICT_g8 =		PIXMAN_g8,

    PICT_x4a4 =		PIXMAN_x4a4,
				    
    PICT_x4c4 =		PIXMAN_x4c4,
    PICT_x4g4 =		PIXMAN_x4g4,
d116 8
a123 8
    PICT_a4 =		PIXMAN_a4,
    PICT_r1g2b1 =	PIXMAN_r1g2b1,
    PICT_b1g2r1 =	PIXMAN_b1g2r1,
    PICT_a1r1g1b1 =	PIXMAN_a1r1g1b1,
    PICT_a1b1g1r1 =	PIXMAN_a1b1g1r1,
				    
    PICT_c4 =		PIXMAN_c4,
    PICT_g4 =		PIXMAN_g4,
d126 1
a126 1
    PICT_a1 =		PIXMAN_a1,
d128 1
a128 1
    PICT_g1 =		PIXMAN_g1
d163 1
a163 1
 */   
d174 1
a174 1
extern _X_EXPORT int PictureParseCmapPolicy (const char *name);
d180 1
a180 1
typedef pixman_fixed_32_32_t	xFixed_32_32;
d182 1
a182 1
typedef pixman_fixed_48_16_t	xFixed_48_16;
d187 3
a189 3
typedef pixman_fixed_1_31_t	xFixed_1_31;
typedef pixman_fixed_1_16_t	xFixed_1_16;
typedef pixman_fixed_16_16_t	xFixed_16_16;
d195 2
a196 1
typedef	pixman_fixed_t	xFixed;
d232 1
a232 1
#endif /* _PICTURE_H_ */
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a176 1
extern _X_EXPORT DevPrivateKey RenderClientPrivateKey;
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d28 2
d65 1
d71 5
d80 2
d172 1
a172 1
extern int  PictureCmapPolicy;
d174 1
a174 1
int	PictureParseCmapPolicy (const char *name);
d176 2
a177 2
extern int RenderErrBase;
extern DevPrivateKey RenderClientPrivateKey;
@


1.1
log
@Initial revision
@
text
@d28 2
d39 1
a39 6
#define PICT_FORMAT(bpp,type,a,r,g,b)	(((bpp) << 24) |  \
					 ((type) << 16) | \
					 ((a) << 12) | \
					 ((r) << 8) | \
					 ((g) << 4) | \
					 ((b)))
d48 15
a62 15
#define PICT_FORMAT_BPP(f)	(((f) >> 24)       )
#define PICT_FORMAT_TYPE(f)	(((f) >> 16) & 0xff)
#define PICT_FORMAT_A(f)	(((f) >> 12) & 0x0f)
#define PICT_FORMAT_R(f)	(((f) >>  8) & 0x0f)
#define PICT_FORMAT_G(f)	(((f) >>  4) & 0x0f)
#define PICT_FORMAT_B(f)	(((f)      ) & 0x0f)
#define PICT_FORMAT_RGB(f)	(((f)      ) & 0xfff)
#define PICT_FORMAT_VIS(f)	(((f)      ) & 0xffff)

#define PICT_TYPE_OTHER	0
#define PICT_TYPE_A	1
#define PICT_TYPE_ARGB	2
#define PICT_TYPE_ABGR	3
#define PICT_TYPE_COLOR	4
#define PICT_TYPE_GRAY	5
d64 1
a64 1
#define PICT_FORMAT_COLOR(f)	(PICT_FORMAT_TYPE(f) & 2)
d68 4
a71 4
   PICT_a8r8g8b8 =	PICT_FORMAT(32,PICT_TYPE_ARGB,8,8,8,8),
   PICT_x8r8g8b8 =	PICT_FORMAT(32,PICT_TYPE_ARGB,0,8,8,8),
   PICT_a8b8g8r8 =	PICT_FORMAT(32,PICT_TYPE_ABGR,8,8,8,8),
   PICT_x8b8g8r8 =	PICT_FORMAT(32,PICT_TYPE_ABGR,0,8,8,8),
d74 2
a75 2
   PICT_r8g8b8 =	PICT_FORMAT(24,PICT_TYPE_ARGB,0,8,8,8),
   PICT_b8g8r8 =	PICT_FORMAT(24,PICT_TYPE_ABGR,0,8,8,8),
d78 2
a79 2
   PICT_r5g6b5 =	PICT_FORMAT(16,PICT_TYPE_ARGB,0,5,6,5),
   PICT_b5g6r5 =	PICT_FORMAT(16,PICT_TYPE_ABGR,0,5,6,5),
d81 8
a88 8
   PICT_a1r5g5b5 =	PICT_FORMAT(16,PICT_TYPE_ARGB,1,5,5,5),
   PICT_x1r5g5b5 =	PICT_FORMAT(16,PICT_TYPE_ARGB,0,5,5,5),
   PICT_a1b5g5r5 =	PICT_FORMAT(16,PICT_TYPE_ABGR,1,5,5,5),
   PICT_x1b5g5r5 =	PICT_FORMAT(16,PICT_TYPE_ABGR,0,5,5,5),
   PICT_a4r4g4b4 =	PICT_FORMAT(16,PICT_TYPE_ARGB,4,4,4,4),
   PICT_x4r4g4b4 =	PICT_FORMAT(16,PICT_TYPE_ARGB,0,4,4,4),
   PICT_a4b4g4r4 =	PICT_FORMAT(16,PICT_TYPE_ABGR,4,4,4,4),
   PICT_x4b4g4r4 =	PICT_FORMAT(16,PICT_TYPE_ABGR,0,4,4,4),
d91 5
a95 5
   PICT_a8 =		PICT_FORMAT(8,PICT_TYPE_A,8,0,0,0),
   PICT_r3g3b2 =	PICT_FORMAT(8,PICT_TYPE_ARGB,0,3,3,2),
   PICT_b2g3r3 =	PICT_FORMAT(8,PICT_TYPE_ABGR,0,3,3,2),
   PICT_a2r2g2b2 =	PICT_FORMAT(8,PICT_TYPE_ARGB,2,2,2,2),
   PICT_a2b2g2r2 =	PICT_FORMAT(8,PICT_TYPE_ABGR,2,2,2,2),
d97 2
a98 2
   PICT_c8 =		PICT_FORMAT(8,PICT_TYPE_COLOR,0,0,0,0),
   PICT_g8 =		PICT_FORMAT(8,PICT_TYPE_GRAY,0,0,0,0),
d100 1
a100 1
   PICT_x4a4 =		PICT_FORMAT(8,PICT_TYPE_A,4,0,0,0),
d102 2
a103 2
   PICT_x4c4 =		PICT_FORMAT(8,PICT_TYPE_COLOR,0,0,0,0),
   PICT_x4g4 =		PICT_FORMAT(8,PICT_TYPE_GRAY,0,0,0,0),
d106 5
a110 5
   PICT_a4 =		PICT_FORMAT(4,PICT_TYPE_A,4,0,0,0),
   PICT_r1g2b1 =	PICT_FORMAT(4,PICT_TYPE_ARGB,0,1,2,1),
   PICT_b1g2r1 =	PICT_FORMAT(4,PICT_TYPE_ABGR,0,1,2,1),
   PICT_a1r1g1b1 =	PICT_FORMAT(4,PICT_TYPE_ARGB,1,1,1,1),
   PICT_a1b1g1r1 =	PICT_FORMAT(4,PICT_TYPE_ABGR,1,1,1,1),
d112 2
a113 2
   PICT_c4 =		PICT_FORMAT(4,PICT_TYPE_COLOR,0,0,0,0),
   PICT_g4 =		PICT_FORMAT(4,PICT_TYPE_GRAY,0,0,0,0),
d116 1
a116 1
   PICT_a1 =		PICT_FORMAT(1,PICT_TYPE_A,1,0,0,0),
d118 1
a118 1
   PICT_g1 =		PICT_FORMAT(1,PICT_TYPE_GRAY,0,0,0,0),
d166 2
a167 2
extern int	RenderErrBase;
extern int	RenderClientPrivateIndex;
d171 10
a180 29
#if defined(WIN32) && !defined(__GNUC__)
typedef __int64		xFixed_32_32;
#else
#  if defined (_LP64) || \
      defined(__alpha__) || defined(__alpha) || \
      defined(ia64) || defined(__ia64__) || \
      defined(__sparc64__) || \
      defined(__s390x__) || \
      defined(amd64) || defined (__amd64__) || \
      (defined(sgi) && (_MIPS_SZLONG == 64))
typedef long		xFixed_32_32;
# else
#  if defined(__GNUC__) && \
    ((__GNUC__ > 2) || \
     ((__GNUC__ == 2) && defined(__GNUC_MINOR__) && (__GNUC_MINOR__ > 7)))
__extension__
#  endif
typedef long long int	xFixed_32_32;
# endif
#endif

typedef xFixed_32_32	xFixed_48_16;

#define MAX_FIXED_48_16	    ((xFixed_48_16) 0x7fffffff)
#define MIN_FIXED_48_16	    (-((xFixed_48_16) 1 << 31))

typedef CARD32		xFixed_1_31;
typedef CARD32		xFixed_1_16;
typedef INT32		xFixed_16_16;
d186 1
a186 1
typedef	xFixed_16_16	xFixed;
d189 8
a196 8
#define xFixedToInt(f)	(int) ((f) >> XFIXED_BITS)
#define IntToxFixed(i)	((xFixed) (i) << XFIXED_BITS)
#define xFixedE		((xFixed) 1)
#define xFixed1		(IntToxFixed(1))
#define xFixed1MinusE	(xFixed1 - xFixedE)
#define xFixedFrac(f)	((f) & xFixed1MinusE)
#define xFixedFloor(f)	((f) & ~xFixed1MinusE)
#define xFixedCeil(f)	xFixedFloor((f) + xFixed1MinusE)
d198 2
a199 2
#define xFixedFraction(f)	((f) & xFixed1MinusE)
#define xFixedMod2(f)		((f) & (xFixed1 | xFixed1MinusE))
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@a27 2
#include <pixman.h>

d37 6
a42 1
#define PICT_FORMAT(bpp,type,a,r,g,b)	PIXMAN_FORMAT(bpp, type, a, r, g, b)
d51 15
a65 15
#define PICT_FORMAT_BPP(f)	PIXMAN_FORMAT_BPP(f)
#define PICT_FORMAT_TYPE(f)	PIXMAN_FORMAT_TYPE(f)
#define PICT_FORMAT_A(f)	PIXMAN_FORMAT_A(f)
#define PICT_FORMAT_R(f)	PIXMAN_FORMAT_R(f)
#define PICT_FORMAT_G(f)	PIXMAN_FORMAT_G(f)
#define PICT_FORMAT_B(f)	PIXMAN_FORMAT_B(f)
#define PICT_FORMAT_RGB(f)	PIXMAN_FORMAT_RGB(f)
#define PICT_FORMAT_VIS(f)	PIXMAN_FORMAT_VIS(f)

#define PICT_TYPE_OTHER		PIXMAN_TYPE_OTHER
#define PICT_TYPE_A		PIXMAN_TYPE_A
#define PICT_TYPE_ARGB		PIXMAN_TYPE_ARGB
#define PICT_TYPE_ABGR		PIXMAN_TYPE_ABGR
#define PICT_TYPE_COLOR		PIXMAN_TYPE_COLOR
#define PICT_TYPE_GRAY		PIXMAN_TYPE_GRAY
d67 1
a67 1
#define PICT_FORMAT_COLOR(f)	PIXMAN_FORMAT_COLOR(f)
d71 4
a74 4
    PICT_a8r8g8b8 =	PIXMAN_a8r8g8b8,
    PICT_x8r8g8b8 =	PIXMAN_x8r8g8b8,
    PICT_a8b8g8r8 =	PIXMAN_a8b8g8r8,
    PICT_x8b8g8r8 =	PIXMAN_x8b8g8r8,
d77 2
a78 2
    PICT_r8g8b8 =	PIXMAN_r8g8b8,
    PICT_b8g8r8 =	PIXMAN_b8g8r8,
d81 2
a82 2
    PICT_r5g6b5 =	PIXMAN_r5g6b5,
    PICT_b5g6r5 =	PIXMAN_b5g6r5,
d84 8
a91 8
    PICT_a1r5g5b5 =	PIXMAN_a1r5g5b5,
    PICT_x1r5g5b5 =	PIXMAN_x1r5g5b5,
    PICT_a1b5g5r5 =	PIXMAN_a1b5g5r5,
    PICT_x1b5g5r5 =	PIXMAN_x1b5g5r5,
    PICT_a4r4g4b4 =	PIXMAN_a4r4g4b4,
    PICT_x4r4g4b4 =	PIXMAN_x4r4g4b4,
    PICT_a4b4g4r4 =	PIXMAN_a4b4g4r4,
    PICT_x4b4g4r4 =	PIXMAN_x4b4g4r4,
d94 5
a98 5
    PICT_a8 =		PIXMAN_a8,
    PICT_r3g3b2 =	PIXMAN_r3g3b2,
    PICT_b2g3r3 =	PIXMAN_b2g3r3,
    PICT_a2r2g2b2 =	PIXMAN_a2r2g2b2,
    PICT_a2b2g2r2 =	PIXMAN_a2b2g2r2,
d100 2
a101 2
    PICT_c8 =		PIXMAN_c8,
    PICT_g8 =		PIXMAN_g8,
d103 1
a103 1
    PICT_x4a4 =		PIXMAN_x4a4,
d105 2
a106 2
    PICT_x4c4 =		PIXMAN_x4c4,
    PICT_x4g4 =		PIXMAN_x4g4,
d109 5
a113 5
    PICT_a4 =		PIXMAN_a4,
    PICT_r1g2b1 =	PIXMAN_r1g2b1,
    PICT_b1g2r1 =	PIXMAN_b1g2r1,
    PICT_a1r1g1b1 =	PIXMAN_a1r1g1b1,
    PICT_a1b1g1r1 =	PIXMAN_a1b1g1r1,
d115 2
a116 2
    PICT_c4 =		PIXMAN_c4,
    PICT_g4 =		PIXMAN_g4,
d119 1
a119 1
    PICT_a1 =		PIXMAN_a1,
d121 1
a121 1
    PICT_g1 =		PIXMAN_g1,
d174 29
a202 10
typedef pixman_fixed_32_32_t	xFixed_32_32;

typedef pixman_fixed_48_16_t	xFixed_48_16;

#define MAX_FIXED_48_16		pixman_max_fixed_48_16
#define MIN_FIXED_48_16		pixman_min_fixed_48_16

typedef pixman_fixed_1_31_t	xFixed_1_31;
typedef pixman_fixed_1_16_t	xFixed_1_16;
typedef pixman_fixed_16_16_t	xFixed_16_16;
d208 1
a208 1
typedef	pixman_fixed_t	xFixed;
d211 8
a218 8
#define xFixedToInt(f)	pixman_fixed_to_int(f)
#define IntToxFixed(i)	pixman_int_to_fixed(i)
#define xFixedE		pixman_fixed_e
#define xFixed1		pixman_fixed_1
#define xFixed1MinusE	pixman_fixed_1_minus_e
#define xFixedFrac(f)	pixman_fixed_frac(f)
#define xFixedFloor(f)	pixman_fixed_floor(f)
#define xFixedCeil(f)	pixman_fixed_ceil(f)
d220 2
a221 2
#define xFixedFraction(f)	pixman_fixed_fraction(f)
#define xFixedMod2(f)		pixman_fixed_mod2(f)
@

