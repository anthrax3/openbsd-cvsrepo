head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.8
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.2
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.4
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.09.16.19.10.25;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	Te1daavkBLskZ8gc;

1.12
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	cVXoV5PxI8YrEaVA;

1.11
date	2013.09.28.15.36.36;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2013.06.07.17.28.55;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.01.31.07.52.36;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.02.16.08.40;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.38;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.05.16;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 *
 * Copyright Â© 2002 Keith Packard, member of The XFree86 Project, Inc.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Animated cursors for X.  Not specific to Render in any way, but
 * stuck there because Render has the other cool cursor extension.
 * Besides, everyone has Render.
 *
 * Implemented as a simple layer over the core cursor code; it
 * creates composite cursors out of a set of static cursors and
 * delta times between each image.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <X11/X.h>
#include <X11/Xmd.h>
#include "servermd.h"
#include "scrnintstr.h"
#include "dixstruct.h"
#include "cursorstr.h"
#include "dixfontstr.h"
#include "opaque.h"
#include "picturestr.h"
#include "inputstr.h"
#include "xace.h"

typedef struct _AnimCurElt {
    CursorPtr pCursor;          /* cursor to show */
    CARD32 delay;               /* in ms */
} AnimCurElt;

typedef struct _AnimCur {
    int nelt;                   /* number of elements in the elts array */
    AnimCurElt *elts;           /* actually allocated right after the structure */
} AnimCurRec, *AnimCurPtr;

typedef struct _AnimScrPriv {
    CloseScreenProcPtr CloseScreen;

    ScreenBlockHandlerProcPtr BlockHandler;

    CursorLimitsProcPtr CursorLimits;
    DisplayCursorProcPtr DisplayCursor;
    SetCursorPositionProcPtr SetCursorPosition;
    RealizeCursorProcPtr RealizeCursor;
    UnrealizeCursorProcPtr UnrealizeCursor;
    RecolorCursorProcPtr RecolorCursor;
} AnimCurScreenRec, *AnimCurScreenPtr;

static unsigned char empty[4];

static CursorBits animCursorBits = {
    empty, empty, 2, 1, 1, 0, 0, 1
};

static DevPrivateKeyRec AnimCurScreenPrivateKeyRec;

#define AnimCurScreenPrivateKey (&AnimCurScreenPrivateKeyRec)

#define IsAnimCur(c)	    ((c) && ((c)->bits == &animCursorBits))
#define GetAnimCur(c)	    ((AnimCurPtr) ((((char *)(c) + CURSOR_REC_SIZE))))
#define GetAnimCurScreen(s) ((AnimCurScreenPtr)dixLookupPrivate(&(s)->devPrivates, AnimCurScreenPrivateKey))
#define SetAnimCurScreen(s,p) dixSetPrivate(&(s)->devPrivates, AnimCurScreenPrivateKey, p)

#define Wrap(as,s,elt,func) (((as)->elt = (s)->elt), (s)->elt = func)
#define Unwrap(as,s,elt)    ((s)->elt = (as)->elt)

static Bool
AnimCurCloseScreen(ScreenPtr pScreen)
{
    AnimCurScreenPtr as = GetAnimCurScreen(pScreen);
    Bool ret;

    Unwrap(as, pScreen, CloseScreen);

    Unwrap(as, pScreen, CursorLimits);
    Unwrap(as, pScreen, DisplayCursor);
    Unwrap(as, pScreen, SetCursorPosition);
    Unwrap(as, pScreen, RealizeCursor);
    Unwrap(as, pScreen, UnrealizeCursor);
    Unwrap(as, pScreen, RecolorCursor);
    SetAnimCurScreen(pScreen, 0);
    ret = (*pScreen->CloseScreen) (pScreen);
    free(as);
    return ret;
}

static void
AnimCurCursorLimits(DeviceIntPtr pDev,
                    ScreenPtr pScreen,
                    CursorPtr pCursor, BoxPtr pHotBox, BoxPtr pTopLeftBox)
{
    AnimCurScreenPtr as = GetAnimCurScreen(pScreen);

    Unwrap(as, pScreen, CursorLimits);
    if (IsAnimCur(pCursor)) {
        AnimCurPtr ac = GetAnimCur(pCursor);

        (*pScreen->CursorLimits) (pDev, pScreen, ac->elts[0].pCursor,
                                  pHotBox, pTopLeftBox);
    }
    else {
        (*pScreen->CursorLimits) (pDev, pScreen, pCursor, pHotBox, pTopLeftBox);
    }
    Wrap(as, pScreen, CursorLimits, AnimCurCursorLimits);
}

/*
 * This has to be a screen block handler instead of a generic
 * block handler so that it is well ordered with respect to the DRI
 * block handler responsible for releasing the hardware to DRI clients
 */

static void
AnimCurScreenBlockHandler(ScreenPtr pScreen,
                          void *pTimeout, void *pReadmask)
{
    AnimCurScreenPtr as = GetAnimCurScreen(pScreen);
    DeviceIntPtr dev;
    Bool activeDevice = FALSE;
    CARD32 now = 0, soonest = ~0;       /* earliest time to wakeup again */

    Unwrap(as, pScreen, BlockHandler);

    for (dev = inputInfo.devices; dev; dev = dev->next) {
        if (IsPointerDevice(dev) && pScreen == dev->spriteInfo->anim.pScreen) {
            if (!activeDevice) {
                now = GetTimeInMillis();
                activeDevice = TRUE;
            }

            if ((INT32) (now - dev->spriteInfo->anim.time) >= 0) {
                AnimCurPtr ac = GetAnimCur(dev->spriteInfo->anim.pCursor);
                int elt = (dev->spriteInfo->anim.elt + 1) % ac->nelt;
                DisplayCursorProcPtr DisplayCursor;

                /*
                 * Not a simple Unwrap/Wrap as this
                 * isn't called along the DisplayCursor
                 * wrapper chain.
                 */
                DisplayCursor = pScreen->DisplayCursor;
                pScreen->DisplayCursor = as->DisplayCursor;
                (void) (*pScreen->DisplayCursor) (dev,
                                                  pScreen,
                                                  ac->elts[elt].pCursor);
                as->DisplayCursor = pScreen->DisplayCursor;
                pScreen->DisplayCursor = DisplayCursor;

                dev->spriteInfo->anim.elt = elt;
                dev->spriteInfo->anim.time = now + ac->elts[elt].delay;
            }

            if (soonest > dev->spriteInfo->anim.time)
                soonest = dev->spriteInfo->anim.time;
        }
    }

    if (activeDevice)
        AdjustWaitForDelay(pTimeout, soonest - now);

    (*pScreen->BlockHandler) (pScreen, pTimeout, pReadmask);
    if (activeDevice)
        Wrap(as, pScreen, BlockHandler, AnimCurScreenBlockHandler);
    else
        as->BlockHandler = NULL;
}

static Bool
AnimCurDisplayCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor)
{
    AnimCurScreenPtr as = GetAnimCurScreen(pScreen);
    Bool ret;

    if (IsFloating(pDev))
        return FALSE;

    Unwrap(as, pScreen, DisplayCursor);
    if (IsAnimCur(pCursor)) {
        if (pCursor != pDev->spriteInfo->anim.pCursor) {
            AnimCurPtr ac = GetAnimCur(pCursor);

            ret = (*pScreen->DisplayCursor)
                (pDev, pScreen, ac->elts[0].pCursor);
            if (ret) {
                pDev->spriteInfo->anim.elt = 0;
                pDev->spriteInfo->anim.time =
                    GetTimeInMillis() + ac->elts[0].delay;
                pDev->spriteInfo->anim.pCursor = pCursor;
                pDev->spriteInfo->anim.pScreen = pScreen;

                if (!as->BlockHandler)
                    Wrap(as, pScreen, BlockHandler, AnimCurScreenBlockHandler);
            }
        }
        else
            ret = TRUE;
    }
    else {
        pDev->spriteInfo->anim.pCursor = 0;
        pDev->spriteInfo->anim.pScreen = 0;
        ret = (*pScreen->DisplayCursor) (pDev, pScreen, pCursor);
    }
    Wrap(as, pScreen, DisplayCursor, AnimCurDisplayCursor);
    return ret;
}

static Bool
AnimCurSetCursorPosition(DeviceIntPtr pDev,
                         ScreenPtr pScreen, int x, int y, Bool generateEvent)
{
    AnimCurScreenPtr as = GetAnimCurScreen(pScreen);
    Bool ret;

    Unwrap(as, pScreen, SetCursorPosition);
    if (pDev->spriteInfo->anim.pCursor) {
        pDev->spriteInfo->anim.pScreen = pScreen;

        if (!as->BlockHandler)
            Wrap(as, pScreen, BlockHandler, AnimCurScreenBlockHandler);
    }
    ret = (*pScreen->SetCursorPosition) (pDev, pScreen, x, y, generateEvent);
    Wrap(as, pScreen, SetCursorPosition, AnimCurSetCursorPosition);
    return ret;
}

static Bool
AnimCurRealizeCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor)
{
    AnimCurScreenPtr as = GetAnimCurScreen(pScreen);
    Bool ret;

    Unwrap(as, pScreen, RealizeCursor);
    if (IsAnimCur(pCursor))
        ret = TRUE;
    else
        ret = (*pScreen->RealizeCursor) (pDev, pScreen, pCursor);
    Wrap(as, pScreen, RealizeCursor, AnimCurRealizeCursor);
    return ret;
}

static Bool
AnimCurUnrealizeCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor)
{
    AnimCurScreenPtr as = GetAnimCurScreen(pScreen);
    Bool ret;

    Unwrap(as, pScreen, UnrealizeCursor);
    if (IsAnimCur(pCursor)) {
        AnimCurPtr ac = GetAnimCur(pCursor);
        int i;

        if (pScreen->myNum == 0)
            for (i = 0; i < ac->nelt; i++)
                FreeCursor(ac->elts[i].pCursor, 0);
        ret = TRUE;
    }
    else
        ret = (*pScreen->UnrealizeCursor) (pDev, pScreen, pCursor);
    Wrap(as, pScreen, UnrealizeCursor, AnimCurUnrealizeCursor);
    return ret;
}

static void
AnimCurRecolorCursor(DeviceIntPtr pDev,
                     ScreenPtr pScreen, CursorPtr pCursor, Bool displayed)
{
    AnimCurScreenPtr as = GetAnimCurScreen(pScreen);

    Unwrap(as, pScreen, RecolorCursor);
    if (IsAnimCur(pCursor)) {
        AnimCurPtr ac = GetAnimCur(pCursor);
        int i;

        for (i = 0; i < ac->nelt; i++)
            (*pScreen->RecolorCursor) (pDev, pScreen, ac->elts[i].pCursor,
                                       displayed &&
                                       pDev->spriteInfo->anim.elt == i);
    }
    else
        (*pScreen->RecolorCursor) (pDev, pScreen, pCursor, displayed);
    Wrap(as, pScreen, RecolorCursor, AnimCurRecolorCursor);
}

Bool
AnimCurInit(ScreenPtr pScreen)
{
    AnimCurScreenPtr as;

    if (!dixRegisterPrivateKey(&AnimCurScreenPrivateKeyRec, PRIVATE_SCREEN, 0))
        return FALSE;

    as = (AnimCurScreenPtr) malloc(sizeof(AnimCurScreenRec));
    if (!as)
        return FALSE;
    Wrap(as, pScreen, CloseScreen, AnimCurCloseScreen);

    as->BlockHandler = NULL;

    Wrap(as, pScreen, CursorLimits, AnimCurCursorLimits);
    Wrap(as, pScreen, DisplayCursor, AnimCurDisplayCursor);
    Wrap(as, pScreen, SetCursorPosition, AnimCurSetCursorPosition);
    Wrap(as, pScreen, RealizeCursor, AnimCurRealizeCursor);
    Wrap(as, pScreen, UnrealizeCursor, AnimCurUnrealizeCursor);
    Wrap(as, pScreen, RecolorCursor, AnimCurRecolorCursor);
    SetAnimCurScreen(pScreen, as);
    return TRUE;
}

int
AnimCursorCreate(CursorPtr *cursors, CARD32 *deltas, int ncursor,
                 CursorPtr *ppCursor, ClientPtr client, XID cid)
{
    CursorPtr pCursor;
    int rc, i;
    AnimCurPtr ac;

    for (i = 0; i < screenInfo.numScreens; i++)
        if (!GetAnimCurScreen(screenInfo.screens[i]))
            return BadImplementation;

    for (i = 0; i < ncursor; i++)
        if (IsAnimCur(cursors[i]))
            return BadMatch;

    pCursor = (CursorPtr) calloc(CURSOR_REC_SIZE +
                                 sizeof(AnimCurRec) +
                                 ncursor * sizeof(AnimCurElt), 1);
    if (!pCursor)
        return BadAlloc;
    dixInitPrivates(pCursor, pCursor + 1, PRIVATE_CURSOR);
    pCursor->bits = &animCursorBits;
    pCursor->refcnt = 1;

    pCursor->foreRed = cursors[0]->foreRed;
    pCursor->foreGreen = cursors[0]->foreGreen;
    pCursor->foreBlue = cursors[0]->foreBlue;

    pCursor->backRed = cursors[0]->backRed;
    pCursor->backGreen = cursors[0]->backGreen;
    pCursor->backBlue = cursors[0]->backBlue;

    pCursor->id = cid;

    /* security creation/labeling check */
    rc = XaceHook(XACE_RESOURCE_ACCESS, client, cid, RT_CURSOR, pCursor,
                  RT_NONE, NULL, DixCreateAccess);
    if (rc != Success) {
        dixFiniPrivates(pCursor, PRIVATE_CURSOR);
        free(pCursor);
        return rc;
    }

    /*
     * Fill in the AnimCurRec
     */
    animCursorBits.refcnt++;
    ac = GetAnimCur(pCursor);
    ac->nelt = ncursor;
    ac->elts = (AnimCurElt *) (ac + 1);

    for (i = 0; i < ncursor; i++) {
        ac->elts[i].pCursor = RefCursor(cursors[i]);
        ac->elts[i].delay = deltas[i];
    }

    *ppCursor = pCursor;
    return Success;
}
@


1.12
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d162 1
a162 1
                 * isn't called along the DisplayCursor 
@


1.11
log
@Update to xserver 1.14.3
@
text
@d139 1
a139 1
                          pointer pTimeout, pointer pReadmask)
@


1.10
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d386 1
a386 2
        cursors[i]->refcnt++;
        ac->elts[i].pCursor = cursors[i];
@


1.9
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d92 1
a92 1
AnimCurCloseScreen(int index, ScreenPtr pScreen)
d106 1
a106 1
    ret = (*pScreen->CloseScreen) (index, pScreen);
d138 1
a138 2
AnimCurScreenBlockHandler(int screenNum,
                          pointer blockData,
a140 1
    ScreenPtr pScreen = screenInfo.screens[screenNum];
d146 2
d185 1
a185 2
    Unwrap(as, pScreen, BlockHandler);
    (*pScreen->BlockHandler) (screenNum, blockData, pTimeout, pReadmask);
@


1.8
log
@Update to xserver 1.11.4. tested by krw@@, shadchin@@.
@
text
@d51 2
a52 2
    CursorPtr	pCursor;    /* cursor to show */
    CARD32	delay;	    /* in ms */
d56 2
a57 2
    int		nelt;	    /* number of elements in the elts array */
    AnimCurElt	*elts;	    /* actually allocated right after the structure */
d61 1
a61 1
    CloseScreenProcPtr		CloseScreen;
d63 1
a63 1
    ScreenBlockHandlerProcPtr	BlockHandler;
d65 6
a70 6
    CursorLimitsProcPtr		CursorLimits;
    DisplayCursorProcPtr	DisplayCursor;
    SetCursorPositionProcPtr	SetCursorPosition;
    RealizeCursorProcPtr	RealizeCursor;
    UnrealizeCursorProcPtr	UnrealizeCursor;
    RecolorCursorProcPtr	RecolorCursor;
d75 1
a75 1
static CursorBits   animCursorBits = {
d80 1
a90 1

d92 1
a92 1
AnimCurCloseScreen (int index, ScreenPtr pScreen)
d94 2
a95 2
    AnimCurScreenPtr    as = GetAnimCurScreen(pScreen);
    Bool                ret;
d105 1
a105 1
    SetAnimCurScreen(pScreen,0);
d111 4
a114 6
static void 
AnimCurCursorLimits (DeviceIntPtr pDev,
                     ScreenPtr pScreen,
		     CursorPtr pCursor,
		     BoxPtr pHotBox,
		     BoxPtr pTopLeftBox)
d116 1
a116 1
    AnimCurScreenPtr    as = GetAnimCurScreen(pScreen);
d118 3
a120 4
    Unwrap (as, pScreen, CursorLimits);
    if (IsAnimCur(pCursor))
    {
	AnimCurPtr	ac = GetAnimCur(pCursor);
d122 2
a123 2
        (*pScreen->CursorLimits) (pDev, pScreen, ac->elts[0].pCursor, 
                                  pHotBox, pTopLeftBox); 
d125 2
a126 4
    else
    {
        (*pScreen->CursorLimits) (pDev, pScreen, pCursor,
                                  pHotBox, pTopLeftBox); 
d128 1
a128 1
    Wrap (as, pScreen, CursorLimits, AnimCurCursorLimits);
d138 3
a140 4
AnimCurScreenBlockHandler (int screenNum,
			   pointer blockData,
			   pointer pTimeout,
			   pointer pReadmask)
d142 10
a151 13
    ScreenPtr		pScreen = screenInfo.screens[screenNum];
    AnimCurScreenPtr    as = GetAnimCurScreen(pScreen);
    DeviceIntPtr        dev;
    Bool                activeDevice = FALSE;
    CARD32              now = 0, 
                        soonest = ~0; /* earliest time to wakeup again */

    for (dev = inputInfo.devices; dev; dev = dev->next)
    {
	if (IsPointerDevice(dev) && pScreen == dev->spriteInfo->anim.pScreen)
	{
	    if (!activeDevice) {
                now = GetTimeInMillis ();
d155 25
a179 26
	    if ((INT32) (now - dev->spriteInfo->anim.time) >= 0)
	    {
		AnimCurPtr ac  = GetAnimCur(dev->spriteInfo->anim.pCursor);
		int        elt = (dev->spriteInfo->anim.elt + 1) % ac->nelt;
		DisplayCursorProcPtr DisplayCursor;

		/*
		 * Not a simple Unwrap/Wrap as this
		 * isn't called along the DisplayCursor 
		 * wrapper chain.
		 */
		DisplayCursor = pScreen->DisplayCursor;
		pScreen->DisplayCursor = as->DisplayCursor;
		(void) (*pScreen->DisplayCursor) (dev,
						  pScreen, 
						  ac->elts[elt].pCursor);
		as->DisplayCursor = pScreen->DisplayCursor;
		pScreen->DisplayCursor = DisplayCursor;

		dev->spriteInfo->anim.elt = elt;
		dev->spriteInfo->anim.time = now + ac->elts[elt].delay;
	    }

	    if (soonest > dev->spriteInfo->anim.time)
		soonest = dev->spriteInfo->anim.time;
	}
d183 1
a183 1
        AdjustWaitForDelay (pTimeout, soonest - now);
d185 1
a185 1
    Unwrap (as, pScreen, BlockHandler);
d188 1
a188 1
        Wrap (as, pScreen, BlockHandler, AnimCurScreenBlockHandler);
d194 1
a194 3
AnimCurDisplayCursor (DeviceIntPtr pDev,
                      ScreenPtr pScreen,
		      CursorPtr pCursor)
d196 2
a197 2
    AnimCurScreenPtr    as = GetAnimCurScreen(pScreen);
    Bool		ret;
d200 1
a200 1
	    return FALSE;
d202 4
a205 6
    Unwrap (as, pScreen, DisplayCursor);
    if (IsAnimCur(pCursor))
    {
	if (pCursor != pDev->spriteInfo->anim.pCursor)
	{
	    AnimCurPtr		ac = GetAnimCur(pCursor);
d207 1
a207 1
	    ret = (*pScreen->DisplayCursor) 
d209 13
a221 13
	    if (ret)
	    {
		pDev->spriteInfo->anim.elt = 0;
		pDev->spriteInfo->anim.time = GetTimeInMillis () + ac->elts[0].delay;
		pDev->spriteInfo->anim.pCursor = pCursor;
		pDev->spriteInfo->anim.pScreen = pScreen;

		if (!as->BlockHandler)
		    Wrap(as, pScreen, BlockHandler, AnimCurScreenBlockHandler);
	    }
	}
	else
	    ret = TRUE;
d223 4
a226 5
    else
    {
	pDev->spriteInfo->anim.pCursor = 0;
	pDev->spriteInfo->anim.pScreen = 0;
	ret = (*pScreen->DisplayCursor) (pDev, pScreen, pCursor);
d228 1
a228 1
    Wrap (as, pScreen, DisplayCursor, AnimCurDisplayCursor);
d233 2
a234 5
AnimCurSetCursorPosition (DeviceIntPtr pDev,
                          ScreenPtr pScreen,
			  int x,
			  int y,
			  Bool generateEvent)
d236 4
a239 4
    AnimCurScreenPtr    as = GetAnimCurScreen(pScreen);
    Bool		ret;
    
    Unwrap (as, pScreen, SetCursorPosition);
d241 1
a241 1
	pDev->spriteInfo->anim.pScreen = pScreen;
d243 2
a244 2
	if (!as->BlockHandler)
	    Wrap(as, pScreen, BlockHandler, AnimCurScreenBlockHandler);
d247 1
a247 1
    Wrap (as, pScreen, SetCursorPosition, AnimCurSetCursorPosition);
d251 2
a252 4
static Bool 
AnimCurRealizeCursor (DeviceIntPtr pDev,
                      ScreenPtr pScreen,
		      CursorPtr pCursor)
d254 4
a257 4
    AnimCurScreenPtr    as = GetAnimCurScreen(pScreen);
    Bool		ret;
    
    Unwrap (as, pScreen, RealizeCursor);
d259 1
a259 1
	ret = TRUE;
d261 2
a262 2
	ret = (*pScreen->RealizeCursor) (pDev, pScreen, pCursor);
    Wrap (as, pScreen, RealizeCursor, AnimCurRealizeCursor);
d266 2
a267 4
static Bool 
AnimCurUnrealizeCursor (DeviceIntPtr pDev,
                        ScreenPtr pScreen,
			CursorPtr pCursor)
d269 12
a280 13
    AnimCurScreenPtr    as = GetAnimCurScreen(pScreen);
    Bool		ret;
    
    Unwrap (as, pScreen, UnrealizeCursor);
    if (IsAnimCur(pCursor))
    {
        AnimCurPtr  ac = GetAnimCur(pCursor);
	int	    i;

	if (pScreen->myNum == 0)
	    for (i = 0; i < ac->nelt; i++)
		FreeCursor (ac->elts[i].pCursor, 0);
	ret = TRUE;
d283 2
a284 2
	ret = (*pScreen->UnrealizeCursor) (pDev, pScreen, pCursor);
    Wrap (as, pScreen, UnrealizeCursor, AnimCurUnrealizeCursor);
d289 2
a290 4
AnimCurRecolorCursor (DeviceIntPtr pDev,
                      ScreenPtr pScreen,
		      CursorPtr pCursor,
		      Bool displayed)
d292 6
a297 7
    AnimCurScreenPtr    as = GetAnimCurScreen(pScreen);
    
    Unwrap (as, pScreen, RecolorCursor);
    if (IsAnimCur(pCursor))
    {
        AnimCurPtr  ac = GetAnimCur(pCursor);
	int	    i;
d300 3
a302 3
	    (*pScreen->RecolorCursor) (pDev, pScreen, ac->elts[i].pCursor,
				       displayed && 
				       pDev->spriteInfo->anim.elt == i);
d305 2
a306 2
	(*pScreen->RecolorCursor) (pDev, pScreen, pCursor, displayed);
    Wrap (as, pScreen, RecolorCursor, AnimCurRecolorCursor);
d310 1
a310 1
AnimCurInit (ScreenPtr pScreen)
d312 1
a312 1
    AnimCurScreenPtr    as;
d315 1
a315 1
	return FALSE;
d317 1
a317 1
    as = (AnimCurScreenPtr) malloc(sizeof (AnimCurScreenRec));
d319 1
a319 1
	return FALSE;
d330 1
a330 1
    SetAnimCurScreen(pScreen,as);
d335 2
a336 1
AnimCursorCreate (CursorPtr *cursors, CARD32 *deltas, int ncursor, CursorPtr *ppCursor, ClientPtr client, XID cid)
d338 3
a340 3
    CursorPtr	pCursor;
    int		rc, i;
    AnimCurPtr	ac;
d343 2
a344 2
	if (!GetAnimCurScreen (screenInfo.screens[i]))
	    return BadImplementation;
d347 3
a349 3
	if (IsAnimCur (cursors[i]))
	    return BadMatch;
	
d351 2
a352 2
				 sizeof (AnimCurRec) +
				 ncursor * sizeof (AnimCurElt), 1);
d354 1
a354 1
	return BadAlloc;
d358 1
a358 1
    
d362 1
a362 1
    
d371 1
a371 1
		  RT_NONE, NULL, DixCreateAccess);
d373 3
a375 3
	dixFiniPrivates(pCursor, PRIVATE_CURSOR);
	free(pCursor);
	return rc;
d377 1
a377 1
	
d382 1
a382 1
    ac = GetAnimCur (pCursor);
d385 5
a389 6
    
    for (i = 0; i < ncursor; i++)
    {
	cursors[i]->refcnt++;
	ac->elts[i].pCursor = cursors[i];
	ac->elts[i].delay = deltas[i];
d391 1
a391 1
    
@


1.7
log
@Update to xserver 1.11.2
@
text
@d211 3
@


1.6
log
@Update to xserver 1.9.5. Tested by jasper@@, ajacoutot@@ and krw@@
@
text
@a97 2
    
    Unwrap(as, pScreen, BlockHandler);
d197 4
a200 1
    Wrap (as, pScreen, BlockHandler, AnimCurScreenBlockHandler);
d226 3
d255 1
a255 1
    if (pDev->spriteInfo->anim.pCursor)
d257 4
d345 1
a345 1
    Wrap(as, pScreen, BlockHandler, AnimCurScreenBlockHandler);
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d153 1
d161 4
a164 1
	    if (!now) now = GetTimeInMillis (); 
d194 1
a194 1
    if (now)
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a60 4
    CursorPtr			pCursor;
    int				elt;
    CARD32			time;

a72 10
typedef struct _AnimCurState {
    CursorPtr			pCursor;
    ScreenPtr			pScreen;
    int				elt;
    CARD32			time;
} AnimCurStateRec, *AnimCurStatePtr;

/* What a waste. But we need an API change to alloc it per device only. */
static AnimCurStateRec animCurState[MAXDEVICES];

d79 2
a80 4
static int AnimCurGeneration;

static int AnimCurScreenPrivateKeyIndex;
static DevPrivateKey AnimCurScreenPrivateKey = &AnimCurScreenPrivateKeyIndex;
d83 1
a83 1
#define GetAnimCur(c)	    ((AnimCurPtr) ((c) + 1))
a84 1
#define GetAnimCurScreenIfSet(s) GetAnimCurScreen(s)
d109 1
a109 1
    xfree (as);
d158 1
a158 1
	if (IsPointerDevice(dev) && pScreen == animCurState[dev->id].pScreen)
d162 1
a162 1
	    if ((INT32) (now - animCurState[dev->id].time) >= 0)
d164 2
a165 2
		AnimCurPtr ac  = GetAnimCur(animCurState[dev->id].pCursor);
		int        elt = (animCurState[dev->id].elt + 1) % ac->nelt;
d181 2
a182 2
		animCurState[dev->id].elt = elt;
		animCurState[dev->id].time = now + ac->elts[elt].delay;
d185 2
a186 2
	    if (soonest > animCurState[dev->id].time)
		soonest = animCurState[dev->id].time;
d209 1
a209 1
	if (pCursor != animCurState[pDev->id].pCursor)
d217 4
a220 4
		animCurState[pDev->id].elt = 0;
		animCurState[pDev->id].time = GetTimeInMillis () + ac->elts[0].delay;
		animCurState[pDev->id].pCursor = pCursor;
		animCurState[pDev->id].pScreen = pScreen;
d228 2
a229 2
        animCurState[pDev->id].pCursor = 0;
	animCurState[pDev->id].pScreen = 0;
d247 2
a248 2
    if (animCurState[pDev->id].pCursor)
	animCurState[pDev->id].pScreen = pScreen;
d313 1
a313 1
				       animCurState[pDev->id].elt == i);
d325 4
a328 12
    if (AnimCurGeneration != serverGeneration)
    {
        int i;
	AnimCurGeneration = serverGeneration;
        for (i = 0; i < MAXDEVICES; i++) {
            animCurState[i].pCursor = 0;
            animCurState[i].pScreen = 0;
            animCurState[i].elt = 0;
            animCurState[i].time = 0;
        }
    }
    as = (AnimCurScreenPtr) xalloc (sizeof (AnimCurScreenRec));
d353 1
a353 1
	if (!GetAnimCurScreenIfSet (screenInfo.screens[i]))
d360 3
a362 3
    pCursor = (CursorPtr) xalloc (sizeof (CursorRec) +
				  sizeof (AnimCurRec) +
				  ncursor * sizeof (AnimCurElt));
d365 1
a377 1
    pCursor->devPrivates = NULL;
d383 2
a384 2
	dixFreePrivates(pCursor->devPrivates);
	xfree(pCursor);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a106 11
static Bool
AnimCurDisplayCursor (DeviceIntPtr pDev, 
                      ScreenPtr pScreen,
		      CursorPtr pCursor);

static Bool
AnimCurSetCursorPosition (DeviceIntPtr pDev,
                          ScreenPtr pScreen,
			  int x,
			  int y,
			  Bool generateEvent);
d149 1
a149 1
        (*pScreen->CursorLimits) (inputInfo.pointer, pScreen, pCursor,
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d47 1
d84 2
a85 1
static AnimCurStateRec  animCurState;
a93 1
static DevPrivateKey AnimCurScreenPrivateKey = &AnimCurScreenPrivateKey;
d95 4
a98 1
#define IsAnimCur(c)	    ((c)->bits == &animCursorBits)
d108 2
a109 1
AnimCurDisplayCursor (ScreenPtr pScreen,
d113 2
a114 1
AnimCurSetCursorPosition (ScreenPtr pScreen,
d142 2
a143 1
AnimCurCursorLimits (ScreenPtr pScreen,
d155 2
a156 1
	(*pScreen->CursorLimits) (pScreen, ac->elts[0].pCursor, pHotBox, pTopLeftBox);
d160 2
a161 1
	(*pScreen->CursorLimits) (pScreen, pCursor, pHotBox, pTopLeftBox);
d180 3
d184 1
a184 1
    if (pScreen == animCurState.pScreen)
d186 22
a207 1
	CARD32		now = GetTimeInMillis ();
d209 3
a211 16
	if ((INT32) (now - animCurState.time) >= 0)
	{
	    AnimCurPtr		    ac = GetAnimCur(animCurState.pCursor);
	    int			    elt = (animCurState.elt + 1) % ac->nelt;
	    DisplayCursorProcPtr    DisplayCursor;

	    /*
	     * Not a simple Unwrap/Wrap as this
	     * isn't called along the DisplayCursor 
	     * wrapper chain.
	     */
	    DisplayCursor = pScreen->DisplayCursor;
	    pScreen->DisplayCursor = as->DisplayCursor;
	    (void) (*pScreen->DisplayCursor) (pScreen, ac->elts[elt].pCursor);
	    as->DisplayCursor = pScreen->DisplayCursor;
	    pScreen->DisplayCursor = DisplayCursor;
d213 2
a214 2
	    animCurState.elt = elt;
	    animCurState.time = now + ac->elts[elt].delay;
a215 1
	AdjustWaitForDelay (pTimeout, animCurState.time - now);
d217 4
d227 2
a228 1
AnimCurDisplayCursor (ScreenPtr pScreen,
d237 1
a237 1
	if (pCursor != animCurState.pCursor)
d241 2
a242 1
	    ret = (*pScreen->DisplayCursor) (pScreen, ac->elts[0].pCursor);
d245 4
a248 4
		animCurState.elt = 0;
		animCurState.time = GetTimeInMillis () + ac->elts[0].delay;
		animCurState.pCursor = pCursor;
		animCurState.pScreen = pScreen;
d256 3
a258 3
        animCurState.pCursor = 0;
	animCurState.pScreen = 0;
	ret = (*pScreen->DisplayCursor) (pScreen, pCursor);
d265 2
a266 1
AnimCurSetCursorPosition (ScreenPtr pScreen,
d275 3
a277 3
    if (animCurState.pCursor)
	animCurState.pScreen = pScreen;
    ret = (*pScreen->SetCursorPosition) (pScreen, x, y, generateEvent);
d283 2
a284 1
AnimCurRealizeCursor (ScreenPtr pScreen,
d294 1
a294 1
	ret = (*pScreen->RealizeCursor) (pScreen, pCursor);
d300 2
a301 1
AnimCurUnrealizeCursor (ScreenPtr pScreen,
d319 1
a319 1
	ret = (*pScreen->UnrealizeCursor) (pScreen, pCursor);
d325 2
a326 1
AnimCurRecolorCursor (ScreenPtr pScreen,
d339 1
a339 1
	    (*pScreen->RecolorCursor) (pScreen, ac->elts[i].pCursor,
d341 1
a341 1
				       animCurState.elt == i);
d344 1
a344 1
	(*pScreen->RecolorCursor) (pScreen, pCursor, displayed);
d355 1
d357 6
a362 4
	animCurState.pCursor = 0;
	animCurState.pScreen = 0;
	animCurState.elt = 0;
	animCurState.time = 0;
@


1.1
log
@Initial revision
@
text
@d47 1
d91 2
a92 2
int	AnimCurScreenPrivateIndex = -1;
int	AnimCurGeneration;
d96 3
a98 3
#define GetAnimCurScreen(s) ((AnimCurScreenPtr) ((s)->devPrivates[AnimCurScreenPrivateIndex].ptr))
#define GetAnimCurScreenIfSet(s) ((AnimCurScreenPrivateIndex != -1) ? GetAnimCurScreen(s) : NULL)
#define SetAnimCurScreen(s,p) ((s)->devPrivates[AnimCurScreenPrivateIndex].ptr = (pointer) (p))
a131 2
    if (index == 0)
	AnimCurScreenPrivateIndex = -1;
a325 3
	AnimCurScreenPrivateIndex = AllocateScreenPrivateIndex ();
	if (AnimCurScreenPrivateIndex < 0)
	    return FALSE;
d350 1
a350 1
AnimCursorCreate (CursorPtr *cursors, CARD32 *deltas, int ncursor, CursorPtr *ppCursor)
d353 1
a353 1
    int		i;
a369 1
    animCursorBits.refcnt++;
d380 12
d395 1
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d90 2
a91 2
static int AnimCurScreenPrivateIndex = -1;
static int AnimCurGeneration;
@

