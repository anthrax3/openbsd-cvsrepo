head	1.9;
access;
symbols
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.05.29.12.02.40;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	s0SI41sEunLdyFfd;

1.8
date	2015.09.16.19.10.26;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	Te1daavkBLskZ8gc;

1.7
date	2014.09.27.17.53.05;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	cVXoV5PxI8YrEaVA;

1.6
date	2013.06.07.17.28.55;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.05.15;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 *
 * Copyright Â© 2000 SuSE, Inc.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of SuSE not be used in advertising or
 * publicity pertaining to distribution of the software without specific,
 * written prior permission.  SuSE makes no representations about the
 * suitability of this software for any purpose.  It is provided "as is"
 * without express or implied warranty.
 *
 * SuSE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL SuSE
 * BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Author:  Keith Packard, SuSE, Inc.
 */

#ifndef _GLYPHSTR_H_
#define _GLYPHSTR_H_

#include <X11/extensions/renderproto.h>
#include "picture.h"
#include "screenint.h"
#include "regionstr.h"
#include "miscstruct.h"
#include "privates.h"

#define GlyphFormat1	0
#define GlyphFormat4	1
#define GlyphFormat8	2
#define GlyphFormat16	3
#define GlyphFormat32	4
#define GlyphFormatNum	5

typedef struct _Glyph {
    CARD32 refcnt;
    PrivateRec *devPrivates;
    unsigned char sha1[20];
    CARD32 size;                /* info + bitmap */
    xGlyphInfo info;
    /* per-screen pixmaps follow */
} GlyphRec, *GlyphPtr;

#define GlyphPicture(glyph) ((PicturePtr *) ((glyph) + 1))

typedef struct _GlyphRef {
    CARD32 signature;
    GlyphPtr glyph;
} GlyphRefRec, *GlyphRefPtr;

#define DeletedGlyph	((GlyphPtr) 1)

typedef struct _GlyphHashSet {
    CARD32 entries;
    CARD32 size;
    CARD32 rehash;
} GlyphHashSetRec, *GlyphHashSetPtr;

typedef struct _GlyphHash {
    GlyphRefPtr table;
    GlyphHashSetPtr hashSet;
    CARD32 tableEntries;
} GlyphHashRec, *GlyphHashPtr;

typedef struct _GlyphSet {
    CARD32 refcnt;
    int fdepth;
    PictFormatPtr format;
    GlyphHashRec hash;
    PrivateRec *devPrivates;
} GlyphSetRec, *GlyphSetPtr;

#define GlyphSetGetPrivate(pGlyphSet,k)					\
    dixLookupPrivate(&(pGlyphSet)->devPrivates, k)

#define GlyphSetSetPrivate(pGlyphSet,k,ptr)				\
    dixSetPrivate(&(pGlyphSet)->devPrivates, k, ptr)

typedef struct _GlyphList {
    INT16 xOff;
    INT16 yOff;
    CARD8 len;
    PictFormatPtr format;
} GlyphListRec, *GlyphListPtr;

extern void
 GlyphUninit(ScreenPtr pScreen);

extern GlyphPtr FindGlyphByHash(unsigned char sha1[20], int format);

extern int
HashGlyph(xGlyphInfo * gi,
          CARD8 *bits, unsigned long size, unsigned char sha1[20]);

extern void
 AddGlyph(GlyphSetPtr glyphSet, GlyphPtr glyph, Glyph id);

extern Bool
 DeleteGlyph(GlyphSetPtr glyphSet, Glyph id);

extern GlyphPtr FindGlyph(GlyphSetPtr glyphSet, Glyph id);

extern GlyphPtr AllocateGlyph(xGlyphInfo * gi, int format);

extern Bool
 ResizeGlyphSet(GlyphSetPtr glyphSet, CARD32 change);

extern GlyphSetPtr AllocateGlyphSet(int fdepth, PictFormatPtr format);

extern int
 FreeGlyphSet(void *value, XID gid);

#define GLYPH_HAS_GLYPH_PICTURE_ACCESSOR 1 /* used for api compat */
extern _X_EXPORT PicturePtr
 GetGlyphPicture(GlyphPtr glyph, ScreenPtr pScreen);
extern _X_EXPORT void
 SetGlyphPicture(GlyphPtr glyph, ScreenPtr pScreen, PicturePtr picture);

#endif                          /* _GLYPHSTR_H_ */
@


1.8
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d93 1
a93 1
extern _X_EXPORT void
d96 1
a96 9
extern _X_EXPORT GlyphHashSetPtr FindGlyphHashSet(CARD32 filled);

extern _X_EXPORT GlyphRefPtr
FindGlyphRef(GlyphHashPtr hash,
             CARD32 signature, Bool match, unsigned char sha1[20]);

extern _X_EXPORT GlyphPtr FindGlyphByHash(unsigned char sha1[20], int format);

extern _X_EXPORT int
d98 1
d102 1
a102 4
extern _X_EXPORT void
 FreeGlyph(GlyphPtr glyph, int format);

extern _X_EXPORT void
d105 1
a105 1
extern _X_EXPORT Bool
d108 1
a108 6
extern _X_EXPORT GlyphPtr FindGlyph(GlyphSetPtr glyphSet, Glyph id);

extern _X_EXPORT GlyphPtr AllocateGlyph(xGlyphInfo * gi, int format);

extern _X_EXPORT Bool
 AllocateGlyphHash(GlyphHashPtr hash, GlyphHashSetPtr hashSet);
d110 1
a110 2
extern _X_EXPORT Bool
 ResizeGlyphHash(GlyphHashPtr hash, CARD32 change, Bool global);
d112 1
a112 1
extern _X_EXPORT Bool
d115 1
a115 1
extern _X_EXPORT GlyphSetPtr AllocateGlyphSet(int fdepth, PictFormatPtr format);
d117 1
a117 1
extern _X_EXPORT int
@


1.7
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d19 1
a19 1
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN 
@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d134 1
a134 1
 FreeGlyphSet(pointer value, XID gid);
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d136 6
@


1.4
log
@Update to xserver 1.11.2
@
text
@d43 5
a47 5
    CARD32	    refcnt;
    PrivateRec	*devPrivates;
    unsigned char   sha1[20];
    CARD32	    size; /* info + bitmap */
    xGlyphInfo	    info;
d54 2
a55 2
    CARD32	signature;
    GlyphPtr	glyph;
d61 3
a63 3
    CARD32	entries;
    CARD32	size;
    CARD32	rehash;
d67 1
a67 1
    GlyphRefPtr	    table;
d69 1
a69 1
    CARD32	    tableEntries;
d73 5
a77 5
    CARD32	    refcnt;
    int		    fdepth;
    PictFormatPtr   format;
    GlyphHashRec    hash;
    PrivateRec      *devPrivates;
d87 4
a90 4
    INT16	    xOff;
    INT16	    yOff;
    CARD8	    len;
    PictFormatPtr   format;
a92 3
extern _X_EXPORT GlyphHashSetPtr
FindGlyphHashSet (CARD32 filled);

d94 1
a94 1
GlyphUninit (ScreenPtr pScreen);
d96 1
a96 2
extern _X_EXPORT GlyphHashSetPtr
FindGlyphHashSet (CARD32 filled);
d99 2
a100 4
FindGlyphRef (GlyphHashPtr	hash,
	      CARD32		signature,
	      Bool		match,
	      unsigned char	sha1[20]);
d102 1
a102 2
extern _X_EXPORT GlyphPtr
FindGlyphByHash (unsigned char sha1[20], int format);
d105 3
a107 4
HashGlyph (xGlyphInfo    *gi,
	   CARD8	 *bits,
	   unsigned long size,
	   unsigned char sha1[20]);
d110 1
a110 1
FreeGlyph (GlyphPtr glyph, int format);
d113 1
a113 1
AddGlyph (GlyphSetPtr glyphSet, GlyphPtr glyph, Glyph id);
d116 1
a116 1
DeleteGlyph (GlyphSetPtr glyphSet, Glyph id);
d118 1
a118 2
extern _X_EXPORT GlyphPtr
FindGlyph (GlyphSetPtr glyphSet, Glyph id);
d120 1
a120 2
extern _X_EXPORT GlyphPtr
AllocateGlyph (xGlyphInfo *gi, int format);
d123 1
a123 1
AllocateGlyphHash (GlyphHashPtr hash, GlyphHashSetPtr hashSet);
d126 1
a126 1
ResizeGlyphHash (GlyphHashPtr hash, CARD32 change, Bool global);
d129 1
a129 1
ResizeGlyphSet (GlyphSetPtr glyphSet, CARD32 change);
d131 1
a131 2
extern _X_EXPORT GlyphSetPtr
AllocateGlyphSet (int fdepth, PictFormatPtr format);
d134 1
a134 4
FreeGlyphSet (pointer   value,
	      XID       gid);


d136 1
a136 1
#endif /* _GLYPHSTR_H_ */
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d74 1
a75 1
    int		    fdepth;
a76 1
    int             maxPrivate;
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d94 1
a94 1
GlyphHashSetPtr
d97 1
a97 1
void
d100 1
a100 1
GlyphHashSetPtr
d103 1
a103 1
GlyphRefPtr
d109 1
a109 1
GlyphPtr
d112 1
a112 1
int
d118 1
a118 1
void
d121 1
a121 1
void
d124 1
a124 1
Bool
d127 1
a127 1
GlyphPtr
d130 1
a130 1
GlyphPtr
d133 1
a133 1
Bool
d136 1
a136 1
Bool
d139 1
a139 1
Bool
d142 1
a142 1
GlyphSetPtr
d145 1
a145 1
int
@


1.1
log
@Initial revision
@
text
@d33 1
d43 6
a48 5
    CARD32	refcnt;
    DevUnion	*devPrivates;
    CARD32	size;	/* info + bitmap */
    xGlyphInfo	info;
    /* bits follow */
d51 2
d78 1
a78 1
    pointer         *devPrivates;
d81 5
a85 9
#define GlyphSetGetPrivate(pGlyphSet,n)					\
	((n) > (pGlyphSet)->maxPrivate ?				\
	 (pointer) 0 :							\
	 (pGlyphSet)->devPrivates[n])

#define GlyphSetSetPrivate(pGlyphSet,n,ptr)				\
	((n) > (pGlyphSet)->maxPrivate ?				\
	 _GlyphSetSetNewPrivate(pGlyphSet, n, ptr) :			\
	 ((((pGlyphSet)->devPrivates[n] = (ptr)) != 0) || TRUE))
a93 2
extern GlyphHashRec	globalGlyphs[GlyphFormatNum];

a96 26
int
AllocateGlyphSetPrivateIndex (void);

void
ResetGlyphSetPrivateIndex (void);

Bool
_GlyphSetSetNewPrivate (GlyphSetPtr glyphSet, int n, pointer ptr);

void
ResetGlyphPrivates (void);

int
AllocateGlyphPrivateIndex (void);

Bool
AllocateGlyphPrivate (ScreenPtr pScreen,
		      int	index2,
		      unsigned	amount);

Bool
GlyphInit (ScreenPtr pScreen);

Bool
GlyphFinishInit (ScreenPtr pScreen);

d104 4
a107 1
FindGlyphRef (GlyphHashPtr hash, CARD32 signature, Bool match, GlyphPtr compare);
d109 8
a116 2
CARD32
HashGlyph (GlyphPtr glyph);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d94 2
@

