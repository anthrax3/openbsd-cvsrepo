head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.6
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.05.29.12.02.40;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	s0SI41sEunLdyFfd;

1.10
date	2015.09.16.19.10.26;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	Te1daavkBLskZ8gc;

1.9
date	2014.09.27.17.53.05;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	cVXoV5PxI8YrEaVA;

1.8
date	2013.06.07.17.28.55;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.57;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.37;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.38;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.16.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.16.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.05.15;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * Copyright Â© 2000 SuSE, Inc.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of SuSE not be used in advertising or
 * publicity pertaining to distribution of the software without specific,
 * written prior permission.  SuSE makes no representations about the
 * suitability of this software for any purpose.  It is provided "as is"
 * without express or implied warranty.
 *
 * SuSE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL SuSE
 * BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Author:  Keith Packard, SuSE, Inc.
 */

#ifndef _PICTURESTR_H_
#define _PICTURESTR_H_

#include "scrnintstr.h"
#include "glyphstr.h"
#include "resource.h"
#include "privates.h"

typedef struct _DirectFormat {
    CARD16 red, redMask;
    CARD16 green, greenMask;
    CARD16 blue, blueMask;
    CARD16 alpha, alphaMask;
} DirectFormatRec;

typedef struct _IndexFormat {
    VisualID vid;
    ColormapPtr pColormap;
    int nvalues;
    xIndexValue *pValues;
    void *devPrivate;
} IndexFormatRec;

typedef struct _PictFormat {
    CARD32 id;
    CARD32 format;              /* except bpp */
    unsigned char type;
    unsigned char depth;
    DirectFormatRec direct;
    IndexFormatRec index;
} PictFormatRec;

typedef struct pixman_vector PictVector, *PictVectorPtr;
typedef struct pixman_transform PictTransform, *PictTransformPtr;

#define pict_f_vector pixman_f_vector
#define pict_f_transform pixman_f_transform

#define PICT_GRADIENT_STOPTABLE_SIZE 1024
#define SourcePictTypeSolidFill 0
#define SourcePictTypeLinear 1
#define SourcePictTypeRadial 2
#define SourcePictTypeConical 3

typedef struct _PictSolidFill {
    unsigned int type;
    CARD32 color;
} PictSolidFill, *PictSolidFillPtr;

typedef struct _PictGradientStop {
    xFixed x;
    xRenderColor color;
} PictGradientStop, *PictGradientStopPtr;

typedef struct _PictGradient {
    unsigned int type;
    int nstops;
    PictGradientStopPtr stops;
} PictGradient, *PictGradientPtr;

typedef struct _PictLinearGradient {
    unsigned int type;
    int nstops;
    PictGradientStopPtr stops;
    xPointFixed p1;
    xPointFixed p2;
} PictLinearGradient, *PictLinearGradientPtr;

typedef struct _PictCircle {
    xFixed x;
    xFixed y;
    xFixed radius;
} PictCircle, *PictCirclePtr;

typedef struct _PictRadialGradient {
    unsigned int type;
    int nstops;
    PictGradientStopPtr stops;
    PictCircle c1;
    PictCircle c2;
} PictRadialGradient, *PictRadialGradientPtr;

typedef struct _PictConicalGradient {
    unsigned int type;
    int nstops;
    PictGradientStopPtr stops;
    xPointFixed center;
    xFixed angle;
} PictConicalGradient, *PictConicalGradientPtr;

typedef union _SourcePict {
    unsigned int type;
    PictSolidFill solidFill;
    PictGradient gradient;
    PictLinearGradient linear;
    PictRadialGradient radial;
    PictConicalGradient conical;
} SourcePict, *SourcePictPtr;

typedef struct _Picture {
    DrawablePtr pDrawable;
    PictFormatPtr pFormat;
    PictFormatShort format;     /* PICT_FORMAT */
    int refcnt;
    CARD32 id;
    unsigned int repeat:1;
    unsigned int graphicsExposures:1;
    unsigned int subWindowMode:1;
    unsigned int polyEdge:1;
    unsigned int polyMode:1;
    unsigned int freeCompClip:1;
    unsigned int componentAlpha:1;
    unsigned int repeatType:2;
    unsigned int filter:3;
    unsigned int stateChanges:CPLastBit;
    unsigned int unused:18 - CPLastBit;

    PicturePtr pNext;           /* chain on same drawable */

    PicturePtr alphaMap;
    DDXPointRec alphaOrigin;

    DDXPointRec clipOrigin;
    RegionPtr clientClip;

    unsigned long serialNumber;

    RegionPtr pCompositeClip;

    PrivateRec *devPrivates;

    PictTransform *transform;

    SourcePictPtr pSourcePict;
    xFixed *filter_params;
    int filter_nparams;
} PictureRec;

typedef Bool (*PictFilterValidateParamsProcPtr) (ScreenPtr pScreen, int id,
                                                 xFixed * params, int nparams,
                                                 int *width, int *height);
typedef struct {
    char *name;
    int id;
    PictFilterValidateParamsProcPtr ValidateParams;
    int width, height;
} PictFilterRec, *PictFilterPtr;

#define PictFilterNearest	0
#define PictFilterBilinear	1

#define PictFilterFast		2
#define PictFilterGood		3
#define PictFilterBest		4

#define PictFilterConvolution	5
/* if you add an 8th filter, expand the filter bitfield above */

typedef struct {
    char *alias;
    int alias_id;
    int filter_id;
} PictFilterAliasRec, *PictFilterAliasPtr;

typedef int (*CreatePictureProcPtr) (PicturePtr pPicture);
typedef void (*DestroyPictureProcPtr) (PicturePtr pPicture);
typedef int (*ChangePictureClipProcPtr) (PicturePtr pPicture,
                                         int clipType, void *value, int n);
typedef void (*DestroyPictureClipProcPtr) (PicturePtr pPicture);

typedef int (*ChangePictureTransformProcPtr) (PicturePtr pPicture,
                                              PictTransform * transform);

typedef int (*ChangePictureFilterProcPtr) (PicturePtr pPicture,
                                           int filter,
                                           xFixed * params, int nparams);

typedef void (*DestroyPictureFilterProcPtr) (PicturePtr pPicture);

typedef void (*ChangePictureProcPtr) (PicturePtr pPicture, Mask mask);
typedef void (*ValidatePictureProcPtr) (PicturePtr pPicture, Mask mask);
typedef void (*CompositeProcPtr) (CARD8 op,
                                  PicturePtr pSrc,
                                  PicturePtr pMask,
                                  PicturePtr pDst,
                                  INT16 xSrc,
                                  INT16 ySrc,
                                  INT16 xMask,
                                  INT16 yMask,
                                  INT16 xDst,
                                  INT16 yDst, CARD16 width, CARD16 height);

typedef void (*GlyphsProcPtr) (CARD8 op,
                               PicturePtr pSrc,
                               PicturePtr pDst,
                               PictFormatPtr maskFormat,
                               INT16 xSrc,
                               INT16 ySrc,
                               int nlists,
                               GlyphListPtr lists, GlyphPtr * glyphs);

typedef void (*CompositeRectsProcPtr) (CARD8 op,
                                       PicturePtr pDst,
                                       xRenderColor * color,
                                       int nRect, xRectangle *rects);

typedef void (*RasterizeTrapezoidProcPtr) (PicturePtr pMask,
                                           xTrapezoid * trap,
                                           int x_off, int y_off);

typedef void (*TrapezoidsProcPtr) (CARD8 op,
                                   PicturePtr pSrc,
                                   PicturePtr pDst,
                                   PictFormatPtr maskFormat,
                                   INT16 xSrc,
                                   INT16 ySrc, int ntrap, xTrapezoid * traps);

typedef void (*TrianglesProcPtr) (CARD8 op,
                                  PicturePtr pSrc,
                                  PicturePtr pDst,
                                  PictFormatPtr maskFormat,
                                  INT16 xSrc,
                                  INT16 ySrc, int ntri, xTriangle * tris);

typedef void (*TriStripProcPtr) (CARD8 op,
                                 PicturePtr pSrc,
                                 PicturePtr pDst,
                                 PictFormatPtr maskFormat,
                                 INT16 xSrc,
                                 INT16 ySrc, int npoint, xPointFixed * points);

typedef void (*TriFanProcPtr) (CARD8 op,
                               PicturePtr pSrc,
                               PicturePtr pDst,
                               PictFormatPtr maskFormat,
                               INT16 xSrc,
                               INT16 ySrc, int npoint, xPointFixed * points);

typedef Bool (*InitIndexedProcPtr) (ScreenPtr pScreen, PictFormatPtr pFormat);

typedef void (*CloseIndexedProcPtr) (ScreenPtr pScreen, PictFormatPtr pFormat);

typedef void (*UpdateIndexedProcPtr) (ScreenPtr pScreen,
                                      PictFormatPtr pFormat,
                                      int ndef, xColorItem * pdef);

typedef void (*AddTrapsProcPtr) (PicturePtr pPicture,
                                 INT16 xOff,
                                 INT16 yOff, int ntrap, xTrap * traps);

typedef void (*AddTrianglesProcPtr) (PicturePtr pPicture,
                                     INT16 xOff,
                                     INT16 yOff, int ntri, xTriangle * tris);

typedef Bool (*RealizeGlyphProcPtr) (ScreenPtr pScreen, GlyphPtr glyph);

typedef void (*UnrealizeGlyphProcPtr) (ScreenPtr pScreen, GlyphPtr glyph);

typedef struct _PictureScreen {
    PictFormatPtr formats;
    PictFormatPtr fallback;
    int nformats;

    CreatePictureProcPtr CreatePicture;
    DestroyPictureProcPtr DestroyPicture;
    ChangePictureClipProcPtr ChangePictureClip;
    DestroyPictureClipProcPtr DestroyPictureClip;

    ChangePictureProcPtr ChangePicture;
    ValidatePictureProcPtr ValidatePicture;

    CompositeProcPtr Composite;
    GlyphsProcPtr Glyphs;       /* unused */
    CompositeRectsProcPtr CompositeRects;

    DestroyWindowProcPtr DestroyWindow;
    CloseScreenProcPtr CloseScreen;

    StoreColorsProcPtr StoreColors;

    InitIndexedProcPtr InitIndexed;
    CloseIndexedProcPtr CloseIndexed;
    UpdateIndexedProcPtr UpdateIndexed;

    int subpixel;

    PictFilterPtr filters;
    int nfilters;
    PictFilterAliasPtr filterAliases;
    int nfilterAliases;

    /**
     * Called immediately after a picture's transform is changed through the
     * SetPictureTransform request.  Not called for source-only pictures.
     */
    ChangePictureTransformProcPtr ChangePictureTransform;

    /**
     * Called immediately after a picture's transform is changed through the
     * SetPictureFilter request.  Not called for source-only pictures.
     */
    ChangePictureFilterProcPtr ChangePictureFilter;

    DestroyPictureFilterProcPtr DestroyPictureFilter;

    TrapezoidsProcPtr Trapezoids;
    TrianglesProcPtr Triangles;

    RasterizeTrapezoidProcPtr RasterizeTrapezoid;

    AddTrianglesProcPtr AddTriangles;

    AddTrapsProcPtr AddTraps;

    RealizeGlyphProcPtr RealizeGlyph;
    UnrealizeGlyphProcPtr UnrealizeGlyph;

#define PICTURE_SCREEN_VERSION 2
    TriStripProcPtr TriStrip;
    TriFanProcPtr TriFan;
} PictureScreenRec, *PictureScreenPtr;

extern _X_EXPORT DevPrivateKeyRec PictureScreenPrivateKeyRec;
#define PictureScreenPrivateKey (&PictureScreenPrivateKeyRec)

extern _X_EXPORT DevPrivateKeyRec PictureWindowPrivateKeyRec;
#define	PictureWindowPrivateKey (&PictureWindowPrivateKeyRec)

extern RESTYPE PictureType;
extern RESTYPE PictFormatType;
extern RESTYPE GlyphSetType;

#define GetPictureScreen(s) ((PictureScreenPtr)dixLookupPrivate(&(s)->devPrivates, PictureScreenPrivateKey))
#define GetPictureScreenIfSet(s) (dixPrivateKeyRegistered(PictureScreenPrivateKey) ? GetPictureScreen(s) : NULL)
#define SetPictureScreen(s,p) dixSetPrivate(&(s)->devPrivates, PictureScreenPrivateKey, p)
#define GetPictureWindow(w) ((PicturePtr)dixLookupPrivate(&(w)->devPrivates, PictureWindowPrivateKey))
#define SetPictureWindow(w,p) dixSetPrivate(&(w)->devPrivates, PictureWindowPrivateKey, p)

#define VERIFY_PICTURE(pPicture, pid, client, mode) {\
    int tmprc = dixLookupResourceByType((void *)&(pPicture), pid,\
	                                PictureType, client, mode);\
    if (tmprc != Success)\
	return tmprc;\
}

#define VERIFY_ALPHA(pPicture, pid, client, mode) {\
    if (pid == None) \
	pPicture = 0; \
    else { \
	VERIFY_PICTURE(pPicture, pid, client, mode); \
    } \
} \

extern _X_EXPORT PictFormatPtr
 PictureWindowFormat(WindowPtr pWindow);

extern _X_EXPORT Bool
 PictureSetSubpixelOrder(ScreenPtr pScreen, int subpixel);

extern _X_EXPORT int
 PictureGetSubpixelOrder(ScreenPtr pScreen);

extern _X_EXPORT PictFormatPtr
PictureMatchVisual(ScreenPtr pScreen, int depth, VisualPtr pVisual);

extern _X_EXPORT PictFormatPtr
PictureMatchFormat(ScreenPtr pScreen, int depth, CARD32 format);

extern _X_EXPORT Bool
 PictureInit(ScreenPtr pScreen, PictFormatPtr formats, int nformats);

extern _X_EXPORT int
 PictureGetFilterId(const char *filter, int len, Bool makeit);

extern _X_EXPORT char *PictureGetFilterName(int id);

extern _X_EXPORT int
PictureAddFilter(ScreenPtr pScreen,
                 const char *filter,
                 PictFilterValidateParamsProcPtr ValidateParams,
                 int width, int height);

extern _X_EXPORT Bool
PictureSetFilterAlias(ScreenPtr pScreen, const char *filter, const char *alias);

extern _X_EXPORT Bool
 PictureSetDefaultFilters(ScreenPtr pScreen);

extern _X_EXPORT void
 PictureResetFilters(ScreenPtr pScreen);

extern _X_EXPORT PictFilterPtr
PictureFindFilter(ScreenPtr pScreen, char *name, int len);

extern _X_EXPORT int
SetPicturePictFilter(PicturePtr pPicture, PictFilterPtr pFilter,
                     xFixed * params, int nparams);

extern _X_EXPORT int
SetPictureFilter(PicturePtr pPicture, char *name, int len,
                 xFixed * params, int nparams);

extern _X_EXPORT Bool
 PictureFinishInit(void);

extern _X_EXPORT PicturePtr
CreatePicture(Picture pid,
              DrawablePtr pDrawable,
              PictFormatPtr pFormat,
              Mask mask, XID *list, ClientPtr client, int *error);

extern _X_EXPORT int
ChangePicture(PicturePtr pPicture,
              Mask vmask, XID *vlist, DevUnion *ulist, ClientPtr client);

extern _X_EXPORT int

SetPictureClipRects(PicturePtr pPicture,
                    int xOrigin, int yOrigin, int nRect, xRectangle *rects);

extern _X_EXPORT int
SetPictureClipRegion(PicturePtr pPicture,
                     int xOrigin, int yOrigin, RegionPtr pRegion);

extern _X_EXPORT int
 SetPictureTransform(PicturePtr pPicture, PictTransform * transform);

extern _X_EXPORT void
 ValidatePicture(PicturePtr pPicture);

extern _X_EXPORT int
 FreePicture(void *pPicture, XID pid);

extern _X_EXPORT void
CompositePicture(CARD8 op,
                 PicturePtr pSrc,
                 PicturePtr pMask,
                 PicturePtr pDst,
                 INT16 xSrc,
                 INT16 ySrc,
                 INT16 xMask,
                 INT16 yMask,
                 INT16 xDst, INT16 yDst, CARD16 width, CARD16 height);

extern _X_EXPORT void
CompositeGlyphs(CARD8 op,
                PicturePtr pSrc,
                PicturePtr pDst,
                PictFormatPtr maskFormat,
                INT16 xSrc,
                INT16 ySrc, int nlist, GlyphListPtr lists, GlyphPtr * glyphs);

extern _X_EXPORT void
CompositeRects(CARD8 op,
               PicturePtr pDst,
               xRenderColor * color, int nRect, xRectangle *rects);

extern _X_EXPORT void
CompositeTrapezoids(CARD8 op,
                    PicturePtr pSrc,
                    PicturePtr pDst,
                    PictFormatPtr maskFormat,
                    INT16 xSrc, INT16 ySrc, int ntrap, xTrapezoid * traps);

extern _X_EXPORT void
CompositeTriangles(CARD8 op,
                   PicturePtr pSrc,
                   PicturePtr pDst,
                   PictFormatPtr maskFormat,
                   INT16 xSrc,
                   INT16 ySrc, int ntriangles, xTriangle * triangles);

extern _X_EXPORT void
CompositeTriStrip(CARD8 op,
                  PicturePtr pSrc,
                  PicturePtr pDst,
                  PictFormatPtr maskFormat,
                  INT16 xSrc, INT16 ySrc, int npoints, xPointFixed * points);

extern _X_EXPORT void
CompositeTriFan(CARD8 op,
                PicturePtr pSrc,
                PicturePtr pDst,
                PictFormatPtr maskFormat,
                INT16 xSrc, INT16 ySrc, int npoints, xPointFixed * points);

Bool
 AnimCurInit(ScreenPtr pScreen);

int
AnimCursorCreate(CursorPtr *cursors, CARD32 *deltas, int ncursor,
                 CursorPtr *ppCursor, ClientPtr client, XID cid);

extern _X_EXPORT void
AddTraps(PicturePtr pPicture,
         INT16 xOff, INT16 yOff, int ntraps, xTrap * traps);

extern _X_EXPORT PicturePtr
CreateSolidPicture(Picture pid, xRenderColor * color, int *error);

extern _X_EXPORT PicturePtr
CreateLinearGradientPicture(Picture pid,
                            xPointFixed * p1,
                            xPointFixed * p2,
                            int nStops,
                            xFixed * stops, xRenderColor * colors, int *error);

extern _X_EXPORT PicturePtr
CreateRadialGradientPicture(Picture pid,
                            xPointFixed * inner,
                            xPointFixed * outer,
                            xFixed innerRadius,
                            xFixed outerRadius,
                            int nStops,
                            xFixed * stops, xRenderColor * colors, int *error);

extern _X_EXPORT PicturePtr
CreateConicalGradientPicture(Picture pid,
                             xPointFixed * center,
                             xFixed angle,
                             int nStops,
                             xFixed * stops, xRenderColor * colors, int *error);

#ifdef PANORAMIX
extern void PanoramiXRenderInit(void);
extern void PanoramiXRenderReset(void);
#endif

/*
 * matrix.c
 */

extern _X_EXPORT void
PictTransform_from_xRenderTransform(PictTransformPtr pict,
                                    xRenderTransform * render);

extern _X_EXPORT void
xRenderTransform_from_PictTransform(xRenderTransform * render,
                                    PictTransformPtr pict);

extern _X_EXPORT Bool
 PictureTransformPoint(PictTransformPtr transform, PictVectorPtr vector);

extern _X_EXPORT Bool
 PictureTransformPoint3d(PictTransformPtr transform, PictVectorPtr vector);

#endif                          /* _PICTURESTR_H_ */
@


1.10
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@a346 1

a349 1

d352 3
a354 3
extern _X_EXPORT RESTYPE PictureType;
extern _X_EXPORT RESTYPE PictFormatType;
extern _X_EXPORT RESTYPE GlyphSetType;
a380 12
 PictureDestroyWindow(WindowPtr pWindow);

extern _X_EXPORT Bool
 PictureCloseScreen(ScreenPtr pScreen);

extern _X_EXPORT void
 PictureStoreColors(ColormapPtr pColormap, int ndef, xColorItem * pdef);

extern _X_EXPORT Bool
 PictureInitIndexedFormat(ScreenPtr pScreen, PictFormatPtr format);

extern _X_EXPORT Bool
a386 3
PictureCreateDefaultFormats(ScreenPtr pScreen, int *nformatp);

extern _X_EXPORT PictFormatPtr
a400 1

a406 1

a418 1

a422 1

a428 3
extern _X_EXPORT void
 SetPictureToDefaults(PicturePtr pPicture);

a435 1

a444 1

a456 3
extern _X_EXPORT int
 FreePictFormat(void *pPictFormat, XID pid);

a457 1

a468 1

a476 1

a481 1

a488 1

a496 1

a503 1

a513 1

a517 1

d548 2
a549 2
extern _X_EXPORT void PanoramiXRenderInit(void);
extern _X_EXPORT void PanoramiXRenderReset(void);
a556 1

a560 1

@


1.9
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@a134 1
    unsigned int clientClipType:2;
d147 1
a147 1
    void *clientClip;
a475 3

extern _X_EXPORT void
 CopyPicture(PicturePtr pSrc, Mask mask, PicturePtr pDst);
@


1.8
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d148 1
a148 1
    pointer clientClip;
d192 1
a192 1
                                         int clipType, pointer value, int n);
d366 1
a366 1
    int tmprc = dixLookupResourceByType((pointer)&(pPicture), pid,\
d485 1
a485 1
 FreePicture(pointer pPicture, XID pid);
d488 1
a488 1
 FreePictFormat(pointer pPictFormat, XID pid);
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d366 4
a369 4
    int rc = dixLookupResourceByType((pointer)&(pPicture), pid,\
	                             PictureType, client, mode);\
    if (rc != Success)\
	return rc;\
d380 3
d387 1
a387 1
 PictureCloseScreen(int Index, ScreenPtr pScreen);
a548 2

extern _X_EXPORT void RenderExtensionInit(void);
@


1.6
log
@Update to xserver 1.11.2
@
text
@d33 4
a36 4
    CARD16	    red, redMask;
    CARD16	    green, greenMask;
    CARD16	    blue, blueMask;
    CARD16	    alpha, alphaMask;
d40 5
a44 5
    VisualID	    vid;
    ColormapPtr	    pColormap;
    int		    nvalues;
    xIndexValue	    *pValues;
    void	    *devPrivate;
d48 4
a51 4
    CARD32	    id;
    CARD32	    format;	    /* except bpp */
    unsigned char   type;
    unsigned char   depth;
d53 1
a53 1
    IndexFormatRec  index;
d124 37
a160 37
    DrawablePtr	    pDrawable;
    PictFormatPtr   pFormat;
    PictFormatShort format;	    /* PICT_FORMAT */
    int		    refcnt;
    CARD32	    id;
    unsigned int    repeat : 1;
    unsigned int    graphicsExposures : 1;
    unsigned int    subWindowMode : 1;
    unsigned int    polyEdge : 1;
    unsigned int    polyMode : 1;
    unsigned int    freeCompClip : 1;
    unsigned int    clientClipType : 2;
    unsigned int    componentAlpha : 1;
    unsigned int    repeatType : 2;
    unsigned int    filter : 3;
    unsigned int    stateChanges : CPLastBit;
    unsigned int    unused : 18 - CPLastBit;

    PicturePtr	    pNext;	    /* chain on same drawable */

    PicturePtr	    alphaMap;
    DDXPointRec	    alphaOrigin;

    DDXPointRec	    clipOrigin;
    pointer	    clientClip;

    unsigned long   serialNumber;

    RegionPtr	    pCompositeClip;

    PrivateRec	    *devPrivates;

    PictTransform   *transform;

    SourcePictPtr   pSourcePict;
    xFixed	    *filter_params;
    int		    filter_nparams;
d164 2
a165 2
						 xFixed *params, int nparams,
						 int *width, int *height);
d167 2
a168 2
    char			    *name;
    int				    id;
d170 1
a170 1
    int				    width, height;
d184 3
a186 3
    char	    *alias;
    int		    alias_id;
    int		    filter_id;
d189 89
a277 96
typedef int	(*CreatePictureProcPtr)	    (PicturePtr pPicture);
typedef void	(*DestroyPictureProcPtr)    (PicturePtr pPicture);
typedef int	(*ChangePictureClipProcPtr) (PicturePtr	pPicture,
					     int	clipType,
					     pointer    value,
					     int	n);
typedef void	(*DestroyPictureClipProcPtr)(PicturePtr	pPicture);

typedef int	(*ChangePictureTransformProcPtr)    (PicturePtr	    pPicture,
						     PictTransform  *transform);

typedef int	(*ChangePictureFilterProcPtr)	(PicturePtr	pPicture,
						 int		filter,
						 xFixed		*params,
						 int		nparams);

typedef void	(*DestroyPictureFilterProcPtr)	(PicturePtr pPicture);

typedef void	(*ChangePictureProcPtr)	    (PicturePtr pPicture,
					     Mask	mask);
typedef void	(*ValidatePictureProcPtr)    (PicturePtr pPicture,
					     Mask       mask);
typedef void	(*CompositeProcPtr)	    (CARD8	op,
					     PicturePtr pSrc,
					     PicturePtr pMask,
					     PicturePtr pDst,
					     INT16	xSrc,
					     INT16	ySrc,
					     INT16	xMask,
					     INT16	yMask,
					     INT16	xDst,
					     INT16	yDst,
					     CARD16	width,
					     CARD16	height);

typedef void	(*GlyphsProcPtr)	    (CARD8      op,
					     PicturePtr pSrc,
					     PicturePtr pDst,
					     PictFormatPtr  maskFormat,
					     INT16      xSrc,
					     INT16      ySrc,
					     int	nlists,
					     GlyphListPtr   lists,
					     GlyphPtr	*glyphs);

typedef void	(*CompositeRectsProcPtr)    (CARD8	    op,
					     PicturePtr	    pDst,
					     xRenderColor   *color,
					     int	    nRect,
					     xRectangle	    *rects);

typedef void	(*RasterizeTrapezoidProcPtr)(PicturePtr	    pMask,
					     xTrapezoid	    *trap,
					     int	    x_off,
					     int	    y_off);

typedef void	(*TrapezoidsProcPtr)	    (CARD8	    op,
					     PicturePtr	    pSrc,
					     PicturePtr	    pDst,
					     PictFormatPtr  maskFormat,
					     INT16	    xSrc,
					     INT16	    ySrc,
					     int	    ntrap,
					     xTrapezoid	    *traps);

typedef void	(*TrianglesProcPtr)	    (CARD8	    op,
					     PicturePtr	    pSrc,
					     PicturePtr	    pDst,
					     PictFormatPtr  maskFormat,
					     INT16	    xSrc,
					     INT16	    ySrc,
					     int	    ntri,
					     xTriangle	    *tris);

typedef Bool	(*InitIndexedProcPtr)	    (ScreenPtr	    pScreen,
					     PictFormatPtr  pFormat);

typedef void	(*CloseIndexedProcPtr)	    (ScreenPtr	    pScreen,
					     PictFormatPtr  pFormat);

typedef void	(*UpdateIndexedProcPtr)	    (ScreenPtr	    pScreen,
					     PictFormatPtr  pFormat,
					     int	    ndef,
					     xColorItem	    *pdef);

typedef void	(*AddTrapsProcPtr)	    (PicturePtr	    pPicture,
					     INT16	    xOff,
					     INT16	    yOff,
					     int	    ntrap,
					     xTrap	    *traps);

typedef void	(*AddTrianglesProcPtr)	    (PicturePtr	    pPicture,
					     INT16	    xOff,
					     INT16	    yOff,
					     int	    ntri,
					     xTriangle	    *tris);
d279 1
a279 2
typedef Bool	(*RealizeGlyphProcPtr)	    (ScreenPtr	    pScreen,
					     GlyphPtr	    glyph);
d281 1
a281 2
typedef void	(*UnrealizeGlyphProcPtr)    (ScreenPtr	    pScreen,
					     GlyphPtr	    glyph);
d284 3
a286 3
    PictFormatPtr		formats;
    PictFormatPtr		fallback;
    int				nformats;
d288 4
a291 4
    CreatePictureProcPtr	CreatePicture;
    DestroyPictureProcPtr	DestroyPicture;
    ChangePictureClipProcPtr	ChangePictureClip;
    DestroyPictureClipProcPtr	DestroyPictureClip;
d293 2
a294 2
    ChangePictureProcPtr	ChangePicture;
    ValidatePictureProcPtr	ValidatePicture;
d296 3
a298 3
    CompositeProcPtr		Composite;
    GlyphsProcPtr		Glyphs; /* unused */
    CompositeRectsProcPtr	CompositeRects;
d300 2
a301 2
    DestroyWindowProcPtr	DestroyWindow;
    CloseScreenProcPtr		CloseScreen;
d303 1
a303 1
    StoreColorsProcPtr		StoreColors;
d305 3
a307 3
    InitIndexedProcPtr		InitIndexed;
    CloseIndexedProcPtr		CloseIndexed;
    UpdateIndexedProcPtr	UpdateIndexed;
d309 1
a309 1
    int				subpixel;
d311 4
a314 4
    PictFilterPtr		filters;
    int				nfilters;
    PictFilterAliasPtr		filterAliases;
    int				nfilterAliases;
d320 1
a320 1
    ChangePictureTransformProcPtr   ChangePictureTransform;
d326 1
a326 1
    ChangePictureFilterProcPtr	ChangePictureFilter;
d328 1
a328 1
    DestroyPictureFilterProcPtr	DestroyPictureFilter;
d330 2
a331 2
    TrapezoidsProcPtr		Trapezoids;
    TrianglesProcPtr		Triangles;
d333 1
a333 1
    RasterizeTrapezoidProcPtr	RasterizeTrapezoid;
d335 1
a335 1
    AddTrianglesProcPtr		AddTriangles;
d337 1
a337 1
    AddTrapsProcPtr		AddTraps;
d339 2
a340 2
    RealizeGlyphProcPtr   	RealizeGlyph;
    UnrealizeGlyphProcPtr 	UnrealizeGlyph;
d342 3
d348 1
d352 1
d355 3
a357 3
extern _X_EXPORT RESTYPE	PictureType;
extern _X_EXPORT RESTYPE	PictFormatType;
extern _X_EXPORT RESTYPE	GlyphSetType;
d381 1
a381 1
PictureDestroyWindow (WindowPtr pWindow);
d384 1
a384 1
PictureCloseScreen (int Index, ScreenPtr pScreen);
d387 1
a387 1
PictureStoreColors (ColormapPtr pColormap, int ndef, xColorItem *pdef);
d390 1
a390 1
PictureInitIndexedFormat (ScreenPtr pScreen, PictFormatPtr format);
d393 1
a393 1
PictureSetSubpixelOrder (ScreenPtr pScreen, int subpixel);
d396 1
a396 1
PictureGetSubpixelOrder (ScreenPtr pScreen);
d399 1
a399 1
PictureCreateDefaultFormats (ScreenPtr pScreen, int *nformatp);
d402 1
a402 1
PictureMatchVisual (ScreenPtr pScreen, int depth, VisualPtr pVisual);
d405 1
a405 1
PictureMatchFormat (ScreenPtr pScreen, int depth, CARD32 format);
d408 1
a408 1
PictureInit (ScreenPtr pScreen, PictFormatPtr formats, int nformats);
d411 1
a411 1
PictureGetFilterId (char *filter, int len, Bool makeit);
d413 1
a413 2
extern _X_EXPORT char *
PictureGetFilterName (int id);
d416 5
a420 5
PictureAddFilter (ScreenPtr			    pScreen,
		  char				    *filter,
		  PictFilterValidateParamsProcPtr   ValidateParams,
		  int				    width,
		  int				    height);
d423 2
a424 1
PictureSetFilterAlias (ScreenPtr pScreen, char *filter, char *alias);
d427 1
a427 1
PictureSetDefaultFilters (ScreenPtr pScreen);
d430 1
a430 1
PictureResetFilters (ScreenPtr pScreen);
d433 1
a433 1
PictureFindFilter (ScreenPtr pScreen, char *name, int len);
d436 3
a438 2
SetPicturePictFilter (PicturePtr pPicture, PictFilterPtr pFilter,
		      xFixed *params, int nparams);
d441 3
a443 2
SetPictureFilter (PicturePtr pPicture, char *name, int len,
		  xFixed *params, int nparams);
d446 1
a446 1
PictureFinishInit (void);
d449 1
a449 1
SetPictureToDefaults (PicturePtr pPicture);
d452 4
a455 7
CreatePicture (Picture		pid,
	       DrawablePtr	pDrawable,
	       PictFormatPtr	pFormat,
	       Mask		mask,
	       XID		*list,
	       ClientPtr	client,
	       int		*error);
d458 3
a460 5
ChangePicture (PicturePtr	pPicture,
	       Mask		vmask,
	       XID		*vlist,
	       DevUnion		*ulist,
	       ClientPtr	client);
d463 3
a465 5
SetPictureClipRects (PicturePtr	pPicture,
		     int	xOrigin,
		     int	yOrigin,
		     int	nRect,
		     xRectangle	*rects);
d468 3
a470 4
SetPictureClipRegion (PicturePtr    pPicture,
		      int	    xOrigin,
		      int	    yOrigin,
		      RegionPtr	    pRegion);
d473 1
a473 2
SetPictureTransform (PicturePtr	    pPicture,
		     PictTransform  *transform);
d476 1
a476 3
CopyPicture (PicturePtr	pSrc,
	     Mask	mask,
	     PicturePtr	pDst);
d479 1
a479 1
ValidatePicture(PicturePtr pPicture);
d482 1
a482 2
FreePicture (pointer	pPicture,
	     XID	pid);
d485 1
a485 2
FreePictFormat (pointer	pPictFormat,
		XID     pid);
d488 10
a497 12
CompositePicture (CARD8		op,
		  PicturePtr	pSrc,
		  PicturePtr	pMask,
		  PicturePtr	pDst,
		  INT16		xSrc,
		  INT16		ySrc,
		  INT16		xMask,
		  INT16		yMask,
		  INT16		xDst,
		  INT16		yDst,
		  CARD16	width,
		  CARD16	height);
d500 7
a506 9
CompositeGlyphs (CARD8		op,
		 PicturePtr	pSrc,
		 PicturePtr	pDst,
		 PictFormatPtr	maskFormat,
		 INT16		xSrc,
		 INT16		ySrc,
		 int		nlist,
		 GlyphListPtr	lists,
		 GlyphPtr	*glyphs);
d509 4
a512 5
CompositeRects (CARD8		op,
		PicturePtr	pDst,
		xRenderColor	*color,
		int		nRect,
		xRectangle      *rects);
d515 6
a520 8
CompositeTrapezoids (CARD8	    op,
		     PicturePtr	    pSrc,
		     PicturePtr	    pDst,
		     PictFormatPtr  maskFormat,
		     INT16	    xSrc,
		     INT16	    ySrc,
		     int	    ntrap,
		     xTrapezoid	    *traps);
d523 7
a529 8
CompositeTriangles (CARD8	    op,
		    PicturePtr	    pSrc,
		    PicturePtr	    pDst,
		    PictFormatPtr   maskFormat,
		    INT16	    xSrc,
		    INT16	    ySrc,
		    int		    ntriangles,
		    xTriangle	    *triangles);
d532 6
a537 8
CompositeTriStrip (CARD8	    op,
		   PicturePtr	    pSrc,
		   PicturePtr	    pDst,
		   PictFormatPtr    maskFormat,
		   INT16	    xSrc,
		   INT16	    ySrc,
		   int		    npoints,
		   xPointFixed	    *points);
a539 8
CompositeTriFan (CARD8		op,
		 PicturePtr	pSrc,
		 PicturePtr	pDst,
		 PictFormatPtr	maskFormat,
		 INT16		xSrc,
		 INT16		ySrc,
		 int		npoints,
		 xPointFixed	*points);
d541 7
a547 1
extern _X_EXPORT void RenderExtensionInit (void);
d550 1
a550 1
AnimCurInit (ScreenPtr pScreen);
d553 3
a555 1
AnimCursorCreate (CursorPtr *cursors, CARD32 *deltas, int ncursor, CursorPtr *ppCursor, ClientPtr client, XID cid);
d558 3
a560 5
AddTraps (PicturePtr	pPicture,
	  INT16		xOff,
	  INT16		yOff,
	  int		ntraps,
	  xTrap		*traps);
d563 1
a563 3
CreateSolidPicture (Picture pid,
                    xRenderColor *color,
                    int *error);
d566 5
a570 7
CreateLinearGradientPicture (Picture pid,
                             xPointFixed *p1,
                             xPointFixed *p2,
                             int nStops,
                             xFixed *stops,
                             xRenderColor *colors,
                             int *error);
d573 7
a579 9
CreateRadialGradientPicture (Picture pid,
                             xPointFixed *inner,
                             xPointFixed *outer,
                             xFixed innerRadius,
                             xFixed outerRadius,
                             int nStops,
                             xFixed *stops,
                             xRenderColor *colors,
                             int *error);
d582 5
a586 7
CreateConicalGradientPicture (Picture pid,
                              xPointFixed *center,
                              xFixed angle,
                              int nStops,
                              xFixed *stops,
                              xRenderColor *colors,
                              int *error);
d589 2
a590 2
extern _X_EXPORT void PanoramiXRenderInit (void);
extern _X_EXPORT void PanoramiXRenderReset (void);
d598 3
a600 2
PictTransform_from_xRenderTransform (PictTransformPtr pict,
				     xRenderTransform *render);
d603 3
a605 2
xRenderTransform_from_PictTransform (xRenderTransform *render,
				     PictTransformPtr pict);
d608 1
a608 2
PictureTransformPoint (PictTransformPtr transform,
		       PictVectorPtr	vector);
d611 1
a611 2
PictureTransformPoint3d (PictTransformPtr transform,
                         PictVectorPtr	vector);
d613 1
a613 1
#endif /* _PICTURESTR_H_ */
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a67 4
#define SourcePictClassUnknown    0
#define SourcePictClassHorizontal 1
#define SourcePictClassVertical   2

a69 1
    unsigned int class;
a79 1
    unsigned int class;
a81 3
    int stopRange;
    CARD32 *colorTable;
    int colorTableSize;
a85 1
    unsigned int class;
a87 3
    int stopRange;
    CARD32 *colorTable;
    int colorTableSize;
a99 1
    unsigned int class;
a101 3
    int stopRange;
    CARD32 *colorTable;
    int colorTableSize;
a103 4
    double cdx;
    double cdy;
    double dr;
    double A;
a107 1
    unsigned int class;
a109 3
    int stopRange;
    CARD32 *colorTable;
    int colorTableSize;
a128 2
    PicturePtr	    pNext;	    /* chain on same drawable */

d138 5
a142 1
    unsigned int    unused : 21;
a149 3
    Atom	    dither;

    unsigned long   stateChanges;
d158 1
a158 1
    int		    filter;
a160 1
    SourcePictPtr   pSourcePict;
d181 1
a262 18
typedef void	(*TriStripProcPtr)	    (CARD8	    op,
					     PicturePtr	    pSrc,
					     PicturePtr	    pDst,
					     PictFormatPtr  maskFormat,
					     INT16	    xSrc,
					     INT16	    ySrc,
					     int	    npoint,
					     xPointFixed    *points);

typedef void	(*TriFanProcPtr)	    (CARD8	    op,
					     PicturePtr	    pSrc,
					     PicturePtr	    pDst,
					     PictFormatPtr  maskFormat,
					     INT16	    xSrc,
					     INT16	    ySrc,
					     int	    npoint,
					     xPointFixed    *points);

a340 2
    TriStripProcPtr		TriStrip;
    TriFanProcPtr		TriFan;
a572 5

extern _X_EXPORT CARD32
PictureGradientColor (PictGradientStopPtr stop1,
		      PictGradientStopPtr stop2,
		      CARD32	          x);
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d399 6
a404 2
extern _X_EXPORT DevPrivateKey	PictureScreenPrivateKey;
extern _X_EXPORT DevPrivateKey	PictureWindowPrivateKey;
d410 1
a410 1
#define GetPictureScreenIfSet(s) GetPictureScreen(s)
d415 1
a415 1
#define VERIFY_PICTURE(pPicture, pid, client, mode, err) {\
d419 1
a419 1
	return (rc == BadValue) ? err : rc;\
d422 1
a422 1
#define VERIFY_ALPHA(pPicture, pid, client, mode, err) {\
d426 1
a426 1
	VERIFY_PICTURE(pPicture, pid, client, mode, err); \
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d399 5
a403 5
extern DevPrivateKey	PictureScreenPrivateKey;
extern DevPrivateKey	PictureWindowPrivateKey;
extern RESTYPE		PictureType;
extern RESTYPE		PictFormatType;
extern RESTYPE		GlyphSetType;
d412 4
a415 5
    pPicture = SecurityLookupIDByType(client, pid, PictureType, mode);\
    if (!pPicture) { \
	client->errorValue = pid; \
	return err; \
    } \
d426 1
a426 1
Bool
d429 1
a429 1
Bool
d432 1
a432 1
void
d435 1
a435 1
Bool
d438 1
a438 1
Bool
d441 1
a441 1
int
d444 1
a444 1
PictFormatPtr
d447 1
a447 1
PictFormatPtr
d450 1
a450 1
PictFormatPtr
d453 1
a453 1
Bool
d456 1
a456 1
int
d459 1
a459 1
char *
d462 1
a462 1
int
d469 1
a469 1
Bool
d472 1
a472 1
Bool
d475 1
a475 1
void
d478 1
a478 1
PictFilterPtr
d481 1
a481 1
int
d485 1
a485 1
int
d489 1
a489 1
Bool
d492 1
a492 1
void
d495 1
a495 1
PicturePtr
d504 1
a504 1
int
d511 1
a511 1
int
d518 1
a518 1
int
d524 1
a524 1
int
d528 1
a528 1
void
d533 1
a533 1
void
d536 1
a536 1
int
d540 1
a540 1
int
d544 1
a544 1
void
d558 1
a558 1
void
d569 1
a569 1
void
d576 1
a576 1
void
d586 1
a586 1
void
d596 1
a596 1
void
d606 1
a606 1
void
d616 1
a616 1
CARD32
d621 1
a621 1
void RenderExtensionInit (void);
d629 1
a629 1
void
d636 1
a636 5
pixman_image_t *
PixmanImageFromPicture (PicturePtr pPict,
			Bool hasClip);

PicturePtr
d641 1
a641 1
PicturePtr
d650 1
a650 1
PicturePtr
d661 1
a661 1
PicturePtr
d671 2
a672 2
void PanoramiXRenderInit (void);
void PanoramiXRenderReset (void);
d679 1
a679 1
void
d683 1
a683 1
void
d687 1
a687 1
Bool
d691 1
a691 1
Bool
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d59 3
d190 3
a192 2
typedef Bool (*PictFilterValidateParamsProcPtr) (PicturePtr pPicture, int id,
						 xFixed *params, int nparams);
d197 1
a410 3
#define GetGlyphPrivatesForScreen(glyph, s) \
    ((PrivateRec **)dixLookupPrivateAddr(&(glyph)->devPrivates, s))

d466 3
a468 1
		  PictFilterValidateParamsProcPtr   ValidateParams);
d483 6
a488 1
SetPictureFilter (PicturePtr pPicture, char *name, int len, xFixed *params, int nparams);
a616 8
Bool
PictureTransformPoint (PictTransformPtr transform,
		       PictVectorPtr	vector);

Bool
PictureTransformPoint3d (PictTransformPtr transform,
                         PictVectorPtr	vector);

d679 20
@


1.1
log
@Initial revision
@
text
@a1 2
 * $Id$
 *
d27 1
a28 1
#include "scrnintstr.h"
d30 1
d56 2
a57 7
typedef struct _PictVector {
    xFixed	    vector[3];
} PictVector, *PictVectorPtr;

typedef struct _PictTransform {
    xFixed	    matrix[3][3];
} PictTransform, *PictTransformPtr;
d65 4
d71 1
d82 1
d85 3
a87 1
    CARD32 colorTable[PICT_GRADIENT_STOPTABLE_SIZE];
d92 1
d95 3
a97 1
    CARD32 colorTable[PICT_GRADIENT_STOPTABLE_SIZE];
d102 6
d110 1
d113 9
a121 8
    CARD32 colorTable[PICT_GRADIENT_STOPTABLE_SIZE];
    double fx;
    double fy;
    double dx;
    double dy;
    double a;
    double m;
    double b;
d126 1
d129 3
a131 1
    CARD32 colorTable[PICT_GRADIENT_STOPTABLE_SIZE];
d177 1
a177 1
    DevUnion	    *devPrivates;
a331 4
    int				totalPictureSize;
    unsigned int		*PicturePrivateSizes;
    int				PicturePrivateLen;

d345 1
a345 1
    GlyphsProcPtr		Glyphs;
a388 5
    int			  	totalGlyphPrivateSize;
    unsigned int	  	*glyphPrivateSizes;
    int			  	glyphPrivateLen;
    int			  	glyphPrivateOffset;

d394 2
a395 2
extern int		PictureScreenPrivateIndex;
extern int		PictureWindowPrivateIndex;
d400 5
a404 5
#define GetPictureScreen(s) ((PictureScreenPtr) ((s)->devPrivates[PictureScreenPrivateIndex].ptr))
#define GetPictureScreenIfSet(s) ((PictureScreenPrivateIndex != -1) ? GetPictureScreen(s) : NULL)
#define SetPictureScreen(s,p) ((s)->devPrivates[PictureScreenPrivateIndex].ptr = (pointer) (p))
#define GetPictureWindow(w) ((PicturePtr) ((w)->devPrivates[PictureWindowPrivateIndex].ptr))
#define SetPictureWindow(w,p) ((w)->devPrivates[PictureWindowPrivateIndex].ptr = (pointer) (p))
d406 2
a407 2
#define GetGlyphPrivatesForScreen(glyph, s)				\
    ((glyph)->devPrivates + (GetPictureScreen (s))->glyphPrivateOffset)
a424 9
void
ResetPicturePrivateIndex (void);

int
AllocatePicturePrivateIndex (void);

Bool
AllocatePicturePrivate (ScreenPtr pScreen, int index2, unsigned int amount);

d435 1
a435 1
PictureInitIndexedFormats (ScreenPtr pScreen);
a487 9
AllocatePicture (ScreenPtr  pScreen);

#if 0
Bool
miPictureInit (ScreenPtr pScreen, PictFormatPtr formats, int nformats);
#endif


PicturePtr
d616 5
d627 1
a627 1
AnimCursorCreate (CursorPtr *cursors, CARD32 *deltas, int ncursor, CursorPtr *ppCursor);
d635 4
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
d29 1
a30 1
#include "glyphstr.h"
d57 7
a63 2
typedef struct pixman_vector PictVector, *PictVectorPtr;
typedef struct pixman_transform PictTransform, *PictTransformPtr;
a70 4
#define SourcePictClassUnknown    0
#define SourcePictClassHorizontal 1
#define SourcePictClassVertical   2

a72 1
    unsigned int class;
a82 1
    unsigned int class;
d85 1
a85 3
    int stopRange;
    CARD32 *colorTable;
    int colorTableSize;
a89 1
    unsigned int class;
d92 1
a92 3
    int stopRange;
    CARD32 *colorTable;
    int colorTableSize;
a96 6
typedef struct _PictCircle {
    xFixed x;
    xFixed y;
    xFixed radius;
} PictCircle, *PictCirclePtr;

a98 1
    unsigned int class;
d101 8
a108 9
    int stopRange;
    CARD32 *colorTable;
    int colorTableSize;
    PictCircle c1;
    PictCircle c2;
    double cdx;
    double cdy;
    double dr;
    double A;
a112 1
    unsigned int class;
d115 1
a115 3
    int stopRange;
    CARD32 *colorTable;
    int colorTableSize;
a626 5
CARD32
PictureGradientColor (PictGradientStopPtr stop1,
		      PictGradientStopPtr stop2,
		      CARD32	          x);

a640 4

pixman_image_t *
PixmanImageFromPicture (PicturePtr pPict,
			Bool hasClip);
@

