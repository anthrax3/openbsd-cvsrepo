head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.6
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.12.09.17.58.53;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	vcnjRBuLQw44cPHf;

1.7
date	2014.09.27.17.53.05;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	cVXoV5PxI8YrEaVA;

1.6
date	2013.06.07.17.28.56;	author matthieu;	state Exp;
branches
	1.6.4.1
	1.6.6.1;
next	1.5;

1.5
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.11;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.38;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.08;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.08;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.06.05;	author matthieu;	state Exp;
branches;
next	;

1.6.4.1
date	2014.12.09.18.00.13;	author matthieu;	state Exp;
branches;
next	;
commitid	xg6qoZmMsIovdaEA;

1.6.6.1
date	2014.12.09.17.59.33;	author matthieu;	state Exp;
branches;
next	;
commitid	TlkXlepp8erAnwcR;


desc
@@


1.8
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@/*
 * Copyright Â© 2002 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "xfixesint.h"
#include "xace.h"

static RESTYPE SelectionClientType, SelectionWindowType;
static Bool SelectionCallbackRegistered = FALSE;

/*
 * There is a global list of windows selecting for selection events
 * on every selection.  This should be plenty efficient for the
 * expected usage, if it does become a problem, it should be easily
 * replaced with a hash table of some kind keyed off the selection atom
 */

typedef struct _SelectionEvent *SelectionEventPtr;

typedef struct _SelectionEvent {
    SelectionEventPtr next;
    Atom selection;
    CARD32 eventMask;
    ClientPtr pClient;
    WindowPtr pWindow;
    XID clientResource;
} SelectionEventRec;

static SelectionEventPtr selectionEvents;

static void
XFixesSelectionCallback(CallbackListPtr *callbacks, void *data, void *args)
{
    SelectionEventPtr e;
    SelectionInfoRec *info = (SelectionInfoRec *) args;
    Selection *selection = info->selection;
    int subtype;
    CARD32 eventMask;

    switch (info->kind) {
    case SelectionSetOwner:
        subtype = XFixesSetSelectionOwnerNotify;
        eventMask = XFixesSetSelectionOwnerNotifyMask;
        break;
    case SelectionWindowDestroy:
        subtype = XFixesSelectionWindowDestroyNotify;
        eventMask = XFixesSelectionWindowDestroyNotifyMask;
        break;
    case SelectionClientClose:
        subtype = XFixesSelectionClientCloseNotify;
        eventMask = XFixesSelectionClientCloseNotifyMask;
        break;
    default:
        return;
    }
    for (e = selectionEvents; e; e = e->next) {
        if (e->selection == selection->selection && (e->eventMask & eventMask)) {
            xXFixesSelectionNotifyEvent ev = {
                .type = XFixesEventBase + XFixesSelectionNotify,
                .subtype = subtype,
                .window = e->pWindow->drawable.id,
                .owner = (subtype == XFixesSetSelectionOwnerNotify) ?
                            selection->window : 0,
                .selection = e->selection,
                .timestamp = currentTime.milliseconds,
                .selectionTimestamp = selection->lastTimeChanged.milliseconds
            };
            WriteEventsToClient(e->pClient, 1, (xEvent *) &ev);
        }
    }
}

static Bool
CheckSelectionCallback(void)
{
    if (selectionEvents) {
        if (!SelectionCallbackRegistered) {
            if (!AddCallback(&SelectionCallback, XFixesSelectionCallback, NULL))
                return FALSE;
            SelectionCallbackRegistered = TRUE;
        }
    }
    else {
        if (SelectionCallbackRegistered) {
            DeleteCallback(&SelectionCallback, XFixesSelectionCallback, NULL);
            SelectionCallbackRegistered = FALSE;
        }
    }
    return TRUE;
}

#define SelectionAllEvents (XFixesSetSelectionOwnerNotifyMask |\
			    XFixesSelectionWindowDestroyNotifyMask |\
			    XFixesSelectionClientCloseNotifyMask)

static int
XFixesSelectSelectionInput(ClientPtr pClient,
                           Atom selection, WindowPtr pWindow, CARD32 eventMask)
{
    void *val;
    int rc;
    SelectionEventPtr *prev, e;

    rc = XaceHook(XACE_SELECTION_ACCESS, pClient, selection, DixGetAttrAccess);
    if (rc != Success)
        return rc;

    for (prev = &selectionEvents; (e = *prev); prev = &e->next) {
        if (e->selection == selection &&
            e->pClient == pClient && e->pWindow == pWindow) {
            break;
        }
    }
    if (!eventMask) {
        if (e) {
            FreeResource(e->clientResource, 0);
        }
        return Success;
    }
    if (!e) {
        e = (SelectionEventPtr) malloc(sizeof(SelectionEventRec));
        if (!e)
            return BadAlloc;

        e->next = 0;
        e->selection = selection;
        e->pClient = pClient;
        e->pWindow = pWindow;
        e->clientResource = FakeClientID(pClient->index);

        /*
         * Add a resource hanging from the window to
         * catch window destroy
         */
        rc = dixLookupResourceByType(&val, pWindow->drawable.id,
                                     SelectionWindowType, serverClient,
                                     DixGetAttrAccess);
        if (rc != Success)
            if (!AddResource(pWindow->drawable.id, SelectionWindowType,
                             (void *) pWindow)) {
                free(e);
                return BadAlloc;
            }

        if (!AddResource(e->clientResource, SelectionClientType, (void *) e))
            return BadAlloc;

        *prev = e;
        if (!CheckSelectionCallback()) {
            FreeResource(e->clientResource, 0);
            return BadAlloc;
        }
    }
    e->eventMask = eventMask;
    return Success;
}

int
ProcXFixesSelectSelectionInput(ClientPtr client)
{
    REQUEST(xXFixesSelectSelectionInputReq);
    WindowPtr pWin;
    int rc;

    REQUEST_SIZE_MATCH(xXFixesSelectSelectionInputReq);
    rc = dixLookupWindow(&pWin, stuff->window, client, DixGetAttrAccess);
    if (rc != Success)
        return rc;
    if (stuff->eventMask & ~SelectionAllEvents) {
        client->errorValue = stuff->eventMask;
        return BadValue;
    }
    return XFixesSelectSelectionInput(client, stuff->selection,
                                      pWin, stuff->eventMask);
}

int
SProcXFixesSelectSelectionInput(ClientPtr client)
{
    REQUEST(xXFixesSelectSelectionInputReq);

    REQUEST_SIZE_MATCH(xXFixesSelectSelectionInputReq);
    swaps(&stuff->length);
    swapl(&stuff->window);
    swapl(&stuff->selection);
    swapl(&stuff->eventMask);
    return (*ProcXFixesVector[stuff->xfixesReqType]) (client);
}

void
SXFixesSelectionNotifyEvent(xXFixesSelectionNotifyEvent * from,
                            xXFixesSelectionNotifyEvent * to)
{
    to->type = from->type;
    cpswaps(from->sequenceNumber, to->sequenceNumber);
    cpswapl(from->window, to->window);
    cpswapl(from->owner, to->owner);
    cpswapl(from->selection, to->selection);
    cpswapl(from->timestamp, to->timestamp);
    cpswapl(from->selectionTimestamp, to->selectionTimestamp);
}

static int
SelectionFreeClient(void *data, XID id)
{
    SelectionEventPtr old = (SelectionEventPtr) data;
    SelectionEventPtr *prev, e;

    for (prev = &selectionEvents; (e = *prev); prev = &e->next) {
        if (e == old) {
            *prev = e->next;
            free(e);
            CheckSelectionCallback();
            break;
        }
    }
    return 1;
}

static int
SelectionFreeWindow(void *data, XID id)
{
    WindowPtr pWindow = (WindowPtr) data;
    SelectionEventPtr e, next;

    for (e = selectionEvents; e; e = next) {
        next = e->next;
        if (e->pWindow == pWindow) {
            FreeResource(e->clientResource, 0);
        }
    }
    return 1;
}

Bool
XFixesSelectionInit(void)
{
    SelectionClientType = CreateNewResourceType(SelectionFreeClient,
                                                "XFixesSelectionClient");
    SelectionWindowType = CreateNewResourceType(SelectionFreeWindow,
                                                "XFixesSelectionWindow");
    return SelectionClientType && SelectionWindowType;
}
@


1.7
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d204 1
@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d54 1
a54 1
XFixesSelectionCallback(CallbackListPtr *callbacks, pointer data, pointer args)
d122 1
a122 1
    pointer val;
d162 1
a162 1
                             (pointer) pWindow)) {
d167 1
a167 1
        if (!AddResource(e->clientResource, SelectionClientType, (pointer) e))
d225 1
a225 1
SelectionFreeClient(pointer data, XID id)
d242 1
a242 1
SelectionFreeWindow(pointer data, XID id)
@


1.6.4.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a203 1
    REQUEST_SIZE_MATCH(xXFixesSelectSelectionInputReq);
@


1.6.6.1
log
@Protocol handling issues in X Window System servers
One year after Ilja van Sprundel, discovered and reported a large number
of issues in the way the X server code base handles requests from X clients,
they have been fixed.
@
text
@a203 1
    REQUEST_SIZE_MATCH(xXFixesSelectSelectionInputReq);
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d80 10
a89 13
            xXFixesSelectionNotifyEvent ev;

            memset(&ev, 0, sizeof(xXFixesSelectionNotifyEvent));
            ev.type = XFixesEventBase + XFixesSelectionNotify;
            ev.subtype = subtype;
            ev.window = e->pWindow->drawable.id;
            if (subtype == XFixesSetSelectionOwnerNotify)
                ev.owner = selection->window;
            else
                ev.owner = 0;
            ev.selection = e->selection;
            ev.timestamp = currentTime.milliseconds;
            ev.selectionTimestamp = selection->lastTimeChanged.milliseconds;
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d30 2
a31 2
static RESTYPE		SelectionClientType, SelectionWindowType;
static Bool		SelectionCallbackRegistered = FALSE;
d43 6
a48 6
    SelectionEventPtr	next;
    Atom		selection;
    CARD32		eventMask;
    ClientPtr		pClient;
    WindowPtr		pWindow;
    XID			clientResource;
d51 1
a51 1
static SelectionEventPtr	selectionEvents;
d54 1
a54 1
XFixesSelectionCallback (CallbackListPtr *callbacks, pointer data, pointer args)
d56 6
a61 6
    SelectionEventPtr	e;
    SelectionInfoRec	*info = (SelectionInfoRec *) args;
    Selection		*selection = info->selection;
    int			subtype;
    CARD32		eventMask;
    
d64 3
a66 3
	subtype = XFixesSetSelectionOwnerNotify;
	eventMask = XFixesSetSelectionOwnerNotifyMask;
	break;
d68 3
a70 3
	subtype = XFixesSelectionWindowDestroyNotify;
	eventMask = XFixesSelectionWindowDestroyNotifyMask;
	break;
d72 3
a74 3
	subtype = XFixesSelectionClientCloseNotify;
	eventMask = XFixesSelectionClientCloseNotifyMask;
	break;
d76 1
a76 1
	return;
d78 17
a94 20
    for (e = selectionEvents; e; e = e->next)
    {
	if (e->selection == selection->selection && 
	    (e->eventMask & eventMask))
	{
	    xXFixesSelectionNotifyEvent	ev;

	    memset(&ev, 0, sizeof(xXFixesSelectionNotifyEvent));
	    ev.type = XFixesEventBase + XFixesSelectionNotify;
	    ev.subtype = subtype;
	    ev.window = e->pWindow->drawable.id;
	    if (subtype == XFixesSetSelectionOwnerNotify)
		ev.owner = selection->window;
	    else
		ev.owner = 0;
	    ev.selection = e->selection;
	    ev.timestamp = currentTime.milliseconds;
	    ev.selectionTimestamp = selection->lastTimeChanged.milliseconds;
	    WriteEventsToClient (e->pClient, 1, (xEvent *) &ev);
	}
d99 1
a99 1
CheckSelectionCallback (void)
d101 12
a112 16
    if (selectionEvents)
    {
	if (!SelectionCallbackRegistered)
	{
	    if (!AddCallback (&SelectionCallback, XFixesSelectionCallback, NULL))
		return FALSE;
	    SelectionCallbackRegistered = TRUE;
	}
    }
    else
    {
	if (SelectionCallbackRegistered)
	{
	    DeleteCallback (&SelectionCallback, XFixesSelectionCallback, NULL);
	    SelectionCallbackRegistered = FALSE;
	}
d122 2
a123 4
XFixesSelectSelectionInput (ClientPtr	pClient,
			    Atom	selection,
			    WindowPtr	pWindow,
			    CARD32	eventMask)
d127 1
a127 1
    SelectionEventPtr	*prev, e;
d131 1
a131 1
	return rc;
d133 45
a177 53
    for (prev = &selectionEvents; (e = *prev); prev = &e->next)
    {
	if (e->selection == selection &&
	    e->pClient == pClient &&
	    e->pWindow == pWindow)
	{
	    break;
	}
    }
    if (!eventMask)
    {
	if (e)
	{
	    FreeResource (e->clientResource, 0);
	}
	return Success;
    }
    if (!e)
    {
	e = (SelectionEventPtr) malloc(sizeof (SelectionEventRec));
	if (!e)
	    return BadAlloc;

	e->next = 0;
	e->selection = selection;
	e->pClient = pClient;
	e->pWindow = pWindow;
	e->clientResource = FakeClientID(pClient->index);

	/*
	 * Add a resource hanging from the window to
	 * catch window destroy
	 */
	rc = dixLookupResourceByType (&val, pWindow->drawable.id,
				      SelectionWindowType, serverClient,
				      DixGetAttrAccess);
	if (rc != Success)
	    if (!AddResource (pWindow->drawable.id, SelectionWindowType,
			      (pointer) pWindow))
	    {
		free(e);
		return BadAlloc;
	    }

	if (!AddResource (e->clientResource, SelectionClientType, (pointer) e))
	    return BadAlloc;

	*prev = e;
	if (!CheckSelectionCallback ())
	{
	    FreeResource (e->clientResource, 0);
	    return BadAlloc;
	}
d184 1
a184 1
ProcXFixesSelectSelectionInput (ClientPtr client)
d186 3
a188 3
    REQUEST (xXFixesSelectSelectionInputReq);
    WindowPtr	pWin;
    int		rc;
d190 1
a190 1
    REQUEST_SIZE_MATCH (xXFixesSelectSelectionInputReq);
d194 3
a196 4
    if (stuff->eventMask & ~SelectionAllEvents)
    {
	client->errorValue = stuff->eventMask;
	return BadValue;
d198 2
a199 2
    return XFixesSelectSelectionInput (client, stuff->selection,
				       pWin, stuff->eventMask);
d203 1
a203 1
SProcXFixesSelectSelectionInput (ClientPtr client)
a204 1
    register int n;
d207 5
a211 5
    swaps(&stuff->length, n);
    swapl(&stuff->window, n);
    swapl(&stuff->selection, n);
    swapl(&stuff->eventMask, n);
    return (*ProcXFixesVector[stuff->xfixesReqType])(client);
d213 1
a213 1
    
d215 2
a216 2
SXFixesSelectionNotifyEvent (xXFixesSelectionNotifyEvent *from,
			     xXFixesSelectionNotifyEvent *to)
d219 6
a224 6
    cpswaps (from->sequenceNumber, to->sequenceNumber);
    cpswapl (from->window, to->window);
    cpswapl (from->owner, to->owner);
    cpswapl (from->selection, to->selection);
    cpswapl (from->timestamp, to->timestamp);
    cpswapl (from->selectionTimestamp, to->selectionTimestamp);
d228 1
a228 1
SelectionFreeClient (pointer data, XID id)
d230 10
a239 12
    SelectionEventPtr	old = (SelectionEventPtr) data;
    SelectionEventPtr	*prev, e;
    
    for (prev = &selectionEvents; (e = *prev); prev = &e->next)
    {
	if (e == old)
	{
	    *prev = e->next;
	    free(e);
	    CheckSelectionCallback ();
	    break;
	}
d245 1
a245 1
SelectionFreeWindow (pointer data, XID id)
d247 2
a248 2
    WindowPtr		pWindow = (WindowPtr) data;
    SelectionEventPtr	e, next;
d250 5
a254 7
    for (e = selectionEvents; e; e = next)
    {
	next = e->next;
	if (e->pWindow == pWindow)
	{
	    FreeResource (e->clientResource, 0);
	}
d260 1
a260 1
XFixesSelectionInit (void)
d263 1
a263 1
						"XFixesSelectionClient");
d265 1
a265 1
						"XFixesSelectionWindow");
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d81 1
a81 2
	    (e->eventMask & eventMask) &&
	    !e->pClient->clientGone)
a87 1
	    ev.sequenceNumber = e->pClient->sequence;
d161 1
a161 1
	e = (SelectionEventPtr) xalloc (sizeof (SelectionEventRec));
d182 1
a182 1
		xfree (e);
d214 1
a214 1
	return( BadValue );
d257 1
a257 1
	    xfree (e);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d86 1
d136 1
d177 4
a180 1
	if (!LookupIDByType(pWindow->drawable.id, SelectionWindowType))
d287 4
a290 2
    SelectionClientType = CreateNewResourceType(SelectionFreeClient);
    SelectionWindowType = CreateNewResourceType(SelectionFreeWindow);
@


1.1
log
@Initial revision
@
text
@a1 2
 * $Id$
 *
d28 1
d80 3
a82 1
	if (e->selection == selection->selection && (e->eventMask & eventMask))
d135 1
d138 4
d202 1
d205 3
a207 4
    pWin = (WindowPtr)SecurityLookupWindow(stuff->window, client,
					   SecurityReadAccess);
    if (!pWin)
        return(BadWindow);
d227 1
a227 1
    return ProcXFixesSelectSelectionInput(client);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
d81 1
a81 3
	if (e->selection == selection->selection && 
	    (e->eventMask & eventMask) &&
	    !e->pClient->clientGone)
a195 1
    int		rc;
d198 4
a201 3
    rc = dixLookupWindow(&pWin, stuff->window, client, DixReadAccess);
    if (rc != Success)
        return rc;
@

