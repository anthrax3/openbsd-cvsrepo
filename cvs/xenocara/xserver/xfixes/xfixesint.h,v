head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.14
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.12
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.8
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.06.07.17.28.56;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.58;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.38;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.09;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.09;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.06.05;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/*
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * Copyright 2010 Red Hat, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Copyright Â© 2002 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#ifndef _XFIXESINT_H_
#define _XFIXESINT_H_

#include <X11/X.h>
#include <X11/Xproto.h>
#include "misc.h"
#include "os.h"
#include "dixstruct.h"
#include "extnsionst.h"
#include <X11/extensions/xfixesproto.h>
#include "windowstr.h"
#include "selection.h"
#include "xfixes.h"

extern int XFixesEventBase;

typedef struct _XFixesClient {
    CARD32 major_version;
    CARD32 minor_version;
} XFixesClientRec, *XFixesClientPtr;

#define GetXFixesClient(pClient) ((XFixesClientPtr)dixLookupPrivate(&(pClient)->devPrivates, XFixesClientPrivateKey))

extern int (*ProcXFixesVector[XFixesNumberRequests]) (ClientPtr);

/* Save set */
int
 ProcXFixesChangeSaveSet(ClientPtr client);

int
 SProcXFixesChangeSaveSet(ClientPtr client);

/* Selection events */
int
 ProcXFixesSelectSelectionInput(ClientPtr client);

int
 SProcXFixesSelectSelectionInput(ClientPtr client);

void

SXFixesSelectionNotifyEvent(xXFixesSelectionNotifyEvent * from,
                            xXFixesSelectionNotifyEvent * to);
Bool
 XFixesSelectionInit(void);

/* Cursor notification */
Bool
 XFixesCursorInit(void);

int
 ProcXFixesSelectCursorInput(ClientPtr client);

int
 SProcXFixesSelectCursorInput(ClientPtr client);

void

SXFixesCursorNotifyEvent(xXFixesCursorNotifyEvent * from,
                         xXFixesCursorNotifyEvent * to);

int
 ProcXFixesGetCursorImage(ClientPtr client);

int
 SProcXFixesGetCursorImage(ClientPtr client);

/* Cursor names (Version 2) */

int
 ProcXFixesSetCursorName(ClientPtr client);

int
 SProcXFixesSetCursorName(ClientPtr client);

int
 ProcXFixesGetCursorName(ClientPtr client);

int
 SProcXFixesGetCursorName(ClientPtr client);

int
 ProcXFixesGetCursorImageAndName(ClientPtr client);

int
 SProcXFixesGetCursorImageAndName(ClientPtr client);

/* Cursor replacement (Version 2) */

int
 ProcXFixesChangeCursor(ClientPtr client);

int
 SProcXFixesChangeCursor(ClientPtr client);

int
 ProcXFixesChangeCursorByName(ClientPtr client);

int
 SProcXFixesChangeCursorByName(ClientPtr client);

/* Region objects (Version 2* */
Bool
 XFixesRegionInit(void);

int
 ProcXFixesCreateRegion(ClientPtr client);

int
 SProcXFixesCreateRegion(ClientPtr client);

int
 ProcXFixesCreateRegionFromBitmap(ClientPtr client);

int
 SProcXFixesCreateRegionFromBitmap(ClientPtr client);

int
 ProcXFixesCreateRegionFromWindow(ClientPtr client);

int
 SProcXFixesCreateRegionFromWindow(ClientPtr client);

int
 ProcXFixesCreateRegionFromGC(ClientPtr client);

int
 SProcXFixesCreateRegionFromGC(ClientPtr client);

int
 ProcXFixesCreateRegionFromPicture(ClientPtr client);

int
 SProcXFixesCreateRegionFromPicture(ClientPtr client);

int
 ProcXFixesDestroyRegion(ClientPtr client);

int
 SProcXFixesDestroyRegion(ClientPtr client);

int
 ProcXFixesSetRegion(ClientPtr client);

int
 SProcXFixesSetRegion(ClientPtr client);

int
 ProcXFixesCopyRegion(ClientPtr client);

int
 SProcXFixesCopyRegion(ClientPtr client);

int
 ProcXFixesCombineRegion(ClientPtr client);

int
 SProcXFixesCombineRegion(ClientPtr client);

int
 ProcXFixesInvertRegion(ClientPtr client);

int
 SProcXFixesInvertRegion(ClientPtr client);

int
 ProcXFixesTranslateRegion(ClientPtr client);

int
 SProcXFixesTranslateRegion(ClientPtr client);

int
 ProcXFixesRegionExtents(ClientPtr client);

int
 SProcXFixesRegionExtents(ClientPtr client);

int
 ProcXFixesFetchRegion(ClientPtr client);

int
 SProcXFixesFetchRegion(ClientPtr client);

int
 ProcXFixesSetGCClipRegion(ClientPtr client);

int
 SProcXFixesSetGCClipRegion(ClientPtr client);

int
 ProcXFixesSetWindowShapeRegion(ClientPtr client);

int
 SProcXFixesSetWindowShapeRegion(ClientPtr client);

int
 ProcXFixesSetPictureClipRegion(ClientPtr client);

int
 SProcXFixesSetPictureClipRegion(ClientPtr client);

int
 ProcXFixesExpandRegion(ClientPtr client);

int
 SProcXFixesExpandRegion(ClientPtr client);

int
 PanoramiXFixesSetGCClipRegion(ClientPtr client);

int
 PanoramiXFixesSetWindowShapeRegion(ClientPtr client);

int
 PanoramiXFixesSetPictureClipRegion(ClientPtr client);

/* Cursor Visibility (Version 4) */

int
 ProcXFixesHideCursor(ClientPtr client);

int
 SProcXFixesHideCursor(ClientPtr client);

int
 ProcXFixesShowCursor(ClientPtr client);

int
 SProcXFixesShowCursor(ClientPtr client);

/* Version 5 */

int
 ProcXFixesCreatePointerBarrier(ClientPtr client);

int
 SProcXFixesCreatePointerBarrier(ClientPtr client);

int
 ProcXFixesDestroyPointerBarrier(ClientPtr client);

int
 SProcXFixesDestroyPointerBarrier(ClientPtr client);

/* Xinerama */
#ifdef PANORAMIX
extern int (*PanoramiXSaveXFixesVector[XFixesNumberRequests]) (ClientPtr);
void PanoramiXFixesInit(void);
void PanoramiXFixesReset(void);
#endif

#endif                          /* _XFIXESINT_H_ */
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a73 5
/* Initialize extension at server startup time */

void
 XFixesExtensionInit(void);

d294 1
d298 1
@


1.4
log
@Update to xserver 1.11.2
@
text
@d63 1
a63 1
extern int		XFixesEventBase;
d66 2
a67 2
    CARD32	major_version;
    CARD32	minor_version;
d72 1
a72 1
extern int	(*ProcXFixesVector[XFixesNumberRequests])(ClientPtr);
d77 1
a77 1
XFixesExtensionInit(void);
d81 2
a82 2
ProcXFixesChangeSaveSet(ClientPtr client);
    
d84 2
a85 2
SProcXFixesChangeSaveSet(ClientPtr client);
    
d88 1
a88 1
ProcXFixesSelectSelectionInput (ClientPtr client);
d91 1
a91 1
SProcXFixesSelectSelectionInput (ClientPtr client);
d94 3
a96 2
SXFixesSelectionNotifyEvent (xXFixesSelectionNotifyEvent *from,
			     xXFixesSelectionNotifyEvent *to);
d98 1
a98 1
XFixesSelectionInit (void);
d102 2
a103 2
XFixesCursorInit (void);
    
d105 1
a105 1
ProcXFixesSelectCursorInput (ClientPtr client);
d108 1
a108 1
SProcXFixesSelectCursorInput (ClientPtr client);
d111 3
a113 2
SXFixesCursorNotifyEvent (xXFixesCursorNotifyEvent *from,
			  xXFixesCursorNotifyEvent *to);
d116 1
a116 1
ProcXFixesGetCursorImage (ClientPtr client);
d119 1
a119 1
SProcXFixesGetCursorImage (ClientPtr client);
d124 1
a124 1
ProcXFixesSetCursorName (ClientPtr client);
d127 1
a127 1
SProcXFixesSetCursorName (ClientPtr client);
d130 1
a130 1
ProcXFixesGetCursorName (ClientPtr client);
d133 1
a133 1
SProcXFixesGetCursorName (ClientPtr client);
d136 1
a136 1
ProcXFixesGetCursorImageAndName (ClientPtr client);
d139 1
a139 1
SProcXFixesGetCursorImageAndName (ClientPtr client);
d144 1
a144 1
ProcXFixesChangeCursor (ClientPtr client);
d147 1
a147 1
SProcXFixesChangeCursor (ClientPtr client);
d150 1
a150 1
ProcXFixesChangeCursorByName (ClientPtr client);
d153 1
a153 1
SProcXFixesChangeCursorByName (ClientPtr client);
d157 1
a157 1
XFixesRegionInit (void);
d160 1
a160 1
ProcXFixesCreateRegion (ClientPtr client);
d163 1
a163 1
SProcXFixesCreateRegion (ClientPtr client);
d166 1
a166 1
ProcXFixesCreateRegionFromBitmap (ClientPtr client);
d169 1
a169 1
SProcXFixesCreateRegionFromBitmap (ClientPtr client);
d172 1
a172 1
ProcXFixesCreateRegionFromWindow (ClientPtr client);
d175 1
a175 1
SProcXFixesCreateRegionFromWindow (ClientPtr client);
d178 1
a178 1
ProcXFixesCreateRegionFromGC (ClientPtr client);
d181 1
a181 1
SProcXFixesCreateRegionFromGC (ClientPtr client);
d184 1
a184 1
ProcXFixesCreateRegionFromPicture (ClientPtr client);
d187 1
a187 1
SProcXFixesCreateRegionFromPicture (ClientPtr client);
d190 1
a190 1
ProcXFixesDestroyRegion (ClientPtr client);
d193 1
a193 1
SProcXFixesDestroyRegion (ClientPtr client);
d196 1
a196 1
ProcXFixesSetRegion (ClientPtr client);
d199 1
a199 1
SProcXFixesSetRegion (ClientPtr client);
d202 1
a202 1
ProcXFixesCopyRegion (ClientPtr client);
d205 1
a205 1
SProcXFixesCopyRegion (ClientPtr client);
d208 1
a208 1
ProcXFixesCombineRegion (ClientPtr client);
d211 1
a211 1
SProcXFixesCombineRegion (ClientPtr client);
d214 1
a214 1
ProcXFixesInvertRegion (ClientPtr client);
d217 1
a217 1
SProcXFixesInvertRegion (ClientPtr client);
d220 1
a220 1
ProcXFixesTranslateRegion (ClientPtr client);
d223 1
a223 1
SProcXFixesTranslateRegion (ClientPtr client);
d226 1
a226 1
ProcXFixesRegionExtents (ClientPtr client);
d229 1
a229 1
SProcXFixesRegionExtents (ClientPtr client);
d232 1
a232 1
ProcXFixesFetchRegion (ClientPtr client);
d235 1
a235 1
SProcXFixesFetchRegion (ClientPtr client);
d238 1
a238 1
ProcXFixesSetGCClipRegion (ClientPtr client);
d241 1
a241 1
SProcXFixesSetGCClipRegion (ClientPtr client);
d244 1
a244 1
ProcXFixesSetWindowShapeRegion (ClientPtr client);
d247 1
a247 1
SProcXFixesSetWindowShapeRegion (ClientPtr client);
d250 1
a250 1
ProcXFixesSetPictureClipRegion (ClientPtr client);
d253 1
a253 1
SProcXFixesSetPictureClipRegion (ClientPtr client);
d256 1
a256 1
ProcXFixesExpandRegion (ClientPtr client);
d259 1
a259 1
SProcXFixesExpandRegion (ClientPtr client);
d262 1
a262 1
PanoramiXFixesSetGCClipRegion (ClientPtr client);
d265 1
a265 1
PanoramiXFixesSetWindowShapeRegion (ClientPtr client);
d268 1
a268 1
PanoramiXFixesSetPictureClipRegion (ClientPtr client);
d272 2
a273 2
int 
ProcXFixesHideCursor (ClientPtr client);
d275 2
a276 2
int 
SProcXFixesHideCursor (ClientPtr client);
d278 2
a279 2
int 
ProcXFixesShowCursor (ClientPtr client);
d281 2
a282 2
int 
SProcXFixesShowCursor (ClientPtr client);
d287 1
a287 1
ProcXFixesCreatePointerBarrier (ClientPtr client);
d290 1
a290 1
SProcXFixesCreatePointerBarrier (ClientPtr client);
d293 1
a293 1
ProcXFixesDestroyPointerBarrier (ClientPtr client);
d296 1
a296 1
SProcXFixesDestroyPointerBarrier (ClientPtr client);
d299 3
a301 3
extern int (*PanoramiXSaveXFixesVector[XFixesNumberRequests])(ClientPtr);
void PanoramiXFixesInit (void);
void PanoramiXFixesReset (void);
d303 1
a303 1
#endif /* _XFIXESINT_H_ */
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d2 2
a3 1
 * Copyright Â© 2006 Sun Microsystems, Inc.  All rights reserved.
d259 9
d281 19
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d2 1
a2 1
 * Copyright Â© 2006 Sun Microsystems
d4 10
a13 9
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Sun Microsystems not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Sun Microsystems makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
d15 7
a21 7
 * SUN MICROSYSTEMS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL SUN MICROSYSTEMS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
a50 1
#define NEED_EVENTS
@


1.1
log
@Initial revision
@
text
@a1 2
 * $Id$
 *
a61 1
extern unsigned char	XFixesReqCode;
a62 1
extern int		XFixesClientPrivateIndex;
d69 1
a69 1
#define GetXFixesClient(pClient)    ((XFixesClientPtr) (pClient)->devPrivates[XFixesClientPrivateIndex].ptr)
a71 1
extern int	(*SProcXFixesVector[XFixesNumberRequests])(ClientPtr);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
d64 1
d66 1
d76 1
@

