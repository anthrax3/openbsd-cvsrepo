head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.8
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.14
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.12
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.09.16.19.10.26;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Te1daavkBLskZ8gc;

1.6
date	2012.06.10.13.21.32;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.58;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.11;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.38;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.29;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.29;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.05.34;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/************************************************************
 Copyright (c) 1995 by Silicon Graphics Computer Systems, Inc.

 Permission to use, copy, modify, and distribute this
 software and its documentation for any purpose and without
 fee is hereby granted, provided that the above copyright
 notice appear in all copies and that both that copyright
 notice and this permission notice appear in supporting
 documentation, and that the name of Silicon Graphics not be
 used in advertising or publicity pertaining to distribution
 of the software without specific prior written permission.
 Silicon Graphics makes no representation about the suitability
 of this software for any purpose. It is provided "as is"
 without any express or implied warranty.

 SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
 GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
 DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
 THE USE OR PERFORMANCE OF THIS SOFTWARE.

 ********************************************************/

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>

#include <X11/Xos.h>
#include <X11/Xfuncs.h>
#include <X11/extensions/XKMformat.h>

#include <X11/X.h>
#include <X11/keysym.h>
#include <X11/Xproto.h>
#include "misc.h"
#include "inputstr.h"
#include "dix.h"
#include "xkbstr.h"
#define XKBSRV_NEED_FILE_FUNCS	1
#include <xkbsrv.h>
#include "xkbgeom.h"
#include "xkb.h"

unsigned
_XkbKSCheckCase(KeySym ks)
{
    unsigned set, rtrn;

    set = (ks & (~0xff)) >> 8;
    rtrn = 0;
    switch (set) {
    case 0:                    /* latin 1 */
        if (((ks >= XK_A) && (ks <= XK_Z)) ||
            ((ks >= XK_Agrave) && (ks <= XK_THORN) && (ks != XK_multiply))) {
            rtrn |= _XkbKSUpper;
        }
        if (((ks >= XK_a) && (ks <= XK_z)) ||
            ((ks >= XK_ssharp) && (ks <= XK_ydiaeresis) &&
             (ks != XK_division))) {
            rtrn |= _XkbKSLower;
        }
        break;
    case 1:                    /* latin 2 */
        if (((ks >= XK_Aogonek) && (ks <= XK_Zabovedot) && (ks != XK_breve)) ||
            ((ks >= XK_Racute) && (ks <= XK_Tcedilla))) {
            rtrn |= _XkbKSUpper;
        }
        if (((ks >= XK_aogonek) && (ks <= XK_zabovedot) && (ks != XK_ogonek) &&
             (ks != XK_caron) && (ks != XK_doubleacute)) || ((ks >= XK_racute)
                                                             && (ks <=
                                                                 XK_tcedilla)))
        {
            rtrn |= _XkbKSLower;
        }
        break;
    case 2:                    /* latin 3 */
        if (((ks >= XK_Hstroke) && (ks <= XK_Jcircumflex)) ||
            ((ks >= XK_Cabovedot) && (ks <= XK_Scircumflex))) {
            rtrn |= _XkbKSUpper;
        }
        if (((ks >= XK_hstroke) && (ks <= XK_jcircumflex)) ||
            ((ks >= XK_cabovedot) && (ks <= XK_scircumflex))) {
            rtrn |= _XkbKSLower;
        }
        break;
    case 3:                    /* latin 4 */
        if (((ks >= XK_Rcedilla) && (ks <= XK_Tslash)) ||
            (ks == XK_ENG) || ((ks >= XK_Amacron) && (ks <= XK_Umacron))) {
            rtrn |= _XkbKSUpper;
        }
        if ((ks == XK_kra) ||
            ((ks >= XK_rcedilla) && (ks <= XK_tslash)) ||
            (ks == XK_eng) || ((ks >= XK_amacron) && (ks <= XK_umacron))) {
            rtrn |= _XkbKSLower;
        }
        break;
    case 18:                   /* latin 8 */
        if ((ks == XK_Wcircumflex) ||
            (ks == XK_Ycircumflex) ||
            (ks == XK_Babovedot) ||
            (ks == XK_Dabovedot) ||
            (ks == XK_Fabovedot) ||
            (ks == XK_Mabovedot) ||
            (ks == XK_Pabovedot) ||
            (ks == XK_Sabovedot) ||
            (ks == XK_Tabovedot) ||
            (ks == XK_Wgrave) ||
            (ks == XK_Wacute) || (ks == XK_Wdiaeresis) || (ks == XK_Ygrave)) {
            rtrn |= _XkbKSUpper;
        }
        if ((ks == XK_wcircumflex) ||
            (ks == XK_ycircumflex) ||
            (ks == XK_babovedot) ||
            (ks == XK_dabovedot) ||
            (ks == XK_fabovedot) ||
            (ks == XK_mabovedot) ||
            (ks == XK_pabovedot) ||
            (ks == XK_sabovedot) ||
            (ks == XK_tabovedot) ||
            (ks == XK_wgrave) ||
            (ks == XK_wacute) || (ks == XK_wdiaeresis) || (ks == XK_ygrave)) {
            rtrn |= _XkbKSLower;
        }
        break;
    case 19:                   /* latin 9 */
        if ((ks == XK_OE) || (ks == XK_Ydiaeresis)) {
            rtrn |= _XkbKSUpper;
        }
        if (ks == XK_oe) {
            rtrn |= _XkbKSLower;
        }
        break;
    }
    return rtrn;
}

/***===================================================================***/

static Bool
XkbWriteSectionFromName(FILE * file, const char *sectionName, const char *name)
{
    fprintf(file, "    xkb_%-20s { include \"%s\" };\n", sectionName, name);
    return TRUE;
}

#define	NEED_DESC(n) ((!n)||((n)[0]=='+')||((n)[0]=='|')||(strchr((n),'%')))
#define	COMPLETE(n)  ((n)&&(!NEED_DESC(n)))

/* ARGSUSED */
static void
_AddIncl(FILE * file,
         XkbDescPtr xkb,
         Bool topLevel, Bool showImplicit, int index, void *priv)
{
    if ((priv) && (strcmp((char *) priv, "%") != 0))
        fprintf(file, "    include \"%s\"\n", (char *) priv);
    return;
}

Bool
XkbWriteXKBKeymapForNames(FILE * file,
                          XkbComponentNamesPtr names,
                          XkbDescPtr xkb, unsigned want, unsigned need)
{
    const char *tmp;
    unsigned complete;
    XkbNamesPtr old_names;
    int multi_section;
    unsigned wantNames, wantConfig, wantDflts;

    complete = 0;
    if (COMPLETE(names->keycodes))
        complete |= XkmKeyNamesMask;
    if (COMPLETE(names->types))
        complete |= XkmTypesMask;
    if (COMPLETE(names->compat))
        complete |= XkmCompatMapMask;
    if (COMPLETE(names->symbols))
        complete |= XkmSymbolsMask;
    if (COMPLETE(names->geometry))
        complete |= XkmGeometryMask;
    want |= (complete | need);
    if (want & XkmSymbolsMask)
        want |= XkmKeyNamesMask | XkmTypesMask;

    if (want == 0)
        return FALSE;

    if (xkb) {
        old_names = xkb->names;

        xkb->defined = 0;
        /* Wow would it ever be neat if we didn't need this noise. */
        if (xkb->names && xkb->names->keys)
            xkb->defined |= XkmKeyNamesMask;
        if (xkb->map && xkb->map->types)
            xkb->defined |= XkmTypesMask;
        if (xkb->compat)
            xkb->defined |= XkmCompatMapMask;
        if (xkb->map && xkb->map->num_syms)
            xkb->defined |= XkmSymbolsMask;
        if (xkb->indicators)
            xkb->defined |= XkmIndicatorsMask;
        if (xkb->geom)
            xkb->defined |= XkmGeometryMask;
    }
    else {
        old_names = NULL;
    }

    wantConfig = want & (~complete);
    if (xkb != NULL) {
        if (wantConfig & XkmTypesMask) {
            if ((!xkb->map) || (xkb->map->num_types < XkbNumRequiredTypes))
                wantConfig &= ~XkmTypesMask;
        }
        if (wantConfig & XkmCompatMapMask) {
            if ((!xkb->compat) || (xkb->compat->num_si < 1))
                wantConfig &= ~XkmCompatMapMask;
        }
        if (wantConfig & XkmSymbolsMask) {
            if ((!xkb->map) || (!xkb->map->key_sym_map))
                wantConfig &= ~XkmSymbolsMask;
        }
        if (wantConfig & XkmIndicatorsMask) {
            if (!xkb->indicators)
                wantConfig &= ~XkmIndicatorsMask;
        }
        if (wantConfig & XkmKeyNamesMask) {
            if ((!xkb->names) || (!xkb->names->keys))
                wantConfig &= ~XkmKeyNamesMask;
        }
        if ((wantConfig & XkmGeometryMask) && (!xkb->geom))
            wantConfig &= ~XkmGeometryMask;
    }
    else {
        wantConfig = 0;
    }
    complete |= wantConfig;

    wantDflts = 0;
    wantNames = want & (~complete);
    if ((xkb != NULL) && (old_names != NULL)) {
        if (wantNames & XkmTypesMask) {
            if (old_names->types != None) {
                tmp = NameForAtom(old_names->types);
                names->types = Xstrdup(tmp);
            }
            else {
                wantDflts |= XkmTypesMask;
            }
            complete |= XkmTypesMask;
        }
        if (wantNames & XkmCompatMapMask) {
            if (old_names->compat != None) {
                tmp = NameForAtom(old_names->compat);
                names->compat = Xstrdup(tmp);
            }
            else
                wantDflts |= XkmCompatMapMask;
            complete |= XkmCompatMapMask;
        }
        if (wantNames & XkmSymbolsMask) {
            if (old_names->symbols == None)
                return FALSE;
            tmp = NameForAtom(old_names->symbols);
            names->symbols = Xstrdup(tmp);
            complete |= XkmSymbolsMask;
        }
        if (wantNames & XkmKeyNamesMask) {
            if (old_names->keycodes != None) {
                tmp = NameForAtom(old_names->keycodes);
                names->keycodes = Xstrdup(tmp);
            }
            else
                wantDflts |= XkmKeyNamesMask;
            complete |= XkmKeyNamesMask;
        }
        if (wantNames & XkmGeometryMask) {
            if (old_names->geometry == None)
                return FALSE;
            tmp = NameForAtom(old_names->geometry);
            names->geometry = Xstrdup(tmp);
            complete |= XkmGeometryMask;
            wantNames &= ~XkmGeometryMask;
        }
    }
    if (complete & XkmCompatMapMask)
        complete |= XkmIndicatorsMask | XkmVirtualModsMask;
    else if (complete & (XkmSymbolsMask | XkmTypesMask))
        complete |= XkmVirtualModsMask;
    if (need & (~complete))
        return FALSE;
    if ((complete & XkmSymbolsMask) &&
        ((XkmKeyNamesMask | XkmTypesMask) & (~complete)))
        return FALSE;

    multi_section = 1;
    if (((complete & XkmKeymapRequired) == XkmKeymapRequired) &&
        ((complete & (~XkmKeymapLegal)) == 0)) {
        fprintf(file, "xkb_keymap \"default\" {\n");
    }
    else if (((complete & XkmSemanticsRequired) == XkmSemanticsRequired) &&
             ((complete & (~XkmSemanticsLegal)) == 0)) {
        fprintf(file, "xkb_semantics \"default\" {\n");
    }
    else if (((complete & XkmLayoutRequired) == XkmLayoutRequired) &&
             ((complete & (~XkmLayoutLegal)) == 0)) {
        fprintf(file, "xkb_layout \"default\" {\n");
    }
    else if (XkmSingleSection(complete & (~XkmVirtualModsMask))) {
        multi_section = 0;
    }
    else {
        return FALSE;
    }

    wantNames = complete & (~(wantConfig | wantDflts));
    if (wantConfig & XkmKeyNamesMask)
        XkbWriteXKBKeycodes(file, xkb, FALSE, FALSE, _AddIncl, names->keycodes);
    else if (wantDflts & XkmKeyNamesMask)
        fprintf(stderr, "Default symbols not implemented yet!\n");
    else if (wantNames & XkmKeyNamesMask)
        XkbWriteSectionFromName(file, "keycodes", names->keycodes);

    if (wantConfig & XkmTypesMask)
        XkbWriteXKBKeyTypes(file, xkb, FALSE, FALSE, _AddIncl, names->types);
    else if (wantDflts & XkmTypesMask)
        fprintf(stderr, "Default types not implemented yet!\n");
    else if (wantNames & XkmTypesMask)
        XkbWriteSectionFromName(file, "types", names->types);

    if (wantConfig & XkmCompatMapMask)
        XkbWriteXKBCompatMap(file, xkb, FALSE, FALSE, _AddIncl, names->compat);
    else if (wantDflts & XkmCompatMapMask)
        fprintf(stderr, "Default interps not implemented yet!\n");
    else if (wantNames & XkmCompatMapMask)
        XkbWriteSectionFromName(file, "compatibility", names->compat);

    if (wantConfig & XkmSymbolsMask)
        XkbWriteXKBSymbols(file, xkb, FALSE, FALSE, _AddIncl, names->symbols);
    else if (wantNames & XkmSymbolsMask)
        XkbWriteSectionFromName(file, "symbols", names->symbols);

    if (wantConfig & XkmGeometryMask)
        XkbWriteXKBGeometry(file, xkb, FALSE, FALSE, _AddIncl, names->geometry);
    else if (wantNames & XkmGeometryMask)
        XkbWriteSectionFromName(file, "geometry", names->geometry);

    if (multi_section)
        fprintf(file, "};\n");
    return TRUE;
}

/***====================================================================***/

int
XkbFindKeycodeByName(XkbDescPtr xkb, char *name, Bool use_aliases)
{
    register int i;

    if ((!xkb) || (!xkb->names) || (!xkb->names->keys))
        return 0;
    for (i = xkb->min_key_code; i <= xkb->max_key_code; i++) {
        if (strncmp(xkb->names->keys[i].name, name, XkbKeyNameLength) == 0)
            return i;
    }
    if (!use_aliases)
        return 0;
    if (xkb->geom && xkb->geom->key_aliases) {
        XkbKeyAliasPtr a;

        a = xkb->geom->key_aliases;
        for (i = 0; i < xkb->geom->num_key_aliases; i++, a++) {
            if (strncmp(name, a->alias, XkbKeyNameLength) == 0)
                return XkbFindKeycodeByName(xkb, a->real, FALSE);
        }
    }
    if (xkb->names && xkb->names->key_aliases) {
        XkbKeyAliasPtr a;

        a = xkb->names->key_aliases;
        for (i = 0; i < xkb->names->num_key_aliases; i++, a++) {
            if (strncmp(name, a->alias, XkbKeyNameLength) == 0)
                return XkbFindKeycodeByName(xkb, a->real, FALSE);
        }
    }
    return 0;
}

unsigned
XkbConvertGetByNameComponents(Bool toXkm, unsigned orig)
{
    unsigned rtrn;

    rtrn = 0;
    if (toXkm) {
        if (orig & XkbGBN_TypesMask)
            rtrn |= XkmTypesMask;
        if (orig & XkbGBN_CompatMapMask)
            rtrn |= XkmCompatMapMask;
        if (orig & XkbGBN_SymbolsMask)
            rtrn |= XkmSymbolsMask;
        if (orig & XkbGBN_IndicatorMapMask)
            rtrn |= XkmIndicatorsMask;
        if (orig & XkbGBN_KeyNamesMask)
            rtrn |= XkmKeyNamesMask;
        if (orig & XkbGBN_GeometryMask)
            rtrn |= XkmGeometryMask;
    }
    else {
        if (orig & XkmTypesMask)
            rtrn |= XkbGBN_TypesMask;
        if (orig & XkmCompatMapMask)
            rtrn |= XkbGBN_CompatMapMask;
        if (orig & XkmSymbolsMask)
            rtrn |= XkbGBN_SymbolsMask;
        if (orig & XkmIndicatorsMask)
            rtrn |= XkbGBN_IndicatorMapMask;
        if (orig & XkmKeyNamesMask)
            rtrn |= XkbGBN_KeyNamesMask;
        if (orig & XkmGeometryMask)
            rtrn |= XkbGBN_GeometryMask;
        if (orig != 0)
            rtrn |= XkbGBN_OtherNamesMask;
    }
    return rtrn;
}

/***====================================================================***/

#define	UNMATCHABLE(c)	(((c)=='(')||((c)==')')||((c)=='/'))

Bool
XkbNameMatchesPattern(char *name, char *ptrn)
{
    while (ptrn[0] != '\0') {
        if (name[0] == '\0') {
            if (ptrn[0] == '*') {
                ptrn++;
                continue;
            }
            return FALSE;
        }
        if (ptrn[0] == '?') {
            if (UNMATCHABLE(name[0]))
                return FALSE;
        }
        else if (ptrn[0] == '*') {
            if ((!UNMATCHABLE(name[0])) &&
                XkbNameMatchesPattern(name + 1, ptrn))
                return TRUE;
            return XkbNameMatchesPattern(name, ptrn + 1);
        }
        else if (ptrn[0] != name[0])
            return FALSE;
        name++;
        ptrn++;
    }
    /* if we get here, the pattern is exhausted (-:just like me:-) */
    return name[0] == '\0';
}
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d9 2
a10 2
 documentation, and that the name of Silicon Graphics not be 
 used in advertising or publicity pertaining to distribution 
d12 1
a12 1
 Silicon Graphics makes no representation about the suitability 
d15 3
a17 3
 
 SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
 SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d19 3
a21 3
 GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
 DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
 DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
@


1.5
log
@Update to xserver 1.11.2
@
text
@d54 1
a54 1
unsigned	set,rtrn;
d56 2
a57 2
    set= (ks & (~0xff)) >> 8;
    rtrn= 0;
d59 81
a139 83
	case 0:		/* latin 1 */
	    if (((ks>=XK_A)&&(ks<=XK_Z))||
		((ks>=XK_Agrave)&&(ks<=XK_THORN)&&(ks!=XK_multiply))) {
		rtrn|= _XkbKSUpper;
	    }
	    if (((ks>=XK_a)&&(ks<=XK_z))||
		((ks>=XK_ssharp)&&(ks<=XK_ydiaeresis)&&(ks!=XK_division))) {
		rtrn|= _XkbKSLower;
	    }
	    break;
	case 1:		/* latin 2 */
	    if (((ks>=XK_Aogonek)&&(ks<=XK_Zabovedot)&&(ks!=XK_breve))||
		((ks>=XK_Racute)&&(ks<=XK_Tcedilla))) {
		rtrn|= _XkbKSUpper;
	    }
	    if (((ks>=XK_aogonek)&&(ks<=XK_zabovedot)&&(ks!=XK_ogonek)&&(ks!=XK_caron)&&(ks!=XK_doubleacute))||
		((ks>=XK_racute)&&(ks<=XK_tcedilla))) {
		rtrn|= _XkbKSLower;
	    }
	    break;
	case 2:		/* latin 3 */
	    if (((ks>=XK_Hstroke)&&(ks<=XK_Jcircumflex))||
		((ks>=XK_Cabovedot)&&(ks<=XK_Scircumflex))) {
		rtrn|= _XkbKSUpper;
	    }
	    if (((ks>=XK_hstroke)&&(ks<=XK_jcircumflex))||
		((ks>=XK_cabovedot)&&(ks<=XK_scircumflex))) {
		rtrn|= _XkbKSLower;
	    }
	    break;
	case 3:		/* latin 4 */
	    if (((ks>=XK_Rcedilla)&&(ks<=XK_Tslash))||
	        (ks==XK_ENG)||
		((ks>=XK_Amacron)&&(ks<=XK_Umacron))) {
		rtrn|= _XkbKSUpper;
	    }
	    if ((ks==XK_kra)||
	        ((ks>=XK_rcedilla)&&(ks<=XK_tslash))||
	        (ks==XK_eng)||
		((ks>=XK_amacron)&&(ks<=XK_umacron))) {
		rtrn|= _XkbKSLower;
	    }
	    break;
	case 18:		/* latin 8 */
	    if ((ks==XK_Wcircumflex)||
		(ks==XK_Ycircumflex)||
		(ks==XK_Babovedot)||
		(ks==XK_Dabovedot)||
		(ks==XK_Fabovedot)||
		(ks==XK_Mabovedot)||
		(ks==XK_Pabovedot)||
		(ks==XK_Sabovedot)||
		(ks==XK_Tabovedot)||
		(ks==XK_Wgrave)||
		(ks==XK_Wacute)||
		(ks==XK_Wdiaeresis)||
		(ks==XK_Ygrave)) {
		rtrn|= _XkbKSUpper;
	    }
	    if ((ks==XK_wcircumflex)||
		(ks==XK_ycircumflex)||
		(ks==XK_babovedot)||
		(ks==XK_dabovedot)||
		(ks==XK_fabovedot)||
		(ks==XK_mabovedot)||
		(ks==XK_pabovedot)||
		(ks==XK_sabovedot)||
		(ks==XK_tabovedot)||
		(ks==XK_wgrave)||
		(ks==XK_wacute)||
		(ks==XK_wdiaeresis)||
		(ks==XK_ygrave)) {
		rtrn|= _XkbKSLower;
	    }
	    break;
	case 19:		/* latin 9 */
	    if ((ks==XK_OE)||(ks==XK_Ydiaeresis)) {
		rtrn|= _XkbKSUpper;
	    }
	    if (ks==XK_oe) {
		rtrn|= _XkbKSLower;
	    }
	    break;
d147 1
a147 1
XkbWriteSectionFromName(FILE *file,char *sectionName,char *name)
d149 1
a149 1
    fprintf(file,"    xkb_%-20s { include \"%s\" };\n",sectionName,name);
d158 3
a160 6
_AddIncl(	FILE *		file,
		XkbDescPtr 	xkb,
		Bool 		topLevel,
		Bool 		showImplicit,
		int 		index,
		void *		priv)
d162 2
a163 2
    if ((priv)&&(strcmp((char *)priv,"%")!=0))
	fprintf(file,"    include \"%s\"\n",(char *)priv);
d168 3
a170 5
XkbWriteXKBKeymapForNames(	FILE *			file,
				XkbComponentNamesPtr	names,
				XkbDescPtr		xkb,
				unsigned		want,
				unsigned		need)
d172 20
a191 15
const char *	tmp;
unsigned	complete;
XkbNamesPtr	old_names;
int		multi_section;
unsigned	wantNames,wantConfig,wantDflts;

    complete= 0;
    if (COMPLETE(names->keycodes))	complete|= XkmKeyNamesMask;
    if (COMPLETE(names->types))		complete|= XkmTypesMask;
    if (COMPLETE(names->compat))	complete|= XkmCompatMapMask;
    if (COMPLETE(names->symbols))	complete|= XkmSymbolsMask;
    if (COMPLETE(names->geometry))	complete|= XkmGeometryMask;
    want|= (complete|need);
    if (want&XkmSymbolsMask)
	want|= XkmKeyNamesMask|XkmTypesMask;
d193 2
a194 2
    if (want==0)
	return FALSE;
d215 1
a215 1
        old_names= NULL;
d218 24
a241 24
    wantConfig= want&(~complete);
    if (xkb!=NULL) {
	if (wantConfig&XkmTypesMask) {
	    if ((!xkb->map) || (xkb->map->num_types<XkbNumRequiredTypes))
		wantConfig&= ~XkmTypesMask;
	}
	if (wantConfig&XkmCompatMapMask) {
	    if ((!xkb->compat) || (xkb->compat->num_si<1))
		wantConfig&= ~XkmCompatMapMask;
	}
	if (wantConfig&XkmSymbolsMask) {
	    if ((!xkb->map) || (!xkb->map->key_sym_map))
		wantConfig&= ~XkmSymbolsMask;
	}
	if (wantConfig&XkmIndicatorsMask) {
	    if (!xkb->indicators)
		wantConfig&= ~XkmIndicatorsMask;
	}
	if (wantConfig&XkmKeyNamesMask) {
	    if ((!xkb->names)||(!xkb->names->keys))
		wantConfig&= ~XkmKeyNamesMask;
	}
	if ((wantConfig&XkmGeometryMask)&&(!xkb->geom))
	    wantConfig&= ~XkmGeometryMask;
d244 1
a244 1
	wantConfig= 0;
d246 1
a246 1
    complete|= wantConfig;
d248 51
a298 49
    wantDflts= 0;
    wantNames= want&(~complete);
    if ((xkb!=NULL) && (old_names!=NULL)) {
	if (wantNames&XkmTypesMask) {
	    if (old_names->types!=None) {
		tmp= NameForAtom(old_names->types);
		names->types= Xstrdup(tmp);
	    }
	    else {
		wantDflts|= XkmTypesMask;
	    }
	    complete|= XkmTypesMask; 
	}
	if (wantNames&XkmCompatMapMask) {
	    if (old_names->compat!=None) {
		tmp= NameForAtom(old_names->compat);
		names->compat= Xstrdup(tmp);
	    }
	    else wantDflts|= XkmCompatMapMask;
	    complete|= XkmCompatMapMask; 
	}
	if (wantNames&XkmSymbolsMask) {
	    if (old_names->symbols==None)
		return FALSE;
	    tmp= NameForAtom(old_names->symbols);
	    names->symbols= Xstrdup(tmp);
	    complete|= XkmSymbolsMask; 
	}
	if (wantNames&XkmKeyNamesMask) {
	   if (old_names->keycodes!=None) {
		tmp= NameForAtom(old_names->keycodes);
		names->keycodes= Xstrdup(tmp);
	    }
	    else wantDflts|= XkmKeyNamesMask;
	    complete|= XkmKeyNamesMask;
	}
	if (wantNames&XkmGeometryMask) {
	    if (old_names->geometry==None)
		return FALSE;
	    tmp= NameForAtom(old_names->geometry);
	    names->geometry= Xstrdup(tmp);
	    complete|= XkmGeometryMask; 
	    wantNames&= ~XkmGeometryMask;
	}
    }
    if (complete&XkmCompatMapMask)
	complete|= XkmIndicatorsMask|XkmVirtualModsMask;
    else if (complete&(XkmSymbolsMask|XkmTypesMask))
	complete|= XkmVirtualModsMask;
d300 17
a316 16
	return FALSE;
    if ((complete&XkmSymbolsMask)&&((XkmKeyNamesMask|XkmTypesMask)&(~complete)))
	return FALSE;

    multi_section= 1;
    if (((complete&XkmKeymapRequired)==XkmKeymapRequired)&&
	((complete&(~XkmKeymapLegal))==0)) {
	fprintf(file,"xkb_keymap \"default\" {\n");
    }
    else if (((complete&XkmSemanticsRequired)==XkmSemanticsRequired)&&
	((complete&(~XkmSemanticsLegal))==0)) {
	fprintf(file,"xkb_semantics \"default\" {\n");
    }
    else if (((complete&XkmLayoutRequired)==XkmLayoutRequired)&&
	((complete&(~XkmLayoutLegal))==0)) {
	fprintf(file,"xkb_layout \"default\" {\n");
d318 2
a319 2
    else if (XkmSingleSection(complete&(~XkmVirtualModsMask))) {
	multi_section= 0;
d322 1
a322 1
	return FALSE;
d325 31
a355 31
    wantNames= complete&(~(wantConfig|wantDflts));
    if (wantConfig&XkmKeyNamesMask)
	XkbWriteXKBKeycodes(file,xkb,FALSE,FALSE,_AddIncl,names->keycodes);
    else if (wantDflts&XkmKeyNamesMask)
	fprintf(stderr,"Default symbols not implemented yet!\n");
    else if (wantNames&XkmKeyNamesMask)
	XkbWriteSectionFromName(file,"keycodes",names->keycodes);

    if (wantConfig&XkmTypesMask)
	XkbWriteXKBKeyTypes(file,xkb,FALSE,FALSE,_AddIncl,names->types);
    else if (wantDflts&XkmTypesMask)
	fprintf(stderr,"Default types not implemented yet!\n");
    else if (wantNames&XkmTypesMask)
	XkbWriteSectionFromName(file,"types",names->types);

    if (wantConfig&XkmCompatMapMask)
	XkbWriteXKBCompatMap(file,xkb,FALSE,FALSE,_AddIncl,names->compat);
    else if (wantDflts&XkmCompatMapMask)
	fprintf(stderr,"Default interps not implemented yet!\n");
    else if (wantNames&XkmCompatMapMask)
	XkbWriteSectionFromName(file,"compatibility",names->compat);

    if (wantConfig&XkmSymbolsMask)
	XkbWriteXKBSymbols(file,xkb,FALSE,FALSE,_AddIncl,names->symbols);
    else if (wantNames&XkmSymbolsMask)
	XkbWriteSectionFromName(file,"symbols",names->symbols);

    if (wantConfig&XkmGeometryMask)
	XkbWriteXKBGeometry(file,xkb,FALSE,FALSE,_AddIncl,names->geometry);
    else if (wantNames&XkmGeometryMask)
	XkbWriteSectionFromName(file,"geometry",names->geometry);
d358 1
a358 1
	fprintf(file,"};\n");
d365 1
a365 1
XkbFindKeycodeByName(XkbDescPtr xkb,char *name,Bool use_aliases)
d367 1
a367 1
register int	i;
d369 5
a373 5
    if ((!xkb)||(!xkb->names)||(!xkb->names->keys))
	return 0;
    for (i=xkb->min_key_code;i<=xkb->max_key_code;i++) {
	if (strncmp(xkb->names->keys[i].name,name,XkbKeyNameLength)==0)
	    return i;
d376 1
a376 1
	return 0;
d378 7
a384 6
	XkbKeyAliasPtr	a;
	a= xkb->geom->key_aliases;
	for (i=0;i<xkb->geom->num_key_aliases;i++,a++) {
	    if (strncmp(name,a->alias,XkbKeyNameLength)==0)
		return XkbFindKeycodeByName(xkb,a->real,FALSE);
	}
d387 7
a393 6
	XkbKeyAliasPtr	a;
	a= xkb->names->key_aliases;
	for (i=0;i<xkb->names->num_key_aliases;i++,a++) {
	    if (strncmp(name,a->alias,XkbKeyNameLength)==0)
		return XkbFindKeycodeByName(xkb,a->real,FALSE);
	}
a397 1

d399 1
a399 1
XkbConvertGetByNameComponents(Bool toXkm,unsigned orig)
d401 1
a401 1
unsigned	rtrn;
d403 1
a403 1
    rtrn= 0;
d405 12
a416 6
	if (orig&XkbGBN_TypesMask)		rtrn|= XkmTypesMask;
	if (orig&XkbGBN_CompatMapMask)		rtrn|= XkmCompatMapMask;
	if (orig&XkbGBN_SymbolsMask)		rtrn|= XkmSymbolsMask;
	if (orig&XkbGBN_IndicatorMapMask)	rtrn|= XkmIndicatorsMask;
	if (orig&XkbGBN_KeyNamesMask)		rtrn|= XkmKeyNamesMask;
	if (orig&XkbGBN_GeometryMask)		rtrn|= XkmGeometryMask;
d419 14
a432 7
	if (orig&XkmTypesMask)			rtrn|= XkbGBN_TypesMask;
	if (orig&XkmCompatMapMask)		rtrn|= XkbGBN_CompatMapMask;
	if (orig&XkmSymbolsMask)		rtrn|= XkbGBN_SymbolsMask;
	if (orig&XkmIndicatorsMask)		rtrn|= XkbGBN_IndicatorMapMask;
	if (orig&XkmKeyNamesMask)		rtrn|= XkbGBN_KeyNamesMask;
	if (orig&XkmGeometryMask)		rtrn|= XkbGBN_GeometryMask;
	if (orig!=0)				rtrn|= XkbGBN_OtherNamesMask;
d442 1
a442 1
XkbNameMatchesPattern(char *name,char *ptrn)
d444 22
a465 21
    while (ptrn[0]!='\0') {
	if (name[0]=='\0') {
	    if (ptrn[0]=='*') {
		ptrn++;
		continue;
	    }
	    return FALSE;
	}
	if (ptrn[0]=='?') {
	    if (UNMATCHABLE(name[0]))
		return FALSE;
	}
	else if (ptrn[0]=='*') {
	    if ((!UNMATCHABLE(name[0]))&&XkbNameMatchesPattern(name+1,ptrn))
		return TRUE;
	    return XkbNameMatchesPattern(name,ptrn+1);
	}
	else if (ptrn[0]!=name[0])
	    return FALSE;
	name++;
	ptrn++;
d468 1
a468 1
    return name[0]=='\0';
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d65 1
a65 1
		((ks>=XK_agrave)&&(ks<=XK_ydiaeresis))) {
d74 1
a74 1
	    if (((ks>=XK_aogonek)&&(ks<=XK_zabovedot)&&(ks!=XK_caron))||
d95 2
a96 1
	    if (((ks>=XK_rcedilla)&&(ks<=XK_tslash))||
d103 13
a115 8
	    if ((ks==XK_Babovedot)||
                ((ks>=XK_Dabovedot)&&(ks<=XK_Wacute))||
		((ks>=XK_Ygrave)&&(ks<=XK_Fabovedot))||
	        (ks==XK_Mabovedot)||
	        (ks==XK_Pabovedot)||
	        (ks==XK_Sabovedot)||
	        (ks==XK_Wdiaeresis)||
		((ks>=XK_Wcircumflex)&&(ks<=XK_Ycircumflex))) {
d118 13
a130 7
	    if ((ks==XK_babovedot)||
	        (ks==XK_dabovedot)||
	        (ks==XK_fabovedot)||
	        (ks==XK_mabovedot)||
                ((ks>=XK_wgrave)&&(ks<=XK_wacute))||
	        (ks==XK_ygrave)||
		((ks>=XK_wdiaeresis)&&(ks<=XK_ycircumflex))) {
d256 1
a256 1
		names->types= _XkbDupString(tmp);
d266 1
a266 1
		names->compat= _XkbDupString(tmp);
d275 1
a275 1
	    names->symbols= _XkbDupString(tmp);
d281 1
a281 1
		names->keycodes= _XkbDupString(tmp);
d290 1
a290 1
	    names->geometry= _XkbDupString(tmp);
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d440 1
a440 1
    return (name[0]=='\0');
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d37 1
a39 1
#define	NEED_EVENTS
d140 1
a140 1
    return True;
d167 1
a167 1
char *		name,*tmp;
a173 1
    if ((name=names->keymap)==NULL)	name= "default";
d184 1
a184 1
	return False;
d243 1
a243 1
		tmp= XkbAtomGetString(old_names->types);
d253 1
a253 1
		tmp= XkbAtomGetString(old_names->compat);
d261 2
a262 2
		return False;
	    tmp= XkbAtomGetString(old_names->symbols);
d268 1
a268 1
		tmp= XkbAtomGetString(old_names->keycodes);
d276 2
a277 2
		return False;
	    tmp= XkbAtomGetString(old_names->geometry);
d288 1
a288 1
	return False;
d290 1
a290 1
	return False;
d295 1
a295 1
	fprintf(file,"xkb_keymap \"%s\" {\n",name);
d299 1
a299 1
	fprintf(file,"xkb_semantics \"%s\" {\n",name);
d303 1
a303 1
	fprintf(file,"xkb_layout \"%s\" {\n",name);
d309 1
a309 1
	return False;
a312 1
    name= names->keycodes;
d314 1
a314 1
	XkbWriteXKBKeycodes(file,xkb,False,False,_AddIncl,name);
d318 1
a318 1
	XkbWriteSectionFromName(file,"keycodes",name);
a319 1
    name= names->types;
d321 1
a321 1
	XkbWriteXKBKeyTypes(file,xkb,False,False,_AddIncl,name);
d325 1
a325 1
	XkbWriteSectionFromName(file,"types",name);
a326 1
    name= names->compat;
d328 1
a328 1
	XkbWriteXKBCompatMap(file,xkb,False,False,_AddIncl,name);
d332 1
a332 1
	XkbWriteSectionFromName(file,"compatibility",name);
a333 1
    name= names->symbols;
d335 1
a335 1
	XkbWriteXKBSymbols(file,xkb,False,False,_AddIncl,name);
d337 1
a337 1
	XkbWriteSectionFromName(file,"symbols",name);
a338 1
    name= names->geometry;
d340 1
a340 1
	XkbWriteXKBGeometry(file,xkb,False,False,_AddIncl,name);
d342 1
a342 1
	XkbWriteSectionFromName(file,"geometry",name);
d346 1
a346 1
    return True;
d369 1
a369 1
		return XkbFindKeycodeByName(xkb,a->real,False);
d377 1
a377 1
		return XkbFindKeycodeByName(xkb,a->real,False);
a409 23
/* all latin-1 alphanumerics, plus parens, slash, minus, underscore and */
/* wildcards */

static unsigned char componentSpecLegal[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0xff, 0x83,
	0xfe, 0xff, 0xff, 0x87, 0xfe, 0xff, 0xff, 0x07,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0x7f, 0xff
};

void
XkbEnsureSafeMapName(char *name)
{
   if (name==NULL)
        return;
    while (*name!='\0') {
	if ((componentSpecLegal[(*name)/8]&(1<<((*name)%8)))==0)
	    *name= '_';
        name++;
    }
    return;
}

d423 1
a423 1
	    return False;
d427 1
a427 1
		return False;
d431 1
a431 1
		return True;
d435 1
a435 1
	    return False;
@


1.1
log
@Initial revision
@
text
@d45 1
a45 1
#include <X11/extensions/XKBstr.h>
d47 2
a48 2
#include <X11/extensions/XKBsrv.h>
#include <X11/extensions/XKBgeom.h>
a135 70
Bool
XkbLookupGroupAndLevel(	XkbDescPtr 	xkb,
			int 		key,
			int *		mods_inout,
			int *		grp_inout,
			int *		lvl_rtrn)
{
int		nG,eG;

    if ((!xkb)||(!XkbKeycodeInRange(xkb,key))||(!grp_inout))
	return False;

    nG= XkbKeyNumGroups(xkb,key);
    eG= *grp_inout;

    if ( nG==0 ) {
	*grp_inout= 0;
	if (lvl_rtrn!=NULL)
	    *lvl_rtrn= 0;
	return False;
    }
    else if ( nG==1 ) {
	eG= 0;
    }
    else if ( eG>=nG ) {
	unsigned gI= XkbKeyGroupInfo(xkb,key);
	switch (XkbOutOfRangeGroupAction(gI)) {
	    default:
		eG %= nG;
		break;
	    case XkbClampIntoRange:
		eG = nG-1;
		break;
	    case XkbRedirectIntoRange:
		eG = XkbOutOfRangeGroupNumber(gI);
		if (eG>=nG)
		    eG= 0;
		break;
	}
    }
    *grp_inout= eG;
    if (mods_inout!=NULL) {
	XkbKeyTypePtr	type;
	int		preserve;

	type = XkbKeyKeyType(xkb,key,eG);
	if (lvl_rtrn!=NULL)
	    *lvl_rtrn= 0;
	preserve= 0;
	if (type->map) { /* find the shift level */
	    register int i;
	    register XkbKTMapEntryPtr entry;
	    for (i=0,entry=type->map;i<type->map_count;i++,entry++) {
		if ((entry->active)&&
			(((*mods_inout)&type->mods.mask)==entry->mods.mask)){
		    if (lvl_rtrn!=NULL)
			*lvl_rtrn= entry->level;
		    if (type->preserve)
			preserve= type->preserve[i].mask;
		    break;
		}
	    }
	}
	(*mods_inout)&= ~(type->mods.mask&(~preserve));
    }
    return True;
}

/***===================================================================***/

d149 1
a149 1
		XkbFileInfo *	result,
a162 1
				Display *		dpy,
a171 3
XkbFileInfo	finfo;

    bzero(&finfo,sizeof(XkbFileInfo));
d187 20
a206 7
    if (xkb!=NULL) {
	 old_names= xkb->names;
	 finfo.type= 0;
	 finfo.defined= 0;
	 finfo.xkb= xkb;
	 if (!XkbDetermineFileType(&finfo,XkbXKBFile,NULL))
	    return False;
a207 1
    else old_names= NULL;
d244 1
a244 1
		tmp= XkbAtomGetString(dpy,old_names->types);
d254 1
a254 1
		tmp= XkbAtomGetString(dpy,old_names->compat);
d263 1
a263 1
	    tmp= XkbAtomGetString(dpy,old_names->symbols);
d269 1
a269 1
		tmp= XkbAtomGetString(dpy,old_names->keycodes);
d278 1
a278 1
	    tmp= XkbAtomGetString(dpy,old_names->geometry);
d316 1
a316 1
	XkbWriteXKBKeycodes(file,&finfo,False,False,_AddIncl,name);
d324 1
a324 1
	XkbWriteXKBKeyTypes(file,&finfo,False,False,_AddIncl,name);
d332 1
a332 1
	XkbWriteXKBCompatMap(file,&finfo,False,False,_AddIncl,name);
d340 1
a340 1
	XkbWriteXKBSymbols(file,&finfo,False,False,_AddIncl,name);
d346 1
a346 1
	XkbWriteXKBGeometry(file,&finfo,False,False,_AddIncl,name);
a356 9
/*ARGSUSED*/
Status
XkbMergeFile(XkbDescPtr xkb,XkbFileInfo finfo)
{
    return BadImplementation;
}

/***====================================================================***/

a413 103
}

unsigned
XkbConvertXkbComponents(Bool toXkm,unsigned orig)
{
unsigned	rtrn;

    rtrn= 0;
    if (toXkm) {
	if (orig&XkbClientMapMask)	rtrn|= XkmTypesMask|XkmSymbolsMask;
	if (orig&XkbServerMapMask)	rtrn|= XkmTypesMask|XkmSymbolsMask;
	if (orig&XkbCompatMapMask)	rtrn|= XkmCompatMapMask;
	if (orig&XkbIndicatorMapMask)	rtrn|= XkmIndicatorsMask;
	if (orig&XkbNamesMask)		rtrn|= XkmKeyNamesMask;
	if (orig&XkbGeometryMask)	rtrn|= XkmGeometryMask;
    }
    else {
	if (orig!=0)			rtrn|= XkbNamesMask;
	if (orig&XkmTypesMask)		rtrn|= XkbClientMapMask;
	if (orig&XkmCompatMapMask)
		rtrn|= XkbCompatMapMask|XkbIndicatorMapMask;
	if (orig&XkmSymbolsMask)	rtrn|=XkbClientMapMask|XkbServerMapMask;
	if (orig&XkmIndicatorsMask)	rtrn|= XkbIndicatorMapMask;
	if (orig&XkmKeyNamesMask)	
		rtrn|= XkbNamesMask|XkbIndicatorMapMask;
	if (orig&XkmGeometryMask)	rtrn|= XkbGeometryMask;
    }
    return rtrn;
}

Bool
XkbDetermineFileType(XkbFileInfoPtr finfo,int format,int *opts_missing)
{
unsigned	present;
XkbDescPtr	xkb;

    if ((!finfo)||(!finfo->xkb))
	return False;
    if (opts_missing)
	*opts_missing= 0;
    xkb= finfo->xkb;
    present= 0;
    if ((xkb->names)&&(xkb->names->keys))	present|= XkmKeyNamesMask;
    if ((xkb->map)&&(xkb->map->types))		present|= XkmTypesMask;
    if (xkb->compat)				present|= XkmCompatMapMask;
    if ((xkb->map)&&(xkb->map->num_syms>1))	present|= XkmSymbolsMask;
    if (xkb->indicators)			present|= XkmIndicatorsMask;
    if (xkb->geom)				present|= XkmGeometryMask;
    if (!present)
	return False;
    else switch (present) {
	case XkmKeyNamesMask:	
	    finfo->type= 	XkmKeyNamesIndex;
	    finfo->defined= 	present;
	    return True;
	case XkmTypesMask:
	    finfo->type=	XkmTypesIndex;
	    finfo->defined= 	present;
	    return True;
	case XkmCompatMapMask:	
	    finfo->type=	XkmCompatMapIndex;
	    finfo->defined=	present;
	    return True;
	case XkmSymbolsMask:	
	    if (format!=XkbXKMFile) {
		finfo->type= 	XkmSymbolsIndex;
		finfo->defined=	present;
		return True;
	    }
	    break;
	case XkmGeometryMask:	
	    finfo->type=	XkmGeometryIndex;
	    finfo->defined=	present;
	    return True;
    }
    if ((present&(~XkmSemanticsLegal))==0) {
	if ((XkmSemanticsRequired&present)==XkmSemanticsRequired) {
	    if (opts_missing)
		*opts_missing= XkmSemanticsOptional&(~present);
	    finfo->type= 	XkmSemanticsFile;
	    finfo->defined=	present;
	    return True;
	}
    }
    else if ((present&(~XkmLayoutLegal))==0) {
	if ((XkmLayoutRequired&present)==XkmLayoutRequired) {
	    if (opts_missing)
		*opts_missing= XkmLayoutOptional&(~present);
	    finfo->type=	XkmLayoutFile;
	    finfo->defined=	present;
	    return True;
	}
    }
    else if ((present&(~XkmKeymapLegal))==0) {
	if ((XkmKeymapRequired&present)==XkmKeymapRequired) {
	    if (opts_missing)
		*opts_missing= XkmKeymapOptional&(~present);
	    finfo->type=	XkmKeymapFile;
	    finfo->defined=	present;
	    return True;
	}
    }
    return False;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d47 1
a47 1
#include <xkbsrv.h>
d136 70
d419 9
d483 28
@

