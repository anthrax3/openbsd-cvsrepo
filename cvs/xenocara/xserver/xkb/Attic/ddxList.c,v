head	1.8;
access;
symbols
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2013.06.07.17.28.56;	author matthieu;	state dead;
branches;
next	1.7;

1.7
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.58;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.11;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.38;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.38;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.22;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.22;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.05.26;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/************************************************************
Copyright (c) 1995 by Silicon Graphics Computer Systems, Inc.

Permission to use, copy, modify, and distribute this
software and its documentation for any purpose and without
fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting
documentation, and that the name of Silicon Graphics not be 
used in advertising or publicity pertaining to distribution 
of the software without specific prior written permission.
Silicon Graphics makes no representation about the suitability 
of this software for any purpose. It is provided "as is"
without any express or implied warranty.

SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
THE USE OR PERFORMANCE OF THIS SOFTWARE.

********************************************************/

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <stdio.h>
#include <ctype.h>
#include <X11/X.h>
#include <X11/Xos.h>
#include <X11/Xproto.h>
#include <X11/keysym.h>
#include <X11/extensions/XKM.h>
#include "inputstr.h"
#include "scrnintstr.h"
#include "windowstr.h"
#define	XKBSRV_NEED_FILE_FUNCS
#include <xkbsrv.h>
#include <X11/extensions/XI.h>

#ifdef WIN32
/* from ddxLoad.c */
extern const char *Win32TempDir(void);
extern int Win32System(const char *cmdline);

#undef System
#define System Win32System

#define W32_tmparg " '%s'"
#define W32_tmpfile ,tmpname
#define W32_tmplen strlen(tmpname)+3
#else
#define W32_tmparg
#define W32_tmpfile
#define W32_tmplen 0
#endif

/***====================================================================***/

static const char *componentDirs[_XkbListNumComponents] = {
    "keycodes", "types", "compat", "symbols", "geometry"
};

/***====================================================================***/

static Status
_AddListComponent(XkbSrvListInfoPtr list,
                  int what, unsigned flags, char *str, ClientPtr client)
{
    int slen, wlen;
    unsigned char *wire8;
    unsigned short *wire16;
    char *tmp;

    if (list->nTotal >= list->maxRtrn) {
        list->nTotal++;
        return Success;
    }
    tmp = strchr(str, ')');
    if ((tmp == NULL) && ((tmp = strchr(str, '(')) == NULL)) {
        slen = strlen(str);
        while ((slen > 0) && isspace(str[slen - 1])) {
            slen--;
        }
    }
    else {
        slen = (tmp - str + 1);
    }
    wlen = (((slen + 1) / 2) * 2) + 4;  /* four bytes for flags and length, pad to */
    /* 2-byte boundary */
    if ((list->szPool - list->nPool) < wlen) {
        if (wlen > 1024)
            list->szPool += XkbPaddedSize(wlen * 2);
        else
            list->szPool += 1024;
        list->pool = realloc(list->pool, list->szPool * sizeof(char));
        if (!list->pool)
            return BadAlloc;
    }
    wire16 = (unsigned short *) &list->pool[list->nPool];
    wire8 = (unsigned char *) &wire16[2];
    wire16[0] = flags;
    wire16[1] = slen;
    memcpy(wire8, str, slen);
    if (client->swapped) {
        swaps(&wire16[0]);
        swaps(&wire16[1]);
    }
    list->nPool += wlen;
    list->nFound[what]++;
    list->nTotal++;
    return Success;
}

/***====================================================================***/
static Status
XkbDDXListComponent(DeviceIntPtr dev,
                    int what, XkbSrvListInfoPtr list, ClientPtr client)
{
    char *file, *map, *tmp, *buf = NULL;
    FILE *in;
    Status status;
    Bool haveDir;

#ifdef WIN32
    char tmpname[PATH_MAX];
#else
    int rval;
#endif

    if ((list->pattern[what] == NULL) || (list->pattern[what][0] == '\0'))
        return Success;
    file = list->pattern[what];
    map = strrchr(file, '(');
    if (map != NULL) {
        char *tmp;

        map++;
        tmp = strrchr(map, ')');
        if ((tmp == NULL) || (tmp[1] != '\0')) {
            /* illegal pattern.  No error, but no match */
            return Success;
        }
    }

    in = NULL;
    haveDir = TRUE;
#ifdef WIN32
    strcpy(tmpname, Win32TempDir());
    strcat(tmpname, "\\xkb_XXXXXX");
    (void) mktemp(tmpname);
#endif
    if (XkbBaseDirectory != NULL) {
        if ((list->pattern[what][0] == '*') && (list->pattern[what][1] == '\0')) {
            if (asprintf(&buf, "%s/%s.dir", XkbBaseDirectory,
                         componentDirs[what]) == -1)
                buf = NULL;
            else
                in = fopen(buf, "r");
        }
        if (!in) {
            haveDir = FALSE;
            free(buf);
            if (asprintf
                (&buf,
                 "'%s/xkbcomp' '-R%s/%s' -w %ld -l -vlfhpR '%s'" W32_tmparg,
                 XkbBinDirectory, XkbBaseDirectory, componentDirs[what],
                 (long) ((xkbDebugFlags < 2) ? 1 :
                         ((xkbDebugFlags > 10) ? 10 : xkbDebugFlags)),
                 file W32_tmpfile) == -1)
                buf = NULL;
        }
    }
    else {
        if ((list->pattern[what][0] == '*') && (list->pattern[what][1] == '\0')) {
            if (asprintf(&buf, "%s.dir", componentDirs[what]) == -1)
                buf = NULL;
            else
                in = fopen(buf, "r");
        }
        if (!in) {
            haveDir = FALSE;
            free(buf);
            if (asprintf
                (&buf,
                 "xkbcomp -R%s -w %ld -l -vlfhpR '%s'" W32_tmparg,
                 componentDirs[what],
                 (long) ((xkbDebugFlags < 2) ? 1 :
                         ((xkbDebugFlags > 10) ? 10 : xkbDebugFlags)),
                 file W32_tmpfile) == -1)
                buf = NULL;
        }
    }
    status = Success;
    if (!haveDir) {
#ifndef WIN32
        in = Popen(buf, "r");
#else
        if (xkbDebugFlags)
            DebugF("[xkb] xkbList executes: %s\n", buf);
        if (System(buf) < 0)
            ErrorF("[xkb] Could not invoke keymap compiler\n");
        else
            in = fopen(tmpname, "r");
#endif
    }
    if (!in) {
        free(buf);
#ifdef WIN32
        unlink(tmpname);
#endif
        return BadImplementation;
    }
    list->nFound[what] = 0;
    free(buf);
    buf = malloc(PATH_MAX * sizeof(char));
    if (!buf) {
        fclose(in);
#ifdef WIN32
        unlink(tmpname);
#endif
        return BadAlloc;
    }
    while ((status == Success) && ((tmp = fgets(buf, PATH_MAX, in)) != NULL)) {
        unsigned flags;
        register unsigned int i;

        if (*tmp == '#')        /* comment, skip it */
            continue;
        if (!strncmp(tmp, "Warning:", 8) || !strncmp(tmp, "        ", 8))
            /* skip warnings too */
            continue;
        flags = 0;
        /* each line in the listing is supposed to start with two */
        /* groups of eight characters, which specify the general  */
        /* flags and the flags that are specific to the component */
        /* if they're missing, fail with BadImplementation        */
        for (i = 0; (i < 8) && (status == Success); i++) {      /* read the general flags */
            if (isalpha(*tmp))
                flags |= (1L << i);
            else if (*tmp != '-')
                status = BadImplementation;
            tmp++;
        }
        if (status != Success)
            break;
        if (!isspace(*tmp)) {
            status = BadImplementation;
            break;
        }
        else
            tmp++;
        for (i = 0; (i < 8) && (status == Success); i++) {      /* read the component flags */
            if (isalpha(*tmp))
                flags |= (1L << (i + 8));
            else if (*tmp != '-')
                status = BadImplementation;
            tmp++;
        }
        if (status != Success)
            break;
        if (isspace(*tmp)) {
            while (isspace(*tmp)) {
                tmp++;
            }
        }
        else {
            status = BadImplementation;
            break;
        }
        status = _AddListComponent(list, what, flags, tmp, client);
    }
#ifndef WIN32
    if (haveDir)
        fclose(in);
    else if ((rval = Pclose(in)) != 0) {
        if (xkbDebugFlags)
            ErrorF("[xkb] xkbcomp returned exit code %d\n", rval);
    }
#else
    fclose(in);
    unlink(tmpname);
#endif
    free(buf);
    return status;
}

/***====================================================================***/

/* ARGSUSED */
Status
XkbDDXList(DeviceIntPtr dev, XkbSrvListInfoPtr list, ClientPtr client)
{
    Status status;

    status = XkbDDXListComponent(dev, _XkbListKeycodes, list, client);
    if (status == Success)
        status = XkbDDXListComponent(dev, _XkbListTypes, list, client);
    if (status == Success)
        status = XkbDDXListComponent(dev, _XkbListCompat, list, client);
    if (status == Success)
        status = XkbDDXListComponent(dev, _XkbListSymbols, list, client);
    if (status == Success)
        status = XkbDDXListComponent(dev, _XkbListGeometry, list, client);
    return status;
}
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.6
log
@Update to xserver 1.11.2
@
text
@d47 1
a47 1
extern const char* Win32TempDir();
d49 1
d58 1
a58 1
#define W32_tmpfile 
d60 1
a60 1
#endif 
d64 2
a65 2
static char *componentDirs[_XkbListNumComponents] = {
	"keycodes", "types", "compat", "symbols", "geometry"
d71 2
a72 5
_AddListComponent(	XkbSrvListInfoPtr	list,
			int			what,
			unsigned		flags,
			char *			str,
			ClientPtr		client)
d74 15
a88 15
int		slen,wlen;
unsigned char *	wire8;
unsigned short *wire16;
char *		tmp;

    if (list->nTotal>=list->maxRtrn) {
	list->nTotal++;
	return Success;
    }
    tmp= strchr(str,')');
    if ((tmp==NULL)&&((tmp=strchr(str,'('))==NULL)) {
	slen= strlen(str);
	while ((slen>0) && isspace(str[slen-1])) {
	    slen--;
	}
d91 1
a91 1
	slen= (tmp-str+1);
d93 16
a108 14
    wlen= (((slen+1)/2)*2)+4;	/* four bytes for flags and length, pad to */
				/* 2-byte boundary */
    if ((list->szPool-list->nPool)<wlen) {
	if (wlen>1024)	list->szPool+= XkbPaddedSize(wlen*2);
	else		list->szPool+= 1024;
	list->pool= realloc(list->pool, list->szPool * sizeof(char));
	if (!list->pool)
	    return BadAlloc;
    }
    wire16= (unsigned short *)&list->pool[list->nPool];
    wire8= (unsigned char *)&wire16[2];
    wire16[0]= flags;
    wire16[1]= slen;
    memcpy(wire8,str,slen);
d110 2
a111 3
	register int n;
	swaps(&wire16[0],n);
	swaps(&wire16[1],n);
d113 1
a113 1
    list->nPool+= wlen;
d121 2
a122 4
XkbDDXListComponent(	DeviceIntPtr 		dev,
			int			what,
			XkbSrvListInfoPtr	list,
			ClientPtr		client)
d124 5
a128 5
char 	*file,*map,*tmp,*buf=NULL;
FILE 	*in;
Status	status;
int	rval;
Bool	haveDir;
d130 3
a132 1
char	tmpname[PATH_MAX];
d135 13
a147 12
    if ((list->pattern[what]==NULL)||(list->pattern[what][0]=='\0'))
	return Success;
    file= list->pattern[what];
    map= strrchr(file,'(');
    if (map!=NULL) {
	char *tmp;
	map++;
	tmp= strrchr(map,')');
	if ((tmp==NULL)||(tmp[1]!='\0')) {
	    /* illegal pattern.  No error, but no match */
	    return Success;
	}
d150 2
a151 2
    in= NULL;
    haveDir= TRUE;
d157 20
a176 21
    if (XkbBaseDirectory!=NULL) {
	if ((list->pattern[what][0]=='*')&&(list->pattern[what][1]=='\0')) {
	    if (asprintf(&buf, "%s/%s.dir", XkbBaseDirectory,
			 componentDirs[what]) == -1)
		buf = NULL;
	    else
		in = fopen(buf,"r");
	}
	if (!in) {
	    haveDir= FALSE;
	    free(buf);
	    if (asprintf
		(&buf,
		 "'%s/xkbcomp' '-R%s/%s' -w %ld -l -vlfhpR '%s'" W32_tmparg,
		 XkbBinDirectory, XkbBaseDirectory, componentDirs[what],
		 (long) ((xkbDebugFlags < 2) ? 1 :
			 ((xkbDebugFlags > 10) ? 10 : xkbDebugFlags)),
		 file W32_tmpfile
		    ) == -1)
		buf = NULL;
	}
d179 21
a199 23
	if ((list->pattern[what][0]=='*')&&(list->pattern[what][1]=='\0')) {
	    if (asprintf(&buf, "%s.dir", componentDirs[what]) == -1)
		buf = NULL;
	    else
		in = fopen(buf,"r");
	}
	if (!in) {
	    haveDir= FALSE;
	    free(buf);
	    if (asprintf
		(&buf,
		 "xkbcomp -R%s -w %ld -l -vlfhpR '%s'" W32_tmparg,
		 componentDirs[what],
		 (long)	((xkbDebugFlags < 2) ? 1 :
			 ((xkbDebugFlags > 10) ? 10 : xkbDebugFlags)),
		 file W32_tmpfile
		    ) == -1)
		buf = NULL;
	}
    }
    status= Success;
    if (!haveDir)
    {  
d201 1
a201 1
	in= Popen(buf,"r");
d204 5
a208 5
            DebugF("[xkb] xkbList executes: %s\n",buf);
	if (System(buf) < 0)
	    ErrorF("[xkb] Could not invoke keymap compiler\n");
	else
	    in= fopen(tmpname, "r");
d211 2
a212 3
    if (!in)
    {
	free(buf);
d214 1
a214 1
	unlink(tmpname);
d216 1
a216 1
	return BadImplementation;
d218 1
a218 1
    list->nFound[what]= 0;
d223 3
d228 48
a275 40
    while ((status==Success)&&((tmp=fgets(buf,PATH_MAX,in))!=NULL)) {
	unsigned flags;
	register unsigned int i;
	if (*tmp=='#') /* comment, skip it */
	    continue;
	if (!strncmp(tmp, "Warning:", 8) || !strncmp(tmp, "        ", 8))
	    /* skip warnings too */
	    continue;
	flags= 0;
	/* each line in the listing is supposed to start with two */
	/* groups of eight characters, which specify the general  */
	/* flags and the flags that are specific to the component */
	/* if they're missing, fail with BadImplementation	  */
	for (i=0;(i<8)&&(status==Success);i++) { /* read the general flags */
	   if (isalpha(*tmp))	flags|= (1L<<i);
	   else if (*tmp!='-')	status= BadImplementation;
	   tmp++;
	}
	if (status != Success)  break;
	if (!isspace(*tmp)) {
	     status= BadImplementation;
	     break;
	}
	else tmp++;
	for (i=0;(i<8)&&(status==Success);i++) { /* read the component flags */
	   if (isalpha(*tmp))	flags|= (1L<<(i+8));
	   else if (*tmp!='-')	status= BadImplementation;
	   tmp++;
	}
	if (status != Success)  break;
	if (isspace(*tmp)) {
	    while (isspace(*tmp)) {
		tmp++;
	    }
	}
	else {
	    status= BadImplementation;
	    break;
	}
	status= _AddListComponent(list,what,flags,tmp,client);
d279 4
a282 4
	fclose(in);
    else if ((rval=Pclose(in))!=0) {
	if (xkbDebugFlags)
	    ErrorF("[xkb] xkbcomp returned exit code %d\n",rval);
d296 1
a296 1
XkbDDXList(DeviceIntPtr	dev,XkbSrvListInfoPtr list,ClientPtr client)
d298 1
a298 1
Status	status;
d300 9
a308 9
    status= XkbDDXListComponent(dev,_XkbListKeycodes,list,client);
    if (status==Success)
	status= XkbDDXListComponent(dev,_XkbListTypes,list,client);
    if (status==Success)
	status= XkbDDXListComponent(dev,_XkbListCompat,list,client);
    if (status==Success)
	status= XkbDDXListComponent(dev,_XkbListSymbols,list,client);
    if (status==Success)
	status= XkbDDXListComponent(dev,_XkbListGeometry,list,client);
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d159 5
a163 2
	    buf = Xprintf("%s/%s.dir",XkbBaseDirectory,componentDirs[what]);
	    in= fopen(buf,"r");
d168 9
a176 6
	    buf = Xprintf(
		"'%s/xkbcomp' '-R%s/%s' -w %ld -l -vlfhpR '%s'" W32_tmparg,
                XkbBinDirectory,XkbBaseDirectory,componentDirs[what],(long)
		((xkbDebugFlags<2)?1:((xkbDebugFlags>10)?10:xkbDebugFlags)),
		file W32_tmpfile
                );
d181 4
a184 2
	    buf = Xprintf("%s.dir",componentDirs[what]);
	    in= fopen(buf,"r");
d189 9
a197 6
	    buf = Xprintf(
		"xkbcomp -R%s -w %ld -l -vlfhpR '%s'" W32_tmparg,
                componentDirs[what],(long)
		((xkbDebugFlags<2)?1:((xkbDebugFlags>10)?10:xkbDebugFlags)),
		file W32_tmpfile
                );
d216 1
a216 2
        if (buf != NULL)
	    free(buf);
d225 2
a226 1
    if (!buf)
d228 1
d281 1
a281 2
    if (buf != NULL)
        free(buf);
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d100 1
a100 1
	list->pool= xrealloc(list->pool, list->szPool * sizeof(char));
d164 1
d180 1
d206 1
a206 1
	    xfree (buf);
d213 2
a214 5
    if (buf) {
        xfree(buf);
        buf = NULL;
    }
    buf = xalloc(PATH_MAX * sizeof(char));
d270 1
a270 1
        xfree (buf);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a32 1
#define	NEED_EVENTS 1
d64 1
a64 1
	"keymap", "keycodes", "types", "compat", "symbols", "geometry"
d100 1
a100 1
	list->pool= _XkbTypedRealloc(list->pool,list->szPool,char);
d151 1
a151 1
    haveDir= True;
d163 1
a163 1
	    haveDir= False;
d178 1
a178 1
	    haveDir= False;
d283 1
a283 3
    status= XkbDDXListComponent(dev,_XkbListKeymaps,list,client);
    if (status==Success)
	status= XkbDDXListComponent(dev,_XkbListKeycodes,list,client);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d195 1
a195 1
            DebugF("xkbList executes: %s\n",buf);
d197 1
a197 1
	    ErrorF("Could not invoke keymap compiler\n");
d265 1
a265 1
	    ErrorF("xkbcomp returned exit code %d\n",rval);
@


1.1
log
@Initial revision
@
text
@d43 1
a43 1
#include <X11/extensions/XKBsrv.h>
a45 8
#ifndef PATH_MAX
#ifdef MAXPATHLEN
#define	PATH_MAX MAXPATHLEN
#else
#define	PATH_MAX 1024
#endif
#endif

d194 2
a195 3
#ifdef DEBUG_CMD
	ErrorF("xkb executes: %s\n",buf);
#endif
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d43 1
a43 1
#include <xkbsrv.h>
@

