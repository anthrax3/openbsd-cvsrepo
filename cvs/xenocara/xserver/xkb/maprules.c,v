head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.6
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.05.29.12.02.40;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	s0SI41sEunLdyFfd;

1.10
date	2015.09.16.19.10.26;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	Te1daavkBLskZ8gc;

1.9
date	2014.09.27.17.53.05;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	cVXoV5PxI8YrEaVA;

1.8
date	2013.06.07.17.28.56;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.58;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.11;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.38;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.38;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.28;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.28;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.05.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/************************************************************
 Copyright (c) 1996 by Silicon Graphics Computer Systems, Inc.

 Permission to use, copy, modify, and distribute this
 software and its documentation for any purpose and without
 fee is hereby granted, provided that the above copyright
 notice appear in all copies and that both that copyright
 notice and this permission notice appear in supporting
 documentation, and that the name of Silicon Graphics not be
 used in advertising or publicity pertaining to distribution
 of the software without specific prior written permission.
 Silicon Graphics makes no representation about the suitability
 of this software for any purpose. It is provided "as is"
 without any express or implied warranty.

 SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
 GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
 DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
 THE USE OR PERFORMANCE OF THIS SOFTWARE.

 ********************************************************/

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>

#define X_INCLUDE_STRING_H
#define XOS_USE_NO_LOCKING
#include <X11/Xos_r.h>

#include <X11/Xproto.h>
#include <X11/X.h>
#include <X11/Xos.h>
#include <X11/Xfuncs.h>
#include <X11/Xatom.h>
#include <X11/keysym.h>
#include "misc.h"
#include "inputstr.h"
#include "dix.h"
#include "os.h"
#include "xkbstr.h"
#define XKBSRV_NEED_FILE_FUNCS
#include <xkbsrv.h>

/***====================================================================***/

#define DFLT_LINE_SIZE	128

typedef struct {
    int line_num;
    int sz_line;
    int num_line;
    char buf[DFLT_LINE_SIZE];
    char *line;
} InputLine;

static void
InitInputLine(InputLine * line)
{
    line->line_num = 1;
    line->num_line = 0;
    line->sz_line = DFLT_LINE_SIZE;
    line->line = line->buf;
    return;
}

static void
FreeInputLine(InputLine * line)
{
    if (line->line != line->buf)
        free(line->line);
    line->line_num = 1;
    line->num_line = 0;
    line->sz_line = DFLT_LINE_SIZE;
    line->line = line->buf;
    return;
}

static int
InputLineAddChar(InputLine * line, int ch)
{
    if (line->num_line >= line->sz_line) {
        if (line->line == line->buf) {
            line->line = xallocarray(line->sz_line, 2);
            memcpy(line->line, line->buf, line->sz_line);
        }
        else {
            line->line = reallocarray(line->line, line->sz_line, 2);
        }
        line->sz_line *= 2;
    }
    line->line[line->num_line++] = ch;
    return ch;
}

#define	ADD_CHAR(l,c)	((l)->num_line<(l)->sz_line?\
				(int)((l)->line[(l)->num_line++]= (c)):\
				InputLineAddChar(l,c))

static Bool
GetInputLine(FILE * file, InputLine * line, Bool checkbang)
{
    int ch;
    Bool endOfFile, spacePending, slashPending, inComment;

    endOfFile = FALSE;
    while ((!endOfFile) && (line->num_line == 0)) {
        spacePending = slashPending = inComment = FALSE;
        while (((ch = getc(file)) != '\n') && (ch != EOF)) {
            if (ch == '\\') {
                if ((ch = getc(file)) == EOF)
                    break;
                if (ch == '\n') {
                    inComment = FALSE;
                    ch = ' ';
                    line->line_num++;
                }
            }
            if (inComment)
                continue;
            if (ch == '/') {
                if (slashPending) {
                    inComment = TRUE;
                    slashPending = FALSE;
                }
                else {
                    slashPending = TRUE;
                }
                continue;
            }
            else if (slashPending) {
                if (spacePending) {
                    ADD_CHAR(line, ' ');
                    spacePending = FALSE;
                }
                ADD_CHAR(line, '/');
                slashPending = FALSE;
            }
            if (isspace(ch)) {
                while (isspace(ch) && (ch != '\n') && (ch != EOF)) {
                    ch = getc(file);
                }
                if (ch == EOF)
                    break;
                if ((ch != '\n') && (line->num_line > 0))
                    spacePending = TRUE;
                ungetc(ch, file);
            }
            else {
                if (spacePending) {
                    ADD_CHAR(line, ' ');
                    spacePending = FALSE;
                }
                if (checkbang && ch == '!') {
                    if (line->num_line != 0) {
                        DebugF("The '!' legal only at start of line\n");
                        DebugF("Line containing '!' ignored\n");
                        line->num_line = 0;
                        inComment = 0;
                        break;
                    }

                }
                ADD_CHAR(line, ch);
            }
        }
        if (ch == EOF)
            endOfFile = TRUE;
/*	else line->num_line++;*/
    }
    if ((line->num_line == 0) && (endOfFile))
        return FALSE;
    ADD_CHAR(line, '\0');
    return TRUE;
}

/***====================================================================***/

#define	MODEL		0
#define	LAYOUT		1
#define	VARIANT		2
#define	OPTION		3
#define	KEYCODES	4
#define SYMBOLS		5
#define	TYPES		6
#define	COMPAT		7
#define	GEOMETRY	8
#define	MAX_WORDS	9

#define	PART_MASK	0x000F
#define	COMPONENT_MASK	0x03F0

static const char *cname[MAX_WORDS] = {
    "model", "layout", "variant", "option",
    "keycodes", "symbols", "types", "compat", "geometry"
};

typedef struct _RemapSpec {
    int number;
    int num_remap;
    struct {
        int word;
        int index;
    } remap[MAX_WORDS];
} RemapSpec;

typedef struct _FileSpec {
    char *name[MAX_WORDS];
    struct _FileSpec *pending;
} FileSpec;

typedef struct {
    const char *model;
    const char *layout[XkbNumKbdGroups + 1];
    const char *variant[XkbNumKbdGroups + 1];
    const char *options;
} XkbRF_MultiDefsRec, *XkbRF_MultiDefsPtr;

#define NDX_BUFF_SIZE	4

/***====================================================================***/

static char *
get_index(char *str, int *ndx)
{
    char ndx_buf[NDX_BUFF_SIZE];
    char *end;

    if (*str != '[') {
        *ndx = 0;
        return str;
    }
    str++;
    end = strchr(str, ']');
    if (end == NULL) {
        *ndx = -1;
        return str - 1;
    }
    if ((end - str) >= NDX_BUFF_SIZE) {
        *ndx = -1;
        return end + 1;
    }
    strlcpy(ndx_buf, str, 1 + end - str);
    *ndx = atoi(ndx_buf);
    return end + 1;
}

static void
SetUpRemap(InputLine * line, RemapSpec * remap)
{
    char *tok, *str;
    unsigned present, l_ndx_present, v_ndx_present;
    register int i;
    int len, ndx;
    _Xstrtokparams strtok_buf;
    Bool found;

    l_ndx_present = v_ndx_present = present = 0;
    str = &line->line[1];
    len = remap->number;
    memset((char *) remap, 0, sizeof(RemapSpec));
    remap->number = len;
    while ((tok = _XStrtok(str, " ", strtok_buf)) != NULL) {
        found = FALSE;
        str = NULL;
        if (strcmp(tok, "=") == 0)
            continue;
        for (i = 0; i < MAX_WORDS; i++) {
            len = strlen(cname[i]);
            if (strncmp(cname[i], tok, len) == 0) {
                if (strlen(tok) > len) {
                    char *end = get_index(tok + len, &ndx);

                    if ((i != LAYOUT && i != VARIANT) ||
                        *end != '\0' || ndx == -1)
                        break;
                    if (ndx < 1 || ndx > XkbNumKbdGroups) {
                        DebugF("Illegal %s index: %d\n", cname[i], ndx);
                        DebugF("Index must be in range 1..%d\n",
                               XkbNumKbdGroups);
                        break;
                    }
                }
                else {
                    ndx = 0;
                }
                found = TRUE;
                if (present & (1 << i)) {
                    if ((i == LAYOUT && l_ndx_present & (1 << ndx)) ||
                        (i == VARIANT && v_ndx_present & (1 << ndx))) {
                        DebugF("Component \"%s\" listed twice\n", tok);
                        DebugF("Second definition ignored\n");
                        break;
                    }
                }
                present |= (1 << i);
                if (i == LAYOUT)
                    l_ndx_present |= 1 << ndx;
                if (i == VARIANT)
                    v_ndx_present |= 1 << ndx;
                remap->remap[remap->num_remap].word = i;
                remap->remap[remap->num_remap++].index = ndx;
                break;
            }
        }
        if (!found) {
            fprintf(stderr, "Unknown component \"%s\" ignored\n", tok);
        }
    }
    if ((present & PART_MASK) == 0) {
        unsigned mask = PART_MASK;

        ErrorF("Mapping needs at least one of ");
        for (i = 0; (i < MAX_WORDS); i++) {
            if ((1L << i) & mask) {
                mask &= ~(1L << i);
                if (mask)
                    DebugF("\"%s,\" ", cname[i]);
                else
                    DebugF("or \"%s\"\n", cname[i]);
            }
        }
        DebugF("Illegal mapping ignored\n");
        remap->num_remap = 0;
        return;
    }
    if ((present & COMPONENT_MASK) == 0) {
        DebugF("Mapping needs at least one component\n");
        DebugF("Illegal mapping ignored\n");
        remap->num_remap = 0;
        return;
    }
    remap->number++;
    return;
}

static Bool
MatchOneOf(const char *wanted, const char *vals_defined)
{
    const char *str, *next;
    int want_len = strlen(wanted);

    for (str = vals_defined, next = NULL; str != NULL; str = next) {
        int len;

        next = strchr(str, ',');
        if (next) {
            len = next - str;
            next++;
        }
        else {
            len = strlen(str);
        }
        if ((len == want_len) && (strncmp(wanted, str, len) == 0))
            return TRUE;
    }
    return FALSE;
}

/***====================================================================***/

static Bool
CheckLine(InputLine * line,
          RemapSpec * remap, XkbRF_RulePtr rule, XkbRF_GroupPtr group)
{
    char *str, *tok;
    register int nread, i;
    FileSpec tmp;
    _Xstrtokparams strtok_buf;
    Bool append = FALSE;

    if (line->line[0] == '!') {
        if (line->line[1] == '$' ||
            (line->line[1] == ' ' && line->line[2] == '$')) {
            char *gname = strchr(line->line, '$');
            char *words = strchr(gname, ' ');

            if (!words)
                return FALSE;
            *words++ = '\0';
            for (; *words; words++) {
                if (*words != '=' && *words != ' ')
                    break;
            }
            if (*words == '\0')
                return FALSE;
            group->name = Xstrdup(gname);
            group->words = Xstrdup(words);
            for (i = 1, words = group->words; *words; words++) {
                if (*words == ' ') {
                    *words++ = '\0';
                    i++;
                }
            }
            group->number = i;
            return TRUE;
        }
        else {
            SetUpRemap(line, remap);
            return FALSE;
        }
    }

    if (remap->num_remap == 0) {
        DebugF("Must have a mapping before first line of data\n");
        DebugF("Illegal line of data ignored\n");
        return FALSE;
    }
    memset((char *) &tmp, 0, sizeof(FileSpec));
    str = line->line;
    for (nread = 0; (tok = _XStrtok(str, " ", strtok_buf)) != NULL; nread++) {
        str = NULL;
        if (strcmp(tok, "=") == 0) {
            nread--;
            continue;
        }
        if (nread > remap->num_remap) {
            DebugF("Too many words on a line\n");
            DebugF("Extra word \"%s\" ignored\n", tok);
            continue;
        }
        tmp.name[remap->remap[nread].word] = tok;
        if (*tok == '+' || *tok == '|')
            append = TRUE;
    }
    if (nread < remap->num_remap) {
        DebugF("Too few words on a line: %s\n", line->line);
        DebugF("line ignored\n");
        return FALSE;
    }

    rule->flags = 0;
    rule->number = remap->number;
    if (tmp.name[OPTION])
        rule->flags |= XkbRF_Option;
    else if (append)
        rule->flags |= XkbRF_Append;
    else
        rule->flags |= XkbRF_Normal;
    rule->model = Xstrdup(tmp.name[MODEL]);
    rule->layout = Xstrdup(tmp.name[LAYOUT]);
    rule->variant = Xstrdup(tmp.name[VARIANT]);
    rule->option = Xstrdup(tmp.name[OPTION]);

    rule->keycodes = Xstrdup(tmp.name[KEYCODES]);
    rule->symbols = Xstrdup(tmp.name[SYMBOLS]);
    rule->types = Xstrdup(tmp.name[TYPES]);
    rule->compat = Xstrdup(tmp.name[COMPAT]);
    rule->geometry = Xstrdup(tmp.name[GEOMETRY]);

    rule->layout_num = rule->variant_num = 0;
    for (i = 0; i < nread; i++) {
        if (remap->remap[i].index) {
            if (remap->remap[i].word == LAYOUT)
                rule->layout_num = remap->remap[i].index;
            if (remap->remap[i].word == VARIANT)
                rule->variant_num = remap->remap[i].index;
        }
    }
    return TRUE;
}

static char *
_Concat(char *str1, const char *str2)
{
    int len;

    if ((!str1) || (!str2))
        return str1;
    len = strlen(str1) + strlen(str2) + 1;
    str1 = realloc(str1, len * sizeof(char));
    if (str1)
        strcat(str1, str2);
    return str1;
}

static void
squeeze_spaces(char *p1)
{
    char *p2;

    for (p2 = p1; *p2; p2++) {
        *p1 = *p2;
        if (*p1 != ' ')
            p1++;
    }
    *p1 = '\0';
}

static Bool
MakeMultiDefs(XkbRF_MultiDefsPtr mdefs, XkbRF_VarDefsPtr defs)
{
    char *options;
    memset((char *) mdefs, 0, sizeof(XkbRF_MultiDefsRec));
    mdefs->model = defs->model;
    options = Xstrdup(defs->options);
    if (options)
        squeeze_spaces(options);
    mdefs->options = options;

    if (defs->layout) {
        if (!strchr(defs->layout, ',')) {
            mdefs->layout[0] = defs->layout;
        }
        else {
            char *p;
            char *layout;
            int i;

            layout = Xstrdup(defs->layout);
            if (layout == NULL)
                return FALSE;
            squeeze_spaces(layout);
            mdefs->layout[1] = layout;
            p = layout;
            for (i = 2; i <= XkbNumKbdGroups; i++) {
                if ((p = strchr(p, ','))) {
                    *p++ = '\0';
                    mdefs->layout[i] = p;
                }
                else {
                    break;
                }
            }
            if (p && (p = strchr(p, ',')))
                *p = '\0';
        }
    }

    if (defs->variant) {
        if (!strchr(defs->variant, ',')) {
            mdefs->variant[0] = defs->variant;
        }
        else {
            char *p;
            char *variant;
            int i;

            variant = Xstrdup(defs->variant);
            if (variant == NULL)
                return FALSE;
            squeeze_spaces(variant);
            mdefs->variant[1] = variant;
            p = variant;
            for (i = 2; i <= XkbNumKbdGroups; i++) {
                if ((p = strchr(p, ','))) {
                    *p++ = '\0';
                    mdefs->variant[i] = p;
                }
                else {
                    break;
                }
            }
            if (p && (p = strchr(p, ',')))
                *p = '\0';
        }
    }
    return TRUE;
}

static void
FreeMultiDefs(XkbRF_MultiDefsPtr defs)
{
    free((void *) defs->options);
    free((void *) defs->layout[1]);
    free((void *) defs->variant[1]);
}

static void
Apply(const char *src, char **dst)
{
    if (src) {
        if (*src == '+' || *src == '!') {
            *dst = _Concat(*dst, src);
        }
        else {
            if (*dst == NULL)
                *dst = Xstrdup(src);
        }
    }
}

static void
XkbRF_ApplyRule(XkbRF_RulePtr rule, XkbComponentNamesPtr names)
{
    rule->flags &= ~XkbRF_PendingMatch; /* clear the flag because it's applied */

    Apply(rule->keycodes, &names->keycodes);
    Apply(rule->symbols, &names->symbols);
    Apply(rule->types, &names->types);
    Apply(rule->compat, &names->compat);
    Apply(rule->geometry, &names->geometry);
}

static Bool
CheckGroup(XkbRF_RulesPtr rules, const char *group_name, const char *name)
{
    int i;
    char *p;
    XkbRF_GroupPtr group;

    for (i = 0, group = rules->groups; i < rules->num_groups; i++, group++) {
        if (!strcmp(group->name, group_name)) {
            break;
        }
    }
    if (i == rules->num_groups)
        return FALSE;
    for (i = 0, p = group->words; i < group->number; i++, p += strlen(p) + 1) {
        if (!strcmp(p, name)) {
            return TRUE;
        }
    }
    return FALSE;
}

static int
XkbRF_CheckApplyRule(XkbRF_RulePtr rule,
                     XkbRF_MultiDefsPtr mdefs,
                     XkbComponentNamesPtr names, XkbRF_RulesPtr rules)
{
    Bool pending = FALSE;

    if (rule->model != NULL) {
        if (mdefs->model == NULL)
            return 0;
        if (strcmp(rule->model, "*") == 0) {
            pending = TRUE;
        }
        else {
            if (rule->model[0] == '$') {
                if (!CheckGroup(rules, rule->model, mdefs->model))
                    return 0;
            }
            else {
                if (strcmp(rule->model, mdefs->model) != 0)
                    return 0;
            }
        }
    }
    if (rule->option != NULL) {
        if (mdefs->options == NULL)
            return 0;
        if ((!MatchOneOf(rule->option, mdefs->options)))
            return 0;
    }

    if (rule->layout != NULL) {
        if (mdefs->layout[rule->layout_num] == NULL ||
            *mdefs->layout[rule->layout_num] == '\0')
            return 0;
        if (strcmp(rule->layout, "*") == 0) {
            pending = TRUE;
        }
        else {
            if (rule->layout[0] == '$') {
                if (!CheckGroup(rules, rule->layout,
                                mdefs->layout[rule->layout_num]))
                    return 0;
            }
            else {
                if (strcmp(rule->layout, mdefs->layout[rule->layout_num]) != 0)
                    return 0;
            }
        }
    }
    if (rule->variant != NULL) {
        if (mdefs->variant[rule->variant_num] == NULL ||
            *mdefs->variant[rule->variant_num] == '\0')
            return 0;
        if (strcmp(rule->variant, "*") == 0) {
            pending = TRUE;
        }
        else {
            if (rule->variant[0] == '$') {
                if (!CheckGroup(rules, rule->variant,
                                mdefs->variant[rule->variant_num]))
                    return 0;
            }
            else {
                if (strcmp(rule->variant,
                           mdefs->variant[rule->variant_num]) != 0)
                    return 0;
            }
        }
    }
    if (pending) {
        rule->flags |= XkbRF_PendingMatch;
        return rule->number;
    }
    /* exact match, apply it now */
    XkbRF_ApplyRule(rule, names);
    return rule->number;
}

static void
XkbRF_ClearPartialMatches(XkbRF_RulesPtr rules)
{
    register int i;
    XkbRF_RulePtr rule;

    for (i = 0, rule = rules->rules; i < rules->num_rules; i++, rule++) {
        rule->flags &= ~XkbRF_PendingMatch;
    }
}

static void
XkbRF_ApplyPartialMatches(XkbRF_RulesPtr rules, XkbComponentNamesPtr names)
{
    int i;
    XkbRF_RulePtr rule;

    for (rule = rules->rules, i = 0; i < rules->num_rules; i++, rule++) {
        if ((rule->flags & XkbRF_PendingMatch) == 0)
            continue;
        XkbRF_ApplyRule(rule, names);
    }
}

static void
XkbRF_CheckApplyRules(XkbRF_RulesPtr rules,
                      XkbRF_MultiDefsPtr mdefs,
                      XkbComponentNamesPtr names, int flags)
{
    int i;
    XkbRF_RulePtr rule;
    int skip;

    for (rule = rules->rules, i = 0; i < rules->num_rules; rule++, i++) {
        if ((rule->flags & flags) != flags)
            continue;
        skip = XkbRF_CheckApplyRule(rule, mdefs, names, rules);
        if (skip && !(flags & XkbRF_Option)) {
            for (; (i < rules->num_rules) && (rule->number == skip);
                 rule++, i++);
            rule--;
            i--;
        }
    }
}

/***====================================================================***/

static char *
XkbRF_SubstituteVars(char *name, XkbRF_MultiDefsPtr mdefs)
{
    char *str, *outstr, *orig, *var;
    int len, ndx;

    orig = name;
    str = index(name, '%');
    if (str == NULL)
        return name;
    len = strlen(name);
    while (str != NULL) {
        char pfx = str[1];
        int extra_len = 0;

        if ((pfx == '+') || (pfx == '|') || (pfx == '_') || (pfx == '-')) {
            extra_len = 1;
            str++;
        }
        else if (pfx == '(') {
            extra_len = 2;
            str++;
        }
        var = str + 1;
        str = get_index(var + 1, &ndx);
        if (ndx == -1) {
            str = index(str, '%');
            continue;
        }
        if ((*var == 'l') && mdefs->layout[ndx] && *mdefs->layout[ndx])
            len += strlen(mdefs->layout[ndx]) + extra_len;
        else if ((*var == 'm') && mdefs->model)
            len += strlen(mdefs->model) + extra_len;
        else if ((*var == 'v') && mdefs->variant[ndx] && *mdefs->variant[ndx])
            len += strlen(mdefs->variant[ndx]) + extra_len;
        if ((pfx == '(') && (*str == ')')) {
            str++;
        }
        str = index(&str[0], '%');
    }
    name = malloc(len + 1);
    str = orig;
    outstr = name;
    while (*str != '\0') {
        if (str[0] == '%') {
            char pfx, sfx;

            str++;
            pfx = str[0];
            sfx = '\0';
            if ((pfx == '+') || (pfx == '|') || (pfx == '_') || (pfx == '-')) {
                str++;
            }
            else if (pfx == '(') {
                sfx = ')';
                str++;
            }
            else
                pfx = '\0';

            var = str;
            str = get_index(var + 1, &ndx);
            if (ndx == -1) {
                continue;
            }
            if ((*var == 'l') && mdefs->layout[ndx] && *mdefs->layout[ndx]) {
                if (pfx)
                    *outstr++ = pfx;
                strcpy(outstr, mdefs->layout[ndx]);
                outstr += strlen(mdefs->layout[ndx]);
                if (sfx)
                    *outstr++ = sfx;
            }
            else if ((*var == 'm') && (mdefs->model)) {
                if (pfx)
                    *outstr++ = pfx;
                strcpy(outstr, mdefs->model);
                outstr += strlen(mdefs->model);
                if (sfx)
                    *outstr++ = sfx;
            }
            else if ((*var == 'v') && mdefs->variant[ndx] &&
                     *mdefs->variant[ndx]) {
                if (pfx)
                    *outstr++ = pfx;
                strcpy(outstr, mdefs->variant[ndx]);
                outstr += strlen(mdefs->variant[ndx]);
                if (sfx)
                    *outstr++ = sfx;
            }
            if ((pfx == '(') && (*str == ')'))
                str++;
        }
        else {
            *outstr++ = *str++;
        }
    }
    *outstr++ = '\0';
    if (orig != name)
        free(orig);
    return name;
}

/***====================================================================***/

Bool
XkbRF_GetComponents(XkbRF_RulesPtr rules,
                    XkbRF_VarDefsPtr defs, XkbComponentNamesPtr names)
{
    XkbRF_MultiDefsRec mdefs;

    MakeMultiDefs(&mdefs, defs);

    memset((char *) names, 0, sizeof(XkbComponentNamesRec));
    XkbRF_ClearPartialMatches(rules);
    XkbRF_CheckApplyRules(rules, &mdefs, names, XkbRF_Normal);
    XkbRF_ApplyPartialMatches(rules, names);
    XkbRF_CheckApplyRules(rules, &mdefs, names, XkbRF_Append);
    XkbRF_ApplyPartialMatches(rules, names);
    XkbRF_CheckApplyRules(rules, &mdefs, names, XkbRF_Option);
    XkbRF_ApplyPartialMatches(rules, names);

    if (names->keycodes)
        names->keycodes = XkbRF_SubstituteVars(names->keycodes, &mdefs);
    if (names->symbols)
        names->symbols = XkbRF_SubstituteVars(names->symbols, &mdefs);
    if (names->types)
        names->types = XkbRF_SubstituteVars(names->types, &mdefs);
    if (names->compat)
        names->compat = XkbRF_SubstituteVars(names->compat, &mdefs);
    if (names->geometry)
        names->geometry = XkbRF_SubstituteVars(names->geometry, &mdefs);

    FreeMultiDefs(&mdefs);
    return (names->keycodes && names->symbols && names->types &&
            names->compat && names->geometry);
}

static XkbRF_RulePtr
XkbRF_AddRule(XkbRF_RulesPtr rules)
{
    if (rules->sz_rules < 1) {
        rules->sz_rules = 16;
        rules->num_rules = 0;
        rules->rules = calloc(rules->sz_rules, sizeof(XkbRF_RuleRec));
    }
    else if (rules->num_rules >= rules->sz_rules) {
        rules->sz_rules *= 2;
        rules->rules = reallocarray(rules->rules,
                                    rules->sz_rules, sizeof(XkbRF_RuleRec));
    }
    if (!rules->rules) {
        rules->sz_rules = rules->num_rules = 0;
        DebugF("Allocation failure in XkbRF_AddRule\n");
        return NULL;
    }
    memset((char *) &rules->rules[rules->num_rules], 0, sizeof(XkbRF_RuleRec));
    return &rules->rules[rules->num_rules++];
}

static XkbRF_GroupPtr
XkbRF_AddGroup(XkbRF_RulesPtr rules)
{
    if (rules->sz_groups < 1) {
        rules->sz_groups = 16;
        rules->num_groups = 0;
        rules->groups = calloc(rules->sz_groups, sizeof(XkbRF_GroupRec));
    }
    else if (rules->num_groups >= rules->sz_groups) {
        rules->sz_groups *= 2;
        rules->groups = reallocarray(rules->groups,
                                     rules->sz_groups, sizeof(XkbRF_GroupRec));
    }
    if (!rules->groups) {
        rules->sz_groups = rules->num_groups = 0;
        return NULL;
    }

    memset((char *) &rules->groups[rules->num_groups], 0,
           sizeof(XkbRF_GroupRec));
    return &rules->groups[rules->num_groups++];
}

Bool
XkbRF_LoadRules(FILE * file, XkbRF_RulesPtr rules)
{
    InputLine line;
    RemapSpec remap;
    XkbRF_RuleRec trule, *rule;
    XkbRF_GroupRec tgroup, *group;

    if (!(rules && file))
        return FALSE;
    memset((char *) &remap, 0, sizeof(RemapSpec));
    memset((char *) &tgroup, 0, sizeof(XkbRF_GroupRec));
    InitInputLine(&line);
    while (GetInputLine(file, &line, TRUE)) {
        if (CheckLine(&line, &remap, &trule, &tgroup)) {
            if (tgroup.number) {
                if ((group = XkbRF_AddGroup(rules)) != NULL) {
                    *group = tgroup;
                    memset((char *) &tgroup, 0, sizeof(XkbRF_GroupRec));
                }
            }
            else {
                if ((rule = XkbRF_AddRule(rules)) != NULL) {
                    *rule = trule;
                    memset((char *) &trule, 0, sizeof(XkbRF_RuleRec));
                }
            }
        }
        line.num_line = 0;
    }
    FreeInputLine(&line);
    return TRUE;
}

Bool
XkbRF_LoadRulesByName(char *base, char *locale, XkbRF_RulesPtr rules)
{
    FILE *file;
    char buf[PATH_MAX];
    Bool ok;

    if ((!base) || (!rules))
        return FALSE;
    if (locale) {
        if (snprintf(buf, PATH_MAX, "%s-%s", base, locale) >= PATH_MAX)
            return FALSE;
    }
    else {
        if (strlen(base) + 1 > PATH_MAX)
            return FALSE;
        strcpy(buf, base);
    }

    file = fopen(buf, "r");
    if ((!file) && (locale)) {  /* fallback if locale was specified */
        strcpy(buf, base);
        file = fopen(buf, "r");
    }
    if (!file)
        return FALSE;
    ok = XkbRF_LoadRules(file, rules);
    fclose(file);
    return ok;
}

/***====================================================================***/

XkbRF_RulesPtr
XkbRF_Create(void)
{
    return calloc(1, sizeof(XkbRF_RulesRec));
}

/***====================================================================***/

void
XkbRF_Free(XkbRF_RulesPtr rules, Bool freeRules)
{
    int i;
    XkbRF_RulePtr rule;
    XkbRF_GroupPtr group;

    if (!rules)
        return;
    if (rules->rules) {
        for (i = 0, rule = rules->rules; i < rules->num_rules; i++, rule++) {
            free((void *) rule->model);
            free((void *) rule->layout);
            free((void *) rule->variant);
            free((void *) rule->option);
            free((void *) rule->keycodes);
            free((void *) rule->symbols);
            free((void *) rule->types);
            free((void *) rule->compat);
            free((void *) rule->geometry);
            memset((char *) rule, 0, sizeof(XkbRF_RuleRec));
        }
        free(rules->rules);
        rules->num_rules = rules->sz_rules = 0;
        rules->rules = NULL;
    }

    if (rules->groups) {
        for (i = 0, group = rules->groups; i < rules->num_groups; i++, group++) {
            free((void *) group->name);
            free(group->words);
        }
        free(rules->groups);
        rules->num_groups = 0;
        rules->groups = NULL;
    }
    if (freeRules)
        free(rules);
    return;
}
@


1.10
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d92 1
a92 1
            line->line = malloc(line->sz_line * 2);
d96 1
a96 1
            line->line = realloc((char *) line->line, line->sz_line * 2);
d900 2
a901 2
        rules->rules = realloc(rules->rules,
                               rules->sz_rules * sizeof(XkbRF_RuleRec));
d922 2
a923 2
        rules->groups = realloc(rules->groups,
                                rules->sz_groups * sizeof(XkbRF_GroupRec));
@


1.9
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d9 2
a10 2
 documentation, and that the name of Silicon Graphics not be 
 used in advertising or publicity pertaining to distribution 
d12 1
a12 1
 Silicon Graphics makes no representation about the suitability 
d15 3
a17 3
 
 SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
 SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d19 3
a21 3
 GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
 DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
 DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
@


1.8
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d221 4
a224 4
    char *model;
    char *layout[XkbNumKbdGroups + 1];
    char *variant[XkbNumKbdGroups + 1];
    char *options;
d346 1
a346 1
MatchOneOf(char *wanted, char *vals_defined)
d348 1
a348 1
    char *str, *next;
d472 1
a472 1
_Concat(char *str1, char *str2)
d501 1
a501 1

d504 4
a507 3
    mdefs->options = Xstrdup(defs->options);
    if (mdefs->options)
        squeeze_spaces(mdefs->options);
d515 1
d518 2
a519 2
            mdefs->layout[1] = Xstrdup(defs->layout);
            if (mdefs->layout[1] == NULL)
d521 3
a523 2
            squeeze_spaces(mdefs->layout[1]);
            p = mdefs->layout[1];
d544 1
d547 2
a548 2
            mdefs->variant[1] = Xstrdup(defs->variant);
            if (mdefs->variant[1] == NULL)
d550 3
a552 2
            squeeze_spaces(mdefs->variant[1]);
            p = mdefs->variant[1];
d572 3
a574 3
    free(defs->options);
    free(defs->layout[1]);
    free(defs->variant[1]);
d578 1
a578 1
Apply(char *src, char **dst)
d604 1
a604 1
CheckGroup(XkbRF_RulesPtr rules, char *group_name, char *name)
d1021 9
a1029 9
            free(rule->model);
            free(rule->layout);
            free(rule->variant);
            free(rule->option);
            free(rule->keycodes);
            free(rule->symbols);
            free(rule->types);
            free(rule->compat);
            free(rule->geometry);
d1039 1
a1039 1
            free(group->name);
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d867 1
@


1.6
log
@Update to xserver 1.11.2
@
text
@a54 2


d58 5
a62 5
	int	line_num;
	int	sz_line;
	int	num_line;
	char	buf[DFLT_LINE_SIZE];
	char *	line;
d66 1
a66 1
InitInputLine(InputLine *line)
d68 4
a71 4
    line->line_num= 1;
    line->num_line= 0;
    line->sz_line= DFLT_LINE_SIZE;
    line->line=	line->buf;
d76 1
a76 1
FreeInputLine(InputLine *line)
d78 6
a83 6
    if (line->line!=line->buf)
	free(line->line);
    line->line_num= 1;
    line->num_line= 0;
    line->sz_line= DFLT_LINE_SIZE;
    line->line= line->buf;
d88 1
a88 1
InputLineAddChar(InputLine *line,int ch)
d90 9
a98 9
    if (line->num_line>=line->sz_line) {
	if (line->line==line->buf) {
	    line->line= malloc(line->sz_line*2);
	    memcpy(line->line,line->buf,line->sz_line);
	}
	else {
	    line->line= realloc((char *)line->line,line->sz_line*2);
	}
	line->sz_line*= 2;
d100 1
a100 1
    line->line[line->num_line++]= ch;
d109 1
a109 1
GetInputLine(FILE *file,InputLine *line,Bool checkbang)
d111 2
a112 2
int	ch;
Bool	endOfFile,spacePending,slashPending,inComment;
d114 63
a176 63
     endOfFile= FALSE;
     while ((!endOfFile)&&(line->num_line==0)) {
	spacePending= slashPending= inComment= FALSE;
	while (((ch=getc(file))!='\n')&&(ch!=EOF)) {
	    if (ch=='\\') {
		if ((ch=getc(file))==EOF)
		    break;
		if (ch=='\n') {
		    inComment= FALSE;
		    ch= ' ';
		    line->line_num++;
		}
	    }
	    if (inComment)
		continue;
	    if (ch=='/') {
		if (slashPending) {
		    inComment= TRUE;
		    slashPending= FALSE;
		}
		else {
		    slashPending= TRUE;
		}
		continue;
	    }
	    else if (slashPending) {
		if (spacePending) {
		    ADD_CHAR(line,' ');
		    spacePending= FALSE;
		}
		ADD_CHAR(line,'/');
		slashPending= FALSE;
	    }
	    if (isspace(ch)) {
		while (isspace(ch)&&(ch!='\n')&&(ch!=EOF)) {
		    ch= getc(file);
		}
		if (ch==EOF)
		    break;
		if ((ch!='\n')&&(line->num_line>0))
		    spacePending= TRUE;
		ungetc(ch,file);
	    }
	    else {
		if (spacePending) {
		    ADD_CHAR(line,' ');
		    spacePending= FALSE;
		}
		if (checkbang && ch=='!') {
		    if (line->num_line!=0) {
			DebugF("The '!' legal only at start of line\n");
			DebugF("Line containing '!' ignored\n");
			line->num_line= 0;
			inComment= 0;
			break;
		    }

		}
		ADD_CHAR(line,ch);
	    }
	}
	if (ch==EOF)
	     endOfFile= TRUE;
d178 5
a182 5
     }
     if ((line->num_line==0)&&(endOfFile))
	return FALSE;
      ADD_CHAR(line,'\0');
      return TRUE;
d201 3
a203 3
static	char *	cname[MAX_WORDS] = {
	"model", "layout", "variant", "option", 
	"keycodes", "symbols", "types", "compat", "geometry"
d206 7
a212 7
typedef	struct _RemapSpec {
	int			number;
	int			num_remap;
	struct	{
		int	word;
		int	index;
                }		remap[MAX_WORDS];
d216 2
a217 2
	char *			name[MAX_WORDS];
	struct _FileSpec *	pending;
d221 4
a224 4
	char *			model;
	char *			layout[XkbNumKbdGroups+1];
	char *			variant[XkbNumKbdGroups+1];
	char *			options;
d231 1
a231 1
static char*
d234 2
a235 2
   char ndx_buf[NDX_BUFF_SIZE];
   char *end;
d237 17
a253 18
   if (*str != '[') {
       *ndx = 0;
       return str;
   }
   str++;
   end = strchr(str, ']');
   if (end == NULL) {
       *ndx = -1;
       return str - 1;
   }
   if ( (end - str) >= NDX_BUFF_SIZE) {
       *ndx = -1;
       return end + 1;
   }
   strncpy(ndx_buf, str, end - str);
   ndx_buf[end - str] = '\0';
   *ndx = atoi(ndx_buf);
   return end + 1;
d257 1
a257 1
SetUpRemap(InputLine *line,RemapSpec *remap)
d259 18
a276 19
char *		tok,*str;
unsigned	present, l_ndx_present, v_ndx_present;
register int	i;
int		len, ndx;
_Xstrtokparams	strtok_buf;
Bool		found;


   l_ndx_present = v_ndx_present = present= 0;
   str= &line->line[1];
   len = remap->number;
   memset((char *)remap, 0, sizeof(RemapSpec));
   remap->number = len;
   while ((tok=_XStrtok(str," ",strtok_buf))!=NULL) {
	found= FALSE;
	str= NULL;
	if (strcmp(tok,"=")==0)
	    continue;
	for (i=0;i<MAX_WORDS;i++) {
d278 27
a304 25
	    if (strncmp(cname[i],tok,len)==0) {
		if(strlen(tok) > len) {
		    char *end = get_index(tok+len, &ndx);
		    if ((i != LAYOUT && i != VARIANT) ||
			*end != '\0' || ndx == -1)
		        break;
		     if (ndx < 1 || ndx > XkbNumKbdGroups) {
		        DebugF("Illegal %s index: %d\n", cname[i], ndx);
		        DebugF("Index must be in range 1..%d\n",
				   XkbNumKbdGroups);
			break;
		     }
                } else {
		    ndx = 0;
                }
		found= TRUE;
		if (present&(1<<i)) {
		    if ((i == LAYOUT && l_ndx_present&(1<<ndx)) ||
			(i == VARIANT && v_ndx_present&(1<<ndx)) ) {
		        DebugF("Component \"%s\" listed twice\n",tok);
		        DebugF("Second definition ignored\n");
		        break;
		    }
		}
		present |= (1<<i);
d309 34
a342 31
		remap->remap[remap->num_remap].word= i;
		remap->remap[remap->num_remap++].index= ndx;
		break;
	    }
	}
	if (!found) {
	    fprintf(stderr,"Unknown component \"%s\" ignored\n",tok);
	}
   }
   if ((present&PART_MASK)==0) {
	unsigned mask= PART_MASK;
	ErrorF("Mapping needs at least one of ");
	for (i=0; (i<MAX_WORDS); i++) {
	    if ((1L<<i)&mask) {
		mask&= ~(1L<<i);
		if (mask)	DebugF("\"%s,\" ",cname[i]);
		else		DebugF("or \"%s\"\n",cname[i]);
	    }
	}
	DebugF("Illegal mapping ignored\n");
	remap->num_remap= 0;
	return;
   }
   if ((present&COMPONENT_MASK)==0) {
	DebugF("Mapping needs at least one component\n");
	DebugF("Illegal mapping ignored\n");
	remap->num_remap= 0;
	return;
   }
   remap->number++;
   return;
d346 1
a346 1
MatchOneOf(char *wanted,char *vals_defined)
d348 2
a349 2
char	*str,*next;
int	want_len= strlen(wanted);
d351 13
a363 12
    for (str=vals_defined,next=NULL;str!=NULL;str=next) {
	int len;
	next= strchr(str,',');
	if (next) {
	    len= next-str;
	    next++;
	}
	else {
	    len= strlen(str);
	}
	if ((len==want_len)&&(strncmp(wanted,str,len)==0))
	    return TRUE;
d371 8
a378 10
CheckLine(	InputLine *		line,
		RemapSpec *		remap,
		XkbRF_RulePtr		rule,
		XkbRF_GroupPtr		group)
{
char *		str,*tok;
register int	nread, i;
FileSpec	tmp;
_Xstrtokparams	strtok_buf;
Bool 		append = FALSE;
d380 1
a380 1
    if (line->line[0]=='!') {
d385 2
a386 1
            if(!words)
d398 4
a401 4
                 if ( *words == ' ') {
                     *words++ = '\0';
                     i++;
                 }
d405 4
a408 3
        } else {
	    SetUpRemap(line,remap);
	    return FALSE;
d412 26
a437 26
    if (remap->num_remap==0) {
	DebugF("Must have a mapping before first line of data\n");
	DebugF("Illegal line of data ignored\n");
	return FALSE;
    }
    memset((char *)&tmp, 0, sizeof(FileSpec));
    str= line->line;
    for (nread= 0;(tok=_XStrtok(str," ",strtok_buf))!=NULL;nread++) {
	str= NULL;
	if (strcmp(tok,"=")==0) {
	    nread--;
	    continue;
	}
	if (nread>remap->num_remap) {
	    DebugF("Too many words on a line\n");
	    DebugF("Extra word \"%s\" ignored\n",tok);
	    continue;
	}
	tmp.name[remap->remap[nread].word]= tok;
	if (*tok == '+' || *tok == '|')
	    append = TRUE;
    }
    if (nread<remap->num_remap) {
	DebugF("Too few words on a line: %s\n", line->line);
	DebugF("line ignored\n");
	return FALSE;
d440 1
a440 1
    rule->flags= 0;
d443 1
a443 1
	 rule->flags|= XkbRF_Option;
d445 1
a445 1
	 rule->flags|= XkbRF_Append;
d447 11
a457 11
	 rule->flags|= XkbRF_Normal;
    rule->model= Xstrdup(tmp.name[MODEL]);
    rule->layout= Xstrdup(tmp.name[LAYOUT]);
    rule->variant= Xstrdup(tmp.name[VARIANT]);
    rule->option= Xstrdup(tmp.name[OPTION]);

    rule->keycodes= Xstrdup(tmp.name[KEYCODES]);
    rule->symbols= Xstrdup(tmp.name[SYMBOLS]);
    rule->types= Xstrdup(tmp.name[TYPES]);
    rule->compat= Xstrdup(tmp.name[COMPAT]);
    rule->geometry= Xstrdup(tmp.name[GEOMETRY]);
d462 4
a465 4
	    if (remap->remap[i].word == LAYOUT)
	        rule->layout_num = remap->remap[i].index;
	    if (remap->remap[i].word == VARIANT)
	        rule->variant_num = remap->remap[i].index;
d472 1
a472 1
_Concat(char *str1,char *str2)
d474 1
a474 1
int len;
d476 4
a479 4
    if ((!str1)||(!str2))
	return str1;
    len= strlen(str1)+strlen(str2)+1;
    str1= realloc(str1,len * sizeof(char));
d481 1
a481 1
	strcat(str1,str2);
d488 8
a495 6
   char *p2;
   for (p2 = p1; *p2; p2++) {
       *p1 = *p2;
       if (*p1 != ' ') p1++;
   }
   *p1 = '\0';
d502 60
a561 53
   memset((char *)mdefs, 0, sizeof(XkbRF_MultiDefsRec));
   mdefs->model = defs->model;
   mdefs->options = Xstrdup(defs->options);
   if (mdefs->options) squeeze_spaces(mdefs->options); 

   if (defs->layout) {
       if (!strchr(defs->layout, ',')) {
           mdefs->layout[0] = defs->layout;
       } else {
           char *p;
           int i;
           mdefs->layout[1] = Xstrdup(defs->layout);
	   if (mdefs->layout[1] == NULL)
	      return FALSE;
           squeeze_spaces(mdefs->layout[1]);
           p = mdefs->layout[1];
           for (i = 2; i <= XkbNumKbdGroups; i++) {
              if ((p = strchr(p, ','))) {
                 *p++ = '\0';
                 mdefs->layout[i] = p;
              } else {
                 break;
              }
           }
           if (p && (p = strchr(p, ',')))
              *p = '\0';
       }
   }

   if (defs->variant) {
       if (!strchr(defs->variant, ',')) {
           mdefs->variant[0] = defs->variant;
       } else {
           char *p;
           int i;
           mdefs->variant[1] = Xstrdup(defs->variant);
	   if (mdefs->variant[1] == NULL)
	      return FALSE;
           squeeze_spaces(mdefs->variant[1]);
           p = mdefs->variant[1];
           for (i = 2; i <= XkbNumKbdGroups; i++) {
              if ((p = strchr(p, ','))) {
                 *p++ = '\0';
                 mdefs->variant[i] = p;
              } else {
                 break;
              }
           }
           if (p && (p = strchr(p, ',')))
              *p = '\0';
       }
   }
   return TRUE;
d567 3
a569 3
  free(defs->options);
  free(defs->layout[1]);
  free(defs->variant[1]);
d577 3
a579 2
	    *dst= _Concat(*dst, src);
        } else {
d581 1
a581 1
	        *dst= Xstrdup(src);
d587 1
a587 2
XkbRF_ApplyRule(	XkbRF_RulePtr 		rule,
			XkbComponentNamesPtr	names)
d589 1
a589 1
    rule->flags&= ~XkbRF_PendingMatch; /* clear the flag because it's applied */
d592 3
a594 3
    Apply(rule->symbols,  &names->symbols);
    Apply(rule->types,    &names->types);
    Apply(rule->compat,   &names->compat);
d599 19
a617 21
CheckGroup(	XkbRF_RulesPtr          rules,
		char * 			group_name,
		char * 			name)
{
   int i;
   char *p;
   XkbRF_GroupPtr group;

   for (i = 0, group = rules->groups; i < rules->num_groups; i++, group++) {
       if (! strcmp(group->name, group_name)) {
           break;
       }
   }
   if (i == rules->num_groups)
       return FALSE;
   for (i = 0, p = group->words; i < group->number; i++, p += strlen(p)+1) {
       if (! strcmp(p, name)) {
           return TRUE;
       }
   }
   return FALSE;
d621 3
a623 4
XkbRF_CheckApplyRule(	XkbRF_RulePtr 		rule,
			XkbRF_MultiDefsPtr	mdefs,
			XkbComponentNamesPtr	names,
			XkbRF_RulesPtr          rules)
d628 1
a628 1
        if(mdefs->model == NULL)
d632 2
a633 1
        } else {
d635 8
a642 7
               if (!CheckGroup(rules, rule->model, mdefs->model))
                  return 0;
            } else {
	       if (strcmp(rule->model, mdefs->model) != 0)
	          return 0;
	    }
	}
d645 4
a648 4
	if (mdefs->options == NULL)
	    return 0;
	if ((!MatchOneOf(rule->option,mdefs->options)))
	    return 0;
d652 3
a654 3
	if(mdefs->layout[rule->layout_num] == NULL ||
	   *mdefs->layout[rule->layout_num] == '\0')
	    return 0;
d657 2
a658 1
        } else {
d660 9
a668 8
               if (!CheckGroup(rules, rule->layout,
                               mdefs->layout[rule->layout_num]))
                  return 0;
	    } else {
	       if (strcmp(rule->layout, mdefs->layout[rule->layout_num]) != 0)
	           return 0;
	    }
	}
d671 3
a673 3
	if (mdefs->variant[rule->variant_num] == NULL ||
	    *mdefs->variant[rule->variant_num] == '\0')
	    return 0;
d676 2
a677 1
        } else {
d679 10
a688 9
               if (!CheckGroup(rules, rule->variant,
                               mdefs->variant[rule->variant_num]))
                  return 0;
            } else {
	       if (strcmp(rule->variant,
                          mdefs->variant[rule->variant_num]) != 0)
	           return 0;
	    }
	}
d691 2
a692 2
        rule->flags|= XkbRF_PendingMatch;
	return rule->number;
d695 1
a695 1
    XkbRF_ApplyRule(rule,names);
d702 2
a703 2
register int 	i;
XkbRF_RulePtr	rule;
d705 2
a706 2
    for (i=0,rule=rules->rules;i<rules->num_rules;i++,rule++) {
	rule->flags&= ~XkbRF_PendingMatch;
d711 1
a711 1
XkbRF_ApplyPartialMatches(XkbRF_RulesPtr rules,XkbComponentNamesPtr names)
d713 2
a714 2
int		i;
XkbRF_RulePtr	rule;
d717 3
a719 3
	if ((rule->flags&XkbRF_PendingMatch)==0)
	    continue;
	XkbRF_ApplyRule(rule,names);
d724 18
a741 18
XkbRF_CheckApplyRules(	XkbRF_RulesPtr 		rules,
			XkbRF_MultiDefsPtr	mdefs,
			XkbComponentNamesPtr	names,
			int			flags)
{
int		i;
XkbRF_RulePtr	rule;
int		skip;

    for (rule = rules->rules, i=0; i < rules->num_rules; rule++, i++) {
	if ((rule->flags & flags) != flags)
	    continue;
	skip = XkbRF_CheckApplyRule(rule, mdefs, names, rules);
	if (skip && !(flags & XkbRF_Option)) {
	    for ( ;(i < rules->num_rules) && (rule->number == skip);
		  rule++, i++);
	    rule--; i--;
	}
d750 56
a805 2
char 	*str, *outstr, *orig, *var;
int	len, ndx;
d807 40
a846 84
    orig= name;
    str= index(name,'%');
    if (str==NULL)
	return name;
    len= strlen(name);
    while (str!=NULL) {
	char pfx= str[1];
	int   extra_len= 0;
	if ((pfx=='+')||(pfx=='|')||(pfx=='_')||(pfx=='-')) {
	    extra_len= 1;
	    str++;
	}
	else if (pfx=='(') {
	    extra_len= 2;
	    str++;
	}
	var = str + 1;
	str = get_index(var + 1, &ndx);
	if (ndx == -1) {
	    str = index(str,'%');
	    continue;
        }
	if ((*var=='l') && mdefs->layout[ndx] && *mdefs->layout[ndx])
	    len+= strlen(mdefs->layout[ndx])+extra_len;
	else if ((*var=='m')&&mdefs->model)
	    len+= strlen(mdefs->model)+extra_len;
	else if ((*var=='v') && mdefs->variant[ndx] && *mdefs->variant[ndx])
	    len+= strlen(mdefs->variant[ndx])+extra_len;
	if ((pfx=='(')&&(*str==')')) {
	    str++;
	}
	str= index(&str[0],'%');
    }
    name= malloc(len+1);
    str= orig;
    outstr= name;
    while (*str!='\0') {
	if (str[0]=='%') {
	    char pfx,sfx;
	    str++;
	    pfx= str[0];
	    sfx= '\0';
	    if ((pfx=='+')||(pfx=='|')||(pfx=='_')||(pfx=='-')) {
		str++;
	    }
	    else if (pfx=='(') {
		sfx= ')';
		str++;
	    }
	    else pfx= '\0';

	    var = str;
	    str = get_index(var + 1, &ndx);
	    if (ndx == -1) {
	        continue;
            }
	    if ((*var=='l') && mdefs->layout[ndx] && *mdefs->layout[ndx]) {
		if (pfx) *outstr++= pfx;
		strcpy(outstr,mdefs->layout[ndx]);
		outstr+= strlen(mdefs->layout[ndx]);
		if (sfx) *outstr++= sfx;
	    }
	    else if ((*var=='m')&&(mdefs->model)) {
		if (pfx) *outstr++= pfx;
		strcpy(outstr,mdefs->model);
		outstr+= strlen(mdefs->model);
		if (sfx) *outstr++= sfx;
	    }
	    else if ((*var=='v') && mdefs->variant[ndx] && *mdefs->variant[ndx]) {
		if (pfx) *outstr++= pfx;
		strcpy(outstr,mdefs->variant[ndx]);
		outstr+= strlen(mdefs->variant[ndx]);
		if (sfx) *outstr++= sfx;
	    }
	    if ((pfx=='(')&&(*str==')'))
		str++;
	}
	else {
	    *outstr++= *str++;
	}
    }
    *outstr++= '\0';
    if (orig!=name)
	free(orig);
d853 2
a854 3
XkbRF_GetComponents(	XkbRF_RulesPtr		rules,
			XkbRF_VarDefsPtr	defs,
			XkbComponentNamesPtr	names)
d860 1
a860 1
    memset((char *)names, 0, sizeof(XkbComponentNamesRec));
d869 3
a871 3
	names->keycodes= XkbRF_SubstituteVars(names->keycodes, &mdefs);
    if (names->symbols)	
	names->symbols=	XkbRF_SubstituteVars(names->symbols, &mdefs);
d873 1
a873 1
	names->types= XkbRF_SubstituteVars(names->types, &mdefs);
d875 1
a875 1
	names->compat= XkbRF_SubstituteVars(names->compat, &mdefs);
d877 1
a877 1
	names->geometry= XkbRF_SubstituteVars(names->geometry, &mdefs);
d881 1
a881 1
		names->compat && names->geometry);
d885 1
a885 1
XkbRF_AddRule(XkbRF_RulesPtr	rules)
d887 9
a895 9
    if (rules->sz_rules<1) {
	rules->sz_rules= 16;
	rules->num_rules= 0;
	rules->rules= calloc(rules->sz_rules, sizeof(XkbRF_RuleRec));
    }
    else if (rules->num_rules>=rules->sz_rules) {
	rules->sz_rules*= 2;
	rules->rules= realloc(rules->rules,
				rules->sz_rules * sizeof(XkbRF_RuleRec));
d898 3
a900 3
	rules->sz_rules= rules->num_rules= 0;
	DebugF("Allocation failure in XkbRF_AddRule\n");
	return NULL;
d902 1
a902 1
    memset((char *)&rules->rules[rules->num_rules], 0, sizeof(XkbRF_RuleRec));
d907 1
a907 1
XkbRF_AddGroup(XkbRF_RulesPtr	rules)
d909 4
a912 4
    if (rules->sz_groups<1) {
	rules->sz_groups= 16;
	rules->num_groups= 0;
	rules->groups= calloc(rules->sz_groups, sizeof(XkbRF_GroupRec));
d915 3
a917 3
	rules->sz_groups *= 2;
	rules->groups= realloc(rules->groups,
				rules->sz_groups * sizeof(XkbRF_GroupRec));
d920 2
a921 2
	rules->sz_groups= rules->num_groups= 0;
	return NULL;
d924 2
a925 1
    memset((char *)&rules->groups[rules->num_groups], 0, sizeof(XkbRF_GroupRec));
d930 1
a930 1
XkbRF_LoadRules(FILE *file, XkbRF_RulesPtr rules)
d932 4
a935 4
InputLine	line;
RemapSpec	remap;
XkbRF_RuleRec	trule,*rule;
XkbRF_GroupRec  tgroup,*group;
d938 3
a940 3
	return FALSE;
    memset((char *)&remap, 0, sizeof(RemapSpec));
    memset((char *)&tgroup, 0, sizeof(XkbRF_GroupRec));
d942 2
a943 2
    while (GetInputLine(file,&line,TRUE)) {
	if (CheckLine(&line,&remap,&trule,&tgroup)) {
d945 13
a957 12
	        if ((group= XkbRF_AddGroup(rules))!=NULL) {
		    *group= tgroup;
		    memset((char *)&tgroup, 0, sizeof(XkbRF_GroupRec));
	        }
	    } else {
	        if ((rule= XkbRF_AddRule(rules))!=NULL) {
		    *rule= trule;
		    memset((char *)&trule, 0, sizeof(XkbRF_RuleRec));
	        }
	    }
	}
	line.num_line= 0;
d964 1
a964 1
XkbRF_LoadRulesByName(char *base,char *locale,XkbRF_RulesPtr rules)
d966 3
a968 3
FILE *		file;
char		buf[PATH_MAX];
Bool		ok;
d970 2
a971 2
    if ((!base)||(!rules))
	return FALSE;
d973 2
a974 2
	if (snprintf(buf, PATH_MAX, "%s-%s", base, locale) >= PATH_MAX)
	    return FALSE;
d977 3
a979 3
	if (strlen(base)+1 > PATH_MAX)
	    return FALSE;
	strcpy(buf,base);
d982 4
a985 4
    file= fopen(buf, "r");
    if ((!file)&&(locale)) { /* fallback if locale was specified */
	strcpy(buf,base);
	file= fopen(buf, "r");
d988 2
a989 2
	return FALSE;
    ok= XkbRF_LoadRules(file,rules);
d999 1
a999 1
    return calloc(1, sizeof( XkbRF_RulesRec));
d1005 1
a1005 1
XkbRF_Free(XkbRF_RulesPtr rules,Bool freeRules)
d1007 3
a1009 3
int		i;
XkbRF_RulePtr	rule;
XkbRF_GroupPtr	group;
d1012 1
a1012 1
	return;
d1014 15
a1028 15
	for (i=0,rule=rules->rules;i<rules->num_rules;i++,rule++) {
	    free(rule->model);
	    free(rule->layout);
	    free(rule->variant);
	    free(rule->option);
	    free(rule->keycodes);
	    free(rule->symbols);
	    free(rule->types);
	    free(rule->compat);
	    free(rule->geometry);
	    memset((char *)rule, 0, sizeof(XkbRF_RuleRec));
	}
	free(rules->rules);
	rules->num_rules= rules->sz_rules= 0;
	rules->rules= NULL;
d1032 7
a1038 7
	for (i=0, group=rules->groups;i<rules->num_groups;i++,group++) {
	    free(group->name);
	    free(group->words);
	}
	free(rules->groups);
	rules->num_groups= 0;
	rules->groups= NULL;
d1041 1
a1041 1
	free(rules);
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d394 2
a395 2
            group->name = _XkbDupString(gname);
            group->words = _XkbDupString(words);
d446 10
a455 10
    rule->model= _XkbDupString(tmp.name[MODEL]);
    rule->layout= _XkbDupString(tmp.name[LAYOUT]);
    rule->variant= _XkbDupString(tmp.name[VARIANT]);
    rule->option= _XkbDupString(tmp.name[OPTION]);

    rule->keycodes= _XkbDupString(tmp.name[KEYCODES]);
    rule->symbols= _XkbDupString(tmp.name[SYMBOLS]);
    rule->types= _XkbDupString(tmp.name[TYPES]);
    rule->compat= _XkbDupString(tmp.name[COMPAT]);
    rule->geometry= _XkbDupString(tmp.name[GEOMETRY]);
d500 1
a500 1
   mdefs->options = _XkbDupString(defs->options);
d509 1
a509 1
           mdefs->layout[1] = _XkbDupString(defs->layout);
d533 1
a533 1
           mdefs->variant[1] = _XkbDupString(defs->variant);
d569 1
a569 1
	        *dst= _XkbDupString(src);
d948 1
a948 1
	if (strlen(base)+strlen(locale)+2 > PATH_MAX)
a949 1
	snprintf(buf,sizeof(buf),"%s-%s", base, locale);
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d81 1
a81 1
	xfree(line->line);
d94 1
a94 1
	    line->line= xalloc(line->sz_line*2);
d98 1
a98 1
	    line->line= xrealloc((char *)line->line,line->sz_line*2);
d273 1
a273 1
   bzero((char *)remap,sizeof(RemapSpec));
d415 1
a415 1
    bzero((char *)&tmp,sizeof(FileSpec));
d477 1
a477 1
    str1= xrealloc(str1,len * sizeof(char));
d498 1
a498 1
   bzero((char *)mdefs,sizeof(XkbRF_MultiDefsRec));
d556 3
a558 3
  if (defs->options) xfree(defs->options);
  if (defs->layout[1])  xfree(defs->layout[1]);
  if (defs->variant[1])  xfree(defs->variant[1]);
d772 1
a772 1
    name= xalloc(len+1);
d822 1
a822 1
	xfree(orig);
d837 1
a837 1
    bzero((char *)names,sizeof(XkbComponentNamesRec));
d867 1
a867 1
	rules->rules= xcalloc(rules->sz_rules, sizeof(XkbRF_RuleRec));
d871 1
a871 1
	rules->rules= xrealloc(rules->rules,
d879 1
a879 1
    bzero((char *)&rules->rules[rules->num_rules],sizeof(XkbRF_RuleRec));
d889 1
a889 1
	rules->groups= xcalloc(rules->sz_groups, sizeof(XkbRF_GroupRec));
d893 1
a893 1
	rules->groups= xrealloc(rules->groups,
d901 1
a901 1
    bzero((char *)&rules->groups[rules->num_groups],sizeof(XkbRF_GroupRec));
d915 2
a916 2
    bzero((char *)&remap,sizeof(RemapSpec));
    bzero((char *)&tgroup,sizeof(XkbRF_GroupRec));
d923 1
a923 1
		    bzero((char *)&tgroup,sizeof(XkbRF_GroupRec));
d928 1
a928 1
		    bzero((char *)&trule,sizeof(XkbRF_RuleRec));
d975 1
a975 1
    return xcalloc(1, sizeof( XkbRF_RulesRec));
d991 10
a1000 10
	    if (rule->model)	xfree(rule->model);
	    if (rule->layout)	xfree(rule->layout);
	    if (rule->variant)	xfree(rule->variant);
	    if (rule->option)	xfree(rule->option);
	    if (rule->keycodes)	xfree(rule->keycodes);
	    if (rule->symbols)	xfree(rule->symbols);
	    if (rule->types)	xfree(rule->types);
	    if (rule->compat)	xfree(rule->compat);
	    if (rule->geometry)	xfree(rule->geometry);
	    bzero((char *)rule,sizeof(XkbRF_RuleRec));
d1002 1
a1002 1
	xfree(rules->rules);
d1009 2
a1010 2
	    if (group->name)	xfree(group->name);
	    if (group->words)	xfree(group->words);
d1012 1
a1012 1
	xfree(rules->groups);
d1017 1
a1017 1
	xfree(rules);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a38 1
#define NEED_EVENTS
d55 2
d81 1
a81 1
	_XkbFree(line->line);
d94 1
a94 1
	    line->line= (char *)_XkbAlloc(line->sz_line*2);
d98 1
a98 1
	    line->line=(char *)_XkbRealloc((char *)line->line,line->sz_line*2);
d116 1
a116 1
     endOfFile= False;
d118 1
a118 1
	spacePending= slashPending= inComment= False;
d124 1
a124 1
		    inComment= False;
d133 2
a134 2
		    inComment= True;
		    slashPending= False;
d137 1
a137 1
		    slashPending= True;
d144 1
a144 1
		    spacePending= False;
d147 1
a147 1
		slashPending= False;
d156 1
a156 1
		    spacePending= True;
d162 1
a162 1
		    spacePending= False;
d178 1
a178 1
	     endOfFile= True;
d182 1
a182 1
	return False;
d184 1
a184 1
      return True;
d198 1
a198 2
#define	KEYMAP		9
#define	MAX_WORDS	10
d205 1
a205 1
	"keycodes", "symbols", "types", "compat", "geometry", "keymap"
d276 1
a276 1
	found= False;
d297 1
a297 1
		found= True;
a339 7
   if (((present&COMPONENT_MASK)&(1<<KEYMAP))&&
				((present&COMPONENT_MASK)!=(1<<KEYMAP))) {
	DebugF("Keymap cannot appear with other components\n");
	DebugF("Illegal mapping ignored\n");
	remap->num_remap= 0;
	return;
   }
d361 1
a361 1
	    return True;
d363 1
a363 1
    return False;
d378 1
a378 1
Bool 		append = False;
d386 1
a386 1
                return False;
d393 1
a393 1
                return False;
d403 1
a403 1
            return True;
d406 1
a406 1
	    return False;
d413 1
a413 1
	return False;
d430 1
a430 1
	    append = True;
d435 1
a435 1
	return False;
a455 1
    rule->keymap= NULL;
d466 1
a466 1
    return True;
d477 1
a477 1
    str1= _XkbTypedRealloc(str1,len,char);
d511 1
a511 1
	      return False;
d535 1
a535 1
	      return False;
d550 1
a550 1
   return True;
d556 3
a558 3
  if (defs->options) _XkbFree(defs->options);
  if (defs->layout[1])  _XkbFree(defs->layout[1]);
  if (defs->variant[1])  _XkbFree(defs->variant[1]);
d602 1
a602 1
       return False;
d605 1
a605 1
           return True;
d608 1
a608 1
   return False;
d617 1
a617 1
    Bool pending = False;
d623 1
a623 1
            pending = True;
d646 1
a646 1
            pending = True;
d663 1
a663 1
            pending = True;
d772 1
a772 1
    name= (char *)_XkbAlloc(len+1);
d822 1
a822 1
	_XkbFree(orig);
a854 2
    if (names->keymap)	
	names->keymap= XkbRF_SubstituteVars(names->keymap, &mdefs);
d858 1
a858 1
		names->compat && names->geometry ) || names->keymap;
d861 1
a861 1
XkbRF_RulePtr
d867 1
a867 1
	rules->rules= _XkbTypedCalloc(rules->sz_rules,XkbRF_RuleRec);
d871 2
a872 2
	rules->rules= _XkbTypedRealloc(rules->rules,rules->sz_rules,
							XkbRF_RuleRec);
d883 1
a883 1
XkbRF_GroupPtr
d889 1
a889 1
	rules->groups= _XkbTypedCalloc(rules->sz_groups,XkbRF_GroupRec);
d893 2
a894 2
	rules->groups= _XkbTypedRealloc(rules->groups,rules->sz_groups,
							XkbRF_GroupRec);
d914 1
a914 1
	return False;
d918 1
a918 1
    while (GetInputLine(file,&line,True)) {
d935 1
a935 1
    return True;
d946 1
a946 1
	return False;
d949 1
a949 1
	    return False;
d954 1
a954 1
	    return False;
d964 1
a964 1
	return False;
a971 220
#define HEAD_NONE	0
#define HEAD_MODEL	1
#define HEAD_LAYOUT	2
#define HEAD_VARIANT	3
#define HEAD_OPTION	4
#define	HEAD_EXTRA	5

XkbRF_VarDescPtr
XkbRF_AddVarDesc(XkbRF_DescribeVarsPtr	vars)
{
    if (vars->sz_desc<1) {
	vars->sz_desc= 16;
	vars->num_desc= 0;
	vars->desc= _XkbTypedCalloc(vars->sz_desc,XkbRF_VarDescRec);
    }
    else if (vars->num_desc>=vars->sz_desc) {
	vars->sz_desc*= 2;
	vars->desc= _XkbTypedRealloc(vars->desc,vars->sz_desc,XkbRF_VarDescRec);
    }
    if (!vars->desc) {
	vars->sz_desc= vars->num_desc= 0;
	DebugF("Allocation failure in XkbRF_AddVarDesc\n");
	return NULL;
    }
    vars->desc[vars->num_desc].name= NULL;
    vars->desc[vars->num_desc].desc= NULL;
    return &vars->desc[vars->num_desc++];
}

XkbRF_VarDescPtr
XkbRF_AddVarDescCopy(XkbRF_DescribeVarsPtr vars,XkbRF_VarDescPtr from)
{
XkbRF_VarDescPtr	nd;

    if ((nd=XkbRF_AddVarDesc(vars))!=NULL) {
	nd->name= _XkbDupString(from->name);
	nd->desc= _XkbDupString(from->desc);
    }
    return nd;
}

XkbRF_DescribeVarsPtr 
XkbRF_AddVarToDescribe(XkbRF_RulesPtr rules,char *name)
{
    if (rules->sz_extra<1) {
	rules->num_extra= 0;
	rules->sz_extra= 1;
	rules->extra_names= _XkbTypedCalloc(rules->sz_extra,char *);
	rules->extra= _XkbTypedCalloc(rules->sz_extra, XkbRF_DescribeVarsRec);
    }
    else if (rules->num_extra>=rules->sz_extra) {
	rules->sz_extra*= 2;
	rules->extra_names= _XkbTypedRealloc(rules->extra_names,rules->sz_extra,
								char *);
	rules->extra=_XkbTypedRealloc(rules->extra, rules->sz_extra,
							XkbRF_DescribeVarsRec);
    }
    if ((!rules->extra_names)||(!rules->extra)) {
	DebugF("allocation error in extra parts\n");
	rules->sz_extra= rules->num_extra= 0;
	rules->extra_names= NULL;
	rules->extra= NULL;
	return NULL;
    }
    rules->extra_names[rules->num_extra]= _XkbDupString(name);
    bzero(&rules->extra[rules->num_extra],sizeof(XkbRF_DescribeVarsRec));
    return &rules->extra[rules->num_extra++];
}

Bool
XkbRF_LoadDescriptions(FILE *file,XkbRF_RulesPtr rules)
{
InputLine		line;
XkbRF_VarDescRec	tmp;
char			*tok;
int			len,headingtype,extra_ndx = 0;

    bzero((char *)&tmp, sizeof(XkbRF_VarDescRec));
    headingtype = HEAD_NONE;
    InitInputLine(&line);
    for ( ; GetInputLine(file,&line,False); line.num_line= 0) {
	if (line.line[0]=='!') {
	    tok = strtok(&(line.line[1]), " \t");
	    if (strcasecmp(tok,"model") == 0)
		headingtype = HEAD_MODEL;
	    else if (strcasecmp(tok,"layout") == 0)
		headingtype = HEAD_LAYOUT;
	    else if (strcasecmp(tok,"variant") == 0)
		headingtype = HEAD_VARIANT;
	    else if (strcasecmp(tok,"option") == 0)
		headingtype = HEAD_OPTION;
	    else {
		int i;
		headingtype = HEAD_EXTRA;
		extra_ndx= -1;
		for (i=0;(i<rules->num_extra)&&(extra_ndx<0);i++) {
		    if (!strcasecmp(tok,rules->extra_names[i]))
			extra_ndx= i;
		}
		if (extra_ndx<0) {
		    XkbRF_DescribeVarsPtr	var;
		    DebugF("Extra heading \"%s\" encountered\n",tok);
		    var= XkbRF_AddVarToDescribe(rules,tok);
		    if (var)
			 extra_ndx= var-rules->extra;
		    else headingtype= HEAD_NONE;
		}
	    }
	    continue;
	}

	if (headingtype == HEAD_NONE) {
	    DebugF("Must have a heading before first line of data\n");
	    DebugF("Illegal line of data ignored\n");
	    continue;
	}

	len = strlen(line.line);
	if ((tmp.name= strtok(line.line, " \t")) == NULL) {
	    DebugF("Huh? No token on line\n");
	    DebugF("Illegal line of data ignored\n");
	    continue;
	}
	if (strlen(tmp.name) == len) {
	    DebugF("No description found\n");
	    DebugF("Illegal line of data ignored\n");
	    continue;
	}

	tok = line.line + strlen(tmp.name) + 1;
	while ((*tok!='\n')&&isspace(*tok))
		tok++;
	if (*tok == '\0') {
	    DebugF("No description found\n");
	    DebugF("Illegal line of data ignored\n");
	    continue;
	}
	tmp.desc= tok;
	switch (headingtype) {
	    case HEAD_MODEL:
		XkbRF_AddVarDescCopy(&rules->models,&tmp);
		break;
	    case HEAD_LAYOUT:
		XkbRF_AddVarDescCopy(&rules->layouts,&tmp);
		break;
	    case HEAD_VARIANT:
		XkbRF_AddVarDescCopy(&rules->variants,&tmp);
		break;
	    case HEAD_OPTION:
		XkbRF_AddVarDescCopy(&rules->options,&tmp);
		break;
	    case HEAD_EXTRA:
		XkbRF_AddVarDescCopy(&rules->extra[extra_ndx],&tmp);
		break;
	}
    }
    FreeInputLine(&line);
    if ((rules->models.num_desc==0) && (rules->layouts.num_desc==0) &&
	(rules->variants.num_desc==0) && (rules->options.num_desc==0) &&
	(rules->num_extra==0)) {
	return False;
    }
    return True;
}

Bool
XkbRF_LoadDescriptionsByName(char *base,char *locale,XkbRF_RulesPtr rules)
{
FILE *		file;
char		buf[PATH_MAX];
Bool		ok;

    if ((!base)||(!rules))
	return False;
    if (locale) {
	if (strlen(base)+strlen(locale)+6 > PATH_MAX)
	    return False;
	snprintf(buf,sizeof(buf),"%s-%s.lst", base, locale);
    }
    else {
	if (strlen(base)+5 > PATH_MAX)
	    return False;
	snprintf(buf,sizeof(buf),"%s.lst", base);
    }

    file= fopen(buf, "r");
    if ((!file)&&(locale)) { /* fallback if locale was specified */
	snprintf(buf,sizeof(buf),"%s.lst", base);

	file= fopen(buf, "r");
    }
    if (!file)
	return False;
    ok= XkbRF_LoadDescriptions(file,rules);
    fclose(file);
    return ok;
}

/***====================================================================***/

XkbRF_RulesPtr
XkbRF_Load(char *base,char *locale,Bool wantDesc,Bool wantRules)
{
XkbRF_RulesPtr	rules;

    if ((!base)||((!wantDesc)&&(!wantRules)))
	return NULL;
    if ((rules=_XkbTypedCalloc(1,XkbRF_RulesRec))==NULL)
	return NULL;
    if (wantDesc&&(!XkbRF_LoadDescriptionsByName(base,locale,rules))) {
	XkbRF_Free(rules,True);
	return NULL;
    }
    if (wantRules&&(!XkbRF_LoadRulesByName(base,locale,rules))) {
	XkbRF_Free(rules,True);
	return NULL;
    }
    return rules;
}

d973 1
a973 1
XkbRF_Create(int szRules,int szExtra) 
d975 1
a975 23
XkbRF_RulesPtr rules;

    if ((rules=_XkbTypedCalloc(1,XkbRF_RulesRec))==NULL)
	return NULL;
    if (szRules>0) {
	rules->sz_rules= szRules; 
	rules->rules= _XkbTypedCalloc(rules->sz_rules,XkbRF_RuleRec);
	if (!rules->rules) {
	    _XkbFree(rules);
	    return NULL;
	}
    }
    if (szExtra>0) {
	rules->sz_extra= szExtra; 
	rules->extra= _XkbTypedCalloc(rules->sz_extra,XkbRF_DescribeVarsRec);
	if (!rules->extra) {
	    if (rules->rules)
		_XkbFree(rules->rules);
	    _XkbFree(rules);
	    return NULL;
	}
    }
    return rules;
a979 18
static void
XkbRF_ClearVarDescriptions(XkbRF_DescribeVarsPtr var)
{
register int i;
    
    for (i=0;i<var->num_desc;i++) {
	if (var->desc[i].name)
	    _XkbFree(var->desc[i].name);
	if (var->desc[i].desc)
	    _XkbFree(var->desc[i].desc);
	var->desc[i].name= var->desc[i].desc= NULL;
    }
    if (var->desc)
	_XkbFree(var->desc);
    var->desc= NULL;
    return;
}

a988 12
    XkbRF_ClearVarDescriptions(&rules->models);
    XkbRF_ClearVarDescriptions(&rules->layouts);
    XkbRF_ClearVarDescriptions(&rules->variants);
    XkbRF_ClearVarDescriptions(&rules->options);
    if (rules->extra) {
	for (i = 0; i < rules->num_extra; i++) {
	    XkbRF_ClearVarDescriptions(&rules->extra[i]);
	}
	_XkbFree(rules->extra);
	rules->num_extra= rules->sz_extra= 0;
	rules->extra= NULL;
    }
d991 9
a999 9
	    if (rule->model)	_XkbFree(rule->model);
	    if (rule->layout)	_XkbFree(rule->layout);
	    if (rule->variant)	_XkbFree(rule->variant);
	    if (rule->option)	_XkbFree(rule->option);
	    if (rule->keycodes)	_XkbFree(rule->keycodes);
	    if (rule->symbols)	_XkbFree(rule->symbols);
	    if (rule->types)	_XkbFree(rule->types);
	    if (rule->compat)	_XkbFree(rule->compat);
	    if (rule->geometry)	_XkbFree(rule->geometry);
d1002 1
a1002 1
	_XkbFree(rules->rules);
d1009 2
a1010 2
	    if (group->name)	_XkbFree(group->name);
	    if (group->words)	_XkbFree(group->words);
d1012 1
a1012 1
	_XkbFree(rules->groups);
d1017 1
a1017 1
	_XkbFree(rules);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d49 1
d960 1
a960 1
	sprintf(buf,"%s-%s", base, locale);
d1159 1
a1159 1
	sprintf(buf,"%s-%s.lst", base, locale);
d1164 1
a1164 1
	sprintf(buf,"%s.lst", base);
d1169 1
a1169 1
	sprintf(buf,"%s.lst", base);
@


1.1
log
@Initial revision
@
text
@d49 1
a49 1
#include <X11/extensions/XKBstr.h>
d51 1
a51 11
#include <X11/extensions/XKBsrv.h>

#ifdef DEBUG
#define PR_DEBUG(s)		fprintf(stderr,s)
#define PR_DEBUG1(s,a)		fprintf(stderr,s,a)
#define PR_DEBUG2(s,a,b)	fprintf(stderr,s,a,b)
#else
#define PR_DEBUG(s)
#define PR_DEBUG1(s,a)
#define PR_DEBUG2(s,a,b)
#endif
d164 2
a165 2
			PR_DEBUG("The '!' legal only at start of line\n");
			PR_DEBUG("Line containing '!' ignored\n");
a265 1
#ifdef DEBUG
a266 1
#endif
a274 1
#ifdef DEBUG
a275 1
#endif
d288 2
a289 2
		        PR_DEBUG2("Illegal %s index: %d\n", cname[i], ndx);
		        PR_DEBUG1("Index must be in range 1..%d\n",
a295 1
#ifdef DEBUG
a296 1
#endif
d300 2
a301 2
		        PR_DEBUG1("Component \"%s\" listed twice\n",tok);
		        PR_DEBUG("Second definition ignored\n");
a314 1
#ifdef DEBUG
a317 1
#endif
a319 1
#ifdef DEBUG
d321 1
a321 1
	fprintf(stderr,"Mapping needs at least one of ");
d325 2
a326 2
		if (mask)	fprintf(stderr,"\"%s,\" ",cname[i]);
		else		fprintf(stderr,"or \"%s\"\n",cname[i]);
d329 1
a329 2
	fprintf(stderr,"Illegal mapping ignored\n");
#endif
d334 2
a335 2
	PR_DEBUG("Mapping needs at least one component\n");
	PR_DEBUG("Illegal mapping ignored\n");
d341 2
a342 2
	PR_DEBUG("Keymap cannot appear with other components\n");
	PR_DEBUG("Illegal mapping ignored\n");
d417 2
a418 2
	PR_DEBUG("Must have a mapping before first line of data\n");
	PR_DEBUG("Illegal line of data ignored\n");
d430 2
a431 2
	    PR_DEBUG("Too many words on a line\n");
	    PR_DEBUG1("Extra word \"%s\" ignored\n",tok);
d439 2
a440 2
	PR_DEBUG1("Too few words on a line: %s\n", line->line);
	PR_DEBUG("line ignored\n");
d462 1
a462 1
    rule->keymap= _XkbDupString(tmp.name[KEYMAP]);
a591 1
    Apply(rule->keymap,   &names->keymap);
d885 1
a885 3
#ifdef DEBUG
	fprintf(stderr,"Allocation failure in XkbRF_AddRule\n");
#endif
d1002 1
a1002 1
	PR_DEBUG("Allocation failure in XkbRF_AddVarDesc\n");
d1039 1
a1039 1
	PR_DEBUG("allocation error in extra parts\n");
d1082 1
a1082 1
		    PR_DEBUG1("Extra heading \"%s\" encountered\n",tok);
d1093 2
a1094 2
	    PR_DEBUG("Must have a heading before first line of data\n");
	    PR_DEBUG("Illegal line of data ignored\n");
d1100 2
a1101 2
	    PR_DEBUG("Huh? No token on line\n");
	    PR_DEBUG("Illegal line of data ignored\n");
d1105 2
a1106 2
	    PR_DEBUG("No description found\n");
	    PR_DEBUG("Illegal line of data ignored\n");
d1114 2
a1115 2
	    PR_DEBUG("No description found\n");
	    PR_DEBUG("Illegal line of data ignored\n");
a1280 1
	    if (rule->keymap)	_XkbFree(rule->keymap);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d51 1
a51 1
#include <xkbsrv.h>
@

