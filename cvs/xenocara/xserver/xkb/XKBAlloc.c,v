head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.14
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.12
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.05.29.12.02.40;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	s0SI41sEunLdyFfd;

1.7
date	2015.09.16.19.10.26;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Te1daavkBLskZ8gc;

1.6
date	2012.06.10.13.21.31;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.58;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.11;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.38;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.21;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.21;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.05.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/************************************************************
Copyright (c) 1993 by Silicon Graphics Computer Systems, Inc.

Permission to use, copy, modify, and distribute this
software and its documentation for any purpose and without
fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting
documentation, and that the name of Silicon Graphics not be
used in advertising or publicity pertaining to distribution
of the software without specific prior written permission.
Silicon Graphics makes no representation about the suitability
of this software for any purpose. It is provided "as is"
without any express or implied warranty.

SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
THE USE OR PERFORMANCE OF THIS SOFTWARE.

********************************************************/

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <stdio.h>
#include <X11/X.h>
#include <X11/Xproto.h>
#include "misc.h"
#include "inputstr.h"
#include <xkbsrv.h>
#include "xkbgeom.h"
#include <os.h>
#include <string.h>

/***===================================================================***/

 /*ARGSUSED*/ Status
XkbAllocCompatMap(XkbDescPtr xkb, unsigned which, unsigned nSI)
{
    XkbCompatMapPtr compat;
    XkbSymInterpretRec *prev_interpret;

    if (!xkb)
        return BadMatch;
    if (xkb->compat) {
        if (xkb->compat->size_si >= nSI)
            return Success;
        compat = xkb->compat;
        compat->size_si = nSI;
        if (compat->sym_interpret == NULL)
            compat->num_si = 0;
        prev_interpret = compat->sym_interpret;
        compat->sym_interpret = reallocarray(compat->sym_interpret,
                                             nSI, sizeof(XkbSymInterpretRec));
        if (compat->sym_interpret == NULL) {
            free(prev_interpret);
            compat->size_si = compat->num_si = 0;
            return BadAlloc;
        }
        if (compat->num_si != 0) {
            memset(&compat->sym_interpret[compat->num_si], 0,
                   (compat->size_si -
                    compat->num_si) * sizeof(XkbSymInterpretRec));
        }
        return Success;
    }
    compat = calloc(1, sizeof(XkbCompatMapRec));
    if (compat == NULL)
        return BadAlloc;
    if (nSI > 0) {
        compat->sym_interpret = calloc(nSI, sizeof(XkbSymInterpretRec));
        if (!compat->sym_interpret) {
            free(compat);
            return BadAlloc;
        }
    }
    compat->size_si = nSI;
    compat->num_si = 0;
    memset((char *) &compat->groups[0], 0,
           XkbNumKbdGroups * sizeof(XkbModsRec));
    xkb->compat = compat;
    return Success;
}

void
XkbFreeCompatMap(XkbDescPtr xkb, unsigned which, Bool freeMap)
{
    register XkbCompatMapPtr compat;

    if ((xkb == NULL) || (xkb->compat == NULL))
        return;
    compat = xkb->compat;
    if (freeMap)
        which = XkbAllCompatMask;
    if (which & XkbGroupCompatMask)
        memset((char *) &compat->groups[0], 0,
               XkbNumKbdGroups * sizeof(XkbModsRec));
    if (which & XkbSymInterpMask) {
        if ((compat->sym_interpret) && (compat->size_si > 0))
            free(compat->sym_interpret);
        compat->size_si = compat->num_si = 0;
        compat->sym_interpret = NULL;
    }
    if (freeMap) {
        free(compat);
        xkb->compat = NULL;
    }
    return;
}

/***===================================================================***/

Status
XkbAllocNames(XkbDescPtr xkb, unsigned which, int nTotalRG, int nTotalAliases)
{
    XkbNamesPtr names;

    if (xkb == NULL)
        return BadMatch;
    if (xkb->names == NULL) {
        xkb->names = calloc(1, sizeof(XkbNamesRec));
        if (xkb->names == NULL)
            return BadAlloc;
    }
    names = xkb->names;
    if ((which & XkbKTLevelNamesMask) && (xkb->map != NULL) &&
        (xkb->map->types != NULL)) {
        register int i;
        XkbKeyTypePtr type;

        type = xkb->map->types;
        for (i = 0; i < xkb->map->num_types; i++, type++) {
            if (type->level_names == NULL) {
                type->level_names = calloc(type->num_levels, sizeof(Atom));
                if (type->level_names == NULL)
                    return BadAlloc;
            }
        }
    }
    if ((which & XkbKeyNamesMask) && (names->keys == NULL)) {
        if ((!XkbIsLegalKeycode(xkb->min_key_code)) ||
            (!XkbIsLegalKeycode(xkb->max_key_code)) ||
            (xkb->max_key_code < xkb->min_key_code))
            return BadValue;
        names->keys = calloc((xkb->max_key_code + 1), sizeof(XkbKeyNameRec));
        if (names->keys == NULL)
            return BadAlloc;
    }
    if ((which & XkbKeyAliasesMask) && (nTotalAliases > 0)) {
        if (names->key_aliases == NULL) {
            names->key_aliases = calloc(nTotalAliases, sizeof(XkbKeyAliasRec));
        }
        else if (nTotalAliases > names->num_key_aliases) {
            XkbKeyAliasRec *prev_aliases = names->key_aliases;

            names->key_aliases = reallocarray(names->key_aliases,
                                              nTotalAliases,
                                              sizeof(XkbKeyAliasRec));
            if (names->key_aliases != NULL) {
                memset(&names->key_aliases[names->num_key_aliases], 0,
                       (nTotalAliases -
                        names->num_key_aliases) * sizeof(XkbKeyAliasRec));
            }
            else {
                free(prev_aliases);
            }
        }
        if (names->key_aliases == NULL) {
            names->num_key_aliases = 0;
            return BadAlloc;
        }
        names->num_key_aliases = nTotalAliases;
    }
    if ((which & XkbRGNamesMask) && (nTotalRG > 0)) {
        if (names->radio_groups == NULL) {
            names->radio_groups = calloc(nTotalRG, sizeof(Atom));
        }
        else if (nTotalRG > names->num_rg) {
            Atom *prev_radio_groups = names->radio_groups;

            names->radio_groups = reallocarray(names->radio_groups,
                                               nTotalRG, sizeof(Atom));
            if (names->radio_groups != NULL) {
                memset(&names->radio_groups[names->num_rg], 0,
                       (nTotalRG - names->num_rg) * sizeof(Atom));
            }
            else {
                free(prev_radio_groups);
            }
        }
        if (names->radio_groups == NULL)
            return BadAlloc;
        names->num_rg = nTotalRG;
    }
    return Success;
}

void
XkbFreeNames(XkbDescPtr xkb, unsigned which, Bool freeMap)
{
    XkbNamesPtr names;

    if ((xkb == NULL) || (xkb->names == NULL))
        return;
    names = xkb->names;
    if (freeMap)
        which = XkbAllNamesMask;
    if (which & XkbKTLevelNamesMask) {
        XkbClientMapPtr map = xkb->map;

        if ((map != NULL) && (map->types != NULL)) {
            register int i;
            register XkbKeyTypePtr type;

            type = map->types;
            for (i = 0; i < map->num_types; i++, type++) {
                free(type->level_names);
                type->level_names = NULL;
            }
        }
    }
    if ((which & XkbKeyNamesMask) && (names->keys != NULL)) {
        free(names->keys);
        names->keys = NULL;
        names->num_keys = 0;
    }
    if ((which & XkbKeyAliasesMask) && (names->key_aliases)) {
        free(names->key_aliases);
        names->key_aliases = NULL;
        names->num_key_aliases = 0;
    }
    if ((which & XkbRGNamesMask) && (names->radio_groups)) {
        free(names->radio_groups);
        names->radio_groups = NULL;
        names->num_rg = 0;
    }
    if (freeMap) {
        free(names);
        xkb->names = NULL;
    }
    return;
}

/***===================================================================***/

 /*ARGSUSED*/ Status
XkbAllocControls(XkbDescPtr xkb, unsigned which)
{
    if (xkb == NULL)
        return BadMatch;

    if (xkb->ctrls == NULL) {
        xkb->ctrls = calloc(1, sizeof(XkbControlsRec));
        if (!xkb->ctrls)
            return BadAlloc;
    }
    return Success;
}

 /*ARGSUSED*/ static void
XkbFreeControls(XkbDescPtr xkb, unsigned which, Bool freeMap)
{
    if (freeMap && (xkb != NULL) && (xkb->ctrls != NULL)) {
        free(xkb->ctrls);
        xkb->ctrls = NULL;
    }
    return;
}

/***===================================================================***/

Status
XkbAllocIndicatorMaps(XkbDescPtr xkb)
{
    if (xkb == NULL)
        return BadMatch;
    if (xkb->indicators == NULL) {
        xkb->indicators = calloc(1, sizeof(XkbIndicatorRec));
        if (!xkb->indicators)
            return BadAlloc;
    }
    return Success;
}

static void
XkbFreeIndicatorMaps(XkbDescPtr xkb)
{
    if ((xkb != NULL) && (xkb->indicators != NULL)) {
        free(xkb->indicators);
        xkb->indicators = NULL;
    }
    return;
}

/***====================================================================***/

XkbDescRec *
XkbAllocKeyboard(void)
{
    XkbDescRec *xkb;

    xkb = calloc(1, sizeof(XkbDescRec));
    if (xkb)
        xkb->device_spec = XkbUseCoreKbd;
    return xkb;
}

void
XkbFreeKeyboard(XkbDescPtr xkb, unsigned which, Bool freeAll)
{
    if (xkb == NULL)
        return;
    if (freeAll)
        which = XkbAllComponentsMask;
    if (which & XkbClientMapMask)
        XkbFreeClientMap(xkb, XkbAllClientInfoMask, TRUE);
    if (which & XkbServerMapMask)
        XkbFreeServerMap(xkb, XkbAllServerInfoMask, TRUE);
    if (which & XkbCompatMapMask)
        XkbFreeCompatMap(xkb, XkbAllCompatMask, TRUE);
    if (which & XkbIndicatorMapMask)
        XkbFreeIndicatorMaps(xkb);
    if (which & XkbNamesMask)
        XkbFreeNames(xkb, XkbAllNamesMask, TRUE);
    if ((which & XkbGeometryMask) && (xkb->geom != NULL)) {
        XkbFreeGeometry(xkb->geom, XkbGeomAllMask, TRUE);
        /* PERHAPS BONGHITS etc */
        xkb->geom = NULL;
    }
    if (which & XkbControlsMask)
        XkbFreeControls(xkb, XkbAllControlsMask, TRUE);
    if (freeAll)
        free(xkb);
    return;
}

/***====================================================================***/

void
XkbFreeComponentNames(XkbComponentNamesPtr names, Bool freeNames)
{
    if (names) {
        free(names->keycodes);
        free(names->types);
        free(names->compat);
        free(names->symbols);
        free(names->geometry);
        memset(names, 0, sizeof(XkbComponentNamesRec));
    }
    if (freeNames)
        free(names);
}
@


1.7
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d59 2
a60 2
        compat->sym_interpret = realloc(compat->sym_interpret,
                                        nSI * sizeof(XkbSymInterpretRec));
d162 3
a164 3
            names->key_aliases = realloc(names->key_aliases,
                                         nTotalAliases *
                                         sizeof(XkbKeyAliasRec));
d187 2
a188 2
            names->radio_groups = realloc(names->radio_groups,
                                          nTotalRG * sizeof(Atom));
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d9 2
a10 2
documentation, and that the name of Silicon Graphics not be 
used in advertising or publicity pertaining to distribution 
d12 1
a12 1
Silicon Graphics makes no representation about the suitability 
d16 2
a17 2
SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d19 3
a21 3
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
@


1.5
log
@Update to xserver 1.11.2
@
text
@d43 2
a44 3
/*ARGSUSED*/
Status
XkbAllocCompatMap(XkbDescPtr xkb,unsigned which,unsigned nSI)
d46 2
a47 2
XkbCompatMapPtr	compat;
XkbSymInterpretRec *prev_interpret;
d50 1
a50 1
	return BadMatch;
d52 36
a87 34
	if (xkb->compat->size_si>=nSI)
	    return Success;
	compat= xkb->compat;
	compat->size_si= nSI;
	if (compat->sym_interpret==NULL)
	    compat->num_si= 0;
	prev_interpret = compat->sym_interpret;
	compat->sym_interpret= realloc(compat->sym_interpret,
					nSI * sizeof(XkbSymInterpretRec));
	if (compat->sym_interpret==NULL) {
	    free(prev_interpret);
	    compat->size_si= compat->num_si= 0;
	    return BadAlloc;
	}
	if (compat->num_si!=0) {
	    memset(&compat->sym_interpret[compat->num_si], 0,
		   (compat->size_si - compat->num_si) * sizeof(XkbSymInterpretRec));
	}
	return Success;
    }
   compat= calloc(1, sizeof(XkbCompatMapRec));
    if (compat==NULL)
	return BadAlloc;
    if (nSI>0) {
	compat->sym_interpret= calloc(nSI, sizeof(XkbSymInterpretRec));
	if (!compat->sym_interpret) {
	    free(compat);
	    return BadAlloc;
	}
    }
    compat->size_si= nSI;
    compat->num_si= 0;
    memset((char *)&compat->groups[0], 0, XkbNumKbdGroups*sizeof(XkbModsRec));
    xkb->compat= compat;
a90 1

d92 1
a92 1
XkbFreeCompatMap(XkbDescPtr xkb,unsigned which,Bool freeMap)
d94 1
a94 1
register XkbCompatMapPtr compat;
d96 3
a98 3
    if ((xkb==NULL)||(xkb->compat==NULL))
	return;
    compat= xkb->compat;
d100 9
a108 8
	which= XkbAllCompatMask;
    if (which&XkbGroupCompatMask)
	memset((char *)&compat->groups[0], 0, XkbNumKbdGroups*sizeof(XkbModsRec));
    if (which&XkbSymInterpMask) {
	if ((compat->sym_interpret)&&(compat->size_si>0))
	    free(compat->sym_interpret);
	compat->size_si= compat->num_si= 0;
	compat->sym_interpret= NULL;
d111 2
a112 2
	free(compat);
	xkb->compat= NULL;
d120 1
a120 1
XkbAllocNames(XkbDescPtr xkb,unsigned which,int nTotalRG,int nTotalAliases)
d122 1
a122 1
XkbNamesPtr	names;
d124 76
a199 71
    if (xkb==NULL)
	return BadMatch;
    if (xkb->names==NULL) {
	xkb->names = calloc(1, sizeof(XkbNamesRec));
	if (xkb->names==NULL)
	    return BadAlloc;
    }
    names= xkb->names;
    if ((which&XkbKTLevelNamesMask)&&(xkb->map!=NULL)&&(xkb->map->types!=NULL)){
	register int	i;
	XkbKeyTypePtr	type;

	type= xkb->map->types;
	for (i=0;i<xkb->map->num_types;i++,type++) {
	    if (type->level_names==NULL) {
		type->level_names= calloc(type->num_levels, sizeof(Atom));
		if (type->level_names==NULL)
		    return BadAlloc;
	    }
	}
    }
    if ((which&XkbKeyNamesMask)&&(names->keys==NULL)) {
	if ((!XkbIsLegalKeycode(xkb->min_key_code))||
	    (!XkbIsLegalKeycode(xkb->max_key_code))||
	    (xkb->max_key_code<xkb->min_key_code)) 
	    return BadValue;
	names->keys= calloc((xkb->max_key_code+1), sizeof(XkbKeyNameRec));
	if (names->keys==NULL)
	    return BadAlloc;
    }
    if ((which&XkbKeyAliasesMask)&&(nTotalAliases>0)) {
	if (names->key_aliases==NULL) {
	    names->key_aliases= calloc(nTotalAliases, sizeof(XkbKeyAliasRec));
	}
	else if (nTotalAliases>names->num_key_aliases) {
	    XkbKeyAliasRec *prev_aliases = names->key_aliases;

	    names->key_aliases= realloc(names->key_aliases,
					 nTotalAliases * sizeof(XkbKeyAliasRec));
	    if (names->key_aliases!=NULL) {
		memset(&names->key_aliases[names->num_key_aliases], 0,
			(nTotalAliases - names->num_key_aliases) * sizeof(XkbKeyAliasRec));
	    } else {
		free(prev_aliases);
	    }
	}
	if (names->key_aliases==NULL) {
	    names->num_key_aliases= 0;
	    return BadAlloc;
	}
	names->num_key_aliases= nTotalAliases;
    }
    if ((which&XkbRGNamesMask)&&(nTotalRG>0)) {
	if (names->radio_groups==NULL) {
	    names->radio_groups= calloc(nTotalRG, sizeof(Atom));
	}
	else if (nTotalRG>names->num_rg) {
	    Atom *prev_radio_groups = names->radio_groups;

	    names->radio_groups= realloc(names->radio_groups,
					  nTotalRG * sizeof(Atom));
	    if (names->radio_groups!=NULL) {
		memset(&names->radio_groups[names->num_rg], 0,
			(nTotalRG - names->num_rg) * sizeof(Atom));
	    } else {
		free(prev_radio_groups);
	    }
	}
	if (names->radio_groups==NULL)
	    return BadAlloc;
	names->num_rg= nTotalRG;
d205 1
a205 1
XkbFreeNames(XkbDescPtr xkb,unsigned which,Bool freeMap)
d207 1
a207 1
XkbNamesPtr	names;
d209 3
a211 3
    if ((xkb==NULL)||(xkb->names==NULL))
	return;
    names= xkb->names;
d213 29
a241 27
	which= XkbAllNamesMask; 
    if (which&XkbKTLevelNamesMask) {
	XkbClientMapPtr	map= xkb->map;
	if ((map!=NULL)&&(map->types!=NULL)) {
	    register int 		i;
	    register XkbKeyTypePtr	type;
	    type= map->types;
	    for (i=0;i<map->num_types;i++,type++) {
		free(type->level_names);
		type->level_names = NULL;
	    }
	}
    }
    if ((which&XkbKeyNamesMask)&&(names->keys!=NULL)) {
	free(names->keys);
	names->keys= NULL;
	names->num_keys= 0;
    }
    if ((which&XkbKeyAliasesMask)&&(names->key_aliases)){
	free(names->key_aliases);
	names->key_aliases=NULL;
	names->num_key_aliases=0;
    }
    if ((which&XkbRGNamesMask)&&(names->radio_groups)) {
	free(names->radio_groups);
	names->radio_groups= NULL;
	names->num_rg= 0;
d244 2
a245 2
	free(names);
	xkb->names= NULL;
d252 2
a253 3
/*ARGSUSED*/
Status
XkbAllocControls(XkbDescPtr xkb,unsigned which)
d255 2
a256 2
    if (xkb==NULL)
	return BadMatch;
d258 4
a261 4
    if (xkb->ctrls==NULL) {
	xkb->ctrls= calloc(1, sizeof(XkbControlsRec));
	if (!xkb->ctrls)
	    return BadAlloc;
d266 2
a267 3
/*ARGSUSED*/
static void
XkbFreeControls(XkbDescPtr xkb,unsigned which,Bool freeMap)
d269 3
a271 3
    if (freeMap && (xkb!=NULL) && (xkb->ctrls!=NULL)) {
	free(xkb->ctrls);
	xkb->ctrls= NULL;
d281 6
a286 6
    if (xkb==NULL)
	return BadMatch;
    if (xkb->indicators==NULL) {
	xkb->indicators= calloc(1, sizeof(XkbIndicatorRec));
	if (!xkb->indicators)
	    return BadAlloc;
d294 3
a296 3
    if ((xkb!=NULL)&&(xkb->indicators!=NULL)) {
	free(xkb->indicators);
	xkb->indicators= NULL;
d303 1
a303 1
XkbDescRec	*
d306 1
a306 1
XkbDescRec *xkb;
d310 1
a310 1
	xkb->device_spec= XkbUseCoreKbd;
d315 1
a315 1
XkbFreeKeyboard(XkbDescPtr xkb,unsigned which,Bool freeAll)
d317 2
a318 2
    if (xkb==NULL)
	return;
d320 13
a332 13
	which= XkbAllComponentsMask;
    if (which&XkbClientMapMask)
	XkbFreeClientMap(xkb,XkbAllClientInfoMask,TRUE);
    if (which&XkbServerMapMask)
	XkbFreeServerMap(xkb,XkbAllServerInfoMask,TRUE);
    if (which&XkbCompatMapMask)
	XkbFreeCompatMap(xkb,XkbAllCompatMask,TRUE);
    if (which&XkbIndicatorMapMask)
	XkbFreeIndicatorMaps(xkb);
    if (which&XkbNamesMask)
	XkbFreeNames(xkb,XkbAllNamesMask,TRUE);
    if ((which&XkbGeometryMask) && (xkb->geom!=NULL)) {
	XkbFreeGeometry(xkb->geom,XkbGeomAllMask,TRUE);
d336 2
a337 2
    if (which&XkbControlsMask)
	XkbFreeControls(xkb,XkbAllControlsMask,TRUE);
d339 1
a339 1
	free(xkb);
a342 1

d348 1
a348 2
    if (names)
    {
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d215 2
a216 4
		if (type->level_names!=NULL) {
		    free(type->level_names);
		    type->level_names= NULL;
		}
d335 19
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d60 1
a60 1
	compat->sym_interpret= xrealloc(compat->sym_interpret,
d63 1
a63 1
	    xfree(prev_interpret);
d73 1
a73 1
   compat= xcalloc(1, sizeof(XkbCompatMapRec));
d77 1
a77 1
	compat->sym_interpret= xcalloc(nSI, sizeof(XkbSymInterpretRec));
d79 1
a79 1
	    xfree(compat);
d85 1
a85 1
    bzero((char *)&compat->groups[0],XkbNumKbdGroups*sizeof(XkbModsRec));
d102 1
a102 1
	bzero((char *)&compat->groups[0],XkbNumKbdGroups*sizeof(XkbModsRec));
d105 1
a105 1
	    xfree(compat->sym_interpret);
d110 1
a110 1
	xfree(compat);
d126 1
a126 1
	xkb->names = xcalloc(1, sizeof(XkbNamesRec));
d138 1
a138 1
		type->level_names= xcalloc(type->num_levels, sizeof(Atom));
d149 1
a149 1
	names->keys= xcalloc((xkb->max_key_code+1), sizeof(XkbKeyNameRec));
d155 1
a155 1
	    names->key_aliases= xcalloc(nTotalAliases, sizeof(XkbKeyAliasRec));
d160 1
a160 1
	    names->key_aliases= xrealloc(names->key_aliases,
d166 1
a166 1
		xfree(prev_aliases);
d177 1
a177 1
	    names->radio_groups= xcalloc(nTotalRG, sizeof(Atom));
d182 1
a182 1
	    names->radio_groups= xrealloc(names->radio_groups,
d188 1
a188 1
		xfree(prev_radio_groups);
d216 1
a216 1
		    xfree(type->level_names);
d223 1
a223 1
	xfree(names->keys);
d228 1
a228 1
	xfree(names->key_aliases);
d233 1
a233 1
	xfree(names->radio_groups);
d238 1
a238 1
	xfree(names);
d254 1
a254 1
	xkb->ctrls= xcalloc(1, sizeof(XkbControlsRec));
d266 1
a266 1
	xfree(xkb->ctrls);
d280 1
a280 1
	xkb->indicators= xcalloc(1, sizeof(XkbIndicatorRec));
d291 1
a291 1
	xfree(xkb->indicators);
d304 1
a304 1
    xkb = xcalloc(1, sizeof(XkbDescRec));
d335 1
a335 1
	xfree(xkb);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a32 2
#define	NEED_EVENTS
#define	NEED_REPLIES
d38 2
d60 2
a61 2
	compat->sym_interpret= _XkbTypedRealloc(compat->sym_interpret,
						     nSI,XkbSymInterpretRec);
d63 1
a63 1
	    _XkbFree(prev_interpret);
d68 2
a69 2
	    _XkbClearElems(compat->sym_interpret,compat->num_si,
					compat->size_si-1,XkbSymInterpretRec);
d73 1
a73 1
    compat= _XkbTypedCalloc(1,XkbCompatMapRec);
d77 1
a77 1
	compat->sym_interpret= _XkbTypedCalloc(nSI,XkbSymInterpretRec);
d79 1
a79 1
	    _XkbFree(compat);
d105 1
a105 1
	    _XkbFree(compat->sym_interpret);
d110 1
a110 1
	_XkbFree(compat);
d126 1
a126 1
	xkb->names = _XkbTypedCalloc(1,XkbNamesRec);
d138 1
a138 1
		type->level_names= _XkbTypedCalloc(type->num_levels,Atom);
d149 1
a149 1
	names->keys= _XkbTypedCalloc((xkb->max_key_code+1),XkbKeyNameRec);
d155 1
a155 1
	    names->key_aliases= _XkbTypedCalloc(nTotalAliases,XkbKeyAliasRec);
d160 2
a161 2
	    names->key_aliases= _XkbTypedRealloc(names->key_aliases,
						nTotalAliases,XkbKeyAliasRec);
d163 2
a164 2
		_XkbClearElems(names->key_aliases,names->num_key_aliases,
						nTotalAliases-1,XkbKeyAliasRec);
d166 1
a166 1
		_XkbFree(prev_aliases);
d177 1
a177 1
	    names->radio_groups= _XkbTypedCalloc(nTotalRG,Atom);
d182 2
a183 2
	    names->radio_groups= _XkbTypedRealloc(names->radio_groups,nTotalRG,
									Atom);
d185 2
a186 2
		_XkbClearElems(names->radio_groups,names->num_rg,nTotalRG-1,
									Atom);
d188 1
a188 1
		_XkbFree(prev_radio_groups);
d216 1
a216 1
		    _XkbFree(type->level_names);
d223 1
a223 1
	_XkbFree(names->keys);
d228 1
a228 1
	_XkbFree(names->key_aliases);
d233 1
a233 1
	_XkbFree(names->radio_groups);
d238 1
a238 1
	_XkbFree(names);
d254 1
a254 1
	xkb->ctrls= _XkbTypedCalloc(1,XkbControlsRec);
d266 1
a266 1
	_XkbFree(xkb->ctrls);
d274 1
a274 1
Status 
d280 1
a280 1
	xkb->indicators= _XkbTypedCalloc(1,XkbIndicatorRec);
d291 1
a291 1
	_XkbFree(xkb->indicators);
d304 1
a304 1
    xkb = _XkbTypedCalloc(1,XkbDescRec);
d318 1
a318 1
	XkbFreeClientMap(xkb,XkbAllClientInfoMask,True);
d320 1
a320 1
	XkbFreeServerMap(xkb,XkbAllServerInfoMask,True);
d322 1
a322 1
	XkbFreeCompatMap(xkb,XkbAllCompatMask,True);
d326 1
a326 1
	XkbFreeNames(xkb,XkbAllNamesMask,True);
d328 1
a328 1
	XkbFreeGeometry(xkb->geom,XkbGeomAllMask,True);
d333 1
a333 1
	XkbFreeControls(xkb,XkbAllControlsMask,True);
d335 1
a335 1
	_XkbFree(xkb);
@


1.1
log
@Initial revision
@
text
@d38 2
a39 2
#include <X11/extensions/XKBsrv.h>
#include <X11/extensions/XKBgeom.h>
d262 1
a262 1
void
d287 1
a287 1
void
d327 1
a327 1
    if ((which&XkbGeometryMask) && (xkb->geom!=NULL))
d329 3
a335 151
    return;
}

/***====================================================================***/

XkbDeviceLedInfoPtr
XkbAddDeviceLedInfo(XkbDeviceInfoPtr devi,unsigned ledClass,unsigned ledId)
{
XkbDeviceLedInfoPtr	devli;
register int		i;

    if ((!devi)||(!XkbSingleXIClass(ledClass))||(!XkbSingleXIId(ledId)))
	return NULL;
    for (i=0,devli=devi->leds;i<devi->num_leds;i++,devli++) {
	if ((devli->led_class==ledClass)&&(devli->led_id==ledId))
	    return devli;
    }
    if (devi->num_leds>=devi->sz_leds) {
	XkbDeviceLedInfoRec *prev_leds = devi->leds;
	
	if (devi->sz_leds>0)	devi->sz_leds*= 2;
	else			devi->sz_leds= 1;
	devi->leds= _XkbTypedRealloc(devi->leds,devi->sz_leds,
							XkbDeviceLedInfoRec);
	if (!devi->leds) {
	    _XkbFree(prev_leds);
	    devi->sz_leds= devi->num_leds= 0;
	    return NULL;
	}
	i= devi->num_leds;
	for (devli=&devi->leds[i];i<devi->sz_leds;i++,devli++) {
	    bzero(devli,sizeof(XkbDeviceLedInfoRec));
	    devli->led_class= XkbXINone;
	    devli->led_id= XkbXINone;
	}
    }
    devli= &devi->leds[devi->num_leds++];
    bzero(devli,sizeof(XkbDeviceLedInfoRec));
    devli->led_class= ledClass;
    devli->led_id= ledId;
    return devli;
}

Status
XkbResizeDeviceButtonActions(XkbDeviceInfoPtr devi,unsigned newTotal)
{
    XkbAction *prev_btn_acts;

    if ((!devi)||(newTotal>255))
	return BadValue;
    if ((devi->btn_acts!=NULL)&&(newTotal==devi->num_btns))
	return Success;
    if (newTotal==0) {
	if (devi->btn_acts!=NULL) {
	    _XkbFree(devi->btn_acts);
	    devi->btn_acts= NULL;
	}
	devi->num_btns= 0;
	return Success;
    }
    prev_btn_acts = devi->btn_acts;
    devi->btn_acts= _XkbTypedRealloc(devi->btn_acts,newTotal,XkbAction);
    if (devi->btn_acts==NULL) {
	_XkbFree(prev_btn_acts);
	devi->num_btns= 0;
	return BadAlloc;
    }
    if (newTotal>devi->num_btns) {
	XkbAction *act;
	act= &devi->btn_acts[devi->num_btns];
	bzero((char *)act,(newTotal-devi->num_btns)*sizeof(XkbAction));
    }
    devi->num_btns= newTotal;
    return Success;
}

/*ARGSUSED*/
XkbDeviceInfoPtr
XkbAllocDeviceInfo(unsigned deviceSpec,unsigned nButtons,unsigned szLeds)
{
XkbDeviceInfoPtr	devi;

    devi= _XkbTypedCalloc(1,XkbDeviceInfoRec);
    if (devi!=NULL) {
	devi->device_spec= deviceSpec;
	devi->has_own_state= False;
	devi->num_btns= 0;
	devi->btn_acts= NULL;
	if (nButtons>0) {
	    devi->num_btns= nButtons;
	    devi->btn_acts= _XkbTypedCalloc(nButtons,XkbAction);
	    if (!devi->btn_acts) {
		_XkbFree(devi);
		return NULL;
	    }
	}
	devi->dflt_kbd_fb= XkbXINone;
	devi->dflt_led_fb= XkbXINone;
	devi->num_leds= 0;
	devi->sz_leds= 0;
	devi->leds= NULL;
	if (szLeds>0) {
	    devi->sz_leds= szLeds;
	    devi->leds= _XkbTypedCalloc(szLeds,XkbDeviceLedInfoRec);
	    if (!devi->leds) {
		if (devi->btn_acts)
		    _XkbFree(devi->btn_acts);
		_XkbFree(devi);
		return NULL;
	    }
	}
    }
    return devi;
}


void 
XkbFreeDeviceInfo(XkbDeviceInfoPtr devi,unsigned which,Bool freeDevI)
{
    if (devi) {
	if (freeDevI) {
	    which= XkbXI_AllDeviceFeaturesMask;
	    if (devi->name) {
		_XkbFree(devi->name);
		devi->name= NULL;
	    }
	}
	if ((which&XkbXI_ButtonActionsMask)&&(devi->btn_acts)) {
	    _XkbFree(devi->btn_acts);
	    devi->num_btns= 0;
	    devi->btn_acts= NULL;
	}
	if ((which&XkbXI_IndicatorsMask)&&(devi->leds)) {
	    register int i;
	    if ((which&XkbXI_IndicatorsMask)==XkbXI_IndicatorsMask) {
		_XkbFree(devi->leds);
		devi->sz_leds= devi->num_leds= 0;
		devi->leds= NULL;
	    }
	    else {
		XkbDeviceLedInfoPtr	devli;
		for (i=0,devli=devi->leds;i<devi->num_leds;i++,devli++) {
		    if (which&XkbXI_IndicatorMapsMask)
			 bzero((char *)&devli->maps[0],sizeof(devli->maps));
		    else bzero((char *)&devli->names[0],sizeof(devli->names));
		}
	    }
	}
	if (freeDevI)
	    _XkbFree(devi);
    }
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d38 1
a38 1
#include <xkbsrv.h>
d262 1
a262 1
static void
d287 1
a287 1
static void
d327 1
a327 1
    if ((which&XkbGeometryMask) && (xkb->geom!=NULL)) {
a328 3
        /* PERHAPS BONGHITS etc */
        xkb->geom = NULL;
    }
d333 151
@

