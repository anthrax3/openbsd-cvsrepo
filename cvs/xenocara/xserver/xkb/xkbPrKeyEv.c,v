head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.8
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.3.0.4
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.2
	v1_4_0_90:1.1.1.3
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.09.16.19.10.26;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Te1daavkBLskZ8gc;

1.6
date	2013.06.07.17.28.56;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.32;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.38;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.38;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.34;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.15.22;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.15.22;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.05.32;	author matthieu;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2007.12.13.21.06.50;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/************************************************************
Copyright (c) 1993 by Silicon Graphics Computer Systems, Inc.

Permission to use, copy, modify, and distribute this
software and its documentation for any purpose and without
fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting
documentation, and that the name of Silicon Graphics not be
used in advertising or publicity pertaining to distribution
of the software without specific prior written permission.
Silicon Graphics makes no representation about the suitability
of this software for any purpose. It is provided "as is"
without any express or implied warranty.

SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
THE USE OR PERFORMANCE OF THIS SOFTWARE.

********************************************************/

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <stdio.h>
#include <math.h>
#include <X11/X.h>
#include <X11/Xproto.h>
#include <X11/keysym.h>
#include "misc.h"
#include "inputstr.h"
#include "exevents.h"
#include "eventstr.h"
#include <xkbsrv.h>
#include <ctype.h>
#include "events.h"

/***====================================================================***/

void
XkbProcessKeyboardEvent(DeviceEvent *event, DeviceIntPtr keybd)
{
    KeyClassPtr keyc = keybd->key;
    XkbSrvInfoPtr xkbi;
    int key;
    XkbBehavior behavior;
    unsigned ndx;

    xkbi = keyc->xkbInfo;
    key = event->detail.key;
    if (xkbDebugFlags & 0x8)
        DebugF("[xkb] XkbPKE: Key %d %s\n", key,
               (event->type == ET_KeyPress ? "down" : "up"));

    if (xkbi->repeatKey == key && event->type == ET_KeyRelease &&
        !(xkbi->desc->ctrls->enabled_ctrls & XkbRepeatKeysMask))
        AccessXCancelRepeatKey(xkbi, key);

    behavior = xkbi->desc->server->behaviors[key];
    /* The "permanent" flag indicates a hard-wired behavior that occurs */
    /* below XKB, such as a key that physically locks.   XKB does not   */
    /* do anything to implement the behavior, but it *does* report that */
    /* key is hardwired */

    if (!(behavior.type & XkbKB_Permanent)) {
        switch (behavior.type) {
        case XkbKB_Default:
            /* Neither of these should happen in practice, but ignore them
               anyway. */
            if (event->type == ET_KeyPress && !event->key_repeat &&
                key_is_down(keybd, key, KEY_PROCESSED))
                return;
            else if (event->type == ET_KeyRelease &&
                     !key_is_down(keybd, key, KEY_PROCESSED))
                return;
            break;
        case XkbKB_Lock:
            if (event->type == ET_KeyRelease)
                return;
            else if (key_is_down(keybd, key, KEY_PROCESSED))
                event->type = ET_KeyRelease;
            break;
        case XkbKB_RadioGroup:
            ndx = (behavior.data & (~XkbKB_RGAllowNone));
            if (ndx < xkbi->nRadioGroups) {
                XkbRadioGroupPtr rg;

                if (event->type == ET_KeyRelease)
                    return;

                rg = &xkbi->radioGroups[ndx];
                if (rg->currentDown == event->detail.key) {
                    if (behavior.data & XkbKB_RGAllowNone) {
                        event->type = ET_KeyRelease;
                        XkbHandleActions(keybd, keybd, event);
                        rg->currentDown = 0;
                    }
                    return;
                }
                if (rg->currentDown != 0) {
                    int tmpkey = event->detail.key;

                    event->type = ET_KeyRelease;
                    event->detail.key = rg->currentDown;
                    XkbHandleActions(keybd, keybd, event);
                    event->type = ET_KeyPress;
                    event->detail.key = tmpkey;
                }
                rg->currentDown = key;
            }
            else
                ErrorF("[xkb] InternalError! Illegal radio group %d\n", ndx);
            break;
        case XkbKB_Overlay1:
        case XkbKB_Overlay2:
        {
            unsigned which;

            if (behavior.type == XkbKB_Overlay1)
                which = XkbOverlay1Mask;
            else
                which = XkbOverlay2Mask;
            if ((xkbi->desc->ctrls->enabled_ctrls & which) == 0)
                break;
            if ((behavior.data >= xkbi->desc->min_key_code) &&
                (behavior.data <= xkbi->desc->max_key_code)) {
                event->detail.key = behavior.data;
                /* 9/11/94 (ef) -- XXX! need to match release with */
                /*                 press even if the state of the  */
                /*                 corresponding overlay control   */
                /*                 changes while the key is down   */
            }
        }
            break;
        default:
            ErrorF("[xkb] unknown key behavior 0x%04x\n", behavior.type);
            break;
        }
    }
    XkbHandleActions(keybd, keybd, event);
    return;
}

void
ProcessKeyboardEvent(InternalEvent *ev, DeviceIntPtr keybd)
{

    KeyClassPtr keyc = keybd->key;
    XkbSrvInfoPtr xkbi = NULL;
    ProcessInputProc backup_proc;
    xkbDeviceInfoPtr xkb_priv = XKBDEVICEINFO(keybd);
    DeviceEvent *event = &ev->device_event;
    int is_press = (event->type == ET_KeyPress);
    int is_release = (event->type == ET_KeyRelease);

    /* We're only interested in key events. */
    if (!is_press && !is_release) {
        UNWRAP_PROCESS_INPUT_PROC(keybd, xkb_priv, backup_proc);
        keybd->public.processInputProc(ev, keybd);
        COND_WRAP_PROCESS_INPUT_PROC(keybd, xkb_priv, backup_proc,
                                     xkbUnwrapProc);
        return;
    }

    xkbi = keyc->xkbInfo;

    /* If AccessX filters are active, then pass it through to
     * AccessXFilter{Press,Release}Event; else, punt to
     * XkbProcessKeyboardEvent.
     *
     * If AXF[PK]E don't intercept anything (which they probably won't),
     * they'll punt through XPKE anyway. */
    if ((xkbi->desc->ctrls->enabled_ctrls & XkbAllFilteredEventsMask)) {
        if (is_press)
            AccessXFilterPressEvent(event, keybd);
        else if (is_release)
            AccessXFilterReleaseEvent(event, keybd);
        return;
    }
    else {
        XkbProcessKeyboardEvent(event, keybd);
    }

    return;
}
@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d9 2
a10 2
documentation, and that the name of Silicon Graphics not be 
used in advertising or publicity pertaining to distribution 
d12 1
a12 1
Silicon Graphics makes no representation about the suitability 
d16 2
a17 2
SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
d19 3
a21 3
GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d107 1
a107 1
                    int key = event->detail.key;
d113 1
a113 1
                    event->detail.key = key;
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d49 5
a53 5
KeyClassPtr	keyc = keybd->key;
XkbSrvInfoPtr	xkbi;
int		key;
XkbBehavior	behavior;
unsigned        ndx;
d58 2
a59 1
	DebugF("[xkb] XkbPKE: Key %d %s\n",key,(event->type == ET_KeyPress?"down":"up"));
d61 1
a61 1
    if (xkbi->repeatKey == key && event->type== ET_KeyRelease &&
d63 1
a63 1
	AccessXCancelRepeatKey(xkbi, key);
d72 23
a94 6
	switch (behavior.type) {
	    case XkbKB_Default:
                /* Neither of these should happen in practice, but ignore them
                   anyway. */
		if (event->type == ET_KeyPress && !event->key_repeat &&
                    key_is_down(keybd, key, KEY_PROCESSED))
d96 8
a103 2
		else if (event->type == ET_KeyRelease &&
                         !key_is_down(keybd, key, KEY_PROCESSED))
d105 4
a108 5
		break;
	    case XkbKB_Lock:
		if (event->type == ET_KeyRelease)
		    return;
		else if (key_is_down(keybd, key, KEY_PROCESSED))
d110 35
a144 51
		break;
	    case XkbKB_RadioGroup:
		ndx= (behavior.data&(~XkbKB_RGAllowNone));
		if ( ndx<xkbi->nRadioGroups ) {
		    XkbRadioGroupPtr	rg;

		    if (event->type == ET_KeyRelease)
		        return;

		    rg = &xkbi->radioGroups[ndx];
		    if ( rg->currentDown == event->detail.key) {
		        if (behavior.data&XkbKB_RGAllowNone) {
		            event->type = ET_KeyRelease;
			    XkbHandleActions(keybd, keybd, event);
			    rg->currentDown= 0;
		        }
		        return;
		    }
		    if ( rg->currentDown!=0 ) {
			int key = event->detail.key;
			event->type = ET_KeyRelease;
			event->detail.key = rg->currentDown;
			XkbHandleActions(keybd, keybd, event);
			event->type = ET_KeyPress;
			event->detail.key = key;
		    }
		    rg->currentDown= key;
		}
		else ErrorF("[xkb] InternalError! Illegal radio group %d\n",ndx);
		break;
	    case XkbKB_Overlay1: case XkbKB_Overlay2:
		{
		    unsigned	which;
		    if (behavior.type==XkbKB_Overlay1)	which= XkbOverlay1Mask;
		    else				which= XkbOverlay2Mask;
		    if ( (xkbi->desc->ctrls->enabled_ctrls&which)==0 )
			break;
		    if ((behavior.data>=xkbi->desc->min_key_code)&&
			(behavior.data<=xkbi->desc->max_key_code)) {
                        event->detail.key = behavior.data;
			/* 9/11/94 (ef) -- XXX! need to match release with */
			/*                 press even if the state of the  */
			/*                 corresponding overlay control   */
			/*                 changes while the key is down   */
		    }
		}
		break;
	    default:
		ErrorF("[xkb] unknown key behavior 0x%04x\n",behavior.type);
		break;
	}
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a32 1
#define NEED_EVENTS 1
d39 1
d42 1
d47 1
a47 1
XkbProcessKeyboardEvent(xEvent *xE,DeviceIntPtr keybd,int count)
a53 1
int             xiEvent;
d55 8
a62 11
    xkbi= keyc->xkbInfo;
    key= xE->u.u.detail;
    xiEvent= (xE->u.u.type & EXTENSION_EVENT_BASE);
    if (xkbDebugFlags&0x8) {
	DebugF("[xkb] XkbPKE: Key %d %s\n",key,(xE->u.u.type==KeyPress?"down":"up"));
    }

    if ( (xkbi->repeatKey==key) && (xE->u.u.type==KeyRelease) &&
	 ((xkbi->desc->ctrls->enabled_ctrls&XkbRepeatKeysMask)==0) ) {
	AccessXCancelRepeatKey(xkbi,key);
    }
d64 1
a64 1
    behavior= xkbi->desc->server->behaviors[key];
d70 1
a70 1
    if ((behavior.type&XkbKB_Permanent)==0) {
d73 8
a80 36
		if (( xE->u.u.type == KeyPress || 
                            xE->u.u.type == DeviceKeyPress) && 
		    (keyc->down[key>>3] & (1<<(key&7)))) {
		    XkbLastRepeatEvent=	(pointer)xE;

                    if (xiEvent)
                        xE->u.u.type = DeviceKeyRelease;
                    else
                        xE->u.u.type = KeyRelease;
		    XkbHandleActions(keybd,keybd,xE,count);

                    if (xiEvent)
                        xE->u.u.type = DeviceKeyPress;
                    else
                        xE->u.u.type = KeyPress;
		    XkbHandleActions(keybd,keybd,xE,count);
		    XkbLastRepeatEvent= NULL;
		    return;
		}
		else if ((xE->u.u.type==KeyRelease || 
                            xE->u.u.type == DeviceKeyRelease) &&
			(!(keyc->down[key>>3]&(1<<(key&7))))) {
		    XkbLastRepeatEvent=	(pointer)&xE;
                    if (xiEvent)
                        xE->u.u.type = DeviceKeyPress;
                    else
                        xE->u.u.type = KeyPress;
		    XkbHandleActions(keybd,keybd,xE,count);
                    if (xiEvent)
                        xE->u.u.type = DeviceKeyRelease;
                    else
                        xE->u.u.type = KeyRelease;
		    XkbHandleActions(keybd,keybd,xE,count);
		    XkbLastRepeatEvent= NULL;
		    return;
		}
d83 1
a83 2
		if ( xE->u.u.type == KeyRelease || 
                        xE->u.u.type == DeviceKeyRelease) {
d85 2
a86 10
                }
		else {
		    int	bit= 1<<(key&7);
		    if ( keyc->down[key>>3]&bit ) {
                        if (xiEvent)
                            xE->u.u.type = DeviceKeyRelease;
                        else
                            xE->u.u.type= KeyRelease;
                    }
                }
d93 1
a93 2
		    if ( xE->u.u.type == KeyRelease ||
                            xE->u.u.type == DeviceKeyRelease)
d97 1
a97 1
		    if ( rg->currentDown == xE->u.u.detail ) {
d99 2
a100 2
		            xE->u.u.type = KeyRelease;
			    XkbHandleActions(keybd,keybd,xE,count);
d106 6
a111 12
			int key = xE->u.u.detail;
                        if (xiEvent)
                            xE->u.u.type = DeviceKeyRelease;
                        else
                            xE->u.u.type= KeyRelease;
			xE->u.u.detail= rg->currentDown;
		        XkbHandleActions(keybd,keybd,xE,count);
                        if (xiEvent)
                            xE->u.u.type = DeviceKeyPress;
                        else
                            xE->u.u.type= KeyPress;
		        xE->u.u.detail= key;
d126 1
a126 1
			xE->u.u.detail= behavior.data;
d139 1
a139 1
    XkbHandleActions(keybd,keybd,xE,count);
d144 1
a144 1
ProcessKeyboardEvent(xEvent *xE,DeviceIntPtr keybd,int count)
d151 3
a153 6
    int is_press = (xE->u.u.type == KeyPress || xE->u.u.type == DeviceKeyPress);
    int is_release = (xE->u.u.type == KeyRelease ||
                      xE->u.u.type == DeviceKeyRelease);

    if (keyc)
        xkbi = keyc->xkbInfo;
d158 1
a158 1
        keybd->public.processInputProc(xE, keybd, count);
d164 2
d174 1
a174 1
            AccessXFilterPressEvent(xE, keybd, count);
d176 6
a181 1
            AccessXFilterReleaseEvent(xE, keybd, count);
a182 4
    } else {
        XkbProcessKeyboardEvent(xE, keybd, count);
    }
    
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a41 1
#define EXTENSION_EVENT_BASE 64
d59 1
a59 1
	DebugF("XkbPKE: Key %d %s\n",key,(xE->u.u.type==KeyPress?"down":"up"));
d162 1
a162 1
		else ErrorF("InternalError! Illegal radio group %d\n",ndx);
d182 1
a182 1
		ErrorF("unknown key behavior 0x%04x\n",behavior.type);
d225 2
a226 2
    }
    else {
@


1.1
log
@Initial revision
@
text
@d39 2
a40 1
#include <X11/extensions/XKBsrv.h>
d42 1
a42 1

d54 1
d58 1
a58 1
#ifdef DEBUG
d60 1
a60 1
	ErrorF("XkbPKE: Key %d %s\n",key,(xE->u.u.type==KeyPress?"down":"up"));
a61 1
#endif
d73 1
d77 2
a78 1
		if (( xE->u.u.type == KeyPress ) && 
d81 5
a85 1
		    xE->u.u.type = KeyRelease;
d87 5
a91 1
		    xE->u.u.type = KeyPress;
d96 2
a97 1
		else if ((xE->u.u.type==KeyRelease) &&
d100 4
a103 1
		    xE->u.u.type = KeyPress;
d105 4
a108 1
		    xE->u.u.type = KeyRelease;
d115 2
a116 1
		if ( xE->u.u.type == KeyRelease )
d118 1
d121 7
a127 3
		    if ( keyc->down[key>>3]&bit )
			xE->u.u.type= KeyRelease;
		}
d134 2
a135 1
		    if ( xE->u.u.type == KeyRelease )
d149 4
a152 1
			xE->u.u.type= KeyRelease;
d155 4
a158 1
		        xE->u.u.type= KeyPress;
a193 2
KeyClassPtr	keyc = keybd->key;
XkbSrvInfoPtr	xkbi;
d195 19
a213 1
    xkbi= keyc->xkbInfo;
d215 14
a228 4
#ifdef DEBUG
    if (xkbDebugFlags&0x8) {
	int key= xE->u.u.detail;
	ErrorF("PKE: Key %d %s\n",key,(xE->u.u.type==KeyPress?"down":"up"));
d230 1
a230 7
#endif
    if ((xkbi->desc->ctrls->enabled_ctrls&XkbAllFilteredEventsMask)==0)
	XkbProcessKeyboardEvent(xE,keybd,count);
    else if (xE->u.u.type==KeyPress)
	AccessXFilterPressEvent(xE,keybd,count);
    else if (xE->u.u.type==KeyRelease)
	AccessXFilterReleaseEvent(xE,keybd,count);
a232 1

@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d39 1
a39 1
#include <xkbsrv.h>
@


1.1.1.3
log
@xserver 1.4.0.90
@
text
@a38 1
#include "exevents.h"
d41 1
a41 1
#define EXTENSION_EVENT_BASE 64
a52 1
int             xiEvent;
a55 1
    xiEvent= (xE->u.u.type & EXTENSION_EVENT_BASE);
a71 1

d75 1
a75 2
		if (( xE->u.u.type == KeyPress || 
                            xE->u.u.type == DeviceKeyPress) && 
d78 1
a78 5

                    if (xiEvent)
                        xE->u.u.type = DeviceKeyRelease;
                    else
                        xE->u.u.type = KeyRelease;
d80 1
a80 5

                    if (xiEvent)
                        xE->u.u.type = DeviceKeyPress;
                    else
                        xE->u.u.type = KeyPress;
d85 1
a85 2
		else if ((xE->u.u.type==KeyRelease || 
                            xE->u.u.type == DeviceKeyRelease) &&
d88 1
a88 4
                    if (xiEvent)
                        xE->u.u.type = DeviceKeyPress;
                    else
                        xE->u.u.type = KeyPress;
d90 1
a90 4
                    if (xiEvent)
                        xE->u.u.type = DeviceKeyRelease;
                    else
                        xE->u.u.type = KeyRelease;
d97 1
a97 2
		if ( xE->u.u.type == KeyRelease || 
                        xE->u.u.type == DeviceKeyRelease) {
a98 1
                }
d101 3
a103 7
		    if ( keyc->down[key>>3]&bit ) {
                        if (xiEvent)
                            xE->u.u.type = DeviceKeyRelease;
                        else
                            xE->u.u.type= KeyRelease;
                    }
                }
d110 1
a110 2
		    if ( xE->u.u.type == KeyRelease ||
                            xE->u.u.type == DeviceKeyRelease)
d124 1
a124 4
                        if (xiEvent)
                            xE->u.u.type = DeviceKeyRelease;
                        else
                            xE->u.u.type= KeyRelease;
d127 1
a127 4
                        if (xiEvent)
                            xE->u.u.type = DeviceKeyPress;
                        else
                            xE->u.u.type= KeyPress;
d163 2
d166 1
a166 19
    KeyClassPtr keyc = keybd->key;
    XkbSrvInfoPtr xkbi = NULL;
    ProcessInputProc backup_proc;
    xkbDeviceInfoPtr xkb_priv = XKBDEVICEINFO(keybd);
    int is_press = (xE->u.u.type == KeyPress || xE->u.u.type == DeviceKeyPress);
    int is_release = (xE->u.u.type == KeyRelease ||
                      xE->u.u.type == DeviceKeyRelease);

    if (keyc)
        xkbi = keyc->xkbInfo;

    /* We're only interested in key events. */
    if (!is_press && !is_release) {
        UNWRAP_PROCESS_INPUT_PROC(keybd, xkb_priv, backup_proc);
        keybd->public.processInputProc(xE, keybd, count);
        COND_WRAP_PROCESS_INPUT_PROC(keybd, xkb_priv, backup_proc,
                                     xkbUnwrapProc);
        return;
    }
d168 4
a171 11
    /* If AccessX filters are active, then pass it through to
     * AccessXFilter{Press,Release}Event; else, punt to
     * XkbProcessKeyboardEvent.
     *
     * If AXF[PK]E don't intercept anything (which they probably won't),
     * they'll punt through XPKE anyway. */
    if ((xkbi->desc->ctrls->enabled_ctrls & XkbAllFilteredEventsMask)) {
        if (is_press)
            AccessXFilterPressEvent(xE, keybd, count);
        else if (is_release)
            AccessXFilterReleaseEvent(xE, keybd, count);
d173 7
a179 4
    else {
        XkbProcessKeyboardEvent(xE, keybd, count);
    }
    
d182 1
@


