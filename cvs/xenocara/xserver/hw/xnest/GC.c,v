head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.6
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.05.29.12.02.38;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	s0SI41sEunLdyFfd;

1.8
date	2015.09.16.19.10.24;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	Te1daavkBLskZ8gc;

1.7
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	cVXoV5PxI8YrEaVA;

1.6
date	2012.06.10.13.21.28;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.53;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.30;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.46;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.46;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*

Copyright 1993 by Davor Matic

Permission to use, copy, modify, distribute, and sell this software
and its documentation for any purpose is hereby granted without fee,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation.  Davor Matic makes no representations about
the suitability of this software for any purpose.  It is provided "as
is" without express or implied warranty.

*/

#ifdef HAVE_XNEST_CONFIG_H
#include <xnest-config.h>
#endif

#include <X11/X.h>
#include <X11/Xproto.h>
#include "gcstruct.h"
#include "windowstr.h"
#include "pixmapstr.h"
#include "scrnintstr.h"
#include <X11/fonts/fontstruct.h>
#include "mistruct.h"
#include "region.h"

#include "Xnest.h"

#include "Display.h"
#include "XNGC.h"
#include "GCOps.h"
#include "Drawable.h"
#include "XNFont.h"
#include "Color.h"

DevPrivateKeyRec xnestGCPrivateKeyRec;

static GCFuncs xnestFuncs = {
    xnestValidateGC,
    xnestChangeGC,
    xnestCopyGC,
    xnestDestroyGC,
    xnestChangeClip,
    xnestDestroyClip,
    xnestCopyClip,
};

static GCOps xnestOps = {
    xnestFillSpans,
    xnestSetSpans,
    xnestPutImage,
    xnestCopyArea,
    xnestCopyPlane,
    xnestPolyPoint,
    xnestPolylines,
    xnestPolySegment,
    xnestPolyRectangle,
    xnestPolyArc,
    xnestFillPolygon,
    xnestPolyFillRect,
    xnestPolyFillArc,
    xnestPolyText8,
    xnestPolyText16,
    xnestImageText8,
    xnestImageText16,
    xnestImageGlyphBlt,
    xnestPolyGlyphBlt,
    xnestPushPixels
};

Bool
xnestCreateGC(GCPtr pGC)
{
    pGC->funcs = &xnestFuncs;
    pGC->ops = &xnestOps;

    pGC->miTranslate = 1;

    xnestGCPriv(pGC)->gc = XCreateGC(xnestDisplay,
                                     xnestDefaultDrawables[pGC->depth],
                                     0L, NULL);

    return True;
}

void
xnestValidateGC(GCPtr pGC, unsigned long changes, DrawablePtr pDrawable)
{
}

void
xnestChangeGC(GCPtr pGC, unsigned long mask)
{
    XGCValues values;

    if (mask & GCFunction)
        values.function = pGC->alu;

    if (mask & GCPlaneMask)
        values.plane_mask = pGC->planemask;

    if (mask & GCForeground)
        values.foreground = xnestPixel(pGC->fgPixel);

    if (mask & GCBackground)
        values.background = xnestPixel(pGC->bgPixel);

    if (mask & GCLineWidth)
        values.line_width = pGC->lineWidth;

    if (mask & GCLineStyle)
        values.line_style = pGC->lineStyle;

    if (mask & GCCapStyle)
        values.cap_style = pGC->capStyle;

    if (mask & GCJoinStyle)
        values.join_style = pGC->joinStyle;

    if (mask & GCFillStyle)
        values.fill_style = pGC->fillStyle;

    if (mask & GCFillRule)
        values.fill_rule = pGC->fillRule;

    if (mask & GCTile) {
        if (pGC->tileIsPixel)
            mask &= ~GCTile;
        else
            values.tile = xnestPixmap(pGC->tile.pixmap);
    }

    if (mask & GCStipple)
        values.stipple = xnestPixmap(pGC->stipple);

    if (mask & GCTileStipXOrigin)
        values.ts_x_origin = pGC->patOrg.x;

    if (mask & GCTileStipYOrigin)
        values.ts_y_origin = pGC->patOrg.y;

    if (mask & GCFont)
        values.font = xnestFont(pGC->font);

    if (mask & GCSubwindowMode)
        values.subwindow_mode = pGC->subWindowMode;

    if (mask & GCGraphicsExposures)
        values.graphics_exposures = pGC->graphicsExposures;

    if (mask & GCClipXOrigin)
        values.clip_x_origin = pGC->clipOrg.x;

    if (mask & GCClipYOrigin)
        values.clip_y_origin = pGC->clipOrg.y;

    if (mask & GCClipMask)      /* this is handled in change clip */
        mask &= ~GCClipMask;

    if (mask & GCDashOffset)
        values.dash_offset = pGC->dashOffset;

    if (mask & GCDashList) {
        mask &= ~GCDashList;
        XSetDashes(xnestDisplay, xnestGC(pGC),
                   pGC->dashOffset, (char *) pGC->dash, pGC->numInDashList);
    }

    if (mask & GCArcMode)
        values.arc_mode = pGC->arcMode;

    if (mask)
        XChangeGC(xnestDisplay, xnestGC(pGC), mask, &values);
}

void
xnestCopyGC(GCPtr pGCSrc, unsigned long mask, GCPtr pGCDst)
{
    XCopyGC(xnestDisplay, xnestGC(pGCSrc), mask, xnestGC(pGCDst));
}

void
xnestDestroyGC(GCPtr pGC)
{
    XFreeGC(xnestDisplay, xnestGC(pGC));
}

void
xnestChangeClip(GCPtr pGC, int type, void *pValue, int nRects)
{
    int i;
    BoxPtr pBox;
    XRectangle *pRects;

    xnestDestroyClip(pGC);

    switch (type) {
    case CT_NONE:
        XSetClipMask(xnestDisplay, xnestGC(pGC), None);
        pValue = NULL;
        break;

    case CT_REGION:
        nRects = RegionNumRects((RegionPtr) pValue);
        pRects = xallocarray(nRects, sizeof(*pRects));
        pBox = RegionRects((RegionPtr) pValue);
        for (i = nRects; i-- > 0;) {
            pRects[i].x = pBox[i].x1;
            pRects[i].y = pBox[i].y1;
            pRects[i].width = pBox[i].x2 - pBox[i].x1;
            pRects[i].height = pBox[i].y2 - pBox[i].y1;
        }
        XSetClipRectangles(xnestDisplay, xnestGC(pGC), 0, 0,
                           pRects, nRects, Unsorted);
        free((char *) pRects);
        break;

    case CT_PIXMAP:
        XSetClipMask(xnestDisplay, xnestGC(pGC),
                     xnestPixmap((PixmapPtr) pValue));
        /*
         * Need to change into region, so subsequent uses are with
         * current pixmap contents.
         */
        pGC->clientClip = (*pGC->pScreen->BitmapToRegion) ((PixmapPtr) pValue);
        (*pGC->pScreen->DestroyPixmap) ((PixmapPtr) pValue);
        pValue = pGC->clientClip;
        break;

    case CT_UNSORTED:
        XSetClipRectangles(xnestDisplay, xnestGC(pGC),
                           pGC->clipOrg.x, pGC->clipOrg.y,
                           (XRectangle *) pValue, nRects, Unsorted);
        break;

    case CT_YSORTED:
        XSetClipRectangles(xnestDisplay, xnestGC(pGC),
                           pGC->clipOrg.x, pGC->clipOrg.y,
                           (XRectangle *) pValue, nRects, YSorted);
        break;

    case CT_YXSORTED:
        XSetClipRectangles(xnestDisplay, xnestGC(pGC),
                           pGC->clipOrg.x, pGC->clipOrg.y,
                           (XRectangle *) pValue, nRects, YXSorted);
        break;

    case CT_YXBANDED:
        XSetClipRectangles(xnestDisplay, xnestGC(pGC),
                           pGC->clipOrg.x, pGC->clipOrg.y,
                           (XRectangle *) pValue, nRects, YXBanded);
        break;
    }

    switch (type) {
    default:
        break;

    case CT_UNSORTED:
    case CT_YSORTED:
    case CT_YXSORTED:
    case CT_YXBANDED:
        /* server clip representation is a region */
        pGC->clientClip = RegionFromRects(nRects, (xRectangle *) pValue, type);
        free(pValue);
        pValue = pGC->clientClip;
        break;
    }

    pGC->clientClip = pValue;
}

void
xnestDestroyClip(GCPtr pGC)
{
    if (pGC->clientClip) {
        RegionDestroy(pGC->clientClip);
        XSetClipMask(xnestDisplay, xnestGC(pGC), None);
        pGC->clientClip = NULL;
    }
}

void
xnestCopyClip(GCPtr pGCDst, GCPtr pGCSrc)
{
    if (pGCSrc->clientClip) {
        RegionPtr pRgn = RegionCreate(NULL, 1);
        RegionCopy(pRgn, pGCSrc->clientClip);
        xnestChangeClip(pGCDst, CT_REGION, pRgn, 0);
    } else {
        xnestDestroyClip(pGCDst);
    }
}
@


1.8
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d193 1
a193 1
    int i, size;
d207 1
a207 2
        size = nRects * sizeof(*pRects);
        pRects = (XRectangle *) malloc(size);
@


1.7
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d197 1
a197 1
    xnestDestroyClipHelper(pGC);
d202 1
d228 1
a228 2
        pGC->clientClip =
            (void *) (*pGC->pScreen->BitmapToRegion) ((PixmapPtr) pValue);
a230 1
        type = CT_REGION;
d266 2
a267 8

        /*
         * other parts of server can only deal with CT_NONE,
         * CT_PIXMAP and CT_REGION client clips.
         */
        pGC->clientClip = (void *) RegionFromRects(nRects,
                                                    (xRectangle *) pValue,
                                                    type);
a269 2
        type = CT_REGION;

a272 1
    pGC->clientClipType = type;
d279 1
a279 17
    xnestDestroyClipHelper(pGC);

    XSetClipMask(xnestDisplay, xnestGC(pGC), None);

    pGC->clientClipType = CT_NONE;
    pGC->clientClip = NULL;
}

void
xnestDestroyClipHelper(GCPtr pGC)
{
    switch (pGC->clientClipType) {
    default:
    case CT_NONE:
        break;

    case CT_REGION:
d281 2
a282 1
        break;
d289 2
a290 10
    RegionPtr pRgn;

    switch (pGCSrc->clientClipType) {
    default:
    case CT_NONE:
        xnestDestroyClip(pGCDst);
        break;

    case CT_REGION:
        pRgn = RegionCreate(NULL, 1);
d293 2
a294 1
        break;
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d191 1
a191 1
xnestChangeClip(GCPtr pGC, int type, pointer pValue, int nRects)
d228 1
a228 1
            (pointer) (*pGC->pScreen->BitmapToRegion) ((PixmapPtr) pValue);
d272 1
a272 1
        pGC->clientClip = (pointer) RegionFromRects(nRects,
@


1.5
log
@Update to xserver 1.11.2
@
text
@d32 1
a32 1
#include "XNGC.h" 
d41 7
a47 7
  xnestValidateGC,
  xnestChangeGC,
  xnestCopyGC,
  xnestDestroyGC,
  xnestChangeClip,
  xnestDestroyClip,
  xnestCopyClip,
d51 20
a70 20
  xnestFillSpans,
  xnestSetSpans,
  xnestPutImage,
  xnestCopyArea, 
  xnestCopyPlane,
  xnestPolyPoint,
  xnestPolylines,
  xnestPolySegment,
  xnestPolyRectangle,
  xnestPolyArc,
  xnestFillPolygon,
  xnestPolyFillRect,
  xnestPolyFillArc,
  xnestPolyText8, 
  xnestPolyText16,
  xnestImageText8,
  xnestImageText16,
  xnestImageGlyphBlt,
  xnestPolyGlyphBlt,
  xnestPushPixels
d76 2
a77 9
  pGC->funcs = &xnestFuncs;
  pGC->ops = &xnestOps;
  
  pGC->miTranslate = 1;
   
  xnestGCPriv(pGC)->gc = XCreateGC(xnestDisplay, 
				   xnestDefaultDrawables[pGC->depth], 
				   0L, NULL);
  xnestGCPriv(pGC)->nClipRects = 0;
d79 7
a85 1
  return True;
d96 41
a136 74
  XGCValues values;
  
  if (mask & GCFunction)
    values.function = pGC->alu;
  
  if (mask & GCPlaneMask)
    values.plane_mask = pGC->planemask;
  
  if (mask & GCForeground)
    values.foreground = xnestPixel(pGC->fgPixel);
  
  if (mask & GCBackground)
    values.background = xnestPixel(pGC->bgPixel);

  if (mask & GCLineWidth)
    values.line_width = pGC->lineWidth;
    
  if (mask & GCLineStyle)
    values.line_style = pGC->lineStyle;

  if (mask & GCCapStyle)
    values.cap_style = pGC->capStyle;

  if (mask & GCJoinStyle)
    values.join_style = pGC->joinStyle;

  if (mask & GCFillStyle)
    values.fill_style = pGC->fillStyle;

  if (mask & GCFillRule)
    values.fill_rule = pGC->fillRule;
  
  if (mask & GCTile) {
    if (pGC->tileIsPixel)
      mask &= ~GCTile;
    else
      values.tile = xnestPixmap(pGC->tile.pixmap);
  }

  if (mask & GCStipple)
    values.stipple = xnestPixmap(pGC->stipple);

  if (mask & GCTileStipXOrigin)
    values.ts_x_origin = pGC->patOrg.x;

  if (mask & GCTileStipYOrigin)
    values.ts_y_origin = pGC->patOrg.y;

  if (mask & GCFont)
    values.font = xnestFont(pGC->font);

  if (mask & GCSubwindowMode)
    values.subwindow_mode = pGC->subWindowMode;

  if (mask & GCGraphicsExposures)
    values.graphics_exposures = pGC->graphicsExposures;

  if (mask & GCClipXOrigin)
    values.clip_x_origin = pGC->clipOrg.x;

  if (mask & GCClipYOrigin)
    values.clip_y_origin = pGC->clipOrg.y;

  if (mask & GCClipMask) /* this is handled in change clip */
    mask &= ~GCClipMask;

  if (mask & GCDashOffset)
    values.dash_offset = pGC->dashOffset;

  if (mask & GCDashList) {
    mask &= ~GCDashList;
    XSetDashes(xnestDisplay, xnestGC(pGC), 
	       pGC->dashOffset, (char *)pGC->dash, pGC->numInDashList);
  }
d138 2
a139 2
  if (mask & GCArcMode)
    values.arc_mode = pGC->arcMode;
d141 35
a175 2
  if (mask)
    XChangeGC(xnestDisplay, xnestGC(pGC), mask, &values);
d181 1
a181 1
  XCopyGC(xnestDisplay, xnestGC(pGCSrc), mask, xnestGC(pGCDst));
d187 1
a187 1
  XFreeGC(xnestDisplay, xnestGC(pGC));
d193 3
a195 3
  int i, size;
  BoxPtr pBox;
  XRectangle *pRects;
d197 1
a197 1
  xnestDestroyClipHelper(pGC);
d199 1
a199 2
  switch(type) 
    {
d201 3
a203 3
      XSetClipMask(xnestDisplay, xnestGC(pGC), None);
      break;
      
d205 14
a218 14
      nRects = RegionNumRects((RegionPtr)pValue);
      size = nRects * sizeof(*pRects);
      pRects = (XRectangle *) malloc(size);
      pBox = RegionRects((RegionPtr)pValue);
      for (i = nRects; i-- > 0; ) {
	pRects[i].x = pBox[i].x1;
	pRects[i].y = pBox[i].y1;
	pRects[i].width = pBox[i].x2 - pBox[i].x1;
	pRects[i].height = pBox[i].y2 - pBox[i].y1;
      }
      XSetClipRectangles(xnestDisplay, xnestGC(pGC), 0, 0,
			 pRects, nRects, Unsorted);
      free((char *) pRects);
      break;
d221 12
a232 11
      XSetClipMask(xnestDisplay, xnestGC(pGC), 
		   xnestPixmap((PixmapPtr)pValue));
      /*
       * Need to change into region, so subsequent uses are with
       * current pixmap contents.
       */
      pGC->clientClip = (pointer) (*pGC->pScreen->BitmapToRegion)((PixmapPtr)pValue);
      (*pGC->pScreen->DestroyPixmap)((PixmapPtr)pValue);
      pValue = pGC->clientClip;
      type = CT_REGION;
      break;
d235 4
a238 4
      XSetClipRectangles(xnestDisplay, xnestGC(pGC), 
			 pGC->clipOrg.x, pGC->clipOrg.y,
			 (XRectangle *)pValue, nRects, Unsorted);
      break;
d241 4
a244 4
      XSetClipRectangles(xnestDisplay, xnestGC(pGC), 
			 pGC->clipOrg.x, pGC->clipOrg.y,
			 (XRectangle *)pValue, nRects, YSorted);
      break;
d247 4
a250 4
      XSetClipRectangles(xnestDisplay, xnestGC(pGC), 
			 pGC->clipOrg.x, pGC->clipOrg.y,
			 (XRectangle *)pValue, nRects, YXSorted);
      break;
d253 4
a256 4
      XSetClipRectangles(xnestDisplay, xnestGC(pGC), 
			 pGC->clipOrg.x, pGC->clipOrg.y,
			 (XRectangle *)pValue, nRects, YXBanded);
      break;
d259 1
a259 2
  switch(type) 
    {
d261 1
a261 1
      break;
a266 10
      
      /*
       * other parts of server can only deal with CT_NONE,
       * CT_PIXMAP and CT_REGION client clips.
       */
      pGC->clientClip = (pointer) RegionFromRects(nRects,
						  (xRectangle *)pValue, type);
      free(pValue);
      pValue = pGC->clientClip;
      type = CT_REGION;
d268 12
a279 1
      break;
d282 2
a283 3
  pGC->clientClipType = type;
  pGC->clientClip = pValue;
  xnestGCPriv(pGC)->nClipRects = nRects;
d289 3
a291 1
  xnestDestroyClipHelper(pGC);
d293 2
a294 5
  XSetClipMask(xnestDisplay, xnestGC(pGC), None);
 
  pGC->clientClipType = CT_NONE;
  pGC->clientClip = NULL;
  xnestGCPriv(pGC)->nClipRects = 0;
d300 1
a300 2
  switch (pGC->clientClipType)
    {
d303 2
a304 2
      break;
      
d306 2
a307 2
      RegionDestroy(pGC->clientClip);
      break;
d314 1
a314 1
  RegionPtr pRgn;
d316 1
a316 2
  switch (pGCSrc->clientClipType)
    {
d319 2
a320 2
      xnestDestroyClip(pGCDst);
      break;
d323 4
a326 4
      pRgn = RegionCreate(NULL, 1);
      RegionCopy(pRgn, pGCSrc->clientClip);
      xnestChangeClip(pGCDst, CT_REGION, pRgn, 0);
      break;
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a75 3
  pGC->clientClipType = CT_NONE;
  pGC->clientClip = NULL;
  
a91 2
  pGC->lastWinOrg.x = pDrawable->x;
  pGC->lastWinOrg.y = pDrawable->y;
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d38 1
a38 2
static int xnestGCPrivateKeyIndex;
DevPrivateKey xnestGCPrivateKey = &xnestGCPrivateKeyIndex;
d212 1
a212 1
      nRects = REGION_NUM_RECTS((RegionPtr)pValue);
d214 2
a215 2
      pRects = (XRectangle *) xalloc(size);
      pBox = REGION_RECTS((RegionPtr)pValue);
d224 1
a224 1
      xfree((char *) pRects);
d279 1
a279 1
      pGC->clientClip = (pointer) RECTS_TO_REGION(pGC->pScreen, nRects,
d281 1
a281 1
      xfree(pValue);
d315 1
a315 1
      REGION_DESTROY(pGC->pScreen, pGC->clientClip); 
d333 2
a334 2
      pRgn = REGION_CREATE(pGCDst->pScreen, NULL, 1);
      REGION_COPY(pGCDst->pScreen, pRgn, pGCSrc->clientClip);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d38 2
a39 1
DevPrivateKey xnestGCPrivateKey = &xnestGCPrivateKey;
@


1.1
log
@Initial revision
@
text
@d38 1
a38 1
int xnestGCPrivateIndex;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
