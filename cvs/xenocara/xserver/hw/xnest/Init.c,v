head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.6
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	cVXoV5PxI8YrEaVA;

1.7
date	2013.06.07.17.28.53;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.10.13.21.28;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.53;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.35;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.30;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.45;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.45;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.03.26;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/*

Copyright 1993 by Davor Matic

Permission to use, copy, modify, distribute, and sell this software
and its documentation for any purpose is hereby granted without fee,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation.  Davor Matic makes no representations about
the suitability of this software for any purpose.  It is provided "as
is" without express or implied warranty.

*/

#ifdef HAVE_XNEST_CONFIG_H
#include <xnest-config.h>
#endif

#include <X11/X.h>
#include <X11/Xproto.h>
#include "screenint.h"
#include "input.h"
#include "misc.h"
#include "scrnintstr.h"
#include "windowstr.h"
#include "servermd.h"
#include "mi.h"
#include <X11/fonts/fontstruct.h>

#include "Xnest.h"

#include "Display.h"
#include "Screen.h"
#include "Pointer.h"
#include "Keyboard.h"
#include "Handlers.h"
#include "Init.h"
#include "Args.h"
#include "Drawable.h"
#include "XNGC.h"
#include "XNFont.h"
#ifdef DPMSExtension
#include "dpmsproc.h"
#endif

Bool xnestDoFullGeneration = True;

void
InitOutput(ScreenInfo * screen_info, int argc, char *argv[])
{
    int i, j;

    xnestOpenDisplay(argc, argv);

    screen_info->imageByteOrder = ImageByteOrder(xnestDisplay);
    screen_info->bitmapScanlineUnit = BitmapUnit(xnestDisplay);
    screen_info->bitmapScanlinePad = BitmapPad(xnestDisplay);
    screen_info->bitmapBitOrder = BitmapBitOrder(xnestDisplay);

    screen_info->numPixmapFormats = 0;
    for (i = 0; i < xnestNumPixmapFormats; i++)
        for (j = 0; j < xnestNumDepths; j++)
            if ((xnestPixmapFormats[i].depth == 1) ||
                (xnestPixmapFormats[i].depth == xnestDepths[j])) {
                screen_info->formats[screen_info->numPixmapFormats].depth =
                    xnestPixmapFormats[i].depth;
                screen_info->formats[screen_info->numPixmapFormats].bitsPerPixel =
                    xnestPixmapFormats[i].bits_per_pixel;
                screen_info->formats[screen_info->numPixmapFormats].scanlinePad =
                    xnestPixmapFormats[i].scanline_pad;
                screen_info->numPixmapFormats++;
                break;
            }

    xnestFontPrivateIndex = AllocateFontPrivateIndex();

    if (!xnestNumScreens)
        xnestNumScreens = 1;

    for (i = 0; i < xnestNumScreens; i++)
        AddScreen(xnestOpenScreen, argc, argv);

    xnestNumScreens = screen_info->numScreens;

    xnestDoFullGeneration = xnestFullGeneration;
}

void
InitInput(int argc, char *argv[])
{
    int rc;

    rc = AllocDevicePair(serverClient, "Xnest",
                         &xnestPointerDevice,
                         &xnestKeyboardDevice,
                         xnestPointerProc, xnestKeyboardProc, FALSE);

    if (rc != Success)
        FatalError("Failed to init Xnest default devices.\n");

    mieqInit();

    AddEnabledDevice(XConnectionNumber(xnestDisplay));

    RegisterBlockAndWakeupHandlers(xnestBlockHandler, xnestWakeupHandler, NULL);
}

void
CloseInput(void)
{
    mieqFini();
}

/*
 * DDX - specific abort routine.  Called by AbortServer().
 */
void
AbortDDX(enum ExitCode error)
{
    xnestDoFullGeneration = True;
    xnestCloseDisplay();
}

/* Called by GiveUp(). */
void
ddxGiveUp(enum ExitCode error)
{
    AbortDDX(error);
}

#ifdef __APPLE__
void
DarwinHandleGUI(int argc, char *argv[])
{
}
#endif

void
OsVendorInit(void)
{
    return;
}

void
OsVendorFatalError(const char *f, va_list args)
{
    return;
}

#if defined(DDXBEFORERESET)
void
ddxBeforeReset(void)
{
    return;
}
#endif
@


1.7
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d49 1
a49 1
InitOutput(ScreenInfo * screenInfo, int argc, char *argv[])
d55 4
a58 4
    screenInfo->imageByteOrder = ImageByteOrder(xnestDisplay);
    screenInfo->bitmapScanlineUnit = BitmapUnit(xnestDisplay);
    screenInfo->bitmapScanlinePad = BitmapPad(xnestDisplay);
    screenInfo->bitmapBitOrder = BitmapBitOrder(xnestDisplay);
d60 1
a60 1
    screenInfo->numPixmapFormats = 0;
d65 1
a65 1
                screenInfo->formats[screenInfo->numPixmapFormats].depth =
d67 1
a67 1
                screenInfo->formats[screenInfo->numPixmapFormats].bitsPerPixel =
d69 1
a69 1
                screenInfo->formats[screenInfo->numPixmapFormats].scanlinePad =
d71 1
a71 1
                screenInfo->numPixmapFormats++;
d83 1
a83 1
    xnestNumScreens = screenInfo->numScreens;
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d145 1
a145 1
OsVendorFatalError(void)
@


1.5
log
@Update to xserver 1.11.2
@
text
@d49 1
a49 1
InitOutput(ScreenInfo *screenInfo, int argc, char *argv[])
d51 1
a51 1
  int i, j;
d53 1
a53 25
  xnestOpenDisplay(argc, argv);
  
  screenInfo->imageByteOrder = ImageByteOrder(xnestDisplay);
  screenInfo->bitmapScanlineUnit = BitmapUnit(xnestDisplay);
  screenInfo->bitmapScanlinePad = BitmapPad(xnestDisplay);
  screenInfo->bitmapBitOrder = BitmapBitOrder(xnestDisplay);
  
  screenInfo->numPixmapFormats = 0;
  for (i = 0; i < xnestNumPixmapFormats; i++) 
    for (j = 0; j < xnestNumDepths; j++)
      if ((xnestPixmapFormats[i].depth == 1) ||
          (xnestPixmapFormats[i].depth == xnestDepths[j])) {
	screenInfo->formats[screenInfo->numPixmapFormats].depth = 
	  xnestPixmapFormats[i].depth;
	screenInfo->formats[screenInfo->numPixmapFormats].bitsPerPixel = 
	  xnestPixmapFormats[i].bits_per_pixel;
	screenInfo->formats[screenInfo->numPixmapFormats].scanlinePad = 
	  xnestPixmapFormats[i].scanline_pad;
	screenInfo->numPixmapFormats++;
	break;
      }
  
  xnestFontPrivateIndex = AllocateFontPrivateIndex();
  
  if (!xnestNumScreens) xnestNumScreens = 1;
d55 24
a78 2
  for (i = 0; i < xnestNumScreens; i++)
    AddScreen(xnestOpenScreen, argc, argv);
d80 2
a81 1
  xnestNumScreens = screenInfo->numScreens;
d83 3
a85 1
  xnestDoFullGeneration = xnestFullGeneration;
d91 6
a96 7
  int rc;
  rc = AllocDevicePair(serverClient, "Xnest",
                       &xnestPointerDevice,
                       &xnestKeyboardDevice,
                       xnestPointerProc,
                       xnestKeyboardProc,
                       FALSE);
d98 2
a99 2
  if (rc != Success)
      FatalError("Failed to init Xnest default devices.\n");
d101 1
a101 1
  mieqInit();
d103 1
a103 1
  AddEnabledDevice(XConnectionNumber(xnestDisplay));
d105 1
a105 1
  RegisterBlockAndWakeupHandlers(xnestBlockHandler, xnestWakeupHandler, NULL);
d111 1
a111 1
  mieqFini();
d117 2
a118 1
void AbortDDX(enum ExitCode error)
d120 2
a121 2
  xnestDoFullGeneration = True;
  xnestCloseDisplay();
d125 2
a126 1
void ddxGiveUp(enum ExitCode error)
d128 1
a128 1
  AbortDDX(error);
d138 2
a139 1
void OsVendorInit(void)
d144 2
a145 1
void OsVendorFatalError(void)
d151 2
a152 1
void ddxBeforeReset(void)
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a47 2
EventList *xnestEvents = NULL;

a100 2
  GetEventList(&xnestEvents);

d111 1
d117 1
a117 1
void AbortDDX(void)
d124 1
a124 1
void ddxGiveUp(void)
d126 1
a126 1
  AbortDDX();
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d92 10
a101 2
  xnestPointerDevice = AddInputDevice(serverClient, xnestPointerProc, TRUE);
  xnestKeyboardDevice = AddInputDevice(serverClient, xnestKeyboardProc, TRUE);
a104 3
  RegisterPointerDevice(xnestPointerDevice);
  RegisterKeyboardDevice(xnestKeyboardDevice);

d112 5
d120 1
a120 1
void AbortDDX()
d127 1
a127 1
void ddxGiveUp()
d139 1
a139 1
void OsVendorInit()
d144 1
a144 1
void OsVendorFatalError()
d149 1
d154 1
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d48 1
a48 1
xEvent *xnestEvents = NULL;
d92 2
a93 2
  xnestPointerDevice = AddInputDevice(xnestPointerProc, TRUE);
  xnestKeyboardDevice = AddInputDevice(xnestKeyboardProc, TRUE);
d95 1
a95 4
  if (!xnestEvents)
      xnestEvents = (xEvent *) xcalloc(sizeof(xEvent), GetMaximumEventsNum());
  if (!xnestEvents)
      FatalError("couldn't allocate room for events\n");
a142 5

/* this is just to get the server to link on AIX */
#ifdef AIXV3
int SelectWaitTime = 10000; /* usec */
#endif
@


1.1
log
@Initial revision
@
text
@d48 2
a76 2
  xnestWindowPrivateIndex = AllocateWindowPrivateIndex();
  xnestGCPrivateIndex = AllocateGCPrivateIndex();
d95 5
d103 1
a103 1
  mieqInit((DevicePtr)xnestKeyboardDevice, (DevicePtr)xnestPointerDevice);
d125 1
a125 1
#ifdef __DARWIN__
a128 16
}

void GlxExtensionInit();
void GlxWrapInitVisuals(void *procPtr);

void
DarwinGlxExtensionInit()
{
    GlxExtensionInit();
}

void
DarwinGlxWrapInitVisuals(
    void *procPtr)
{
    GlxWrapInitVisuals(procPtr);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@a47 2
xEvent *xnestEvents = NULL;

a94 5
  if (!xnestEvents)
      xnestEvents = (xEvent *) xcalloc(sizeof(xEvent), GetMaximumEventsNum());
  if (!xnestEvents)
      FatalError("couldn't allocate room for events\n");

d98 1
a98 1
  mieqInit();
@

