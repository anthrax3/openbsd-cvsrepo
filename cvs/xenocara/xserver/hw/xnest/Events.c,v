head	1.9;
access;
symbols
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.8.0.6
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.10
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.8
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.6
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.05.29.12.02.38;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	s0SI41sEunLdyFfd;

1.8
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	cVXoV5PxI8YrEaVA;

1.7
date	2012.06.10.13.21.28;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.53;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.35;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.30;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.45;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.45;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.03.25;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*

Copyright 1993 by Davor Matic

Permission to use, copy, modify, distribute, and sell this software
and its documentation for any purpose is hereby granted without fee,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation.  Davor Matic makes no representations about
the suitability of this software for any purpose.  It is provided "as
is" without express or implied warranty.

*/

#ifdef HAVE_XNEST_CONFIG_H
#include <xnest-config.h>
#endif

#include <X11/X.h>
#include <X11/Xproto.h>
#include "screenint.h"
#include "input.h"
#include "misc.h"
#include "scrnintstr.h"
#include "windowstr.h"
#include "servermd.h"
#include "inputstr.h"
#include "inpututils.h"

#include "mi.h"

#include "Xnest.h"

#include "Args.h"
#include "Color.h"
#include "Display.h"
#include "Screen.h"
#include "XNWindow.h"
#include "Events.h"
#include "Keyboard.h"
#include "Pointer.h"
#include "mipointer.h"

CARD32 lastEventTime = 0;

void
ProcessInputEvents(void)
{
    mieqProcessInputEvents();
}

int
TimeSinceLastInputEvent(void)
{
    if (lastEventTime == 0)
        lastEventTime = GetTimeInMillis();
    return GetTimeInMillis() - lastEventTime;
}

void
SetTimeSinceLastInputEvent(void)
{
    lastEventTime = GetTimeInMillis();
}

static Bool
xnestExposurePredicate(Display * dpy, XEvent * event, char *args)
{
    return event->type == Expose || event->type == ProcessedExpose;
}

static Bool
xnestNotExposurePredicate(Display * dpy, XEvent * event, char *args)
{
    return !xnestExposurePredicate(dpy, event, args);
}

void
xnestCollectExposures(void)
{
    XEvent X;
    WindowPtr pWin;
    RegionRec Rgn;
    BoxRec Box;

    while (XCheckIfEvent(xnestDisplay, &X, xnestExposurePredicate, NULL)) {
        pWin = xnestWindowPtr(X.xexpose.window);

        if (pWin && X.xexpose.width && X.xexpose.height) {
            Box.x1 = pWin->drawable.x + wBorderWidth(pWin) + X.xexpose.x;
            Box.y1 = pWin->drawable.y + wBorderWidth(pWin) + X.xexpose.y;
            Box.x2 = Box.x1 + X.xexpose.width;
            Box.y2 = Box.y1 + X.xexpose.height;

            RegionInit(&Rgn, &Box, 1);

            miSendExposures(pWin, &Rgn, Box.x2, Box.y2);
        }
    }
}

void
xnestQueueKeyEvent(int type, unsigned int keycode)
{
    lastEventTime = GetTimeInMillis();
    QueueKeyboardEvents(xnestKeyboardDevice, type, keycode);
}

void
xnestCollectEvents(void)
{
    XEvent X;
    int valuators[2];
    ValuatorMask mask;
    ScreenPtr pScreen;

    while (XCheckIfEvent(xnestDisplay, &X, xnestNotExposurePredicate, NULL)) {
        switch (X.type) {
        case KeyPress:
            xnestUpdateModifierState(X.xkey.state);
            xnestQueueKeyEvent(KeyPress, X.xkey.keycode);
            break;

        case KeyRelease:
            xnestUpdateModifierState(X.xkey.state);
            xnestQueueKeyEvent(KeyRelease, X.xkey.keycode);
            break;

        case ButtonPress:
            valuator_mask_set_range(&mask, 0, 0, NULL);
            xnestUpdateModifierState(X.xkey.state);
            lastEventTime = GetTimeInMillis();
            QueuePointerEvents(xnestPointerDevice, ButtonPress,
                               X.xbutton.button, POINTER_RELATIVE, &mask);
            break;

        case ButtonRelease:
            valuator_mask_set_range(&mask, 0, 0, NULL);
            xnestUpdateModifierState(X.xkey.state);
            lastEventTime = GetTimeInMillis();
            QueuePointerEvents(xnestPointerDevice, ButtonRelease,
                               X.xbutton.button, POINTER_RELATIVE, &mask);
            break;

        case MotionNotify:
            valuators[0] = X.xmotion.x;
            valuators[1] = X.xmotion.y;
            valuator_mask_set_range(&mask, 0, 2, valuators);
            lastEventTime = GetTimeInMillis();
            QueuePointerEvents(xnestPointerDevice, MotionNotify,
                               0, POINTER_ABSOLUTE, &mask);
            break;

        case FocusIn:
            if (X.xfocus.detail != NotifyInferior) {
                pScreen = xnestScreen(X.xfocus.window);
                if (pScreen)
                    xnestDirectInstallColormaps(pScreen);
            }
            break;

        case FocusOut:
            if (X.xfocus.detail != NotifyInferior) {
                pScreen = xnestScreen(X.xfocus.window);
                if (pScreen)
                    xnestDirectUninstallColormaps(pScreen);
            }
            break;

        case KeymapNotify:
            break;

        case EnterNotify:
            if (X.xcrossing.detail != NotifyInferior) {
                pScreen = xnestScreen(X.xcrossing.window);
                if (pScreen) {
                    NewCurrentScreen(inputInfo.pointer, pScreen, X.xcrossing.x,
                                     X.xcrossing.y);
                    valuators[0] = X.xcrossing.x;
                    valuators[1] = X.xcrossing.y;
                    valuator_mask_set_range(&mask, 0, 2, valuators);
                    lastEventTime = GetTimeInMillis();
                    QueuePointerEvents(xnestPointerDevice, MotionNotify,
                                       0, POINTER_ABSOLUTE, &mask);
                    xnestDirectInstallColormaps(pScreen);
                }
            }
            break;

        case LeaveNotify:
            if (X.xcrossing.detail != NotifyInferior) {
                pScreen = xnestScreen(X.xcrossing.window);
                if (pScreen) {
                    xnestDirectUninstallColormaps(pScreen);
                }
            }
            break;

        case DestroyNotify:
            if (xnestParentWindow != (Window) 0 &&
                X.xdestroywindow.window == xnestParentWindow)
                exit(0);
            break;

        case CirculateNotify:
        case ConfigureNotify:
        case GravityNotify:
        case MapNotify:
        case ReparentNotify:
        case UnmapNotify:
            break;

        default:
            ErrorF("xnest warning: unhandled event\n");
            break;
        }
    }
}
@


1.8
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d106 1
a106 1
    QueueKeyboardEvents(xnestKeyboardDevice, type, keycode, NULL);
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d67 1
a67 1
xnestExposurePredicate(Display * display, XEvent * event, char *args)
d73 1
a73 1
xnestNotExposurePredicate(Display * display, XEvent * event, char *args)
d75 1
a75 1
    return !xnestExposurePredicate(display, event, args);
@


1.6
log
@Update to xserver 1.11.2
@
text
@d49 1
a49 1
  mieqProcessInputEvents();
d63 1
a63 1
  lastEventTime = GetTimeInMillis();
d67 1
a67 1
xnestExposurePredicate(Display *display, XEvent *event, char *args)
d69 1
a69 1
  return event->type == Expose || event->type == ProcessedExpose;
d73 1
a73 1
xnestNotExposurePredicate(Display *display, XEvent *event, char *args)
d75 1
a75 1
  return !xnestExposurePredicate(display, event, args);
d81 18
a98 17
  XEvent X;
  WindowPtr pWin;
  RegionRec Rgn;
  BoxRec Box;
  
  while (XCheckIfEvent(xnestDisplay, &X, xnestExposurePredicate, NULL)) {
    pWin = xnestWindowPtr(X.xexpose.window);
    
    if (pWin && X.xexpose.width && X.xexpose.height) {
      Box.x1 = pWin->drawable.x + wBorderWidth(pWin) + X.xexpose.x;
      Box.y1 = pWin->drawable.y + wBorderWidth(pWin) + X.xexpose.y;
      Box.x2 = Box.x1 + X.xexpose.width;
      Box.y2 = Box.y1 + X.xexpose.height;
      
      RegionInit(&Rgn, &Box, 1);
      
      miSendExposures(pWin, &Rgn, Box.x2, Box.y2);
a99 1
  }
d105 2
a106 2
  lastEventTime = GetTimeInMillis();
  QueueKeyboardEvents(xnestKeyboardDevice, type, keycode, NULL);
d112 105
a216 103
  XEvent X;
  int valuators[2];
  ValuatorMask mask;
  ScreenPtr pScreen;

  while (XCheckIfEvent(xnestDisplay, &X, xnestNotExposurePredicate, NULL)) {
    switch (X.type) {
    case KeyPress:
      xnestUpdateModifierState(X.xkey.state);
      xnestQueueKeyEvent(KeyPress, X.xkey.keycode);
      break;
      
    case KeyRelease:
      xnestUpdateModifierState(X.xkey.state);
      xnestQueueKeyEvent(KeyRelease, X.xkey.keycode);
      break;
      
    case ButtonPress:
      valuator_mask_set_range(&mask, 0, 0, NULL);
      xnestUpdateModifierState(X.xkey.state);
      lastEventTime = GetTimeInMillis();
      QueuePointerEvents(xnestPointerDevice, ButtonPress,
                         X.xbutton.button, POINTER_RELATIVE, &mask);
      break;
      
    case ButtonRelease:
      valuator_mask_set_range(&mask, 0, 0, NULL);
      xnestUpdateModifierState(X.xkey.state);
      lastEventTime = GetTimeInMillis();
      QueuePointerEvents(xnestPointerDevice, ButtonRelease,
                         X.xbutton.button, POINTER_RELATIVE, &mask);
      break;
      
    case MotionNotify:
      valuators[0] = X.xmotion.x;
      valuators[1] = X.xmotion.y;
      valuator_mask_set_range(&mask, 0, 2, valuators);
      lastEventTime = GetTimeInMillis();
      QueuePointerEvents(xnestPointerDevice, MotionNotify,
                         0, POINTER_ABSOLUTE, &mask);
      break;
      
    case FocusIn:
      if (X.xfocus.detail != NotifyInferior) {
	pScreen = xnestScreen(X.xfocus.window);
	if (pScreen)
	  xnestDirectInstallColormaps(pScreen);
      }
      break;
   
    case FocusOut:
      if (X.xfocus.detail != NotifyInferior) {
	pScreen = xnestScreen(X.xfocus.window);
	if (pScreen)
	  xnestDirectUninstallColormaps(pScreen);
      }
      break;

    case KeymapNotify:
      break;

    case EnterNotify:
      if (X.xcrossing.detail != NotifyInferior) {
	pScreen = xnestScreen(X.xcrossing.window);
	if (pScreen) {
	  NewCurrentScreen(inputInfo.pointer, pScreen, X.xcrossing.x, X.xcrossing.y);
          valuators[0] = X.xcrossing.x;
          valuators[1] = X.xcrossing.y;
          valuator_mask_set_range(&mask, 0, 2, valuators);
          lastEventTime = GetTimeInMillis();
          QueuePointerEvents(xnestPointerDevice, MotionNotify,
                             0, POINTER_ABSOLUTE, &mask);
	  xnestDirectInstallColormaps(pScreen);
	}
      }
      break;
      
    case LeaveNotify:
      if (X.xcrossing.detail != NotifyInferior) {
	pScreen = xnestScreen(X.xcrossing.window);
	if (pScreen) {
	  xnestDirectUninstallColormaps(pScreen);
	}	
      }
      break;
      
    case DestroyNotify:
      if (xnestParentWindow != (Window) 0 &&
	  X.xdestroywindow.window == xnestParentWindow)
	exit (0);
      break;

    case CirculateNotify:
    case ConfigureNotify:
    case GravityNotify:
    case MapNotify:
    case ReparentNotify:
    case UnmapNotify:
      break;
      
    default:
      ErrorF("xnest warning: unhandled event\n");
      break;
a217 1
  }
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d28 1
a45 2
extern EventList *xnestEvents;

a104 3
  int i, n;

  GetEventList(&xnestEvents);
d106 1
a106 3
  n = GetKeyboardEvents(xnestEvents, xnestKeyboardDevice, type, keycode);
  for (i = 0; i < n; i++)
    mieqEnqueue(xnestKeyboardDevice, (InternalEvent*)(xnestEvents + i)->event);
d113 2
a114 1
  int i, n, valuators[2];
a115 1
  GetEventList(&xnestEvents);
d130 1
d133 2
a134 4
      n = GetPointerEvents(xnestEvents, xnestPointerDevice, ButtonPress,
                           X.xbutton.button, POINTER_RELATIVE, 0, 0, NULL);
      for (i = 0; i < n; i++)
        mieqEnqueue(xnestPointerDevice, (InternalEvent*)(xnestEvents + i)->event);
d138 1
d141 2
a142 4
      n = GetPointerEvents(xnestEvents, xnestPointerDevice, ButtonRelease,
                           X.xbutton.button, POINTER_RELATIVE, 0, 0, NULL);
      for (i = 0; i < n; i++)
        mieqEnqueue(xnestPointerDevice, (InternalEvent*)(xnestEvents + i)->event);
d148 1
d150 2
a151 4
      n = GetPointerEvents(xnestEvents, xnestPointerDevice, MotionNotify,
                           0, POINTER_ABSOLUTE, 0, 2, valuators);
      for (i = 0; i < n; i++)
        mieqEnqueue(xnestPointerDevice, (InternalEvent*)(xnestEvents + i)->event);
d180 1
d182 2
a183 4
          n = GetPointerEvents(xnestEvents, xnestPointerDevice, MotionNotify,
                               0, POINTER_ABSOLUTE, 0, 2, valuators);
          for (i = 0; i < n; i++)
            mieqEnqueue(xnestPointerDevice, (InternalEvent*)(xnestEvents + i)->event);
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d70 1
a70 1
  return (event->type == Expose || event->type == ProcessedExpose);
d96 1
a96 1
      REGION_INIT(pWin->drawable.pScreen, &Rgn, &Box, 1);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a19 1
#define NEED_EVENTS
d48 1
a48 1
ProcessInputEvents()
d112 1
a112 1
    mieqEnqueue(xnestKeyboardDevice, (xnestEvents + i)->event);
d141 1
a141 1
        mieqEnqueue(xnestPointerDevice, (xnestEvents + i)->event);
d150 1
a150 1
        mieqEnqueue(xnestPointerDevice, (xnestEvents + i)->event);
d160 1
a160 1
        mieqEnqueue(xnestPointerDevice, (xnestEvents + i)->event);
d193 1
a193 1
            mieqEnqueue(xnestPointerDevice, (xnestEvents + i)->event);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d28 1
d46 1
a46 1
extern xEvent *xnestEvents;
a51 1
  miPointerUpdate();
d109 1
d113 1
a113 1
    mieqEnqueue(xnestKeyboardDevice, xnestEvents + i);
a119 1
  xEvent x;
d122 1
d142 1
a142 1
        mieqEnqueue(xnestPointerDevice, xnestEvents + i);
d151 1
a151 1
        mieqEnqueue(xnestPointerDevice, xnestEvents + i);
d161 1
a161 1
        mieqEnqueue(xnestPointerDevice, xnestEvents + i);
d187 1
a187 1
	  NewCurrentScreen(pScreen, X.xcrossing.x, X.xcrossing.y);
d194 1
a194 1
            mieqEnqueue(xnestPointerDevice, xnestEvents + i);
@


1.1
log
@Initial revision
@
text
@d40 1
d45 2
d55 1
a55 1
TimeSinceLastInputEvent()
d63 1
a63 1
SetTimeSinceLastInputEvent()
d81 1
a81 1
xnestCollectExposures()
d91 1
a91 1
    if (pWin) {
d99 1
a99 1
      miWindowExposures(pWin, &Rgn, NullRegion); 
d107 6
a112 5
  xEvent x;
  x.u.u.type = type;
  x.u.u.detail = keycode;
  x.u.keyButtonPointer.time = lastEventTime = GetTimeInMillis();
  mieqEnqueue(&x);
d116 1
a116 1
xnestCollectEvents()
d120 1
d137 5
a141 4
      x.u.u.type = ButtonPress;
      x.u.u.detail = X.xbutton.button;
      x.u.keyButtonPointer.time = lastEventTime = GetTimeInMillis();
      mieqEnqueue(&x);
d146 5
a150 4
      x.u.u.type = ButtonRelease;
      x.u.u.detail = X.xbutton.button;
      x.u.keyButtonPointer.time = lastEventTime = GetTimeInMillis();
      mieqEnqueue(&x);
d154 7
a160 9
#if 0
      x.u.u.type = MotionNotify;
      x.u.keyButtonPointer.rootX = X.xmotion.x;
      x.u.keyButtonPointer.rootY = X.xmotion.y;
      x.u.keyButtonPointer.time = lastEventTime = GetTimeInMillis();
      mieqEnqueue(&x);
#endif 
      miPointerAbsoluteCursor (X.xmotion.x, X.xmotion.y, 
			       lastEventTime = GetTimeInMillis());
d187 7
a193 9
#if 0
	  x.u.u.type = MotionNotify;
	  x.u.keyButtonPointer.rootX = X.xcrossing.x;
	  x.u.keyButtonPointer.rootY = X.xcrossing.y;
	  x.u.keyButtonPointer.time = lastEventTime = GetTimeInMillis();
	  mieqEnqueue(&x);
#endif
	  miPointerAbsoluteCursor (X.xcrossing.x, X.xcrossing.y, 
				   lastEventTime = GetTimeInMillis());
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@a39 1
#include "Pointer.h"
a43 2
extern xEvent *xnestEvents;

d52 1
a52 1
TimeSinceLastInputEvent(void)
d60 1
a60 1
SetTimeSinceLastInputEvent(void)
d78 1
a78 1
xnestCollectExposures(void)
d104 5
a108 6
  int i, n;

  lastEventTime = GetTimeInMillis();
  n = GetKeyboardEvents(xnestEvents, xnestKeyboardDevice, type, keycode);
  for (i = 0; i < n; i++)
    mieqEnqueue(xnestKeyboardDevice, xnestEvents + i);
d112 1
a112 1
xnestCollectEvents(void)
a115 1
  int i, n, valuators[2];
d132 4
a135 5
      lastEventTime = GetTimeInMillis();
      n = GetPointerEvents(xnestEvents, xnestPointerDevice, ButtonPress,
                           X.xbutton.button, POINTER_RELATIVE, 0, 0, NULL);
      for (i = 0; i < n; i++)
        mieqEnqueue(xnestPointerDevice, xnestEvents + i);
d140 4
a143 5
      lastEventTime = GetTimeInMillis();
      n = GetPointerEvents(xnestEvents, xnestPointerDevice, ButtonRelease,
                           X.xbutton.button, POINTER_RELATIVE, 0, 0, NULL);
      for (i = 0; i < n; i++)
        mieqEnqueue(xnestPointerDevice, xnestEvents + i);
d147 9
a155 7
      valuators[0] = X.xmotion.x;
      valuators[1] = X.xmotion.y;
      lastEventTime = GetTimeInMillis();
      n = GetPointerEvents(xnestEvents, xnestPointerDevice, MotionNotify,
                           0, POINTER_ABSOLUTE, 0, 2, valuators);
      for (i = 0; i < n; i++)
        mieqEnqueue(xnestPointerDevice, xnestEvents + i);
d182 9
a190 7
          valuators[0] = X.xcrossing.x;
          valuators[1] = X.xcrossing.y;
          lastEventTime = GetTimeInMillis();
          n = GetPointerEvents(xnestEvents, xnestPointerDevice, MotionNotify,
                               0, POINTER_ABSOLUTE, 0, 2, valuators);
          for (i = 0; i < n; i++)
            mieqEnqueue(xnestPointerDevice, xnestEvents + i);
@

