head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.12
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.10
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.6
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	cVXoV5PxI8YrEaVA;

1.7
date	2014.05.02.19.27.49;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.10.13.21.28;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.53;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.30;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.44;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.44;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.03.26;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/*

Copyright 1993 by Davor Matic

Permission to use, copy, modify, distribute, and sell this software
and its documentation for any purpose is hereby granted without fee,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation.  Davor Matic makes no representations about
the suitability of this software for any purpose.  It is provided "as
is" without express or implied warranty.

*/

#ifdef HAVE_XNEST_CONFIG_H
#include <xnest-config.h>
#endif

#include <X11/X.h>
#include <X11/Xproto.h>
#include "regionstr.h"
#include "pixmapstr.h"
#include "scrnintstr.h"
#include "gc.h"
#include "servermd.h"
#include "privates.h"
#include "mi.h"

#include "Xnest.h"

#include "Display.h"
#include "Screen.h"
#include "XNPixmap.h"

DevPrivateKeyRec xnestPixmapPrivateKeyRec;

PixmapPtr
xnestCreatePixmap(ScreenPtr pScreen, int width, int height, int depth,
                  unsigned usage_hint)
{
    PixmapPtr pPixmap;

    pPixmap = AllocatePixmap(pScreen, 0);
    if (!pPixmap)
        return NullPixmap;
    pPixmap->drawable.type = DRAWABLE_PIXMAP;
    pPixmap->drawable.class = 0;
    pPixmap->drawable.depth = depth;
    pPixmap->drawable.bitsPerPixel = depth;
    pPixmap->drawable.id = 0;
    pPixmap->drawable.x = 0;
    pPixmap->drawable.y = 0;
    pPixmap->drawable.width = width;
    pPixmap->drawable.height = height;
    pPixmap->drawable.pScreen = pScreen;
    pPixmap->drawable.serialNumber = NEXT_SERIAL_NUMBER;
    pPixmap->refcnt = 1;
    pPixmap->devKind = PixmapBytePad(width, depth);
    pPixmap->usage_hint = usage_hint;
    if (width && height)
        xnestPixmapPriv(pPixmap)->pixmap =
            XCreatePixmap(xnestDisplay,
                          xnestDefaultWindows[pScreen->myNum],
                          width, height, depth);
    else
        xnestPixmapPriv(pPixmap)->pixmap = 0;

    return pPixmap;
}

Bool
xnestDestroyPixmap(PixmapPtr pPixmap)
{
    if (--pPixmap->refcnt)
        return TRUE;
    XFreePixmap(xnestDisplay, xnestPixmap(pPixmap));
    FreePixmap(pPixmap);
    return TRUE;
}

Bool
xnestModifyPixmapHeader(PixmapPtr pPixmap, int width, int height, int depth,
                        int bitsPerPixel, int devKind, void *pPixData)
{
  if(!xnestPixmapPriv(pPixmap)->pixmap && width > 0 && height > 0) {
    xnestPixmapPriv(pPixmap)->pixmap =
        XCreatePixmap(xnestDisplay,
                      xnestDefaultWindows[pPixmap->drawable.pScreen->myNum],
                      width, height, depth);
  }

  return miModifyPixmapHeader(pPixmap, width, height, depth,
                              bitsPerPixel, devKind, pPixData);
}

RegionPtr
xnestPixmapToRegion(PixmapPtr pPixmap)
{
    XImage *ximage;
    register RegionPtr pReg, pTmpReg;
    register int x, y;
    unsigned long previousPixel, currentPixel;
    BoxRec Box = { 0, 0, 0, 0 };
    Bool overlap;

    ximage = XGetImage(xnestDisplay, xnestPixmap(pPixmap), 0, 0,
                       pPixmap->drawable.width, pPixmap->drawable.height,
                       1, XYPixmap);

    pReg = RegionCreate(NULL, 1);
    pTmpReg = RegionCreate(NULL, 1);
    if (!pReg || !pTmpReg) {
        XDestroyImage(ximage);
        return NullRegion;
    }

    for (y = 0; y < pPixmap->drawable.height; y++) {
        Box.y1 = y;
        Box.y2 = y + 1;
        previousPixel = 0L;
        for (x = 0; x < pPixmap->drawable.width; x++) {
            currentPixel = XGetPixel(ximage, x, y);
            if (previousPixel != currentPixel) {
                if (previousPixel == 0L) {
                    /* left edge */
                    Box.x1 = x;
                }
                else if (currentPixel == 0L) {
                    /* right edge */
                    Box.x2 = x;
                    RegionReset(pTmpReg, &Box);
                    RegionAppend(pReg, pTmpReg);
                }
                previousPixel = currentPixel;
            }
        }
        if (previousPixel != 0L) {
            /* right edge because of the end of pixmap */
            Box.x2 = pPixmap->drawable.width;
            RegionReset(pTmpReg, &Box);
            RegionAppend(pReg, pTmpReg);
        }
    }

    RegionDestroy(pTmpReg);
    XDestroyImage(ximage);

    RegionValidate(pReg, &overlap);

    return pReg;
}
@


1.7
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d83 1
a83 1
                        int bitsPerPixel, int devKind, pointer pPixData)
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d81 15
@


1.5
log
@Update to xserver 1.11.2
@
text
@d39 1
a39 1
		  unsigned usage_hint)
d41 1
a41 1
  PixmapPtr pPixmap;
d43 26
a68 26
  pPixmap = AllocatePixmap(pScreen, 0);
  if (!pPixmap)
    return NullPixmap;
  pPixmap->drawable.type = DRAWABLE_PIXMAP;
  pPixmap->drawable.class = 0;
  pPixmap->drawable.depth = depth;
  pPixmap->drawable.bitsPerPixel = depth;
  pPixmap->drawable.id = 0;
  pPixmap->drawable.x = 0;
  pPixmap->drawable.y = 0;
  pPixmap->drawable.width = width;
  pPixmap->drawable.height = height;
  pPixmap->drawable.pScreen = pScreen;
  pPixmap->drawable.serialNumber = NEXT_SERIAL_NUMBER;
  pPixmap->refcnt = 1;
  pPixmap->devKind = PixmapBytePad(width, depth);
  pPixmap->usage_hint = usage_hint;
  if (width && height)
      xnestPixmapPriv(pPixmap)->pixmap = 
	  XCreatePixmap(xnestDisplay, 
			xnestDefaultWindows[pScreen->myNum],
			width, height, depth);
  else
      xnestPixmapPriv(pPixmap)->pixmap = 0;
  
  return pPixmap;
d74 4
a77 1
  if(--pPixmap->refcnt)
a78 3
  XFreePixmap(xnestDisplay, xnestPixmap(pPixmap));
  FreePixmap(pPixmap);
  return TRUE;
d84 16
a99 37
  XImage *ximage;
  register RegionPtr pReg, pTmpReg;
  register int x, y;
  unsigned long previousPixel, currentPixel;
  BoxRec Box = { 0, 0, 0, 0 };
  Bool overlap;
  
  ximage = XGetImage(xnestDisplay, xnestPixmap(pPixmap), 0, 0,
		     pPixmap->drawable.width, pPixmap->drawable.height,
		     1, XYPixmap);
  
  pReg = RegionCreate(NULL, 1);
  pTmpReg = RegionCreate(NULL, 1);
  if(!pReg || !pTmpReg) {
      XDestroyImage(ximage);
      return NullRegion;
  }
  
  for (y = 0; y < pPixmap->drawable.height; y++) {
    Box.y1 = y;
    Box.y2 = y + 1;
    previousPixel = 0L;
    for (x = 0; x < pPixmap->drawable.width; x++) {
      currentPixel = XGetPixel(ximage, x, y);
      if (previousPixel != currentPixel) {
	if (previousPixel == 0L) { 
	  /* left edge */
	  Box.x1 = x;
	}
	else if (currentPixel == 0L) {
	  /* right edge */
	  Box.x2 = x;
	  RegionReset(pTmpReg, &Box);
	  RegionAppend(pReg, pTmpReg);
	}
	previousPixel = currentPixel;
      }
d101 27
a127 5
    if (previousPixel != 0L) {
      /* right edge because of the end of pixmap */
      Box.x2 = pPixmap->drawable.width;
      RegionReset(pTmpReg, &Box);
      RegionAppend(pReg, pTmpReg);
a128 4
  }
  
  RegionDestroy(pTmpReg);
  XDestroyImage(ximage);
d130 4
a133 1
  RegionValidate(pReg, &overlap);
d135 1
a135 1
  return pReg;
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a23 1
#include "regionstr.h"
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d36 1
a36 2
static int xnestPixmapPrivateKeyIndex;
DevPrivateKey xnestPixmapPrivateKey = &xnestPixmapPrivateKeyIndex;
d44 1
a44 1
  pPixmap = AllocatePixmap(pScreen, sizeof(xnestPrivPixmap));
a60 2
  dixSetPrivate(&pPixmap->devPrivates, xnestPixmapPrivateKey,
		(char *)pPixmap + pScreen->totalPixmapSize);
d78 1
a78 2
  dixFreePrivates(pPixmap->devPrivates);
  xfree(pPixmap);
d96 2
a97 2
  pReg = REGION_CREATE(pPixmap->drawable.pScreen, NULL, 1);
  pTmpReg = REGION_CREATE(pPixmap->drawable.pScreen, NULL, 1);
d117 2
a118 2
	  REGION_RESET(pPixmap->drawable.pScreen, pTmpReg, &Box);
	  REGION_APPEND(pPixmap->drawable.pScreen, pReg, pTmpReg);
d126 2
a127 2
      REGION_RESET(pPixmap->drawable.pScreen, pTmpReg, &Box);
      REGION_APPEND(pPixmap->drawable.pScreen, pReg, pTmpReg);
d131 1
a131 1
  REGION_DESTROY(pPixmap->drawable.pScreen, pTmpReg);
d134 1
a134 1
  REGION_VALIDATE(pPixmap->drawable.pScreen, pReg, &overlap);
d136 1
a136 1
  return(pReg);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d36 2
a37 1
DevPrivateKey xnestPixmapPrivateKey = &xnestPixmapPrivateKey;
d93 1
a93 1
  BoxRec Box;
@


1.1
log
@Initial revision
@
text
@d27 1
d36 1
a36 3
#ifdef PIXPRIV
int xnestPixmapPrivateIndex;	    
#endif
d39 2
a40 1
xnestCreatePixmap(ScreenPtr pScreen, int width, int height, int depth)
d60 3
a62 6
#ifdef PIXPRIV
  pPixmap->devPrivates[xnestPixmapPrivateIndex].ptr =
      (pointer)((char *)pPixmap + pScreen->totalPixmapSize);
#else
  pPixmap->devPrivate.ptr = (pointer)(pPixmap + 1);
#endif
d80 1
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d35 1
d37 1
d60 1
d63 3
@

