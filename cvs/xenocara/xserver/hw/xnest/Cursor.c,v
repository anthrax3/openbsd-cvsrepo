head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.22
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.20
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.18
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.16
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.14
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.12
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.06.10.13.21.28;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.35;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.30;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.27;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.44;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.44;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*

Copyright 1993 by Davor Matic

Permission to use, copy, modify, distribute, and sell this software
and its documentation for any purpose is hereby granted without fee,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation.  Davor Matic makes no representations about
the suitability of this software for any purpose.  It is provided "as
is" without express or implied warranty.

*/

#ifdef HAVE_XNEST_CONFIG_H
#include <xnest-config.h>
#endif

#include <X11/X.h>
#include <X11/Xproto.h>
#include "screenint.h"
#include "input.h"
#include "misc.h"
#include "cursor.h"
#include "cursorstr.h"
#include "scrnintstr.h"
#include "servermd.h"
#include "mipointrst.h"

#include "Xnest.h"

#include "Display.h"
#include "Screen.h"
#include "XNCursor.h"
#include "Visual.h"
#include "Keyboard.h"
#include "Args.h"

xnestCursorFuncRec xnestCursorFuncs = { NULL };

Bool
xnestRealizeCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor)
{
    XImage *ximage;
    Pixmap source, mask;
    XColor fg_color, bg_color;
    unsigned long valuemask;
    XGCValues values;

    valuemask = GCFunction |
        GCPlaneMask | GCForeground | GCBackground | GCClipMask;

    values.function = GXcopy;
    values.plane_mask = AllPlanes;
    values.foreground = 1L;
    values.background = 0L;
    values.clip_mask = None;

    XChangeGC(xnestDisplay, xnestBitmapGC, valuemask, &values);

    source = XCreatePixmap(xnestDisplay,
                           xnestDefaultWindows[pScreen->myNum],
                           pCursor->bits->width, pCursor->bits->height, 1);

    mask = XCreatePixmap(xnestDisplay,
                         xnestDefaultWindows[pScreen->myNum],
                         pCursor->bits->width, pCursor->bits->height, 1);

    ximage = XCreateImage(xnestDisplay,
                          xnestDefaultVisual(pScreen),
                          1, XYBitmap, 0,
                          (char *) pCursor->bits->source,
                          pCursor->bits->width,
                          pCursor->bits->height, BitmapPad(xnestDisplay), 0);

    XPutImage(xnestDisplay, source, xnestBitmapGC, ximage,
              0, 0, 0, 0, pCursor->bits->width, pCursor->bits->height);

    XFree(ximage);

    ximage = XCreateImage(xnestDisplay,
                          xnestDefaultVisual(pScreen),
                          1, XYBitmap, 0,
                          (char *) pCursor->bits->mask,
                          pCursor->bits->width,
                          pCursor->bits->height, BitmapPad(xnestDisplay), 0);

    XPutImage(xnestDisplay, mask, xnestBitmapGC, ximage,
              0, 0, 0, 0, pCursor->bits->width, pCursor->bits->height);

    XFree(ximage);

    fg_color.red = pCursor->foreRed;
    fg_color.green = pCursor->foreGreen;
    fg_color.blue = pCursor->foreBlue;

    bg_color.red = pCursor->backRed;
    bg_color.green = pCursor->backGreen;
    bg_color.blue = pCursor->backBlue;

    xnestSetCursorPriv(pCursor, pScreen, malloc(sizeof(xnestPrivCursor)));
    xnestCursor(pCursor, pScreen) =
        XCreatePixmapCursor(xnestDisplay, source, mask, &fg_color, &bg_color,
                            pCursor->bits->xhot, pCursor->bits->yhot);

    XFreePixmap(xnestDisplay, source);
    XFreePixmap(xnestDisplay, mask);

    return True;
}

Bool
xnestUnrealizeCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor)
{
    XFreeCursor(xnestDisplay, xnestCursor(pCursor, pScreen));
    free(xnestGetCursorPriv(pCursor, pScreen));
    return True;
}

void
xnestRecolorCursor(ScreenPtr pScreen, CursorPtr pCursor, Bool displayed)
{
    XColor fg_color, bg_color;

    fg_color.red = pCursor->foreRed;
    fg_color.green = pCursor->foreGreen;
    fg_color.blue = pCursor->foreBlue;

    bg_color.red = pCursor->backRed;
    bg_color.green = pCursor->backGreen;
    bg_color.blue = pCursor->backBlue;

    XRecolorCursor(xnestDisplay,
                   xnestCursor(pCursor, pScreen), &fg_color, &bg_color);
}

void
xnestSetCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor, int x,
               int y)
{
    if (pCursor) {
        XDefineCursor(xnestDisplay,
                      xnestDefaultWindows[pScreen->myNum],
                      xnestCursor(pCursor, pScreen));
    }
}

void
xnestMoveCursor(DeviceIntPtr pDev, ScreenPtr pScreen, int x, int y)
{
}

Bool
xnestDeviceCursorInitialize(DeviceIntPtr pDev, ScreenPtr pScreen)
{
    xnestCursorFuncPtr pScreenPriv;

    pScreenPriv = (xnestCursorFuncPtr)
        dixLookupPrivate(&pScreen->devPrivates, xnestCursorScreenKey);

    return pScreenPriv->spriteFuncs->DeviceCursorInitialize(pDev, pScreen);
}

void
xnestDeviceCursorCleanup(DeviceIntPtr pDev, ScreenPtr pScreen)
{
    xnestCursorFuncPtr pScreenPriv;

    pScreenPriv = (xnestCursorFuncPtr)
        dixLookupPrivate(&pScreen->devPrivates, xnestCursorScreenKey);

    pScreenPriv->spriteFuncs->DeviceCursorCleanup(pDev, pScreen);
}
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d39 1
a39 1
xnestCursorFuncRec xnestCursorFuncs = {NULL};
d44 66
a109 75
  XImage *ximage;
  Pixmap source, mask;
  XColor fg_color, bg_color;
  unsigned long valuemask;
  XGCValues values;

  valuemask = GCFunction | 
              GCPlaneMask | 
	      GCForeground |
	      GCBackground |
	      GCClipMask;

  values.function = GXcopy;
  values.plane_mask = AllPlanes;
  values.foreground = 1L;
  values.background = 0L;
  values.clip_mask = None;

  XChangeGC(xnestDisplay, xnestBitmapGC, valuemask, &values);

  source = XCreatePixmap(xnestDisplay, 
			 xnestDefaultWindows[pScreen->myNum],
			 pCursor->bits->width,
			 pCursor->bits->height,
			 1);
  
  mask   = XCreatePixmap(xnestDisplay, 
			 xnestDefaultWindows[pScreen->myNum],
			 pCursor->bits->width,
			 pCursor->bits->height,
			 1);
  
  ximage = XCreateImage(xnestDisplay, 
			xnestDefaultVisual(pScreen),
			1, XYBitmap, 0, 
			(char *)pCursor->bits->source,
			pCursor->bits->width,
			pCursor->bits->height,
			BitmapPad(xnestDisplay), 0);
  
  XPutImage(xnestDisplay, source, xnestBitmapGC, ximage,
	    0, 0, 0, 0, pCursor->bits->width, pCursor->bits->height);
  
  XFree(ximage);
  
  ximage = XCreateImage(xnestDisplay, 
			xnestDefaultVisual(pScreen),
			1, XYBitmap, 0, 
			(char *)pCursor->bits->mask,
			pCursor->bits->width,
			pCursor->bits->height,
			BitmapPad(xnestDisplay), 0);
  
  XPutImage(xnestDisplay, mask, xnestBitmapGC, ximage,
	    0, 0, 0, 0, pCursor->bits->width, pCursor->bits->height);
  
  XFree(ximage);
  
  fg_color.red = pCursor->foreRed;
  fg_color.green = pCursor->foreGreen;
  fg_color.blue = pCursor->foreBlue;
  
  bg_color.red = pCursor->backRed;
  bg_color.green = pCursor->backGreen;
  bg_color.blue = pCursor->backBlue;

  xnestSetCursorPriv(pCursor, pScreen, malloc(sizeof(xnestPrivCursor)));
  xnestCursor(pCursor, pScreen) = 
    XCreatePixmapCursor(xnestDisplay, source, mask, &fg_color, &bg_color,
			pCursor->bits->xhot, pCursor->bits->yhot);
  
  XFreePixmap(xnestDisplay, source);
  XFreePixmap(xnestDisplay, mask);
  
  return True;
d115 3
a117 3
  XFreeCursor(xnestDisplay, xnestCursor(pCursor, pScreen));
  free(xnestGetCursorPriv(pCursor, pScreen));
  return True;
d123 22
a144 22
  XColor fg_color, bg_color;
  
  fg_color.red = pCursor->foreRed;
  fg_color.green = pCursor->foreGreen;
  fg_color.blue = pCursor->foreBlue;
  
  bg_color.red = pCursor->backRed;
  bg_color.green = pCursor->backGreen;
  bg_color.blue = pCursor->backBlue;
  
  XRecolorCursor(xnestDisplay, 
		 xnestCursor(pCursor, pScreen),
		 &fg_color, &bg_color);
}

void xnestSetCursor (DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor, int x, int y)
{
    if (pCursor)
    {
	XDefineCursor(xnestDisplay, 
		      xnestDefaultWindows[pScreen->myNum], 
		      xnestCursor(pCursor, pScreen));
d149 1
a149 1
xnestMoveCursor (DeviceIntPtr pDev, ScreenPtr pScreen, int x, int y)
d159 1
a159 1
            dixLookupPrivate(&pScreen->devPrivates, xnestCursorScreenKey);
d170 1
a170 1
            dixLookupPrivate(&pScreen->devPrivates, xnestCursorScreenKey);
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d110 1
a110 1
  xnestSetCursorPriv(pCursor, pScreen, xalloc(sizeof(xnestPrivCursor)));
d125 1
a125 1
  xfree(xnestGetCursorPriv(pCursor, pScreen));
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d170 1
a170 2
    pScreenPriv->spriteFuncs->DeviceCursorInitialize(pDev, pScreen);
    return TRUE;
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d28 1
d39 2
d42 1
a42 1
xnestRealizeCursor(ScreenPtr pScreen, CursorPtr pCursor)
d122 1
a122 1
xnestUnrealizeCursor(ScreenPtr pScreen, CursorPtr pCursor)
d147 1
a147 1
void xnestSetCursor (ScreenPtr pScreen, CursorPtr pCursor, int x, int y)
d158 1
a158 1
xnestMoveCursor (ScreenPtr pScreen, int x, int y)
d160 23
@


1.1
log
@Initial revision
@
text
@d107 2
a108 2
  pCursor->devPriv[pScreen->myNum] = (pointer)xalloc(sizeof(xnestPrivCursor));
  xnestCursorPriv(pCursor, pScreen)->cursor = 
d122 1
a122 1
  xfree(xnestCursorPriv(pCursor, pScreen));
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
