head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.20
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.18
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.16
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.6
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.06.10.13.21.28;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.35;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.30;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2007.12.23.08.01.09;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.44;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.44;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.03.25;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*

Copyright 1993 by Davor Matic

Permission to use, copy, modify, distribute, and sell this software
and its documentation for any purpose is hereby granted without fee,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation.  Davor Matic makes no representations about
the suitability of this software for any purpose.  It is provided "as
is" without express or implied warranty.

*/

#ifdef HAVE_XNEST_CONFIG_H
#include <xnest-config.h>
#endif

#include <X11/X.h>
#include <X11/Xproto.h>
#include "screenint.h"
#include "input.h"
#include "misc.h"
#include "scrnintstr.h"
#include "servermd.h"

#include "Xnest.h"

#include "Display.h"
#include "Args.h"

char *xnestDisplayName = NULL;
Bool xnestSynchronize = False;
Bool xnestFullGeneration = False;
int xnestDefaultClass;
Bool xnestUserDefaultClass = False;
int xnestDefaultDepth;
Bool xnestUserDefaultDepth = False;
Bool xnestSoftwareScreenSaver = False;
int xnestX;
int xnestY;
unsigned int xnestWidth;
unsigned int xnestHeight;
int xnestUserGeometry = 0;
int xnestBorderWidth;
Bool xnestUserBorderWidth = False;
char *xnestWindowName = NULL;
int xnestNumScreens = 0;
Bool xnestDoDirectColormaps = False;
Window xnestParentWindow = 0;

int
ddxProcessArgument(int argc, char *argv[], int i)
{
    if (!strcmp(argv[i], "-display")) {
        if (++i < argc) {
            xnestDisplayName = argv[i];
            return 2;
        }
        return 0;
    }
    if (!strcmp(argv[i], "-sync")) {
        xnestSynchronize = True;
        return 1;
    }
    if (!strcmp(argv[i], "-full")) {
        xnestFullGeneration = True;
        return 1;
    }
    if (!strcmp(argv[i], "-class")) {
        if (++i < argc) {
            if (!strcmp(argv[i], "StaticGray")) {
                xnestDefaultClass = StaticGray;
                xnestUserDefaultClass = True;
                return 2;
            }
            else if (!strcmp(argv[i], "GrayScale")) {
                xnestDefaultClass = GrayScale;
                xnestUserDefaultClass = True;
                return 2;
            }
            else if (!strcmp(argv[i], "StaticColor")) {
                xnestDefaultClass = StaticColor;
                xnestUserDefaultClass = True;
                return 2;
            }
            else if (!strcmp(argv[i], "PseudoColor")) {
                xnestDefaultClass = PseudoColor;
                xnestUserDefaultClass = True;
                return 2;
            }
            else if (!strcmp(argv[i], "TrueColor")) {
                xnestDefaultClass = TrueColor;
                xnestUserDefaultClass = True;
                return 2;
            }
            else if (!strcmp(argv[i], "DirectColor")) {
                xnestDefaultClass = DirectColor;
                xnestUserDefaultClass = True;
                return 2;
            }
        }
        return 0;
    }
    if (!strcmp(argv[i], "-cc")) {
        if (++i < argc && sscanf(argv[i], "%i", &xnestDefaultClass) == 1) {
            if (xnestDefaultClass >= 0 && xnestDefaultClass <= 5) {
                xnestUserDefaultClass = True;
                /* lex the OS layer process it as well, so return 0 */
            }
        }
        return 0;
    }
    if (!strcmp(argv[i], "-depth")) {
        if (++i < argc && sscanf(argv[i], "%i", &xnestDefaultDepth) == 1) {
            if (xnestDefaultDepth > 0) {
                xnestUserDefaultDepth = True;
                return 2;
            }
        }
        return 0;
    }
    if (!strcmp(argv[i], "-sss")) {
        xnestSoftwareScreenSaver = True;
        return 1;
    }
    if (!strcmp(argv[i], "-geometry")) {
        if (++i < argc) {
            xnestUserGeometry = XParseGeometry(argv[i],
                                               &xnestX, &xnestY,
                                               &xnestWidth, &xnestHeight);
            if (xnestUserGeometry)
                return 2;
        }
        return 0;
    }
    if (!strcmp(argv[i], "-bw")) {
        if (++i < argc && sscanf(argv[i], "%i", &xnestBorderWidth) == 1) {
            if (xnestBorderWidth >= 0) {
                xnestUserBorderWidth = True;
                return 2;
            }
        }
        return 0;
    }
    if (!strcmp(argv[i], "-name")) {
        if (++i < argc) {
            xnestWindowName = argv[i];
            return 2;
        }
        return 0;
    }
    if (!strcmp(argv[i], "-scrns")) {
        if (++i < argc && sscanf(argv[i], "%i", &xnestNumScreens) == 1) {
            if (xnestNumScreens > 0) {
                if (xnestNumScreens > MAXSCREENS) {
                    ErrorF("Maximum number of screens is %d.\n", MAXSCREENS);
                    xnestNumScreens = MAXSCREENS;
                }
                return 2;
            }
        }
        return 0;
    }
    if (!strcmp(argv[i], "-install")) {
        xnestDoDirectColormaps = True;
        return 1;
    }
    if (!strcmp(argv[i], "-parent")) {
        if (++i < argc) {
            xnestParentWindow = (XID) strtol(argv[i], (char **) NULL, 0);
            return 2;
        }
    }
    return 0;
}

void
ddxUseMsg(void)
{
    ErrorF("-display string        display name of the real server\n");
    ErrorF("-sync                  sinchronize with the real server\n");
    ErrorF("-full                  utilize full regeneration\n");
    ErrorF("-class string          default visual class\n");
    ErrorF("-depth int             default depth\n");
    ErrorF("-sss                   use software screen saver\n");
    ErrorF("-geometry WxH+X+Y      window size and position\n");
    ErrorF("-bw int                window border width\n");
    ErrorF("-name string           window name\n");
    ErrorF("-scrns int             number of screens to generate\n");
    ErrorF("-install               instal colormaps directly\n");
}
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d32 1
a32 1
char *xnestDisplayName = NULL;        
d35 1
a35 1
int xnestDefaultClass;                
d40 2
a41 2
int xnestX;                    
int xnestY;                    
d45 1
a45 1
int xnestBorderWidth; 
d47 1
a47 1
char *xnestWindowName = NULL;        
d53 1
a53 1
ddxProcessArgument (int argc, char *argv[], int i)
d55 119
a173 4
  if (!strcmp(argv[i], "-display")) {
    if (++i < argc) {
      xnestDisplayName = argv[i];
      return 2;
a175 114
  }
  if (!strcmp(argv[i], "-sync")) {
    xnestSynchronize = True;
    return 1;
  }
  if (!strcmp(argv[i], "-full")) {
    xnestFullGeneration = True;
    return 1;
  }
  if (!strcmp(argv[i], "-class")) {
    if (++i < argc) {
      if (!strcmp(argv[i], "StaticGray")) {
	xnestDefaultClass = StaticGray;
	xnestUserDefaultClass = True;
	return 2;
      }
      else if (!strcmp(argv[i], "GrayScale")) {
	xnestDefaultClass = GrayScale;
	xnestUserDefaultClass = True;
	return 2;
      }
      else if (!strcmp(argv[i], "StaticColor")) {
	xnestDefaultClass = StaticColor;
	xnestUserDefaultClass = True;
	return 2;
      }
      else if (!strcmp(argv[i], "PseudoColor")) {
	xnestDefaultClass = PseudoColor;
	xnestUserDefaultClass = True;
	return 2;
      }
      else if (!strcmp(argv[i], "TrueColor")) {
	xnestDefaultClass = TrueColor;
	xnestUserDefaultClass = True;
	return 2;
      }
      else if (!strcmp(argv[i], "DirectColor")) {
	xnestDefaultClass = DirectColor;
	xnestUserDefaultClass = True;
	return 2;
      }
    }
    return 0;
  }
  if (!strcmp(argv[i], "-cc")) {
    if (++i < argc && sscanf(argv[i], "%i", &xnestDefaultClass) == 1) {
      if (xnestDefaultClass >= 0 && xnestDefaultClass <= 5) {
	xnestUserDefaultClass = True;
	/* lex the OS layer process it as well, so return 0 */
      }
    }
    return 0;
  }
  if (!strcmp(argv[i], "-depth")) {
    if (++i < argc && sscanf(argv[i], "%i", &xnestDefaultDepth) == 1) {
      if (xnestDefaultDepth > 0) {
	xnestUserDefaultDepth = True;
	return 2;
      }
    }
    return 0;
  }
  if (!strcmp(argv[i], "-sss")) {
    xnestSoftwareScreenSaver = True;
    return 1;
  }
  if (!strcmp(argv[i], "-geometry")) {
    if (++i < argc) {
      xnestUserGeometry = XParseGeometry(argv[i],
					 &xnestX, &xnestY,
					 &xnestWidth, &xnestHeight);
      if (xnestUserGeometry) return 2;
    }
    return 0;
  }
  if (!strcmp(argv[i], "-bw")) {
    if (++i < argc && sscanf(argv[i], "%i", &xnestBorderWidth) == 1) {
      if (xnestBorderWidth >= 0) {
	xnestUserBorderWidth = True;
	return 2;
      }
    }
    return 0;
  }
  if (!strcmp(argv[i], "-name")) {
    if (++i < argc) {
      xnestWindowName = argv[i];
      return 2;
    }
    return 0;
  }
  if (!strcmp(argv[i], "-scrns")) {
    if (++i < argc && sscanf(argv[i], "%i", &xnestNumScreens) == 1) {
      if (xnestNumScreens > 0) {
	if (xnestNumScreens > MAXSCREENS) {
	  ErrorF("Maximum number of screens is %d.\n", MAXSCREENS);
	  xnestNumScreens = MAXSCREENS;
	}
	return 2;
      }
    }
    return 0;
  }
  if (!strcmp(argv[i], "-install")) {
    xnestDoDirectColormaps = True;
    return 1;
  }
  if (!strcmp(argv[i], "-parent")) {
    if (++i < argc) {
      xnestParentWindow = (XID) strtol (argv[i], (char**)NULL, 0);
      return 2;
    }
  }
  return 0;
d178 2
a179 1
void ddxUseMsg(void)
d181 11
a191 11
  ErrorF("-display string        display name of the real server\n");
  ErrorF("-sync                  sinchronize with the real server\n");
  ErrorF("-full                  utilize full regeneration\n");
  ErrorF("-class string          default visual class\n");
  ErrorF("-depth int             default depth\n");
  ErrorF("-sss                   use software screen saver\n");
  ErrorF("-geometry WxH+X+Y      window size and position\n");
  ErrorF("-bw int                window border width\n");
  ErrorF("-name string           window name\n");
  ErrorF("-scrns int             number of screens to generate\n");
  ErrorF("-install               instal colormaps directly\n");
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d177 1
a177 1
void ddxUseMsg()
@


1.2
log
@Make that build with gcc 2.95
@
text
@a51 19
#ifdef COMPOSITE
    /* XXX terrible hack */
    extern Bool noCompositeExtension;
#endif
#ifdef XKB
    extern Bool noXkbExtension;
#endif

/* ddxInitGlobals - called by |InitGlobals| from os/util.c */
void ddxInitGlobals(void)
{
#ifdef COMPOSITE
    noCompositeExtension = TRUE;
#endif
#ifdef XKB
    noXkbExtension = TRUE;
#endif
}

@


1.1
log
@Initial revision
@
text
@a13 1
/* $XFree86$ */
d52 8
d63 6
a73 7

#ifdef COMPOSITE
    /* XXX terrible hack */
    extern Bool noCompositeExtension;
    noCompositeExtension = TRUE;
#endif

@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d14 1
d56 6
a67 9
#ifdef XKB
    extern Bool noXkbExtension;
    noXkbExtension = TRUE;
#endif
}

int
ddxProcessArgument (int argc, char *argv[], int i)
{
@

