head	1.14;
access;
symbols
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.2
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.4
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.09.16.19.10.22;	author matthieu;	state Exp;
branches;
next	1.13;
commitid	Te1daavkBLskZ8gc;

1.13
date	2014.09.27.17.53.01;	author matthieu;	state Exp;
branches;
next	1.12;
commitid	cVXoV5PxI8YrEaVA;

1.12
date	2014.05.02.19.27.48;	author matthieu;	state Exp;
branches;
next	1.11;

1.11
date	2013.06.07.17.28.48;	author matthieu;	state Exp;
branches;
next	1.10;

1.10
date	2012.06.10.13.21.23;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.05.13.32.50;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2010.12.05.15.36.06;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.27.19.02.30;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2009.09.06.19.44.25;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.02.15.26.19;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2007.12.23.14.28.10;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.24.19.04.02;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.25.15.47.16;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.57;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.57;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.04.14;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 * Copyright Â© 1999 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _KDRIVE_H_
#define _KDRIVE_H_

#include <stdio.h>
#include <string.h>
#include <X11/X.h>
#include <X11/Xproto.h>
#include <X11/Xos.h>
#include "scrnintstr.h"
#include "pixmapstr.h"
#include "windowstr.h"
#include "servermd.h"
#include "colormapst.h"
#include "gcstruct.h"
#include "input.h"
#include "mipointer.h"
#include "mi.h"
#include "dix.h"
#include "fb.h"
#include "fboverlay.h"
#include "shadow.h"
#include "randrstr.h"
#include "globals.h"

#include "xkbstr.h"

#define KD_DPMS_NORMAL	    0
#define KD_DPMS_STANDBY	    1
#define KD_DPMS_SUSPEND	    2
#define KD_DPMS_POWERDOWN   3
#define KD_DPMS_MAX	    KD_DPMS_POWERDOWN

#define Status int

typedef struct _KdCardInfo {
    struct _KdCardFuncs *cfuncs;
    void *closure;
    void *driver;
    struct _KdScreenInfo *screenList;
    int selected;
    struct _KdCardInfo *next;
} KdCardInfo;

extern KdCardInfo *kdCardInfo;

/*
 * Configuration information per X screen
 */
typedef struct _KdFrameBuffer {
    CARD8 *frameBuffer;
    int depth;
    int bitsPerPixel;
    int pixelStride;
    int byteStride;
    Bool shadow;
    unsigned long visuals;
    Pixel redMask, greenMask, blueMask;
    void *closure;
} KdFrameBuffer;

#define RR_Rotate_All	(RR_Rotate_0|RR_Rotate_90|RR_Rotate_180|RR_Rotate_270)
#define RR_Reflect_All	(RR_Reflect_X|RR_Reflect_Y)

typedef struct _KdScreenInfo {
    struct _KdScreenInfo *next;
    KdCardInfo *card;
    ScreenPtr pScreen;
    void *driver;
    Rotation randr;             /* rotation and reflection */
    int x;
    int y;
    int width;
    int height;
    int rate;
    int width_mm;
    int height_mm;
    int subpixel_order;
    Bool dumb;
    Bool softCursor;
    int mynum;
    DDXPointRec origin;
    KdFrameBuffer fb;
} KdScreenInfo;

typedef struct _KdCardFuncs {
    Bool (*cardinit) (KdCardInfo *);    /* detect and map device */
    Bool (*scrinit) (KdScreenInfo *);   /* initialize screen information */
    Bool (*initScreen) (ScreenPtr);     /* initialize ScreenRec */
    Bool (*finishInitScreen) (ScreenPtr pScreen);
    Bool (*createRes) (ScreenPtr);      /* create screen resources */
    void (*preserve) (KdCardInfo *);    /* save graphics card state */
    Bool (*enable) (ScreenPtr); /* set up for rendering */
    Bool (*dpms) (ScreenPtr, int);      /* set DPMS screen saver */
    void (*disable) (ScreenPtr);        /* turn off rendering */
    void (*restore) (KdCardInfo *);     /* restore graphics card state */
    void (*scrfini) (KdScreenInfo *);   /* close down screen */
    void (*cardfini) (KdCardInfo *);    /* close down */

    Bool (*initCursor) (ScreenPtr);     /* detect and map cursor */
    void (*enableCursor) (ScreenPtr);   /* enable cursor */
    void (*disableCursor) (ScreenPtr);  /* disable cursor */
    void (*finiCursor) (ScreenPtr);     /* close down */
    void (*recolorCursor) (ScreenPtr, int, xColorItem *);

    Bool (*initAccel) (ScreenPtr);
    void (*enableAccel) (ScreenPtr);
    void (*disableAccel) (ScreenPtr);
    void (*finiAccel) (ScreenPtr);

    void (*getColors) (ScreenPtr, int, xColorItem *);
    void (*putColors) (ScreenPtr, int, xColorItem *);

    void (*closeScreen) (ScreenPtr);    /* close ScreenRec */
} KdCardFuncs;

#define KD_MAX_PSEUDO_DEPTH 8
#define KD_MAX_PSEUDO_SIZE	    (1 << KD_MAX_PSEUDO_DEPTH)

typedef struct {
    KdScreenInfo *screen;
    KdCardInfo *card;

    Bool enabled;
    Bool closed;
    int bytesPerPixel;

    int dpmsState;

    ColormapPtr pInstalledmap;  /* current colormap */
    xColorItem systemPalette[KD_MAX_PSEUDO_SIZE];       /* saved windows colors */

    CreateScreenResourcesProcPtr CreateScreenResources;
    CloseScreenProcPtr CloseScreen;
} KdPrivScreenRec, *KdPrivScreenPtr;

typedef enum _kdPointerState {
    start,
    button_1_pend,
    button_1_down,
    button_2_down,
    button_3_pend,
    button_3_down,
    synth_2_down_13,
    synth_2_down_3,
    synth_2_down_1,
    num_input_states
} KdPointerState;

#define KD_MAX_BUTTON  32

#define KD_KEYBOARD 1
#define KD_MOUSE 2
#define KD_TOUCHSCREEN 3

typedef struct _KdPointerInfo KdPointerInfo;

typedef struct _KdPointerDriver {
    const char *name;
     Status(*Init) (KdPointerInfo *);
     Status(*Enable) (KdPointerInfo *);
    void (*Disable) (KdPointerInfo *);
    void (*Fini) (KdPointerInfo *);
    struct _KdPointerDriver *next;
} KdPointerDriver;

struct _KdPointerInfo {
    DeviceIntPtr dixdev;
    char *name;
    char *path;
    char *protocol;
    InputOption *options;
    int inputClass;

    CARD8 map[KD_MAX_BUTTON + 1];
    int nButtons;
    int nAxes;

    Bool emulateMiddleButton;
    unsigned long emulationTimeout;
    int emulationDx, emulationDy;

    Bool timeoutPending;
    KdPointerState mouseState;
    Bool eventHeld;
    struct {
        int type;
        int x;
        int y;
        int z;
        int flags;
        int absrel;
    } heldEvent;
    unsigned char buttonState;
    Bool transformCoordinates;
    int pressureThreshold;

    KdPointerDriver *driver;
    void *driverPrivate;

    struct _KdPointerInfo *next;
};

extern int KdCurScreen;

void KdAddPointerDriver(KdPointerDriver * driver);
void KdRemovePointerDriver(KdPointerDriver * driver);
KdPointerInfo *KdNewPointer(void);
void KdFreePointer(KdPointerInfo *);
int KdAddPointer(KdPointerInfo * ki);
int KdAddConfigPointer(char *pointer);
void KdRemovePointer(KdPointerInfo * ki);

#define KD_KEY_COUNT 248
#define KD_MIN_KEYCODE  8
#define KD_MAX_KEYCODE  255
#define KD_MAX_WIDTH    4
#define KD_MAX_LENGTH   (KD_MAX_KEYCODE - KD_MIN_KEYCODE + 1)

typedef struct {
    KeySym modsym;
    int modbit;
} KdKeySymModsRec;

typedef struct _KdKeyboardInfo KdKeyboardInfo;

typedef struct _KdKeyboardDriver {
    const char *name;
    Bool (*Init) (KdKeyboardInfo *);
    Bool (*Enable) (KdKeyboardInfo *);
    void (*Leds) (KdKeyboardInfo *, int);
    void (*Bell) (KdKeyboardInfo *, int, int, int);
    void (*Disable) (KdKeyboardInfo *);
    void (*Fini) (KdKeyboardInfo *);
    struct _KdKeyboardDriver *next;
} KdKeyboardDriver;

struct _KdKeyboardInfo {
    struct _KdKeyboardInfo *next;
    DeviceIntPtr dixdev;
    void *closure;
    char *name;
    char *path;
    int inputClass;
    char *xkbRules;
    char *xkbModel;
    char *xkbLayout;
    char *xkbVariant;
    char *xkbOptions;
    int LockLed;

    int minScanCode;
    int maxScanCode;

    int leds;
    int bellPitch;
    int bellDuration;
    InputOption *options;

    KdKeyboardDriver *driver;
    void *driverPrivate;
};

void KdAddKeyboardDriver(KdKeyboardDriver * driver);
void KdRemoveKeyboardDriver(KdKeyboardDriver * driver);
KdKeyboardInfo *KdNewKeyboard(void);
void KdFreeKeyboard(KdKeyboardInfo * ki);
int KdAddConfigKeyboard(char *pointer);
int KdAddKeyboard(KdKeyboardInfo * ki);
void KdRemoveKeyboard(KdKeyboardInfo * ki);

typedef struct _KdOsFuncs {
    int (*Init) (void);
    void (*Enable) (void);
    Bool (*SpecialKey) (KeySym);
    void (*Disable) (void);
    void (*Fini) (void);
    void (*pollEvents) (void);
    void (*Bell) (int, int, int);
} KdOsFuncs;

typedef enum _KdSyncPolarity {
    KdSyncNegative, KdSyncPositive
} KdSyncPolarity;

typedef struct _KdMonitorTiming {
    /* label */
    int horizontal;
    int vertical;
    int rate;
    /* pixel clock */
    int clock;                  /* in KHz */
    /* horizontal timing */
    int hfp;                    /* front porch */
    int hbp;                    /* back porch */
    int hblank;                 /* blanking */
    KdSyncPolarity hpol;        /* polarity */
    /* vertical timing */
    int vfp;                    /* front porch */
    int vbp;                    /* back porch */
    int vblank;                 /* blanking */
    KdSyncPolarity vpol;        /* polarity */
} KdMonitorTiming;

extern const KdMonitorTiming kdMonitorTimings[];
extern const int kdNumMonitorTimings;

typedef struct _KdPointerMatrix {
    int matrix[2][3];
} KdPointerMatrix;

extern DevPrivateKeyRec kdScreenPrivateKeyRec;

#define kdScreenPrivateKey (&kdScreenPrivateKeyRec)

extern unsigned long kdGeneration;
extern Bool kdEnabled;
extern Bool kdSwitchPending;
extern Bool kdEmulateMiddleButton;
extern Bool kdDisableZaphod;
extern Bool kdAllowZap;
extern int kdVirtualTerminal;
extern char *kdSwitchCmd;
extern KdOsFuncs *kdOsFuncs;

#define KdGetScreenPriv(pScreen) ((KdPrivScreenPtr) \
    dixLookupPrivate(&(pScreen)->devPrivates, kdScreenPrivateKey))
#define KdSetScreenPriv(pScreen,v) \
    dixSetPrivate(&(pScreen)->devPrivates, kdScreenPrivateKey, v)
#define KdScreenPriv(pScreen) KdPrivScreenPtr pScreenPriv = KdGetScreenPriv(pScreen)

/* kcmap.c */
void
 KdSetColormap(ScreenPtr pScreen);

void
 KdEnableColormap(ScreenPtr pScreen);

void
 KdDisableColormap(ScreenPtr pScreen);

void
 KdInstallColormap(ColormapPtr pCmap);

void
 KdUninstallColormap(ColormapPtr pCmap);

int
 KdListInstalledColormaps(ScreenPtr pScreen, Colormap * pCmaps);

void
 KdStoreColors(ColormapPtr pCmap, int ndef, xColorItem * pdefs);

/* kdrive.c */
extern miPointerScreenFuncRec kdPointerScreenFuncs;

void
 KdDisableScreen(ScreenPtr pScreen);

void
 KdDisableScreens(void);

Bool
 KdEnableScreen(ScreenPtr pScreen);

void
 KdEnableScreens(void);

void
 KdSuspend(void);

void
 KdResume(void);

void
 KdProcessSwitch(void);

Rotation KdAddRotation(Rotation a, Rotation b);

Rotation KdSubRotation(Rotation a, Rotation b);

void
 KdParseScreen(KdScreenInfo * screen, const char *arg);

KdPointerInfo *KdParsePointer(const char *arg);

KdKeyboardInfo *KdParseKeyboard(const char *arg);

const char *
KdParseFindNext(const char *cur, const char *delim, char *save, char *last);

void
 KdParseRgba(char *rgba);

void
 KdUseMsg(void);

int
 KdProcessArgument(int argc, char **argv, int i);

void
 KdOsInit(KdOsFuncs * pOsFuncs);

void
 KdOsAddInputDrivers(void);

Bool
 KdAllocatePrivates(ScreenPtr pScreen);

Bool
 KdCreateScreenResources(ScreenPtr pScreen);

Bool
 KdCloseScreen(ScreenPtr pScreen);

Bool
 KdSaveScreen(ScreenPtr pScreen, int on);

Bool
 KdScreenInit(ScreenPtr pScreen, int argc, char **argv);

void

KdInitScreen(ScreenInfo * pScreenInfo,
             KdScreenInfo * screen, int argc, char **argv);

void
 KdInitCard(ScreenInfo * pScreenInfo, KdCardInfo * card, int argc, char **argv);

void
 KdInitOutput(ScreenInfo * pScreenInfo, int argc, char **argv);

void
 KdSetSubpixelOrder(ScreenPtr pScreen, Rotation randr);

void
 KdBacktrace(int signum);

/* kinfo.c */
KdCardInfo *KdCardInfoAdd(KdCardFuncs * funcs, void *closure);

KdCardInfo *KdCardInfoLast(void);

void
 KdCardInfoDispose(KdCardInfo * ci);

KdScreenInfo *KdScreenInfoAdd(KdCardInfo * ci);

void
 KdScreenInfoDispose(KdScreenInfo * si);

/* kinput.c */
void
 KdInitInput(void);
void
 KdCloseInput(void);

Bool
 KdRegisterFd(int fd, void (*read) (int fd, void *closure), void *closure);

void
 KdUnregisterFds(void *closure, Bool do_close);

void
 KdUnregisterFd(void *closure, int fd, Bool do_close);

void

KdEnqueueKeyboardEvent(KdKeyboardInfo * ki, unsigned char scan_code,
                       unsigned char is_up);

#define KD_BUTTON_1	0x01
#define KD_BUTTON_2	0x02
#define KD_BUTTON_3	0x04
#define KD_BUTTON_4	0x08
#define KD_BUTTON_5	0x10
#define KD_BUTTON_8	0x80
#define KD_POINTER_DESKTOP 0x40000000
#define KD_MOUSE_DELTA	0x80000000

void

KdEnqueuePointerEvent(KdPointerInfo * pi, unsigned long flags, int rx, int ry,
                      int rz);

void

_KdEnqueuePointerEvent(KdPointerInfo * pi, int type, int x, int y, int z,
                       int b, int absrel, Bool force);

void
 KdReleaseAllKeys(void);

void
 KdSetLed(KdKeyboardInfo * ki, int led, Bool on);

void
 KdSetPointerMatrix(KdPointerMatrix *pointer);

void

KdComputePointerMatrix(KdPointerMatrix *pointer, Rotation randr, int width,
                       int height);

void
 KdScreenToPointerCoords(int *x, int *y);

void

KdBlockHandler(ScreenPtr pScreen, void *timeout, void *readmask);

void

KdWakeupHandler(ScreenPtr pScreen, unsigned long result, void *readmask);

void
 KdDisableInput(void);

void
 KdEnableInput(void);

void
 KdRingBell(KdKeyboardInfo * ki, int volume, int pitch, int duration);

/* kmode.c */
const KdMonitorTiming *KdFindMode(KdScreenInfo * screen,
                                  Bool (*supported) (KdScreenInfo *,
                                                     const KdMonitorTiming *));

Bool

KdTuneMode(KdScreenInfo * screen,
           Bool (*usable) (KdScreenInfo *),
           Bool (*supported) (KdScreenInfo *, const KdMonitorTiming *));

#ifdef RANDR
Bool

KdRandRGetInfo(ScreenPtr pScreen,
               int randr,
               Bool (*supported) (ScreenPtr pScreen, const KdMonitorTiming *));

const KdMonitorTiming *KdRandRGetTiming(ScreenPtr pScreen,
                                        Bool (*supported) (ScreenPtr pScreen,
                                                           const KdMonitorTiming
                                                           *), int rate,
                                        RRScreenSizePtr pSize);
#endif

/* kshadow.c */
Bool
 KdShadowFbAlloc(KdScreenInfo * screen, Bool rotate);

void
 KdShadowFbFree(KdScreenInfo * screen);

Bool

KdShadowSet(ScreenPtr pScreen, int randr, ShadowUpdateProc update,
            ShadowWindowProc window);

void
 KdShadowUnset(ScreenPtr pScreen);

/* function prototypes to be implemented by the drivers */
void
 InitCard(char *name);

#endif                          /* _KDRIVE_H_ */
@


1.13
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d92 2
d135 1
a331 13

/*
 * This is the only completely portable way to
 * compute this info.
 */

#ifndef BitsPerPixel
#define BitsPerPixel(d) (\
    PixmapWidthPaddingInfo[d].notPower2 ? \
    (PixmapWidthPaddingInfo[d].bytesPerPixel * 8) : \
    ((1 << PixmapWidthPaddingInfo[d].padBytesLog2) * 8 / \
    (PixmapWidthPaddingInfo[d].padRoundUp+1)))
#endif
@


1.12
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d529 1
a529 1
 KdSetPointerMatrix(KdPointerMatrix * pointer);
d533 1
a533 1
KdComputePointerMatrix(KdPointerMatrix * pointer, Rotation randr, int width,
d541 1
a541 1
KdBlockHandler(ScreenPtr pScreen, pointer timeout, pointer readmask);
d545 1
a545 1
KdWakeupHandler(ScreenPtr pScreen, unsigned long result, pointer readmask);
@


1.11
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d177 1
a177 1
    char *name;
d246 1
a246 1
    char *name;
d414 1
a414 1
 KdParseScreen(KdScreenInfo * screen, char *arg);
d416 1
a416 1
KdPointerInfo *KdParsePointer(char *arg);
d418 1
a418 1
KdKeyboardInfo *KdParseKeyboard(char *arg);
d420 2
a421 1
char *KdParseFindNext(char *cur, const char *delim, char *save, char *last);
d509 1
@


1.10
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a34 1
#include "mibstore.h"
d444 1
a444 1
 KdCloseScreen(int index, ScreenPtr pScreen);
d450 1
a450 1
 KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv);
d539 1
a539 2
KdBlockHandler(int screen,
               pointer blockData, pointer timeout, pointer readmask);
d543 1
a543 2
KdWakeupHandler(int screen,
                pointer data, unsigned long result, pointer readmask);
a549 3

void
 ProcessInputEvents(void);
@


1.9
log
@Update to xserver 1.11.2
@
text
@d59 6
a64 6
    struct _KdCardFuncs	    *cfuncs;
    void		    *closure;
    void		    *driver;
    struct _KdScreenInfo    *screenList;
    int			    selected;
    struct _KdCardInfo	    *next;
d67 1
a67 1
extern KdCardInfo	*kdCardInfo;
d73 9
a81 9
    CARD8	*frameBuffer;
    int		depth;
    int		bitsPerPixel;
    int		pixelStride;
    int		byteStride;
    Bool	shadow;
    unsigned long   visuals;
    Pixel       redMask, greenMask, blueMask;
    void	*closure;
d88 16
a103 16
    struct _KdScreenInfo    *next;
    KdCardInfo	*card;
    ScreenPtr	pScreen;
    void	*driver;
    Rotation	randr;	/* rotation and reflection */
    int		width;
    int		height;
    int		rate;
    int		width_mm;
    int		height_mm;
    int		subpixel_order;
    Bool        dumb;
    Bool        softCursor;
    int		mynum;
    DDXPointRec	origin;
    KdFrameBuffer   fb;
d107 23
a129 23
    Bool	(*cardinit) (KdCardInfo *); /* detect and map device */
    Bool	(*scrinit) (KdScreenInfo *);/* initialize screen information */
    Bool	(*initScreen) (ScreenPtr);  /* initialize ScreenRec */
    Bool	(*finishInitScreen) (ScreenPtr pScreen);
    Bool	(*createRes) (ScreenPtr);   /* create screen resources */
    void	(*preserve) (KdCardInfo *); /* save graphics card state */
    Bool        (*enable) (ScreenPtr);      /* set up for rendering */
    Bool	(*dpms) (ScreenPtr, int);   /* set DPMS screen saver */
    void        (*disable) (ScreenPtr);     /* turn off rendering */
    void	(*restore) (KdCardInfo *);  /* restore graphics card state */
    void	(*scrfini) (KdScreenInfo *);/* close down screen */
    void        (*cardfini) (KdCardInfo *); /* close down */

    Bool        (*initCursor) (ScreenPtr);      /* detect and map cursor */
    void        (*enableCursor) (ScreenPtr);    /* enable cursor */
    void        (*disableCursor) (ScreenPtr);   /* disable cursor */
    void        (*finiCursor) (ScreenPtr);      /* close down */
    void        (*recolorCursor) (ScreenPtr, int, xColorItem *);

    Bool        (*initAccel) (ScreenPtr);
    void        (*enableAccel) (ScreenPtr);
    void        (*disableAccel) (ScreenPtr);
    void        (*finiAccel) (ScreenPtr);
d131 2
a132 2
    void        (*getColors) (ScreenPtr, int, xColorItem *);
    void        (*putColors) (ScreenPtr, int, xColorItem *);
d140 2
a141 2
    KdScreenInfo    *screen;
    KdCardInfo	    *card;
d143 3
a145 3
    Bool	    enabled;
    Bool	    closed;
    int		    bytesPerPixel;
d147 1
a147 1
    int		    dpmsState;
d149 2
a150 2
    ColormapPtr     pInstalledmap;                    /* current colormap */
    xColorItem      systemPalette[KD_MAX_PSEUDO_SIZE];/* saved windows colors */
d152 2
a153 2
    CreateScreenResourcesProcPtr    CreateScreenResources;
    CloseScreenProcPtr  CloseScreen;
d178 5
a182 5
    char                    *name;
    Status                  (*Init)    (KdPointerInfo *);
    Status                  (*Enable)  (KdPointerInfo *);
    void                    (*Disable) (KdPointerInfo *);
    void                    (*Fini)    (KdPointerInfo *);
d187 18
a204 18
    DeviceIntPtr          dixdev;
    char                  *name;
    char                  *path;
    char                  *protocol;
    InputOption           *options;
    int                   inputClass;

    CARD8                 map[KD_MAX_BUTTON + 1];
    int                   nButtons;
    int                   nAxes;

    Bool                  emulateMiddleButton;
    unsigned long         emulationTimeout;
    int                   emulationDx, emulationDy;

    Bool                  timeoutPending;
    KdPointerState        mouseState;
    Bool                  eventHeld;
d213 3
a215 3
    unsigned char         buttonState;
    Bool                  transformCoordinates;
    int                   pressureThreshold;
d217 2
a218 2
    KdPointerDriver       *driver;
    void                  *driverPrivate;
d225 7
a231 8
void KdAddPointerDriver (KdPointerDriver *driver);
void KdRemovePointerDriver (KdPointerDriver *driver);
KdPointerInfo *KdNewPointer (void);
void KdFreePointer (KdPointerInfo *);
int KdAddPointer (KdPointerInfo *ki);
int KdAddConfigPointer (char *pointer);
void KdRemovePointer (KdPointerInfo *ki);

d241 1
a241 1
    int    modbit;
d247 7
a253 7
    char                  *name;
    Bool                  (*Init)    (KdKeyboardInfo *);
    Bool                  (*Enable)  (KdKeyboardInfo *);
    void                  (*Leds)    (KdKeyboardInfo *, int);
    void                  (*Bell)    (KdKeyboardInfo *, int, int, int);
    void                  (*Disable) (KdKeyboardInfo *);
    void                  (*Fini)    (KdKeyboardInfo *);
d259 19
a277 19
    DeviceIntPtr        dixdev;
    void                *closure;
    char                *name;
    char                *path;
    int                 inputClass;
    char                *xkbRules;
    char                *xkbModel;
    char                *xkbLayout;
    char                *xkbVariant;
    char                *xkbOptions;
    int                 LockLed;

    int                 minScanCode;
    int                 maxScanCode;

    int                 leds;
    int                 bellPitch;
    int                 bellDuration;
    InputOption         *options;
d279 2
a280 2
    KdKeyboardDriver    *driver;
    void                *driverPrivate;
d283 7
a289 7
void KdAddKeyboardDriver (KdKeyboardDriver *driver);
void KdRemoveKeyboardDriver (KdKeyboardDriver *driver);
KdKeyboardInfo *KdNewKeyboard (void);
void KdFreeKeyboard (KdKeyboardInfo *ki);
int KdAddConfigKeyboard (char *pointer);
int KdAddKeyboard (KdKeyboardInfo *ki);
void KdRemoveKeyboard (KdKeyboardInfo *ki);
d292 7
a298 7
    int		    (*Init) (void);
    void	    (*Enable) (void);
    Bool	    (*SpecialKey) (KeySym);
    void	    (*Disable) (void);
    void	    (*Fini) (void);
    void	    (*pollEvents) (void);
    void            (*Bell) (int, int, int);
d307 3
a309 3
    int		    horizontal;
    int		    vertical;
    int		    rate;
d311 1
a311 1
    int		    clock;  /* in KHz */
d313 4
a316 4
    int		    hfp;    /* front porch */
    int		    hbp;    /* back porch */
    int		    hblank; /* blanking */
    KdSyncPolarity  hpol;   /* polarity */
d318 4
a321 4
    int		    vfp;    /* front porch */
    int		    vbp;    /* back porch */
    int		    vblank; /* blanking */
    KdSyncPolarity  vpol;   /* polarity */
d324 2
a325 2
extern const KdMonitorTiming	kdMonitorTimings[];
extern const int		kdNumMonitorTimings;
d328 1
a328 1
    int	    matrix[2][3];
d344 2
a345 1
extern DevPrivateKeyRec	kdScreenPrivateKeyRec;
d348 9
a356 9
extern unsigned long	kdGeneration;
extern Bool		kdEnabled;
extern Bool		kdSwitchPending;
extern Bool		kdEmulateMiddleButton;
extern Bool		kdDisableZaphod;
extern Bool		kdAllowZap;
extern int		kdVirtualTerminal;
extern char		*kdSwitchCmd;
extern KdOsFuncs	*kdOsFuncs;
d366 1
a366 1
KdSetColormap (ScreenPtr pScreen);
d369 1
a369 1
KdEnableColormap (ScreenPtr pScreen);
d372 1
a372 1
KdDisableColormap (ScreenPtr pScreen);
d375 1
a375 1
KdInstallColormap (ColormapPtr pCmap);
d378 1
a378 1
KdUninstallColormap (ColormapPtr pCmap);
d381 1
a381 1
KdListInstalledColormaps (ScreenPtr pScreen, Colormap *pCmaps);
d384 1
a384 1
KdStoreColors (ColormapPtr pCmap, int ndef, xColorItem *pdefs);
d390 1
a390 1
KdDisableScreen (ScreenPtr pScreen);
d393 1
a393 1
KdDisableScreens (void);
d396 1
a396 1
KdEnableScreen (ScreenPtr pScreen);
d399 1
a399 1
KdEnableScreens (void);
d402 1
a402 1
KdSuspend (void);
d405 1
a405 1
KdResume (void);
d408 1
a408 1
KdProcessSwitch (void);
d410 1
a410 2
Rotation
KdAddRotation (Rotation a, Rotation b);
d412 1
a412 2
Rotation
KdSubRotation (Rotation a, Rotation b);
d415 1
a415 2
KdParseScreen (KdScreenInfo *screen,
	       char	    *arg);
d417 1
a417 2
KdPointerInfo *
KdParsePointer (char *arg);
d419 1
a419 2
KdKeyboardInfo *
KdParseKeyboard (char *arg);
d421 1
a421 2
char *
KdParseFindNext (char *cur, char *delim, char *save, char *last);
d424 1
a424 1
KdParseRgba (char *rgba);
d427 1
a427 1
KdUseMsg (void);
d430 1
a430 1
KdProcessArgument (int argc, char **argv, int i);
d433 1
a433 1
KdOsInit (KdOsFuncs *pOsFuncs);
d436 1
a436 1
KdOsAddInputDrivers (void);
d439 1
a439 1
KdAllocatePrivates (ScreenPtr pScreen);
d442 1
a442 1
KdCreateScreenResources (ScreenPtr pScreen);
d445 1
a445 1
KdCloseScreen (int index, ScreenPtr pScreen);
d448 1
a448 1
KdSaveScreen (ScreenPtr pScreen, int on);
d451 1
a451 1
KdScreenInit(int index, ScreenPtr pScreen, int argc, char **argv);
d454 3
a456 4
KdInitScreen (ScreenInfo    *pScreenInfo,
	      KdScreenInfo  *screen,
	      int	    argc,
	      char	    **argv);
d459 1
a459 4
KdInitCard (ScreenInfo	    *pScreenInfo,
	    KdCardInfo	    *card,
	    int		    argc,
	    char	    **argv);
d462 1
a462 3
KdInitOutput (ScreenInfo    *pScreenInfo,
	      int	    argc,
	      char	    **argv);
d465 1
a465 1
KdSetSubpixelOrder (ScreenPtr pScreen, Rotation randr);
d468 1
a468 1
KdBacktrace (int signum);
d471 1
a471 3
KdCardInfo *
KdCardInfoAdd (KdCardFuncs  *funcs,
	       void	    *closure);
d473 1
a473 2
KdCardInfo *
KdCardInfoLast (void);
d476 1
a476 1
KdCardInfoDispose (KdCardInfo *ci);
d478 1
a478 2
KdScreenInfo *
KdScreenInfoAdd (KdCardInfo *ci);
d481 1
a481 2
KdScreenInfoDispose (KdScreenInfo *si);

d485 1
a485 1
KdInitInput(void);
d487 1
a487 1
KdCloseInput(void);
d489 2
a490 2
void
KdAddPointerDriver(KdPointerDriver *);
d493 1
a493 4
KdAddKeyboardDriver(KdKeyboardDriver *);

Bool
KdRegisterFd (int fd, void (*read) (int fd, void *closure), void *closure);
d496 1
a496 1
KdUnregisterFds (void *closure, Bool do_close);
a498 1
KdUnregisterFd (void *closure, int fd, Bool do_close);
d500 2
a501 3
void
KdEnqueueKeyboardEvent(KdKeyboardInfo *ki, unsigned char scan_code,
                    unsigned char is_up);
d512 2
a513 1
KdEnqueuePointerEvent(KdPointerInfo *pi, unsigned long flags, int rx, int ry,
d517 2
a518 1
_KdEnqueuePointerEvent(KdPointerInfo *pi, int type, int x, int y, int z,
d522 1
a522 1
KdReleaseAllKeys (void);
d525 1
a525 1
KdSetLed (KdKeyboardInfo *ki, int led, Bool on);
d528 1
a528 1
KdSetPointerMatrix (KdPointerMatrix *pointer);
d531 3
a533 1
KdComputePointerMatrix (KdPointerMatrix *pointer, Rotation randr, int width, int height);
d536 1
a536 1
KdScreenToPointerCoords (int *x, int *y);
d539 3
a541 4
KdBlockHandler (int		screen,
		pointer		blockData,
		pointer		timeout,
		pointer		readmask);
d544 3
a546 4
KdWakeupHandler (int		screen,
		 pointer    	data,
		 unsigned long	result,
		 pointer	readmask);
d549 1
a549 1
KdDisableInput (void);
d552 1
a552 1
KdEnableInput (void);
d555 1
a555 1
ProcessInputEvents (void);
d558 1
a558 4
KdRingBell (KdKeyboardInfo      *ki,
            int                 volume,
            int                 pitch,
            int                 duration);
d561 3
a563 4
const KdMonitorTiming *
KdFindMode (KdScreenInfo    *screen,
	    Bool	    (*supported) (KdScreenInfo *,
					  const KdMonitorTiming *));
d566 4
a569 4
KdTuneMode (KdScreenInfo    *screen,
	    Bool	    (*usable) (KdScreenInfo *),
	    Bool	    (*supported) (KdScreenInfo *,
					  const KdMonitorTiming *));
d573 10
a582 11
KdRandRGetInfo (ScreenPtr pScreen,
		int randr,
		Bool (*supported) (ScreenPtr pScreen,
				   const KdMonitorTiming *));

const KdMonitorTiming *
KdRandRGetTiming (ScreenPtr	    pScreen,
		  Bool		    (*supported) (ScreenPtr pScreen,
						  const KdMonitorTiming *),
		  int		    rate,
		  RRScreenSizePtr   pSize);
d587 1
a587 1
KdShadowFbAlloc (KdScreenInfo *screen, Bool rotate);
d590 1
a590 1
KdShadowFbFree (KdScreenInfo *screen);
d593 3
a595 1
KdShadowSet (ScreenPtr pScreen, int randr, ShadowUpdateProc update, ShadowWindowProc window);
d598 1
a598 1
KdShadowUnset (ScreenPtr pScreen);
d602 1
a602 1
InitCard (char *name);
d604 1
a604 1
#endif /* _KDRIVE_H_ */
@


1.8
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d2 1
a2 1
 * Copyright © 1999 Keith Packard
a389 3
KdSetRootClip (ScreenPtr pScreen, BOOL enable);

void
d503 2
@


1.7
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d345 3
a347 1
extern DevPrivateKey	kdScreenPrivateKey;
@


1.6
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d27 1
a28 1
#define NEED_EVENTS
d48 1
a48 3
#ifdef XKB
#include <X11/extensions/XKBstr.h>
#endif
a55 8
#ifndef KD_MAX_FB
#define KD_MAX_FB   FB_OVERLAY_MAX
#endif

#ifndef KD_MAX_CARD_ADDRESS
#define KD_MAX_CARD_ADDRESS 8
#endif

a57 18
/*
 * Configuration information per video card
 */

typedef struct _KdCardAttr {
    CARD32  io;
    CARD32  address[KD_MAX_CARD_ADDRESS];
    int	    naddr;

    /* PCI bus info */
    CARD16  vendorID;
    CARD16  deviceID;
    CARD8   domain;
    CARD8   bus;
    CARD8   slot;
    CARD8   func;
} KdCardAttr;

a60 1
    KdCardAttr		    attr;
a64 3

    Bool		    needSync;
    int			    lastMarker;
d103 1
a103 4
    KdFrameBuffer   fb[KD_MAX_FB];
    CARD8	*memory_base;
    unsigned long   memory_size;
    unsigned long   off_screen_base;
d131 2
a132 2
    void        (*getColors) (ScreenPtr, int, int, xColorItem *);
    void        (*putColors) (ScreenPtr, int, int, xColorItem *);
d145 1
a145 1
    int		    bytesPerPixel[KD_MAX_FB];
d149 1
a149 1
    ColormapPtr     pInstalledmap[KD_MAX_FB];         /* current colormap */
d190 1
d212 1
a212 1
    } heldEvent;         
a244 5
extern const KeySym       kdDefaultKeymap[KD_MAX_LENGTH * KD_MAX_WIDTH];
extern const int          kdDefaultKeymapWidth;
extern const CARD8        kdDefaultModMap[MAP_LENGTH];
extern const KeySymsRec   kdDefaultKeySyms;

a264 2
#ifdef XKB
    XkbDescPtr          xkb;
a269 1
#endif
a271 1
    CARD8               keyState[KD_KEY_COUNT/8];
a273 2
    CARD8               modmap[MAP_LENGTH];
    KeySymsRec          keySyms; 
a361 3
/* knoop.c */
extern GCOps		kdNoopOps;

d364 1
a364 1
KdSetColormap (ScreenPtr pScreen, int fb);
a383 8
/* kcurscol.c */
void
KdAllocateCursorPixels (ScreenPtr	pScreen,
			int		fb,
			CursorPtr	pCursor, 
			Pixel		*source,
			Pixel		*mask);

a420 3
char *
KdSaveString (char *str);

d476 1
a476 1
 
d482 1
a482 1
    
a485 1
	       KdCardAttr   *attr,
d542 1
a542 1
    
d562 1
a562 1
KdWakeupHandler (int		screen, 
a581 35
extern KdPointerDriver	LinuxMouseDriver;
extern KdPointerDriver	LinuxEvdevMouseDriver;
extern KdPointerDriver	Ps2MouseDriver;
extern KdPointerDriver	BusMouseDriver;
extern KdPointerDriver	MsMouseDriver;
extern KdPointerDriver	TsDriver;
extern KdKeyboardDriver	LinuxKeyboardDriver;
extern KdKeyboardDriver LinuxEvdevKeyboardDriver;
extern KdOsFuncs	LinuxFuncs;

extern KdPointerDriver	VxWorksMouseDriver;
extern KdKeyboardDriver	VxWorksKeyboardDriver;
extern KdOsFuncs	VxWorksFuncs;

extern KdPointerDriver	WsconsMouseDriver;
extern KdKeyboardDriver	WsconsKeyboardDriver;
extern KdOsFuncs	OpenBSDFuncs;

/* kmap.c */

#define KD_MAPPED_MODE_REGISTERS    0
#define KD_MAPPED_MODE_FRAMEBUFFER  1

void *
KdMapDevice (CARD32 addr, CARD32 size);

void
KdUnmapDevice (void *addr, CARD32 size);

void
KdSetMappedMode (CARD32 addr, CARD32 size, int mode);

void
KdResetMappedMode (CARD32 addr, CARD32 size, int mode);

d596 1
a596 1
KdRandRGetInfo (ScreenPtr pScreen, 
d598 1
a598 1
		Bool (*supported) (ScreenPtr pScreen, 
d603 1
a603 1
		  Bool		    (*supported) (ScreenPtr pScreen, 
d611 1
a611 1
KdShadowFbAlloc (KdScreenInfo *screen, int fb, Bool rotate);
d614 1
a614 1
KdShadowFbFree (KdScreenInfo *screen, int fb);
d618 1
a618 1
    
@


1.5
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d46 1
a51 2
extern WindowPtr    *WindowTable;

a115 24
typedef struct _KdOffscreenArea KdOffscreenArea;

typedef void (*KdOffscreenSaveProc) (ScreenPtr pScreen, KdOffscreenArea *area);

typedef enum _KdOffscreenState {
    KdOffscreenAvail,
    KdOffscreenRemovable,
    KdOffscreenLocked,
} KdOffscreenState;

struct _KdOffscreenArea {
    int			offset;
    int			save_offset;
    int			size;
    int			score;
    pointer		privData;
    
    KdOffscreenSaveProc save;

    KdOffscreenState	state;
    
   KdOffscreenArea	*next;
};

a182 2
    
    KdOffscreenArea *off_screen_areas;
a376 84
typedef struct _KaaTrapezoid {
    float tl, tr, ty;
    float bl, br, by;
} KaaTrapezoid;

typedef struct _KaaScreenInfo {
    int	        offsetAlign;
    int         pitchAlign;
    int		flags;

    int		(*markSync) (ScreenPtr pScreen);
    void	(*waitMarker) (ScreenPtr pScreen, int marker);

    Bool	(*PrepareSolid) (PixmapPtr	pPixmap,
				 int		alu,
				 Pixel		planemask,
				 Pixel		fg);
    void	(*Solid) (int x1, int y1, int x2, int y2);
    void	(*DoneSolid) (void);

    Bool	(*PrepareCopy) (PixmapPtr	pSrcPixmap,
				PixmapPtr	pDstPixmap,
				Bool		upsidedown,
				Bool		reverse,
				int		alu,
				Pixel		planemask);
    void	(*Copy) (int	srcX,
			 int	srcY,
			 int	dstX,
			 int	dstY,
			 int	width,
			 int	height);
    void	(*DoneCopy) (void);

    Bool        (*PrepareBlend) (int		op,
				 PicturePtr	pSrcPicture,
				 PicturePtr	pDstPicture,
				 PixmapPtr	pSrc,
				 PixmapPtr	pDst);
    void        (*Blend) (int	srcX,
			  int	srcY,
			  int	dstX,
			  int	dstY,
			  int	width,
			  int	height);
    void	(*DoneBlend) (void);

    Bool        (*CheckComposite) (int		op,
				   PicturePtr	pSrcPicture,
				   PicturePtr	pMaskPicture,
				   PicturePtr	pDstPicture);
    Bool        (*PrepareComposite) (int		op,
				     PicturePtr		pSrcPicture,
				     PicturePtr		pMaskPicture,
				     PicturePtr		pDstPicture,
				     PixmapPtr		pSrc,
				     PixmapPtr		pMask,
				     PixmapPtr		pDst);
    void        (*Composite) (int	srcX,
			     int	srcY,
			     int	maskX,
			     int	maskY,
			     int	dstX,
			     int	dstY,
			     int	width,
			     int	height);
    void	(*DoneComposite) (void);

    Bool	(*PrepareTrapezoids) (PicturePtr pDstPicture,
				      PixmapPtr pDst);
    void	(*Trapezoids) (KaaTrapezoid	 *traps,
			       int		 ntraps);
    void	(*DoneTrapezoids) (void);

    Bool        (*UploadToScreen) (PixmapPtr		pDst,
				   char			*src,
				   int			src_pitch);
    Bool        (*UploadToScratch) (PixmapPtr		pSrc,
				   PixmapPtr		pDst);
} KaaScreenInfoRec, *KaaScreenInfoPtr;

#define KAA_OFFSCREEN_PIXMAPS		(1 << 0)
#define KAA_OFFSCREEN_ALIGN_POT		(1 << 1)

d396 1
a396 1
extern Bool		kdDontZap;
a406 113
/* kaa.c */
Bool
kaaDrawInit (ScreenPtr	        pScreen,
	     KaaScreenInfoPtr   pScreenInfo);

void
kaaDrawFini (ScreenPtr	        pScreen);

void
kaaWrapGC (GCPtr pGC);

void
kaaUnwrapGC (GCPtr pGC);

/* kasync.c */
void
KdCheckFillSpans  (DrawablePtr pDrawable, GCPtr pGC, int nspans,
		   DDXPointPtr ppt, int *pwidth, int fSorted);

void
KdCheckSetSpans (DrawablePtr pDrawable, GCPtr pGC, char *psrc,
		 DDXPointPtr ppt, int *pwidth, int nspans, int fSorted);

void
KdCheckPutImage (DrawablePtr pDrawable, GCPtr pGC, int depth,
		 int x, int y, int w, int h, int leftPad, int format,
		 char *bits);

RegionPtr
KdCheckCopyArea (DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
		 int srcx, int srcy, int w, int h, int dstx, int dsty);

RegionPtr
KdCheckCopyPlane (DrawablePtr pSrc, DrawablePtr pDst, GCPtr pGC,
		  int srcx, int srcy, int w, int h, int dstx, int dsty,
		  unsigned long bitPlane);

void
KdCheckPolyPoint (DrawablePtr pDrawable, GCPtr pGC, int mode, int npt,
		  DDXPointPtr pptInit);

void
KdCheckPolylines (DrawablePtr pDrawable, GCPtr pGC,
		  int mode, int npt, DDXPointPtr ppt);

void
KdCheckPolySegment (DrawablePtr pDrawable, GCPtr pGC,
		    int nsegInit, xSegment *pSegInit);

void
KdCheckPolyRectangle (DrawablePtr pDrawable, GCPtr pGC, 
		      int nrects, xRectangle *prect);

void
KdCheckPolyArc (DrawablePtr pDrawable, GCPtr pGC, 
		int narcs, xArc *pArcs);

#define KdCheckFillPolygon	miFillPolygon

void
KdCheckPolyFillRect (DrawablePtr pDrawable, GCPtr pGC,
		     int nrect, xRectangle *prect);

void
KdCheckPolyFillArc (DrawablePtr pDrawable, GCPtr pGC, 
		    int narcs, xArc *pArcs);

void
KdCheckImageGlyphBlt (DrawablePtr pDrawable, GCPtr pGC,
		      int x, int y, unsigned int nglyph,
		      CharInfoPtr *ppci, pointer pglyphBase);

void
KdCheckPolyGlyphBlt (DrawablePtr pDrawable, GCPtr pGC,
		     int x, int y, unsigned int nglyph,
		     CharInfoPtr *ppci, pointer pglyphBase);

void
KdCheckPushPixels (GCPtr pGC, PixmapPtr pBitmap,
		   DrawablePtr pDrawable,
		   int w, int h, int x, int y);

void
KdCheckGetImage (DrawablePtr pDrawable,
		 int x, int y, int w, int h,
		 unsigned int format, unsigned long planeMask,
		 char *d);

void
KdCheckGetSpans (DrawablePtr pDrawable,
		 int wMax,
		 DDXPointPtr ppt,
		 int *pwidth,
		 int nspans,
		 char *pdstStart);

void
KdCheckCopyWindow (WindowPtr pWin, DDXPointRec ptOldOrg, RegionPtr prgnSrc);

void
KdCheckPaintKey(DrawablePtr  pDrawable,
		RegionPtr    pRegion,
		CARD32       pixel,
		int          layer);

void
KdCheckOverlayCopyWindow  (WindowPtr pWin, DDXPointRec ptOldOrg, RegionPtr prgnSrc);

void
KdScreenInitAsync (ScreenPtr pScreen);
    
extern const GCOps	kdAsyncPixmapGCOps;

a703 26
/* kpict.c */
void
KdPictureInitAsync (ScreenPtr pScreen);

#ifdef RENDER
void
KdCheckComposite (CARD8      op,
		  PicturePtr pSrc,
		  PicturePtr pMask,
		  PicturePtr pDst,
		  INT16      xSrc,
		  INT16      ySrc,
		  INT16      xMask,
		  INT16      yMask,
		  INT16      xDst,
		  INT16      yDst,
		  CARD16     width,
		  CARD16     height);

void
KdCheckRasterizeTrapezoid(PicturePtr	pMask,
			  xTrapezoid	*trap,
			  int		x_off,
			  int		y_off);
#endif

a715 33

/* ktest.c */
Bool
KdFrameBufferValid (CARD8 *base, int size);

int
KdFrameBufferSize (CARD8 *base, int max);

/* koffscreen.c */

Bool
KdOffscreenInit (ScreenPtr pScreen);

KdOffscreenArea *
KdOffscreenAlloc (ScreenPtr pScreen, int size, int align,
		  Bool locked,
		  KdOffscreenSaveProc save,
		  pointer privData);

KdOffscreenArea *
KdOffscreenFree (ScreenPtr pScreen, KdOffscreenArea *area);

void
KdOffscreenMarkUsed (PixmapPtr pPixmap);

void
KdOffscreenSwapOut (ScreenPtr pScreen);

void
KdOffscreenSwapIn (ScreenPtr pScreen);

void
KdOffscreenFini (ScreenPtr pScreen);
@


1.4
log
@Adapt OpenBSD/wscons kdrive drivers to changes in xserver 1.4.
Still not working but at least building again.
@
text
@d501 1
a501 1
extern int		kdScreenPrivateIndex;
d513 3
a515 3
				  (pScreen)->devPrivates[kdScreenPrivateIndex].ptr)
#define KdSetScreenPriv(pScreen,v) ((pScreen)->devPrivates[kdScreenPrivateIndex].ptr = \
				    (pointer) v)
a614 17
KdCheckSaveAreas (PixmapPtr	pPixmap,
		  RegionPtr	prgnSave,
		  int		xorg,
		  int		yorg,
		  WindowPtr	pWin);

void
KdCheckRestoreAreas (PixmapPtr	pPixmap,
		     RegionPtr	prgnSave,
		     int	xorg,
		     int    	yorg,
		     WindowPtr	pWin);

void
KdCheckPaintWindow (WindowPtr pWin, RegionPtr pRegion, int what);

void
d835 4
a838 1
    
@


1.3
log
@merge xserver 1.4, 1st pass
@
text
@d894 2
a895 2
extern KdMouseFuncs	WsconsMouseFuncs;
extern KdKeyboardFuncs	WsconsKeyboardFuncs;
@


1.2
log
@required bits to build Xwscons
@
text
@a1 2
 * Id: kdrive.h,v 1.1 1999/11/02 03:54:46 keithp Exp $
 *
a21 1
/* $RCSId: xc/programs/Xserver/hw/kdrive/kdrive.h,v 1.29 2002/11/13 16:37:39 keithp Exp $ */
d47 4
d67 2
a215 3
#ifdef FB_OLD_SCREEN
    miBSFuncRec	    BackingStoreFuncs;
#endif
d218 1
a218 1
typedef enum _kdMouseState {
d229 3
a231 1
} KdMouseState;
d233 44
a276 1
#define KD_MAX_BUTTON  7
d278 2
a279 19
typedef struct _KdMouseInfo {
    struct _KdMouseInfo	*next;
    void		*driver;
    void		*closure;
    char		*name;
    char		*prot;
    char		map[KD_MAX_BUTTON];
    int			nbutton;
    Bool		emulateMiddleButton;
    unsigned long	emulationTimeout;
    Bool		timeoutPending;
    KdMouseState	mouseState;
    Bool		eventHeld;
    xEvent		heldEvent;
    unsigned char	buttonState;
    int			emulationDx, emulationDy;
    int			inputType;
    Bool		transformCoordinates;
} KdMouseInfo;
d281 2
a282 1
extern KdMouseInfo	*kdMouseInfo;
d286 8
a293 3
KdMouseInfo *KdMouseInfoAdd (void);
void	    KdMouseInfoDispose (KdMouseInfo *mi);
void	    KdParseMouse (char *);
d295 60
a354 4
typedef struct _KdMouseFuncs {
    Bool    	    (*Init) (void);
    void	    (*Fini) (void);
} KdMouseFuncs;
d356 7
a362 8
typedef struct _KdKeyboardFuncs {
    void	    (*Load) (void);
    int		    (*Init) (void);
    void	    (*Leds) (int);
    void	    (*Bell) (int, int, int);
    void	    (*Fini) (void);
    int		    LockLed;
} KdKeyboardFuncs;
d371 1
d400 1
a400 1
typedef struct _KdMouseMatrix {
d402 1
a402 1
} KdMouseMatrix;
d721 8
a728 2
void
KdParseMouse (char *arg);
d742 3
d779 3
d804 1
a804 1
KdInitInput(KdMouseFuncs *, KdKeyboardFuncs *);
d807 1
a807 1
KdAddMouseDriver(KdMouseFuncs *);
d809 2
a810 2
int
KdAllocInputType (void);
d813 1
a813 1
KdRegisterFd (int type, int fd, void (*read) (int fd, void *closure), void *closure);
d816 1
a816 3
KdRegisterFdEnableDisable (int fd, 
			   int (*enable) (int fd, void *closure),
			   void (*disable) (int fd, void *closure));
d819 1
a819 1
KdUnregisterFds (int type, Bool do_close);
d822 2
a823 2
KdEnqueueKeyboardEvent(unsigned char	scan_code,
		       unsigned char	is_up);
d830 1
d834 2
a835 1
KdEnqueueMouseEvent(KdMouseInfo *mi, unsigned long flags, int x, int y);
d838 2
a839 1
KdEnqueueMotionEvent (KdMouseInfo *mi, int x, int y);
d845 1
a845 1
KdSetLed (int led, Bool on);
d848 1
a848 1
KdSetMouseMatrix (KdMouseMatrix *matrix);
d851 1
a851 1
KdComputeMouseMatrix (KdMouseMatrix *matrix, Rotation randr, int width, int height);
d874 14
a887 9
extern KdMouseFuncs	LinuxMouseFuncs;
extern KdMouseFuncs	LinuxEvdevFuncs;
extern KdMouseFuncs	Ps2MouseFuncs;
extern KdMouseFuncs	BusMouseFuncs;
extern KdMouseFuncs	MsMouseFuncs;
#ifdef TOUCHSCREEN
extern KdMouseFuncs	TsFuncs;
#endif
extern KdKeyboardFuncs	LinuxKeyboardFuncs;
d890 2
a891 2
extern KdMouseFuncs	VxWorksMouseFuncs;
extern KdKeyboardFuncs	VxWorksKeyboardFuncs;
@


1.1
log
@Initial revision
@
text
@d786 4
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
d24 1
a49 4
#ifdef XKB
#include <X11/extensions/XKBstr.h>
#endif

a65 2
#define Status int

d213 3
d218 1
a218 1
typedef enum _kdPointerState {
d229 1
a229 3
} KdPointerState;

#define KD_MAX_BUTTON  32
d231 1
a231 44
#define KD_KEYBOARD 1
#define KD_MOUSE 2
#define KD_TOUCHSCREEN 3

typedef struct _KdPointerInfo KdPointerInfo;

typedef struct _KdPointerDriver {
    char                    *name;
    Status                  (*Init)    (KdPointerInfo *);
    Status                  (*Enable)  (KdPointerInfo *);
    void                    (*Disable) (KdPointerInfo *);
    void                    (*Fini)    (KdPointerInfo *);
    struct _KdPointerDriver *next;
} KdPointerDriver;

struct _KdPointerInfo {
    DeviceIntPtr          dixdev;
    char                  *name;
    char                  *path;
    InputOption           *options;
    int                   inputClass;

    CARD8                 map[KD_MAX_BUTTON + 1];
    int                   nButtons;
    int                   nAxes;

    Bool                  emulateMiddleButton;
    unsigned long         emulationTimeout;
    int                   emulationDx, emulationDy;

    Bool                  timeoutPending;
    KdPointerState        mouseState;
    Bool                  eventHeld;
    struct {
        int type;
        int x;
        int y;
        int z;
        int flags;
        int absrel;
    } heldEvent;         
    unsigned char         buttonState;
    Bool                  transformCoordinates;
    int                   pressureThreshold;
d233 19
a251 2
    KdPointerDriver       *driver;
    void                  *driverPrivate;
d253 1
a253 2
    struct _KdPointerInfo *next;
};
d257 3
a259 7
void KdAddPointerDriver (KdPointerDriver *driver);
void KdRemovePointerDriver (KdPointerDriver *driver);
KdPointerInfo *KdNewPointer (void);
void KdFreePointer (KdPointerInfo *);
int KdAddPointer (KdPointerInfo *ki);
int KdAddConfigPointer (char *pointer);
void KdRemovePointer (KdPointerInfo *ki);
d261 4
d266 8
a273 68
#define KD_KEY_COUNT 248
#define KD_MIN_KEYCODE  8
#define KD_MAX_KEYCODE  255
#define KD_MAX_WIDTH    4
#define KD_MAX_LENGTH   (KD_MAX_KEYCODE - KD_MIN_KEYCODE + 1)

typedef struct {
    KeySym modsym;
    int    modbit;
} KdKeySymModsRec;

extern const KeySym       kdDefaultKeymap[KD_MAX_LENGTH * KD_MAX_WIDTH];
extern const int          kdDefaultKeymapWidth;
extern const CARD8        kdDefaultModMap[MAP_LENGTH];
extern const KeySymsRec   kdDefaultKeySyms;

typedef struct _KdKeyboardInfo KdKeyboardInfo;

typedef struct _KdKeyboardDriver {
    char                  *name;
    Bool                  (*Init)    (KdKeyboardInfo *);
    Bool                  (*Enable)  (KdKeyboardInfo *);
    void                  (*Leds)    (KdKeyboardInfo *, int);
    void                  (*Bell)    (KdKeyboardInfo *, int, int, int);
    void                  (*Disable) (KdKeyboardInfo *);
    void                  (*Fini)    (KdKeyboardInfo *);
    struct _KdKeyboardDriver *next;
} KdKeyboardDriver;

struct _KdKeyboardInfo {
    struct _KdKeyboardInfo *next;
    DeviceIntPtr        dixdev;
    void                *closure;
    char                *name;
    char                *path;
    int                 inputClass;
#ifdef XKB
    XkbDescPtr          xkb;
    char                *xkbRules;
    char                *xkbModel;
    char                *xkbLayout;
    char                *xkbVariant;
    char                *xkbOptions;
#endif
    int                 LockLed;

    CARD8               keyState[KD_KEY_COUNT/8];
    int                 minScanCode;
    int                 maxScanCode;
    CARD8               modmap[MAP_LENGTH];
    KeySymsRec          keySyms; 

    int                 leds;
    int                 bellPitch;
    int                 bellDuration;
    InputOption         *options;

    KdKeyboardDriver    *driver;
    void                *driverPrivate;
};

void KdAddKeyboardDriver (KdKeyboardDriver *driver);
void KdRemoveKeyboardDriver (KdKeyboardDriver *driver);
KdKeyboardInfo *KdNewKeyboard (void);
void KdFreeKeyboard (KdKeyboardInfo *ki);
int KdAddConfigKeyboard (char *pointer);
int KdAddKeyboard (KdKeyboardInfo *ki);
void KdRemoveKeyboard (KdKeyboardInfo *ki);
a281 1
    void            (*Bell) (int, int, int);
d310 1
a310 1
typedef struct _KdPointerMatrix {
d312 1
a312 1
} KdPointerMatrix;
d631 2
a632 8
KdPointerInfo *
KdParsePointer (char *arg);

KdKeyboardInfo *
KdParseKeyboard (char *arg);

char *
KdParseFindNext (char *cur, char *delim, char *save, char *last);
a645 3
void
KdOsAddInputDrivers (void);

a679 3

void
KdBacktrace (int signum);
d702 1
a702 1
KdInitInput(void);
d705 1
a705 1
KdAddPointerDriver(KdPointerDriver *);
d707 2
a708 2
void
KdAddKeyboardDriver(KdKeyboardDriver *);
d711 1
a711 1
KdRegisterFd (int fd, void (*read) (int fd, void *closure), void *closure);
d714 3
a716 1
KdUnregisterFds (void *closure, Bool do_close);
d719 1
a719 1
KdUnregisterFd (void *closure, int fd, Bool do_close);
d722 2
a723 2
KdEnqueueKeyboardEvent(KdKeyboardInfo *ki, unsigned char scan_code,
                    unsigned char is_up);
a729 1
#define KD_BUTTON_8	0x80
d733 1
a733 2
KdEnqueuePointerEvent(KdPointerInfo *pi, unsigned long flags, int rx, int ry,
                      int rz);
d736 1
a736 2
_KdEnqueuePointerEvent(KdPointerInfo *pi, int type, int x, int y, int z,
                       int b, int absrel, Bool force);
d742 1
a742 1
KdSetLed (KdKeyboardInfo *ki, int led, Bool on);
d745 1
a745 1
KdSetPointerMatrix (KdPointerMatrix *pointer);
d748 1
a748 1
KdComputePointerMatrix (KdPointerMatrix *pointer, Rotation randr, int width, int height);
d771 9
a779 14
void
KdRingBell (KdKeyboardInfo      *ki,
            int                 volume,
            int                 pitch,
            int                 duration);

extern KdPointerDriver	LinuxMouseDriver;
extern KdPointerDriver	LinuxEvdevMouseDriver;
extern KdPointerDriver	Ps2MouseDriver;
extern KdPointerDriver	BusMouseDriver;
extern KdPointerDriver	MsMouseDriver;
extern KdPointerDriver	TsDriver;
extern KdKeyboardDriver	LinuxKeyboardDriver;
extern KdKeyboardDriver LinuxEvdevKeyboardDriver;
d782 2
a783 2
extern KdPointerDriver	VxWorksMouseDriver;
extern KdKeyboardDriver	VxWorksKeyboardDriver;
@

