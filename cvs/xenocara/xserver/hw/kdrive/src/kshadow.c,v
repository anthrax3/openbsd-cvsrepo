head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.6
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.16
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.05.29.12.02.37;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	s0SI41sEunLdyFfd;

1.5
date	2012.06.10.13.21.23;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.50;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.06;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.30;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.21.57;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.21.57;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.04.16;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 * Copyright Â© 1999 Keith Packard
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Keith Packard not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * KEITH PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_CONFIG_H
#include <kdrive-config.h>
#endif
#include "kdrive.h"

Bool
KdShadowFbAlloc(KdScreenInfo * screen, Bool rotate)
{
    int paddedWidth;
    void *buf;
    int width = rotate ? screen->height : screen->width;
    int height = rotate ? screen->width : screen->height;
    int bpp = screen->fb.bitsPerPixel;

    /* use fb computation for width */
    paddedWidth = ((width * bpp + FB_MASK) >> FB_SHIFT) * sizeof(FbBits);
    buf = xallocarray(paddedWidth, height);
    if (!buf)
        return FALSE;
    if (screen->fb.shadow)
        free(screen->fb.frameBuffer);
    screen->fb.shadow = TRUE;
    screen->fb.frameBuffer = buf;
    screen->fb.byteStride = paddedWidth;
    screen->fb.pixelStride = paddedWidth * 8 / bpp;
    return TRUE;
}

void
KdShadowFbFree(KdScreenInfo * screen)
{
    if (screen->fb.shadow) {
        free(screen->fb.frameBuffer);
        screen->fb.frameBuffer = 0;
        screen->fb.shadow = FALSE;
    }
}

Bool
KdShadowSet(ScreenPtr pScreen, int randr, ShadowUpdateProc update,
            ShadowWindowProc window)
{
    KdScreenPriv(pScreen);
    KdScreenInfo *screen = pScreenPriv->screen;

    shadowRemove(pScreen, pScreen->GetScreenPixmap(pScreen));
    if (screen->fb.shadow) {
        return shadowAdd(pScreen, pScreen->GetScreenPixmap(pScreen),
                         update, window, randr, 0);
    }
    return TRUE;
}

void
KdShadowUnset(ScreenPtr pScreen)
{
    shadowRemove(pScreen, pScreen->GetScreenPixmap(pScreen));
}
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d39 1
a39 1
    buf = malloc(paddedWidth * height);
@


1.4
log
@Update to xserver 1.11.2
@
text
@d29 1
a29 1
KdShadowFbAlloc (KdScreenInfo *screen, Bool rotate)
d31 5
a35 5
    int	    paddedWidth;
    void    *buf;
    int	    width = rotate ? screen->height : screen->width;
    int	    height = rotate ? screen->width : screen->height;
    int	    bpp = screen->fb.bitsPerPixel;
d38 1
a38 1
    paddedWidth = ((width * bpp + FB_MASK) >> FB_SHIFT) * sizeof (FbBits);
d41 1
a41 1
	return FALSE;
d43 1
a43 1
	free(screen->fb.frameBuffer);
d52 1
a52 1
KdShadowFbFree (KdScreenInfo *screen)
d54 4
a57 5
    if (screen->fb.shadow)
    {
	free(screen->fb.frameBuffer);
	screen->fb.frameBuffer = 0;
	screen->fb.shadow = FALSE;
d62 2
a63 1
KdShadowSet (ScreenPtr pScreen, int randr, ShadowUpdateProc update, ShadowWindowProc window)
d68 4
a71 5
    shadowRemove (pScreen, pScreen->GetScreenPixmap(pScreen));
    if(screen->fb.shadow)
    {
	return shadowAdd (pScreen, pScreen->GetScreenPixmap(pScreen),
			  update, window, randr, 0);
d77 1
a77 1
KdShadowUnset (ScreenPtr pScreen)
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d2 1
a2 1
 * Copyright © 1999 Keith Packard
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d39 1
a39 1
    buf = xalloc (paddedWidth * height);
d43 1
a43 1
	xfree (screen->fb.frameBuffer);
d56 1
a56 1
	xfree (screen->fb.frameBuffer);
@


1.1
log
@Initial revision
@
text
@a1 2
 * $RCSId: $
 *
d29 1
a29 1
KdShadowFbAlloc (KdScreenInfo *screen, int fb, Bool rotate)
d35 1
a35 1
    int	    bpp = screen->fb[fb].bitsPerPixel;
d42 6
a47 6
    if (screen->fb[fb].shadow)
	xfree (screen->fb[fb].frameBuffer);
    screen->fb[fb].shadow = TRUE;
    screen->fb[fb].frameBuffer = buf;
    screen->fb[fb].byteStride = paddedWidth;
    screen->fb[fb].pixelStride = paddedWidth * 8 / bpp;
d52 1
a52 1
KdShadowFbFree (KdScreenInfo *screen, int fb)
d54 1
a54 1
    if (screen->fb[fb].shadow)
d56 3
a58 3
	xfree (screen->fb[fb].frameBuffer);
	screen->fb[fb].frameBuffer = 0;
	screen->fb[fb].shadow = FALSE;
a66 1
    int	 fb;
d69 1
a69 1
    for (fb = 0; fb < KD_MAX_FB && screen->fb[fb].depth; fb++)
d71 2
a72 3
	if (screen->fb[fb].shadow)
            return shadowAdd (pScreen, pScreen->GetScreenPixmap(pScreen),
                              update, window, randr, 0);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
@

