head	1.10;
access;
symbols
	OPENBSD_5_7:1.9.0.8
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.10
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2015.04.18.10.22.11;	author matthieu;	state dead;
branches;
next	1.9;
commitid	OR7BzFIxidTrshaf;

1.9
date	2013.06.07.17.28.48;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.10.13.21.23;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.05.13.32.50;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2010.12.05.15.36.06;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.27.19.02.30;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2007.12.23.14.28.10;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.27.00.53.47;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.25.19.10.43;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.25.15.33.32;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Bury kdriver/wscons code in the Attic.
It has never worked and there is no plan to finish it.
@
text
@/* $OpenBSD: openbsd.c,v 1.9 2013/06/07 17:28:48 matthieu Exp $ */
/*
 * Copyright (c) 2007 Matthieu Herrb <matthieu@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_CONFIG_H
#include <kdrive-config.h>
#endif
#define XK_PUBLISHING
#include <X11/keysym.h>
#include <X11/Xdefs.h>

#include <errno.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/ioctl.h>
#include <dev/wscons/wsconsio.h>

#include "kdrive.h"

int WsconsConsoleFd;
int OpenBSDApmFd = -1;
static Bool enabled;

#define WSCONS_DEV "/dev/ttyC0"

#define DBG(x) ErrorF x

static int
OpenBSDInit(void)
{
	DBG(("OpenBSDInit\n"));
	WsconsConsoleFd = open(WSCONS_DEV, O_RDWR);

	if (WsconsConsoleFd == -1) {
		FatalError("OpenBSDInit: error opening %s (%d)\n",
		    WSCONS_DEV, errno);
	}
	return 1;
}


static void
OpenBSDEnable(void)
{
	DBG(("OpenBSDEnable\n"));
	if (enabled)
		return;
	if (kdSwitchPending) {
		kdSwitchPending = FALSE;
	}
	/* Open / init APM */
	/* Get a VT */
	/* Switch to graphics mode */
	enabled = TRUE;
}


static Bool
OpenBSDSpecialKey(KeySym sym)
{
	DBG(("OpenBSDSpecialKey\n"));
	/* Initiate VT switch if needed */
	return FALSE;
}

static void
OpenBSDDisable(void)
{
	DBG(("OpenBSDDisable\n"));
	enabled = FALSE;
	/* Back to text mode */
	/* Remove apm hooks */
}

static void
OpenBSDFini(void)
{
	int mode = WSDISPLAYIO_MODE_EMUL;

	DBG(("OpenBSDFini\n"));
	if (WsconsConsoleFd < 0)
		return;

	/* switch back to initial VT */
	if (ioctl(WsconsConsoleFd, WSDISPLAYIO_SMODE, &mode) == -1) {
		ErrorF("WSDISPLAYIO_SMODE(EMUL): %s\n", strerror(errno));
	}
}

static void
OpenBSDBell(int volume, int pitch, int duration)
{
	struct wskbd_bell_data wsb;

	DBG(("OpenBSDBell volume %d pictch %d duration %d\n",
		volume, pitch, duration));
	wsb.which = WSKBD_BELL_DOALL;
	wsb.pitch = pitch;
	wsb.period = duration;
	wsb.volume = volume;
	if (ioctl(WsconsConsoleFd, WSKBDIO_COMPLEXBELL, &wsb) == -1)
		ErrorF("WsconsKeyboardBell: %s\n", strerror(errno));
}

KdOsFuncs OpenBSDFuncs = {
	OpenBSDInit,
	OpenBSDEnable,
	OpenBSDSpecialKey,
	OpenBSDDisable,
	OpenBSDFini,
	OpenBSDBell,
};

void
OsVendorInit(void)
{
	DBG(("OsVendorInit\n"));
	KdOsInit(&OpenBSDFuncs);
}
@


1.9
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d1 1
a1 1
/* $OpenBSD: openbsd.c,v 1.4 2007/12/23 14:28:10 matthieu Exp $ */
@


1.8
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.7
log
@Update to xserver 1.11.2
@
text
@@


1.6
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@@


1.5
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@@


1.4
log
@Adapt OpenBSD/wscons kdrive drivers to changes in xserver 1.4.
Still not working but at least building again.
@
text
@d1 1
a1 1
/* $OpenBSD: openbsd.c,v 1.3 2007/05/27 00:53:47 matthieu Exp $ */
a31 1
#include "kopenbsd.h"
a53 22
Bool
OpenBSDFindPci(CARD16 vendor, CARD16 device, CARD32 count, KdCardAttr *attr)
{
	DBG(("OpenBSDFindPci %04hx %04hx\n", vendor, device));
	/* Find a PCI device matching vendor/device */
	/* return KdCardAttr */
	/* XXX */
	attr->bus = 0;
	attr->slot = 0;
	attr->func = 0;
	
	return TRUE;
}

unsigned char *
OpenBSDGetPciCfg(KdCardAttr *attr)
{
	/* Get Config registers for card at attr */
	DBG(("OpenBSDGetPciCfg %d:%d:%d\n", 
		attr->bus, attr->slot, attr->func));
	return NULL;
}
@


1.3
log
@Force restore of text mode on exit.
@
text
@d1 1
a1 1
/* $OpenBSD: openbsd.c,v 1.2 2007/05/25 19:10:43 matthieu Exp $ */
d27 2
a33 1
static int vtno;
a35 1
static int activeVT;
d126 15
d147 1
a147 1
	0
@


1.2
log
@Start filling the holes.
@
text
@d1 1
a1 1
/* $OpenBSD: openbsd.c,v 1.1 2007/05/25 15:33:32 matthieu Exp $ */
d114 2
d119 1
d121 3
@


1.1
log
@Add skeleton implentation of Xwscons a kdrive based X server for
wscons's dumb framebuffer mode. This is an empty shell for now.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d24 5
d38 4
d45 7
a51 1
	WsconsConsoleFd = -1;
d58 1
d61 6
a66 1
	return FALSE;
d73 2
d81 1
d97 1
d105 1
d114 1
d132 1
@

