head	1.7;
access;
symbols
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.24
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.22
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.20
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.18
	OPENBSD_5_0:1.5.0.16
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.14
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.10
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4;
locks; strict;
comment	@ * @;


1.7
date	2015.04.18.10.22.11;	author matthieu;	state dead;
branches;
next	1.6;
commitid	OR7BzFIxidTrshaf;

1.6
date	2014.02.15.15.00.28;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2007.12.23.14.28.10;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.27.05.17.06;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.27.00.55.09;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.25.19.10.43;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.25.15.33.32;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Bury kdriver/wscons code in the Attic.
It has never worked and there is no plan to finish it.
@
text
@/* $OpenBSD: mouse.c,v 1.6 2014/02/15 15:00:28 matthieu Exp $ */
/*
 * Copyright (c) 2007 Matthieu Herrb <matthieu@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_CONFIG_H
#include <kdrive-config.h>
#endif
#define NEED_EVENTS
#include <errno.h>
#include <termios.h>
#include <X11/X.h>
#include <X11/Xproto.h>
#include <dev/wscons/wsconsio.h>

#include "inputstr.h"
#include "scrnintstr.h"
#include "kdrive.h"

#define DBG(x) ErrorF x

#define NUMEVENTS 64

static unsigned long kdbuttons[] = {
	KD_BUTTON_1,
	KD_BUTTON_2,
	KD_BUTTON_3
};

static void
wsmouseRead(int mousePort, void *closure)
{
	KdPointerInfo *pi = closure;
	static struct wscons_event eventList[NUMEVENTS];
	struct wscons_event *event = eventList;
	int n;

	n = read(mousePort, &eventList, 
	    NUMEVENTS * sizeof(struct wscons_event));
	if (n <= 0)
		return;
	n /= sizeof(struct wscons_event);
	while (n--) {
		int dx = 0, dy = 0;
		unsigned long flags = 0;
		
		switch(event->type) {
		case WSCONS_EVENT_MOUSE_UP:
			flags &= ~kdbuttons[event->value];
			break;
		case WSCONS_EVENT_MOUSE_DOWN:
			flags |= kdbuttons[1<<event->value];
			break;
		case WSCONS_EVENT_MOUSE_DELTA_X:
			dx = event->value;
			flags |= KD_MOUSE_DELTA;
			break;
		case WSCONS_EVENT_MOUSE_DELTA_Y:
			dy = event->value;
			flags |= KD_MOUSE_DELTA;
			break;
		case WSCONS_EVENT_MOUSE_ABSOLUTE_X:
			dx = event->value;
			break;
		case WSCONS_EVENT_MOUSE_ABSOLUTE_Y:
			dy = event->value;
			break;
		default:
			ErrorF("wsmouseRead: bad wsmouse event type=%d\n",
			    event->type);
			continue;
		} /* case */
		KdEnqueuePointerEvent(pi, flags, dx, dy, 0);
	}	
}

int MouseInputType;

static Status
wsmouseInit(KdPointerInfo *pi)
{
	const char *device = "/dev/wsmouse";

	DBG(("wsmouseInit\n"));

	if (pi->path == NULL)
		pi->path = strdup(device);

	if (pi->name == NULL)
		pi->name = strdup("Wscons mouse");
	return Success;
}

static Status
wsmouseEnable(KdPointerInfo *pi)
{
	int fd;

	DBG(("wsmouseEnable\n"));

	if (pi == NULL || pi->driverPrivate == NULL || pi->path == NULL)
		return BadImplementation;

	fd = open(pi->path, O_RDWR | O_NONBLOCK);
	if (fd < 0)
		return BadMatch;

	if (!KdRegisterFd(fd, wsmouseRead, pi)) {
		close(fd);
		return BadAlloc;
	}
	pi->driverPrivate = (void *)(intptr_t)fd;
	return Success;
}

static void
wsmouseDisable(KdPointerInfo *pi)
{
	DBG(("wsmouseDisable\n"));
	KdUnregisterFd(pi, (int)(intptr_t)pi->driverPrivate, TRUE);
}
		
static void
wsmouseFini(KdPointerInfo *pi)
{
	DBG(("wsmouseFini\n"));
}

KdPointerDriver WsconsMouseDriver = {
	"mouse",
	wsmouseInit,
	wsmouseEnable,
	wsmouseDisable,
	wsmouseFini,
	NULL,
};
@


1.6
log
@Fix build of (disabled) wsfb kdrive backend.
@
text
@d1 1
a1 1
/* $OpenBSD: mouse.c,v 1.5 2007/12/23 14:28:10 matthieu Exp $ */
@


1.5
log
@Adapt OpenBSD/wscons kdrive drivers to changes in xserver 1.4.
Still not working but at least building again.
@
text
@d1 1
a1 1
/* $OpenBSD: mouse.c,v 1.4 2007/05/27 05:17:06 matthieu Exp $ */
d94 1
a94 1
	char *device = "/dev/wsmouse";
d99 1
a99 1
		pi->path = KdSaveString(device);
d102 1
a102 1
		pi->name = KdSaveString("Wscons mouse");
d124 1
a124 1
	pi->driverPrivate = (void *)fd;
d132 1
a132 1
	KdUnregisterFd(pi, (int)pi->driverPrivate, TRUE);
@


1.4
log
@- rename some functions for consistancy
- fill more code
@
text
@d1 1
a1 1
/* $OpenBSD: mouse.c,v 1.3 2007/05/27 00:55:09 matthieu Exp $ */
d45 1
d85 1
a85 1
		KdEnqueueMouseEvent(kdMouseInfo, flags, dx, dy);
d91 2
a92 2
static Bool
wsmouseInit(void)
a94 1
	int port;
d98 2
a99 2
	if (!MouseInputType)
		MouseInputType = KdAllocInputType();
d101 22
a122 4
	port = open(device, O_RDWR | O_NONBLOCK);
	if (port == -1) {
		ErrorF("wsmouseInit: couldn't open %s (%d)\n", device, errno);
		return FALSE;
d124 9
a132 1
	return KdRegisterFd(MouseInputType, port, wsmouseRead, NULL);
d136 1
a136 1
wsmouseFini(void)
a137 2
	KdMouseInfo *mi;

a138 1
	KdUnregisterFds(MouseInputType, TRUE);
d141 2
a142 1
KdMouseFuncs WsconsMouseFuncs = {
d144 4
a147 1
	wsmouseFini
@


1.3
log
@Avoid using an unitialized variable as mouse info.
@
text
@d1 1
a1 1
/* $OpenBSD: mouse.c,v 1.2 2007/05/25 19:10:43 matthieu Exp $ */
d32 2
d43 1
a43 1
MouseRead(int mousePort, void *closure)
d80 1
a80 1
			ErrorF("MouseRead: bad wsmouse event type=%d\n",
d91 1
a91 1
MouseInit(void)
d96 2
d103 1
a103 1
		ErrorF("MouseInit: couldn't open %s (%d)\n", device, errno);
d106 1
a106 1
	return KdRegisterFd(MouseInputType, port, MouseRead, NULL);
d110 1
a110 1
MouseFini(void)
d113 2
a114 1
	
d119 2
a120 2
	MouseInit,
	MouseFini
@


1.2
log
@Start filling the holes.
@
text
@d1 1
a1 1
/* $OpenBSD: mouse.c,v 1.1 2007/05/25 15:33:32 matthieu Exp $ */
a44 1
	KdMouseInfo *mi;
d82 1
a82 1
		KdEnqueueMouseEvent(mi, flags, dx, dy);
@


1.1
log
@Add skeleton implentation of Xwscons a kdrive based X server for
wscons's dumb framebuffer mode. This is an empty shell for now.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d26 2
d32 8
d43 2
d46 1
a46 2
	int dx, dy;
	unsigned long flags;
d48 37
a84 6
	/* flags: 
	   KD_MOUSE_DELTA
	   KD_BUTTON_{1,2,3} */
	/* Read and post mouse events */
	KdEnqueueMouseEvent(mi, flags, dx, dy);
	
a87 8
char *kdefaultMouse[] = {
	"/dev/wsmouse",
	"/dev/wsmouse0",
	"/dev/tty00",
	"/dev/tty01"
};

#define NUM_DEFAULT_MOUSE    (sizeof (kdefaultMouse) / sizeof (kdefaultMouse[0]))
d92 3
d98 6
a103 1
	return TRUE;
d111 1
a111 8
	KdUnregisterFds(MouseInputType, NULL);
	for (mi = kdMouseInfo; mi != NULL;  mi = mi->next) {
		if (mi->inputType == MouseInputType) {
			free(mi->driver);
			mi->driver = NULL;
			mi->inputType = 0;
		}
	}
@

