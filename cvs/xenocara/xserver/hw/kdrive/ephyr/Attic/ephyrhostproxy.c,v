head	1.4;
access;
symbols
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.14
	OPENBSD_5_0:1.1.0.12
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.8
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.05.02.19.27.48;	author matthieu;	state dead;
branches;
next	1.3;

1.3
date	2013.06.07.17.28.48;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.10.13.21.23;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.18;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@/*
 * Xephyr - A kdrive X server thats runs in a host X window.
 *          Authored by Matthew Allum <mallum@@openedhand.com>
 * 
 * Copyright Â© 2007 OpenedHand Ltd 
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of OpenedHand Ltd not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission. OpenedHand Ltd makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * OpenedHand Ltd DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL OpenedHand Ltd BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 *
 * Authors:
 *    Dodji Seketeli <dodji@@openedhand.com>
 */

#ifdef HAVE_CONFIG_H
#include <kdrive-config.h>
#endif

#include <X11/Xlibint.h>
#define _HAVE_XALLOC_DECLS
#include "ephyrlog.h"
#include "ephyrhostproxy.h"
#include "hostx.h"

/* byte swap a short */
#define swaps(x, n) { \
    n = ((char *) (x))[0];\
    ((char *) (x))[0] = ((char *) (x))[1];\
    ((char *) (x))[1] = n; }

#define GetXReq(req) \
    WORD64ALIGN ;\
    if ((dpy->bufptr + SIZEOF(xReq)) > dpy->bufmax)\
            _XFlush(dpy);\
    req = (xReq *)(dpy->last_req = dpy->bufptr);\
    dpy->bufptr += SIZEOF(xReq);\
    dpy->request++

Bool
ephyrHostProxyDoForward(pointer a_request_buffer,
                        struct XReply *a_reply, Bool a_do_swap)
{
    Bool is_ok = FALSE;
    int n = 0;
    Display *dpy = hostx_get_display();
    xReq *in_req = (xReq *) a_request_buffer;
    xReq *forward_req = NULL;
    struct XReply reply;

    EPHYR_RETURN_VAL_IF_FAIL(in_req && dpy, FALSE);

    EPHYR_LOG("enter\n");

    if (a_do_swap) {
        swaps(&in_req->length);
    }
    EPHYR_LOG("Req {type:%d, data:%d, length:%d}\n",
              in_req->reqType, in_req->data, in_req->length);
    GetXReq(forward_req);
    memmove(forward_req, in_req, 4);

    if (!_XReply(dpy, (xReply *) &reply, 0, FALSE)) {
        EPHYR_LOG_ERROR("failed to get reply\n");
        goto out;
    }
    EPHYR_LOG("XReply{type:%d, foo:%d, seqnum:%d, length:%d}\n",
              reply.type, reply.foo, reply.sequence_number, reply.length);

    if (a_reply) {
        memmove(a_reply, &reply, sizeof(reply));
    }
    is_ok = TRUE;

 out:
    EPHYR_LOG("leave\n");
    return is_ok;
}
@


1.3
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d76 1
a76 1
    if (!_XReply(dpy, (xReply *) & reply, 0, FALSE)) {
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a52 1

d54 2
a55 3
ephyrHostProxyDoForward (pointer a_request_buffer,
                         struct XReply *a_reply,
                         Bool a_do_swap)
d57 6
a62 6
    Bool is_ok = FALSE ;
    int n=0 ;
    Display *dpy=hostx_get_display () ;
    xReq *in_req = (xReq*) a_request_buffer ;
    xReq *forward_req=NULL ;
    struct XReply reply ;
d64 1
a64 1
    EPHYR_RETURN_VAL_IF_FAIL (in_req && dpy, FALSE) ;
d66 1
a66 1
    EPHYR_LOG ("enter\n") ;
d69 1
a69 1
        swaps (&in_req->length, n) ;
d71 4
a74 4
    EPHYR_LOG ("Req {type:%d, data:%d, length:%d}\n",
               in_req->reqType, in_req->data, in_req->length) ;
    GetXReq (forward_req) ;
    memmove (forward_req, in_req, 4) ;
d76 2
a77 2
    if (!_XReply (dpy, (xReply*) &reply, 0, FALSE)) {
        EPHYR_LOG_ERROR ("failed to get reply\n") ;
d80 2
a81 2
    EPHYR_LOG ("XReply{type:%d, foo:%d, seqnum:%d, length:%d}\n",
               reply.type, reply.foo, reply.sequence_number, reply.length) ;
d84 1
a84 1
        memmove (a_reply, &reply, sizeof (reply)) ;
d86 1
a86 1
    is_ok = TRUE ;
d88 3
a90 3
out:
    EPHYR_LOG ("leave\n") ;
    return is_ok ;
a91 1

@

