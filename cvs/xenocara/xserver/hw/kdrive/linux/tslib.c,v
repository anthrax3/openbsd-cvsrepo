head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.18
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.16
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.14
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.12
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.10
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.8
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.6
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2012.06.10.13.21.23;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.50;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.21.20.10.47;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.06;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.30;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.24;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.14;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.14;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.04.19;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * TSLIB based touchscreen driver for KDrive
 * Porting to new input API and event queueing by Daniel Stone.
 * Derived from ts.c by Keith Packard
 * Derived from ps2.c by Jim Gettys
 *
 * Copyright Â© 1999 Keith Packard
 * Copyright Â© 2000 Compaq Computer Corporation
 * Copyright Â© 2002 MontaVista Software Inc.
 * Copyright Â© 2005 OpenedHand Ltd.
 * Copyright Â© 2006 Nokia Corporation
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of the authors and/or copyright holders
 * not be used in advertising or publicity pertaining to distribution of the
 * software without specific, written prior permission.  The authors and/or
 * copyright holders make no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without express or
 * implied warranty.
 *
 * THE AUTHORS AND/OR COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD
 * TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS, IN NO EVENT SHALL THE AUTHORS AND/OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_KDRIVE_CONFIG_H
#include <kdrive-config.h>
#endif

#include <X11/X.h>
#include <X11/Xproto.h>
#include <X11/Xpoll.h>
#include "inputstr.h"
#include "scrnintstr.h"
#include "kdrive.h"
#include <sys/ioctl.h>
#include <tslib.h>
#include <dirent.h>
#include <linux/input.h>

struct TslibPrivate {
    int fd;
    int lastx, lasty;
    struct tsdev *tsDev;
    void (*raw_event_hook) (int x, int y, int pressure, void *closure);
    void *raw_event_closure;
    int phys_screen;
};

static void
TsRead(int fd, void *closure)
{
    KdPointerInfo *pi = closure;
    struct TslibPrivate *private = pi->driverPrivate;
    struct ts_sample event;
    long x = 0, y = 0;
    unsigned long flags;

    if (private->raw_event_hook) {
        while (ts_read_raw(private->tsDev, &event, 1) == 1)
            private->raw_event_hook(event.x, event.y, event.pressure,
                                    private->raw_event_closure);
        return;
    }

    while (ts_read(private->tsDev, &event, 1) == 1) {
        if (event.pressure) {
            flags = KD_BUTTON_1;

            /*
             * Here we test for the touch screen driver actually being on the
             * touch screen, if it is we send absolute coordinates. If not,
             * then we send delta's so that we can track the entire vga screen.
             */
            if (KdCurScreen == private->phys_screen) {
                x = event.x;
                y = event.y;
            }
            else {
                flags |= KD_MOUSE_DELTA;
                if ((private->lastx == 0) || (private->lasty == 0)) {
                    x = event.x;
                    y = event.y;
                }
                else {
                    x = event.x - private->lastx;
                    y = event.y - private->lasty;
                }
            }
            private->lastx = event.x;
            private->lasty = event.y;
        }
        else {
            flags = 0;
            x = private->lastx;
            y = private->lasty;
        }

        KdEnqueuePointerEvent(pi, flags, x, y, event.pressure);
    }
}

static Status
TslibEnable(KdPointerInfo * pi)
{
    struct TslibPrivate *private = pi->driverPrivate;

    private->raw_event_hook = NULL;
    private->raw_event_closure = NULL;
    if (!pi->path) {
        pi->path = strdup("/dev/input/touchscreen0");
        ErrorF("[tslib/TslibEnable] no device path given, trying %s\n",
               pi->path);
    }

    private->tsDev = ts_open(pi->path, 0);
    if (!private->tsDev) {
        ErrorF("[tslib/TslibEnable] failed to open %s\n", pi->path);
        return BadAlloc;
    }

    if (ts_config(private->tsDev)) {
        ErrorF("[tslib/TslibEnable] failed to load configuration\n");
        ts_close(private->tsDev);
        private->tsDev = NULL;
        return BadValue;
    }

    private->fd = ts_fd(private->tsDev);

    KdRegisterFd(private->fd, TsRead, pi);

    return Success;
}

static void
TslibDisable(KdPointerInfo * pi)
{
    struct TslibPrivate *private = pi->driverPrivate;

    if (private->fd)
        KdUnregisterFd(pi, private->fd, TRUE);

    if (private->tsDev)
        ts_close(private->tsDev);

    private->fd = 0;
    private->tsDev = NULL;
}

static Status
TslibInit(KdPointerInfo * pi)
{
    struct TslibPrivate *private = NULL;

    if (!pi || !pi->dixdev)
        return !Success;

    pi->driverPrivate = (struct TslibPrivate *)
        calloc(sizeof(struct TslibPrivate), 1);
    if (!pi->driverPrivate)
        return !Success;

    private = pi->driverPrivate;
    /* hacktastic */
    private->phys_screen = 0;
    pi->nAxes = 3;
    pi->name = strdup("Touchscreen");
    pi->inputClass = KD_TOUCHSCREEN;

    return Success;
}

static void
TslibFini(KdPointerInfo * pi)
{
    free(pi->driverPrivate);
    pi->driverPrivate = NULL;
}

KdPointerDriver TsDriver = {
    "tslib",
    TslibInit,
    TslibEnable,
    TslibDisable,
    TslibFini,
    NULL,
};
@


1.6
log
@Update to xserver 1.11.2
@
text
@a32 1

d52 1
a52 1
    void (*raw_event_hook)(int x, int y, int pressure, void *closure);
a56 1

d58 1
a58 1
TsRead (int fd, void *closure)
d60 1
a60 1
    KdPointerInfo       *pi = closure;
d62 3
a64 3
    struct ts_sample    event;
    long                x = 0, y = 0;
    unsigned long       flags;
d68 2
a69 2
            private->raw_event_hook (event.x, event.y, event.pressure,
                                     private->raw_event_closure);
d85 2
a86 1
            } else {
d91 2
a92 1
                } else {
d95 1
a95 1
	    	}
d99 2
a100 1
        } else {
d106 1
a106 1
        KdEnqueuePointerEvent (pi, flags, x, y, event.pressure);
d111 1
a111 1
TslibEnable (KdPointerInfo *pi)
d119 2
a120 1
        ErrorF("[tslib/TslibEnable] no device path given, trying %s\n", pi->path);
a142 1

d144 1
a144 1
TslibDisable (KdPointerInfo *pi)
a157 1

d159 1
a159 1
TslibInit (KdPointerInfo *pi)
d167 1
a167 1
                        calloc(sizeof(struct TslibPrivate), 1);
a180 1

d182 1
a182 1
TslibFini (KdPointerInfo *pi)
a186 1

@


1.5
log
@Update to xorg-server 1.9.3. Tested by japser@@, landry@@ and ajacoutot@@
in various configurations.
@
text
@d7 5
a11 5
 * Copyright © 1999 Keith Packard
 * Copyright © 2000 Compaq Computer Corporation
 * Copyright © 2002 MontaVista Software Inc.
 * Copyright © 2005 OpenedHand Ltd.
 * Copyright © 2006 Nokia Corporation
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d120 1
d122 1
a122 2
    private->fd = ts_fd(private->tsDev);
    if (!private->tsDev || ts_config(private->tsDev) || private->fd < 0) {
a123 2
        if (private->fd >= 0)
            close(private->fd);
d126 9
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d160 1
a160 1
                        xcalloc(sizeof(struct TslibPrivate), 1);
d178 1
a178 1
    xfree(pi->driverPrivate);
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d12 1
a12 1
 * 
a37 1
#define NEED_EVENTS
d79 1
a79 1
            /* 
d117 1
a117 1
        pi->path = "/dev/input/touchscreen0";
d130 1
a130 1
  
a153 4
    int		        fd = 0, i = 0;
    DIR                 *inputdir = NULL;
    struct dirent       *inputent = NULL;
    struct tsdev        *tsDev = NULL;
d158 1
a158 1
    
d168 1
a168 1
    pi->name = KdSaveString("Touchscreen");
d178 2
a179 4
    if (pi->driverPrivate) {
        xfree(pi->driverPrivate);
        pi->driverPrivate = NULL;
    }
@


1.1
log
@Initial revision
@
text
@d2 2
a3 2
 * $RCSId: xc/programs/Xserver/hw/kdrive/linux/tslib.c,v 1.1 2002/11/01 22:27:49 keithp Exp $
 * TSLIB based touchscreen driver for TinyX
d11 1
d17 6
a22 5
 * documentation, and that the name of Keith Packard or Compaq not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Keith Packard and Compaq makes no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
d24 7
a30 43
 * KEITH PACKARD AND COMPAQ DISCLAIM ALL WARRANTIES WITH REGARD TO THIS 
 * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, 
 * IN NO EVENT SHALL KEITH PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 * 
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Michael Taht or MontaVista not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Michael Taht and Montavista make no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * MICHAEL TAHT AND MONTAVISTA DISCLAIM ALL WARRANTIES WITH REGARD TO THIS 
 * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, 
 * IN NO EVENT SHALL EITHER BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Matthew Allum or OpenedHand not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Matthew Allum and OpenedHand make no
 * representations about the suitability of this software for any purpose.  It
 * is provided "as is" without express or implied warranty.
 *
 * MATTHEW ALLUM AND OPENEDHAND DISCLAIM ALL WARRANTIES WITH REGARD TO THIS 
 * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, 
 * IN NO EVENT SHALL EITHER BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
d34 1
a34 1
#ifdef HAVE_CONFIG_H
d37 1
d47 2
d50 7
a56 6
static struct tsdev *tsDev = NULL;

static char *TsNames[] = {
  NULL, 			/* set via TSLIB_TSDEVICE */
  "/dev/ts",	
  "/dev/touchscreen/0",
a58 1
#define NUM_TS_NAMES (sizeof (TsNames) / sizeof (TsNames[0]))
d60 15
a74 3
/* For XCalibrate extension */
void (*tslib_raw_event_hook)(int x, int y, int pressure, void *closure);
void *tslib_raw_event_closure;
d76 29
a104 2
int TsInputType = 0;
int KdTsPhyScreen = 0; 		/* XXX Togo .. */
d106 2
a107 29
static void
TsRead (int tsPort, void *closure)
{
    KdMouseInfo	    *mi = closure;
    struct ts_sample event;
    long	    x, y;
    unsigned long   flags;

    if (tslib_raw_event_hook)
      {
	/* XCalibrate Ext */
	if (ts_read_raw(tsDev, &event, 1) == 1)
	  {
	    tslib_raw_event_hook (event.x, 
				  event.y, 
				  event.pressure, 
				  tslib_raw_event_closure);
	  }
	return;
      }

    while (ts_read(tsDev, &event, 1) == 1)
      {
	flags = (event.pressure) ? KD_BUTTON_1 : 0;
	x = event.x;
	y = event.y;
	
	KdEnqueueMouseEvent (mi, flags, x, y);
      }
d110 2
a111 2
static int
TsLibOpen(char *dev)
d113 1
a113 2
  if(!(tsDev = ts_open(dev, 0)))
    return -1;
d115 14
a128 2
  if (ts_config(tsDev))
    return -1;
d130 3
a132 1
  return ts_fd(tsDev);
d135 3
a137 2
static int
TslibEnable (int not_needed_fd, void *closure)
d139 4
a142 2
  KdMouseInfo	    *mi = closure;
  int		     fd = 0;
d144 2
a145 2
  if ((fd = TsLibOpen(mi->name)) == -1)
    ErrorF ("Unable to re-enable TSLib ( on %s )", mi->name);
d147 2
a148 1
  return fd;
d151 3
a153 2
static void
TslibDisable (int fd, void *closure)
d155 22
a176 3
  if (tsDev)
    ts_close(tsDev);
  tsDev = NULL;
a178 70
static int
TslibInit (void)
{
  int		i, j = 0;
  KdMouseInfo	*mi, *next;
  int		fd = 0;
  int           req_type;

  if (!TsInputType)
    {
      TsInputType = KdAllocInputType ();
      KdParseMouse(0); /* allocate safe slot in kdMouseInfo */
      req_type = 0;
    }
  else req_type = TsInputType; 	/* is being re-inited */
  
  for (mi = kdMouseInfo; mi; mi = next)
    {
      next = mi->next;
      
      /* find a usuable slot */
      if (mi->inputType != req_type) 
	continue;
      
      /* Check for tslib env var device setting */
      if ((TsNames[0] = getenv("TSLIB_TSDEVICE")) == NULL)
	j++;
      
      if (!mi->name)
	{
	  for (i = j; i < NUM_TS_NAMES; i++)    
	    {
	      fd = TsLibOpen(TsNames[i]);
	      
	      if (fd >= 0) 
		{
		  mi->name = KdSaveString (TsNames[i]);
		  break;
		}
	    }
	} 
      else 
	fd = TsLibOpen(mi->name);
      
      if (fd >= 0 && tsDev != NULL) 
	{
	  mi->driver    = (void *) fd;
	  mi->inputType = TsInputType;
	  
	  KdRegisterFd (TsInputType, fd, TsRead, (void *) mi);
	  
	  /* Set callbacks for vt switches etc */
	  KdRegisterFdEnableDisable (fd, TslibEnable, TslibDisable);
	  
	  return TRUE;
	} 
    }
  
  ErrorF ("Failed to open TSLib device, tried ");
  for (i = j; i < NUM_TS_NAMES; i++)    
    ErrorF ("%s ", TsNames[i]);
  ErrorF (".\n");
  if (!TsNames[0]) 
    ErrorF ("Try setting TSLIB_TSDEVICE to valid /dev entry?\n");
  
  if (fd > 0) 
    close(fd);
  
  return FALSE;
}
d181 1
a181 1
TslibFini (void)
d183 3
a185 21
    KdMouseInfo	*mi;

    KdUnregisterFds (TsInputType, TRUE);
    for (mi = kdMouseInfo; mi; mi = mi->next)
    {
	if (mi->inputType == TsInputType)
	{
	    if(mi->driver) 
	      {
		ts_close(tsDev);
		tsDev = NULL;
	      }
	    mi->driver    = 0;

	    /* If below is set to 0, then MouseInit() will trash it,
	     * setting to 'mouse type' ( via server reset). Therefore 
             * Leave it alone and work around in TslibInit()  ( see
             * req_type ).
	    */
	    /* mi->inputType = 0; */
	}
d189 3
a191 1
KdMouseFuncs TsFuncs = {
d193 4
a196 1
    TslibFini
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d2 2
a3 2
 * TSLIB based touchscreen driver for KDrive
 * Porting to new input API and event queueing by Daniel Stone.
a10 1
 * Copyright © 2006 Nokia Corporation
d16 5
a20 6
 * documentation, and that the name of the authors and/or copyright holders
 * not be used in advertising or publicity pertaining to distribution of the
 * software without specific, written prior permission.  The authors and/or
 * copyright holders make no representations about the suitability of this
 * software for any purpose.  It is provided "as is" without express or
 * implied warranty.
d22 43
a64 7
 * THE AUTHORS AND/OR COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD
 * TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS, IN NO EVENT SHALL THE AUTHORS AND/OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d68 1
a68 1
#ifdef HAVE_KDRIVE_CONFIG_H
a70 1

a79 2
#include <dirent.h>
#include <linux/input.h>
d81 6
a86 7
struct TslibPrivate {
    int fd;
    int lastx, lasty;
    struct tsdev *tsDev;
    void (*raw_event_hook)(int x, int y, int pressure, void *closure);
    void *raw_event_closure;
    int phys_screen;
d89 8
d99 1
a99 1
TsRead (int fd, void *closure)
d101 33
a133 12
    KdPointerInfo       *pi = closure;
    struct TslibPrivate *private = pi->driverPrivate;
    struct ts_sample    event;
    long                x = 0, y = 0;
    unsigned long       flags;

    if (private->raw_event_hook) {
        while (ts_read_raw(private->tsDev, &event, 1) == 1)
            private->raw_event_hook (event.x, event.y, event.pressure,
                                     private->raw_event_closure);
        return;
    }
d135 2
a136 29
    while (ts_read(private->tsDev, &event, 1) == 1) {
        if (event.pressure) {
            flags = KD_BUTTON_1;

            /* 
             * Here we test for the touch screen driver actually being on the
             * touch screen, if it is we send absolute coordinates. If not,
             * then we send delta's so that we can track the entire vga screen.
             */
            if (KdCurScreen == private->phys_screen) {
                x = event.x;
                y = event.y;
            } else {
                flags |= KD_MOUSE_DELTA;
                if ((private->lastx == 0) || (private->lasty == 0)) {
                    x = event.x;
                    y = event.y;
                } else {
                    x = event.x - private->lastx;
                    y = event.y - private->lasty;
	    	}
            }
            private->lastx = x;
            private->lasty = y;
        } else {
            flags = 0;
            x = private->lastx;
            y = private->lasty;
        }
d138 1
a138 2
        KdEnqueuePointerEvent (pi, flags, x, y, event.pressure);
    }
d141 2
a142 2
static Status
TslibEnable (KdPointerInfo *pi)
d144 2
a145 1
    struct TslibPrivate *private = pi->driverPrivate;
d147 2
a148 10
    private->raw_event_hook = NULL;
    private->raw_event_closure = NULL;
    private->tsDev = ts_open(pi->path, 0);
    private->fd = ts_fd(private->tsDev);
    if (!private->tsDev || ts_config(private->tsDev) || private->fd < 0) {
        ErrorF("[tslib/TslibEnable] failed to open %s\n", pi->path);
        if (private->fd >= 0)
            close(private->fd);
        return BadAlloc;
    }
d150 1
a150 3
    KdRegisterFd(private->fd, TsRead, pi);
  
    return Success;
a152 1

d154 1
a154 1
TslibDisable (KdPointerInfo *pi)
d156 3
a158 10
    struct TslibPrivate *private = pi->driverPrivate;

    if (private->fd)
        KdUnregisterFd(pi, private->fd, TRUE);

    if (private->tsDev)
        ts_close(private->tsDev);

    private->fd = 0;
    private->tsDev = NULL;
d161 2
a162 3

static Status
TslibInit (KdPointerInfo *pi)
d164 66
a229 22
    int		        fd = 0, i = 0;
    DIR                 *inputdir = NULL;
    struct dirent       *inputent = NULL;
    struct tsdev        *tsDev = NULL;
    struct TslibPrivate *private = NULL;

    if (!pi || !pi->dixdev)
        return !Success;
    
    pi->driverPrivate = (struct TslibPrivate *)
                        xcalloc(sizeof(struct TslibPrivate), 1);
    if (!pi->driverPrivate)
        return !Success;

    private = pi->driverPrivate;
    /* hacktastic */
    private->phys_screen = 0;
    pi->nAxes = 3;
    pi->name = KdSaveString("Touchscreen");
    pi->inputClass = KD_TOUCHSCREEN;

    return Success;
a231 1

d233 1
a233 1
TslibFini (KdPointerInfo *pi)
d235 21
a255 3
    if (pi->driverPrivate) {
        xfree(pi->driverPrivate);
        pi->driverPrivate = NULL;
d259 1
a259 3

KdPointerDriver TsDriver = {
    "tslib",
d261 1
a261 4
    TslibEnable,
    TslibDisable,
    TslibFini,
    NULL,
@

