head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.06.10.13.21.23;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.31.07.52.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.30;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.14;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.14;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.04.17;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
Copyright (c) 2001 by Juliusz Chroboczek
Copyright (c) 1999 by Keith Packard

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

#ifdef HAVE_CONFIG_H
#include <kdrive-config.h>
#endif
#include <errno.h>
#include <termios.h>
#include <X11/X.h>
#include <X11/Xproto.h>
#include <X11/Xpoll.h>
#include "inputstr.h"
#include "scrnintstr.h"
#include "kdrive.h"

static int
MsReadBytes(int fd, char *buf, int len, int min)
{
    int n, tot;
    fd_set set;
    struct timeval tv;

    tot = 0;
    while (len) {
        n = read(fd, buf, len);
        if (n > 0) {
            tot += n;
            buf += n;
            len -= n;
        }
        if (tot % min == 0)
            break;
        FD_ZERO(&set);
        FD_SET(fd, &set);
        tv.tv_sec = 0;
        tv.tv_usec = 100 * 1000;
        n = select(fd + 1, &set, 0, 0, &tv);
        if (n <= 0)
            break;
    }
    return tot;
}

static void
MsRead(int port, void *closure)
{
    unsigned char buf[3 * 200];
    unsigned char *b;
    int n;
    int dx, dy;
    unsigned long flags;

    while ((n = MsReadBytes(port, (char *) buf, sizeof(buf), 3)) > 0) {
        b = buf;
        while (n >= 3) {
            flags = KD_MOUSE_DELTA;

            if (b[0] & 0x20)
                flags |= KD_BUTTON_1;
            if (b[0] & 0x10)
                flags |= KD_BUTTON_3;

            dx = (char) (((b[0] & 0x03) << 6) | (b[1] & 0x3F));
            dy = (char) (((b[0] & 0x0C) << 4) | (b[2] & 0x3F));
            n -= 3;
            b += 3;
            KdEnqueuePointerEvent(closure, flags, dx, dy, 0);
        }
    }
}

static Status
MsInit(KdPointerInfo * pi)
{
    if (!pi)
        return BadImplementation;

    if (!pi->path || strcmp(pi->path, "auto"))
        pi->path = strdup("/dev/mouse");
    if (!pi->name)
        pi->name = strdup("Microsoft protocol mouse");

    return Success;
}

static Status
MsEnable(KdPointerInfo * pi)
{
    int port;
    struct termios t;
    int ret;

    port = open(pi->path, O_RDWR | O_NONBLOCK);
    if (port < 0) {
        ErrorF("Couldn't open %s (%d)\n", pi->path, (int) errno);
        return 0;
    }
    else if (port == 0) {
        ErrorF("Opening %s returned 0!  Please complain to Keith.\n", pi->path);
        goto bail;
    }

    if (!isatty(port)) {
        ErrorF("%s is not a tty\n", pi->path);
        goto bail;
    }

    ret = tcgetattr(port, &t);
    if (ret < 0) {
        ErrorF("Couldn't tcgetattr(%s): %d\n", pi->path, errno);
        goto bail;
    }
    t.c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP | INLCR |
                   IGNCR | ICRNL | IXON | IXOFF);
    t.c_oflag &= ~OPOST;
    t.c_lflag &= ~(ECHO | ECHONL | ICANON | ISIG | IEXTEN);
    t.c_cflag &= ~(CSIZE | PARENB);
    t.c_cflag |= CS8 | CLOCAL | CSTOPB;

    cfsetispeed(&t, B1200);
    cfsetospeed(&t, B1200);
    t.c_cc[VMIN] = 1;
    t.c_cc[VTIME] = 0;
    ret = tcsetattr(port, TCSANOW, &t);
    if (ret < 0) {
        ErrorF("Couldn't tcsetattr(%s): %d\n", pi->path, errno);
        goto bail;
    }
    if (KdRegisterFd(port, MsRead, pi))
        return TRUE;
    pi->driverPrivate = (void *) (intptr_t) port;

    return Success;

 bail:
    close(port);
    return BadMatch;
}

static void
MsDisable(KdPointerInfo * pi)
{
    KdUnregisterFd(pi, (int) (intptr_t) pi->driverPrivate, TRUE);
}

static void
MsFini(KdPointerInfo * pi)
{
}

KdPointerDriver MsMouseDriver = {
    "ms",
    MsInit,
    MsEnable,
    MsDisable,
    MsFini,
    NULL,
};
@


1.3
log
@Update to xserver 1.11.4. tested by krw@@, shadchin@@.
@
text
@d37 1
a37 1
MsReadBytes (int fd, char *buf, int len, int min)
d39 3
a41 3
    int		    n, tot;
    fd_set	    set;
    struct timeval  tv;
d44 16
a59 18
    while (len)
    {
	n = read (fd, buf, len);
	if (n > 0)
	{
	    tot += n;
	    buf += n;
	    len -= n;
	}
	if (tot % min == 0)
	    break;
	FD_ZERO (&set);
	FD_SET (fd, &set);
	tv.tv_sec = 0;
	tv.tv_usec = 100 * 1000;
	n = select (fd + 1, &set, 0, 0, &tv);
	if (n <= 0)
	    break;
d65 1
a65 1
MsRead (int port, void *closure)
d67 15
a81 17
    unsigned char   buf[3 * 200];
    unsigned char   *b;
    int		    n;
    int		    dx, dy;
    unsigned long   flags;

    while ((n = MsReadBytes (port, (char *) buf, sizeof (buf), 3)) > 0)
    {
	b = buf;
	while (n >= 3)
	{
	    flags = KD_MOUSE_DELTA;

	    if (b[0] & 0x20)
		flags |= KD_BUTTON_1;
	    if (b[0] & 0x10)
		flags |= KD_BUTTON_3;
d83 2
a84 2
	    dx = (char)(((b[0] & 0x03) << 6) | (b[1] & 0x3F));
	    dy = (char)(((b[0] & 0x0C) << 4) | (b[2] & 0x3F));
d87 2
a88 2
	    KdEnqueuePointerEvent (closure, flags, dx, dy, 0);
	}
d93 1
a93 1
MsInit (KdPointerInfo *pi)
d107 1
a107 1
MsEnable (KdPointerInfo *pi)
d113 3
a115 3
    port = open (pi->path, O_RDWR | O_NONBLOCK);
    if(port < 0) {
        ErrorF("Couldn't open %s (%d)\n", pi->path, (int)errno);
d117 4
a120 4
    } else if (port == 0) {
        ErrorF("Opening %s returned 0!  Please complain to Keith.\n",
               pi->path);
	goto bail;
d123 1
a123 1
    if(!isatty(port)) {
d129 1
a129 1
    if(ret < 0) {
d133 1
a133 1
    t.c_iflag &= ~ (IGNBRK | BRKINT | PARMRK | ISTRIP | INLCR |
d135 3
a137 3
    t.c_oflag &= ~ OPOST;
    t.c_lflag &= ~ (ECHO | ECHONL | ICANON | ISIG | IEXTEN);
    t.c_cflag &= ~ (CSIZE | PARENB);
d140 2
a141 2
    cfsetispeed (&t, B1200);
    cfsetospeed (&t, B1200);
d145 1
a145 1
    if(ret < 0) {
d149 3
a151 3
    if (KdRegisterFd (port, MsRead, pi))
	return TRUE;
    pi->driverPrivate = (void *)(intptr_t)port;
d161 1
a161 1
MsDisable (KdPointerInfo *pi)
d163 1
a163 1
    KdUnregisterFd (pi, (int)(intptr_t)pi->driverPrivate, TRUE);
d167 1
a167 1
MsFini (KdPointerInfo *pi)
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d155 1
a155 1
    pi->driverPrivate = (void *)port;
d167 1
a167 1
    KdUnregisterFd (pi, (int)pi->driverPrivate, TRUE);
@


1.1
log
@Initial revision
@
text
@a22 1
/* $RCSId: xc/programs/Xserver/hw/kdrive/linux/ms.c,v 1.1 2001/08/09 20:45:15 dawes Exp $ */
a26 1
#define NEED_EVENTS
d86 1
a86 1
	    
d91 1
a91 1
	    KdEnqueueMouseEvent (kdMouseInfo, flags, dx, dy);
d96 10
a105 1
int MsInputType;
d107 5
a111 2
static int
MsInit (void)
a113 1
    char *device = "/dev/mouse";
d117 1
a117 3
    if (!MsInputType)
	MsInputType = KdAllocInputType ();
    port = open (device, O_RDWR | O_NONBLOCK);
d119 1
a119 1
        ErrorF("Couldn't open %s (%d)\n", device, (int)errno);
d123 1
a123 1
               device);
d128 1
a128 1
        ErrorF("%s is not a tty\n", device);
d134 1
a134 1
        ErrorF("Couldn't tcgetattr(%s): %d\n", device, errno);
d150 1
a150 1
        ErrorF("Couldn't tcsetattr(%s): %d\n", device, errno);
d153 5
a157 2
    if (KdRegisterFd (MsInputType, port, MsRead, (void *) 0))
	return 1;
d161 7
a167 1
    return 0;
d171 1
a171 1
MsFini (void)
a172 1
    KdUnregisterFds (MsInputType, TRUE);
d175 2
a176 1
KdMouseFuncs MsMouseFuncs = {
d178 4
a181 1
    MsFini
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d23 1
d93 1
a93 1
	    KdEnqueuePointerEvent (closure, flags, dx, dy, 0);
d98 1
a98 5
static Status
MsInit (KdPointerInfo *pi)
{
    if (!pi)
        return BadImplementation;
d100 2
a101 10
    if (!pi->path || strcmp(pi->path, "auto"))
        pi->path = KdSaveString("/dev/mouse");
    if (!pi->name)
        pi->name = KdSaveString("Microsoft protocol mouse");
    
    return Success; 
}

static Status
MsEnable (KdPointerInfo *pi)
d104 1
d108 3
a110 1
    port = open (pi->path, O_RDWR | O_NONBLOCK);
d112 1
a112 1
        ErrorF("Couldn't open %s (%d)\n", pi->path, (int)errno);
d116 1
a116 1
               pi->path);
d121 1
a121 1
        ErrorF("%s is not a tty\n", pi->path);
d127 1
a127 1
        ErrorF("Couldn't tcgetattr(%s): %d\n", pi->path, errno);
d143 1
a143 1
        ErrorF("Couldn't tcsetattr(%s): %d\n", pi->path, errno);
d146 2
a147 5
    if (KdRegisterFd (port, MsRead, pi))
	return TRUE;
    pi->driverPrivate = (void *)port;

    return Success;
d151 1
a151 7
    return BadMatch;
}

static void
MsDisable (KdPointerInfo *pi)
{
    KdUnregisterFd (pi, (int)pi->driverPrivate, TRUE);
d155 1
a155 1
MsFini (KdPointerInfo *pi)
d157 1
d160 1
a160 2
KdPointerDriver MsMouseDriver = {
    "ms",
d162 1
a162 4
    MsEnable,
    MsDisable,
    MsFini,
    NULL,
@

