head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.22
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.20
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.18
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.16
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.06.10.13.21.28;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.53;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.02.16.08.39;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.29;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/**************************************************************
 *
 * Startup code for the Quartz Darwin X Server
 * Copyright (c) 2008-2012 Apple Inc. All rights reserved.
 * Copyright (c) 2001-2004 Torrey T. Lyons. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the sale,
 * use or other dealings in this Software without prior written authorization.
 */

#include "sanitizedCarbon.h"

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <fcntl.h>
#include <unistd.h>
#include <CoreFoundation/CoreFoundation.h>
#include "quartzCommon.h"
#include "X11Controller.h"
#include "darwin.h"
#include "darwinEvents.h"
#include "quartz.h"
#include "opaque.h"
#include "micmap.h"

#include <assert.h>

#include <pthread.h>

int
dix_main(int argc, char **argv, char **envp);

struct arg {
    int argc;
    char **argv;
    char **envp;
};

_X_NORETURN
static void
server_thread(void *arg)
{
    struct arg args = *((struct arg *)arg);
    free(arg);
    exit(dix_main(args.argc, args.argv, args.envp));
}

static pthread_t
create_thread(void *func, void *arg)
{
    pthread_attr_t attr;
    pthread_t tid;

    pthread_attr_init(&attr);
    pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
    pthread_create(&tid, &attr, func, arg);
    pthread_attr_destroy(&attr);

    return tid;
}

void
QuartzInitServer(int argc, char **argv, char **envp)
{
    struct arg *args = (struct arg *)malloc(sizeof(struct arg));
    if (!args)
        FatalError("Could not allocate memory.\n");

    args->argc = argc;
    args->argv = argv;
    args->envp = envp;

    if (!create_thread(server_thread, args)) {
        FatalError("can't create secondary thread\n");
    }
}

int
server_main(int argc, char **argv, char **envp)
{
    int i;
    int fd[2];

    /* Unset CFProcessPath, so our children don't inherit this kludge we need
     * to load our nib.  If an xterm gets this set, then it fails to
     * 'open hi.txt' properly.
     */
    unsetenv("CFProcessPath");

    // Make a pipe to pass events
    assert(pipe(fd) == 0);
    darwinEventReadFD = fd[0];
    darwinEventWriteFD = fd[1];
    fcntl(darwinEventReadFD, F_SETFL, O_NONBLOCK);

    for (i = 1; i < argc; i++) {
        // Display version info without starting Mac OS X UI if requested
        if (!strcmp(argv[i],
                    "-showconfig") || !strcmp(argv[i], "-version")) {
            DarwinPrintBanner();
            exit(0);
        }
    }

    X11ControllerMain(argc, argv, envp);
    exit(0);
}
@


1.4
log
@Update to xserver 1.11.2
@
text
@d4 1
a4 1
 *
d51 2
a52 1
int dix_main(int argc, char **argv, char **envp);
d61 3
a63 1
static void server_thread (void *arg) {
d66 1
a66 1
    exit (dix_main(args.argc, args.argv, args.envp));
d69 3
a71 1
static pthread_t create_thread (void *func, void *arg) {
d74 7
a80 7
	
    pthread_attr_init (&attr);
    pthread_attr_setscope (&attr, PTHREAD_SCOPE_SYSTEM);
    pthread_attr_setdetachstate (&attr, PTHREAD_CREATE_DETACHED);
    pthread_create (&tid, &attr, func, arg);
    pthread_attr_destroy (&attr);
	
d84 5
a88 3
void QuartzInitServer(int argc, char **argv, char **envp) {
    struct arg *args = (struct arg*)malloc(sizeof(struct arg));
    if(!args)
d90 1
a90 1
    
d94 1
a94 1
    
d100 5
a104 3
int server_main(int argc, char **argv, char **envp) {
    int         i;
    int         fd[2];
d111 1
a111 1
    
d113 1
a113 1
    assert( pipe(fd) == 0 );
d120 2
a121 1
        if (!strcmp( argv[i], "-showconfig" ) || !strcmp( argv[i], "-version" )) {
@


1.3
log
@Update to xserver 1.9.5. Tested by jasper@@, ajacoutot@@ and krw@@
@
text
@d59 1
d88 1
a88 4
    APPKIT_THREAD_ID = pthread_self();
    SERVER_THREAD_ID = create_thread(server_thread, args);

    if (!SERVER_THREAD_ID) {
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a42 1
#include "quartzAudio.h"
a117 3

    /* Create the audio mutex */
    QuartzAudioInit();
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d30 2
d42 2
a47 2
#ifdef NDEBUG
#undef NDEBUG
a48 4
#define NDEBUG 1
#else
#include <assert.h>
#endif
d50 3
a52 2
char **envpGlobal;      // argcGlobal and argvGlobal
                        // are from dix/globals.c
d54 5
a58 3
int main(int argc, char **argv, char **envp);
void _InitHLTB(void);
void DarwinHandleGUI(int argc, char **argv, char **envp);
d61 33
a93 1
  exit (main (argcGlobal, argvGlobal, envpGlobal));
d96 1
a96 10
/*
 * DarwinHandleGUI
 *  This function is called first from main(). The first time
 *  it is called we start the Mac OS X front end. The front end
 *  will call main() again from another thread to run the X
 *  server. On the second call this function loads the user
 *  preferences set by the Mac OS X front end.
 */
void DarwinHandleGUI(int argc, char **argv, char **envp) {
    static Bool been_here = FALSE;
d100 5
a104 4
    if (been_here) {
        return;
    }
    been_here = TRUE;
a111 5
    // Store command line arguments to pass back to main()
    argcGlobal = argc;
    argvGlobal = argv;
    envpGlobal = envp;

d120 2
a121 8
    /* Initially I ran the X server on the main thread, and received
       events on the second thread. But now we may be using Carbon,
       that needs to run on the main thread. (Otherwise, when it's
       prebound, it will initialize itself on the wrong thread)
       
       grr.. but doing that means that if the X thread gets scheduled
       before the main thread when we're _not_ prebound, things fail,
       so initialize by hand. */
d123 1
a123 2
    _InitHLTB();    
    X11ControllerMain(argc, (const char **)argv, server_thread, NULL);
@

