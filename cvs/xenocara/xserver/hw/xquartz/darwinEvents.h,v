head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.20
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.18
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.16
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2012.06.10.13.21.28;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.53;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.35;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.29;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Copyright (c) 2008 Apple, Inc.
 * Copyright (c) 2001-2004 Torrey T. Lyons. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the sale,
 * use or other dealings in this Software without prior written authorization.
 */

#ifndef _DARWIN_EVENTS_H
#define _DARWIN_EVENTS_H

/* For extra precision of our cursor and other valuators */
#define XQUARTZ_VALUATOR_LIMIT (1 << 16)

Bool
DarwinEQInit(void);
void
DarwinEQFini(void);
void
DarwinEQEnqueue(const xEventPtr e);
void
DarwinEQPointerPost(DeviceIntPtr pDev, xEventPtr e);
void
DarwinEQSwitchScreen(ScreenPtr pScreen, Bool fromDIX);
void
DarwinInputReleaseButtonsAndKeys(DeviceIntPtr pDev);
void
DarwinSendTabletEvents(DeviceIntPtr pDev, int ev_type, int ev_button,
                       double pointer_x, double pointer_y, double pressure,
                       double tilt_x, double tilt_y);
void
DarwinSendPointerEvents(DeviceIntPtr pDev, int ev_type, int ev_button,
                        double pointer_x, double pointer_y,
                        double pointer_dx, double pointer_dy);
void
DarwinSendKeyboardEvents(int ev_type, int keycode);
void
DarwinSendScrollEvents(double scroll_x, double scroll_y);
void
DarwinUpdateModKeys(int flags);
void
DarwinListenOnOpenFD(int fd);

/*
 * Subtypes for the ET_XQuartz event type
 */
enum {
    kXquartzReloadKeymap,     // Reload system keymap
    kXquartzActivate,         // restore X drawing and cursor
    kXquartzDeactivate,       // clip X drawing and switch to Aqua cursor
    kXquartzSetRootClip,      // enable or disable drawing to the X screen
    kXquartzQuit,             // kill the X server and release the display
    kXquartzBringAllToFront,  // bring all X windows to front
    kXquartzToggleFullscreen, // Enable/Disable fullscreen mode
    kXquartzSetRootless,      // Set rootless mode
    kXquartzSpaceChanged,     // Spaces changed
    kXquartzListenOnOpenFD,   // Listen to the launchd fd (passed as arg)
    /*
     * AppleWM events
     */
    kXquartzControllerNotify, // send an AppleWMControllerNotify event
    kXquartzPasteboardNotify, // notify the WM to copy or paste
    kXquartzReloadPreferences, // send AppleWMReloadPreferences
    /*
     * Xplugin notification events
     */
    kXquartzDisplayChanged,   // display configuration has changed
    kXquartzWindowState,      // window visibility state has changed
    kXquartzWindowMoved,      // window has moved on screen
};

/* Send one of the above events to the server thread. */
void
DarwinSendDDXEvent(int type, int argc, ...);

/* A mask of the modifiers that are in our X11 keyboard layout:
 * (Fn for example is just useful for 3button mouse emulation) */
extern int darwin_all_modifier_mask;

/* A mask of the modifiers that are in our X11 keyboard layout:
 * (Fn for example is just useful for 3button mouse emulation) */
extern int darwin_x11_modifier_mask;

/* The current state of the above listed modifiers */
extern int darwin_all_modifier_flags;

#endif  /* _DARWIN_EVENTS_H */
@


1.4
log
@Update to xserver 1.11.2
@
text
@d34 28
a61 14
Bool DarwinEQInit(void);
void DarwinEQFini(void);
void DarwinEQEnqueue(const xEventPtr e);
void DarwinEQPointerPost(DeviceIntPtr pDev, xEventPtr e);
void DarwinEQSwitchScreen(ScreenPtr pScreen, Bool fromDIX);
void DarwinSendPointerEvents(DeviceIntPtr pDev, int ev_type, int ev_button, float pointer_x, float pointer_y,
			     float pressure, float tilt_x, float tilt_y);
void DarwinSendProximityEvents(DeviceIntPtr pDev, int ev_type, float pointer_x, float pointer_y,
                               float pressure, float tilt_x, float tilt_y);
void DarwinSendKeyboardEvents(int ev_type, int keycode);
void DarwinSendScrollEvents(float count_x, float count_y, float pointer_x, float pointer_y,
			    float pressure, float tilt_x, float tilt_y);
void DarwinUpdateModKeys(int flags);
void DarwinListenOnOpenFD(int fd);
d92 2
a93 1
void DarwinSendDDXEvent(int type, int argc, ...);
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d35 1
d41 2
a42 1
void DarwinSendProximityEvents(int ev_type, float pointer_x, float pointer_y);
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d48 1
a48 1
 * Special ddx events understood by the X server
d51 1
a51 2
    kXquartzReloadKeymap      // Reload system keymap
    = LASTEvent+1,    // (from X.h list of event names)
a55 2
    kXquartzReadPasteboard,   // copy Mac OS X pasteboard into X cut buffer
    kXquartzWritePasteboard,  // copy X cut buffer onto Mac OS X pasteboard
d78 10
a87 2
extern int darwin_modifier_mask_list[];
extern int darwin_modifier_flags;
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d2 1
d31 4
a34 1
Bool DarwinEQInit(DevicePtr pKbd, DevicePtr pPtr);
d38 3
a40 2
void DarwinPokeEQ(void);
void DarwinSendPointerEvents(int ev_type, int ev_button, int pointer_x, int pointer_y);
d42 2
a43 1
void DarwinSendScrollEvents(float count, int pointer_x, int pointer_y);
d45 38
@

