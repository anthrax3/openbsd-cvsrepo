head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.54;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.06.19.44.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/* Copyright (c) 2008-2012 Apple Inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT
 * HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above
 * copyright holders shall not be used in advertising or otherwise to
 * promote the sale, use or other dealings in this Software without
 * prior written authorization.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <launch.h>
#include <asl.h>
#include <errno.h>

#include "launchd_fd.h"

extern aslclient aslc;

int
launchd_display_fd(void)
{
    launch_data_t sockets_dict, checkin_request, checkin_response;
    launch_data_t listening_fd_array, listening_fd;

    /* Get launchd fd */
    if ((checkin_request = launch_data_new_string(LAUNCH_KEY_CHECKIN)) ==
        NULL) {
        asl_log(
            aslc, NULL, ASL_LEVEL_ERR,
            "launch_data_new_string(\"" LAUNCH_KEY_CHECKIN
            "\") Unable to create string.\n");
        return ERROR_FD;
    }

    if ((checkin_response = launch_msg(checkin_request)) == NULL) {
        asl_log(aslc, NULL, ASL_LEVEL_WARNING,
                "launch_msg(\"" LAUNCH_KEY_CHECKIN "\") IPC failure: %s\n",
                strerror(
                    errno));
        return ERROR_FD;
    }

    if (LAUNCH_DATA_ERRNO == launch_data_get_type(checkin_response)) {
        // ignore EACCES, which is common if we weren't started by launchd
        if (launch_data_get_errno(checkin_response) != EACCES)
            asl_log(aslc, NULL, ASL_LEVEL_ERR,
                    "launchd check-in failed: %s\n",
                    strerror(launch_data_get_errno(
                                 checkin_response)));
        return ERROR_FD;
    }

    sockets_dict = launch_data_dict_lookup(checkin_response,
                                           LAUNCH_JOBKEY_SOCKETS);
    if (NULL == sockets_dict) {
        asl_log(aslc, NULL, ASL_LEVEL_ERR,
                "launchd check-in: no sockets found to answer requests on!\n");
        return ERROR_FD;
    }

    if (launch_data_dict_get_count(sockets_dict) > 1) {
        asl_log(aslc, NULL, ASL_LEVEL_ERR,
                "launchd check-in: some sockets will be ignored!\n");
        return ERROR_FD;
    }

    listening_fd_array = launch_data_dict_lookup(sockets_dict,
                                                 BUNDLE_ID_PREFIX ":0");
    if (NULL == listening_fd_array) {
        listening_fd_array = launch_data_dict_lookup(sockets_dict, ":0");
        if (NULL == listening_fd_array) {
            asl_log(
                aslc, NULL, ASL_LEVEL_ERR,
                "launchd check-in: No known sockets found to answer requests on! \"%s:0\" and \":0\" failed.\n",
                BUNDLE_ID_PREFIX);
            return ERROR_FD;
        }
    }

    if (launch_data_array_get_count(listening_fd_array) != 1) {
        asl_log(aslc, NULL, ASL_LEVEL_ERR,
                "launchd check-in: Expected 1 socket from launchd, got %u)\n",
                (unsigned)launch_data_array_get_count(
                    listening_fd_array));
        return ERROR_FD;
    }

    listening_fd = launch_data_array_get_index(listening_fd_array, 0);
    return launch_data_get_fd(listening_fd);
}
@


1.3
log
@Update to xserver 1.11.2
@
text
@d1 1
a1 1
/* Copyright (c) 2008 Apple Inc.
d41 3
a43 1
int launchd_display_fd(void) {
d48 6
a53 2
    if ((checkin_request = launch_data_new_string(LAUNCH_KEY_CHECKIN)) == NULL) {
        asl_log(aslc, NULL, ASL_LEVEL_ERR, "launch_data_new_string(\"" LAUNCH_KEY_CHECKIN "\") Unable to create string.\n");
d56 1
a56 1
    
d58 4
a61 1
        asl_log(aslc, NULL, ASL_LEVEL_WARNING, "launch_msg(\"" LAUNCH_KEY_CHECKIN "\") IPC failure: %s\n",strerror(errno));
d64 1
a64 1
    
d68 4
a71 1
            asl_log(aslc, NULL, ASL_LEVEL_ERR, "launchd check-in failed: %s\n", strerror(launch_data_get_errno(checkin_response)));
d73 4
a76 3
    } 
    
    sockets_dict = launch_data_dict_lookup(checkin_response, LAUNCH_JOBKEY_SOCKETS);
d78 2
a79 1
        asl_log(aslc, NULL, ASL_LEVEL_ERR, "launchd check-in: no sockets found to answer requests on!\n");
d82 1
a82 1
    
d84 2
a85 1
        asl_log(aslc, NULL, ASL_LEVEL_ERR, "launchd check-in: some sockets will be ignored!\n");
d88 3
a90 2
    
    listening_fd_array = launch_data_dict_lookup(sockets_dict, BUNDLE_ID_PREFIX":0");
d94 4
a97 1
            asl_log(aslc, NULL, ASL_LEVEL_ERR, "launchd check-in: No known sockets found to answer requests on! \"%s:0\" and \":0\" failed.\n", BUNDLE_ID_PREFIX);
d101 6
a106 4
    
    if (launch_data_array_get_count(listening_fd_array)!=1) {
        asl_log(aslc, NULL, ASL_LEVEL_ERR, "launchd check-in: Expected 1 socket from launchd, got %u)\n",
                (unsigned)launch_data_array_get_count(listening_fd_array));
d109 2
a110 2
    
    listening_fd=launch_data_array_get_index(listening_fd_array, 0);
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d34 1
a34 1
#include <stdio.h>
d39 2
d47 1
a47 1
        fprintf(stderr,"launch_data_new_string(\"" LAUNCH_KEY_CHECKIN "\") Unable to create string.\n");
d52 1
a52 1
        fprintf(stderr,"launch_msg(\"" LAUNCH_KEY_CHECKIN "\") IPC failure: %s\n",strerror(errno));
d59 1
a59 1
            fprintf(stderr,"launchd check-in failed: %s\n", strerror(launch_data_get_errno(checkin_response)));
d65 1
a65 1
        fprintf(stderr,"launchd check-in: no sockets found to answer requests on!\n");
d70 1
a70 1
        fprintf(stderr,"launchd check-in: some sockets will be ignored!\n");
d74 1
a74 1
    listening_fd_array = launch_data_dict_lookup(sockets_dict, LAUNCHD_ID_PREFIX":0");
d78 1
a78 1
            fprintf(stderr,"launchd check-in: No known sockets found to answer requests on! \"%s:0\" and \":0\" failed.\n", LAUNCHD_ID_PREFIX);
d84 1
a84 1
        fprintf(stderr,"launchd check-in: Expected 1 socket from launchd, got %u)\n",
@


1.1
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d29 4
d39 1
a39 1
int launchd_display_fd() {
d72 1
a72 1
    listening_fd_array = launch_data_dict_lookup(sockets_dict, ":0");
d74 5
a78 2
        fprintf(stderr,"launchd check-in: No known sockets found to answer requests on!\n");
        return ERROR_FD;
@

