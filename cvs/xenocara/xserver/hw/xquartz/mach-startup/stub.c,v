head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.8
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.54;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.06.19.44.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@/* Copyright (c) 2008-2012 Apple Inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT
 * HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above
 * copyright holders shall not be used in advertising or otherwise to
 * promote the sale, use or other dealings in this Software without
 * prior written authorization.
 */

#include <CoreServices/CoreServices.h>

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <asl.h>

#include <sys/socket.h>
#include <sys/un.h>

#define kX11AppBundleId   BUNDLE_ID_PREFIX ".X11"
#define kX11AppBundlePath "/Contents/MacOS/X11"

#include <mach/mach.h>
#include <mach/mach_error.h>
#include <servers/bootstrap.h>
#include "mach_startup.h"

#include <signal.h>

#include <AvailabilityMacros.h>

#include "launchd_fd.h"

static char x11_path[PATH_MAX + 1];
static pid_t x11app_pid = 0;
aslclient aslc;

static void
set_x11_path(void)
{
#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1050

    CFURLRef appURL = NULL;
    OSStatus osstatus =
        LSFindApplicationForInfo(kLSUnknownCreator, CFSTR(
                                     kX11AppBundleId), nil, nil, &appURL);

    switch (osstatus) {
    case noErr:
        if (appURL == NULL) {
            asl_log(
                aslc, NULL, ASL_LEVEL_ERR,
                "Xquartz: Invalid response from LSFindApplicationForInfo(%s)",
                kX11AppBundleId);
            exit(1);
        }

        if (!CFURLGetFileSystemRepresentation(appURL, true,
                                              (unsigned char *)x11_path,
                                              sizeof(x11_path))) {
            asl_log(aslc, NULL, ASL_LEVEL_ERR,
                    "Xquartz: Error resolving URL for %s",
                    kX11AppBundleId);
            exit(3);
        }

        strlcat(x11_path, kX11AppBundlePath, sizeof(x11_path));
        asl_log(aslc, NULL, ASL_LEVEL_INFO, "Xquartz: X11.app = %s", x11_path);
        break;

    case kLSApplicationNotFoundErr:
        asl_log(aslc, NULL, ASL_LEVEL_ERR,
                "Xquartz: Unable to find application for %s",
                kX11AppBundleId);
        exit(10);

    default:
        asl_log(aslc, NULL, ASL_LEVEL_ERR,
                "Xquartz: Unable to find application for %s, error code = %d",
                kX11AppBundleId,
                (int)osstatus);
        exit(11);
    }
#else
    /* TODO: Make Tiger smarter... but TBH, this should never get called on Tiger... */
    strlcpy(x11_path, "/Applications/Utilities/X11.app/Contents/MacOS/X11",
            sizeof(x11_path));
#endif
}

static int
connect_to_socket(const char *filename)
{
    struct sockaddr_un servaddr_un;
    struct sockaddr *servaddr;
    socklen_t servaddr_len;
    int ret_fd;

    /* Setup servaddr_un */
    memset(&servaddr_un, 0, sizeof(struct sockaddr_un));
    servaddr_un.sun_family = AF_UNIX;
    strlcpy(servaddr_un.sun_path, filename, sizeof(servaddr_un.sun_path));

    servaddr = (struct sockaddr *)&servaddr_un;
    servaddr_len = sizeof(struct sockaddr_un) -
                   sizeof(servaddr_un.sun_path) + strlen(filename);

    ret_fd = socket(PF_UNIX, SOCK_STREAM, 0);
    if (ret_fd == -1) {
        asl_log(aslc, NULL, ASL_LEVEL_ERR,
                "Xquartz: Failed to create socket: %s - %s", filename,
                strerror(
                    errno));
        return -1;
    }

    if (connect(ret_fd, servaddr, servaddr_len) < 0) {
        asl_log(aslc, NULL, ASL_LEVEL_ERR,
                "Xquartz: Failed to connect to socket: %s - %d - %s",
                filename, errno,
                strerror(
                    errno));
        close(ret_fd);
        return -1;
    }

    return ret_fd;
}

static void
send_fd_handoff(int connected_fd, int launchd_fd)
{
    char databuf[] = "display";
    struct iovec iov[1];

    union {
        struct cmsghdr hdr;
        char bytes[CMSG_SPACE(sizeof(int))];
    } buf;

    struct msghdr msg;
    struct cmsghdr *cmsg;

    iov[0].iov_base = databuf;
    iov[0].iov_len = sizeof(databuf);

    msg.msg_iov = iov;
    msg.msg_iovlen = 1;
    msg.msg_control = buf.bytes;
    msg.msg_controllen = sizeof(buf);
    msg.msg_name = 0;
    msg.msg_namelen = 0;
    msg.msg_flags = 0;

    cmsg = CMSG_FIRSTHDR(&msg);
    cmsg->cmsg_level = SOL_SOCKET;
    cmsg->cmsg_type = SCM_RIGHTS;
    cmsg->cmsg_len = CMSG_LEN(sizeof(int));

    msg.msg_controllen = cmsg->cmsg_len;

    *((int *)CMSG_DATA(cmsg)) = launchd_fd;

    if (sendmsg(connected_fd, &msg, 0) < 0) {
        asl_log(
            aslc, NULL, ASL_LEVEL_ERR,
            "Xquartz: Error sending $DISPLAY file descriptor over fd %d: %d -- %s",
            connected_fd, errno, strerror(errno));
        return;
    }

    asl_log(aslc, NULL, ASL_LEVEL_DEBUG,
            "Xquartz: Message sent.  Closing handoff fd.");
    close(connected_fd);
}

__attribute__((__noreturn__))
static void
signal_handler(int sig)
{
    if (x11app_pid)
        kill(x11app_pid, sig);
    _exit(0);
}

int
main(int argc, char **argv, char **envp)
{
    int envpc;
    kern_return_t kr;
    mach_port_t mp;
    string_array_t newenvp;
    string_array_t newargv;
    size_t i;
    int launchd_fd;
    string_t handoff_socket_filename;
    sig_t handler;
    char *asl_sender;
    char *asl_facility;
    char *server_bootstrap_name = kX11AppBundleId;

    if (getenv("X11_PREFS_DOMAIN"))
        server_bootstrap_name = getenv("X11_PREFS_DOMAIN");

    asprintf(&asl_sender, "%s.stub", server_bootstrap_name);
    assert(asl_sender);

    asl_facility = strdup(server_bootstrap_name);
    assert(asl_facility);
    if (strcmp(asl_facility + strlen(asl_facility) - 4, ".X11") == 0)
        asl_facility[strlen(asl_facility) - 4] = '\0';

    assert(aslc = asl_open(asl_sender, asl_facility, ASL_OPT_NO_DELAY));
    free(asl_sender);
    free(asl_facility);

    /* We don't have a mechanism in place to handle this interrupt driven
     * server-start notification, so just send the signal now, so xinit doesn't
     * time out waiting for it and will just poll for the server.
     */
    handler = signal(SIGUSR1, SIG_IGN);
    if (handler == SIG_IGN)
        kill(getppid(), SIGUSR1);
    signal(SIGUSR1, handler);

    /* Pass on SIGs to X11.app */
    signal(SIGINT, signal_handler);
    signal(SIGTERM, signal_handler);

    /* Get the $DISPLAY FD */
    launchd_fd = launchd_display_fd();

    kr = bootstrap_look_up(bootstrap_port, server_bootstrap_name, &mp);
    if (kr != KERN_SUCCESS) {
        pid_t child;

        asl_log(aslc, NULL, ASL_LEVEL_WARNING,
                "Xquartz: Unable to locate waiting server: %s",
                server_bootstrap_name);
        set_x11_path();

        /* This forking is ugly and will be cleaned up later */
        child = fork();
        if (child == -1) {
            asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: Could not fork: %s",
                    strerror(
                        errno));
            return EXIT_FAILURE;
        }

        if (child == 0) {
            char *_argv[3];
            _argv[0] = x11_path;
            _argv[1] = "--listenonly";
            _argv[2] = NULL;
            asl_log(aslc, NULL, ASL_LEVEL_NOTICE,
                    "Xquartz: Starting X server: %s --listenonly",
                    x11_path);
            return execvp(x11_path, _argv);
        }

        /* Try connecting for 10 seconds */
        for (i = 0; i < 80; i++) {
            usleep(250000);
            kr = bootstrap_look_up(bootstrap_port, server_bootstrap_name, &mp);
            if (kr == KERN_SUCCESS)
                break;
        }

        if (kr != KERN_SUCCESS) {
#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1050
            asl_log(aslc, NULL, ASL_LEVEL_ERR,
                    "Xquartz: bootstrap_look_up(): %s", bootstrap_strerror(
                        kr));
#else
            asl_log(aslc, NULL, ASL_LEVEL_ERR,
                    "Xquartz: bootstrap_look_up(): %ul",
                    (unsigned long)kr);
#endif
            return EXIT_FAILURE;
        }
    }

    /* Get X11.app's pid */
    request_pid(mp, &x11app_pid);

    /* Handoff the $DISPLAY FD */
    if (launchd_fd != -1) {
        size_t try, try_max;
        int handoff_fd = -1;

        for (try = 0, try_max = 5; try < try_max; try++) {
            if (request_fd_handoff_socket(mp,
                                          handoff_socket_filename) !=
                KERN_SUCCESS) {
                asl_log(
                    aslc, NULL, ASL_LEVEL_INFO,
                    "Xquartz: Failed to request a socket from the server to send the $DISPLAY fd over (try %d of %d)",
                    (int)try + 1, (int)try_max);
                continue;
            }

            handoff_fd = connect_to_socket(handoff_socket_filename);
            if (handoff_fd == -1) {
                asl_log(aslc, NULL, ASL_LEVEL_ERR,
                        "Xquartz: Failed to connect to socket (try %d of %d)",
                        (int)try + 1,
                        (int)try_max);
                continue;
            }

            asl_log(
                aslc, NULL, ASL_LEVEL_INFO,
                "Xquartz: Handoff connection established (try %d of %d) on fd %d, \"%s\".  Sending message.",
                (int)try + 1, (int)try_max, handoff_fd,
                handoff_socket_filename);
            send_fd_handoff(handoff_fd, launchd_fd);
            close(handoff_fd);
            break;
        }
    }

    /* Count envp */
    for (envpc = 0; envp[envpc]; envpc++) ;

    /* We have fixed-size string lengths due to limitations in IPC,
     * so we need to copy our argv and envp.
     */
    newargv = (string_array_t)calloc((1 + argc), sizeof(string_t));
    newenvp = (string_array_t)calloc((1 + envpc), sizeof(string_t));

    if (!newargv || !newenvp) {
        /* Silence the clang static analyzer */
        free(newargv);
        free(newenvp);

        asl_log(aslc, NULL, ASL_LEVEL_ERR,
                "Xquartz: Memory allocation failure");
        return EXIT_FAILURE;
    }

    for (i = 0; i < argc; i++) {
        strlcpy(newargv[i], argv[i], STRING_T_SIZE);
    }
    for (i = 0; i < envpc; i++) {
        strlcpy(newenvp[i], envp[i], STRING_T_SIZE);
    }

    kr = start_x11_server(mp, newargv, argc, newenvp, envpc);

    free(newargv);
    free(newenvp);

    if (kr != KERN_SUCCESS) {
        asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: start_x11_server: %s",
                mach_error_string(
                    kr));
        return EXIT_FAILURE;
    }
    return EXIT_SUCCESS;
}
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d356 4
@


1.3
log
@Update to xserver 1.11.2
@
text
@d1 1
a1 1
/* Copyright (c) 2008 Apple Inc.
d43 1
a43 1
#define kX11AppBundleId BUNDLE_ID_PREFIX".X11"
d61 3
a63 1
static void set_x11_path(void) {
d67 3
a69 1
    OSStatus osstatus = LSFindApplicationForInfo(kLSUnknownCreator, CFSTR(kX11AppBundleId), nil, nil, &appURL);
d72 8
a79 6
        case noErr:
            if (appURL == NULL) {
                asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: Invalid response from LSFindApplicationForInfo(%s)", 
                        kX11AppBundleId);
                exit(1);
            }
d81 8
a88 4
            if (!CFURLGetFileSystemRepresentation(appURL, true, (unsigned char *)x11_path, sizeof(x11_path))) {
                asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: Error resolving URL for %s", kX11AppBundleId);
                exit(3);
            }
d90 16
a105 10
            strlcat(x11_path, kX11AppBundlePath, sizeof(x11_path));
            asl_log(aslc, NULL, ASL_LEVEL_INFO, "Xquartz: X11.app = %s", x11_path);
            break;
        case kLSApplicationNotFoundErr:
            asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: Unable to find application for %s", kX11AppBundleId);
            exit(10);
        default:
            asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: Unable to find application for %s, error code = %d", 
                    kX11AppBundleId, (int)osstatus);
            exit(11);
d109 2
a110 1
    strlcpy(x11_path, "/Applications/Utilities/X11.app/Contents/MacOS/X11", sizeof(x11_path));
d114 3
a116 1
static int connect_to_socket(const char *filename) {
d123 1
a123 1
    memset (&servaddr_un, 0, sizeof (struct sockaddr_un));
d126 5
a130 4
    
    servaddr = (struct sockaddr *) &servaddr_un;
    servaddr_len = sizeof(struct sockaddr_un) - sizeof(servaddr_un.sun_path) + strlen(filename);
    
d132 5
a136 2
    if(ret_fd == -1) {
        asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: Failed to create socket: %s - %s", filename, strerror(errno));
d140 6
a145 2
    if(connect(ret_fd, servaddr, servaddr_len) < 0) {
        asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: Failed to connect to socket: %s - %d - %s", filename, errno, strerror(errno));
d149 1
a149 1
    
d153 3
a155 1
static void send_fd_handoff(int connected_fd, int launchd_fd) {
d158 1
a158 1
    
d163 1
a163 1
    
d168 1
a168 1
    iov[0].iov_len  = sizeof(databuf);
d178 1
a178 1
    cmsg = CMSG_FIRSTHDR (&msg);
d184 8
a191 5
    
    *((int*)CMSG_DATA(cmsg)) = launchd_fd;
    
    if(sendmsg(connected_fd, &msg, 0) < 0) {
        asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: Error sending $DISPLAY file descriptor over fd %d: %d -- %s", connected_fd, errno, strerror(errno));
d195 2
a196 1
    asl_log(aslc, NULL, ASL_LEVEL_DEBUG, "Xquartz: Message sent.  Closing handoff fd.");
d201 4
a204 2
static void signal_handler(int sig) {
    if(x11app_pid)
d209 3
a211 1
int main(int argc, char **argv, char **envp) {
d225 1
a225 1
    if(getenv("X11_PREFS_DOMAIN"))
d233 2
a234 2
    if(strcmp(asl_facility + strlen(asl_facility) - 4, ".X11") == 0)
        asl_facility[strlen(asl_facility) - 4] = '\0';    
d245 1
a245 1
    if(handler == SIG_IGN)
d252 1
a252 1
    
d257 1
a257 1
    if(kr != KERN_SUCCESS) {
d260 3
a262 1
        asl_log(aslc, NULL, ASL_LEVEL_WARNING, "Xquartz: Unable to locate waiting server: %s", server_bootstrap_name);
d267 4
a270 2
        if(child == -1) {
            asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: Could not fork: %s", strerror(errno));
d274 1
a274 1
        if(child == 0) {
d279 3
a281 1
            asl_log(aslc, NULL, ASL_LEVEL_NOTICE, "Xquartz: Starting X server: %s --listenonly", x11_path);
d286 1
a286 1
        for(i=0; i < 80; i++) {
d289 1
a289 1
            if(kr == KERN_SUCCESS)
d293 1
a293 1
        if(kr != KERN_SUCCESS) {
d295 3
a297 1
            asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: bootstrap_look_up(): %s", bootstrap_strerror(kr));
d299 3
a301 1
            asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: bootstrap_look_up(): %ul", (unsigned long)kr);
d306 1
a306 1
    
d311 1
a311 1
    if(launchd_fd != -1) {
d315 8
a322 3
        for(try=0, try_max=5; try < try_max; try++) {
            if(request_fd_handoff_socket(mp, handoff_socket_filename) != KERN_SUCCESS) {
                asl_log(aslc, NULL, ASL_LEVEL_INFO, "Xquartz: Failed to request a socket from the server to send the $DISPLAY fd over (try %d of %d)", (int)try+1, (int)try_max);
d327 5
a331 2
            if(handoff_fd == -1) {
                asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: Failed to connect to socket (try %d of %d)", (int)try+1, (int)try_max);
d335 6
a340 2
            asl_log(aslc, NULL, ASL_LEVEL_INFO, "Xquartz: Handoff connection established (try %d of %d) on fd %d, \"%s\".  Sending message.", (int)try+1, (int)try_max, handoff_fd, handoff_socket_filename);
            send_fd_handoff(handoff_fd, launchd_fd);            
d347 2
a348 2
    for(envpc=0; envp[envpc]; envpc++);
    
d355 3
a357 2
    if(!newargv || !newenvp) {
        asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: Memory allocation failure");
d360 2
a361 2
    
    for(i=0; i < argc; i++) {
d364 1
a364 1
    for(i=0; i < envpc; i++) {
d374 3
a376 1
        asl_log(aslc, NULL, ASL_LEVEL_ERR, "Xquartz: start_x11_server: %s", mach_error_string(kr));
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a35 1
#include <stdio.h>
d38 1
d43 1
a43 1
#define kX11AppBundleId LAUNCHD_ID_PREFIX".X11"
a45 2
static char *server_bootstrap_name = kX11AppBundleId;

a56 9
#ifndef BUILD_DATE
#define BUILD_DATE "?"
#endif
#ifndef XSERVER_VERSION
#define XSERVER_VERSION "?"
#endif

#define DEBUG 1

a57 1

d59 1
d70 1
a70 1
                fprintf(stderr, "Xquartz: Invalid response from LSFindApplicationForInfo(%s)\n", 
d76 1
a76 1
                fprintf(stderr, "Xquartz: Error resolving URL for %s\n", kX11AppBundleId);
d81 1
a81 3
#ifdef DEBUG
            fprintf(stderr, "Xquartz: X11.app = %s\n", x11_path);
#endif
d84 1
a84 1
            fprintf(stderr, "Xquartz: Unable to find application for %s\n", kX11AppBundleId);
d87 1
a87 1
            fprintf(stderr, "Xquartz: Unable to find application for %s, error code = %d\n", 
d113 1
a113 1
        fprintf(stderr, "Xquartz: Failed to create socket: %s - %s\n", filename, strerror(errno));
d118 1
a118 1
        fprintf(stderr, "Xquartz: Failed to connect to socket: %s - %d - %s\n", filename, errno, strerror(errno));
d159 1
a159 1
        fprintf(stderr, "Xquartz: Error sending $DISPLAY file descriptor over fd %d: %d -- %s\n", connected_fd, errno, strerror(errno));
d163 1
a163 4
#ifdef DEBUG
    fprintf(stderr, "Xquartz: Message sent.  Closing handoff fd.\n");
#endif

d167 1
d184 3
a186 7

    if(argc == 2 && !strcmp(argv[1], "-version")) {
        fprintf(stderr, "X.org Release 7.5\n");
        fprintf(stderr, "X.Org X Server %s\n", XSERVER_VERSION);
        fprintf(stderr, "Build Date: %s\n", BUILD_DATE);
        return EXIT_SUCCESS;
    }
d190 13
a202 1
    
d223 1
a223 1
        fprintf(stderr, "Xquartz: Unable to locate waiting server: %s\n", server_bootstrap_name);
d229 1
a229 1
            fprintf(stderr, "Xquartz: Could not fork: %s\n", strerror(errno));
d238 1
a238 1
            fprintf(stderr, "Xquartz: Starting X server: %s --listenonly\n", x11_path);
d252 1
a252 1
            fprintf(stderr, "Xquartz: bootstrap_look_up(): %s\n", bootstrap_strerror(kr));
d254 1
a254 1
            fprintf(stderr, "Xquartz: bootstrap_look_up(): %ul\n", (unsigned long)kr);
d270 1
a270 1
                fprintf(stderr, "Xquartz: Failed to request a socket from the server to send the $DISPLAY fd over (try %d of %d)\n", (int)try+1, (int)try_max);
d276 1
a276 1
                fprintf(stderr, "Xquartz: Failed to connect to socket (try %d of %d)\n", (int)try+1, (int)try_max);
d280 1
a280 4
#ifdef DEBUG
            fprintf(stderr, "Xquartz: Handoff connection established (try %d of %d) on fd %d, \"%s\".  Sending message.\n", (int)try+1, (int)try_max, handoff_fd, handoff_socket_filename);
#endif

d293 2
a294 2
    newargv = (string_array_t)malloc(argc * sizeof(string_t));
    newenvp = (string_array_t)malloc(envpc * sizeof(string_t));
d297 1
a297 1
        fprintf(stderr, "Xquartz: Memory allocation failure\n");
d314 1
a314 1
        fprintf(stderr, "Xquartz: start_x11_server: %s\n", mach_error_string(kr));
@


1.1
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d43 2
a44 1
static char *server_bootstrap_name = "org.x.X11";
d46 1
a46 6
/* The launchd startup is only designed for the primary X11.app that is
 * org.x.X11... server_bootstrap_name might be differnet if we were triggered to
 * start by another X11.app.
 */
#define kX11AppBundleId "org.x.X11"
#define kX11AppBundlePath "/Contents/MacOS/X11"
d72 1
a72 1
static void set_x11_path() {
a75 1
    CFBundleRef bundle = NULL;
a76 1
    UInt32 ver;
a85 6
            bundle = CFBundleCreate(NULL, appURL);
            if(!bundle) {
                fprintf(stderr, "Xquartz: Null value returned from CFBundleCreate().\n");
                exit(2);                
            }

a90 14
            ver = CFBundleGetVersionNumber(bundle);
            if(ver < 0x02308000) {
                CFStringRef versionStr = CFBundleGetValueForInfoDictionaryKey(bundle, kCFBundleVersionKey);
                const char * versionCStr = "Unknown";

                if(versionStr) 
                    versionCStr = CFStringGetCStringPtr(versionStr, kCFStringEncodingMacRoman);

                fprintf(stderr, "Xquartz: Could not find a new enough X11.app LSFindApplicationForInfo() returned\n");
                fprintf(stderr, "         X11.app = %s\n", x11_path);
                fprintf(stderr, "         Version = %s (%x), Expected Version > 2.3.0\n", versionCStr, (unsigned)ver);
                exit(9);
            }

a142 3
    iov[0].iov_base = databuf;
    iov[0].iov_len  = sizeof(databuf);

d149 5
d162 1
a162 1
    struct cmsghdr *cmsg = CMSG_FIRSTHDR (&msg);
d201 1
a201 1
        fprintf(stderr, "X.org Release 7.3\n");
d228 3
d234 1
a234 1
        pid_t child = fork();
d303 3
a305 3
    newargv = (string_array_t)alloca(argc * sizeof(string_t));
    newenvp = (string_array_t)alloca(envpc * sizeof(string_t));
    
d308 1
a308 1
        exit(EXIT_FAILURE);
d319 4
@

