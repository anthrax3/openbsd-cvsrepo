head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.18
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.16
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.14
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@// @;


1.5
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.55;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.09;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.06.19.44.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/* main.m
 *
 * Copyright (c) 2002-2012 Apple Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT
 * HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above
 * copyright holders shall not be used in advertising or otherwise to
 * promote the sale, use or other dealings in this Software without
 * prior written authorization.
 */

#include "pbproxy.h"
#import "x-selection.h"

#include <pthread.h>
#include <unistd.h>
#include <X11/extensions/applewm.h>

Display *xpbproxy_dpy;
int xpbproxy_apple_wm_event_base, xpbproxy_apple_wm_error_base;
int xpbproxy_xfixes_event_base, xpbproxy_xfixes_error_base;
BOOL xpbproxy_have_xfixes;

extern char *display;

#ifdef STANDALONE_XPBPROXY
BOOL xpbproxy_is_standalone = NO;
#endif

x_selection *_selection_object;

extern BOOL serverRunning;
extern pthread_mutex_t serverRunningMutex;
extern pthread_cond_t serverRunningCond;

static inline void
wait_for_server_init(void)
{
    /* If the server hasn't finished initializing, wait for it... */
    if (!serverRunning) {
        pthread_mutex_lock(&serverRunningMutex);
        while (!serverRunning)
            pthread_cond_wait(&serverRunningCond, &serverRunningMutex);
        pthread_mutex_unlock(&serverRunningMutex);
    }
}

static int
x_io_error_handler(Display *dpy)
{
    /* We lost our connection to the server. */

    TRACE();

    /* trigger the thread to restart?
     *   NO - this would be to a "deeper" problem, and restarts would just
     *        make things worse...
     */
#ifdef STANDALONE_XPBPROXY
    if (xpbproxy_is_standalone)
        exit(EXIT_FAILURE);
#endif

    /* Prevent _XIOError from calling exit() */
    pthread_exit(NULL);
    return 0;
}

static int
x_error_handler(Display *dpy, XErrorEvent *errevent)
{
    return 0;
}

int
xpbproxy_run(void)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    size_t i;

    wait_for_server_init();

    for (i = 0, xpbproxy_dpy = NULL; !xpbproxy_dpy && i < 5; i++) {
        xpbproxy_dpy = XOpenDisplay(NULL);

        if (!xpbproxy_dpy && display) {
            char _display[32];
            snprintf(_display, sizeof(_display), ":%s", display);
            setenv("DISPLAY", _display, TRUE);

            xpbproxy_dpy = XOpenDisplay(_display);
        }
        if (!xpbproxy_dpy)
            sleep(1);
    }

    if (xpbproxy_dpy == NULL) {
        ErrorF("xpbproxy: can't open default display\n");
        [pool release];
        return EXIT_FAILURE;
    }

    XSetIOErrorHandler(x_io_error_handler);
    XSetErrorHandler(x_error_handler);

    if (!XAppleWMQueryExtension(xpbproxy_dpy, &xpbproxy_apple_wm_event_base,
                                &xpbproxy_apple_wm_error_base)) {
        ErrorF("xpbproxy: can't open AppleWM server extension\n");
        [pool release];
        return EXIT_FAILURE;
    }

    xpbproxy_have_xfixes =
        XFixesQueryExtension(xpbproxy_dpy, &xpbproxy_xfixes_event_base,
                             &xpbproxy_xfixes_error_base);

    XAppleWMSelectInput(xpbproxy_dpy, AppleWMActivationNotifyMask |
                        AppleWMPasteboardNotifyMask);

    _selection_object = [[x_selection alloc] init];

    if (!xpbproxy_input_register()) {
        [pool release];
        return EXIT_FAILURE;
    }

    [pool release];

    CFRunLoopRun();

    return EXIT_SUCCESS;
}

id
xpbproxy_selection_object(void)
{
    return _selection_object;
}

Time
xpbproxy_current_timestamp(void)
{
    /* FIXME: may want to fetch a timestamp from the server.. */
    return CurrentTime;
}
@


1.4
log
@Update to xserver 1.11.2
@
text
@d2 27
a28 26
   Copyright (c) 2002, 2008 Apple Computer, Inc. All rights reserved.

   Permission is hereby granted, free of charge, to any person
   obtaining a copy of this software and associated documentation files
   (the "Software"), to deal in the Software without restriction,
   including without limitation the rights to use, copy, modify, merge,
   publish, distribute, sublicense, and/or sell copies of the Software,
   and to permit persons to whom the Software is furnished to do so,
   subject to the following conditions:

   The above copyright notice and this permission notice shall be
   included in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT.  IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT
   HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.

   Except as contained in this notice, the name(s) of the above
   copyright holders shall not be used in advertising or otherwise to
   promote the sale, use or other dealings in this Software without
   prior written authorization.
d55 3
a57 1
static inline void wait_for_server_init(void) {
d59 1
a59 1
    if(!serverRunning) {
d61 1
a61 1
        while(!serverRunning)
d67 3
a69 1
static int x_io_error_handler (Display *dpy) {
d71 2
a72 2
    
    TRACE ();
d79 1
a79 1
    if(xpbproxy_is_standalone)
d88 3
a90 1
static int x_error_handler (Display *dpy, XErrorEvent *errevent) {
d94 3
a96 1
int xpbproxy_run (void) {
d99 1
a99 1
    
d101 2
a102 2
    
    for(i=0, xpbproxy_dpy=NULL; !xpbproxy_dpy && i<5; i++) {
d104 2
a105 2
        
        if(!xpbproxy_dpy && display) {
d109 2
a110 2
            
            xpbproxy_dpy=XOpenDisplay(_display);
d112 1
a112 1
        if(!xpbproxy_dpy)
d115 1
a115 1
    
d121 6
a126 6
    
    XSetIOErrorHandler (x_io_error_handler);
    XSetErrorHandler (x_error_handler);
    
    if (!XAppleWMQueryExtension (xpbproxy_dpy, &xpbproxy_apple_wm_event_base,
                                 &xpbproxy_apple_wm_error_base)) {
d132 6
a137 1
    xpbproxy_have_xfixes = XFixesQueryExtension(xpbproxy_dpy, &xpbproxy_xfixes_event_base, &xpbproxy_xfixes_error_base);
a138 3
    XAppleWMSelectInput (xpbproxy_dpy, AppleWMActivationNotifyMask |
                         AppleWMPasteboardNotifyMask);
    
d140 2
a141 2
    
    if(!xpbproxy_input_register()) {
d145 1
a145 1
    
d147 1
a147 1
    
d153 3
a155 1
id xpbproxy_selection_object (void) {
d159 3
a161 1
Time xpbproxy_current_timestamp (void) {
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d50 3
a52 3
extern BOOL serverInitComplete;
extern pthread_mutex_t serverInitCompleteMutex;
extern pthread_cond_t serverInitCompleteCond;
d56 5
a60 5
    if(!serverInitComplete) {
        pthread_mutex_lock(&serverInitCompleteMutex);
        while(!serverInitComplete)
            pthread_cond_wait(&serverInitCompleteCond, &serverInitCompleteMutex);
        pthread_mutex_unlock(&serverInitCompleteMutex);
d108 1
a108 1
        fprintf (stderr, "xpbproxy: can't open default display\n");
d118 1
a118 1
        fprintf (stderr, "xpbproxy: can't open AppleWM server extension\n");
a148 16
}

void debug_printf (const char *fmt, ...) {
    static int spew = -1;
    
    if (spew == -1) {
        char *x = getenv ("DEBUG");
        spew = (x != NULL && atoi (x) != 0);
    }
    
    if (spew) {
        va_list args;
        va_start(args, fmt);
        vfprintf (stderr, fmt, args);
        va_end(args);
    }
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d78 2
@


1.1
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d50 14
d85 1
a85 14
static inline pthread_t create_thread(void *func, void *arg) {
    pthread_attr_t attr;
    pthread_t tid;
    
    pthread_attr_init(&attr);
    pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM);
    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
    pthread_create(&tid, &attr, func, arg);
    pthread_attr_destroy(&attr);
    
    return tid;
}

static void *xpbproxy_x_thread(void *args) {
d88 3
a90 1

d98 1
a98 1

d108 1
a108 1
        return NULL;
d118 1
a118 1
        return NULL;
d120 1
a120 1
    
d122 1
a122 1
    
d130 1
a130 1
        return NULL;
d132 1
a132 1

d134 2
a135 4
 
    xpbproxy_input_loop();
    return NULL;
}
d137 1
a137 3
BOOL xpbproxy_init (void) {
    create_thread(xpbproxy_x_thread, NULL);
    return TRUE;
@

