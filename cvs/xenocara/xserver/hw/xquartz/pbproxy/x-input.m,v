head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.20
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.18
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.16
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.12
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.10
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.6
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@// @;


1.4
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.55;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.06.19.44.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/* x-input.m -- event handling
 *
 * Copyright (c) 2002-2012 Apple Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT
 * HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above
 * copyright holders shall not be used in advertising or otherwise to
 * promote the sale, use or other dealings in this Software without
 * prior written authorization.
 */

#include "pbproxy.h"
#import "x-selection.h"

#include <CoreFoundation/CFSocket.h>
#include <CoreFoundation/CFRunLoop.h>

#include <X11/Xatom.h>
#include <X11/keysym.h>
#include <X11/extensions/applewm.h>

#include <unistd.h>

static CFRunLoopSourceRef xpbproxy_dpy_source;

#ifdef STANDALONE_XPBPROXY
BOOL xpbproxy_prefs_reload = NO;
#endif

/* Timestamp when the X server last told us it's active */
static Time last_activation_time;

static void
x_event_apple_wm_notify(XAppleWMNotifyEvent *e)
{
    int type = e->type - xpbproxy_apple_wm_event_base;
    int kind = e->kind;

    /* We want to reload prefs even if we're not active */
    if (type == AppleWMActivationNotify &&
        kind == AppleWMReloadPreferences)
        [xpbproxy_selection_object ()reload_preferences];

    if (![xpbproxy_selection_object ()is_active])
        return;

    switch (type) {
    case AppleWMActivationNotify:
        switch (kind) {
        case AppleWMIsActive:
            last_activation_time = e->time;
            [xpbproxy_selection_object () x_active:e->time];
            break;

        case AppleWMIsInactive:
            [xpbproxy_selection_object () x_inactive:e->time];
            break;
        }
        break;

    case AppleWMPasteboardNotify:
        switch (kind) {
        case AppleWMCopyToPasteboard:
            [xpbproxy_selection_object () x_copy:e->time];
        }
        break;
    }
}

static void
xpbproxy_process_xevents(void)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

    if (pool == nil) {
        ErrorF("unable to allocate/init auto release pool!\n");
        return;
    }

    while (XPending(xpbproxy_dpy) != 0) {
        XEvent e;

        XNextEvent(xpbproxy_dpy, &e);

        switch (e.type) {
        case SelectionClear:
            if ([xpbproxy_selection_object ()is_active])
                [xpbproxy_selection_object () clear_event:&e.xselectionclear];
            break;

        case SelectionRequest:
            [xpbproxy_selection_object () request_event:&e.xselectionrequest];
            break;

        case SelectionNotify:
            [xpbproxy_selection_object () notify_event:&e.xselection];
            break;

        case PropertyNotify:
            [xpbproxy_selection_object () property_event:&e.xproperty];
            break;

        default:
            if (e.type >= xpbproxy_apple_wm_event_base &&
                e.type < xpbproxy_apple_wm_event_base +
                AppleWMNumberEvents) {
                x_event_apple_wm_notify((XAppleWMNotifyEvent *)&e);
            }
            else if (e.type == xpbproxy_xfixes_event_base +
                     XFixesSelectionNotify) {
                [xpbproxy_selection_object () xfixes_selection_notify:(
                     XFixesSelectionNotifyEvent *)&e];
            }
            break;
        }

        XFlush(xpbproxy_dpy);
    }

    [pool release];
}

static BOOL
add_input_socket(int sock, CFOptionFlags callback_types,
                 CFSocketCallBack callback, const CFSocketContext *ctx,
                 CFRunLoopSourceRef *cf_source)
{
    CFSocketRef cf_sock;

    cf_sock = CFSocketCreateWithNative(kCFAllocatorDefault, sock,
                                       callback_types, callback, ctx);
    if (cf_sock == NULL) {
        close(sock);
        return FALSE;
    }

    *cf_source = CFSocketCreateRunLoopSource(kCFAllocatorDefault,
                                             cf_sock, 0);
    CFRelease(cf_sock);

    if (*cf_source == NULL)
        return FALSE;

    CFRunLoopAddSource(CFRunLoopGetCurrent(),
                       *cf_source, kCFRunLoopDefaultMode);
    return TRUE;
}

static void
x_input_callback(CFSocketRef sock, CFSocketCallBackType type,
                 CFDataRef address, const void *data, void *info)
{

#ifdef STANDALONE_XPBPROXY
    if (xpbproxy_prefs_reload) {
        [xpbproxy_selection_object ()reload_preferences];
        xpbproxy_prefs_reload = NO;
    }
#endif

    xpbproxy_process_xevents();
}

BOOL
xpbproxy_input_register(void)
{
    return add_input_socket(ConnectionNumber(
                                xpbproxy_dpy), kCFSocketReadCallBack,
                            x_input_callback, NULL, &xpbproxy_dpy_source);
}
@


1.3
log
@Update to xserver 1.11.2
@
text
@d2 27
a28 26
   Copyright (c) 2002, 2008 Apple Computer, Inc. All rights reserved.

   Permission is hereby granted, free of charge, to any person
   obtaining a copy of this software and associated documentation files
   (the "Software"), to deal in the Software without restriction,
   including without limitation the rights to use, copy, modify, merge,
   publish, distribute, sublicense, and/or sell copies of the Software,
   and to permit persons to whom the Software is furnished to do so,
   subject to the following conditions:

   The above copyright notice and this permission notice shall be
   included in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT.  IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT
   HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.

   Except as contained in this notice, the name(s) of the above
   copyright holders shall not be used in advertising or otherwise to
   promote the sale, use or other dealings in this Software without
   prior written authorization.
d52 3
a54 1
static void x_event_apple_wm_notify(XAppleWMNotifyEvent *e) {
d59 3
a61 3
    if(type == AppleWMActivationNotify &&
       kind == AppleWMReloadPreferences)
        [xpbproxy_selection_object() reload_preferences];
d63 1
a63 1
    if(![xpbproxy_selection_object() is_active])
d66 6
a71 12
    switch (type) {              
        case AppleWMActivationNotify:
            switch (kind) {
                case AppleWMIsActive:
                    last_activation_time = e->time;
                    [xpbproxy_selection_object() x_active:e->time];
                    break;
                    
                case AppleWMIsInactive:
                    [xpbproxy_selection_object() x_inactive:e->time];
                    break;
            }
d73 3
a75 6
            
        case AppleWMPasteboardNotify:
            switch (kind) {
                case AppleWMCopyToPasteboard:
                    [xpbproxy_selection_object() x_copy:e->time];
            }
d77 9
d89 3
a91 1
static void xpbproxy_process_xevents(void) {
d93 2
a94 2
    
    if(pool == nil) {
d98 1
a98 1
    
d101 33
a133 29
        
        XNextEvent (xpbproxy_dpy, &e);
        
        switch (e.type) {                
            case SelectionClear:
                if([xpbproxy_selection_object() is_active])
                    [xpbproxy_selection_object () clear_event:&e.xselectionclear];
                break;
                
            case SelectionRequest:
                [xpbproxy_selection_object () request_event:&e.xselectionrequest];
                break;
                
            case SelectionNotify:
                [xpbproxy_selection_object () notify_event:&e.xselection];
                break;
                
            case PropertyNotify:
                [xpbproxy_selection_object () property_event:&e.xproperty];
                break;
                
            default:
                if(e.type >= xpbproxy_apple_wm_event_base &&
                   e.type < xpbproxy_apple_wm_event_base + AppleWMNumberEvents) {
                    x_event_apple_wm_notify((XAppleWMNotifyEvent *) &e);
                } else if(e.type == xpbproxy_xfixes_event_base + XFixesSelectionNotify) {
                    [xpbproxy_selection_object() xfixes_selection_notify:(XFixesSelectionNotifyEvent *)&e];
                }
                break;
d135 1
a135 1
        
d138 1
a138 1
    
d142 5
a146 3
static BOOL add_input_socket (int sock, CFOptionFlags callback_types,
                             CFSocketCallBack callback, const CFSocketContext *ctx,
                             CFRunLoopSourceRef *cf_source) {
d148 3
a150 3
    
    cf_sock = CFSocketCreateWithNative (kCFAllocatorDefault, sock,
                                        callback_types, callback, ctx);
d152 1
a152 1
        close (sock);
d155 5
a159 5
    
    *cf_source = CFSocketCreateRunLoopSource (kCFAllocatorDefault,
                                              cf_sock, 0);
    CFRelease (cf_sock);
    
d162 3
a164 3
    
    CFRunLoopAddSource (CFRunLoopGetCurrent (),
                        *cf_source, kCFRunLoopDefaultMode);
d168 4
a171 2
static void x_input_callback (CFSocketRef sock, CFSocketCallBackType type,
                              CFDataRef address, const void *data, void *info) {
d174 2
a175 2
    if(xpbproxy_prefs_reload) {
        [xpbproxy_selection_object() reload_preferences];
d179 1
a179 1
    
d183 5
a187 2
BOOL xpbproxy_input_register(void) {
    return add_input_socket(ConnectionNumber(xpbproxy_dpy), kCFSocketReadCallBack,
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d90 1
a90 1
        fprintf(stderr, "unable to allocate/init auto release pool!\n");
@


1.1
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a41 2
#include <pthread.h>

a47 3
static pthread_mutex_t xpbproxy_dpy_rdy_lock = PTHREAD_MUTEX_INITIALIZER;
static pthread_cond_t xpbproxy_dpy_rdy_cond = PTHREAD_COND_INITIALIZER;

d86 10
a95 4
void xpbproxy_input_loop() {
    pthread_mutex_lock(&xpbproxy_dpy_rdy_lock);
    while(true) {
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
d97 1
a97 4
        if(pool == nil) {
            fprintf(stderr, "unable to allocate/init auto release pool!\n");
            break;
        }
d99 26
a124 36
        while (XPending(xpbproxy_dpy) != 0) {
            XEvent e;
            
            pthread_mutex_unlock(&xpbproxy_dpy_rdy_lock);
            XNextEvent (xpbproxy_dpy, &e);
            
            switch (e.type) {                
                case SelectionClear:
                    if([xpbproxy_selection_object() is_active])
                        [xpbproxy_selection_object () clear_event:&e.xselectionclear];
                    break;
                    
                case SelectionRequest:
                    [xpbproxy_selection_object () request_event:&e.xselectionrequest];
                    break;
                    
                case SelectionNotify:
                    [xpbproxy_selection_object () notify_event:&e.xselection];
                    break;
                    
                case PropertyNotify:
                    [xpbproxy_selection_object () property_event:&e.xproperty];
                    break;
                    
                default:
                    if(e.type >= xpbproxy_apple_wm_event_base &&
                       e.type < xpbproxy_apple_wm_event_base + AppleWMNumberEvents) {
                        x_event_apple_wm_notify((XAppleWMNotifyEvent *) &e);
                    } else if(e.type == xpbproxy_xfixes_event_base + XFixesSelectionNotify) {
                        [xpbproxy_selection_object() xfixes_selection_notify:(XFixesSelectionNotifyEvent *)&e];
                    }
                    break;
            }
            
            XFlush(xpbproxy_dpy);
            pthread_mutex_lock(&xpbproxy_dpy_rdy_lock);
d127 1
a127 3
        [pool release];
        
        pthread_cond_wait(&xpbproxy_dpy_rdy_cond, &xpbproxy_dpy_rdy_lock);
d129 2
d152 1
a152 1
    CFRunLoopAddSource (CFRunLoopGetMain (),
d166 2
a167 4

    pthread_mutex_lock(&xpbproxy_dpy_rdy_lock);
    pthread_cond_broadcast(&xpbproxy_dpy_rdy_cond);
    pthread_mutex_unlock(&xpbproxy_dpy_rdy_lock);
@

