head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.6
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.11.0.6
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.2
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.4
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.05.29.12.02.39;	author matthieu;	state Exp;
branches;
next	1.11;
commitid	s0SI41sEunLdyFfd;

1.11
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.10;
commitid	cVXoV5PxI8YrEaVA;

1.10
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.10.13.21.28;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.05.13.32.53;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.02.16.08.39;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.21.20.10.48;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.08;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.35;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.33;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.29;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 *
 * Quartz-specific support for the Darwin X Server
 *
 * Copyright (c) 2002-2012 Apple Inc. All rights reserved.
 * Copyright (c) 2001-2004 Greg Parker and Torrey T. Lyons.
 *                 All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the sale,
 * use or other dealings in this Software without prior written authorization.
 */

#include "sanitizedCarbon.h"

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "quartzCommon.h"
#include "quartzRandR.h"
#include "inputstr.h"
#include "quartz.h"
#include "darwin.h"
#include "darwinEvents.h"
#include "pseudoramiX.h"
#include "extension.h"
#include "nonsdk_extinit.h"
#include "glx_extinit.h"
#define _APPLEWM_SERVER_
#include "applewmExt.h"

#include "X11Application.h"

#include <X11/extensions/applewmconst.h>

// X headers
#include "scrnintstr.h"
#include "windowstr.h"
#include "colormapst.h"
#include "globals.h"
#include "mi.h"

// System headers
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <IOKit/pwr_mgt/IOPMLib.h>
#include <libkern/OSAtomic.h>
#include <signal.h>

#include <rootlessCommon.h>
#include <Xplugin.h>

/* Work around a bug on Leopard's headers */
#if defined (__LP64__) && MAC_OS_X_VERSION_MAX_ALLOWED >= 1050 && MAC_OS_X_VERSION_MAX_ALLOWED < 1060
extern OSErr UpdateSystemActivity(UInt8 activity);
#define OverallAct 0
#endif

DevPrivateKeyRec quartzScreenKeyRec;
int aquaMenuBarHeight = 0;
QuartzModeProcsPtr quartzProcs = NULL;
const char             *quartzOpenGLBundle = NULL;

Bool XQuartzFullscreenDisableHotkeys = TRUE;
Bool XQuartzOptionSendsAlt = FALSE;
Bool XQuartzEnableKeyEquivalents = TRUE;
Bool XQuartzFullscreenVisible = FALSE;
Bool XQuartzRootlessDefault = TRUE;
Bool XQuartzIsRootless = TRUE;
Bool XQuartzServerVisible = FALSE;
Bool XQuartzFullscreenMenu = FALSE;

int32_t XQuartzShieldingWindowLevel = 0;

/*
   ===========================================================================

   Screen functions

   ===========================================================================
 */

/*
 * QuartzAddScreen
 *  Do mode dependent initialization of each screen for Quartz.
 */
Bool
QuartzAddScreen(int index,
                ScreenPtr pScreen)
{
    // The clang static analyzer thinks we leak displayInfo here
#ifndef __clang_analyzer__
    // allocate space for private per screen Quartz specific storage
    QuartzScreenPtr displayInfo = calloc(sizeof(QuartzScreenRec), 1);

    // QUARTZ_PRIV(pScreen) = displayInfo;
    dixSetPrivate(&pScreen->devPrivates, quartzScreenKey, displayInfo);
#endif /* __clang_analyzer__ */

    // do Quartz mode specific initialization
    return quartzProcs->AddScreen(index, pScreen);
}

/*
 * QuartzSetupScreen
 *  Finalize mode specific setup of each screen.
 */
Bool
QuartzSetupScreen(int index,
                  ScreenPtr pScreen)
{
    // do Quartz mode specific setup
    if (!quartzProcs->SetupScreen(index, pScreen))
        return FALSE;

    // setup cursor support
    if (!quartzProcs->InitCursor(pScreen))
        return FALSE;

#if defined(RANDR)
    if (!QuartzRandRInit(pScreen)) {
        DEBUG_LOG("Failed to init RandR extension.\n");
        return FALSE;
    }
#endif

    return TRUE;
}

static const ExtensionModule quartzExtensions[] = {
    /* PseudoramiX needs to be done before RandR, so
     * it is in miinitext.c until it can be reordered.
     * { PseudoramiXExtensionInit, "PseudoramiX", &noPseudoramiXExtension },
     */
#ifdef GLXEXT
    {GlxExtensionInit, "GLX", &noGlxExtension},
#endif
};

/*
 * QuartzExtensionInit
 * Initialises XQuartz-specific extensions.
 */
static void QuartzExtensionInit(void)
{
    LoadExtensionList(quartzExtensions, ARRAY_SIZE(quartzExtensions), TRUE);
}

/*
 * QuartzInitOutput
 *  Quartz display initialization.
 */
void
QuartzInitOutput(int argc,
                 char **argv)
{
    /* For XQuartz, we want to just use the default signal handler to work better with CrashTracer */
    signal(SIGSEGV, SIG_DFL);
    signal(SIGILL, SIG_DFL);
#ifdef SIGEMT
    signal(SIGEMT, SIG_DFL);
#endif
    signal(SIGFPE, SIG_DFL);
#ifdef SIGBUS
    signal(SIGBUS, SIG_DFL);
#endif
#ifdef SIGSYS
    signal(SIGSYS, SIG_DFL);
#endif
#ifdef SIGXCPU
    signal(SIGXCPU, SIG_DFL);
#endif
#ifdef SIGXFSZ
    signal(SIGXFSZ, SIG_DFL);
#endif

    if (!RegisterBlockAndWakeupHandlers(QuartzBlockHandler,
                                        QuartzWakeupHandler,
                                        NULL)) {
        FatalError("Could not register block and wakeup handlers.");
    }

    if (!dixRegisterPrivateKey(&quartzScreenKeyRec, PRIVATE_SCREEN, 0))
        FatalError("Failed to alloc quartz screen private.\n");

    // Do display mode specific initialization
    quartzProcs->DisplayInit();

    QuartzExtensionInit();
}

/*
 * QuartzInitInput
 *  Inform the main thread the X server is ready to handle events.
 */
void
QuartzInitInput(int argc,
                char **argv)
{
    X11ApplicationSetCanQuit(0);
    X11ApplicationServerReady();
    // Do final display mode specific initialization before handling events
    if (quartzProcs->InitInput)
        quartzProcs->InitInput(argc, argv);
}

void
QuartzUpdateScreens(void)
{
    ScreenPtr pScreen;
    WindowPtr pRoot;
    int x, y, width, height, sx, sy;
    xEvent e;
    BoxRec bounds;

    if (noPseudoramiXExtension || screenInfo.numScreens != 1) {
        /* FIXME: if not using Xinerama, we have multiple screens, and
           to do this properly may need to add or remove screens. Which
           isn't possible. So don't do anything. Another reason why
           we default to running with Xinerama. */

        return;
    }

    pScreen = screenInfo.screens[0];

    PseudoramiXResetScreens();
    quartzProcs->AddPseudoramiXScreens(&x, &y, &width, &height, pScreen);

    pScreen->x = x;
    pScreen->y = y;
    pScreen->mmWidth = pScreen->mmWidth * ((double)width / pScreen->width);
    pScreen->mmHeight = pScreen->mmHeight * ((double)height / pScreen->height);
    pScreen->width = width;
    pScreen->height = height;

    DarwinAdjustScreenOrigins(&screenInfo);

    /* DarwinAdjustScreenOrigins or UpdateScreen may change pScreen->x/y,
     * so use it rather than x/y
     */
    sx = pScreen->x + darwinMainScreenX;
    sy = pScreen->y + darwinMainScreenY;

    /* Adjust the root window. */
    pRoot = pScreen->root;
    AppleWMSetScreenOrigin(pRoot);
    pScreen->ResizeWindow(pRoot, x - sx, y - sy, width, height, NULL);

    /* <rdar://problem/7770779> pointer events are clipped to old display region after display reconfiguration
     * http://xquartz.macosforge.org/trac/ticket/346
     */
    bounds.x1 = 0;
    bounds.x2 = width;
    bounds.y1 = 0;
    bounds.y2 = height;
    pScreen->ConstrainCursor(inputInfo.pointer, pScreen, &bounds);
    inputInfo.pointer->spriteInfo->sprite->physLimits = bounds;
    inputInfo.pointer->spriteInfo->sprite->hotLimits = bounds;

    DEBUG_LOG(
        "Root Window: %dx%d @@ (%d, %d) darwinMainScreen (%d, %d) xy (%d, %d) dixScreenOrigins (%d, %d)\n",
        width, height, x - sx, y - sy, darwinMainScreenX, darwinMainScreenY,
        x, y,
        pScreen->x, pScreen->y);

    /* Send an event for the root reconfigure */
    e.u.u.type = ConfigureNotify;
    e.u.configureNotify.window = pRoot->drawable.id;
    e.u.configureNotify.aboveSibling = None;
    e.u.configureNotify.x = x - sx;
    e.u.configureNotify.y = y - sy;
    e.u.configureNotify.width = width;
    e.u.configureNotify.height = height;
    e.u.configureNotify.borderWidth = wBorderWidth(pRoot);
    e.u.configureNotify.override = pRoot->overrideRedirect;
    DeliverEvents(pRoot, &e, 1, NullWindow);

    quartzProcs->UpdateScreen(pScreen);

    /* PaintWindow needs to be called after RootlessUpdateScreenPixmap (from xprUpdateScreen) */
    pScreen->PaintWindow(pRoot, &pRoot->borderClip, PW_BACKGROUND);

    /* Tell RandR about the new size, so new connections get the correct info */
    RRScreenSizeNotify(pScreen);
}

static void
pokeActivityCallback(CFRunLoopTimerRef timer, void *info)
{
    UpdateSystemActivity(OverallAct);
}

static void
QuartzScreenSaver(int state)
{
    static CFRunLoopTimerRef pokeActivityTimer = NULL;
    static CFRunLoopTimerContext pokeActivityContext =
    { 0, NULL, NULL, NULL, NULL };
    static OSSpinLock pokeActivitySpinLock = OS_SPINLOCK_INIT;

    OSSpinLockLock(&pokeActivitySpinLock);

    if (state) {
        if (pokeActivityTimer == NULL)
            goto QuartzScreenSaverEnd;

        CFRunLoopTimerInvalidate(pokeActivityTimer);
        CFRelease(pokeActivityTimer);
        pokeActivityTimer = NULL;
    }
    else {
        if (pokeActivityTimer != NULL)
            goto QuartzScreenSaverEnd;

        pokeActivityTimer = CFRunLoopTimerCreate(NULL,
                                                 CFAbsoluteTimeGetCurrent(),
                                                 30, 0, 0,
                                                 pokeActivityCallback,
                                                 &pokeActivityContext);
        if (pokeActivityTimer == NULL) {
            ErrorF("Unable to create pokeActivityTimer.\n");
            goto QuartzScreenSaverEnd;
        }

        CFRunLoopAddTimer(
            CFRunLoopGetMain(), pokeActivityTimer, kCFRunLoopCommonModes);
    }
QuartzScreenSaverEnd:
    OSSpinLockUnlock(&pokeActivitySpinLock);
}

void
QuartzShowFullscreen(int state)
{
    int i;

    DEBUG_LOG("QuartzShowFullscreen: state=%d\n", state);

    if (XQuartzIsRootless) {
        ErrorF("QuartzShowFullscreen called while in rootless mode.\n");
        return;
    }

    QuartzScreenSaver(!state);

    if (XQuartzFullscreenVisible == state)
        return;

    XQuartzFullscreenVisible = state;

    xp_disable_update();

    if (!XQuartzFullscreenVisible)
        RootlessHideAllWindows();

    RootlessUpdateRooted(XQuartzFullscreenVisible);

    if (XQuartzFullscreenVisible) {
        RootlessShowAllWindows();
        for (i = 0; i < screenInfo.numScreens; i++) {
            ScreenPtr pScreen = screenInfo.screens[i];
            RootlessRepositionWindows(pScreen);
            // JH: I don't think this is necessary, but keeping it here as a reminder
            //RootlessUpdateScreenPixmap(pScreen);
        }
    }

    /* Somehow the menubar manages to interfere with our event stream
     * in fullscreen mode, even though it's not visible.
     */
    X11ApplicationShowHideMenubar(!XQuartzFullscreenVisible);

    xp_reenable_update();

    if (XQuartzFullscreenDisableHotkeys)
        xp_disable_hot_keys(XQuartzFullscreenVisible);
}

void
QuartzSetRootless(Bool state)
{
    DEBUG_LOG("QuartzSetRootless state=%d\n", state);

    if (XQuartzIsRootless == state)
        return;

    if (state)
        QuartzShowFullscreen(FALSE);

    XQuartzIsRootless = state;

    xp_disable_update();

    /* When in rootless, the menubar is not part of the screen, so we need to update our screens on toggle */
    QuartzUpdateScreens();

    if (XQuartzIsRootless) {
        RootlessShowAllWindows();
    }
    else {
        RootlessHideAllWindows();
    }

    X11ApplicationShowHideMenubar(TRUE);

    xp_reenable_update();

    xp_disable_hot_keys(FALSE);
}

/*
 * QuartzShow
 *  Show the X server on screen. Does nothing if already shown.
 *  Calls mode specific screen resume to restore the X clip regions
 *  (if needed) and the X server cursor state.
 */
void
QuartzShow(void)
{
    int i;

    if (XQuartzServerVisible)
        return;

    XQuartzServerVisible = TRUE;
    for (i = 0; i < screenInfo.numScreens; i++) {
        if (screenInfo.screens[i]) {
            quartzProcs->ResumeScreen(screenInfo.screens[i]);
        }
    }

    if (!XQuartzIsRootless)
        QuartzShowFullscreen(TRUE);
}

/*
 * QuartzHide
 *  Remove the X server display from the screen. Does nothing if already
 *  hidden. Calls mode specific screen suspend to set X clip regions to
 *  prevent drawing (if needed) and restore the Aqua cursor.
 */
void
QuartzHide(void)
{
    int i;

    if (XQuartzServerVisible) {
        for (i = 0; i < screenInfo.numScreens; i++) {
            if (screenInfo.screens[i]) {
                quartzProcs->SuspendScreen(screenInfo.screens[i]);
            }
        }
    }

    if (!XQuartzIsRootless)
        QuartzShowFullscreen(FALSE);
    XQuartzServerVisible = FALSE;
}

/*
 * QuartzSetRootClip
 *  Enable or disable rendering to the X screen.
 */
void
QuartzSetRootClip(int mode)
{
    int i;

    if (!XQuartzServerVisible)
        return;

    for (i = 0; i < screenInfo.numScreens; i++) {
        if (screenInfo.screens[i]) {
            SetRootClip(screenInfo.screens[i], mode);
        }
    }
}

/*
 * QuartzSpaceChanged
 *  Unmap offscreen windows, map onscreen windows
 */
void
QuartzSpaceChanged(uint32_t space_id)
{
    /* Do something special here, so we don't depend on quartz-wm for spaces to work... */
    DEBUG_LOG("Space Changed (%u) ... do something interesting...\n",
              space_id);
}

/*
 * QuartzCopyDisplayIDs
 *  Associate an X11 screen with one or more CoreGraphics display IDs by copying
 *  the list into a private array. Free the previously copied array, if present.
 */
void
QuartzCopyDisplayIDs(ScreenPtr pScreen,
                     int displayCount, CGDirectDisplayID *displayIDs)
{
    QuartzScreenPtr pQuartzScreen = QUARTZ_PRIV(pScreen);

    free(pQuartzScreen->displayIDs);
    if (displayCount) {
        size_t size = displayCount * sizeof(CGDirectDisplayID);
        pQuartzScreen->displayIDs = malloc(size);
        memcpy(pQuartzScreen->displayIDs, displayIDs, size);
    }
    else {
        pQuartzScreen->displayIDs = NULL;
    }
    pQuartzScreen->displayCount = displayCount;
}

void
NSBeep(void);
void
DDXRingBell(int volume,              // volume is % of max
            int pitch,               // pitch is Hz
            int duration)            // duration is milliseconds
{
    if (volume)
        NSBeep();
}
@


1.11
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d46 1
d303 2
a304 2
    /* miPaintWindow needs to be called after RootlessUpdateScreenPixmap (from xprUpdateScreen) */
    miPaintWindow(pRoot, &pRoot->borderClip, PW_BACKGROUND);
d488 1
a488 1
QuartzSetRootClip(BOOL enable)
d497 1
a497 1
            SetRootClip(screenInfo.screens[i], enable);
@


1.10
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d167 1
a167 4
    int i;

    for (i = 0; i < ARRAY_SIZE(quartzExtensions); i++)
        LoadExtension(&quartzExtensions[i], TRUE);
@


1.9
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d112 2
d119 1
@


1.8
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d45 2
d148 22
d209 2
@


1.7
log
@Update to xserver 1.11.2
@
text
@d5 1
d72 9
a80 3
DevPrivateKeyRec        quartzScreenKeyRec;
int                     aquaMenuBarHeight = 0;
QuartzModeProcsPtr      quartzProcs = NULL;
d95 1
a95 1
===========================================================================
d97 1
a97 1
 Screen functions
d99 2
a100 2
===========================================================================
*/
d106 3
a108 3
Bool QuartzAddScreen(
    int index,
    ScreenPtr pScreen)
a119 1

d124 3
a126 3
Bool QuartzSetupScreen(
    int index,
    ScreenPtr pScreen)
d129 1
a129 1
    if (! quartzProcs->SetupScreen(index, pScreen))
d133 1
a133 1
    if (! quartzProcs->InitCursor(pScreen))
d137 1
a137 1
    if(!QuartzRandRInit(pScreen)) {
a145 1

d150 3
a152 3
void QuartzInitOutput(
    int argc,
    char **argv )
d176 1
a176 2
                                        NULL))
    {
d181 1
a181 1
	FatalError("Failed to alloc quartz screen private.\n");
a186 1

d191 3
a193 3
void QuartzInitInput(
    int argc,
    char **argv )
d202 3
a204 2

void QuartzUpdateScreens(void) {
d210 2
a211 3
    
    if (noPseudoramiXExtension || screenInfo.numScreens != 1)
    {
d213 4
a216 4
         to do this properly may need to add or remove screens. Which
         isn't possible. So don't do anything. Another reason why
         we default to running with Xinerama. */
        
d219 1
a219 1
    
d221 1
a221 1
    
d224 1
a224 1
    
d227 2
a228 2
    pScreen->mmWidth = pScreen->mmWidth * ((double) width / pScreen->width);
    pScreen->mmHeight = pScreen->mmHeight * ((double) height / pScreen->height);
d231 1
a231 1
    
d233 1
a233 1
    
d239 1
a239 1
    
d256 5
a260 1
    DEBUG_LOG("Root Window: %dx%d @@ (%d, %d) darwinMainScreen (%d, %d) xy (%d, %d) dixScreenOrigins (%d, %d)\n", width, height, x - sx, y - sy, darwinMainScreenX, darwinMainScreenY, x, y, pScreen->x, pScreen->y);
d277 1
a277 1
    miPaintWindow(pRoot, &pRoot->borderClip,  PW_BACKGROUND);
d283 3
a285 1
static void pokeActivityCallback(CFRunLoopTimerRef timer, void *info) {
d289 3
a291 1
static void QuartzScreenSaver(int state) {
d293 2
a294 1
    static CFRunLoopTimerContext pokeActivityContext = { 0, NULL, NULL, NULL, NULL };
d299 2
a300 2
    if(state) {
        if(pokeActivityTimer == NULL)
d306 3
a308 2
    } else {
        if(pokeActivityTimer != NULL)
d310 7
a316 3
        
        pokeActivityTimer = CFRunLoopTimerCreate(NULL, CFAbsoluteTimeGetCurrent(), 30, 0, 0, pokeActivityCallback, &pokeActivityContext);
        if(pokeActivityTimer == NULL) {
d321 2
a322 1
        CFRunLoopAddTimer(CFRunLoopGetMain(), pokeActivityTimer, kCFRunLoopCommonModes);
d328 3
a330 1
void QuartzShowFullscreen(int state) {
d332 1
a332 1
    
d334 2
a335 2
    
    if(XQuartzIsRootless) {
d339 1
a339 1
    
d341 2
a342 2
    
    if(XQuartzFullscreenVisible == state)
d344 1
a344 1
    
d346 3
a348 3
    
    xp_disable_update ();
    
d351 1
a351 1
    
d353 1
a353 1
    
d355 3
a357 3
        RootlessShowAllWindows ();
        for (i=0; i < screenInfo.numScreens; i++) {
            ScreenPtr pScreen = screenInfo.screens[i];        
d365 1
a365 1
     * in fullscreen mode, even though it's not visible. 
d368 3
a370 3
    
    xp_reenable_update ();
    
d375 3
a377 1
void QuartzSetRootless(Bool state) {    
d379 2
a380 2
    
    if(XQuartzIsRootless == state)
d382 2
a383 2
    
    if(state)
d385 1
a385 1
    
d390 1
a390 1
    /* When in rootless, the menubar is not part of the screen, so we need to update our screens on toggle */    
d393 1
a393 1
    if(XQuartzIsRootless) {
d395 2
a396 1
    } else {
d413 3
a415 1
void QuartzShow(void) {
d420 1
a420 1
    
d427 1
a427 1
    
a431 1

d438 2
a439 1
void QuartzHide(void)
d451 1
a451 1
    if(!XQuartzIsRootless)
a455 1

d460 2
a461 2
void QuartzSetRootClip(
    BOOL enable)
d475 1
a475 1
/* 
d479 3
a481 1
void QuartzSpaceChanged(uint32_t space_id) {
d483 2
a484 1
    DEBUG_LOG("Space Changed (%u) ... do something interesting...\n", space_id);
d492 4
a495 2
void QuartzCopyDisplayIDs(ScreenPtr pScreen,
                          int displayCount, CGDirectDisplayID *displayIDs) {
d499 1
a499 1
    if(displayCount) {
d503 3
a505 2
    } else {
       pQuartzScreen->displayIDs = NULL;
d510 6
a515 5
void NSBeep(void);
void DDXRingBell(
    int volume,         // volume is % of max
    int pitch,          // pitch is Hz
    int duration)       // duration is milliseconds
@


1.6
log
@Update to xserver 1.9.5. Tested by jasper@@, ajacoutot@@ and krw@@
@
text
@d65 1
a65 1
#include <pthread.h>
a241 2
    miPaintWindow(pRoot, &pRoot->borderClip,  PW_BACKGROUND);

d269 3
d283 3
a285 1
    static pthread_mutex_t pokeActivityMutex = PTHREAD_MUTEX_INITIALIZER;
a286 2
    pthread_mutex_lock(&pokeActivityMutex);
    
d307 1
a307 1
    pthread_mutex_unlock(&pokeActivityMutex);
d446 1
a446 1
            xf86SetRootClip(screenInfo.screens[i], enable);
a467 1
    int size = displayCount * sizeof(CGDirectDisplayID);
d470 7
a476 2
    pQuartzScreen->displayIDs = malloc(size);
    memcpy(pQuartzScreen->displayIDs, displayIDs, size);
@


1.5
log
@Update to xorg-server 1.9.3. Tested by japser@@, landry@@ and ajacoutot@@
in various configurations.
@
text
@d66 1
d84 2
a85 1
Bool XQuartzUseSysBeep = FALSE;
d149 20
d270 3
d473 10
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d65 1
d250 34
d293 2
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d38 1
a49 1
#include <X11/extensions/randr.h>
d59 2
d69 1
a69 11
#define FAKE_RANDR 1

// Shared global variables for Quartz modes
int                     quartzEventWriteFD = -1;
int                     quartzUseSysBeep = 0;
int                     quartzUseAGL = 1;
int                     quartzEnableKeyEquivalents = 1;
int                     quartzServerVisible = FALSE;
int                     quartzServerQuitting = FALSE;
static int              quartzScreenKeyIndex;
DevPrivateKey           quartzScreenKey = &quartzScreenKeyIndex;
a72 7
int                     quartzFullscreenDisableHotkeys = TRUE;
int                     quartzOptionSendsAlt = FALSE;

#if defined(RANDR) && !defined(FAKE_RANDR)
Bool QuartzRandRGetInfo (ScreenPtr pScreen, Rotation *rotations) {
  return FALSE;
}
d74 9
a82 18
Bool QuartzRandRSetConfig (ScreenPtr           pScreen,
			       Rotation            randr,
			       int                 rate,
			       RRScreenSizePtr     pSize) {
  return FALSE;
}

Bool QuartzRandRInit (ScreenPtr pScreen) {
  rrScrPrivPtr    pScrPriv;
    
  if (!RRScreenInit (pScreen)) return FALSE;

  pScrPriv = rrGetScrPriv(pScreen);
  pScrPriv->rrGetInfo = QuartzRandRGetInfo;
  pScrPriv->rrSetConfig = QuartzRandRSetConfig;
  return TRUE;
}
#endif
d101 1
a101 1
    QuartzScreenPtr displayInfo = xcalloc(sizeof(QuartzScreenRec), 1);
d127 7
d153 2
a154 4
#if defined(RANDR) && !defined(FAKE_RANDR)
    if(!QuartzRandRInit(pScreen))
        FatalError("Failed to init RandR extension.\n");
#endif
a176 44
#ifdef FAKE_RANDR

static const int padlength[4] = {0, 3, 2, 1};

static void
RREditConnectionInfo (ScreenPtr pScreen)
{
    xConnSetup	    *connSetup;
    char	    *vendor;
    xPixmapFormat   *formats;
    xWindowRoot	    *root;
    xDepth	    *depth;
    xVisualType	    *visual;
    int		    screen = 0;
    int		    d;

    connSetup = (xConnSetup *) ConnectionInfo;
    vendor = (char *) connSetup + sizeof (xConnSetup);
    formats = (xPixmapFormat *) ((char *) vendor +
				 connSetup->nbytesVendor +
				 padlength[connSetup->nbytesVendor & 3]);
    root = (xWindowRoot *) ((char *) formats +
			    sizeof (xPixmapFormat) * screenInfo.numPixmapFormats);
    while (screen != pScreen->myNum)
    {
	depth = (xDepth *) ((char *) root + 
			    sizeof (xWindowRoot));
	for (d = 0; d < root->nDepths; d++)
	{
	    visual = (xVisualType *) ((char *) depth +
				      sizeof (xDepth));
	    depth = (xDepth *) ((char *) visual +
				depth->nVisuals * sizeof (xVisualType));
	}
	root = (xWindowRoot *) ((char *) depth);
	screen++;
    }
    root->pixWidth = pScreen->width;
    root->pixHeight = pScreen->height;
    root->mmWidth = pScreen->mmWidth;
    root->mmHeight = pScreen->mmHeight;
}
#endif

d197 1
a197 1
    quartzProcs->AddPseudoramiXScreens(&x, &y, &width, &height);
d199 2
a200 2
    dixScreenOrigins[pScreen->myNum].x = x;
    dixScreenOrigins[pScreen->myNum].y = y;
a206 1
    quartzProcs->UpdateScreen(pScreen);
d208 1
a208 1
    /* DarwinAdjustScreenOrigins or UpdateScreen may change dixScreenOrigins,
d211 2
a212 2
    sx = dixScreenOrigins[pScreen->myNum].x + darwinMainScreenX;
    sy = dixScreenOrigins[pScreen->myNum].y + darwinMainScreenY;
d215 1
a215 1
    pRoot = WindowTable[pScreen->myNum];
d218 1
a218 1
    //pScreen->PaintWindowBackground (pRoot, &pRoot->borderClip,  PW_BACKGROUND);
d232 1
a232 1
    DEBUG_LOG("Root Window: %dx%d @@ (%d, %d) darwinMainScreen (%d, %d) xy (%d, %d) dixScreenOrigins (%d, %d)\n", width, height, x - sx, y - sy, darwinMainScreenX, darwinMainScreenY, x, y, dixScreenOrigins[pScreen->myNum].x, dixScreenOrigins[pScreen->myNum].y);
d245 2
a246 4
    
#ifdef FAKE_RANDR
    RREditConnectionInfo(pScreen);
#endif    
d249 2
a250 1
void QuartzSetFullscreen(Bool state) {
d252 1
a252 1
    DEBUG_LOG("QuartzSetFullscreen: state=%d\n", state);
d254 6
a259 1
    if(quartzHasRoot == state)
d262 1
a262 1
    quartzHasRoot = state;
d266 1
a266 1
    if (!quartzHasRoot && !quartzEnableRootless)
d269 1
a269 1
    RootlessUpdateRooted(quartzHasRoot);
d271 1
a271 1
    if (quartzHasRoot && !quartzEnableRootless)
d273 6
a278 3
    
    if (quartzHasRoot || quartzEnableRootless) {
        RootlessRepositionWindows(screenInfo.screens[0]);
d284 1
a284 1
    X11ApplicationShowHideMenubar(!quartzHasRoot);
d288 2
a289 2
    if (quartzFullscreenDisableHotkeys)
        xp_disable_hot_keys(quartzHasRoot);
d292 4
a295 2
void QuartzSetRootless(Bool state) {
    if(quartzEnableRootless == state)
d298 4
a301 1
    quartzEnableRootless = state;
d308 4
a311 6
    if(!quartzHasRoot) {
        if(!quartzEnableRootless) {
            RootlessHideAllWindows();
        } else {
            RootlessShowAllWindows();
        }
d314 1
a314 1
    X11ApplicationShowHideMenubar(!quartzHasRoot);
d318 1
a318 2
    if (!quartzEnableRootless && quartzFullscreenDisableHotkeys)
        xp_disable_hot_keys(quartzHasRoot);
d330 1
a330 1
    if (quartzServerVisible)
d333 1
a333 1
    quartzServerVisible = TRUE;
d340 2
a341 2
    if (!quartzEnableRootless)
        QuartzSetFullscreen(TRUE);
d355 1
a355 1
    if (quartzServerVisible) {
d362 4
a365 3
    
    QuartzSetFullscreen(FALSE);
    quartzServerVisible = FALSE;
d378 1
a378 1
    if (!quartzServerVisible)
d395 16
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d48 1
a48 1
#include <X11/extensions/applewm.h>
d82 1
d170 5
d188 1
a188 1
    X11ApplicationSetCanQuit(1);
d240 1
a240 1
static void QuartzUpdateScreens(void) {
d245 1
a268 5
#ifndef FAKE_RANDR
    if(!QuartzRandRInit(pScreen))
        FatalError("Failed to init RandR extension.\n");
#endif
    
d272 3
d284 11
a294 1
    DefineInitialRootWindow(pRoot);
a314 8
/*
 * QuartzDisplayChangeHandler
 *  Adjust for screen arrangement changes.
 */
void QuartzDisplayChangedHandler(int screenNum, xEventPtr xe, DeviceIntPtr dev, int nevents) {
    QuartzUpdateScreens();
}

d360 6
a365 4
    if (!quartzEnableRootless && !quartzHasRoot) {
        RootlessHideAllWindows();
    } else if (quartzEnableRootless && !quartzHasRoot) {
        RootlessShowAllWindows();
d368 2
d371 3
d382 1
a382 4
void QuartzShow(
    int x,      // cursor location
    int y )
{
d391 1
a391 1
            quartzProcs->ResumeScreen(screenInfo.screens[i], x, y);
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d31 2
d38 1
a41 1
#include "quartzAudio.h"
d56 1
a56 1
#include "rootlessWindow.h"
d64 3
a70 1
int                     quartzRootless = -1;
d74 1
a74 1
int                     quartzServerVisible = TRUE;
d76 2
a77 1
DevPrivateKey           quartzScreenKey = &quartzScreenKey;
d81 1
a161 4
    if (serverGeneration == 0) {
        QuartzAudioInit();
    }

a190 1
extern char	*ConnectionInfo;
d192 1
a192 1
static int padlength[4] = {0, 3, 2, 1};
d234 1
a234 6
/*
 * QuartzUpdateScreens
 *  Adjust for screen arrangement changes.
 */
static void QuartzUpdateScreens(void)
{
d239 1
a239 2

    DEBUG_LOG("QuartzUpdateScreens()\n");
d243 4
a246 4
           to do this properly may need to add or remove screens. Which
           isn't possible. So don't do anything. Another reason why
           we default to running with Xinerama. */

d249 1
a249 1

d251 1
a251 1

d254 1
a254 1

d264 1
a264 1
      FatalError("Failed to init RandR extension.\n");
d266 1
a266 1

d269 1
a269 1

d272 1
a272 1

d277 1
a278 1
//    QuartzIgnoreNextWarpCursor();
d281 2
d294 1
a294 1

d297 43
a339 1
#endif
d342 19
d368 1
a368 1
static void QuartzShow(
d374 7
a380 6
    if (!quartzServerVisible) {
        quartzServerVisible = TRUE;
        for (i = 0; i < screenInfo.numScreens; i++) {
            if (screenInfo.screens[i]) {
                quartzProcs->ResumeScreen(screenInfo.screens[i], x, y);
            }
d383 3
d395 1
a395 1
static void QuartzHide(void)
d406 2
d416 1
a416 1
static void QuartzSetRootClip(
d431 3
a433 36

/*
 * QuartzMessageServerThread
 *  Send the X server thread a message by placing it on the event queue.
 */
void
QuartzMessageServerThread(
    int type,
    int argc, ...)
{
    xEvent xe;
    INT32 *argv;
    int i, max_args;
    va_list args;

    memset(&xe, 0, sizeof(xe));
    xe.u.u.type = type;
    xe.u.clientMessage.u.l.type = type;

    argv = &xe.u.clientMessage.u.l.longs0;
    max_args = 4;

    if (argc > 0 && argc <= max_args) {
        va_start (args, argc);
        for (i = 0; i < argc; i++)
            argv[i] = (int) va_arg (args, int);
        va_end (args);
    }

    DarwinEQEnqueue(&xe);
}


/*
 * QuartzProcessEvent
 *  Process Quartz specific events.
d435 3
a437 96
void QuartzProcessEvent(xEvent *xe) {
    switch (xe->u.u.type) {
        case kXDarwinControllerNotify:
            DEBUG_LOG("kXDarwinControllerNotify\n");
            AppleWMSendEvent(AppleWMControllerNotify,
                             AppleWMControllerNotifyMask,
                             xe->u.clientMessage.u.l.longs0,
                             xe->u.clientMessage.u.l.longs1);
            break;

        case kXDarwinPasteboardNotify:
            DEBUG_LOG("kXDarwinPasteboardNotify\n");
            AppleWMSendEvent(AppleWMPasteboardNotify,
                             AppleWMPasteboardNotifyMask,
                             xe->u.clientMessage.u.l.longs0,
                             xe->u.clientMessage.u.l.longs1);
            break;

        case kXDarwinActivate:
            DEBUG_LOG("kXDarwinActivate\n");
            QuartzShow(xe->u.keyButtonPointer.rootX,
                       xe->u.keyButtonPointer.rootY);
            AppleWMSendEvent(AppleWMActivationNotify,
                             AppleWMActivationNotifyMask,
                             AppleWMIsActive, 0);
            break;

        case kXDarwinDeactivate:
            DEBUG_LOG("kXDarwinDeactivate\n");
            AppleWMSendEvent(AppleWMActivationNotify,
                             AppleWMActivationNotifyMask,
                             AppleWMIsInactive, 0);
            QuartzHide();
            break;

        case kXDarwinDisplayChanged:
            DEBUG_LOG("kXDarwinDisplayChanged\n");
            QuartzUpdateScreens();
            break;

        case kXDarwinWindowState:
            DEBUG_LOG("kXDarwinWindowState\n");
            RootlessNativeWindowStateChanged(xe->u.clientMessage.u.l.longs0,
		  			     xe->u.clientMessage.u.l.longs1);
	    break;
	  
        case kXDarwinWindowMoved:
            DEBUG_LOG("kXDarwinWindowMoved\n");
            RootlessNativeWindowMoved ((WindowPtr)xe->u.clientMessage.u.l.longs0);
	    break;

        case kXDarwinToggleFullscreen:
            DEBUG_LOG("kXDarwinToggleFullscreen\n");
#ifdef DARWIN_DDX_MISSING
            if (quartzEnableRootless) QuartzSetFullscreen(!quartzHasRoot);
            else if (quartzHasRoot) QuartzHide();
            else QuartzShow();
#else
    //	    ErrorF("kXDarwinToggleFullscreen not implemented\n");
#endif
            break;

        case kXDarwinSetRootless:
            DEBUG_LOG("kXDarwinSetRootless\n");
#ifdef DARWIN_DDX_MISSING
            QuartzSetRootless(xe->u.clientMessage.u.l.longs0);
            if (!quartzEnableRootless && !quartzHasRoot) QuartzHide();
#else
    //	    ErrorF("kXDarwinSetRootless not implemented\n");
#endif
            break;

        case kXDarwinSetRootClip:
            QuartzSetRootClip((BOOL)xe->u.clientMessage.u.l.longs0);
            break;

        case kXDarwinQuit:
            GiveUp(0);
            break;

        case kXDarwinReadPasteboard:
            QuartzReadPasteboard();
            break;

        case kXDarwinWritePasteboard:
            QuartzWritePasteboard();
            break;

        case kXDarwinBringAllToFront:
            DEBUG_LOG("kXDarwinBringAllToFront\n");
            RootlessOrderAllWindows();
            break;

        default:
            ErrorF("Unknown application defined event type %d.\n", xe->u.u.type);
    }
@

