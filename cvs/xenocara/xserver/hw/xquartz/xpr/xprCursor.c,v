head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.6
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.2
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.7.0.8
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.05.29.12.02.39;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	s0SI41sEunLdyFfd;

1.7
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.09;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.35;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.31;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/**************************************************************
 *
 * Xplugin cursor support
 *
 * Copyright (c) 2001 Torrey T. Lyons and Greg Parker.
 * Copyright (c) 2002 Apple Computer, Inc.
 *                 All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the sale,
 * use or other dealings in this Software without prior written authorization.
 */

#include "sanitizedCarbon.h"

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "quartz.h"
#include "xpr.h"
#include "darwinEvents.h"
#include <Xplugin.h>

#include "mi.h"
#include "scrnintstr.h"
#include "cursorstr.h"
#include "mipointrst.h"
#include "windowstr.h"
#include "globals.h"
#include "servermd.h"
#include "dixevents.h"
#include "x-hash.h"

typedef struct {
    int cursorVisible;
    QueryBestSizeProcPtr QueryBestSize;
    miPointerSpriteFuncPtr spriteFuncs;
} QuartzCursorScreenRec, *QuartzCursorScreenPtr;

static DevPrivateKeyRec darwinCursorScreenKeyRec;
#define darwinCursorScreenKey (&darwinCursorScreenKeyRec)

#define CURSOR_PRIV(pScreen) ((QuartzCursorScreenPtr) \
                              dixLookupPrivate(&pScreen->devPrivates, \
                                               darwinCursorScreenKey))

static Bool
load_cursor(CursorPtr src, int screen)
{
    uint32_t *data;
    Bool free_data = FALSE;
    uint32_t rowbytes;
    int width, height;
    int hot_x, hot_y;

    uint32_t fg_color, bg_color;
    uint8_t *srow, *sptr;
    uint8_t *mrow, *mptr;
    uint32_t *drow, *dptr;
    unsigned xcount, ycount;

    xp_error err;

    width = src->bits->width;
    height = src->bits->height;
    hot_x = src->bits->xhot;
    hot_y = src->bits->yhot;

    if (src->bits->argb != NULL) {
#if BITMAP_BIT_ORDER == MSBFirst
        rowbytes = src->bits->width * sizeof(CARD32);
        data = (uint32_t *)src->bits->argb;
#else
        const uint32_t *be_data = (uint32_t *)src->bits->argb;
        unsigned i;
        rowbytes = src->bits->width * sizeof(CARD32);
        data = malloc(rowbytes * src->bits->height);
        free_data = TRUE;
        if (!data) {
            FatalError("Failed to allocate memory in %s\n", __func__);
        }
        for (i = 0; i < (src->bits->width * src->bits->height); i++)
            data[i] = ntohl(be_data[i]);
#endif
    }
    else
    {
        fg_color = 0xFF00 | (src->foreRed >> 8);
        fg_color <<= 16;
        fg_color |= src->foreGreen & 0xFF00;
        fg_color |= src->foreBlue >> 8;

        bg_color = 0xFF00 | (src->backRed >> 8);
        bg_color <<= 16;
        bg_color |= src->backGreen & 0xFF00;
        bg_color |= src->backBlue >> 8;

        fg_color = htonl(fg_color);
        bg_color = htonl(bg_color);

        /* round up to 8 pixel boundary so we can convert whole bytes */
        rowbytes = ((src->bits->width * 4) + 31) & ~31;
        data = malloc(rowbytes * src->bits->height);
        free_data = TRUE;
        if (!data) {
            FatalError("Failed to allocate memory in %s\n", __func__);
        }

        if (!src->bits->emptyMask) {
            ycount = src->bits->height;
            srow = src->bits->source;
            mrow = src->bits->mask;
            drow = data;

            while (ycount-- > 0)
            {
                xcount = bits_to_bytes(src->bits->width);
                sptr = srow;
                mptr = mrow;
                dptr = drow;

                while (xcount-- > 0)
                {
                    uint8_t s, m;
                    int i;

                    s = *sptr++;
                    m = *mptr++;
                    for (i = 0; i < 8; i++) {
#if BITMAP_BIT_ORDER == MSBFirst
                        if (m & 128)
                            *dptr++ = (s & 128) ? fg_color : bg_color;
                        else
                            *dptr++ = 0;
                        s <<= 1;
                        m <<= 1;
#else
                        if (m & 1)
                            *dptr++ = (s & 1) ? fg_color : bg_color;
                        else
                            *dptr++ = 0;
                        s >>= 1;
                        m >>= 1;
#endif
                    }
                }

                srow += BitmapBytePad(src->bits->width);
                mrow += BitmapBytePad(src->bits->width);
                drow = (uint32_t *)((char *)drow + rowbytes);
            }
        }
        else {
            memset(data, 0, src->bits->height * rowbytes);
        }
    }

    err = xp_set_cursor(width, height, hot_x, hot_y, data, rowbytes);
    if (free_data)
        free(data);
    return err == Success;
}

/*
   ===========================================================================

   Pointer sprite functions

   ===========================================================================
 */

/*
 * QuartzRealizeCursor
 *  Convert the X cursor representation to native format if possible.
 */
static Bool
QuartzRealizeCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor)
{
    if (pCursor == NULL || pCursor->bits == NULL)
        return FALSE;

    /* FIXME: cache ARGB8888 representation? */

    return TRUE;
}

/*
 * QuartzUnrealizeCursor
 *  Free the storage space associated with a realized cursor.
 */
static Bool
QuartzUnrealizeCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor)
{
    return TRUE;
}

/*
 * QuartzSetCursor
 *  Set the cursor sprite and position.
 */
static void
QuartzSetCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor,
                int x,
                int y)
{
    QuartzCursorScreenPtr ScreenPriv = CURSOR_PRIV(pScreen);

    if (!XQuartzServerVisible)
        return;

    if (pCursor == NULL) {
        if (ScreenPriv->cursorVisible) {
            xp_hide_cursor();
            ScreenPriv->cursorVisible = FALSE;
        }
    }
    else {
        load_cursor(pCursor, pScreen->myNum);

        if (!ScreenPriv->cursorVisible) {
            xp_show_cursor();
            ScreenPriv->cursorVisible = TRUE;
        }
    }
}

/*
 * QuartzMoveCursor
 *  Move the cursor. This is a noop for us.
 */
static void
QuartzMoveCursor(DeviceIntPtr pDev, ScreenPtr pScreen, int x, int y)
{}

/*
   ===========================================================================

   Pointer screen functions

   ===========================================================================
 */

/*
 * QuartzCursorOffScreen
 */
static Bool
QuartzCursorOffScreen(ScreenPtr *pScreen, int *x, int *y)
{
    return FALSE;
}

/*
 * QuartzCrossScreen
 */
static void
QuartzCrossScreen(ScreenPtr pScreen, Bool entering)
{
    return;
}

/*
 * QuartzWarpCursor
 *  Change the cursor position without generating an event or motion history.
 *  The input coordinates (x,y) are in pScreen-local X11 coordinates.
 *
 */
static void
QuartzWarpCursor(DeviceIntPtr pDev, ScreenPtr pScreen, int x, int y)
{
    if (XQuartzServerVisible) {
        int sx, sy;

        sx = pScreen->x + darwinMainScreenX;
        sy = pScreen->y + darwinMainScreenY;

        CGWarpMouseCursorPosition(CGPointMake(sx + x, sy + y));
    }

    miPointerWarpCursor(pDev, pScreen, x, y);
    miPointerUpdateSprite(pDev);
}

static miPointerScreenFuncRec quartzScreenFuncsRec = {
    QuartzCursorOffScreen,
    QuartzCrossScreen,
    QuartzWarpCursor,
};

/*
   ===========================================================================

   Other screen functions

   ===========================================================================
 */

/*
 * QuartzCursorQueryBestSize
 *  Handle queries for best cursor size
 */
static void
QuartzCursorQueryBestSize(int class, unsigned short *width,
                          unsigned short *height, ScreenPtr pScreen)
{
    QuartzCursorScreenPtr ScreenPriv = CURSOR_PRIV(pScreen);

    if (class == CursorShape) {
        /* FIXME: query window server? */
        *width = 32;
        *height = 32;
    }
    else {
        (*ScreenPriv->QueryBestSize)(class, width, height, pScreen);
    }
}

/*
 * QuartzInitCursor
 *  Initialize cursor support
 */
Bool
QuartzInitCursor(ScreenPtr pScreen)
{
    QuartzCursorScreenPtr ScreenPriv;
    miPointerScreenPtr PointPriv;

    /* initialize software cursor handling (always needed as backup) */
    if (!miDCInitialize(pScreen, &quartzScreenFuncsRec))
        return FALSE;

    if (!dixRegisterPrivateKey(&darwinCursorScreenKeyRec, PRIVATE_SCREEN, 0))
        return FALSE;

    ScreenPriv = calloc(1, sizeof(QuartzCursorScreenRec));
    if (ScreenPriv == NULL)
        return FALSE;

    /* CURSOR_PRIV(pScreen) = ScreenPriv; */
    dixSetPrivate(&pScreen->devPrivates, darwinCursorScreenKey, ScreenPriv);

    /* override some screen procedures */
    ScreenPriv->QueryBestSize = pScreen->QueryBestSize;
    pScreen->QueryBestSize = QuartzCursorQueryBestSize;

    PointPriv = dixLookupPrivate(&pScreen->devPrivates, miPointerScreenKey);

    ScreenPriv->spriteFuncs = PointPriv->spriteFuncs;

    PointPriv->spriteFuncs->RealizeCursor = QuartzRealizeCursor;
    PointPriv->spriteFuncs->UnrealizeCursor = QuartzUnrealizeCursor;
    PointPriv->spriteFuncs->SetCursor = QuartzSetCursor;
    PointPriv->spriteFuncs->MoveCursor = QuartzMoveCursor;

    ScreenPriv->cursorVisible = TRUE;
    return TRUE;
}

/*
 * QuartzSuspendXCursor
 *  X server is hiding. Restore the Aqua cursor.
 */
void
QuartzSuspendXCursor(ScreenPtr pScreen)
{}

/*
 * QuartzResumeXCursor
 *  X server is showing. Restore the X cursor.
 */
void
QuartzResumeXCursor(ScreenPtr pScreen)
{
    WindowPtr pWin;
    CursorPtr pCursor;

    /* TODO: Tablet? */

    pWin = GetSpriteWindow(darwinPointer);
    if (pWin->drawable.pScreen != pScreen)
        return;

    pCursor = GetSpriteCursor(darwinPointer);
    if (pCursor == NULL)
        return;

    QuartzSetCursor(darwinPointer, pScreen, pCursor, /* x */ 0, /* y */ 0);
}
@


1.7
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@a87 1
#ifdef ARGB_CURSOR
a105 1
#endif
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a307 2
    NULL,
    NULL
@


1.5
log
@Update to xserver 1.11.2
@
text
@d54 3
a56 3
    int                     cursorVisible;
    QueryBestSizeProcPtr    QueryBestSize;
    miPointerSpriteFuncPtr  spriteFuncs;
d63 2
a64 1
    dixLookupPrivate(&pScreen->devPrivates, darwinCursorScreenKey))
d89 1
a89 2
    if (src->bits->argb != NULL)
    {
d91 2
a92 2
        rowbytes = src->bits->width * sizeof (CARD32);
        data = (uint32_t *) src->bits->argb;
d94 1
a94 1
        const uint32_t *be_data=(uint32_t *) src->bits->argb;
d96 1
a96 1
        rowbytes = src->bits->width * sizeof (CARD32);
d99 1
a99 1
        if(!data) {
d102 2
a103 2
        for(i=0;i<(src->bits->width*src->bits->height);i++)
            data[i]=ntohl(be_data[i]);
d126 1
a126 1
        if(!data) {
d129 2
a130 3
        
        if (!src->bits->emptyMask)
        {
d132 2
a133 1
            srow = src->bits->source; mrow = src->bits->mask;
d139 2
a140 1
                sptr = srow; mptr = mrow;
d148 3
a150 3
                    s = *sptr++; m = *mptr++;
                    for (i = 0; i < 8; i++)
                    {
d156 2
a157 1
                        s <<= 1; m <<= 1;
d163 2
a164 1
                        s >>= 1; m >>= 1;
d171 1
a171 1
                drow = (uint32_t *) ((char *) drow + rowbytes);
d174 1
a174 2
        else
        {
d180 1
a180 1
    if(free_data)
a184 1

d186 1
a186 1
===========================================================================
d188 1
a188 1
 Pointer sprite functions
d190 2
a191 2
===========================================================================
*/
d200 1
a200 1
    if(pCursor == NULL || pCursor->bits == NULL)
a207 1

a217 1

d223 3
a225 1
QuartzSetCursor(DeviceIntPtr pDev, ScreenPtr pScreen, CursorPtr pCursor, int x, int y)
d232 2
a233 4
    if (pCursor == NULL)
    {
        if (ScreenPriv->cursorVisible)
        {
d238 1
a238 2
    else
    {
d241 1
a241 2
        if (!ScreenPriv->cursorVisible)
        {
d254 1
a254 2
{
}
d257 1
a257 1
===========================================================================
d259 1
a259 1
 Pointer screen functions
d261 2
a262 2
===========================================================================
*/
a272 1

a281 1

d291 1
a291 2
    if (XQuartzServerVisible)
    {
a303 1

a311 1

d313 1
a313 1
===========================================================================
d315 1
a315 1
 Other screen functions
d317 2
a318 2
===========================================================================
*/
d330 1
a330 2
    if (class == CursorShape)
    {
d335 1
a335 2
    else
    {
d355 1
a355 1
	return FALSE;
d376 1
a376 1
    
d387 1
a387 3
{
}

d400 1
a400 1
    
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a39 1
#include "darwin.h"
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d38 1
a38 1
#include "quartzCommon.h"
d60 2
a61 2
static int darwinCursorScreenKeyIndex;
static DevPrivateKey darwinCursorScreenKey = &darwinCursorScreenKeyIndex;
a65 1

d70 1
d98 2
a99 1
        data = xalloc(rowbytes * src->bits->height);
d125 2
a126 1
        data = xalloc(rowbytes * src->bits->height);
d179 2
a180 1
    xfree(data);
d229 1
a229 1
    if (!quartzServerVisible)
d298 1
a298 1
    if (quartzServerVisible)
d302 2
a303 2
        sx = dixScreenOrigins[pScreen->myNum].x + darwinMainScreenX;
        sy = dixScreenOrigins[pScreen->myNum].y + darwinMainScreenY;
d366 4
a369 1
    ScreenPriv = xcalloc(1, sizeof(QuartzCursorScreenRec));
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d98 4
a101 1
        data=alloca (rowbytes * src->bits->height);
d124 5
a128 2
        data = alloca(rowbytes * src->bits->height);

d137 1
a137 1
                xcount = (src->bits->width + 7) / 8;
d177 1
d402 1
a402 1
QuartzResumeXCursor(ScreenPtr pScreen, int x, int y)
d417 1
a417 1
    QuartzSetCursor(darwinPointer, pScreen, pCursor, x, y);
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d32 2
d42 1
a42 1
#include "Xplugin.h"
d52 1
d60 2
a61 1
static DevPrivateKey darwinCursorScreenKey = &darwinCursorScreenKey;
d188 1
a188 1
QuartzRealizeCursor(ScreenPtr pScreen, CursorPtr pCursor)
d204 1
a204 1
QuartzUnrealizeCursor(ScreenPtr pScreen, CursorPtr pCursor)
d215 1
a215 1
QuartzSetCursor(ScreenPtr pScreen, CursorPtr pCursor, int x, int y)
a241 1

d247 1
a247 1
QuartzMoveCursor(ScreenPtr pScreen, int x, int y)
a250 9

static miPointerSpriteFuncRec quartzSpriteFuncsRec = {
    QuartzRealizeCursor,
    QuartzUnrealizeCursor,
    QuartzSetCursor,
    QuartzMoveCursor
};


d286 1
a286 1
QuartzWarpCursor(ScreenPtr pScreen, int x, int y)
a287 10
    static Bool neverMoved = TRUE;

    if (neverMoved)
    {
        /* Don't move the cursor the first time. This is the
           jump-to-center initialization, and it's annoying. */
        neverMoved = FALSE;
        return;
    }

d298 2
a299 2
    miPointerWarpCursor(pScreen, x, y);
    miPointerUpdate();
d307 2
a308 2
    DarwinEQPointerPost,
    DarwinEQSwitchScreen
a369 1
    PointPriv->spriteFuncs = &quartzSpriteFuncsRec;
d371 5
a379 1

d400 3
a402 1
    pWin = GetSpriteWindow();
d406 1
a406 1
    pCursor = GetSpriteCursor();
d410 1
a410 1
    QuartzSetCursor(pScreen, pCursor, x, y);
@

