head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.22
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.20
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.18
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.16
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.14
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.12
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.10
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.8
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.6
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.02.16.08.40;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.09;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.35;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.02.15.26.31;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@/*
 * Xplugin rootless implementation functions for AppleWM extension
 *
 * Copyright (c) 2002-2012 Apple Computer, Inc. All rights reserved.
 * Copyright (c) 2003 Torrey T. Lyons. All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above copyright
 * holders shall not be used in advertising or otherwise to promote the sale,
 * use or other dealings in this Software without prior written authorization.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "xpr.h"

#include <X11/extensions/applewmproto.h>

#include "applewmExt.h"
#include "rootless.h"
#include "rootlessCommon.h"
#include <Xplugin.h>
#include <X11/X.h>
#include "quartz.h"
#include "x-hash.h"

static int
xprSetWindowLevel(WindowPtr pWin, int level)
{
    xp_window_id wid;
    xp_window_changes wc;
    RootlessWindowRec *winRec;

    // AppleWMNumWindowLevels is allowed, but is only set by the server
    // for the root window.
    if (level < 0 || level >= AppleWMNumWindowLevels) {
        return BadValue;
    }

    wid = x_cvt_vptr_to_uint(RootlessFrameForWindow(pWin, TRUE));
    if (wid == 0)
        return BadWindow;

    RootlessStopDrawing(pWin, FALSE);
    winRec = WINREC(pWin);

    if (!winRec)
        return BadWindow;

    if (XQuartzIsRootless)
        wc.window_level = normal_window_levels[level];
    else if (XQuartzShieldingWindowLevel)
        wc.window_level = XQuartzShieldingWindowLevel + 1;
    else
        wc.window_level = rooted_window_levels[level];

    if (xp_configure_window(wid, XP_WINDOW_LEVEL, &wc) != Success) {
        return BadValue;
    }

    winRec->level = level;

    return Success;
}

#if defined(XPLUGIN_VERSION) && XPLUGIN_VERSION >= 3
static int
xprAttachTransient(WindowPtr pWinChild, WindowPtr pWinParent)
{
    xp_window_id child_wid, parent_wid;
    xp_window_changes wc;

    child_wid = x_cvt_vptr_to_uint(RootlessFrameForWindow(pWinChild, TRUE));
    if (child_wid == 0)
        return BadWindow;

    if (pWinParent) {
        parent_wid =
            x_cvt_vptr_to_uint(RootlessFrameForWindow(pWinParent, TRUE));
        if (parent_wid == 0)
            return BadWindow;
    }
    else {
        parent_wid = 0;
    }

    wc.transient_for = parent_wid;

    RootlessStopDrawing(pWinChild, FALSE);

    if (xp_configure_window(child_wid, XP_ATTACH_TRANSIENT,
                            &wc) != Success) {
        return BadValue;
    }

    return Success;
}
#endif

static int
xprFrameDraw(WindowPtr pWin,
             xp_frame_class class,
             xp_frame_attr attr,
             const BoxRec *outer,
             const BoxRec *inner,
             unsigned int title_len,
             const unsigned char *title_bytes)
{
    xp_window_id wid;

    wid = x_cvt_vptr_to_uint(RootlessFrameForWindow(pWin, FALSE));
    if (wid == 0)
        return BadWindow;

    if (xp_frame_draw(wid, class, attr, outer, inner,
                      title_len, title_bytes) != Success) {
        return BadValue;
    }

    return Success;
}

static AppleWMProcsRec xprAppleWMProcs = {
    xp_disable_update,
    xp_reenable_update,
    xprSetWindowLevel,
    xp_frame_get_rect,
    xp_frame_hit_test,
    xprFrameDraw,
#if defined(XPLUGIN_VERSION) && XPLUGIN_VERSION >= 3
    xp_set_dock_proxy,
    xprAttachTransient
#elif defined(XPLUGIN_VERSION) && XPLUGIN_VERSION >= 2
    xp_set_dock_proxy,
    NULL
#else
    NULL,
    NULL
#endif
};

void
xprAppleWMInit(void)
{
    AppleWMExtensionInit(&xprAppleWMProcs);
}
@


1.6
log
@Update to xserver 1.11.2
@
text
@d4 1
a4 1
 * Copyright (c) 2002 Apple Computer, Inc. All rights reserved.
d46 2
a47 3
static int xprSetWindowLevel(
    WindowPtr pWin,
    int level)
d58 2
a59 2
    
    wid = x_cvt_vptr_to_uint(RootlessFrameForWindow (pWin, TRUE));
d63 1
a63 1
    RootlessStopDrawing (pWin, FALSE);
d65 2
a66 2
 
    if(!winRec)
d68 2
a69 2
    
    if(XQuartzIsRootless)
d71 1
a71 1
    else if(XQuartzShieldingWindowLevel)
d75 2
a76 2
    
    if (xp_configure_window (wid, XP_WINDOW_LEVEL, &wc) != Success) {
d86 4
a89 2
static int xprAttachTransient(WindowPtr pWinChild, WindowPtr pWinParent) {
    xp_window_id child_wid, parent_wid; 
d96 3
a98 2
    if(pWinParent) {
        parent_wid = x_cvt_vptr_to_uint(RootlessFrameForWindow(pWinParent, TRUE));
d101 2
a102 1
    } else {
d105 1
a105 1
     
d108 1
a108 1
    RootlessStopDrawing (pWinChild, FALSE);
d110 2
a111 1
    if (xp_configure_window(child_wid, XP_ATTACH_TRANSIENT, &wc) != Success) {
d115 1
a115 1
    return Success;    
d119 8
a126 8
static int xprFrameDraw(
    WindowPtr pWin,
    xp_frame_class class,
    xp_frame_attr attr,
    const BoxRec *outer,
    const BoxRec *inner,
    unsigned int title_len,
    const unsigned char *title_bytes)
d130 1
a130 1
    wid = x_cvt_vptr_to_uint(RootlessFrameForWindow (pWin, FALSE));
d134 2
a135 3
    if (xp_frame_draw (wid, class, attr, outer, inner,
                       title_len, title_bytes) != Success)
    {
d161 2
a162 2

void xprAppleWMInit(void)
@


1.5
log
@Update to xserver 1.9.5. Tested by jasper@@, ajacoutot@@ and krw@@
@
text
@d117 2
a118 2
    int class,
    unsigned int attr,
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d72 2
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d70 1
a70 1
    if(quartzEnableRootless)
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d36 1
a36 2
#define _APPLEWM_SERVER_
#include <X11/extensions/applewmstr.h>
d40 1
a45 10
/* This lookup table came straight from the Tiger X11 source.  I tried to figure
 * it out based on CGWindowLevel.h, but I dunno... -JH
 */
static const int normal_window_levels[AppleWMNumWindowLevels+1] = {
0, 3, 4, 5, INT_MIN + 30, INT_MIN + 29,
};
static const int rooted_window_levels[AppleWMNumWindowLevels+1] = {
202, 203, 204, 205, 201, 200
};

d52 1
d54 6
d65 6
a70 3

    //if (WINREC(WindowTable[pWin->drawable.pScreen->myNum]) == NULL)
    if (quartzHasRoot)
d79 2
d84 28
a136 1

d143 11
a153 1
    xprFrameDraw
@


1.1
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d35 4
d41 1
a41 1
#include "Xplugin.h"
d43 12
d63 1
a63 1
    wid = (xp_window_id) RootlessFrameForWindow (pWin, TRUE);
d69 6
a74 1
    wc.window_level = level;
d94 1
a94 1
    wid = (xp_window_id) RootlessFrameForWindow (pWin, FALSE);
@

