head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.14
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.12
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.8
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.09;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.06.19.44.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/* Copyright (c) 2008-2012 Apple Inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE ABOVE LISTED COPYRIGHT
 * HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name(s) of the above
 * copyright holders shall not be used in advertising or otherwise to
 * promote the sale, use or other dealings in this Software without
 * prior written authorization.
 */

#ifdef HAVE_DIX_CONFIG_H
#include <dix-config.h>
#endif

#include "xpr.h"

#include   <X11/X.h>
#include   <X11/Xmd.h>
#include   <X11/Xproto.h>
#include   "misc.h"
#include   "windowstr.h"
#include   "pixmapstr.h"
#include   "inputstr.h"
#include   "eventstr.h"
#include   "mi.h"
#include   "scrnintstr.h"
#include   "mipointer.h"

#include "quartz.h"
#include "quartzKeyboard.h"
#include "darwinEvents.h"

#include <sys/types.h>
#include <sys/uio.h>
#include <unistd.h>

#ifdef HAVE_LIBDISPATCH
#include <dispatch/dispatch.h>
#endif

#include "rootlessWindow.h"
#include "xprEvent.h"

Bool
QuartzModeEventHandler(int screenNum, XQuartzEvent *e, DeviceIntPtr dev)
{
    switch (e->subtype) {
    case kXquartzWindowState:
        DEBUG_LOG("kXquartzWindowState\n");
        RootlessNativeWindowStateChanged(xprGetXWindow(e->data[0]),
                                         e->data[1]);
        return TRUE;

    case kXquartzWindowMoved:
        DEBUG_LOG("kXquartzWindowMoved\n");
        RootlessNativeWindowMoved(xprGetXWindow(e->data[0]));
        return TRUE;

    case kXquartzBringAllToFront:
        DEBUG_LOG("kXquartzBringAllToFront\n");
        /* There's no need to do xp_window_bring_all_to_front on Leopard,
         * and we don't care about the result, so just do it async.
         */
#if defined(HAVE_LIBDISPATCH) && defined(XPLUGIN_VERSION) && XPLUGIN_VERSION >= 6
#  if defined(XPLUGIN_VERSION_MIN_REQUIRED) && XPLUGIN_VERSION_MIN_REQUIRED < 6
        if (&xp_window_bring_all_to_front) {
#  endif
            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
                xp_window_bring_all_to_front();
            });
#  if defined(XPLUGIN_VERSION_MIN_REQUIRED) && XPLUGIN_VERSION_MIN_REQUIRED < 6
        } else {
            RootlessOrderAllWindows(e->data[0]);
        }
#  endif
#else
        RootlessOrderAllWindows(e->data[0]);
#endif

        return TRUE;

    default:
        return FALSE;
    }
}
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d55 4
d79 16
d96 2
@


1.4
log
@Update to xserver 1.11.2
@
text
@d1 1
a1 1
/* Copyright (c) 2008 Apple Inc.
d58 22
a79 19
Bool QuartzModeEventHandler(int screenNum, XQuartzEvent *e, DeviceIntPtr dev) {
    switch(e->subtype) {
        case kXquartzWindowState:
            DEBUG_LOG("kXquartzWindowState\n");
            RootlessNativeWindowStateChanged(xprGetXWindow(e->data[0]),
                                             e->data[1]);
            return TRUE;
            
        case kXquartzWindowMoved:
            DEBUG_LOG("kXquartzWindowMoved\n");
            RootlessNativeWindowMoved(xprGetXWindow(e->data[0]));
            return TRUE;
            
        case kXquartzBringAllToFront:
            DEBUG_LOG("kXquartzBringAllToFront\n");
            RootlessOrderAllWindows(e->data[0]);
            return TRUE;
        default:
            return FALSE;
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a46 1
#include "darwin.h"
a58 2
    TA_SERVER();
    
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d76 1
a76 1
            RootlessOrderAllWindows();
@


1.1
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a34 1
#define NEED_EVENTS
d42 1
d59 1
a59 3
static void xprEventHandler(int screenNum, xEventPtr xe, DeviceIntPtr dev, int nevents) {
    int i;
    
d62 18
a79 20
    DEBUG_LOG("DarwinEventHandler(%d, %p, %p, %d)\n", screenNum, xe, dev, nevents);
    for (i=0; i<nevents; i++) {
        switch(xe[i].u.u.type) {
                
            case kXquartzWindowState:
                DEBUG_LOG("kXquartzWindowState\n");
                RootlessNativeWindowStateChanged(xprGetXWindow(xe[i].u.clientMessage.u.l.longs0),
                                                 xe[i].u.clientMessage.u.l.longs1);
                break;
                
            case kXquartzWindowMoved:
                DEBUG_LOG("kXquartzWindowMoved\n");
                RootlessNativeWindowMoved(xprGetXWindow(xe[i].u.clientMessage.u.l.longs0));
                break;
                
            case kXquartzBringAllToFront:
                DEBUG_LOG("kXquartzBringAllToFront\n");
                RootlessOrderAllWindows();
                break;
        }
a80 6
}

void QuartzModeEQInit(void) {
    mieqSetHandler(kXquartzWindowState, xprEventHandler);
    mieqSetHandler(kXquartzWindowMoved, xprEventHandler);
    mieqSetHandler(kXquartzBringAllToFront, xprEventHandler);
@

