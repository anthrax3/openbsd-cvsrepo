head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.8
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.18
	OPENBSD_5_0:1.1.1.2.0.16
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.12
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.05.29.12.02.39;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	s0SI41sEunLdyFfd;

1.3
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.22;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.22;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.03.41;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@#if !defined(WINMULTIWINDOWCLASS_H)
#define WINMULTIWINDOWCLASS_H
/*
 *Copyright (C) 1994-2000 The XFree86 Project, Inc. All Rights Reserved.
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL THE XFREE86 PROJECT BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of the XFree86 Project
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from the XFree86 Project.
 *
 * Authors:     Earle F. Philhower, III
 */

/*
 * The next block of definitions are for window manager properties that
 * clients and applications use for communication.
 */

/*
 * Structures
 */

/*
 * WM_HINTS structure
 *
 * NOTE: this structure represents the internal format stored in the property
 * after it is marshalled by libX11, converting the flags field from an
 * arch-dependent long to a 32-bit int.
 */

typedef struct {
    int flags;                  /* marks which fields in this structure are defined */
    Bool input;                 /* does this application rely on the window manager to
                                   get keyboard input? */
    int initial_state;          /* see below */
    Pixmap icon_pixmap;         /* pixmap to be used as icon */
    Window icon_window;         /* window to be used as icon */
    int icon_x, icon_y;         /* initial position of icon */
    Pixmap icon_mask;           /* icon mask bitmap */
    XID window_group;           /* id of related window group */
    /* this structure may be extended in the future */
} WinXWMHints;

/* Window manager hints mask bits */
#define	InputHint	(1L << 0)
#define	StateHint	(1L << 1)
#define	IconPixmapHint	(1L << 2)
#define	IconWindowHint	(1L << 3)
#define	IconPositionHint	(1L << 4)
#define	IconMaskHint	(1L << 5)
#define	WindowGroupHint	(1L << 6)
#define	UrgencyHint	(1L << 8)
#define	AllHints 	(InputHint|StateHint|IconPixmapHint|IconWindowHint|IconPositionHint|IconMaskHint|WindowGroupHint)

/*
 * ICCCM 1.0 version containing base_width, base_height, and win_gravity fields;
 * used with WM_NORMAL_HINTS.
 *
 * NOTE: this structure represents the internal format stored in the property
 * after it is marshalled by libX11, converting the flags field from an
 * arch-dependent long to a 32-bit int.
 */
typedef struct {
    int flags;                  /* marks which fields in this structure are defined */
    int x, y;                   /* obsolete for new window mgrs, but clients */
    int width, height;          /* should set so old wm's don't mess up */
    int min_width, min_height;
    int max_width, max_height;
    int width_inc, height_inc;
    struct {
        int x;                  /* numerator */
        int y;                  /* denominator */
    } min_aspect, max_aspect;
    int base_width, base_height;        /* added by ICCCM version 1 */
    int win_gravity;            /* added by ICCCM version 1 */
} WinXSizeHints;

/* flags argument in size hints */
#define USPosition      (1L << 0)       /* user specified x, y */
#define USSize          (1L << 1)       /* user specified width, height */

#define PPosition       (1L << 2)       /* program specified position */
#define PSize           (1L << 3)       /* program specified size */
#define PMinSize        (1L << 4)       /* program specified minimum size */
#define PMaxSize        (1L << 5)       /* program specified maximum size */
#define PResizeInc      (1L << 6)       /* program specified resize increments */
#define PAspect         (1L << 7)       /* program specified min and max aspect ratios */
#define PBaseSize       (1L << 8)       /* program specified base for incrementing */
#define PWinGravity     (1L << 9)       /* program specified window gravity */

/* obsolete */
#define PAllHints (PPosition|PSize|PMinSize|PMaxSize|PResizeInc|PAspect)

/*
 * Function prototypes
 */

int
 winMultiWindowGetWMHints(WindowPtr pWin, WinXWMHints * hints);

int
 winMultiWindowGetClassHint(WindowPtr pWin, char **res_name, char **res_class);

int
 winMultiWindowGetWindowRole(WindowPtr pWin, char **res_role);

int
 winMultiWindowGetWMNormalHints(WindowPtr pWin, WinXSizeHints * hints);

int
 winMultiWindowGetWMName(WindowPtr pWin, char **wmName);

int
 winMultiWindowGetTransientFor(WindowPtr pWin, Window *ppDaddy);

#endif
@


1.3
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d34 5
d42 8
d51 1
a51 1
    long flags;                 /* marks which fields in this structure are defined */
d75 1
a75 1
 * new version containing base_width, base_height, and win_gravity fields;
d77 4
d83 1
a83 1
    long flags;                 /* marks which fields in this structure are defined */
a95 5

/*
 * The next block of definitions are for window manager properties that
 * clients and applications use for communication.
 */
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d121 1
a121 1
 winMultiWindowGetTransientFor(WindowPtr pWin, WindowPtr *ppDaddy);
@


1.1
log
@Initial revision
@
text
@a31 2
/* $XFree86$ */

d38 10
a47 10
  long		flags;	/* marks which fields in this structure are defined */
  Bool		input;	/* does this application rely on the window manager to
		   get keyboard input? */
  int		initial_state;	/* see below */
  Pixmap	icon_pixmap;	/* pixmap to be used as icon */
  Window	icon_window; 	/* window to be used as icon */
  int		icon_x, icon_y; 	/* initial position of icon */
  Pixmap	icon_mask;	/* icon mask bitmap */
  XID		window_group;	/* id of related window group */
  /* this structure may be extended in the future */
d50 10
d66 12
a77 12
  long flags;     /* marks which fields in this structure are defined */
  int x, y;               /* obsolete for new window mgrs, but clients */
  int width, height;      /* should set so old wm's don't mess up */
  int min_width, min_height;
  int max_width, max_height;
  int width_inc, height_inc;
  struct {
    int x;  /* numerator */
    int y;  /* denominator */
  } min_aspect, max_aspect;
  int base_width, base_height;            /* added by ICCCM version 1 */
  int win_gravity;                        /* added by ICCCM version 1 */
d86 2
a87 2
#define USPosition      (1L << 0) /* user specified x, y */
#define USSize          (1L << 1) /* user specified width, height */
d89 8
a96 8
#define PPosition       (1L << 2) /* program specified position */
#define PSize           (1L << 3) /* program specified size */
#define PMinSize        (1L << 4) /* program specified minimum size */
#define PMaxSize        (1L << 5) /* program specified maximum size */
#define PResizeInc      (1L << 6) /* program specified resize increments */
#define PAspect         (1L << 7) /* program specified min and max aspect ratios */
#define PBaseSize       (1L << 8) /* program specified base for incrementing */
#define PWinGravity     (1L << 9) /* program specified window gravity */
a100 1

d106 1
a106 1
winMultiWindowGetWMHints (WindowPtr pWin, WinXWMHints *hints);
d109 1
a109 1
winMultiWindowGetClassHint (WindowPtr pWin, char **res_name, char **res_class);
d112 1
a112 1
winMultiWindowGetWindowRole (WindowPtr pWin, char **res_role);
d115 1
a115 1
winMultiWindowGetWMNormalHints (WindowPtr pWin, WinXSizeHints *hints);
d118 1
a118 1
winMultiWindowGetWMName (WindowPtr pWin, char **wmName);
d121 1
a121 1
winMultiWindowGetTransientFor (WindowPtr pWin, WindowPtr *ppDaddy);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d32 2
@

