head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.6
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.2
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.5.0.12
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.10
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.8
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2016.05.29.12.02.39;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	s0SI41sEunLdyFfd;

1.5
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 *Copyright (C) 2004 Harold L Hunt II All Rights Reserved.
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL HAROLD L HUNT II BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of Harold L Hunt II
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from Harold L Hunt II.
 *
 * Authors:	Harold L Hunt II
 */

#ifdef HAVE_XWIN_CONFIG_H
#include <xwin-config.h>
#endif
#include "win.h"

static HHOOK g_hhookKeyboardLL = NULL;

/*
 * Function prototypes
 */

static LRESULT CALLBACK
winKeyboardMessageHookLL(int iCode, WPARAM wParam, LPARAM lParam);

#ifndef LLKHF_EXTENDED
#define LLKHF_EXTENDED  0x00000001
#endif
#ifndef LLKHF_UP
#define LLKHF_UP  0x00000080
#endif

/*
 * KeyboardMessageHook
 */

static LRESULT CALLBACK
winKeyboardMessageHookLL(int iCode, WPARAM wParam, LPARAM lParam)
{
    BOOL fPassKeystroke = FALSE;
    BOOL fPassAltTab = TRUE;
    PKBDLLHOOKSTRUCT p = (PKBDLLHOOKSTRUCT) lParam;
    HWND hwnd = GetActiveWindow();

#ifdef XWIN_MULTIWINDOW
    WindowPtr pWin = NULL;
    winPrivWinPtr pWinPriv = NULL;
    winPrivScreenPtr pScreenPriv = NULL;
    winScreenInfo *pScreenInfo = NULL;

    /* Check if the Windows window property for our X window pointer is valid */
    if ((pWin = GetProp(hwnd, WIN_WINDOW_PROP)) != NULL) {
        /* Get a pointer to our window privates */
        pWinPriv = winGetWindowPriv(pWin);

        /* Get pointers to our screen privates and screen info */
        pScreenPriv = pWinPriv->pScreenPriv;
        pScreenInfo = pScreenPriv->pScreenInfo;

        if (pScreenInfo->fMultiWindow)
            fPassAltTab = FALSE;
    }
#endif

    /* Pass keystrokes on to our main message loop */
    if (iCode == HC_ACTION) {
        winDebug("winKeyboardMessageHook: vkCode: %08x scanCode: %08x\n",
                 (unsigned int)p->vkCode, (unsigned int)p->scanCode);

        switch (wParam) {
        case WM_KEYDOWN:
        case WM_SYSKEYDOWN:
        case WM_KEYUP:
        case WM_SYSKEYUP:
            fPassKeystroke =
                (fPassAltTab &&
                 (p->vkCode == VK_TAB) && ((p->flags & LLKHF_ALTDOWN) != 0))
                || (p->vkCode == VK_LWIN) || (p->vkCode == VK_RWIN);
            break;
        }
    }

    /*
     * Pass message on to our main message loop.
     * We process this immediately with SendMessage so that the keystroke
     * appears in, hopefully, the correct order.
     */
    if (fPassKeystroke) {
        LPARAM lParamKey = 0x0;

        /* Construct the lParam from KBDLLHOOKSTRUCT */
        lParamKey = lParamKey | (0x0000FFFF & 0x00000001);      /* Repeat count */
        lParamKey = lParamKey | (0x00FF0000 & (p->scanCode << 16));
        lParamKey = lParamKey
            | (0x01000000 & ((p->flags & LLKHF_EXTENDED) << 23));
        lParamKey = lParamKey
            | (0x20000000 & ((p->flags & LLKHF_ALTDOWN) << 24));
        lParamKey = lParamKey | (0x80000000 & ((p->flags & LLKHF_UP) << 24));

        /* Send message to our main window that has the keyboard focus */
        PostMessage(hwnd, (UINT) wParam, (WPARAM) p->vkCode, lParamKey);

        return 1;
    }

    /* Call next hook */
    return CallNextHookEx(NULL, iCode, wParam, lParam);
}

/*
 * Attempt to install the keyboard hook, return FALSE if it was not installed
 */

Bool
winInstallKeyboardHookLL(void)
{
    /* Install the hook only once */
    if (!g_hhookKeyboardLL)
        g_hhookKeyboardLL = SetWindowsHookEx(WH_KEYBOARD_LL,
                                             winKeyboardMessageHookLL,
                                             g_hInstance, 0);

    return TRUE;
}

/*
 * Remove the keyboard hook if it is installed
 */

void
winRemoveKeyboardHookLL(void)
{
    if (g_hhookKeyboardLL)
        UnhookWindowsHookEx(g_hhookKeyboardLL);
    g_hhookKeyboardLL = NULL;
}
@


1.5
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d87 1
a87 1
                 p->vkCode, p->scanCode);
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a135 18
    OSVERSIONINFO osvi = { 0 };

    /* Get operating system version information */
    osvi.dwOSVersionInfoSize = sizeof(osvi);
    GetVersionEx(&osvi);

    /* Branch on platform ID */
    switch (osvi.dwPlatformId) {
    case VER_PLATFORM_WIN32_NT:
        /* Low-level is supported on NT 4.0 SP3+ only */
        /* TODO: Return FALSE on NT 4.0 with no SP, SP1, or SP2 */
        break;

    case VER_PLATFORM_WIN32_WINDOWS:
        /* Low-level hook is not supported on non-NT */
        return FALSE;
    }

@


1.3
log
@Update to xserver 1.11.2
@
text
@a35 1

a37 1

d43 1
a43 2
winKeyboardMessageHookLL (int iCode, WPARAM wParam, LPARAM lParam);

d46 1
a46 1
# define LLKHF_EXTENDED  0x00000001
d49 1
a49 1
# define LLKHF_UP  0x00000080
a51 1

d57 1
a57 1
winKeyboardMessageHookLL (int iCode, WPARAM wParam, LPARAM lParam)
d59 5
a63 4
  BOOL			fPassKeystroke = FALSE;
  BOOL			fPassAltTab = TRUE;
  PKBDLLHOOKSTRUCT	p = (PKBDLLHOOKSTRUCT) lParam;
  HWND			hwnd = GetActiveWindow(); 
d65 13
a77 14
  WindowPtr		pWin = NULL;
  winPrivWinPtr	        pWinPriv = NULL;
  winPrivScreenPtr	pScreenPriv = NULL;
  winScreenInfo		*pScreenInfo = NULL;

  /* Check if the Windows window property for our X window pointer is valid */
  if ((pWin = GetProp (hwnd, WIN_WINDOW_PROP)) != NULL)
    {
      /* Get a pointer to our window privates */
      pWinPriv		= winGetWindowPriv(pWin);

      /* Get pointers to our screen privates and screen info */
      pScreenPriv	= pWinPriv->pScreenPriv;
      pScreenInfo	= pScreenPriv->pScreenInfo;
d79 2
a80 2
      if (pScreenInfo->fMultiWindow)
          fPassAltTab = FALSE;
d84 16
a99 16
  /* Pass keystrokes on to our main message loop */
  if (iCode == HC_ACTION)
    {
      winDebug("winKeyboardMessageHook: vkCode: %08x scanCode: %08x\n", p->vkCode, p->scanCode);

      switch (wParam)
	{
	case WM_KEYDOWN:  case WM_SYSKEYDOWN:
	case WM_KEYUP:    case WM_SYSKEYUP: 
	  fPassKeystroke = 
	    (fPassAltTab && 
                (p->vkCode == VK_TAB) && ((p->flags & LLKHF_ALTDOWN) != 0))
	    || (p->vkCode == VK_LWIN) || (p->vkCode == VK_RWIN)
	    ;
	  break;
	}
d102 16
a117 24
  /*
   * Pass message on to our main message loop.
   * We process this immediately with SendMessage so that the keystroke
   * appears in, hopefully, the correct order.
   */
  if (fPassKeystroke)
    {
      LPARAM		lParamKey = 0x0;

      /* Construct the lParam from KBDLLHOOKSTRUCT */
      lParamKey = lParamKey | (0x0000FFFF & 0x00000001); /* Repeat count */
      lParamKey = lParamKey | (0x00FF0000 & (p->scanCode << 16));
      lParamKey = lParamKey
	| (0x01000000 & ((p->flags & LLKHF_EXTENDED) << 23));
      lParamKey = lParamKey
	| (0x20000000
	   & ((p->flags & LLKHF_ALTDOWN) << 24));
      lParamKey = lParamKey | (0x80000000 & ((p->flags & LLKHF_UP) << 24));

      /* Send message to our main window that has the keyboard focus */
      PostMessage (hwnd,
		   (UINT) wParam,
		   (WPARAM) p->vkCode,
		   lParamKey);
d119 4
a122 1
      return 1;
d125 2
a126 2
  /* Call next hook */
  return CallNextHookEx (NULL, iCode, wParam, lParam);
a128 1

d134 1
a134 1
winInstallKeyboardHookLL (void)
d136 8
a143 9
  OSVERSIONINFO		osvi = {0};
  
  /* Get operating system version information */
  osvi.dwOSVersionInfoSize = sizeof (osvi);
  GetVersionEx (&osvi);

  /* Branch on platform ID */
  switch (osvi.dwPlatformId)
    {
d145 3
a147 3
      /* Low-level is supported on NT 4.0 SP3+ only */
      /* TODO: Return FALSE on NT 4.0 with no SP, SP1, or SP2 */
      break;
d150 2
a151 2
      /* Low-level hook is not supported on non-NT */
      return FALSE;
d154 5
a158 6
  /* Install the hook only once */
  if (!g_hhookKeyboardLL)
    g_hhookKeyboardLL = SetWindowsHookEx (WH_KEYBOARD_LL,
					  winKeyboardMessageHookLL,
					  g_hInstance,
					  0);
d160 1
a160 1
  return TRUE;
a162 1

d168 1
a168 1
winRemoveKeyboardHookLL (void)
d170 3
a172 3
  if (g_hhookKeyboardLL)
    UnhookWindowsHookEx (g_hhookKeyboardLL);
  g_hhookKeyboardLL = NULL;
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d37 1
a37 7
/*
 * References to external symbols
 */

extern HHOOK			g_hhookKeyboardLL;
extern DWORD			g_dwCurrentThreadID;
extern HWND			g_hwndKeyboardFocus;
d91 1
a91 3
#if 0
      ErrorF ("vkCode: %08x\tscanCode: %08x\n", p->vkCode, p->scanCode);
#endif
@


1.1
log
@Initial revision
@
text
@d152 1
a152 1
winInstallKeyboardHookLL ()
d189 1
a189 1
winRemoveKeyboardHookLL ()
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
