head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.18
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.16
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.14
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.12
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.8
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.09;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.34;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/*
 *Copyright (C) 2001-2004 Harold L Hunt II All Rights Reserved.
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL HAROLD L HUNT II BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of Harold L Hunt II
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from Harold L Hunt II.
 *
 * Authors:	Harold L Hunt II
 */

#ifdef HAVE_XWIN_CONFIG_H
#include <xwin-config.h>
#endif

#include <../xfree86/common/xorgVersion.h>
#include "win.h"

#ifdef DDXOSVERRORF
void
OsVendorVErrorF(const char *pszFormat, va_list va_args)
{
#if defined(XWIN_CLIPBOARD) || defined (XWIN_MULTIWINDOW)
    /* make sure the clipboard and multiwindow threads do not interfere the
     * main thread */
    static pthread_mutex_t s_pmPrinting = PTHREAD_MUTEX_INITIALIZER;

    /* Lock the printing mutex */
    pthread_mutex_lock(&s_pmPrinting);
#endif

    /* Print the error message to a log file, could be stderr */
    LogVWrite(0, pszFormat, va_args);

#if defined(XWIN_CLIPBOARD) || defined (XWIN_MULTIWINDOW)
    /* Unlock the printing mutex */
    pthread_mutex_unlock(&s_pmPrinting);
#endif
}
#endif

/*
 * os/log.c:FatalError () calls our vendor ErrorF, so the message
 * from a FatalError will be logged.
 *
 * Attempt to do last-ditch, safe, important cleanup here.
 */
void
OsVendorFatalError(const char *f, va_list args)
{
    char errormsg[1024] = "";

    /* Don't give duplicate warning if UseMsg was called */
    if (g_fSilentFatalError)
        return;

    if (!g_fLogInited) {
        g_fLogInited = TRUE;
        g_pszLogFile = LogInit(g_pszLogFile, NULL);
    }
    LogClose(EXIT_ERR_ABORT);

    /* Format the error message */
    vsnprintf(errormsg, sizeof(errormsg), f, args);

    /*
       Sometimes the error message needs a bit of cosmetic cleaning
       up for use in a dialog box...
     */
    {
        char *s;

        while ((s = strstr(errormsg, "\n\t")) != NULL) {
            s[0] = ' ';
            s[1] = '\n';
        }
    }

    winMessageBoxF("A fatal error has occurred and " PROJECT_NAME " will now exit.\n\n"
                   "%s\n\n"
                   "Please open %s for more information.\n",
                   MB_ICONERROR,
                   errormsg,
                   (g_pszLogFile ? g_pszLogFile : "the logfile"));
}

/*
 * winMessageBoxF - Print a formatted error message in a useful
 * message box.
 */

void
winMessageBoxF(const char *pszError, UINT uType, ...)
{
    char *pszErrorF = NULL;
    char *pszMsgBox = NULL;
    va_list args;
    int size;

    va_start(args, uType);
    size = vasprintf(&pszErrorF, pszError, args);
    va_end(args);
    if (size == -1) {
        pszErrorF = NULL;
        goto winMessageBoxF_Cleanup;
    }

#define MESSAGEBOXF \
	"%s\n" \
	"Vendor: %s\n" \
	"Release: %d.%d.%d.%d\n" \
	"Contact: %s\n" \
	"%s\n\n" \
	"XWin was started with the following command-line:\n\n" \
	"%s\n"

    size = asprintf(&pszMsgBox, MESSAGEBOXF,
                    pszErrorF, XVENDORNAME,
                    XORG_VERSION_MAJOR, XORG_VERSION_MINOR, XORG_VERSION_PATCH,
                    XORG_VERSION_SNAP,
                    BUILDERADDR, BUILDERSTRING, g_pszCommandLine);

    if (size == -1) {
        pszMsgBox = NULL;
        goto winMessageBoxF_Cleanup;
    }

    /* Display the message box string */
    MessageBox(NULL, pszMsgBox, PROJECT_NAME, MB_OK | uType);

 winMessageBoxF_Cleanup:
    free(pszErrorF);
    free(pszMsgBox);
#undef MESSAGEBOXF
}
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a38 4
/* Prototype */
void
 OsVendorVErrorF(const char *pszFormat, va_list va_args);

d62 2
a63 3
 * os/util.c/FatalError () calls our vendor ErrorF, so the message
 * from a FatalError will be logged.  Thus, the message for the
 * fatal error is not passed to this function.
d68 1
a68 1
OsVendorFatalError(void)
d70 2
d82 22
a103 3
    winMessageBoxF("A fatal error has occurred and " PROJECT_NAME
                   " will now exit.\n" "Please open %s for more information.\n",
                   MB_ICONERROR, (g_pszLogFile ? g_pszLogFile : "the logfile"));
d130 1
a130 1
	"Release: %d.%d.%d.%d (%d)\n" \
d139 1
a139 1
                    XORG_VERSION_SNAP, XORG_VERSION_CURRENT,
@


1.4
log
@Update to xserver 1.11.2
@
text
@d41 1
a41 1
OsVendorVErrorF (const char *pszFormat, va_list va_args);
d44 1
a44 1
OsVendorVErrorF (const char *pszFormat, va_list va_args)
d47 3
a49 3
  /* make sure the clipboard and multiwindow threads do not interfere the
   * main thread */
  static pthread_mutex_t	s_pmPrinting = PTHREAD_MUTEX_INITIALIZER;
d51 2
a52 2
  /* Lock the printing mutex */
  pthread_mutex_lock (&s_pmPrinting);
d55 2
a56 2
  /* Print the error message to a log file, could be stderr */
  LogVWrite (0, pszFormat, va_args);
d59 2
a60 2
  /* Unlock the printing mutex */
  pthread_mutex_unlock (&s_pmPrinting);
a64 1

d73 1
a73 1
OsVendorFatalError (void)
d75 13
a87 14
  /* Don't give duplicate warning if UseMsg was called */
  if (g_fSilentFatalError)
    return;

  if (!g_fLogInited) {
    g_fLogInited = TRUE;
    g_pszLogFile = LogInit (g_pszLogFile, NULL);
  }
  LogClose (EXIT_ERR_ABORT);

  winMessageBoxF (
          "A fatal error has occurred and " PROJECT_NAME " will now exit.\n" \
		  "Please open %s for more information.\n",
		  MB_ICONERROR, (g_pszLogFile?g_pszLogFile:"the logfile"));
a89 1

d96 1
a96 1
winMessageBoxF (const char *pszError, UINT uType, ...)
d98 12
a109 12
  char *	pszErrorF = NULL;
  char *	pszMsgBox = NULL;
  va_list	args;
  int		size;

  va_start(args, uType);
  size = vasprintf (&pszErrorF, pszError, args);
  va_end(args);
  if (size == -1) {
    pszErrorF = NULL;
    goto winMessageBoxF_Cleanup;
  }
d120 13
a132 18
  size = asprintf (&pszMsgBox, MESSAGEBOXF,
		   pszErrorF, XVENDORNAME,
		   XORG_VERSION_MAJOR, XORG_VERSION_MINOR, XORG_VERSION_PATCH,
		    XORG_VERSION_SNAP, XORG_VERSION_CURRENT,
		   BUILDERADDR,
		   BUILDERSTRING,
		   g_pszCommandLine);

  if (size == -1) {
    pszMsgBox = NULL;
    goto winMessageBoxF_Cleanup;
  }

  /* Display the message box string */
  MessageBox (NULL,
	      pszMsgBox,
	      PROJECT_NAME,
	      MB_OK | uType);
d135 2
a136 2
  free(pszErrorF);
  free(pszMsgBox);
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a33 4
#ifdef XVENDORNAME
#define VENDOR_STRING XVENDORNAME
#define VENDOR_CONTACT BUILDERADDR
#endif
a37 7
/* References to external symbols */
extern char *		g_pszCommandLine;
extern const char *	g_pszLogFile;
extern Bool		g_fSilentFatalError;
extern Bool		g_fLogInited;


d84 1
a84 1
  LogClose ();
d104 1
d107 1
a107 1
  pszErrorF = Xvprintf(pszError, args);
d109 2
a110 1
  if (!pszErrorF)
d112 1
d123 10
a132 7
  pszMsgBox = Xprintf (MESSAGEBOXF,
	   pszErrorF, VENDOR_STRING,
		       XORG_VERSION_MAJOR, XORG_VERSION_MINOR, XORG_VERSION_PATCH, XORG_VERSION_SNAP, XORG_VERSION_CURRENT,
		       VENDOR_CONTACT,
		       BUILDERSTRING,
	   g_pszCommandLine);
  if (!pszMsgBox)
d134 1
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d147 2
a148 4
  if (pszErrorF)
    xfree (pszErrorF);
  if (pszMsgBox)
    xfree (pszMsgBox);
@


1.1
log
@Initial revision
@
text
@a35 1
#define VERSION_STRING XORG_RELEASE
d39 1
d44 1
a44 1
extern char *		g_pszLogFile;
d46 1
a83 1
#ifdef DDXOSFATALERROR
d91 6
a101 1
#endif
d125 1
a125 1
	"Release: %s\n" \
d127 1
d132 4
a135 1
	   pszErrorF, VENDOR_STRING, VERSION_STRING, VENDOR_CONTACT,
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
