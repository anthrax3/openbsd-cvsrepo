head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.8
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.09.16.19.10.24;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	Te1daavkBLskZ8gc;

1.7
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	cVXoV5PxI8YrEaVA;

1.6
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.35;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.03.30;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*

  Copyright 1993, 1998  The Open Group

  Permission to use, copy, modify, distribute, and sell this software and its
  documentation for any purpose is hereby granted without fee, provided that
  the above copyright notice appear in all copies and that both that
  copyright notice and this permission notice appear in supporting
  documentation.

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.

  Except as contained in this notice, the name of The Open Group shall
  not be used in advertising or otherwise to promote the sale, use or
  other dealings in this Software without prior written authorization
  from The Open Group.

*/

#ifdef HAVE_XWIN_CONFIG_H
#include <xwin-config.h>
#endif
#include "win.h"
#include "dixstruct.h"
#include "inputstr.h"

/*
 * Local function prototypes
 */

#ifdef XWIN_CLIPBOARD
int winProcEstablishConnection(ClientPtr /* client */ );
#endif

/*
 * Local global declarations
 */

DeviceIntPtr g_pwinPointer;
DeviceIntPtr g_pwinKeyboard;

/* Called from dix/devices.c */
/*
 * All of our keys generate up and down transition notifications,
 * so all of our keys can be used as modifiers.
 *
 * An example of a modifier is mapping the A key to the Control key.
 * A has to be a legal modifier.  I think.
 */

Bool
LegalModifier(unsigned int uiKey, DeviceIntPtr pDevice)
{
    return TRUE;
}

/* Called from dix/dispatch.c */
/*
 * Run through the Windows message queue(s) one more time.
 * Tell mi to dequeue the events that we have sent it.
 */
void
ProcessInputEvents(void)
{
#if 0
    ErrorF("ProcessInputEvents\n");
#endif

    mieqProcessInputEvents();

#if 0
    ErrorF("ProcessInputEvents - returning\n");
#endif
}

void
DDXRingBell(int volume, int pitch, int duration)
{
    /* winKeybdBell is used instead */
    return;
}

/* See Porting Layer Definition - p. 17 */
void
InitInput(int argc, char *argv[])
{
#if CYGDEBUG
    winDebug("InitInput\n");
#endif

#ifdef XWIN_CLIPBOARD
    /*
     * Wrap some functions at every generation of the server.
     */
    if (InitialVector[2] != winProcEstablishConnection) {
        winProcEstablishConnectionOrig = InitialVector[2];
        InitialVector[2] = winProcEstablishConnection;
    }
#endif

    if (AllocDevicePair(serverClient, "Windows",
                        &g_pwinPointer, &g_pwinKeyboard,
                        winMouseProc, winKeybdProc,
                        FALSE) != Success)
        FatalError("InitInput - Failed to allocate slave devices.\n");

    mieqInit();

    /* Initialize the mode key states */
    winInitializeModeKeyStates();

#ifdef HAS_DEVWINDOWS
    /* Only open the windows message queue device once */
    if (g_fdMessageQueue == WIN_FD_INVALID) {
        /* Open a file descriptor for the Windows message queue */
        g_fdMessageQueue = open(WIN_MSG_QUEUE_FNAME, O_RDONLY);

        if (g_fdMessageQueue == -1) {
            FatalError("InitInput - Failed opening %s\n", WIN_MSG_QUEUE_FNAME);
        }

        /* Add the message queue as a device to wait for in WaitForSomething */
        AddEnabledDevice(g_fdMessageQueue);
    }
#endif

#if CYGDEBUG
    winDebug("InitInput - returning\n");
#endif
}

void
CloseInput(void)
{
    mieqFini();
}
@


1.7
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@a41 1
int winProcSetSelectionOwner(ClientPtr /* client */ );
d55 1
a55 1
 * 
@


1.6
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d111 5
a115 4
    g_pwinPointer = AddInputDevice(serverClient, winMouseProc, TRUE);
    g_pwinKeyboard = AddInputDevice(serverClient, winKeybdProc, TRUE);
    g_pwinPointer->name = strdup("Windows mouse");
    g_pwinKeyboard->name = strdup("Windows keyboard");
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a41 1
int winProcQueryTree(ClientPtr /* client */ );
@


1.4
log
@Update to xserver 1.11.2
@
text
@a35 1

d41 3
a43 3
int winProcEstablishConnection(ClientPtr /* client */);
int winProcQueryTree(ClientPtr /* client */);
int winProcSetSelectionOwner(ClientPtr /* client */);
a45 1

d63 1
a63 1
LegalModifier (unsigned int uiKey, DeviceIntPtr pDevice)
d65 1
a65 1
  return TRUE;
a67 1

d74 1
a74 1
ProcessInputEvents (void)
d77 1
a77 1
  ErrorF ("ProcessInputEvents\n");
d80 1
a80 1
  mieqProcessInputEvents ();
d83 1
a83 1
  ErrorF ("ProcessInputEvents - returning\n");
d87 2
a88 2

void DDXRingBell(int volume, int pitch, int duration)
d90 2
a91 2
  /* winKeybdBell is used instead */
  return;
a93 1

d96 1
a96 1
InitInput (int argc, char *argv[])
d99 1
a99 1
  winDebug ("InitInput\n");
d103 6
a108 13
  /*
   * Wrap some functions at every generation of the server.
   */
  if (InitialVector[2] != winProcEstablishConnection)
    {
      winProcEstablishConnectionOrig = InitialVector[2];
      InitialVector[2] = winProcEstablishConnection;
    }
  if (g_fXdmcpEnabled
      && ProcVector[X_QueryTree] != winProcQueryTree)
    {
      winProcQueryTreeOrig = ProcVector[X_QueryTree];
      ProcVector[X_QueryTree] = winProcQueryTree;
d112 4
a115 4
  g_pwinPointer = AddInputDevice (serverClient, winMouseProc, TRUE);
  g_pwinKeyboard = AddInputDevice (serverClient, winKeybdProc, TRUE);
  g_pwinPointer->name = strdup("Windows mouse");
  g_pwinKeyboard->name = strdup("Windows keyboard");
d117 1
a117 1
  mieqInit ();
d119 2
a120 2
  /* Initialize the mode key states */
  winInitializeModeKeyStates ();
d123 8
a130 11
  /* Only open the windows message queue device once */
  if (g_fdMessageQueue == WIN_FD_INVALID)
    {
      /* Open a file descriptor for the Windows message queue */
      g_fdMessageQueue = open (WIN_MSG_QUEUE_FNAME, O_RDONLY);
      
      if (g_fdMessageQueue == -1)
	{
	  FatalError ("InitInput - Failed opening %s\n",
		      WIN_MSG_QUEUE_FNAME);
	}
d132 2
a133 2
      /* Add the message queue as a device to wait for in WaitForSomething */
      AddEnabledDevice (g_fdMessageQueue);
d138 1
a138 1
  winDebug ("InitInput - returning\n");
d143 1
a143 1
CloseInput (void)
d145 1
a145 1
  mieqFini ();
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d42 3
a44 3
DISPATCH_PROC(winProcEstablishConnection);
DISPATCH_PROC(winProcQueryTree);
DISPATCH_PROC(winProcSetSelectionOwner);
a54 15

/*
 * References to external symbols
 */

#ifdef HAS_DEVWINDOWS
extern int			g_fdMessageQueue;
#endif
extern Bool			g_fXdmcpEnabled;
#ifdef XWIN_CLIPBOARD
extern winDispatchProcPtr	winProcEstablishConnectionOrig;
extern winDispatchProcPtr	winProcQueryTreeOrig;
#endif


a124 4
  
  RegisterPointerDevice (g_pwinPointer);
  RegisterKeyboardDevice (g_pwinKeyboard);

d159 1
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d34 1
d52 2
a53 1
CARD32				g_c32LastInputEventTime = 0;
a98 1
  miPointerUpdate ();
d106 1
a106 2
int
TimeSinceLastInputEvent ()
d108 2
a109 3
  if (g_c32LastInputEventTime == 0)
    g_c32LastInputEventTime = GetTickCount ();
  return GetTickCount () - g_c32LastInputEventTime;
a116 2
  DeviceIntPtr		pMouse, pKeyboard;

d138 2
a139 2
  pMouse = AddInputDevice (winMouseProc, TRUE);
  pKeyboard = AddInputDevice (winKeybdProc, TRUE);
d141 5
a145 2
  RegisterPointerDevice (pMouse);
  RegisterKeyboardDevice (pKeyboard);
d147 1
a147 2
  miRegisterPointerDevice (screenInfo.screens[0], pMouse);
  mieqInit ((DevicePtr)pKeyboard, (DevicePtr)pMouse);
d173 5
@


1.1
log
@Initial revision
@
text
@a0 1
/* $TOG: InitInput.c /main/12 1998/02/10 13:23:52 kaleb $ */
a32 3
#ifdef XWIN_CLIPBOARD
# include "../../Xext/xf86miscproc.h"
#endif
d78 1
a78 1
LegalModifier (unsigned int uiKey, DevicePtr pDevice)
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d1 1
d82 1
a82 1
LegalModifier (unsigned int uiKey, DeviceIntPtr pDevice)
@

