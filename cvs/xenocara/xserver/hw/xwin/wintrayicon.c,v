head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2015.09.16.19.10.24;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	Te1daavkBLskZ8gc;

1.5
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.18;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.18;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.03.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 *Copyright (C) 1994-2000 The XFree86 Project, Inc. All Rights Reserved.
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL THE XFREE86 PROJECT BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of the XFree86 Project
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from the XFree86 Project.
 *
 * Authors:	Early Ehlinger
 *		Harold L Hunt II
 */

#ifdef HAVE_XWIN_CONFIG_H
#include <xwin-config.h>
#endif

#include "win.h"
#include <shellapi.h>
#include "winprefs.h"
#ifdef XWIN_CLIPBOARD
#include "winclipboard/winclipboard.h"
#endif

/*
 * Initialize the tray icon
 */

void
winInitNotifyIcon(winPrivScreenPtr pScreenPriv)
{
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
    NOTIFYICONDATA nid = { 0 };

    nid.cbSize = sizeof(NOTIFYICONDATA);
    nid.hWnd = pScreenPriv->hwndScreen;
    nid.uID = pScreenInfo->dwScreen;
    nid.uFlags = NIF_ICON | NIF_MESSAGE | NIF_TIP;
    nid.uCallbackMessage = WM_TRAYICON;
    nid.hIcon = winTaskbarIcon();

    /* Save handle to the icon so it can be freed later */
    pScreenPriv->hiconNotifyIcon = nid.hIcon;

    /* Set display and screen-specific tooltip text */
    snprintf(nid.szTip,
             sizeof(nid.szTip),
             PROJECT_NAME " Server:%s.%d",
             display, (int) pScreenInfo->dwScreen);

    /* Add the tray icon */
    if (!Shell_NotifyIcon(NIM_ADD, &nid))
        ErrorF("winInitNotifyIcon - Shell_NotifyIcon Failed\n");
}

/*
 * Delete the tray icon
 */

void
winDeleteNotifyIcon(winPrivScreenPtr pScreenPriv)
{
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
    NOTIFYICONDATA nid = { 0 };

#if 0
    ErrorF("winDeleteNotifyIcon\n");
#endif

    nid.cbSize = sizeof(NOTIFYICONDATA);
    nid.hWnd = pScreenPriv->hwndScreen;
    nid.uID = pScreenInfo->dwScreen;

    /* Delete the tray icon */
    if (!Shell_NotifyIcon(NIM_DELETE, &nid)) {
        ErrorF("winDeleteNotifyIcon - Shell_NotifyIcon failed\n");
        return;
    }

    /* Free the icon that was loaded */
    if (pScreenPriv->hiconNotifyIcon != NULL
        && DestroyIcon(pScreenPriv->hiconNotifyIcon) == 0) {
        ErrorF("winDeleteNotifyIcon - DestroyIcon failed\n");
    }
    pScreenPriv->hiconNotifyIcon = NULL;
}

/*
 * Process messages intended for the tray icon
 */

LRESULT
winHandleIconMessage(HWND hwnd, UINT message,
                     WPARAM wParam, LPARAM lParam, winPrivScreenPtr pScreenPriv)
{
#if defined(XWIN_MULTIWINDOWEXTWM) || defined(XWIN_MULTIWINDOW)
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
#endif

    switch (lParam) {
    case WM_LBUTTONUP:
        /* Restack and bring all windows to top */
        SetForegroundWindow (pScreenPriv->hwndScreen);

#ifdef XWIN_MULTIWINDOWEXTWM
        if (pScreenInfo->fMWExtWM)
            winMWExtWMRestackWindows(pScreenInfo->pScreen);
#endif
        break;

    case WM_LBUTTONDBLCLK:
        /* Display Exit dialog box */
        winDisplayExitDialog(pScreenPriv);
        break;

    case WM_RBUTTONUP:
    {
        POINT ptCursor;
        HMENU hmenuPopup;
        HMENU hmenuTray;

        /* Get cursor position */
        GetCursorPos(&ptCursor);

        /* Load tray icon menu resource */
        hmenuPopup = LoadMenu(g_hInstance, MAKEINTRESOURCE(IDM_TRAYICON_MENU));
        if (!hmenuPopup)
            ErrorF("winHandleIconMessage - LoadMenu failed\n");

        /* Get actual tray icon menu */
        hmenuTray = GetSubMenu(hmenuPopup, 0);

#ifdef XWIN_MULTIWINDOW
        /* Check for MultiWindow mode */
        if (pScreenInfo->fMultiWindow) {
            MENUITEMINFO mii = { 0 };

            /* Root is shown, remove the check box */

            /* Setup menu item info structure */
            mii.cbSize = sizeof(MENUITEMINFO);
            mii.fMask = MIIM_STATE;
            mii.fState = MFS_CHECKED;

            /* Unheck box if root is shown */
            if (pScreenPriv->fRootWindowShown)
                mii.fState = MFS_UNCHECKED;

            /* Set menu state */
            SetMenuItemInfo(hmenuTray, ID_APP_HIDE_ROOT, FALSE, &mii);
        }
        else
#endif
        {
            /* Remove Hide Root Window button */
            RemoveMenu(hmenuTray, ID_APP_HIDE_ROOT, MF_BYCOMMAND);
        }

#ifdef XWIN_CLIPBOARD
        if (g_fClipboard) {
            /* Set menu state to indicate if 'Monitor Primary' is enabled or not */
            MENUITEMINFO mii = { 0 };
            mii.cbSize = sizeof(MENUITEMINFO);
            mii.fMask = MIIM_STATE;
            mii.fState = fPrimarySelection ? MFS_CHECKED : MFS_UNCHECKED;
            SetMenuItemInfo(hmenuTray, ID_APP_MONITOR_PRIMARY, FALSE, &mii);
        }
        else {
            /* Remove 'Monitor Primary' menu item */
            RemoveMenu(hmenuTray, ID_APP_MONITOR_PRIMARY, MF_BYCOMMAND);
        }
#endif

        SetupRootMenu(hmenuTray);

        /*
         * NOTE: This three-step procedure is required for
         * proper popup menu operation.  Without the
         * call to SetForegroundWindow the
         * popup menu will often not disappear when you click
         * outside of it.  Without the PostMessage the second
         * time you display the popup menu it might immediately
         * disappear.
         */
        SetForegroundWindow(hwnd);
        TrackPopupMenuEx(hmenuTray,
                         TPM_LEFTALIGN | TPM_BOTTOMALIGN | TPM_RIGHTBUTTON,
                         ptCursor.x, ptCursor.y, hwnd, NULL);
        PostMessage(hwnd, WM_NULL, 0, 0);

        /* Free menu */
        DestroyMenu(hmenuPopup);
    }
        break;
    }

    return 0;
}
@


1.5
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d35 1
d39 3
d176 15
@


1.4
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d173 1
a173 1
        SetupRootMenu((unsigned long) hmenuTray);
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d117 1
a117 1
        SetForegroundWindow(hwnd);
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d44 1
a44 1
winInitNotifyIcon (winPrivScreenPtr pScreenPriv)
d46 22
a67 23
  winScreenInfo		*pScreenInfo = pScreenPriv->pScreenInfo;
  NOTIFYICONDATA	nid = {0};
  
  nid.cbSize = sizeof (NOTIFYICONDATA);
  nid.hWnd = pScreenPriv->hwndScreen;
  nid.uID = pScreenInfo->dwScreen;
  nid.uFlags = NIF_ICON | NIF_MESSAGE | NIF_TIP;
  nid.uCallbackMessage = WM_TRAYICON;
  nid.hIcon = winTaskbarIcon ();

  /* Save handle to the icon so it can be freed later */
  pScreenPriv->hiconNotifyIcon = nid.hIcon;

  /* Set display and screen-specific tooltip text */
  snprintf (nid.szTip,
	    sizeof (nid.szTip),
	    PROJECT_NAME " Server:%s.%d",
	    display, 
	    (int) pScreenInfo->dwScreen);

  /* Add the tray icon */
  if (!Shell_NotifyIcon (NIM_ADD, &nid))
    ErrorF ("winInitNotifyIcon - Shell_NotifyIcon Failed\n");
a69 1

d75 1
a75 1
winDeleteNotifyIcon (winPrivScreenPtr pScreenPriv)
d77 3
a79 3
  winScreenInfo		*pScreenInfo = pScreenPriv->pScreenInfo;
  NOTIFYICONDATA	nid = {0};
  
d81 1
a81 1
  ErrorF ("winDeleteNotifyIcon\n");
d84 8
a91 9
  nid.cbSize = sizeof (NOTIFYICONDATA);
  nid.hWnd = pScreenPriv->hwndScreen;
  nid.uID = pScreenInfo->dwScreen;
  
  /* Delete the tray icon */
  if (!Shell_NotifyIcon (NIM_DELETE, &nid))
    {
      ErrorF ("winDeleteNotifyIcon - Shell_NotifyIcon failed\n");
      return;
d94 4
a97 5
  /* Free the icon that was loaded */
  if (pScreenPriv->hiconNotifyIcon != NULL
      && DestroyIcon (pScreenPriv->hiconNotifyIcon) == 0)
    {
      ErrorF ("winDeleteNotifyIcon - DestroyIcon failed\n");
d99 1
a99 1
  pScreenPriv->hiconNotifyIcon = NULL;
a101 1

d107 2
a108 3
winHandleIconMessage (HWND hwnd, UINT message,
		      WPARAM wParam, LPARAM lParam,
		      winPrivScreenPtr pScreenPriv)
d111 1
a111 1
  winScreenInfo		*pScreenInfo = pScreenPriv->pScreenInfo;
d114 1
a114 2
  switch (lParam)
    {
d116 2
a117 2
      /* Restack and bring all windows to top */
      SetForegroundWindow (hwnd);
d120 2
a121 2
      if (pScreenInfo->fMWExtWM)
	winMWExtWMRestackWindows (pScreenInfo->pScreen);
d123 1
a123 1
      break;
d126 3
a128 3
      /* Display Exit dialog box */
      winDisplayExitDialog (pScreenPriv);
      break;
d131 12
a142 13
      {
	POINT		ptCursor;
	HMENU		hmenuPopup;
	HMENU		hmenuTray;

	/* Get cursor position */
	GetCursorPos (&ptCursor);

	/* Load tray icon menu resource */
	hmenuPopup = LoadMenu (g_hInstance,
			       MAKEINTRESOURCE(IDM_TRAYICON_MENU));
	if (!hmenuPopup)
	  ErrorF ("winHandleIconMessage - LoadMenu failed\n");
d144 2
a145 2
	/* Get actual tray icon menu */
	hmenuTray = GetSubMenu (hmenuPopup, 0);
d148 19
a166 20
	/* Check for MultiWindow mode */
	if (pScreenInfo->fMultiWindow)
	  {
	    MENUITEMINFO		mii = {0};
	    
	    /* Root is shown, remove the check box */
	    
	    /* Setup menu item info structure */
	    mii.cbSize = sizeof (MENUITEMINFO);
	    mii.fMask = MIIM_STATE;
	    mii.fState = MFS_CHECKED;
	    
	    /* Unheck box if root is shown */
	    if (pScreenPriv->fRootWindowShown)
	      mii.fState = MFS_UNCHECKED;

	    /* Set menu state */
	    SetMenuItemInfo (hmenuTray, ID_APP_HIDE_ROOT, FALSE, &mii);
	  }
	else
d168 26
a193 30
	  {
	    /* Remove Hide Root Window button */
	    RemoveMenu (hmenuTray,
			ID_APP_HIDE_ROOT,
			MF_BYCOMMAND);
	  }

	SetupRootMenu ((unsigned long)hmenuTray);

	/*
	 * NOTE: This three-step procedure is required for
	 * proper popup menu operation.  Without the
	 * call to SetForegroundWindow the
	 * popup menu will often not disappear when you click
	 * outside of it.  Without the PostMessage the second
	 * time you display the popup menu it might immediately
	 * disappear.
	 */
	SetForegroundWindow (hwnd);
	TrackPopupMenuEx (hmenuTray,
			  TPM_LEFTALIGN | TPM_BOTTOMALIGN | TPM_RIGHTBUTTON,
			  ptCursor.x, ptCursor.y,
			  hwnd,
			  NULL);
	PostMessage (hwnd, WM_NULL, 0, 0);

	/* Free menu */
	DestroyMenu (hmenuPopup);
      }
      break;
d196 1
a196 1
  return 0;
@


1.1
log
@Initial revision
@
text
@a30 1
/* $XFree86: $ */
d54 1
a54 1
  nid.hIcon = (HICON)winTaskbarIcon ();
d62 1
a62 1
	    PROJECT_NAME " Server - %s:%d",
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d31 1
@

