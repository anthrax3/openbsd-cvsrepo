head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.16
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.14
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.05.29.12.02.39;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	s0SI41sEunLdyFfd;

1.3
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.25;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.25;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 *Copyright (C) 2001-2004 Harold L Hunt II All Rights Reserved.
 *Copyright (C) 2009-2010 Jon TURNEY
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 *a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL HAROLD L HUNT II BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of the author(s)
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from the author(s)
 *
 * Authors:	Harold L Hunt II
 *              Jon TURNEY
 */

#ifdef HAVE_XWIN_CONFIG_H
#include <xwin-config.h>
#endif
#include "win.h"

/*
 * Answer queries about the RandR features supported.
 */

static Bool
winRandRGetInfo(ScreenPtr pScreen, Rotation * pRotations)
{
    rrScrPrivPtr pRRScrPriv;
    RROutputPtr output;

    pRRScrPriv = rrGetScrPriv(pScreen);
    output = pRRScrPriv->outputs[0];

    winDebug("winRandRGetInfo ()\n");

    /* Don't support rotations */
    *pRotations = RR_Rotate_0;

    /* Delete previous mode */
    if (output->modes[0])
        {
            RRModeDestroy(output->modes[0]);
            RRModeDestroy(output->crtc->mode);
        }

    /* Register current mode */
    {
        xRRModeInfo modeInfo;
        RRModePtr mode;
        char name[100];

        memset(&modeInfo, '\0', sizeof(modeInfo));
        snprintf(name, sizeof(name), "%dx%d", pScreen->width, pScreen->height);

        modeInfo.width = pScreen->width;
        modeInfo.height = pScreen->height;
        modeInfo.hTotal = pScreen->width;
        modeInfo.vTotal = pScreen->height;
        modeInfo.dotClock = 0;
        modeInfo.nameLength = strlen(name);
        mode = RRModeGet(&modeInfo, name);

        output->modes[0] = mode;
        output->numModes = 1;

        mode = RRModeGet(&modeInfo, name);
        output->crtc->mode = mode;
    }

    return TRUE;
}

/*

*/
void
winDoRandRScreenSetSize(ScreenPtr pScreen,
                        CARD16 width,
                        CARD16 height, CARD32 mmWidth, CARD32 mmHeight)
{
    winScreenPriv(pScreen);
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
    WindowPtr pRoot = pScreen->root;

    /* Ignore changes which do nothing */
    if ((pScreen->width == width) && (pScreen->height == height) &&
        (pScreen->mmWidth == mmWidth) && (pScreen->mmHeight == mmHeight))
        return;

    // Prevent screen updates while we change things around
    SetRootClip(pScreen, ROOT_CLIP_NONE);

    /* Update the screen size as requested */
    pScreenInfo->dwWidth = width;
    pScreenInfo->dwHeight = height;

    /* Reallocate the framebuffer used by the drawing engine */
    (*pScreenPriv->pwinFreeFB) (pScreen);
    if (!(*pScreenPriv->pwinAllocateFB) (pScreen)) {
        ErrorF("winDoRandRScreenSetSize - Could not reallocate framebuffer\n");
    }

    pScreen->width = width;
    pScreen->height = height;
    pScreen->mmWidth = mmWidth;
    pScreen->mmHeight = mmHeight;

    /* Update the screen pixmap to point to the new framebuffer */
    winUpdateFBPointer(pScreen, pScreenInfo->pfb);

    // pScreen->devPrivate == pScreen->GetScreenPixmap(screen) ?
    // resize the root window
    //pScreen->ResizeWindow(pRoot, 0, 0, width, height, NULL);
    // does this emit a ConfigureNotify??

    // Restore the ability to update screen, now with new dimensions
    SetRootClip(pScreen, ROOT_CLIP_FULL);

    // and arrange for it to be repainted
    pScreen->PaintWindow(pRoot, &pRoot->borderClip, PW_BACKGROUND);

    /* Indicate that a screen size change took place */
    RRScreenSizeNotify(pScreen);
}

/*
 * Respond to resize request
 */
static
    Bool
winRandRScreenSetSize(ScreenPtr pScreen,
                      CARD16 width,
                      CARD16 height, CARD32 mmWidth, CARD32 mmHeight)
{
    winScreenPriv(pScreen);
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;

    winDebug("winRandRScreenSetSize ()\n");

    /*
       It doesn't currently make sense to allow resize in fullscreen mode
       (we'd actually have to list the supported resolutions)
     */
    if (pScreenInfo->fFullScreen) {
        ErrorF
            ("winRandRScreenSetSize - resize not supported in fullscreen mode\n");
        return FALSE;
    }

    /*
       Client resize requests aren't allowed in rootless modes, even if
       the X screen is monitor or virtual desktop size, we'd need to
       resize the native display size
     */
    if (FALSE
#ifdef XWIN_MULTIWINDOWEXTWM
        || pScreenInfo->fMWExtWM
#endif
        || pScreenInfo->fRootless
#ifdef XWIN_MULTIWINDOW
        || pScreenInfo->fMultiWindow
#endif
        ) {
        ErrorF
            ("winRandRScreenSetSize - resize not supported in rootless modes\n");
        return FALSE;
    }

    winDoRandRScreenSetSize(pScreen, width, height, mmWidth, mmHeight);

    /* Cause the native window for the screen to resize itself */
    {
        DWORD dwStyle, dwExStyle;
        RECT rcClient;

        rcClient.left = 0;
        rcClient.top = 0;
        rcClient.right = width;
        rcClient.bottom = height;

        ErrorF("winRandRScreenSetSize new client area w: %d h: %d\n", width,
               height);

        /* Get the Windows window style and extended style */
        dwExStyle = GetWindowLongPtr(pScreenPriv->hwndScreen, GWL_EXSTYLE);
        dwStyle = GetWindowLongPtr(pScreenPriv->hwndScreen, GWL_STYLE);

        /*
         * Calculate the window size needed for the given client area
         * adjusting for any decorations it will have
         */
        AdjustWindowRectEx(&rcClient, dwStyle, FALSE, dwExStyle);

        ErrorF("winRandRScreenSetSize new window area w: %d h: %d\n",
               (int)(rcClient.right - rcClient.left),
               (int)(rcClient.bottom - rcClient.top));

        SetWindowPos(pScreenPriv->hwndScreen, NULL,
                     0, 0, rcClient.right - rcClient.left,
                     rcClient.bottom - rcClient.top, SWP_NOZORDER | SWP_NOMOVE);
    }

    return TRUE;
}

/*
 * Initialize the RandR layer.
 */

Bool
winRandRInit(ScreenPtr pScreen)
{
    rrScrPrivPtr pRRScrPriv;

    winDebug("winRandRInit ()\n");

    if (!RRScreenInit(pScreen)) {
        ErrorF("winRandRInit () - RRScreenInit () failed\n");
        return FALSE;
    }

    /* Set some RandR function pointers */
    pRRScrPriv = rrGetScrPriv(pScreen);
    pRRScrPriv->rrGetInfo = winRandRGetInfo;
    pRRScrPriv->rrSetConfig = NULL;
    pRRScrPriv->rrScreenSetSize = winRandRScreenSetSize;
    pRRScrPriv->rrCrtcSet = NULL;
    pRRScrPriv->rrCrtcSetGamma = NULL;

    /* Create a CRTC and an output for the screen, and hook them together */
    {
        RRCrtcPtr crtc;
        RROutputPtr output;

        crtc = RRCrtcCreate(pScreen, NULL);
        if (!crtc)
            return FALSE;

        crtc->rotations = RR_Rotate_0;

        output = RROutputCreate(pScreen, "default", 7, NULL);
        if (!output)
            return FALSE;

        RROutputSetCrtcs(output, &crtc, 1);
        RROutputSetConnection(output, RR_Connected);
        RROutputSetSubpixelOrder(output, PictureGetSubpixelOrder(pScreen));

        output->crtc = crtc;

        /* Set crtc outputs (should use RRCrtcNotify?) */
        crtc->outputs = malloc(sizeof(RROutputPtr));
        crtc->outputs[0] = output;
        crtc->numOutputs = 1;

        pRRScrPriv->primaryOutput = output;

        /* Ensure we have space for exactly one mode */
        output->modes = malloc(sizeof(RRModePtr));
        output->modes[0] = NULL;
    }

    /*
       The screen doesn't have to be limited to the actual
       monitor size (we can have scrollbars :-), so set the
       upper limit to the maximum coordinates X11 can use.
     */
    RRScreenSetSizeRange(pScreen, 0, 0, 32768, 32768);

    return TRUE;
}
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a36 5
#include "mivalidate.h"         // for union _Validate used by windowstr.h

#ifndef RANDR_12_INTERFACE
#error X server must have RandR 1.2 interface
#endif
d45 6
d56 30
a85 6
    /*
       The screen doesn't have to be limited to the actual
       monitor size (we can have scrollbars :-), so what is
       the upper limit?
     */
    RRScreenSetSizeRange(pScreen, 0, 0, 4096, 4096);
d102 5
d108 1
a108 1
    SetRootClip(pScreen, FALSE);
d134 1
a134 1
    SetRootClip(pScreen, TRUE);
d137 1
a137 1
    miPaintWindow(pRoot, &pRoot->borderClip, PW_BACKGROUND);
d211 3
a213 2
        ErrorF("winRandRScreenSetSize new window area w: %ld h: %ld\n",
               rcClient.right - rcClient.left, rcClient.bottom - rcClient.top);
d246 40
@


1.2
log
@Update to xserver 1.11.2
@
text
@d37 1
a37 1
#include "mivalidate.h" // for union _Validate used by windowstr.h
a42 1

d48 1
a48 1
winRandRGetInfo (ScreenPtr pScreen, Rotation *pRotations)
d50 1
a50 1
  winDebug ("winRandRGetInfo ()\n");
d52 2
a53 2
  /* Don't support rotations */
  *pRotations = RR_Rotate_0;
d55 6
a60 6
  /*
    The screen doesn't have to be limited to the actual
    monitor size (we can have scrollbars :-), so what is
    the upper limit?
  */
  RRScreenSetSizeRange(pScreen, 0, 0, 4096, 4096);
d62 1
a62 1
  return TRUE;
d69 3
a71 5
winDoRandRScreenSetSize (ScreenPtr  pScreen,
                         CARD16	    width,
                         CARD16	    height,
                         CARD32	    mmWidth,
                         CARD32	    mmHeight)
d73 15
a87 16
  winScreenPriv(pScreen);
  winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
  WindowPtr pRoot = pScreen->root;

  // Prevent screen updates while we change things around
  SetRootClip(pScreen, FALSE);

  /* Update the screen size as requested */
  pScreenInfo->dwWidth = width;
  pScreenInfo->dwHeight = height;

  /* Reallocate the framebuffer used by the drawing engine */
  (*pScreenPriv->pwinFreeFB)(pScreen);
  if (!(*pScreenPriv->pwinAllocateFB)(pScreen))
    {
      ErrorF ("winDoRandRScreenSetSize - Could not reallocate framebuffer\n");
d90 12
a101 12
  pScreen->width = width;
  pScreen->height = height;
  pScreen->mmWidth = mmWidth;
  pScreen->mmHeight = mmHeight;

  /* Update the screen pixmap to point to the new framebuffer */
  winUpdateFBPointer(pScreen, pScreenInfo->pfb);

  // pScreen->devPrivate == pScreen->GetScreenPixmap(screen) ?
  // resize the root window
  //pScreen->ResizeWindow(pRoot, 0, 0, width, height, NULL);
  // does this emit a ConfigureNotify??
d103 2
a104 2
  // Restore the ability to update screen, now with new dimensions
  SetRootClip(pScreen, TRUE);
d106 2
a107 2
  // and arrange for it to be repainted
  miPaintWindow(pRoot, &pRoot->borderClip,  PW_BACKGROUND);
d109 2
a110 2
  /* Indicate that a screen size change took place */
  RRScreenSizeNotify(pScreen);
d117 4
a120 8
Bool
winRandRScreenSetSize (ScreenPtr  pScreen,
		       CARD16	    width,
		       CARD16	    height,
		       CARD16       pixWidth,
		       CARD16       pixHeight,
		       CARD32	    mmWidth,
		       CARD32	    mmHeight)
d122 2
a123 2
  winScreenPriv(pScreen);
  winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
d125 1
a125 1
  winDebug ("winRandRScreenSetSize ()\n");
d127 8
a134 8
  /*
    It doesn't currently make sense to allow resize in fullscreen mode
    (we'd actually have to list the supported resolutions)
  */
  if (pScreenInfo->fFullScreen)
    {
      ErrorF ("winRandRScreenSetSize - resize not supported in fullscreen mode\n");
      return FALSE;
d137 6
a142 6
  /*
    Client resize requests aren't allowed in rootless modes, even if
    the X screen is monitor or virtual desktop size, we'd need to
    resize the native display size
  */
  if (FALSE
d144 1
a144 1
      || pScreenInfo->fMWExtWM
d146 1
a146 1
      || pScreenInfo->fRootless
d148 1
a148 1
      || pScreenInfo->fMultiWindow
d150 4
a153 4
      )
    {
      ErrorF ("winRandRScreenSetSize - resize not supported in rootless modes\n");
      return FALSE;
d156 1
a156 1
  winDoRandRScreenSetSize(pScreen, width, height, mmWidth, mmHeight);
d158 4
a161 15
  /* Cause the native window for the screen to resize itself */
  {
    DWORD dwStyle, dwExStyle;
    RECT rcClient;

    rcClient.left = 0;
    rcClient.top = 0;
    rcClient.right = width;
    rcClient.bottom = height;

    ErrorF ("winRandRScreenSetSize new client area w: %d h: %d\n", width, height);

    /* Get the Windows window style and extended style */
    dwExStyle = GetWindowLongPtr(pScreenPriv->hwndScreen, GWL_EXSTYLE);
    dwStyle = GetWindowLongPtr(pScreenPriv->hwndScreen, GWL_STYLE);
d163 25
a187 5
    /*
     * Calculate the window size needed for the given client area
     * adjusting for any decorations it will have
     */
    AdjustWindowRectEx(&rcClient, dwStyle, FALSE, dwExStyle);
d189 1
a189 8
    ErrorF ("winRandRScreenSetSize new window area w: %ld h: %ld\n", rcClient.right-rcClient.left, rcClient.bottom-rcClient.top);

    SetWindowPos(pScreenPriv->hwndScreen, NULL,
                 0, 0, rcClient.right-rcClient.left, rcClient.bottom-rcClient.top,
                 SWP_NOZORDER | SWP_NOMOVE);
  }

  return TRUE;
d197 1
a197 1
winRandRInit (ScreenPtr pScreen)
d199 1
a199 2
  rrScrPrivPtr pRRScrPriv;
  winDebug ("winRandRInit ()\n");
d201 5
a205 4
  if (!RRScreenInit (pScreen))
    {
      ErrorF ("winRandRInit () - RRScreenInit () failed\n");
      return FALSE;
d208 7
a214 7
  /* Set some RandR function pointers */
  pRRScrPriv = rrGetScrPriv (pScreen);
  pRRScrPriv->rrGetInfo = winRandRGetInfo;
  pRRScrPriv->rrSetConfig = NULL;
  pRRScrPriv->rrScreenSetSize = winRandRScreenSetSize;
  pRRScrPriv->rrCrtcSet = NULL;
  pRRScrPriv->rrCrtcSetGamma = NULL;
d216 1
a216 1
  return TRUE;
@


1.1
log
@Initial revision
@
text
@d3 1
d6 1
a6 1
 * a copy of this software and associated documentation files (the
d24 1
a24 1
 *Except as contained in this notice, the name of Harold L Hunt II
d27 1
a27 1
 *from Harold L Hunt II.
d30 1
d37 5
d45 1
a45 1
 * Local prototypes
d49 3
a51 1
winRandRGetInfo (ScreenPtr pScreen, Rotation *pRotations);
d53 2
a54 5
static Bool
winRandRSetConfig (ScreenPtr		pScreen,
		   Rotation		rotateKind,
		   int			rate,
		   RRScreenSizePtr	pSize);
d56 6
a61 2
Bool
winRandRInit (ScreenPtr pScreen);
d63 2
a66 2
 * Answer queries about the RandR features supported.
 */
d68 7
a74 2
static Bool
winRandRGetInfo (ScreenPtr pScreen, Rotation *pRotations)
d77 5
a81 4
  winScreenInfo			*pScreenInfo = pScreenPriv->pScreenInfo;
  int				n;
  Rotation			rotateKind;
  RRScreenSizePtr		pSize;
d83 10
a92 1
  winDebug ("winRandRGetInfo ()\n");
d94 12
a105 2
  /* Don't support rotations, yet */
  *pRotations = RR_Rotate_0;
d107 2
a108 6
  /* Bail if no depth has a visual associated with it */
  for (n = 0; n < pScreen->numDepths; n++)
    if (pScreen->allowedDepths[n].numVids)
      break;
  if (n == pScreen->numDepths)
    return FALSE;
d110 2
a111 2
  /* Only one allowed rotation for now */
  rotateKind = RR_Rotate_0;
d113 2
a114 17
  /*
   * Register supported sizes.  This can be called many times, but
   * we only support one size for now.
   */
  pSize = RRRegisterSize (pScreen,
			  pScreenInfo->dwWidth,
			  pScreenInfo->dwHeight,
			  pScreenInfo->dwWidth_mm,
			  pScreenInfo->dwHeight_mm);

  /* Tell RandR what the current config is */
  RRSetCurrentConfig (pScreen,
		      rotateKind,
		      0, /* refresh rate, not needed */
		      pSize);
  
  return TRUE;
a116 1

d118 1
a118 1
 * Respond to resize/rotate request from either X Server or X client app
d120 43
d164 30
a193 7
static Bool
winRandRSetConfig (ScreenPtr		pScreen,
		   Rotation		rotateKind,
		   int			rate,
		   RRScreenSizePtr	pSize)
{
  winDebug ("winRandRSetConfig ()\n");
a197 1

d205 1
a205 2
  rrScrPrivPtr		pRRScrPriv;

d217 4
a220 1
  pRRScrPriv->rrSetConfig = winRandRSetConfig;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
