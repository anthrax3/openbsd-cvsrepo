head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.14
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.09.16.19.10.24;	author matthieu;	state dead;
branches;
next	1.3;
commitid	Te1daavkBLskZ8gc;

1.3
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.24;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 *Copyright (C) 1994-2000 The XFree86 Project, Inc. All Rights Reserved.
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL THE XFREE86 PROJECT BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of the XFree86 Project
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from the XFree86 Project.
 *
 * Authors:	Harold L Hunt II
 * 		Alan Hourihane <alanh@@fairlite.demon.co.uk>
 */

#ifdef HAVE_XWIN_CONFIG_H
#include <xwin-config.h>
#endif
#include "win.h"

/* See Porting Layer Definition - p. 55 */
void
winGetSpansNativeGDI(DrawablePtr pDrawable,
                     int nMax,
                     DDXPointPtr pPoints,
                     int *piWidths, int iSpans, char *pDsts)
{
    PixmapPtr pPixmap = NULL;
    winPrivPixmapPtr pPixmapPriv = NULL;
    int iSpan;
    DDXPointPtr pPoint = NULL;
    int *piWidth = NULL;
    char *pDst = pDsts;
    HBITMAP hbmpWindow, hbmpOrig, hbmpOrig1;
    BYTE *pbWindow = NULL;
    HDC hdcMem, hdcMem1;
    ScreenPtr pScreen = pDrawable->pScreen;

    winScreenPriv(pScreen);

    /* Branch on the drawable type */
    switch (pDrawable->type) {
    case DRAWABLE_PIXMAP:
#if 0
        ErrorF("winGetSpans - DRAWABLE_PIXMAP %08x\n", pDrawable);
#endif

        pPixmap = (PixmapPtr) pDrawable;
        pPixmapPriv = winGetPixmapPriv(pPixmap);

        /* Open a memory HDC */
        hdcMem1 = CreateCompatibleDC(NULL);
        hdcMem = CreateCompatibleDC(NULL);

        /* Select the drawable pixmap into a DC */
        hbmpOrig1 = SelectObject(hdcMem1, pPixmapPriv->hBitmap);

        if (hbmpOrig1 == NULL)
            FatalError("winGetSpans - DRAWABLE_PIXMAP - SelectObject () "
                       "failed on pPixmapPriv->hBitmap\n");

        /* Loop through spans */
        for (iSpan = 0; iSpan < iSpans; ++iSpan) {
            pPoint = pPoints + iSpan;
            piWidth = piWidths + iSpan;

            hbmpWindow = winCreateDIBNativeGDI(*piWidth, 1,
                                               pDrawable->depth,
                                               &pbWindow, NULL);

            hbmpOrig = SelectObject(hdcMem, hbmpWindow);

            /* Transfer the window bits to the window bitmap */
            BitBlt(hdcMem,
                   0, 0, *piWidth, 1, hdcMem1, pPoint->x, pPoint->y, SRCCOPY);

            memcpy(pDst,
                   (char *) pbWindow,
                   PixmapBytePad(*piWidth, pDrawable->depth));

            /* Pop the window bitmap out of the HDC and delete the bitmap */
            SelectObject(hdcMem, hbmpOrig);
            DeleteObject(hbmpWindow);

#if 0
            ErrorF("(%dx%dx%d) (%d,%d) w: %d\n",
                   pDrawable->width, pDrawable->height, pDrawable->depth,
                   pPoint->x, pPoint->y, *piWidth);
#endif

            /* Calculate offset of next bit destination */
            pDst += PixmapBytePad(*piWidth, pDrawable->depth);
        }

        /* Pop the pixmap's bitmap out of the HDC */
        SelectObject(hdcMem1, hbmpOrig1);

        /* Delete the HDCs */
        DeleteDC(hdcMem1);
        DeleteDC(hdcMem);
        break;

    case DRAWABLE_WINDOW:
#if 0
        ErrorF("winGetSpans - DRAWABLE_WINDOW\n");
#endif

        /* Open a memory HDC */
        hdcMem = CreateCompatibleDC(NULL);

        /* Loop through spans */
        for (iSpan = 0; iSpan < iSpans; ++iSpan) {
            pPoint = pPoints + iSpan;
            piWidth = piWidths + iSpan;

            hbmpWindow = winCreateDIBNativeGDI(*piWidth, 1,
                                               pDrawable->depth,
                                               &pbWindow, NULL);

            hbmpOrig = SelectObject(hdcMem, hbmpWindow);

            /* Transfer the window bits to the window bitmap */
            BitBlt(hdcMem,
                   0, 0,
                   *piWidth, 1,
                   pScreenPriv->hdcScreen, pPoint->x, pPoint->y, SRCCOPY);

            memcpy(pDst,
                   (char *) pbWindow,
                   PixmapBytePad(*piWidth, pDrawable->depth));

            /* Pop the window bitmap out of the HDC */
            SelectObject(hdcMem, hbmpOrig);

            DeleteObject(hbmpWindow);

#if 0
            ErrorF("(%dx%dx%d) (%d,%d) w: %d\n",
                   pDrawable->width, pDrawable->height, pDrawable->depth,
                   pPoint->x, pPoint->y, *piWidth);
#endif

            /* Calculate offset of next bit destination */
            pDst += PixmapBytePad(*piWidth, pDrawable->depth);
        }

        /* Delete the window bitmap */
        DeleteDC(hdcMem);
        break;

    default:
        FatalError("winGetSpans - Unknown drawable type\n");
        break;
    }
}
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.2
log
@Update to xserver 1.11.2
@
text
@d39 4
a42 6
winGetSpansNativeGDI (DrawablePtr	pDrawable, 
		      int		nMax, 
		      DDXPointPtr	pPoints, 
		      int		*piWidths, 
		      int		iSpans, 
		      char		*pDsts)
d44 15
a58 15
  PixmapPtr		pPixmap = NULL;
  winPrivPixmapPtr	pPixmapPriv = NULL;
  int			iSpan;
  DDXPointPtr		pPoint = NULL;
  int			*piWidth = NULL;
  char			*pDst = pDsts;
  HBITMAP		hbmpWindow, hbmpOrig, hbmpOrig1;
  BYTE			*pbWindow = NULL;
  HDC			hdcMem, hdcMem1;
  ScreenPtr		pScreen = pDrawable->pScreen;
  winScreenPriv(pScreen);

  /* Branch on the drawable type */
  switch (pDrawable->type)
    {
d61 1
a61 2
      ErrorF ("winGetSpans - DRAWABLE_PIXMAP %08x\n",
	      pDrawable);
d64 2
a65 2
      pPixmap = (PixmapPtr) pDrawable;
      pPixmapPriv = winGetPixmapPriv (pPixmap);
d67 33
a99 39
      /* Open a memory HDC */
      hdcMem1 = CreateCompatibleDC (NULL);
      hdcMem = CreateCompatibleDC (NULL);

      /* Select the drawable pixmap into a DC */
      hbmpOrig1 = SelectObject (hdcMem1, pPixmapPriv->hBitmap);

      if (hbmpOrig1 == NULL)
	FatalError ("winGetSpans - DRAWABLE_PIXMAP - SelectObject () "
		    "failed on pPixmapPriv->hBitmap\n");

      /* Loop through spans */
      for (iSpan = 0; iSpan < iSpans; ++iSpan)
	{
	  pPoint = pPoints + iSpan;
	  piWidth = piWidths + iSpan;

      	  hbmpWindow = winCreateDIBNativeGDI (*piWidth, 1,
					      pDrawable->depth,
					      &pbWindow,
					      NULL);

      	  hbmpOrig = SelectObject (hdcMem, hbmpWindow);
			       
          /* Transfer the window bits to the window bitmap */
          BitBlt (hdcMem,
		  0, 0,
		  *piWidth, 1, 
		  hdcMem1,
		  pPoint->x, pPoint->y,
		  SRCCOPY);

	  memcpy (pDst,
		  (char*) pbWindow,
		  PixmapBytePad (*piWidth, pDrawable->depth));

      	  /* Pop the window bitmap out of the HDC and delete the bitmap */
      	  SelectObject (hdcMem, hbmpOrig);
	  DeleteObject (hbmpWindow);
d102 3
a104 3
	  ErrorF ("(%dx%dx%d) (%d,%d) w: %d\n",
		  pDrawable->width, pDrawable->height, pDrawable->depth,
		  pPoint->x, pPoint->y, *piWidth);
d107 11
a117 11
	  /* Calculate offset of next bit destination */
	  pDst += PixmapBytePad (*piWidth, pDrawable->depth);
	}
      
      /* Pop the pixmap's bitmap out of the HDC */
      SelectObject (hdcMem1, hbmpOrig1);

      /* Delete the HDCs */
      DeleteDC (hdcMem1);
      DeleteDC (hdcMem);
      break;
d121 1
a121 1
      ErrorF ("winGetSpans - DRAWABLE_WINDOW\n");
d124 2
a125 2
      /* Open a memory HDC */
      hdcMem = CreateCompatibleDC (NULL);
d127 20
a146 24
      /* Loop through spans */
      for (iSpan = 0; iSpan < iSpans; ++iSpan)
	{
	  pPoint = pPoints + iSpan;
	  piWidth = piWidths + iSpan;

      	  hbmpWindow = winCreateDIBNativeGDI (*piWidth, 1,
					      pDrawable->depth,
					      &pbWindow,
					      NULL);

      	  hbmpOrig = SelectObject (hdcMem, hbmpWindow);

          /* Transfer the window bits to the window bitmap */
          BitBlt (hdcMem,
		  0, 0,
		  *piWidth, 1, 
		  pScreenPriv->hdcScreen,
		  pPoint->x, pPoint->y,
		  SRCCOPY);

	  memcpy (pDst,
		  (char*) pbWindow,
		  PixmapBytePad (*piWidth, pDrawable->depth));
d148 2
a149 2
      	  /* Pop the window bitmap out of the HDC */
      	  SelectObject (hdcMem, hbmpOrig);
d151 1
a151 1
	  DeleteObject (hbmpWindow);
d154 3
a156 3
	  ErrorF ("(%dx%dx%d) (%d,%d) w: %d\n",
		  pDrawable->width, pDrawable->height, pDrawable->depth,
		  pPoint->x, pPoint->y, *piWidth);
d159 7
a165 7
	  /* Calculate offset of next bit destination */
	  pDst += PixmapBytePad (*piWidth, pDrawable->depth);
	}

      /* Delete the window bitmap */
      DeleteDC (hdcMem);
      break;
d168 2
a169 2
      FatalError ("winGetSpans - Unknown drawable type\n");
      break;
@


1.1
log
@Initial revision
@
text
@a179 8
    case UNDRAWABLE_WINDOW:
      FatalError ("winGetSpans - UNDRAWABLE_WINDOW\n");
      break;

    case DRAWABLE_BUFFER:
      FatalError ("winGetSpans - DRAWABLE_BUFFER\n");
      break;
      
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
