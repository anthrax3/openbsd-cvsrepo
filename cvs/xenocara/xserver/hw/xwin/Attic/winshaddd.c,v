head	1.9;
access;
symbols
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.05.29.12.02.39;	author matthieu;	state dead;
branches;
next	1.8;
commitid	s0SI41sEunLdyFfd;

1.8
date	2015.09.16.19.10.24;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	Te1daavkBLskZ8gc;

1.7
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	cVXoV5PxI8YrEaVA;

1.6
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.33;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 *Copyright (C) 1994-2000 The XFree86 Project, Inc. All Rights Reserved.
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL THE XFREE86 PROJECT BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of the XFree86 Project
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from the XFree86 Project.
 *
 * Authors:	Dakshinamurthy Karra
 *		Suhaib M Siddiqi
 *		Peter Busch
 *		Harold L Hunt II
 */

#ifdef HAVE_XWIN_CONFIG_H
#include <xwin-config.h>
#endif
#include "win.h"

/*
 * Local prototypes
 */

static Bool
 winAllocateFBShadowDD(ScreenPtr pScreen);

static void
 winShadowUpdateDD(ScreenPtr pScreen, shadowBufPtr pBuf);

static Bool
 winCloseScreenShadowDD(ScreenPtr pScreen);

static Bool
 winInitVisualsShadowDD(ScreenPtr pScreen);

static Bool
 winAdjustVideoModeShadowDD(ScreenPtr pScreen);

static Bool
 winBltExposedRegionsShadowDD(ScreenPtr pScreen);

static Bool
 winActivateAppShadowDD(ScreenPtr pScreen);

static Bool
 winRedrawScreenShadowDD(ScreenPtr pScreen);

static Bool
 winRealizeInstalledPaletteShadowDD(ScreenPtr pScreen);

static Bool
 winInstallColormapShadowDD(ColormapPtr pColormap);

static Bool
 winStoreColorsShadowDD(ColormapPtr pmap, int ndef, xColorItem * pdefs);

static Bool
 winCreateColormapShadowDD(ColormapPtr pColormap);

static Bool
 winDestroyColormapShadowDD(ColormapPtr pColormap);

static Bool
 winCreatePrimarySurfaceShadowDD(ScreenPtr pScreen);

static Bool
 winReleasePrimarySurfaceShadowDD(ScreenPtr pScreen);

/*
 * Create the primary surface and attach the clipper.
 * Used for both the initial surface creation and during
 * WM_DISPLAYCHANGE messages.
 */

static Bool
winCreatePrimarySurfaceShadowDD(ScreenPtr pScreen)
{
    winScreenPriv(pScreen);
    HRESULT ddrval = DD_OK;
    DDSURFACEDESC ddsd;

    /* Describe the primary surface */
    ZeroMemory(&ddsd, sizeof(ddsd));
    ddsd.dwSize = sizeof(ddsd);
    ddsd.dwFlags = DDSD_CAPS;
    ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE;

    /* Create the primary surface */
    ddrval = IDirectDraw2_CreateSurface(pScreenPriv->pdd2,
                                        &ddsd, &pScreenPriv->pddsPrimary, NULL);
    if (FAILED(ddrval)) {
        ErrorF("winCreatePrimarySurfaceShadowDD - Could not create primary "
               "surface: %08x\n", (unsigned int) ddrval);
        return FALSE;
    }

#if CYGDEBUG
    winDebug("winCreatePrimarySurfaceShadowDD - Created primary surface\n");
#endif

    /*
     * Attach a clipper to the primary surface that will clip our blits to our
     * display window.
     */
    ddrval = IDirectDrawSurface2_SetClipper(pScreenPriv->pddsPrimary,
                                            pScreenPriv->pddcPrimary);
    if (FAILED(ddrval)) {
        ErrorF("winCreatePrimarySurfaceShadowDD - Primary attach clipper "
               "failed: %08x\n", (unsigned int) ddrval);
        return FALSE;
    }

#if CYGDEBUG
    winDebug("winCreatePrimarySurfaceShadowDD - Attached clipper to "
             "primary surface\n");
#endif

    /* Everything was correct */
    return TRUE;
}

/*
 * Detach the clipper and release the primary surface.
 * Called from WM_DISPLAYCHANGE.
 */

static Bool
winReleasePrimarySurfaceShadowDD(ScreenPtr pScreen)
{
    winScreenPriv(pScreen);

    ErrorF("winReleasePrimarySurfaceShadowDD - Hello\n");

    /* Release the primary surface and clipper, if they exist */
    if (pScreenPriv->pddsPrimary) {
        /*
         * Detach the clipper from the primary surface.
         * NOTE: We do this explicity for clarity.  The Clipper is not released.
         */
        IDirectDrawSurface2_SetClipper(pScreenPriv->pddsPrimary, NULL);

        ErrorF("winReleasePrimarySurfaceShadowDD - Detached clipper\n");

        /* Release the primary surface */
        IDirectDrawSurface2_Release(pScreenPriv->pddsPrimary);
        pScreenPriv->pddsPrimary = NULL;
    }

    ErrorF("winReleasePrimarySurfaceShadowDD - Released primary surface\n");

    return TRUE;
}

/*
 * Create a DirectDraw surface for the shadow framebuffer; also create
 * a primary surface object so we can blit to the display.
 *
 * Install a DirectDraw clipper on our primary surface object
 * that clips our blits to the unobscured client area of our display window.
 */

static Bool
winAllocateFBShadowDD(ScreenPtr pScreen)
{
    winScreenPriv(pScreen);
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
    HRESULT ddrval = DD_OK;
    DDSURFACEDESC ddsd;
    DDSURFACEDESC *pddsdShadow = NULL;

#if CYGDEBUG
    winDebug("winAllocateFBShadowDD\n");
#endif

    /* Create a clipper */
    ddrval = (*g_fpDirectDrawCreateClipper) (0,
                                             &pScreenPriv->pddcPrimary, NULL);
    if (FAILED(ddrval)) {
        ErrorF("winAllocateFBShadowDD - Could not create clipper: %08x\n",
               (unsigned int) ddrval);
        return FALSE;
    }

#if CYGDEBUG
    winDebug("winAllocateFBShadowDD - Created a clipper\n");
#endif

    /* Attach the clipper to our display window */
    ddrval = IDirectDrawClipper_SetHWnd(pScreenPriv->pddcPrimary,
                                        0, pScreenPriv->hwndScreen);
    if (FAILED(ddrval)) {
        ErrorF("winAllocateFBShadowDD - Clipper not attached to "
               "window: %08x\n", (unsigned int) ddrval);
        return FALSE;
    }

#if CYGDEBUG
    winDebug("winAllocateFBShadowDD - Attached clipper to window\n");
#endif

    /* Create a DirectDraw object, store the address at lpdd */
    ddrval = (*g_fpDirectDrawCreate) (NULL, &pScreenPriv->pdd, NULL);
    if (FAILED(ddrval)) {
        ErrorF("winAllocateFBShadowDD - Could not start DirectDraw: %08x\n",
               (unsigned int) ddrval);
        return FALSE;
    }

#if CYGDEBUG
    winDebug("winAllocateFBShadowDD () - Created and initialized DD\n");
#endif

    /* Get a DirectDraw2 interface pointer */
    ddrval = IDirectDraw_QueryInterface(pScreenPriv->pdd,
                                        &IID_IDirectDraw2,
                                        (LPVOID *) &pScreenPriv->pdd2);
    if (FAILED(ddrval)) {
        ErrorF("winAllocateFBShadowDD - Failed DD2 query: %08x\n",
               (unsigned int) ddrval);
        return FALSE;
    }

    /* Are we full screen? */
    if (pScreenInfo->fFullScreen) {
        DDSURFACEDESC ddsdCurrent;
        DWORD dwRefreshRateCurrent = 0;
        HDC hdc = NULL;

        /* Set the cooperative level to full screen */
        ddrval = IDirectDraw2_SetCooperativeLevel(pScreenPriv->pdd2,
                                                  pScreenPriv->hwndScreen,
                                                  DDSCL_EXCLUSIVE
                                                  | DDSCL_FULLSCREEN);
        if (FAILED(ddrval)) {
            ErrorF("winAllocateFBShadowDD - Could not set "
                   "cooperative level: %08x\n", (unsigned int) ddrval);
            return FALSE;
        }

        /*
         * We only need to get the current refresh rate for comparison
         * if a refresh rate has been passed on the command line.
         */
        if (pScreenInfo->dwRefreshRate != 0) {
            ZeroMemory(&ddsdCurrent, sizeof(ddsdCurrent));
            ddsdCurrent.dwSize = sizeof(ddsdCurrent);

            /* Get information about current display settings */
            ddrval = IDirectDraw2_GetDisplayMode(pScreenPriv->pdd2,
                                                 &ddsdCurrent);
            if (FAILED(ddrval)) {
                ErrorF("winAllocateFBShadowDD - Could not get current "
                       "refresh rate: %08x.  Continuing.\n",
                       (unsigned int) ddrval);
                dwRefreshRateCurrent = 0;
            }
            else {
                /* Grab the current refresh rate */
                dwRefreshRateCurrent = ddsdCurrent.u2.dwRefreshRate;
            }
        }

        /* Clean up the refresh rate */
        if (dwRefreshRateCurrent == pScreenInfo->dwRefreshRate) {
            /*
             * Refresh rate is non-specified or equal to current.
             */
            pScreenInfo->dwRefreshRate = 0;
        }

        /* Grab a device context for the screen */
        hdc = GetDC(NULL);
        if (hdc == NULL) {
            ErrorF("winAllocateFBShadowDD - GetDC () failed\n");
            return FALSE;
        }

        /* Only change the video mode when different than current mode */
        if (!pScreenInfo->fMultipleMonitors
            && (pScreenInfo->dwWidth != GetSystemMetrics(SM_CXSCREEN)
                || pScreenInfo->dwHeight != GetSystemMetrics(SM_CYSCREEN)
                || pScreenInfo->dwBPP != GetDeviceCaps(hdc, BITSPIXEL)
                || pScreenInfo->dwRefreshRate != 0)) {
            ErrorF("winAllocateFBShadowDD - Changing video mode\n");

            /* Change the video mode to the mode requested, and use the driver default refresh rate on failure */
            ddrval = IDirectDraw2_SetDisplayMode(pScreenPriv->pdd2,
                                                 pScreenInfo->dwWidth,
                                                 pScreenInfo->dwHeight,
                                                 pScreenInfo->dwBPP,
                                                 pScreenInfo->dwRefreshRate, 0);
            if (FAILED(ddrval)) {
                ErrorF("winAllocateFBShadowDD - Could not set "
                       "full screen display mode: %08x\n",
                       (unsigned int) ddrval);
                ErrorF
                    ("winAllocateFBShadowDD - Using default driver refresh rate\n");
                ddrval =
                    IDirectDraw2_SetDisplayMode(pScreenPriv->pdd2,
                                                pScreenInfo->dwWidth,
                                                pScreenInfo->dwHeight,
                                                pScreenInfo->dwBPP, 0, 0);
                if (FAILED(ddrval)) {
                    ErrorF
                        ("winAllocateFBShadowDD - Could not set default refresh rate "
                         "full screen display mode: %08x\n",
                         (unsigned int) ddrval);
                    return FALSE;
                }
            }
        }
        else {
            ErrorF("winAllocateFBShadowDD - Not changing video mode\n");
        }

        /* Release our DC */
        ReleaseDC(NULL, hdc);
        hdc = NULL;
    }
    else {
        /* Set the cooperative level for windowed mode */
        ddrval = IDirectDraw2_SetCooperativeLevel(pScreenPriv->pdd2,
                                                  pScreenPriv->hwndScreen,
                                                  DDSCL_NORMAL);
        if (FAILED(ddrval)) {
            ErrorF("winAllocateFBShadowDD - Could not set "
                   "cooperative level: %08x\n", (unsigned int) ddrval);
            return FALSE;
        }
    }

    /* Create the primary surface */
    if (!winCreatePrimarySurfaceShadowDD(pScreen)) {
        ErrorF("winAllocateFBShadowDD - winCreatePrimarySurfaceShadowDD "
               "failed\n");
        return FALSE;
    }

    /* Describe the shadow surface to be created */
    /* NOTE: Do not use a DDSCAPS_VIDEOMEMORY surface,
     * as drawing, locking, and unlocking take forever
     * with video memory surfaces.  In addition,
     * video memory is a somewhat scarce resource,
     * so you shouldn't be allocating video memory when
     * you have the option of using system memory instead.
     */
    ZeroMemory(&ddsd, sizeof(ddsd));
    ddsd.dwSize = sizeof(ddsd);
    ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH;
    ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN | DDSCAPS_SYSTEMMEMORY;
    ddsd.dwHeight = pScreenInfo->dwHeight;
    ddsd.dwWidth = pScreenInfo->dwWidth;

    /* Create the shadow surface */
    ddrval = IDirectDraw2_CreateSurface(pScreenPriv->pdd2,
                                        &ddsd, &pScreenPriv->pddsShadow, NULL);
    if (FAILED(ddrval)) {
        ErrorF("winAllocateFBShadowDD - Could not create shadow "
               "surface: %08x\n", (unsigned int) ddrval);
        return FALSE;
    }

#if CYGDEBUG
    winDebug("winAllocateFBShadowDD - Created shadow\n");
#endif

    /* Allocate a DD surface description for our screen privates */
    pddsdShadow = pScreenPriv->pddsdShadow = malloc(sizeof(DDSURFACEDESC));
    if (pddsdShadow == NULL) {
        ErrorF("winAllocateFBShadowDD - Could not allocate surface "
               "description memory\n");
        return FALSE;
    }
    ZeroMemory(pddsdShadow, sizeof(*pddsdShadow));
    pddsdShadow->dwSize = sizeof(*pddsdShadow);

#if CYGDEBUG
    winDebug("winAllocateFBShadowDD - Locking shadow\n");
#endif

    /* Lock the shadow surface */
    ddrval = IDirectDrawSurface2_Lock(pScreenPriv->pddsShadow,
                                      NULL, pddsdShadow, DDLOCK_WAIT, NULL);
    if (FAILED(ddrval) || pddsdShadow->lpSurface == NULL) {
        ErrorF("winAllocateFBShadowDD - Could not lock shadow "
               "surface: %08x\n", (unsigned int) ddrval);
        return FALSE;
    }

#if CYGDEBUG
    winDebug("winAllocateFBShadowDD - Locked shadow\n");
#endif

    /* We don't know how to deal with anything other than RGB */
    if (!(pddsdShadow->ddpfPixelFormat.dwFlags & DDPF_RGB)) {
        ErrorF("winAllocateFBShadowDD - Color format other than RGB\n");
        return FALSE;
    }

    /* Grab the pitch from the surface desc */
    pScreenInfo->dwStride = (pddsdShadow->u1.lPitch * 8)
        / pScreenInfo->dwBPP;

    /* Save the pointer to our surface memory */
    pScreenInfo->pfb = pddsdShadow->lpSurface;

    /* Grab the color depth and masks from the surface description */
    pScreenPriv->dwRedMask = pddsdShadow->ddpfPixelFormat.u2.dwRBitMask;
    pScreenPriv->dwGreenMask = pddsdShadow->ddpfPixelFormat.u3.dwGBitMask;
    pScreenPriv->dwBlueMask = pddsdShadow->ddpfPixelFormat.u4.dwBBitMask;

#if CYGDEBUG
    winDebug("winAllocateFBShadowDD - Returning\n");
#endif

    return TRUE;
}

static void
winFreeFBShadowDD(ScreenPtr pScreen)
{
    winScreenPriv(pScreen);
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;

    /* Free the shadow surface, if there is one */
    if (pScreenPriv->pddsShadow) {
        IDirectDrawSurface2_Unlock(pScreenPriv->pddsShadow, NULL);
        IDirectDrawSurface2_Release(pScreenPriv->pddsShadow);
        pScreenPriv->pddsShadow = NULL;
    }

    /* Detach the clipper from the primary surface and release the primary surface, if there is one */
    winReleasePrimarySurfaceShadowDD(pScreen);

    /* Release the clipper object */
    if (pScreenPriv->pddcPrimary) {
        IDirectDrawClipper_Release(pScreenPriv->pddcPrimary);
        pScreenPriv->pddcPrimary = NULL;
    }

    /* Free the DirectDraw2 object, if there is one */
    if (pScreenPriv->pdd2) {
        IDirectDraw2_RestoreDisplayMode(pScreenPriv->pdd2);
        IDirectDraw2_Release(pScreenPriv->pdd2);
        pScreenPriv->pdd2 = NULL;
    }

    /* Free the DirectDraw object, if there is one */
    if (pScreenPriv->pdd) {
        IDirectDraw_Release(pScreenPriv->pdd);
        pScreenPriv->pdd = NULL;
    }

    /* Invalidate the ScreenInfo's fb pointer */
    pScreenInfo->pfb = NULL;
}

/*
 * Transfer the damaged regions of the shadow framebuffer to the display.
 */

static void
winShadowUpdateDD(ScreenPtr pScreen, shadowBufPtr pBuf)
{
    winScreenPriv(pScreen);
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
    RegionPtr damage = shadowDamage(pBuf);
    HRESULT ddrval = DD_OK;
    RECT rcDest, rcSrc;
    POINT ptOrigin;
    DWORD dwBox = RegionNumRects(damage);
    BoxPtr pBox = RegionRects(damage);
    HRGN hrgnCombined = NULL;

    /*
     * Return immediately if the app is not active
     * and we are fullscreen, or if we have a bad display depth
     */
    if ((!pScreenPriv->fActive && pScreenInfo->fFullScreen)
        || pScreenPriv->fBadDepth)
        return;

    /* Return immediately if we didn't get needed surfaces */
    if (!pScreenPriv->pddsPrimary || !pScreenPriv->pddsShadow)
        return;

    /* Get the origin of the window in the screen coords */
    ptOrigin.x = pScreenInfo->dwXOffset;
    ptOrigin.y = pScreenInfo->dwYOffset;
    MapWindowPoints(pScreenPriv->hwndScreen,
                    HWND_DESKTOP, (LPPOINT) &ptOrigin, 1);

    /* Unlock the shadow surface, so we can blit */
    ddrval = IDirectDrawSurface2_Unlock(pScreenPriv->pddsShadow, NULL);
    if (FAILED(ddrval)) {
        ErrorF("winShadowUpdateDD - Unlock failed\n");
        return;
    }

    /*
     * Handle small regions with multiple blits,
     * handle large regions by creating a clipping region and
     * doing a single blit constrained to that clipping region.
     */
    if (pScreenInfo->dwClipUpdatesNBoxes == 0
        || dwBox < pScreenInfo->dwClipUpdatesNBoxes) {
        /* Loop through all boxes in the damaged region */
        while (dwBox--) {
            /* Assign damage box to source rectangle */
            rcSrc.left = pBox->x1;
            rcSrc.top = pBox->y1;
            rcSrc.right = pBox->x2;
            rcSrc.bottom = pBox->y2;

            /* Calculate destination rectange */
            rcDest.left = ptOrigin.x + rcSrc.left;
            rcDest.top = ptOrigin.y + rcSrc.top;
            rcDest.right = ptOrigin.x + rcSrc.right;
            rcDest.bottom = ptOrigin.y + rcSrc.bottom;

            /* Blit the damaged areas */
            ddrval = IDirectDrawSurface2_Blt(pScreenPriv->pddsPrimary,
                                             &rcDest,
                                             pScreenPriv->pddsShadow,
                                             &rcSrc, DDBLT_WAIT, NULL);

            /* Get a pointer to the next box */
            ++pBox;
        }
    }
    else {
        BoxPtr pBoxExtents = RegionExtents(damage);

        /* Compute a GDI region from the damaged region */
        hrgnCombined =
            CreateRectRgn(pBoxExtents->x1, pBoxExtents->y1, pBoxExtents->x2,
                          pBoxExtents->y2);

        /* Install the GDI region as a clipping region */
        SelectClipRgn(pScreenPriv->hdcScreen, hrgnCombined);
        DeleteObject(hrgnCombined);
        hrgnCombined = NULL;

        /* Calculating a bounding box for the source is easy */
        rcSrc.left = pBoxExtents->x1;
        rcSrc.top = pBoxExtents->y1;
        rcSrc.right = pBoxExtents->x2;
        rcSrc.bottom = pBoxExtents->y2;

        /* Calculating a bounding box for the destination is trickier */
        rcDest.left = ptOrigin.x + rcSrc.left;
        rcDest.top = ptOrigin.y + rcSrc.top;
        rcDest.right = ptOrigin.x + rcSrc.right;
        rcDest.bottom = ptOrigin.y + rcSrc.bottom;

        /* Our Blt should be clipped to the invalidated region */
        ddrval = IDirectDrawSurface2_Blt(pScreenPriv->pddsPrimary,
                                         &rcDest,
                                         pScreenPriv->pddsShadow,
                                         &rcSrc, DDBLT_WAIT, NULL);

        /* Reset the clip region */
        SelectClipRgn(pScreenPriv->hdcScreen, NULL);
    }

    /* Relock the shadow surface */
    ddrval = IDirectDrawSurface2_Lock(pScreenPriv->pddsShadow,
                                      NULL,
                                      pScreenPriv->pddsdShadow,
                                      DDLOCK_WAIT, NULL);
    if (FAILED(ddrval)) {
        ErrorF("winShadowUpdateDD - Lock failed\n");
        return;
    }

    /* Has our memory pointer changed? */
    if (pScreenInfo->pfb != pScreenPriv->pddsdShadow->lpSurface) {
        ErrorF("winShadowUpdateDD - Memory location of the shadow "
               "surface has changed, trying to update the root window "
               "pixmap header to point to the new address.  If you get "
               "this message and " PROJECT_NAME " freezes or crashes "
               "after this message then send a problem report and your "
               "%s file to " BUILDERADDR "\n", g_pszLogFile);

        /* Location of shadow framebuffer has changed */
        winUpdateFBPointer(pScreen, pScreenPriv->pddsdShadow->lpSurface);
    }
}

static Bool
winInitScreenShadowDD(ScreenPtr pScreen)
{
    winScreenPriv(pScreen);

    /* Get a device context for the screen  */
    pScreenPriv->hdcScreen = GetDC(pScreenPriv->hwndScreen);

    return winAllocateFBShadowDD(pScreen);
}

/*
 * Call the wrapped CloseScreen function.
 *
 * Free our resources and private structures.
 */

static Bool
winCloseScreenShadowDD(ScreenPtr pScreen)
{
    winScreenPriv(pScreen);
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
    Bool fReturn;

#if CYGDEBUG
    winDebug("winCloseScreenShadowDD - Freeing screen resources\n");
#endif

    /* Flag that the screen is closed */
    pScreenPriv->fClosed = TRUE;
    pScreenPriv->fActive = FALSE;

    /* Call the wrapped CloseScreen procedure */
    WIN_UNWRAP(CloseScreen);
    if (pScreen->CloseScreen)
        fReturn = (*pScreen->CloseScreen) (pScreen);

    winFreeFBShadowDD(pScreen);

    /* Free the screen DC */
    ReleaseDC(pScreenPriv->hwndScreen, pScreenPriv->hdcScreen);

    /* Delete the window property */
    RemoveProp(pScreenPriv->hwndScreen, WIN_SCR_PROP);

    /* Delete tray icon, if we have one */
    if (!pScreenInfo->fNoTrayIcon)
        winDeleteNotifyIcon(pScreenPriv);

    /* Free the exit confirmation dialog box, if it exists */
    if (g_hDlgExit != NULL) {
        DestroyWindow(g_hDlgExit);
        g_hDlgExit = NULL;
    }

    /* Kill our window */
    if (pScreenPriv->hwndScreen) {
        DestroyWindow(pScreenPriv->hwndScreen);
        pScreenPriv->hwndScreen = NULL;
    }

#if defined(XWIN_CLIPBOARD) || defined(XWIN_MULTIWINDOW)
    /* Destroy the thread startup mutex */
    pthread_mutex_destroy(&pScreenPriv->pmServerStarted);
#endif

    /* Kill our screeninfo's pointer to the screen */
    pScreenInfo->pScreen = NULL;

    /* Free the screen privates for this screen */
    free((void *) pScreenPriv);

    return fReturn;
}

/*
 * Tell mi what sort of visuals we need.
 *
 * Generally we only need one visual, as our screen can only
 * handle one format at a time, I believe.  You may want
 * to verify that last sentence.
 */

static Bool
winInitVisualsShadowDD(ScreenPtr pScreen)
{
    winScreenPriv(pScreen);
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
    DWORD dwRedBits, dwGreenBits, dwBlueBits;

    /* Count the number of ones in each color mask */
    dwRedBits = winCountBits(pScreenPriv->dwRedMask);
    dwGreenBits = winCountBits(pScreenPriv->dwGreenMask);
    dwBlueBits = winCountBits(pScreenPriv->dwBlueMask);

    /* Store the maximum number of ones in a color mask as the bitsPerRGB */
    if (dwRedBits == 0 || dwGreenBits == 0 || dwBlueBits == 0)
        pScreenPriv->dwBitsPerRGB = 8;
    else if (dwRedBits > dwGreenBits && dwRedBits > dwBlueBits)
        pScreenPriv->dwBitsPerRGB = dwRedBits;
    else if (dwGreenBits > dwRedBits && dwGreenBits > dwBlueBits)
        pScreenPriv->dwBitsPerRGB = dwGreenBits;
    else
        pScreenPriv->dwBitsPerRGB = dwBlueBits;

    ErrorF("winInitVisualsShadowDD - Masks %08x %08x %08x BPRGB %d d %d "
           "bpp %d\n",
           (unsigned int) pScreenPriv->dwRedMask,
           (unsigned int) pScreenPriv->dwGreenMask,
           (unsigned int) pScreenPriv->dwBlueMask,
           (int) pScreenPriv->dwBitsPerRGB,
           (int) pScreenInfo->dwDepth, (int) pScreenInfo->dwBPP);

    /* Create a single visual according to the Windows screen depth */
    switch (pScreenInfo->dwDepth) {
    case 24:
    case 16:
    case 15:
        /* Create the real visual */
        if (!miSetVisualTypesAndMasks(pScreenInfo->dwDepth,
                                      TrueColorMask,
                                      pScreenPriv->dwBitsPerRGB,
                                      TrueColor,
                                      pScreenPriv->dwRedMask,
                                      pScreenPriv->dwGreenMask,
                                      pScreenPriv->dwBlueMask)) {
            ErrorF("winInitVisualsShadowDD - miSetVisualTypesAndMasks "
                   "failed for TrueColor\n");
            return FALSE;
        }

#ifdef XWIN_EMULATEPSEUDO
        if (!pScreenInfo->fEmulatePseudo)
            break;

        /* Setup a pseudocolor visual */
        if (!miSetVisualTypesAndMasks(8, PseudoColorMask, 8, -1, 0, 0, 0)) {
            ErrorF("winInitVisualsShadowDD - miSetVisualTypesAndMasks "
                   "failed for PseudoColor\n");
            return FALSE;
        }
#endif
        break;

    case 8:
        if (!miSetVisualTypesAndMasks(pScreenInfo->dwDepth,
                                      pScreenInfo->fFullScreen
                                      ? PseudoColorMask : StaticColorMask,
                                      pScreenPriv->dwBitsPerRGB,
                                      pScreenInfo->fFullScreen
                                      ? PseudoColor : StaticColor,
                                      pScreenPriv->dwRedMask,
                                      pScreenPriv->dwGreenMask,
                                      pScreenPriv->dwBlueMask)) {
            ErrorF("winInitVisualsShadowDD - miSetVisualTypesAndMasks "
                   "failed\n");
            return FALSE;
        }
        break;

    default:
        ErrorF("winInitVisualsShadowDD - Unknown screen depth\n");
        return FALSE;
    }

#if CYGDEBUG
    winDebug("winInitVisualsShadowDD - Returning\n");
#endif

    return TRUE;
}

/*
 * Adjust the user proposed video mode
 */

static Bool
winAdjustVideoModeShadowDD(ScreenPtr pScreen)
{
    winScreenPriv(pScreen);
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
    HDC hdc = NULL;
    DWORD dwBPP;

    /* We're in serious trouble if we can't get a DC */
    hdc = GetDC(NULL);
    if (hdc == NULL) {
        ErrorF("winAdjustVideoModeShadowDD - GetDC () failed\n");
        return FALSE;
    }

    /* Query GDI for current display depth */
    dwBPP = GetDeviceCaps(hdc, BITSPIXEL);

    /* DirectDraw can only change the depth in fullscreen mode */
    if (!(pScreenInfo->fFullScreen && (pScreenInfo->dwBPP != WIN_DEFAULT_BPP))) {
        /* Otherwise, We'll use GDI's depth */
        pScreenInfo->dwBPP = dwBPP;
    }

    /* Release our DC */
    ReleaseDC(NULL, hdc);
    return TRUE;
}

/*
 * Blt exposed regions to the screen
 */

static Bool
winBltExposedRegionsShadowDD(ScreenPtr pScreen)
{
    winScreenPriv(pScreen);
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
    RECT rcSrc, rcDest;
    POINT ptOrigin;
    HDC hdcUpdate = NULL;
    PAINTSTRUCT ps;
    HRESULT ddrval = DD_OK;
    Bool fReturn = TRUE;
    Bool fLocked = TRUE;
    int i;

    /* BeginPaint gives us an hdc that clips to the invalidated region */
    hdcUpdate = BeginPaint(pScreenPriv->hwndScreen, &ps);
    if (hdcUpdate == NULL) {
        ErrorF("winBltExposedRegionsShadowDD - BeginPaint () returned "
               "a NULL device context handle.  Aborting blit attempt.\n");
        return FALSE;
    }

    /* Unlock the shadow surface, so we can blit */
    ddrval = IDirectDrawSurface2_Unlock(pScreenPriv->pddsShadow, NULL);
    if (FAILED(ddrval)) {
        fReturn = FALSE;
        goto winBltExposedRegionsShadowDD_Exit;
    }
    else {
        /* Flag that we have unlocked the shadow surface */
        fLocked = FALSE;
    }

    /* Get the origin of the window in the screen coords */
    ptOrigin.x = pScreenInfo->dwXOffset;
    ptOrigin.y = pScreenInfo->dwYOffset;

    MapWindowPoints(pScreenPriv->hwndScreen,
                    HWND_DESKTOP, (LPPOINT) &ptOrigin, 1);
    rcDest.left = ptOrigin.x;
    rcDest.right = ptOrigin.x + pScreenInfo->dwWidth;
    rcDest.top = ptOrigin.y;
    rcDest.bottom = ptOrigin.y + pScreenInfo->dwHeight;

    /* Source can be enter shadow surface, as Blt should clip */
    rcSrc.left = 0;
    rcSrc.top = 0;
    rcSrc.right = pScreenInfo->dwWidth;
    rcSrc.bottom = pScreenInfo->dwHeight;

    /* Try to regain the primary surface and blit again if we've lost it */
    for (i = 0; i <= WIN_REGAIN_SURFACE_RETRIES; ++i) {
        /* Our Blt should be clipped to the invalidated region */
        ddrval = IDirectDrawSurface2_Blt(pScreenPriv->pddsPrimary,
                                         &rcDest,
                                         pScreenPriv->pddsShadow,
                                         &rcSrc, DDBLT_WAIT, NULL);
        if (ddrval == DDERR_SURFACELOST) {
            /* Surface was lost */
            ErrorF("winBltExposedRegionsShadowDD - IDirectDrawSurface2_Blt "
                   "reported that the primary surface was lost, "
                   "trying to restore, retry: %d\n", i + 1);

            /* Try to restore the surface, once */
            ddrval = IDirectDrawSurface2_Restore(pScreenPriv->pddsPrimary);
            ErrorF("winBltExposedRegionsShadowDD - "
                   "IDirectDrawSurface2_Restore returned: ");
            if (ddrval == DD_OK)
                ErrorF("DD_OK\n");
            else if (ddrval == DDERR_WRONGMODE)
                ErrorF("DDERR_WRONGMODE\n");
            else if (ddrval == DDERR_INCOMPATIBLEPRIMARY)
                ErrorF("DDERR_INCOMPATIBLEPRIMARY\n");
            else if (ddrval == DDERR_UNSUPPORTED)
                ErrorF("DDERR_UNSUPPORTED\n");
            else if (ddrval == DDERR_INVALIDPARAMS)
                ErrorF("DDERR_INVALIDPARAMS\n");
            else if (ddrval == DDERR_INVALIDOBJECT)
                ErrorF("DDERR_INVALIDOBJECT\n");
            else
                ErrorF("unknown error: %08x\n", (unsigned int) ddrval);

            /* Loop around to try the blit one more time */
            continue;
        }
        else if (FAILED(ddrval)) {
            fReturn = FALSE;
            ErrorF("winBltExposedRegionsShadowDD - IDirectDrawSurface2_Blt "
                   "failed, but surface not lost: %08x %d\n",
                   (unsigned int) ddrval, (int) ddrval);
            goto winBltExposedRegionsShadowDD_Exit;
        }
        else {
            /* Success, stop looping */
            break;
        }
    }

    /* Relock the shadow surface */
    ddrval = IDirectDrawSurface2_Lock(pScreenPriv->pddsShadow,
                                      NULL,
                                      pScreenPriv->pddsdShadow,
                                      DDLOCK_WAIT, NULL);
    if (FAILED(ddrval)) {
        fReturn = FALSE;
        ErrorF("winBltExposedRegionsShadowDD - IDirectDrawSurface2_Lock "
               "failed\n");
        goto winBltExposedRegionsShadowDD_Exit;
    }
    else {
        /* Indicate that we have relocked the shadow surface */
        fLocked = TRUE;
    }

    /* Has our memory pointer changed? */
    if (pScreenInfo->pfb != pScreenPriv->pddsdShadow->lpSurface)
        winUpdateFBPointer(pScreen, pScreenPriv->pddsdShadow->lpSurface);

 winBltExposedRegionsShadowDD_Exit:
    /* EndPaint frees the DC */
    if (hdcUpdate != NULL)
        EndPaint(pScreenPriv->hwndScreen, &ps);

    /*
     * Relock the surface if it is not locked.  We don't care if locking fails,
     * as it will cause the server to shutdown within a few more operations.
     */
    if (!fLocked) {
        IDirectDrawSurface2_Lock(pScreenPriv->pddsShadow,
                                 NULL,
                                 pScreenPriv->pddsdShadow, DDLOCK_WAIT, NULL);

        /* Has our memory pointer changed? */
        if (pScreenInfo->pfb != pScreenPriv->pddsdShadow->lpSurface)
            winUpdateFBPointer(pScreen, pScreenPriv->pddsdShadow->lpSurface);

        fLocked = TRUE;
    }
    return fReturn;
}

/*
 * Do any engine-specific appliation-activation processing
 */

static Bool
winActivateAppShadowDD(ScreenPtr pScreen)
{
    winScreenPriv(pScreen);

    /*
     * Do we have a surface?
     * Are we active?
     * Are we fullscreen?
     */
    if (pScreenPriv != NULL
        && pScreenPriv->pddsPrimary != NULL && pScreenPriv->fActive) {
        /* Primary surface was lost, restore it */
        IDirectDrawSurface2_Restore(pScreenPriv->pddsPrimary);
    }

    return TRUE;
}

/*
 * Reblit the shadow framebuffer to the screen.
 */

static Bool
winRedrawScreenShadowDD(ScreenPtr pScreen)
{
    winScreenPriv(pScreen);
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
    HRESULT ddrval = DD_OK;
    RECT rcSrc, rcDest;
    POINT ptOrigin;

    /* Get the origin of the window in the screen coords */
    ptOrigin.x = pScreenInfo->dwXOffset;
    ptOrigin.y = pScreenInfo->dwYOffset;
    MapWindowPoints(pScreenPriv->hwndScreen,
                    HWND_DESKTOP, (LPPOINT) &ptOrigin, 1);
    rcDest.left = ptOrigin.x;
    rcDest.right = ptOrigin.x + pScreenInfo->dwWidth;
    rcDest.top = ptOrigin.y;
    rcDest.bottom = ptOrigin.y + pScreenInfo->dwHeight;

    /* Source can be entire shadow surface, as Blt should clip for us */
    rcSrc.left = 0;
    rcSrc.top = 0;
    rcSrc.right = pScreenInfo->dwWidth;
    rcSrc.bottom = pScreenInfo->dwHeight;

    /* Redraw the whole window, to take account for the new colors */
    ddrval = IDirectDrawSurface2_Blt(pScreenPriv->pddsPrimary,
                                     &rcDest,
                                     pScreenPriv->pddsShadow,
                                     &rcSrc, DDBLT_WAIT, NULL);
    if (FAILED(ddrval)) {
        ErrorF("winRedrawScreenShadowDD - IDirectDrawSurface_Blt () "
               "failed: %08x\n", (unsigned int) ddrval);
    }

    return TRUE;
}

/*
 * Realize the currently installed colormap
 */

static Bool
winRealizeInstalledPaletteShadowDD(ScreenPtr pScreen)
{
    return TRUE;
}

/*
 * Install the specified colormap
 */

static Bool
winInstallColormapShadowDD(ColormapPtr pColormap)
{
    ScreenPtr pScreen = pColormap->pScreen;

    winScreenPriv(pScreen);
    winCmapPriv(pColormap);
    HRESULT ddrval = DD_OK;

    /* Install the DirectDraw palette on the primary surface */
    ddrval = IDirectDrawSurface2_SetPalette(pScreenPriv->pddsPrimary,
                                            pCmapPriv->lpDDPalette);
    if (FAILED(ddrval)) {
        ErrorF("winInstallColormapShadowDD - Failed installing the "
               "DirectDraw palette.\n");
        return FALSE;
    }

    /* Save a pointer to the newly installed colormap */
    pScreenPriv->pcmapInstalled = pColormap;

    return TRUE;
}

/*
 * Store the specified colors in the specified colormap
 */

static Bool
winStoreColorsShadowDD(ColormapPtr pColormap, int ndef, xColorItem * pdefs)
{
    ScreenPtr pScreen = pColormap->pScreen;

    winScreenPriv(pScreen);
    winCmapPriv(pColormap);
    ColormapPtr curpmap = pScreenPriv->pcmapInstalled;
    HRESULT ddrval = DD_OK;

    /* Put the X colormap entries into the Windows logical palette */
    ddrval = IDirectDrawPalette_SetEntries(pCmapPriv->lpDDPalette,
                                           0,
                                           pdefs[0].pixel,
                                           ndef,
                                           pCmapPriv->peColors
                                           + pdefs[0].pixel);
    if (FAILED(ddrval)) {
        ErrorF("winStoreColorsShadowDD - SetEntries () failed\n");
        return FALSE;
    }

    /* Don't install the DirectDraw palette if the colormap is not installed */
    if (pColormap != curpmap) {
        return TRUE;
    }

    if (!winInstallColormapShadowDD(pColormap)) {
        ErrorF("winStoreColorsShadowDD - Failed installing colormap\n");
        return FALSE;
    }

    return TRUE;
}

/*
 * Colormap initialization procedure
 */

static Bool
winCreateColormapShadowDD(ColormapPtr pColormap)
{
    HRESULT ddrval = DD_OK;
    ScreenPtr pScreen = pColormap->pScreen;

    winScreenPriv(pScreen);
    winCmapPriv(pColormap);

    /* Create a DirectDraw palette */
    ddrval = IDirectDraw2_CreatePalette(pScreenPriv->pdd,
                                        DDPCAPS_8BIT | DDPCAPS_ALLOW256,
                                        pCmapPriv->peColors,
                                        &pCmapPriv->lpDDPalette, NULL);
    if (FAILED(ddrval)) {
        ErrorF("winCreateColormapShadowDD - CreatePalette failed\n");
        return FALSE;
    }

    return TRUE;
}

/*
 * Colormap destruction procedure
 */

static Bool
winDestroyColormapShadowDD(ColormapPtr pColormap)
{
    winScreenPriv(pColormap->pScreen);
    winCmapPriv(pColormap);
    HRESULT ddrval = DD_OK;

    /*
     * Is colormap to be destroyed the default?
     *
     * Non-default colormaps should have had winUninstallColormap
     * called on them before we get here.  The default colormap
     * will not have had winUninstallColormap called on it.  Thus,
     * we need to handle the default colormap in a special way.
     */
    if (pColormap->flags & IsDefault) {
#if CYGDEBUG
        winDebug("winDestroyColormapShadowDD - Destroying default "
                 "colormap\n");
#endif

        /*
         * FIXME: Walk the list of all screens, popping the default
         * palette out of each screen device context.
         */

        /* Pop the palette out of the primary surface */
        ddrval = IDirectDrawSurface2_SetPalette(pScreenPriv->pddsPrimary, NULL);
        if (FAILED(ddrval)) {
            ErrorF("winDestroyColormapShadowDD - Failed freeing the "
                   "default colormap DirectDraw palette.\n");
            return FALSE;
        }

        /* Clear our private installed colormap pointer */
        pScreenPriv->pcmapInstalled = NULL;
    }

    /* Release the palette */
    IDirectDrawPalette_Release(pCmapPriv->lpDDPalette);

    /* Invalidate the colormap privates */
    pCmapPriv->lpDDPalette = NULL;

    return TRUE;
}

/*
 * Set engine specific functions
 */

Bool
winSetEngineFunctionsShadowDD(ScreenPtr pScreen)
{
    winScreenPriv(pScreen);
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;

    /* Set our pointers */
    pScreenPriv->pwinAllocateFB = winAllocateFBShadowDD;
    pScreenPriv->pwinFreeFB = winFreeFBShadowDD;
    pScreenPriv->pwinShadowUpdate = winShadowUpdateDD;
    pScreenPriv->pwinInitScreen = winInitScreenShadowDD;
    pScreenPriv->pwinCloseScreen = winCloseScreenShadowDD;
    pScreenPriv->pwinInitVisuals = winInitVisualsShadowDD;
    pScreenPriv->pwinAdjustVideoMode = winAdjustVideoModeShadowDD;
    if (pScreenInfo->fFullScreen)
        pScreenPriv->pwinCreateBoundingWindow =
            winCreateBoundingWindowFullScreen;
    else
        pScreenPriv->pwinCreateBoundingWindow = winCreateBoundingWindowWindowed;
    pScreenPriv->pwinFinishScreenInit = winFinishScreenInitFB;
    pScreenPriv->pwinBltExposedRegions = winBltExposedRegionsShadowDD;
    pScreenPriv->pwinActivateApp = winActivateAppShadowDD;
    pScreenPriv->pwinRedrawScreen = winRedrawScreenShadowDD;
    pScreenPriv->pwinRealizeInstalledPalette
        = winRealizeInstalledPaletteShadowDD;
    pScreenPriv->pwinInstallColormap = winInstallColormapShadowDD;
    pScreenPriv->pwinStoreColors = winStoreColorsShadowDD;
    pScreenPriv->pwinCreateColormap = winCreateColormapShadowDD;
    pScreenPriv->pwinDestroyColormap = winDestroyColormapShadowDD;
    pScreenPriv->pwinHotKeyAltTab =
        (winHotKeyAltTabProcPtr) (void (*)(void)) NoopDDA;
    pScreenPriv->pwinCreatePrimarySurface = winCreatePrimarySurfaceShadowDD;
    pScreenPriv->pwinReleasePrimarySurface = winReleasePrimarySurfaceShadowDD;
#ifdef XWIN_MULTIWINDOW
    pScreenPriv->pwinFinishCreateWindowsWindow =
        (winFinishCreateWindowsWindowProcPtr) (void (*)(void)) NoopDDA;
#endif

    return TRUE;
}
@


1.8
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@@


1.7
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d176 1
a176 1
 * 
d521 1
a521 1
     * handle large regions by creating a clipping region and 
d622 1
a622 1
 * 
d686 1
a686 1
 * 
@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d679 1
a679 1
    free((pointer) pScreenPriv);
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a39 18
 * FIXME: Headers are broken, DEFINE_GUID doesn't work correctly,
 * so we have to redefine it here.
 */
#ifdef DEFINE_GUID
#undef DEFINE_GUID
#define DEFINE_GUID(n,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) const GUID n GUID_SECT = {l,w1,w2,{b1,b2,b3,b4,b5,b6,b7,b8}}
#endif                          /* DEFINE_GUID */

/*
 * FIXME: Headers are broken, IID_IDirectDraw2 has to be defined
 * here manually.  Should be handled by ddraw.h
 */
#ifndef IID_IDirectDraw2
DEFINE_GUID(IID_IDirectDraw2, 0xB3A6F3E0, 0x2B43, 0x11CF, 0xA2, 0xDE, 0x00,
            0xAA, 0x00, 0xB9, 0x33, 0x56);
#endif                          /* IID_IDirectDraw2 */

/*
d50 1
a50 1
 winCloseScreenShadowDD(int nIndex, ScreenPtr pScreen);
d235 1
a235 1
                                        (LPVOID *) & pScreenPriv->pdd2);
d492 1
a492 1
    HRGN hrgnTemp = NULL, hrgnCombined = NULL;
d510 1
a510 1
                    HWND_DESKTOP, (LPPOINT) & ptOrigin, 1);
d554 3
a556 9
        hrgnCombined = CreateRectRgn(pBox->x1, pBox->y1, pBox->x2, pBox->y2);
        dwBox--;
        pBox++;
        while (dwBox--) {
            hrgnTemp = CreateRectRgn(pBox->x1, pBox->y1, pBox->x2, pBox->y2);
            CombineRgn(hrgnCombined, hrgnCombined, hrgnTemp, RGN_OR);
            DeleteObject(hrgnTemp);
            pBox++;
        }
d627 1
a627 1
winCloseScreenShadowDD(int nIndex, ScreenPtr pScreen)
d644 1
a644 1
        fReturn = (*pScreen->CloseScreen) (nIndex, pScreen);
d856 1
a856 1
                    HWND_DESKTOP, (LPPOINT) & ptOrigin, 1);
d999 1
a999 1
                    HWND_DESKTOP, (LPPOINT) & ptOrigin, 1);
@


1.4
log
@Update to xserver 1.11.2
@
text
@a38 1

d46 1
a46 2
#endif /* DEFINE_GUID */

d53 3
a55 3
DEFINE_GUID( IID_IDirectDraw2,0xB3A6F3E0,0x2B43,0x11CF,0xA2,0xDE,0x00,0xAA,0x00,0xB9,0x33,0x56 );
#endif /* IID_IDirectDraw2 */

d62 1
a62 1
winAllocateFBShadowDD (ScreenPtr pScreen);
d65 1
a65 2
winShadowUpdateDD (ScreenPtr pScreen, 
		   shadowBufPtr pBuf);
d68 1
a68 1
winCloseScreenShadowDD (int nIndex, ScreenPtr pScreen);
d71 1
a71 1
winInitVisualsShadowDD (ScreenPtr pScreen);
d74 1
a74 1
winAdjustVideoModeShadowDD (ScreenPtr pScreen);
d77 1
a77 1
winBltExposedRegionsShadowDD (ScreenPtr pScreen);
d80 1
a80 1
winActivateAppShadowDD (ScreenPtr pScreen);
d83 1
a83 1
winRedrawScreenShadowDD (ScreenPtr pScreen);
d86 1
a86 1
winRealizeInstalledPaletteShadowDD (ScreenPtr pScreen);
d89 1
a89 1
winInstallColormapShadowDD (ColormapPtr pColormap);
d92 1
a92 3
winStoreColorsShadowDD (ColormapPtr pmap, 
			int ndef,
			xColorItem *pdefs);
d95 1
a95 1
winCreateColormapShadowDD (ColormapPtr pColormap);
d98 1
a98 1
winDestroyColormapShadowDD (ColormapPtr pColormap);
d101 1
a101 1
winCreatePrimarySurfaceShadowDD (ScreenPtr pScreen);
d104 1
a104 2
winReleasePrimarySurfaceShadowDD (ScreenPtr pScreen);

d113 1
a113 1
winCreatePrimarySurfaceShadowDD (ScreenPtr pScreen)
d115 17
a131 20
  winScreenPriv(pScreen);
  HRESULT		ddrval = DD_OK;
  DDSURFACEDESC		ddsd;

  /* Describe the primary surface */
  ZeroMemory (&ddsd, sizeof (ddsd));
  ddsd.dwSize = sizeof (ddsd);
  ddsd.dwFlags = DDSD_CAPS;
  ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE;
  
  /* Create the primary surface */
  ddrval = IDirectDraw2_CreateSurface (pScreenPriv->pdd2,
				       &ddsd,
				       &pScreenPriv->pddsPrimary,
				       NULL);
  if (FAILED (ddrval))
    {
      ErrorF ("winCreatePrimarySurfaceShadowDD - Could not create primary "
	      "surface: %08x\n", (unsigned int) ddrval);
      return FALSE;
d133 1
a133 1
  
d135 1
a135 1
  winDebug ("winCreatePrimarySurfaceShadowDD - Created primary surface\n");
d138 10
a147 12
  /*
   * Attach a clipper to the primary surface that will clip our blits to our
   * display window.
   */
  ddrval = IDirectDrawSurface2_SetClipper (pScreenPriv->pddsPrimary,
					   pScreenPriv->pddcPrimary);
  if (FAILED (ddrval))
    {
      ErrorF ("winCreatePrimarySurfaceShadowDD - Primary attach clipper "
	      "failed: %08x\n",
	      (unsigned int) ddrval);
      return FALSE;
d151 2
a152 2
  winDebug ("winCreatePrimarySurfaceShadowDD - Attached clipper to "
	  "primary surface\n");
d155 2
a156 2
  /* Everything was correct */
  return TRUE;
a158 1

d165 1
a165 1
winReleasePrimarySurfaceShadowDD (ScreenPtr pScreen)
d167 1
a167 1
  winScreenPriv(pScreen);
d169 1
a169 1
  ErrorF ("winReleasePrimarySurfaceShadowDD - Hello\n");
d171 7
a177 9
  /* Release the primary surface and clipper, if they exist */
  if (pScreenPriv->pddsPrimary)
    {
      /*
       * Detach the clipper from the primary surface.
       * NOTE: We do this explicity for clarity.  The Clipper is not released.
       */
      IDirectDrawSurface2_SetClipper (pScreenPriv->pddsPrimary,
				      NULL);
d179 1
a179 1
      ErrorF ("winReleasePrimarySurfaceShadowDD - Detached clipper\n");
d181 3
a183 3
      /* Release the primary surface */
      IDirectDrawSurface2_Release (pScreenPriv->pddsPrimary);
      pScreenPriv->pddsPrimary = NULL;
d186 1
a186 1
  ErrorF ("winReleasePrimarySurfaceShadowDD - Released primary surface\n");
d188 1
a188 1
  return TRUE;
a190 1

d200 1
a200 1
winAllocateFBShadowDD (ScreenPtr pScreen)
d202 5
a206 5
  winScreenPriv(pScreen);
  winScreenInfo		*pScreenInfo = pScreenPriv->pScreenInfo;  
  HRESULT		ddrval = DD_OK;
  DDSURFACEDESC		ddsd;
  DDSURFACEDESC		*pddsdShadow = NULL;
d209 1
a209 1
  winDebug ("winAllocateFBShadowDD\n");
d212 7
a218 9
  /* Create a clipper */
  ddrval = (*g_fpDirectDrawCreateClipper) (0,
					   &pScreenPriv->pddcPrimary,
					   NULL);
  if (FAILED (ddrval))
    {
      ErrorF ("winAllocateFBShadowDD - Could not create clipper: %08x\n",
	      (unsigned int) ddrval);
      return FALSE;
d222 1
a222 1
  winDebug ("winAllocateFBShadowDD - Created a clipper\n");
d225 7
a231 10
  /* Attach the clipper to our display window */
  ddrval = IDirectDrawClipper_SetHWnd (pScreenPriv->pddcPrimary,
				       0,
				       pScreenPriv->hwndScreen);
  if (FAILED (ddrval))
    {
      ErrorF ("winAllocateFBShadowDD - Clipper not attached to "
	      "window: %08x\n",
	      (unsigned int) ddrval);
      return FALSE;
d235 1
a235 1
  winDebug ("winAllocateFBShadowDD - Attached clipper to window\n");
d238 6
a243 7
  /* Create a DirectDraw object, store the address at lpdd */
  ddrval = (*g_fpDirectDrawCreate) (NULL, &pScreenPriv->pdd, NULL);
  if (FAILED (ddrval))
    {
      ErrorF ("winAllocateFBShadowDD - Could not start DirectDraw: %08x\n",
	      (unsigned int) ddrval);
      return FALSE;
d247 1
a247 1
  winDebug ("winAllocateFBShadowDD () - Created and initialized DD\n");
d250 148
a397 168
  /* Get a DirectDraw2 interface pointer */
  ddrval = IDirectDraw_QueryInterface (pScreenPriv->pdd,
				       &IID_IDirectDraw2,
				       (LPVOID*) &pScreenPriv->pdd2);
  if (FAILED (ddrval))
    {
      ErrorF ("winAllocateFBShadowDD - Failed DD2 query: %08x\n",
	      (unsigned int) ddrval);
      return FALSE;
    }

  /* Are we full screen? */
  if (pScreenInfo->fFullScreen)
    {
      DDSURFACEDESC	ddsdCurrent;
      DWORD		dwRefreshRateCurrent = 0;
      HDC		hdc = NULL;

      /* Set the cooperative level to full screen */
      ddrval = IDirectDraw2_SetCooperativeLevel (pScreenPriv->pdd2,
						 pScreenPriv->hwndScreen,
						 DDSCL_EXCLUSIVE
						 | DDSCL_FULLSCREEN);
      if (FAILED (ddrval))
	{
	  ErrorF ("winAllocateFBShadowDD - Could not set "
		  "cooperative level: %08x\n",
		  (unsigned int) ddrval);
	  return FALSE;
	}

      /*
       * We only need to get the current refresh rate for comparison
       * if a refresh rate has been passed on the command line.
       */
      if (pScreenInfo->dwRefreshRate != 0)
	{
	  ZeroMemory (&ddsdCurrent, sizeof (ddsdCurrent));
	  ddsdCurrent.dwSize = sizeof (ddsdCurrent);
	  
	  /* Get information about current display settings */
	  ddrval = IDirectDraw2_GetDisplayMode (pScreenPriv->pdd2,
						&ddsdCurrent);
	  if (FAILED (ddrval))
	    {
	      ErrorF ("winAllocateFBShadowDD - Could not get current "
		      "refresh rate: %08x.  Continuing.\n",
		      (unsigned int) ddrval);
	      dwRefreshRateCurrent = 0;
	    }
	  else
	    {
	      /* Grab the current refresh rate */
	      dwRefreshRateCurrent = ddsdCurrent.u2.dwRefreshRate;
	    }
	}

      /* Clean up the refresh rate */
      if (dwRefreshRateCurrent == pScreenInfo->dwRefreshRate)
	{
	  /*
	   * Refresh rate is non-specified or equal to current.
	   */
	  pScreenInfo->dwRefreshRate = 0;
	}

      /* Grab a device context for the screen */
      hdc = GetDC (NULL);
      if (hdc == NULL)
	{
	  ErrorF ("winAllocateFBShadowDD - GetDC () failed\n");
	  return FALSE;
	}

      /* Only change the video mode when different than current mode */
      if (!pScreenInfo->fMultipleMonitors
	  && (pScreenInfo->dwWidth != GetSystemMetrics (SM_CXSCREEN)
	      || pScreenInfo->dwHeight != GetSystemMetrics (SM_CYSCREEN)
	      || pScreenInfo->dwBPP != GetDeviceCaps (hdc, BITSPIXEL)
	      || pScreenInfo->dwRefreshRate != 0))
	{
	  ErrorF ("winAllocateFBShadowDD - Changing video mode\n");

	  /* Change the video mode to the mode requested, and use the driver default refresh rate on failure */
	  ddrval = IDirectDraw2_SetDisplayMode (pScreenPriv->pdd2,
						pScreenInfo->dwWidth,
						pScreenInfo->dwHeight,
						pScreenInfo->dwBPP,
						pScreenInfo->dwRefreshRate,
						0);
	  if (FAILED (ddrval))
	    {
	      ErrorF ("winAllocateFBShadowDD - Could not set "\
		      "full screen display mode: %08x\n",
		      (unsigned int) ddrval);
	      ErrorF ("winAllocateFBShadowDD - Using default driver refresh rate\n");
	      ddrval = IDirectDraw2_SetDisplayMode (pScreenPriv->pdd2,
						    pScreenInfo->dwWidth,
						    pScreenInfo->dwHeight,
						    pScreenInfo->dwBPP,
						    0,
						    0);
	      if (FAILED(ddrval))
		{
			ErrorF ("winAllocateFBShadowDD - Could not set default refresh rate "
				"full screen display mode: %08x\n",
				(unsigned int) ddrval);
			return FALSE;
		}
	    }
	}
      else
	{
	  ErrorF ("winAllocateFBShadowDD - Not changing video mode\n");
	}

      /* Release our DC */
      ReleaseDC (NULL, hdc);
      hdc = NULL;
    }
  else
    {
      /* Set the cooperative level for windowed mode */
      ddrval = IDirectDraw2_SetCooperativeLevel (pScreenPriv->pdd2,
						 pScreenPriv->hwndScreen,
						 DDSCL_NORMAL);
      if (FAILED (ddrval))
	{
	  ErrorF ("winAllocateFBShadowDD - Could not set "\
		  "cooperative level: %08x\n",
		  (unsigned int) ddrval);
	  return FALSE;
	}
    }

  /* Create the primary surface */
  if (!winCreatePrimarySurfaceShadowDD (pScreen))
    {
      ErrorF ("winAllocateFBShadowDD - winCreatePrimarySurfaceShadowDD "
	      "failed\n");
      return FALSE;
    }

  /* Describe the shadow surface to be created */
  /* NOTE: Do not use a DDSCAPS_VIDEOMEMORY surface,
   * as drawing, locking, and unlocking take forever
   * with video memory surfaces.  In addition,
   * video memory is a somewhat scarce resource,
   * so you shouldn't be allocating video memory when
   * you have the option of using system memory instead.
   */
  ZeroMemory (&ddsd, sizeof (ddsd));
  ddsd.dwSize = sizeof (ddsd);
  ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH;
  ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN | DDSCAPS_SYSTEMMEMORY;
  ddsd.dwHeight = pScreenInfo->dwHeight;
  ddsd.dwWidth = pScreenInfo->dwWidth;

  /* Create the shadow surface */
  ddrval = IDirectDraw2_CreateSurface (pScreenPriv->pdd2,
				       &ddsd,
				       &pScreenPriv->pddsShadow,
				       NULL);
  if (FAILED (ddrval))
    {
      ErrorF ("winAllocateFBShadowDD - Could not create shadow "\
	      "surface: %08x\n", (unsigned int) ddrval);
      return FALSE;
d399 1
a399 1
  
d401 1
a401 1
  winDebug ("winAllocateFBShadowDD - Created shadow\n");
d404 6
a409 7
  /* Allocate a DD surface description for our screen privates */
  pddsdShadow = pScreenPriv->pddsdShadow = malloc (sizeof (DDSURFACEDESC));
  if (pddsdShadow == NULL)
    {
      ErrorF ("winAllocateFBShadowDD - Could not allocate surface "\
	      "description memory\n");
      return FALSE;
d411 2
a412 2
  ZeroMemory (pddsdShadow, sizeof (*pddsdShadow));
  pddsdShadow->dwSize = sizeof (*pddsdShadow);
d415 1
a415 1
  winDebug ("winAllocateFBShadowDD - Locking shadow\n");
d418 7
a424 11
  /* Lock the shadow surface */
  ddrval = IDirectDrawSurface2_Lock (pScreenPriv->pddsShadow,
				     NULL,
				     pddsdShadow,
				     DDLOCK_WAIT,
				     NULL);
  if (FAILED (ddrval) || pddsdShadow->lpSurface == NULL)
    {
      ErrorF ("winAllocateFBShadowDD - Could not lock shadow "\
	      "surface: %08x\n", (unsigned int) ddrval);
      return FALSE;
d428 1
a428 1
  winDebug ("winAllocateFBShadowDD - Locked shadow\n");
d431 17
a447 18
  /* We don't know how to deal with anything other than RGB */
  if (!(pddsdShadow->ddpfPixelFormat.dwFlags & DDPF_RGB))
    {
      ErrorF ("winAllocateFBShadowDD - Color format other than RGB\n");
      return FALSE;
    }

  /* Grab the pitch from the surface desc */
  pScreenInfo->dwStride = (pddsdShadow->u1.lPitch * 8)
    / pScreenInfo->dwBPP;

  /* Save the pointer to our surface memory */
  pScreenInfo->pfb = pddsdShadow->lpSurface;
  
  /* Grab the color depth and masks from the surface description */
  pScreenPriv->dwRedMask = pddsdShadow->ddpfPixelFormat.u2.dwRBitMask;
  pScreenPriv->dwGreenMask = pddsdShadow->ddpfPixelFormat.u3.dwGBitMask;
  pScreenPriv->dwBlueMask = pddsdShadow->ddpfPixelFormat.u4.dwBBitMask;
d450 1
a450 1
  winDebug ("winAllocateFBShadowDD - Returning\n");
d453 1
a453 1
  return TRUE;
d457 1
a457 1
winFreeFBShadowDD (ScreenPtr pScreen)
d459 2
a460 2
  winScreenPriv(pScreen);
  winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;
d462 5
a466 6
  /* Free the shadow surface, if there is one */
  if (pScreenPriv->pddsShadow)
    {
      IDirectDrawSurface2_Unlock (pScreenPriv->pddsShadow, NULL);
      IDirectDrawSurface2_Release (pScreenPriv->pddsShadow);
      pScreenPriv->pddsShadow = NULL;
d469 2
a470 2
  /* Detach the clipper from the primary surface and release the primary surface, if there is one */
  winReleasePrimarySurfaceShadowDD(pScreen);
d472 4
a475 5
  /* Release the clipper object */
  if (pScreenPriv->pddcPrimary)
    {
      IDirectDrawClipper_Release (pScreenPriv->pddcPrimary);
      pScreenPriv->pddcPrimary = NULL;
d478 5
a482 6
  /* Free the DirectDraw2 object, if there is one */
  if (pScreenPriv->pdd2)
    {
      IDirectDraw2_RestoreDisplayMode (pScreenPriv->pdd2);
      IDirectDraw2_Release (pScreenPriv->pdd2);
      pScreenPriv->pdd2 = NULL;
d485 4
a488 5
  /* Free the DirectDraw object, if there is one */
  if (pScreenPriv->pdd)
    {
      IDirectDraw_Release (pScreenPriv->pdd);
      pScreenPriv->pdd = NULL;
d491 2
a492 2
  /* Invalidate the ScreenInfo's fb pointer */
  pScreenInfo->pfb = NULL;
d500 1
a500 2
winShadowUpdateDD (ScreenPtr pScreen, 
		   shadowBufPtr pBuf)
d502 125
a626 137
  winScreenPriv(pScreen);
  winScreenInfo		*pScreenInfo = pScreenPriv->pScreenInfo;
  RegionPtr		damage = shadowDamage(pBuf);
  HRESULT		ddrval = DD_OK;
  RECT			rcDest, rcSrc;
  POINT			ptOrigin;
  DWORD			dwBox = RegionNumRects (damage);
  BoxPtr		pBox = RegionRects (damage);
  HRGN			hrgnTemp = NULL, hrgnCombined = NULL;

  /*
   * Return immediately if the app is not active
   * and we are fullscreen, or if we have a bad display depth
   */
  if ((!pScreenPriv->fActive && pScreenInfo->fFullScreen)
      || pScreenPriv->fBadDepth) return;

  /* Return immediately if we didn't get needed surfaces */
  if (!pScreenPriv->pddsPrimary || !pScreenPriv->pddsShadow)
    return;

  /* Get the origin of the window in the screen coords */
  ptOrigin.x = pScreenInfo->dwXOffset;
  ptOrigin.y = pScreenInfo->dwYOffset;
  MapWindowPoints (pScreenPriv->hwndScreen,
		   HWND_DESKTOP,
		   (LPPOINT)&ptOrigin, 1);

  /* Unlock the shadow surface, so we can blit */
  ddrval = IDirectDrawSurface2_Unlock (pScreenPriv->pddsShadow, NULL);
  if (FAILED (ddrval))
    {
      ErrorF ("winShadowUpdateDD - Unlock failed\n");
      return;
    }

  /*
   * Handle small regions with multiple blits,
   * handle large regions by creating a clipping region and 
   * doing a single blit constrained to that clipping region.
   */
  if (pScreenInfo->dwClipUpdatesNBoxes == 0
      || dwBox < pScreenInfo->dwClipUpdatesNBoxes)
    {
      /* Loop through all boxes in the damaged region */
      while (dwBox--)
	{
	  /* Assign damage box to source rectangle */
	  rcSrc.left = pBox->x1;
	  rcSrc.top = pBox->y1;
	  rcSrc.right = pBox->x2;
	  rcSrc.bottom = pBox->y2;
	  
	  /* Calculate destination rectange */
	  rcDest.left = ptOrigin.x + rcSrc.left;
	  rcDest.top = ptOrigin.y + rcSrc.top;
	  rcDest.right = ptOrigin.x + rcSrc.right;
	  rcDest.bottom = ptOrigin.y + rcSrc.bottom;
	  
	  /* Blit the damaged areas */
	  ddrval = IDirectDrawSurface2_Blt (pScreenPriv->pddsPrimary,
					    &rcDest,
					    pScreenPriv->pddsShadow,
					    &rcSrc,
					    DDBLT_WAIT,
					    NULL);
	  
	  /* Get a pointer to the next box */
	  ++pBox;
	}
    }
  else
    {
      BoxPtr		pBoxExtents = RegionExtents(damage);

      /* Compute a GDI region from the damaged region */
      hrgnCombined = CreateRectRgn (pBox->x1, pBox->y1, pBox->x2, pBox->y2);
      dwBox--;
      pBox++;
      while (dwBox--)
	{
	  hrgnTemp = CreateRectRgn (pBox->x1, pBox->y1, pBox->x2, pBox->y2);
	  CombineRgn (hrgnCombined, hrgnCombined, hrgnTemp, RGN_OR);
	  DeleteObject (hrgnTemp);
	  pBox++;
	}  

      /* Install the GDI region as a clipping region */
      SelectClipRgn (pScreenPriv->hdcScreen, hrgnCombined);
      DeleteObject (hrgnCombined);
      hrgnCombined = NULL;

      /* Calculating a bounding box for the source is easy */
      rcSrc.left = pBoxExtents->x1;
      rcSrc.top = pBoxExtents->y1;
      rcSrc.right = pBoxExtents->x2;
      rcSrc.bottom = pBoxExtents->y2;

      /* Calculating a bounding box for the destination is trickier */
      rcDest.left = ptOrigin.x + rcSrc.left;
      rcDest.top = ptOrigin.y + rcSrc.top;
      rcDest.right = ptOrigin.x + rcSrc.right;
      rcDest.bottom = ptOrigin.y + rcSrc.bottom;
      
      /* Our Blt should be clipped to the invalidated region */
      ddrval = IDirectDrawSurface2_Blt (pScreenPriv->pddsPrimary,
					&rcDest,
					pScreenPriv->pddsShadow,
					&rcSrc,
					DDBLT_WAIT,
					NULL);

      /* Reset the clip region */
      SelectClipRgn (pScreenPriv->hdcScreen, NULL);
    }

  /* Relock the shadow surface */
  ddrval = IDirectDrawSurface2_Lock (pScreenPriv->pddsShadow,
				     NULL,
				     pScreenPriv->pddsdShadow,
				     DDLOCK_WAIT,
				     NULL);
  if (FAILED (ddrval))
    {
      ErrorF ("winShadowUpdateDD - Lock failed\n");
      return;
    }

  /* Has our memory pointer changed? */
  if (pScreenInfo->pfb != pScreenPriv->pddsdShadow->lpSurface)
    {
      ErrorF ("winShadowUpdateDD - Memory location of the shadow "
	      "surface has changed, trying to update the root window "
	      "pixmap header to point to the new address.  If you get "
	      "this message and "PROJECT_NAME" freezes or crashes "
	      "after this message then send a problem report and your "
	      "%s file to " BUILDERADDR "\n", g_pszLogFile);
d628 2
a629 2
      /* Location of shadow framebuffer has changed */
      winUpdateFBPointer(pScreen, pScreenPriv->pddsdShadow->lpSurface);
d634 1
a634 1
winInitScreenShadowDD (ScreenPtr pScreen)
d636 1
a636 1
  winScreenPriv(pScreen);
d638 2
a639 2
  /* Get a device context for the screen  */
  pScreenPriv->hdcScreen = GetDC (pScreenPriv->hwndScreen);
d641 1
a641 1
  return winAllocateFBShadowDD(pScreen);
d651 1
a651 1
winCloseScreenShadowDD (int nIndex, ScreenPtr pScreen)
d653 4
a656 4
  winScreenPriv(pScreen);
  winScreenInfo		*pScreenInfo = pScreenPriv->pScreenInfo;
  Bool			fReturn;
  
d658 1
a658 1
  winDebug ("winCloseScreenShadowDD - Freeing screen resources\n");
d661 31
a691 33
  /* Flag that the screen is closed */
  pScreenPriv->fClosed = TRUE;
  pScreenPriv->fActive = FALSE;

  /* Call the wrapped CloseScreen procedure */
  WIN_UNWRAP(CloseScreen);
  if (pScreen->CloseScreen)
    fReturn = (*pScreen->CloseScreen) (nIndex, pScreen);

  winFreeFBShadowDD(pScreen);

  /* Free the screen DC */
  ReleaseDC (pScreenPriv->hwndScreen, pScreenPriv->hdcScreen);

  /* Delete the window property */
  RemoveProp (pScreenPriv->hwndScreen, WIN_SCR_PROP);

  /* Delete tray icon, if we have one */
  if (!pScreenInfo->fNoTrayIcon)
    winDeleteNotifyIcon (pScreenPriv);

  /* Free the exit confirmation dialog box, if it exists */
  if (g_hDlgExit != NULL)
    {
      DestroyWindow (g_hDlgExit);
      g_hDlgExit = NULL;
    }

  /* Kill our window */
  if (pScreenPriv->hwndScreen)
    {
      DestroyWindow (pScreenPriv->hwndScreen);
      pScreenPriv->hwndScreen = NULL;
d695 2
a696 2
  /* Destroy the thread startup mutex */
  pthread_mutex_destroy (&pScreenPriv->pmServerStarted);
d699 2
a700 2
  /* Kill our screeninfo's pointer to the screen */
  pScreenInfo->pScreen = NULL;
d702 2
a703 2
  /* Free the screen privates for this screen */
  free ((pointer) pScreenPriv);
d705 1
a705 1
  return fReturn;
a707 1

d717 1
a717 1
winInitVisualsShadowDD (ScreenPtr pScreen)
d719 29
a747 31
  winScreenPriv(pScreen);
  winScreenInfo		*pScreenInfo = pScreenPriv->pScreenInfo;
  DWORD			dwRedBits, dwGreenBits, dwBlueBits;

  /* Count the number of ones in each color mask */
  dwRedBits = winCountBits (pScreenPriv->dwRedMask);
  dwGreenBits = winCountBits (pScreenPriv->dwGreenMask);
  dwBlueBits = winCountBits (pScreenPriv->dwBlueMask);
  
  /* Store the maximum number of ones in a color mask as the bitsPerRGB */
  if (dwRedBits == 0 || dwGreenBits == 0 || dwBlueBits == 0)
    pScreenPriv->dwBitsPerRGB = 8;
  else if (dwRedBits > dwGreenBits && dwRedBits > dwBlueBits)
    pScreenPriv->dwBitsPerRGB = dwRedBits;
  else if (dwGreenBits > dwRedBits && dwGreenBits > dwBlueBits)
    pScreenPriv->dwBitsPerRGB = dwGreenBits;
  else
    pScreenPriv->dwBitsPerRGB = dwBlueBits;
  
  ErrorF ("winInitVisualsShadowDD - Masks %08x %08x %08x BPRGB %d d %d "
	  "bpp %d\n",
	  (unsigned int) pScreenPriv->dwRedMask,
	  (unsigned int) pScreenPriv->dwGreenMask,
	  (unsigned int) pScreenPriv->dwBlueMask,
	  (int) pScreenPriv->dwBitsPerRGB,
	  (int) pScreenInfo->dwDepth,
	  (int) pScreenInfo->dwBPP);

  /* Create a single visual according to the Windows screen depth */
  switch (pScreenInfo->dwDepth)
    {
d751 12
a762 13
      /* Create the real visual */
      if (!miSetVisualTypesAndMasks (pScreenInfo->dwDepth,
				     TrueColorMask,
				     pScreenPriv->dwBitsPerRGB,
				     TrueColor,
				     pScreenPriv->dwRedMask,
				     pScreenPriv->dwGreenMask,
				     pScreenPriv->dwBlueMask))
	{
	  ErrorF ("winInitVisualsShadowDD - miSetVisualTypesAndMasks "
		  "failed for TrueColor\n");
	  return FALSE;
	}
d765 2
a766 2
      if (!pScreenInfo->fEmulatePseudo)
	break;
d768 6
a773 13
      /* Setup a pseudocolor visual */
      if (!miSetVisualTypesAndMasks (8,
				     PseudoColorMask,
				     8,
				     -1,
				     0,
				     0,
				     0))
	{
	  ErrorF ("winInitVisualsShadowDD - miSetVisualTypesAndMasks "
		  "failed for PseudoColor\n");
	  return FALSE;
	}
d775 1
a775 1
      break;
d778 14
a791 15
      if (!miSetVisualTypesAndMasks (pScreenInfo->dwDepth,
				     pScreenInfo->fFullScreen 
				     ? PseudoColorMask : StaticColorMask,
				     pScreenPriv->dwBitsPerRGB,
				     pScreenInfo->fFullScreen 
				     ? PseudoColor : StaticColor,
				     pScreenPriv->dwRedMask,
				     pScreenPriv->dwGreenMask,
				     pScreenPriv->dwBlueMask))
	{
	  ErrorF ("winInitVisualsShadowDD - miSetVisualTypesAndMasks "
		  "failed\n");
	  return FALSE;
	}
      break;
d794 2
a795 2
      ErrorF ("winInitVisualsShadowDD - Unknown screen depth\n");
      return FALSE;
d799 1
a799 1
  winDebug ("winInitVisualsShadowDD - Returning\n");
d802 1
a802 1
  return TRUE;
a804 1

d810 1
a810 1
winAdjustVideoModeShadowDD (ScreenPtr pScreen)
d812 24
a835 27
  winScreenPriv(pScreen);
  winScreenInfo		*pScreenInfo = pScreenPriv->pScreenInfo;
  HDC			hdc = NULL;
  DWORD			dwBPP;

  /* We're in serious trouble if we can't get a DC */
  hdc = GetDC (NULL);
  if (hdc == NULL)
    {
      ErrorF ("winAdjustVideoModeShadowDD - GetDC () failed\n");
      return FALSE;
    }

  /* Query GDI for current display depth */
  dwBPP = GetDeviceCaps (hdc, BITSPIXEL);

  /* DirectDraw can only change the depth in fullscreen mode */
  if (!(pScreenInfo->fFullScreen &&
        (pScreenInfo->dwBPP != WIN_DEFAULT_BPP)))
    {
      /* Otherwise, We'll use GDI's depth */
      pScreenInfo->dwBPP = dwBPP;
    }

  /* Release our DC */
  ReleaseDC (NULL, hdc);
  return TRUE;
a837 1

d843 1
a843 1
winBltExposedRegionsShadowDD (ScreenPtr pScreen)
d845 114
a958 128
  winScreenPriv(pScreen);
  winScreenInfo		*pScreenInfo = pScreenPriv->pScreenInfo;
  RECT			rcSrc, rcDest;
  POINT			ptOrigin;
  HDC			hdcUpdate = NULL;
  PAINTSTRUCT		ps;
  HRESULT		ddrval = DD_OK;
  Bool			fReturn = TRUE;
  Bool			fLocked = TRUE;
  int			i;

  /* BeginPaint gives us an hdc that clips to the invalidated region */
  hdcUpdate = BeginPaint (pScreenPriv->hwndScreen, &ps);
  if (hdcUpdate == NULL)
    {
      ErrorF ("winBltExposedRegionsShadowDD - BeginPaint () returned "
	      "a NULL device context handle.  Aborting blit attempt.\n");
      return FALSE;
    }
  
  /* Unlock the shadow surface, so we can blit */
  ddrval = IDirectDrawSurface2_Unlock (pScreenPriv->pddsShadow, NULL);
  if (FAILED (ddrval))
    {
      fReturn = FALSE;
      goto winBltExposedRegionsShadowDD_Exit;
    }
  else
    {
      /* Flag that we have unlocked the shadow surface */
      fLocked = FALSE;
    }

  /* Get the origin of the window in the screen coords */
  ptOrigin.x = pScreenInfo->dwXOffset;
  ptOrigin.y = pScreenInfo->dwYOffset;

  MapWindowPoints (pScreenPriv->hwndScreen,
		   HWND_DESKTOP,
		   (LPPOINT)&ptOrigin, 1);
  rcDest.left = ptOrigin.x;
  rcDest.right = ptOrigin.x + pScreenInfo->dwWidth;
  rcDest.top = ptOrigin.y;
  rcDest.bottom = ptOrigin.y + pScreenInfo->dwHeight;

  /* Source can be enter shadow surface, as Blt should clip */
  rcSrc.left = 0;
  rcSrc.top = 0;
  rcSrc.right = pScreenInfo->dwWidth;
  rcSrc.bottom = pScreenInfo->dwHeight;

  /* Try to regain the primary surface and blit again if we've lost it */
  for (i = 0; i <= WIN_REGAIN_SURFACE_RETRIES; ++i)
    {
      /* Our Blt should be clipped to the invalidated region */
      ddrval = IDirectDrawSurface2_Blt (pScreenPriv->pddsPrimary,
					&rcDest,
					pScreenPriv->pddsShadow,
					&rcSrc,
					DDBLT_WAIT,
					NULL);
      if (ddrval == DDERR_SURFACELOST)
	{
	  /* Surface was lost */
	  ErrorF ("winBltExposedRegionsShadowDD - IDirectDrawSurface2_Blt "
		  "reported that the primary surface was lost, "
		  "trying to restore, retry: %d\n", i + 1);

	  /* Try to restore the surface, once */
	  ddrval = IDirectDrawSurface2_Restore (pScreenPriv->pddsPrimary);
	  ErrorF ("winBltExposedRegionsShadowDD - "
		  "IDirectDrawSurface2_Restore returned: ");
	  if (ddrval == DD_OK)
	    ErrorF ("DD_OK\n");
	  else if (ddrval == DDERR_WRONGMODE)
	    ErrorF ("DDERR_WRONGMODE\n");
	  else if (ddrval == DDERR_INCOMPATIBLEPRIMARY)
	    ErrorF ("DDERR_INCOMPATIBLEPRIMARY\n");
	  else if (ddrval == DDERR_UNSUPPORTED)
	    ErrorF ("DDERR_UNSUPPORTED\n");
	  else if (ddrval == DDERR_INVALIDPARAMS)
	    ErrorF ("DDERR_INVALIDPARAMS\n");
	  else if (ddrval == DDERR_INVALIDOBJECT)
	    ErrorF ("DDERR_INVALIDOBJECT\n");
	  else
	    ErrorF ("unknown error: %08x\n", (unsigned int) ddrval);

	  /* Loop around to try the blit one more time */
	  continue;
	}
      else if (FAILED (ddrval))
	{
	  fReturn = FALSE;
	  ErrorF ("winBltExposedRegionsShadowDD - IDirectDrawSurface2_Blt "
		  "failed, but surface not lost: %08x %d\n",
		  (unsigned int) ddrval, (int) ddrval);
	  goto winBltExposedRegionsShadowDD_Exit;
	}
      else
	{
	  /* Success, stop looping */
	  break;
	}
    }

  /* Relock the shadow surface */
  ddrval = IDirectDrawSurface2_Lock (pScreenPriv->pddsShadow,
				     NULL,
				     pScreenPriv->pddsdShadow,
				     DDLOCK_WAIT,
				     NULL);
  if (FAILED (ddrval))
    {
      fReturn = FALSE;
      ErrorF ("winBltExposedRegionsShadowDD - IDirectDrawSurface2_Lock "
	      "failed\n");
      goto winBltExposedRegionsShadowDD_Exit;
    }
  else
    {
      /* Indicate that we have relocked the shadow surface */
      fLocked = TRUE;
    }

  /* Has our memory pointer changed? */
  if (pScreenInfo->pfb != pScreenPriv->pddsdShadow->lpSurface)
    winUpdateFBPointer (pScreen,
			pScreenPriv->pddsdShadow->lpSurface);
d961 18
a978 22
  /* EndPaint frees the DC */
  if (hdcUpdate != NULL)
    EndPaint (pScreenPriv->hwndScreen, &ps);

  /*
   * Relock the surface if it is not locked.  We don't care if locking fails,
   * as it will cause the server to shutdown within a few more operations.
   */
  if (!fLocked)
    {
      IDirectDrawSurface2_Lock (pScreenPriv->pddsShadow,
				NULL,
				pScreenPriv->pddsdShadow,
				DDLOCK_WAIT,
				NULL);

      /* Has our memory pointer changed? */
      if (pScreenInfo->pfb != pScreenPriv->pddsdShadow->lpSurface)
	winUpdateFBPointer (pScreen,
			    pScreenPriv->pddsdShadow->lpSurface);
      
      fLocked = TRUE;
d980 1
a980 1
  return fReturn;
a982 1

d988 1
a988 1
winActivateAppShadowDD (ScreenPtr pScreen)
d990 1
a990 1
  winScreenPriv(pScreen);
d992 9
a1000 11
  /*
   * Do we have a surface?
   * Are we active?
   * Are we fullscreen?
   */
  if (pScreenPriv != NULL
      && pScreenPriv->pddsPrimary != NULL
      && pScreenPriv->fActive)
    {
      /* Primary surface was lost, restore it */
      IDirectDrawSurface2_Restore (pScreenPriv->pddsPrimary);
d1003 1
a1003 1
  return TRUE;
a1005 1

d1011 1
a1011 1
winRedrawScreenShadowDD (ScreenPtr pScreen)
d1013 30
a1042 35
  winScreenPriv(pScreen);
  winScreenInfo		*pScreenInfo = pScreenPriv->pScreenInfo;
  HRESULT		ddrval = DD_OK;
  RECT			rcSrc, rcDest;
  POINT			ptOrigin;

  /* Get the origin of the window in the screen coords */
  ptOrigin.x = pScreenInfo->dwXOffset;
  ptOrigin.y = pScreenInfo->dwYOffset;
  MapWindowPoints (pScreenPriv->hwndScreen,
		   HWND_DESKTOP,
		   (LPPOINT)&ptOrigin, 1);
  rcDest.left = ptOrigin.x;
  rcDest.right = ptOrigin.x + pScreenInfo->dwWidth;
  rcDest.top = ptOrigin.y;
  rcDest.bottom = ptOrigin.y + pScreenInfo->dwHeight;

  /* Source can be entire shadow surface, as Blt should clip for us */
  rcSrc.left = 0;
  rcSrc.top = 0;
  rcSrc.right = pScreenInfo->dwWidth;
  rcSrc.bottom = pScreenInfo->dwHeight;

  /* Redraw the whole window, to take account for the new colors */
  ddrval = IDirectDrawSurface2_Blt (pScreenPriv->pddsPrimary,
				    &rcDest,
				    pScreenPriv->pddsShadow,
				    &rcSrc,
				    DDBLT_WAIT,
				    NULL);
  if (FAILED (ddrval))
    {
      ErrorF ("winRedrawScreenShadowDD - IDirectDrawSurface_Blt () "
	      "failed: %08x\n",
	      (unsigned int) ddrval);
d1045 1
a1045 1
  return TRUE;
a1047 1

d1053 1
a1053 1
winRealizeInstalledPaletteShadowDD (ScreenPtr pScreen)
d1055 1
a1055 1
  return TRUE;
a1057 1

d1063 1
a1063 1
winInstallColormapShadowDD (ColormapPtr pColormap)
d1065 13
a1077 13
  ScreenPtr		pScreen = pColormap->pScreen;
  winScreenPriv(pScreen);
  winCmapPriv(pColormap);
  HRESULT		ddrval = DD_OK;

  /* Install the DirectDraw palette on the primary surface */
  ddrval = IDirectDrawSurface2_SetPalette (pScreenPriv->pddsPrimary,
					   pCmapPriv->lpDDPalette);
  if (FAILED (ddrval))
    {
      ErrorF ("winInstallColormapShadowDD - Failed installing the "
	      "DirectDraw palette.\n");
      return FALSE;
d1080 2
a1081 2
  /* Save a pointer to the newly installed colormap */
  pScreenPriv->pcmapInstalled = pColormap;
d1083 1
a1083 1
  return TRUE;
a1085 1

d1091 1
a1091 3
winStoreColorsShadowDD (ColormapPtr pColormap, 
			int ndef,
			xColorItem *pdefs)
d1093 27
a1119 29
  ScreenPtr		pScreen = pColormap->pScreen;
  winScreenPriv(pScreen);
  winCmapPriv(pColormap);
  ColormapPtr		curpmap = pScreenPriv->pcmapInstalled;
  HRESULT		ddrval = DD_OK;
  
  /* Put the X colormap entries into the Windows logical palette */
  ddrval = IDirectDrawPalette_SetEntries (pCmapPriv->lpDDPalette,
					  0,
					  pdefs[0].pixel,
					  ndef,
					  pCmapPriv->peColors 
					  + pdefs[0].pixel);
  if (FAILED (ddrval))
    {
      ErrorF ("winStoreColorsShadowDD - SetEntries () failed\n");
      return FALSE;
    }

  /* Don't install the DirectDraw palette if the colormap is not installed */
  if (pColormap != curpmap)
    {
      return TRUE;
    }

  if (!winInstallColormapShadowDD (pColormap))
    {
      ErrorF ("winStoreColorsShadowDD - Failed installing colormap\n");
      return FALSE;
d1122 1
a1122 1
  return TRUE;
a1124 1

d1130 1
a1130 1
winCreateColormapShadowDD (ColormapPtr pColormap)
d1132 14
a1145 15
  HRESULT		ddrval = DD_OK;
  ScreenPtr		pScreen = pColormap->pScreen;
  winScreenPriv(pScreen);
  winCmapPriv(pColormap);
  
  /* Create a DirectDraw palette */
  ddrval = IDirectDraw2_CreatePalette (pScreenPriv->pdd,
				       DDPCAPS_8BIT | DDPCAPS_ALLOW256,
				       pCmapPriv->peColors,
				       &pCmapPriv->lpDDPalette,
				       NULL);
  if (FAILED (ddrval))
    {
      ErrorF ("winCreateColormapShadowDD - CreatePalette failed\n");
      return FALSE;
d1148 1
a1148 1
  return TRUE;
a1150 1

d1156 1
a1156 1
winDestroyColormapShadowDD (ColormapPtr pColormap)
d1158 13
a1170 14
  winScreenPriv(pColormap->pScreen);
  winCmapPriv(pColormap);
  HRESULT		ddrval = DD_OK;

  /*
   * Is colormap to be destroyed the default?
   *
   * Non-default colormaps should have had winUninstallColormap
   * called on them before we get here.  The default colormap
   * will not have had winUninstallColormap called on it.  Thus,
   * we need to handle the default colormap in a special way.
   */
  if (pColormap->flags & IsDefault)
    {
d1172 2
a1173 2
      winDebug ("winDestroyColormapShadowDD - Destroying default "
	      "colormap\n");
a1174 25
      
      /*
       * FIXME: Walk the list of all screens, popping the default
       * palette out of each screen device context.
       */
      
      /* Pop the palette out of the primary surface */
      ddrval = IDirectDrawSurface2_SetPalette (pScreenPriv->pddsPrimary,
					       NULL);
      if (FAILED (ddrval))
	{
	  ErrorF ("winDestroyColormapShadowDD - Failed freeing the "
		  "default colormap DirectDraw palette.\n");
	  return FALSE;
	}

      /* Clear our private installed colormap pointer */
      pScreenPriv->pcmapInstalled = NULL;
    }
  
  /* Release the palette */
  IDirectDrawPalette_Release (pCmapPriv->lpDDPalette);
 
  /* Invalidate the colormap privates */
  pCmapPriv->lpDDPalette = NULL;
d1176 24
a1199 1
  return TRUE;
a1201 1

d1207 1
a1207 1
winSetEngineFunctionsShadowDD (ScreenPtr pScreen)
d1209 30
a1238 28
  winScreenPriv(pScreen);
  winScreenInfo		*pScreenInfo = pScreenPriv->pScreenInfo;
  
  /* Set our pointers */
  pScreenPriv->pwinAllocateFB = winAllocateFBShadowDD;
  pScreenPriv->pwinFreeFB = winFreeFBShadowDD;
  pScreenPriv->pwinShadowUpdate = winShadowUpdateDD;
  pScreenPriv->pwinInitScreen = winInitScreenShadowDD;
  pScreenPriv->pwinCloseScreen = winCloseScreenShadowDD;
  pScreenPriv->pwinInitVisuals = winInitVisualsShadowDD;
  pScreenPriv->pwinAdjustVideoMode = winAdjustVideoModeShadowDD;
  if (pScreenInfo->fFullScreen)
    pScreenPriv->pwinCreateBoundingWindow = winCreateBoundingWindowFullScreen;
  else
    pScreenPriv->pwinCreateBoundingWindow = winCreateBoundingWindowWindowed;
  pScreenPriv->pwinFinishScreenInit = winFinishScreenInitFB;
  pScreenPriv->pwinBltExposedRegions = winBltExposedRegionsShadowDD;
  pScreenPriv->pwinActivateApp = winActivateAppShadowDD;
  pScreenPriv->pwinRedrawScreen = winRedrawScreenShadowDD;
  pScreenPriv->pwinRealizeInstalledPalette
    = winRealizeInstalledPaletteShadowDD;
  pScreenPriv->pwinInstallColormap = winInstallColormapShadowDD;
  pScreenPriv->pwinStoreColors = winStoreColorsShadowDD;
  pScreenPriv->pwinCreateColormap = winCreateColormapShadowDD;
  pScreenPriv->pwinDestroyColormap = winDestroyColormapShadowDD;
  pScreenPriv->pwinHotKeyAltTab = (winHotKeyAltTabProcPtr) (void (*)(void))NoopDDA;
  pScreenPriv->pwinCreatePrimarySurface = winCreatePrimarySurfaceShadowDD;
  pScreenPriv->pwinReleasePrimarySurface = winReleasePrimarySurfaceShadowDD;
d1240 2
a1241 2
  pScreenPriv->pwinFinishCreateWindowsWindow =
    (winFinishCreateWindowsWindowProcPtr) (void (*)(void))NoopDDA;
d1244 1
a1244 1
  return TRUE;
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a40 7
 * External symbols
 */

extern HWND			g_hDlgExit;
extern const char *g_pszLogFile;

/*
d51 1
a51 1
 * FIXME: Headers are broken, IID_IDirectDraw4 has to be defined
a241 3
  /* Get a device context for the screen  */
  pScreenPriv->hdcScreen = GetDC (pScreenPriv->hwndScreen);

d503 42
d571 4
d693 1
a693 16
      pScreenInfo->pfb = pScreenPriv->pddsdShadow->lpSurface;
      
      /* Update the screen pixmap */
      if (!(*pScreen->ModifyPixmapHeader)(pScreen->devPrivate,
					  pScreen->width,
					  pScreen->height,
					  pScreen->rootDepth,
					  BitsPerPixel (pScreen->rootDepth),
					  PixmapBytePad (pScreenInfo->dwStride,
							 pScreenInfo->dwBPP),
					  pScreenInfo->pfb))
	{
	  ErrorF ("winShadowUpdateDD - Bits changed, could not "
		  "notify fb.\n");
	  return;
	}
d697 10
d731 4
a734 1
  fReturn = (*pScreen->CloseScreen) (nIndex, pScreen);
a741 42
  /* Free the shadow surface, if there is one */
  if (pScreenPriv->pddsShadow)
    {
      IDirectDrawSurface2_Unlock (pScreenPriv->pddsShadow, NULL);
      IDirectDrawSurface2_Release (pScreenPriv->pddsShadow);
      pScreenPriv->pddsShadow = NULL;
    }

  /* Detach the clipper from the primary surface and release the clipper. */
  if (pScreenPriv->pddcPrimary)
    {
      /* Detach the clipper */
      IDirectDrawSurface2_SetClipper (pScreenPriv->pddsPrimary,
				      NULL);

      /* Release the clipper object */
      IDirectDrawClipper_Release (pScreenPriv->pddcPrimary);
      pScreenPriv->pddcPrimary = NULL;
    }

  /* Release the primary surface, if there is one */
  if (pScreenPriv->pddsPrimary)
    {
      IDirectDrawSurface2_Release (pScreenPriv->pddsPrimary);
      pScreenPriv->pddsPrimary = NULL;
    }

  /* Free the DirectDraw2 object, if there is one */
  if (pScreenPriv->pdd2)
    {
      IDirectDraw2_RestoreDisplayMode (pScreenPriv->pdd2);
      IDirectDraw2_Release (pScreenPriv->pdd2);
      pScreenPriv->pdd2 = NULL;
    }

  /* Free the DirectDraw object, if there is one */
  if (pScreenPriv->pdd)
    {
      IDirectDraw_Release (pScreenPriv->pdd);
      pScreenPriv->pdd = NULL;
    }

d745 1
a745 1
  
a767 3
  /* Invalidate the ScreenInfo's fb pointer */
  pScreenInfo->pfb = NULL;

a819 1
#if defined(XFree86Server)
a851 32
#else /* XFree86Server */
      /* Create the real visual */
      if (!fbSetVisualTypesAndMasks (pScreenInfo->dwDepth,
				     TrueColorMask,
				     pScreenPriv->dwBitsPerRGB,
				     pScreenPriv->dwRedMask,
				     pScreenPriv->dwGreenMask,
				     pScreenPriv->dwBlueMask))
	{
	  ErrorF ("winInitVisualsShadowDD - fbSetVisualTypesAndMasks "
		  "failed for TrueColor\n");
	  return FALSE;
	}

#ifdef XWIN_EMULATEPSEUDO
      if (!pScreenInfo->fEmulatePseudo)
	break;

      /* Setup a pseudocolor visual */
      if (!fbSetVisualTypesAndMasks (8,
				     PseudoColorMask,
				     8,
				     0,
				     0,
				     0))
	{
	  ErrorF ("winInitVisualsShadowDD - fbSetVisualTypesAndMasks "
		  "failed for PseudoColor\n");
	  return FALSE;
	}
#endif
#endif /* XFree86Server */
a854 1
#if defined(XFree86Server)
a868 14
#else /* XFree86Server */
      if (!fbSetVisualTypesAndMasks (pScreenInfo->dwDepth,
				     pScreenInfo->fFullScreen 
				     ? PseudoColorMask : StaticColorMask,
				     pScreenPriv->dwBitsPerRGB,
				     pScreenPriv->dwRedMask,
				     pScreenPriv->dwGreenMask,
				     pScreenPriv->dwBlueMask))
	{
	  ErrorF ("winInitVisualsShadowDD - fbSetVisualTypesAndMasks "
		  "failed\n");
	  return FALSE;
	}
#endif /* XFree86Server */
d908 2
a909 1
  if (pScreenInfo->dwBPP == WIN_DEFAULT_BPP)
d911 1
a911 5
      /* No -depth parameter passed, let the user know the depth being used */
      ErrorF ("winAdjustVideoModeShadowDD - Using Windows display "
	      "depth of %d bits per pixel\n", (int) dwBPP);

      /* Use GDI's depth */
a913 28
  else if (pScreenInfo->fFullScreen
	   && pScreenInfo->dwBPP != dwBPP)
    {
      /* FullScreen, and GDI depth differs from -depth parameter */
      ErrorF ("winAdjustVideoModeShadowDD - FullScreen, using command line "
	      "bpp: %d\n", (int) pScreenInfo->dwBPP);
    }
  else if (dwBPP != pScreenInfo->dwBPP)
    {
      /* Windowed, and GDI depth differs from -depth parameter */
      ErrorF ("winAdjustVideoModeShadowDD - Windowed, command line bpp: "
	      "%d, using bpp: %d\n", (int) pScreenInfo->dwBPP, (int) dwBPP);

      /* We'll use GDI's depth */
      pScreenInfo->dwBPP = dwBPP;
    }
  
  /* See if the shadow bitmap will be larger than the DIB size limit */
  if (pScreenInfo->dwWidth * pScreenInfo->dwHeight * pScreenInfo->dwBPP
      >= WIN_DIB_MAXIMUM_SIZE)
    {
      ErrorF ("winAdjustVideoModeShadowDD - Requested DirectDraw surface "
	      "will be larger than %d MB.  The surface may fail to be "
	      "allocated on Windows 95, 98, or Me, due to a %d MB limit in "
	      "DIB size.  This limit does not apply to Windows NT/2000, and "
	      "this message may be ignored on those platforms.\n",
	      WIN_DIB_MAXIMUM_SIZE_MB, WIN_DIB_MAXIMUM_SIZE_MB);
    }
d1338 1
d1340 1
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d528 2
a529 2
  DWORD			dwBox = REGION_NUM_RECTS (damage);
  BoxPtr		pBox = REGION_RECTS (damage);
d591 1
a591 1
      BoxPtr		pBoxExtents = REGION_EXTENTS (pScreen, damage);
@


1.1
log
@Initial revision
@
text
@d45 1
a45 1

d364 1
a364 1
	  /* Change the video mode to the mode requested */
d376 14
a389 1
	      return FALSE;
d524 1
a524 1
  RegionPtr		damage = &pBuf->damage;
d550 1
a550 1
      ErrorF ("winShadowUpdateProcDD - Unlock failed\n");
d642 1
a642 1
      ErrorF ("winShadowUpdateProcDD - Lock failed\n");
d649 1
a649 1
      ErrorF ("winShadowUpdateProcDD - Memory location of the shadow "
d654 1
a654 1
	      "/tmp/XWin.log file to cygwin-xfree@@cygwin.com\n");
d669 1
a669 1
	  ErrorF ("winShadowUpdateProcDD - Bits changed, could not "
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
