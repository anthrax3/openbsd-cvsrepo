head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.09.16.19.10.24;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Te1daavkBLskZ8gc;

1.6
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	cVXoV5PxI8YrEaVA;

1.5
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.24;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 *Copyright (C) 2003-2004 Harold L Hunt II All Rights Reserved.
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL HAROLD L HUNT II BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of Harold L Hunt II
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from Harold L Hunt II.
 *
 * Authors:	Harold L Hunt II
 */

#ifdef HAVE_XWIN_CONFIG_H
#include <xwin-config.h>
#endif

#include <unistd.h>
#include <pthread.h>

#include "win.h"
#include "winclipboard/winclipboard.h"
#include "windisplay.h"

#define WIN_CLIPBOARD_RETRIES			40
#define WIN_CLIPBOARD_DELAY			1

/*
 * Local variables
 */

static pthread_t g_ptClipboardProc;

/*
 *
 */
static void *
winClipboardThreadProc(void *arg)
{
  char szDisplay[512];
  int clipboardRestarts = 0;

  while (1)
    {
      Bool fShutdown;

      ++clipboardRestarts;

      /* Use our generated cookie for authentication */
      winSetAuthorization();

      /* Setup the display connection string */
      /*
       * NOTE: Always connect to screen 0 since we require that screen
       * numbers start at 0 and increase without gaps.  We only need
       * to connect to one screen on the display to get events
       * for all screens on the display.  That is why there is only
       * one clipboard client thread.
      */
      winGetDisplayName(szDisplay, 0);

      /* Print the display connection string */
      ErrorF("winClipboardThreadProc - DISPLAY=%s\n", szDisplay);

      /* Flag that clipboard client has been launched */
      g_fClipboardStarted = TRUE;

      fShutdown = winClipboardProc(g_fUnicodeClipboard, szDisplay);

      /* Flag that clipboard client has stopped */
      g_fClipboardStarted = FALSE;

      if (fShutdown)
        break;

      /* checking if we need to restart */
      if (clipboardRestarts >= WIN_CLIPBOARD_RETRIES) {
        /* terminates clipboard thread but the main server still lives */
        ErrorF("winClipboardProc - the clipboard thread has restarted %d times and seems to be unstable, disabling clipboard integration\n", clipboardRestarts);
        g_fClipboard = FALSE;
        break;
      }

      sleep(WIN_CLIPBOARD_DELAY);
      ErrorF("winClipboardProc - trying to restart clipboard thread \n");
    }

  return NULL;
}

/*
 * Intialize the Clipboard module
 */

Bool
winInitClipboard(void)
{
    winDebug("winInitClipboard ()\n");

    /* Spawn a thread for the Clipboard module */
    if (pthread_create(&g_ptClipboardProc, NULL, winClipboardThreadProc, NULL)) {
        /* Bail if thread creation failed */
        ErrorF("winInitClipboard - pthread_create failed.\n");
        return FALSE;
    }

    return TRUE;
}

void
winClipboardShutdown(void)
{
  /* Close down clipboard resources */
  if (g_fClipboard && g_fClipboardStarted) {
    /* Synchronously destroy the clipboard window */
    winClipboardWindowDestroy();

    /* Wait for the clipboard thread to exit */
    pthread_join(g_ptClipboardProc, NULL);

    g_fClipboardStarted = FALSE;

    winDebug("winClipboardShutdown - Clipboard thread has exited.\n");
  }
}
@


1.6
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d34 10
a43 2
#include "dixstruct.h"
#include "winclipboard.h"
d46 1
a46 1
 * Local typedefs
d49 1
a49 3
typedef int (*winDispatchProcPtr) (ClientPtr);

int winProcSetSelectionOwner(ClientPtr /* client */ );
d52 1
a52 1
 * References to external symbols
d54 5
d60 47
a106 4
extern pthread_t g_ptClipboardProc;
extern winDispatchProcPtr winProcSetSelectionOwnerOrig;
extern Bool g_fClipboard;
extern HWND g_hwndClipboard;
a116 6
    /* Wrap some internal server functions */
    if (ProcVector[X_SetSelectionOwner] != winProcSetSelectionOwner) {
        winProcSetSelectionOwnerOrig = ProcVector[X_SetSelectionOwner];
        ProcVector[X_SetSelectionOwner] = winProcSetSelectionOwner;
    }

d118 1
a118 1
    if (pthread_create(&g_ptClipboardProc, NULL, winClipboardProc, NULL)) {
d127 2
a128 6
/*
 * Create the Windows window that we use to receive Windows messages
 */

HWND
winClipboardCreateMessagingWindow(void)
d130 4
a133 32
    WNDCLASSEX wc;
    HWND hwnd;

    /* Setup our window class */
    wc.cbSize = sizeof(WNDCLASSEX);
    wc.style = CS_HREDRAW | CS_VREDRAW;
    wc.lpfnWndProc = winClipboardWindowProc;
    wc.cbClsExtra = 0;
    wc.cbWndExtra = 0;
    wc.hInstance = GetModuleHandle(NULL);
    wc.hIcon = 0;
    wc.hCursor = 0;
    wc.hbrBackground = (HBRUSH) GetStockObject(WHITE_BRUSH);
    wc.lpszMenuName = NULL;
    wc.lpszClassName = WIN_CLIPBOARD_WINDOW_CLASS;
    wc.hIconSm = 0;
    RegisterClassEx(&wc);

    /* Create the window */
    hwnd = CreateWindowExA(0,   /* Extended styles */
                           WIN_CLIPBOARD_WINDOW_CLASS,  /* Class name */
                           WIN_CLIPBOARD_WINDOW_TITLE,  /* Window name */
                           WS_OVERLAPPED,       /* Not visible anyway */
                           CW_USEDEFAULT,       /* Horizontal position */
                           CW_USEDEFAULT,       /* Vertical position */
                           CW_USEDEFAULT,       /* Right edge */
                           CW_USEDEFAULT,       /* Bottom edge */
                           (HWND) NULL, /* No parent or owner window */
                           (HMENU) NULL,        /* No menu */
                           GetModuleHandle(NULL),       /* Instance handle */
                           NULL);       /* Creation data */
    assert(hwnd != NULL);
d135 2
a136 2
    /* I'm not sure, but we may need to call this to start message processing */
    ShowWindow(hwnd, SW_HIDE);
d138 1
a138 2
    /* Similarly, we may need a call to this even though we don't paint */
    UpdateWindow(hwnd);
d140 2
a141 9
    return hwnd;
}

void
winFixClipboardChain(void)
{
    if (g_fClipboard && g_hwndClipboard) {
        PostMessage(g_hwndClipboard, WM_WM_REINIT, 0, 0);
    }
@


1.5
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d80 1
a80 1
 * Create the Windows window that we use to recieve Windows messages
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d61 1
a61 1
    ErrorF("winInitClipboard ()\n");
@


1.3
log
@Update to xserver 1.11.2
@
text
@a36 1

d43 1
a43 2
int winProcSetSelectionOwner(ClientPtr /* client */);

d49 4
a52 5
extern pthread_t		g_ptClipboardProc;
extern winDispatchProcPtr	winProcSetSelectionOwnerOrig;
extern Bool			g_fClipboard;
extern HWND			g_hwndClipboard;

d59 1
a59 1
winInitClipboard (void)
d61 1
a61 1
  ErrorF ("winInitClipboard ()\n");
d63 4
a66 5
  /* Wrap some internal server functions */
  if (ProcVector[X_SetSelectionOwner] != winProcSetSelectionOwner)
    {
      winProcSetSelectionOwnerOrig = ProcVector[X_SetSelectionOwner];
      ProcVector[X_SetSelectionOwner] = winProcSetSelectionOwner;
d68 6
a73 10
  
  /* Spawn a thread for the Clipboard module */
  if (pthread_create (&g_ptClipboardProc,
		      NULL,
		      winClipboardProc,
		      NULL))
    {
      /* Bail if thread creation failed */
      ErrorF ("winInitClipboard - pthread_create failed.\n");
      return FALSE;
d76 1
a76 1
  return TRUE;
a78 1

d84 1
a84 1
winClipboardCreateMessagingWindow (void)
d86 2
a87 2
  WNDCLASSEX			wc;
  HWND				hwnd;
d89 29
a117 29
  /* Setup our window class */
  wc.cbSize=sizeof(WNDCLASSEX);
  wc.style = CS_HREDRAW | CS_VREDRAW;
  wc.lpfnWndProc = winClipboardWindowProc;
  wc.cbClsExtra = 0;
  wc.cbWndExtra = 0;
  wc.hInstance = GetModuleHandle (NULL);
  wc.hIcon = 0;
  wc.hCursor = 0;
  wc.hbrBackground = (HBRUSH) GetStockObject (WHITE_BRUSH);
  wc.lpszMenuName = NULL;
  wc.lpszClassName = WIN_CLIPBOARD_WINDOW_CLASS;
  wc.hIconSm = 0;
  RegisterClassEx (&wc);

  /* Create the window */
  hwnd = CreateWindowExA (0,			/* Extended styles */
			  WIN_CLIPBOARD_WINDOW_CLASS,/* Class name */
			  WIN_CLIPBOARD_WINDOW_TITLE,/* Window name */
			  WS_OVERLAPPED,	/* Not visible anyway */
			  CW_USEDEFAULT,	/* Horizontal position */
			  CW_USEDEFAULT,	/* Vertical position */
			  CW_USEDEFAULT,	/* Right edge */
			  CW_USEDEFAULT,	/* Bottom edge */
			  (HWND) NULL,		/* No parent or owner window */
			  (HMENU) NULL,		/* No menu */
			  GetModuleHandle (NULL),/* Instance handle */
			  NULL);		/* Creation data */
  assert (hwnd != NULL);
d119 2
a120 2
  /* I'm not sure, but we may need to call this to start message processing */
  ShowWindow (hwnd, SW_HIDE);
d122 2
a123 2
  /* Similarly, we may need a call to this even though we don't paint */
  UpdateWindow (hwnd);
d125 1
a125 1
  return hwnd;
d129 1
a129 1
winFixClipboardChain (void)
d131 3
a133 5
   if (g_fClipboard
       && g_hwndClipboard)
     {
       PostMessage (g_hwndClipboard, WM_WM_REINIT, 0, 0);
     }
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d44 1
a44 1
DISPATCH_PROC(winProcSetSelectionOwner);
@


1.1
log
@Initial revision
@
text
@d62 1
a62 1
winInitClipboard ()
d93 1
a93 1
winClipboardCreateMessagingWindow ()
d95 1
a95 1
  WNDCLASS			wc;
d99 1
d110 2
a111 1
  RegisterClass (&wc);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
