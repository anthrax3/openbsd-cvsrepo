head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.05.29.12.02.39;	author matthieu;	state Exp;
branches;
next	1.9;
commitid	s0SI41sEunLdyFfd;

1.9
date	2015.09.16.19.10.24;	author matthieu;	state Exp;
branches;
next	1.8;
commitid	Te1daavkBLskZ8gc;

1.8
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	cVXoV5PxI8YrEaVA;

1.7
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.31;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.31;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*

Copyright 1993, 1998  The Open Group
Copyright (C) Colin Harrison 2005-2008

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.

*/

#ifdef HAVE_XWIN_CONFIG_H
#include <xwin-config.h>
#endif

#ifdef HAVE_SYS_UTSNAME_H
#include <sys/utsname.h>
#endif

#include <../xfree86/common/xorgVersion.h>
#include "win.h"
#include "winconfig.h"
#include "winmsg.h"
#include "winmonitors.h"

#ifdef XWIN_CLIPBOARD
#include "winclipboard/winclipboard.h"
#endif

/*
 * Function prototypes
 */

void
 winLogCommandLine(int argc, char *argv[]);

void
 winLogVersionInfo(void);

/*
 * Process arguments on the command line
 */

static int iLastScreen = -1;
static winScreenInfo defaultScreenInfo;

static void
winInitializeScreenDefaults(void)
{
    DWORD dwWidth, dwHeight;
    static Bool fInitializedScreenDefaults = FALSE;

    /* Bail out early if default screen has already been initialized */
    if (fInitializedScreenDefaults)
        return;

    /* Zero the memory used for storing the screen info */
    memset(&defaultScreenInfo, 0, sizeof(winScreenInfo));

    /* Get default width and height */
    /*
     * NOTE: These defaults will cause the window to cover only
     * the primary monitor in the case that we have multiple monitors.
     */
    dwWidth = GetSystemMetrics(SM_CXSCREEN);
    dwHeight = GetSystemMetrics(SM_CYSCREEN);

    winErrorFVerb(2,
                  "winInitializeScreenDefaults - primary monitor w %d h %d\n",
                  (int) dwWidth, (int) dwHeight);

    /* Set a default DPI, if no '-dpi' option was used */
    if (monitorResolution == 0) {
        HDC hdc = GetDC(NULL);

        if (hdc) {
            int dpiX = GetDeviceCaps(hdc, LOGPIXELSX);
            int dpiY = GetDeviceCaps(hdc, LOGPIXELSY);

            winErrorFVerb(2,
                          "winInitializeScreenDefaults - native DPI x %d y %d\n",
                          dpiX, dpiY);

            monitorResolution = dpiY;
            ReleaseDC(NULL, hdc);
        }
        else {
            winErrorFVerb(1,
                          "winInitializeScreenDefaults - Failed to retrieve native DPI, falling back to default of %d DPI\n",
                          WIN_DEFAULT_DPI);
            monitorResolution = WIN_DEFAULT_DPI;
        }
    }

    defaultScreenInfo.iMonitor = 1;
    defaultScreenInfo.hMonitor = MonitorFromWindow(NULL, MONITOR_DEFAULTTOPRIMARY);
    defaultScreenInfo.dwWidth = dwWidth;
    defaultScreenInfo.dwHeight = dwHeight;
    defaultScreenInfo.dwUserWidth = dwWidth;
    defaultScreenInfo.dwUserHeight = dwHeight;
    defaultScreenInfo.fUserGaveHeightAndWidth =
        WIN_DEFAULT_USER_GAVE_HEIGHT_AND_WIDTH;
    defaultScreenInfo.fUserGavePosition = FALSE;
    defaultScreenInfo.dwBPP = WIN_DEFAULT_BPP;
    defaultScreenInfo.dwClipUpdatesNBoxes = WIN_DEFAULT_CLIP_UPDATES_NBOXES;
#ifdef XWIN_EMULATEPSEUDO
    defaultScreenInfo.fEmulatePseudo = WIN_DEFAULT_EMULATE_PSEUDO;
#endif
    defaultScreenInfo.dwRefreshRate = WIN_DEFAULT_REFRESH;
    defaultScreenInfo.pfb = NULL;
    defaultScreenInfo.fFullScreen = FALSE;
    defaultScreenInfo.fDecoration = TRUE;
#ifdef XWIN_MULTIWINDOWEXTWM
    defaultScreenInfo.fMWExtWM = FALSE;
    defaultScreenInfo.fInternalWM = FALSE;
#endif
    defaultScreenInfo.fRootless = FALSE;
#ifdef XWIN_MULTIWINDOW
    defaultScreenInfo.fMultiWindow = FALSE;
#endif
#if defined(XWIN_MULTIWINDOW) || defined(XWIN_MULTIWINDOWEXTWM)
    defaultScreenInfo.fMultiMonitorOverride = FALSE;
#endif
    defaultScreenInfo.fMultipleMonitors = FALSE;
    defaultScreenInfo.fLessPointer = FALSE;
    defaultScreenInfo.iResizeMode = resizeWithRandr;
    defaultScreenInfo.fNoTrayIcon = FALSE;
    defaultScreenInfo.iE3BTimeout = WIN_E3B_DEFAULT;
    defaultScreenInfo.fUseWinKillKey = WIN_DEFAULT_WIN_KILL;
    defaultScreenInfo.fUseUnixKillKey = WIN_DEFAULT_UNIX_KILL;
    defaultScreenInfo.fIgnoreInput = FALSE;
    defaultScreenInfo.fExplicitScreen = FALSE;

    /* Note that the default screen has been initialized */
    fInitializedScreenDefaults = TRUE;
}

static void
winInitializeScreen(int i)
{
    winErrorFVerb(3, "winInitializeScreen - %d\n", i);

    /* Initialize default screen values, if needed */
    winInitializeScreenDefaults();

    /* Copy the default screen info */
    g_ScreenInfo[i] = defaultScreenInfo;

    /* Set the screen number */
    g_ScreenInfo[i].dwScreen = i;
}

void
winInitializeScreens(int maxscreens)
{
    int i;

    winErrorFVerb(3, "winInitializeScreens - %i\n", maxscreens);

    if (maxscreens > g_iNumScreens) {
        /* Reallocate the memory for DDX-specific screen info */
        g_ScreenInfo =
            realloc(g_ScreenInfo, maxscreens * sizeof(winScreenInfo));

        /* Set default values for any new screens */
        for (i = g_iNumScreens; i < maxscreens; i++)
            winInitializeScreen(i);

        /* Keep a count of the number of screens */
        g_iNumScreens = maxscreens;
    }
}

/* See Porting Layer Definition - p. 57 */
/*
 * INPUT
 * argv: pointer to an array of null-terminated strings, one for
 *   each token in the X Server command line; the first token
 *   is 'XWin.exe', or similar.
 * argc: a count of the number of tokens stored in argv.
 * i: a zero-based index into argv indicating the current token being
 *   processed.
 *
 * OUTPUT
 * return: return the number of tokens processed correctly.
 *
 * NOTE
 * When looking for n tokens, check that i + n is less than argc.  Or,
 *   you may check if i is greater than or equal to argc, in which case
 *   you should display the UseMsg () and return 0.
 */

/* Check if enough arguments are given for the option */
#define CHECK_ARGS(count) if (i + count >= argc) { UseMsg (); return 0; }

/* Compare the current option with the string. */
#define IS_OPTION(name) (strcmp (argv[i], name) == 0)

int
ddxProcessArgument(int argc, char *argv[], int i)
{
    static Bool s_fBeenHere = FALSE;
    winScreenInfo *screenInfoPtr = NULL;

    /* Initialize once */
    if (!s_fBeenHere) {
#ifdef DDXOSVERRORF
        /*
         * This initialises our hook into VErrorF () for catching log messages
         * that are generated before OsInit () is called.
         */
        OsVendorVErrorFProc = OsVendorVErrorF;
#endif

        s_fBeenHere = TRUE;

        /* Initialize only if option is not -help */
        if (!IS_OPTION("-help") && !IS_OPTION("-h") && !IS_OPTION("--help") &&
            !IS_OPTION("-version") && !IS_OPTION("--version")) {

            /* Log the version information */
            winLogVersionInfo();

            /* Log the command line */
            winLogCommandLine(argc, argv);

            /*
             * Initialize default screen settings.  We have to do this before
             * OsVendorInit () gets called, otherwise we will overwrite
             * settings changed by parameters such as -fullscreen, etc.
             */
            winErrorFVerb(2, "ddxProcessArgument - Initializing default "
                          "screens\n");
            winInitializeScreenDefaults();
        }
    }

#if CYGDEBUG
    winDebug("ddxProcessArgument - arg: %s\n", argv[i]);
#endif

    /*
     * Look for the '-help' and similar options
     */
    if (IS_OPTION("-help") || IS_OPTION("-h") || IS_OPTION("--help")) {
        /* Reset logfile. We don't need that helpmessage in the logfile */
        g_pszLogFile = NULL;
        g_fNoHelpMessageBox = TRUE;
        UseMsg();
        exit(0);
        return 1;
    }

    if (IS_OPTION("-version") || IS_OPTION("--version")) {
        /* Reset logfile. We don't need that versioninfo in the logfile */
        g_pszLogFile = NULL;
        winLogVersionInfo();
        exit(0);
        return 1;
    }

    /*
     * Look for the '-screen scr_num [width height]' argument
     */
    if (IS_OPTION("-screen")) {
        int iArgsProcessed = 1;
        int nScreenNum;
        int iWidth, iHeight, iX, iY;
        int iMonitor;

#if CYGDEBUG
        winDebug("ddxProcessArgument - screen - argc: %d i: %d\n", argc, i);
#endif

        /* Display the usage message if the argument is malformed */
        if (i + 1 >= argc) {
            return 0;
        }

        /* Grab screen number */
        nScreenNum = atoi(argv[i + 1]);

        /* Validate the specified screen number */
        if (nScreenNum < 0) {
            ErrorF("ddxProcessArgument - screen - Invalid screen number %d\n",
                   nScreenNum);
            UseMsg();
            return 0;
        }

        /*
           Initialize default values for any new screens

           Note that default values can't change after a -screen option is
           seen, so it's safe to do this for each screen as it is introduced
         */
        winInitializeScreens(nScreenNum + 1);

        /* look for @@m where m is monitor number */
        if (i + 2 < argc && 1 == sscanf(argv[i + 2], "@@%d", (int *) &iMonitor)) {
            struct GetMonitorInfoData data;

            if (!QueryMonitor(iMonitor, &data)) {
                ErrorF
                    ("ddxProcessArgument - screen - Querying monitors failed\n");
            }
            else if (data.bMonitorSpecifiedExists == TRUE) {
                winErrorFVerb(2,
                              "ddxProcessArgument - screen - Found Valid ``@@Monitor'' = %d arg\n",
                              iMonitor);
                iArgsProcessed = 3;
                g_ScreenInfo[nScreenNum].fUserGaveHeightAndWidth = FALSE;
                g_ScreenInfo[nScreenNum].fUserGavePosition = TRUE;
                g_ScreenInfo[nScreenNum].iMonitor = iMonitor;
                g_ScreenInfo[nScreenNum].hMonitor = data.monitorHandle;
                g_ScreenInfo[nScreenNum].dwWidth = data.monitorWidth;
                g_ScreenInfo[nScreenNum].dwHeight = data.monitorHeight;
                g_ScreenInfo[nScreenNum].dwUserWidth = data.monitorWidth;
                g_ScreenInfo[nScreenNum].dwUserHeight = data.monitorHeight;
                g_ScreenInfo[nScreenNum].dwInitialX = data.monitorOffsetX;
                g_ScreenInfo[nScreenNum].dwInitialY = data.monitorOffsetY;
            }
            else {
                /* monitor does not exist, error out */
                ErrorF
                    ("ddxProcessArgument - screen - Invalid monitor number %d\n",
                     iMonitor);
                UseMsg();
                exit(0);
                return 0;
            }
        }

        /* Look for 'WxD' or 'W D' */
        else if (i + 2 < argc
                 && 2 == sscanf(argv[i + 2], "%dx%d",
                                (int *) &iWidth, (int *) &iHeight)) {
            winErrorFVerb(2,
                          "ddxProcessArgument - screen - Found ``WxD'' arg\n");
            iArgsProcessed = 3;
            g_ScreenInfo[nScreenNum].fUserGaveHeightAndWidth = TRUE;
            g_ScreenInfo[nScreenNum].dwWidth = iWidth;
            g_ScreenInfo[nScreenNum].dwHeight = iHeight;
            g_ScreenInfo[nScreenNum].dwUserWidth = iWidth;
            g_ScreenInfo[nScreenNum].dwUserHeight = iHeight;
            /* Look for WxD+X+Y */
            if (2 == sscanf(argv[i + 2], "%*dx%*d+%d+%d",
                            (int *) &iX, (int *) &iY)) {
                winErrorFVerb(2,
                              "ddxProcessArgument - screen - Found ``X+Y'' arg\n");
                g_ScreenInfo[nScreenNum].fUserGavePosition = TRUE;
                g_ScreenInfo[nScreenNum].dwInitialX = iX;
                g_ScreenInfo[nScreenNum].dwInitialY = iY;

                /* look for WxD+X+Y@@m where m is monitor number. take X,Y to be offsets from monitor's root position */
                if (1 == sscanf(argv[i + 2], "%*dx%*d+%*d+%*d@@%d",
                                (int *) &iMonitor)) {
                    struct GetMonitorInfoData data;

                    if (!QueryMonitor(iMonitor, &data)) {
                        ErrorF
                            ("ddxProcessArgument - screen - Querying monitors failed\n");
                    }
                    else if (data.bMonitorSpecifiedExists == TRUE) {
                        g_ScreenInfo[nScreenNum].iMonitor = iMonitor;
                        g_ScreenInfo[nScreenNum].hMonitor = data.monitorHandle;
                        g_ScreenInfo[nScreenNum].dwInitialX +=
                            data.monitorOffsetX;
                        g_ScreenInfo[nScreenNum].dwInitialY +=
                            data.monitorOffsetY;
                    }
                    else {
                        /* monitor does not exist, error out */
                        ErrorF
                            ("ddxProcessArgument - screen - Invalid monitor number %d\n",
                             iMonitor);
                        UseMsg();
                        exit(0);
                        return 0;
                    }

                }
            }

            /* look for WxD@@m where m is monitor number */
            else if (1 == sscanf(argv[i + 2], "%*dx%*d@@%d", (int *) &iMonitor)) {
                struct GetMonitorInfoData data;

                if (!QueryMonitor(iMonitor, &data)) {
                    ErrorF
                        ("ddxProcessArgument - screen - Querying monitors failed\n");
                }
                else if (data.bMonitorSpecifiedExists == TRUE) {
                    winErrorFVerb(2,
                                  "ddxProcessArgument - screen - Found Valid ``@@Monitor'' = %d arg\n",
                                  iMonitor);
                    g_ScreenInfo[nScreenNum].fUserGavePosition = TRUE;
                    g_ScreenInfo[nScreenNum].iMonitor = iMonitor;
                    g_ScreenInfo[nScreenNum].hMonitor = data.monitorHandle;
                    g_ScreenInfo[nScreenNum].dwInitialX = data.monitorOffsetX;
                    g_ScreenInfo[nScreenNum].dwInitialY = data.monitorOffsetY;
                }
                else {
                    /* monitor does not exist, error out */
                    ErrorF
                        ("ddxProcessArgument - screen - Invalid monitor number %d\n",
                         iMonitor);
                    UseMsg();
                    exit(0);
                    return 0;
                }

            }
        }
        else if (i + 3 < argc && 1 == sscanf(argv[i + 2], "%d", (int *) &iWidth)
                 && 1 == sscanf(argv[i + 3], "%d", (int *) &iHeight)) {
            winErrorFVerb(2,
                          "ddxProcessArgument - screen - Found ``W D'' arg\n");
            iArgsProcessed = 4;
            g_ScreenInfo[nScreenNum].fUserGaveHeightAndWidth = TRUE;
            g_ScreenInfo[nScreenNum].dwWidth = iWidth;
            g_ScreenInfo[nScreenNum].dwHeight = iHeight;
            g_ScreenInfo[nScreenNum].dwUserWidth = iWidth;
            g_ScreenInfo[nScreenNum].dwUserHeight = iHeight;
            if (i + 5 < argc && 1 == sscanf(argv[i + 4], "%d", (int *) &iX)
                && 1 == sscanf(argv[i + 5], "%d", (int *) &iY)) {
                winErrorFVerb(2,
                              "ddxProcessArgument - screen - Found ``X Y'' arg\n");
                iArgsProcessed = 6;
                g_ScreenInfo[nScreenNum].fUserGavePosition = TRUE;
                g_ScreenInfo[nScreenNum].dwInitialX = iX;
                g_ScreenInfo[nScreenNum].dwInitialY = iY;
            }
        }
        else {
            winErrorFVerb(2,
                          "ddxProcessArgument - screen - Did not find size arg. "
                          "dwWidth: %d dwHeight: %d\n",
                          (int) g_ScreenInfo[nScreenNum].dwWidth,
                          (int) g_ScreenInfo[nScreenNum].dwHeight);
            iArgsProcessed = 2;
            g_ScreenInfo[nScreenNum].fUserGaveHeightAndWidth = FALSE;
        }

        /* Flag that this screen was explicity specified by the user */
        g_ScreenInfo[nScreenNum].fExplicitScreen = TRUE;

        /*
         * Keep track of the last screen number seen, as parameters seen
         * before a screen number apply to all screens, whereas parameters
         * seen after a screen number apply to that screen number only.
         */
        iLastScreen = nScreenNum;

        return iArgsProcessed;
    }

    /*
     * Is this parameter attached to a screen or global?
     *
     * If the parameter is for all screens (appears before
     * any -screen option), store it in the default screen
     * info
     *
     * If the parameter is for a single screen (appears
     * after a -screen option), store it in the screen info
     * for that screen
     *
     */
    if (iLastScreen == -1) {
        screenInfoPtr = &defaultScreenInfo;
    }
    else {
        screenInfoPtr = &(g_ScreenInfo[iLastScreen]);
    }

    /*
     * Look for the '-engine n' argument
     */
    if (IS_OPTION("-engine")) {
        DWORD dwEngine = 0;
        CARD8 c8OnBits = 0;

        /* Display the usage message if the argument is malformed */
        if (++i >= argc) {
            UseMsg();
            return 0;
        }

        /* Grab the argument */
        dwEngine = atoi(argv[i]);

        /* Count the one bits in the engine argument */
        c8OnBits = winCountBits(dwEngine);

        /* Argument should only have a single bit on */
        if (c8OnBits != 1) {
            UseMsg();
            return 0;
        }

        screenInfoPtr->dwEnginePreferred = dwEngine;

        /* Indicate that we have processed the argument */
        return 2;
    }

    /*
     * Look for the '-fullscreen' argument
     */
    if (IS_OPTION("-fullscreen")) {
#if defined(XWIN_MULTIWINDOW) || defined(XWIN_MULTIWINDOWEXTWM)
        if (!screenInfoPtr->fMultiMonitorOverride)
            screenInfoPtr->fMultipleMonitors = FALSE;
#endif
        screenInfoPtr->fFullScreen = TRUE;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-lesspointer' argument
     */
    if (IS_OPTION("-lesspointer")) {
        screenInfoPtr->fLessPointer = TRUE;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-nodecoration' argument
     */
    if (IS_OPTION("-nodecoration")) {
#if defined(XWIN_MULTIWINDOW) || defined(XWIN_MULTIWINDOWEXTWM)
        if (!screenInfoPtr->fMultiMonitorOverride)
            screenInfoPtr->fMultipleMonitors = FALSE;
#endif
        screenInfoPtr->fDecoration = FALSE;

        /* Indicate that we have processed this argument */
        return 1;
    }

#ifdef XWIN_MULTIWINDOWEXTWM
    /*
     * Look for the '-mwextwm' argument
     */
    if (IS_OPTION("-mwextwm")) {
        if (!screenInfoPtr->fMultiMonitorOverride)
            screenInfoPtr->fMultipleMonitors = TRUE;
        screenInfoPtr->fMWExtWM = TRUE;

        /* Indicate that we have processed this argument */
        return 1;
    }
    /*
     * Look for the '-internalwm' argument
     */
    if (IS_OPTION("-internalwm")) {
        if (!screenInfoPtr->fMultiMonitorOverride)
            screenInfoPtr->fMultipleMonitors = TRUE;
        screenInfoPtr->fMWExtWM = TRUE;
        screenInfoPtr->fInternalWM = TRUE;

        /* Indicate that we have processed this argument */
        return 1;
    }
#endif

    /*
     * Look for the '-rootless' argument
     */
    if (IS_OPTION("-rootless")) {
#if defined(XWIN_MULTIWINDOW) || defined(XWIN_MULTIWINDOWEXTWM)
        if (!screenInfoPtr->fMultiMonitorOverride)
            screenInfoPtr->fMultipleMonitors = FALSE;
#endif
        screenInfoPtr->fRootless = TRUE;

        /* Indicate that we have processed this argument */
        return 1;
    }

#ifdef XWIN_MULTIWINDOW
    /*
     * Look for the '-multiwindow' argument
     */
    if (IS_OPTION("-multiwindow")) {
#if defined(XWIN_MULTIWINDOW) || defined(XWIN_MULTIWINDOWEXTWM)
        if (!screenInfoPtr->fMultiMonitorOverride)
            screenInfoPtr->fMultipleMonitors = TRUE;
#endif
        screenInfoPtr->fMultiWindow = TRUE;

        /* Indicate that we have processed this argument */
        return 1;
    }
#endif

    /*
     * Look for the '-multiplemonitors' argument
     */
    if (IS_OPTION("-multiplemonitors")
        || IS_OPTION("-multimonitors")) {
#if defined(XWIN_MULTIWINDOW) || defined(XWIN_MULTIWINDOWEXTWM)
        screenInfoPtr->fMultiMonitorOverride = TRUE;
#endif
        screenInfoPtr->fMultipleMonitors = TRUE;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-nomultiplemonitors' argument
     */
    if (IS_OPTION("-nomultiplemonitors")
        || IS_OPTION("-nomultimonitors")) {
#if defined(XWIN_MULTIWINDOW) || defined(XWIN_MULTIWINDOWEXTWM)
        screenInfoPtr->fMultiMonitorOverride = TRUE;
#endif
        screenInfoPtr->fMultipleMonitors = FALSE;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-scrollbars' argument
     */
    if (IS_OPTION("-scrollbars")) {

        screenInfoPtr->iResizeMode = resizeWithScrollbars;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-resize' argument
     */
    if (IS_OPTION("-resize") || IS_OPTION("-noresize") ||
        (strncmp(argv[i], "-resize=", strlen("-resize=")) == 0)) {
        winResizeMode mode;

        if (IS_OPTION("-resize"))
            mode = resizeWithRandr;
        else if (IS_OPTION("-noresize"))
            mode = notAllowed;
        else if (strncmp(argv[i], "-resize=", strlen("-resize=")) == 0) {
            char *option = argv[i] + strlen("-resize=");

            if (strcmp(option, "randr") == 0)
                mode = resizeWithRandr;
            else if (strcmp(option, "scrollbars") == 0)
                mode = resizeWithScrollbars;
            else if (strcmp(option, "none") == 0)
                mode = notAllowed;
            else {
                ErrorF("ddxProcessArgument - resize - Invalid resize mode %s\n",
                       option);
                return 0;
            }
        }
        else {
            ErrorF("ddxProcessArgument - resize - Invalid resize option %s\n",
                   argv[i]);
            return 0;
        }

        screenInfoPtr->iResizeMode = mode;

        /* Indicate that we have processed this argument */
        return 1;
    }

#ifdef XWIN_CLIPBOARD
    /*
     * Look for the '-clipboard' argument
     */
    if (IS_OPTION("-clipboard")) {
        /* Now the default, we still accept the arg for backwards compatibility */
        g_fClipboard = TRUE;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-noclipboard' argument
     */
    if (IS_OPTION("-noclipboard")) {
        g_fClipboard = FALSE;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-primary' argument
     */
    if (IS_OPTION("-primary")) {
        fPrimarySelection = TRUE;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-noprimary' argument
     */
    if (IS_OPTION("-noprimary")) {
        fPrimarySelection = FALSE;

        /* Indicate that we have processed this argument */
        return 1;
    }
#endif

    /*
     * Look for the '-ignoreinput' argument
     */
    if (IS_OPTION("-ignoreinput")) {
        screenInfoPtr->fIgnoreInput = TRUE;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-emulate3buttons' argument
     */
    if (IS_OPTION("-emulate3buttons")) {
        int iArgsProcessed = 1;
        int iE3BTimeout = WIN_DEFAULT_E3B_TIME;

        /* Grab the optional timeout value */
        if (i + 1 < argc && 1 == sscanf(argv[i + 1], "%d", &iE3BTimeout)) {
            /* Indicate that we have processed the next argument */
            iArgsProcessed++;
        }
        else {
            /*
             * sscanf () won't modify iE3BTimeout if it doesn't find
             * the specified format; however, I want to be explicit
             * about setting the default timeout in such cases to
             * prevent some programs (me) from getting confused.
             */
            iE3BTimeout = WIN_DEFAULT_E3B_TIME;
        }

        screenInfoPtr->iE3BTimeout = iE3BTimeout;

        /* Indicate that we have processed this argument */
        return iArgsProcessed;
    }

    /*
     * Look for the '-noemulate3buttons' argument
     */
    if (IS_OPTION("-noemulate3buttons")) {
        screenInfoPtr->iE3BTimeout = WIN_E3B_OFF;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-depth n' argument
     */
    if (IS_OPTION("-depth")) {
        DWORD dwBPP = 0;

        /* Display the usage message if the argument is malformed */
        if (++i >= argc) {
            UseMsg();
            return 0;
        }

        /* Grab the argument */
        dwBPP = atoi(argv[i]);

        screenInfoPtr->dwBPP = dwBPP;

        /* Indicate that we have processed the argument */
        return 2;
    }

    /*
     * Look for the '-refresh n' argument
     */
    if (IS_OPTION("-refresh")) {
        DWORD dwRefreshRate = 0;

        /* Display the usage message if the argument is malformed */
        if (++i >= argc) {
            UseMsg();
            return 0;
        }

        /* Grab the argument */
        dwRefreshRate = atoi(argv[i]);

        screenInfoPtr->dwRefreshRate = dwRefreshRate;

        /* Indicate that we have processed the argument */
        return 2;
    }

    /*
     * Look for the '-clipupdates num_boxes' argument
     */
    if (IS_OPTION("-clipupdates")) {
        DWORD dwNumBoxes = 0;

        /* Display the usage message if the argument is malformed */
        if (++i >= argc) {
            UseMsg();
            return 0;
        }

        /* Grab the argument */
        dwNumBoxes = atoi(argv[i]);

        screenInfoPtr->dwClipUpdatesNBoxes = dwNumBoxes;

        /* Indicate that we have processed the argument */
        return 2;
    }

#ifdef XWIN_EMULATEPSEUDO
    /*
     * Look for the '-emulatepseudo' argument
     */
    if (IS_OPTION("-emulatepseudo")) {
        screenInfoPtr->fEmulatePseudo = TRUE;

        /* Indicate that we have processed this argument */
        return 1;
    }
#endif

    /*
     * Look for the '-nowinkill' argument
     */
    if (IS_OPTION("-nowinkill")) {
        screenInfoPtr->fUseWinKillKey = FALSE;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-winkill' argument
     */
    if (IS_OPTION("-winkill")) {
        screenInfoPtr->fUseWinKillKey = TRUE;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-nounixkill' argument
     */
    if (IS_OPTION("-nounixkill")) {
        screenInfoPtr->fUseUnixKillKey = FALSE;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-unixkill' argument
     */
    if (IS_OPTION("-unixkill")) {
        screenInfoPtr->fUseUnixKillKey = TRUE;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-notrayicon' argument
     */
    if (IS_OPTION("-notrayicon")) {
        screenInfoPtr->fNoTrayIcon = TRUE;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-trayicon' argument
     */
    if (IS_OPTION("-trayicon")) {
        screenInfoPtr->fNoTrayIcon = FALSE;

        /* Indicate that we have processed this argument */
        return 1;
    }

    /*
     * Look for the '-fp' argument
     */
    if (IS_OPTION("-fp")) {
        CHECK_ARGS(1);
        g_cmdline.fontPath = argv[++i];
        return 0;               /* Let DIX parse this again */
    }

    /*
     * Look for the '-query' argument
     */
    if (IS_OPTION("-query")) {
        CHECK_ARGS(1);
        g_fXdmcpEnabled = TRUE;
        g_pszQueryHost = argv[++i];
        return 0;               /* Let DIX parse this again */
    }

    /*
     * Look for the '-auth' argument
     */
    if (IS_OPTION("-auth")) {
        g_fAuthEnabled = TRUE;
        return 0;               /* Let DIX parse this again */
    }

    /*
     * Look for the '-indirect' or '-broadcast' arguments
     */
    if (IS_OPTION("-indirect")
        || IS_OPTION("-broadcast")) {
        g_fXdmcpEnabled = TRUE;
        return 0;               /* Let DIX parse this again */
    }

    /*
     * Look for the '-config' argument
     */
    if (IS_OPTION("-config")
        || IS_OPTION("-xf86config")) {
        CHECK_ARGS(1);
#ifdef XWIN_XF86CONFIG
        g_cmdline.configFile = argv[++i];
#else
        winMessageBoxF("The %s option is not supported in this "
                       "release.\n"
                       "Ignoring this option and continuing.\n",
                       MB_ICONINFORMATION, argv[i]);
#endif
        return 2;
    }

    /*
     * Look for the '-configdir' argument
     */
    if (IS_OPTION("-configdir")) {
        CHECK_ARGS(1);
#ifdef XWIN_XF86CONFIG
        g_cmdline.configDir = argv[++i];
#else
        winMessageBoxF("The %s option is not supported in this "
                       "release.\n"
                       "Ignoring this option and continuing.\n",
                       MB_ICONINFORMATION, argv[i]);
#endif
        return 2;
    }

    /*
     * Look for the '-keyboard' argument
     */
    if (IS_OPTION("-keyboard")) {
#ifdef XWIN_XF86CONFIG
        CHECK_ARGS(1);
        g_cmdline.keyboard = argv[++i];
#else
        winMessageBoxF("The -keyboard option is not supported in this "
                       "release.\n"
                       "Ignoring this option and continuing.\n",
                       MB_ICONINFORMATION);
#endif
        return 2;
    }

    /*
     * Look for the '-logfile' argument
     */
    if (IS_OPTION("-logfile")) {
        CHECK_ARGS(1);
        g_pszLogFile = argv[++i];
#ifdef RELOCATE_PROJECTROOT
        g_fLogFileChanged = TRUE;
#endif
        return 2;
    }

    /*
     * Look for the '-logverbose' argument
     */
    if (IS_OPTION("-logverbose")) {
        CHECK_ARGS(1);
        g_iLogVerbose = atoi(argv[++i]);
        return 2;
    }

#ifdef XWIN_CLIPBOARD
    /*
     * Look for the '-nounicodeclipboard' argument
     */
    if (IS_OPTION("-nounicodeclipboard")) {
        g_fUnicodeClipboard = FALSE;
        /* Indicate that we have processed the argument */
        return 1;
    }
#endif

    if (IS_OPTION("-xkbrules")) {
        CHECK_ARGS(1);
        g_cmdline.xkbRules = argv[++i];
        return 2;
    }
    if (IS_OPTION("-xkbmodel")) {
        CHECK_ARGS(1);
        g_cmdline.xkbModel = argv[++i];
        return 2;
    }
    if (IS_OPTION("-xkblayout")) {
        CHECK_ARGS(1);
        g_cmdline.xkbLayout = argv[++i];
        return 2;
    }
    if (IS_OPTION("-xkbvariant")) {
        CHECK_ARGS(1);
        g_cmdline.xkbVariant = argv[++i];
        return 2;
    }
    if (IS_OPTION("-xkboptions")) {
        CHECK_ARGS(1);
        g_cmdline.xkbOptions = argv[++i];
        return 2;
    }

    if (IS_OPTION("-keyhook")) {
        g_fKeyboardHookLL = TRUE;
        return 1;
    }

    if (IS_OPTION("-nokeyhook")) {
        g_fKeyboardHookLL = FALSE;
        return 1;
    }

    if (IS_OPTION("-swcursor")) {
        g_fSoftwareCursor = TRUE;
        return 1;
    }

    if (IS_OPTION("-silent-dup-error")) {
        g_fSilentDupError = TRUE;
        return 1;
    }

    if (IS_OPTION("-wgl")) {
        g_fNativeGl = TRUE;
        return 1;
    }

    if (IS_OPTION("-nowgl")) {
        g_fNativeGl = FALSE;
        return 1;
    }

    if (IS_OPTION("-hostintitle")) {
        g_fHostInTitle = TRUE;
        return 1;
    }

    if (IS_OPTION("-nohostintitle")) {
        g_fHostInTitle = FALSE;
        return 1;
    }

    return 0;
}

/*
 * winLogCommandLine - Write entire command line to the log file
 */

void
winLogCommandLine(int argc, char *argv[])
{
    int i;
    int iSize = 0;
    int iCurrLen = 0;

#define CHARS_PER_LINE 60

    /* Bail if command line has already been logged */
    if (g_pszCommandLine)
        return;

    /* Count how much memory is needed for concatenated command line */
    for (i = 0, iCurrLen = 0; i < argc; ++i)
        if (argv[i]) {
            /* Adds two characters for lines that overflow */
            if ((strlen(argv[i]) < CHARS_PER_LINE
                 && iCurrLen + strlen(argv[i]) > CHARS_PER_LINE)
                || strlen(argv[i]) > CHARS_PER_LINE) {
                iCurrLen = 0;
                iSize += 2;
            }

            /* Add space for item and trailing space */
            iSize += strlen(argv[i]) + 1;

            /* Update current line length */
            iCurrLen += strlen(argv[i]);
        }

    /* Allocate memory for concatenated command line */
    g_pszCommandLine = malloc(iSize + 1);
    if (!g_pszCommandLine)
        FatalError("winLogCommandLine - Could not allocate memory for "
                   "command line string.  Exiting.\n");

    /* Set first character to concatenated command line to null */
    g_pszCommandLine[0] = '\0';

    /* Loop through all args */
    for (i = 0, iCurrLen = 0; i < argc; ++i) {
        /* Add a character for lines that overflow */
        if ((strlen(argv[i]) < CHARS_PER_LINE
             && iCurrLen + strlen(argv[i]) > CHARS_PER_LINE)
            || strlen(argv[i]) > CHARS_PER_LINE) {
            iCurrLen = 0;

            /* Add line break if it fits */
            strncat(g_pszCommandLine, "\n ", iSize - strlen(g_pszCommandLine));
        }

        strncat(g_pszCommandLine, argv[i], iSize - strlen(g_pszCommandLine));
        strncat(g_pszCommandLine, " ", iSize - strlen(g_pszCommandLine));

        /* Save new line length */
        iCurrLen += strlen(argv[i]);
    }

    ErrorF("XWin was started with the following command line:\n\n"
           "%s\n\n", g_pszCommandLine);
}

/*
 * winLogVersionInfo - Log version information
 */

void
winLogVersionInfo(void)
{
    static Bool s_fBeenHere = FALSE;

    if (s_fBeenHere)
        return;
    s_fBeenHere = TRUE;

    ErrorF("Welcome to the XWin X Server\n");
    ErrorF("Vendor: %s\n", XVENDORNAME);
    ErrorF("Release: %d.%d.%d.%d\n", XORG_VERSION_MAJOR,
           XORG_VERSION_MINOR, XORG_VERSION_PATCH, XORG_VERSION_SNAP);
#ifdef HAVE_SYS_UTSNAME_H
    {
        struct utsname name;

        if (uname(&name) >= 0) {
            ErrorF("OS: %s %s %s %s %s\n", name.sysname, name.nodename,
                   name.release, name.version, name.machine);
        }
    }
#endif
    winOS();
    if (strlen(BUILDERSTRING))
        ErrorF("%s\n", BUILDERSTRING);
    ErrorF("Contact: %s\n", BUILDERADDR);
    ErrorF("\n");
}
@


1.9
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@d1101 5
d1203 1
@


1.8
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d34 4
a43 4
/*
 * References to external symbols
 */

d45 1
a45 2
extern Bool g_fUnicodeClipboard;
extern Bool g_fClipboard;
d718 20
d1188 10
@


1.7
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d1077 5
@


1.6
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a58 4
#ifdef DDXOSVERRORF
void OsVendorVErrorF(const char *pszFormat, va_list va_args);
#endif

d100 1
a100 1
                          "winInitializeDefaultScreens - native DPI x %d y %d\n",
d102 1
d108 1
a108 1
                          "winInitializeDefaultScreens - Failed to retrieve native DPI, falling back to default of %d DPI\n",
d115 1
d145 1
a145 1
    defaultScreenInfo.iResizeMode = notAllowed;
d160 1
a160 1
    winErrorFVerb(2, "winInitializeScreen - %d\n", i);
d177 1
a177 1
    winErrorFVerb(2, "winInitializeScreens - %i\n", maxscreens);
d334 1
d385 1
d418 1
d1162 4
a1165 4
    ErrorF("Release: %d.%d.%d.%d (%d)\n", XORG_VERSION_MAJOR,
           XORG_VERSION_MINOR, XORG_VERSION_PATCH, XORG_VERSION_SNAP,
           XORG_VERSION_CURRENT);
    ErrorF("%s\n\n", BUILDERSTRING);
d1167 1
@


1.5
log
@Update to xserver 1.11.2
@
text
@d45 2
a46 2
extern Bool			g_fUnicodeClipboard;
extern Bool			g_fClipboard;
d54 1
a54 1
winLogCommandLine (int argc, char *argv[]);
d57 1
a57 1
winLogVersionInfo (void);
d60 1
a60 1
void OsVendorVErrorF (const char *pszFormat, va_list va_args);
d73 2
a74 2
  DWORD dwWidth, dwHeight;
  static Bool fInitializedScreenDefaults = FALSE;
d76 51
a126 31
  /* Bail out early if default screen has already been initialized */
  if (fInitializedScreenDefaults)
    return;

  /* Zero the memory used for storing the screen info */
  memset(&defaultScreenInfo, 0, sizeof(winScreenInfo));

  /* Get default width and height */
  /*
   * NOTE: These defaults will cause the window to cover only
   * the primary monitor in the case that we have multiple monitors.
   */
  dwWidth = GetSystemMetrics (SM_CXSCREEN);
  dwHeight = GetSystemMetrics (SM_CYSCREEN);

  winErrorFVerb (2, "winInitializeScreenDefaults - w %d h %d\n",
	  (int) dwWidth, (int) dwHeight);

  /* Set a default DPI, if no parameter was passed */
  if (monitorResolution == 0)
    monitorResolution = WIN_DEFAULT_DPI;

  defaultScreenInfo.iMonitor = 1;
  defaultScreenInfo.dwWidth  = dwWidth;
  defaultScreenInfo.dwHeight = dwHeight;
  defaultScreenInfo.dwUserWidth  = dwWidth;
  defaultScreenInfo.dwUserHeight = dwHeight;
  defaultScreenInfo.fUserGaveHeightAndWidth = WIN_DEFAULT_USER_GAVE_HEIGHT_AND_WIDTH;
  defaultScreenInfo.fUserGavePosition = FALSE;
  defaultScreenInfo.dwBPP = WIN_DEFAULT_BPP;
  defaultScreenInfo.dwClipUpdatesNBoxes = WIN_DEFAULT_CLIP_UPDATES_NBOXES;
d128 1
a128 1
  defaultScreenInfo.fEmulatePseudo = WIN_DEFAULT_EMULATE_PSEUDO;
d130 4
a133 4
  defaultScreenInfo.dwRefreshRate = WIN_DEFAULT_REFRESH;
  defaultScreenInfo.pfb = NULL;
  defaultScreenInfo.fFullScreen = FALSE;
  defaultScreenInfo.fDecoration = TRUE;
d135 2
a136 2
  defaultScreenInfo.fMWExtWM = FALSE;
  defaultScreenInfo.fInternalWM = FALSE;
d138 1
a138 1
  defaultScreenInfo.fRootless = FALSE;
d140 1
a140 1
  defaultScreenInfo.fMultiWindow = FALSE;
d143 1
a143 1
  defaultScreenInfo.fMultiMonitorOverride = FALSE;
d145 9
a153 9
  defaultScreenInfo.fMultipleMonitors = FALSE;
  defaultScreenInfo.fLessPointer = FALSE;
  defaultScreenInfo.iResizeMode = notAllowed;
  defaultScreenInfo.fNoTrayIcon = FALSE;
  defaultScreenInfo.iE3BTimeout = WIN_E3B_OFF;
  defaultScreenInfo.fUseWinKillKey = WIN_DEFAULT_WIN_KILL;
  defaultScreenInfo.fUseUnixKillKey = WIN_DEFAULT_UNIX_KILL;
  defaultScreenInfo.fIgnoreInput = FALSE;
  defaultScreenInfo.fExplicitScreen = FALSE;
d155 2
a156 2
  /* Note that the default screen has been initialized */
  fInitializedScreenDefaults = TRUE;
d162 1
a162 1
  winErrorFVerb (2, "winInitializeScreen - %d\n",i);
d164 2
a165 2
  /* Initialize default screen values, if needed */
  winInitializeScreenDefaults();
d167 2
a168 2
  /* Copy the default screen info */
  g_ScreenInfo[i] = defaultScreenInfo;
d170 2
a171 2
  /* Set the screen number */
  g_ScreenInfo[i].dwScreen = i;
d177 3
a179 2
  int i;
  winErrorFVerb (2, "winInitializeScreens - %i\n", maxscreens);
d181 4
a184 8
  if (maxscreens > g_iNumScreens)
    {
      /* Reallocate the memory for DDX-specific screen info */
      g_ScreenInfo = realloc(g_ScreenInfo, maxscreens * sizeof (winScreenInfo));

      /* Set default values for any new screens */
      for (i = g_iNumScreens; i < maxscreens ; i++)
        winInitializeScreen(i);
d186 6
a191 2
      /* Keep a count of the number of screens */
      g_iNumScreens = maxscreens;
d217 1
a217 1
/* Compare the current option with the string. */ 
d221 1
a221 1
ddxProcessArgument (int argc, char *argv[], int i)
d223 2
a224 2
  static Bool		s_fBeenHere = FALSE;
  winScreenInfo	*screenInfoPtr = NULL;
d226 2
a227 3
  /* Initialize once */
  if (!s_fBeenHere)
    {
d229 28
a256 29
      /*
       * This initialises our hook into VErrorF () for catching log messages
       * that are generated before OsInit () is called.
       */
      OsVendorVErrorFProc = OsVendorVErrorF;
#endif

      s_fBeenHere = TRUE;

      /* Initialize only if option is not -help */
      if (!IS_OPTION("-help") && !IS_OPTION("-h") && !IS_OPTION("--help") &&
          !IS_OPTION("-version") && !IS_OPTION("--version"))
	{

          /* Log the version information */
          winLogVersionInfo ();

          /* Log the command line */
          winLogCommandLine (argc, argv);

	  /*
	   * Initialize default screen settings.  We have to do this before
	   * OsVendorInit () gets called, otherwise we will overwrite
	   * settings changed by parameters such as -fullscreen, etc.
	   */
	  winErrorFVerb (2, "ddxProcessArgument - Initializing default "
			 "screens\n");
	  winInitializeScreenDefaults();
	}
d260 1
a260 1
  winDebug ("ddxProcessArgument - arg: %s\n", argv[i]);
d263 28
a290 31
  /*
   * Look for the '-help' and similar options
   */ 
  if (IS_OPTION ("-help") || IS_OPTION("-h") || IS_OPTION("--help"))
    {
      /* Reset logfile. We don't need that helpmessage in the logfile */  
      g_pszLogFile = NULL;
      g_fNoHelpMessageBox = TRUE;
      UseMsg();
      exit (0);
      return 1;
    }

  if (IS_OPTION ("-version") || IS_OPTION("--version"))
    {
      /* Reset logfile. We don't need that versioninfo in the logfile */  
      g_pszLogFile = NULL;
      winLogVersionInfo ();
      exit (0);
      return 1;
    }

  /*
   * Look for the '-screen scr_num [width height]' argument
   */
  if (IS_OPTION ("-screen"))
    {
      int		iArgsProcessed = 1;
      int		nScreenNum;
      int		iWidth, iHeight, iX, iY;
      int		iMonitor;
d293 1
a293 2
      winDebug ("ddxProcessArgument - screen - argc: %d i: %d\n",
	      argc, i);
d296 14
a309 16
      /* Display the usage message if the argument is malformed */
      if (i + 1 >= argc)
	{
	  return 0;
	}
      
      /* Grab screen number */
      nScreenNum = atoi (argv[i + 1]);

      /* Validate the specified screen number */
      if (nScreenNum < 0)
        {
          ErrorF ("ddxProcessArgument - screen - Invalid screen number %d\n",
		  nScreenNum);
          UseMsg ();
	  return 0;
d312 213
a524 2
      /*
        Initialize default values for any new screens
d526 4
a529 229
        Note that default values can't change after a -screen option is
        seen, so it's safe to do this for each screen as it is introduced
      */
      winInitializeScreens(nScreenNum+1);

	  /* look for @@m where m is monitor number */
	  if (i + 2 < argc
		  && 1 == sscanf(argv[i + 2], "@@%d", (int *) &iMonitor)) 
      {
        struct GetMonitorInfoData data;
        if (!QueryMonitor(iMonitor, &data))
        {
            ErrorF ("ddxProcessArgument - screen - "
                    "Querying monitors is not supported on NT4 and Win95\n");
        } else if (data.bMonitorSpecifiedExists == TRUE) 
        {
		  winErrorFVerb(2, "ddxProcessArgument - screen - Found Valid ``@@Monitor'' = %d arg\n", iMonitor);
		  iArgsProcessed = 3;
		  g_ScreenInfo[nScreenNum].fUserGaveHeightAndWidth = FALSE;
		  g_ScreenInfo[nScreenNum].fUserGavePosition = TRUE;
		  g_ScreenInfo[nScreenNum].iMonitor = iMonitor;
		  g_ScreenInfo[nScreenNum].dwWidth = data.monitorWidth;
		  g_ScreenInfo[nScreenNum].dwHeight = data.monitorHeight;
		  g_ScreenInfo[nScreenNum].dwUserWidth = data.monitorWidth;
		  g_ScreenInfo[nScreenNum].dwUserHeight = data.monitorHeight;
		  g_ScreenInfo[nScreenNum].dwInitialX = data.monitorOffsetX;
		  g_ScreenInfo[nScreenNum].dwInitialY = data.monitorOffsetY;
		}
		else 
        {
		  /* monitor does not exist, error out */
		  ErrorF ("ddxProcessArgument - screen - Invalid monitor number %d\n",
				  iMonitor);
		  UseMsg ();
		  exit (0);
		  return 0;
		}
	  }

      /* Look for 'WxD' or 'W D' */
      else if (i + 2 < argc
	  && 2 == sscanf (argv[i + 2], "%dx%d",
			  (int *) &iWidth,
			  (int *) &iHeight))
	{
	  winErrorFVerb (2, "ddxProcessArgument - screen - Found ``WxD'' arg\n");
	  iArgsProcessed = 3;
	  g_ScreenInfo[nScreenNum].fUserGaveHeightAndWidth = TRUE;
	  g_ScreenInfo[nScreenNum].dwWidth = iWidth;
	  g_ScreenInfo[nScreenNum].dwHeight = iHeight;
	  g_ScreenInfo[nScreenNum].dwUserWidth = iWidth;
	  g_ScreenInfo[nScreenNum].dwUserHeight = iHeight;
	  /* Look for WxD+X+Y */
	  if (2 == sscanf (argv[i + 2], "%*dx%*d+%d+%d",
			   (int *) &iX,
			   (int *) &iY))
	  {
	    winErrorFVerb (2, "ddxProcessArgument - screen - Found ``X+Y'' arg\n");
	    g_ScreenInfo[nScreenNum].fUserGavePosition = TRUE;
	    g_ScreenInfo[nScreenNum].dwInitialX = iX;
	    g_ScreenInfo[nScreenNum].dwInitialY = iY;

		/* look for WxD+X+Y@@m where m is monitor number. take X,Y to be offsets from monitor's root position */
		if (1 == sscanf (argv[i + 2], "%*dx%*d+%*d+%*d@@%d",
						 (int *) &iMonitor)) 
        {
          struct GetMonitorInfoData data;
          if (!QueryMonitor(iMonitor, &data))
          {
              ErrorF ("ddxProcessArgument - screen - "
                      "Querying monitors is not supported on NT4 and Win95\n");
          } else if (data.bMonitorSpecifiedExists == TRUE) 
          {
			g_ScreenInfo[nScreenNum].iMonitor = iMonitor;
			g_ScreenInfo[nScreenNum].dwInitialX += data.monitorOffsetX;
			g_ScreenInfo[nScreenNum].dwInitialY += data.monitorOffsetY;
		  }
		  else 
          {
			/* monitor does not exist, error out */
			ErrorF ("ddxProcessArgument - screen - Invalid monitor number %d\n",
					iMonitor);
			UseMsg ();
			exit (0);
			return 0;
		  }

		}
	  }

	  /* look for WxD@@m where m is monitor number */
	  else if (1 == sscanf(argv[i + 2], "%*dx%*d@@%d",
						   (int *) &iMonitor)) 
      {
        struct GetMonitorInfoData data;
        if (!QueryMonitor(iMonitor, &data))
        {
		  ErrorF ("ddxProcessArgument - screen - "
                  "Querying monitors is not supported on NT4 and Win95\n");
        } else if (data.bMonitorSpecifiedExists == TRUE) 
        {
		  winErrorFVerb (2, "ddxProcessArgument - screen - Found Valid ``@@Monitor'' = %d arg\n", iMonitor);
		  g_ScreenInfo[nScreenNum].fUserGavePosition = TRUE;
		  g_ScreenInfo[nScreenNum].iMonitor = iMonitor;
		  g_ScreenInfo[nScreenNum].dwInitialX = data.monitorOffsetX;
		  g_ScreenInfo[nScreenNum].dwInitialY = data.monitorOffsetY;
		}
		else 
        {
		  /* monitor does not exist, error out */
		  ErrorF ("ddxProcessArgument - screen - Invalid monitor number %d\n",
				  iMonitor);
		  UseMsg ();
		  exit (0);
		  return 0;
		}

	  }
	}
      else if (i + 3 < argc
	       && 1 == sscanf (argv[i + 2], "%d",
			       (int *) &iWidth)
	       && 1 == sscanf (argv[i + 3], "%d",
			       (int *) &iHeight))
	{
	  winErrorFVerb (2, "ddxProcessArgument - screen - Found ``W D'' arg\n");
	  iArgsProcessed = 4;
	  g_ScreenInfo[nScreenNum].fUserGaveHeightAndWidth = TRUE;
	  g_ScreenInfo[nScreenNum].dwWidth = iWidth;
	  g_ScreenInfo[nScreenNum].dwHeight = iHeight;
	  g_ScreenInfo[nScreenNum].dwUserWidth = iWidth;
	  g_ScreenInfo[nScreenNum].dwUserHeight = iHeight;
	  if (i + 5 < argc
	      && 1 == sscanf (argv[i + 4], "%d",
			      (int *) &iX)
	      && 1 == sscanf (argv[i + 5], "%d",
			      (int *) &iY))
	  {
	    winErrorFVerb (2, "ddxProcessArgument - screen - Found ``X Y'' arg\n");
	    iArgsProcessed = 6;
	    g_ScreenInfo[nScreenNum].fUserGavePosition = TRUE;
	    g_ScreenInfo[nScreenNum].dwInitialX = iX;
	    g_ScreenInfo[nScreenNum].dwInitialY = iY;
	  }
	}
      else
	{
	  winErrorFVerb (2, "ddxProcessArgument - screen - Did not find size arg. "
		  "dwWidth: %d dwHeight: %d\n",
		  (int) g_ScreenInfo[nScreenNum].dwWidth,
		  (int) g_ScreenInfo[nScreenNum].dwHeight);
	  iArgsProcessed = 2;
	  g_ScreenInfo[nScreenNum].fUserGaveHeightAndWidth = FALSE;
	}

      /* Flag that this screen was explicity specified by the user */
      g_ScreenInfo[nScreenNum].fExplicitScreen = TRUE;

      /*
       * Keep track of the last screen number seen, as parameters seen
       * before a screen number apply to all screens, whereas parameters
       * seen after a screen number apply to that screen number only.
       */
      iLastScreen = nScreenNum;

      return iArgsProcessed;
    }


  /*
   * Is this parameter attached to a screen or global?
   *
   * If the parameter is for all screens (appears before
   * any -screen option), store it in the default screen
   * info
   *
   * If the parameter is for a single screen (appears
   * after a -screen option), store it in the screen info
   * for that screen
   *
   */
  if (iLastScreen == -1)
    {
      screenInfoPtr = &defaultScreenInfo;
    }
  else
    {
      screenInfoPtr = &(g_ScreenInfo[iLastScreen]);
    }

  /*
   * Look for the '-engine n' argument
   */
  if (IS_OPTION ("-engine"))
    {
      DWORD		dwEngine = 0;
      CARD8		c8OnBits = 0;
      
      /* Display the usage message if the argument is malformed */
      if (++i >= argc)
	{
	  UseMsg ();
	  return 0;
	}

      /* Grab the argument */
      dwEngine = atoi (argv[i]);

      /* Count the one bits in the engine argument */
      c8OnBits = winCountBits (dwEngine);

      /* Argument should only have a single bit on */
      if (c8OnBits != 1)
	{
	  UseMsg ();
	  return 0;
	}

      screenInfoPtr->dwEnginePreferred = dwEngine;
      
      /* Indicate that we have processed the argument */
      return 2;
    }

  /*
   * Look for the '-fullscreen' argument
   */
  if (IS_OPTION ("-fullscreen"))
    {
d531 1
a531 1
          if (!screenInfoPtr->fMultiMonitorOverride)
d534 1
a534 1
	  screenInfoPtr->fFullScreen = TRUE;
d536 2
a537 2
      /* Indicate that we have processed this argument */
      return 1;
d540 5
a544 6
  /*
   * Look for the '-lesspointer' argument
   */
  if (IS_OPTION ("-lesspointer"))
    {
      screenInfoPtr->fLessPointer = TRUE;
d546 2
a547 2
      /* Indicate that we have processed this argument */
      return 1;
d550 4
a553 5
  /*
   * Look for the '-nodecoration' argument
   */
  if (IS_OPTION ("-nodecoration"))
    {
d555 2
a556 2
      if (!screenInfoPtr->fMultiMonitorOverride)
        screenInfoPtr->fMultipleMonitors = FALSE;
d558 1
a558 1
      screenInfoPtr->fDecoration = FALSE;
d560 2
a561 2
      /* Indicate that we have processed this argument */
      return 1;
d565 22
a586 24
  /*
   * Look for the '-mwextwm' argument
   */
  if (IS_OPTION ("-mwextwm"))
    {
      if (!screenInfoPtr->fMultiMonitorOverride)
        screenInfoPtr->fMultipleMonitors = TRUE;
      screenInfoPtr->fMWExtWM = TRUE;

      /* Indicate that we have processed this argument */
      return 1;
    }
  /*
   * Look for the '-internalwm' argument
   */
  if (IS_OPTION ("-internalwm"))
    {
      if (!screenInfoPtr->fMultiMonitorOverride)
        screenInfoPtr->fMultipleMonitors = TRUE;
      screenInfoPtr->fMWExtWM = TRUE;
      screenInfoPtr->fInternalWM = TRUE;

      /* Indicate that we have processed this argument */
      return 1;
d590 4
a593 5
  /*
   * Look for the '-rootless' argument
   */
  if (IS_OPTION ("-rootless"))
    {
d595 2
a596 2
      if (!screenInfoPtr->fMultiMonitorOverride)
        screenInfoPtr->fMultipleMonitors = FALSE;
d598 1
a598 1
      screenInfoPtr->fRootless = TRUE;
d600 2
a601 2
      /* Indicate that we have processed this argument */
      return 1;
d605 4
a608 5
  /*
   * Look for the '-multiwindow' argument
   */
  if (IS_OPTION ("-multiwindow"))
    {
d610 2
a611 2
      if (!screenInfoPtr->fMultiMonitorOverride)
        screenInfoPtr->fMultipleMonitors = TRUE;
d613 1
a613 1
      screenInfoPtr->fMultiWindow = TRUE;
d615 2
a616 2
      /* Indicate that we have processed this argument */
      return 1;
d620 5
a624 6
  /*
   * Look for the '-multiplemonitors' argument
   */
  if (IS_OPTION ("-multiplemonitors")
      || IS_OPTION ("-multimonitors"))
    {
d626 1
a626 1
      screenInfoPtr->fMultiMonitorOverride = TRUE;
d628 1
a628 1
      screenInfoPtr->fMultipleMonitors = TRUE;
d630 2
a631 2
      /* Indicate that we have processed this argument */
      return 1;
d634 5
a638 6
  /*
   * Look for the '-nomultiplemonitors' argument
   */
  if (IS_OPTION ("-nomultiplemonitors")
      || IS_OPTION ("-nomultimonitors"))
    {
d640 1
a640 1
      screenInfoPtr->fMultiMonitorOverride = TRUE;
d642 1
a642 1
      screenInfoPtr->fMultipleMonitors = FALSE;
d644 2
a645 2
      /* Indicate that we have processed this argument */
      return 1;
d648 4
d653 1
a653 5
  /*
   * Look for the '-scrollbars' argument
   */
  if (IS_OPTION ("-scrollbars"))
    {
d655 2
a656 4
      screenInfoPtr->iResizeMode = resizeWithScrollbars;

      /* Indicate that we have processed this argument */
      return 1;
d659 6
a664 7
  /*
   * Look for the '-resize' argument
   */
  if (IS_OPTION ("-resize") || IS_OPTION ("-noresize") ||
      (strncmp(argv[i], "-resize=",strlen("-resize=")) == 0))
    {
      winResizeMode mode;
d666 1
a666 8
      if (IS_OPTION ("-resize"))
        mode = resizeWithRandr;
      else if (IS_OPTION ("-noresize"))
        mode = notAllowed;
      else if (strncmp(argv[i], "-resize=",strlen("-resize=")) == 0)
        {
          char *option = argv[i] + strlen("-resize=");
          if (strcmp(option, "randr") == 0)
d668 1
a668 3
          else if (strcmp(option, "scrollbars") == 0)
            mode = resizeWithScrollbars;
          else if (strcmp(option, "none") == 0)
d670 13
a682 4
          else
            {
              ErrorF ("ddxProcessArgument - resize - Invalid resize mode %s\n", option);
              return 0;
d685 4
a688 4
      else
        {
          ErrorF ("ddxProcessArgument - resize - Invalid resize option %s\n", argv[i]);
          return 0;
d691 1
a691 1
      screenInfoPtr->iResizeMode = mode;
d693 2
a694 2
      /* Indicate that we have processed this argument */
      return 1;
d698 19
a716 21
  /*
   * Look for the '-clipboard' argument
   */
  if (IS_OPTION ("-clipboard"))
    {
      /* Now the default, we still accept the arg for backwards compatibility */
      g_fClipboard = TRUE;

      /* Indicate that we have processed this argument */
      return 1;
    }

  /*
   * Look for the '-noclipboard' argument
   */
  if (IS_OPTION ("-noclipboard"))
    {
      g_fClipboard = FALSE;

      /* Indicate that we have processed this argument */
      return 1;
d720 5
d726 24
a749 26
  /*
   * Look for the '-ignoreinput' argument
   */
  if (IS_OPTION ("-ignoreinput"))
    {
      screenInfoPtr->fIgnoreInput = TRUE;

      /* Indicate that we have processed this argument */
      return 1;
    }

  /*
   * Look for the '-emulate3buttons' argument
   */
  if (IS_OPTION ("-emulate3buttons"))
    {
      int	iArgsProcessed = 1;
      int	iE3BTimeout = WIN_DEFAULT_E3B_TIME;

      /* Grab the optional timeout value */
      if (i + 1 < argc
	  && 1 == sscanf (argv[i + 1], "%d",
			  &iE3BTimeout))
        {
	  /* Indicate that we have processed the next argument */
	  iArgsProcessed++;
a750 76
      else
	{
	  /*
	   * sscanf () won't modify iE3BTimeout if it doesn't find
	   * the specified format; however, I want to be explicit
	   * about setting the default timeout in such cases to
	   * prevent some programs (me) from getting confused.
	   */
	  iE3BTimeout = WIN_DEFAULT_E3B_TIME;
	}

      screenInfoPtr->iE3BTimeout = iE3BTimeout;

      /* Indicate that we have processed this argument */
      return iArgsProcessed;
    }

  /*
   * Look for the '-depth n' argument
   */
  if (IS_OPTION ("-depth"))
    {
      DWORD		dwBPP = 0;
      
      /* Display the usage message if the argument is malformed */
      if (++i >= argc)
	{
	  UseMsg ();
	  return 0;
	}

      /* Grab the argument */
      dwBPP = atoi (argv[i]);

      screenInfoPtr->dwBPP = dwBPP;

      /* Indicate that we have processed the argument */
      return 2;
    }

  /*
   * Look for the '-refresh n' argument
   */
  if (IS_OPTION ("-refresh"))
    {
      DWORD		dwRefreshRate = 0;
      
      /* Display the usage message if the argument is malformed */
      if (++i >= argc)
	{
	  UseMsg ();
	  return 0;
	}

      /* Grab the argument */
      dwRefreshRate = atoi (argv[i]);

      screenInfoPtr->dwRefreshRate = dwRefreshRate;

      /* Indicate that we have processed the argument */
      return 2;
    }

  /*
   * Look for the '-clipupdates num_boxes' argument
   */
  if (IS_OPTION ("-clipupdates"))
    {
      DWORD		dwNumBoxes = 0;
      
      /* Display the usage message if the argument is malformed */
      if (++i >= argc)
	{
	  UseMsg ();
	  return 0;
	}
d752 1
a752 2
      /* Grab the argument */
      dwNumBoxes = atoi (argv[i]);
d754 3
a756 1
      screenInfoPtr->dwClipUpdatesNBoxes = dwNumBoxes;
d758 71
a828 2
      /* Indicate that we have processed the argument */
      return 2;
d832 113
a944 125
  /*
   * Look for the '-emulatepseudo' argument
   */
  if (IS_OPTION ("-emulatepseudo"))
    {
      screenInfoPtr->fEmulatePseudo = TRUE;

      /* Indicate that we have processed this argument */
      return 1;
    }
#endif

  /*
   * Look for the '-nowinkill' argument
   */
  if (IS_OPTION ("-nowinkill"))
    {
      screenInfoPtr->fUseWinKillKey = FALSE;

      /* Indicate that we have processed this argument */
      return 1;
    }

  /*
   * Look for the '-winkill' argument
   */
  if (IS_OPTION ("-winkill"))
    {
      screenInfoPtr->fUseWinKillKey = TRUE;

      /* Indicate that we have processed this argument */
      return 1;
    }

  /*
   * Look for the '-nounixkill' argument
   */
  if (IS_OPTION ("-nounixkill"))
    {
      screenInfoPtr->fUseUnixKillKey = FALSE;

      /* Indicate that we have processed this argument */
      return 1;
    }

  /*
   * Look for the '-unixkill' argument
   */
  if (IS_OPTION ("-unixkill"))
    {
      screenInfoPtr->fUseUnixKillKey = TRUE;

      /* Indicate that we have processed this argument */
      return 1;
    }

  /*
   * Look for the '-notrayicon' argument
   */
  if (IS_OPTION ("-notrayicon"))
    {
      screenInfoPtr->fNoTrayIcon = TRUE;

      /* Indicate that we have processed this argument */
      return 1;
    }

  /*
   * Look for the '-trayicon' argument
   */
  if (IS_OPTION ("-trayicon"))
    {
      screenInfoPtr->fNoTrayIcon = FALSE;

      /* Indicate that we have processed this argument */
      return 1;
    }

  /*
   * Look for the '-fp' argument
   */
  if (IS_OPTION ("-fp"))
    {
      CHECK_ARGS (1);
      g_cmdline.fontPath = argv[++i];
      return 0; /* Let DIX parse this again */
    }

  /*
   * Look for the '-query' argument
   */
  if (IS_OPTION ("-query"))
    {
      CHECK_ARGS (1);
      g_fXdmcpEnabled = TRUE;
      g_pszQueryHost = argv[++i];
      return 0; /* Let DIX parse this again */
    }

  /*
   * Look for the '-auth' argument
   */
  if (IS_OPTION ("-auth"))
    {
      g_fAuthEnabled = TRUE;
      return 0; /* Let DIX parse this again */
    }

  /*
   * Look for the '-indirect' or '-broadcast' arguments
   */
  if (IS_OPTION ("-indirect")
      || IS_OPTION ("-broadcast"))
    {
      g_fXdmcpEnabled = TRUE;
      return 0; /* Let DIX parse this again */
    }

  /*
   * Look for the '-config' argument
   */
  if (IS_OPTION ("-config")
      || IS_OPTION ("-xf86config"))
    {
      CHECK_ARGS (1);
d946 1
a946 1
      g_cmdline.configFile = argv[++i];
d948 6
a953 7
      winMessageBoxF ("The %s option is not supported in this "
		      "release.\n"
		      "Ignoring this option and continuing.\n",
		      MB_ICONINFORMATION,
		      argv[i]);
#endif
      return 2;
d956 5
a960 6
  /*
   * Look for the '-configdir' argument
   */
  if (IS_OPTION ("-configdir"))
    {
      CHECK_ARGS (1);
d962 1
a962 1
      g_cmdline.configDir = argv[++i];
d964 6
a969 7
      winMessageBoxF ("The %s option is not supported in this "
		      "release.\n"
		      "Ignoring this option and continuing.\n",
		      MB_ICONINFORMATION,
		      argv[i]);
#endif
      return 2;
d972 4
a975 5
  /*
   * Look for the '-keyboard' argument
   */
  if (IS_OPTION ("-keyboard"))
    {
d977 2
a978 2
      CHECK_ARGS (1);
      g_cmdline.keyboard = argv[++i];
d980 6
a985 6
      winMessageBoxF ("The -keyboard option is not supported in this "
		      "release.\n"
		      "Ignoring this option and continuing.\n",
		      MB_ICONINFORMATION);
#endif
      return 2;
d988 6
a993 7
  /*
   * Look for the '-logfile' argument
   */
  if (IS_OPTION ("-logfile"))
    {
      CHECK_ARGS (1);
      g_pszLogFile = argv[++i];
d995 1
a995 1
      g_fLogFileChanged = TRUE;
d997 1
a997 1
      return 2;
d1000 7
a1006 8
  /*
   * Look for the '-logverbose' argument
   */
  if (IS_OPTION ("-logverbose"))
    {
      CHECK_ARGS (1);
      g_iLogVerbose = atoi(argv[++i]);
      return 2;
d1010 59
a1068 76
  /*
   * Look for the '-nounicodeclipboard' argument
   */
  if (IS_OPTION ("-nounicodeclipboard"))
    {
      g_fUnicodeClipboard = FALSE;
      /* Indicate that we have processed the argument */
      return 1;
    }
#endif

  if (IS_OPTION ("-xkbrules"))
    {
      CHECK_ARGS (1);
      g_cmdline.xkbRules = argv[++i];
      return 2;
    }
  if (IS_OPTION ("-xkbmodel"))
    {
      CHECK_ARGS (1);
      g_cmdline.xkbModel = argv[++i];
      return 2;
    }
  if (IS_OPTION ("-xkblayout"))
    {
      CHECK_ARGS (1);
      g_cmdline.xkbLayout = argv[++i];
      return 2;
    }
  if (IS_OPTION ("-xkbvariant"))
    {
      CHECK_ARGS (1);
      g_cmdline.xkbVariant = argv[++i];
      return 2;
    }
  if (IS_OPTION ("-xkboptions"))
    {
      CHECK_ARGS (1);
      g_cmdline.xkbOptions = argv[++i];
      return 2;
    }

  if (IS_OPTION ("-keyhook"))
    {
      g_fKeyboardHookLL = TRUE;
      return 1;
    }
  
  if (IS_OPTION ("-nokeyhook"))
    {
      g_fKeyboardHookLL = FALSE;
      return 1;
    }
  
  if (IS_OPTION ("-swcursor"))
    {
      g_fSoftwareCursor = TRUE;
      return 1;
    }
  
  if (IS_OPTION ("-silent-dup-error"))
    {
      g_fSilentDupError = TRUE;
      return 1;
    }

  if (IS_OPTION("-wgl"))
    {
      g_fNativeGl = TRUE;
      return 1;
    }

  if (IS_OPTION("-nowgl"))
    {
      g_fNativeGl = FALSE;
      return 1;
d1071 6
a1076 1
  return 0;
a1078 1

d1084 1
a1084 1
winLogCommandLine (int argc, char *argv[])
d1086 3
a1088 3
  int		i;
  int		iSize = 0;
  int		iCurrLen = 0;
d1092 14
a1105 49
  /* Bail if command line has already been logged */
  if (g_pszCommandLine)
    return;

  /* Count how much memory is needed for concatenated command line */
  for (i = 0, iCurrLen = 0; i < argc; ++i)
    if (argv[i])
      {
	/* Adds two characters for lines that overflow */
	if ((strlen (argv[i]) < CHARS_PER_LINE
	    && iCurrLen + strlen (argv[i]) > CHARS_PER_LINE)
	    || strlen (argv[i]) > CHARS_PER_LINE)
	  {
	    iCurrLen = 0;
	    iSize += 2;
	  }
	
	/* Add space for item and trailing space */
	iSize += strlen (argv[i]) + 1;

	/* Update current line length */
	iCurrLen += strlen (argv[i]);
      }

  /* Allocate memory for concatenated command line */
  g_pszCommandLine = malloc (iSize + 1);
  if (!g_pszCommandLine)
    FatalError ("winLogCommandLine - Could not allocate memory for "
		"command line string.  Exiting.\n");
  
  /* Set first character to concatenated command line to null */
  g_pszCommandLine[0] = '\0';

  /* Loop through all args */
  for (i = 0, iCurrLen = 0; i < argc; ++i)
    {
      /* Add a character for lines that overflow */
      if ((strlen (argv[i]) < CHARS_PER_LINE
	   && iCurrLen + strlen (argv[i]) > CHARS_PER_LINE)
	  || strlen (argv[i]) > CHARS_PER_LINE)
      {
	iCurrLen = 0;
	
	/* Add line break if it fits */
	strncat (g_pszCommandLine, "\n ", iSize - strlen (g_pszCommandLine));
      }
      
      strncat (g_pszCommandLine, argv[i], iSize - strlen (g_pszCommandLine));
      strncat (g_pszCommandLine, " ", iSize - strlen (g_pszCommandLine));
d1107 33
a1139 2
      /* Save new line length */
      iCurrLen += strlen (argv[i]);
d1142 2
a1143 2
  ErrorF ("XWin was started with the following command line:\n\n"
	  "%s\n\n", g_pszCommandLine);
a1145 1

d1147 1
a1147 1
 * winLogVersionInfo - Log Cygwin/X version information
d1151 1
a1151 1
winLogVersionInfo (void)
d1153 1
a1153 1
  static Bool		s_fBeenHere = FALSE;
d1155 11
a1165 9
  if (s_fBeenHere)
    return;
  s_fBeenHere = TRUE;

  ErrorF ("Welcome to the XWin X Server\n");
  ErrorF ("Vendor: %s\n", XVENDORNAME);
  ErrorF ("Release: %d.%d.%d.%d (%d)\n", XORG_VERSION_MAJOR, XORG_VERSION_MINOR, XORG_VERSION_PATCH, XORG_VERSION_SNAP, XORG_VERSION_CURRENT);
  ErrorF ("%s\n\n", BUILDERSTRING);
  ErrorF ("Contact: %s\n", BUILDERADDR);
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d33 1
a33 4
#ifdef XVENDORNAME
#define VENDOR_STRING XVENDORNAME
#define VENDOR_CONTACT BUILDERADDR
#endif
a36 1
#include "winprefs.h"
d38 1
a43 2
extern int			g_iNumScreens;
extern winScreenInfo *		g_ScreenInfo;
a47 63
extern int			g_iLogVerbose;
extern const char *		g_pszLogFile;
#ifdef RELOCATE_PROJECTROOT
extern Bool			g_fLogFileChanged;
#endif
extern Bool			g_fXdmcpEnabled;
extern Bool			g_fAuthEnabled;
extern char *			g_pszCommandLine;
extern Bool			g_fKeyboardHookLL;
extern Bool			g_fNoHelpMessageBox;                     
extern Bool			g_fSoftwareCursor;
extern Bool			g_fSilentDupError;
extern Bool                     g_fNativeGl;

/* globals required by callback function for monitor information */
struct GetMonitorInfoData {
    int  requestedMonitor;
    int  monitorNum;
    Bool bUserSpecifiedMonitor;
    Bool bMonitorSpecifiedExists;
    int  monitorOffsetX;
    int  monitorOffsetY;
    int  monitorHeight;
    int  monitorWidth;
};

typedef wBOOL (*ENUMDISPLAYMONITORSPROC)(HDC,LPCRECT,MONITORENUMPROC,LPARAM);
ENUMDISPLAYMONITORSPROC _EnumDisplayMonitors;

wBOOL CALLBACK getMonitorInfo(HMONITOR hMonitor, HDC hdc, LPRECT rect, LPARAM _data);

static Bool QueryMonitor(int index, struct GetMonitorInfoData *data)
{
    /* Load EnumDisplayMonitors from DLL */
    HMODULE user32;
    FARPROC func;
    user32 = LoadLibrary("user32.dll");
    if (user32 == NULL)
    {
        winW32Error(2, "Could not open user32.dll");
        return FALSE;
    }
    func = GetProcAddress(user32, "EnumDisplayMonitors");
    if (func == NULL)
    {
        winW32Error(2, "Could not resolve EnumDisplayMonitors: ");
        return FALSE;
    }
    _EnumDisplayMonitors = (ENUMDISPLAYMONITORSPROC)func;
    
    /* prepare data */
    if (data == NULL)
        return FALSE;
    memset(data, 0, sizeof(*data));
    data->requestedMonitor = index;

    /* query information */
    _EnumDisplayMonitors(NULL, NULL, getMonitorInfo, (LPARAM) data);

    /* cleanup */
    FreeLibrary(user32);
    return TRUE;
}
d98 1
d127 1
a127 1
  defaultScreenInfo.fScrollbars = FALSE;
a129 2
  defaultScreenInfo.dwWidth_mm = (dwWidth / WIN_DEFAULT_DPI) * 25.4;
  defaultScreenInfo.dwHeight_mm = (dwHeight / WIN_DEFAULT_DPI) * 25.4;
d322 1
d375 1
d405 1
a456 11
      /* Calculate the screen width and height in millimeters */
      if (g_ScreenInfo[nScreenNum].fUserGaveHeightAndWidth)
	{
	  g_ScreenInfo[nScreenNum].dwWidth_mm
	    = (g_ScreenInfo[nScreenNum].dwWidth
	       / monitorResolution) * 25.4;
	  g_ScreenInfo[nScreenNum].dwHeight_mm
	    = (g_ScreenInfo[nScreenNum].dwHeight
	       / monitorResolution) * 25.4;
	}

d663 2
a664 1
      screenInfoPtr->fScrollbars = TRUE;
d670 38
d1213 1
a1213 1
  ErrorF ("Vendor: %s\n", VENDOR_STRING);
d1216 1
a1216 22
  ErrorF ("Contact: %s\n", VENDOR_CONTACT);
}

/*
 * getMonitorInfo - callback function used to return information from the enumeration of monitors attached
 */

wBOOL CALLBACK getMonitorInfo(HMONITOR hMonitor, HDC hdc, LPRECT rect, LPARAM _data) 
{
  struct GetMonitorInfoData* data = (struct GetMonitorInfoData*)_data;
  // only get data for monitor number specified in <data>
  data->monitorNum++;
  if (data->monitorNum == data->requestedMonitor) 
  {
	data->bMonitorSpecifiedExists = TRUE;
	data->monitorOffsetX = rect->left;
	data->monitorOffsetY = rect->top;
	data->monitorHeight  = rect->bottom - rect->top;
	data->monitorWidth   = rect->right  - rect->left;
    return FALSE;
  }
  return TRUE;
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d48 1
a48 3
extern winScreenInfo		g_ScreenInfo[];
extern int			g_iLastScreen;
extern Bool			g_fInitializedDefaultScreens;
d65 1
a130 3
void
winInitializeDefaultScreens (void);

d135 5
a139 2
void
winInitializeDefaultScreens (void)
d141 2
a142 2
  int                   i;
  DWORD			dwWidth, dwHeight;
d144 2
a145 2
  /* Bail out early if default screens have already been initialized */
  if (g_fInitializedDefaultScreens)
d149 1
a149 1
  ZeroMemory (g_ScreenInfo, MAXSCREENS * sizeof (winScreenInfo));
d159 1
a159 1
  winErrorFVerb (2, "winInitializeDefaultScreens - w %d h %d\n",
d166 8
a173 12
  for (i = 0; i < MAXSCREENS; ++i)
    {
      g_ScreenInfo[i].dwScreen = i;
      g_ScreenInfo[i].dwWidth  = dwWidth;
      g_ScreenInfo[i].dwHeight = dwHeight;
      g_ScreenInfo[i].dwUserWidth  = dwWidth;
      g_ScreenInfo[i].dwUserHeight = dwHeight;
      g_ScreenInfo[i].fUserGaveHeightAndWidth
	=  WIN_DEFAULT_USER_GAVE_HEIGHT_AND_WIDTH;
      g_ScreenInfo[i].fUserGavePosition = FALSE;
      g_ScreenInfo[i].dwBPP = WIN_DEFAULT_BPP;
      g_ScreenInfo[i].dwClipUpdatesNBoxes = WIN_DEFAULT_CLIP_UPDATES_NBOXES;
d175 1
a175 1
      g_ScreenInfo[i].fEmulatePseudo = WIN_DEFAULT_EMULATE_PSEUDO;
d177 4
a180 4
      g_ScreenInfo[i].dwRefreshRate = WIN_DEFAULT_REFRESH;
      g_ScreenInfo[i].pfb = NULL;
      g_ScreenInfo[i].fFullScreen = FALSE;
      g_ScreenInfo[i].fDecoration = TRUE;
d182 2
a183 2
      g_ScreenInfo[i].fMWExtWM = FALSE;
      g_ScreenInfo[i].fInternalWM = FALSE;
d185 1
a185 1
      g_ScreenInfo[i].fRootless = FALSE;
d187 1
a187 1
      g_ScreenInfo[i].fMultiWindow = FALSE;
d190 1
a190 1
      g_ScreenInfo[i].fMultiMonitorOverride = FALSE;
d192 41
a232 14
      g_ScreenInfo[i].fMultipleMonitors = FALSE;
      g_ScreenInfo[i].fLessPointer = FALSE;
      g_ScreenInfo[i].fScrollbars = FALSE;
      g_ScreenInfo[i].fNoTrayIcon = FALSE;
      g_ScreenInfo[i].iE3BTimeout = WIN_E3B_OFF;
      g_ScreenInfo[i].dwWidth_mm = (dwWidth / WIN_DEFAULT_DPI)
	* 25.4;
      g_ScreenInfo[i].dwHeight_mm = (dwHeight / WIN_DEFAULT_DPI)
	* 25.4;
      g_ScreenInfo[i].fUseWinKillKey = WIN_DEFAULT_WIN_KILL;
      g_ScreenInfo[i].fUseUnixKillKey = WIN_DEFAULT_UNIX_KILL;
      g_ScreenInfo[i].fIgnoreInput = FALSE;
      g_ScreenInfo[i].fExplicitScreen = FALSE;
    }
d234 3
a236 2
  /* Signal that the default screens have been initialized */
  g_fInitializedDefaultScreens = TRUE;
d238 3
a240 1
  winErrorFVerb (2, "winInitializeDefaultScreens - Returning\n");
d272 1
d305 1
a305 1
	  winInitializeDefaultScreens ();
d360 1
a360 1
      if (nScreenNum < 0 || nScreenNum >= MAXSCREENS)
d368 8
d542 4
a545 1
      g_iLastScreen = nScreenNum;
a546 2
      /* Keep a count of the number of screens */
      ++g_iNumScreens;
d548 19
a566 1
      return iArgsProcessed;
d597 1
a597 16
      /* Is this parameter attached to a screen or global? */
      if (-1 == g_iLastScreen)
	{
	  int		j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].dwEnginePreferred = dwEngine;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
	  g_ScreenInfo[g_iLastScreen].dwEnginePreferred = dwEngine;
	}
a607 18
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
#if defined(XWIN_MULTIWINDOW) || defined(XWIN_MULTIWINDOWEXTWM)
              if (!g_ScreenInfo[j].fMultiMonitorOverride)
                g_ScreenInfo[j].fMultipleMonitors = FALSE;
#endif
	      g_ScreenInfo[j].fFullScreen = TRUE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
d609 2
a610 2
          if (!g_ScreenInfo[g_iLastScreen].fMultiMonitorOverride)
            g_ScreenInfo[g_iLastScreen].fMultipleMonitors = FALSE;
d612 1
a612 2
	  g_ScreenInfo[g_iLastScreen].fFullScreen = TRUE;
	}
d623 1
a623 16
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].fLessPointer = TRUE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
          g_ScreenInfo[g_iLastScreen].fLessPointer = TRUE;
	}
a633 18
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
#if defined(XWIN_MULTIWINDOW) || defined(XWIN_MULTIWINDOWEXTWM)
              if (!g_ScreenInfo[j].fMultiMonitorOverride)
                g_ScreenInfo[j].fMultipleMonitors = FALSE;
#endif
	      g_ScreenInfo[j].fDecoration = FALSE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
d635 2
a636 2
          if (!g_ScreenInfo[g_iLastScreen].fMultiMonitorOverride)
            g_ScreenInfo[g_iLastScreen].fMultipleMonitors = FALSE;
d638 1
a638 2
	  g_ScreenInfo[g_iLastScreen].fDecoration = FALSE;
	}
d650 3
a652 20
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
              if (!g_ScreenInfo[j].fMultiMonitorOverride)
                g_ScreenInfo[j].fMultipleMonitors = TRUE;
	      g_ScreenInfo[j].fMWExtWM = TRUE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
          if (!g_ScreenInfo[g_iLastScreen].fMultiMonitorOverride)
            g_ScreenInfo[g_iLastScreen].fMultipleMonitors = TRUE;
	  g_ScreenInfo[g_iLastScreen].fMWExtWM = TRUE;
	}
d662 4
a665 22
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      if (!g_ScreenInfo[j].fMultiMonitorOverride)
	        g_ScreenInfo[j].fMultipleMonitors = TRUE;
	      g_ScreenInfo[j].fMWExtWM = TRUE;
	      g_ScreenInfo[j].fInternalWM = TRUE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
	  if (!g_ScreenInfo[g_iLastScreen].fMultiMonitorOverride)
	    g_ScreenInfo[g_iLastScreen].fMultipleMonitors = TRUE;
	  g_ScreenInfo[g_iLastScreen].fMWExtWM = TRUE;
	  g_ScreenInfo[g_iLastScreen].fInternalWM = TRUE;
	}
a676 18
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
#if defined(XWIN_MULTIWINDOW) || defined(XWIN_MULTIWINDOWEXTWM)
              if (!g_ScreenInfo[j].fMultiMonitorOverride)
                g_ScreenInfo[j].fMultipleMonitors = FALSE;
#endif
	      g_ScreenInfo[j].fRootless = TRUE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
d678 2
a679 2
          if (!g_ScreenInfo[g_iLastScreen].fMultiMonitorOverride)
            g_ScreenInfo[g_iLastScreen].fMultipleMonitors = FALSE;
d681 1
a681 2
	  g_ScreenInfo[g_iLastScreen].fRootless = TRUE;
	}
a692 18
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
#if defined(XWIN_MULTIWINDOW) || defined(XWIN_MULTIWINDOWEXTWM)
              if (!g_ScreenInfo[j].fMultiMonitorOverride)
                g_ScreenInfo[j].fMultipleMonitors = TRUE;
#endif
	      g_ScreenInfo[j].fMultiWindow = TRUE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
d694 2
a695 2
          if (!g_ScreenInfo[g_iLastScreen].fMultiMonitorOverride)
            g_ScreenInfo[g_iLastScreen].fMultipleMonitors = TRUE;
d697 1
a697 2
	  g_ScreenInfo[g_iLastScreen].fMultiWindow = TRUE;
	}
a709 17
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
#if defined(XWIN_MULTIWINDOW) || defined(XWIN_MULTIWINDOWEXTWM)
              g_ScreenInfo[j].fMultiMonitorOverride = TRUE;
#endif
	      g_ScreenInfo[j].fMultipleMonitors = TRUE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
d711 1
a711 1
          g_ScreenInfo[g_iLastScreen].fMultiMonitorOverride = TRUE;
d713 1
a713 2
	  g_ScreenInfo[g_iLastScreen].fMultipleMonitors = TRUE;
	}
a724 17
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
#if defined(XWIN_MULTIWINDOW) || defined(XWIN_MULTIWINDOWEXTWM)
              g_ScreenInfo[j].fMultiMonitorOverride = TRUE;
#endif
	      g_ScreenInfo[j].fMultipleMonitors = FALSE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
d726 1
a726 1
          g_ScreenInfo[g_iLastScreen].fMultiMonitorOverride = TRUE;
d728 1
a728 2
	  g_ScreenInfo[g_iLastScreen].fMultipleMonitors = FALSE;
	}
d740 1
a740 16
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].fScrollbars = TRUE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
	  g_ScreenInfo[g_iLastScreen].fScrollbars = TRUE;
	}
d778 1
a778 16
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].fIgnoreInput = TRUE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
	  g_ScreenInfo[g_iLastScreen].fIgnoreInput = TRUE;
	}
d811 1
a811 16
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].iE3BTimeout = iE3BTimeout;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
	  g_ScreenInfo[g_iLastScreen].iE3BTimeout = iE3BTimeout;
	}
d834 1
a834 4
      /* Is this parameter attached to a screen or global? */
      if (-1 == g_iLastScreen)
	{
	  int		j;
a835 12
	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].dwBPP = dwBPP;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
	  g_ScreenInfo[g_iLastScreen].dwBPP = dwBPP;
	}
      
d857 1
a857 4
      /* Is this parameter attached to a screen or global? */
      if (-1 == g_iLastScreen)
	{
	  int		j;
a858 12
	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].dwRefreshRate = dwRefreshRate;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
	  g_ScreenInfo[g_iLastScreen].dwRefreshRate = dwRefreshRate;
	}
      
d880 1
a880 4
      /* Is this parameter attached to a screen or global? */
      if (-1 == g_iLastScreen)
	{
	  int		j;
a881 12
	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].dwClipUpdatesNBoxes = dwNumBoxes;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
	  g_ScreenInfo[g_iLastScreen].dwClipUpdatesNBoxes = dwNumBoxes;
	}
      
d892 1
a892 16
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].fEmulatePseudo = TRUE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
          g_ScreenInfo[g_iLastScreen].fEmulatePseudo = TRUE;
	}
d904 1
a904 16
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].fUseWinKillKey = FALSE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
	  g_ScreenInfo[g_iLastScreen].fUseWinKillKey = FALSE;
	}
d915 1
a915 16
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].fUseWinKillKey = TRUE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
	  g_ScreenInfo[g_iLastScreen].fUseWinKillKey = TRUE;
	}
d926 1
a926 16
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].fUseUnixKillKey = FALSE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
	  g_ScreenInfo[g_iLastScreen].fUseUnixKillKey = FALSE;
	}
d937 1
a937 16
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].fUseUnixKillKey = TRUE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
	  g_ScreenInfo[g_iLastScreen].fUseUnixKillKey = TRUE;
	}
d948 1
a948 16
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].fNoTrayIcon = TRUE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
	  g_ScreenInfo[g_iLastScreen].fNoTrayIcon = TRUE;
	}
d959 1
a959 16
      /* Is this parameter attached to a screen or is it global? */
      if (-1 == g_iLastScreen)
	{
	  int			j;

	  /* Parameter is for all screens */
	  for (j = 0; j < MAXSCREENS; j++)
	    {
	      g_ScreenInfo[j].fNoTrayIcon = FALSE;
	    }
	}
      else
	{
	  /* Parameter is for a single screen */
	  g_ScreenInfo[g_iLastScreen].fNoTrayIcon = FALSE;
	}
d1148 13
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d4 1
a34 1
#define VERSION_STRING XORG_RELEASE
d37 1
d56 1
a56 1
extern char *			g_pszLogFile;
d61 1
d892 1
d898 11
d1306 9
d1344 18
a1412 10
#ifdef XKB
  /*
   * Look for the '-kb' argument
   */
  if (IS_OPTION ("-kb"))
    {
      g_cmdline.noXkbExtension = TRUE;  
      return 0; /* Let DIX parse this again */
    }

a1442 1
#endif
d1492 1
a1492 1
	/* Add a character for lines that overflow */
d1498 1
a1498 1
	    ++iSize;
d1528 1
a1528 1
	strncat (g_pszCommandLine, "\n", iSize - strlen (g_pszCommandLine));
d1558 3
a1560 2
  ErrorF ("Release: %s\n\n", VERSION_STRING);
  ErrorF ("Contact: %s\n\n", VENDOR_CONTACT);
@


1.1
log
@Initial revision
@
text
@a1280 10
   * Look for the '-co' argument
   */
  if (IS_OPTION ("-co"))
    {
      CHECK_ARGS (1);
      g_cmdline.rgbPath = argv[++i];
      return 0; /* Let DIX parse this again */
    }

  /*
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
