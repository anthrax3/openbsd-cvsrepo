head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.4
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.4
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.09.16.19.10.24;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	Te1daavkBLskZ8gc;

1.5
date	2014.09.27.17.53.04;	author matthieu;	state Exp;
branches;
next	1.4;
commitid	cVXoV5PxI8YrEaVA;

1.4
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@#!/usr/bin/python3
#
# python script to generate cdecl to stdcall wrappers for GL functions
# adapted from genheaders.py
#
# Copyright (c) 2013 The Khronos Group Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and/or associated documentation files (the
# "Materials"), to deal in the Materials without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Materials, and to
# permit persons to whom the Materials are furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Materials.
#
# THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

import sys, time, pdb, string, cProfile
from reg import *

# Default input / log files
errFilename = None
diagFilename = 'diag.txt'
regFilename = 'gl.xml'
outFilename = 'gen_gl_wrappers.c'

protect=True
prefix="gl"
preresolve=False
wrapper=False
shim=False
thunk=False
thunkdefs=False
staticwrappers=False
nodebug=False

# list of WGL extension functions we use
used_wgl_ext_fns = {key: 1 for key in [
    "wglSwapIntervalEXT",
    "wglGetExtensionsStringARB",
    "wglDestroyPbufferARB",
    "wglGetPbufferDCARB",
    "wglReleasePbufferDCARB",
    "wglCreatePbufferARB",
    "wglMakeContextCurrentARB",
    "wglChoosePixelFormatARB",
    "wglGetPixelFormatAttribivARB",
    "wglGetPixelFormatAttribivARB"
]}

if __name__ == '__main__':
    i = 1
    while (i < len(sys.argv)):
        arg = sys.argv[i]
        i = i + 1
        if (arg == '-noprotect'):
            print('Disabling inclusion protection in output headers', file=sys.stderr)
            protect = False
        elif (arg == '-registry'):
            regFilename = sys.argv[i]
            i = i+1
            print('Using registry', regFilename, file=sys.stderr)
        elif (arg == '-outfile'):
            outFilename = sys.argv[i]
            i = i+1
        elif (arg == '-preresolve'):
            preresolve=True
        elif (arg == '-wrapper'):
            wrapper=True
        elif (arg == '-shim'):
            shim=True
        elif (arg == '-thunk'):
            thunk=True
        elif (arg == '-thunkdefs'):
            thunkdefs=True
        elif (arg == '-staticwrappers'):
            staticwrappers=True
        elif (arg == '-prefix'):
            prefix = sys.argv[i]
            i = i+1
        elif (arg == '-nodebug'):
            nodebug = True
        elif (arg[0:1] == '-'):
            print('Unrecognized argument:', arg, file=sys.stderr)
            exit(1)

print('Generating', outFilename, file=sys.stderr)

# Load & parse registry
reg = Registry()
tree = etree.parse(regFilename)
reg.loadElementTree(tree)

if shim:
    versions = '1\.[012]'
else:
    versions = '.*'

genOpts = CGeneratorOptions(
        apiname           = prefix,
        profile           = 'compatibility',
        versions          = versions,
        emitversions      = versions,
        defaultExtensions = prefix,                   # Default extensions for GL
        protectFile       = protect,
        protectFeature    = protect,
        protectProto      = protect,
        )

# create error/warning & diagnostic files
if (errFilename):
    errWarn = open(errFilename,'w')
else:
    errWarn = sys.stderr
diag = open(diagFilename, 'w')

def ParseCmdRettype(cmd):
    proto=noneStr(cmd.elem.find('proto'))
    rettype=noneStr(proto.text)
    if rettype.lower()!="void ":
        plist = ([t for t in proto.itertext()])
        rettype = ''.join(plist[:-1])
    rettype=rettype.strip()
    return rettype

def ParseCmdParams(cmd):
    params = cmd.elem.findall('param')
    plist=[]
    for param in params:
        # construct the formal parameter definition from ptype and name
        # elements, also using any text found around these in the
        # param element, in the order it appears in the document
        paramtype = ''
        # also extract the formal parameter name from the name element
        paramname = ''
        for t in param.iter():
            if t.tag == 'ptype' or t.tag == 'param':
                paramtype = paramtype + noneStr(t.text)
            if t.tag == 'name':
                paramname = t.text + '_'
                paramtype = paramtype + ' ' + paramname
            if t.tail is not None:
                paramtype = paramtype + t.tail.strip()
        plist.append((paramtype, paramname))
    return plist

class PreResolveOutputGenerator(OutputGenerator):
    def __init__(self,
                 errFile = sys.stderr,
                 warnFile = sys.stderr,
                 diagFile = sys.stdout):
        OutputGenerator.__init__(self, errFile, warnFile, diagFile)
        self.wrappers={}
    def beginFile(self, genOpts):
        self.outFile.write('/* Automatically generated from %s - DO NOT EDIT */\n\n'%regFilename)
    def endFile(self):
        self.outFile.write('\nvoid ' + prefix + 'ResolveExtensionProcs(void)\n{\n')
        for funcname in self.wrappers.keys():
            self.outFile.write( '  PRERESOLVE(PFN' + funcname.upper() + 'PROC, "' + funcname + '");\n')
        self.outFile.write('}\n\n')
    def beginFeature(self, interface, emit):
        OutputGenerator.beginFeature(self, interface, emit)
    def endFeature(self):
        OutputGenerator.endFeature(self)
    def genType(self, typeinfo, name):
        OutputGenerator.genType(self, typeinfo, name)
    def genEnum(self, enuminfo, name):
        OutputGenerator.genEnum(self, enuminfo, name)
    def genCmd(self, cmd, name):
        OutputGenerator.genCmd(self, cmd, name)

        if prefix == 'wgl' and not name in used_wgl_ext_fns:
            return

        self.outFile.write('RESOLVE_DECL(PFN' + name.upper() + 'PROC);\n')
        self.wrappers[name]=1

class WrapperOutputGenerator(OutputGenerator):
    def __init__(self,
                 errFile = sys.stderr,
                 warnFile = sys.stderr,
                 diagFile = sys.stdout):
        OutputGenerator.__init__(self, errFile, warnFile, diagFile)
    def beginFile(self, genOpts):
        self.outFile.write('/* Automatically generated from %s - DO NOT EDIT */\n\n'%regFilename)
    def endFile(self):
        pass
    def beginFeature(self, interface, emit):
        OutputGenerator.beginFeature(self, interface, emit)
        self.OldVersion = self.featureName.startswith('GL_VERSION_1_0') or self.featureName.startswith('GL_VERSION_1_1')
    def endFeature(self):
        OutputGenerator.endFeature(self)
    def genType(self, typeinfo, name):
        OutputGenerator.genType(self, typeinfo, name)
    def genEnum(self, enuminfo, name):
        OutputGenerator.genEnum(self, enuminfo, name)
    def genCmd(self, cmd, name):
        OutputGenerator.genCmd(self, cmd, name)

        if prefix == 'wgl' and not name in used_wgl_ext_fns:
            return

        rettype=ParseCmdRettype(cmd)

        if staticwrappers: self.outFile.write("static ")
        self.outFile.write("%s %sWrapper("%(rettype, name))
        plist=ParseCmdParams(cmd)
        Comma=""
        if len(plist):
            for ptype, pname in plist:
                self.outFile.write("%s%s"%(Comma, ptype))
                Comma=", "
        else:
            self.outFile.write("void")

        self.outFile.write(")\n{\n")

        # for GL 1.0 and 1.1 functions, generate stdcall wrappers which call the function directly
        if self.OldVersion:
            if not nodebug:
                self.outFile.write('  if (glxWinDebugSettings.enable%scallTrace) ErrorF("%s\\n");\n'%(prefix.upper(), name))
                self.outFile.write("  glWinDirectProcCalls++;\n")
                self.outFile.write("\n")

            if rettype.lower()=="void":
                self.outFile.write("  %s( "%(name))
            else:
                self.outFile.write("  return %s( "%(name))

            Comma=""
            for ptype, pname in plist:
                self.outFile.write("%s%s"%(Comma, pname))
                Comma=", "

        # for GL 1.2+ functions, generate stdcall wrappers which use wglGetProcAddress()
        else:
            if rettype.lower()=="void":
                self.outFile.write('  RESOLVE(PFN%sPROC, "%s");\n'%(name.upper(), name))

                if not nodebug:
                    self.outFile.write("\n")
                    self.outFile.write('  if (glxWinDebugSettings.enable%scallTrace) ErrorF("%s\\n");\n'%(prefix.upper(), name))
                    self.outFile.write("\n")

                self.outFile.write("  RESOLVED_PROC(PFN%sPROC)( """%(name.upper()))
            else:
                self.outFile.write('  RESOLVE_RET(PFN%sPROC, "%s", FALSE);\n'%(name.upper(), name))

                if not nodebug:
                    self.outFile.write("\n")
                    self.outFile.write('  if (glxWinDebugSettings.enable%scallTrace) ErrorF("%s\\n");\n'%(prefix.upper(), name))
                    self.outFile.write("\n")

                self.outFile.write("  return RESOLVED_PROC(PFN%sPROC)("%(name.upper()))

            Comma=""
            for ptype, pname in plist:
                self.outFile.write("%s%s"%(Comma, pname))
                Comma=", "
        self.outFile.write(" );\n}\n\n")

class ThunkOutputGenerator(OutputGenerator):
    def __init__(self,
                 errFile = sys.stderr,
                 warnFile = sys.stderr,
                 diagFile = sys.stdout):
        OutputGenerator.__init__(self, errFile, warnFile, diagFile)
    def beginFile(self, genOpts):
        self.outFile.write('/* Automatically generated from %s - DO NOT EDIT */\n\n'%regFilename)
    def endFile(self):
        pass
    def beginFeature(self, interface, emit):
        OutputGenerator.beginFeature(self, interface, emit)
        self.OldVersion = (self.featureName in ['GL_VERSION_1_0', 'GL_VERSION_1_1'])
    def endFeature(self):
        OutputGenerator.endFeature(self)
    def genType(self, typeinfo, name):
        OutputGenerator.genType(self, typeinfo, name)
    def genEnum(self, enuminfo, name):
        OutputGenerator.genEnum(self, enuminfo, name)
    def genCmd(self, cmd, name):
        OutputGenerator.genCmd(self, cmd, name)

        rettype=ParseCmdRettype(cmd)
        self.outFile.write("%s %sWrapper("%(rettype, name))
        plist=ParseCmdParams(cmd)

        Comma=""
        if len(plist):
            for ptype, pname in plist:
                self.outFile.write("%s%s"%(Comma, ptype))
                Comma=", "
        else:
            self.outFile.write("void")

        self.outFile.write(")\n{\n")

        # for GL 1.0 and 1.1 functions, generate stdcall thunk wrappers which call the function directly
        if self.OldVersion:
            if rettype.lower()=="void":
                self.outFile.write("  %s( "%(name))
            else:
                self.outFile.write("  return %s( "%(name))

            Comma=""
            for ptype, pname in plist:
                self.outFile.write("%s%s"%(Comma, pname))
                Comma=", "

        # for GL 1.2+ functions, generate wrappers which use wglGetProcAddress()
        else:
            if rettype.lower()=="void":
                self.outFile.write('  RESOLVE(PFN%sPROC, "%s");\n'%(name.upper(), name))
                self.outFile.write("  RESOLVED_PROC(PFN%sPROC)( """%(name.upper()))
            else:
                self.outFile.write('  RESOLVE_RET(PFN%sPROC, "%s", FALSE);\n'%(name.upper(), name))
                self.outFile.write("  return RESOLVED_PROC(PFN%sPROC)("%(name.upper()))

            Comma=""
            for ptype, pname in plist:
                self.outFile.write("%s%s"%(Comma, pname))
                Comma=", "
        self.outFile.write(" );\n}\n\n")

class ThunkDefsOutputGenerator(OutputGenerator):
    def __init__(self,
                 errFile = sys.stderr,
                 warnFile = sys.stderr,
                 diagFile = sys.stdout):
        OutputGenerator.__init__(self, errFile, warnFile, diagFile)
    def beginFile(self, genOpts):
        self.outFile.write("EXPORTS\n"); # this must be the first line for libtool to realize this is a .def file
        self.outFile.write('; Automatically generated from %s - DO NOT EDIT\n\n'%regFilename)
    def endFile(self):
        pass
    def beginFeature(self, interface, emit):
        OutputGenerator.beginFeature(self, interface, emit)
    def endFeature(self):
        OutputGenerator.endFeature(self)
    def genType(self, typeinfo, name):
        OutputGenerator.genType(self, typeinfo, name)
    def genEnum(self, enuminfo, name):
        OutputGenerator.genEnum(self, enuminfo, name)
    def genCmd(self, cmd, name):
        OutputGenerator.genCmd(self, cmd, name)

        # export the wrapper function with the name of the function it wraps
        self.outFile.write("%s = %sWrapper\n"%(name, name))

class ShimOutputGenerator(OutputGenerator):
    def __init__(self,
                 errFile = sys.stderr,
                 warnFile = sys.stderr,
                 diagFile = sys.stdout):
        OutputGenerator.__init__(self, errFile, warnFile, diagFile)
    def beginFile(self, genOpts):
        self.outFile.write('/* Automatically generated from %s - DO NOT EDIT */\n\n'%regFilename)
    def endFile(self):
        pass
    def beginFeature(self, interface, emit):
        OutputGenerator.beginFeature(self, interface, emit)
        self.OldVersion = (self.featureName in ['GL_VERSION_1_0', 'GL_VERSION_1_1', 'GL_VERSION_1_2', 'GL_ARB_imaging', 'GL_ARB_multitexture', 'GL_ARB_texture_compression'])
    def endFeature(self):
        OutputGenerator.endFeature(self)
    def genType(self, typeinfo, name):
        OutputGenerator.genType(self, typeinfo, name)
    def genEnum(self, enuminfo, name):
        OutputGenerator.genEnum(self, enuminfo, name)
    def genCmd(self, cmd, name):
        OutputGenerator.genCmd(self, cmd, name)

        if not self.OldVersion:
            return

        # for GL functions which are in the ABI, generate a shim which calls the function via GetProcAddress
        rettype=ParseCmdRettype(cmd)
        self.outFile.write("%s %s("%(rettype, name))
        plist=ParseCmdParams(cmd)

        Comma=""
        if len(plist):
            for ptype, pname in plist:
                self.outFile.write("%s%s"%(Comma, ptype))
                Comma=", "
        else:
            self.outFile.write("void")

        self.outFile.write(")\n{\n")

        self.outFile.write('  typedef %s (* PFN%sPROC)(' % (rettype, name.upper()))

        if len(plist):
            Comma=""
            for ptype, pname in plist:
                self.outFile.write("%s %s"%(Comma, ptype))
                Comma=", "
        else:
            self.outFile.write("void")

        self.outFile.write(');\n')

        if rettype.lower()=="void":
            self.outFile.write('  RESOLVE(PFN%sPROC, "%s");\n'%(name.upper(), name))
            self.outFile.write('  RESOLVED_PROC(')
        else:
            self.outFile.write('  RESOLVE_RET(PFN%sPROC, "%s", 0);\n'%(name.upper(), name))
            self.outFile.write('  return RESOLVED_PROC(')

        Comma=""
        for ptype, pname in plist:
            self.outFile.write("%s%s"%(Comma, pname))
            Comma=", "

        self.outFile.write(" );\n}\n\n")

def genHeaders():
    outFile = open(outFilename,"w")

    if preresolve:
        gen = PreResolveOutputGenerator(errFile=errWarn,
                                        warnFile=errWarn,
                                        diagFile=diag)
        gen.outFile=outFile
        reg.setGenerator(gen)
        reg.apiGen(genOpts)

    if wrapper:
        gen = WrapperOutputGenerator(errFile=errWarn,
                                     warnFile=errWarn,
                                     diagFile=diag)
        gen.outFile=outFile
        reg.setGenerator(gen)
        reg.apiGen(genOpts)

    if shim:
        gen = ShimOutputGenerator(errFile=errWarn,
                                  warnFile=errWarn,
                                  diagFile=diag)
        gen.outFile=outFile
        reg.setGenerator(gen)
        reg.apiGen(genOpts)

    if thunk:
        gen = ThunkOutputGenerator(errFile=errWarn,
                                   warnFile=errWarn,
                                   diagFile=diag)
        gen.outFile=outFile
        reg.setGenerator(gen)
        reg.apiGen(genOpts)


    if thunkdefs:
        gen = ThunkDefsOutputGenerator(errFile=errWarn,
                                       warnFile=errWarn,
                                       diagFile=diag)
        gen.outFile=outFile
        reg.setGenerator(gen)
        reg.apiGen(genOpts)

    outFile.close()

genHeaders()
@


1.5
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@d103 4
a106 1
allVersions = '.*'
d111 2
a112 2
        versions          = allVersions,
        emitversions      = allVersions,
d126 30
d212 2
a213 6
        proto=noneStr(cmd.elem.find('proto'))
        rettype=noneStr(proto.text)
        if rettype.lower()!="void ":
            plist = ([t for t in proto.itertext()])
            rettype = ''.join(plist[:-1])
        rettype=rettype.strip()
d216 1
a216 7
        params = cmd.elem.findall('param')
        plist=[]
        for param in params:
            paramlist = ([t for t in param.itertext()])
            paramtype = ''.join(paramlist[:-1])
            paramname = paramlist[-1]
            plist.append((paramtype, paramname))
d220 1
a220 1
                self.outFile.write("%s%s%s_"%(Comma, ptype, pname))
d241 1
a241 1
                self.outFile.write("%s%s_"%(Comma, pname))
d267 1
a267 1
                self.outFile.write("%s%s_"%(Comma, pname))
d283 1
a283 1
        self.OldVersion = self.featureName.startswith('GL_VERSION_1_0') or self.featureName.startswith('GL_VERSION_1_1')
d293 1
a293 6
        proto=noneStr(cmd.elem.find('proto'))
        rettype=noneStr(proto.text)
        if rettype.lower()!="void ":
            plist = ([t for t in proto.itertext()])
            rettype = ''.join(plist[:-1])
        rettype=rettype.strip()
d295 2
a296 7
        params = cmd.elem.findall('param')
        plist=[]
        for param in params:
            paramlist = ([t for t in param.itertext()])
            paramtype = ''.join(paramlist[:-1])
            paramname = paramlist[-1]
            plist.append((paramtype, paramname))
d300 1
a300 1
                self.outFile.write("%s%s%s_"%(Comma, ptype, pname))
d316 1
a316 1
                self.outFile.write("%s%s_"%(Comma, pname))
d330 1
a330 1
                self.outFile.write("%s%s_"%(Comma, pname))
d371 1
a371 1
        self.OldVersion = self.featureName.startswith('GL_VERSION_1_0') or self.featureName.startswith('GL_VERSION_1_1') or self.featureName.startswith('GL_VERSION_1_2') or self.featureName.startswith('GL_ARB_imaging') or self.featureName.startswith('GL_ARB_multitexture') or self.featureName.startswith('GL_ARB_texture_compression')
d385 1
a385 6
        proto=noneStr(cmd.elem.find('proto'))
        rettype=noneStr(proto.text)
        if rettype.lower()!="void ":
            plist = ([t for t in proto.itertext()])
            rettype = ''.join(plist[:-1])
        rettype=rettype.strip()
d387 2
a388 7
        params = cmd.elem.findall('param')
        plist=[]
        for param in params:
            paramlist = ([t for t in param.itertext()])
            paramtype = ''.join(paramlist[:-1])
            paramname = paramlist[-1]
            plist.append((paramtype, paramname))
d392 1
a392 1
                self.outFile.write("%s%s%s_"%(Comma, ptype, pname))
d404 1
a404 1
                self.outFile.write("%s %s %s_"%(Comma, ptype, pname))
d420 1
a420 1
            self.outFile.write("%s%s_"%(Comma, pname))
@


1.4
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d46 12
a57 29
#exclude base WGL API
WinGDI={key: 1 for key in [
     "wglCopyContext"
    ,"wglCreateContext"
    ,"wglCreateLayerContext"
    ,"wglDeleteContext"
    ,"wglGetCurrentContext"
    ,"wglGetCurrentDC"
    ,"wglGetProcAddress"
    ,"wglMakeCurrent"
    ,"wglShareLists"
    ,"wglUseFontBitmapsA"
    ,"wglUseFontBitmapsW"
    ,"wglUseFontBitmaps"
    ,"SwapBuffers"
    ,"wglUseFontOutlinesA"
    ,"wglUseFontOutlinesW"
    ,"wglUseFontOutlines"
    ,"wglDescribeLayerPlane"
    ,"wglSetLayerPaletteEntries"
    ,"wglGetLayerPaletteEntries"
    ,"wglRealizeLayerPalette"
    ,"wglSwapLayerBuffers"
    ,"wglSwapMultipleBuffers"
    ,"ChoosePixelFormat"
    ,"DescribePixelFormat"
    ,"GetEnhMetaFilePixelFormat"
    ,"GetPixelFormat"
    ,"SetPixelFormat"
d148 1
a148 1
        if name in WinGDI:
d176 1
a176 1
        if name in WinGDI:
@


1.3
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d1 1
a1 1
#!/usr/bin/python
d3 2
a4 1
# Comedy python script to generate cdecl to stdcall wrappers for GL functions
d6 1
a6 5
# This is designed to operate on OpenGL spec files from
# http://www.opengl.org/registry/api/
#
#
# Copyright (c) Jon TURNEY 2009
d9 209
a217 21
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE ABOVE LISTED COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
# Except as contained in this notice, the name(s) of the above copyright
# holders shall not be used in advertising or otherwise to promote the sale,
# use or other dealings in this Software without prior written authorization.
#
d219 1
a219 24
import sys
import re
import getopt

dispatchheader = ''
prefix = 'gl'
preresolve = False
staticwrappers = False

opts, args = getopt.getopt(sys.argv[1:], "", ['spec=', 'typemap=', 'dispatch-header=', 'prefix=', 'preresolve', 'staticwrappers' ])

for o,a in opts:
        if o == '--typemap' :
                typemapfile = a
        elif o == '--dispatch-header' :
                dispatchheader = a
        elif o == '--spec' :
                specfile = a
        elif o == '--prefix' :
                prefix = a
        elif o == '--preresolve' :
                preresolve = True
        elif o == '--staticwrappers' :
                staticwrappers = True
d221 16
a236 4
#
# look for all the SET_ macros in dispatch.h, this is the set of functions
# we need to generate
#
d238 4
a241 1
dispatch = {}
d243 65
a307 3
if dispatchheader :
        fh = open(dispatchheader)
        dispatchh = fh.readlines()
d309 1
a309 1
        dispatch_regex = re.compile(r'^SET_(\S*)\(')
d311 11
a321 3
        for line in dispatchh :
                line = line.strip()
                m1 = dispatch_regex.search(line)
d323 87
a409 2
                if m1 :
                        dispatch[m1.group(1)] = 1
d411 1
a411 1
        del dispatch['by_offset']
d413 1
a413 31
#
# read the typemap .tm file
#

typemap = {}

fh = open(typemapfile)
tm = fh.readlines()

typemap_regex = re.compile(r'#define\sSET_(\S*)\(')

for line in tm :
        # ignore everything after a '#' as a comment
        hash = line.find('#')
        if hash != -1 :
                line = line[:hash-1]

        # ignore blank lines
        if line.startswith('#') or len(line) == 0 :
                continue

        l = line.split(',')
        typemap[l[0]] = l[3].strip()

# interestingly, * is not a C type
if typemap['void'] == '*' :
        typemap['void'] = 'void'

#
# crudely parse the .spec file
#
d415 5
a419 121
r1 = re.compile(r'\t(\S*)\s+(\S*.*)')
r2 = re.compile(r'(.*)\((.*)\)')
r3 = re.compile(r'glWindowPos.*MESA')
r4 = re.compile(r'gl.*Program(s|)NV')
r5 = re.compile(r'glGetVertexAttribfvNV')

wrappers = {}

fh = open(specfile)
glspec = fh.readlines()
param_count = 0

for line in glspec :
        line = line.rstrip()

        # ignore everything after a '#' as a comment
        hash = line.find('#')
        if hash != -1 :
                line = line[:hash-1]

        # ignore blank lines
        if line.startswith('#') or len(line) == 0 :
                continue

        # lines containing ':' aren't intersting to us
        if line.count(':') != 0 :
                continue

        # attributes of each function follow the name, indented by a tab
        if not line.startswith('\t') :
                m1 = r2.search(line)
                if m1 :
                        function = m1.group(1)
                        arglist_use = m1.group(2)
                        wrappers[function] = {}

                        # ensure formal parameter names don't collide with reserved names or shadow global declarations
                        arglist_use = ',' .join([i.rstrip() + '_' for i in arglist_use.split(",")])

                        wrappers[function]['arglist_use'] = arglist_use
                        param_count = 0
        else :
                m1 = r1.search(line)
                if m1 :
                        attribute = m1.group(1)
                        value = m1.group(2)

                        # make param attributes unique and ordered
                        if attribute == 'param' :
                                attribute = 'param' + '%02d' % param_count
                                param_count += 1

                        wrappers[function][attribute] = value

#
# now emit code
#

print '/* Automatically generated by ' + sys.argv[0] + ' DO NOT EDIT */'
print '/* from ' + specfile + ' and typemap ' + typemapfile + ' */'
print ''

#
# if required, emit code for non-lazy function resolving
#

if preresolve :
        for w in sorted(wrappers.keys()) :
                funcname = prefix + w
                print 'RESOLVE_DECL(PFN' + funcname.upper() + 'PROC);'

        print ''
        print 'void ' + prefix + 'ResolveExtensionProcs(void)'
        print '{'

        for w in sorted(wrappers.keys()) :
                funcname = prefix + w
                print '  PRERESOLVE(PFN' + funcname.upper() + 'PROC, "' + funcname + '");'

        print '}\n'

#
# now emit the wrappers
# for GL 1.0 and 1.1 functions, generate stdcall wrappers which call the function directly
# for GL 1.2+ functions, generate wrappers which use wglGetProcAddress()
#

for w in sorted(wrappers.keys()) :

        funcname = prefix + w
        returntype = wrappers[w]['return']
        if returntype != 'void' :
                returntype = typemap[returntype]

        # Avoid generating wrappers which aren't referenced by the dispatch table
        if dispatchheader and not dispatch.has_key(w) :
                print '/* No wrapper for ' + funcname + ', not in dispatch table */'
                continue

        # manufacture arglist
        # if no param attributes were found, it should be 'void'
        al = []
        for k in sorted(wrappers[w].keys()) :
                if k.startswith('param') :
                        l = wrappers[w][k].split()

                        # ensure formal parameter names don't collide with reserved names or shadow global declarations
                        l[0] = l[0] + '_'

                        if l[2] == 'in' :
                                if l[3] == 'array' :
                                        arg = 'const ' + typemap[l[1]] + ' *' + l[0]
                                else :
                                        arg = typemap[l[1]] + ' ' + l[0]
                        elif l[2] == 'out' :
                                arg = typemap[l[1]] + ' *' + l[0]

                        al.append(arg)

        if len(al) == 0 :
                arglist = 'void'
d421 1
a421 14
                arglist  = ', '.join(al)

        if wrappers[w]['category'].startswith('VERSION_1_0') or wrappers[w]['category'].startswith('VERSION_1_1') :
                if staticwrappers :
                        print 'static',
                print returntype + ' ' + funcname + 'Wrapper(' + arglist + ')'
                print '{'
                print '  if (glxWinDebugSettings.enable' + prefix.upper() + 'callTrace) ErrorF("'+ funcname + '\\n");'
                print '  glWinDirectProcCalls++;'
                if returntype.lower() == 'void' :
                        print '  ' +  funcname + '(',
                else :
                        print ' /* returntype was ' + returntype.lower() + '*/'
                        print '  return ' +  funcname + '(',
d423 1
a423 2
                if arglist != 'void' :
                        print wrappers[w]['arglist_use'],
d425 3
a427 2
                print ');'
                print "}\n"
d429 2
a430 4
                if staticwrappers :
                        print 'static',
                print returntype + ' ' + funcname + 'Wrapper(' + arglist + ')'
                print '{'
d432 50
a481 1
                stringname = funcname
d483 1
a483 13
#
# special case: Windows OpenGL implementations are far more likely to have GL_ARB_window_pos than GL_MESA_window_pos,
# so arrange for the wrapper to use the ARB strings to find functions...
#

                m2 = r3.search(funcname)
                if m2 :
                        stringname = stringname.replace('MESA','ARB')

#
# special case: likewise, implementations are more likely to have GL_ARB_vertex_program than GL_NV_vertex_program,
# especially if they are not NV implementations, so arrange for the wrapper to use ARB strings to find functions
#
d485 1
a485 49
                m3 = r4.search(funcname)
                if m3 :
                        stringname = stringname.replace('NV','ARB')
                m4 = r5.search(funcname)
                if m4 :
                        stringname = stringname.replace('NV','ARB')

                pfntypename = 'PFN' + funcname.upper() + 'PROC'

                if returntype.lower() == 'void' :
                        print '  RESOLVE(' + pfntypename + ', "' + stringname + '");'
                        print '  if (glxWinDebugSettings.enable' + prefix.upper() + 'callTrace) ErrorF("'+ funcname + '\\n");'
                        print '  RESOLVED_PROC(' + pfntypename + ')(',
                else :
                        print '  RESOLVE_RET(' + pfntypename + ', "' + stringname + '", FALSE);'
                        print '  if (glxWinDebugSettings.enable' + prefix.upper() + 'callTrace) ErrorF("'+ funcname + '\\n");'
                        print '  return RESOLVED_PROC(' + pfntypename + ')(',

                if arglist != 'void' :
                        print wrappers[w]['arglist_use'],

                print ');'
                print "}\n"


# generate function to setup the dispatch table, which sets each
# dispatch table entry to point to it's wrapper function
# (assuming we were able to make one)

if dispatchheader :
        print 'void glWinSetupDispatchTable(void)'
        print '{'
        print '  static struct _glapi_table *disp = NULL;'
        print ''
        print '  if (!disp)'
        print '    {'
        print '      disp = calloc(sizeof(void *), _glapi_get_dispatch_table_size());'
        print '      assert(disp);'

        for d in sorted(dispatch.keys()) :
                if wrappers.has_key(d) :
                        print '      SET_'+ d + '(disp, (void *)' + prefix + d + 'Wrapper);'
                else :
                        print '#warning  No wrapper for ' + prefix + d + ' !'

        print '    }'
        print ''
        print '  _glapi_set_dispatch(disp);'
        print '}'
@


1.2
log
@Update to xserver 1.11.2
@
text
@d70 1
a70 1
        dispatch_regex = re.compile(r'#define\sSET_(\S*)\(')
d149 2
a150 3
                        # near and far might be reserved words or macros so can't be used as formal parameter names
                        arglist_use = arglist_use.replace('near','zNear')
                        arglist_use = arglist_use.replace('far','zFar')
d219 2
a220 3
                        # near and far might be reserved words or macros so can't be used as formal parameter names
                        l[0] = l[0].replace('near','zNear')
                        l[0] = l[0].replace('far','zFar')
d309 6
a314 1
        print '  struct _glapi_table *disp = _glapi_get_dispatch();'
d318 1
a318 1
                        print '  SET_'+ d + '(disp, (void *)' + prefix + d + 'Wrapper);'
d322 3
@


1.1
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d315 1
a315 1
                        print '  SET_'+ d + '(disp, ' + prefix + d + 'Wrapper);'
@

