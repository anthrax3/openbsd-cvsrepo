head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.8
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.6
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.12
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.10
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.8
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.20
	OPENBSD_5_0:1.1.1.1.0.18
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2015.09.16.19.10.24;	author matthieu;	state Exp;
branches;
next	1.2;
commitid	Te1daavkBLskZ8gc;

1.2
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.35;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.35;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 *Copyright (C) 2001-2004 Harold L Hunt II All Rights Reserved.
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL HAROLD L HUNT II BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of Harold L Hunt II
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from Harold L Hunt II.
 *
 * Authors:	Harold L Hunt II
 */

#ifdef HAVE_XWIN_CONFIG_H
#include <xwin-config.h>
#endif
#include "win.h"

/*
 * Count the number of one bits in a color mask.
 */

CARD8
winCountBits(DWORD dw)
{
    DWORD dwBits = 0;

    while (dw) {
        dwBits += (dw & 1);
        dw >>= 1;
    }

    return dwBits;
}

/*
 * Modify the screen pixmap to point to the new framebuffer address
 */

Bool
winUpdateFBPointer(ScreenPtr pScreen, void *pbits)
{
    winScreenPriv(pScreen);
    winScreenInfo *pScreenInfo = pScreenPriv->pScreenInfo;

    /* Location of shadow framebuffer has changed */
    pScreenInfo->pfb = pbits;

    /* Update the screen pixmap */
    if (!(*pScreen->ModifyPixmapHeader) (pScreen->devPrivate,
                                         pScreen->width,
                                         pScreen->height,
                                         pScreen->rootDepth,
                                         BitsPerPixel(pScreen->rootDepth),
                                         PixmapBytePad(pScreenInfo->dwStride,
                                                       pScreenInfo->dwBPP),
                                         pScreenInfo->pfb)) {
        FatalError("winUpdateFramebufferPointer - Failed modifying "
                   "screen pixmap\n");
    }

    return TRUE;
}
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a35 15
#ifdef XWIN_NATIVEGDI
/* See Porting Layer Definition - p. 33 */
/*
 * Called by clients, returns the best size for a cursor, tile, or
 * stipple, specified by class (sometimes called kind)
 */

void
winQueryBestSizeNativeGDI(int class, unsigned short *pWidth,
                          unsigned short *pHeight, ScreenPtr pScreen)
{
    ErrorF("winQueryBestSizeNativeGDI\n");
}
#endif

a80 48

#ifdef XWIN_NATIVEGDI
/*
 * Paint the window background with the specified color
 */

BOOL
winPaintBackground(HWND hwnd, COLORREF colorref)
{
    HDC hdc;
    HBRUSH hbrush;
    RECT rect;

    /* Create an hdc */
    hdc = GetDC(hwnd);
    if (hdc == NULL) {
        printf("gdiWindowProc - GetDC failed\n");
        exit(1);
    }

    /* Create and select blue brush */
    hbrush = CreateSolidBrush(colorref);
    if (hbrush == NULL) {
        printf("gdiWindowProc - CreateSolidBrush failed\n");
        exit(1);
    }

    /* Get window extents */
    if (GetClientRect(hwnd, &rect) == FALSE) {
        printf("gdiWindowProc - GetClientRect failed\n");
        exit(1);
    }

    /* Fill window with blue brush */
    if (FillRect(hdc, &rect, hbrush) == 0) {
        printf("gdiWindowProc - FillRect failed\n");
        exit(1);
    }

    /* Delete blue brush */
    DeleteObject(hbrush);

    /* Release the hdc */
    ReleaseDC(hwnd, hdc);

    return TRUE;
}
#endif
@


1.1
log
@Initial revision
@
text
@d44 2
a45 2
winQueryBestSizeNativeGDI (int class, unsigned short *pWidth,
			   unsigned short *pHeight, ScreenPtr pScreen)
d47 1
a47 1
  ErrorF ("winQueryBestSizeNativeGDI\n");
a50 1

d56 1
a56 1
winCountBits (DWORD dw)
d58 1
a58 1
  DWORD		dwBits = 0;
d60 3
a62 4
  while (dw)
    {
      dwBits += (dw & 1);
      dw >>= 1;
d65 1
a65 1
  return dwBits;
a67 1

d73 1
a73 1
winUpdateFBPointer (ScreenPtr pScreen, void *pbits)
d75 2
a76 2
  winScreenPriv(pScreen);
  winScreenInfo		*pScreenInfo = pScreenPriv->pScreenInfo;
d78 2
a79 2
  /* Location of shadow framebuffer has changed */
  pScreenInfo->pfb = pbits;
d81 11
a91 12
  /* Update the screen pixmap */
  if (!(*pScreen->ModifyPixmapHeader) (pScreen->devPrivate,
				       pScreen->width,
				       pScreen->height,
				       pScreen->rootDepth,
				       BitsPerPixel (pScreen->rootDepth),
				       PixmapBytePad (pScreenInfo->dwStride,
						      pScreenInfo->dwBPP),
				       pScreenInfo->pfb))
    {
      FatalError ("winUpdateFramebufferPointer - Failed modifying "\
		  "screen pixmap\n");
d94 1
a94 1
  return TRUE;
a96 1

d103 1
a103 1
winPaintBackground (HWND hwnd, COLORREF colorref)
d105 3
a107 3
  HDC			hdc;
  HBRUSH		hbrush;
  RECT			rect;
d109 5
a113 6
  /* Create an hdc */
  hdc = GetDC (hwnd);
  if (hdc == NULL)
    {
      printf ("gdiWindowProc - GetDC failed\n");
      exit (1);
d116 5
a120 6
  /* Create and select blue brush */
  hbrush = CreateSolidBrush (colorref);
  if (hbrush == NULL)
    {
      printf ("gdiWindowProc - CreateSolidBrush failed\n");
      exit (1);
d123 4
a126 5
  /* Get window extents */
  if (GetClientRect (hwnd, &rect) == FALSE)
    {
      printf ("gdiWindowProc - GetClientRect failed\n");
      exit (1);
d129 4
a132 5
  /* Fill window with blue brush */
  if (FillRect (hdc, &rect, hbrush) == 0)
    {
      printf ("gdiWindowProc - FillRect failed\n");
      exit (1);
d135 2
a136 2
  /* Delete blue brush */
  DeleteObject (hbrush);
d138 2
a139 2
  /* Release the hdc */
  ReleaseDC (hwnd, hdc);
d141 1
a141 1
  return TRUE;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
