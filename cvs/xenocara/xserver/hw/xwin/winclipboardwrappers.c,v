head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.4
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2015.09.16.19.10.24;	author matthieu;	state Exp;
branches;
next	1.7;
commitid	Te1daavkBLskZ8gc;

1.7
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.26;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.26;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.03.42;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@/*
 *Copyright (C) 2003-2004 Harold L Hunt II All Rights Reserved.
 *Copyright (C) Colin Harrison 2005-2008
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL HAROLD L HUNT II BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of the copyright holder(s)
 *and author(s) shall not be used in advertising or otherwise to promote
 *the sale, use or other dealings in this Software without prior written
 *authorization from the copyright holder(s) and author(s).
 *
 * Authors:	Harold L Hunt II
 *              Colin Harrison
 */

#ifdef HAVE_XWIN_CONFIG_H
#include <xwin-config.h>
#endif

#include "win.h"
#include "dixstruct.h"

/*
 * Local function prototypes
 */

DISPATCH_PROC(winProcEstablishConnection);

/*
 * Wrapper for internal EstablishConnection function.
 * Initializes internal clients that must not be started until
 * an external client has connected.
 */

int
winProcEstablishConnection(ClientPtr client)
{
    int iReturn;
    static int s_iCallCount = 0;
    static unsigned long s_ulServerGeneration = 0;

    if (s_iCallCount == 0)
        winDebug("winProcEstablishConnection - Hello\n");

    /* Do nothing if clipboard is not enabled */
    if (!g_fClipboard) {
        ErrorF("winProcEstablishConnection - Clipboard is not enabled, "
               "returning.\n");

        /* Unwrap the original function, call it, and return */
        InitialVector[2] = winProcEstablishConnectionOrig;
        iReturn = (*winProcEstablishConnectionOrig) (client);
        winProcEstablishConnectionOrig = NULL;
        return iReturn;
    }

    /* Watch for server reset */
    if (s_ulServerGeneration != serverGeneration) {
        /* Save new generation number */
        s_ulServerGeneration = serverGeneration;

        /* Reset call count */
        s_iCallCount = 0;
    }

    /* Increment call count */
    ++s_iCallCount;

    /*
     * This procedure is only used for initialization.
     * We can unwrap the original procedure at this point
     * so that this function is no longer called until the
     * server resets and the function is wrapped again.
     */
    InitialVector[2] = winProcEstablishConnectionOrig;

    /*
     * Call original function and bail if it fails.
     * NOTE: We must do this first, since we need XdmcpOpenDisplay
     * to be called before we initialize our clipboard client.
     */
    iReturn = (*winProcEstablishConnectionOrig) (client);
    if (iReturn != 0) {
        ErrorF("winProcEstablishConnection - ProcEstablishConnection "
               "failed, bailing.\n");
        return iReturn;
    }

    /* Clear original function pointer */
    winProcEstablishConnectionOrig = NULL;

    /* Startup the clipboard client if clipboard mode is being used */
    if (g_fClipboard) {
        /*
         * NOTE: The clipboard client is started here for a reason:
         * 1) Assume you are using XDMCP (e.g. XWin -query %hostname%)
         * 2) If the clipboard client attaches during X Server startup,
         *    then it becomes the "magic client" that causes the X Server
         *    to reset if it exits.
         * 3) XDMCP calls KillAllClients when it starts up.
         * 4) The clipboard client is a client, so it is killed.
         * 5) The clipboard client is the "magic client", so the X Server
         *    resets itself.
         * 6) This repeats ad infinitum.
         * 7) We avoid this by waiting until at least one client (could
         *    be XDM, could be another client) connects, which makes it
         *    almost certain that the clipboard client will not connect
         *    until after XDM when using XDMCP.
         */

        /* Create the clipboard client thread */
        if (!winInitClipboard()) {
            ErrorF("winProcEstablishConnection - winClipboardInit "
                   "failed.\n");
            return iReturn;
        }

        ErrorF("winProcEstablishConnection - winInitClipboard returned.\n");
    }

    return iReturn;
}
@


1.7
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d36 1
a38 9
#include <X11/Xatom.h>

/*
 * Constants
 */

#define CLIP_NUM_SELECTIONS		2
#define CLIP_OWN_PRIMARY		0
#define CLIP_OWN_CLIPBOARD		1
a44 13
DISPATCH_PROC(winProcSetSelectionOwner);

/*
 * References to external symbols
 */

extern Bool g_fClipboardLaunched;
extern Bool g_fClipboardStarted;
extern Bool g_fClipboard;
extern Window g_iClipboardWindow;
extern Atom g_atomLastOwnedSelection;
extern HWND g_hwndClipboard;

a108 7
    /* If the clipboard client has already been started, abort */
    if (g_fClipboardLaunched) {
        ErrorF("winProcEstablishConnection - Clipboard client already "
               "launched, returning.\n");
        return iReturn;
    }

a137 3
    /* Flag that clipboard client has been launched */
    g_fClipboardLaunched = TRUE;

a138 199
}

/*
 * Wrapper for internal SetSelectionOwner function.
 * Grabs ownership of Windows clipboard when X11 clipboard owner changes.
 */

int
winProcSetSelectionOwner(ClientPtr client)
{
    int i;
    DrawablePtr pDrawable;
    WindowPtr pWindow = None;
    Bool fOwnedToNotOwned = FALSE;
    static Window s_iOwners[CLIP_NUM_SELECTIONS] = { None };
    static unsigned long s_ulServerGeneration = 0;

    REQUEST(xSetSelectionOwnerReq);

    REQUEST_SIZE_MATCH(xSetSelectionOwnerReq);

    winDebug("winProcSetSelectionOwner - Hello.\n");

    /* Watch for server reset */
    if (s_ulServerGeneration != serverGeneration) {
        /* Save new generation number */
        s_ulServerGeneration = serverGeneration;

        /* Initialize static variables */
        for (i = 0; i < CLIP_NUM_SELECTIONS; ++i)
            s_iOwners[i] = None;
    }

    /* Abort if clipboard not completely initialized yet */
    if (!g_fClipboardStarted) {
        /* ErrorF ("winProcSetSelectionOwner - Clipboard not yet started, "
           "aborting.\n"); */
        goto winProcSetSelectionOwner_Done;
    }

    /* Grab window if we have one */
    if (None != stuff->window) {
        /* Grab the Window from the request */
        int rc =
            dixLookupWindow(&pWindow, stuff->window, client, DixReadAccess);
        if (rc != Success) {
            ErrorF("winProcSetSelectionOwner - Found BadWindow, aborting.\n");
            goto winProcSetSelectionOwner_Done;
        }
    }

    /* Now we either have a valid window or None */

    /* Save selection owners for monitored selections, ignore other selections */
    if (XA_PRIMARY == stuff->selection) {
        /* Look for owned -> not owned transition */
        if (None == stuff->window && None != s_iOwners[CLIP_OWN_PRIMARY]) {
            fOwnedToNotOwned = TRUE;

            winDebug("winProcSetSelectionOwner - PRIMARY - Going from "
                     "owned to not owned.\n");

            /* Adjust last owned selection */
            if (None != s_iOwners[CLIP_OWN_CLIPBOARD])
                g_atomLastOwnedSelection = MakeAtom("CLIPBOARD", 9, TRUE);
            else
                g_atomLastOwnedSelection = None;
        }

        /* Save new selection owner or None */
        s_iOwners[CLIP_OWN_PRIMARY] = stuff->window;

        winDebug("winProcSetSelectionOwner - PRIMARY - Now owned by: %d\n",
                 stuff->window);
    }
    else if (MakeAtom("CLIPBOARD", 9, TRUE) == stuff->selection) {
        /* Look for owned -> not owned transition */
        if (None == stuff->window && None != s_iOwners[CLIP_OWN_CLIPBOARD]) {
            fOwnedToNotOwned = TRUE;

            winDebug("winProcSetSelectionOwner - CLIPBOARD - Going from "
                     "owned to not owned.\n");

            /* Adjust last owned selection */
            if (None != s_iOwners[CLIP_OWN_PRIMARY])
                g_atomLastOwnedSelection = XA_PRIMARY;
            else
                g_atomLastOwnedSelection = None;
        }

        /* Save new selection owner or None */
        s_iOwners[CLIP_OWN_CLIPBOARD] = stuff->window;

        winDebug("winProcSetSelectionOwner - CLIPBOARD - Now owned by: %d\n",
                 stuff->window);

    }
    else
        goto winProcSetSelectionOwner_Done;

    /*
     * At this point, if one of the selections is still owned by the 
     * clipboard manager then it should be marked as unowned since
     * we will be taking ownership of the Win32 clipboard.
     */
    if (g_iClipboardWindow == s_iOwners[CLIP_OWN_PRIMARY])
        s_iOwners[CLIP_OWN_PRIMARY] = None;
    if (g_iClipboardWindow == s_iOwners[CLIP_OWN_CLIPBOARD])
        s_iOwners[CLIP_OWN_CLIPBOARD] = None;

    /*
     * Handle case when selection is being disowned,
     * WM_DRAWCLIPBOARD did not do the disowning,
     * both monitored selections are no longer owned,
     * an owned to not owned transition was detected,
     * and we currently own the Win32 clipboard.
     */
    if (stuff->window == None
        && s_iOwners[CLIP_OWN_PRIMARY] == None
        && s_iOwners[CLIP_OWN_CLIPBOARD] == None
        && fOwnedToNotOwned
        && g_hwndClipboard != NULL && g_hwndClipboard == GetClipboardOwner()) {
        winDebug("winProcSetSelectionOwner - We currently own the "
                 "clipboard and neither the PRIMARY nor the CLIPBOARD "
                 "selections are owned, releasing ownership of Win32 "
                 "clipboard.\n");

        /* Release ownership of the Windows clipboard */
        OpenClipboard(NULL);
        EmptyClipboard();
        CloseClipboard();

        goto winProcSetSelectionOwner_Done;
    }

    /* Abort if no window at this point */
    if (None == stuff->window) {
        winDebug("winProcSetSelectionOwner - No window, returning.\n");
        goto winProcSetSelectionOwner_Done;
    }

    /* Abort if invalid selection */
    if (!ValidAtom(stuff->selection)) {
        ErrorF("winProcSetSelectionOwner - Found BadAtom, aborting.\n");
        goto winProcSetSelectionOwner_Done;
    }

    /* Cast Window to Drawable */
    pDrawable = (DrawablePtr) pWindow;

    /* Abort if clipboard manager is owning the selection */
    if (pDrawable->id == g_iClipboardWindow) {
        winDebug("winProcSetSelectionOwner - We changed ownership, "
                 "aborting.\n");
        goto winProcSetSelectionOwner_Done;
    }

    /* Abort if root window is taking ownership */
    if (pDrawable->id == 0) {
        ErrorF("winProcSetSelectionOwner - Root window taking ownership, "
               "aborting\n");
        goto winProcSetSelectionOwner_Done;
    }

    /* Close clipboard if we have it open already */
    if (GetOpenClipboardWindow() == g_hwndClipboard) {
        CloseClipboard();
    }

    /* Access the Windows clipboard */
    if (!OpenClipboard(g_hwndClipboard)) {
        ErrorF("winProcSetSelectionOwner - OpenClipboard () failed: %08x\n",
               (int) GetLastError());
        goto winProcSetSelectionOwner_Done;
    }

    /* Take ownership of the Windows clipboard */
    if (!EmptyClipboard()) {
        ErrorF("winProcSetSelectionOwner - EmptyClipboard () failed: %08x\n",
               (int) GetLastError());
        goto winProcSetSelectionOwner_Done;
    }

    /* Advertise regular text and unicode */
    SetClipboardData(CF_UNICODETEXT, NULL);
    SetClipboardData(CF_TEXT, NULL);

    /* Save handle to last owned selection */
    g_atomLastOwnedSelection = stuff->selection;

    /* Release the clipboard */
    if (!CloseClipboard()) {
        ErrorF("winProcSetSelectionOwner - CloseClipboard () failed: "
               "%08x\n", (int) GetLastError());
        goto winProcSetSelectionOwner_Done;
    }

 winProcSetSelectionOwner_Done:
    return (*winProcSetSelectionOwnerOrig) (client);
@


1.6
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a58 2
extern unsigned int g_uiAuthDataLen;
extern char *g_pAuthData;
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a51 4
int winProcEstablishConnection(ClientPtr /* client */ );
int winProcQueryTree(ClientPtr /* client */ );
int winProcSetSelectionOwner(ClientPtr /* client */ );

a58 2
extern Bool g_fUnicodeSupport;
extern int g_iNumScreens;
a60 1
extern Bool g_fXdmcpEnabled;
a67 3
extern winDispatchProcPtr winProcEstablishConnectionOrig;
extern winDispatchProcPtr winProcQueryTreeOrig;
extern winDispatchProcPtr winProcSetSelectionOwnerOrig;
d83 1
a83 1
        ErrorF("winProcEstablishConnection - Hello\n");
d355 2
a356 5
    /* Advertise Unicode if we support it */
    if (g_fUnicodeSupport)
        SetClipboardData(CF_UNICODETEXT, NULL);

    /* Always advertise regular text */
@


1.4
log
@Update to xserver 1.11.2
@
text
@a39 1

a43 1
#define CLIP_NUM_CALLS			4
a47 1

d52 3
a54 3
int winProcEstablishConnection(ClientPtr /* client */);
int winProcQueryTree(ClientPtr /* client */);
int winProcSetSelectionOwner(ClientPtr /* client */);
d56 2
d63 15
a77 114
extern Bool		g_fUnicodeSupport;
extern int		g_iNumScreens;
extern unsigned int	g_uiAuthDataLen;
extern char		*g_pAuthData;
extern Bool		g_fXdmcpEnabled;
extern Bool		g_fClipboardLaunched;
extern Bool		g_fClipboardStarted;
extern Bool		g_fClipboard;
extern Window		g_iClipboardWindow;
extern Atom		g_atomLastOwnedSelection;
extern HWND		g_hwndClipboard;

extern winDispatchProcPtr	winProcEstablishConnectionOrig;
extern winDispatchProcPtr	winProcQueryTreeOrig;
extern winDispatchProcPtr	winProcSetSelectionOwnerOrig;


/*
 * Wrapper for internal QueryTree function.
 * Hides the clipboard client when it is the only client remaining.
 */

int
winProcQueryTree (ClientPtr client)
{
  int			iReturn;

  ErrorF ("winProcQueryTree - Hello\n");

  /*
   * This procedure is only used for initialization.
   * We can unwrap the original procedure at this point
   * so that this function is no longer called until the
   * server resets and the function is wrapped again.
   */
  ProcVector[X_QueryTree] = winProcQueryTreeOrig;

  /*
   * Call original function and bail if it fails.
   * NOTE: We must do this first, since we need XdmcpOpenDisplay
   * to be called before we initialize our clipboard client.
   */
  iReturn = (*winProcQueryTreeOrig) (client);
  if (iReturn != 0)
    {
      ErrorF ("winProcQueryTree - ProcQueryTree failed, bailing.\n");
      return iReturn;
    }

  /* Make errors more obvious */
  winProcQueryTreeOrig = NULL;

  /* Do nothing if clipboard is not enabled */
  if (!g_fClipboard)
    {
      ErrorF ("winProcQueryTree - Clipboard is not enabled, "
	      "returning.\n");
      return iReturn;
    }

  /* If the clipboard client has already been started, abort */
  if (g_fClipboardLaunched)
    {
      ErrorF ("winProcQueryTree - Clipboard client already "
	      "launched, returning.\n");
      return iReturn;
    }

  /* Startup the clipboard client if clipboard mode is being used */
  if (g_fXdmcpEnabled && g_fClipboard)
    {
      /*
       * NOTE: The clipboard client is started here for a reason:
       * 1) Assume you are using XDMCP (e.g. XWin -query %hostname%)
       * 2) If the clipboard client attaches during X Server startup,
       *    then it becomes the "magic client" that causes the X Server
       *    to reset if it exits.
       * 3) XDMCP calls KillAllClients when it starts up.
       * 4) The clipboard client is a client, so it is killed.
       * 5) The clipboard client is the "magic client", so the X Server
       *    resets itself.
       * 6) This repeats ad infinitum.
       * 7) We avoid this by waiting until at least one client (could
       *    be XDM, could be another client) connects, which makes it
       *    almost certain that the clipboard client will not connect
       *    until after XDM when using XDMCP.
       * 8) Unfortunately, there is another problem.
       * 9) XDM walks the list of windows with XQueryTree,
       *    killing any client it finds with a window.
       * 10)Thus, when using XDMCP we wait until the first call
       *    to ProcQueryTree before we startup the clipboard client.
       *    This should prevent XDM from finding the clipboard client,
       *    since it has not yet created a window.
       * 11)Startup when not using XDMCP is handled in
       *    winProcEstablishConnection.
       */
      
      /* Create the clipboard client thread */
      if (!winInitClipboard ())
	{
	  ErrorF ("winProcQueryTree - winClipboardInit "
		  "failed.\n");
	  return iReturn;
	}
      
      ErrorF ("winProcQueryTree - winInitClipboard returned.\n");
    }
  
  /* Flag that clipboard client has been launched */
  g_fClipboardLaunched = TRUE;

  return iReturn;
}

d86 1
a86 1
winProcEstablishConnection (ClientPtr client)
d88 86
a173 116
  int			iReturn;
  static int		s_iCallCount = 0;
  static unsigned long	s_ulServerGeneration = 0;

  if (s_iCallCount == 0 || s_iCallCount == CLIP_NUM_CALLS) ErrorF ("winProcEstablishConnection - Hello\n");

  /* Do nothing if clipboard is not enabled */
  if (!g_fClipboard)
    {
      ErrorF ("winProcEstablishConnection - Clipboard is not enabled, "
	      "returning.\n");
      
      /* Unwrap the original function, call it, and return */
      InitialVector[2] = winProcEstablishConnectionOrig;
      iReturn = (*winProcEstablishConnectionOrig) (client);
      winProcEstablishConnectionOrig = NULL;
      return iReturn;
    }

  /* Watch for server reset */
  if (s_ulServerGeneration != serverGeneration)
    {
      /* Save new generation number */
      s_ulServerGeneration = serverGeneration;

      /* Reset call count */
      s_iCallCount = 0;
    }

  /* Increment call count */
  ++s_iCallCount;

  /* Wait for CLIP_NUM_CALLS when Xdmcp is enabled */
  if (g_fXdmcpEnabled
      && !g_fClipboardLaunched
      && s_iCallCount < CLIP_NUM_CALLS)
    {
      if (s_iCallCount == 1) ErrorF ("winProcEstablishConnection - Xdmcp, waiting to "
	      "start clipboard client until %dth call", CLIP_NUM_CALLS);
      if (s_iCallCount == CLIP_NUM_CALLS - 1) ErrorF (".\n");
      else ErrorF (".");
      return (*winProcEstablishConnectionOrig) (client);
    }

  /*
   * This procedure is only used for initialization.
   * We can unwrap the original procedure at this point
   * so that this function is no longer called until the
   * server resets and the function is wrapped again.
   */
  InitialVector[2] = winProcEstablishConnectionOrig;

  /*
   * Call original function and bail if it fails.
   * NOTE: We must do this first, since we need XdmcpOpenDisplay
   * to be called before we initialize our clipboard client.
   */
  iReturn = (*winProcEstablishConnectionOrig) (client);
  if (iReturn != 0)
    {
      ErrorF ("winProcEstablishConnection - ProcEstablishConnection "
	      "failed, bailing.\n");
      return iReturn;
    }

  /* Clear original function pointer */
  winProcEstablishConnectionOrig = NULL;

  /* If the clipboard client has already been started, abort */
  if (g_fClipboardLaunched)
    {
      ErrorF ("winProcEstablishConnection - Clipboard client already "
	      "launched, returning.\n");
      return iReturn;
    }

  /* Startup the clipboard client if clipboard mode is being used */
  if (g_fClipboard)
    {
      /*
       * NOTE: The clipboard client is started here for a reason:
       * 1) Assume you are using XDMCP (e.g. XWin -query %hostname%)
       * 2) If the clipboard client attaches during X Server startup,
       *    then it becomes the "magic client" that causes the X Server
       *    to reset if it exits.
       * 3) XDMCP calls KillAllClients when it starts up.
       * 4) The clipboard client is a client, so it is killed.
       * 5) The clipboard client is the "magic client", so the X Server
       *    resets itself.
       * 6) This repeats ad infinitum.
       * 7) We avoid this by waiting until at least one client (could
       *    be XDM, could be another client) connects, which makes it
       *    almost certain that the clipboard client will not connect
       *    until after XDM when using XDMCP.
       * 8) Unfortunately, there is another problem.
       * 9) XDM walks the list of windows with XQueryTree,
       *    killing any client it finds with a window.
       * 10)Thus, when using XDMCP we wait until CLIP_NUM_CALLS
       *    to ProcEstablishCeonnection before we startup the clipboard
       *    client.  This should prevent XDM from finding the clipboard
       *    client, since it has not yet created a window.
       */
      
      /* Create the clipboard client thread */
      if (!winInitClipboard ())
	{
	  ErrorF ("winProcEstablishConnection - winClipboardInit "
		  "failed.\n");
	  return iReturn;
	}
      
      ErrorF ("winProcEstablishConnection - winInitClipboard returned.\n");
    }
  
  /* Flag that clipboard client has been launched */
  g_fClipboardLaunched = TRUE;
d175 7
a181 1
  return iReturn;
a183 1

d190 1
a190 1
winProcSetSelectionOwner (ClientPtr client)
d192 188
a379 206
  int			i;
  DrawablePtr		pDrawable;
  WindowPtr		pWindow = None;
  Bool			fOwnedToNotOwned = FALSE;
  static Window		s_iOwners[CLIP_NUM_SELECTIONS] = {None};
  static unsigned long	s_ulServerGeneration = 0;
  REQUEST(xSetSelectionOwnerReq);
  
  REQUEST_SIZE_MATCH(xSetSelectionOwnerReq);

  winDebug("winProcSetSelectionOwner - Hello.\n");

  /* Watch for server reset */
  if (s_ulServerGeneration != serverGeneration)
    {
      /* Save new generation number */
      s_ulServerGeneration = serverGeneration;

      /* Initialize static variables */
      for (i = 0; i < CLIP_NUM_SELECTIONS; ++i)
	s_iOwners[i] = None;
    }

  /* Abort if clipboard not completely initialized yet */
  if (!g_fClipboardStarted)
    {
      /* ErrorF ("winProcSetSelectionOwner - Clipboard not yet started, "
	      "aborting.\n"); */
      goto winProcSetSelectionOwner_Done;
    }
  
  /* Grab window if we have one */
  if (None != stuff->window)
    {
      /* Grab the Window from the request */
      int rc = dixLookupWindow(&pWindow, stuff->window, client, DixReadAccess);
      if (rc != Success) {
	  ErrorF ("winProcSetSelectionOwner - Found BadWindow, aborting.\n");
	  goto winProcSetSelectionOwner_Done;
      }
    }

  /* Now we either have a valid window or None */

  /* Save selection owners for monitored selections, ignore other selections */
  if (XA_PRIMARY == stuff->selection)
    {
      /* Look for owned -> not owned transition */
      if (None == stuff->window
	  && None != s_iOwners[CLIP_OWN_PRIMARY])
	{
	  fOwnedToNotOwned = TRUE;

	  winDebug("winProcSetSelectionOwner - PRIMARY - Going from "
		  "owned to not owned.\n");

	  /* Adjust last owned selection */
	  if (None != s_iOwners[CLIP_OWN_CLIPBOARD])
	    g_atomLastOwnedSelection = MakeAtom ("CLIPBOARD", 9, TRUE);
	  else
	    g_atomLastOwnedSelection = None;
	}
      
      /* Save new selection owner or None */
      s_iOwners[CLIP_OWN_PRIMARY] = stuff->window;

      winDebug("winProcSetSelectionOwner - PRIMARY - Now owned by: %d\n",
	      stuff->window);
    }
  else if (MakeAtom ("CLIPBOARD", 9, TRUE) == stuff->selection)
    {
      /* Look for owned -> not owned transition */
      if (None == stuff->window
	  && None != s_iOwners[CLIP_OWN_CLIPBOARD])
	{
	  fOwnedToNotOwned = TRUE;

	  winDebug("winProcSetSelectionOwner - CLIPBOARD - Going from "
                   "owned to not owned.\n");

	  /* Adjust last owned selection */
	  if (None != s_iOwners[CLIP_OWN_PRIMARY])
	    g_atomLastOwnedSelection = XA_PRIMARY;
	  else
	    g_atomLastOwnedSelection = None;
	}
      
      /* Save new selection owner or None */
      s_iOwners[CLIP_OWN_CLIPBOARD] = stuff->window;

      winDebug("winProcSetSelectionOwner - CLIPBOARD - Now owned by: %d\n",
               stuff->window);

    }
  else
    goto winProcSetSelectionOwner_Done;

  /*
   * At this point, if one of the selections is still owned by the 
   * clipboard manager then it should be marked as unowned since
   * we will be taking ownership of the Win32 clipboard.
   */
  if (g_iClipboardWindow == s_iOwners[CLIP_OWN_PRIMARY])
    s_iOwners[CLIP_OWN_PRIMARY] = None;
  if (g_iClipboardWindow == s_iOwners[CLIP_OWN_CLIPBOARD])
    s_iOwners[CLIP_OWN_CLIPBOARD] = None;

  /*
   * Handle case when selection is being disowned,
   * WM_DRAWCLIPBOARD did not do the disowning,
   * both monitored selections are no longer owned,
   * an owned to not owned transition was detected,
   * and we currently own the Win32 clipboard.
   */
  if (stuff->window == None
      && s_iOwners[CLIP_OWN_PRIMARY] == None
      && s_iOwners[CLIP_OWN_CLIPBOARD] == None
      && fOwnedToNotOwned
      && g_hwndClipboard != NULL
      && g_hwndClipboard == GetClipboardOwner ())
    {
      winDebug("winProcSetSelectionOwner - We currently own the "
               "clipboard and neither the PRIMARY nor the CLIPBOARD "
               "selections are owned, releasing ownership of Win32 "
               "clipboard.\n");

      /* Release ownership of the Windows clipboard */
      OpenClipboard (NULL);
      EmptyClipboard ();
      CloseClipboard ();

      goto winProcSetSelectionOwner_Done;
    }

  /* Abort if no window at this point */
  if (None == stuff->window)
    {
      winDebug("winProcSetSelectionOwner - No window, returning.\n");
      goto winProcSetSelectionOwner_Done;
    }

  /* Abort if invalid selection */
  if (!ValidAtom (stuff->selection))
    {
      ErrorF ("winProcSetSelectionOwner - Found BadAtom, aborting.\n");
      goto winProcSetSelectionOwner_Done;
    }

  /* Cast Window to Drawable */
  pDrawable = (DrawablePtr) pWindow;
  
  /* Abort if clipboard manager is owning the selection */
  if (pDrawable->id == g_iClipboardWindow)
    {
      winDebug("winProcSetSelectionOwner - We changed ownership, "
               "aborting.\n");
      goto winProcSetSelectionOwner_Done;
    }

  /* Abort if root window is taking ownership */
  if (pDrawable->id == 0)
    {
      ErrorF ("winProcSetSelectionOwner - Root window taking ownership, "
	      "aborting\n");
      goto winProcSetSelectionOwner_Done;
    }

  /* Close clipboard if we have it open already */
  if (GetOpenClipboardWindow () == g_hwndClipboard)
    {
      CloseClipboard ();
    }

  /* Access the Windows clipboard */
  if (!OpenClipboard (g_hwndClipboard))
    {
      ErrorF ("winProcSetSelectionOwner - OpenClipboard () failed: %08x\n",
	      (int) GetLastError ());
      goto winProcSetSelectionOwner_Done;
    }

  /* Take ownership of the Windows clipboard */
  if (!EmptyClipboard ())
    {
      ErrorF ("winProcSetSelectionOwner - EmptyClipboard () failed: %08x\n",
	      (int) GetLastError ());
      goto winProcSetSelectionOwner_Done;
    }

  /* Advertise Unicode if we support it */
  if (g_fUnicodeSupport)
    SetClipboardData (CF_UNICODETEXT, NULL);

  /* Always advertise regular text */
  SetClipboardData (CF_TEXT, NULL);

  /* Save handle to last owned selection */
  g_atomLastOwnedSelection = stuff->selection;

  /* Release the clipboard */
  if (!CloseClipboard ())
    {
      ErrorF ("winProcSetSelectionOwner - CloseClipboard () failed: "
	      "%08x\n",
	      (int) GetLastError ());
      goto winProcSetSelectionOwner_Done;
d383 1
a383 1
  return (*winProcSetSelectionOwnerOrig) (client);
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d55 3
a57 3
DISPATCH_PROC(winProcEstablishConnection);
DISPATCH_PROC(winProcQueryTree);
DISPATCH_PROC(winProcSetSelectionOwner);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d3 1
d24 4
a27 4
 *Except as contained in this notice, the name of Harold L Hunt II
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from Harold L Hunt II.
d30 1
d45 1
d91 2
d192 1
a192 1
  ErrorF ("winProcEstablishConnection - Hello\n");
d220 1
a220 1
  /* Wait for second call when Xdmcp is enabled */
d223 1
a223 1
      && s_iCallCount < 4)
d225 4
a228 2
      ErrorF ("winProcEstablishConnection - Xdmcp enabled, waiting to "
	      "start clipboard client until fourth call.\n");
d285 1
a285 1
       * 10)Thus, when using XDMCP we wait until the second call
d327 1
a327 3
#if 0
  ErrorF ("winProcSetSelectionOwner - Hello.\n");
#endif
d343 2
a344 2
      ErrorF ("winProcSetSelectionOwner - Clipboard not yet started, "
	      "aborting.\n");
d370 1
a370 2
#if 0
	  ErrorF ("winProcSetSelectionOwner - PRIMARY - Going from "
a371 1
#endif
d383 1
a383 2
#if 0
      ErrorF ("winProcSetSelectionOwner - PRIMARY - Now owned by: %d\n",
a384 1
#endif
d393 3
a395 5
	  
#if 0
	  ErrorF ("winProcSetSelectionOwner - CLIPBOARD - Going from "
		  "owned to not owned.\n");
#endif
d407 3
a409 4
#if 0
      ErrorF ("winProcSetSelectionOwner - CLIPBOARD - Now owned by: %d\n",
	      stuff->window);
#endif
d431 3
a433 5
  if (None == stuff->window
      && (None == s_iOwners[CLIP_OWN_PRIMARY]
	  || g_iClipboardWindow == s_iOwners[CLIP_OWN_PRIMARY])
      && (None == s_iOwners[CLIP_OWN_CLIPBOARD]
	  || g_iClipboardWindow == s_iOwners[CLIP_OWN_CLIPBOARD])
d438 5
a442 7
#if 0
      ErrorF ("winProcSetSelectionOwner - We currently own the "
	      "clipboard and neither the PRIMARY nor the CLIPBOARD "
	      "selections are owned, releasing ownership of Win32 "
	      "clipboard.\n");
#endif
      
a447 4
      /* Clear X selection ownership (might still be marked as us owning) */
      s_iOwners[CLIP_OWN_PRIMARY] = None;
      s_iOwners[CLIP_OWN_CLIPBOARD] = None;
      
d454 1
a454 3
#if 0
      ErrorF ("winProcSetSelectionOwner - No window, returning.\n");
#endif
d471 2
a472 4
#if 0
      ErrorF ("winProcSetSelectionOwner - We changed ownership, "
	      "aborting.\n");
#endif
@


1.1
log
@Initial revision
@
text
@d347 2
a348 4
      pWindow = (WindowPtr) SecurityLookupWindow (stuff->window, client,
						  SecurityReadAccess);
      if (!pWindow)
	{
d351 1
a351 1
	}
a433 1
      && g_iClipboardWindow != client->lastDrawableID
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d347 4
a350 2
      int rc = dixLookupWindow(&pWindow, stuff->window, client, DixReadAccess);
      if (rc != Success) {
d353 1
a353 1
      }
@

