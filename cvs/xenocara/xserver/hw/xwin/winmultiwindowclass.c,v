head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.8
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.34;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.34;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.03.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@/*
 *Copyright (C) 1994-2000 The XFree86 Project, Inc. All Rights Reserved.
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL THE XFREE86 PROJECT BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of the XFree86 Project
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from the XFree86 Project.
 *
 * Authors:     Earle F. Philhower, III
 */

#ifdef HAVE_XWIN_CONFIG_H
#include <xwin-config.h>
#endif
#include <X11/Xatom.h>
#include "propertyst.h"
#include "windowstr.h"
#include "winmultiwindowclass.h"
#include "win.h"

/*
 * Local function
 */

DEFINE_ATOM_HELPER(AtmWmWindowRole, "WM_WINDOW_ROLE")

int
winMultiWindowGetClassHint(WindowPtr pWin, char **res_name, char **res_class)
{
    struct _Window *pwin;
    struct _Property *prop;
    int len_name, len_class;

    if (!pWin || !res_name || !res_class) {
        ErrorF("winMultiWindowGetClassHint - pWin, res_name, or res_class was "
               "NULL\n");
        return 0;
    }

    pwin = (struct _Window *) pWin;

    if (pwin->optional)
        prop = (struct _Property *) pwin->optional->userProps;
    else
        prop = NULL;

    *res_name = *res_class = NULL;

    while (prop) {
        if (prop->propertyName == XA_WM_CLASS
            && prop->type == XA_STRING && prop->format == 8 && prop->data) {
            /*
              WM_CLASS property should consist of 2 null terminated strings, but we
              must handle the cases when one or both is absent or not null terminated
            */
            len_name = strlen((char *) prop->data);
            if (len_name > prop->size) len_name = prop->size;

            (*res_name) = malloc(len_name + 1);

            if (!*res_name) {
                ErrorF("winMultiWindowGetClassHint - *res_name was NULL\n");
                return 0;
            }

            /* Copy name and ensure null terminated */
            strncpy((*res_name), prop->data, len_name);
            (*res_name)[len_name] = '\0';

            /* Compute length of class name, it could be that it is absent or not null terminated */
            len_class = (len_name >= prop->size) ? 0 : (strlen(((char *) prop->data) + 1 + len_name));
            if (len_class > prop->size - 1 - len_name) len_class = prop->size - 1 - len_name;

            (*res_class) = malloc(len_class + 1);

            if (!*res_class) {
                ErrorF("winMultiWindowGetClassHint - *res_class was NULL\n");

                /* Free the previously allocated res_name */
                free(*res_name);
                return 0;
            }

            /* Copy class name and ensure null terminated */
            strncpy((*res_class), ((char *) prop->data) + 1 + len_name, len_class);
            (*res_class)[len_class] = '\0';

            return 1;
        }
        else
            prop = prop->next;
    }

    return 0;
}

int
winMultiWindowGetWMHints(WindowPtr pWin, WinXWMHints * hints)
{
    struct _Window *pwin;
    struct _Property *prop;

    if (!pWin || !hints) {
        ErrorF("winMultiWindowGetWMHints - pWin or hints was NULL\n");
        return 0;
    }

    pwin = (struct _Window *) pWin;

    if (pwin->optional)
        prop = (struct _Property *) pwin->optional->userProps;
    else
        prop = NULL;

    memset(hints, 0, sizeof(WinXWMHints));

    while (prop) {
        if (prop->propertyName == XA_WM_HINTS && prop->data) {
            memcpy(hints, prop->data, sizeof(WinXWMHints));
            return 1;
        }
        else
            prop = prop->next;
    }

    return 0;
}

int
winMultiWindowGetWindowRole(WindowPtr pWin, char **res_role)
{
    struct _Window *pwin;
    struct _Property *prop;
    int len_role;

    if (!pWin || !res_role)
        return 0;

    pwin = (struct _Window *) pWin;

    if (pwin->optional)
        prop = (struct _Property *) pwin->optional->userProps;
    else
        prop = NULL;

    *res_role = NULL;
    while (prop) {
        if (prop->propertyName == AtmWmWindowRole()
            && prop->type == XA_STRING && prop->format == 8 && prop->data) {
            len_role = prop->size;

            (*res_role) = malloc(len_role + 1);

            if (!*res_role) {
                ErrorF("winMultiWindowGetWindowRole - *res_role was NULL\n");
                return 0;
            }

            strncpy((*res_role), prop->data, len_role);
            (*res_role)[len_role] = 0;

            return 1;
        }
        else
            prop = prop->next;
    }

    return 0;
}

int
winMultiWindowGetWMNormalHints(WindowPtr pWin, WinXSizeHints * hints)
{
    struct _Window *pwin;
    struct _Property *prop;

    if (!pWin || !hints) {
        ErrorF("winMultiWindowGetWMNormalHints - pWin or hints was NULL\n");
        return 0;
    }

    pwin = (struct _Window *) pWin;

    if (pwin->optional)
        prop = (struct _Property *) pwin->optional->userProps;
    else
        prop = NULL;

    memset(hints, 0, sizeof(WinXSizeHints));

    while (prop) {
        if (prop->propertyName == XA_WM_NORMAL_HINTS && prop->data) {
            memcpy(hints, prop->data, sizeof(WinXSizeHints));
            return 1;
        }
        else
            prop = prop->next;
    }

    return 0;
}

int
winMultiWindowGetTransientFor(WindowPtr pWin, Window *pDaddyId)
{
    struct _Window *pwin;
    struct _Property *prop;

    if (!pWin) {
        ErrorF("winMultiWindowGetTransientFor - pWin was NULL\n");
        return 0;
    }

    pwin = (struct _Window *) pWin;

    if (pwin->optional)
        prop = (struct _Property *) pwin->optional->userProps;
    else
        prop = NULL;

    if (pDaddyId)
        *pDaddyId = 0;

    while (prop) {
        if (prop->propertyName == XA_WM_TRANSIENT_FOR) {
            if (pDaddyId)
                memcpy(pDaddyId, prop->data, sizeof(Window));
            return 1;
        }
        else
            prop = prop->next;
    }

    return 0;
}

int
winMultiWindowGetWMName(WindowPtr pWin, char **wmName)
{
    struct _Window *pwin;
    struct _Property *prop;
    int len_name;

    if (!pWin || !wmName) {
        ErrorF("winMultiWindowGetClassHint - pWin, res_name, or res_class was "
               "NULL\n");
        return 0;
    }

    pwin = (struct _Window *) pWin;

    if (pwin->optional)
        prop = (struct _Property *) pwin->optional->userProps;
    else
        prop = NULL;

    *wmName = NULL;

    while (prop) {
        if (prop->propertyName == XA_WM_NAME
            && prop->type == XA_STRING && prop->data) {
            len_name = prop->size;

            (*wmName) = malloc(len_name + 1);

            if (!*wmName) {
                ErrorF("winMultiWindowGetWMName - *wmName was NULL\n");
                return 0;
            }

            strncpy((*wmName), prop->data, len_name);
            (*wmName)[len_name] = 0;

            return 1;
        }
        else
            prop = prop->next;
    }

    return 0;
}
@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d71 4
d76 1
d85 7
a91 7
            /* Add one to len_name to allow copying of trailing 0 */
            strncpy((*res_name), prop->data, len_name + 1);

            if (len_name == prop->size)
                len_name--;

            len_class = strlen(((char *) prop->data) + 1 + len_name);
d103 3
a105 1
            strcpy((*res_class), ((char *) prop->data) + 1 + len_name);
d223 1
a223 1
winMultiWindowGetTransientFor(WindowPtr pWin, WindowPtr *ppDaddy)
d240 2
a241 2
    if (ppDaddy)
        *ppDaddy = NULL;
d245 2
a246 2
            if (ppDaddy)
                memcpy(ppDaddy, prop->data, sizeof(WindowPtr));
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a45 1

d47 1
a47 1
winMultiWindowGetClassHint (WindowPtr pWin, char **res_name, char **res_class)
d49 8
a56 62
  struct _Window	*pwin;
  struct _Property	*prop;
  int			len_name, len_class;

  if (!pWin || !res_name || !res_class)
    {
      ErrorF ("winMultiWindowGetClassHint - pWin, res_name, or res_class was "
	      "NULL\n");
      return 0;  
    }
  
  pwin = (struct _Window*) pWin;

  if (pwin->optional)
    prop = (struct _Property *) pwin->optional->userProps;
  else
    prop = NULL;
  
  *res_name = *res_class = NULL;

  while (prop)
    {
      if (prop->propertyName == XA_WM_CLASS
	  && prop->type == XA_STRING
	  && prop->format == 8
	  && prop->data)
	{
	  len_name = strlen ((char *) prop->data);

	  (*res_name) = malloc (len_name + 1);
	  
	  if (!*res_name)
	    {
	      ErrorF ("winMultiWindowGetClassHint - *res_name was NULL\n");
	      return 0;
	    }

	  /* Add one to len_name to allow copying of trailing 0 */
	  strncpy ((*res_name), prop->data, len_name + 1);

	  if (len_name == prop->size)
	    len_name--;

	  len_class = strlen (((char *)prop->data) + 1 + len_name);

	  (*res_class) = malloc (len_class + 1);

	  if (!*res_class)
	    {
	      ErrorF ("winMultiWindowGetClassHint - *res_class was NULL\n");
	      
	      /* Free the previously allocated res_name */
	      free (*res_name);
	      return 0;
	    }

	  strcpy ((*res_class), ((char *)prop->data) + 1 + len_name);

	  return 1;
	}
      else
	prop = prop->next;
d58 49
a106 2
  
  return 0;
a108 1

d110 1
a110 1
winMultiWindowGetWMHints (WindowPtr pWin, WinXWMHints *hints)
d112 2
a113 2
  struct _Window	*pwin;
  struct _Property	*prop;
d115 3
a117 25
  if (!pWin || !hints)
    {
      ErrorF ("winMultiWindowGetWMHints - pWin or hints was NULL\n");
      return 0; 
    }

  pwin = (struct _Window*) pWin;

  if (pwin->optional)
    prop = (struct _Property *) pwin->optional->userProps;
  else
    prop = NULL;
  
  memset (hints, 0, sizeof (WinXWMHints));

  while (prop)
    {
      if (prop->propertyName == XA_WM_HINTS
	  && prop->data)
	{
	  memcpy (hints, prop->data, sizeof (WinXWMHints));
	  return 1;
	}
      else
	prop = prop->next;
d119 20
a138 2
  
  return 0;
a140 1

d142 1
a142 1
winMultiWindowGetWindowRole (WindowPtr pWin, char **res_role)
d144 34
a177 39
  struct _Window	*pwin;
  struct _Property	*prop;
  int			len_role;

  if (!pWin || !res_role) 
    return 0; 

  pwin = (struct _Window*) pWin;
  
  if (pwin->optional)
    prop = (struct _Property *) pwin->optional->userProps;
  else
    prop = NULL;
  
  *res_role = NULL;
  while (prop)
    {
      if (prop->propertyName == AtmWmWindowRole ()
	  && prop->type == XA_STRING
	  && prop->format == 8
	  && prop->data)
	{
	  len_role= prop->size;

	  (*res_role) = malloc (len_role + 1);

	  if (!*res_role)
	    {
	      ErrorF ("winMultiWindowGetWindowRole - *res_role was NULL\n");
	      return 0; 
	    }

	  strncpy ((*res_role), prop->data, len_role);
	  (*res_role)[len_role] = 0;

	  return 1;
	}
      else
	prop = prop->next;
d179 2
a180 2
  
  return 0;
a182 1

d184 1
a184 1
winMultiWindowGetWMNormalHints (WindowPtr pWin, WinXSizeHints *hints)
d186 2
a187 2
  struct _Window	*pwin;
  struct _Property	*prop;
d189 3
a191 25
  if (!pWin || !hints)
    {
      ErrorF ("winMultiWindowGetWMNormalHints - pWin or hints was NULL\n");
      return 0; 
    }

  pwin = (struct _Window*) pWin;

  if (pwin->optional)
    prop = (struct _Property *) pwin->optional->userProps;
  else
    prop = NULL;
  
  memset (hints, 0, sizeof (WinXSizeHints));

  while (prop)
    {
      if (prop->propertyName == XA_WM_NORMAL_HINTS
	  && prop->data)
	{
	  memcpy (hints, prop->data, sizeof (WinXSizeHints));
	  return 1;
	}
      else
	prop = prop->next;
d194 19
a212 1
  return 0;
d216 1
a216 1
winMultiWindowGetTransientFor (WindowPtr pWin, WindowPtr *ppDaddy)
d218 7
a224 2
  struct _Window        *pwin;
  struct _Property      *prop;
d226 15
a240 23
  if (!pWin)
    {
      ErrorF ("winMultiWindowGetTransientFor - pWin was NULL\n");
      return 0;
    }

  pwin = (struct _Window*) pWin;

  if (pwin->optional)
    prop = (struct _Property *) pwin->optional->userProps;
  else
    prop = NULL;

  if (ppDaddy)
    *ppDaddy = NULL;

  while (prop)
    {
      if (prop->propertyName == XA_WM_TRANSIENT_FOR)
        {
          if (ppDaddy)
            memcpy (ppDaddy, prop->data, sizeof (WindowPtr));
          return 1;
d242 2
a243 2
      else
        prop = prop->next;
d246 1
a246 1
  return 0;
d250 1
a250 1
winMultiWindowGetWMName (WindowPtr pWin, char **wmName)
d252 8
a259 43
  struct _Window	*pwin;
  struct _Property	*prop;
  int			len_name;

  if (!pWin || !wmName)
    {
      ErrorF ("winMultiWindowGetClassHint - pWin, res_name, or res_class was "
	      "NULL\n");
      return 0;  
    }
  
  pwin = (struct _Window*) pWin;

  if (pwin->optional)
    prop = (struct _Property *) pwin->optional->userProps;
  else
    prop = NULL;
  
  *wmName = NULL;

  while (prop)
    {
      if (prop->propertyName == XA_WM_NAME
	  && prop->type == XA_STRING
	  && prop->data)
	{
	  len_name = prop->size;

	  (*wmName) = malloc (len_name + 1);
	  
	  if (!*wmName)
	    {
	      ErrorF ("winMultiWindowGetWMName - *wmName was NULL\n");
	      return 0;
	    }

	  strncpy ((*wmName), prop->data, len_name);
	  (*wmName)[len_name] = 0;

	  return 1;
	}
      else
	prop = prop->next;
d261 32
a292 2
  
  return 0;
@


1.1
log
@Initial revision
@
text
@a29 1
/* $XFree86$ */
d266 1
a266 1
            memcpy (*ppDaddy, prop->data, sizeof (WindowPtr *));
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d30 1
d267 1
a267 1
            memcpy (*ppDaddy, prop->data, sizeof (WindowPtr));
@

