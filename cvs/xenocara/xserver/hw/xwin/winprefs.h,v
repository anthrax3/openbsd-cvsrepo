head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.10
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.8
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.05.02.19.27.50;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.24;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.03.41;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@#if !defined(WINPREFS_H)
#define WINPREFS_H
/*
 * Copyright (C) 1994-2000 The XFree86 Project, Inc. All Rights Reserved.
 * Copyright (C) Colin Harrison 2005-2008
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE XFREE86 PROJECT BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of the XFree86 Project
 * shall not be used in advertising or otherwise to promote the sale, use
 * or other dealings in this Software without prior written authorization
 * from the XFree86 Project.
 *
 * Authors:     Earle F. Philhower, III
 *              Colin Harrison
 */

/* Need Bool */
#include <X11/Xdefs.h>
/* Need TRUE */
#include "misc.h"

/* Need to know how long paths can be... */
#include <limits.h>
/* Xwindows redefines PATH_MAX to at least 1024 */
#include <X11/Xwindows.h>

#ifndef NAME_MAX
#define NAME_MAX PATH_MAX
#endif
#define MENU_MAX 128            /* Maximum string length of a menu name or item */
#define PARAM_MAX (4*PATH_MAX)  /* Maximum length of a parameter to a MENU */

/* Supported commands in a MENU {} statement */
typedef enum MENUCOMMANDTYPE {
    CMD_EXEC,                   /* /bin/sh -c the parameter            */
    CMD_MENU,                   /* Display a popup menu named param    */
    CMD_SEPARATOR,              /* Menu separator                      */
    CMD_ALWAYSONTOP,            /* Toggle always-on-top mode           */
    CMD_RELOAD                  /* Reparse the .XWINRC file            */
} MENUCOMMANDTYPE;

#define STYLE_NONE     (0L)     /* Dummy the first entry                      */
#define STYLE_NOTITLE  (1L)     /* Force window style no titlebar             */
#define STYLE_OUTLINE  (1L<<1)  /* Force window style just thin-line border   */
#define STYLE_NOFRAME  (1L<<2)  /* Force window style no frame                */
#define STYLE_TOPMOST  (1L<<3)  /* Open a window always-on-top                */
#define STYLE_MAXIMIZE (1L<<4)  /* Open a window maximized                    */
#define STYLE_MINIMIZE (1L<<5)  /* Open a window minimized                    */
#define STYLE_BOTTOM   (1L<<6)  /* Open a window at the bottom of the Z order */

/* Where to place a system menu */
typedef enum MENUPOSITION {
    AT_START,                   /* Place menu at the top of the system menu   */
    AT_END                      /* Put it at the bottom of the menu (default) */
} MENUPOSITION;

/* Menu item definitions */
typedef struct MENUITEM {
    char text[MENU_MAX + 1];    /* To be displayed in menu */
    MENUCOMMANDTYPE cmd;        /* What should it do? */
    char param[PARAM_MAX + 1];  /* Any parameters? */
    unsigned long commandID;    /* Windows WM_COMMAND ID assigned at runtime */
} MENUITEM;

/* A completely read in menu... */
typedef struct MENUPARSED {
    char menuName[MENU_MAX + 1];        /* What's it called in the text? */
    MENUITEM *menuItem;         /* Array of items */
    int menuItems;              /* How big's the array? */
} MENUPARSED;

/* To map between a window and a system menu to add for it */
typedef struct SYSMENUITEM {
    char match[MENU_MAX + 1];   /* String to look for to apply this sysmenu */
    char menuName[MENU_MAX + 1];        /* Which menu to show? Used to set *menu */
    MENUPOSITION menuPos;       /* Where to place it (ignored in root) */
} SYSMENUITEM;

/* To redefine icons for certain window types */
typedef struct ICONITEM {
    char match[MENU_MAX + 1];   /* What string to search for? */
    char iconFile[PATH_MAX + NAME_MAX + 2];     /* Icon location, WIN32 path */
    HICON hicon;                /* LoadImage() result */
} ICONITEM;

/* To redefine styles for certain window types */
typedef struct STYLEITEM {
    char match[MENU_MAX + 1];   /* What string to search for? */
    unsigned long type;         /* What should it do? */
} STYLEITEM;

typedef struct WINPREFS {
    /* Menu information */
    MENUPARSED *menu;           /* Array of created menus */
    int menuItems;              /* How big? */

    /* Taskbar menu settings */
    char rootMenuName[MENU_MAX + 1];    /* Menu for taskbar icon */

    /* System menu addition menus */
    SYSMENUITEM *sysMenu;
    int sysMenuItems;

    /* Which menu to add to unmatched windows? */
    char defaultSysMenuName[MENU_MAX + 1];
    MENUPOSITION defaultSysMenuPos;     /* Where to place it */

    /* Icon information */
    char iconDirectory[PATH_MAX + 1];   /* Where do the .icos lie? (Win32 path) */
    char defaultIconName[NAME_MAX + 1]; /* Replacement for x.ico */
    char trayIconName[NAME_MAX + 1];    /* Replacement for tray icon */

    ICONITEM *icon;
    int iconItems;

    STYLEITEM *style;
    int styleItems;

    /* Force exit flag */
    Bool fForceExit;

    /* Silent exit flag */
    Bool fSilentExit;

} WINPREFS;

/* The global pref settings structure loaded by the winprefyacc.y parser */
extern WINPREFS pref;

/* Functions */
void
 LoadPreferences(void);

void
 SetupRootMenu(HMENU root);

void
 SetupSysMenu(HWND hwnd);

void
 HandleCustomWM_INITMENU(HWND hwnd, HMENU hmenu);

Bool
 HandleCustomWM_COMMAND(HWND hwnd, int command);

int
 winIconIsOverride(HICON hicon);

HICON winOverrideIcon(char *res_name, char *res_class, char *wmName);

unsigned long
 winOverrideStyle(char *res_name, char *res_class, char *wmName);

HICON winTaskbarIcon(void);

HICON winOverrideDefaultIcon(int size);
#endif
@


1.5
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d153 1
a153 1
 SetupRootMenu(unsigned long hmenuRoot);
d156 1
a156 1
 SetupSysMenu(unsigned long hwndIn);
d159 1
a159 1
 HandleCustomWM_INITMENU(unsigned long hwndIn, unsigned long hmenuIn);
d162 1
a162 1
 HandleCustomWM_COMMAND(unsigned long hwndIn, int command);
d165 1
a165 1
 winIconIsOverride(unsigned hiconIn);
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d167 1
a167 1
HICON winOverrideIcon(unsigned long longpWin);
@


1.3
log
@Update to xserver 1.11.2
@
text
@d48 1
a48 1
#define MENU_MAX 128   /* Maximum string length of a menu name or item */
a50 1

d52 6
a57 7
typedef enum MENUCOMMANDTYPE
{
  CMD_EXEC,         /* /bin/sh -c the parameter            */
  CMD_MENU,         /* Display a popup menu named param    */
  CMD_SEPARATOR,    /* Menu separator                      */
  CMD_ALWAYSONTOP,  /* Toggle always-on-top mode           */
  CMD_RELOAD        /* Reparse the .XWINRC file            */
d60 8
a67 8
#define STYLE_NONE     (0L)    /* Dummy the first entry                      */
#define STYLE_NOTITLE  (1L)    /* Force window style no titlebar             */
#define STYLE_OUTLINE  (1L<<1) /* Force window style just thin-line border   */
#define STYLE_NOFRAME  (1L<<2) /* Force window style no frame                */
#define STYLE_TOPMOST  (1L<<3) /* Open a window always-on-top                */
#define STYLE_MAXIMIZE (1L<<4) /* Open a window maximized                    */
#define STYLE_MINIMIZE (1L<<5) /* Open a window minimized                    */
#define STYLE_BOTTOM   (1L<<6) /* Open a window at the bottom of the Z order */
d70 3
a72 4
typedef enum MENUPOSITION
{
  AT_START,   /* Place menu at the top of the system menu   */
  AT_END      /* Put it at the bottom of the menu (default) */
d76 5
a80 6
typedef struct MENUITEM
{
  char text[MENU_MAX+1];   /* To be displayed in menu */
  MENUCOMMANDTYPE cmd;     /* What should it do? */
  char param[PARAM_MAX+1]; /* Any parameters? */
  unsigned long commandID; /* Windows WM_COMMAND ID assigned at runtime */
d84 4
a87 5
typedef struct MENUPARSED
{
  char menuName[MENU_MAX+1]; /* What's it called in the text? */
  MENUITEM *menuItem;        /* Array of items */
  int menuItems;             /* How big's the array? */
d91 4
a94 5
typedef struct SYSMENUITEM
{
  char match[MENU_MAX+1];    /* String to look for to apply this sysmenu */
  char menuName[MENU_MAX+1]; /* Which menu to show? Used to set *menu */
  MENUPOSITION menuPos;      /* Where to place it (ignored in root) */
d98 4
a101 5
typedef struct ICONITEM
{
  char match[MENU_MAX+1];             /* What string to search for? */
  char iconFile[PATH_MAX+NAME_MAX+2]; /* Icon location, WIN32 path */
  HICON hicon;                /* LoadImage() result */
d105 3
a107 4
typedef struct STYLEITEM
{
  char match[MENU_MAX+1];    /* What string to search for? */
  unsigned long type;                 /* What should it do? */
d110 23
a132 24
typedef struct WINPREFS
{
  /* Menu information */
  MENUPARSED *menu; /* Array of created menus */
  int menuItems;      /* How big? */

  /* Taskbar menu settings */
  char rootMenuName[MENU_MAX+1];  /* Menu for taskbar icon */

  /* System menu addition menus */
  SYSMENUITEM *sysMenu;
  int sysMenuItems;

  /* Which menu to add to unmatched windows? */
  char defaultSysMenuName[MENU_MAX+1];
  MENUPOSITION defaultSysMenuPos;   /* Where to place it */

  /* Icon information */
  char iconDirectory[PATH_MAX+1]; /* Where do the .icos lie? (Win32 path) */
  char defaultIconName[NAME_MAX+1];   /* Replacement for x.ico */
  char trayIconName[NAME_MAX+1]; /* Replacement for tray icon */

  ICONITEM *icon;
  int iconItems;
d134 2
a135 2
  STYLEITEM *style;
  int styleItems;
d137 2
a138 2
  /* Force exit flag */
  Bool fForceExit;
d140 2
a141 2
  /* Silent exit flag */
  Bool fSilentExit;
a147 1

d150 1
a150 1
LoadPreferences(void);
d153 1
a153 1
SetupRootMenu (unsigned long hmenuRoot);
d156 1
a156 1
SetupSysMenu (unsigned long hwndIn);
d159 1
a159 2
HandleCustomWM_INITMENU(unsigned long hwndIn,
			unsigned long hmenuIn);
d162 1
a162 2
HandleCustomWM_COMMAND (unsigned long hwndIn,
			int           command);
d165 1
a165 1
winIconIsOverride (unsigned hiconIn);
d167 1
a167 2
HICON
winOverrideIcon (unsigned long longpWin);
d170 1
a170 1
winOverrideStyle (char *res_name, char *res_class, char *wmName);
d172 1
a172 2
HICON
winTaskbarIcon(void);
d174 1
a174 2
HICON
winOverrideDefaultIcon(int size);
@


1.2
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d154 2
a155 1

d183 1
a183 1
winOverrideStyle (unsigned long longpWin);
@


1.1
log
@Initial revision
@
text
@d5 1
d32 1
a33 1
/* $XFree86: $ */
d62 9
d108 1
a108 1
  unsigned long hicon;                /* LoadImage() result */
d111 7
d143 6
d178 1
a178 1
unsigned long
d182 3
d187 1
a187 1
unsigned long
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d32 1
@

