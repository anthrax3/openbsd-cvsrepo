head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.14
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.12
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.10
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.8
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.05.13.32.56;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.05.15.36.10;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.24;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.24;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/*
 *Copyright (C) 2003-2004 Harold L Hunt II All Rights Reserved.
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL HAROLD L HUNT II BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of Harold L Hunt II
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from Harold L Hunt II.
 *
 * Authors:	Harold L Hunt II
 */

#ifdef HAVE_XWIN_CONFIG_H
#include <xwin-config.h>
#endif
#include "win.h"
#include "winmsg.h"

/*
 * Verify all screens have been explicitly specified
 */
static BOOL
isEveryScreenExplicit(void)
{
    int i;

    for (i = 0; i < g_iNumScreens; i++)
        if (!g_ScreenInfo[i].fExplicitScreen)
            return FALSE;

    return TRUE;
}

/*
 * winValidateArgs - Look for invalid argument combinations
 */

Bool
winValidateArgs(void)
{
    int i;
    BOOL fHasNormalScreen0 = FALSE;

    /*
     * Check for a malformed set of -screen parameters.
     * Examples of malformed parameters:
     *    XWin -screen 1
     *    XWin -screen 0 -screen 2
     *    XWin -screen 1 -screen 2
     */
    if (!isEveryScreenExplicit()) {
        ErrorF("winValidateArgs - Malformed set of screen parameter(s).  "
               "Screens must be specified consecutively starting with "
               "screen 0.  That is, you cannot have only a screen 1, nor "
               "could you have screen 0 and screen 2.  You instead must "
               "have screen 0, or screen 0 and screen 1, respectively.  "
               "You can specify as many screens as you want.\n");
        return FALSE;
    }

    /* Loop through all screens */
    for (i = 0; i < g_iNumScreens; ++i) {
        /*
         * Check for any combination of
         * -multiwindow, -mwextwm, and -rootless.
         */
        {
            int iCount = 0;

            /* Count conflicting options */
#ifdef XWIN_MULTIWINDOW
            if (g_ScreenInfo[i].fMultiWindow)
                ++iCount;
#endif
#ifdef XWIN_MULTIWINDOWEXTWM
            if (g_ScreenInfo[i].fMWExtWM)
                ++iCount;
#endif
            if (g_ScreenInfo[i].fRootless)
                ++iCount;

            /* Check if the first screen is without rootless and multiwindow */
            if (iCount == 0 && i == 0)
                fHasNormalScreen0 = TRUE;

            /* Fail if two or more conflicting options */
            if (iCount > 1) {
                ErrorF("winValidateArgs - Only one of -multiwindow, -mwextwm, "
                       "and -rootless can be specific at a time.\n");
                return FALSE;
            }
        }

        /* Check for -multiwindow or -mwextwm and Xdmcp */
        /* allow xdmcp if screen 0 is normal. */
        if (g_fXdmcpEnabled && !fHasNormalScreen0 && (FALSE
#ifdef XWIN_MULTIWINDOW
                                                      || g_ScreenInfo[i].
                                                      fMultiWindow
#endif
#ifdef XWIN_MULTIWINDOWEXTWM
                                                      || g_ScreenInfo[i].
                                                      fMWExtWM
#endif
            )
            ) {
            ErrorF("winValidateArgs - Xdmcp (-query, -broadcast, or -indirect) "
                   "is invalid with -multiwindow or -mwextwm.\n");
            return FALSE;
        }

        /* Check for -multiwindow, -mwextwm, or -rootless and fullscreen */
        if (g_ScreenInfo[i].fFullScreen && (FALSE
#ifdef XWIN_MULTIWINDOW
                                            || g_ScreenInfo[i].fMultiWindow
#endif
#ifdef XWIN_MULTIWINDOWEXTWM
                                            || g_ScreenInfo[i].fMWExtWM
#endif
                                            || g_ScreenInfo[i].fRootless)
            ) {
            ErrorF("winValidateArgs - -fullscreen is invalid with "
                   "-multiwindow, -mwextwm, or -rootless.\n");
            return FALSE;
        }

        /* Check for !fullscreen and any fullscreen-only parameters */
        if (!g_ScreenInfo[i].fFullScreen
            && (g_ScreenInfo[i].dwRefreshRate != WIN_DEFAULT_REFRESH
                || g_ScreenInfo[i].dwBPP != WIN_DEFAULT_BPP)) {
            ErrorF("winValidateArgs - -refresh and -depth are only valid "
                   "with -fullscreen.\n");
            return FALSE;
        }

        /* Check for fullscreen and any non-fullscreen parameters */
        if (g_ScreenInfo[i].fFullScreen
            && ((g_ScreenInfo[i].iResizeMode != notAllowed)
                || !g_ScreenInfo[i].fDecoration
                || g_ScreenInfo[i].fLessPointer)) {
            ErrorF("winValidateArgs - -fullscreen is invalid with "
                   "-scrollbars, -resize, -nodecoration, or -lesspointer.\n");
            return FALSE;
        }
    }

    winDebug("winValidateArgs - Returning.\n");

    return TRUE;
}
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@a59 1
    int iMaxConsecutiveScreen = 0;
a60 1
    BOOL fImplicitScreenFound = FALSE;
@


1.3
log
@Update to xserver 1.11.2
@
text
@a36 3



d43 1
a43 1
  int i;
d45 3
a47 3
  for (i = 0; i < g_iNumScreens; i++)
    if (!g_ScreenInfo[i].fExplicitScreen)
      return FALSE;
d49 1
a49 1
  return TRUE;
d57 1
a57 1
winValidateArgs (void)
d59 20
a78 21
  int		i;
  int		iMaxConsecutiveScreen = 0;
  BOOL		fHasNormalScreen0 = FALSE;
  BOOL		fImplicitScreenFound = FALSE;

  /*
   * Check for a malformed set of -screen parameters.
   * Examples of malformed parameters:
   *	XWin -screen 1
   *	XWin -screen 0 -screen 2
   *	XWin -screen 1 -screen 2
   */
  if (!isEveryScreenExplicit())
    {
      ErrorF ("winValidateArgs - Malformed set of screen parameter(s).  "
	      "Screens must be specified consecutively starting with "
	      "screen 0.  That is, you cannot have only a screen 1, nor "
	      "could you have screen 0 and screen 2.  You instead must "
	      "have screen 0, or screen 0 and screen 1, respectively.  "
	      "You can specify as many screens as you want.\n");
      return FALSE;
d81 8
a88 9
  /* Loop through all screens */
  for (i = 0; i < g_iNumScreens; ++i)
    {
      /*
       * Check for any combination of
       * -multiwindow, -mwextwm, and -rootless.
       */
      {
	int		iCount = 0;
d90 1
a90 1
	/* Count conflicting options */
d92 2
a93 2
	if (g_ScreenInfo[i].fMultiWindow)
	  ++iCount;
d96 2
a97 2
	if (g_ScreenInfo[i].fMWExtWM)
	  ++iCount;
d99 2
a100 2
	if (g_ScreenInfo[i].fRootless)
	  ++iCount;
d102 15
a116 17
	/* Check if the first screen is without rootless and multiwindow */ 
	if (iCount == 0 && i == 0)
	  fHasNormalScreen0 = TRUE;  

	/* Fail if two or more conflicting options */
	if (iCount > 1)
	  {
	    ErrorF ("winValidateArgs - Only one of -multiwindow, -mwextwm, "
		    "and -rootless can be specific at a time.\n");
	    return FALSE;
	  }
      }

      /* Check for -multiwindow or -mwextwm and Xdmcp */
      /* allow xdmcp if screen 0 is normal. */
      if (g_fXdmcpEnabled && !fHasNormalScreen0
	  && (FALSE
d118 2
a119 1
	      || g_ScreenInfo[i].fMultiWindow
d122 2
a123 1
	      || g_ScreenInfo[i].fMWExtWM
d125 9
a133 11
	      )
	  )
	{
	  ErrorF ("winValidateArgs - Xdmcp (-query, -broadcast, or -indirect) "
		  "is invalid with -multiwindow or -mwextwm.\n");
	  return FALSE;
	}

      /* Check for -multiwindow, -mwextwm, or -rootless and fullscreen */
      if (g_ScreenInfo[i].fFullScreen
	  && (FALSE
d135 1
a135 1
	      || g_ScreenInfo[i].fMultiWindow
d138 1
a138 1
	      || g_ScreenInfo[i].fMWExtWM
d140 25
a164 28
	      || g_ScreenInfo[i].fRootless)
	  )
	{
	  ErrorF ("winValidateArgs - -fullscreen is invalid with "
		  "-multiwindow, -mwextwm, or -rootless.\n");
	  return FALSE;
	}
      
      /* Check for !fullscreen and any fullscreen-only parameters */
      if (!g_ScreenInfo[i].fFullScreen
	  && (g_ScreenInfo[i].dwRefreshRate != WIN_DEFAULT_REFRESH
	      || g_ScreenInfo[i].dwBPP != WIN_DEFAULT_BPP))
	{
	  ErrorF ("winValidateArgs - -refresh and -depth are only valid "
		  "with -fullscreen.\n");
	  return FALSE;
	}

      /* Check for fullscreen and any non-fullscreen parameters */
      if (g_ScreenInfo[i].fFullScreen
	  && ((g_ScreenInfo[i].iResizeMode != notAllowed)
	      || !g_ScreenInfo[i].fDecoration
	      || g_ScreenInfo[i].fLessPointer))
	{
	  ErrorF ("winValidateArgs - -fullscreen is invalid with "
		  "-scrollbars, -resize, -nodecoration, or -lesspointer.\n");
	  return FALSE;
	}
d167 1
a167 1
  winDebug ("winValidateArgs - Returning.\n");
d169 1
a169 1
  return TRUE;
@


1.2
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a37 7
/*
 * References to external symbols
 */

extern int			g_iNumScreens;
extern winScreenInfo *		g_ScreenInfo;
extern Bool			g_fXdmcpEnabled;
d157 2
a158 2
	  && (g_ScreenInfo[i].dwRefreshRate != WIN_DEFAULT_BPP
	      || g_ScreenInfo[i].dwBPP != WIN_DEFAULT_REFRESH))
d167 1
a167 1
	  && (g_ScreenInfo[i].fScrollbars
d172 1
a172 1
		  "-scrollbars, -nodecoration, or -lesspointer.\n");
@


1.1
log
@Initial revision
@
text
@d43 1
a43 1
extern winScreenInfo		g_ScreenInfo[];
d48 1
a48 1
 * Prototypes
d50 4
d55 3
a57 2
Bool
winValidateArgs (void);
d59 2
d72 1
d81 1
a81 9
  for (i = 0; i < MAXSCREENS; i++)
    {
      if (g_ScreenInfo[i].fExplicitScreen)
	iMaxConsecutiveScreen = i + 1;
    }
  winErrorFVerb (2, "winValidateArgs - g_iNumScreens: %d "
		 "iMaxConsecutiveScreen: %d\n",
		 g_iNumScreens, iMaxConsecutiveScreen);
  if (g_iNumScreens < iMaxConsecutiveScreen)
d87 2
a88 3
	      "have screen 0, or screen 0 and screen 1, respectively.  Of "
	      "you can specify as many screens as you want from 0 up to "
	      "%d.\n", MAXSCREENS - 1);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
