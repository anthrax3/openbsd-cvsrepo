head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.8
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.6
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.4
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.09.16.19.10.24;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	Te1daavkBLskZ8gc;

1.6
date	2014.09.27.17.53.03;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	cVXoV5PxI8YrEaVA;

1.5
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.12.05.15.36.09;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.27.19.02.36;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.31;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.26;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.26;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.03.39;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@#ifndef __WIN_CONFIG_H__
#define __WIN_CONFIG_H__
/*
 *Copyright (C) 1994-2000 The XFree86 Project, Inc. All Rights Reserved.
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL THE XFREE86 PROJECT BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of the XFree86 Project
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from the XFree86 Project.
 *
 * Authors: Alexander Gottwald	
 */

#include "win.h"
#ifdef XWIN_XF86CONFIG
#include "../xfree86/parser/xf86Parser.h"
#endif

/* These are taken from hw/xfree86/common/xf86str.h */

typedef struct {
    CARD32 red, green, blue;
} rgb;

typedef struct {
    float red, green, blue;
} Gamma;

typedef struct {
    char *identifier;
    char *vendor;
    char *board;
    char *chipset;
    char *ramdac;
    char *driver;
    struct _confscreenrec *myScreenSection;
    Bool claimed;
    Bool active;
    Bool inUse;
    int videoRam;
    void *options;
    int screen;                 /* For multi-CRTC cards */
} GDevRec, *GDevPtr;

typedef struct {
    char *identifier;
    char *driver;
    void *commonOptions;
    void *extraOptions;
} IDevRec, *IDevPtr;

typedef struct {
    int frameX0;
    int frameY0;
    int virtualX;
    int virtualY;
    int depth;
    int fbbpp;
    rgb weight;
    rgb blackColour;
    rgb whiteColour;
    int defaultVisual;
    char **modes;
    void *options;
} DispRec, *DispPtr;

typedef struct _confxvportrec {
    char *identifier;
    void *options;
} confXvPortRec, *confXvPortPtr;

typedef struct _confxvadaptrec {
    char *identifier;
    int numports;
    confXvPortPtr ports;
    void *options;
} confXvAdaptorRec, *confXvAdaptorPtr;

typedef struct _confscreenrec {
    char *id;
    int screennum;
    int defaultdepth;
    int defaultbpp;
    int defaultfbbpp;
    GDevPtr device;
    int numdisplays;
    DispPtr displays;
    int numxvadaptors;
    confXvAdaptorPtr xvadaptors;
    void *options;
} confScreenRec, *confScreenPtr;

typedef enum {
    PosObsolete = -1,
    PosAbsolute = 0,
    PosRightOf,
    PosLeftOf,
    PosAbove,
    PosBelow,
    PosRelative
} PositionType;

typedef struct _screenlayoutrec {
    confScreenPtr screen;
    char *topname;
    confScreenPtr top;
    char *bottomname;
    confScreenPtr bottom;
    char *leftname;
    confScreenPtr left;
    char *rightname;
    confScreenPtr right;
    PositionType where;
    int x;
    int y;
    char *refname;
    confScreenPtr refscreen;
} screenLayoutRec, *screenLayoutPtr;

typedef struct _serverlayoutrec {
    char *id;
    screenLayoutPtr screens;
    GDevPtr inactives;
    IDevPtr inputs;
    void *options;
} serverLayoutRec, *serverLayoutPtr;

/*
 * winconfig.c
 */

typedef struct {
    /* Files */
#ifdef XWIN_XF86CONFIG
    char *configFile;
    char *configDir;
#endif
    char *fontPath;
    /* input devices - keyboard */
#ifdef XWIN_XF86CONFIG
    char *keyboard;
#endif
    char *xkbRules;
    char *xkbModel;
    char *xkbLayout;
    char *xkbVariant;
    char *xkbOptions;
    /* layout */
    char *screenname;
    /* mouse settings */
    char *mouse;
    Bool emulate3buttons;
    long emulate3timeout;
} WinCmdlineRec, *WinCmdlinePtr;

extern WinCmdlineRec g_cmdline;

#ifdef XWIN_XF86CONFIG
extern XF86ConfigPtr g_xf86configptr;
#endif
extern serverLayoutRec g_winConfigLayout;

/*
 * Function prototypes
 */

Bool winReadConfigfile(void);
Bool winConfigFiles(void);
Bool winConfigOptions(void);
Bool winConfigScreens(void);
Bool winConfigKeyboard(DeviceIntPtr pDevice);
Bool winConfigMouse(DeviceIntPtr pDevice);

typedef struct {
    double freq;
    int units;
} OptFrequency;

typedef union {
    unsigned long num;
    char *str;
    double realnum;
    Bool bool;
    OptFrequency freq;
} ValueUnion;

typedef enum {
    OPTV_NONE = 0,
    OPTV_INTEGER,
    OPTV_STRING,                /* a non-empty string */
    OPTV_ANYSTR,                /* Any string, including an empty one */
    OPTV_REAL,
    OPTV_BOOLEAN,
    OPTV_PERCENT,
    OPTV_FREQ
} OptionValueType;

typedef enum {
    OPTUNITS_HZ = 1,
    OPTUNITS_KHZ,
    OPTUNITS_MHZ
} OptFreqUnits;

typedef struct {
    int token;
    const char *name;
    OptionValueType type;
    ValueUnion value;
    Bool found;
} OptionInfoRec, *OptionInfoPtr;

/*
 * Function prototypes
 */

char *winSetStrOption(void *optlist, const char *name, char *deflt);
int winSetBoolOption(void *optlist, const char *name, int deflt);
int winSetIntOption(void *optlist, const char *name, int deflt);
double winSetRealOption(void *optlist, const char *name, double deflt);
double winSetPercentOption(void *optlist, const char *name, double deflt);

#ifdef XWIN_XF86CONFIG
XF86OptionPtr winFindOption(XF86OptionPtr list, const char *name);
char *winFindOptionValue(XF86OptionPtr list, const char *name);
#endif
int winNameCompare(const char *s1, const char *s2);
char *winNormalizeName(const char *s);

typedef struct {
    struct {
        long leds;
        long delay;
        long rate;
    } keyboard;
    XkbRMLVOSet xkb;
    struct {
        Bool emulate3Buttons;
        long emulate3Timeout;
    } pointer;
} winInfoRec, *winInfoPtr;

extern winInfoRec g_winInfo;

#endif
@


1.6
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@a59 1
    int textClockFreq;
@


1.5
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d61 1
a61 1
    pointer options;
d68 2
a69 2
    pointer commonOptions;
    pointer extraOptions;
d84 1
a84 1
    pointer options;
d89 1
a89 1
    pointer options;
d96 1
a96 1
    pointer options;
d110 1
a110 1
    pointer options;
d145 1
a145 1
    pointer options;
d236 5
a240 5
char *winSetStrOption(pointer optlist, const char *name, char *deflt);
int winSetBoolOption(pointer optlist, const char *name, int deflt);
int winSetIntOption(pointer optlist, const char *name, int deflt);
double winSetRealOption(pointer optlist, const char *name, double deflt);
double winSetPercentOption(pointer optlist, const char *name, double deflt);
@


1.4
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@a37 1

d40 107
a146 140
typedef struct
{
  CARD32 red, green, blue;
}
rgb;


typedef struct
{
  float red, green, blue;
}
Gamma;


typedef struct
{
  char *identifier;
  char *vendor;
  char *board;
  char *chipset;
  char *ramdac;
  char *driver;
  struct _confscreenrec *myScreenSection;
  Bool claimed;
  Bool active;
  Bool inUse;
  int videoRam;
  int textClockFreq;
  pointer options;
  int screen;			/* For multi-CRTC cards */
}
GDevRec, *GDevPtr;


typedef struct
{
  char *identifier;
  char *driver;
  pointer commonOptions;
  pointer extraOptions;
}
IDevRec, *IDevPtr;


typedef struct
{
  int frameX0;
  int frameY0;
  int virtualX;
  int virtualY;
  int depth;
  int fbbpp;
  rgb weight;
  rgb blackColour;
  rgb whiteColour;
  int defaultVisual;
  char **modes;
  pointer options;
}
DispRec, *DispPtr;


typedef struct _confxvportrec
{
  char *identifier;
  pointer options;
}
confXvPortRec, *confXvPortPtr;


typedef struct _confxvadaptrec
{
  char *identifier;
  int numports;
  confXvPortPtr ports;
  pointer options;
}
confXvAdaptorRec, *confXvAdaptorPtr;


typedef struct _confscreenrec
{
  char *id;
  int screennum;
  int defaultdepth;
  int defaultbpp;
  int defaultfbbpp;
  GDevPtr device;
  int numdisplays;
  DispPtr displays;
  int numxvadaptors;
  confXvAdaptorPtr xvadaptors;
  pointer options;
}
confScreenRec, *confScreenPtr;


typedef enum
{
  PosObsolete = -1,
  PosAbsolute = 0,
  PosRightOf,
  PosLeftOf,
  PosAbove,
  PosBelow,
  PosRelative
}
PositionType;


typedef struct _screenlayoutrec
{
  confScreenPtr screen;
  char *topname;
  confScreenPtr top;
  char *bottomname;
  confScreenPtr bottom;
  char *leftname;
  confScreenPtr left;
  char *rightname;
  confScreenPtr right;
  PositionType where;
  int x;
  int y;
  char *refname;
  confScreenPtr refscreen;
}
screenLayoutRec, *screenLayoutPtr;


typedef struct _serverlayoutrec
{
  char *id;
  screenLayoutPtr screens;
  GDevPtr inactives;
  IDevPtr inputs;
  pointer options;
}
serverLayoutRec, *serverLayoutPtr;

d152 2
a153 3
typedef struct
{
  /* Files */
d155 2
a156 2
  char *configFile;
  char *configDir;
d158 2
a159 2
  char *fontPath;
  /* input devices - keyboard */
d161 1
a161 1
  char *keyboard;
d163 12
a174 13
  char *xkbRules; 
  char *xkbModel;
  char *xkbLayout;
  char *xkbVariant;
  char *xkbOptions;
  /* layout */
  char *screenname;
  /* mouse settings */
  char *mouse;
  Bool emulate3buttons;
  long emulate3timeout;
}
WinCmdlineRec, *WinCmdlinePtr;
d176 1
a177 1
extern WinCmdlineRec g_cmdline;
a182 1

d187 44
a230 60
Bool winReadConfigfile (void);
Bool winConfigFiles (void);
Bool winConfigOptions (void);
Bool winConfigScreens (void);
Bool winConfigKeyboard (DeviceIntPtr pDevice);
Bool winConfigMouse (DeviceIntPtr pDevice);


typedef struct
{
  double freq;
  int units;
}
OptFrequency;


typedef union
{
  unsigned long num;
  char *str;
  double realnum;
  Bool bool;
  OptFrequency freq;
}
ValueUnion;


typedef enum
{
  OPTV_NONE = 0,
  OPTV_INTEGER,
  OPTV_STRING,			/* a non-empty string */
  OPTV_ANYSTR,			/* Any string, including an empty one */
  OPTV_REAL,
  OPTV_BOOLEAN,
  OPTV_PERCENT,
  OPTV_FREQ
}
OptionValueType;


typedef enum
{
  OPTUNITS_HZ = 1,
  OPTUNITS_KHZ,
  OPTUNITS_MHZ
}
OptFreqUnits;


typedef struct
{
  int token;
  const char *name;
  OptionValueType type;
  ValueUnion value;
  Bool found;
}
OptionInfoRec, *OptionInfoPtr;

d236 6
a241 5
char *winSetStrOption (pointer optlist, const char *name, char *deflt);
int winSetBoolOption (pointer optlist, const char *name, int deflt);
int winSetIntOption (pointer optlist, const char *name, int deflt);
double winSetRealOption (pointer optlist, const char *name, double deflt);
double winSetPercentOption (pointer optlist, const char *name, double deflt);
d243 2
a244 2
XF86OptionPtr winFindOption (XF86OptionPtr list, const char *name);
char *winFindOptionValue (XF86OptionPtr list, const char *name);
d246 2
a247 22
int winNameCompare (const char *s1, const char *s2);
char *winNormalizeName (const char *s);


typedef struct
{
  struct
  {
    long leds;
    long delay;
    long rate;
  }
  keyboard;
  XkbRMLVOSet xkb;
  struct
  {
    Bool emulate3Buttons;
    long emulate3Timeout;
  }
  pointer;
}
winInfoRec, *winInfoPtr;
d249 12
@


1.3
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@d259 1
d293 1
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@d191 1
a197 3
#ifdef XKB
  Bool noXkbExtension;
  char *xkbMap;
a202 1
#endif
d309 1
a309 19
#ifdef XKB
  struct
  {
    Bool disable;
    char *rules;
    char *model;
    char *layout;
    char *variant;
    char *options;
    char *initialMap;
    char *keymap;
    char *types;
    char *compat;
    char *keycodes;
    char *symbols;
    char *geometry;
  }
  xkb;
#endif
@


1.1
log
@Initial revision
@
text
@a31 1
/* $Id$ */
a192 1
  char *rgbPath;
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d32 1
@

