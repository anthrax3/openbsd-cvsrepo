head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.12
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.10
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.8
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.18
	OPENBSD_5_0:1.1.1.2.0.16
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.12
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.14
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.10
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2016.05.29.12.02.39;	author matthieu;	state Exp;
branches;
next	1.3;
commitid	s0SI41sEunLdyFfd;

1.3
date	2013.06.07.17.28.54;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.10.13.21.29;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.22.36;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.22.36;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.03.33;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to xserver 1.18.3. Tested by shadchin@@ and naddy@@.

Note that indirect GLX is now disbled by default.
@
text
@/*
 *Copyright (C) 1994-2000 The XFree86 Project, Inc. All Rights Reserved.
 *
 *Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 *"Software"), to deal in the Software without restriction, including
 *without limitation the rights to use, copy, modify, merge, publish,
 *distribute, sublicense, and/or sell copies of the Software, and to
 *permit persons to whom the Software is furnished to do so, subject to
 *the following conditions:
 *
 *The above copyright notice and this permission notice shall be
 *included in all copies or substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL THE XFREE86 PROJECT BE LIABLE FOR
 *ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 *CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 *Except as contained in this notice, the name of the XFree86 Project
 *shall not be used in advertising or otherwise to promote the sale, use
 *or other dealings in this Software without prior written authorization
 *from the XFree86 Project.
 *
 * Authors: Alexander Gottwald	
 */

#ifdef HAVE_XWIN_CONFIG_H
#include <xwin-config.h>
#endif
#include "win.h"
#include "winmsg.h"
#if CYGDEBUG
#include "winmessages.h"
#endif
#include <stdarg.h>

void
winVMsg(int, MessageType, int verb, const char *, va_list)
_X_ATTRIBUTE_PRINTF(4, 0);

void
winVMsg(int scrnIndex, MessageType type, int verb, const char *format,
        va_list ap)
{
    LogVMessageVerb(type, verb, format, ap);
}

void
winDrvMsg(int scrnIndex, MessageType type, const char *format, ...)
{
    va_list ap;

    va_start(ap, format);
    LogVMessageVerb(type, 0, format, ap);
    va_end(ap);
}

void
winMsg(MessageType type, const char *format, ...)
{
    va_list ap;

    va_start(ap, format);
    LogVMessageVerb(type, 1, format, ap);
    va_end(ap);
}

void
winDrvMsgVerb(int scrnIndex, MessageType type, int verb, const char *format,
              ...)
{
    va_list ap;

    va_start(ap, format);
    LogVMessageVerb(type, verb, format, ap);
    va_end(ap);
}

void
winMsgVerb(MessageType type, int verb, const char *format, ...)
{
    va_list ap;

    va_start(ap, format);
    LogVMessageVerb(type, verb, format, ap);
    va_end(ap);
}

void
winErrorFVerb(int verb, const char *format, ...)
{
    va_list ap;

    va_start(ap, format);
    LogVMessageVerb(X_NONE, verb, format, ap);
    va_end(ap);
}

void
winDebug(const char *format, ...)
{
    va_list ap;

    va_start(ap, format);
    LogVMessageVerb(X_NONE, 3, format, ap);
    va_end(ap);
}

void
winTrace(const char *format, ...)
{
    va_list ap;

    va_start(ap, format);
    LogVMessageVerb(X_NONE, 10, format, ap);
    va_end(ap);
}

void
winW32Error(int verb, const char *msg)
{
    winW32ErrorEx(verb, msg, GetLastError());
}

void
winW32ErrorEx(int verb, const char *msg, DWORD errorcode)
{
    LPVOID buffer;

    if (!FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER |
                       FORMAT_MESSAGE_FROM_SYSTEM |
                       FORMAT_MESSAGE_IGNORE_INSERTS,
                       NULL,
                       errorcode,
                       MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
                       (LPTSTR) &buffer, 0, NULL)) {
        winErrorFVerb(verb, "Unknown error in FormatMessage!\n");
    }
    else {
        winErrorFVerb(verb, "%s %s", msg, (char *) buffer);
        LocalFree(buffer);
    }
}

#if CYGDEBUG
void
winDebugWin32Message(const char *function, HWND hwnd, UINT message,
                     WPARAM wParam, LPARAM lParam)
{
    static int force = 0;

    if (message >= WM_USER) {
        if (force || getenv("WIN_DEBUG_MESSAGES") ||
            getenv("WIN_DEBUG_WM_USER")) {
            winDebug("%s - Message WM_USER + %d\n", function,
                     message - WM_USER);
            winDebug("\thwnd 0x%p wParam 0x%x lParam 0x%x\n", hwnd, (int)wParam,
                     (int)lParam);
        }
    }
    else if (message < MESSAGE_NAMES_LEN && MESSAGE_NAMES[message]) {
        const char *msgname = MESSAGE_NAMES[message];
        char buffer[64];

        snprintf(buffer, sizeof(buffer), "WIN_DEBUG_%s", msgname);
        buffer[63] = 0;
        if (force || getenv("WIN_DEBUG_MESSAGES") || getenv(buffer)) {
            winDebug("%s - Message %s\n", function, MESSAGE_NAMES[message]);
            winDebug("\thwnd 0x%p wParam 0x%x lParam 0x%x\n", hwnd, (int)wParam,
                     (int)lParam);
        }
    }
}
#else
void
winDebugWin32Message(const char *function, HWND hwnd, UINT message,
                     WPARAM wParam, LPARAM lParam)
{
}
#endif
@


1.3
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d161 2
a162 2
            winDebug("\thwnd 0x%x wParam 0x%x lParam 0x%x\n", hwnd, wParam,
                     lParam);
d173 2
a174 2
            winDebug("\thwnd 0x%x wParam 0x%x lParam 0x%x\n", hwnd, wParam,
                     lParam);
@


1.2
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d41 3
a43 1
void winVMsg(int, MessageType, int verb, const char *, va_list);
d140 1
a140 1
                       (LPTSTR) & buffer, 0, NULL)) {
@


1.1
log
@Initial revision
@
text
@a29 1
/* $XFree86$ */
d41 1
a41 1
void winVMsg (int, MessageType, int verb, const char *, va_list);
d44 2
a45 2
winVMsg (int scrnIndex, MessageType type, int verb, const char *format,
	 va_list ap)
d47 1
a47 1
  LogVMessageVerb(type, verb, format, ap);
a49 1

d51 1
a51 1
winDrvMsg (int scrnIndex, MessageType type, const char *format, ...)
d53 5
a57 4
  va_list ap;
  va_start (ap, format);
  LogVMessageVerb(type, 0, format, ap);
  va_end (ap);
a59 1

d61 1
a61 1
winMsg (MessageType type, const char *format, ...)
d63 5
a67 4
  va_list ap;
  va_start (ap, format);
  LogVMessageVerb(type, 1, format, ap);
  va_end (ap);
a69 1

d71 2
a72 2
winDrvMsgVerb (int scrnIndex, MessageType type, int verb, const char *format,
	       ...)
d74 5
a78 4
  va_list ap;
  va_start (ap, format);
  LogVMessageVerb(type, verb, format, ap);
  va_end (ap);
a80 1

d82 1
a82 1
winMsgVerb (MessageType type, int verb, const char *format, ...)
d84 5
a88 4
  va_list ap;
  va_start (ap, format);
  LogVMessageVerb(type, verb, format, ap);
  va_end (ap);
a90 1

d92 1
a92 1
winErrorFVerb (int verb, const char *format, ...)
d94 5
a98 4
  va_list ap;
  va_start (ap, format);
  LogVMessageVerb(X_NONE, verb, format, ap);
  va_end (ap);
d102 1
a102 1
winDebug (const char *format, ...)
d104 5
a108 4
  va_list ap;
  va_start (ap, format);
  LogVMessageVerb(X_NONE, 3, format, ap);
  va_end (ap);
d112 1
a112 1
winTrace (const char *format, ...)
d114 5
a118 4
  va_list ap;
  va_start (ap, format);
  LogVMessageVerb(X_NONE, 10, format, ap);
  va_end (ap);
d131 9
a139 12
    if (!FormatMessage( 
                FORMAT_MESSAGE_ALLOCATE_BUFFER | 
                FORMAT_MESSAGE_FROM_SYSTEM | 
                FORMAT_MESSAGE_IGNORE_INSERTS,
                NULL,
                errorcode,
                MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
                (LPTSTR) &buffer,
                0,
                NULL ))
    {
        winErrorFVerb(verb, "Unknown error in FormatMessage!\n"); 
d141 2
a142 3
    else
    {
        winErrorFVerb(verb, "%s %s", msg, (char *)buffer); 
d148 3
a150 1
void winDebugWin32Message(const char* function, HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
d152 1
a152 1
  static int force = 0;
d154 8
a161 7
  if (message >= WM_USER)
    {
      if (force || getenv("WIN_DEBUG_MESSAGES") || getenv("WIN_DEBUG_WM_USER"))
      {
        winDebug("%s - Message WM_USER + %d\n", function, message - WM_USER);
        winDebug("\thwnd 0x%x wParam 0x%x lParam 0x%x\n", hwnd, wParam, lParam);
      }
d163 11
a173 11
  else if (message < MESSAGE_NAMES_LEN && MESSAGE_NAMES[message])
    {
      const char *msgname = MESSAGE_NAMES[message];
      char buffer[64];
      snprintf(buffer, sizeof(buffer), "WIN_DEBUG_%s", msgname);
      buffer[63] = 0;
      if (force || getenv("WIN_DEBUG_MESSAGES") || getenv(buffer))
      {
        winDebug("%s - Message %s\n", function, MESSAGE_NAMES[message]);
        winDebug("\thwnd 0x%x wParam 0x%x lParam 0x%x\n", hwnd, wParam, lParam);
      }
d177 3
a179 1
void winDebugWin32Message(const char* function, HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d30 1
@

