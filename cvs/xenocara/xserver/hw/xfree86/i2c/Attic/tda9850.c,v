head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.1.0.16
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.12
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.10
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.8
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2015.09.16.19.10.22;	author matthieu;	state dead;
branches;
next	1.4;
commitid	Te1daavkBLskZ8gc;

1.4
date	2013.06.07.17.28.51;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2012.06.10.13.21.24;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.05.15.36.07;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.17.37;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.17.37;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to xserver 1.17.2. tested by dcoppa@@, jsg@@, jasper@@ & naddy@@
@
text
@#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "xf86.h"
#include "xf86i2c.h"
#include "tda9850.h"
#include "i2c_def.h"

#define TDA9850(a,b)	{ \
		data[0]=a; \
		data[1]=b; \
		I2C_WriteRead(&(t->d), data, 2, NULL, 0); \
		}

TDA9850Ptr
Detect_tda9850(I2CBusPtr b, I2CSlaveAddr addr)
{
    TDA9850Ptr t;
    I2CByte a;

    t = calloc(1, sizeof(TDA9850Rec));
    if (t == NULL)
        return NULL;
    switch (addr) {
    case TDA9850_ADDR_1:
        t->d.DevName = "TDA9850 BTSC Stereo+SAP Audio Processor";
        break;
    default:
        t->d.DevName = "Generic TDAxxxx";
        break;
    }
    t->d.SlaveAddr = addr;
    t->d.pI2CBus = b;
    t->d.NextDev = NULL;
    t->d.StartTimeout = b->StartTimeout;
    t->d.BitTimeout = b->BitTimeout;
    t->d.AcknTimeout = b->AcknTimeout;
    t->d.ByteTimeout = b->ByteTimeout;

    if (!I2C_WriteRead(&(t->d), NULL, 0, &a, 1)) {
        free(t);
        return NULL;
    }

    /* set default parameters */
    if (!I2CDevInit(&(t->d))) {
        free(t);
        return NULL;
    }

    return t;
}

Bool
tda9850_init(TDA9850Ptr t)
{
    t->stereo = 1;
    t->sap = 0;
    t->mute = TRUE;
    t->sap_mute = TRUE;
    tda9850_setaudio(t);
    return TRUE;
}

void
tda9850_setaudio(TDA9850Ptr t)
{
    CARD8 data[2];

    if (t->mux == 2) {
        TDA9850(0x04, 0x0F);
        TDA9850(0x05, 0x0F);
        TDA9850(0x06, 0x58);
        TDA9850(0x07, 0x07);
        TDA9850(0x08, 0x00);
        TDA9850(0x09, 0x00);
        TDA9850(0x0A, 0x03);
    }
    else {
        TDA9850(0x04, 0x07);
        TDA9850(0x05, 0x07);
        TDA9850(0x06, 0x58);
        TDA9850(0x07, 0x07);
        TDA9850(0x08, 0x10);
        TDA9850(0x09, 0x10);
        TDA9850(0x0A, 0x03);
    }

    TDA9850(0x06,
            (t->stereo << 6) | (t->sap << 7) | (t->mute ? 0x8 : 0) | (t->
                                                                      sap_mute ?
                                                                      0x10 :
                                                                      0x0));
}

void
tda9850_mute(TDA9850Ptr t, Bool mute)
{
    CARD8 data[2];

    xf86DrvMsg(t->d.pI2CBus->scrnIndex, X_INFO, "tda9850_mute %s\n",
               mute ? "on" : "off");
    t->mute = mute;

    TDA9850(0x06,
            (t->stereo << 6) | (t->sap << 7) | (t->mute ? 0x8 : 0x0) | (t->
                                                                        sap_mute
                                                                        ? 0x10 :
                                                                        0x0));
}

void
tda9850_sap_mute(TDA9850Ptr t, Bool sap_mute)
{
    CARD8 data[2];

    xf86DrvMsg(t->d.pI2CBus->scrnIndex, X_INFO, "tda9850_sap_mute %s\n",
               sap_mute ? "on" : "off");
    t->sap_mute = sap_mute;

    TDA9850(0x06,
            (t->stereo << 6) | (t->sap << 7) | (t->mute ? 0x8 : 0x0) | (t->
                                                                        sap_mute
                                                                        ? 0x10 :
                                                                        0x0));
}

CARD16
tda9850_getstatus(TDA9850Ptr t)
{
    CARD16 status;

    I2C_WriteRead(&(t->d), NULL, 0, (I2CByte *) &status, 2);
    return status;
}
@


1.4
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@@


1.3
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d134 1
a134 1
    I2C_WriteRead(&(t->d), NULL, 0, (I2CByte *) & status, 2);
@


1.2
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d16 2
a17 1
TDA9850Ptr Detect_tda9850(I2CBusPtr b, I2CSlaveAddr addr)
d19 2
a20 34
  TDA9850Ptr t;
  I2CByte a;
  
  t = calloc(1, sizeof(TDA9850Rec));
  if(t == NULL) return NULL;
  switch(addr)
  {
      case TDA9850_ADDR_1:
	  t->d.DevName = "TDA9850 BTSC Stereo+SAP Audio Processor";
	  break;
      default:
          t->d.DevName = "Generic TDAxxxx";
	  break;
  }
  t->d.SlaveAddr = addr;
  t->d.pI2CBus = b;
  t->d.NextDev = NULL;
  t->d.StartTimeout = b->StartTimeout;
  t->d.BitTimeout = b->BitTimeout;
  t->d.AcknTimeout = b->AcknTimeout;
  t->d.ByteTimeout = b->ByteTimeout;
  
  if(!I2C_WriteRead(&(t->d), NULL, 0, &a, 1))
  {
     free(t);
     return NULL;
  }
  
  /* set default parameters */
  if(!I2CDevInit(&(t->d)))
  {
     free(t);
     return NULL;
  }
d22 105
a126 1
  return t;  
d129 2
a130 1
Bool tda9850_init(TDA9850Ptr t)
d132 1
a132 51
  t->stereo = 1;
  t->sap = 0;
  t->mute = TRUE;
  t->sap_mute = TRUE;
  tda9850_setaudio(t);
  return TRUE;
}

void tda9850_setaudio(TDA9850Ptr t)
{
CARD8 data[2];

if(t->mux==2)
{
   TDA9850(0x04,0x0F); TDA9850(0x05,0x0F); TDA9850(0x06, 0x58);
   TDA9850(0x07,0x07); TDA9850(0x08,0x00);
   TDA9850(0x09,0x00); TDA9850(0x0A,0x03); 
} else 
{
  TDA9850(0x04,0x07); TDA9850(0x05,0x07); 
  TDA9850(0x06,0x58); TDA9850(0x07,0x07); 
  TDA9850(0x08,0x10); TDA9850(0x09,0x10); 
  TDA9850(0x0A,0x03); 
}
	
TDA9850(0x06,(t->stereo<<6)|(t->sap<<7)|(t->mute?0x8:0)|(t->sap_mute?0x10:0x0)); 
}

void tda9850_mute(TDA9850Ptr t, Bool mute)
{
CARD8 data[2];

xf86DrvMsg(t->d.pI2CBus->scrnIndex, X_INFO, "tda9850_mute %s\n", mute ? "on" : "off");
t->mute = mute;
   
TDA9850(0x06,(t->stereo<<6)|(t->sap<<7)|(t->mute?0x8:0x0)|(t->sap_mute?0x10:0x0)); 
}

void tda9850_sap_mute(TDA9850Ptr t, Bool sap_mute)
{
CARD8 data[2];

xf86DrvMsg(t->d.pI2CBus->scrnIndex, X_INFO, "tda9850_sap_mute %s\n", sap_mute ? "on" : "off");
t->sap_mute = sap_mute;
   
TDA9850(0x06,(t->stereo<<6)|(t->sap<<7)|(t->mute?0x8:0x0)|(t->sap_mute?0x10:0x0)); 
}

CARD16 tda9850_getstatus(TDA9850Ptr t)
{
CARD16 status;
d134 2
a135 2
I2C_WriteRead(&(t->d), NULL, 0, (I2CByte *)&status, 2); 
return status;
@


1.1
log
@Initial revision
@
text
@d21 1
a21 1
  t = xcalloc(1, sizeof(TDA9850Rec));
d42 1
a42 1
     xfree(t);
d49 1
a49 1
     xfree(t);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
