head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.12
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.10
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.6
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.10
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.6
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2014.09.27.17.53.01;	author matthieu;	state Exp;
branches;
next	1.6;
commitid	cVXoV5PxI8YrEaVA;

1.6
date	2014.05.02.19.27.48;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2013.06.07.17.28.49;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.24;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.26;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.18.05;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.18.05;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.18.01.14;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/**************************************************************************

Copyright 1998-1999 Precision Insight, Inc., Cedar Park, Texas.
All Rights Reserved.

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sub license, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice (including the
next paragraph) shall be included in all copies or substantial portions
of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
IN NO EVENT SHALL PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**************************************************************************/

/*
 * Authors:
 *   Kevin E. Martin <kevin@@precisioninsight.com>
 *
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "xf86Module.h"
#include "xf86Priv.h"
#include "xf86.h"
#include "colormap.h"
#include "micmap.h"
#include "globals.h"
#include "glxserver.h"
#include "extinit.h"
#include "glx_extinit.h"

static MODULESETUPPROTO(glxSetup);

static const ExtensionModule GLXExt[] = {
    { GlxExtensionInit, "GLX", &noGlxExtension },
};

static XF86ModuleVersionInfo VersRec = {
    "glx",
    MODULEVENDORSTRING,
    MODINFOSTRING1,
    MODINFOSTRING2,
    XORG_VERSION_CURRENT,
    1, 0, 0,
    ABI_CLASS_EXTENSION,
    ABI_EXTENSION_VERSION,
    MOD_CLASS_NONE,
    {0, 0, 0, 0}
};

_X_EXPORT XF86ModuleData glxModuleData = { &VersRec, glxSetup, NULL };

static void *
glxSetup(void *module, void *opts, int *errmaj, int *errmin)
{
    static Bool setupDone = FALSE;
    __GLXprovider *provider;

    if (setupDone) {
        if (errmaj)
            *errmaj = LDR_ONCEONLY;
        return NULL;
    }

    setupDone = TRUE;

    xf86Msg(xf86Info.aiglxFrom, "AIGLX %s\n",
            xf86Info.aiglx ? "enabled" : "disabled");
    if (xf86Info.aiglx) {
        provider = LoaderSymbol("__glXDRI2Provider");
        if (provider)
            GlxPushProvider(provider);
    }

    LoadExtensionList(GLXExt, ARRAY_SIZE(GLXExt), FALSE);

    return module;
}
@


1.6
log
@Update to xserver 1.15.1.

Tested by at least ajacoutot@@, dcoppa@@ & jasper@@
@
text
@d50 2
a51 4
static const ExtensionModule GLXExt = {
    GlxExtensionInit,
    "GLX",
    &noGlxExtension
d69 2
a70 2
static pointer
glxSetup(pointer module, pointer opts, int *errmaj, int *errmin)
d91 1
a91 1
    LoadExtension(&GLXExt, FALSE);
@


1.5
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@a87 3
        provider = LoaderSymbol("__glXDRIProvider");
        if (provider)
            GlxPushProvider(provider);
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d45 2
d50 1
a50 3
static const char *initdeps[] = { "DOUBLE-BUFFER", "COMPOSITE", NULL };

static ExtensionModule GLXExt = {
d53 1
a53 3
    &noGlxExtension,
    NULL,
    initdeps
a83 5

    provider = LoaderSymbol("__glXDRISWRastProvider");
    if (provider == NULL)
        return NULL;
    GlxPushProvider(provider);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d50 1
a50 2
static ExtensionModule GLXExt =
{
d58 11
a68 12
static XF86ModuleVersionInfo VersRec =
{
        "glx",
        MODULEVENDORSTRING,
        MODINFOSTRING1,
        MODINFOSTRING2,
        XORG_VERSION_CURRENT,
        1, 0, 0,
        ABI_CLASS_EXTENSION,
        ABI_EXTENSION_VERSION,
        MOD_CLASS_NONE,
        {0,0,0,0}
d80 4
a83 3
	if (errmaj) *errmaj = LDR_ONCEONLY;
	return NULL;
    } 
d89 1
a89 1
	return NULL;
d92 2
a93 2
    xf86Msg(xf86Info.aiglxFrom, "AIGLX %s\n", 
	    xf86Info.aiglx ? "enabled" : "disabled");
d95 6
a100 6
      provider = LoaderSymbol("__glXDRIProvider");
      if (provider)
	GlxPushProvider(provider);
      provider = LoaderSymbol("__glXDRI2Provider");
      if (provider)
	GlxPushProvider(provider);
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a103 15
    switch (xf86Info.glxVisuals) {
    case XF86_GlxVisualsMinimal:
	GlxSetVisualConfig(GLX_MINIMAL_VISUALS);
	xf86Msg(xf86Info.aiglxFrom, "Exporting only minimal set of GLX visuals\n");
	break;
    case XF86_GlxVisualsTypical:
	GlxSetVisualConfig(GLX_TYPICAL_VISUALS);
	xf86Msg(xf86Info.aiglxFrom, "Exporting typical set of GLX visuals\n");
	break;
    case XF86_GlxVisualsAll:
	GlxSetVisualConfig(GLX_ALL_VISUALS);
	xf86Msg(xf86Info.aiglxFrom, "Exporting all GLX visuals\n");
	break;
    }

@


1.1
log
@Initial revision
@
text
@d44 1
a44 12

typedef struct __GLXscreen __GLXscreen;
typedef struct __GLXprovider __GLXprovider;
struct __GLXprovider {
    __GLXscreen *(*screenProbe)(ScreenPtr pScreen);
    const char    *name;
    __GLXprovider *next;
};

extern void GlxPushProvider(__GLXprovider *provider);
extern void GlxExtensionInit(void);
extern void GlxWrapInitVisuals(miInitVisualsProcPtr *);
d48 1
a48 1
static const char *initdeps[] = { "DOUBLE-BUFFER", NULL };
a74 32
/* We do a little proxy dance here, so we can avoid loading GLcore
 * unless we really need to.*/

static pointer glxModule;

static __GLXscreen *
__glXMesaProxyScreenProbe(ScreenPtr pScreen)
{
  pointer GLcore;
  static __GLXprovider *provider;

  if (provider == NULL) {
    GLcore = LoadSubModuleLocal(glxModule, "GLcore", NULL, NULL, NULL, NULL, 
				NULL, NULL);
    if (GLcore == NULL)
      return NULL;

    provider = LoaderSymbol("__glXMesaProvider");
    if (provider == NULL)
      return NULL;
  }

  return provider->screenProbe(pScreen);
}

static __GLXprovider __glXMesaProxyProvider = {
    __glXMesaProxyScreenProbe,
    "MESA-PROXY",
    NULL
};


d88 4
a91 2
    glxModule = module;
    GlxPushProvider(&__glXMesaProxyProvider);
d99 18
a119 4
    /* Wrap the init visuals routine in micmap.c */
    GlxWrapInitVisuals(&miInitVisualsProc);
    /* Make sure this gets wrapped each time InitVisualWrap is called */
    miHookInitVisuals(NULL, GlxWrapInitVisuals);
a120 1
 bail:
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d98 2
a99 2
    GLcore = LoadSubModule(glxModule, "GLcore", NULL, NULL, NULL, NULL, 
			   NULL, NULL);
@

