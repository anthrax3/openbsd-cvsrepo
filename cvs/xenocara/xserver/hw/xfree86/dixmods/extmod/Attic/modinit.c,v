head	1.8;
access;
symbols
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.1.1.0.6
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.4
	v1_4_0_90:1.1.1.1
	v1_4:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2013.06.07.17.28.50;	author matthieu;	state dead;
branches;
next	1.7;

1.7
date	2012.06.10.13.21.24;	author matthieu;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.05.13.32.51;	author matthieu;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.05.15.36.07;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.27.19.02.31;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2009.09.06.19.44.26;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.02.15.26.21;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.18.06;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.18.06;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@/*
 * Copyright (c) 1997 Matthieu Herrb
 *
 * Permission to use, copy, modify, distribute, and sell this software and its
 * documentation for any purpose is hereby granted without fee, provided that
 * the above copyright notice appear in all copies and that both that
 * copyright notice and this permission notice appear in supporting
 * documentation, and that the name of Matthieu Herrb not be used in
 * advertising or publicity pertaining to distribution of the software without
 * specific, written prior permission.  Matthieu Herrb makes no
 * representations about the suitability of this software for any purpose.
 *  It is provided "as is" without express or implied warranty.
 *
 * MATTHIEU HERRB DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
 * EVENT SHALL MATTHIEU HERRB BE LIABLE FOR ANY SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
 * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include "xf86Module.h"
#include "xf86Opt.h"

#include <X11/Xproto.h>

#include "modinit.h"
#include "globals.h"

static MODULESETUPPROTO(extmodSetup);

/*
 * Array describing extensions to be initialized
 */
static ExtensionModule extensionModules[] = {
#ifdef XSELINUX
    {
     SELinuxExtensionInit,
     SELINUX_EXTENSION_NAME,
     &noSELinuxExtension,
     NULL,
     NULL},
#endif
#ifdef SCREENSAVER
    {
     ScreenSaverExtensionInit,
     ScreenSaverName,
     &noScreenSaverExtension,
     NULL,
     NULL},
#endif
#ifdef XF86VIDMODE
    {
     XFree86VidModeExtensionInit,
     XF86VIDMODENAME,
     &noXFree86VidModeExtension,
     NULL,
     NULL},
#endif
#ifdef XFreeXDGA
    {
     XFree86DGAExtensionInit,
     XF86DGANAME,
     &noXFree86DGAExtension,
     XFree86DGARegister,
     NULL},
#endif
#ifdef DPMSExtension
    {
     DPMSExtensionInit,
     DPMSExtensionName,
     &noDPMSExtension,
     NULL,
     NULL},
#endif
#ifdef XV
    {
     XvExtensionInit,
     XvName,
     &noXvExtension,
     XvRegister,
     NULL},
    {
     XvMCExtensionInit,
     XvMCName,
     &noXvExtension,
     NULL,
     NULL},
#endif
#ifdef RES
    {
     ResExtensionInit,
     XRES_NAME,
     &noResExtension,
     NULL,
     NULL},
#endif
    {                           /* DON'T delete this entry ! */
     NULL,
     NULL,
     NULL,
     NULL,
     NULL}
};

static XF86ModuleVersionInfo VersRec = {
    "extmod",
    MODULEVENDORSTRING,
    MODINFOSTRING1,
    MODINFOSTRING2,
    XORG_VERSION_CURRENT,
    1, 0, 0,
    ABI_CLASS_EXTENSION,
    ABI_EXTENSION_VERSION,
    MOD_CLASS_EXTENSION,
    {0, 0, 0, 0}
};

/*
 * Data for the loader
 */
_X_EXPORT XF86ModuleData extmodModuleData = { &VersRec, extmodSetup, NULL };

static pointer
extmodSetup(pointer module, pointer opts, int *errmaj, int *errmin)
{
    int i;

    /* XXX the option stuff here is largely a sample/test case */

    for (i = 0; extensionModules[i].name != NULL; i++) {
        if (opts) {
            char *s;

            if (asprintf(&s, "omit%s", extensionModules[i].name) != -1) {
                pointer o;

                o = xf86FindOption(opts, s);
                free(s);
                if (o) {
                    xf86MarkOptionUsed(o);
                    continue;
                }
            }
        }

#ifdef XSELINUX
        if (!strcmp(SELINUX_EXTENSION_NAME, extensionModules[i].name)) {
            pointer o;

            selinuxEnforcingState = SELINUX_MODE_DEFAULT;

            if ((o = xf86FindOption(opts, "SELinux mode disabled"))) {
                xf86MarkOptionUsed(o);
                selinuxEnforcingState = SELINUX_MODE_DISABLED;
            }
            if ((o = xf86FindOption(opts, "SELinux mode permissive"))) {
                xf86MarkOptionUsed(o);
                selinuxEnforcingState = SELINUX_MODE_PERMISSIVE;
            }
            if ((o = xf86FindOption(opts, "SELinux mode enforcing"))) {
                xf86MarkOptionUsed(o);
                selinuxEnforcingState = SELINUX_MODE_ENFORCING;
            }
        }
#endif

        LoadExtension(&extensionModules[i], FALSE);
    }
    /* Need a non-NULL return */
    return (pointer) 1;
}
@


1.7
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@@


1.6
log
@Update to xserver 1.11.2
@
text
@d43 5
a47 6
	SELinuxExtensionInit,
	SELINUX_EXTENSION_NAME,
	&noSELinuxExtension,
	NULL,
	NULL
    },
d51 5
a55 6
	ScreenSaverExtensionInit,
	ScreenSaverName,
	&noScreenSaverExtension,
	NULL,
	NULL
    },
d59 5
a63 6
	XFree86VidModeExtensionInit,
	XF86VIDMODENAME,
	&noXFree86VidModeExtension,
	NULL,
	NULL
    },
d67 5
a71 6
	XFree86DGAExtensionInit,
	XF86DGANAME,
	&noXFree86DGAExtension,
	XFree86DGARegister,
	NULL
    },
d75 5
a79 6
	DPMSExtensionInit,
	DPMSExtensionName,
	&noDPMSExtension,
	NULL,
	NULL
    },
d83 11
a93 13
	XvExtensionInit,
	XvName,
	&noXvExtension,
	XvRegister,
	NULL
    },
    {
        XvMCExtensionInit,
        XvMCName,
        &noXvExtension,
        NULL,
        NULL
    },
d97 12
a108 14
        ResExtensionInit,
        XRES_NAME, 
        &noResExtension,
        NULL,
        NULL
    },
#endif
    {				/* DON'T delete this entry ! */
	NULL,
	NULL,
	NULL,
	NULL,
	NULL
    }
d111 11
a121 12
static XF86ModuleVersionInfo VersRec =
{
	"extmod",
	MODULEVENDORSTRING,
	MODINFOSTRING1,
	MODINFOSTRING2,
	XORG_VERSION_CURRENT,
	1, 0, 0,
	ABI_CLASS_EXTENSION,
	ABI_EXTENSION_VERSION,
	MOD_CLASS_EXTENSION,
	{0,0,0,0}
d137 14
a150 12
	if (opts) {
	    char *s;
	    if (asprintf(&s, "omit%s", extensionModules[i].name) != -1) {
		pointer o;
		o = xf86FindOption(opts, s);
		free(s);
		if (o) {
		    xf86MarkOptionUsed(o);
		    continue;
		}
	    }
	}
d153 18
a170 17
	if (! strcmp(SELINUX_EXTENSION_NAME, extensionModules[i].name)) {
	    pointer o;
	    selinuxEnforcingState = SELINUX_MODE_DEFAULT;

	    if ((o = xf86FindOption(opts, "SELinux mode disabled"))) {
		xf86MarkOptionUsed(o);
		selinuxEnforcingState = SELINUX_MODE_DISABLED;
	    }
	    if ((o = xf86FindOption(opts, "SELinux mode permissive"))) {
		xf86MarkOptionUsed(o);
		selinuxEnforcingState = SELINUX_MODE_PERMISSIVE;
	    }
	    if ((o = xf86FindOption(opts, "SELinux mode enforcing"))) {
		xf86MarkOptionUsed(o);
		selinuxEnforcingState = SELINUX_MODE_ENFORCING;
	    }
	}
d173 1
a173 1
	LoadExtension(&extensionModules[i], FALSE);
d176 1
a176 1
    return (pointer)1;
@


1.5
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d149 1
a149 2
	    s = (char *)malloc(strlen(extensionModules[i].name) + 5);
	    if (s) {
a150 2
		strcpy(s, "omit");
		strcat(s, extensionModules[i].name);
@


1.4
log
@Update to xserver 1.8. Tested by many. Ok oga@@, todd@@.
@
text
@a49 9
#ifdef MULTIBUFFER
    {
	MultibufferExtensionInit,
	MULTIBUFFER_PROTOCOL_NAME,
	&noMultibufferExtension,
	NULL,
	NULL
    },
#endif
d149 1
a149 1
	    s = (char *)xalloc(strlen(extensionModules[i].name) + 5);
d155 1
a155 1
		xfree(s);
@


1.3
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@a58 9
#ifdef notyet
    {
	XTestExtensionInit,
	XTestExtensionName,
	&noTestExtensions,
	NULL,
	NULL
    },
#endif
@


1.2
log
@xserver 1.5.2. tested by ckuethe@@, oga@@, and others.
@
text
@a49 9
#ifdef SHAPE
    {
	ShapeExtensionInit,
	SHAPENAME,
	&noShapeExtension,
	NULL,
	NULL
    },
#endif
a58 9
#ifdef MITMISC
    {
	MITMiscExtensionInit,
	MITMISCNAME,
	&noMITMiscExtension,
	NULL,
	NULL
    },
#endif
a67 18
#ifdef BIGREQS
     {
	BigReqExtensionInit,
	XBigReqExtensionName,
	&noBigReqExtension,
	NULL,
	NULL
     },
#endif
#ifdef XSYNC
    {
	SyncExtensionInit,
	SYNC_NAME,
	&noSyncExtension,
	NULL,
	NULL
    },
#endif
a76 9
#ifdef XCMISC
    {
	XCMiscExtensionInit,
	XCMiscExtensionName,
	&noXCMiscExtension,
	NULL,
	NULL
    },
#endif
a85 9
#ifdef XF86MISC
    {
	XFree86MiscExtensionInit,
	XF86MISCNAME,
	&noXFree86MiscExtension,
	NULL,
	NULL
    },
#endif
a99 27
	NULL,
	NULL
    },
#endif
#ifdef FONTCACHE
    {
	FontCacheExtensionInit,
	FONTCACHENAME,
	&noFontCacheExtension,
	NULL,
	NULL
    },
#endif
#ifdef TOGCUP
    {
	XcupExtensionInit,
	XCUPNAME,
	&noXcupExtension,
	NULL,
	NULL
    },
#endif
#ifdef EVI
    {
	EVIExtensionInit,
	EVINAME,
	&noEVIExtension,
@


1.1
log
@Initial revision
@
text
@d41 9
d261 21
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@
