head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.4
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.2.0.8
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.6
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.4
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.2
	v1_4_0_90:1.1.1.2
	v1_4:1.1.1.2
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	v1_2_0:1.1.1.1
	v1_1_99_903:1.1.1.1
	v1_1_99_902:1.1.1.1
	xorg:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.09.27.17.53.02;	author matthieu;	state Exp;
branches;
next	1.5;
commitid	cVXoV5PxI8YrEaVA;

1.5
date	2013.06.07.17.28.51;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2012.06.10.13.21.24;	author matthieu;	state Exp;
branches;
next	1.3;

1.3
date	2010.12.05.15.36.07;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.19.44.26;	author matthieu;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.18.20.58;	author matthieu;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.11.26.18.20.58;	author matthieu;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2007.11.24.17.58.10;	author matthieu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to xserver 1.16.1.

Tested by naddy@@, jsg@@ & kettenis@@
@
text
@/*
 *                   XFree86 int10 module
 *   execute BIOS int 10h calls in x86 real mode environment
 *                 Copyright 1999 Egbert Eich
 */
#ifdef HAVE_XORG_CONFIG_H
#include <xorg-config.h>
#endif

#include <string.h>
#include <stdlib.h>

#include "xf86.h"
#include "xf86_OSproc.h"
#include "compiler.h"
#include "xf86Pci.h"
#define _INT10_PRIVATE
#if 0
#include "int10Defines.h"
#endif
#include "xf86int10.h"

#define REG pInt

typedef enum {
    OPT_NOINT10,
    OPT_INIT_PRIMARY,
} INT10Opts;

static const OptionInfoRec INT10Options[] = {
    {OPT_NOINT10, "NoINT10", OPTV_BOOLEAN, {0}, FALSE},
    {OPT_INIT_PRIMARY, "InitPrimary", OPTV_BOOLEAN, {0}, FALSE},
    {-1, NULL, OPTV_NONE, {0}, FALSE},
};

#ifdef DEBUG
void
dprint(unsigned long start, unsigned long size)
{
    int i, j;
    char *c = (char *) start;

    for (j = 0; j < (size >> 4); j++) {
        char *d = c;

        ErrorF("\n0x%lx:  ", (unsigned long) c);
        for (i = 0; i < 16; i++)
            ErrorF("%2.2x ", (unsigned char) (*(c++)));
        c = d;
        for (i = 0; i < 16; i++) {
            ErrorF("%c", ((((CARD8) (*c)) > 32) && (((CARD8) (*c)) < 128)) ?
                   (unsigned char) (*(c)) : '.');
            c++;
        }
    }
    ErrorF("\n");
}
#endif

#ifndef _PC
/*
 * here we are really paranoid about faking a "real"
 * BIOS. Most of this information was pulled from
 * dosemu.
 */
void
setup_int_vect(xf86Int10InfoPtr pInt)
{
    int i;

    /* let the int vects point to the SYS_BIOS seg */
    for (i = 0; i < 0x80; i++) {
        MEM_WW(pInt, i << 2, 0);
        MEM_WW(pInt, (i << 2) + 2, SYS_BIOS >> 4);
    }

    reset_int_vect(pInt);
    /* font tables default location (int 1F) */
    MEM_WW(pInt, 0x1f << 2, 0xfa6e);

    /* int 11 default location (Get Equipment Configuration) */
    MEM_WW(pInt, 0x11 << 2, 0xf84d);
    /* int 12 default location (Get Conventional Memory Size) */
    MEM_WW(pInt, 0x12 << 2, 0xf841);
    /* int 15 default location (I/O System Extensions) */
    MEM_WW(pInt, 0x15 << 2, 0xf859);
    /* int 1A default location (RTC, PCI and others) */
    MEM_WW(pInt, 0x1a << 2, 0xff6e);
    /* int 05 default location (Bound Exceeded) */
    MEM_WW(pInt, 0x05 << 2, 0xff54);
    /* int 08 default location (Double Fault) */
    MEM_WW(pInt, 0x08 << 2, 0xfea5);
    /* int 13 default location (Disk) */
    MEM_WW(pInt, 0x13 << 2, 0xec59);
    /* int 0E default location (Page Fault) */
    MEM_WW(pInt, 0x0e << 2, 0xef57);
    /* int 17 default location (Parallel Port) */
    MEM_WW(pInt, 0x17 << 2, 0xefd2);
    /* fdd table default location (int 1e) */
    MEM_WW(pInt, 0x1e << 2, 0xefc7);

    /* Set Equipment flag to VGA */
    i = MEM_RB(pInt, 0x0410) & 0xCF;
    MEM_WB(pInt, 0x0410, i);
    /* XXX Perhaps setup more of the BDA here.  See also int42(0x00). */
}
#endif

int
setup_system_bios(void *base_addr)
{
    char *base = (char *) base_addr;

    /*
     * we trap the "industry standard entry points" to the BIOS
     * and all other locations by filling them with "hlt"
     * TODO: implement hlt-handler for these
     */
    memset(base, 0xf4, 0x10000);

    /* set bios date */
    strcpy(base + 0x0FFF5, "06/11/99");
    /* set up eisa ident string */
    strcpy(base + 0x0FFD9, "PCI_ISA");
    /* write system model id for IBM-AT */
    *((unsigned char *) (base + 0x0FFFE)) = 0xfc;

    return 1;
}

void
reset_int_vect(xf86Int10InfoPtr pInt)
{
    /*
     * This table is normally located at 0xF000:0xF0A4.  However, int 0x42,
     * function 0 (Mode Set) expects it (or a copy) somewhere in the bottom
     * 64kB.  Note that because this data doesn't survive POST, int 0x42 should
     * only be used during EGA/VGA BIOS initialisation.
     */
    static const CARD8 VideoParms[] = {
        /* Timing for modes 0x00 & 0x01 */
        0x38, 0x28, 0x2d, 0x0a, 0x1f, 0x06, 0x19, 0x1c,
        0x02, 0x07, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00,
        /* Timing for modes 0x02 & 0x03 */
        0x71, 0x50, 0x5a, 0x0a, 0x1f, 0x06, 0x19, 0x1c,
        0x02, 0x07, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00,
        /* Timing for modes 0x04, 0x05 & 0x06 */
        0x38, 0x28, 0x2d, 0x0a, 0x7f, 0x06, 0x64, 0x70,
        0x02, 0x01, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00,
        /* Timing for mode 0x07 */
        0x61, 0x50, 0x52, 0x0f, 0x19, 0x06, 0x19, 0x19,
        0x02, 0x0d, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,
        /* Display page lengths in little endian order */
        0x00, 0x08,             /* Modes 0x00 and 0x01 */
        0x00, 0x10,             /* Modes 0x02 and 0x03 */
        0x00, 0x40,             /* Modes 0x04 and 0x05 */
        0x00, 0x40,             /* Modes 0x06 and 0x07 */
        /* Number of columns for each mode */
        40, 40, 80, 80, 40, 40, 80, 80,
        /* CGA Mode register value for each mode */
        0x2c, 0x28, 0x2d, 0x29, 0x2a, 0x2e, 0x1e, 0x29,
        /* Padding */
        0x00, 0x00, 0x00, 0x00
    };
    int i;

    for (i = 0; i < sizeof(VideoParms); i++)
        MEM_WB(pInt, i + (0x1000 - sizeof(VideoParms)), VideoParms[i]);
    MEM_WW(pInt, 0x1d << 2, 0x1000 - sizeof(VideoParms));
    MEM_WW(pInt, (0x1d << 2) + 2, 0);

    MEM_WW(pInt, 0x10 << 2, 0xf065);
    MEM_WW(pInt, (0x10 << 2) + 2, SYS_BIOS >> 4);
    MEM_WW(pInt, 0x42 << 2, 0xf065);
    MEM_WW(pInt, (0x42 << 2) + 2, SYS_BIOS >> 4);
    MEM_WW(pInt, 0x6D << 2, 0xf065);
    MEM_WW(pInt, (0x6D << 2) + 2, SYS_BIOS >> 4);
}

void
set_return_trap(xf86Int10InfoPtr pInt)
{
    /*
     * Here we set the exit condition:  We return when we encounter
     * 'hlt' (=0xf4), which we locate at address 0x600 in x86 memory.
     */
    MEM_WB(pInt, 0x0600, 0xf4);

    /*
     * Allocate a segment for the stack
     */
    xf86Int10AllocPages(pInt, 1, &pInt->stackseg);
}

void *
xf86HandleInt10Options(ScrnInfoPtr pScrn, int entityIndex)
{
    EntityInfoPtr pEnt = xf86GetEntityInfo(entityIndex);
    OptionInfoPtr options = NULL;

    if (pEnt->device) {
        void *configOptions = NULL;

        /* Check if xf86CollectOptions() has already been called */
        if (((pEnt->index < 0) ||
             !pScrn || !(configOptions = pScrn->options)) && pEnt->device)
            configOptions = pEnt->device->options;

        if (configOptions) {
            if (!(options = (OptionInfoPtr) malloc(sizeof(INT10Options))))
                return NULL;

            (void) memcpy(options, INT10Options, sizeof(INT10Options));
            xf86ProcessOptions(pScrn->scrnIndex, configOptions, options);
        }
    }
    free(pEnt);

    return options;
}

Bool
int10skip(const void *options)
{
    Bool noint10 = FALSE;

    if (!options)
        return FALSE;

    xf86GetOptValBool(options, OPT_NOINT10, &noint10);
    return noint10;
}

Bool
int10_check_bios(int scrnIndex, int codeSeg, const unsigned char *vbiosMem)
{
    int size;

    if ((codeSeg & 0x1f) ||     /* Not 512-byte aligned otherwise */
        ((codeSeg << 4) < V_BIOS) || ((codeSeg << 4) >= SYS_SIZE))
        return FALSE;

    if ((*vbiosMem != 0x55) || (*(vbiosMem + 1) != 0xAA) || !*(vbiosMem + 2))
        return FALSE;

    size = *(vbiosMem + 2) * 512;

    if ((size + (codeSeg << 4)) > SYS_SIZE)
        return FALSE;

    if (bios_checksum(vbiosMem, size))
        xf86DrvMsg(scrnIndex, X_INFO, "Bad V_BIOS checksum\n");

    return TRUE;
}

Bool
initPrimary(const void *options)
{
    Bool initPrimary = FALSE;

    if (!options)
        return FALSE;

    xf86GetOptValBool(options, OPT_INIT_PRIMARY, &initPrimary);
    return initPrimary;
}

BusType
xf86int10GetBiosLocationType(const xf86Int10InfoPtr pInt)
{
    BusType location_type;

    EntityInfoPtr pEnt = xf86GetEntityInfo(pInt->entityIndex);

    location_type = pEnt->location.type;
    free(pEnt);

    return location_type;
}

#define CHECK_V_SEGMENT_RANGE(x)   \
    if (((x) << 4) < V_BIOS) { \
	xf86DrvMsg(pInt->pScrn->scrnIndex, X_ERROR, \
		   "V_BIOS address 0x%lx out of range\n", \
		   (unsigned long)(x) << 4); \
	return FALSE; \
    }

Bool
xf86int10GetBiosSegment(xf86Int10InfoPtr pInt, void *base)
{
    unsigned i;
    int cs = ~0;
    int segments[4];

    segments[0] = MEM_RW(pInt, (0x10 << 2) + 2);
    segments[1] = MEM_RW(pInt, (0x42 << 2) + 2);
    segments[2] = V_BIOS >> 4;
    segments[3] = ~0;

    for (i = 0; segments[i] != ~0; i++) {
        unsigned char *vbiosMem;

        cs = segments[i];

        CHECK_V_SEGMENT_RANGE(cs);
        vbiosMem = (unsigned char *) base + (cs << 4);
        if (int10_check_bios(pInt->pScrn->scrnIndex, cs, vbiosMem)) {
            break;
        }
    }

    if (segments[i] == ~0) {
        xf86DrvMsg(pInt->pScrn->scrnIndex, X_ERROR, "No V_BIOS found\n");
        return FALSE;
    }

    xf86DrvMsg(pInt->pScrn->scrnIndex, X_INFO, "Primary V_BIOS segment is: 0x%lx\n",
               (unsigned long) cs);

    pInt->BIOSseg = cs;
    return TRUE;
}
@


1.5
log
@Update to X server 1.14.1. Tested by many during t2k13. Thanks.
@
text
@d202 1
a202 1
        pointer configOptions = NULL;
@


1.4
log
@Update to xserver 1.12.2. tested by naddy@@, krw@@, mpi@@.
@
text
@d284 1
a284 1
	xf86DrvMsg(pInt->scrnIndex, X_ERROR, \
d309 1
a309 1
        if (int10_check_bios(pInt->scrnIndex, cs, vbiosMem)) {
d315 1
a315 1
        xf86DrvMsg(pInt->scrnIndex, X_ERROR, "No V_BIOS found\n");
d319 1
a319 1
    xf86DrvMsg(pInt->scrnIndex, X_INFO, "Primary V_BIOS segment is: 0x%lx\n",
@


1.3
log
@Upgrade to xorg-server 1.9.2.
Tested by ajacoutot@@, krw@@, shadchin@@ and jasper@@ on various configurations
including multihead with both zaphod and xrandr.
@
text
@d31 3
a33 3
    {OPT_NOINT10,       "NoINT10",      OPTV_BOOLEAN,   {0},    FALSE },
    {OPT_INIT_PRIMARY,  "InitPrimary",  OPTV_BOOLEAN,   {0},    FALSE },   
    { -1,		NULL,		OPTV_NONE,	{0},	FALSE },
d40 2
a41 2
    int i,j;
    char *c = (char *)start;
d44 11
a54 10
	char *d = c;
	ErrorF("\n0x%lx:  ",(unsigned long)c);
	for (i = 0; i<16; i++)
	    ErrorF("%2.2x ",(unsigned char) (*(c++)));
	c = d;
	for (i = 0; i<16; i++) {
	    ErrorF("%c",((((CARD8)(*c)) > 32) && (((CARD8)(*c)) < 128)) ?
		   (unsigned char) (*(c)): '.');
	    c++;
	}
d73 2
a74 2
	MEM_WW(pInt, i << 2, 0);
	MEM_WW(pInt, (i << 2) + 2, SYS_BIOS >> 4);
d79 1
a79 1
    MEM_WW(pInt,0x1f<<2,0xfa6e);
d126 1
a126 1
    *((unsigned char *)(base + 0x0FFFE)) = 0xfc;
d141 24
a164 24
	/* Timing for modes 0x00 & 0x01 */
	0x38, 0x28, 0x2d, 0x0a, 0x1f, 0x06, 0x19, 0x1c,
	0x02, 0x07, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00,
	/* Timing for modes 0x02 & 0x03 */
	0x71, 0x50, 0x5a, 0x0a, 0x1f, 0x06, 0x19, 0x1c,
	0x02, 0x07, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00,
	/* Timing for modes 0x04, 0x05 & 0x06 */
	0x38, 0x28, 0x2d, 0x0a, 0x7f, 0x06, 0x64, 0x70,
	0x02, 0x01, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00,
	/* Timing for mode 0x07 */
	0x61, 0x50, 0x52, 0x0f, 0x19, 0x06, 0x19, 0x19,
	0x02, 0x0d, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,
	/* Display page lengths in little endian order */
	0x00, 0x08, /* Modes 0x00 and 0x01 */
	0x00, 0x10, /* Modes 0x02 and 0x03 */
	0x00, 0x40, /* Modes 0x04 and 0x05 */
	0x00, 0x40, /* Modes 0x06 and 0x07 */
	/* Number of columns for each mode */
	40, 40, 80, 80, 40, 40, 80, 80,
	/* CGA Mode register value for each mode */
	0x2c, 0x28, 0x2d, 0x29, 0x2a, 0x2e, 0x1e, 0x29,
	/* Padding */
	0x00, 0x00, 0x00, 0x00
	};
d168 2
a169 2
	MEM_WB(pInt, i + (0x1000 - sizeof(VideoParms)), VideoParms[i]);
    MEM_WW(pInt,  0x1d << 2, 0x1000 - sizeof(VideoParms));
d172 1
a172 1
    MEM_WW(pInt,  0x10 << 2, 0xf065);
d174 1
a174 1
    MEM_WW(pInt,  0x42 << 2, 0xf065);
d176 1
a176 1
    MEM_WW(pInt,  0x6D << 2, 0xf065);
d200 1
a200 1
    
d202 1
a202 1
	pointer configOptions = NULL;
d204 12
a215 14
	/* Check if xf86CollectOptions() has already been called */
	if (((pEnt->index < 0) ||
	    !pScrn ||
	    !(configOptions = pScrn->options)) &&
	    pEnt->device)
	    configOptions = pEnt->device->options;

	if (configOptions) {
	    if (!(options = (OptionInfoPtr) malloc(sizeof(INT10Options))))
		return NULL;
	     
	    (void)memcpy(options, INT10Options, sizeof(INT10Options));
	    xf86ProcessOptions(pScrn->scrnIndex, configOptions, options);
	}
d223 1
a223 1
int10skip(const void* options)
d227 3
a229 2
    if (!options) return FALSE;
    
d235 1
a235 1
int10_check_bios(int scrnIndex, int codeSeg, const unsigned char* vbiosMem)
d239 3
a241 7
    if ((codeSeg & 0x1f) ||	/* Not 512-byte aligned otherwise */
	((codeSeg << 4) < V_BIOS) ||
	((codeSeg << 4) >= SYS_SIZE))
	return FALSE;

    if (xf86IsPc98())
	return FALSE;
d243 2
a244 2
    if ((*vbiosMem != 0x55) || (*(vbiosMem+1) != 0xAA) || !*(vbiosMem+2))
	return FALSE;
d249 1
a249 1
	return FALSE;
d252 1
a252 1
	xf86DrvMsg(scrnIndex, X_INFO, "Bad V_BIOS checksum\n");
d258 1
a258 1
initPrimary(const void* options)
d262 3
a264 2
    if (!options) return FALSE;
    
d275 1
a281 1

d303 1
a303 1
	unsigned char * vbiosMem;
d305 1
a305 1
	cs = segments[i];
d307 5
a311 5
	CHECK_V_SEGMENT_RANGE(cs);
	vbiosMem = (unsigned char *)base + (cs << 4);
	if (int10_check_bios(pInt->scrnIndex, cs, vbiosMem)) {
	    break;
	}
d315 2
a316 2
	xf86DrvMsg(pInt->scrnIndex, X_ERROR, "No V_BIOS found\n");
	return FALSE;
d320 1
a320 1
	    (unsigned long)cs);
@


1.2
log
@update to xserver 1.6.4rc1. Tested by many, ok oga@@.
@
text
@d211 1
a211 1
	    if (!(options = (OptionInfoPtr) xalloc(sizeof(INT10Options))))
d218 1
a218 1
    xfree(pEnt);
d279 1
a279 1
    xfree(pEnt);
a298 1
    const char * format;
a304 2
    format = "No V_BIOS found\n";

d318 1
a318 1
	xf86DrvMsg(pInt->scrnIndex, X_ERROR, format, (unsigned long)cs << 4);
@


1.1
log
@Initial revision
@
text
@a27 1
    OPT_BIOS_LOCATION
a32 1
    {OPT_BIOS_LOCATION, "BiosLocation",	OPTV_STRING,	{0},	FALSE },
d256 1
a256 1
	xf86DrvMsg(scrnIndex, X_WARNING, "Bad V_BIOS checksum\n");
a271 57
/*
 * xf86int10ParseBiosLocation(): allows to set the location of the
 * BIOS. One may select a BIOS of another card for posting or the
 * legacy V_BIOS range located at 0xc0000 or an alternative address
 * (BUS_ISA).
 * This is only useful under very special circumstances and should
 * be used with extreme care.
 */
void
xf86int10ParseBiosLocation(const void* options,
			   xf86int10BiosLocationPtr bios)
{
    const char *p;
    const char *str;

    bios->bus = BUS_NONE;

    if ((options == NULL) 
	|| ((str = xf86GetOptValString(options, OPT_BIOS_LOCATION)) == NULL)) {
	return;
    }

    if (strncasecmp(str, "pci", 3) == 0) {
	bios->bus = BUS_PCI;
    } else if (strncasecmp(str, "primary", 7) == 0) {
	bios->bus = BUS_ISA;
    }
    else {
	return;
    }
    
    p = strchr(str, ':');
		     
    switch (bios->bus) {
    case BUS_ISA:
	bios->location.legacy = (p != NULL) ? atoi(++p) : 0;
	break;
    case BUS_PCI:
	if (p) {
	    bios->location.pci.bus = atoi(++p);
	    if ((p = strchr(p, ':'))) {
		bios->location.pci.dev = atoi(++p);
		if ((p = strchr(p, ':'))) {
		    bios->location.pci.func = atoi(++p);
		    break;
		}
	    }
	}
	/* fall through */
	bios->bus = BUS_NONE;
	break;
    default:
	break;
    }
}


d273 1
a273 2
xf86int10GetBiosLocationType(const xf86Int10InfoPtr pInt,
			     const xf86int10BiosLocationPtr bios)
d275 1
a275 1
    BusType location_type = bios->bus;
d277 3
a279 23
    switch (location_type) {
    case BUS_PCI:
	xf86DrvMsg(pInt->scrnIndex,X_CONFIG,"Overriding bios location: "
		   "PCI:%i:%i%i\n",bios->location.pci.bus,
		   bios->location.pci.dev,bios->location.pci.func);
	break;
    case BUS_ISA:
	if (bios->location.legacy)
	    xf86DrvMsg(pInt->scrnIndex,X_CONFIG,"Overriding bios location: "
		       "Legacy:0x%x\n",bios->location.legacy);
	else
	    xf86DrvMsg(pInt->scrnIndex,X_CONFIG,"Overriding bios location: "
		       "Legacy\n");
	break;
    case BUS_NONE: {
	EntityInfoPtr pEnt = xf86GetEntityInfo(pInt->entityIndex);
	location_type = pEnt->location.type;
	xfree(pEnt);
	break;
    }
    default:
	break;
    }
d294 1
a294 2
xf86int10GetBiosSegment(xf86Int10InfoPtr pInt,
			const xf86int10BiosLocationPtr bios, void * base)
d301 4
d306 1
a306 25
    if (bios->bus == BUS_ISA && bios->location.legacy) {
	xf86DrvMsg(pInt->scrnIndex, X_CONFIG, 
		   "Overriding BIOS location: 0x%x\n",
		   bios->location.legacy);

	segments[0] = bios->location.legacy >> 4;
	segments[1] = ~0;

	format = "No V_BIOS at specified address 0x%lx\n";
    } else {
	if (bios->bus == BUS_PCI) {
	    xf86DrvMsg(pInt->scrnIndex, X_WARNING,
		       "Option BiosLocation for primary device ignored: "
		       "It points to PCI.\n");
	    xf86DrvMsg(pInt->scrnIndex, X_WARNING,
		       "You must set Option InitPrimary also\n");
	}

	segments[0] = MEM_RW(pInt, (0x10 << 2) + 2);
	segments[1] = MEM_RW(pInt, (0x42 << 2) + 2);
	segments[2] = V_BIOS >> 4;
	segments[3] = ~0;

	format = "No V_BIOS found\n";
    }
d326 1
a326 1
	       (unsigned long)cs);
@


1.1.1.1
log
@Importing xserver from X.Org 7.2RC2
@
text
@@


1.1.1.2
log
@xserver 1.4
@
text
@d28 1
d34 1
d274 57
d332 2
a333 1
xf86int10GetBiosLocationType(const xf86Int10InfoPtr pInt)
d335 1
a335 1
    BusType location_type;
d337 23
a359 3
    EntityInfoPtr pEnt = xf86GetEntityInfo(pInt->entityIndex);
    location_type = pEnt->location.type;
    xfree(pEnt);
d374 2
a375 1
xf86int10GetBiosSegment(xf86Int10InfoPtr pInt, void *base)
a381 4
    segments[0] = MEM_RW(pInt, (0x10 << 2) + 2);
    segments[1] = MEM_RW(pInt, (0x42 << 2) + 2);
    segments[2] = V_BIOS >> 4;
    segments[3] = ~0;
d383 25
a407 1
    format = "No V_BIOS found\n";
d427 1
a427 1
	    (unsigned long)cs);
@

